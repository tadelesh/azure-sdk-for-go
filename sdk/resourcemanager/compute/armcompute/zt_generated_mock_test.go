//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armcompute_test

import (
	"context"
	"fmt"
	"log"
	"net/http"
	"os"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/cloud"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/compute/armcompute"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestOperations_List(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/Operations_List_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Operations_List_MaximumSet_Gen"},
	})
	client, err := armcompute.NewOperationsClient(cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := client.NewListPager(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/Operations_List_MaximumSet_Gen.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcompute.OperationListResult{
			Value: []*armcompute.OperationValue{
				{
					Name: to.Ptr("aaaaaaaaaaaa"),
					Display: &armcompute.OperationValueDisplay{
						Description: to.Ptr("aaaaaaaaaaaaaaaaaaaaaa"),
						Operation:   to.Ptr("aaaaaaaaaaaaaaaaaaaaaa"),
						Provider:    to.Ptr("aaaaaaaaaaaaaaaaaa"),
						Resource:    to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
					},
					Origin: to.Ptr("aaaaa"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OperationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OperationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/Operations_List_MaximumSet_Gen.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/Operations_List_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Operations_List_MinimumSet_Gen"},
	})
	client, err = armcompute.NewOperationsClient(cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager = client.NewListPager(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/Operations_List_MinimumSet_Gen.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcompute.OperationListResult{}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OperationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OperationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/Operations_List_MinimumSet_Gen.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAvailabilitySets_CreateOrUpdate(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAnAvailabilitySet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create an availability set."},
	})
	client, err := armcompute.NewAvailabilitySetsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := client.CreateOrUpdate(ctx,
		"myResourceGroup",
		"myAvailabilitySet",
		armcompute.AvailabilitySet{
			Location: to.Ptr("westus"),
			Properties: &armcompute.AvailabilitySetProperties{
				PlatformFaultDomainCount:  to.Ptr[int32](2),
				PlatformUpdateDomainCount: to.Ptr[int32](20),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAnAvailabilitySet.json: %v", err)
	}
	// Response check
	exampleRes := armcompute.AvailabilitySet{
		Name:     to.Ptr("myAvailabilitySet"),
		Type:     to.Ptr("Microsoft.Compute/availabilitySets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/availabilitySets/myAvailabilitySet"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.AvailabilitySetProperties{
			PlatformFaultDomainCount:  to.Ptr[int32](2),
			PlatformUpdateDomainCount: to.Ptr[int32](20),
		},
		SKU: &armcompute.SKU{
			Name: to.Ptr("Classic"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.AvailabilitySet) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.AvailabilitySet)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAnAvailabilitySet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestAvailabilitySets_Update(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/AvailabilitySets_Update_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AvailabilitySets_Update_MaximumSet_Gen"},
	})
	client, err := armcompute.NewAvailabilitySetsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := client.Update(ctx,
		"rgcompute",
		"aaaaaaaaaaaaaaaaaaa",
		armcompute.AvailabilitySetUpdate{
			Tags: map[string]*string{
				"key2574": to.Ptr("aaaaaaaa"),
			},
			Properties: &armcompute.AvailabilitySetProperties{
				PlatformFaultDomainCount:  to.Ptr[int32](2),
				PlatformUpdateDomainCount: to.Ptr[int32](20),
				ProximityPlacementGroup: &armcompute.SubResource{
					ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
				},
				VirtualMachines: []*armcompute.SubResource{
					{
						ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
					}},
			},
			SKU: &armcompute.SKU{
				Name:     to.Ptr("DSv3-Type1"),
				Capacity: to.Ptr[int64](7),
				Tier:     to.Ptr("aaa"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/AvailabilitySets_Update_MaximumSet_Gen.json: %v", err)
	}
	// Response check
	exampleRes := armcompute.AvailabilitySet{
		Name:     to.Ptr("myAvailabilitySet"),
		Type:     to.Ptr("Microsoft.Compute/availabilitySets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/availabilitySets/myAvailabilitySet"),
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"key2505": to.Ptr("aa"),
			"key9626": to.Ptr("aaaaaaaaaaaaaaaaaaaa"),
		},
		Properties: &armcompute.AvailabilitySetProperties{
			PlatformFaultDomainCount:  to.Ptr[int32](2),
			PlatformUpdateDomainCount: to.Ptr[int32](20),
			ProximityPlacementGroup: &armcompute.SubResource{
				ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
			},
			Statuses: []*armcompute.InstanceViewStatus{
				{
					Code:          to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
					DisplayStatus: to.Ptr("aaaaaa"),
					Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
					Message:       to.Ptr("a"),
					Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.522Z"); return t }()),
				}},
			VirtualMachines: []*armcompute.SubResource{
				{
					ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
				}},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Classic"),
			Capacity: to.Ptr[int64](29),
			Tier:     to.Ptr("aaaaaaaaaaaaaa"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.AvailabilitySet) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.AvailabilitySet)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/AvailabilitySets_Update_MaximumSet_Gen.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/AvailabilitySets_Update_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AvailabilitySets_Update_MinimumSet_Gen"},
	})
	client, err = armcompute.NewAvailabilitySetsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err = client.Update(ctx,
		"rgcompute",
		"aaaaaaaaaaaaaaaaaaaa",
		armcompute.AvailabilitySetUpdate{},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/AvailabilitySets_Update_MinimumSet_Gen.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.AvailabilitySet{
		Location: to.Ptr("westus"),
	}
	if !reflect.DeepEqual(exampleRes, res.AvailabilitySet) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.AvailabilitySet)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/AvailabilitySets_Update_MinimumSet_Gen.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestAvailabilitySets_Delete(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/AvailabilitySets_Delete_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AvailabilitySets_Delete_MaximumSet_Gen"},
	})
	client, err := armcompute.NewAvailabilitySetsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	_, err = client.Delete(ctx,
		"rgcompute",
		"aaaaaaaaaaaaaaaaaaaa",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/AvailabilitySets_Delete_MaximumSet_Gen.json: %v", err)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/AvailabilitySets_Delete_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AvailabilitySets_Delete_MinimumSet_Gen"},
	})
	client, err = armcompute.NewAvailabilitySetsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	_, err = client.Delete(ctx,
		"rgcompute",
		"aaaaaaaaaaa",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/AvailabilitySets_Delete_MinimumSet_Gen.json: %v", err)
	}
}

func TestAvailabilitySets_Get(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/AvailabilitySets_Get_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AvailabilitySets_Get_MaximumSet_Gen"},
	})
	client, err := armcompute.NewAvailabilitySetsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := client.Get(ctx,
		"rgcompute",
		"aaaaaaaaaaaa",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/AvailabilitySets_Get_MaximumSet_Gen.json: %v", err)
	}
	// Response check
	exampleRes := armcompute.AvailabilitySet{
		Name:     to.Ptr("myAvailabilitySet"),
		Type:     to.Ptr("Microsoft.Compute/availabilitySets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/availabilitySets/myAvailabilitySet"),
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"key2505": to.Ptr("aa"),
			"key9626": to.Ptr("aaaaaaaaaaaaaaaaaaaa"),
		},
		Properties: &armcompute.AvailabilitySetProperties{
			PlatformFaultDomainCount:  to.Ptr[int32](2),
			PlatformUpdateDomainCount: to.Ptr[int32](20),
			ProximityPlacementGroup: &armcompute.SubResource{
				ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
			},
			Statuses: []*armcompute.InstanceViewStatus{
				{
					Code:          to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
					DisplayStatus: to.Ptr("aaaaaa"),
					Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
					Message:       to.Ptr("a"),
					Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.522Z"); return t }()),
				}},
			VirtualMachines: []*armcompute.SubResource{
				{
					ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
				}},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Classic"),
			Capacity: to.Ptr[int64](29),
			Tier:     to.Ptr("aaaaaaaaaaaaaa"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.AvailabilitySet) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.AvailabilitySet)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/AvailabilitySets_Get_MaximumSet_Gen.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/AvailabilitySets_Get_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AvailabilitySets_Get_MinimumSet_Gen"},
	})
	client, err = armcompute.NewAvailabilitySetsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err = client.Get(ctx,
		"rgcompute",
		"aaaaaaaaaaaaaaaaaaaa",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/AvailabilitySets_Get_MinimumSet_Gen.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.AvailabilitySet{
		Location: to.Ptr("westus"),
	}
	if !reflect.DeepEqual(exampleRes, res.AvailabilitySet) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.AvailabilitySet)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/AvailabilitySets_Get_MinimumSet_Gen.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestAvailabilitySets_ListBySubscription(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/ListAvailabilitySetsInASubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List availability sets in a subscription."},
	})
	client, err := armcompute.NewAvailabilitySetsClient("{subscriptionId}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := client.NewListBySubscriptionPager(&armcompute.AvailabilitySetsClientListBySubscriptionOptions{Expand: to.Ptr("virtualMachines\\$ref")})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/ListAvailabilitySetsInASubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcompute.AvailabilitySetListResult{
			Value: []*armcompute.AvailabilitySet{
				{
					Name:     to.Ptr("{availabilitySetName}"),
					Type:     to.Ptr("Microsoft.Compute/availabilitySets"),
					ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
					Location: to.Ptr("australiasoutheast"),
					Properties: &armcompute.AvailabilitySetProperties{
						PlatformFaultDomainCount:  to.Ptr[int32](3),
						PlatformUpdateDomainCount: to.Ptr[int32](5),
						VirtualMachines: []*armcompute.SubResource{
							{
								ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}"),
							}},
					},
					SKU: &armcompute.SKU{
						Name: to.Ptr("Classic"),
					},
				},
				{
					Name:     to.Ptr("{availabilitySetName}"),
					Type:     to.Ptr("Microsoft.Compute/availabilitySets"),
					ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
					Location: to.Ptr("australiasoutheast"),
					Properties: &armcompute.AvailabilitySetProperties{
						PlatformFaultDomainCount:  to.Ptr[int32](3),
						PlatformUpdateDomainCount: to.Ptr[int32](5),
						VirtualMachines: []*armcompute.SubResource{
							{
								ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}"),
							}},
					},
					SKU: &armcompute.SKU{
						Name: to.Ptr("Classic"),
					},
				},
				{
					Name:     to.Ptr("{availabilitySetName}"),
					Type:     to.Ptr("Microsoft.Compute/availabilitySets"),
					ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
					Location: to.Ptr("westcentralus"),
					Tags: map[string]*string{
						"{tagName}": to.Ptr("{tagValue}"),
					},
					Properties: &armcompute.AvailabilitySetProperties{
						PlatformFaultDomainCount:  to.Ptr[int32](3),
						PlatformUpdateDomainCount: to.Ptr[int32](5),
						VirtualMachines:           []*armcompute.SubResource{},
					},
					SKU: &armcompute.SKU{
						Name: to.Ptr("Classic"),
					},
				},
				{
					Name:     to.Ptr("{availabilitySetName}"),
					Type:     to.Ptr("Microsoft.Compute/availabilitySets"),
					ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
					Location: to.Ptr("westcentralus"),
					Tags: map[string]*string{
						"{tagName}": to.Ptr("{tagValue}"),
					},
					Properties: &armcompute.AvailabilitySetProperties{
						PlatformFaultDomainCount:  to.Ptr[int32](3),
						PlatformUpdateDomainCount: to.Ptr[int32](5),
						VirtualMachines:           []*armcompute.SubResource{},
					},
					SKU: &armcompute.SKU{
						Name: to.Ptr("Classic"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AvailabilitySetListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AvailabilitySetListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/ListAvailabilitySetsInASubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAvailabilitySets_List(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/AvailabilitySets_List_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AvailabilitySets_List_MaximumSet_Gen"},
	})
	client, err := armcompute.NewAvailabilitySetsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := client.NewListPager("rgcompute",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/AvailabilitySets_List_MaximumSet_Gen.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcompute.AvailabilitySetListResult{
			Value: []*armcompute.AvailabilitySet{
				{
					Name:     to.Ptr("{availabilitySetName}"),
					Type:     to.Ptr("Microsoft.Compute/availabilitySets"),
					ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
					Location: to.Ptr("australiasoutheast"),
					Tags: map[string]*string{
						"key2039": to.Ptr("aaaaaaaaaaaaa"),
					},
					Properties: &armcompute.AvailabilitySetProperties{
						PlatformFaultDomainCount:  to.Ptr[int32](3),
						PlatformUpdateDomainCount: to.Ptr[int32](5),
						ProximityPlacementGroup: &armcompute.SubResource{
							ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
						},
						Statuses: []*armcompute.InstanceViewStatus{
							{
								Code:          to.Ptr("aaaaaaaaaaaaaaa"),
								DisplayStatus: to.Ptr("aaaaaaaaaaa"),
								Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
								Message:       to.Ptr("aaaaaa"),
								Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T13:39:56.427Z"); return t }()),
							}},
						VirtualMachines: []*armcompute.SubResource{
							{
								ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}"),
							}},
					},
					SKU: &armcompute.SKU{
						Name:     to.Ptr("Classic"),
						Capacity: to.Ptr[int64](22),
						Tier:     to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
					},
				},
				{
					Name:     to.Ptr("{availabilitySetName}"),
					Type:     to.Ptr("Microsoft.Compute/availabilitySets"),
					ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
					Location: to.Ptr("australiasoutheast"),
					Tags: map[string]*string{
						"key5849": to.Ptr("aaaaaaaaaaaaaaa"),
					},
					Properties: &armcompute.AvailabilitySetProperties{
						PlatformFaultDomainCount:  to.Ptr[int32](3),
						PlatformUpdateDomainCount: to.Ptr[int32](5),
						ProximityPlacementGroup: &armcompute.SubResource{
							ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
						},
						Statuses: []*armcompute.InstanceViewStatus{
							{
								Code:          to.Ptr("aaaaaaaaaaaaaaa"),
								DisplayStatus: to.Ptr("aaaaaaaaaaa"),
								Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
								Message:       to.Ptr("aaaaaa"),
								Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T13:39:56.427Z"); return t }()),
							}},
						VirtualMachines: []*armcompute.SubResource{
							{
								ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}"),
							}},
					},
					SKU: &armcompute.SKU{
						Name:     to.Ptr("Classic"),
						Capacity: to.Ptr[int64](23),
						Tier:     to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
					},
				},
				{
					Name:     to.Ptr("{availabilitySetName}"),
					Type:     to.Ptr("Microsoft.Compute/availabilitySets"),
					ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
					Location: to.Ptr("westcentralus"),
					Tags:     map[string]*string{},
					Properties: &armcompute.AvailabilitySetProperties{
						PlatformFaultDomainCount:  to.Ptr[int32](3),
						PlatformUpdateDomainCount: to.Ptr[int32](5),
						ProximityPlacementGroup: &armcompute.SubResource{
							ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
						},
						Statuses: []*armcompute.InstanceViewStatus{
							{
								Code:          to.Ptr("aaaaaaaaaaaaaaa"),
								DisplayStatus: to.Ptr("aaaaaaaaaaa"),
								Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
								Message:       to.Ptr("aaaaaa"),
								Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T13:39:56.427Z"); return t }()),
							}},
						VirtualMachines: []*armcompute.SubResource{},
					},
					SKU: &armcompute.SKU{
						Name:     to.Ptr("Classic"),
						Capacity: to.Ptr[int64](26),
						Tier:     to.Ptr("aaaaaaaaaaaaaaaaaaaaa"),
					},
				},
				{
					Name:     to.Ptr("{availabilitySetName}"),
					Type:     to.Ptr("Microsoft.Compute/availabilitySets"),
					ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
					Location: to.Ptr("westcentralus"),
					Tags:     map[string]*string{},
					Properties: &armcompute.AvailabilitySetProperties{
						PlatformFaultDomainCount:  to.Ptr[int32](3),
						PlatformUpdateDomainCount: to.Ptr[int32](5),
						ProximityPlacementGroup: &armcompute.SubResource{
							ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
						},
						Statuses: []*armcompute.InstanceViewStatus{
							{
								Code:          to.Ptr("aaaaaaaaaaaaaaa"),
								DisplayStatus: to.Ptr("aaaaaaaaaaa"),
								Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
								Message:       to.Ptr("aaaaaa"),
								Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T13:39:56.427Z"); return t }()),
							}},
						VirtualMachines: []*armcompute.SubResource{},
					},
					SKU: &armcompute.SKU{
						Name:     to.Ptr("Classic"),
						Capacity: to.Ptr[int64](6),
						Tier:     to.Ptr("aaaaaaaaaaaaaaaaaa"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AvailabilitySetListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AvailabilitySetListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/AvailabilitySets_List_MaximumSet_Gen.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/AvailabilitySets_List_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AvailabilitySets_List_MinimumSet_Gen"},
	})
	client, err = armcompute.NewAvailabilitySetsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager = client.NewListPager("rgcompute",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/AvailabilitySets_List_MinimumSet_Gen.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcompute.AvailabilitySetListResult{
			Value: []*armcompute.AvailabilitySet{
				{
					Location: to.Ptr("australiasoutheast"),
				},
				{
					Location: to.Ptr("australiasoutheast"),
				},
				{
					Location: to.Ptr("westcentralus"),
				},
				{
					Location: to.Ptr("westcentralus"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AvailabilitySetListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AvailabilitySetListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/AvailabilitySets_List_MinimumSet_Gen.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAvailabilitySets_ListAvailableSizes(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/AvailabilitySets_ListAvailableSizes_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AvailabilitySets_ListAvailableSizes_MaximumSet_Gen"},
	})
	client, err := armcompute.NewAvailabilitySetsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := client.NewListAvailableSizesPager("rgcompute",
		"aaaaaaaaaaaaaaaaaaaa",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/AvailabilitySets_ListAvailableSizes_MaximumSet_Gen.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcompute.VirtualMachineSizeListResult{
			Value: []*armcompute.VirtualMachineSize{
				{
					Name:                 to.Ptr("Standard_A1_V2"),
					MaxDataDiskCount:     to.Ptr[int32](2),
					MemoryInMB:           to.Ptr[int32](2048),
					NumberOfCores:        to.Ptr[int32](1),
					OSDiskSizeInMB:       to.Ptr[int32](1047552),
					ResourceDiskSizeInMB: to.Ptr[int32](10240),
				},
				{
					Name:                 to.Ptr("Standard_A2_V2"),
					MaxDataDiskCount:     to.Ptr[int32](4),
					MemoryInMB:           to.Ptr[int32](4096),
					NumberOfCores:        to.Ptr[int32](2),
					OSDiskSizeInMB:       to.Ptr[int32](1047552),
					ResourceDiskSizeInMB: to.Ptr[int32](20480),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.VirtualMachineSizeListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.VirtualMachineSizeListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/AvailabilitySets_ListAvailableSizes_MaximumSet_Gen.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/AvailabilitySets_ListAvailableSizes_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AvailabilitySets_ListAvailableSizes_MinimumSet_Gen"},
	})
	client, err = armcompute.NewAvailabilitySetsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager = client.NewListAvailableSizesPager("rgcompute",
		"aa",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/AvailabilitySets_ListAvailableSizes_MinimumSet_Gen.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcompute.VirtualMachineSizeListResult{}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.VirtualMachineSizeListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.VirtualMachineSizeListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/AvailabilitySets_ListAvailableSizes_MinimumSet_Gen.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestProximityPlacementGroups_CreateOrUpdate(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateOrUpdateAProximityPlacementGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or Update a proximity placement group."},
	})
	client, err := armcompute.NewProximityPlacementGroupsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := client.CreateOrUpdate(ctx,
		"myResourceGroup",
		"myProximityPlacementGroup",
		armcompute.ProximityPlacementGroup{
			Location: to.Ptr("westus"),
			Properties: &armcompute.ProximityPlacementGroupProperties{
				ProximityPlacementGroupType: to.Ptr(armcompute.ProximityPlacementGroupTypeStandard),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateOrUpdateAProximityPlacementGroup.json: %v", err)
	}
	// Response check
	exampleRes := armcompute.ProximityPlacementGroup{
		Name:     to.Ptr("myProximityPlacementGroup"),
		Type:     to.Ptr("Microsoft.Compute/proximityPlacementGroups"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/proximityPlacementGroups/myProximityPlacementGroup"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.ProximityPlacementGroupProperties{
			ProximityPlacementGroupType: to.Ptr(armcompute.ProximityPlacementGroupTypeStandard),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.ProximityPlacementGroup) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.ProximityPlacementGroup)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateOrUpdateAProximityPlacementGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestProximityPlacementGroups_Update(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/PatchAProximityPlacementGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a proximity placement group."},
	})
	client, err := armcompute.NewProximityPlacementGroupsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := client.Update(ctx,
		"myResourceGroup",
		"myProximityPlacementGroup",
		armcompute.ProximityPlacementGroupUpdate{
			Tags: map[string]*string{
				"additionalProp1": to.Ptr("string"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/PatchAProximityPlacementGroup.json: %v", err)
	}
	// Response check
	exampleRes := armcompute.ProximityPlacementGroup{
		Name:     to.Ptr("myProximityPlacementGroup"),
		Type:     to.Ptr("Microsoft.Compute/proximityPlacementGroups"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/proximityPlacementGroups/myProximityPlacementGroup"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.ProximityPlacementGroupProperties{
			ProximityPlacementGroupType: to.Ptr(armcompute.ProximityPlacementGroupTypeStandard),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.ProximityPlacementGroup) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.ProximityPlacementGroup)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/PatchAProximityPlacementGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestProximityPlacementGroups_Delete(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/DeleteAProximityPlacementGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a proximity placement group."},
	})
	client, err := armcompute.NewProximityPlacementGroupsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	_, err = client.Delete(ctx,
		"myResourceGroup",
		"myProximityPlacementGroup",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/DeleteAProximityPlacementGroup.json: %v", err)
	}
}

func TestProximityPlacementGroups_Get(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/GetAProximityPlacementGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a proximity placement group."},
	})
	client, err := armcompute.NewProximityPlacementGroupsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myProximityPlacementGroup",
		&armcompute.ProximityPlacementGroupsClientGetOptions{IncludeColocationStatus: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/GetAProximityPlacementGroup.json: %v", err)
	}
	// Response check
	exampleRes := armcompute.ProximityPlacementGroup{
		Name:     to.Ptr("myProximityPlacementGroup"),
		Type:     to.Ptr("Microsoft.Compute/proximityPlacementGroups"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/proximityPlacementGroups/myProximityPlacementGroup"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.ProximityPlacementGroupProperties{
			AvailabilitySets: []*armcompute.SubResourceWithColocationStatus{
				{
					ID: to.Ptr("string"),
				}},
			ProximityPlacementGroupType: to.Ptr(armcompute.ProximityPlacementGroupTypeStandard),
			VirtualMachineScaleSets: []*armcompute.SubResourceWithColocationStatus{
				{
					ID: to.Ptr("string"),
				}},
			VirtualMachines: []*armcompute.SubResourceWithColocationStatus{
				{
					ID: to.Ptr("string"),
				}},
		},
	}
	if !reflect.DeepEqual(exampleRes, res.ProximityPlacementGroup) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.ProximityPlacementGroup)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/GetAProximityPlacementGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestProximityPlacementGroups_ListBySubscription(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/ListProximityPlacementGroupsInASubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a proximity placement group."},
	})
	client, err := armcompute.NewProximityPlacementGroupsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := client.NewListBySubscriptionPager(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/ListProximityPlacementGroupsInASubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcompute.ProximityPlacementGroupListResult{
			Value: []*armcompute.ProximityPlacementGroup{
				{
					Name:     to.Ptr("myProximityPlacementGroup"),
					Type:     to.Ptr("Microsoft.Compute/proximityPlacementGroups"),
					ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/proximityPlacementGroups/myProximityPlacementGroup"),
					Location: to.Ptr("westus"),
					Properties: &armcompute.ProximityPlacementGroupProperties{
						AvailabilitySets: []*armcompute.SubResourceWithColocationStatus{
							{
								ID: to.Ptr("string"),
							}},
						ProximityPlacementGroupType: to.Ptr(armcompute.ProximityPlacementGroupTypeStandard),
						VirtualMachineScaleSets: []*armcompute.SubResourceWithColocationStatus{
							{
								ID: to.Ptr("string"),
							}},
						VirtualMachines: []*armcompute.SubResourceWithColocationStatus{
							{
								ID: to.Ptr("string"),
							}},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ProximityPlacementGroupListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ProximityPlacementGroupListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/ListProximityPlacementGroupsInASubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestProximityPlacementGroups_ListByResourceGroup(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/ListProximityPlacementGroupsInAResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a proximity placement group."},
	})
	client, err := armcompute.NewProximityPlacementGroupsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := client.NewListByResourceGroupPager("myResourceGroup",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/ListProximityPlacementGroupsInAResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcompute.ProximityPlacementGroupListResult{
			Value: []*armcompute.ProximityPlacementGroup{
				{
					Name:     to.Ptr("myProximityPlacementGroup"),
					Type:     to.Ptr("Microsoft.Compute/proximityPlacementGroups"),
					ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/proximityPlacementGroups/myProximityPlacementGroup"),
					Location: to.Ptr("westus"),
					Properties: &armcompute.ProximityPlacementGroupProperties{
						AvailabilitySets: []*armcompute.SubResourceWithColocationStatus{
							{
								ID: to.Ptr("string"),
							}},
						ProximityPlacementGroupType: to.Ptr(armcompute.ProximityPlacementGroupTypeStandard),
						VirtualMachineScaleSets: []*armcompute.SubResourceWithColocationStatus{
							{
								ID: to.Ptr("string"),
							}},
						VirtualMachines: []*armcompute.SubResourceWithColocationStatus{
							{
								ID: to.Ptr("string"),
							}},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ProximityPlacementGroupListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ProximityPlacementGroupListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/ListProximityPlacementGroupsInAResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDedicatedHostGroups_CreateOrUpdate(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateOrUpdateADedicatedHostGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a dedicated host group."},
	})
	client, err := armcompute.NewDedicatedHostGroupsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := client.CreateOrUpdate(ctx,
		"myResourceGroup",
		"myDedicatedHostGroup",
		armcompute.DedicatedHostGroup{
			Location: to.Ptr("westus"),
			Tags: map[string]*string{
				"department": to.Ptr("finance"),
			},
			Properties: &armcompute.DedicatedHostGroupProperties{
				PlatformFaultDomainCount:  to.Ptr[int32](3),
				SupportAutomaticPlacement: to.Ptr(true),
			},
			Zones: []*string{
				to.Ptr("1")},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateOrUpdateADedicatedHostGroup.json: %v", err)
	}
	// Response check
	exampleRes := armcompute.DedicatedHostGroup{
		Name:     to.Ptr("myDedicatedHostGroup"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/HostGroups/myDedicatedHostGroup"),
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"department": to.Ptr("finance"),
			"owner":      to.Ptr("myCompany"),
		},
		Properties: &armcompute.DedicatedHostGroupProperties{
			PlatformFaultDomainCount:  to.Ptr[int32](3),
			SupportAutomaticPlacement: to.Ptr(true),
		},
		Zones: []*string{
			to.Ptr("1")},
	}
	if !reflect.DeepEqual(exampleRes, res.DedicatedHostGroup) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.DedicatedHostGroup)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateOrUpdateADedicatedHostGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestDedicatedHostGroups_Update(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/DedicatedHostGroups_Update_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DedicatedHostGroups_Update_MaximumSet_Gen"},
	})
	client, err := armcompute.NewDedicatedHostGroupsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := client.Update(ctx,
		"rgcompute",
		"aaaa",
		armcompute.DedicatedHostGroupUpdate{
			Tags: map[string]*string{
				"key9921": to.Ptr("aaaaaaaaaa"),
			},
			Properties: &armcompute.DedicatedHostGroupProperties{
				InstanceView: &armcompute.DedicatedHostGroupInstanceView{
					Hosts: []*armcompute.DedicatedHostInstanceViewWithName{
						{
							AvailableCapacity: &armcompute.DedicatedHostAvailableCapacity{
								AllocatableVMs: []*armcompute.DedicatedHostAllocatableVM{
									{
										Count:  to.Ptr[float64](26),
										VMSize: to.Ptr("aaaaaaaaaaaaaaaaaaaa"),
									}},
							},
							Statuses: []*armcompute.InstanceViewStatus{
								{
									Code:          to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
									DisplayStatus: to.Ptr("aaaaaa"),
									Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
									Message:       to.Ptr("a"),
									Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.522Z"); return t }()),
								}},
						}},
				},
				PlatformFaultDomainCount:  to.Ptr[int32](3),
				SupportAutomaticPlacement: to.Ptr(true),
			},
			Zones: []*string{
				to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaaa")},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/DedicatedHostGroups_Update_MaximumSet_Gen.json: %v", err)
	}
	// Response check
	exampleRes := armcompute.DedicatedHostGroup{
		Name:     to.Ptr("myDedicatedHostGroup"),
		Type:     to.Ptr("aaaa"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/HostGroups/myDedicatedHostGroup"),
		Location: to.Ptr("westus"),
		Tags:     map[string]*string{},
		Properties: &armcompute.DedicatedHostGroupProperties{
			Hosts: []*armcompute.SubResourceReadOnly{
				{
					ID: to.Ptr("aaaa"),
				}},
			InstanceView: &armcompute.DedicatedHostGroupInstanceView{
				Hosts: []*armcompute.DedicatedHostInstanceViewWithName{
					{
						AssetID: to.Ptr("aaaa"),
						AvailableCapacity: &armcompute.DedicatedHostAvailableCapacity{
							AllocatableVMs: []*armcompute.DedicatedHostAllocatableVM{
								{
									Count:  to.Ptr[float64](26),
									VMSize: to.Ptr("aaaaaaaaaaaaaaaaaaaa"),
								}},
						},
						Statuses: []*armcompute.InstanceViewStatus{
							{
								Code:          to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
								DisplayStatus: to.Ptr("aaaaaa"),
								Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
								Message:       to.Ptr("a"),
								Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.522Z"); return t }()),
							}},
						Name: to.Ptr("aaaaaaaaaaaaaaaaaa"),
					}},
			},
			PlatformFaultDomainCount:  to.Ptr[int32](3),
			SupportAutomaticPlacement: to.Ptr(true),
		},
		Zones: []*string{
			to.Ptr("1")},
	}
	if !reflect.DeepEqual(exampleRes, res.DedicatedHostGroup) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.DedicatedHostGroup)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/DedicatedHostGroups_Update_MaximumSet_Gen.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/DedicatedHostGroups_Update_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DedicatedHostGroups_Update_MinimumSet_Gen"},
	})
	client, err = armcompute.NewDedicatedHostGroupsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err = client.Update(ctx,
		"rgcompute",
		"aaaaaaaaaaa",
		armcompute.DedicatedHostGroupUpdate{},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/DedicatedHostGroups_Update_MinimumSet_Gen.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.DedicatedHostGroup{
		Location: to.Ptr("westus"),
	}
	if !reflect.DeepEqual(exampleRes, res.DedicatedHostGroup) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.DedicatedHostGroup)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/DedicatedHostGroups_Update_MinimumSet_Gen.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestDedicatedHostGroups_Delete(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/DedicatedHostGroups_Delete_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DedicatedHostGroups_Delete_MaximumSet_Gen"},
	})
	client, err := armcompute.NewDedicatedHostGroupsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	_, err = client.Delete(ctx,
		"rgcompute",
		"a",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/DedicatedHostGroups_Delete_MaximumSet_Gen.json: %v", err)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/DedicatedHostGroups_Delete_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DedicatedHostGroups_Delete_MinimumSet_Gen"},
	})
	client, err = armcompute.NewDedicatedHostGroupsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	_, err = client.Delete(ctx,
		"rgcompute",
		"aaaa",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/DedicatedHostGroups_Delete_MinimumSet_Gen.json: %v", err)
	}
}

func TestDedicatedHostGroups_Get(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/GetADedicatedHostGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a dedicated host group."},
	})
	client, err := armcompute.NewDedicatedHostGroupsClient("{subscriptionId}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myDedicatedHostGroup",
		&armcompute.DedicatedHostGroupsClientGetOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/GetADedicatedHostGroup.json: %v", err)
	}
	// Response check
	exampleRes := armcompute.DedicatedHostGroup{
		Name:     to.Ptr("myDedicatedHostGroup"),
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"{tagName}": to.Ptr("{tagValue}"),
		},
		Properties: &armcompute.DedicatedHostGroupProperties{
			Hosts: []*armcompute.SubResourceReadOnly{
				{
					ID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/myDedicatedHostGroup/myHostGroup/Hosts/myHost1"),
				},
				{
					ID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/myDedicatedHostGroup/myHostGroup/Hosts/myHost2"),
				}},
			InstanceView: &armcompute.DedicatedHostGroupInstanceView{
				Hosts: []*armcompute.DedicatedHostInstanceViewWithName{
					{
						AssetID: to.Ptr("eb3f58b8-b4e8-4882-b69f-301a01812407"),
						AvailableCapacity: &armcompute.DedicatedHostAvailableCapacity{
							AllocatableVMs: []*armcompute.DedicatedHostAllocatableVM{
								{
									Count:  to.Ptr[float64](10),
									VMSize: to.Ptr("Standard_A1"),
								}},
						},
						Statuses: []*armcompute.InstanceViewStatus{
							{
								Code:          to.Ptr("ProvisioningState/succeeded"),
								DisplayStatus: to.Ptr("Provisioning succeeded"),
								Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
							},
							{
								Code:          to.Ptr("HealthState/available"),
								DisplayStatus: to.Ptr("Host available"),
								Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
							}},
						Name: to.Ptr("myHost1"),
					},
					{
						AssetID: to.Ptr("f293d4ac-5eea-4be2-b0c0-0fcaa09aebf8"),
						AvailableCapacity: &armcompute.DedicatedHostAvailableCapacity{
							AllocatableVMs: []*armcompute.DedicatedHostAllocatableVM{
								{
									Count:  to.Ptr[float64](10),
									VMSize: to.Ptr("Standard_A1"),
								}},
						},
						Statuses: []*armcompute.InstanceViewStatus{
							{
								Code:          to.Ptr("ProvisioningState/succeeded"),
								DisplayStatus: to.Ptr("Provisioning succeeded"),
								Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
							},
							{
								Code:          to.Ptr("HealthState/available"),
								DisplayStatus: to.Ptr("Host available"),
								Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
							}},
						Name: to.Ptr("myHost2"),
					}},
			},
			PlatformFaultDomainCount:  to.Ptr[int32](3),
			SupportAutomaticPlacement: to.Ptr(true),
		},
		Zones: []*string{
			to.Ptr("3")},
	}
	if !reflect.DeepEqual(exampleRes, res.DedicatedHostGroup) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.DedicatedHostGroup)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/GetADedicatedHostGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestDedicatedHostGroups_ListByResourceGroup(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/DedicatedHostGroups_ListByResourceGroup_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DedicatedHostGroups_ListByResourceGroup_MaximumSet_Gen"},
	})
	client, err := armcompute.NewDedicatedHostGroupsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := client.NewListByResourceGroupPager("rgcompute",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/DedicatedHostGroups_ListByResourceGroup_MaximumSet_Gen.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcompute.DedicatedHostGroupListResult{
			Value: []*armcompute.DedicatedHostGroup{
				{
					Name:     to.Ptr("myDedicatedHostGroup"),
					Type:     to.Ptr("aaaa"),
					ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/HostGroups/myDedicatedHostGroup"),
					Location: to.Ptr("westus"),
					Tags:     map[string]*string{},
					Properties: &armcompute.DedicatedHostGroupProperties{
						Hosts: []*armcompute.SubResourceReadOnly{
							{
								ID: to.Ptr("aaaa"),
							}},
						InstanceView: &armcompute.DedicatedHostGroupInstanceView{
							Hosts: []*armcompute.DedicatedHostInstanceViewWithName{
								{
									AssetID: to.Ptr("aaaa"),
									AvailableCapacity: &armcompute.DedicatedHostAvailableCapacity{
										AllocatableVMs: []*armcompute.DedicatedHostAllocatableVM{
											{
												Count:  to.Ptr[float64](26),
												VMSize: to.Ptr("aaaaaaaaaaaaaaaaaaaa"),
											}},
									},
									Statuses: []*armcompute.InstanceViewStatus{
										{
											Code:          to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
											DisplayStatus: to.Ptr("aaaaaa"),
											Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
											Message:       to.Ptr("a"),
											Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.522Z"); return t }()),
										}},
									Name: to.Ptr("aaaaaaaaaaaaaaaaaa"),
								}},
						},
						PlatformFaultDomainCount:  to.Ptr[int32](3),
						SupportAutomaticPlacement: to.Ptr(true),
					},
					Zones: []*string{
						to.Ptr("1")},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DedicatedHostGroupListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DedicatedHostGroupListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/DedicatedHostGroups_ListByResourceGroup_MaximumSet_Gen.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/DedicatedHostGroups_ListByResourceGroup_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DedicatedHostGroups_ListByResourceGroup_MinimumSet_Gen"},
	})
	client, err = armcompute.NewDedicatedHostGroupsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager = client.NewListByResourceGroupPager("rgcompute",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/DedicatedHostGroups_ListByResourceGroup_MinimumSet_Gen.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcompute.DedicatedHostGroupListResult{
			Value: []*armcompute.DedicatedHostGroup{
				{
					Location: to.Ptr("westus"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DedicatedHostGroupListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DedicatedHostGroupListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/DedicatedHostGroups_ListByResourceGroup_MinimumSet_Gen.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDedicatedHostGroups_ListBySubscription(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/DedicatedHostGroups_ListBySubscription_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DedicatedHostGroups_ListBySubscription_MaximumSet_Gen"},
	})
	client, err := armcompute.NewDedicatedHostGroupsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := client.NewListBySubscriptionPager(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/DedicatedHostGroups_ListBySubscription_MaximumSet_Gen.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcompute.DedicatedHostGroupListResult{
			Value: []*armcompute.DedicatedHostGroup{
				{
					Name:     to.Ptr("myDedicatedHostGroup"),
					Type:     to.Ptr("aaaa"),
					ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/HostGroups/myDedicatedHostGroup"),
					Location: to.Ptr("westus"),
					Tags:     map[string]*string{},
					Properties: &armcompute.DedicatedHostGroupProperties{
						Hosts: []*armcompute.SubResourceReadOnly{
							{
								ID: to.Ptr("aaaa"),
							}},
						InstanceView: &armcompute.DedicatedHostGroupInstanceView{
							Hosts: []*armcompute.DedicatedHostInstanceViewWithName{
								{
									AssetID: to.Ptr("aaaa"),
									AvailableCapacity: &armcompute.DedicatedHostAvailableCapacity{
										AllocatableVMs: []*armcompute.DedicatedHostAllocatableVM{
											{
												Count:  to.Ptr[float64](26),
												VMSize: to.Ptr("aaaaaaaaaaaaaaaaaaaa"),
											}},
									},
									Statuses: []*armcompute.InstanceViewStatus{
										{
											Code:          to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
											DisplayStatus: to.Ptr("aaaaaa"),
											Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
											Message:       to.Ptr("a"),
											Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.522Z"); return t }()),
										}},
									Name: to.Ptr("aaaaaaaaaaaaaaaaaa"),
								}},
						},
						PlatformFaultDomainCount:  to.Ptr[int32](3),
						SupportAutomaticPlacement: to.Ptr(true),
					},
					Zones: []*string{
						to.Ptr("1")},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DedicatedHostGroupListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DedicatedHostGroupListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/DedicatedHostGroups_ListBySubscription_MaximumSet_Gen.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/DedicatedHostGroups_ListBySubscription_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DedicatedHostGroups_ListBySubscription_MinimumSet_Gen"},
	})
	client, err = armcompute.NewDedicatedHostGroupsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager = client.NewListBySubscriptionPager(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/DedicatedHostGroups_ListBySubscription_MinimumSet_Gen.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcompute.DedicatedHostGroupListResult{
			Value: []*armcompute.DedicatedHostGroup{
				{
					Location: to.Ptr("westus"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DedicatedHostGroupListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DedicatedHostGroupListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/DedicatedHostGroups_ListBySubscription_MinimumSet_Gen.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDedicatedHosts_CreateOrUpdate(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateOrUpdateADedicatedHost.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a dedicated host ."},
	})
	client, err := armcompute.NewDedicatedHostsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myDedicatedHostGroup",
		"myDedicatedHost",
		armcompute.DedicatedHost{
			Location: to.Ptr("westus"),
			Tags: map[string]*string{
				"department": to.Ptr("HR"),
			},
			Properties: &armcompute.DedicatedHostProperties{
				PlatformFaultDomain: to.Ptr[int32](1),
			},
			SKU: &armcompute.SKU{
				Name: to.Ptr("DSv3-Type1"),
			},
		},
		&armcompute.DedicatedHostsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateOrUpdateADedicatedHost.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateOrUpdateADedicatedHost.json: %v", err)
	}
	// Response check
	exampleRes := armcompute.DedicatedHost{
		Name:     to.Ptr("myDedicatedHost"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/HostGroups/myDedicatedHostGroup/hosts/myDedicatedHost"),
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"department": to.Ptr("HR"),
		},
		Properties: &armcompute.DedicatedHostProperties{
			AutoReplaceOnFailure: to.Ptr(false),
			HostID:               to.Ptr("{GUID}"),
			LicenseType:          to.Ptr(armcompute.DedicatedHostLicenseTypesWindowsServerHybrid),
			PlatformFaultDomain:  to.Ptr[int32](1),
		},
		SKU: &armcompute.SKU{
			Name: to.Ptr("DSv3-Type1"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.DedicatedHost) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.DedicatedHost)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateOrUpdateADedicatedHost.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestDedicatedHosts_Update(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/DedicatedHosts_Update_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DedicatedHosts_Update_MaximumSet_Gen"},
	})
	client, err := armcompute.NewDedicatedHostsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginUpdate(ctx,
		"rgcompute",
		"aaaaaaaaa",
		"aaaaaaaaaaaaaaaaaaaaa",
		armcompute.DedicatedHostUpdate{
			Tags: map[string]*string{
				"key8813": to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaa"),
			},
			Properties: &armcompute.DedicatedHostProperties{
				AutoReplaceOnFailure: to.Ptr(true),
				InstanceView: &armcompute.DedicatedHostInstanceView{
					AvailableCapacity: &armcompute.DedicatedHostAvailableCapacity{
						AllocatableVMs: []*armcompute.DedicatedHostAllocatableVM{
							{
								Count:  to.Ptr[float64](26),
								VMSize: to.Ptr("aaaaaaaaaaaaaaaaaaaa"),
							}},
					},
					Statuses: []*armcompute.InstanceViewStatus{
						{
							Code:          to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
							DisplayStatus: to.Ptr("aaaaaa"),
							Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
							Message:       to.Ptr("a"),
							Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.522Z"); return t }()),
						}},
				},
				LicenseType:         to.Ptr(armcompute.DedicatedHostLicenseTypesWindowsServerHybrid),
				PlatformFaultDomain: to.Ptr[int32](1),
			},
		},
		&armcompute.DedicatedHostsClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/DedicatedHosts_Update_MaximumSet_Gen.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/DedicatedHosts_Update_MaximumSet_Gen.json: %v", err)
	}
	// Response check
	exampleRes := armcompute.DedicatedHost{
		Name:     to.Ptr("myDedicatedHost"),
		Type:     to.Ptr("aaaaaaaaaaaaaaaaaaa"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/HostGroups/myDedicatedHostGroup/hosts/myDedicatedHost"),
		Location: to.Ptr("westus"),
		Tags:     map[string]*string{},
		Properties: &armcompute.DedicatedHostProperties{
			AutoReplaceOnFailure: to.Ptr(true),
			HostID:               to.Ptr("{GUID}"),
			InstanceView: &armcompute.DedicatedHostInstanceView{
				AssetID: to.Ptr("aaaaaaaaaaaaaaaa"),
				AvailableCapacity: &armcompute.DedicatedHostAvailableCapacity{
					AllocatableVMs: []*armcompute.DedicatedHostAllocatableVM{
						{
							Count:  to.Ptr[float64](26),
							VMSize: to.Ptr("aaaaaaaaaaaaaaaaaaaa"),
						}},
				},
				Statuses: []*armcompute.InstanceViewStatus{
					{
						Code:          to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
						DisplayStatus: to.Ptr("aaaaaa"),
						Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
						Message:       to.Ptr("a"),
						Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.522Z"); return t }()),
					}},
			},
			LicenseType:         to.Ptr(armcompute.DedicatedHostLicenseTypesWindowsServerHybrid),
			PlatformFaultDomain: to.Ptr[int32](1),
			ProvisioningState:   to.Ptr("Succeeded"),
			ProvisioningTime:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.526Z"); return t }()),
			VirtualMachines: []*armcompute.SubResourceReadOnly{
				{
					ID: to.Ptr("aaaa"),
				}},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("DSv3-Type1"),
			Capacity: to.Ptr[int64](7),
			Tier:     to.Ptr("aaa"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.DedicatedHost) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.DedicatedHost)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/DedicatedHosts_Update_MaximumSet_Gen.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/DedicatedHosts_Update_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DedicatedHosts_Update_MinimumSet_Gen"},
	})
	client, err = armcompute.NewDedicatedHostsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginUpdate(ctx,
		"rgcompute",
		"aa",
		"aaaaaaaaaaaaaaaaaaaaaaaaaa",
		armcompute.DedicatedHostUpdate{},
		&armcompute.DedicatedHostsClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/DedicatedHosts_Update_MinimumSet_Gen.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/DedicatedHosts_Update_MinimumSet_Gen.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.DedicatedHost{
		Location: to.Ptr("westus"),
		SKU:      &armcompute.SKU{},
	}
	if !reflect.DeepEqual(exampleRes, res.DedicatedHost) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.DedicatedHost)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/DedicatedHosts_Update_MinimumSet_Gen.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestDedicatedHosts_Delete(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/DedicatedHosts_Delete_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DedicatedHosts_Delete_MaximumSet_Gen"},
	})
	client, err := armcompute.NewDedicatedHostsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginDelete(ctx,
		"rgcompute",
		"aaaaaa",
		"aaaaaaaaaaaaaaa",
		&armcompute.DedicatedHostsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/DedicatedHosts_Delete_MaximumSet_Gen.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/DedicatedHosts_Delete_MaximumSet_Gen.json: %v", err)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/DedicatedHosts_Delete_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DedicatedHosts_Delete_MinimumSet_Gen"},
	})
	client, err = armcompute.NewDedicatedHostsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginDelete(ctx,
		"rgcompute",
		"aaaaaaaaaaaaaaa",
		"aaaaa",
		&armcompute.DedicatedHostsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/DedicatedHosts_Delete_MinimumSet_Gen.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/DedicatedHosts_Delete_MinimumSet_Gen.json: %v", err)
	}
}

func TestDedicatedHosts_Get(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/GetADedicatedHost.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a dedicated host."},
	})
	client, err := armcompute.NewDedicatedHostsClient("{subscriptionId}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myDedicatedHostGroup",
		"myHost",
		&armcompute.DedicatedHostsClientGetOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/GetADedicatedHost.json: %v", err)
	}
	// Response check
	exampleRes := armcompute.DedicatedHost{
		Name:     to.Ptr("myHost"),
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"department": to.Ptr("HR"),
		},
		Properties: &armcompute.DedicatedHostProperties{
			AutoReplaceOnFailure: to.Ptr(true),
			HostID:               to.Ptr("{GUID}"),
			InstanceView: &armcompute.DedicatedHostInstanceView{
				AssetID: to.Ptr("eb3f58b8-b4e8-4882-b69f-301a01812407"),
				AvailableCapacity: &armcompute.DedicatedHostAvailableCapacity{
					AllocatableVMs: []*armcompute.DedicatedHostAllocatableVM{
						{
							Count:  to.Ptr[float64](10),
							VMSize: to.Ptr("Standard_A1"),
						}},
				},
				Statuses: []*armcompute.InstanceViewStatus{
					{
						Code:          to.Ptr("ProvisioningState/succeeded"),
						DisplayStatus: to.Ptr("Provisioning succeeded"),
						Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
					},
					{
						Code:          to.Ptr("HealthState/available"),
						DisplayStatus: to.Ptr("Host available"),
						Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
					}},
			},
			PlatformFaultDomain: to.Ptr[int32](1),
			ProvisioningState:   to.Ptr("Succeeded"),
			ProvisioningTime:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-06-27T01:02:38.3138469+00:00"); return t }()),
			TimeCreated:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-06-27T01:02:38.3138469+00:00"); return t }()),
			VirtualMachines: []*armcompute.SubResourceReadOnly{
				{
					ID: to.Ptr("/subscriptions/subId/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/vm1"),
				}},
		},
		SKU: &armcompute.SKU{
			Name: to.Ptr("DSv3-Type1"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.DedicatedHost) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.DedicatedHost)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/GetADedicatedHost.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestDedicatedHosts_ListByHostGroup(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/DedicatedHosts_ListByHostGroup_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DedicatedHosts_ListByHostGroup_MaximumSet_Gen"},
	})
	client, err := armcompute.NewDedicatedHostsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := client.NewListByHostGroupPager("rgcompute",
		"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/DedicatedHosts_ListByHostGroup_MaximumSet_Gen.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcompute.DedicatedHostListResult{
			Value: []*armcompute.DedicatedHost{
				{
					Name:     to.Ptr("myDedicatedHost"),
					Type:     to.Ptr("aaaaaaaaaaaaaaaaaaa"),
					ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/HostGroups/myDedicatedHostGroup/hosts/myDedicatedHost"),
					Location: to.Ptr("westus"),
					Tags:     map[string]*string{},
					Properties: &armcompute.DedicatedHostProperties{
						AutoReplaceOnFailure: to.Ptr(true),
						HostID:               to.Ptr("{GUID}"),
						InstanceView: &armcompute.DedicatedHostInstanceView{
							AssetID: to.Ptr("aaaaaaaaaaaaaaaa"),
							AvailableCapacity: &armcompute.DedicatedHostAvailableCapacity{
								AllocatableVMs: []*armcompute.DedicatedHostAllocatableVM{
									{
										Count:  to.Ptr[float64](26),
										VMSize: to.Ptr("aaaaaaaaaaaaaaaaaaaa"),
									}},
							},
							Statuses: []*armcompute.InstanceViewStatus{
								{
									Code:          to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
									DisplayStatus: to.Ptr("aaaaaa"),
									Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
									Message:       to.Ptr("a"),
									Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.522Z"); return t }()),
								}},
						},
						LicenseType:         to.Ptr(armcompute.DedicatedHostLicenseTypesWindowsServerHybrid),
						PlatformFaultDomain: to.Ptr[int32](1),
						ProvisioningState:   to.Ptr("Succeeded"),
						ProvisioningTime:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.526Z"); return t }()),
						VirtualMachines: []*armcompute.SubResourceReadOnly{
							{
								ID: to.Ptr("aaaa"),
							}},
					},
					SKU: &armcompute.SKU{
						Name:     to.Ptr("DSv3-Type1"),
						Capacity: to.Ptr[int64](7),
						Tier:     to.Ptr("aaa"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DedicatedHostListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DedicatedHostListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/DedicatedHosts_ListByHostGroup_MaximumSet_Gen.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/DedicatedHosts_ListByHostGroup_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DedicatedHosts_ListByHostGroup_MinimumSet_Gen"},
	})
	client, err = armcompute.NewDedicatedHostsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager = client.NewListByHostGroupPager("rgcompute",
		"aaaa",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/DedicatedHosts_ListByHostGroup_MinimumSet_Gen.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcompute.DedicatedHostListResult{
			Value: []*armcompute.DedicatedHost{
				{
					Location: to.Ptr("westus"),
					SKU:      &armcompute.SKU{},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DedicatedHostListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DedicatedHostListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/DedicatedHosts_ListByHostGroup_MinimumSet_Gen.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDedicatedHosts_Restart(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/DedicatedHostRestart.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Restart Dedicated Host."},
	})
	client, err := armcompute.NewDedicatedHostsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginRestart(ctx,
		"myResourceGroup",
		"myDedicatedHostGroup",
		"myHost",
		&armcompute.DedicatedHostsClientBeginRestartOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/DedicatedHostRestart.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/DedicatedHostRestart.json: %v", err)
	}
}

func TestSSHPublicKeys_ListBySubscription(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/SshPublicKeys_ListBySubscription_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SshPublicKeys_ListBySubscription_MaximumSet_Gen"},
	})
	client, err := armcompute.NewSSHPublicKeysClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := client.NewListBySubscriptionPager(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/SshPublicKeys_ListBySubscription_MaximumSet_Gen.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcompute.SSHPublicKeysGroupListResult{
			Value: []*armcompute.SSHPublicKeyResource{
				{
					Name:     to.Ptr("mySshPublicKeyName"),
					Type:     to.Ptr("aaaa"),
					ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/sshPublicKeys/mySshPublicKeyName"),
					Location: to.Ptr("westus"),
					Tags: map[string]*string{
						"key6396": to.Ptr("aaaaaaaaaaaaa"),
						"key8839": to.Ptr("aaa"),
					},
					Properties: &armcompute.SSHPublicKeyResourceProperties{
						PublicKey: to.Ptr("{ssh-rsa public key}"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SSHPublicKeysGroupListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SSHPublicKeysGroupListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/SshPublicKeys_ListBySubscription_MaximumSet_Gen.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/SshPublicKeys_ListBySubscription_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SshPublicKeys_ListBySubscription_MinimumSet_Gen"},
	})
	client, err = armcompute.NewSSHPublicKeysClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager = client.NewListBySubscriptionPager(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/SshPublicKeys_ListBySubscription_MinimumSet_Gen.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcompute.SSHPublicKeysGroupListResult{
			Value: []*armcompute.SSHPublicKeyResource{
				{
					Location: to.Ptr("westus"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SSHPublicKeysGroupListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SSHPublicKeysGroupListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/SshPublicKeys_ListBySubscription_MinimumSet_Gen.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSSHPublicKeys_ListByResourceGroup(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/SshPublicKeys_ListByResourceGroup_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SshPublicKeys_ListByResourceGroup_MaximumSet_Gen"},
	})
	client, err := armcompute.NewSSHPublicKeysClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := client.NewListByResourceGroupPager("rgcompute",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/SshPublicKeys_ListByResourceGroup_MaximumSet_Gen.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcompute.SSHPublicKeysGroupListResult{
			Value: []*armcompute.SSHPublicKeyResource{
				{
					Name:     to.Ptr("mySshPublicKeyName"),
					Type:     to.Ptr("aaaa"),
					ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/sshPublicKeys/mySshPublicKeyName"),
					Location: to.Ptr("westus"),
					Tags: map[string]*string{
						"key6396": to.Ptr("aaaaaaaaaaaaa"),
						"key8839": to.Ptr("aaa"),
					},
					Properties: &armcompute.SSHPublicKeyResourceProperties{
						PublicKey: to.Ptr("{ssh-rsa public key}"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SSHPublicKeysGroupListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SSHPublicKeysGroupListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/SshPublicKeys_ListByResourceGroup_MaximumSet_Gen.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/SshPublicKeys_ListByResourceGroup_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SshPublicKeys_ListByResourceGroup_MinimumSet_Gen"},
	})
	client, err = armcompute.NewSSHPublicKeysClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager = client.NewListByResourceGroupPager("rgcompute",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/SshPublicKeys_ListByResourceGroup_MinimumSet_Gen.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcompute.SSHPublicKeysGroupListResult{
			Value: []*armcompute.SSHPublicKeyResource{
				{
					Location: to.Ptr("westus"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SSHPublicKeysGroupListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SSHPublicKeysGroupListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/SshPublicKeys_ListByResourceGroup_MinimumSet_Gen.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSSHPublicKeys_Create(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAnSshPublicKey.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a new SSH public key resource."},
	})
	client, err := armcompute.NewSSHPublicKeysClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := client.Create(ctx,
		"myResourceGroup",
		"mySshPublicKeyName",
		armcompute.SSHPublicKeyResource{
			Location: to.Ptr("westus"),
			Properties: &armcompute.SSHPublicKeyResourceProperties{
				PublicKey: to.Ptr("{ssh-rsa public key}"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAnSshPublicKey.json: %v", err)
	}
	// Response check
	exampleRes := armcompute.SSHPublicKeyResource{
		Name:     to.Ptr("mySshPublicKeyName"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/sshPublicKeys/mySshPublicKeyName"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.SSHPublicKeyResourceProperties{
			PublicKey: to.Ptr("{ssh-rsa public key}"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.SSHPublicKeyResource) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.SSHPublicKeyResource)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAnSshPublicKey.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestSSHPublicKeys_Update(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/SshPublicKeys_Update_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SshPublicKeys_Update_MaximumSet_Gen"},
	})
	client, err := armcompute.NewSSHPublicKeysClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := client.Update(ctx,
		"rgcompute",
		"aaaaaaaaaaaa",
		armcompute.SSHPublicKeyUpdateResource{
			Tags: map[string]*string{
				"key2854": to.Ptr("a"),
			},
			Properties: &armcompute.SSHPublicKeyResourceProperties{
				PublicKey: to.Ptr("{ssh-rsa public key}"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/SshPublicKeys_Update_MaximumSet_Gen.json: %v", err)
	}
	// Response check
	exampleRes := armcompute.SSHPublicKeyResource{
		Name:     to.Ptr("mySshPublicKeyName"),
		Type:     to.Ptr("aaaa"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/sshPublicKeys/mySshPublicKeyName"),
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"key6396": to.Ptr("aaaaaaaaaaaaa"),
			"key8839": to.Ptr("aaa"),
		},
		Properties: &armcompute.SSHPublicKeyResourceProperties{
			PublicKey: to.Ptr("{ssh-rsa public key}"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.SSHPublicKeyResource) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.SSHPublicKeyResource)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/SshPublicKeys_Update_MaximumSet_Gen.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/SshPublicKeys_Update_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SshPublicKeys_Update_MinimumSet_Gen"},
	})
	client, err = armcompute.NewSSHPublicKeysClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err = client.Update(ctx,
		"rgcompute",
		"aaaaaaaaaaa",
		armcompute.SSHPublicKeyUpdateResource{},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/SshPublicKeys_Update_MinimumSet_Gen.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.SSHPublicKeyResource{
		Location: to.Ptr("westus"),
	}
	if !reflect.DeepEqual(exampleRes, res.SSHPublicKeyResource) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.SSHPublicKeyResource)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/SshPublicKeys_Update_MinimumSet_Gen.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestSSHPublicKeys_Delete(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/SshPublicKeys_Delete_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SshPublicKeys_Delete_MaximumSet_Gen"},
	})
	client, err := armcompute.NewSSHPublicKeysClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	_, err = client.Delete(ctx,
		"rgcompute",
		"aaaaaaaaaa",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/SshPublicKeys_Delete_MaximumSet_Gen.json: %v", err)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/SshPublicKeys_Delete_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SshPublicKeys_Delete_MinimumSet_Gen"},
	})
	client, err = armcompute.NewSSHPublicKeysClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	_, err = client.Delete(ctx,
		"rgcompute",
		"aaaaaaaaaaaaaaaaaaa",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/SshPublicKeys_Delete_MinimumSet_Gen.json: %v", err)
	}
}

func TestSSHPublicKeys_Get(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/GetAnSshPublicKey.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get an ssh public key."},
	})
	client, err := armcompute.NewSSHPublicKeysClient("{subscriptionId}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := client.Get(ctx,
		"myResourceGroup",
		"mySshPublicKeyName",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/GetAnSshPublicKey.json: %v", err)
	}
	// Response check
	exampleRes := armcompute.SSHPublicKeyResource{
		Name:     to.Ptr("mySshPublicKeyName"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/SshPublicKeys/mySshPublicKeyName"),
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"{tagName}": to.Ptr("{tagValue}"),
		},
		Properties: &armcompute.SSHPublicKeyResourceProperties{
			PublicKey: to.Ptr("{ssh-rsa public key}"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.SSHPublicKeyResource) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.SSHPublicKeyResource)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/GetAnSshPublicKey.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestSSHPublicKeys_GenerateKeyPair(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/GenerateSshKeyPair.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Generate an SSH key pair."},
	})
	client, err := armcompute.NewSSHPublicKeysClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := client.GenerateKeyPair(ctx,
		"myResourceGroup",
		"mySshPublicKeyName",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/GenerateSshKeyPair.json: %v", err)
	}
	// Response check
	exampleRes := armcompute.SSHPublicKeyGenerateKeyPairResult{
		ID:         to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/SshPublicKeys/mySshPublicKeyName"),
		PrivateKey: to.Ptr("{ssh private key}"),
		PublicKey:  to.Ptr("{ssh-rsa public key}"),
	}
	if !reflect.DeepEqual(exampleRes, res.SSHPublicKeyGenerateKeyPairResult) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.SSHPublicKeyGenerateKeyPairResult)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/GenerateSshKeyPair.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestVirtualMachineExtensionImages_Get(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineExtensionImages_Get_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineExtensionImages_Get_MaximumSet_Gen"},
	})
	client, err := armcompute.NewVirtualMachineExtensionImagesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := client.Get(ctx,
		"aaaaaaaaaaaaa",
		"aaaaaaaaaaaaaaaaaaaa",
		"aaaaaaaaaaaaaaaaaa",
		"aaaaaaaaaaaaaa",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineExtensionImages_Get_MaximumSet_Gen.json: %v", err)
	}
	// Response check
	exampleRes := armcompute.VirtualMachineExtensionImage{
		Name:     to.Ptr("aaaaaaaaaaaaaaa"),
		Type:     to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
		ID:       to.Ptr("aaaaaaaaaaaaaaaaa"),
		Location: to.Ptr("aaaaaaaaaaaaa"),
		Tags: map[string]*string{
			"key9885": to.Ptr("aaaaaaaaa"),
		},
		Properties: &armcompute.VirtualMachineExtensionImageProperties{
			ComputeRole:                to.Ptr("aaaaaaaaaaaaaaaaa"),
			HandlerSchema:              to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
			OperatingSystem:            to.Ptr("aaaaaaaaaaaaaaaaaa"),
			SupportsMultipleExtensions: to.Ptr(true),
			VMScaleSetEnabled:          to.Ptr(true),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineExtensionImage) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineExtensionImage)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineExtensionImages_Get_MaximumSet_Gen.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineExtensionImages_Get_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineExtensionImages_Get_MinimumSet_Gen"},
	})
	client, err = armcompute.NewVirtualMachineExtensionImagesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err = client.Get(ctx,
		"aaaaaaaaaaaaaa",
		"aaaaaaaaaaaaaaaaaaaaaaaaaa",
		"aa",
		"aaa",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineExtensionImages_Get_MinimumSet_Gen.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.VirtualMachineExtensionImage{
		Name:     to.Ptr("aaaaaaaaaaaaaaa"),
		Location: to.Ptr("aaaaaaaaaaaaa"),
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineExtensionImage) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineExtensionImage)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineExtensionImages_Get_MinimumSet_Gen.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestVirtualMachineExtensionImages_ListTypes(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineExtensionImages_ListTypes_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineExtensionImages_ListTypes_MaximumSet_Gen"},
	})
	client, err := armcompute.NewVirtualMachineExtensionImagesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := client.ListTypes(ctx,
		"aaaaaaaaaaaaaaaaaaaaaaaaaa",
		"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineExtensionImages_ListTypes_MaximumSet_Gen.json: %v", err)
	}
	// Response check
	exampleRes := []*armcompute.VirtualMachineExtensionImage{
		{
			Name:     to.Ptr("aaaaaaaaaaaaaaa"),
			Type:     to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
			ID:       to.Ptr("aaaaaaaaaaaaaaaaa"),
			Location: to.Ptr("aaaaaaaaaaaaa"),
			Tags: map[string]*string{
				"key9885": to.Ptr("aaaaaaaaa"),
			},
			Properties: &armcompute.VirtualMachineExtensionImageProperties{
				ComputeRole:                to.Ptr("aaaaaaaaaaaaaaaaa"),
				HandlerSchema:              to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
				OperatingSystem:            to.Ptr("aaaaaaaaaaaaaaaaaa"),
				SupportsMultipleExtensions: to.Ptr(true),
				VMScaleSetEnabled:          to.Ptr(true),
			},
		}}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineExtensionImageArray) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineExtensionImageArray)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineExtensionImages_ListTypes_MaximumSet_Gen.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineExtensionImages_ListTypes_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineExtensionImages_ListTypes_MinimumSet_Gen"},
	})
	client, err = armcompute.NewVirtualMachineExtensionImagesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err = client.ListTypes(ctx,
		"aaaa",
		"aa",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineExtensionImages_ListTypes_MinimumSet_Gen.json: %v", err)
	}
	// Response check
	exampleRes = []*armcompute.VirtualMachineExtensionImage{
		{
			Name:     to.Ptr("aaaaaaaaaaaaaaa"),
			Location: to.Ptr("aaaaaaaaaaaaa"),
		}}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineExtensionImageArray) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineExtensionImageArray)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineExtensionImages_ListTypes_MinimumSet_Gen.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestVirtualMachineExtensionImages_ListVersions(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineExtensionImages_ListVersions_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineExtensionImages_ListVersions_MaximumSet_Gen"},
	})
	client, err := armcompute.NewVirtualMachineExtensionImagesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := client.ListVersions(ctx,
		"aaaaaaaaaaaaaaaaaaaaaaaaaa",
		"aaaaaaaaaaaaaaaaaaaa",
		"aaaaaaaaaaaaaaaaaa",
		&armcompute.VirtualMachineExtensionImagesClientListVersionsOptions{Filter: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaa"),
			Top:     to.Ptr[int32](22),
			Orderby: to.Ptr("a"),
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineExtensionImages_ListVersions_MaximumSet_Gen.json: %v", err)
	}
	// Response check
	exampleRes := []*armcompute.VirtualMachineExtensionImage{
		{
			Name:     to.Ptr("aaaaaaaaaaaaaaa"),
			Type:     to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
			ID:       to.Ptr("aaaaaaaaaaaaaaaaa"),
			Location: to.Ptr("aaaaaaaaaaaaa"),
			Tags: map[string]*string{
				"key9885": to.Ptr("aaaaaaaaa"),
			},
			Properties: &armcompute.VirtualMachineExtensionImageProperties{
				ComputeRole:                to.Ptr("aaaaaaaaaaaaaaaaa"),
				HandlerSchema:              to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
				OperatingSystem:            to.Ptr("aaaaaaaaaaaaaaaaaa"),
				SupportsMultipleExtensions: to.Ptr(true),
				VMScaleSetEnabled:          to.Ptr(true),
			},
		}}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineExtensionImageArray) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineExtensionImageArray)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineExtensionImages_ListVersions_MaximumSet_Gen.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineExtensionImages_ListVersions_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineExtensionImages_ListVersions_MinimumSet_Gen"},
	})
	client, err = armcompute.NewVirtualMachineExtensionImagesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err = client.ListVersions(ctx,
		"aaaaaaaaa",
		"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
		"aaaa",
		&armcompute.VirtualMachineExtensionImagesClientListVersionsOptions{Filter: nil,
			Top:     nil,
			Orderby: nil,
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineExtensionImages_ListVersions_MinimumSet_Gen.json: %v", err)
	}
	// Response check
	exampleRes = []*armcompute.VirtualMachineExtensionImage{
		{
			Name:     to.Ptr("aaaaaaaaaaaaaaa"),
			Location: to.Ptr("aaaaaaaaaaaaa"),
		}}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineExtensionImageArray) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineExtensionImageArray)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineExtensionImages_ListVersions_MinimumSet_Gen.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestVirtualMachineExtensions_CreateOrUpdate(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineExtensions_CreateOrUpdate_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineExtensions_CreateOrUpdate_MaximumSet_Gen"},
	})
	client, err := armcompute.NewVirtualMachineExtensionsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rgcompute",
		"aaaaaaaaaaaaaaaaaaaaaaaa",
		"aaaaaaaaaaaaa",
		armcompute.VirtualMachineExtension{
			Location: to.Ptr("westus"),
			Tags: map[string]*string{
				"key9183": to.Ptr("aa"),
			},
			Properties: &armcompute.VirtualMachineExtensionProperties{
				Type:                    to.Ptr("extType"),
				AutoUpgradeMinorVersion: to.Ptr(true),
				EnableAutomaticUpgrade:  to.Ptr(true),
				ForceUpdateTag:          to.Ptr("a"),
				InstanceView: &armcompute.VirtualMachineExtensionInstanceView{
					Name: to.Ptr("aaaaaaaaaaaaaaaaa"),
					Type: to.Ptr("aaaaaaaaa"),
					Statuses: []*armcompute.InstanceViewStatus{
						{
							Code:          to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
							DisplayStatus: to.Ptr("aaaaaa"),
							Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
							Message:       to.Ptr("a"),
							Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.522Z"); return t }()),
						}},
					Substatuses: []*armcompute.InstanceViewStatus{
						{
							Code:          to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
							DisplayStatus: to.Ptr("aaaaaa"),
							Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
							Message:       to.Ptr("a"),
							Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.522Z"); return t }()),
						}},
					TypeHandlerVersion: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaa"),
				},
				ProtectedSettings:  map[string]interface{}{},
				Publisher:          to.Ptr("extPublisher"),
				Settings:           map[string]interface{}{},
				SuppressFailures:   to.Ptr(true),
				TypeHandlerVersion: to.Ptr("1.2"),
			},
		},
		&armcompute.VirtualMachineExtensionsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineExtensions_CreateOrUpdate_MaximumSet_Gen.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineExtensions_CreateOrUpdate_MaximumSet_Gen.json: %v", err)
	}
	// Response check
	exampleRes := armcompute.VirtualMachineExtension{
		Name:     to.Ptr("myVMExtension"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines/extensions"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM/extensions/myVMExtension"),
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"key9183": to.Ptr("aa"),
		},
		Properties: &armcompute.VirtualMachineExtensionProperties{
			Type:                    to.Ptr("extType"),
			AutoUpgradeMinorVersion: to.Ptr(true),
			EnableAutomaticUpgrade:  to.Ptr(true),
			ForceUpdateTag:          to.Ptr("a"),
			InstanceView: &armcompute.VirtualMachineExtensionInstanceView{
				Name: to.Ptr("aaaaaaaaaaaaaaaaa"),
				Type: to.Ptr("aaaaaaaaa"),
				Statuses: []*armcompute.InstanceViewStatus{
					{
						Code:          to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
						DisplayStatus: to.Ptr("aaaaaa"),
						Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
						Message:       to.Ptr("a"),
						Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.522Z"); return t }()),
					}},
				Substatuses: []*armcompute.InstanceViewStatus{
					{
						Code:          to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
						DisplayStatus: to.Ptr("aaaaaa"),
						Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
						Message:       to.Ptr("a"),
						Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.522Z"); return t }()),
					}},
				TypeHandlerVersion: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaa"),
			},
			ProtectedSettings:  map[string]interface{}{},
			ProvisioningState:  to.Ptr("Succeeded"),
			Publisher:          to.Ptr("extPublisher"),
			Settings:           map[string]interface{}{},
			SuppressFailures:   to.Ptr(true),
			TypeHandlerVersion: to.Ptr("1.2"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineExtension) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineExtension)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineExtensions_CreateOrUpdate_MaximumSet_Gen.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineExtensions_CreateOrUpdate_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineExtensions_CreateOrUpdate_MinimumSet_Gen"},
	})
	client, err = armcompute.NewVirtualMachineExtensionsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rgcompute",
		"aaaa",
		"aaaaaaaaaaaaaaaaaaaaaaaa",
		armcompute.VirtualMachineExtension{
			Location: to.Ptr("westus"),
		},
		&armcompute.VirtualMachineExtensionsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineExtensions_CreateOrUpdate_MinimumSet_Gen.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineExtensions_CreateOrUpdate_MinimumSet_Gen.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.VirtualMachineExtension{
		Location: to.Ptr("westus"),
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineExtension) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineExtension)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineExtensions_CreateOrUpdate_MinimumSet_Gen.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestVirtualMachineExtensions_Update(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/UpdateVMExtension.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update VM extension."},
	})
	client, err := armcompute.NewVirtualMachineExtensionsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginUpdate(ctx,
		"myResourceGroup",
		"myVM",
		"myVMExtension",
		armcompute.VirtualMachineExtensionUpdate{
			Properties: &armcompute.VirtualMachineExtensionUpdateProperties{
				Type:                    to.Ptr("extType"),
				AutoUpgradeMinorVersion: to.Ptr(true),
				ProtectedSettingsFromKeyVault: map[string]interface{}{
					"secretUrl": "https://kvName.vault.azure.net/secrets/secretName/79b88b3a6f5440ffb2e73e44a0db712e",
					"sourceVault": map[string]interface{}{
						"id": "/subscriptions/a53f7094-a16c-47af-abe4-b05c05d0d79a/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/kvName",
					},
				},
				Publisher: to.Ptr("extPublisher"),
				Settings: map[string]interface{}{
					"UserName": "xyz@microsoft.com",
				},
				SuppressFailures:   to.Ptr(true),
				TypeHandlerVersion: to.Ptr("1.2"),
			},
		},
		&armcompute.VirtualMachineExtensionsClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/UpdateVMExtension.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/UpdateVMExtension.json: %v", err)
	}
	// Response check
	exampleRes := armcompute.VirtualMachineExtension{
		Name:     to.Ptr("myVMExtension"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines/extensions"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM/extensions/myVMExtension"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineExtensionProperties{
			Type:                    to.Ptr("extType"),
			AutoUpgradeMinorVersion: to.Ptr(true),
			ProtectedSettingsFromKeyVault: map[string]interface{}{
				"secretUrl": "https://kvName.vault.azure.net/secrets/secretName/79b88b3a6f5440ffb2e73e44a0db712e",
				"sourceVault": map[string]interface{}{
					"id": "/subscriptions/a53f7094-a16c-47af-abe4-b05c05d0d79a/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/kvName",
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			Publisher:         to.Ptr("extPublisher"),
			Settings: map[string]interface{}{
				"UserName": "xyz@microsoft.com",
			},
			SuppressFailures:   to.Ptr(true),
			TypeHandlerVersion: to.Ptr("1.2"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineExtension) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineExtension)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/UpdateVMExtension.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestVirtualMachineExtensions_Delete(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineExtensions_Delete_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineExtensions_Delete_MaximumSet_Gen"},
	})
	client, err := armcompute.NewVirtualMachineExtensionsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginDelete(ctx,
		"rgcompute",
		"aaaaaaaaaaaaa",
		"aaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
		&armcompute.VirtualMachineExtensionsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineExtensions_Delete_MaximumSet_Gen.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineExtensions_Delete_MaximumSet_Gen.json: %v", err)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineExtensions_Delete_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineExtensions_Delete_MinimumSet_Gen"},
	})
	client, err = armcompute.NewVirtualMachineExtensionsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginDelete(ctx,
		"rgcompute",
		"aaaaaaaaaaaaaaaaaaaaaaaaa",
		"aa",
		&armcompute.VirtualMachineExtensionsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineExtensions_Delete_MinimumSet_Gen.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineExtensions_Delete_MinimumSet_Gen.json: %v", err)
	}
}

func TestVirtualMachineExtensions_Get(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineExtensions_Get_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineExtensions_Get_MaximumSet_Gen"},
	})
	client, err := armcompute.NewVirtualMachineExtensionsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := client.Get(ctx,
		"rgcompute",
		"aaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
		"aaaaaaa",
		&armcompute.VirtualMachineExtensionsClientGetOptions{Expand: to.Ptr("aaaaaa")})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineExtensions_Get_MaximumSet_Gen.json: %v", err)
	}
	// Response check
	exampleRes := armcompute.VirtualMachineExtension{
		Name:     to.Ptr("myVMExtension"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines/extensions"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM/extensions/myVMExtension"),
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"key9183": to.Ptr("aa"),
		},
		Properties: &armcompute.VirtualMachineExtensionProperties{
			Type:                    to.Ptr("extType"),
			AutoUpgradeMinorVersion: to.Ptr(true),
			EnableAutomaticUpgrade:  to.Ptr(true),
			ForceUpdateTag:          to.Ptr("a"),
			InstanceView: &armcompute.VirtualMachineExtensionInstanceView{
				Name: to.Ptr("aaaaaaaaaaaaaaaaa"),
				Type: to.Ptr("aaaaaaaaa"),
				Statuses: []*armcompute.InstanceViewStatus{
					{
						Code:          to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
						DisplayStatus: to.Ptr("aaaaaa"),
						Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
						Message:       to.Ptr("a"),
						Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.522Z"); return t }()),
					}},
				Substatuses: []*armcompute.InstanceViewStatus{
					{
						Code:          to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
						DisplayStatus: to.Ptr("aaaaaa"),
						Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
						Message:       to.Ptr("a"),
						Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.522Z"); return t }()),
					}},
				TypeHandlerVersion: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaa"),
			},
			ProtectedSettings:  map[string]interface{}{},
			ProvisioningState:  to.Ptr("Succeeded"),
			Publisher:          to.Ptr("extPublisher"),
			Settings:           map[string]interface{}{},
			SuppressFailures:   to.Ptr(true),
			TypeHandlerVersion: to.Ptr("1.2"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineExtension) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineExtension)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineExtensions_Get_MaximumSet_Gen.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineExtensions_Get_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineExtensions_Get_MinimumSet_Gen"},
	})
	client, err = armcompute.NewVirtualMachineExtensionsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err = client.Get(ctx,
		"rgcompute",
		"a",
		"aaaaaaaaaaaaaaaaaaaaaaaaaaaa",
		&armcompute.VirtualMachineExtensionsClientGetOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineExtensions_Get_MinimumSet_Gen.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.VirtualMachineExtension{
		Location: to.Ptr("westus"),
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineExtension) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineExtension)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineExtensions_Get_MinimumSet_Gen.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestVirtualMachineExtensions_List(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineExtensions_List_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineExtensions_List_MaximumSet_Gen"},
	})
	client, err := armcompute.NewVirtualMachineExtensionsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := client.List(ctx,
		"rgcompute",
		"aaaaaaaaaaaaa",
		&armcompute.VirtualMachineExtensionsClientListOptions{Expand: to.Ptr("aaaaaaaaaaaaaaaaa")})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineExtensions_List_MaximumSet_Gen.json: %v", err)
	}
	// Response check
	exampleRes := armcompute.VirtualMachineExtensionsListResult{
		Value: []*armcompute.VirtualMachineExtension{
			{
				Name:     to.Ptr("myVMExtension"),
				Type:     to.Ptr("Microsoft.Compute/virtualMachines/extensions"),
				ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM/extensions/myVMExtension"),
				Location: to.Ptr("westus"),
				Tags: map[string]*string{
					"key9183": to.Ptr("aa"),
				},
				Properties: &armcompute.VirtualMachineExtensionProperties{
					Type:                    to.Ptr("extType"),
					AutoUpgradeMinorVersion: to.Ptr(true),
					EnableAutomaticUpgrade:  to.Ptr(true),
					ForceUpdateTag:          to.Ptr("a"),
					InstanceView: &armcompute.VirtualMachineExtensionInstanceView{
						Name: to.Ptr("aaaaaaaaaaaaaaaaa"),
						Type: to.Ptr("aaaaaaaaa"),
						Statuses: []*armcompute.InstanceViewStatus{
							{
								Code:          to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
								DisplayStatus: to.Ptr("aaaaaa"),
								Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
								Message:       to.Ptr("a"),
								Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.522Z"); return t }()),
							}},
						Substatuses: []*armcompute.InstanceViewStatus{
							{
								Code:          to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
								DisplayStatus: to.Ptr("aaaaaa"),
								Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
								Message:       to.Ptr("a"),
								Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.522Z"); return t }()),
							}},
						TypeHandlerVersion: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaa"),
					},
					ProtectedSettings:  map[string]interface{}{},
					ProvisioningState:  to.Ptr("Succeeded"),
					Publisher:          to.Ptr("extPublisher"),
					Settings:           map[string]interface{}{},
					SuppressFailures:   to.Ptr(true),
					TypeHandlerVersion: to.Ptr("1.2"),
				},
			}},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineExtensionsListResult) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineExtensionsListResult)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineExtensions_List_MaximumSet_Gen.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineExtensions_List_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineExtensions_List_MinimumSet_Gen"},
	})
	client, err = armcompute.NewVirtualMachineExtensionsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err = client.List(ctx,
		"rgcompute",
		"aaaaaaaaaaaaaaaaaaaaaaaaaaa",
		&armcompute.VirtualMachineExtensionsClientListOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineExtensions_List_MinimumSet_Gen.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.VirtualMachineExtensionsListResult{}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineExtensionsListResult) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineExtensionsListResult)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineExtensions_List_MinimumSet_Gen.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestVirtualMachineImages_Get(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineImages_Get_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineImages_Get_MaximumSet_Gen"},
	})
	client, err := armcompute.NewVirtualMachineImagesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := client.Get(ctx,
		"aaaaaa",
		"aaa",
		"aaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
		"aaaaaaaaaaaaaaaaaaaaaaaaaaa",
		"aaaaaaaaaaaaaaaaaaa",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineImages_Get_MaximumSet_Gen.json: %v", err)
	}
	// Response check
	exampleRes := armcompute.VirtualMachineImage{
		ID:   to.Ptr("aaaaaaaaaaa"),
		Name: to.Ptr("aaaaaaaaa"),
		ExtendedLocation: &armcompute.ExtendedLocation{
			Name: to.Ptr("aaaaaaaaaaaaaaaaaaaaa"),
			Type: to.Ptr(armcompute.ExtendedLocationTypesEdgeZone),
		},
		Location: to.Ptr("aaaaa"),
		Tags: map[string]*string{
			"key6817": to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
		},
		Properties: &armcompute.VirtualMachineImageProperties{
			AutomaticOSUpgradeProperties: &armcompute.AutomaticOSUpgradeProperties{
				AutomaticOSUpgradeSupported: to.Ptr(true),
			},
			DataDiskImages: []*armcompute.DataDiskImage{
				{
					Lun: to.Ptr[int32](17),
				}},
			Disallowed: &armcompute.DisallowedConfiguration{
				VMDiskType: to.Ptr(armcompute.VMDiskTypesNone),
			},
			Features: []*armcompute.VirtualMachineImageFeature{
				{
					Name:  to.Ptr("aaaaaaaaaaaaaaaaaaaaa"),
					Value: to.Ptr("aaaaaaaaaaaaaaaaaaaa"),
				}},
			HyperVGeneration: to.Ptr(armcompute.HyperVGenerationTypesV1),
			OSDiskImage: &armcompute.OSDiskImage{
				OperatingSystem: to.Ptr(armcompute.OperatingSystemTypesWindows),
			},
			Plan: &armcompute.PurchasePlan{
				Name:      to.Ptr("aaaaaaaaa"),
				Product:   to.Ptr("aaaaaaaaaaaaaa"),
				Publisher: to.Ptr("aaaaaaaaaaaaaaaaaaa"),
			},
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineImage) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineImage)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineImages_Get_MaximumSet_Gen.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineImages_Get_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineImages_Get_MinimumSet_Gen"},
	})
	client, err = armcompute.NewVirtualMachineImagesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err = client.Get(ctx,
		"aaaaaaaaaaaa",
		"aaaaaaaaaaa",
		"aa",
		"aaaaaaaaa",
		"aaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineImages_Get_MinimumSet_Gen.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.VirtualMachineImage{
		Name:     to.Ptr("aaaaaaaaa"),
		Location: to.Ptr("aaaaa"),
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineImage) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineImage)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineImages_Get_MinimumSet_Gen.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestVirtualMachineImages_List(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineImages_List_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineImages_List_MaximumSet_Gen"},
	})
	client, err := armcompute.NewVirtualMachineImagesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := client.List(ctx,
		"aaaaaaaaaaaaaaa",
		"aaaaaa",
		"aaaaaaaaaaaaaaaa",
		"aaaaaaaaaaaaaaaaaaaaaaa",
		&armcompute.VirtualMachineImagesClientListOptions{Expand: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaa"),
			Top:     to.Ptr[int32](18),
			Orderby: to.Ptr("aa"),
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineImages_List_MaximumSet_Gen.json: %v", err)
	}
	// Response check
	exampleRes := []*armcompute.VirtualMachineImageResource{
		{
			ID:   to.Ptr("aaaaaaaaaaa"),
			Name: to.Ptr("aaaaaaaa"),
			ExtendedLocation: &armcompute.ExtendedLocation{
				Name: to.Ptr("aaaaaaaaaaaaaaaaaaaaa"),
				Type: to.Ptr(armcompute.ExtendedLocationTypesEdgeZone),
			},
			Location: to.Ptr("aaaaaaaaaaaaaaaaaa"),
			Tags: map[string]*string{
				"key7868": to.Ptr("aaaaa"),
			},
		}}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineImageResourceArray) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineImageResourceArray)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineImages_List_MaximumSet_Gen.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineImages_List_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineImages_List_MinimumSet_Gen"},
	})
	client, err = armcompute.NewVirtualMachineImagesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err = client.List(ctx,
		"aaaaaaa",
		"aaaaaaaaaaa",
		"aaaaaaaaaa",
		"aaaaaa",
		&armcompute.VirtualMachineImagesClientListOptions{Expand: nil,
			Top:     nil,
			Orderby: nil,
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineImages_List_MinimumSet_Gen.json: %v", err)
	}
	// Response check
	exampleRes = []*armcompute.VirtualMachineImageResource{
		{
			Name:     to.Ptr("aaaaaaaa"),
			Location: to.Ptr("aaaaaaaaaaaaaaaaaa"),
		}}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineImageResourceArray) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineImageResourceArray)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineImages_List_MinimumSet_Gen.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestVirtualMachineImages_ListOffers(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineImages_ListOffers_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineImages_ListOffers_MaximumSet_Gen"},
	})
	client, err := armcompute.NewVirtualMachineImagesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := client.ListOffers(ctx,
		"aaaaaaa",
		"aaaaaaaa",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineImages_ListOffers_MaximumSet_Gen.json: %v", err)
	}
	// Response check
	exampleRes := []*armcompute.VirtualMachineImageResource{
		{
			ID:   to.Ptr("aaaaaaaaaaa"),
			Name: to.Ptr("aaaaaaaa"),
			ExtendedLocation: &armcompute.ExtendedLocation{
				Name: to.Ptr("aaaaaaaaaaaaaaaaaaaaa"),
				Type: to.Ptr(armcompute.ExtendedLocationTypesEdgeZone),
			},
			Location: to.Ptr("aaaaaaaaaaaaaaaaaa"),
			Tags: map[string]*string{
				"key7868": to.Ptr("aaaaa"),
			},
		}}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineImageResourceArray) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineImageResourceArray)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineImages_ListOffers_MaximumSet_Gen.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineImages_ListOffers_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineImages_ListOffers_MinimumSet_Gen"},
	})
	client, err = armcompute.NewVirtualMachineImagesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err = client.ListOffers(ctx,
		"aaaaaaaaaaaaaaaaa",
		"aaaaaaaaaaaaaaaaaaaaaaaaaaaa",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineImages_ListOffers_MinimumSet_Gen.json: %v", err)
	}
	// Response check
	exampleRes = []*armcompute.VirtualMachineImageResource{
		{
			Name:     to.Ptr("aaaaaaaa"),
			Location: to.Ptr("aaaaaaaaaaaaaaaaaa"),
		}}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineImageResourceArray) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineImageResourceArray)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineImages_ListOffers_MinimumSet_Gen.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestVirtualMachineImages_ListPublishers(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineImages_ListPublishers_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineImages_ListPublishers_MaximumSet_Gen"},
	})
	client, err := armcompute.NewVirtualMachineImagesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := client.ListPublishers(ctx,
		"aaaaa",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineImages_ListPublishers_MaximumSet_Gen.json: %v", err)
	}
	// Response check
	exampleRes := []*armcompute.VirtualMachineImageResource{
		{
			ID:   to.Ptr("aaaaaaaaaaa"),
			Name: to.Ptr("aaaaaaaa"),
			ExtendedLocation: &armcompute.ExtendedLocation{
				Name: to.Ptr("aaaaaaaaaaaaaaaaaaaaa"),
				Type: to.Ptr(armcompute.ExtendedLocationTypesEdgeZone),
			},
			Location: to.Ptr("aaaaaaaaaaaaaaaaaa"),
			Tags: map[string]*string{
				"key7868": to.Ptr("aaaaa"),
			},
		}}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineImageResourceArray) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineImageResourceArray)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineImages_ListPublishers_MaximumSet_Gen.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineImages_ListPublishers_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineImages_ListPublishers_MinimumSet_Gen"},
	})
	client, err = armcompute.NewVirtualMachineImagesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err = client.ListPublishers(ctx,
		"aaaaaaaaaaaaaaaaaaaaaaaaaaa",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineImages_ListPublishers_MinimumSet_Gen.json: %v", err)
	}
	// Response check
	exampleRes = []*armcompute.VirtualMachineImageResource{
		{
			Name:     to.Ptr("aaaaaaaa"),
			Location: to.Ptr("aaaaaaaaaaaaaaaaaa"),
		}}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineImageResourceArray) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineImageResourceArray)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineImages_ListPublishers_MinimumSet_Gen.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestVirtualMachineImagesEdgeZone_Get(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineImagesEdgeZone_Get_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineImagesEdgeZone_Get_MaximumSet_Gen"},
	})
	client, err := armcompute.NewVirtualMachineImagesEdgeZoneClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := client.Get(ctx,
		"aaaaaaaaaaaaaaaaaaaaaaaa",
		"aaaaaaaa",
		"aaaaaaaaaaaaaaaaaaaaaaa",
		"aaaaaaaaaaaaaaaaaaaaaaaaaaa",
		"aaaaaaaaaa",
		"aaaaaaaaaaaaaaaaaaaaaaaaaaa",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineImagesEdgeZone_Get_MaximumSet_Gen.json: %v", err)
	}
	// Response check
	exampleRes := armcompute.VirtualMachineImage{
		ID:   to.Ptr("aaaaaaaaaaa"),
		Name: to.Ptr("aaaaaaaaa"),
		ExtendedLocation: &armcompute.ExtendedLocation{
			Name: to.Ptr("aaaaaaaaaaaaaaaaaaaaa"),
			Type: to.Ptr(armcompute.ExtendedLocationTypesEdgeZone),
		},
		Location: to.Ptr("aaaaa"),
		Tags: map[string]*string{
			"key6817": to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
		},
		Properties: &armcompute.VirtualMachineImageProperties{
			AutomaticOSUpgradeProperties: &armcompute.AutomaticOSUpgradeProperties{
				AutomaticOSUpgradeSupported: to.Ptr(true),
			},
			DataDiskImages: []*armcompute.DataDiskImage{
				{
					Lun: to.Ptr[int32](17),
				}},
			Disallowed: &armcompute.DisallowedConfiguration{
				VMDiskType: to.Ptr(armcompute.VMDiskTypesNone),
			},
			Features: []*armcompute.VirtualMachineImageFeature{
				{
					Name:  to.Ptr("aaaaaaaaaaaaaaaaaaaaa"),
					Value: to.Ptr("aaaaaaaaaaaaaaaaaaaa"),
				}},
			HyperVGeneration: to.Ptr(armcompute.HyperVGenerationTypesV1),
			OSDiskImage: &armcompute.OSDiskImage{
				OperatingSystem: to.Ptr(armcompute.OperatingSystemTypesWindows),
			},
			Plan: &armcompute.PurchasePlan{
				Name:      to.Ptr("aaaaaaaaa"),
				Product:   to.Ptr("aaaaaaaaaaaaaa"),
				Publisher: to.Ptr("aaaaaaaaaaaaaaaaaaa"),
			},
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineImage) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineImage)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineImagesEdgeZone_Get_MaximumSet_Gen.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineImagesEdgeZone_Get_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineImagesEdgeZone_Get_MinimumSet_Gen"},
	})
	client, err = armcompute.NewVirtualMachineImagesEdgeZoneClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err = client.Get(ctx,
		"aaaaaaaaaaaaaaaaaaaaaaa",
		"aaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
		"aaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
		"aaaaaaaaaaa",
		"aaaaaaaaaaaaaaaaaa",
		"aa",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineImagesEdgeZone_Get_MinimumSet_Gen.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.VirtualMachineImage{
		Name:     to.Ptr("aaaaaaaaa"),
		Location: to.Ptr("aaaaa"),
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineImage) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineImage)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineImagesEdgeZone_Get_MinimumSet_Gen.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestVirtualMachineImagesEdgeZone_List(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineImagesEdgeZone_List_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineImagesEdgeZone_List_MaximumSet_Gen"},
	})
	client, err := armcompute.NewVirtualMachineImagesEdgeZoneClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := client.List(ctx,
		"aaaaaaaaaaaaaaa",
		"aaaaaaaaaaaaaaaaaaaaaaaaa",
		"aaaa",
		"aaaaaaaaaaaaaaaaaaaaaaaaaa",
		"aaaaaaaaaaaaaaaaaaaaaaa",
		&armcompute.VirtualMachineImagesEdgeZoneClientListOptions{Expand: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaa"),
			Top:     to.Ptr[int32](12),
			Orderby: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineImagesEdgeZone_List_MaximumSet_Gen.json: %v", err)
	}
	// Response check
	exampleRes := []*armcompute.VirtualMachineImageResource{
		{
			ID:   to.Ptr("aaaaaaaaaaa"),
			Name: to.Ptr("aaaaaaaa"),
			ExtendedLocation: &armcompute.ExtendedLocation{
				Name: to.Ptr("aaaaaaaaaaaaaaaaaaaaa"),
				Type: to.Ptr(armcompute.ExtendedLocationTypesEdgeZone),
			},
			Location: to.Ptr("aaaaaaaaaaaaaaaaaa"),
			Tags: map[string]*string{
				"key7868": to.Ptr("aaaaa"),
			},
		}}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineImageResourceArray) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineImageResourceArray)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineImagesEdgeZone_List_MaximumSet_Gen.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineImagesEdgeZone_List_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineImagesEdgeZone_List_MinimumSet_Gen"},
	})
	client, err = armcompute.NewVirtualMachineImagesEdgeZoneClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err = client.List(ctx,
		"aaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
		"aaaaa",
		"aaaaaaaaaaaaaaaaaaa",
		"aaaaaaaaaaaaaaaaaaaaaaaaaaa",
		"aaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
		&armcompute.VirtualMachineImagesEdgeZoneClientListOptions{Expand: nil,
			Top:     nil,
			Orderby: nil,
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineImagesEdgeZone_List_MinimumSet_Gen.json: %v", err)
	}
	// Response check
	exampleRes = []*armcompute.VirtualMachineImageResource{
		{
			Name:     to.Ptr("aaaaaaaa"),
			Location: to.Ptr("aaaaaaaaaaaaaaaaaa"),
		}}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineImageResourceArray) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineImageResourceArray)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineImagesEdgeZone_List_MinimumSet_Gen.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestVirtualMachineImagesEdgeZone_ListOffers(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineImagesEdgeZone_ListOffers_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineImagesEdgeZone_ListOffers_MaximumSet_Gen"},
	})
	client, err := armcompute.NewVirtualMachineImagesEdgeZoneClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := client.ListOffers(ctx,
		"aaaaaaaaaaaaaaaaaa",
		"aaaaaaaaaaaaaaaaaaa",
		"aaaaaaaaaaaaa",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineImagesEdgeZone_ListOffers_MaximumSet_Gen.json: %v", err)
	}
	// Response check
	exampleRes := []*armcompute.VirtualMachineImageResource{
		{
			ID:   to.Ptr("aaaaaaaaaaa"),
			Name: to.Ptr("aaaaaaaa"),
			ExtendedLocation: &armcompute.ExtendedLocation{
				Name: to.Ptr("aaaaaaaaaaaaaaaaaaaaa"),
				Type: to.Ptr(armcompute.ExtendedLocationTypesEdgeZone),
			},
			Location: to.Ptr("aaaaaaaaaaaaaaaaaa"),
			Tags: map[string]*string{
				"key7868": to.Ptr("aaaaa"),
			},
		}}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineImageResourceArray) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineImageResourceArray)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineImagesEdgeZone_ListOffers_MaximumSet_Gen.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineImagesEdgeZone_ListOffers_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineImagesEdgeZone_ListOffers_MinimumSet_Gen"},
	})
	client, err = armcompute.NewVirtualMachineImagesEdgeZoneClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err = client.ListOffers(ctx,
		"aaaaaaaaaaaaaa",
		"aaaaaaaaaaaaaaaaaaaaa",
		"aaaaaaaaaaaaaaaaaaaaaaaaaaa",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineImagesEdgeZone_ListOffers_MinimumSet_Gen.json: %v", err)
	}
	// Response check
	exampleRes = []*armcompute.VirtualMachineImageResource{
		{
			Name:     to.Ptr("aaaaaaaa"),
			Location: to.Ptr("aaaaaaaaaaaaaaaaaa"),
		}}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineImageResourceArray) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineImageResourceArray)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineImagesEdgeZone_ListOffers_MinimumSet_Gen.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestVirtualMachineImagesEdgeZone_ListPublishers(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineImagesEdgeZone_ListPublishers_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineImagesEdgeZone_ListPublishers_MaximumSet_Gen"},
	})
	client, err := armcompute.NewVirtualMachineImagesEdgeZoneClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := client.ListPublishers(ctx,
		"aaaaaa",
		"aaaaaaaaaaaaaaaaaaaaaaaaaaa",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineImagesEdgeZone_ListPublishers_MaximumSet_Gen.json: %v", err)
	}
	// Response check
	exampleRes := []*armcompute.VirtualMachineImageResource{
		{
			ID:   to.Ptr("aaaaaaaaaaa"),
			Name: to.Ptr("aaaaaaaa"),
			ExtendedLocation: &armcompute.ExtendedLocation{
				Name: to.Ptr("aaaaaaaaaaaaaaaaaaaaa"),
				Type: to.Ptr(armcompute.ExtendedLocationTypesEdgeZone),
			},
			Location: to.Ptr("aaaaaaaaaaaaaaaaaa"),
			Tags: map[string]*string{
				"key7868": to.Ptr("aaaaa"),
			},
		}}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineImageResourceArray) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineImageResourceArray)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineImagesEdgeZone_ListPublishers_MaximumSet_Gen.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineImagesEdgeZone_ListPublishers_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineImagesEdgeZone_ListPublishers_MinimumSet_Gen"},
	})
	client, err = armcompute.NewVirtualMachineImagesEdgeZoneClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err = client.ListPublishers(ctx,
		"aaaa",
		"aaaaaaaaaaaaaaaaaaaaaaa",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineImagesEdgeZone_ListPublishers_MinimumSet_Gen.json: %v", err)
	}
	// Response check
	exampleRes = []*armcompute.VirtualMachineImageResource{
		{
			Name:     to.Ptr("aaaaaaaa"),
			Location: to.Ptr("aaaaaaaaaaaaaaaaaa"),
		}}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineImageResourceArray) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineImageResourceArray)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineImagesEdgeZone_ListPublishers_MinimumSet_Gen.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestUsage_List(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/Usage_List_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Usage_List_MaximumSet_Gen"},
	})
	client, err := armcompute.NewUsageClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := client.NewListPager("4_.",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/Usage_List_MaximumSet_Gen.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcompute.ListUsagesResult{
			Value: []*armcompute.Usage{
				{
					Name: &armcompute.UsageName{
						LocalizedValue: to.Ptr("aaaaaaaaaaaaaa"),
						Value:          to.Ptr("aaaaaaaaaaaaaaaaaa"),
					},
					CurrentValue: to.Ptr[int32](17),
					Limit:        to.Ptr[int64](19),
					Unit:         to.Ptr("Count"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ListUsagesResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ListUsagesResult)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/Usage_List_MaximumSet_Gen.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/Usage_List_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Usage_List_MinimumSet_Gen"},
	})
	client, err = armcompute.NewUsageClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager = client.NewListPager("_--",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/Usage_List_MinimumSet_Gen.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcompute.ListUsagesResult{
			Value: []*armcompute.Usage{
				{
					Name:         &armcompute.UsageName{},
					CurrentValue: to.Ptr[int32](17),
					Limit:        to.Ptr[int64](19),
					Unit:         to.Ptr("Count"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ListUsagesResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ListUsagesResult)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/Usage_List_MinimumSet_Gen.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualMachines_ListByLocation(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/ListVirtualMachinesInASubscriptionByLocation.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Lists all the virtual machines under the specified subscription for the specified location."},
	})
	client, err := armcompute.NewVirtualMachinesClient("{subscriptionId}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := client.NewListByLocationPager("eastus",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/ListVirtualMachinesInASubscriptionByLocation.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcompute.VirtualMachineListResult{
			Value: []*armcompute.VirtualMachine{
				{
					Name:     to.Ptr("{virtualMachineName}"),
					Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
					ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{virtualMachineName}"),
					Location: to.Ptr("eastus"),
					Tags: map[string]*string{
						"RG":      to.Ptr("rg"),
						"testTag": to.Ptr("1"),
					},
					Properties: &armcompute.VirtualMachineProperties{
						AvailabilitySet: &armcompute.SubResource{
							ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
						},
						HardwareProfile: &armcompute.HardwareProfile{
							VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardA0),
						},
						NetworkProfile: &armcompute.NetworkProfile{
							NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
								{
									ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkInterfaces/{networkInterfaceName}"),
								}},
						},
						OSProfile: &armcompute.OSProfile{
							AdminUsername:            to.Ptr("Foo12"),
							AllowExtensionOperations: to.Ptr(true),
							ComputerName:             to.Ptr("Test"),
							Secrets:                  []*armcompute.VaultSecretGroup{},
							WindowsConfiguration: &armcompute.WindowsConfiguration{
								EnableAutomaticUpdates: to.Ptr(true),
								ProvisionVMAgent:       to.Ptr(true),
							},
						},
						ProvisioningState: to.Ptr("Succeeded"),
						StorageProfile: &armcompute.StorageProfile{
							DataDisks: []*armcompute.DataDisk{},
							ImageReference: &armcompute.ImageReference{
								Offer:     to.Ptr("WindowsServer"),
								Publisher: to.Ptr("MicrosoftWindowsServer"),
								SKU:       to.Ptr("2012-R2-Datacenter"),
								Version:   to.Ptr("4.127.20170406"),
							},
							OSDisk: &armcompute.OSDisk{
								Name:         to.Ptr("test"),
								Caching:      to.Ptr(armcompute.CachingTypesNone),
								CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
								DiskSizeGB:   to.Ptr[int32](127),
								OSType:       to.Ptr(armcompute.OperatingSystemTypesWindows),
								Vhd: &armcompute.VirtualHardDisk{
									URI: to.Ptr("https://{storageAccountName}.blob.core.windows.net/{containerName}/{vhdName}.vhd"),
								},
							},
						},
						VMID: to.Ptr("{vmId}"),
					},
				},
				{
					Name:     to.Ptr("{virtualMachineName}"),
					Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
					ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{virtualMachineName}"),
					Location: to.Ptr("eastus"),
					Tags: map[string]*string{
						"RG":      to.Ptr("rg"),
						"testTag": to.Ptr("1"),
					},
					Properties: &armcompute.VirtualMachineProperties{
						AvailabilitySet: &armcompute.SubResource{
							ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
						},
						HardwareProfile: &armcompute.HardwareProfile{
							VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardA0),
						},
						NetworkProfile: &armcompute.NetworkProfile{
							NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
								{
									ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkInterfaces/{networkInterfaceName}"),
								}},
						},
						OSProfile: &armcompute.OSProfile{
							AdminUsername:            to.Ptr("Foo12"),
							AllowExtensionOperations: to.Ptr(true),
							ComputerName:             to.Ptr("Test"),
							Secrets:                  []*armcompute.VaultSecretGroup{},
							WindowsConfiguration: &armcompute.WindowsConfiguration{
								EnableAutomaticUpdates: to.Ptr(true),
								ProvisionVMAgent:       to.Ptr(true),
							},
						},
						ProvisioningState: to.Ptr("Succeeded"),
						StorageProfile: &armcompute.StorageProfile{
							DataDisks: []*armcompute.DataDisk{},
							ImageReference: &armcompute.ImageReference{
								Offer:     to.Ptr("WindowsServer"),
								Publisher: to.Ptr("MicrosoftWindowsServer"),
								SKU:       to.Ptr("2012-R2-Datacenter"),
								Version:   to.Ptr("4.127.20170406"),
							},
							OSDisk: &armcompute.OSDisk{
								Name:         to.Ptr("test"),
								Caching:      to.Ptr(armcompute.CachingTypesNone),
								CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
								DiskSizeGB:   to.Ptr[int32](127),
								OSType:       to.Ptr(armcompute.OperatingSystemTypesWindows),
								Vhd: &armcompute.VirtualHardDisk{
									URI: to.Ptr("https://{storageAccountName}.blob.core.windows.net/{containerName}/{vhdName}.vhd"),
								},
							},
						},
						VMID: to.Ptr("{vmId}"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.VirtualMachineListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.VirtualMachineListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/ListVirtualMachinesInASubscriptionByLocation.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualMachines_Capture(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachines_Capture_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachines_Capture_MaximumSet_Gen"},
	})
	client, err := armcompute.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginCapture(ctx,
		"rgcompute",
		"aaaaaaaaaaaaaaaaaaaa",
		armcompute.VirtualMachineCaptureParameters{
			DestinationContainerName: to.Ptr("aaaaaaa"),
			OverwriteVhds:            to.Ptr(true),
			VhdPrefix:                to.Ptr("aaaaaaaaa"),
		},
		&armcompute.VirtualMachinesClientBeginCaptureOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachines_Capture_MaximumSet_Gen.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachines_Capture_MaximumSet_Gen.json: %v", err)
	}
	// Response check
	exampleRes := armcompute.VirtualMachineCaptureResult{
		ID:             to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaa"),
		Schema:         to.Ptr("aaaaa"),
		ContentVersion: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
		Parameters:     map[string]interface{}{},
		Resources: []interface{}{
			map[string]interface{}{}},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineCaptureResult) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineCaptureResult)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachines_Capture_MaximumSet_Gen.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachines_Capture_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachines_Capture_MinimumSet_Gen"},
	})
	client, err = armcompute.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginCapture(ctx,
		"rgcompute",
		"aaaaaaaaaaaaa",
		armcompute.VirtualMachineCaptureParameters{
			DestinationContainerName: to.Ptr("aaaaaaa"),
			OverwriteVhds:            to.Ptr(true),
			VhdPrefix:                to.Ptr("aaaaaaaaa"),
		},
		&armcompute.VirtualMachinesClientBeginCaptureOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachines_Capture_MinimumSet_Gen.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachines_Capture_MinimumSet_Gen.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.VirtualMachineCaptureResult{}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineCaptureResult) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineCaptureResult)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachines_Capture_MinimumSet_Gen.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestVirtualMachines_CreateOrUpdate(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateALinuxVmWithPatchSettingAssessmentModeOfImageDefault.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a Linux vm with a patch setting assessmentMode of ImageDefault."},
	})
	client, err := armcompute.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myVM",
		armcompute.VirtualMachine{
			Location: to.Ptr("westus"),
			Properties: &armcompute.VirtualMachineProperties{
				HardwareProfile: &armcompute.HardwareProfile{
					VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD2SV3),
				},
				NetworkProfile: &armcompute.NetworkProfile{
					NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
						{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
							Properties: &armcompute.NetworkInterfaceReferenceProperties{
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.OSProfile{
					AdminPassword: to.Ptr("{your-password}"),
					AdminUsername: to.Ptr("{your-username}"),
					ComputerName:  to.Ptr("myVM"),
					LinuxConfiguration: &armcompute.LinuxConfiguration{
						PatchSettings: &armcompute.LinuxPatchSettings{
							AssessmentMode: to.Ptr(armcompute.LinuxPatchAssessmentModeImageDefault),
						},
						ProvisionVMAgent: to.Ptr(true),
					},
				},
				StorageProfile: &armcompute.StorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("UbuntuServer"),
						Publisher: to.Ptr("Canonical"),
						SKU:       to.Ptr("16.04-LTS"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.OSDisk{
						Name:         to.Ptr("myVMosdisk"),
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
						},
					},
				},
			},
		},
		&armcompute.VirtualMachinesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateALinuxVmWithPatchSettingAssessmentModeOfImageDefault.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateALinuxVmWithPatchSettingAssessmentModeOfImageDefault.json: %v", err)
	}
	// Response check
	exampleRes := armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD2SV3),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				LinuxConfiguration: &armcompute.LinuxConfiguration{
					PatchSettings: &armcompute.LinuxPatchSettings{
						AssessmentMode: to.Ptr(armcompute.LinuxPatchAssessmentModeImageDefault),
					},
					ProvisionVMAgent: to.Ptr(true),
				},
				Secrets: []*armcompute.VaultSecretGroup{},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("UbuntuServer"),
					Publisher: to.Ptr("Canonical"),
					SKU:       to.Ptr("16.04-LTS"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesLinux),
				},
			},
			VMID: to.Ptr("a149cd25-409f-41af-8088-275f5486bc93"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachine) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachine)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateALinuxVmWithPatchSettingAssessmentModeOfImageDefault.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateALinuxVmWithPatchSettingModeOfImageDefault.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a Linux vm with a patch setting patchMode of ImageDefault."},
	})
	client, err = armcompute.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myVM",
		armcompute.VirtualMachine{
			Location: to.Ptr("westus"),
			Properties: &armcompute.VirtualMachineProperties{
				HardwareProfile: &armcompute.HardwareProfile{
					VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD2SV3),
				},
				NetworkProfile: &armcompute.NetworkProfile{
					NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
						{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
							Properties: &armcompute.NetworkInterfaceReferenceProperties{
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.OSProfile{
					AdminPassword: to.Ptr("{your-password}"),
					AdminUsername: to.Ptr("{your-username}"),
					ComputerName:  to.Ptr("myVM"),
					LinuxConfiguration: &armcompute.LinuxConfiguration{
						PatchSettings: &armcompute.LinuxPatchSettings{
							PatchMode: to.Ptr(armcompute.LinuxVMGuestPatchModeImageDefault),
						},
						ProvisionVMAgent: to.Ptr(true),
					},
				},
				StorageProfile: &armcompute.StorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("UbuntuServer"),
						Publisher: to.Ptr("Canonical"),
						SKU:       to.Ptr("16.04-LTS"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.OSDisk{
						Name:         to.Ptr("myVMosdisk"),
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
						},
					},
				},
			},
		},
		&armcompute.VirtualMachinesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateALinuxVmWithPatchSettingModeOfImageDefault.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateALinuxVmWithPatchSettingModeOfImageDefault.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD2SV3),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				LinuxConfiguration: &armcompute.LinuxConfiguration{
					PatchSettings: &armcompute.LinuxPatchSettings{
						PatchMode: to.Ptr(armcompute.LinuxVMGuestPatchModeImageDefault),
					},
					ProvisionVMAgent: to.Ptr(true),
				},
				Secrets: []*armcompute.VaultSecretGroup{},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("UbuntuServer"),
					Publisher: to.Ptr("Canonical"),
					SKU:       to.Ptr("16.04-LTS"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesLinux),
				},
			},
			VMID: to.Ptr("a149cd25-409f-41af-8088-275f5486bc93"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachine) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachine)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateALinuxVmWithPatchSettingModeOfImageDefault.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateALinuxVmWithPatchSettingModesOfAutomaticByPlatform.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a Linux vm with a patch settings patchMode and assessmentMode set to AutomaticByPlatform."},
	})
	client, err = armcompute.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myVM",
		armcompute.VirtualMachine{
			Location: to.Ptr("westus"),
			Properties: &armcompute.VirtualMachineProperties{
				HardwareProfile: &armcompute.HardwareProfile{
					VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD2SV3),
				},
				NetworkProfile: &armcompute.NetworkProfile{
					NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
						{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
							Properties: &armcompute.NetworkInterfaceReferenceProperties{
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.OSProfile{
					AdminPassword: to.Ptr("{your-password}"),
					AdminUsername: to.Ptr("{your-username}"),
					ComputerName:  to.Ptr("myVM"),
					LinuxConfiguration: &armcompute.LinuxConfiguration{
						PatchSettings: &armcompute.LinuxPatchSettings{
							AssessmentMode: to.Ptr(armcompute.LinuxPatchAssessmentModeAutomaticByPlatform),
							PatchMode:      to.Ptr(armcompute.LinuxVMGuestPatchModeAutomaticByPlatform),
						},
						ProvisionVMAgent: to.Ptr(true),
					},
				},
				StorageProfile: &armcompute.StorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("UbuntuServer"),
						Publisher: to.Ptr("Canonical"),
						SKU:       to.Ptr("16.04-LTS"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.OSDisk{
						Name:         to.Ptr("myVMosdisk"),
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
						},
					},
				},
			},
		},
		&armcompute.VirtualMachinesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateALinuxVmWithPatchSettingModesOfAutomaticByPlatform.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateALinuxVmWithPatchSettingModesOfAutomaticByPlatform.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD2SV3),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				LinuxConfiguration: &armcompute.LinuxConfiguration{
					PatchSettings: &armcompute.LinuxPatchSettings{
						AssessmentMode: to.Ptr(armcompute.LinuxPatchAssessmentModeAutomaticByPlatform),
						PatchMode:      to.Ptr(armcompute.LinuxVMGuestPatchModeAutomaticByPlatform),
					},
					ProvisionVMAgent: to.Ptr(true),
				},
				Secrets: []*armcompute.VaultSecretGroup{},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("UbuntuServer"),
					Publisher: to.Ptr("Canonical"),
					SKU:       to.Ptr("16.04-LTS"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesLinux),
				},
			},
			VMID: to.Ptr("a149cd25-409f-41af-8088-275f5486bc93"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachine) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachine)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateALinuxVmWithPatchSettingModesOfAutomaticByPlatform.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAVmFromACommunityGalleryImage.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a VM from a community gallery image"},
	})
	client, err = armcompute.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myVM",
		armcompute.VirtualMachine{
			Location: to.Ptr("westus"),
			Properties: &armcompute.VirtualMachineProperties{
				HardwareProfile: &armcompute.HardwareProfile{
					VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
				},
				NetworkProfile: &armcompute.NetworkProfile{
					NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
						{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
							Properties: &armcompute.NetworkInterfaceReferenceProperties{
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.OSProfile{
					AdminPassword: to.Ptr("{your-password}"),
					AdminUsername: to.Ptr("{your-username}"),
					ComputerName:  to.Ptr("myVM"),
				},
				StorageProfile: &armcompute.StorageProfile{
					ImageReference: &armcompute.ImageReference{
						CommunityGalleryImageID: to.Ptr("/CommunityGalleries/galleryPublicName/Images/communityGalleryImageName/Versions/communityGalleryImageVersionName"),
					},
					OSDisk: &armcompute.OSDisk{
						Name:         to.Ptr("myVMosdisk"),
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		&armcompute.VirtualMachinesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAVmFromACommunityGalleryImage.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAVmFromACommunityGalleryImage.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				LinuxConfiguration: &armcompute.LinuxConfiguration{
					DisablePasswordAuthentication: to.Ptr(false),
				},
				Secrets: []*armcompute.VaultSecretGroup{},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					CommunityGalleryImageID: to.Ptr("/CommunityGalleries/galleryPublicName/Images/communityGalleryImageName/Versions/communityGalleryImageVersionName"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					DiskSizeGB:   to.Ptr[int32](30),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesLinux),
				},
			},
			VMID: to.Ptr("71aa3d5a-d73d-4970-9182-8580433b2865"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachine) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachine)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAVmFromACommunityGalleryImage.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAVmFromASharedGalleryImage.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a VM from a shared gallery image"},
	})
	client, err = armcompute.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myVM",
		armcompute.VirtualMachine{
			Location: to.Ptr("westus"),
			Properties: &armcompute.VirtualMachineProperties{
				HardwareProfile: &armcompute.HardwareProfile{
					VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
				},
				NetworkProfile: &armcompute.NetworkProfile{
					NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
						{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
							Properties: &armcompute.NetworkInterfaceReferenceProperties{
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.OSProfile{
					AdminPassword: to.Ptr("{your-password}"),
					AdminUsername: to.Ptr("{your-username}"),
					ComputerName:  to.Ptr("myVM"),
				},
				StorageProfile: &armcompute.StorageProfile{
					ImageReference: &armcompute.ImageReference{
						SharedGalleryImageID: to.Ptr("/SharedGalleries/sharedGalleryName/Images/sharedGalleryImageName/Versions/sharedGalleryImageVersionName"),
					},
					OSDisk: &armcompute.OSDisk{
						Name:         to.Ptr("myVMosdisk"),
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		&armcompute.VirtualMachinesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAVmFromASharedGalleryImage.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAVmFromASharedGalleryImage.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				LinuxConfiguration: &armcompute.LinuxConfiguration{
					DisablePasswordAuthentication: to.Ptr(false),
				},
				Secrets: []*armcompute.VaultSecretGroup{},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					SharedGalleryImageID: to.Ptr("/SharedGalleries/sharedGalleryName/Images/sharedGalleryImageName/Versions/sharedGalleryImageVersionName"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					DiskSizeGB:   to.Ptr[int32](30),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesLinux),
				},
			},
			VMID: to.Ptr("71aa3d5a-d73d-4970-9182-8580433b2865"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachine) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachine)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAVmFromASharedGalleryImage.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateOrUpdateAVmWithHibernationEnabled.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a VM with HibernationEnabled"},
	})
	client, err = armcompute.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"{vm-name}",
		armcompute.VirtualMachine{
			Location: to.Ptr("eastus2euap"),
			Properties: &armcompute.VirtualMachineProperties{
				AdditionalCapabilities: &armcompute.AdditionalCapabilities{
					HibernationEnabled: to.Ptr(true),
				},
				DiagnosticsProfile: &armcompute.DiagnosticsProfile{
					BootDiagnostics: &armcompute.BootDiagnostics{
						Enabled:    to.Ptr(true),
						StorageURI: to.Ptr("http://{existing-storage-account-name}.blob.core.windows.net"),
					},
				},
				HardwareProfile: &armcompute.HardwareProfile{
					VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD2SV3),
				},
				NetworkProfile: &armcompute.NetworkProfile{
					NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
						{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
							Properties: &armcompute.NetworkInterfaceReferenceProperties{
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.OSProfile{
					AdminPassword: to.Ptr("{your-password}"),
					AdminUsername: to.Ptr("{your-username}"),
					ComputerName:  to.Ptr("{vm-name}"),
				},
				StorageProfile: &armcompute.StorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2019-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.OSDisk{
						Name:         to.Ptr("vmOSdisk"),
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		&armcompute.VirtualMachinesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateOrUpdateAVmWithHibernationEnabled.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateOrUpdateAVmWithHibernationEnabled.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("{vm-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/{vm-name}"),
		Location: to.Ptr("eastus2euap"),
		Properties: &armcompute.VirtualMachineProperties{
			AdditionalCapabilities: &armcompute.AdditionalCapabilities{
				HibernationEnabled: to.Ptr(true),
			},
			DiagnosticsProfile: &armcompute.DiagnosticsProfile{
				BootDiagnostics: &armcompute.BootDiagnostics{
					Enabled:    to.Ptr(true),
					StorageURI: to.Ptr("http://nsgdiagnostic.blob.core.windows.net"),
				},
			},
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD2SV3),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("{vm-name}"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					ProvisionVMAgent:       to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2019-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("vmOSdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			},
			VMID: to.Ptr("676420ba-7a24-4bfe-80bd-9c841ee184fa"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachine) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachine)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateOrUpdateAVmWithHibernationEnabled.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAVmWithUefiSettings.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a VM with Uefi Settings of secureBoot and vTPM."},
	})
	client, err = armcompute.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myVM",
		armcompute.VirtualMachine{
			Location: to.Ptr("westus"),
			Properties: &armcompute.VirtualMachineProperties{
				HardwareProfile: &armcompute.HardwareProfile{
					VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD2SV3),
				},
				NetworkProfile: &armcompute.NetworkProfile{
					NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
						{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
							Properties: &armcompute.NetworkInterfaceReferenceProperties{
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.OSProfile{
					AdminPassword: to.Ptr("{your-password}"),
					AdminUsername: to.Ptr("{your-username}"),
					ComputerName:  to.Ptr("myVM"),
				},
				SecurityProfile: &armcompute.SecurityProfile{
					SecurityType: to.Ptr(armcompute.SecurityTypesTrustedLaunch),
					UefiSettings: &armcompute.UefiSettings{
						SecureBootEnabled: to.Ptr(true),
						VTpmEnabled:       to.Ptr(true),
					},
				},
				StorageProfile: &armcompute.StorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("windowsserver-gen2preview-preview"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("windows10-tvm"),
						Version:   to.Ptr("18363.592.2001092016"),
					},
					OSDisk: &armcompute.OSDisk{
						Name:         to.Ptr("myVMosdisk"),
						Caching:      to.Ptr(armcompute.CachingTypesReadOnly),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardSSDLRS),
						},
					},
				},
			},
		},
		&armcompute.VirtualMachinesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAVmWithUefiSettings.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAVmWithUefiSettings.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD2SV3),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					ProvisionVMAgent:       to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			SecurityProfile: &armcompute.SecurityProfile{
				SecurityType: to.Ptr(armcompute.SecurityTypesTrustedLaunch),
				UefiSettings: &armcompute.UefiSettings{
					SecureBootEnabled: to.Ptr(true),
					VTpmEnabled:       to.Ptr(true),
				},
			},
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("windowsserver-gen2preview-preview"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("windows10-tvm"),
					Version:   to.Ptr("18363.592.2001092016"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadOnly),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardSSDLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			},
			VMID: to.Ptr("5c0d55a7-c407-4ed6-bf7d-ddb810267c85"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachine) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachine)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAVmWithUefiSettings.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateOrUpdateAVmWithUserData.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a VM with UserData"},
	})
	client, err = armcompute.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"{vm-name}",
		armcompute.VirtualMachine{
			Location: to.Ptr("westus"),
			Properties: &armcompute.VirtualMachineProperties{
				DiagnosticsProfile: &armcompute.DiagnosticsProfile{
					BootDiagnostics: &armcompute.BootDiagnostics{
						Enabled:    to.Ptr(true),
						StorageURI: to.Ptr("http://{existing-storage-account-name}.blob.core.windows.net"),
					},
				},
				HardwareProfile: &armcompute.HardwareProfile{
					VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
				},
				NetworkProfile: &armcompute.NetworkProfile{
					NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
						{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
							Properties: &armcompute.NetworkInterfaceReferenceProperties{
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.OSProfile{
					AdminPassword: to.Ptr("{your-password}"),
					AdminUsername: to.Ptr("{your-username}"),
					ComputerName:  to.Ptr("{vm-name}"),
				},
				StorageProfile: &armcompute.StorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.OSDisk{
						Name:         to.Ptr("vmOSdisk"),
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
				UserData: to.Ptr("RXhhbXBsZSBVc2VyRGF0YQ=="),
			},
		},
		&armcompute.VirtualMachinesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateOrUpdateAVmWithUserData.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateOrUpdateAVmWithUserData.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("{vm-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/{vm-name}"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			DiagnosticsProfile: &armcompute.DiagnosticsProfile{
				BootDiagnostics: &armcompute.BootDiagnostics{
					Enabled:    to.Ptr(true),
					StorageURI: to.Ptr("http://nsgdiagnostic.blob.core.windows.net"),
				},
			},
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("{vm-name}"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					ProvisionVMAgent:       to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("vmOSdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			},
			VMID: to.Ptr("676420ba-7a24-4bfe-80bd-9c841ee184fa"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachine) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachine)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateOrUpdateAVmWithUserData.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateOrUpdateAVmWithVMSizeProperties.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a VM with VM Size Properties"},
	})
	client, err = armcompute.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myVM",
		armcompute.VirtualMachine{
			Location: to.Ptr("westus"),
			Properties: &armcompute.VirtualMachineProperties{
				DiagnosticsProfile: &armcompute.DiagnosticsProfile{
					BootDiagnostics: &armcompute.BootDiagnostics{
						Enabled:    to.Ptr(true),
						StorageURI: to.Ptr("http://{existing-storage-account-name}.blob.core.windows.net"),
					},
				},
				HardwareProfile: &armcompute.HardwareProfile{
					VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD4V3),
					VMSizeProperties: &armcompute.VMSizeProperties{
						VCPUsAvailable: to.Ptr[int32](1),
						VCPUsPerCore:   to.Ptr[int32](1),
					},
				},
				NetworkProfile: &armcompute.NetworkProfile{
					NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
						{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
							Properties: &armcompute.NetworkInterfaceReferenceProperties{
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.OSProfile{
					AdminPassword: to.Ptr("{your-password}"),
					AdminUsername: to.Ptr("{your-username}"),
					ComputerName:  to.Ptr("myVM"),
				},
				StorageProfile: &armcompute.StorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.OSDisk{
						Name:         to.Ptr("myVMosdisk"),
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
				UserData: to.Ptr("U29tZSBDdXN0b20gRGF0YQ=="),
			},
		},
		&armcompute.VirtualMachinesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateOrUpdateAVmWithVMSizeProperties.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateOrUpdateAVmWithVMSizeProperties.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			DiagnosticsProfile: &armcompute.DiagnosticsProfile{
				BootDiagnostics: &armcompute.BootDiagnostics{
					Enabled:    to.Ptr(true),
					StorageURI: to.Ptr("http://nsgdiagnostic.blob.core.windows.net"),
				},
			},
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD4V3),
				VMSizeProperties: &armcompute.VMSizeProperties{
					VCPUsAvailable: to.Ptr[int32](1),
					VCPUsPerCore:   to.Ptr[int32](1),
				},
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					ProvisionVMAgent:       to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			},
			VMID: to.Ptr("676420ba-7a24-4bfe-80bd-9c841ee184fa"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachine) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachine)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateOrUpdateAVmWithVMSizeProperties.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAVmWithNetworkInterfaceConfiguration.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a VM with network interface configuration"},
	})
	client, err = armcompute.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myVM",
		armcompute.VirtualMachine{
			Location: to.Ptr("westus"),
			Properties: &armcompute.VirtualMachineProperties{
				HardwareProfile: &armcompute.HardwareProfile{
					VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
				},
				NetworkProfile: &armcompute.NetworkProfile{
					NetworkAPIVersion: to.Ptr(armcompute.NetworkAPIVersionTwoThousandTwenty1101),
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineNetworkInterfaceConfiguration{
						{
							Name: to.Ptr("{nic-config-name}"),
							Properties: &armcompute.VirtualMachineNetworkInterfaceConfigurationProperties{
								DeleteOption: to.Ptr(armcompute.DeleteOptionsDelete),
								IPConfigurations: []*armcompute.VirtualMachineNetworkInterfaceIPConfiguration{
									{
										Name: to.Ptr("{ip-config-name}"),
										Properties: &armcompute.VirtualMachineNetworkInterfaceIPConfigurationProperties{
											Primary: to.Ptr(true),
											PublicIPAddressConfiguration: &armcompute.VirtualMachinePublicIPAddressConfiguration{
												Name: to.Ptr("{publicIP-config-name}"),
												Properties: &armcompute.VirtualMachinePublicIPAddressConfigurationProperties{
													DeleteOption:             to.Ptr(armcompute.DeleteOptionsDetach),
													PublicIPAllocationMethod: to.Ptr(armcompute.PublicIPAllocationMethodStatic),
												},
												SKU: &armcompute.PublicIPAddressSKU{
													Name: to.Ptr(armcompute.PublicIPAddressSKUNameBasic),
													Tier: to.Ptr(armcompute.PublicIPAddressSKUTierGlobal),
												},
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.OSProfile{
					AdminPassword: to.Ptr("{your-password}"),
					AdminUsername: to.Ptr("{your-username}"),
					ComputerName:  to.Ptr("myVM"),
				},
				StorageProfile: &armcompute.StorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.OSDisk{
						Name:         to.Ptr("myVMosdisk"),
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		&armcompute.VirtualMachinesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAVmWithNetworkInterfaceConfiguration.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAVmWithNetworkInterfaceConfiguration.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/toBeCreatedNetworkInterface"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					ProvisionVMAgent:       to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			},
			VMID: to.Ptr("b7a098cc-b0b8-46e8-a205-62f301a62a8f"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachine) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachine)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAVmWithNetworkInterfaceConfiguration.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAVmWithSecurityTypeConfidentialVMWithCustomerManagedKeys.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a VM with securityType ConfidentialVM with Customer Managed Keys"},
	})
	client, err = armcompute.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myVM",
		armcompute.VirtualMachine{
			Location: to.Ptr("westus"),
			Properties: &armcompute.VirtualMachineProperties{
				HardwareProfile: &armcompute.HardwareProfile{
					VMSize: to.Ptr(armcompute.VirtualMachineSizeTypes("Standard_DC2as_v5")),
				},
				NetworkProfile: &armcompute.NetworkProfile{
					NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
						{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
							Properties: &armcompute.NetworkInterfaceReferenceProperties{
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.OSProfile{
					AdminPassword: to.Ptr("{your-password}"),
					AdminUsername: to.Ptr("{your-username}"),
					ComputerName:  to.Ptr("myVM"),
				},
				SecurityProfile: &armcompute.SecurityProfile{
					SecurityType: to.Ptr(armcompute.SecurityTypesConfidentialVM),
					UefiSettings: &armcompute.UefiSettings{
						SecureBootEnabled: to.Ptr(true),
						VTpmEnabled:       to.Ptr(true),
					},
				},
				StorageProfile: &armcompute.StorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("2019-datacenter-cvm"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("windows-cvm"),
						Version:   to.Ptr("17763.2183.2109130127"),
					},
					OSDisk: &armcompute.OSDisk{
						Name:         to.Ptr("myVMosdisk"),
						Caching:      to.Ptr(armcompute.CachingTypesReadOnly),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							SecurityProfile: &armcompute.VMDiskSecurityProfile{
								DiskEncryptionSet: &armcompute.DiskEncryptionSetParameters{
									ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{existing-diskEncryptionSet-name}"),
								},
								SecurityEncryptionType: to.Ptr(armcompute.SecurityEncryptionTypesDiskWithVMGuestState),
							},
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardSSDLRS),
						},
					},
				},
			},
		},
		&armcompute.VirtualMachinesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAVmWithSecurityTypeConfidentialVMWithCustomerManagedKeys.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAVmWithSecurityTypeConfidentialVMWithCustomerManagedKeys.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypes("Standard_DC2as_v5")),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					ProvisionVMAgent:       to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			SecurityProfile: &armcompute.SecurityProfile{
				SecurityType: to.Ptr(armcompute.SecurityTypesConfidentialVM),
				UefiSettings: &armcompute.UefiSettings{
					SecureBootEnabled: to.Ptr(true),
					VTpmEnabled:       to.Ptr(true),
				},
			},
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("2019-datacenter-cvm"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("windows-cvm"),
					Version:   to.Ptr("17763.2183.2109130127"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadOnly),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						SecurityProfile: &armcompute.VMDiskSecurityProfile{
							DiskEncryptionSet: &armcompute.DiskEncryptionSetParameters{
								ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{existing-diskEncryptionSet-name}"),
							},
							SecurityEncryptionType: to.Ptr(armcompute.SecurityEncryptionTypesDiskWithVMGuestState),
						},
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardSSDLRS),
					},
				},
			},
			VMID: to.Ptr("5c0d55a7-c407-4ed6-bf7d-ddb810267c85"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachine) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachine)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAVmWithSecurityTypeConfidentialVMWithCustomerManagedKeys.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAVmWithSecurityTypeConfidentialVM.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a VM with securityType ConfidentialVM with Platform Managed Keys"},
	})
	client, err = armcompute.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myVM",
		armcompute.VirtualMachine{
			Location: to.Ptr("westus"),
			Properties: &armcompute.VirtualMachineProperties{
				HardwareProfile: &armcompute.HardwareProfile{
					VMSize: to.Ptr(armcompute.VirtualMachineSizeTypes("Standard_DC2as_v5")),
				},
				NetworkProfile: &armcompute.NetworkProfile{
					NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
						{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
							Properties: &armcompute.NetworkInterfaceReferenceProperties{
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.OSProfile{
					AdminPassword: to.Ptr("{your-password}"),
					AdminUsername: to.Ptr("{your-username}"),
					ComputerName:  to.Ptr("myVM"),
				},
				SecurityProfile: &armcompute.SecurityProfile{
					SecurityType: to.Ptr(armcompute.SecurityTypesConfidentialVM),
					UefiSettings: &armcompute.UefiSettings{
						SecureBootEnabled: to.Ptr(true),
						VTpmEnabled:       to.Ptr(true),
					},
				},
				StorageProfile: &armcompute.StorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("2019-datacenter-cvm"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("windows-cvm"),
						Version:   to.Ptr("17763.2183.2109130127"),
					},
					OSDisk: &armcompute.OSDisk{
						Name:         to.Ptr("myVMosdisk"),
						Caching:      to.Ptr(armcompute.CachingTypesReadOnly),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							SecurityProfile: &armcompute.VMDiskSecurityProfile{
								SecurityEncryptionType: to.Ptr(armcompute.SecurityEncryptionTypesDiskWithVMGuestState),
							},
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardSSDLRS),
						},
					},
				},
			},
		},
		&armcompute.VirtualMachinesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAVmWithSecurityTypeConfidentialVM.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAVmWithSecurityTypeConfidentialVM.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypes("Standard_DC2as_v5")),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					ProvisionVMAgent:       to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			SecurityProfile: &armcompute.SecurityProfile{
				SecurityType: to.Ptr(armcompute.SecurityTypesConfidentialVM),
				UefiSettings: &armcompute.UefiSettings{
					SecureBootEnabled: to.Ptr(true),
					VTpmEnabled:       to.Ptr(true),
				},
			},
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("2019-datacenter-cvm"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("windows-cvm"),
					Version:   to.Ptr("17763.2183.2109130127"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadOnly),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						SecurityProfile: &armcompute.VMDiskSecurityProfile{
							SecurityEncryptionType: to.Ptr(armcompute.SecurityEncryptionTypesDiskWithVMGuestState),
						},
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardSSDLRS),
					},
				},
			},
			VMID: to.Ptr("5c0d55a7-c407-4ed6-bf7d-ddb810267c85"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachine) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachine)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAVmWithSecurityTypeConfidentialVM.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAWindowsVmWithPatchSettingAssessmentModeOfImageDefault.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a Windows vm with a patch setting assessmentMode of ImageDefault."},
	})
	client, err = armcompute.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myVM",
		armcompute.VirtualMachine{
			Location: to.Ptr("westus"),
			Properties: &armcompute.VirtualMachineProperties{
				HardwareProfile: &armcompute.HardwareProfile{
					VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
				},
				NetworkProfile: &armcompute.NetworkProfile{
					NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
						{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
							Properties: &armcompute.NetworkInterfaceReferenceProperties{
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.OSProfile{
					AdminPassword: to.Ptr("{your-password}"),
					AdminUsername: to.Ptr("{your-username}"),
					ComputerName:  to.Ptr("myVM"),
					WindowsConfiguration: &armcompute.WindowsConfiguration{
						EnableAutomaticUpdates: to.Ptr(true),
						PatchSettings: &armcompute.PatchSettings{
							AssessmentMode: to.Ptr(armcompute.WindowsPatchAssessmentModeImageDefault),
						},
						ProvisionVMAgent: to.Ptr(true),
					},
				},
				StorageProfile: &armcompute.StorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.OSDisk{
						Name:         to.Ptr("myVMosdisk"),
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
						},
					},
				},
			},
		},
		&armcompute.VirtualMachinesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAWindowsVmWithPatchSettingAssessmentModeOfImageDefault.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAWindowsVmWithPatchSettingAssessmentModeOfImageDefault.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardDS1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					PatchSettings: &armcompute.PatchSettings{
						AssessmentMode: to.Ptr(armcompute.WindowsPatchAssessmentModeImageDefault),
					},
					ProvisionVMAgent: to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			},
			VMID: to.Ptr("a149cd25-409f-41af-8088-275f5486bc93"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachine) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachine)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAWindowsVmWithPatchSettingAssessmentModeOfImageDefault.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAWindowsVmWithPatchSettingModeOfAutomaticByOS.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a Windows vm with a patch setting patchMode of AutomaticByOS."},
	})
	client, err = armcompute.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myVM",
		armcompute.VirtualMachine{
			Location: to.Ptr("westus"),
			Properties: &armcompute.VirtualMachineProperties{
				HardwareProfile: &armcompute.HardwareProfile{
					VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
				},
				NetworkProfile: &armcompute.NetworkProfile{
					NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
						{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
							Properties: &armcompute.NetworkInterfaceReferenceProperties{
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.OSProfile{
					AdminPassword: to.Ptr("{your-password}"),
					AdminUsername: to.Ptr("{your-username}"),
					ComputerName:  to.Ptr("myVM"),
					WindowsConfiguration: &armcompute.WindowsConfiguration{
						EnableAutomaticUpdates: to.Ptr(true),
						PatchSettings: &armcompute.PatchSettings{
							PatchMode: to.Ptr(armcompute.WindowsVMGuestPatchModeAutomaticByOS),
						},
						ProvisionVMAgent: to.Ptr(true),
					},
				},
				StorageProfile: &armcompute.StorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.OSDisk{
						Name:         to.Ptr("myVMosdisk"),
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
						},
					},
				},
			},
		},
		&armcompute.VirtualMachinesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAWindowsVmWithPatchSettingModeOfAutomaticByOS.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAWindowsVmWithPatchSettingModeOfAutomaticByOS.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardDS1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					PatchSettings: &armcompute.PatchSettings{
						PatchMode: to.Ptr(armcompute.WindowsVMGuestPatchModeAutomaticByOS),
					},
					ProvisionVMAgent: to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			},
			VMID: to.Ptr("a149cd25-409f-41af-8088-275f5486bc93"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachine) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachine)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAWindowsVmWithPatchSettingModeOfAutomaticByOS.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAWindowsVmWithPatchSettingModeOfAutomaticByPlatformAndEnableHotPatchingTrue.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a Windows vm with a patch setting patchMode of AutomaticByPlatform and enableHotpatching set to true."},
	})
	client, err = armcompute.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myVM",
		armcompute.VirtualMachine{
			Location: to.Ptr("westus"),
			Properties: &armcompute.VirtualMachineProperties{
				HardwareProfile: &armcompute.HardwareProfile{
					VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
				},
				NetworkProfile: &armcompute.NetworkProfile{
					NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
						{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
							Properties: &armcompute.NetworkInterfaceReferenceProperties{
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.OSProfile{
					AdminPassword: to.Ptr("{your-password}"),
					AdminUsername: to.Ptr("{your-username}"),
					ComputerName:  to.Ptr("myVM"),
					WindowsConfiguration: &armcompute.WindowsConfiguration{
						EnableAutomaticUpdates: to.Ptr(true),
						PatchSettings: &armcompute.PatchSettings{
							EnableHotpatching: to.Ptr(true),
							PatchMode:         to.Ptr(armcompute.WindowsVMGuestPatchModeAutomaticByPlatform),
						},
						ProvisionVMAgent: to.Ptr(true),
					},
				},
				StorageProfile: &armcompute.StorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.OSDisk{
						Name:         to.Ptr("myVMosdisk"),
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
						},
					},
				},
			},
		},
		&armcompute.VirtualMachinesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAWindowsVmWithPatchSettingModeOfAutomaticByPlatformAndEnableHotPatchingTrue.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAWindowsVmWithPatchSettingModeOfAutomaticByPlatformAndEnableHotPatchingTrue.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardDS1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					PatchSettings: &armcompute.PatchSettings{
						EnableHotpatching: to.Ptr(true),
						PatchMode:         to.Ptr(armcompute.WindowsVMGuestPatchModeAutomaticByPlatform),
					},
					ProvisionVMAgent: to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			},
			VMID: to.Ptr("a149cd25-409f-41af-8088-275f5486bc93"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachine) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachine)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAWindowsVmWithPatchSettingModeOfAutomaticByPlatformAndEnableHotPatchingTrue.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAWindowsVmWithPatchSettingModeOfManual.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a Windows vm with a patch setting patchMode of Manual."},
	})
	client, err = armcompute.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myVM",
		armcompute.VirtualMachine{
			Location: to.Ptr("westus"),
			Properties: &armcompute.VirtualMachineProperties{
				HardwareProfile: &armcompute.HardwareProfile{
					VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
				},
				NetworkProfile: &armcompute.NetworkProfile{
					NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
						{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
							Properties: &armcompute.NetworkInterfaceReferenceProperties{
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.OSProfile{
					AdminPassword: to.Ptr("{your-password}"),
					AdminUsername: to.Ptr("{your-username}"),
					ComputerName:  to.Ptr("myVM"),
					WindowsConfiguration: &armcompute.WindowsConfiguration{
						EnableAutomaticUpdates: to.Ptr(true),
						PatchSettings: &armcompute.PatchSettings{
							PatchMode: to.Ptr(armcompute.WindowsVMGuestPatchModeManual),
						},
						ProvisionVMAgent: to.Ptr(true),
					},
				},
				StorageProfile: &armcompute.StorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.OSDisk{
						Name:         to.Ptr("myVMosdisk"),
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
						},
					},
				},
			},
		},
		&armcompute.VirtualMachinesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAWindowsVmWithPatchSettingModeOfManual.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAWindowsVmWithPatchSettingModeOfManual.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardDS1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					PatchSettings: &armcompute.PatchSettings{
						PatchMode: to.Ptr(armcompute.WindowsVMGuestPatchModeManual),
					},
					ProvisionVMAgent: to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			},
			VMID: to.Ptr("a149cd25-409f-41af-8088-275f5486bc93"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachine) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachine)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAWindowsVmWithPatchSettingModeOfManual.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAWindowsVmWithPatchSettingModesOfAutomaticByPlatform.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a Windows vm with patch settings patchMode and assessmentMode set to AutomaticByPlatform."},
	})
	client, err = armcompute.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myVM",
		armcompute.VirtualMachine{
			Location: to.Ptr("westus"),
			Properties: &armcompute.VirtualMachineProperties{
				HardwareProfile: &armcompute.HardwareProfile{
					VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
				},
				NetworkProfile: &armcompute.NetworkProfile{
					NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
						{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
							Properties: &armcompute.NetworkInterfaceReferenceProperties{
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.OSProfile{
					AdminPassword: to.Ptr("{your-password}"),
					AdminUsername: to.Ptr("{your-username}"),
					ComputerName:  to.Ptr("myVM"),
					WindowsConfiguration: &armcompute.WindowsConfiguration{
						EnableAutomaticUpdates: to.Ptr(true),
						PatchSettings: &armcompute.PatchSettings{
							AssessmentMode: to.Ptr(armcompute.WindowsPatchAssessmentModeAutomaticByPlatform),
							PatchMode:      to.Ptr(armcompute.WindowsVMGuestPatchModeAutomaticByPlatform),
						},
						ProvisionVMAgent: to.Ptr(true),
					},
				},
				StorageProfile: &armcompute.StorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.OSDisk{
						Name:         to.Ptr("myVMosdisk"),
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
						},
					},
				},
			},
		},
		&armcompute.VirtualMachinesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAWindowsVmWithPatchSettingModesOfAutomaticByPlatform.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAWindowsVmWithPatchSettingModesOfAutomaticByPlatform.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardDS1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					PatchSettings: &armcompute.PatchSettings{
						AssessmentMode: to.Ptr(armcompute.WindowsPatchAssessmentModeAutomaticByPlatform),
						PatchMode:      to.Ptr(armcompute.WindowsVMGuestPatchModeAutomaticByPlatform),
					},
					ProvisionVMAgent: to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			},
			VMID: to.Ptr("a149cd25-409f-41af-8088-275f5486bc93"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachine) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachine)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAWindowsVmWithPatchSettingModesOfAutomaticByPlatform.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateACustomImageVmFromAnUnmanagedGeneralizedOsImage.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a custom-image vm from an unmanaged generalized os image."},
	})
	client, err = armcompute.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"{vm-name}",
		armcompute.VirtualMachine{
			Location: to.Ptr("westus"),
			Properties: &armcompute.VirtualMachineProperties{
				HardwareProfile: &armcompute.HardwareProfile{
					VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
				},
				NetworkProfile: &armcompute.NetworkProfile{
					NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
						{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
							Properties: &armcompute.NetworkInterfaceReferenceProperties{
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.OSProfile{
					AdminPassword: to.Ptr("{your-password}"),
					AdminUsername: to.Ptr("{your-username}"),
					ComputerName:  to.Ptr("myVM"),
				},
				StorageProfile: &armcompute.StorageProfile{
					OSDisk: &armcompute.OSDisk{
						Name:         to.Ptr("myVMosdisk"),
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						Image: &armcompute.VirtualHardDisk{
							URI: to.Ptr("http://{existing-storage-account-name}.blob.core.windows.net/{existing-container-name}/{existing-generalized-os-image-blob-name}.vhd"),
						},
						OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
						Vhd: &armcompute.VirtualHardDisk{
							URI: to.Ptr("http://{existing-storage-account-name}.blob.core.windows.net/{existing-container-name}/myDisk.vhd"),
						},
					},
				},
			},
		},
		&armcompute.VirtualMachinesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateACustomImageVmFromAnUnmanagedGeneralizedOsImage.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateACustomImageVmFromAnUnmanagedGeneralizedOsImage.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					ProvisionVMAgent:       to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					Image: &armcompute.VirtualHardDisk{
						URI: to.Ptr("https://{existing-storage-account-name}.blob.core.windows.net/system/Microsoft.Compute/Images/vhds/{existing-generalized-os-image-blob-name}.vhd"),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
					Vhd: &armcompute.VirtualHardDisk{
						URI: to.Ptr("http://{existing-storage-account-name}.blob.core.windows.net/vhds/myDisk.vhd"),
					},
				},
			},
			VMID: to.Ptr("926cd555-a07c-4ff5-b214-4aa4dd09d79b"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachine) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachine)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateACustomImageVmFromAnUnmanagedGeneralizedOsImage.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAPlatformImageVmWithUnmanagedOsAndDataDisks.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a platform-image vm with unmanaged os and data disks."},
	})
	client, err = armcompute.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"{vm-name}",
		armcompute.VirtualMachine{
			Location: to.Ptr("westus"),
			Properties: &armcompute.VirtualMachineProperties{
				HardwareProfile: &armcompute.HardwareProfile{
					VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD2V2),
				},
				NetworkProfile: &armcompute.NetworkProfile{
					NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
						{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
							Properties: &armcompute.NetworkInterfaceReferenceProperties{
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.OSProfile{
					AdminPassword: to.Ptr("{your-password}"),
					AdminUsername: to.Ptr("{your-username}"),
					ComputerName:  to.Ptr("myVM"),
				},
				StorageProfile: &armcompute.StorageProfile{
					DataDisks: []*armcompute.DataDisk{
						{
							CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
							DiskSizeGB:   to.Ptr[int32](1023),
							Lun:          to.Ptr[int32](0),
							Vhd: &armcompute.VirtualHardDisk{
								URI: to.Ptr("http://{existing-storage-account-name}.blob.core.windows.net/{existing-container-name}/myDisk0.vhd"),
							},
						},
						{
							CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
							DiskSizeGB:   to.Ptr[int32](1023),
							Lun:          to.Ptr[int32](1),
							Vhd: &armcompute.VirtualHardDisk{
								URI: to.Ptr("http://{existing-storage-account-name}.blob.core.windows.net/{existing-container-name}/myDisk1.vhd"),
							},
						}},
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.OSDisk{
						Name:         to.Ptr("myVMosdisk"),
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						Vhd: &armcompute.VirtualHardDisk{
							URI: to.Ptr("http://{existing-storage-account-name}.blob.core.windows.net/{existing-container-name}/myDisk.vhd"),
						},
					},
				},
			},
		},
		&armcompute.VirtualMachinesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAPlatformImageVmWithUnmanagedOsAndDataDisks.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAPlatformImageVmWithUnmanagedOsAndDataDisks.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD2V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					ProvisionVMAgent:       to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{
					{
						Name:         to.Ptr("dataDisk0"),
						Caching:      to.Ptr(armcompute.CachingTypesNone),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
						DiskSizeGB:   to.Ptr[int32](1023),
						Lun:          to.Ptr[int32](0),
						Vhd: &armcompute.VirtualHardDisk{
							URI: to.Ptr("http://{existing-storage-account-name}.blob.core.windows.net/vhds/myDisk0.vhd"),
						},
					},
					{
						Name:         to.Ptr("dataDisk1"),
						Caching:      to.Ptr(armcompute.CachingTypesNone),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
						DiskSizeGB:   to.Ptr[int32](1023),
						Lun:          to.Ptr[int32](1),
						Vhd: &armcompute.VirtualHardDisk{
							URI: to.Ptr("http://{existing-storage-account-name}.blob.core.windows.net/vhds/myDisk1.vhd"),
						},
					}},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					OSType:       to.Ptr(armcompute.OperatingSystemTypesWindows),
					Vhd: &armcompute.VirtualHardDisk{
						URI: to.Ptr("http://{existing-storage-account-name}.blob.core.windows.net/vhds/myDisk.vhd"),
					},
				},
			},
			VMID: to.Ptr("5230a749-2f68-4830-900b-702182d32e63"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachine) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachine)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAPlatformImageVmWithUnmanagedOsAndDataDisks.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAVmFromACustomImage.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a vm from a custom image."},
	})
	client, err = armcompute.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myVM",
		armcompute.VirtualMachine{
			Location: to.Ptr("westus"),
			Properties: &armcompute.VirtualMachineProperties{
				HardwareProfile: &armcompute.HardwareProfile{
					VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
				},
				NetworkProfile: &armcompute.NetworkProfile{
					NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
						{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
							Properties: &armcompute.NetworkInterfaceReferenceProperties{
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.OSProfile{
					AdminPassword: to.Ptr("{your-password}"),
					AdminUsername: to.Ptr("{your-username}"),
					ComputerName:  to.Ptr("myVM"),
				},
				StorageProfile: &armcompute.StorageProfile{
					ImageReference: &armcompute.ImageReference{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/images/{existing-custom-image-name}"),
					},
					OSDisk: &armcompute.OSDisk{
						Name:         to.Ptr("myVMosdisk"),
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		&armcompute.VirtualMachinesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAVmFromACustomImage.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAVmFromACustomImage.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				LinuxConfiguration: &armcompute.LinuxConfiguration{
					DisablePasswordAuthentication: to.Ptr(false),
				},
				Secrets: []*armcompute.VaultSecretGroup{},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/images/nsgcustom"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					DiskSizeGB:   to.Ptr[int32](30),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesLinux),
				},
			},
			VMID: to.Ptr("71aa3d5a-d73d-4970-9182-8580433b2865"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachine) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachine)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAVmFromACustomImage.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAVmFromAGeneralizedSharedImage.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a vm from a generalized shared image."},
	})
	client, err = armcompute.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myVM",
		armcompute.VirtualMachine{
			Location: to.Ptr("westus"),
			Properties: &armcompute.VirtualMachineProperties{
				HardwareProfile: &armcompute.HardwareProfile{
					VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
				},
				NetworkProfile: &armcompute.NetworkProfile{
					NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
						{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
							Properties: &armcompute.NetworkInterfaceReferenceProperties{
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.OSProfile{
					AdminPassword: to.Ptr("{your-password}"),
					AdminUsername: to.Ptr("{your-username}"),
					ComputerName:  to.Ptr("myVM"),
				},
				StorageProfile: &armcompute.StorageProfile{
					ImageReference: &armcompute.ImageReference{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/galleries/mySharedGallery/images/mySharedImage"),
					},
					OSDisk: &armcompute.OSDisk{
						Name:         to.Ptr("myVMosdisk"),
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		&armcompute.VirtualMachinesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAVmFromAGeneralizedSharedImage.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAVmFromAGeneralizedSharedImage.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				LinuxConfiguration: &armcompute.LinuxConfiguration{
					DisablePasswordAuthentication: to.Ptr(false),
				},
				Secrets: []*armcompute.VaultSecretGroup{},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/galleries/mySharedGallery/images/mySharedImage"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					DiskSizeGB:   to.Ptr[int32](30),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesLinux),
				},
			},
			VMID: to.Ptr("71aa3d5a-d73d-4970-9182-8580433b2865"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachine) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachine)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAVmFromAGeneralizedSharedImage.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAVmFromASpecializedSharedImage.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a vm from a specialized shared image."},
	})
	client, err = armcompute.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myVM",
		armcompute.VirtualMachine{
			Location: to.Ptr("westus"),
			Properties: &armcompute.VirtualMachineProperties{
				HardwareProfile: &armcompute.HardwareProfile{
					VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
				},
				NetworkProfile: &armcompute.NetworkProfile{
					NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
						{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
							Properties: &armcompute.NetworkInterfaceReferenceProperties{
								Primary: to.Ptr(true),
							},
						}},
				},
				StorageProfile: &armcompute.StorageProfile{
					ImageReference: &armcompute.ImageReference{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/galleries/mySharedGallery/images/mySharedImage"),
					},
					OSDisk: &armcompute.OSDisk{
						Name:         to.Ptr("myVMosdisk"),
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		&armcompute.VirtualMachinesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAVmFromASpecializedSharedImage.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAVmFromASpecializedSharedImage.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/galleries/mySharedGallery/images/mySharedImage"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					DiskSizeGB:   to.Ptr[int32](30),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesLinux),
				},
			},
			VMID: to.Ptr("71aa3d5a-d73d-4970-9182-8580433b2865"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachine) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachine)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAVmFromASpecializedSharedImage.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAVmInAVirtualMachineScaleSetWithCustomerAssignedPlatformFaultDomain.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a vm in a Virtual Machine Scale Set with customer assigned platformFaultDomain."},
	})
	client, err = armcompute.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myVM",
		armcompute.VirtualMachine{
			Location: to.Ptr("westus"),
			Properties: &armcompute.VirtualMachineProperties{
				HardwareProfile: &armcompute.HardwareProfile{
					VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
				},
				NetworkProfile: &armcompute.NetworkProfile{
					NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
						{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
							Properties: &armcompute.NetworkInterfaceReferenceProperties{
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.OSProfile{
					AdminPassword: to.Ptr("{your-password}"),
					AdminUsername: to.Ptr("{your-username}"),
					ComputerName:  to.Ptr("myVM"),
				},
				PlatformFaultDomain: to.Ptr[int32](1),
				StorageProfile: &armcompute.StorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.OSDisk{
						Name:         to.Ptr("myVMosdisk"),
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
				VirtualMachineScaleSet: &armcompute.SubResource{
					ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{existing-flex-vmss-name-with-platformFaultDomainCount-greater-than-1}"),
				},
			},
		},
		&armcompute.VirtualMachinesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAVmInAVirtualMachineScaleSetWithCustomerAssignedPlatformFaultDomain.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAVmInAVirtualMachineScaleSetWithCustomerAssignedPlatformFaultDomain.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					ProvisionVMAgent:       to.Ptr(true),
				},
			},
			PlatformFaultDomain: to.Ptr[int32](1),
			ProvisioningState:   to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			},
			VirtualMachineScaleSet: &armcompute.SubResource{
				ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/myExistingFlexVmss"),
			},
			VMID: to.Ptr("7cce54f2-ecd3-4ddd-a8d9-50984faa3918"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachine) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachine)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAVmInAVirtualMachineScaleSetWithCustomerAssignedPlatformFaultDomain.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAVmInAnAvailabilitySet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a vm in an availability set."},
	})
	client, err = armcompute.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myVM",
		armcompute.VirtualMachine{
			Location: to.Ptr("westus"),
			Properties: &armcompute.VirtualMachineProperties{
				AvailabilitySet: &armcompute.SubResource{
					ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/availabilitySets/{existing-availability-set-name}"),
				},
				HardwareProfile: &armcompute.HardwareProfile{
					VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
				},
				NetworkProfile: &armcompute.NetworkProfile{
					NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
						{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
							Properties: &armcompute.NetworkInterfaceReferenceProperties{
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.OSProfile{
					AdminPassword: to.Ptr("{your-password}"),
					AdminUsername: to.Ptr("{your-username}"),
					ComputerName:  to.Ptr("myVM"),
				},
				StorageProfile: &armcompute.StorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.OSDisk{
						Name:         to.Ptr("myVMosdisk"),
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		&armcompute.VirtualMachinesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAVmInAnAvailabilitySet.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAVmInAnAvailabilitySet.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			AvailabilitySet: &armcompute.SubResource{
				ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/availabilitySets/NSGEXISTINGAS"),
			},
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					ProvisionVMAgent:       to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			},
			VMID: to.Ptr("b7a098cc-b0b8-46e8-a205-62f301a62a8f"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachine) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachine)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAVmInAnAvailabilitySet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAVmWithApplicationProfile.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a vm with Application Profile."},
	})
	client, err = armcompute.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myVM",
		armcompute.VirtualMachine{
			Location: to.Ptr("westus"),
			Properties: &armcompute.VirtualMachineProperties{
				ApplicationProfile: &armcompute.ApplicationProfile{
					GalleryApplications: []*armcompute.VMGalleryApplication{
						{
							ConfigurationReference: to.Ptr("https://mystorageaccount.blob.core.windows.net/configurations/settings.config"),
							Order:                  to.Ptr[int32](1),
							PackageReferenceID:     to.Ptr("/subscriptions/32c17a9e-aa7b-4ba5-a45b-e324116b6fdb/resourceGroups/myresourceGroupName2/providers/Microsoft.Compute/galleries/myGallery1/applications/MyApplication1/versions/1.0"),
							Tags:                   to.Ptr("myTag1"),
						},
						{
							PackageReferenceID: to.Ptr("/subscriptions/32c17a9e-aa7b-4ba5-a45b-e324116b6fdg/resourceGroups/myresourceGroupName3/providers/Microsoft.Compute/galleries/myGallery2/applications/MyApplication2/versions/1.1"),
						}},
				},
				HardwareProfile: &armcompute.HardwareProfile{
					VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
				},
				NetworkProfile: &armcompute.NetworkProfile{
					NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
						{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
							Properties: &armcompute.NetworkInterfaceReferenceProperties{
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.OSProfile{
					AdminPassword: to.Ptr("{your-password}"),
					AdminUsername: to.Ptr("{your-username}"),
					ComputerName:  to.Ptr("myVM"),
				},
				StorageProfile: &armcompute.StorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("{image_offer}"),
						Publisher: to.Ptr("{image_publisher}"),
						SKU:       to.Ptr("{image_sku}"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.OSDisk{
						Name:         to.Ptr("myVMosdisk"),
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		&armcompute.VirtualMachinesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAVmWithApplicationProfile.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAVmWithApplicationProfile.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			ApplicationProfile: &armcompute.ApplicationProfile{
				GalleryApplications: []*armcompute.VMGalleryApplication{
					{
						ConfigurationReference: to.Ptr("https://mystorageaccount.blob.core.windows.net/configurations/settings.config"),
						Order:                  to.Ptr[int32](1),
						PackageReferenceID:     to.Ptr("/subscriptions/32c17a9e-aa7b-4ba5-a45b-e324116b6fdb/resourceGroups/myresourceGroupName2/providers/Microsoft.Compute/galleries/myGallery1/applications/MyApplication1/versions/1.0"),
						Tags:                   to.Ptr("myTag1"),
					},
					{
						PackageReferenceID: to.Ptr("/subscriptions/32c17a9e-aa7b-4ba5-a45b-e324116b6fdg/resourceGroups/myresourceGroupName3/providers/Microsoft.Compute/galleries/myGallery2/applications/MyApplication2/versions/1.1"),
					}},
			},
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				LinuxConfiguration: &armcompute.LinuxConfiguration{
					DisablePasswordAuthentication: to.Ptr(true),
					SSH: &armcompute.SSHConfiguration{
						PublicKeys: []*armcompute.SSHPublicKey{
							{
								Path:    to.Ptr("/home/{your-username}/.ssh/authorized_keys"),
								KeyData: to.Ptr("ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCeClRAk2ipUs/l5voIsDC5q9RI+YSRd1Bvd/O+axgY4WiBzG+4FwJWZm/mLLe5DoOdHQwmU2FrKXZSW4w2sYE70KeWnrFViCOX5MTVvJgPE8ClugNl8RWth/tU849DvM9sT7vFgfVSHcAS2yDRyDlueii+8nF2ym8XWAPltFVCyLHRsyBp5YPqK8JFYIa1eybKsY3hEAxRCA+/7bq8et+Gj3coOsuRmrehav7rE6N12Pb80I6ofa6SM5XNYq4Xk0iYNx7R3kdz0Jj9XgZYWjAHjJmT0gTRoOnt6upOuxK7xI/ykWrllgpXrCPu3Ymz+c+ujaqcxDopnAl2lmf69/J1"),
							}},
					},
				},
				Secrets: []*armcompute.VaultSecretGroup{},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("UbuntuServer"),
					Publisher: to.Ptr("Canonical"),
					SKU:       to.Ptr("16.04-LTS"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesLinux),
				},
			},
			VMID: to.Ptr("e0de9b84-a506-4b95-9623-00a425d05c90"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachine) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachine)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAVmWithApplicationProfile.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAVmWithDiskEncryptionSetResource.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a vm with DiskEncryptionSet resource id in the os disk and data disk."},
	})
	client, err = armcompute.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myVM",
		armcompute.VirtualMachine{
			Location: to.Ptr("westus"),
			Properties: &armcompute.VirtualMachineProperties{
				HardwareProfile: &armcompute.HardwareProfile{
					VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
				},
				NetworkProfile: &armcompute.NetworkProfile{
					NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
						{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
							Properties: &armcompute.NetworkInterfaceReferenceProperties{
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.OSProfile{
					AdminPassword: to.Ptr("{your-password}"),
					AdminUsername: to.Ptr("{your-username}"),
					ComputerName:  to.Ptr("myVM"),
				},
				StorageProfile: &armcompute.StorageProfile{
					DataDisks: []*armcompute.DataDisk{
						{
							Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
							CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
							DiskSizeGB:   to.Ptr[int32](1023),
							Lun:          to.Ptr[int32](0),
							ManagedDisk: &armcompute.ManagedDiskParameters{
								DiskEncryptionSet: &armcompute.DiskEncryptionSetParameters{
									ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{existing-diskEncryptionSet-name}"),
								},
								StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
							},
						},
						{
							Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
							CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesAttach),
							DiskSizeGB:   to.Ptr[int32](1023),
							Lun:          to.Ptr[int32](1),
							ManagedDisk: &armcompute.ManagedDiskParameters{
								ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/{existing-managed-disk-name}"),
								DiskEncryptionSet: &armcompute.DiskEncryptionSetParameters{
									ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{existing-diskEncryptionSet-name}"),
								},
								StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
							},
						}},
					ImageReference: &armcompute.ImageReference{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/images/{existing-custom-image-name}"),
					},
					OSDisk: &armcompute.OSDisk{
						Name:         to.Ptr("myVMosdisk"),
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							DiskEncryptionSet: &armcompute.DiskEncryptionSetParameters{
								ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{existing-diskEncryptionSet-name}"),
							},
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		&armcompute.VirtualMachinesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAVmWithDiskEncryptionSetResource.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAVmWithDiskEncryptionSetResource.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				LinuxConfiguration: &armcompute.LinuxConfiguration{
					DisablePasswordAuthentication: to.Ptr(false),
				},
				Secrets: []*armcompute.VaultSecretGroup{},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{
					{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
						DiskSizeGB:   to.Ptr[int32](1023),
						Lun:          to.Ptr[int32](0),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							DiskEncryptionSet: &armcompute.DiskEncryptionSetParameters{
								ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{existing-diskEncryptionSet-name}"),
							},
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
					{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesAttach),
						DiskSizeGB:   to.Ptr[int32](1023),
						Lun:          to.Ptr[int32](1),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/{existing-managed-disk-name}"),
							DiskEncryptionSet: &armcompute.DiskEncryptionSetParameters{
								ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{existing-diskEncryptionSet-name}"),
							},
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					}},
				ImageReference: &armcompute.ImageReference{
					ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/images/nsgcustom"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					DiskSizeGB:   to.Ptr[int32](30),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						DiskEncryptionSet: &armcompute.DiskEncryptionSetParameters{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{existing-diskencryptionset-name}"),
						},
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesLinux),
				},
			},
			VMID: to.Ptr("71aa3d5a-d73d-4970-9182-8580433b2865"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachine) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachine)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAVmWithDiskEncryptionSetResource.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAVmWithEncryptionAtHost.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a vm with Host Encryption using encryptionAtHost property."},
	})
	client, err = armcompute.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myVM",
		armcompute.VirtualMachine{
			Location: to.Ptr("westus"),
			Plan: &armcompute.Plan{
				Name:      to.Ptr("windows2016"),
				Product:   to.Ptr("windows-data-science-vm"),
				Publisher: to.Ptr("microsoft-ads"),
			},
			Properties: &armcompute.VirtualMachineProperties{
				HardwareProfile: &armcompute.HardwareProfile{
					VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardDS1V2),
				},
				NetworkProfile: &armcompute.NetworkProfile{
					NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
						{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
							Properties: &armcompute.NetworkInterfaceReferenceProperties{
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.OSProfile{
					AdminPassword: to.Ptr("{your-password}"),
					AdminUsername: to.Ptr("{your-username}"),
					ComputerName:  to.Ptr("myVM"),
				},
				SecurityProfile: &armcompute.SecurityProfile{
					EncryptionAtHost: to.Ptr(true),
				},
				StorageProfile: &armcompute.StorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("windows-data-science-vm"),
						Publisher: to.Ptr("microsoft-ads"),
						SKU:       to.Ptr("windows2016"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.OSDisk{
						Name:         to.Ptr("myVMosdisk"),
						Caching:      to.Ptr(armcompute.CachingTypesReadOnly),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		&armcompute.VirtualMachinesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAVmWithEncryptionAtHost.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAVmWithEncryptionAtHost.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Plan: &armcompute.Plan{
			Name:      to.Ptr("standard-data-science-vm"),
			Product:   to.Ptr("standard-data-science-vm"),
			Publisher: to.Ptr("microsoft-ads"),
		},
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardDS1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					ProvisionVMAgent:       to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			SecurityProfile: &armcompute.SecurityProfile{
				EncryptionAtHost: to.Ptr(true),
			},
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("standard-data-science-vm"),
					Publisher: to.Ptr("microsoft-ads"),
					SKU:       to.Ptr("standard-data-science-vm"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadOnly),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			},
			VMID: to.Ptr("5c0d55a7-c407-4ed6-bf7d-ddb810267c85"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachine) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachine)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAVmWithEncryptionAtHost.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAVmWithScheduledEventsProfile.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a vm with Scheduled Events Profile"},
	})
	client, err = armcompute.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myVM",
		armcompute.VirtualMachine{
			Location: to.Ptr("westus"),
			Properties: &armcompute.VirtualMachineProperties{
				DiagnosticsProfile: &armcompute.DiagnosticsProfile{
					BootDiagnostics: &armcompute.BootDiagnostics{
						Enabled:    to.Ptr(true),
						StorageURI: to.Ptr("http://{existing-storage-account-name}.blob.core.windows.net"),
					},
				},
				HardwareProfile: &armcompute.HardwareProfile{
					VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
				},
				NetworkProfile: &armcompute.NetworkProfile{
					NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
						{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
							Properties: &armcompute.NetworkInterfaceReferenceProperties{
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.OSProfile{
					AdminPassword: to.Ptr("{your-password}"),
					AdminUsername: to.Ptr("{your-username}"),
					ComputerName:  to.Ptr("myVM"),
				},
				ScheduledEventsProfile: &armcompute.ScheduledEventsProfile{
					TerminateNotificationProfile: &armcompute.TerminateNotificationProfile{
						Enable:           to.Ptr(true),
						NotBeforeTimeout: to.Ptr("PT10M"),
					},
				},
				StorageProfile: &armcompute.StorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.OSDisk{
						Name:         to.Ptr("myVMosdisk"),
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		&armcompute.VirtualMachinesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAVmWithScheduledEventsProfile.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAVmWithScheduledEventsProfile.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			DiagnosticsProfile: &armcompute.DiagnosticsProfile{
				BootDiagnostics: &armcompute.BootDiagnostics{
					Enabled:    to.Ptr(true),
					StorageURI: to.Ptr("http://nsgdiagnostic.blob.core.windows.net"),
				},
			},
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					ProvisionVMAgent:       to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			ScheduledEventsProfile: &armcompute.ScheduledEventsProfile{
				TerminateNotificationProfile: &armcompute.TerminateNotificationProfile{
					Enable:           to.Ptr(true),
					NotBeforeTimeout: to.Ptr("PT10M"),
				},
			},
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			},
			VMID: to.Ptr("676420ba-7a24-4bfe-80bd-9c841ee184fa"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachine) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachine)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAVmWithScheduledEventsProfile.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAVmWithAMarketplaceImagePlan.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a vm with a marketplace image plan."},
	})
	client, err = armcompute.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myVM",
		armcompute.VirtualMachine{
			Location: to.Ptr("westus"),
			Plan: &armcompute.Plan{
				Name:      to.Ptr("windows2016"),
				Product:   to.Ptr("windows-data-science-vm"),
				Publisher: to.Ptr("microsoft-ads"),
			},
			Properties: &armcompute.VirtualMachineProperties{
				HardwareProfile: &armcompute.HardwareProfile{
					VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
				},
				NetworkProfile: &armcompute.NetworkProfile{
					NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
						{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
							Properties: &armcompute.NetworkInterfaceReferenceProperties{
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.OSProfile{
					AdminPassword: to.Ptr("{your-password}"),
					AdminUsername: to.Ptr("{your-username}"),
					ComputerName:  to.Ptr("myVM"),
				},
				StorageProfile: &armcompute.StorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("windows-data-science-vm"),
						Publisher: to.Ptr("microsoft-ads"),
						SKU:       to.Ptr("windows2016"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.OSDisk{
						Name:         to.Ptr("myVMosdisk"),
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		&armcompute.VirtualMachinesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAVmWithAMarketplaceImagePlan.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAVmWithAMarketplaceImagePlan.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Plan: &armcompute.Plan{
			Name:      to.Ptr("standard-data-science-vm"),
			Product:   to.Ptr("standard-data-science-vm"),
			Publisher: to.Ptr("microsoft-ads"),
		},
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					ProvisionVMAgent:       to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("standard-data-science-vm"),
					Publisher: to.Ptr("microsoft-ads"),
					SKU:       to.Ptr("standard-data-science-vm"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			},
			VMID: to.Ptr("5c0d55a7-c407-4ed6-bf7d-ddb810267c85"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachine) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachine)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAVmWithAMarketplaceImagePlan.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAVmWithExtensionsTimeBudget.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a vm with an extensions time budget."},
	})
	client, err = armcompute.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myVM",
		armcompute.VirtualMachine{
			Location: to.Ptr("westus"),
			Properties: &armcompute.VirtualMachineProperties{
				DiagnosticsProfile: &armcompute.DiagnosticsProfile{
					BootDiagnostics: &armcompute.BootDiagnostics{
						Enabled:    to.Ptr(true),
						StorageURI: to.Ptr("http://{existing-storage-account-name}.blob.core.windows.net"),
					},
				},
				ExtensionsTimeBudget: to.Ptr("PT30M"),
				HardwareProfile: &armcompute.HardwareProfile{
					VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
				},
				NetworkProfile: &armcompute.NetworkProfile{
					NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
						{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
							Properties: &armcompute.NetworkInterfaceReferenceProperties{
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.OSProfile{
					AdminPassword: to.Ptr("{your-password}"),
					AdminUsername: to.Ptr("{your-username}"),
					ComputerName:  to.Ptr("myVM"),
				},
				StorageProfile: &armcompute.StorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.OSDisk{
						Name:         to.Ptr("myVMosdisk"),
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		&armcompute.VirtualMachinesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAVmWithExtensionsTimeBudget.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAVmWithExtensionsTimeBudget.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			DiagnosticsProfile: &armcompute.DiagnosticsProfile{
				BootDiagnostics: &armcompute.BootDiagnostics{
					Enabled:    to.Ptr(true),
					StorageURI: to.Ptr("http://nsgdiagnostic.blob.core.windows.net"),
				},
			},
			ExtensionsTimeBudget: to.Ptr("PT30M"),
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					ProvisionVMAgent:       to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			},
			VMID: to.Ptr("676420ba-7a24-4bfe-80bd-9c841ee184fa"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachine) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachine)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAVmWithExtensionsTimeBudget.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAVmWithBootDiagnostics.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a vm with boot diagnostics."},
	})
	client, err = armcompute.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myVM",
		armcompute.VirtualMachine{
			Location: to.Ptr("westus"),
			Properties: &armcompute.VirtualMachineProperties{
				DiagnosticsProfile: &armcompute.DiagnosticsProfile{
					BootDiagnostics: &armcompute.BootDiagnostics{
						Enabled:    to.Ptr(true),
						StorageURI: to.Ptr("http://{existing-storage-account-name}.blob.core.windows.net"),
					},
				},
				HardwareProfile: &armcompute.HardwareProfile{
					VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
				},
				NetworkProfile: &armcompute.NetworkProfile{
					NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
						{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
							Properties: &armcompute.NetworkInterfaceReferenceProperties{
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.OSProfile{
					AdminPassword: to.Ptr("{your-password}"),
					AdminUsername: to.Ptr("{your-username}"),
					ComputerName:  to.Ptr("myVM"),
				},
				StorageProfile: &armcompute.StorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.OSDisk{
						Name:         to.Ptr("myVMosdisk"),
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		&armcompute.VirtualMachinesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAVmWithBootDiagnostics.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAVmWithBootDiagnostics.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			DiagnosticsProfile: &armcompute.DiagnosticsProfile{
				BootDiagnostics: &armcompute.BootDiagnostics{
					Enabled:    to.Ptr(true),
					StorageURI: to.Ptr("http://nsgdiagnostic.blob.core.windows.net"),
				},
			},
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					ProvisionVMAgent:       to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			},
			VMID: to.Ptr("676420ba-7a24-4bfe-80bd-9c841ee184fa"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachine) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachine)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAVmWithBootDiagnostics.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAVmWithEmptyDataDisks.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a vm with empty data disks."},
	})
	client, err = armcompute.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myVM",
		armcompute.VirtualMachine{
			Location: to.Ptr("westus"),
			Properties: &armcompute.VirtualMachineProperties{
				HardwareProfile: &armcompute.HardwareProfile{
					VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD2V2),
				},
				NetworkProfile: &armcompute.NetworkProfile{
					NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
						{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
							Properties: &armcompute.NetworkInterfaceReferenceProperties{
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.OSProfile{
					AdminPassword: to.Ptr("{your-password}"),
					AdminUsername: to.Ptr("{your-username}"),
					ComputerName:  to.Ptr("myVM"),
				},
				StorageProfile: &armcompute.StorageProfile{
					DataDisks: []*armcompute.DataDisk{
						{
							CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
							DiskSizeGB:   to.Ptr[int32](1023),
							Lun:          to.Ptr[int32](0),
						},
						{
							CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
							DiskSizeGB:   to.Ptr[int32](1023),
							Lun:          to.Ptr[int32](1),
						}},
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.OSDisk{
						Name:         to.Ptr("myVMosdisk"),
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		&armcompute.VirtualMachinesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAVmWithEmptyDataDisks.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAVmWithEmptyDataDisks.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD2V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					ProvisionVMAgent:       to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{
					{
						Caching:      to.Ptr(armcompute.CachingTypesNone),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
						DiskSizeGB:   to.Ptr[int32](1023),
						Lun:          to.Ptr[int32](0),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
					{
						Caching:      to.Ptr(armcompute.CachingTypesNone),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
						DiskSizeGB:   to.Ptr[int32](1023),
						Lun:          to.Ptr[int32](1),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					}},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			},
			VMID: to.Ptr("3906fef9-a1e5-4b83-a8a8-540858b41df0"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachine) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachine)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAVmWithEmptyDataDisks.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAVmWithADiffOsDiskUsingDiffDiskPlacementAsCacheDisk.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a vm with ephemeral os disk provisioning in Cache disk using placement property."},
	})
	client, err = armcompute.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myVM",
		armcompute.VirtualMachine{
			Location: to.Ptr("westus"),
			Plan: &armcompute.Plan{
				Name:      to.Ptr("windows2016"),
				Product:   to.Ptr("windows-data-science-vm"),
				Publisher: to.Ptr("microsoft-ads"),
			},
			Properties: &armcompute.VirtualMachineProperties{
				HardwareProfile: &armcompute.HardwareProfile{
					VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardDS1V2),
				},
				NetworkProfile: &armcompute.NetworkProfile{
					NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
						{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
							Properties: &armcompute.NetworkInterfaceReferenceProperties{
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.OSProfile{
					AdminPassword: to.Ptr("{your-password}"),
					AdminUsername: to.Ptr("{your-username}"),
					ComputerName:  to.Ptr("myVM"),
				},
				StorageProfile: &armcompute.StorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("windows-data-science-vm"),
						Publisher: to.Ptr("microsoft-ads"),
						SKU:       to.Ptr("windows2016"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.OSDisk{
						Name:         to.Ptr("myVMosdisk"),
						Caching:      to.Ptr(armcompute.CachingTypesReadOnly),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						DiffDiskSettings: &armcompute.DiffDiskSettings{
							Option:    to.Ptr(armcompute.DiffDiskOptionsLocal),
							Placement: to.Ptr(armcompute.DiffDiskPlacementCacheDisk),
						},
						ManagedDisk: &armcompute.ManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		&armcompute.VirtualMachinesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAVmWithADiffOsDiskUsingDiffDiskPlacementAsCacheDisk.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAVmWithADiffOsDiskUsingDiffDiskPlacementAsCacheDisk.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Plan: &armcompute.Plan{
			Name:      to.Ptr("standard-data-science-vm"),
			Product:   to.Ptr("standard-data-science-vm"),
			Publisher: to.Ptr("microsoft-ads"),
		},
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardDS1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					ProvisionVMAgent:       to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("standard-data-science-vm"),
					Publisher: to.Ptr("microsoft-ads"),
					SKU:       to.Ptr("standard-data-science-vm"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadOnly),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					DiffDiskSettings: &armcompute.DiffDiskSettings{
						Option:    to.Ptr(armcompute.DiffDiskOptionsLocal),
						Placement: to.Ptr(armcompute.DiffDiskPlacementCacheDisk),
					},
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			},
			VMID: to.Ptr("5c0d55a7-c407-4ed6-bf7d-ddb810267c85"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachine) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachine)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAVmWithADiffOsDiskUsingDiffDiskPlacementAsCacheDisk.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAVmWithADiffOsDiskUsingDiffDiskPlacementAsResourceDisk.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a vm with ephemeral os disk provisioning in Resource disk using placement property."},
	})
	client, err = armcompute.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myVM",
		armcompute.VirtualMachine{
			Location: to.Ptr("westus"),
			Plan: &armcompute.Plan{
				Name:      to.Ptr("windows2016"),
				Product:   to.Ptr("windows-data-science-vm"),
				Publisher: to.Ptr("microsoft-ads"),
			},
			Properties: &armcompute.VirtualMachineProperties{
				HardwareProfile: &armcompute.HardwareProfile{
					VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardDS1V2),
				},
				NetworkProfile: &armcompute.NetworkProfile{
					NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
						{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
							Properties: &armcompute.NetworkInterfaceReferenceProperties{
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.OSProfile{
					AdminPassword: to.Ptr("{your-password}"),
					AdminUsername: to.Ptr("{your-username}"),
					ComputerName:  to.Ptr("myVM"),
				},
				StorageProfile: &armcompute.StorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("windows-data-science-vm"),
						Publisher: to.Ptr("microsoft-ads"),
						SKU:       to.Ptr("windows2016"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.OSDisk{
						Name:         to.Ptr("myVMosdisk"),
						Caching:      to.Ptr(armcompute.CachingTypesReadOnly),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						DiffDiskSettings: &armcompute.DiffDiskSettings{
							Option:    to.Ptr(armcompute.DiffDiskOptionsLocal),
							Placement: to.Ptr(armcompute.DiffDiskPlacementResourceDisk),
						},
						ManagedDisk: &armcompute.ManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		&armcompute.VirtualMachinesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAVmWithADiffOsDiskUsingDiffDiskPlacementAsResourceDisk.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAVmWithADiffOsDiskUsingDiffDiskPlacementAsResourceDisk.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Plan: &armcompute.Plan{
			Name:      to.Ptr("standard-data-science-vm"),
			Product:   to.Ptr("standard-data-science-vm"),
			Publisher: to.Ptr("microsoft-ads"),
		},
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardDS1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					ProvisionVMAgent:       to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("standard-data-science-vm"),
					Publisher: to.Ptr("microsoft-ads"),
					SKU:       to.Ptr("standard-data-science-vm"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadOnly),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					DiffDiskSettings: &armcompute.DiffDiskSettings{
						Option:    to.Ptr(armcompute.DiffDiskOptionsLocal),
						Placement: to.Ptr(armcompute.DiffDiskPlacementResourceDisk),
					},
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			},
			VMID: to.Ptr("5c0d55a7-c407-4ed6-bf7d-ddb810267c85"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachine) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachine)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAVmWithADiffOsDiskUsingDiffDiskPlacementAsResourceDisk.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAVmWithADiffOsDisk.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a vm with ephemeral os disk."},
	})
	client, err = armcompute.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myVM",
		armcompute.VirtualMachine{
			Location: to.Ptr("westus"),
			Plan: &armcompute.Plan{
				Name:      to.Ptr("windows2016"),
				Product:   to.Ptr("windows-data-science-vm"),
				Publisher: to.Ptr("microsoft-ads"),
			},
			Properties: &armcompute.VirtualMachineProperties{
				HardwareProfile: &armcompute.HardwareProfile{
					VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardDS1V2),
				},
				NetworkProfile: &armcompute.NetworkProfile{
					NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
						{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
							Properties: &armcompute.NetworkInterfaceReferenceProperties{
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.OSProfile{
					AdminPassword: to.Ptr("{your-password}"),
					AdminUsername: to.Ptr("{your-username}"),
					ComputerName:  to.Ptr("myVM"),
				},
				StorageProfile: &armcompute.StorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("windows-data-science-vm"),
						Publisher: to.Ptr("microsoft-ads"),
						SKU:       to.Ptr("windows2016"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.OSDisk{
						Name:         to.Ptr("myVMosdisk"),
						Caching:      to.Ptr(armcompute.CachingTypesReadOnly),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						DiffDiskSettings: &armcompute.DiffDiskSettings{
							Option: to.Ptr(armcompute.DiffDiskOptionsLocal),
						},
						ManagedDisk: &armcompute.ManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		&armcompute.VirtualMachinesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAVmWithADiffOsDisk.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAVmWithADiffOsDisk.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Plan: &armcompute.Plan{
			Name:      to.Ptr("standard-data-science-vm"),
			Product:   to.Ptr("standard-data-science-vm"),
			Publisher: to.Ptr("microsoft-ads"),
		},
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardDS1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					ProvisionVMAgent:       to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("standard-data-science-vm"),
					Publisher: to.Ptr("microsoft-ads"),
					SKU:       to.Ptr("standard-data-science-vm"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadOnly),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					DiffDiskSettings: &armcompute.DiffDiskSettings{
						Option: to.Ptr(armcompute.DiffDiskOptionsLocal),
					},
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			},
			VMID: to.Ptr("5c0d55a7-c407-4ed6-bf7d-ddb810267c85"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachine) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachine)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAVmWithADiffOsDisk.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAVmWithManagedBootDiagnostics.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a vm with managed boot diagnostics."},
	})
	client, err = armcompute.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myVM",
		armcompute.VirtualMachine{
			Location: to.Ptr("westus"),
			Properties: &armcompute.VirtualMachineProperties{
				DiagnosticsProfile: &armcompute.DiagnosticsProfile{
					BootDiagnostics: &armcompute.BootDiagnostics{
						Enabled: to.Ptr(true),
					},
				},
				HardwareProfile: &armcompute.HardwareProfile{
					VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
				},
				NetworkProfile: &armcompute.NetworkProfile{
					NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
						{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
							Properties: &armcompute.NetworkInterfaceReferenceProperties{
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.OSProfile{
					AdminPassword: to.Ptr("{your-password}"),
					AdminUsername: to.Ptr("{your-username}"),
					ComputerName:  to.Ptr("myVM"),
				},
				StorageProfile: &armcompute.StorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.OSDisk{
						Name:         to.Ptr("myVMosdisk"),
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		&armcompute.VirtualMachinesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAVmWithManagedBootDiagnostics.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAVmWithManagedBootDiagnostics.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			DiagnosticsProfile: &armcompute.DiagnosticsProfile{
				BootDiagnostics: &armcompute.BootDiagnostics{
					Enabled: to.Ptr(true),
				},
			},
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					ProvisionVMAgent:       to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			},
			VMID: to.Ptr("676420ba-7a24-4bfe-80bd-9c841ee184fa"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachine) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachine)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAVmWithManagedBootDiagnostics.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAVmWithPasswordAuthentication.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a vm with password authentication."},
	})
	client, err = armcompute.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myVM",
		armcompute.VirtualMachine{
			Location: to.Ptr("westus"),
			Properties: &armcompute.VirtualMachineProperties{
				HardwareProfile: &armcompute.HardwareProfile{
					VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
				},
				NetworkProfile: &armcompute.NetworkProfile{
					NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
						{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
							Properties: &armcompute.NetworkInterfaceReferenceProperties{
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.OSProfile{
					AdminPassword: to.Ptr("{your-password}"),
					AdminUsername: to.Ptr("{your-username}"),
					ComputerName:  to.Ptr("myVM"),
				},
				StorageProfile: &armcompute.StorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.OSDisk{
						Name:         to.Ptr("myVMosdisk"),
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		&armcompute.VirtualMachinesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAVmWithPasswordAuthentication.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAVmWithPasswordAuthentication.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					ProvisionVMAgent:       to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			},
			VMID: to.Ptr("b248db33-62ba-4d2d-b791-811e075ee0f5"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachine) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachine)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAVmWithPasswordAuthentication.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAVmWithPremiumStorage.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a vm with premium storage."},
	})
	client, err = armcompute.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myVM",
		armcompute.VirtualMachine{
			Location: to.Ptr("westus"),
			Properties: &armcompute.VirtualMachineProperties{
				HardwareProfile: &armcompute.HardwareProfile{
					VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
				},
				NetworkProfile: &armcompute.NetworkProfile{
					NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
						{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
							Properties: &armcompute.NetworkInterfaceReferenceProperties{
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.OSProfile{
					AdminPassword: to.Ptr("{your-password}"),
					AdminUsername: to.Ptr("{your-username}"),
					ComputerName:  to.Ptr("myVM"),
				},
				StorageProfile: &armcompute.StorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.OSDisk{
						Name:         to.Ptr("myVMosdisk"),
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
						},
					},
				},
			},
		},
		&armcompute.VirtualMachinesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAVmWithPremiumStorage.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAVmWithPremiumStorage.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardDS1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					ProvisionVMAgent:       to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			},
			VMID: to.Ptr("a149cd25-409f-41af-8088-275f5486bc93"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachine) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachine)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAVmWithPremiumStorage.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAVmWithSshAuthentication.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a vm with ssh authentication."},
	})
	client, err = armcompute.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myVM",
		armcompute.VirtualMachine{
			Location: to.Ptr("westus"),
			Properties: &armcompute.VirtualMachineProperties{
				HardwareProfile: &armcompute.HardwareProfile{
					VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
				},
				NetworkProfile: &armcompute.NetworkProfile{
					NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
						{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
							Properties: &armcompute.NetworkInterfaceReferenceProperties{
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.OSProfile{
					AdminUsername: to.Ptr("{your-username}"),
					ComputerName:  to.Ptr("myVM"),
					LinuxConfiguration: &armcompute.LinuxConfiguration{
						DisablePasswordAuthentication: to.Ptr(true),
						SSH: &armcompute.SSHConfiguration{
							PublicKeys: []*armcompute.SSHPublicKey{
								{
									Path:    to.Ptr("/home/{your-username}/.ssh/authorized_keys"),
									KeyData: to.Ptr("ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCeClRAk2ipUs/l5voIsDC5q9RI+YSRd1Bvd/O+axgY4WiBzG+4FwJWZm/mLLe5DoOdHQwmU2FrKXZSW4w2sYE70KeWnrFViCOX5MTVvJgPE8ClugNl8RWth/tU849DvM9sT7vFgfVSHcAS2yDRyDlueii+8nF2ym8XWAPltFVCyLHRsyBp5YPqK8JFYIa1eybKsY3hEAxRCA+/7bq8et+Gj3coOsuRmrehav7rE6N12Pb80I6ofa6SM5XNYq4Xk0iYNx7R3kdz0Jj9XgZYWjAHjJmT0gTRoOnt6upOuxK7xI/ykWrllgpXrCPu3Ymz+c+ujaqcxDopnAl2lmf69/J1"),
								}},
						},
					},
				},
				StorageProfile: &armcompute.StorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("{image_offer}"),
						Publisher: to.Ptr("{image_publisher}"),
						SKU:       to.Ptr("{image_sku}"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.OSDisk{
						Name:         to.Ptr("myVMosdisk"),
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		&armcompute.VirtualMachinesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAVmWithSshAuthentication.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAVmWithSshAuthentication.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				LinuxConfiguration: &armcompute.LinuxConfiguration{
					DisablePasswordAuthentication: to.Ptr(true),
					SSH: &armcompute.SSHConfiguration{
						PublicKeys: []*armcompute.SSHPublicKey{
							{
								Path:    to.Ptr("/home/{your-username}/.ssh/authorized_keys"),
								KeyData: to.Ptr("ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCeClRAk2ipUs/l5voIsDC5q9RI+YSRd1Bvd/O+axgY4WiBzG+4FwJWZm/mLLe5DoOdHQwmU2FrKXZSW4w2sYE70KeWnrFViCOX5MTVvJgPE8ClugNl8RWth/tU849DvM9sT7vFgfVSHcAS2yDRyDlueii+8nF2ym8XWAPltFVCyLHRsyBp5YPqK8JFYIa1eybKsY3hEAxRCA+/7bq8et+Gj3coOsuRmrehav7rE6N12Pb80I6ofa6SM5XNYq4Xk0iYNx7R3kdz0Jj9XgZYWjAHjJmT0gTRoOnt6upOuxK7xI/ykWrllgpXrCPu3Ymz+c+ujaqcxDopnAl2lmf69/J1"),
							}},
					},
				},
				Secrets: []*armcompute.VaultSecretGroup{},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("UbuntuServer"),
					Publisher: to.Ptr("Canonical"),
					SKU:       to.Ptr("16.04-LTS"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesLinux),
				},
			},
			VMID: to.Ptr("e0de9b84-a506-4b95-9623-00a425d05c90"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachine) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachine)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAVmWithSshAuthentication.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateOrUpdateAVmWithCapacityReservation.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a VM with capacity reservation"},
	})
	client, err = armcompute.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myVM",
		armcompute.VirtualMachine{
			Location: to.Ptr("westus"),
			Plan: &armcompute.Plan{
				Name:      to.Ptr("windows2016"),
				Product:   to.Ptr("windows-data-science-vm"),
				Publisher: to.Ptr("microsoft-ads"),
			},
			Properties: &armcompute.VirtualMachineProperties{
				CapacityReservation: &armcompute.CapacityReservationProfile{
					CapacityReservationGroup: &armcompute.SubResource{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/CapacityReservationGroups/{crgName}"),
					},
				},
				HardwareProfile: &armcompute.HardwareProfile{
					VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardDS1V2),
				},
				NetworkProfile: &armcompute.NetworkProfile{
					NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
						{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
							Properties: &armcompute.NetworkInterfaceReferenceProperties{
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.OSProfile{
					AdminPassword: to.Ptr("{your-password}"),
					AdminUsername: to.Ptr("{your-username}"),
					ComputerName:  to.Ptr("myVM"),
				},
				StorageProfile: &armcompute.StorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("windows-data-science-vm"),
						Publisher: to.Ptr("microsoft-ads"),
						SKU:       to.Ptr("windows2016"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.OSDisk{
						Name:         to.Ptr("myVMosdisk"),
						Caching:      to.Ptr(armcompute.CachingTypesReadOnly),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		&armcompute.VirtualMachinesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateOrUpdateAVmWithCapacityReservation.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateOrUpdateAVmWithCapacityReservation.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Plan: &armcompute.Plan{
			Name:      to.Ptr("standard-data-science-vm"),
			Product:   to.Ptr("standard-data-science-vm"),
			Publisher: to.Ptr("microsoft-ads"),
		},
		Properties: &armcompute.VirtualMachineProperties{
			CapacityReservation: &armcompute.CapacityReservationProfile{
				CapacityReservationGroup: &armcompute.SubResource{
					ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/CapacityReservationGroups/{crgName}"),
				},
			},
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardDS1V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					ProvisionVMAgent:       to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("standard-data-science-vm"),
					Publisher: to.Ptr("microsoft-ads"),
					SKU:       to.Ptr("standard-data-science-vm"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadOnly),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			},
			VMID: to.Ptr("5c0d55a7-c407-4ed6-bf7d-ddb810267c85"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachine) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachine)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateOrUpdateAVmWithCapacityReservation.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestVirtualMachines_Update(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/UpdateVMDetachDataDiskUsingToBeDetachedProperty.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a VM by detaching data disk"},
	})
	client, err := armcompute.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginUpdate(ctx,
		"myResourceGroup",
		"myVM",
		armcompute.VirtualMachineUpdate{
			Properties: &armcompute.VirtualMachineProperties{
				HardwareProfile: &armcompute.HardwareProfile{
					VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD2V2),
				},
				NetworkProfile: &armcompute.NetworkProfile{
					NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
						{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
							Properties: &armcompute.NetworkInterfaceReferenceProperties{
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.OSProfile{
					AdminPassword: to.Ptr("{your-password}"),
					AdminUsername: to.Ptr("{your-username}"),
					ComputerName:  to.Ptr("myVM"),
				},
				StorageProfile: &armcompute.StorageProfile{
					DataDisks: []*armcompute.DataDisk{
						{
							CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
							DiskSizeGB:   to.Ptr[int32](1023),
							Lun:          to.Ptr[int32](0),
							ToBeDetached: to.Ptr(true),
						},
						{
							CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
							DiskSizeGB:   to.Ptr[int32](1023),
							Lun:          to.Ptr[int32](1),
							ToBeDetached: to.Ptr(false),
						}},
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.OSDisk{
						Name:         to.Ptr("myVMosdisk"),
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		&armcompute.VirtualMachinesClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/UpdateVMDetachDataDiskUsingToBeDetachedProperty.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/UpdateVMDetachDataDiskUsingToBeDetachedProperty.json: %v", err)
	}
	// Response check
	exampleRes := armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD2V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					ProvisionVMAgent:       to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{
					{
						Caching:      to.Ptr(armcompute.CachingTypesNone),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
						DiskSizeGB:   to.Ptr[int32](1023),
						Lun:          to.Ptr[int32](0),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
						ToBeDetached: to.Ptr(true),
					},
					{
						Caching:      to.Ptr(armcompute.CachingTypesNone),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
						DiskSizeGB:   to.Ptr[int32](1023),
						Lun:          to.Ptr[int32](1),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
						ToBeDetached: to.Ptr(false),
					}},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			},
			VMID: to.Ptr("3906fef9-a1e5-4b83-a8a8-540858b41df0"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachine) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachine)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/UpdateVMDetachDataDiskUsingToBeDetachedProperty.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/UpdateVMForceDetachDataDisk.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a VM by force-detaching data disk"},
	})
	client, err = armcompute.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginUpdate(ctx,
		"myResourceGroup",
		"myVM",
		armcompute.VirtualMachineUpdate{
			Properties: &armcompute.VirtualMachineProperties{
				HardwareProfile: &armcompute.HardwareProfile{
					VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD2V2),
				},
				NetworkProfile: &armcompute.NetworkProfile{
					NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
						{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}"),
							Properties: &armcompute.NetworkInterfaceReferenceProperties{
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.OSProfile{
					AdminPassword: to.Ptr("{your-password}"),
					AdminUsername: to.Ptr("{your-username}"),
					ComputerName:  to.Ptr("myVM"),
				},
				StorageProfile: &armcompute.StorageProfile{
					DataDisks: []*armcompute.DataDisk{
						{
							CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
							DetachOption: to.Ptr(armcompute.DiskDetachOptionTypesForceDetach),
							DiskSizeGB:   to.Ptr[int32](1023),
							Lun:          to.Ptr[int32](0),
							ToBeDetached: to.Ptr(true),
						},
						{
							CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
							DiskSizeGB:   to.Ptr[int32](1023),
							Lun:          to.Ptr[int32](1),
							ToBeDetached: to.Ptr(false),
						}},
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.OSDisk{
						Name:         to.Ptr("myVMosdisk"),
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		&armcompute.VirtualMachinesClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/UpdateVMForceDetachDataDisk.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/UpdateVMForceDetachDataDisk.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD2V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/nsgExistingNic"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("{your-username}"),
				ComputerName:  to.Ptr("myVM"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					ProvisionVMAgent:       to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{
					{
						Caching:      to.Ptr(armcompute.CachingTypesNone),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
						DetachOption: to.Ptr(armcompute.DiskDetachOptionTypesForceDetach),
						DiskSizeGB:   to.Ptr[int32](1023),
						Lun:          to.Ptr[int32](0),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
						ToBeDetached: to.Ptr(true),
					},
					{
						Caching:      to.Ptr(armcompute.CachingTypesNone),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
						DiskSizeGB:   to.Ptr[int32](1023),
						Lun:          to.Ptr[int32](1),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
						ToBeDetached: to.Ptr(false),
					}},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myVMosdisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			},
			VMID: to.Ptr("3906fef9-a1e5-4b83-a8a8-540858b41df0"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachine) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachine)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/UpdateVMForceDetachDataDisk.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestVirtualMachines_Delete(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/ForceDeleteVirtualMachine.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Force delete a VM"},
	})
	client, err := armcompute.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"myVM",
		&armcompute.VirtualMachinesClientBeginDeleteOptions{ForceDeletion: to.Ptr(true),
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/ForceDeleteVirtualMachine.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/ForceDeleteVirtualMachine.json: %v", err)
	}
}

func TestVirtualMachines_Get(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/GetVirtualMachine.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a Virtual Machine."},
	})
	client, err := armcompute.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myVM",
		&armcompute.VirtualMachinesClientGetOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/GetVirtualMachine.json: %v", err)
	}
	// Response check
	exampleRes := armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("West US"),
		Tags: map[string]*string{
			"myTag1": to.Ptr("tagValue1"),
		},
		Properties: &armcompute.VirtualMachineProperties{
			ApplicationProfile: &armcompute.ApplicationProfile{
				GalleryApplications: []*armcompute.VMGalleryApplication{
					{
						ConfigurationReference: to.Ptr("https://mystorageaccount.blob.core.windows.net/configurations/settings.config"),
						Order:                  to.Ptr[int32](1),
						PackageReferenceID:     to.Ptr("/subscriptions/32c17a9e-aa7b-4ba5-a45b-e324116b6fdb/resourceGroups/myresourceGroupName2/providers/Microsoft.Compute/galleries/myGallery1/applications/MyApplication1/versions/1.0"),
						Tags:                   to.Ptr("myTag1"),
					},
					{
						PackageReferenceID: to.Ptr("/subscriptions/32c17a9e-aa7b-4ba5-a45b-e324116b6fdg/resourceGroups/myresourceGroupName3/providers/Microsoft.Compute/galleries/myGallery2/applications/MyApplication2/versions/1.1"),
					}},
			},
			AvailabilitySet: &armcompute.SubResource{
				ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/availabilitySets/my-AvailabilitySet"),
			},
			DiagnosticsProfile: &armcompute.DiagnosticsProfile{
				BootDiagnostics: &armcompute.BootDiagnostics{
					Enabled:    to.Ptr(true),
					StorageURI: to.Ptr("http://{myStorageAccount}.blob.core.windows.net"),
				},
			},
			ExtensionsTimeBudget: to.Ptr("PT50M"),
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardDS3V2),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{myNIC}"),
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("admin"),
				ComputerName:  to.Ptr("myVM"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(false),
					ProvisionVMAgent:       to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			ProximityPlacementGroup: &armcompute.SubResource{
				ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/proximityPlacementGroups/my-ppg01"),
			},
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{
					{
						Name:         to.Ptr("myDataDisk0"),
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
						DiskSizeGB:   to.Ptr[int32](30),
						Lun:          to.Ptr[int32](0),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							ID:                 to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myDataDisk0"),
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
						},
					},
					{
						Name:         to.Ptr("myDataDisk1"),
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesAttach),
						DiskSizeGB:   to.Ptr[int32](100),
						Lun:          to.Ptr[int32](1),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							ID:                 to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myDataDisk1"),
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
						},
					}},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myOsDisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					DiskSizeGB:   to.Ptr[int32](30),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						ID:                 to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myOsDisk"),
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			},
			TimeCreated: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-27T01:02:38.3138469+00:00"); return t }()),
			UserData:    to.Ptr("RXhhbXBsZSBVc2VyRGF0YQ=="),
			VMID:        to.Ptr("0f47b100-583c-48e3-a4c0-aefc2c9bbcc1"),
		},
		Resources: []*armcompute.VirtualMachineExtension{
			{
				Name:     to.Ptr("CustomScriptExtension-DSC"),
				Type:     to.Ptr("Microsoft.Compute/virtualMachines/extensions"),
				ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM/extensions/CustomScriptExtension-DSC"),
				Location: to.Ptr("west us"),
				Tags: map[string]*string{
					"displayName": to.Ptr("CustomScriptExtension-DSC"),
				},
				Properties: &armcompute.VirtualMachineExtensionProperties{
					Type:                    to.Ptr("CustomScriptExtension"),
					AutoUpgradeMinorVersion: to.Ptr(true),
					ProvisioningState:       to.Ptr("Succeeded"),
					Publisher:               to.Ptr("Microsoft.Compute"),
					Settings:                map[string]interface{}{},
					TypeHandlerVersion:      to.Ptr("1.9"),
				},
			}},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachine) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachine)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/GetVirtualMachine.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/GetVirtualMachineAutoPlacedOnDedicatedHostGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a virtual machine placed on a dedicated host group through automatic placement"},
	})
	client, err = armcompute.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err = client.Get(ctx,
		"myResourceGroup",
		"myVM",
		&armcompute.VirtualMachinesClientGetOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/GetVirtualMachineAutoPlacedOnDedicatedHostGroup.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("West US"),
		Tags: map[string]*string{
			"myTag1": to.Ptr("tagValue1"),
		},
		Properties: &armcompute.VirtualMachineProperties{
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardD2SV3),
			},
			HostGroup: &armcompute.SubResource{
				ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/hostGroups/myHostGroup"),
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{myNIC}"),
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("admin"),
				ComputerName:  to.Ptr("myVM"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(false),
					ProvisionVMAgent:       to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myOsDisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					DiskSizeGB:   to.Ptr[int32](30),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						ID:                 to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myOsDisk"),
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			},
			VMID: to.Ptr("0f47b100-583c-48e3-a4c0-aefc2c9bbcc1"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachine) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachine)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/GetVirtualMachineAutoPlacedOnDedicatedHostGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/GetVirtualMachineWithVMSizeProperties.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a virtual machine with VM Size Properties"},
	})
	client, err = armcompute.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err = client.Get(ctx,
		"myResourceGroup",
		"myVM",
		&armcompute.VirtualMachinesClientGetOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/GetVirtualMachineWithVMSizeProperties.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.VirtualMachine{
		Name:     to.Ptr("myVM"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
		Location: to.Ptr("West US"),
		Tags: map[string]*string{
			"myTag1": to.Ptr("tagValue1"),
		},
		Properties: &armcompute.VirtualMachineProperties{
			ApplicationProfile: &armcompute.ApplicationProfile{
				GalleryApplications: []*armcompute.VMGalleryApplication{
					{
						ConfigurationReference: to.Ptr("https://mystorageaccount.blob.core.windows.net/configurations/settings.config"),
						Order:                  to.Ptr[int32](1),
						PackageReferenceID:     to.Ptr("/subscriptions/32c17a9e-aa7b-4ba5-a45b-e324116b6fdb/resourceGroups/myresourceGroupName2/providers/Microsoft.Compute/galleries/myGallery1/applications/MyApplication1/versions/1.0"),
						Tags:                   to.Ptr("myTag1"),
					},
					{
						PackageReferenceID: to.Ptr("/subscriptions/32c17a9e-aa7b-4ba5-a45b-e324116b6fdg/resourceGroups/myresourceGroupName3/providers/Microsoft.Compute/galleries/myGallery2/applications/MyApplication2/versions/1.1"),
					}},
			},
			AvailabilitySet: &armcompute.SubResource{
				ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/availabilitySets/my-AvailabilitySet"),
			},
			DiagnosticsProfile: &armcompute.DiagnosticsProfile{
				BootDiagnostics: &armcompute.BootDiagnostics{
					Enabled:    to.Ptr(true),
					StorageURI: to.Ptr("http://{myStorageAccount}.blob.core.windows.net"),
				},
			},
			ExtensionsTimeBudget: to.Ptr("PT50M"),
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardDS3V2),
				VMSizeProperties: &armcompute.VMSizeProperties{
					VCPUsAvailable: to.Ptr[int32](1),
					VCPUsPerCore:   to.Ptr[int32](1),
				},
			},
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{myNIC}"),
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername: to.Ptr("admin"),
				ComputerName:  to.Ptr("myVM"),
				Secrets:       []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(false),
					ProvisionVMAgent:       to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{
					{
						Name:         to.Ptr("myDataDisk0"),
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
						DiskSizeGB:   to.Ptr[int32](30),
						Lun:          to.Ptr[int32](0),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							ID:                 to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myDataDisk0"),
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
						},
					},
					{
						Name:         to.Ptr("myDataDisk1"),
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesAttach),
						DiskSizeGB:   to.Ptr[int32](100),
						Lun:          to.Ptr[int32](1),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							ID:                 to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myDataDisk1"),
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
						},
					}},
				ImageReference: &armcompute.ImageReference{
					Offer:     to.Ptr("WindowsServer"),
					Publisher: to.Ptr("MicrosoftWindowsServer"),
					SKU:       to.Ptr("2016-Datacenter"),
					Version:   to.Ptr("latest"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("myOsDisk"),
					Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					DiskSizeGB:   to.Ptr[int32](30),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						ID:                 to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myOsDisk"),
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			},
			UserData: to.Ptr("RXhhbXBsZSBVc2VyRGF0YQ=="),
			VMID:     to.Ptr("0f47b100-583c-48e3-a4c0-aefc2c9bbcc1"),
		},
		Resources: []*armcompute.VirtualMachineExtension{
			{
				Name:     to.Ptr("CustomScriptExtension-DSC"),
				Type:     to.Ptr("Microsoft.Compute/virtualMachines/extensions"),
				ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM/extensions/CustomScriptExtension-DSC"),
				Location: to.Ptr("west us"),
				Tags: map[string]*string{
					"displayName": to.Ptr("CustomScriptExtension-DSC"),
				},
				Properties: &armcompute.VirtualMachineExtensionProperties{
					Type:                    to.Ptr("CustomScriptExtension"),
					AutoUpgradeMinorVersion: to.Ptr(true),
					ProvisioningState:       to.Ptr("Succeeded"),
					Publisher:               to.Ptr("Microsoft.Compute"),
					Settings:                map[string]interface{}{},
					TypeHandlerVersion:      to.Ptr("1.9"),
				},
			}},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachine) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachine)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/GetVirtualMachineWithVMSizeProperties.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestVirtualMachines_InstanceView(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/GetVirtualMachineInstanceView.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Virtual Machine Instance View."},
	})
	client, err := armcompute.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := client.InstanceView(ctx,
		"myResourceGroup",
		"myVM",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/GetVirtualMachineInstanceView.json: %v", err)
	}
	// Response check
	exampleRes := armcompute.VirtualMachineInstanceView{
		BootDiagnostics: &armcompute.BootDiagnosticsInstanceView{
			ConsoleScreenshotBlobURI: to.Ptr("https://{myStorageAccount}.blob.core.windows.net/bootdiagnostics-myOsDisk/myOsDisk.screenshot.bmp"),
			SerialConsoleLogBlobURI:  to.Ptr("https://{myStorageAccount}.blob.core.windows.net/bootdiagnostics-myOsDisk/myOsDisk.serialconsole.log"),
		},
		ComputerName: to.Ptr("myVM"),
		Disks: []*armcompute.DiskInstanceView{
			{
				Name: to.Ptr("myOsDisk"),
				Statuses: []*armcompute.InstanceViewStatus{
					{
						Code:          to.Ptr("ProvisioningState/succeeded"),
						DisplayStatus: to.Ptr("Provisioning succeeded"),
						Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
						Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-10-14T21:29:47.477089+00:00"); return t }()),
					}},
			},
			{
				Name: to.Ptr("myDataDisk0"),
				Statuses: []*armcompute.InstanceViewStatus{
					{
						Code:          to.Ptr("ProvisioningState/succeeded"),
						DisplayStatus: to.Ptr("Provisioning succeeded"),
						Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
						Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-10-14T21:29:47.461517+00:00"); return t }()),
					}},
			}},
		HyperVGeneration: to.Ptr(armcompute.HyperVGenerationTypeV1),
		OSName:           to.Ptr("Windows Server 2016 Datacenter"),
		OSVersion:        to.Ptr("Microsoft Windows NT 10.0.14393.0"),
		PatchStatus: &armcompute.VirtualMachinePatchStatus{
			AvailablePatchSummary: &armcompute.AvailablePatchSummary{
				AssessmentActivityID:          to.Ptr("68f8b292-dfc2-4646-9781-33cc88631968"),
				CriticalAndSecurityPatchCount: to.Ptr[int32](1),
				LastModifiedTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-24T21:02:04.2556154Z"); return t }()),
				OtherPatchCount:               to.Ptr[int32](2),
				RebootPending:                 to.Ptr(true),
				StartTime:                     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-24T21:02:04.2556154Z"); return t }()),
				Status:                        to.Ptr(armcompute.PatchOperationStatusSucceeded),
			},
			ConfigurationStatuses: []*armcompute.InstanceViewStatus{
				{
					Code:          to.Ptr("PatchModeConfigurationState/Ready"),
					DisplayStatus: to.Ptr("Status_PatchModeConfigurationState_Ready"),
					Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
					Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-24T21:02:04.2556154Z"); return t }()),
				},
				{
					Code:          to.Ptr("AssessmentModeConfigurationState/Pending"),
					DisplayStatus: to.Ptr("Status_AssessmentModeConfigurationState_Pending"),
					Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
					Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-24T21:02:04.2556154Z"); return t }()),
				}},
			LastPatchInstallationSummary: &armcompute.LastPatchInstallationSummary{
				ExcludedPatchCount:        to.Ptr[int32](1),
				FailedPatchCount:          to.Ptr[int32](1),
				InstallationActivityID:    to.Ptr("68f8b292-dfc2-4646-9981-33cc88631968"),
				InstalledPatchCount:       to.Ptr[int32](1),
				LastModifiedTime:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-24T21:02:04.2556154Z"); return t }()),
				MaintenanceWindowExceeded: to.Ptr(false),
				NotSelectedPatchCount:     to.Ptr[int32](1),
				PendingPatchCount:         to.Ptr[int32](1),
				StartTime:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-24T21:02:04.2556154Z"); return t }()),
				Status:                    to.Ptr(armcompute.PatchOperationStatusSucceeded),
			},
		},
		PlatformFaultDomain:  to.Ptr[int32](1),
		PlatformUpdateDomain: to.Ptr[int32](1),
		Statuses: []*armcompute.InstanceViewStatus{
			{
				Code:          to.Ptr("ProvisioningState/succeeded"),
				DisplayStatus: to.Ptr("Provisioning succeeded"),
				Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
				Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-10-14T21:30:12.8051917+00:00"); return t }()),
			},
			{
				Code:          to.Ptr("PowerState/running"),
				DisplayStatus: to.Ptr("VM running"),
				Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
			}},
		VMAgent: &armcompute.VirtualMachineAgentInstanceView{
			ExtensionHandlers: []*armcompute.VirtualMachineExtensionHandlerInstanceView{
				{
					Type: to.Ptr("Microsoft.Azure.Security.IaaSAntimalware"),
					Status: &armcompute.InstanceViewStatus{
						Code:          to.Ptr("ProvisioningState/succeeded"),
						DisplayStatus: to.Ptr("Ready"),
						Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
					},
					TypeHandlerVersion: to.Ptr("1.5.5.9"),
				}},
			Statuses: []*armcompute.InstanceViewStatus{
				{
					Code:          to.Ptr("ProvisioningState/succeeded"),
					DisplayStatus: to.Ptr("Ready"),
					Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
					Message:       to.Ptr("GuestAgent is running and accepting new configurations."),
					Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-10-14T23:11:22+00:00"); return t }()),
				}},
			VMAgentVersion: to.Ptr("2.7.41491.949"),
		},
		Extensions: []*armcompute.VirtualMachineExtensionInstanceView{
			{
				Name: to.Ptr("IaaSAntiMalware-ext0"),
				Type: to.Ptr("Microsoft.Azure.Security.IaaSAntimalware"),
				Statuses: []*armcompute.InstanceViewStatus{
					{
						Code:          to.Ptr("ProvisioningState/succeeded"),
						DisplayStatus: to.Ptr("Provisioning succeeded"),
						Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
						Message:       to.Ptr("Microsoft Antimalware enabled"),
					}},
				TypeHandlerVersion: to.Ptr("1.5.5.9"),
			}},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineInstanceView) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineInstanceView)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/GetVirtualMachineInstanceView.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/GetVirtualMachineInstanceViewAutoPlacedOnDedicatedHostGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get instance view of a virtual machine placed on a dedicated host group through automatic placement."},
	})
	client, err = armcompute.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err = client.InstanceView(ctx,
		"myResourceGroup",
		"myVM",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/GetVirtualMachineInstanceViewAutoPlacedOnDedicatedHostGroup.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.VirtualMachineInstanceView{
		AssignedHost: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/hostGroups/myHostGroup/hosts/myHost"),
		ComputerName: to.Ptr("myVM"),
		Disks: []*armcompute.DiskInstanceView{
			{
				Name: to.Ptr("myOsDisk"),
				Statuses: []*armcompute.InstanceViewStatus{
					{
						Code:          to.Ptr("ProvisioningState/succeeded"),
						DisplayStatus: to.Ptr("Provisioning succeeded"),
						Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
						Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-01T21:29:47.477089+00:00"); return t }()),
					}},
			}},
		HyperVGeneration: to.Ptr(armcompute.HyperVGenerationTypeV1),
		OSName:           to.Ptr("Windows Server 2016 Datacenter"),
		OSVersion:        to.Ptr("Microsoft Windows NT 10.0.14393.0"),
		Statuses: []*armcompute.InstanceViewStatus{
			{
				Code:          to.Ptr("ProvisioningState/succeeded"),
				DisplayStatus: to.Ptr("Provisioning succeeded"),
				Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
				Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-01T21:30:12.8051917+00:00"); return t }()),
			},
			{
				Code:          to.Ptr("PowerState/running"),
				DisplayStatus: to.Ptr("VM running"),
				Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
			}},
		VMAgent: &armcompute.VirtualMachineAgentInstanceView{
			Statuses: []*armcompute.InstanceViewStatus{
				{
					Code:          to.Ptr("ProvisioningState/succeeded"),
					DisplayStatus: to.Ptr("Ready"),
					Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
					Message:       to.Ptr("GuestAgent is running and accepting new configurations."),
					Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-01T23:11:22+00:00"); return t }()),
				}},
			VMAgentVersion: to.Ptr("2.7.41491.949"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineInstanceView) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineInstanceView)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/GetVirtualMachineInstanceViewAutoPlacedOnDedicatedHostGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestVirtualMachines_ConvertToManagedDisks(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachines_ConvertToManagedDisks_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachines_ConvertToManagedDisks_MaximumSet_Gen"},
	})
	client, err := armcompute.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginConvertToManagedDisks(ctx,
		"rgcompute",
		"aaaaaaa",
		&armcompute.VirtualMachinesClientBeginConvertToManagedDisksOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachines_ConvertToManagedDisks_MaximumSet_Gen.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachines_ConvertToManagedDisks_MaximumSet_Gen.json: %v", err)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachines_ConvertToManagedDisks_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachines_ConvertToManagedDisks_MinimumSet_Gen"},
	})
	client, err = armcompute.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginConvertToManagedDisks(ctx,
		"rgcompute",
		"aaaaaaaaaaa",
		&armcompute.VirtualMachinesClientBeginConvertToManagedDisksOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachines_ConvertToManagedDisks_MinimumSet_Gen.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachines_ConvertToManagedDisks_MinimumSet_Gen.json: %v", err)
	}
}

func TestVirtualMachines_Deallocate(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachines_Deallocate_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachines_Deallocate_MaximumSet_Gen"},
	})
	client, err := armcompute.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginDeallocate(ctx,
		"rgcompute",
		"aaaaaaaaaa",
		&armcompute.VirtualMachinesClientBeginDeallocateOptions{Hibernate: to.Ptr(true),
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachines_Deallocate_MaximumSet_Gen.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachines_Deallocate_MaximumSet_Gen.json: %v", err)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachines_Deallocate_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachines_Deallocate_MinimumSet_Gen"},
	})
	client, err = armcompute.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginDeallocate(ctx,
		"rgcompute",
		"aaaaaaaaaaaaaaaa",
		&armcompute.VirtualMachinesClientBeginDeallocateOptions{Hibernate: nil,
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachines_Deallocate_MinimumSet_Gen.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachines_Deallocate_MinimumSet_Gen.json: %v", err)
	}
}

func TestVirtualMachines_Generalize(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/GeneralizeVirtualMachine.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Generalize a Virtual Machine."},
	})
	client, err := armcompute.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	_, err = client.Generalize(ctx,
		"myResourceGroup",
		"myVMName",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/GeneralizeVirtualMachine.json: %v", err)
	}
}

func TestVirtualMachines_List(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachines_List_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachines_List_MaximumSet_Gen"},
	})
	client, err := armcompute.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := client.NewListPager("rgcompute",
		&armcompute.VirtualMachinesClientListOptions{Filter: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa")})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachines_List_MaximumSet_Gen.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcompute.VirtualMachineListResult{
			Value: []*armcompute.VirtualMachine{
				{
					Name:     to.Ptr("{virtualMachineName}"),
					Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
					ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{virtualMachineName}"),
					Location: to.Ptr("eastus"),
					Tags:     map[string]*string{},
					ExtendedLocation: &armcompute.ExtendedLocation{
						Name: to.Ptr("aaaa"),
						Type: to.Ptr(armcompute.ExtendedLocationTypesEdgeZone),
					},
					Identity: &armcompute.VirtualMachineIdentity{
						Type:        to.Ptr(armcompute.ResourceIdentityTypeSystemAssigned),
						PrincipalID: to.Ptr("aaaaaaaaaaaaaaaa"),
						TenantID:    to.Ptr("aaaaa"),
						UserAssignedIdentities: map[string]*armcompute.UserAssignedIdentitiesValue{
							"key5688": &armcompute.UserAssignedIdentitiesValue{
								ClientID:    to.Ptr("aaaaaaaaaaa"),
								PrincipalID: to.Ptr("aaaaaaaaaaaaaaa"),
							},
						},
					},
					Plan: &armcompute.Plan{
						Name:          to.Ptr("aaaaaaaaaaaaaaaaaa"),
						Product:       to.Ptr("aaaaaaaaaaaaaaaaaaaaaa"),
						PromotionCode: to.Ptr("aaaaaaaaaaaaaa"),
						Publisher:     to.Ptr("aaaaaaaaaaaaaaaaa"),
					},
					Properties: &armcompute.VirtualMachineProperties{
						AdditionalCapabilities: &armcompute.AdditionalCapabilities{
							HibernationEnabled: to.Ptr(true),
							UltraSSDEnabled:    to.Ptr(true),
						},
						ApplicationProfile: &armcompute.ApplicationProfile{
							GalleryApplications: []*armcompute.VMGalleryApplication{
								{
									ConfigurationReference: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
									Order:                  to.Ptr[int32](4),
									PackageReferenceID:     to.Ptr("aaaaaaaaaaaaaaaaaaaaaa"),
									Tags:                   to.Ptr("aaaaa"),
								}},
						},
						AvailabilitySet: &armcompute.SubResource{
							ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
						},
						BillingProfile: &armcompute.BillingProfile{
							MaxPrice: to.Ptr[float64](26),
						},
						CapacityReservation: &armcompute.CapacityReservationProfile{
							CapacityReservationGroup: &armcompute.SubResource{
								ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
							},
						},
						DiagnosticsProfile: &armcompute.DiagnosticsProfile{
							BootDiagnostics: &armcompute.BootDiagnostics{
								Enabled:    to.Ptr(true),
								StorageURI: to.Ptr("aaaaaaaaaaaaaaaaaaaaa"),
							},
						},
						EvictionPolicy:       to.Ptr(armcompute.VirtualMachineEvictionPolicyTypesDeallocate),
						ExtensionsTimeBudget: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
						HardwareProfile: &armcompute.HardwareProfile{
							VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardA0),
							VMSizeProperties: &armcompute.VMSizeProperties{
								VCPUsAvailable: to.Ptr[int32](7),
								VCPUsPerCore:   to.Ptr[int32](14),
							},
						},
						Host: &armcompute.SubResource{
							ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
						},
						HostGroup: &armcompute.SubResource{
							ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
						},
						InstanceView: &armcompute.VirtualMachineInstanceView{
							AssignedHost: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
							BootDiagnostics: &armcompute.BootDiagnosticsInstanceView{
								ConsoleScreenshotBlobURI: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
								SerialConsoleLogBlobURI:  to.Ptr("aaaaaaaaaaaaaaaaaaa"),
								Status: &armcompute.InstanceViewStatus{
									Code:          to.Ptr("aaa"),
									DisplayStatus: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaa"),
									Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
									Message:       to.Ptr("aaaaaaaaaaaaaaaaaaa"),
									Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-01-14T16:43:41.657Z"); return t }()),
								},
							},
							ComputerName: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
							Disks: []*armcompute.DiskInstanceView{
								{
									Name: to.Ptr("a"),
									EncryptionSettings: []*armcompute.DiskEncryptionSettings{
										{
											DiskEncryptionKey: &armcompute.KeyVaultSecretReference{
												SecretURL: to.Ptr("aaaaaaaaa"),
												SourceVault: &armcompute.SubResource{
													ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
												},
											},
											Enabled: to.Ptr(true),
											KeyEncryptionKey: &armcompute.KeyVaultKeyReference{
												KeyURL: to.Ptr("aaaaaaaaaaaaa"),
												SourceVault: &armcompute.SubResource{
													ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
												},
											},
										}},
									Statuses: []*armcompute.InstanceViewStatus{
										{
											Code:          to.Ptr("aaa"),
											DisplayStatus: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaa"),
											Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
											Message:       to.Ptr("aaaaaaaaaaaaaaaaaaa"),
											Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-01-14T16:43:41.657Z"); return t }()),
										}},
								}},
							HyperVGeneration: to.Ptr(armcompute.HyperVGenerationTypeV1),
							MaintenanceRedeployStatus: &armcompute.MaintenanceRedeployStatus{
								IsCustomerInitiatedMaintenanceAllowed: to.Ptr(true),
								LastOperationMessage:                  to.Ptr("aa"),
								LastOperationResultCode:               to.Ptr(armcompute.MaintenanceOperationResultCodeTypesNone),
								MaintenanceWindowEndTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-01-14T16:43:41.682Z"); return t }()),
								MaintenanceWindowStartTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-01-14T16:43:41.682Z"); return t }()),
								PreMaintenanceWindowEndTime:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-01-14T16:43:41.682Z"); return t }()),
								PreMaintenanceWindowStartTime:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-01-14T16:43:41.682Z"); return t }()),
							},
							OSName:    to.Ptr("aaaaaaaaaaa"),
							OSVersion: to.Ptr("aaaaaaaaaaaaaa"),
							PatchStatus: &armcompute.VirtualMachinePatchStatus{
								AvailablePatchSummary: &armcompute.AvailablePatchSummary{
									AssessmentActivityID:          to.Ptr("aaaaaaaaaaaaaaaaaaa"),
									CriticalAndSecurityPatchCount: to.Ptr[int32](22),
									Error: &armcompute.APIError{
										Code: to.Ptr("aaaaaa"),
										Innererror: &armcompute.InnerError{
											Errordetail:   to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
											Exceptiontype: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
										},
										Message: to.Ptr("aaa"),
										Target:  to.Ptr("aaaaaaaaa"),
										Details: []*armcompute.APIErrorBase{
											{
												Code:    to.Ptr("aaaaaaaaaaaaaaaaaaaaa"),
												Message: to.Ptr("aaaaaaaaaaaaa"),
												Target:  to.Ptr("aaaaaa"),
											}},
									},
									LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-01-14T16:43:41.683Z"); return t }()),
									OtherPatchCount:  to.Ptr[int32](25),
									RebootPending:    to.Ptr(true),
									StartTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-01-14T16:43:41.682Z"); return t }()),
									Status:           to.Ptr(armcompute.PatchOperationStatusUnknown),
								},
								ConfigurationStatuses: []*armcompute.InstanceViewStatus{
									{
										Code:          to.Ptr("aaa"),
										DisplayStatus: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaa"),
										Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
										Message:       to.Ptr("aaaaaaaaaaaaaaaaaaa"),
										Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-01-14T16:43:41.657Z"); return t }()),
									}},
								LastPatchInstallationSummary: &armcompute.LastPatchInstallationSummary{
									Error: &armcompute.APIError{
										Code: to.Ptr("aaaaaa"),
										Innererror: &armcompute.InnerError{
											Errordetail:   to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
											Exceptiontype: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
										},
										Message: to.Ptr("aaa"),
										Target:  to.Ptr("aaaaaaaaa"),
										Details: []*armcompute.APIErrorBase{
											{
												Code:    to.Ptr("aaaaaaaaaaaaaaaaaaaaa"),
												Message: to.Ptr("aaaaaaaaaaaaa"),
												Target:  to.Ptr("aaaaaa"),
											}},
									},
									ExcludedPatchCount:        to.Ptr[int32](1),
									FailedPatchCount:          to.Ptr[int32](30),
									InstallationActivityID:    to.Ptr("aaaaaa"),
									InstalledPatchCount:       to.Ptr[int32](28),
									LastModifiedTime:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-01-14T16:43:41.683Z"); return t }()),
									MaintenanceWindowExceeded: to.Ptr(true),
									NotSelectedPatchCount:     to.Ptr[int32](20),
									PendingPatchCount:         to.Ptr[int32](2),
									StartTime:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-01-14T16:43:41.683Z"); return t }()),
									Status:                    to.Ptr(armcompute.PatchOperationStatusUnknown),
								},
							},
							PlatformFaultDomain:  to.Ptr[int32](29),
							PlatformUpdateDomain: to.Ptr[int32](1),
							RdpThumbPrint:        to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
							Statuses: []*armcompute.InstanceViewStatus{
								{
									Code:          to.Ptr("aaa"),
									DisplayStatus: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaa"),
									Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
									Message:       to.Ptr("aaaaaaaaaaaaaaaaaaa"),
									Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-01-14T16:43:41.657Z"); return t }()),
								}},
							VMAgent: &armcompute.VirtualMachineAgentInstanceView{
								ExtensionHandlers: []*armcompute.VirtualMachineExtensionHandlerInstanceView{
									{
										Type: to.Ptr("aaaaa"),
										Status: &armcompute.InstanceViewStatus{
											Code:          to.Ptr("aaa"),
											DisplayStatus: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaa"),
											Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
											Message:       to.Ptr("aaaaaaaaaaaaaaaaaaa"),
											Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-01-14T16:43:41.657Z"); return t }()),
										},
										TypeHandlerVersion: to.Ptr("aaaaaaaaaaaaaaaaaaa"),
									}},
								Statuses: []*armcompute.InstanceViewStatus{
									{
										Code:          to.Ptr("aaa"),
										DisplayStatus: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaa"),
										Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
										Message:       to.Ptr("aaaaaaaaaaaaaaaaaaa"),
										Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-01-14T16:43:41.657Z"); return t }()),
									}},
								VMAgentVersion: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
							},
							VMHealth: &armcompute.VirtualMachineHealthStatus{
								Status: &armcompute.InstanceViewStatus{
									Code:          to.Ptr("aaa"),
									DisplayStatus: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaa"),
									Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
									Message:       to.Ptr("aaaaaaaaaaaaaaaaaaa"),
									Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-01-14T16:43:41.657Z"); return t }()),
								},
							},
							Extensions: []*armcompute.VirtualMachineExtensionInstanceView{
								{
									Name: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaa"),
									Type: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaa"),
									Statuses: []*armcompute.InstanceViewStatus{
										{
											Code:          to.Ptr("aaa"),
											DisplayStatus: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaa"),
											Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
											Message:       to.Ptr("aaaaaaaaaaaaaaaaaaa"),
											Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-01-14T16:43:41.657Z"); return t }()),
										}},
									Substatuses: []*armcompute.InstanceViewStatus{
										{
											Code:          to.Ptr("aaa"),
											DisplayStatus: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaa"),
											Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
											Message:       to.Ptr("aaaaaaaaaaaaaaaaaaa"),
											Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-01-14T16:43:41.657Z"); return t }()),
										}},
									TypeHandlerVersion: to.Ptr("aaaaaa"),
								}},
						},
						LicenseType: to.Ptr("aaaaaaaaaaaaaaa"),
						NetworkProfile: &armcompute.NetworkProfile{
							NetworkAPIVersion: to.Ptr(armcompute.NetworkAPIVersionTwoThousandTwenty1101),
							NetworkInterfaceConfigurations: []*armcompute.VirtualMachineNetworkInterfaceConfiguration{
								{
									Name: to.Ptr("aaaaaaaa"),
									Properties: &armcompute.VirtualMachineNetworkInterfaceConfigurationProperties{
										DeleteOption: to.Ptr(armcompute.DeleteOptionsDelete),
										DNSSettings: &armcompute.VirtualMachineNetworkInterfaceDNSSettingsConfiguration{
											DNSServers: []*string{
												to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaa")},
										},
										DscpConfiguration: &armcompute.SubResource{
											ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
										},
										EnableAcceleratedNetworking: to.Ptr(true),
										EnableFpga:                  to.Ptr(true),
										EnableIPForwarding:          to.Ptr(true),
										IPConfigurations: []*armcompute.VirtualMachineNetworkInterfaceIPConfiguration{
											{
												Name: to.Ptr("aaaaaaaa"),
												Properties: &armcompute.VirtualMachineNetworkInterfaceIPConfigurationProperties{
													ApplicationGatewayBackendAddressPools: []*armcompute.SubResource{
														{
															ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
														}},
													ApplicationSecurityGroups: []*armcompute.SubResource{
														{
															ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
														}},
													LoadBalancerBackendAddressPools: []*armcompute.SubResource{
														{
															ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
														}},
													Primary:                 to.Ptr(true),
													PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionsIPv4),
													PublicIPAddressConfiguration: &armcompute.VirtualMachinePublicIPAddressConfiguration{
														Name: to.Ptr("aaaaaaaaaaaaaaaaaa"),
														Properties: &armcompute.VirtualMachinePublicIPAddressConfigurationProperties{
															DeleteOption: to.Ptr(armcompute.DeleteOptionsDelete),
															DNSSettings: &armcompute.VirtualMachinePublicIPAddressDNSSettingsConfiguration{
																DomainNameLabel: to.Ptr("aaaaa"),
															},
															IdleTimeoutInMinutes: to.Ptr[int32](23),
															IPTags: []*armcompute.VirtualMachineIPTag{
																{
																	IPTagType: to.Ptr("aaaaa"),
																	Tag:       to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaa"),
																}},
															PublicIPAddressVersion:   to.Ptr(armcompute.IPVersionsIPv4),
															PublicIPAllocationMethod: to.Ptr(armcompute.PublicIPAllocationMethodDynamic),
															PublicIPPrefix: &armcompute.SubResource{
																ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
															},
														},
														SKU: &armcompute.PublicIPAddressSKU{
															Name: to.Ptr(armcompute.PublicIPAddressSKUNameBasic),
															Tier: to.Ptr(armcompute.PublicIPAddressSKUTierRegional),
														},
													},
													Subnet: &armcompute.SubResource{
														ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
													},
												},
											}},
										NetworkSecurityGroup: &armcompute.SubResource{
											ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
										},
										Primary: to.Ptr(true),
									},
								}},
							NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
								{
									ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkInterfaces/{networkInterfaceName}"),
									Properties: &armcompute.NetworkInterfaceReferenceProperties{
										DeleteOption: to.Ptr(armcompute.DeleteOptionsDelete),
										Primary:      to.Ptr(true),
									},
								}},
						},
						OSProfile: &armcompute.OSProfile{
							AdminPassword:            to.Ptr("{aaaaaaaaaaaaa}"),
							AdminUsername:            to.Ptr("Foo12"),
							AllowExtensionOperations: to.Ptr(true),
							ComputerName:             to.Ptr("Test"),
							CustomData:               to.Ptr("aaaa"),
							LinuxConfiguration: &armcompute.LinuxConfiguration{
								DisablePasswordAuthentication: to.Ptr(true),
								PatchSettings: &armcompute.LinuxPatchSettings{
									AssessmentMode: to.Ptr(armcompute.LinuxPatchAssessmentModeImageDefault),
									PatchMode:      to.Ptr(armcompute.LinuxVMGuestPatchModeImageDefault),
								},
								ProvisionVMAgent: to.Ptr(true),
								SSH: &armcompute.SSHConfiguration{
									PublicKeys: []*armcompute.SSHPublicKey{
										{
											Path:    to.Ptr("aaaaaaaaaaaaaaaaaaaaaa"),
											KeyData: to.Ptr("aaa"),
										}},
								},
							},
							RequireGuestProvisionSignal: to.Ptr(true),
							Secrets:                     []*armcompute.VaultSecretGroup{},
							WindowsConfiguration: &armcompute.WindowsConfiguration{
								AdditionalUnattendContent: []*armcompute.AdditionalUnattendContent{
									{
										ComponentName: to.Ptr("Microsoft-Windows-Shell-Setup"),
										Content:       to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaa"),
										PassName:      to.Ptr("OobeSystem"),
										SettingName:   to.Ptr(armcompute.SettingNamesAutoLogon),
									}},
								EnableAutomaticUpdates: to.Ptr(true),
								PatchSettings: &armcompute.PatchSettings{
									AssessmentMode:    to.Ptr(armcompute.WindowsPatchAssessmentModeImageDefault),
									EnableHotpatching: to.Ptr(true),
									PatchMode:         to.Ptr(armcompute.WindowsVMGuestPatchModeManual),
								},
								ProvisionVMAgent: to.Ptr(true),
								TimeZone:         to.Ptr("aaaaaaaaaaaaaaaaaaaaaa"),
								WinRM: &armcompute.WinRMConfiguration{
									Listeners: []*armcompute.WinRMListener{
										{
											CertificateURL: to.Ptr("aaaaaaaaaaaaaaaaaaaaa"),
											Protocol:       to.Ptr(armcompute.ProtocolTypesHTTP),
										}},
								},
							},
						},
						PlatformFaultDomain: to.Ptr[int32](8),
						Priority:            to.Ptr(armcompute.VirtualMachinePriorityTypesRegular),
						ProvisioningState:   to.Ptr("Succeeded"),
						ProximityPlacementGroup: &armcompute.SubResource{
							ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
						},
						ScheduledEventsProfile: &armcompute.ScheduledEventsProfile{
							TerminateNotificationProfile: &armcompute.TerminateNotificationProfile{
								Enable:           to.Ptr(true),
								NotBeforeTimeout: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
							},
						},
						SecurityProfile: &armcompute.SecurityProfile{
							EncryptionAtHost: to.Ptr(true),
							SecurityType:     to.Ptr(armcompute.SecurityTypesTrustedLaunch),
							UefiSettings: &armcompute.UefiSettings{
								SecureBootEnabled: to.Ptr(true),
								VTpmEnabled:       to.Ptr(true),
							},
						},
						StorageProfile: &armcompute.StorageProfile{
							DataDisks: []*armcompute.DataDisk{},
							ImageReference: &armcompute.ImageReference{
								ID:                      to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
								CommunityGalleryImageID: to.Ptr("aaaa"),
								ExactVersion:            to.Ptr("aaaaaaaaaaaaa"),
								Offer:                   to.Ptr("WindowsServer"),
								Publisher:               to.Ptr("MicrosoftWindowsServer"),
								SharedGalleryImageID:    to.Ptr("aaaaaaaaaaaaaaa"),
								SKU:                     to.Ptr("2012-R2-Datacenter"),
								Version:                 to.Ptr("4.127.20170406"),
							},
							OSDisk: &armcompute.OSDisk{
								Name:         to.Ptr("test"),
								Caching:      to.Ptr(armcompute.CachingTypesNone),
								CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
								DeleteOption: to.Ptr(armcompute.DiskDeleteOptionTypesDelete),
								DiffDiskSettings: &armcompute.DiffDiskSettings{
									Option:    to.Ptr(armcompute.DiffDiskOptionsLocal),
									Placement: to.Ptr(armcompute.DiffDiskPlacementCacheDisk),
								},
								DiskSizeGB: to.Ptr[int32](127),
								EncryptionSettings: &armcompute.DiskEncryptionSettings{
									DiskEncryptionKey: &armcompute.KeyVaultSecretReference{
										SecretURL: to.Ptr("aaaaaaaaa"),
										SourceVault: &armcompute.SubResource{
											ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
										},
									},
									Enabled: to.Ptr(true),
									KeyEncryptionKey: &armcompute.KeyVaultKeyReference{
										KeyURL: to.Ptr("aaaaaaaaaaaaa"),
										SourceVault: &armcompute.SubResource{
											ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
										},
									},
								},
								Image: &armcompute.VirtualHardDisk{
									URI: to.Ptr("https://{storageAccountName}.blob.core.windows.net/{containerName}/{vhdName}.vhd"),
								},
								ManagedDisk: &armcompute.ManagedDiskParameters{
									ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/testingexcludedisk_OsDisk_1_74cdaedcea50483d9833c96adefa100f"),
									DiskEncryptionSet: &armcompute.DiskEncryptionSetParameters{
										ID: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
									},
									SecurityProfile: &armcompute.VMDiskSecurityProfile{
										DiskEncryptionSet: &armcompute.DiskEncryptionSetParameters{
											ID: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
										},
										SecurityEncryptionType: to.Ptr(armcompute.SecurityEncryptionTypesVMGuestStateOnly),
									},
									StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
								},
								OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
								Vhd: &armcompute.VirtualHardDisk{
									URI: to.Ptr("https://{storageAccountName}.blob.core.windows.net/{containerName}/{vhdName}.vhd"),
								},
								WriteAcceleratorEnabled: to.Ptr(true),
							},
						},
						TimeCreated: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-01-14T16:43:41.683Z"); return t }()),
						UserData:    to.Ptr("aaa"),
						VirtualMachineScaleSet: &armcompute.SubResource{
							ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
						},
						VMID: to.Ptr("{vmId}"),
					},
					Resources: []*armcompute.VirtualMachineExtension{
						{
							Name:     to.Ptr("aaaaaaaaaaaaa"),
							Type:     to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaa"),
							ID:       to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
							Location: to.Ptr("aaaaaaaaaaaaaaaa"),
							Tags: map[string]*string{
								"key9428": to.Ptr("aaaaaaa"),
							},
							Properties: &armcompute.VirtualMachineExtensionProperties{
								Type:                    to.Ptr("aaaaaaaa"),
								AutoUpgradeMinorVersion: to.Ptr(true),
								EnableAutomaticUpgrade:  to.Ptr(true),
								ForceUpdateTag:          to.Ptr("aaaaaaaaaaaaaaa"),
								InstanceView: &armcompute.VirtualMachineExtensionInstanceView{
									Name: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaa"),
									Type: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaa"),
									Statuses: []*armcompute.InstanceViewStatus{
										{
											Code:          to.Ptr("aaa"),
											DisplayStatus: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaa"),
											Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
											Message:       to.Ptr("aaaaaaaaaaaaaaaaaaa"),
											Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-01-14T16:43:41.657Z"); return t }()),
										}},
									Substatuses: []*armcompute.InstanceViewStatus{
										{
											Code:          to.Ptr("aaa"),
											DisplayStatus: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaa"),
											Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
											Message:       to.Ptr("aaaaaaaaaaaaaaaaaaa"),
											Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-01-14T16:43:41.657Z"); return t }()),
										}},
									TypeHandlerVersion: to.Ptr("aaaaaa"),
								},
								ProtectedSettings:             map[string]interface{}{},
								ProtectedSettingsFromKeyVault: map[string]interface{}{},
								ProvisioningState:             to.Ptr("Succeeded"),
								Publisher:                     to.Ptr("aaaaaaaaaaaaaaaa"),
								Settings:                      map[string]interface{}{},
								SuppressFailures:              to.Ptr(true),
								TypeHandlerVersion:            to.Ptr("aaaaaaaaaaaa"),
							},
						}},
					Zones: []*string{
						to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaa")},
				},
				{
					Name:     to.Ptr("{virtualMachineName}"),
					Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
					ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{virtualMachineName}"),
					Location: to.Ptr("eastus"),
					Tags:     map[string]*string{},
					ExtendedLocation: &armcompute.ExtendedLocation{
						Name: to.Ptr("aaaa"),
						Type: to.Ptr(armcompute.ExtendedLocationTypesEdgeZone),
					},
					Identity: &armcompute.VirtualMachineIdentity{
						Type:        to.Ptr(armcompute.ResourceIdentityTypeSystemAssigned),
						PrincipalID: to.Ptr("aaaaaaaaaaaaaaaa"),
						TenantID:    to.Ptr("aaaaa"),
						UserAssignedIdentities: map[string]*armcompute.UserAssignedIdentitiesValue{
							"key5688": &armcompute.UserAssignedIdentitiesValue{
								ClientID:    to.Ptr("aaaaaaaaaaa"),
								PrincipalID: to.Ptr("aaaaaaaaaaaaaaa"),
							},
						},
					},
					Plan: &armcompute.Plan{
						Name:          to.Ptr("aaaaaaaaaaaaaaaaaa"),
						Product:       to.Ptr("aaaaaaaaaaaaaaaaaaaaaa"),
						PromotionCode: to.Ptr("aaaaaaaaaaaaaa"),
						Publisher:     to.Ptr("aaaaaaaaaaaaaaaaa"),
					},
					Properties: &armcompute.VirtualMachineProperties{
						AdditionalCapabilities: &armcompute.AdditionalCapabilities{
							HibernationEnabled: to.Ptr(true),
							UltraSSDEnabled:    to.Ptr(true),
						},
						ApplicationProfile: &armcompute.ApplicationProfile{
							GalleryApplications: []*armcompute.VMGalleryApplication{
								{
									ConfigurationReference: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
									Order:                  to.Ptr[int32](4),
									PackageReferenceID:     to.Ptr("aaaaaaaaaaaaaaaaaaaaaa"),
									Tags:                   to.Ptr("aaaaa"),
								}},
						},
						AvailabilitySet: &armcompute.SubResource{
							ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
						},
						BillingProfile: &armcompute.BillingProfile{
							MaxPrice: to.Ptr[float64](26),
						},
						CapacityReservation: &armcompute.CapacityReservationProfile{
							CapacityReservationGroup: &armcompute.SubResource{
								ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
							},
						},
						DiagnosticsProfile: &armcompute.DiagnosticsProfile{
							BootDiagnostics: &armcompute.BootDiagnostics{
								Enabled:    to.Ptr(true),
								StorageURI: to.Ptr("aaaaaaaaaaaaaaaaaaaaa"),
							},
						},
						EvictionPolicy:       to.Ptr(armcompute.VirtualMachineEvictionPolicyTypesDeallocate),
						ExtensionsTimeBudget: to.Ptr("aaaaaaaaaaaaaaaaaaaaaa"),
						HardwareProfile: &armcompute.HardwareProfile{
							VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardA0),
							VMSizeProperties: &armcompute.VMSizeProperties{
								VCPUsAvailable: to.Ptr[int32](7),
								VCPUsPerCore:   to.Ptr[int32](14),
							},
						},
						Host: &armcompute.SubResource{
							ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
						},
						HostGroup: &armcompute.SubResource{
							ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
						},
						InstanceView: &armcompute.VirtualMachineInstanceView{
							AssignedHost: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
							BootDiagnostics: &armcompute.BootDiagnosticsInstanceView{
								ConsoleScreenshotBlobURI: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
								SerialConsoleLogBlobURI:  to.Ptr("aaaaaaaaaaaaaaaaaaa"),
								Status: &armcompute.InstanceViewStatus{
									Code:          to.Ptr("aaa"),
									DisplayStatus: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaa"),
									Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
									Message:       to.Ptr("aaaaaaaaaaaaaaaaaaa"),
									Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-01-14T16:43:41.657Z"); return t }()),
								},
							},
							ComputerName: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
							Disks: []*armcompute.DiskInstanceView{
								{
									Name: to.Ptr("a"),
									EncryptionSettings: []*armcompute.DiskEncryptionSettings{
										{
											DiskEncryptionKey: &armcompute.KeyVaultSecretReference{
												SecretURL: to.Ptr("aaaaaaaaa"),
												SourceVault: &armcompute.SubResource{
													ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
												},
											},
											Enabled: to.Ptr(true),
											KeyEncryptionKey: &armcompute.KeyVaultKeyReference{
												KeyURL: to.Ptr("aaaaaaaaaaaaa"),
												SourceVault: &armcompute.SubResource{
													ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
												},
											},
										}},
									Statuses: []*armcompute.InstanceViewStatus{
										{
											Code:          to.Ptr("aaa"),
											DisplayStatus: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaa"),
											Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
											Message:       to.Ptr("aaaaaaaaaaaaaaaaaaa"),
											Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-01-14T16:43:41.657Z"); return t }()),
										}},
								}},
							HyperVGeneration: to.Ptr(armcompute.HyperVGenerationTypeV1),
							MaintenanceRedeployStatus: &armcompute.MaintenanceRedeployStatus{
								IsCustomerInitiatedMaintenanceAllowed: to.Ptr(true),
								LastOperationMessage:                  to.Ptr("aa"),
								LastOperationResultCode:               to.Ptr(armcompute.MaintenanceOperationResultCodeTypesNone),
								MaintenanceWindowEndTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-01-14T16:43:41.682Z"); return t }()),
								MaintenanceWindowStartTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-01-14T16:43:41.682Z"); return t }()),
								PreMaintenanceWindowEndTime:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-01-14T16:43:41.682Z"); return t }()),
								PreMaintenanceWindowStartTime:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-01-14T16:43:41.682Z"); return t }()),
							},
							OSName:    to.Ptr("aaaaaaaaaaa"),
							OSVersion: to.Ptr("aaaaaaaaaaaaaa"),
							PatchStatus: &armcompute.VirtualMachinePatchStatus{
								AvailablePatchSummary: &armcompute.AvailablePatchSummary{
									AssessmentActivityID:          to.Ptr("aaaaaaaaaaaaaaaaaaa"),
									CriticalAndSecurityPatchCount: to.Ptr[int32](22),
									Error: &armcompute.APIError{
										Code: to.Ptr("aaaaaa"),
										Innererror: &armcompute.InnerError{
											Errordetail:   to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
											Exceptiontype: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
										},
										Message: to.Ptr("aaa"),
										Target:  to.Ptr("aaaaaaaaa"),
										Details: []*armcompute.APIErrorBase{
											{
												Code:    to.Ptr("aaaaaaaaaaaaaaaaaaaaa"),
												Message: to.Ptr("aaaaaaaaaaaaa"),
												Target:  to.Ptr("aaaaaa"),
											}},
									},
									LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-01-14T16:43:41.683Z"); return t }()),
									OtherPatchCount:  to.Ptr[int32](25),
									RebootPending:    to.Ptr(true),
									StartTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-01-14T16:43:41.682Z"); return t }()),
									Status:           to.Ptr(armcompute.PatchOperationStatusUnknown),
								},
								ConfigurationStatuses: []*armcompute.InstanceViewStatus{
									{
										Code:          to.Ptr("aaa"),
										DisplayStatus: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaa"),
										Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
										Message:       to.Ptr("aaaaaaaaaaaaaaaaaaa"),
										Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-01-14T16:43:41.657Z"); return t }()),
									}},
								LastPatchInstallationSummary: &armcompute.LastPatchInstallationSummary{
									Error: &armcompute.APIError{
										Code: to.Ptr("aaaaaa"),
										Innererror: &armcompute.InnerError{
											Errordetail:   to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
											Exceptiontype: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
										},
										Message: to.Ptr("aaa"),
										Target:  to.Ptr("aaaaaaaaa"),
										Details: []*armcompute.APIErrorBase{
											{
												Code:    to.Ptr("aaaaaaaaaaaaaaaaaaaaa"),
												Message: to.Ptr("aaaaaaaaaaaaa"),
												Target:  to.Ptr("aaaaaa"),
											}},
									},
									ExcludedPatchCount:        to.Ptr[int32](1),
									FailedPatchCount:          to.Ptr[int32](30),
									InstallationActivityID:    to.Ptr("aaaaaa"),
									InstalledPatchCount:       to.Ptr[int32](28),
									LastModifiedTime:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-01-14T16:43:41.683Z"); return t }()),
									MaintenanceWindowExceeded: to.Ptr(true),
									NotSelectedPatchCount:     to.Ptr[int32](20),
									PendingPatchCount:         to.Ptr[int32](2),
									StartTime:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-01-14T16:43:41.683Z"); return t }()),
									Status:                    to.Ptr(armcompute.PatchOperationStatusUnknown),
								},
							},
							PlatformFaultDomain:  to.Ptr[int32](29),
							PlatformUpdateDomain: to.Ptr[int32](1),
							RdpThumbPrint:        to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
							Statuses: []*armcompute.InstanceViewStatus{
								{
									Code:          to.Ptr("aaa"),
									DisplayStatus: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaa"),
									Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
									Message:       to.Ptr("aaaaaaaaaaaaaaaaaaa"),
									Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-01-14T16:43:41.657Z"); return t }()),
								}},
							VMAgent: &armcompute.VirtualMachineAgentInstanceView{
								ExtensionHandlers: []*armcompute.VirtualMachineExtensionHandlerInstanceView{
									{
										Type: to.Ptr("aaaaa"),
										Status: &armcompute.InstanceViewStatus{
											Code:          to.Ptr("aaa"),
											DisplayStatus: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaa"),
											Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
											Message:       to.Ptr("aaaaaaaaaaaaaaaaaaa"),
											Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-01-14T16:43:41.657Z"); return t }()),
										},
										TypeHandlerVersion: to.Ptr("aaaaaaaaaaaaaaaaaaa"),
									}},
								Statuses: []*armcompute.InstanceViewStatus{
									{
										Code:          to.Ptr("aaa"),
										DisplayStatus: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaa"),
										Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
										Message:       to.Ptr("aaaaaaaaaaaaaaaaaaa"),
										Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-01-14T16:43:41.657Z"); return t }()),
									}},
								VMAgentVersion: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
							},
							VMHealth: &armcompute.VirtualMachineHealthStatus{
								Status: &armcompute.InstanceViewStatus{
									Code:          to.Ptr("aaa"),
									DisplayStatus: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaa"),
									Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
									Message:       to.Ptr("aaaaaaaaaaaaaaaaaaa"),
									Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-01-14T16:43:41.657Z"); return t }()),
								},
							},
							Extensions: []*armcompute.VirtualMachineExtensionInstanceView{
								{
									Name: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaa"),
									Type: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaa"),
									Statuses: []*armcompute.InstanceViewStatus{
										{
											Code:          to.Ptr("aaa"),
											DisplayStatus: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaa"),
											Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
											Message:       to.Ptr("aaaaaaaaaaaaaaaaaaa"),
											Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-01-14T16:43:41.657Z"); return t }()),
										}},
									Substatuses: []*armcompute.InstanceViewStatus{
										{
											Code:          to.Ptr("aaa"),
											DisplayStatus: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaa"),
											Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
											Message:       to.Ptr("aaaaaaaaaaaaaaaaaaa"),
											Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-01-14T16:43:41.657Z"); return t }()),
										}},
									TypeHandlerVersion: to.Ptr("aaaaaa"),
								}},
						},
						LicenseType: to.Ptr("aaaaaaaaaaaaaa"),
						NetworkProfile: &armcompute.NetworkProfile{
							NetworkAPIVersion: to.Ptr(armcompute.NetworkAPIVersionTwoThousandTwenty1101),
							NetworkInterfaceConfigurations: []*armcompute.VirtualMachineNetworkInterfaceConfiguration{
								{
									Name: to.Ptr("aaaaaaaa"),
									Properties: &armcompute.VirtualMachineNetworkInterfaceConfigurationProperties{
										DeleteOption: to.Ptr(armcompute.DeleteOptionsDelete),
										DNSSettings: &armcompute.VirtualMachineNetworkInterfaceDNSSettingsConfiguration{
											DNSServers: []*string{
												to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaa")},
										},
										DscpConfiguration: &armcompute.SubResource{
											ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
										},
										EnableAcceleratedNetworking: to.Ptr(true),
										EnableFpga:                  to.Ptr(true),
										EnableIPForwarding:          to.Ptr(true),
										IPConfigurations: []*armcompute.VirtualMachineNetworkInterfaceIPConfiguration{
											{
												Name: to.Ptr("aaaaaaaa"),
												Properties: &armcompute.VirtualMachineNetworkInterfaceIPConfigurationProperties{
													ApplicationGatewayBackendAddressPools: []*armcompute.SubResource{
														{
															ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
														}},
													ApplicationSecurityGroups: []*armcompute.SubResource{
														{
															ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
														}},
													LoadBalancerBackendAddressPools: []*armcompute.SubResource{
														{
															ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
														}},
													Primary:                 to.Ptr(true),
													PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionsIPv4),
													PublicIPAddressConfiguration: &armcompute.VirtualMachinePublicIPAddressConfiguration{
														Name: to.Ptr("aaaaaaaaaaaaaaaaaa"),
														Properties: &armcompute.VirtualMachinePublicIPAddressConfigurationProperties{
															DeleteOption: to.Ptr(armcompute.DeleteOptionsDelete),
															DNSSettings: &armcompute.VirtualMachinePublicIPAddressDNSSettingsConfiguration{
																DomainNameLabel: to.Ptr("aaaaa"),
															},
															IdleTimeoutInMinutes: to.Ptr[int32](23),
															IPTags: []*armcompute.VirtualMachineIPTag{
																{
																	IPTagType: to.Ptr("aaaaa"),
																	Tag:       to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaa"),
																}},
															PublicIPAddressVersion:   to.Ptr(armcompute.IPVersionsIPv4),
															PublicIPAllocationMethod: to.Ptr(armcompute.PublicIPAllocationMethodDynamic),
															PublicIPPrefix: &armcompute.SubResource{
																ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
															},
														},
														SKU: &armcompute.PublicIPAddressSKU{
															Name: to.Ptr(armcompute.PublicIPAddressSKUNameBasic),
															Tier: to.Ptr(armcompute.PublicIPAddressSKUTierRegional),
														},
													},
													Subnet: &armcompute.SubResource{
														ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
													},
												},
											}},
										NetworkSecurityGroup: &armcompute.SubResource{
											ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
										},
										Primary: to.Ptr(true),
									},
								}},
							NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
								{
									ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkInterfaces/{networkInterfaceName}"),
									Properties: &armcompute.NetworkInterfaceReferenceProperties{
										DeleteOption: to.Ptr(armcompute.DeleteOptionsDelete),
										Primary:      to.Ptr(true),
									},
								}},
						},
						OSProfile: &armcompute.OSProfile{
							AdminPassword:            to.Ptr("{aaaaaaaaaaaaa}"),
							AdminUsername:            to.Ptr("Foo12"),
							AllowExtensionOperations: to.Ptr(true),
							ComputerName:             to.Ptr("Test"),
							CustomData:               to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
							LinuxConfiguration: &armcompute.LinuxConfiguration{
								DisablePasswordAuthentication: to.Ptr(true),
								PatchSettings: &armcompute.LinuxPatchSettings{
									AssessmentMode: to.Ptr(armcompute.LinuxPatchAssessmentModeImageDefault),
									PatchMode:      to.Ptr(armcompute.LinuxVMGuestPatchModeImageDefault),
								},
								ProvisionVMAgent: to.Ptr(true),
								SSH: &armcompute.SSHConfiguration{
									PublicKeys: []*armcompute.SSHPublicKey{
										{
											Path:    to.Ptr("aaaaaaaaaaaaaaaaaaaaaa"),
											KeyData: to.Ptr("aaa"),
										}},
								},
							},
							RequireGuestProvisionSignal: to.Ptr(true),
							Secrets:                     []*armcompute.VaultSecretGroup{},
							WindowsConfiguration: &armcompute.WindowsConfiguration{
								AdditionalUnattendContent: []*armcompute.AdditionalUnattendContent{
									{
										ComponentName: to.Ptr("Microsoft-Windows-Shell-Setup"),
										Content:       to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaa"),
										PassName:      to.Ptr("OobeSystem"),
										SettingName:   to.Ptr(armcompute.SettingNamesAutoLogon),
									}},
								EnableAutomaticUpdates: to.Ptr(true),
								PatchSettings: &armcompute.PatchSettings{
									AssessmentMode:    to.Ptr(armcompute.WindowsPatchAssessmentModeImageDefault),
									EnableHotpatching: to.Ptr(true),
									PatchMode:         to.Ptr(armcompute.WindowsVMGuestPatchModeManual),
								},
								ProvisionVMAgent: to.Ptr(true),
								TimeZone:         to.Ptr("aaaaaaaaaaaaaaaaaaaa"),
								WinRM: &armcompute.WinRMConfiguration{
									Listeners: []*armcompute.WinRMListener{
										{
											CertificateURL: to.Ptr("aaaaaaaaaaaaaaaaaaaaa"),
											Protocol:       to.Ptr(armcompute.ProtocolTypesHTTP),
										}},
								},
							},
						},
						PlatformFaultDomain: to.Ptr[int32](11),
						Priority:            to.Ptr(armcompute.VirtualMachinePriorityTypesRegular),
						ProvisioningState:   to.Ptr("Succeeded"),
						ProximityPlacementGroup: &armcompute.SubResource{
							ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
						},
						ScheduledEventsProfile: &armcompute.ScheduledEventsProfile{
							TerminateNotificationProfile: &armcompute.TerminateNotificationProfile{
								Enable:           to.Ptr(true),
								NotBeforeTimeout: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
							},
						},
						SecurityProfile: &armcompute.SecurityProfile{
							EncryptionAtHost: to.Ptr(true),
							SecurityType:     to.Ptr(armcompute.SecurityTypesTrustedLaunch),
							UefiSettings: &armcompute.UefiSettings{
								SecureBootEnabled: to.Ptr(true),
								VTpmEnabled:       to.Ptr(true),
							},
						},
						StorageProfile: &armcompute.StorageProfile{
							DataDisks: []*armcompute.DataDisk{},
							ImageReference: &armcompute.ImageReference{
								ID:                      to.Ptr("aaaaaaaa"),
								CommunityGalleryImageID: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
								ExactVersion:            to.Ptr("aa"),
								Offer:                   to.Ptr("WindowsServer"),
								Publisher:               to.Ptr("MicrosoftWindowsServer"),
								SharedGalleryImageID:    to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaa"),
								SKU:                     to.Ptr("2012-R2-Datacenter"),
								Version:                 to.Ptr("4.127.20170406"),
							},
							OSDisk: &armcompute.OSDisk{
								Name:         to.Ptr("test"),
								Caching:      to.Ptr(armcompute.CachingTypesNone),
								CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
								DeleteOption: to.Ptr(armcompute.DiskDeleteOptionTypesDelete),
								DiffDiskSettings: &armcompute.DiffDiskSettings{
									Option:    to.Ptr(armcompute.DiffDiskOptionsLocal),
									Placement: to.Ptr(armcompute.DiffDiskPlacementCacheDisk),
								},
								DiskSizeGB: to.Ptr[int32](127),
								EncryptionSettings: &armcompute.DiskEncryptionSettings{
									DiskEncryptionKey: &armcompute.KeyVaultSecretReference{
										SecretURL: to.Ptr("aaaaaaaaa"),
										SourceVault: &armcompute.SubResource{
											ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
										},
									},
									Enabled: to.Ptr(true),
									KeyEncryptionKey: &armcompute.KeyVaultKeyReference{
										KeyURL: to.Ptr("aaaaaaaaaaaaa"),
										SourceVault: &armcompute.SubResource{
											ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
										},
									},
								},
								Image: &armcompute.VirtualHardDisk{
									URI: to.Ptr("https://{storageAccountName}.blob.core.windows.net/{containerName}/{vhdName}.vhd"),
								},
								ManagedDisk: &armcompute.ManagedDiskParameters{
									ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/testingexcludedisk_OsDisk_1_74cdaedcea50483d9833c96adefa100f"),
									DiskEncryptionSet: &armcompute.DiskEncryptionSetParameters{
										ID: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
									},
									SecurityProfile: &armcompute.VMDiskSecurityProfile{
										DiskEncryptionSet: &armcompute.DiskEncryptionSetParameters{
											ID: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
										},
										SecurityEncryptionType: to.Ptr(armcompute.SecurityEncryptionTypesVMGuestStateOnly),
									},
									StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
								},
								OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
								Vhd: &armcompute.VirtualHardDisk{
									URI: to.Ptr("https://{storageAccountName}.blob.core.windows.net/{containerName}/{vhdName}.vhd"),
								},
								WriteAcceleratorEnabled: to.Ptr(true),
							},
						},
						TimeCreated: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-01-14T16:43:41.685Z"); return t }()),
						UserData:    to.Ptr("aaaaaaaaaaaaaaaaaaa"),
						VirtualMachineScaleSet: &armcompute.SubResource{
							ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
						},
						VMID: to.Ptr("{vmId}"),
					},
					Resources: []*armcompute.VirtualMachineExtension{
						{
							Name:     to.Ptr("aaaaaaaaaaaaa"),
							Type:     to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaa"),
							ID:       to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
							Location: to.Ptr("aaaaaaaaaaaaaaaa"),
							Tags: map[string]*string{
								"key9428": to.Ptr("aaaaaaa"),
							},
							Properties: &armcompute.VirtualMachineExtensionProperties{
								Type:                    to.Ptr("aaaaaaaa"),
								AutoUpgradeMinorVersion: to.Ptr(true),
								EnableAutomaticUpgrade:  to.Ptr(true),
								ForceUpdateTag:          to.Ptr("aaaaaaaaaaaaaaa"),
								InstanceView: &armcompute.VirtualMachineExtensionInstanceView{
									Name: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaa"),
									Type: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaa"),
									Statuses: []*armcompute.InstanceViewStatus{
										{
											Code:          to.Ptr("aaa"),
											DisplayStatus: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaa"),
											Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
											Message:       to.Ptr("aaaaaaaaaaaaaaaaaaa"),
											Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-01-14T16:43:41.657Z"); return t }()),
										}},
									Substatuses: []*armcompute.InstanceViewStatus{
										{
											Code:          to.Ptr("aaa"),
											DisplayStatus: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaa"),
											Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
											Message:       to.Ptr("aaaaaaaaaaaaaaaaaaa"),
											Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-01-14T16:43:41.657Z"); return t }()),
										}},
									TypeHandlerVersion: to.Ptr("aaaaaa"),
								},
								ProtectedSettings:             map[string]interface{}{},
								ProtectedSettingsFromKeyVault: map[string]interface{}{},
								ProvisioningState:             to.Ptr("Succeeded"),
								Publisher:                     to.Ptr("aaaaaaaaaaaaaaaa"),
								Settings:                      map[string]interface{}{},
								SuppressFailures:              to.Ptr(true),
								TypeHandlerVersion:            to.Ptr("aaaaaaaaaaaa"),
							},
						}},
					Zones: []*string{
						to.Ptr("aaaaaa")},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.VirtualMachineListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.VirtualMachineListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachines_List_MaximumSet_Gen.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachines_List_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachines_List_MinimumSet_Gen"},
	})
	client, err = armcompute.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager = client.NewListPager("rgcompute",
		&armcompute.VirtualMachinesClientListOptions{Filter: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachines_List_MinimumSet_Gen.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcompute.VirtualMachineListResult{
			Value: []*armcompute.VirtualMachine{
				{
					Location: to.Ptr("eastus"),
				},
				{
					Location: to.Ptr("eastus"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.VirtualMachineListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.VirtualMachineListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachines_List_MinimumSet_Gen.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualMachines_ListAll(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachines_ListAll_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachines_ListAll_MaximumSet_Gen"},
	})
	client, err := armcompute.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := client.NewListAllPager(&armcompute.VirtualMachinesClientListAllOptions{StatusOnly: to.Ptr("aaaaaa"),
		Filter: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
	})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachines_ListAll_MaximumSet_Gen.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcompute.VirtualMachineListResult{
			Value: []*armcompute.VirtualMachine{
				{
					Name:     to.Ptr("{virtualMachineName}"),
					Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
					ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{virtualMachineName}"),
					Location: to.Ptr("eastus"),
					Tags:     map[string]*string{},
					ExtendedLocation: &armcompute.ExtendedLocation{
						Name: to.Ptr("aaaa"),
						Type: to.Ptr(armcompute.ExtendedLocationTypesEdgeZone),
					},
					Identity: &armcompute.VirtualMachineIdentity{
						Type:        to.Ptr(armcompute.ResourceIdentityTypeSystemAssigned),
						PrincipalID: to.Ptr("aaaaaaaaaaaaaaaa"),
						TenantID:    to.Ptr("aaaaa"),
						UserAssignedIdentities: map[string]*armcompute.UserAssignedIdentitiesValue{
							"key5688": &armcompute.UserAssignedIdentitiesValue{
								ClientID:    to.Ptr("aaaaaaaaaaa"),
								PrincipalID: to.Ptr("aaaaaaaaaaaaaaa"),
							},
						},
					},
					Plan: &armcompute.Plan{
						Name:          to.Ptr("aaaaaaaaaaaaaaaaaa"),
						Product:       to.Ptr("aaaaaaaaaaaaaaaaaaaaaa"),
						PromotionCode: to.Ptr("aaaaaaaaaaaaaa"),
						Publisher:     to.Ptr("aaaaaaaaaaaaaaaaa"),
					},
					Properties: &armcompute.VirtualMachineProperties{
						AdditionalCapabilities: &armcompute.AdditionalCapabilities{
							HibernationEnabled: to.Ptr(true),
							UltraSSDEnabled:    to.Ptr(true),
						},
						ApplicationProfile: &armcompute.ApplicationProfile{
							GalleryApplications: []*armcompute.VMGalleryApplication{
								{
									ConfigurationReference: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
									Order:                  to.Ptr[int32](4),
									PackageReferenceID:     to.Ptr("aaaaaaaaaaaaaaaaaaaaaa"),
									Tags:                   to.Ptr("aaaaa"),
								}},
						},
						AvailabilitySet: &armcompute.SubResource{
							ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
						},
						BillingProfile: &armcompute.BillingProfile{
							MaxPrice: to.Ptr[float64](26),
						},
						CapacityReservation: &armcompute.CapacityReservationProfile{
							CapacityReservationGroup: &armcompute.SubResource{
								ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
							},
						},
						DiagnosticsProfile: &armcompute.DiagnosticsProfile{
							BootDiagnostics: &armcompute.BootDiagnostics{
								Enabled:    to.Ptr(true),
								StorageURI: to.Ptr("aaaaaaaaaaaaaaaaaaaaa"),
							},
						},
						EvictionPolicy:       to.Ptr(armcompute.VirtualMachineEvictionPolicyTypesDeallocate),
						ExtensionsTimeBudget: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
						HardwareProfile: &armcompute.HardwareProfile{
							VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardA0),
							VMSizeProperties: &armcompute.VMSizeProperties{
								VCPUsAvailable: to.Ptr[int32](7),
								VCPUsPerCore:   to.Ptr[int32](14),
							},
						},
						Host: &armcompute.SubResource{
							ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
						},
						HostGroup: &armcompute.SubResource{
							ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
						},
						InstanceView: &armcompute.VirtualMachineInstanceView{
							AssignedHost: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
							BootDiagnostics: &armcompute.BootDiagnosticsInstanceView{
								ConsoleScreenshotBlobURI: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
								SerialConsoleLogBlobURI:  to.Ptr("aaaaaaaaaaaaaaaaaaa"),
								Status: &armcompute.InstanceViewStatus{
									Code:          to.Ptr("aaa"),
									DisplayStatus: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaa"),
									Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
									Message:       to.Ptr("aaaaaaaaaaaaaaaaaaa"),
									Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-01-14T16:43:41.657Z"); return t }()),
								},
							},
							ComputerName: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
							Disks: []*armcompute.DiskInstanceView{
								{
									Name: to.Ptr("a"),
									EncryptionSettings: []*armcompute.DiskEncryptionSettings{
										{
											DiskEncryptionKey: &armcompute.KeyVaultSecretReference{
												SecretURL: to.Ptr("aaaaaaaaa"),
												SourceVault: &armcompute.SubResource{
													ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
												},
											},
											Enabled: to.Ptr(true),
											KeyEncryptionKey: &armcompute.KeyVaultKeyReference{
												KeyURL: to.Ptr("aaaaaaaaaaaaa"),
												SourceVault: &armcompute.SubResource{
													ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
												},
											},
										}},
									Statuses: []*armcompute.InstanceViewStatus{
										{
											Code:          to.Ptr("aaa"),
											DisplayStatus: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaa"),
											Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
											Message:       to.Ptr("aaaaaaaaaaaaaaaaaaa"),
											Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-01-14T16:43:41.657Z"); return t }()),
										}},
								}},
							HyperVGeneration: to.Ptr(armcompute.HyperVGenerationTypeV1),
							MaintenanceRedeployStatus: &armcompute.MaintenanceRedeployStatus{
								IsCustomerInitiatedMaintenanceAllowed: to.Ptr(true),
								LastOperationMessage:                  to.Ptr("aa"),
								LastOperationResultCode:               to.Ptr(armcompute.MaintenanceOperationResultCodeTypesNone),
								MaintenanceWindowEndTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-01-14T16:43:41.682Z"); return t }()),
								MaintenanceWindowStartTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-01-14T16:43:41.682Z"); return t }()),
								PreMaintenanceWindowEndTime:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-01-14T16:43:41.682Z"); return t }()),
								PreMaintenanceWindowStartTime:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-01-14T16:43:41.682Z"); return t }()),
							},
							OSName:    to.Ptr("aaaaaaaaaaa"),
							OSVersion: to.Ptr("aaaaaaaaaaaaaa"),
							PatchStatus: &armcompute.VirtualMachinePatchStatus{
								AvailablePatchSummary: &armcompute.AvailablePatchSummary{
									AssessmentActivityID:          to.Ptr("aaaaaaaaaaaaaaaaaaa"),
									CriticalAndSecurityPatchCount: to.Ptr[int32](22),
									Error: &armcompute.APIError{
										Code: to.Ptr("aaaaaa"),
										Innererror: &armcompute.InnerError{
											Errordetail:   to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
											Exceptiontype: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
										},
										Message: to.Ptr("aaa"),
										Target:  to.Ptr("aaaaaaaaa"),
										Details: []*armcompute.APIErrorBase{
											{
												Code:    to.Ptr("aaaaaaaaaaaaaaaaaaaaa"),
												Message: to.Ptr("aaaaaaaaaaaaa"),
												Target:  to.Ptr("aaaaaa"),
											}},
									},
									LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-01-14T16:43:41.683Z"); return t }()),
									OtherPatchCount:  to.Ptr[int32](25),
									RebootPending:    to.Ptr(true),
									StartTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-01-14T16:43:41.682Z"); return t }()),
									Status:           to.Ptr(armcompute.PatchOperationStatusUnknown),
								},
								ConfigurationStatuses: []*armcompute.InstanceViewStatus{
									{
										Code:          to.Ptr("aaa"),
										DisplayStatus: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaa"),
										Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
										Message:       to.Ptr("aaaaaaaaaaaaaaaaaaa"),
										Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-01-14T16:43:41.657Z"); return t }()),
									}},
								LastPatchInstallationSummary: &armcompute.LastPatchInstallationSummary{
									Error: &armcompute.APIError{
										Code: to.Ptr("aaaaaa"),
										Innererror: &armcompute.InnerError{
											Errordetail:   to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
											Exceptiontype: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
										},
										Message: to.Ptr("aaa"),
										Target:  to.Ptr("aaaaaaaaa"),
										Details: []*armcompute.APIErrorBase{
											{
												Code:    to.Ptr("aaaaaaaaaaaaaaaaaaaaa"),
												Message: to.Ptr("aaaaaaaaaaaaa"),
												Target:  to.Ptr("aaaaaa"),
											}},
									},
									ExcludedPatchCount:        to.Ptr[int32](1),
									FailedPatchCount:          to.Ptr[int32](30),
									InstallationActivityID:    to.Ptr("aaaaaa"),
									InstalledPatchCount:       to.Ptr[int32](28),
									LastModifiedTime:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-01-14T16:43:41.683Z"); return t }()),
									MaintenanceWindowExceeded: to.Ptr(true),
									NotSelectedPatchCount:     to.Ptr[int32](20),
									PendingPatchCount:         to.Ptr[int32](2),
									StartTime:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-01-14T16:43:41.683Z"); return t }()),
									Status:                    to.Ptr(armcompute.PatchOperationStatusUnknown),
								},
							},
							PlatformFaultDomain:  to.Ptr[int32](29),
							PlatformUpdateDomain: to.Ptr[int32](1),
							RdpThumbPrint:        to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
							Statuses: []*armcompute.InstanceViewStatus{
								{
									Code:          to.Ptr("aaa"),
									DisplayStatus: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaa"),
									Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
									Message:       to.Ptr("aaaaaaaaaaaaaaaaaaa"),
									Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-01-14T16:43:41.657Z"); return t }()),
								}},
							VMAgent: &armcompute.VirtualMachineAgentInstanceView{
								ExtensionHandlers: []*armcompute.VirtualMachineExtensionHandlerInstanceView{
									{
										Type: to.Ptr("aaaaa"),
										Status: &armcompute.InstanceViewStatus{
											Code:          to.Ptr("aaa"),
											DisplayStatus: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaa"),
											Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
											Message:       to.Ptr("aaaaaaaaaaaaaaaaaaa"),
											Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-01-14T16:43:41.657Z"); return t }()),
										},
										TypeHandlerVersion: to.Ptr("aaaaaaaaaaaaaaaaaaa"),
									}},
								Statuses: []*armcompute.InstanceViewStatus{
									{
										Code:          to.Ptr("aaa"),
										DisplayStatus: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaa"),
										Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
										Message:       to.Ptr("aaaaaaaaaaaaaaaaaaa"),
										Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-01-14T16:43:41.657Z"); return t }()),
									}},
								VMAgentVersion: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
							},
							VMHealth: &armcompute.VirtualMachineHealthStatus{
								Status: &armcompute.InstanceViewStatus{
									Code:          to.Ptr("aaa"),
									DisplayStatus: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaa"),
									Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
									Message:       to.Ptr("aaaaaaaaaaaaaaaaaaa"),
									Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-01-14T16:43:41.657Z"); return t }()),
								},
							},
							Extensions: []*armcompute.VirtualMachineExtensionInstanceView{
								{
									Name: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaa"),
									Type: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaa"),
									Statuses: []*armcompute.InstanceViewStatus{
										{
											Code:          to.Ptr("aaa"),
											DisplayStatus: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaa"),
											Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
											Message:       to.Ptr("aaaaaaaaaaaaaaaaaaa"),
											Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-01-14T16:43:41.657Z"); return t }()),
										}},
									Substatuses: []*armcompute.InstanceViewStatus{
										{
											Code:          to.Ptr("aaa"),
											DisplayStatus: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaa"),
											Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
											Message:       to.Ptr("aaaaaaaaaaaaaaaaaaa"),
											Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-01-14T16:43:41.657Z"); return t }()),
										}},
									TypeHandlerVersion: to.Ptr("aaaaaa"),
								}},
						},
						LicenseType: to.Ptr("aaaaaaaaaaaaaaa"),
						NetworkProfile: &armcompute.NetworkProfile{
							NetworkAPIVersion: to.Ptr(armcompute.NetworkAPIVersionTwoThousandTwenty1101),
							NetworkInterfaceConfigurations: []*armcompute.VirtualMachineNetworkInterfaceConfiguration{
								{
									Name: to.Ptr("aaaaaaaa"),
									Properties: &armcompute.VirtualMachineNetworkInterfaceConfigurationProperties{
										DeleteOption: to.Ptr(armcompute.DeleteOptionsDelete),
										DNSSettings: &armcompute.VirtualMachineNetworkInterfaceDNSSettingsConfiguration{
											DNSServers: []*string{
												to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaa")},
										},
										DscpConfiguration: &armcompute.SubResource{
											ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
										},
										EnableAcceleratedNetworking: to.Ptr(true),
										EnableFpga:                  to.Ptr(true),
										EnableIPForwarding:          to.Ptr(true),
										IPConfigurations: []*armcompute.VirtualMachineNetworkInterfaceIPConfiguration{
											{
												Name: to.Ptr("aaaaaaaa"),
												Properties: &armcompute.VirtualMachineNetworkInterfaceIPConfigurationProperties{
													ApplicationGatewayBackendAddressPools: []*armcompute.SubResource{
														{
															ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
														}},
													ApplicationSecurityGroups: []*armcompute.SubResource{
														{
															ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
														}},
													LoadBalancerBackendAddressPools: []*armcompute.SubResource{
														{
															ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
														}},
													Primary:                 to.Ptr(true),
													PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionsIPv4),
													PublicIPAddressConfiguration: &armcompute.VirtualMachinePublicIPAddressConfiguration{
														Name: to.Ptr("aaaaaaaaaaaaaaaaaa"),
														Properties: &armcompute.VirtualMachinePublicIPAddressConfigurationProperties{
															DeleteOption: to.Ptr(armcompute.DeleteOptionsDelete),
															DNSSettings: &armcompute.VirtualMachinePublicIPAddressDNSSettingsConfiguration{
																DomainNameLabel: to.Ptr("aaaaa"),
															},
															IdleTimeoutInMinutes: to.Ptr[int32](23),
															IPTags: []*armcompute.VirtualMachineIPTag{
																{
																	IPTagType: to.Ptr("aaaaa"),
																	Tag:       to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaa"),
																}},
															PublicIPAddressVersion:   to.Ptr(armcompute.IPVersionsIPv4),
															PublicIPAllocationMethod: to.Ptr(armcompute.PublicIPAllocationMethodDynamic),
															PublicIPPrefix: &armcompute.SubResource{
																ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
															},
														},
														SKU: &armcompute.PublicIPAddressSKU{
															Name: to.Ptr(armcompute.PublicIPAddressSKUNameBasic),
															Tier: to.Ptr(armcompute.PublicIPAddressSKUTierRegional),
														},
													},
													Subnet: &armcompute.SubResource{
														ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
													},
												},
											}},
										NetworkSecurityGroup: &armcompute.SubResource{
											ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
										},
										Primary: to.Ptr(true),
									},
								}},
							NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
								{
									ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkInterfaces/{networkInterfaceName}"),
									Properties: &armcompute.NetworkInterfaceReferenceProperties{
										DeleteOption: to.Ptr(armcompute.DeleteOptionsDelete),
										Primary:      to.Ptr(true),
									},
								}},
						},
						OSProfile: &armcompute.OSProfile{
							AdminPassword:            to.Ptr("{aaaaaaaaaaaaa}"),
							AdminUsername:            to.Ptr("Foo12"),
							AllowExtensionOperations: to.Ptr(true),
							ComputerName:             to.Ptr("Test"),
							CustomData:               to.Ptr("aaaa"),
							LinuxConfiguration: &armcompute.LinuxConfiguration{
								DisablePasswordAuthentication: to.Ptr(true),
								PatchSettings: &armcompute.LinuxPatchSettings{
									AssessmentMode: to.Ptr(armcompute.LinuxPatchAssessmentModeImageDefault),
									PatchMode:      to.Ptr(armcompute.LinuxVMGuestPatchModeImageDefault),
								},
								ProvisionVMAgent: to.Ptr(true),
								SSH: &armcompute.SSHConfiguration{
									PublicKeys: []*armcompute.SSHPublicKey{
										{
											Path:    to.Ptr("aaaaaaaaaaaaaaaaaaaaaa"),
											KeyData: to.Ptr("aaa"),
										}},
								},
							},
							RequireGuestProvisionSignal: to.Ptr(true),
							Secrets:                     []*armcompute.VaultSecretGroup{},
							WindowsConfiguration: &armcompute.WindowsConfiguration{
								AdditionalUnattendContent: []*armcompute.AdditionalUnattendContent{
									{
										ComponentName: to.Ptr("Microsoft-Windows-Shell-Setup"),
										Content:       to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaa"),
										PassName:      to.Ptr("OobeSystem"),
										SettingName:   to.Ptr(armcompute.SettingNamesAutoLogon),
									}},
								EnableAutomaticUpdates: to.Ptr(true),
								PatchSettings: &armcompute.PatchSettings{
									AssessmentMode:    to.Ptr(armcompute.WindowsPatchAssessmentModeImageDefault),
									EnableHotpatching: to.Ptr(true),
									PatchMode:         to.Ptr(armcompute.WindowsVMGuestPatchModeManual),
								},
								ProvisionVMAgent: to.Ptr(true),
								TimeZone:         to.Ptr("aaaaaaaaaaaaaaaaaaaaaa"),
								WinRM: &armcompute.WinRMConfiguration{
									Listeners: []*armcompute.WinRMListener{
										{
											CertificateURL: to.Ptr("aaaaaaaaaaaaaaaaaaaaa"),
											Protocol:       to.Ptr(armcompute.ProtocolTypesHTTP),
										}},
								},
							},
						},
						PlatformFaultDomain: to.Ptr[int32](8),
						Priority:            to.Ptr(armcompute.VirtualMachinePriorityTypesRegular),
						ProvisioningState:   to.Ptr("Succeeded"),
						ProximityPlacementGroup: &armcompute.SubResource{
							ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
						},
						ScheduledEventsProfile: &armcompute.ScheduledEventsProfile{
							TerminateNotificationProfile: &armcompute.TerminateNotificationProfile{
								Enable:           to.Ptr(true),
								NotBeforeTimeout: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
							},
						},
						SecurityProfile: &armcompute.SecurityProfile{
							EncryptionAtHost: to.Ptr(true),
							SecurityType:     to.Ptr(armcompute.SecurityTypesTrustedLaunch),
							UefiSettings: &armcompute.UefiSettings{
								SecureBootEnabled: to.Ptr(true),
								VTpmEnabled:       to.Ptr(true),
							},
						},
						StorageProfile: &armcompute.StorageProfile{
							DataDisks: []*armcompute.DataDisk{},
							ImageReference: &armcompute.ImageReference{
								ID:                      to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
								CommunityGalleryImageID: to.Ptr("aaaa"),
								ExactVersion:            to.Ptr("aaaaaaaaaaaaa"),
								Offer:                   to.Ptr("WindowsServer"),
								Publisher:               to.Ptr("MicrosoftWindowsServer"),
								SharedGalleryImageID:    to.Ptr("aaaaaaaaaaaaaaa"),
								SKU:                     to.Ptr("2012-R2-Datacenter"),
								Version:                 to.Ptr("4.127.20170406"),
							},
							OSDisk: &armcompute.OSDisk{
								Name:         to.Ptr("test"),
								Caching:      to.Ptr(armcompute.CachingTypesNone),
								CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
								DeleteOption: to.Ptr(armcompute.DiskDeleteOptionTypesDelete),
								DiffDiskSettings: &armcompute.DiffDiskSettings{
									Option:    to.Ptr(armcompute.DiffDiskOptionsLocal),
									Placement: to.Ptr(armcompute.DiffDiskPlacementCacheDisk),
								},
								DiskSizeGB: to.Ptr[int32](127),
								EncryptionSettings: &armcompute.DiskEncryptionSettings{
									DiskEncryptionKey: &armcompute.KeyVaultSecretReference{
										SecretURL: to.Ptr("aaaaaaaaa"),
										SourceVault: &armcompute.SubResource{
											ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
										},
									},
									Enabled: to.Ptr(true),
									KeyEncryptionKey: &armcompute.KeyVaultKeyReference{
										KeyURL: to.Ptr("aaaaaaaaaaaaa"),
										SourceVault: &armcompute.SubResource{
											ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
										},
									},
								},
								Image: &armcompute.VirtualHardDisk{
									URI: to.Ptr("https://{storageAccountName}.blob.core.windows.net/{containerName}/{vhdName}.vhd"),
								},
								ManagedDisk: &armcompute.ManagedDiskParameters{
									ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/testingexcludedisk_OsDisk_1_74cdaedcea50483d9833c96adefa100f"),
									DiskEncryptionSet: &armcompute.DiskEncryptionSetParameters{
										ID: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
									},
									SecurityProfile: &armcompute.VMDiskSecurityProfile{
										DiskEncryptionSet: &armcompute.DiskEncryptionSetParameters{
											ID: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
										},
										SecurityEncryptionType: to.Ptr(armcompute.SecurityEncryptionTypesVMGuestStateOnly),
									},
									StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
								},
								OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
								Vhd: &armcompute.VirtualHardDisk{
									URI: to.Ptr("https://{storageAccountName}.blob.core.windows.net/{containerName}/{vhdName}.vhd"),
								},
								WriteAcceleratorEnabled: to.Ptr(true),
							},
						},
						TimeCreated: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-01-14T16:43:41.683Z"); return t }()),
						UserData:    to.Ptr("aaa"),
						VirtualMachineScaleSet: &armcompute.SubResource{
							ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
						},
						VMID: to.Ptr("{vmId}"),
					},
					Resources: []*armcompute.VirtualMachineExtension{
						{
							Name:     to.Ptr("aaaaaaaaaaaaa"),
							Type:     to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaa"),
							ID:       to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
							Location: to.Ptr("aaaaaaaaaaaaaaaa"),
							Tags: map[string]*string{
								"key9428": to.Ptr("aaaaaaa"),
							},
							Properties: &armcompute.VirtualMachineExtensionProperties{
								Type:                    to.Ptr("aaaaaaaa"),
								AutoUpgradeMinorVersion: to.Ptr(true),
								EnableAutomaticUpgrade:  to.Ptr(true),
								ForceUpdateTag:          to.Ptr("aaaaaaaaaaaaaaa"),
								InstanceView: &armcompute.VirtualMachineExtensionInstanceView{
									Name: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaa"),
									Type: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaa"),
									Statuses: []*armcompute.InstanceViewStatus{
										{
											Code:          to.Ptr("aaa"),
											DisplayStatus: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaa"),
											Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
											Message:       to.Ptr("aaaaaaaaaaaaaaaaaaa"),
											Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-01-14T16:43:41.657Z"); return t }()),
										}},
									Substatuses: []*armcompute.InstanceViewStatus{
										{
											Code:          to.Ptr("aaa"),
											DisplayStatus: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaa"),
											Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
											Message:       to.Ptr("aaaaaaaaaaaaaaaaaaa"),
											Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-01-14T16:43:41.657Z"); return t }()),
										}},
									TypeHandlerVersion: to.Ptr("aaaaaa"),
								},
								ProtectedSettings:             map[string]interface{}{},
								ProtectedSettingsFromKeyVault: map[string]interface{}{},
								ProvisioningState:             to.Ptr("Succeeded"),
								Publisher:                     to.Ptr("aaaaaaaaaaaaaaaa"),
								Settings:                      map[string]interface{}{},
								SuppressFailures:              to.Ptr(true),
								TypeHandlerVersion:            to.Ptr("aaaaaaaaaaaa"),
							},
						}},
					Zones: []*string{
						to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaa")},
				},
				{
					Name:     to.Ptr("{virtualMachineName}"),
					Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
					ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{virtualMachineName}"),
					Location: to.Ptr("eastus"),
					Tags:     map[string]*string{},
					ExtendedLocation: &armcompute.ExtendedLocation{
						Name: to.Ptr("aaaa"),
						Type: to.Ptr(armcompute.ExtendedLocationTypesEdgeZone),
					},
					Identity: &armcompute.VirtualMachineIdentity{
						Type:        to.Ptr(armcompute.ResourceIdentityTypeSystemAssigned),
						PrincipalID: to.Ptr("aaaaaaaaaaaaaaaa"),
						TenantID:    to.Ptr("aaaaa"),
						UserAssignedIdentities: map[string]*armcompute.UserAssignedIdentitiesValue{
							"key5688": &armcompute.UserAssignedIdentitiesValue{
								ClientID:    to.Ptr("aaaaaaaaaaa"),
								PrincipalID: to.Ptr("aaaaaaaaaaaaaaa"),
							},
						},
					},
					Plan: &armcompute.Plan{
						Name:          to.Ptr("aaaaaaaaaaaaaaaaaa"),
						Product:       to.Ptr("aaaaaaaaaaaaaaaaaaaaaa"),
						PromotionCode: to.Ptr("aaaaaaaaaaaaaa"),
						Publisher:     to.Ptr("aaaaaaaaaaaaaaaaa"),
					},
					Properties: &armcompute.VirtualMachineProperties{
						AdditionalCapabilities: &armcompute.AdditionalCapabilities{
							HibernationEnabled: to.Ptr(true),
							UltraSSDEnabled:    to.Ptr(true),
						},
						ApplicationProfile: &armcompute.ApplicationProfile{
							GalleryApplications: []*armcompute.VMGalleryApplication{
								{
									ConfigurationReference: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
									Order:                  to.Ptr[int32](4),
									PackageReferenceID:     to.Ptr("aaaaaaaaaaaaaaaaaaaaaa"),
									Tags:                   to.Ptr("aaaaa"),
								}},
						},
						AvailabilitySet: &armcompute.SubResource{
							ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
						},
						BillingProfile: &armcompute.BillingProfile{
							MaxPrice: to.Ptr[float64](26),
						},
						CapacityReservation: &armcompute.CapacityReservationProfile{
							CapacityReservationGroup: &armcompute.SubResource{
								ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
							},
						},
						DiagnosticsProfile: &armcompute.DiagnosticsProfile{
							BootDiagnostics: &armcompute.BootDiagnostics{
								Enabled:    to.Ptr(true),
								StorageURI: to.Ptr("aaaaaaaaaaaaaaaaaaaaa"),
							},
						},
						EvictionPolicy:       to.Ptr(armcompute.VirtualMachineEvictionPolicyTypesDeallocate),
						ExtensionsTimeBudget: to.Ptr("aaaaaaaaaaaaaaaaaaaaaa"),
						HardwareProfile: &armcompute.HardwareProfile{
							VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardA0),
							VMSizeProperties: &armcompute.VMSizeProperties{
								VCPUsAvailable: to.Ptr[int32](7),
								VCPUsPerCore:   to.Ptr[int32](14),
							},
						},
						Host: &armcompute.SubResource{
							ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
						},
						HostGroup: &armcompute.SubResource{
							ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
						},
						InstanceView: &armcompute.VirtualMachineInstanceView{
							AssignedHost: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
							BootDiagnostics: &armcompute.BootDiagnosticsInstanceView{
								ConsoleScreenshotBlobURI: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
								SerialConsoleLogBlobURI:  to.Ptr("aaaaaaaaaaaaaaaaaaa"),
								Status: &armcompute.InstanceViewStatus{
									Code:          to.Ptr("aaa"),
									DisplayStatus: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaa"),
									Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
									Message:       to.Ptr("aaaaaaaaaaaaaaaaaaa"),
									Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-01-14T16:43:41.657Z"); return t }()),
								},
							},
							ComputerName: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
							Disks: []*armcompute.DiskInstanceView{
								{
									Name: to.Ptr("a"),
									EncryptionSettings: []*armcompute.DiskEncryptionSettings{
										{
											DiskEncryptionKey: &armcompute.KeyVaultSecretReference{
												SecretURL: to.Ptr("aaaaaaaaa"),
												SourceVault: &armcompute.SubResource{
													ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
												},
											},
											Enabled: to.Ptr(true),
											KeyEncryptionKey: &armcompute.KeyVaultKeyReference{
												KeyURL: to.Ptr("aaaaaaaaaaaaa"),
												SourceVault: &armcompute.SubResource{
													ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
												},
											},
										}},
									Statuses: []*armcompute.InstanceViewStatus{
										{
											Code:          to.Ptr("aaa"),
											DisplayStatus: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaa"),
											Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
											Message:       to.Ptr("aaaaaaaaaaaaaaaaaaa"),
											Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-01-14T16:43:41.657Z"); return t }()),
										}},
								}},
							HyperVGeneration: to.Ptr(armcompute.HyperVGenerationTypeV1),
							MaintenanceRedeployStatus: &armcompute.MaintenanceRedeployStatus{
								IsCustomerInitiatedMaintenanceAllowed: to.Ptr(true),
								LastOperationMessage:                  to.Ptr("aa"),
								LastOperationResultCode:               to.Ptr(armcompute.MaintenanceOperationResultCodeTypesNone),
								MaintenanceWindowEndTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-01-14T16:43:41.682Z"); return t }()),
								MaintenanceWindowStartTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-01-14T16:43:41.682Z"); return t }()),
								PreMaintenanceWindowEndTime:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-01-14T16:43:41.682Z"); return t }()),
								PreMaintenanceWindowStartTime:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-01-14T16:43:41.682Z"); return t }()),
							},
							OSName:    to.Ptr("aaaaaaaaaaa"),
							OSVersion: to.Ptr("aaaaaaaaaaaaaa"),
							PatchStatus: &armcompute.VirtualMachinePatchStatus{
								AvailablePatchSummary: &armcompute.AvailablePatchSummary{
									AssessmentActivityID:          to.Ptr("aaaaaaaaaaaaaaaaaaa"),
									CriticalAndSecurityPatchCount: to.Ptr[int32](22),
									Error: &armcompute.APIError{
										Code: to.Ptr("aaaaaa"),
										Innererror: &armcompute.InnerError{
											Errordetail:   to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
											Exceptiontype: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
										},
										Message: to.Ptr("aaa"),
										Target:  to.Ptr("aaaaaaaaa"),
										Details: []*armcompute.APIErrorBase{
											{
												Code:    to.Ptr("aaaaaaaaaaaaaaaaaaaaa"),
												Message: to.Ptr("aaaaaaaaaaaaa"),
												Target:  to.Ptr("aaaaaa"),
											}},
									},
									LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-01-14T16:43:41.683Z"); return t }()),
									OtherPatchCount:  to.Ptr[int32](25),
									RebootPending:    to.Ptr(true),
									StartTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-01-14T16:43:41.682Z"); return t }()),
									Status:           to.Ptr(armcompute.PatchOperationStatusUnknown),
								},
								ConfigurationStatuses: []*armcompute.InstanceViewStatus{
									{
										Code:          to.Ptr("aaa"),
										DisplayStatus: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaa"),
										Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
										Message:       to.Ptr("aaaaaaaaaaaaaaaaaaa"),
										Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-01-14T16:43:41.657Z"); return t }()),
									}},
								LastPatchInstallationSummary: &armcompute.LastPatchInstallationSummary{
									Error: &armcompute.APIError{
										Code: to.Ptr("aaaaaa"),
										Innererror: &armcompute.InnerError{
											Errordetail:   to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
											Exceptiontype: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
										},
										Message: to.Ptr("aaa"),
										Target:  to.Ptr("aaaaaaaaa"),
										Details: []*armcompute.APIErrorBase{
											{
												Code:    to.Ptr("aaaaaaaaaaaaaaaaaaaaa"),
												Message: to.Ptr("aaaaaaaaaaaaa"),
												Target:  to.Ptr("aaaaaa"),
											}},
									},
									ExcludedPatchCount:        to.Ptr[int32](1),
									FailedPatchCount:          to.Ptr[int32](30),
									InstallationActivityID:    to.Ptr("aaaaaa"),
									InstalledPatchCount:       to.Ptr[int32](28),
									LastModifiedTime:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-01-14T16:43:41.683Z"); return t }()),
									MaintenanceWindowExceeded: to.Ptr(true),
									NotSelectedPatchCount:     to.Ptr[int32](20),
									PendingPatchCount:         to.Ptr[int32](2),
									StartTime:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-01-14T16:43:41.683Z"); return t }()),
									Status:                    to.Ptr(armcompute.PatchOperationStatusUnknown),
								},
							},
							PlatformFaultDomain:  to.Ptr[int32](29),
							PlatformUpdateDomain: to.Ptr[int32](1),
							RdpThumbPrint:        to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
							Statuses: []*armcompute.InstanceViewStatus{
								{
									Code:          to.Ptr("aaa"),
									DisplayStatus: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaa"),
									Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
									Message:       to.Ptr("aaaaaaaaaaaaaaaaaaa"),
									Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-01-14T16:43:41.657Z"); return t }()),
								}},
							VMAgent: &armcompute.VirtualMachineAgentInstanceView{
								ExtensionHandlers: []*armcompute.VirtualMachineExtensionHandlerInstanceView{
									{
										Type: to.Ptr("aaaaa"),
										Status: &armcompute.InstanceViewStatus{
											Code:          to.Ptr("aaa"),
											DisplayStatus: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaa"),
											Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
											Message:       to.Ptr("aaaaaaaaaaaaaaaaaaa"),
											Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-01-14T16:43:41.657Z"); return t }()),
										},
										TypeHandlerVersion: to.Ptr("aaaaaaaaaaaaaaaaaaa"),
									}},
								Statuses: []*armcompute.InstanceViewStatus{
									{
										Code:          to.Ptr("aaa"),
										DisplayStatus: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaa"),
										Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
										Message:       to.Ptr("aaaaaaaaaaaaaaaaaaa"),
										Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-01-14T16:43:41.657Z"); return t }()),
									}},
								VMAgentVersion: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
							},
							VMHealth: &armcompute.VirtualMachineHealthStatus{
								Status: &armcompute.InstanceViewStatus{
									Code:          to.Ptr("aaa"),
									DisplayStatus: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaa"),
									Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
									Message:       to.Ptr("aaaaaaaaaaaaaaaaaaa"),
									Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-01-14T16:43:41.657Z"); return t }()),
								},
							},
							Extensions: []*armcompute.VirtualMachineExtensionInstanceView{
								{
									Name: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaa"),
									Type: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaa"),
									Statuses: []*armcompute.InstanceViewStatus{
										{
											Code:          to.Ptr("aaa"),
											DisplayStatus: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaa"),
											Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
											Message:       to.Ptr("aaaaaaaaaaaaaaaaaaa"),
											Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-01-14T16:43:41.657Z"); return t }()),
										}},
									Substatuses: []*armcompute.InstanceViewStatus{
										{
											Code:          to.Ptr("aaa"),
											DisplayStatus: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaa"),
											Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
											Message:       to.Ptr("aaaaaaaaaaaaaaaaaaa"),
											Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-01-14T16:43:41.657Z"); return t }()),
										}},
									TypeHandlerVersion: to.Ptr("aaaaaa"),
								}},
						},
						LicenseType: to.Ptr("aaaaaaaaaaaaaa"),
						NetworkProfile: &armcompute.NetworkProfile{
							NetworkAPIVersion: to.Ptr(armcompute.NetworkAPIVersionTwoThousandTwenty1101),
							NetworkInterfaceConfigurations: []*armcompute.VirtualMachineNetworkInterfaceConfiguration{
								{
									Name: to.Ptr("aaaaaaaa"),
									Properties: &armcompute.VirtualMachineNetworkInterfaceConfigurationProperties{
										DeleteOption: to.Ptr(armcompute.DeleteOptionsDelete),
										DNSSettings: &armcompute.VirtualMachineNetworkInterfaceDNSSettingsConfiguration{
											DNSServers: []*string{
												to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaa")},
										},
										DscpConfiguration: &armcompute.SubResource{
											ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
										},
										EnableAcceleratedNetworking: to.Ptr(true),
										EnableFpga:                  to.Ptr(true),
										EnableIPForwarding:          to.Ptr(true),
										IPConfigurations: []*armcompute.VirtualMachineNetworkInterfaceIPConfiguration{
											{
												Name: to.Ptr("aaaaaaaa"),
												Properties: &armcompute.VirtualMachineNetworkInterfaceIPConfigurationProperties{
													ApplicationGatewayBackendAddressPools: []*armcompute.SubResource{
														{
															ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
														}},
													ApplicationSecurityGroups: []*armcompute.SubResource{
														{
															ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
														}},
													LoadBalancerBackendAddressPools: []*armcompute.SubResource{
														{
															ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
														}},
													Primary:                 to.Ptr(true),
													PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionsIPv4),
													PublicIPAddressConfiguration: &armcompute.VirtualMachinePublicIPAddressConfiguration{
														Name: to.Ptr("aaaaaaaaaaaaaaaaaa"),
														Properties: &armcompute.VirtualMachinePublicIPAddressConfigurationProperties{
															DeleteOption: to.Ptr(armcompute.DeleteOptionsDelete),
															DNSSettings: &armcompute.VirtualMachinePublicIPAddressDNSSettingsConfiguration{
																DomainNameLabel: to.Ptr("aaaaa"),
															},
															IdleTimeoutInMinutes: to.Ptr[int32](23),
															IPTags: []*armcompute.VirtualMachineIPTag{
																{
																	IPTagType: to.Ptr("aaaaa"),
																	Tag:       to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaa"),
																}},
															PublicIPAddressVersion:   to.Ptr(armcompute.IPVersionsIPv4),
															PublicIPAllocationMethod: to.Ptr(armcompute.PublicIPAllocationMethodDynamic),
															PublicIPPrefix: &armcompute.SubResource{
																ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
															},
														},
														SKU: &armcompute.PublicIPAddressSKU{
															Name: to.Ptr(armcompute.PublicIPAddressSKUNameBasic),
															Tier: to.Ptr(armcompute.PublicIPAddressSKUTierRegional),
														},
													},
													Subnet: &armcompute.SubResource{
														ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
													},
												},
											}},
										NetworkSecurityGroup: &armcompute.SubResource{
											ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
										},
										Primary: to.Ptr(true),
									},
								}},
							NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
								{
									ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkInterfaces/{networkInterfaceName}"),
									Properties: &armcompute.NetworkInterfaceReferenceProperties{
										DeleteOption: to.Ptr(armcompute.DeleteOptionsDelete),
										Primary:      to.Ptr(true),
									},
								}},
						},
						OSProfile: &armcompute.OSProfile{
							AdminPassword:            to.Ptr("{aaaaaaaaaaaaa}"),
							AdminUsername:            to.Ptr("Foo12"),
							AllowExtensionOperations: to.Ptr(true),
							ComputerName:             to.Ptr("Test"),
							CustomData:               to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
							LinuxConfiguration: &armcompute.LinuxConfiguration{
								DisablePasswordAuthentication: to.Ptr(true),
								PatchSettings: &armcompute.LinuxPatchSettings{
									AssessmentMode: to.Ptr(armcompute.LinuxPatchAssessmentModeImageDefault),
									PatchMode:      to.Ptr(armcompute.LinuxVMGuestPatchModeImageDefault),
								},
								ProvisionVMAgent: to.Ptr(true),
								SSH: &armcompute.SSHConfiguration{
									PublicKeys: []*armcompute.SSHPublicKey{
										{
											Path:    to.Ptr("aaaaaaaaaaaaaaaaaaaaaa"),
											KeyData: to.Ptr("aaa"),
										}},
								},
							},
							RequireGuestProvisionSignal: to.Ptr(true),
							Secrets:                     []*armcompute.VaultSecretGroup{},
							WindowsConfiguration: &armcompute.WindowsConfiguration{
								AdditionalUnattendContent: []*armcompute.AdditionalUnattendContent{
									{
										ComponentName: to.Ptr("Microsoft-Windows-Shell-Setup"),
										Content:       to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaa"),
										PassName:      to.Ptr("OobeSystem"),
										SettingName:   to.Ptr(armcompute.SettingNamesAutoLogon),
									}},
								EnableAutomaticUpdates: to.Ptr(true),
								PatchSettings: &armcompute.PatchSettings{
									AssessmentMode:    to.Ptr(armcompute.WindowsPatchAssessmentModeImageDefault),
									EnableHotpatching: to.Ptr(true),
									PatchMode:         to.Ptr(armcompute.WindowsVMGuestPatchModeManual),
								},
								ProvisionVMAgent: to.Ptr(true),
								TimeZone:         to.Ptr("aaaaaaaaaaaaaaaaaaaa"),
								WinRM: &armcompute.WinRMConfiguration{
									Listeners: []*armcompute.WinRMListener{
										{
											CertificateURL: to.Ptr("aaaaaaaaaaaaaaaaaaaaa"),
											Protocol:       to.Ptr(armcompute.ProtocolTypesHTTP),
										}},
								},
							},
						},
						PlatformFaultDomain: to.Ptr[int32](11),
						Priority:            to.Ptr(armcompute.VirtualMachinePriorityTypesRegular),
						ProvisioningState:   to.Ptr("Succeeded"),
						ProximityPlacementGroup: &armcompute.SubResource{
							ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
						},
						ScheduledEventsProfile: &armcompute.ScheduledEventsProfile{
							TerminateNotificationProfile: &armcompute.TerminateNotificationProfile{
								Enable:           to.Ptr(true),
								NotBeforeTimeout: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
							},
						},
						SecurityProfile: &armcompute.SecurityProfile{
							EncryptionAtHost: to.Ptr(true),
							SecurityType:     to.Ptr(armcompute.SecurityTypesTrustedLaunch),
							UefiSettings: &armcompute.UefiSettings{
								SecureBootEnabled: to.Ptr(true),
								VTpmEnabled:       to.Ptr(true),
							},
						},
						StorageProfile: &armcompute.StorageProfile{
							DataDisks: []*armcompute.DataDisk{},
							ImageReference: &armcompute.ImageReference{
								ID:                      to.Ptr("aaaaaaaa"),
								CommunityGalleryImageID: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
								ExactVersion:            to.Ptr("aa"),
								Offer:                   to.Ptr("WindowsServer"),
								Publisher:               to.Ptr("MicrosoftWindowsServer"),
								SharedGalleryImageID:    to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaa"),
								SKU:                     to.Ptr("2012-R2-Datacenter"),
								Version:                 to.Ptr("4.127.20170406"),
							},
							OSDisk: &armcompute.OSDisk{
								Name:         to.Ptr("test"),
								Caching:      to.Ptr(armcompute.CachingTypesNone),
								CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
								DeleteOption: to.Ptr(armcompute.DiskDeleteOptionTypesDelete),
								DiffDiskSettings: &armcompute.DiffDiskSettings{
									Option:    to.Ptr(armcompute.DiffDiskOptionsLocal),
									Placement: to.Ptr(armcompute.DiffDiskPlacementCacheDisk),
								},
								DiskSizeGB: to.Ptr[int32](127),
								EncryptionSettings: &armcompute.DiskEncryptionSettings{
									DiskEncryptionKey: &armcompute.KeyVaultSecretReference{
										SecretURL: to.Ptr("aaaaaaaaa"),
										SourceVault: &armcompute.SubResource{
											ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
										},
									},
									Enabled: to.Ptr(true),
									KeyEncryptionKey: &armcompute.KeyVaultKeyReference{
										KeyURL: to.Ptr("aaaaaaaaaaaaa"),
										SourceVault: &armcompute.SubResource{
											ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
										},
									},
								},
								Image: &armcompute.VirtualHardDisk{
									URI: to.Ptr("https://{storageAccountName}.blob.core.windows.net/{containerName}/{vhdName}.vhd"),
								},
								ManagedDisk: &armcompute.ManagedDiskParameters{
									ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/testingexcludedisk_OsDisk_1_74cdaedcea50483d9833c96adefa100f"),
									DiskEncryptionSet: &armcompute.DiskEncryptionSetParameters{
										ID: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
									},
									SecurityProfile: &armcompute.VMDiskSecurityProfile{
										DiskEncryptionSet: &armcompute.DiskEncryptionSetParameters{
											ID: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
										},
										SecurityEncryptionType: to.Ptr(armcompute.SecurityEncryptionTypesVMGuestStateOnly),
									},
									StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
								},
								OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
								Vhd: &armcompute.VirtualHardDisk{
									URI: to.Ptr("https://{storageAccountName}.blob.core.windows.net/{containerName}/{vhdName}.vhd"),
								},
								WriteAcceleratorEnabled: to.Ptr(true),
							},
						},
						TimeCreated: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-01-14T16:43:41.685Z"); return t }()),
						UserData:    to.Ptr("aaaaaaaaaaaaaaaaaaa"),
						VirtualMachineScaleSet: &armcompute.SubResource{
							ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
						},
						VMID: to.Ptr("{vmId}"),
					},
					Resources: []*armcompute.VirtualMachineExtension{
						{
							Name:     to.Ptr("aaaaaaaaaaaaa"),
							Type:     to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaa"),
							ID:       to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
							Location: to.Ptr("aaaaaaaaaaaaaaaa"),
							Tags: map[string]*string{
								"key9428": to.Ptr("aaaaaaa"),
							},
							Properties: &armcompute.VirtualMachineExtensionProperties{
								Type:                    to.Ptr("aaaaaaaa"),
								AutoUpgradeMinorVersion: to.Ptr(true),
								EnableAutomaticUpgrade:  to.Ptr(true),
								ForceUpdateTag:          to.Ptr("aaaaaaaaaaaaaaa"),
								InstanceView: &armcompute.VirtualMachineExtensionInstanceView{
									Name: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaa"),
									Type: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaa"),
									Statuses: []*armcompute.InstanceViewStatus{
										{
											Code:          to.Ptr("aaa"),
											DisplayStatus: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaa"),
											Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
											Message:       to.Ptr("aaaaaaaaaaaaaaaaaaa"),
											Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-01-14T16:43:41.657Z"); return t }()),
										}},
									Substatuses: []*armcompute.InstanceViewStatus{
										{
											Code:          to.Ptr("aaa"),
											DisplayStatus: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaa"),
											Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
											Message:       to.Ptr("aaaaaaaaaaaaaaaaaaa"),
											Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-01-14T16:43:41.657Z"); return t }()),
										}},
									TypeHandlerVersion: to.Ptr("aaaaaa"),
								},
								ProtectedSettings:             map[string]interface{}{},
								ProtectedSettingsFromKeyVault: map[string]interface{}{},
								ProvisioningState:             to.Ptr("Succeeded"),
								Publisher:                     to.Ptr("aaaaaaaaaaaaaaaa"),
								Settings:                      map[string]interface{}{},
								SuppressFailures:              to.Ptr(true),
								TypeHandlerVersion:            to.Ptr("aaaaaaaaaaaa"),
							},
						}},
					Zones: []*string{
						to.Ptr("aaaaaa")},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.VirtualMachineListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.VirtualMachineListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachines_ListAll_MaximumSet_Gen.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachines_ListAll_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachines_ListAll_MinimumSet_Gen"},
	})
	client, err = armcompute.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager = client.NewListAllPager(&armcompute.VirtualMachinesClientListAllOptions{StatusOnly: nil,
		Filter: nil,
	})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachines_ListAll_MinimumSet_Gen.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcompute.VirtualMachineListResult{
			Value: []*armcompute.VirtualMachine{
				{
					Location: to.Ptr("eastus"),
				},
				{
					Location: to.Ptr("eastus"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.VirtualMachineListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.VirtualMachineListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachines_ListAll_MinimumSet_Gen.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualMachines_ListAvailableSizes(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/ListAvailableVmSizes_VirtualMachines.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Lists all available virtual machine sizes to which the specified virtual machine can be resized"},
	})
	client, err := armcompute.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := client.NewListAvailableSizesPager("myResourceGroup",
		"myVmName",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/ListAvailableVmSizes_VirtualMachines.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcompute.VirtualMachineSizeListResult{
			Value: []*armcompute.VirtualMachineSize{
				{
					Name:                 to.Ptr("Standard_A1_V2"),
					MaxDataDiskCount:     to.Ptr[int32](2),
					MemoryInMB:           to.Ptr[int32](2048),
					NumberOfCores:        to.Ptr[int32](1),
					OSDiskSizeInMB:       to.Ptr[int32](1047552),
					ResourceDiskSizeInMB: to.Ptr[int32](10240),
				},
				{
					Name:                 to.Ptr("Standard_A2_V2"),
					MaxDataDiskCount:     to.Ptr[int32](4),
					MemoryInMB:           to.Ptr[int32](4096),
					NumberOfCores:        to.Ptr[int32](2),
					OSDiskSizeInMB:       to.Ptr[int32](1047552),
					ResourceDiskSizeInMB: to.Ptr[int32](20480),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.VirtualMachineSizeListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.VirtualMachineSizeListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/ListAvailableVmSizes_VirtualMachines.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualMachines_PowerOff(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachines_PowerOff_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachines_PowerOff_MaximumSet_Gen"},
	})
	client, err := armcompute.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginPowerOff(ctx,
		"rgcompute",
		"aaaaaaaaaaaaaaaaaaaaaaaaaaa",
		&armcompute.VirtualMachinesClientBeginPowerOffOptions{SkipShutdown: to.Ptr(true),
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachines_PowerOff_MaximumSet_Gen.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachines_PowerOff_MaximumSet_Gen.json: %v", err)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachines_PowerOff_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachines_PowerOff_MinimumSet_Gen"},
	})
	client, err = armcompute.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginPowerOff(ctx,
		"rgcompute",
		"aaaaaaaaaaaaaaaaaa",
		&armcompute.VirtualMachinesClientBeginPowerOffOptions{SkipShutdown: nil,
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachines_PowerOff_MinimumSet_Gen.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachines_PowerOff_MinimumSet_Gen.json: %v", err)
	}
}

func TestVirtualMachines_Reapply(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/ReapplyVirtualMachine.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Reapply the state of a virtual machine."},
	})
	client, err := armcompute.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginReapply(ctx,
		"ResourceGroup",
		"VMName",
		&armcompute.VirtualMachinesClientBeginReapplyOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/ReapplyVirtualMachine.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/ReapplyVirtualMachine.json: %v", err)
	}
}

func TestVirtualMachines_Restart(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachines_Restart_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachines_Restart_MaximumSet_Gen"},
	})
	client, err := armcompute.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginRestart(ctx,
		"rgcompute",
		"aaaaaaaaaaaaaaaaaaaa",
		&armcompute.VirtualMachinesClientBeginRestartOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachines_Restart_MaximumSet_Gen.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachines_Restart_MaximumSet_Gen.json: %v", err)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachines_Restart_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachines_Restart_MinimumSet_Gen"},
	})
	client, err = armcompute.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginRestart(ctx,
		"rgcompute",
		"aaa",
		&armcompute.VirtualMachinesClientBeginRestartOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachines_Restart_MinimumSet_Gen.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachines_Restart_MinimumSet_Gen.json: %v", err)
	}
}

func TestVirtualMachines_Start(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachines_Start_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachines_Start_MaximumSet_Gen"},
	})
	client, err := armcompute.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginStart(ctx,
		"rgcompute",
		"aaaaaaaaaaaaaaaaaaaa",
		&armcompute.VirtualMachinesClientBeginStartOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachines_Start_MaximumSet_Gen.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachines_Start_MaximumSet_Gen.json: %v", err)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachines_Start_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachines_Start_MinimumSet_Gen"},
	})
	client, err = armcompute.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginStart(ctx,
		"rgcompute",
		"aaaaa",
		&armcompute.VirtualMachinesClientBeginStartOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachines_Start_MinimumSet_Gen.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachines_Start_MinimumSet_Gen.json: %v", err)
	}
}

func TestVirtualMachines_Redeploy(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachines_Redeploy_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachines_Redeploy_MaximumSet_Gen"},
	})
	client, err := armcompute.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginRedeploy(ctx,
		"rgcompute",
		"a",
		&armcompute.VirtualMachinesClientBeginRedeployOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachines_Redeploy_MaximumSet_Gen.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachines_Redeploy_MaximumSet_Gen.json: %v", err)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachines_Redeploy_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachines_Redeploy_MinimumSet_Gen"},
	})
	client, err = armcompute.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginRedeploy(ctx,
		"rgcompute",
		"aaaaaaaaaaaaaaa",
		&armcompute.VirtualMachinesClientBeginRedeployOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachines_Redeploy_MinimumSet_Gen.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachines_Redeploy_MinimumSet_Gen.json: %v", err)
	}
}

func TestVirtualMachines_Reimage(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/ReimageVirtualMachine.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Reimage a Virtual Machine."},
	})
	client, err := armcompute.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginReimage(ctx,
		"myResourceGroup",
		"myVMName",
		&armcompute.VirtualMachinesClientBeginReimageOptions{Parameters: &armcompute.VirtualMachineReimageParameters{
			TempDisk: to.Ptr(true),
		},
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/ReimageVirtualMachine.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/ReimageVirtualMachine.json: %v", err)
	}
}

func TestVirtualMachines_RetrieveBootDiagnosticsData(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/RetrieveBootDiagnosticsDataVirtualMachine.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RetrieveBootDiagnosticsData of a virtual machine."},
	})
	client, err := armcompute.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := client.RetrieveBootDiagnosticsData(ctx,
		"ResourceGroup",
		"VMName",
		&armcompute.VirtualMachinesClientRetrieveBootDiagnosticsDataOptions{SasURIExpirationTimeInMinutes: to.Ptr[int32](60)})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/RetrieveBootDiagnosticsDataVirtualMachine.json: %v", err)
	}
	// Response check
	exampleRes := armcompute.RetrieveBootDiagnosticsDataResult{
		ConsoleScreenshotBlobURI: to.Ptr("https://storageuri/vm.screenshot.bmp?{sasKey}"),
		SerialConsoleLogBlobURI:  to.Ptr("https://storageuri/vm.serialconsole.log?{sasKey}"),
	}
	if !reflect.DeepEqual(exampleRes, res.RetrieveBootDiagnosticsDataResult) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.RetrieveBootDiagnosticsDataResult)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/RetrieveBootDiagnosticsDataVirtualMachine.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestVirtualMachines_PerformMaintenance(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachines_PerformMaintenance_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachines_PerformMaintenance_MaximumSet_Gen"},
	})
	client, err := armcompute.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginPerformMaintenance(ctx,
		"rgcompute",
		"aaaaaaa",
		&armcompute.VirtualMachinesClientBeginPerformMaintenanceOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachines_PerformMaintenance_MaximumSet_Gen.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachines_PerformMaintenance_MaximumSet_Gen.json: %v", err)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachines_PerformMaintenance_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachines_PerformMaintenance_MinimumSet_Gen"},
	})
	client, err = armcompute.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginPerformMaintenance(ctx,
		"rgcompute",
		"aaaaaaaaaa",
		&armcompute.VirtualMachinesClientBeginPerformMaintenanceOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachines_PerformMaintenance_MinimumSet_Gen.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachines_PerformMaintenance_MinimumSet_Gen.json: %v", err)
	}
}

func TestVirtualMachines_SimulateEviction(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/SimulateEvictionOfVM.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Simulate Eviction a virtual machine."},
	})
	client, err := armcompute.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	_, err = client.SimulateEviction(ctx,
		"ResourceGroup",
		"VMName",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/SimulateEvictionOfVM.json: %v", err)
	}
}

func TestVirtualMachines_AssessPatches(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineAssessPatches.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Assess patch state of a virtual machine."},
	})
	client, err := armcompute.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginAssessPatches(ctx,
		"myResourceGroupName",
		"myVMName",
		&armcompute.VirtualMachinesClientBeginAssessPatchesOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineAssessPatches.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineAssessPatches.json: %v", err)
	}
	// Response check
	exampleRes := armcompute.VirtualMachineAssessPatchesResult{
		AssessmentActivityID: to.Ptr("68f8b292-dfc2-4646-9781-33cc88631968"),
		AvailablePatches: []*armcompute.VirtualMachineSoftwarePatchProperties{
			{
				Name:            to.Ptr("Definition Update for Windows Defender Antivirus - KB2267602 (Definition 1.279.1373.0)"),
				ActivityID:      to.Ptr("68f8b292-dfc2-4646-9781-33cc88631968"),
				AssessmentState: to.Ptr(armcompute.PatchAssessmentStateAvailable),
				Classifications: []*string{
					to.Ptr("Definition Updates")},
				KbID:                 to.Ptr("2267602"),
				LastModifiedDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-24T21:18:45.2830263Z"); return t }()),
				PatchID:              to.Ptr("35428702-5784-4ba4-a6e0-5222258b5411"),
				PublishedDate:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-11-07T00:00:00Z"); return t }()),
				RebootBehavior:       to.Ptr(armcompute.VMGuestPatchRebootBehaviorNeverReboots),
				Version:              to.Ptr(""),
			},
			{
				Name:            to.Ptr("Windows Malicious Software Removal Tool x64 - October 2018 (KB890830)"),
				ActivityID:      to.Ptr("68f8b292-dfc2-4646-9781-33cc88631968"),
				AssessmentState: to.Ptr(armcompute.PatchAssessmentStateAvailable),
				Classifications: []*string{
					to.Ptr("Update Rollups")},
				KbID:                 to.Ptr("890830"),
				LastModifiedDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-24T21:18:45.2830263Z"); return t }()),
				PatchID:              to.Ptr("39f9cdd1-795c-4d0e-8c0a-73ab3f31746d"),
				PublishedDate:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-11-07T00:00:00Z"); return t }()),
				RebootBehavior:       to.Ptr(armcompute.VMGuestPatchRebootBehaviorCanRequestReboot),
				Version:              to.Ptr(""),
			}},
		CriticalAndSecurityPatchCount: to.Ptr[int32](1),
		OtherPatchCount:               to.Ptr[int32](2),
		RebootPending:                 to.Ptr(true),
		StartDateTime:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-24T21:02:04.2556154Z"); return t }()),
		Status:                        to.Ptr(armcompute.PatchOperationStatusSucceeded),
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineAssessPatchesResult) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineAssessPatchesResult)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineAssessPatches.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestVirtualMachines_InstallPatches(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineInstallPatches.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Install patch state of a virtual machine."},
	})
	client, err := armcompute.NewVirtualMachinesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginInstallPatches(ctx,
		"myResourceGroupName",
		"myVMName",
		armcompute.VirtualMachineInstallPatchesParameters{
			MaximumDuration: to.Ptr("PT4H"),
			RebootSetting:   to.Ptr(armcompute.VMGuestPatchRebootSettingIfRequired),
			WindowsParameters: &armcompute.WindowsParameters{
				ClassificationsToInclude: []*armcompute.VMGuestPatchClassificationWindows{
					to.Ptr(armcompute.VMGuestPatchClassificationWindowsCritical),
					to.Ptr(armcompute.VMGuestPatchClassificationWindowsSecurity)},
				MaxPatchPublishDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-11-19T02:36:43.0539904+00:00"); return t }()),
			},
		},
		&armcompute.VirtualMachinesClientBeginInstallPatchesOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineInstallPatches.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineInstallPatches.json: %v", err)
	}
	// Response check
	exampleRes := armcompute.VirtualMachineInstallPatchesResult{
		ExcludedPatchCount:        to.Ptr[int32](0),
		FailedPatchCount:          to.Ptr[int32](0),
		InstallationActivityID:    to.Ptr("68f8b292-dfc2-4646-9781-33cc88631968"),
		InstalledPatchCount:       to.Ptr[int32](3),
		MaintenanceWindowExceeded: to.Ptr(false),
		NotSelectedPatchCount:     to.Ptr[int32](0),
		Patches: []*armcompute.PatchInstallationDetail{
			{
				Name: to.Ptr("Definition Update for Windows Defender Antivirus - KB2267602 (Definition 1.279.1373.0)"),
				Classifications: []*string{
					to.Ptr("Definition Updates")},
				InstallationState: to.Ptr(armcompute.PatchInstallationStateInstalled),
				KbID:              to.Ptr("2267602"),
				PatchID:           to.Ptr("35428702-5784-4ba4-a6e0-5222258b5411"),
				Version:           to.Ptr(""),
			},
			{
				Name: to.Ptr("Windows Malicious Software Removal Tool x64 - October 2018 (KB890830)"),
				Classifications: []*string{
					to.Ptr("Update Rollups")},
				InstallationState: to.Ptr(armcompute.PatchInstallationStatePending),
				KbID:              to.Ptr("890830"),
				PatchID:           to.Ptr("39f9cdd1-795c-4d0e-8c0a-73ab3f31746d"),
				Version:           to.Ptr(""),
			}},
		PendingPatchCount: to.Ptr[int32](2),
		RebootStatus:      to.Ptr(armcompute.VMGuestPatchRebootStatusCompleted),
		StartDateTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-24T21:02:04.2556154Z"); return t }()),
		Status:            to.Ptr(armcompute.PatchOperationStatusSucceeded),
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineInstallPatchesResult) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineInstallPatchesResult)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineInstallPatches.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestVirtualMachines_RunCommand(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/runCommands/VirtualMachineRunCommand.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineRunCommand"},
	})
	client, err := armcompute.NewVirtualMachinesClient("24fb23e3-6ba3-41f0-9b6e-e41131d5d61e", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginRunCommand(ctx,
		"crptestar98131",
		"vm3036",
		armcompute.RunCommandInput{
			CommandID: to.Ptr("RunPowerShellScript"),
		},
		&armcompute.VirtualMachinesClientBeginRunCommandOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/runCommands/VirtualMachineRunCommand.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/runCommands/VirtualMachineRunCommand.json: %v", err)
	}
	// Response check
	exampleRes := armcompute.RunCommandResult{
		Value: []*armcompute.InstanceViewStatus{
			{
				Code:          to.Ptr("ComponentStatus/StdOut/succeeded"),
				DisplayStatus: to.Ptr("Provisioning succeeded"),
				Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
				Message:       to.Ptr("This is a sample script with parameters value1 value2"),
			},
			{
				Code:          to.Ptr("ComponentStatus/StdErr/succeeded"),
				DisplayStatus: to.Ptr("Provisioning succeeded"),
				Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
				Message:       to.Ptr(""),
			}},
	}
	if !reflect.DeepEqual(exampleRes, res.RunCommandResult) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.RunCommandResult)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/runCommands/VirtualMachineRunCommand.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestVirtualMachineScaleSets_ListByLocation(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/ListVirtualMachineScaleSetsInASubscriptionByLocation.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Lists all the VM scale sets under the specified subscription for the specified location."},
	})
	client, err := armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := client.NewListByLocationPager("eastus",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/ListVirtualMachineScaleSetsInASubscriptionByLocation.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcompute.VirtualMachineScaleSetListResult{
			Value: []*armcompute.VirtualMachineScaleSet{
				{
					Name:     to.Ptr("{virtualMachineScaleSetName}"),
					Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
					ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{virtualMachineScaleSetName}"),
					Location: to.Ptr("eastus"),
					Tags: map[string]*string{
						"myTag1": to.Ptr("tagValue1"),
					},
					Properties: &armcompute.VirtualMachineScaleSetProperties{
						DoNotRunExtensionsOnOverprovisionedVMs: to.Ptr(false),
						Overprovision:                          to.Ptr(false),
						PlatformFaultDomainCount:               to.Ptr[int32](1),
						ProvisioningState:                      to.Ptr("Succeeded"),
						SinglePlacementGroup:                   to.Ptr(false),
						UpgradePolicy: &armcompute.UpgradePolicy{
							AutomaticOSUpgradePolicy: &armcompute.AutomaticOSUpgradePolicy{
								EnableAutomaticOSUpgrade: to.Ptr(false),
							},
							Mode: to.Ptr(armcompute.UpgradeModeAutomatic),
						},
						VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
							NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
								NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
									{
										Name: to.Ptr("myNic"),
										Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
											IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
												{
													Name: to.Ptr("myIPConfig"),
													Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
														Primary: to.Ptr(true),
														Subnet: &armcompute.APIEntityReference{
															ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/myVNet/subnets/mySubnet"),
														},
													},
												}},
											NetworkSecurityGroup: &armcompute.SubResource{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkSecurityGroups/myNetworkSecurityGroup"),
											},
											Primary: to.Ptr(true),
										},
									}},
							},
							OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
								AdminUsername:      to.Ptr("admin"),
								ComputerNamePrefix: to.Ptr("{virtualMachineScaleSetName}"),
								LinuxConfiguration: &armcompute.LinuxConfiguration{
									DisablePasswordAuthentication: to.Ptr(false),
								},
							},
							StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
								DataDisks: []*armcompute.VirtualMachineScaleSetDataDisk{},
								ImageReference: &armcompute.ImageReference{
									Offer:     to.Ptr("databricks"),
									Publisher: to.Ptr("azuredatabricks"),
									SKU:       to.Ptr("databricksworker"),
									Version:   to.Ptr("3.15.2"),
								},
								OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
									Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
									CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
									DiskSizeGB:   to.Ptr[int32](30),
									ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
										StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
									},
								},
							},
						},
					},
					SKU: &armcompute.SKU{
						Name:     to.Ptr("Standard_D2s_v3"),
						Capacity: to.Ptr[int64](4),
						Tier:     to.Ptr("Standard"),
					},
				},
				{
					Name:     to.Ptr("{virtualMachineScaleSetName}"),
					Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
					ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{virtualMachineScaleSetName}1"),
					Location: to.Ptr("eastus"),
					Tags: map[string]*string{
						"myTag1": to.Ptr("tagValue2"),
					},
					Properties: &armcompute.VirtualMachineScaleSetProperties{
						DoNotRunExtensionsOnOverprovisionedVMs: to.Ptr(false),
						Overprovision:                          to.Ptr(false),
						PlatformFaultDomainCount:               to.Ptr[int32](1),
						ProvisioningState:                      to.Ptr("Succeeded"),
						SinglePlacementGroup:                   to.Ptr(false),
						UpgradePolicy: &armcompute.UpgradePolicy{
							AutomaticOSUpgradePolicy: &armcompute.AutomaticOSUpgradePolicy{
								EnableAutomaticOSUpgrade: to.Ptr(false),
							},
							Mode: to.Ptr(armcompute.UpgradeModeAutomatic),
						},
						VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
							NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
								NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
									{
										Name: to.Ptr("myNic1"),
										Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
											IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
												{
													Name: to.Ptr("myIPConfig"),
													Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
														Primary: to.Ptr(true),
														Subnet: &armcompute.APIEntityReference{
															ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/myVNet/subnets/mySubnet"),
														},
													},
												}},
											NetworkSecurityGroup: &armcompute.SubResource{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkSecurityGroups/myNetworkSecurityGroup"),
											},
											Primary: to.Ptr(true),
										},
									}},
							},
							OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
								AdminUsername:      to.Ptr("admin"),
								ComputerNamePrefix: to.Ptr("{virtualMachineScaleSetName}"),
								LinuxConfiguration: &armcompute.LinuxConfiguration{
									DisablePasswordAuthentication: to.Ptr(false),
								},
							},
							StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
								DataDisks: []*armcompute.VirtualMachineScaleSetDataDisk{},
								ImageReference: &armcompute.ImageReference{
									Offer:     to.Ptr("databricks"),
									Publisher: to.Ptr("azuredatabricks"),
									SKU:       to.Ptr("databricksworker"),
									Version:   to.Ptr("3.15.2"),
								},
								OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
									Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
									CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
									DiskSizeGB:   to.Ptr[int32](30),
									ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
										StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
									},
								},
							},
						},
					},
					SKU: &armcompute.SKU{
						Name:     to.Ptr("Standard_D2s_v3"),
						Capacity: to.Ptr[int64](4),
						Tier:     to.Ptr("Standard"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.VirtualMachineScaleSetListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.VirtualMachineScaleSetListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/ListVirtualMachineScaleSetsInASubscriptionByLocation.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualMachineScaleSets_CreateOrUpdate(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAScaleSetWithExtensionsSuppressFailuresEnabled.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a VMSS with an extension that has suppressFailures enabled"},
	})
	client, err := armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"{vmss-name}",
		armcompute.VirtualMachineScaleSet{
			Location: to.Ptr("westus"),
			Properties: &armcompute.VirtualMachineScaleSetProperties{
				Overprovision: to.Ptr(true),
				UpgradePolicy: &armcompute.UpgradePolicy{
					Mode: to.Ptr(armcompute.UpgradeModeManual),
				},
				VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
					DiagnosticsProfile: &armcompute.DiagnosticsProfile{
						BootDiagnostics: &armcompute.BootDiagnostics{
							Enabled:    to.Ptr(true),
							StorageURI: to.Ptr("http://{existing-storage-account-name}.blob.core.windows.net"),
						},
					},
					ExtensionProfile: &armcompute.VirtualMachineScaleSetExtensionProfile{
						Extensions: []*armcompute.VirtualMachineScaleSetExtension{
							{
								Name: to.Ptr("{extension-name}"),
								Properties: &armcompute.VirtualMachineScaleSetExtensionProperties{
									Type:                    to.Ptr("{extension-Type}"),
									AutoUpgradeMinorVersion: to.Ptr(false),
									Publisher:               to.Ptr("{extension-Publisher}"),
									Settings:                map[string]interface{}{},
									SuppressFailures:        to.Ptr(true),
									TypeHandlerVersion:      to.Ptr("{handler-version}"),
								},
							}},
					},
					NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
						NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
							{
								Name: to.Ptr("{vmss-name}"),
								Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
									EnableIPForwarding: to.Ptr(true),
									IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
										{
											Name: to.Ptr("{vmss-name}"),
											Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
												Subnet: &armcompute.APIEntityReference{
													ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
												},
											},
										}},
									Primary: to.Ptr(true),
								},
							}},
					},
					OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
						AdminPassword:      to.Ptr("{your-password}"),
						AdminUsername:      to.Ptr("{your-username}"),
						ComputerNamePrefix: to.Ptr("{vmss-name}"),
					},
					StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
						ImageReference: &armcompute.ImageReference{
							Offer:     to.Ptr("WindowsServer"),
							Publisher: to.Ptr("MicrosoftWindowsServer"),
							SKU:       to.Ptr("2016-Datacenter"),
							Version:   to.Ptr("latest"),
						},
						OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
							Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
							CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
							ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
								StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
							},
						},
					},
				},
			},
			SKU: &armcompute.SKU{
				Name:     to.Ptr("Standard_D1_v2"),
				Capacity: to.Ptr[int64](3),
				Tier:     to.Ptr("Standard"),
			},
		},
		&armcompute.VirtualMachineScaleSetsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAScaleSetWithExtensionsSuppressFailuresEnabled.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAScaleSetWithExtensionsSuppressFailuresEnabled.json: %v", err)
	}
	// Response check
	exampleRes := armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{vmss-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision:        to.Ptr(true),
			ProvisioningState:    to.Ptr("Succeeded"),
			SinglePlacementGroup: to.Ptr(true),
			UniqueID:             to.Ptr("d053ec5a-8da6-495f-ab13-38216503c6d7"),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				DiagnosticsProfile: &armcompute.DiagnosticsProfile{
					BootDiagnostics: &armcompute.BootDiagnostics{
						Enabled:    to.Ptr(true),
						StorageURI: to.Ptr("http://nsgdiagnostic.blob.core.windows.net"),
					},
				},
				ExtensionProfile: &armcompute.VirtualMachineScaleSetExtensionProfile{
					Extensions: []*armcompute.VirtualMachineScaleSetExtension{
						{
							Name: to.Ptr("{extension-name}"),
							Properties: &armcompute.VirtualMachineScaleSetExtensionProperties{
								Type:                    to.Ptr("{extension-Type}"),
								AutoUpgradeMinorVersion: to.Ptr(false),
								Publisher:               to.Ptr("{extension-Publisher}"),
								Settings:                map[string]interface{}{},
								SuppressFailures:        to.Ptr(true),
								TypeHandlerVersion:      to.Ptr("{handler-version}"),
							},
						}},
				},
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
					Secrets:            []*armcompute.VaultSecretGroup{},
					WindowsConfiguration: &armcompute.WindowsConfiguration{
						EnableAutomaticUpdates: to.Ptr(true),
						ProvisionVMAgent:       to.Ptr(true),
					},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineScaleSet)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAScaleSetWithExtensionsSuppressFailuresEnabled.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAScaleSetWithProtectedSettingsFromKeyVault.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a VMSS with an extension with protectedSettingsFromKeyVault"},
	})
	client, err = armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"{vmss-name}",
		armcompute.VirtualMachineScaleSet{
			Location: to.Ptr("westus"),
			Properties: &armcompute.VirtualMachineScaleSetProperties{
				Overprovision: to.Ptr(true),
				UpgradePolicy: &armcompute.UpgradePolicy{
					Mode: to.Ptr(armcompute.UpgradeModeManual),
				},
				VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
					DiagnosticsProfile: &armcompute.DiagnosticsProfile{
						BootDiagnostics: &armcompute.BootDiagnostics{
							Enabled:    to.Ptr(true),
							StorageURI: to.Ptr("http://{existing-storage-account-name}.blob.core.windows.net"),
						},
					},
					ExtensionProfile: &armcompute.VirtualMachineScaleSetExtensionProfile{
						Extensions: []*armcompute.VirtualMachineScaleSetExtension{
							{
								Name: to.Ptr("{extension-name}"),
								Properties: &armcompute.VirtualMachineScaleSetExtensionProperties{
									Type:                    to.Ptr("{extension-Type}"),
									AutoUpgradeMinorVersion: to.Ptr(false),
									ProtectedSettingsFromKeyVault: map[string]interface{}{
										"secretUrl": "https://kvName.vault.azure.net/secrets/secretName/79b88b3a6f5440ffb2e73e44a0db712e",
										"sourceVault": map[string]interface{}{
											"id": "/subscriptions/a53f7094-a16c-47af-abe4-b05c05d0d79a/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/kvName",
										},
									},
									Publisher:          to.Ptr("{extension-Publisher}"),
									Settings:           map[string]interface{}{},
									TypeHandlerVersion: to.Ptr("{handler-version}"),
								},
							}},
					},
					NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
						NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
							{
								Name: to.Ptr("{vmss-name}"),
								Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
									EnableIPForwarding: to.Ptr(true),
									IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
										{
											Name: to.Ptr("{vmss-name}"),
											Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
												Subnet: &armcompute.APIEntityReference{
													ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
												},
											},
										}},
									Primary: to.Ptr(true),
								},
							}},
					},
					OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
						AdminPassword:      to.Ptr("{your-password}"),
						AdminUsername:      to.Ptr("{your-username}"),
						ComputerNamePrefix: to.Ptr("{vmss-name}"),
					},
					StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
						ImageReference: &armcompute.ImageReference{
							Offer:     to.Ptr("WindowsServer"),
							Publisher: to.Ptr("MicrosoftWindowsServer"),
							SKU:       to.Ptr("2016-Datacenter"),
							Version:   to.Ptr("latest"),
						},
						OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
							Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
							CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
							ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
								StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
							},
						},
					},
				},
			},
			SKU: &armcompute.SKU{
				Name:     to.Ptr("Standard_D1_v2"),
				Capacity: to.Ptr[int64](3),
				Tier:     to.Ptr("Standard"),
			},
		},
		&armcompute.VirtualMachineScaleSetsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAScaleSetWithProtectedSettingsFromKeyVault.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAScaleSetWithProtectedSettingsFromKeyVault.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{vmss-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision:        to.Ptr(true),
			ProvisioningState:    to.Ptr("Succeeded"),
			SinglePlacementGroup: to.Ptr(true),
			UniqueID:             to.Ptr("d053ec5a-8da6-495f-ab13-38216503c6d7"),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				DiagnosticsProfile: &armcompute.DiagnosticsProfile{
					BootDiagnostics: &armcompute.BootDiagnostics{
						Enabled:    to.Ptr(true),
						StorageURI: to.Ptr("http://nsgdiagnostic.blob.core.windows.net"),
					},
				},
				ExtensionProfile: &armcompute.VirtualMachineScaleSetExtensionProfile{
					Extensions: []*armcompute.VirtualMachineScaleSetExtension{
						{
							Name: to.Ptr("{extension-name}"),
							Properties: &armcompute.VirtualMachineScaleSetExtensionProperties{
								Type:                    to.Ptr("{extension-Type}"),
								AutoUpgradeMinorVersion: to.Ptr(false),
								ProtectedSettingsFromKeyVault: map[string]interface{}{
									"secretUrl": "https://kvName.vault.azure.net/secrets/secretName/79b88b3a6f5440ffb2e73e44a0db712e",
									"sourceVault": map[string]interface{}{
										"id": "/subscriptions/a53f7094-a16c-47af-abe4-b05c05d0d79a/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/kvName",
									},
								},
								Publisher:          to.Ptr("{extension-Publisher}"),
								Settings:           map[string]interface{}{},
								TypeHandlerVersion: to.Ptr("{handler-version}"),
							},
						}},
				},
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
					Secrets:            []*armcompute.VaultSecretGroup{},
					WindowsConfiguration: &armcompute.WindowsConfiguration{
						EnableAutomaticUpdates: to.Ptr(true),
						ProvisionVMAgent:       to.Ptr(true),
					},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineScaleSet)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAScaleSetWithProtectedSettingsFromKeyVault.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateACustomImageScaleSetFromAnUnmanagedGeneralizedOsImage.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a custom-image scale set from an unmanaged generalized os image."},
	})
	client, err = armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"{vmss-name}",
		armcompute.VirtualMachineScaleSet{
			Location: to.Ptr("westus"),
			Properties: &armcompute.VirtualMachineScaleSetProperties{
				Overprovision: to.Ptr(true),
				UpgradePolicy: &armcompute.UpgradePolicy{
					Mode: to.Ptr(armcompute.UpgradeModeManual),
				},
				VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
					NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
						NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
							{
								Name: to.Ptr("{vmss-name}"),
								Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
									EnableIPForwarding: to.Ptr(true),
									IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
										{
											Name: to.Ptr("{vmss-name}"),
											Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
												Subnet: &armcompute.APIEntityReference{
													ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
												},
											},
										}},
									Primary: to.Ptr(true),
								},
							}},
					},
					OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
						AdminPassword:      to.Ptr("{your-password}"),
						AdminUsername:      to.Ptr("{your-username}"),
						ComputerNamePrefix: to.Ptr("{vmss-name}"),
					},
					StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
						OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
							Name:         to.Ptr("osDisk"),
							Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
							CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
							Image: &armcompute.VirtualHardDisk{
								URI: to.Ptr("http://{existing-storage-account-name}.blob.core.windows.net/{existing-container-name}/{existing-generalized-os-image-blob-name}.vhd"),
							},
						},
					},
				},
			},
			SKU: &armcompute.SKU{
				Name:     to.Ptr("Standard_D1_v2"),
				Capacity: to.Ptr[int64](3),
				Tier:     to.Ptr("Standard"),
			},
		},
		&armcompute.VirtualMachineScaleSetsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateACustomImageScaleSetFromAnUnmanagedGeneralizedOsImage.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateACustomImageScaleSetFromAnUnmanagedGeneralizedOsImage.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{vmss-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision:        to.Ptr(true),
			ProvisioningState:    to.Ptr("Succeeded"),
			SinglePlacementGroup: to.Ptr(true),
			UniqueID:             to.Ptr("d6e9ab29-f8c9-4792-978c-ae2c07b98f17"),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
					Secrets:            []*armcompute.VaultSecretGroup{},
					WindowsConfiguration: &armcompute.WindowsConfiguration{
						EnableAutomaticUpdates: to.Ptr(true),
						ProvisionVMAgent:       to.Ptr(true),
					},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Name:         to.Ptr("osDisk"),
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						Image: &armcompute.VirtualHardDisk{
							URI: to.Ptr("https://{existing-storage-account-name}.blob.core.windows.net/system/Microsoft.Compute/Images/vhds/{existing-generalized-os-image-blob-name}.vhd"),
						},
						OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineScaleSet)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateACustomImageScaleSetFromAnUnmanagedGeneralizedOsImage.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAPlatformImageScaleSetWithUnmanagedOsDisks.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a platform-image scale set with unmanaged os disks."},
	})
	client, err = armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"{vmss-name}",
		armcompute.VirtualMachineScaleSet{
			Location: to.Ptr("westus"),
			Properties: &armcompute.VirtualMachineScaleSetProperties{
				Overprovision: to.Ptr(true),
				UpgradePolicy: &armcompute.UpgradePolicy{
					Mode: to.Ptr(armcompute.UpgradeModeManual),
				},
				VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
					NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
						NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
							{
								Name: to.Ptr("{vmss-name}"),
								Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
									EnableIPForwarding: to.Ptr(true),
									IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
										{
											Name: to.Ptr("{vmss-name}"),
											Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
												Subnet: &armcompute.APIEntityReference{
													ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
												},
											},
										}},
									Primary: to.Ptr(true),
								},
							}},
					},
					OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
						AdminPassword:      to.Ptr("{your-password}"),
						AdminUsername:      to.Ptr("{your-username}"),
						ComputerNamePrefix: to.Ptr("{vmss-name}"),
					},
					StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
						ImageReference: &armcompute.ImageReference{
							Offer:     to.Ptr("WindowsServer"),
							Publisher: to.Ptr("MicrosoftWindowsServer"),
							SKU:       to.Ptr("2016-Datacenter"),
							Version:   to.Ptr("latest"),
						},
						OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
							Name:         to.Ptr("osDisk"),
							Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
							CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
							VhdContainers: []*string{
								to.Ptr("http://{existing-storage-account-name-0}.blob.core.windows.net/vhdContainer"),
								to.Ptr("http://{existing-storage-account-name-1}.blob.core.windows.net/vhdContainer"),
								to.Ptr("http://{existing-storage-account-name-2}.blob.core.windows.net/vhdContainer"),
								to.Ptr("http://{existing-storage-account-name-3}.blob.core.windows.net/vhdContainer"),
								to.Ptr("http://{existing-storage-account-name-4}.blob.core.windows.net/vhdContainer")},
						},
					},
				},
			},
			SKU: &armcompute.SKU{
				Name:     to.Ptr("Standard_D1_v2"),
				Capacity: to.Ptr[int64](3),
				Tier:     to.Ptr("Standard"),
			},
		},
		&armcompute.VirtualMachineScaleSetsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAPlatformImageScaleSetWithUnmanagedOsDisks.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAPlatformImageScaleSetWithUnmanagedOsDisks.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{vmss-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision:        to.Ptr(true),
			ProvisioningState:    to.Ptr("Succeeded"),
			SinglePlacementGroup: to.Ptr(true),
			UniqueID:             to.Ptr("77b7df9a-32fe-45e3-8911-60ac9c9b9c64"),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
					Secrets:            []*armcompute.VaultSecretGroup{},
					WindowsConfiguration: &armcompute.WindowsConfiguration{
						EnableAutomaticUpdates: to.Ptr(true),
						ProvisionVMAgent:       to.Ptr(true),
					},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Name:         to.Ptr("osDisk"),
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						VhdContainers: []*string{
							to.Ptr("http://{existing-storage-account-name}.blob.core.windows.net/vhds")},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineScaleSet)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAPlatformImageScaleSetWithUnmanagedOsDisks.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAScaleSetFromACustomImage.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set from a custom image."},
	})
	client, err = armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"{vmss-name}",
		armcompute.VirtualMachineScaleSet{
			Location: to.Ptr("westus"),
			Properties: &armcompute.VirtualMachineScaleSetProperties{
				Overprovision: to.Ptr(true),
				UpgradePolicy: &armcompute.UpgradePolicy{
					Mode: to.Ptr(armcompute.UpgradeModeManual),
				},
				VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
					NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
						NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
							{
								Name: to.Ptr("{vmss-name}"),
								Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
									EnableIPForwarding: to.Ptr(true),
									IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
										{
											Name: to.Ptr("{vmss-name}"),
											Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
												Subnet: &armcompute.APIEntityReference{
													ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
												},
											},
										}},
									Primary: to.Ptr(true),
								},
							}},
					},
					OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
						AdminPassword:      to.Ptr("{your-password}"),
						AdminUsername:      to.Ptr("{your-username}"),
						ComputerNamePrefix: to.Ptr("{vmss-name}"),
					},
					StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
						ImageReference: &armcompute.ImageReference{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/images/{existing-custom-image-name}"),
						},
						OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
							Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
							CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
							ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
								StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
							},
						},
					},
				},
			},
			SKU: &armcompute.SKU{
				Name:     to.Ptr("Standard_D1_v2"),
				Capacity: to.Ptr[int64](3),
				Tier:     to.Ptr("Standard"),
			},
		},
		&armcompute.VirtualMachineScaleSetsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAScaleSetFromACustomImage.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAScaleSetFromACustomImage.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{vmss-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision:        to.Ptr(true),
			ProvisioningState:    to.Ptr("Succeeded"),
			SinglePlacementGroup: to.Ptr(true),
			UniqueID:             to.Ptr("afa2afa8-9e49-48fb-9d18-c86323b5d064"),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
					LinuxConfiguration: &armcompute.LinuxConfiguration{
						DisablePasswordAuthentication: to.Ptr(false),
					},
					Secrets: []*armcompute.VaultSecretGroup{},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/images/nsgcustom"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineScaleSet)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAScaleSetFromACustomImage.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAScaleSetFromAGeneralizedSharedImage.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set from a generalized shared image."},
	})
	client, err = armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"{vmss-name}",
		armcompute.VirtualMachineScaleSet{
			Location: to.Ptr("westus"),
			Properties: &armcompute.VirtualMachineScaleSetProperties{
				Overprovision: to.Ptr(true),
				UpgradePolicy: &armcompute.UpgradePolicy{
					Mode: to.Ptr(armcompute.UpgradeModeManual),
				},
				VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
					NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
						NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
							{
								Name: to.Ptr("{vmss-name}"),
								Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
									EnableIPForwarding: to.Ptr(true),
									IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
										{
											Name: to.Ptr("{vmss-name}"),
											Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
												Subnet: &armcompute.APIEntityReference{
													ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
												},
											},
										}},
									Primary: to.Ptr(true),
								},
							}},
					},
					OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
						AdminPassword:      to.Ptr("{your-password}"),
						AdminUsername:      to.Ptr("{your-username}"),
						ComputerNamePrefix: to.Ptr("{vmss-name}"),
					},
					StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
						ImageReference: &armcompute.ImageReference{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/galleries/mySharedGallery/images/mySharedImage"),
						},
						OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
							Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
							CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
							ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
								StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
							},
						},
					},
				},
			},
			SKU: &armcompute.SKU{
				Name:     to.Ptr("Standard_D1_v2"),
				Capacity: to.Ptr[int64](3),
				Tier:     to.Ptr("Standard"),
			},
		},
		&armcompute.VirtualMachineScaleSetsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAScaleSetFromAGeneralizedSharedImage.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAScaleSetFromAGeneralizedSharedImage.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{vmss-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision:        to.Ptr(true),
			ProvisioningState:    to.Ptr("Succeeded"),
			SinglePlacementGroup: to.Ptr(true),
			UniqueID:             to.Ptr("afa2afa8-9e49-48fb-9d18-c86323b5d064"),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
					LinuxConfiguration: &armcompute.LinuxConfiguration{
						DisablePasswordAuthentication: to.Ptr(false),
					},
					Secrets: []*armcompute.VaultSecretGroup{},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/galleries/mySharedGallery/images/mySharedImage"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineScaleSet)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAScaleSetFromAGeneralizedSharedImage.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAScaleSetFromASpecializedSharedImage.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set from a specialized shared image."},
	})
	client, err = armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"{vmss-name}",
		armcompute.VirtualMachineScaleSet{
			Location: to.Ptr("westus"),
			Properties: &armcompute.VirtualMachineScaleSetProperties{
				Overprovision: to.Ptr(true),
				UpgradePolicy: &armcompute.UpgradePolicy{
					Mode: to.Ptr(armcompute.UpgradeModeManual),
				},
				VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
					NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
						NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
							{
								Name: to.Ptr("{vmss-name}"),
								Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
									EnableIPForwarding: to.Ptr(true),
									IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
										{
											Name: to.Ptr("{vmss-name}"),
											Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
												Subnet: &armcompute.APIEntityReference{
													ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
												},
											},
										}},
									Primary: to.Ptr(true),
								},
							}},
					},
					StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
						ImageReference: &armcompute.ImageReference{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/galleries/mySharedGallery/images/mySharedImage"),
						},
						OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
							Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
							CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
							ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
								StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
							},
						},
					},
				},
			},
			SKU: &armcompute.SKU{
				Name:     to.Ptr("Standard_D1_v2"),
				Capacity: to.Ptr[int64](3),
				Tier:     to.Ptr("Standard"),
			},
		},
		&armcompute.VirtualMachineScaleSetsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAScaleSetFromASpecializedSharedImage.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAScaleSetFromASpecializedSharedImage.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{vmss-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision:        to.Ptr(true),
			ProvisioningState:    to.Ptr("Succeeded"),
			SinglePlacementGroup: to.Ptr(true),
			UniqueID:             to.Ptr("afa2afa8-9e49-48fb-9d18-c86323b5d064"),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/galleries/mySharedGallery/images/mySharedImage"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineScaleSet)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAScaleSetFromASpecializedSharedImage.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAScaleSetWithApplicationProfile.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set with Application Profile"},
	})
	client, err = armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"{vmss-name}",
		armcompute.VirtualMachineScaleSet{
			Location: to.Ptr("westus"),
			Properties: &armcompute.VirtualMachineScaleSetProperties{
				Overprovision: to.Ptr(true),
				UpgradePolicy: &armcompute.UpgradePolicy{
					Mode: to.Ptr(armcompute.UpgradeModeManual),
				},
				VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
					ApplicationProfile: &armcompute.ApplicationProfile{
						GalleryApplications: []*armcompute.VMGalleryApplication{
							{
								ConfigurationReference: to.Ptr("https://mystorageaccount.blob.core.windows.net/configurations/settings.config"),
								Order:                  to.Ptr[int32](1),
								PackageReferenceID:     to.Ptr("/subscriptions/32c17a9e-aa7b-4ba5-a45b-e324116b6fdb/resourceGroups/myresourceGroupName2/providers/Microsoft.Compute/galleries/myGallery1/applications/MyApplication1/versions/1.0"),
								Tags:                   to.Ptr("myTag1"),
							},
							{
								PackageReferenceID: to.Ptr("/subscriptions/32c17a9e-aa7b-4ba5-a45b-e324116b6fdg/resourceGroups/myresourceGroupName3/providers/Microsoft.Compute/galleries/myGallery2/applications/MyApplication2/versions/1.1"),
							}},
					},
					NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
						NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
							{
								Name: to.Ptr("{vmss-name}"),
								Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
									EnableIPForwarding: to.Ptr(true),
									IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
										{
											Name: to.Ptr("{vmss-name}"),
											Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
												Subnet: &armcompute.APIEntityReference{
													ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
												},
											},
										}},
									Primary: to.Ptr(true),
								},
							}},
					},
					OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
						AdminPassword:      to.Ptr("{your-password}"),
						AdminUsername:      to.Ptr("{your-username}"),
						ComputerNamePrefix: to.Ptr("{vmss-name}"),
					},
					StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
						ImageReference: &armcompute.ImageReference{
							Offer:     to.Ptr("WindowsServer"),
							Publisher: to.Ptr("MicrosoftWindowsServer"),
							SKU:       to.Ptr("2016-Datacenter"),
							Version:   to.Ptr("latest"),
						},
						OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
							Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
							CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
							ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
								StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
							},
						},
					},
				},
			},
			SKU: &armcompute.SKU{
				Name:     to.Ptr("Standard_D1_v2"),
				Capacity: to.Ptr[int64](3),
				Tier:     to.Ptr("Standard"),
			},
		},
		&armcompute.VirtualMachineScaleSetsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAScaleSetWithApplicationProfile.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAScaleSetWithApplicationProfile.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{vmss-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision:        to.Ptr(true),
			ProvisioningState:    to.Ptr("Succeeded"),
			SinglePlacementGroup: to.Ptr(true),
			UniqueID:             to.Ptr("ffb27c5c-39a5-4d4e-b307-b32598689813"),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				ApplicationProfile: &armcompute.ApplicationProfile{
					GalleryApplications: []*armcompute.VMGalleryApplication{
						{
							ConfigurationReference: to.Ptr("https://mystorageaccount.blob.core.windows.net/configurations/settings.config"),
							Order:                  to.Ptr[int32](1),
							PackageReferenceID:     to.Ptr("/subscriptions/32c17a9e-aa7b-4ba5-a45b-e324116b6fdb/resourceGroups/myresourceGroupName2/providers/Microsoft.Compute/galleries/myGallery1/applications/MyApplication1/versions/1.0"),
							Tags:                   to.Ptr("myTag1"),
						},
						{
							PackageReferenceID: to.Ptr("/subscriptions/32c17a9e-aa7b-4ba5-a45b-e324116b6fdg/resourceGroups/myresourceGroupName3/providers/Microsoft.Compute/galleries/myGallery2/applications/MyApplication2/versions/1.1"),
						}},
				},
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
					Secrets:            []*armcompute.VaultSecretGroup{},
					WindowsConfiguration: &armcompute.WindowsConfiguration{
						EnableAutomaticUpdates: to.Ptr(true),
						ProvisionVMAgent:       to.Ptr(true),
					},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineScaleSet)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAScaleSetWithApplicationProfile.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAScalesetWithDiskEncryptionSetResource.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set with DiskEncryptionSet resource in os disk and data disk."},
	})
	client, err = armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"{vmss-name}",
		armcompute.VirtualMachineScaleSet{
			Location: to.Ptr("westus"),
			Properties: &armcompute.VirtualMachineScaleSetProperties{
				Overprovision: to.Ptr(true),
				UpgradePolicy: &armcompute.UpgradePolicy{
					Mode: to.Ptr(armcompute.UpgradeModeManual),
				},
				VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
					NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
						NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
							{
								Name: to.Ptr("{vmss-name}"),
								Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
									EnableIPForwarding: to.Ptr(true),
									IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
										{
											Name: to.Ptr("{vmss-name}"),
											Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
												Subnet: &armcompute.APIEntityReference{
													ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
												},
											},
										}},
									Primary: to.Ptr(true),
								},
							}},
					},
					OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
						AdminPassword:      to.Ptr("{your-password}"),
						AdminUsername:      to.Ptr("{your-username}"),
						ComputerNamePrefix: to.Ptr("{vmss-name}"),
					},
					StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
						DataDisks: []*armcompute.VirtualMachineScaleSetDataDisk{
							{
								Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
								CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
								DiskSizeGB:   to.Ptr[int32](1023),
								Lun:          to.Ptr[int32](0),
								ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
									DiskEncryptionSet: &armcompute.DiskEncryptionSetParameters{
										ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{existing-diskEncryptionSet-name}"),
									},
									StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
								},
							}},
						ImageReference: &armcompute.ImageReference{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/images/{existing-custom-image-name}"),
						},
						OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
							Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
							CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
							ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
								DiskEncryptionSet: &armcompute.DiskEncryptionSetParameters{
									ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{existing-diskEncryptionSet-name}"),
								},
								StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
							},
						},
					},
				},
			},
			SKU: &armcompute.SKU{
				Name:     to.Ptr("Standard_DS1_v2"),
				Capacity: to.Ptr[int64](3),
				Tier:     to.Ptr("Standard"),
			},
		},
		&armcompute.VirtualMachineScaleSetsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAScalesetWithDiskEncryptionSetResource.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAScalesetWithDiskEncryptionSetResource.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{vmss-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision:        to.Ptr(true),
			ProvisioningState:    to.Ptr("Succeeded"),
			SinglePlacementGroup: to.Ptr(true),
			UniqueID:             to.Ptr("afa2afa8-9e49-48fb-9d18-c86323b5d064"),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
					LinuxConfiguration: &armcompute.LinuxConfiguration{
						DisablePasswordAuthentication: to.Ptr(false),
					},
					Secrets: []*armcompute.VaultSecretGroup{},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					DataDisks: []*armcompute.VirtualMachineScaleSetDataDisk{
						{
							Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
							CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
							DiskSizeGB:   to.Ptr[int32](1023),
							Lun:          to.Ptr[int32](0),
							ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
								DiskEncryptionSet: &armcompute.DiskEncryptionSetParameters{
									ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{existing-diskEncryptionSet-name}"),
								},
								StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
							},
						}},
					ImageReference: &armcompute.ImageReference{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/images/nsgcustom"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							DiskEncryptionSet: &armcompute.DiskEncryptionSetParameters{
								ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{existing-diskEncryptionSet-name}"),
							},
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineScaleSet)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAScalesetWithDiskEncryptionSetResource.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAScaleSetFromWithFpgaNetworkInterface.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set with Fpga Network Interfaces."},
	})
	client, err = armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"{vmss-name}",
		armcompute.VirtualMachineScaleSet{
			Location: to.Ptr("westus"),
			Properties: &armcompute.VirtualMachineScaleSetProperties{
				Overprovision: to.Ptr(true),
				UpgradePolicy: &armcompute.UpgradePolicy{
					Mode: to.Ptr(armcompute.UpgradeModeManual),
				},
				VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
					NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
						NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
							{
								Name: to.Ptr("{vmss-name}"),
								Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
									EnableIPForwarding: to.Ptr(true),
									IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
										{
											Name: to.Ptr("{vmss-name}"),
											Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
												Subnet: &armcompute.APIEntityReference{
													ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
												},
											},
										}},
									Primary: to.Ptr(true),
								},
							},
							{
								Name: to.Ptr("{fpgaNic-Name}"),
								Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
									EnableAcceleratedNetworking: to.Ptr(false),
									EnableFpga:                  to.Ptr(true),
									EnableIPForwarding:          to.Ptr(false),
									IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
										{
											Name: to.Ptr("{fpgaNic-Name}"),
											Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
												Primary:                 to.Ptr(true),
												PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
												Subnet: &armcompute.APIEntityReference{
													ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-fpga-subnet-name}"),
												},
											},
										}},
									Primary: to.Ptr(false),
								},
							}},
					},
					OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
						AdminPassword:      to.Ptr("{your-password}"),
						AdminUsername:      to.Ptr("{your-username}"),
						ComputerNamePrefix: to.Ptr("{vmss-name}"),
					},
					StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
						ImageReference: &armcompute.ImageReference{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/images/{existing-custom-image-name}"),
						},
						OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
							Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
							CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
							ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
								StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
							},
						},
					},
				},
			},
			SKU: &armcompute.SKU{
				Name:     to.Ptr("Standard_D1_v2"),
				Capacity: to.Ptr[int64](3),
				Tier:     to.Ptr("Standard"),
			},
		},
		&armcompute.VirtualMachineScaleSetsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAScaleSetFromWithFpgaNetworkInterface.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAScaleSetFromWithFpgaNetworkInterface.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{vmss-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision:        to.Ptr(true),
			ProvisioningState:    to.Ptr("Succeeded"),
			SinglePlacementGroup: to.Ptr(true),
			UniqueID:             to.Ptr("afa2afa8-9e49-48fb-9d18-c86323b5d064"),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						},
						{
							Name: to.Ptr("{fpgaNic-Name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableFpga:                  to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{fpgaNic-Name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											Primary:                 to.Ptr(true),
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-fpga-subnet-name}"),
											},
										},
									}},
								Primary: to.Ptr(false),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
					LinuxConfiguration: &armcompute.LinuxConfiguration{
						DisablePasswordAuthentication: to.Ptr(false),
					},
					Secrets: []*armcompute.VaultSecretGroup{},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/images/nsgcustom"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineScaleSet)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAScaleSetFromWithFpgaNetworkInterface.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAScaleSetWithEncryptionAtHost.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set with Host Encryption using encryptionAtHost property."},
	})
	client, err = armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"{vmss-name}",
		armcompute.VirtualMachineScaleSet{
			Location: to.Ptr("westus"),
			Plan: &armcompute.Plan{
				Name:      to.Ptr("windows2016"),
				Product:   to.Ptr("windows-data-science-vm"),
				Publisher: to.Ptr("microsoft-ads"),
			},
			Properties: &armcompute.VirtualMachineScaleSetProperties{
				Overprovision: to.Ptr(true),
				UpgradePolicy: &armcompute.UpgradePolicy{
					Mode: to.Ptr(armcompute.UpgradeModeManual),
				},
				VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
					NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
						NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
							{
								Name: to.Ptr("{vmss-name}"),
								Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
									EnableIPForwarding: to.Ptr(true),
									IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
										{
											Name: to.Ptr("{vmss-name}"),
											Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
												Subnet: &armcompute.APIEntityReference{
													ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
												},
											},
										}},
									Primary: to.Ptr(true),
								},
							}},
					},
					OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
						AdminPassword:      to.Ptr("{your-password}"),
						AdminUsername:      to.Ptr("{your-username}"),
						ComputerNamePrefix: to.Ptr("{vmss-name}"),
					},
					SecurityProfile: &armcompute.SecurityProfile{
						EncryptionAtHost: to.Ptr(true),
					},
					StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
						ImageReference: &armcompute.ImageReference{
							Offer:     to.Ptr("windows-data-science-vm"),
							Publisher: to.Ptr("microsoft-ads"),
							SKU:       to.Ptr("windows2016"),
							Version:   to.Ptr("latest"),
						},
						OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
							Caching:      to.Ptr(armcompute.CachingTypesReadOnly),
							CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
							ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
								StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
							},
						},
					},
				},
			},
			SKU: &armcompute.SKU{
				Name:     to.Ptr("Standard_DS1_v2"),
				Capacity: to.Ptr[int64](3),
				Tier:     to.Ptr("Standard"),
			},
		},
		&armcompute.VirtualMachineScaleSetsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAScaleSetWithEncryptionAtHost.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAScaleSetWithEncryptionAtHost.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{vmss-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
		Location: to.Ptr("westus"),
		Plan: &armcompute.Plan{
			Name:      to.Ptr("standard-data-science-vm"),
			Product:   to.Ptr("standard-data-science-vm"),
			Publisher: to.Ptr("microsoft-ads"),
		},
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision:        to.Ptr(true),
			ProvisioningState:    to.Ptr("Succeeded"),
			SinglePlacementGroup: to.Ptr(true),
			UniqueID:             to.Ptr("b9e23088-6ffc-46e0-9e02-b0a6eeef47db"),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
					Secrets:            []*armcompute.VaultSecretGroup{},
					WindowsConfiguration: &armcompute.WindowsConfiguration{
						EnableAutomaticUpdates: to.Ptr(true),
						ProvisionVMAgent:       to.Ptr(true),
					},
				},
				SecurityProfile: &armcompute.SecurityProfile{
					EncryptionAtHost: to.Ptr(true),
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("standard-data-science-vm"),
						Publisher: to.Ptr("microsoft-ads"),
						SKU:       to.Ptr("standard-data-science-vm"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadOnly),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_DS1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineScaleSet)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAScaleSetWithEncryptionAtHost.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAScaleSetWithSecurityTypeConfidentialVM.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set with SecurityType as ConfidentialVM"},
	})
	client, err = armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"{vmss-name}",
		armcompute.VirtualMachineScaleSet{
			Location: to.Ptr("westus"),
			Properties: &armcompute.VirtualMachineScaleSetProperties{
				Overprovision: to.Ptr(true),
				UpgradePolicy: &armcompute.UpgradePolicy{
					Mode: to.Ptr(armcompute.UpgradeModeManual),
				},
				VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
					NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
						NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
							{
								Name: to.Ptr("{vmss-name}"),
								Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
									EnableIPForwarding: to.Ptr(true),
									IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
										{
											Name: to.Ptr("{vmss-name}"),
											Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
												Subnet: &armcompute.APIEntityReference{
													ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
												},
											},
										}},
									Primary: to.Ptr(true),
								},
							}},
					},
					OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
						AdminPassword:      to.Ptr("{your-password}"),
						AdminUsername:      to.Ptr("{your-username}"),
						ComputerNamePrefix: to.Ptr("{vmss-name}"),
					},
					SecurityProfile: &armcompute.SecurityProfile{
						SecurityType: to.Ptr(armcompute.SecurityTypesConfidentialVM),
						UefiSettings: &armcompute.UefiSettings{
							SecureBootEnabled: to.Ptr(true),
							VTpmEnabled:       to.Ptr(true),
						},
					},
					StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
						ImageReference: &armcompute.ImageReference{
							Offer:     to.Ptr("2019-datacenter-cvm"),
							Publisher: to.Ptr("MicrosoftWindowsServer"),
							SKU:       to.Ptr("windows-cvm"),
							Version:   to.Ptr("17763.2183.2109130127"),
						},
						OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
							Caching:      to.Ptr(armcompute.CachingTypesReadOnly),
							CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
							ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
								SecurityProfile: &armcompute.VMDiskSecurityProfile{
									SecurityEncryptionType: to.Ptr(armcompute.SecurityEncryptionTypesVMGuestStateOnly),
								},
								StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardSSDLRS),
							},
						},
					},
				},
			},
			SKU: &armcompute.SKU{
				Name:     to.Ptr("Standard_DC2as_v5"),
				Capacity: to.Ptr[int64](3),
				Tier:     to.Ptr("Standard"),
			},
		},
		&armcompute.VirtualMachineScaleSetsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAScaleSetWithSecurityTypeConfidentialVM.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAScaleSetWithSecurityTypeConfidentialVM.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{vmss-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision:        to.Ptr(true),
			ProvisioningState:    to.Ptr("Succeeded"),
			SinglePlacementGroup: to.Ptr(true),
			UniqueID:             to.Ptr("b9e23088-6ffc-46e0-9e02-b0a6eeef47db"),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
					Secrets:            []*armcompute.VaultSecretGroup{},
					WindowsConfiguration: &armcompute.WindowsConfiguration{
						EnableAutomaticUpdates: to.Ptr(true),
						ProvisionVMAgent:       to.Ptr(true),
					},
				},
				SecurityProfile: &armcompute.SecurityProfile{
					SecurityType: to.Ptr(armcompute.SecurityTypesConfidentialVM),
					UefiSettings: &armcompute.UefiSettings{
						SecureBootEnabled: to.Ptr(true),
						VTpmEnabled:       to.Ptr(true),
					},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("2019-datacenter-cvm"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("windows-cvm"),
						Version:   to.Ptr("17763.2183.2109130127"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadOnly),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							SecurityProfile: &armcompute.VMDiskSecurityProfile{
								SecurityEncryptionType: to.Ptr(armcompute.SecurityEncryptionTypesVMGuestStateOnly),
							},
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardSSDLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_DC2as_v5"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineScaleSet)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAScaleSetWithSecurityTypeConfidentialVM.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAScaleSetWithUefiSettings.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set with Uefi Settings of secureBoot and vTPM."},
	})
	client, err = armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"{vmss-name}",
		armcompute.VirtualMachineScaleSet{
			Location: to.Ptr("westus"),
			Properties: &armcompute.VirtualMachineScaleSetProperties{
				Overprovision: to.Ptr(true),
				UpgradePolicy: &armcompute.UpgradePolicy{
					Mode: to.Ptr(armcompute.UpgradeModeManual),
				},
				VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
					NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
						NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
							{
								Name: to.Ptr("{vmss-name}"),
								Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
									EnableIPForwarding: to.Ptr(true),
									IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
										{
											Name: to.Ptr("{vmss-name}"),
											Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
												Subnet: &armcompute.APIEntityReference{
													ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
												},
											},
										}},
									Primary: to.Ptr(true),
								},
							}},
					},
					OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
						AdminPassword:      to.Ptr("{your-password}"),
						AdminUsername:      to.Ptr("{your-username}"),
						ComputerNamePrefix: to.Ptr("{vmss-name}"),
					},
					SecurityProfile: &armcompute.SecurityProfile{
						SecurityType: to.Ptr(armcompute.SecurityTypesTrustedLaunch),
						UefiSettings: &armcompute.UefiSettings{
							SecureBootEnabled: to.Ptr(true),
							VTpmEnabled:       to.Ptr(true),
						},
					},
					StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
						ImageReference: &armcompute.ImageReference{
							Offer:     to.Ptr("windowsserver-gen2preview-preview"),
							Publisher: to.Ptr("MicrosoftWindowsServer"),
							SKU:       to.Ptr("windows10-tvm"),
							Version:   to.Ptr("18363.592.2001092016"),
						},
						OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
							Caching:      to.Ptr(armcompute.CachingTypesReadOnly),
							CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
							ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
								StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardSSDLRS),
							},
						},
					},
				},
			},
			SKU: &armcompute.SKU{
				Name:     to.Ptr("Standard_D2s_v3"),
				Capacity: to.Ptr[int64](3),
				Tier:     to.Ptr("Standard"),
			},
		},
		&armcompute.VirtualMachineScaleSetsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAScaleSetWithUefiSettings.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAScaleSetWithUefiSettings.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{vmss-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision:        to.Ptr(true),
			ProvisioningState:    to.Ptr("Succeeded"),
			SinglePlacementGroup: to.Ptr(true),
			UniqueID:             to.Ptr("b9e23088-6ffc-46e0-9e02-b0a6eeef47db"),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
					Secrets:            []*armcompute.VaultSecretGroup{},
					WindowsConfiguration: &armcompute.WindowsConfiguration{
						EnableAutomaticUpdates: to.Ptr(true),
						ProvisionVMAgent:       to.Ptr(true),
					},
				},
				SecurityProfile: &armcompute.SecurityProfile{
					SecurityType: to.Ptr(armcompute.SecurityTypesTrustedLaunch),
					UefiSettings: &armcompute.UefiSettings{
						SecureBootEnabled: to.Ptr(true),
						VTpmEnabled:       to.Ptr(true),
					},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("windowsserver-gen2preview-preview"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("windows10-tvm"),
						Version:   to.Ptr("18363.592.2001092016"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadOnly),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardSSDLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D2s_v3"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineScaleSet)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAScaleSetWithUefiSettings.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAScaleSetWithAMarketplaceImagePlan.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set with a marketplace image plan."},
	})
	client, err = armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"{vmss-name}",
		armcompute.VirtualMachineScaleSet{
			Location: to.Ptr("westus"),
			Plan: &armcompute.Plan{
				Name:      to.Ptr("windows2016"),
				Product:   to.Ptr("windows-data-science-vm"),
				Publisher: to.Ptr("microsoft-ads"),
			},
			Properties: &armcompute.VirtualMachineScaleSetProperties{
				Overprovision: to.Ptr(true),
				UpgradePolicy: &armcompute.UpgradePolicy{
					Mode: to.Ptr(armcompute.UpgradeModeManual),
				},
				VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
					NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
						NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
							{
								Name: to.Ptr("{vmss-name}"),
								Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
									EnableIPForwarding: to.Ptr(true),
									IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
										{
											Name: to.Ptr("{vmss-name}"),
											Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
												Subnet: &armcompute.APIEntityReference{
													ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
												},
											},
										}},
									Primary: to.Ptr(true),
								},
							}},
					},
					OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
						AdminPassword:      to.Ptr("{your-password}"),
						AdminUsername:      to.Ptr("{your-username}"),
						ComputerNamePrefix: to.Ptr("{vmss-name}"),
					},
					StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
						ImageReference: &armcompute.ImageReference{
							Offer:     to.Ptr("windows-data-science-vm"),
							Publisher: to.Ptr("microsoft-ads"),
							SKU:       to.Ptr("windows2016"),
							Version:   to.Ptr("latest"),
						},
						OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
							Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
							CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
							ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
								StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
							},
						},
					},
				},
			},
			SKU: &armcompute.SKU{
				Name:     to.Ptr("Standard_D1_v2"),
				Capacity: to.Ptr[int64](3),
				Tier:     to.Ptr("Standard"),
			},
		},
		&armcompute.VirtualMachineScaleSetsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAScaleSetWithAMarketplaceImagePlan.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAScaleSetWithAMarketplaceImagePlan.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{vmss-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
		Location: to.Ptr("westus"),
		Plan: &armcompute.Plan{
			Name:      to.Ptr("standard-data-science-vm"),
			Product:   to.Ptr("standard-data-science-vm"),
			Publisher: to.Ptr("microsoft-ads"),
		},
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision:        to.Ptr(true),
			ProvisioningState:    to.Ptr("Succeeded"),
			SinglePlacementGroup: to.Ptr(true),
			UniqueID:             to.Ptr("b9e23088-6ffc-46e0-9e02-b0a6eeef47db"),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
					Secrets:            []*armcompute.VaultSecretGroup{},
					WindowsConfiguration: &armcompute.WindowsConfiguration{
						EnableAutomaticUpdates: to.Ptr(true),
						ProvisionVMAgent:       to.Ptr(true),
					},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("standard-data-science-vm"),
						Publisher: to.Ptr("microsoft-ads"),
						SKU:       to.Ptr("standard-data-science-vm"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineScaleSet)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAScaleSetWithAMarketplaceImagePlan.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAScaleSetWithAnAzureApplicationGateway.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set with an azure application gateway."},
	})
	client, err = armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"{vmss-name}",
		armcompute.VirtualMachineScaleSet{
			Location: to.Ptr("westus"),
			Properties: &armcompute.VirtualMachineScaleSetProperties{
				Overprovision: to.Ptr(true),
				UpgradePolicy: &armcompute.UpgradePolicy{
					Mode: to.Ptr(armcompute.UpgradeModeManual),
				},
				VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
					NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
						NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
							{
								Name: to.Ptr("{vmss-name}"),
								Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
									EnableIPForwarding: to.Ptr(true),
									IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
										{
											Name: to.Ptr("{vmss-name}"),
											Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
												ApplicationGatewayBackendAddressPools: []*armcompute.SubResource{
													{
														ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/applicationGateways/{existing-application-gateway-name}/backendAddressPools/{existing-backend-address-pool-name}"),
													}},
												Subnet: &armcompute.APIEntityReference{
													ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
												},
											},
										}},
									Primary: to.Ptr(true),
								},
							}},
					},
					OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
						AdminPassword:      to.Ptr("{your-password}"),
						AdminUsername:      to.Ptr("{your-username}"),
						ComputerNamePrefix: to.Ptr("{vmss-name}"),
					},
					StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
						ImageReference: &armcompute.ImageReference{
							Offer:     to.Ptr("WindowsServer"),
							Publisher: to.Ptr("MicrosoftWindowsServer"),
							SKU:       to.Ptr("2016-Datacenter"),
							Version:   to.Ptr("latest"),
						},
						OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
							Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
							CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
							ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
								StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
							},
						},
					},
				},
			},
			SKU: &armcompute.SKU{
				Name:     to.Ptr("Standard_D1_v2"),
				Capacity: to.Ptr[int64](3),
				Tier:     to.Ptr("Standard"),
			},
		},
		&armcompute.VirtualMachineScaleSetsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAScaleSetWithAnAzureApplicationGateway.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAScaleSetWithAnAzureApplicationGateway.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{vmss-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision:        to.Ptr(true),
			ProvisioningState:    to.Ptr("Succeeded"),
			SinglePlacementGroup: to.Ptr(true),
			UniqueID:             to.Ptr("a0134477-b9d9-484b-b0e3-205c1c089ffa"),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											ApplicationGatewayBackendAddressPools: []*armcompute.SubResource{
												{
													ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/applicationGateways/nsgExistingAppGw/backendAddressPools/appGatewayBackendPool"),
												}},
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
					Secrets:            []*armcompute.VaultSecretGroup{},
					WindowsConfiguration: &armcompute.WindowsConfiguration{
						EnableAutomaticUpdates: to.Ptr(true),
						ProvisionVMAgent:       to.Ptr(true),
					},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineScaleSet)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAScaleSetWithAnAzureApplicationGateway.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAScaleSetWithAnAzureLoadBalancer.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set with an azure load balancer."},
	})
	client, err = armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"{vmss-name}",
		armcompute.VirtualMachineScaleSet{
			Location: to.Ptr("westus"),
			Properties: &armcompute.VirtualMachineScaleSetProperties{
				Overprovision: to.Ptr(true),
				UpgradePolicy: &armcompute.UpgradePolicy{
					Mode: to.Ptr(armcompute.UpgradeModeManual),
				},
				VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
					NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
						NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
							{
								Name: to.Ptr("{vmss-name}"),
								Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
									EnableIPForwarding: to.Ptr(true),
									IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
										{
											Name: to.Ptr("{vmss-name}"),
											Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
												LoadBalancerBackendAddressPools: []*armcompute.SubResource{
													{
														ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/loadBalancers/{existing-load-balancer-name}/backendAddressPools/{existing-backend-address-pool-name}"),
													}},
												LoadBalancerInboundNatPools: []*armcompute.SubResource{
													{
														ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/loadBalancers/{existing-load-balancer-name}/inboundNatPools/{existing-nat-pool-name}"),
													}},
												PublicIPAddressConfiguration: &armcompute.VirtualMachineScaleSetPublicIPAddressConfiguration{
													Name: to.Ptr("{vmss-name}"),
													Properties: &armcompute.VirtualMachineScaleSetPublicIPAddressConfigurationProperties{
														PublicIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
													},
												},
												Subnet: &armcompute.APIEntityReference{
													ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
												},
											},
										}},
									Primary: to.Ptr(true),
								},
							}},
					},
					OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
						AdminPassword:      to.Ptr("{your-password}"),
						AdminUsername:      to.Ptr("{your-username}"),
						ComputerNamePrefix: to.Ptr("{vmss-name}"),
					},
					StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
						ImageReference: &armcompute.ImageReference{
							Offer:     to.Ptr("WindowsServer"),
							Publisher: to.Ptr("MicrosoftWindowsServer"),
							SKU:       to.Ptr("2016-Datacenter"),
							Version:   to.Ptr("latest"),
						},
						OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
							Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
							CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
							ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
								StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
							},
						},
					},
				},
			},
			SKU: &armcompute.SKU{
				Name:     to.Ptr("Standard_D1_v2"),
				Capacity: to.Ptr[int64](3),
				Tier:     to.Ptr("Standard"),
			},
		},
		&armcompute.VirtualMachineScaleSetsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAScaleSetWithAnAzureLoadBalancer.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAScaleSetWithAnAzureLoadBalancer.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{vmss-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision:        to.Ptr(true),
			ProvisioningState:    to.Ptr("Succeeded"),
			SinglePlacementGroup: to.Ptr(true),
			UniqueID:             to.Ptr("ec0b21ca-51ec-414b-9323-f236ffc21479"),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											LoadBalancerBackendAddressPools: []*armcompute.SubResource{
												{
													ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/loadBalancers/myLb/backendAddressPools/lbBackendPool"),
												}},
											LoadBalancerInboundNatPools: []*armcompute.SubResource{
												{
													ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/loadBalancers/myLb/inboundNatPools/lbNatPool"),
												}},
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
					Secrets:            []*armcompute.VaultSecretGroup{},
					WindowsConfiguration: &armcompute.WindowsConfiguration{
						EnableAutomaticUpdates: to.Ptr(true),
						ProvisionVMAgent:       to.Ptr(true),
					},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineScaleSet)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAScaleSetWithAnAzureLoadBalancer.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAScaleSetWithAutomaticRepairs.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set with automatic repairs enabled"},
	})
	client, err = armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"{vmss-name}",
		armcompute.VirtualMachineScaleSet{
			Location: to.Ptr("westus"),
			Properties: &armcompute.VirtualMachineScaleSetProperties{
				AutomaticRepairsPolicy: &armcompute.AutomaticRepairsPolicy{
					Enabled:     to.Ptr(true),
					GracePeriod: to.Ptr("PT10M"),
				},
				Overprovision: to.Ptr(true),
				UpgradePolicy: &armcompute.UpgradePolicy{
					Mode: to.Ptr(armcompute.UpgradeModeManual),
				},
				VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
					NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
						NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
							{
								Name: to.Ptr("{vmss-name}"),
								Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
									EnableIPForwarding: to.Ptr(true),
									IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
										{
											Name: to.Ptr("{vmss-name}"),
											Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
												Subnet: &armcompute.APIEntityReference{
													ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
												},
											},
										}},
									Primary: to.Ptr(true),
								},
							}},
					},
					OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
						AdminPassword:      to.Ptr("{your-password}"),
						AdminUsername:      to.Ptr("{your-username}"),
						ComputerNamePrefix: to.Ptr("{vmss-name}"),
					},
					StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
						ImageReference: &armcompute.ImageReference{
							Offer:     to.Ptr("WindowsServer"),
							Publisher: to.Ptr("MicrosoftWindowsServer"),
							SKU:       to.Ptr("2016-Datacenter"),
							Version:   to.Ptr("latest"),
						},
						OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
							Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
							CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
							ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
								StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
							},
						},
					},
				},
			},
			SKU: &armcompute.SKU{
				Name:     to.Ptr("Standard_D1_v2"),
				Capacity: to.Ptr[int64](3),
				Tier:     to.Ptr("Standard"),
			},
		},
		&armcompute.VirtualMachineScaleSetsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAScaleSetWithAutomaticRepairs.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAScaleSetWithAutomaticRepairs.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{vmss-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			AutomaticRepairsPolicy: &armcompute.AutomaticRepairsPolicy{
				Enabled:     to.Ptr(true),
				GracePeriod: to.Ptr("PT10M"),
			},
			Overprovision:        to.Ptr(true),
			ProvisioningState:    to.Ptr("Succeeded"),
			SinglePlacementGroup: to.Ptr(true),
			UniqueID:             to.Ptr("d053ec5a-8da6-495f-ab13-38216503c6d7"),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
					Secrets:            []*armcompute.VaultSecretGroup{},
					WindowsConfiguration: &armcompute.WindowsConfiguration{
						EnableAutomaticUpdates: to.Ptr(true),
						ProvisionVMAgent:       to.Ptr(true),
					},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineScaleSet)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAScaleSetWithAutomaticRepairs.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAScaleSetWithBootDiagnostics.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set with boot diagnostics."},
	})
	client, err = armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"{vmss-name}",
		armcompute.VirtualMachineScaleSet{
			Location: to.Ptr("westus"),
			Properties: &armcompute.VirtualMachineScaleSetProperties{
				Overprovision: to.Ptr(true),
				UpgradePolicy: &armcompute.UpgradePolicy{
					Mode: to.Ptr(armcompute.UpgradeModeManual),
				},
				VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
					DiagnosticsProfile: &armcompute.DiagnosticsProfile{
						BootDiagnostics: &armcompute.BootDiagnostics{
							Enabled:    to.Ptr(true),
							StorageURI: to.Ptr("http://{existing-storage-account-name}.blob.core.windows.net"),
						},
					},
					NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
						NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
							{
								Name: to.Ptr("{vmss-name}"),
								Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
									EnableIPForwarding: to.Ptr(true),
									IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
										{
											Name: to.Ptr("{vmss-name}"),
											Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
												Subnet: &armcompute.APIEntityReference{
													ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
												},
											},
										}},
									Primary: to.Ptr(true),
								},
							}},
					},
					OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
						AdminPassword:      to.Ptr("{your-password}"),
						AdminUsername:      to.Ptr("{your-username}"),
						ComputerNamePrefix: to.Ptr("{vmss-name}"),
					},
					StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
						ImageReference: &armcompute.ImageReference{
							Offer:     to.Ptr("WindowsServer"),
							Publisher: to.Ptr("MicrosoftWindowsServer"),
							SKU:       to.Ptr("2016-Datacenter"),
							Version:   to.Ptr("latest"),
						},
						OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
							Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
							CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
							ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
								StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
							},
						},
					},
				},
			},
			SKU: &armcompute.SKU{
				Name:     to.Ptr("Standard_D1_v2"),
				Capacity: to.Ptr[int64](3),
				Tier:     to.Ptr("Standard"),
			},
		},
		&armcompute.VirtualMachineScaleSetsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAScaleSetWithBootDiagnostics.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAScaleSetWithBootDiagnostics.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{vmss-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision:        to.Ptr(true),
			ProvisioningState:    to.Ptr("Succeeded"),
			SinglePlacementGroup: to.Ptr(true),
			UniqueID:             to.Ptr("d053ec5a-8da6-495f-ab13-38216503c6d7"),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				DiagnosticsProfile: &armcompute.DiagnosticsProfile{
					BootDiagnostics: &armcompute.BootDiagnostics{
						Enabled:    to.Ptr(true),
						StorageURI: to.Ptr("http://nsgdiagnostic.blob.core.windows.net"),
					},
				},
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
					Secrets:            []*armcompute.VaultSecretGroup{},
					WindowsConfiguration: &armcompute.WindowsConfiguration{
						EnableAutomaticUpdates: to.Ptr(true),
						ProvisionVMAgent:       to.Ptr(true),
					},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineScaleSet)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAScaleSetWithBootDiagnostics.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAScaleSetWithEmptyDataDisksOnEachVm.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set with empty data disks on each vm."},
	})
	client, err = armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"{vmss-name}",
		armcompute.VirtualMachineScaleSet{
			Location: to.Ptr("westus"),
			Properties: &armcompute.VirtualMachineScaleSetProperties{
				Overprovision: to.Ptr(true),
				UpgradePolicy: &armcompute.UpgradePolicy{
					Mode: to.Ptr(armcompute.UpgradeModeManual),
				},
				VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
					NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
						NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
							{
								Name: to.Ptr("{vmss-name}"),
								Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
									EnableIPForwarding: to.Ptr(true),
									IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
										{
											Name: to.Ptr("{vmss-name}"),
											Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
												Subnet: &armcompute.APIEntityReference{
													ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
												},
											},
										}},
									Primary: to.Ptr(true),
								},
							}},
					},
					OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
						AdminPassword:      to.Ptr("{your-password}"),
						AdminUsername:      to.Ptr("{your-username}"),
						ComputerNamePrefix: to.Ptr("{vmss-name}"),
					},
					StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
						DataDisks: []*armcompute.VirtualMachineScaleSetDataDisk{
							{
								CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
								DiskSizeGB:   to.Ptr[int32](1023),
								Lun:          to.Ptr[int32](0),
							},
							{
								CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
								DiskSizeGB:   to.Ptr[int32](1023),
								Lun:          to.Ptr[int32](1),
							}},
						ImageReference: &armcompute.ImageReference{
							Offer:     to.Ptr("WindowsServer"),
							Publisher: to.Ptr("MicrosoftWindowsServer"),
							SKU:       to.Ptr("2016-Datacenter"),
							Version:   to.Ptr("latest"),
						},
						OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
							Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
							CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
							DiskSizeGB:   to.Ptr[int32](512),
							ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
								StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
							},
						},
					},
				},
			},
			SKU: &armcompute.SKU{
				Name:     to.Ptr("Standard_D2_v2"),
				Capacity: to.Ptr[int64](3),
				Tier:     to.Ptr("Standard"),
			},
		},
		&armcompute.VirtualMachineScaleSetsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAScaleSetWithEmptyDataDisksOnEachVm.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAScaleSetWithEmptyDataDisksOnEachVm.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{vmss-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision:        to.Ptr(true),
			ProvisioningState:    to.Ptr("Succeeded"),
			SinglePlacementGroup: to.Ptr(true),
			UniqueID:             to.Ptr("8042c376-4690-4c47-9fa2-fbdad70e32fa"),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
					Secrets:            []*armcompute.VaultSecretGroup{},
					WindowsConfiguration: &armcompute.WindowsConfiguration{
						EnableAutomaticUpdates: to.Ptr(true),
						ProvisionVMAgent:       to.Ptr(true),
					},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					DataDisks: []*armcompute.VirtualMachineScaleSetDataDisk{
						{
							Caching:      to.Ptr(armcompute.CachingTypesNone),
							CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
							DiskSizeGB:   to.Ptr[int32](1023),
							Lun:          to.Ptr[int32](0),
							ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
								StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
							},
						},
						{
							Caching:      to.Ptr(armcompute.CachingTypesNone),
							CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
							DiskSizeGB:   to.Ptr[int32](1023),
							Lun:          to.Ptr[int32](1),
							ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
								StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
							},
						}},
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						DiskSizeGB:   to.Ptr[int32](512),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D2_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineScaleSet)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAScaleSetWithEmptyDataDisksOnEachVm.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAScaleSetWithDiffOsDiskUsingDiffDiskPlacement.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set with ephemeral os disks using placement property."},
	})
	client, err = armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"{vmss-name}",
		armcompute.VirtualMachineScaleSet{
			Location: to.Ptr("westus"),
			Plan: &armcompute.Plan{
				Name:      to.Ptr("windows2016"),
				Product:   to.Ptr("windows-data-science-vm"),
				Publisher: to.Ptr("microsoft-ads"),
			},
			Properties: &armcompute.VirtualMachineScaleSetProperties{
				Overprovision: to.Ptr(true),
				UpgradePolicy: &armcompute.UpgradePolicy{
					Mode: to.Ptr(armcompute.UpgradeModeManual),
				},
				VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
					NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
						NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
							{
								Name: to.Ptr("{vmss-name}"),
								Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
									EnableIPForwarding: to.Ptr(true),
									IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
										{
											Name: to.Ptr("{vmss-name}"),
											Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
												Subnet: &armcompute.APIEntityReference{
													ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
												},
											},
										}},
									Primary: to.Ptr(true),
								},
							}},
					},
					OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
						AdminPassword:      to.Ptr("{your-password}"),
						AdminUsername:      to.Ptr("{your-username}"),
						ComputerNamePrefix: to.Ptr("{vmss-name}"),
					},
					StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
						ImageReference: &armcompute.ImageReference{
							Offer:     to.Ptr("windows-data-science-vm"),
							Publisher: to.Ptr("microsoft-ads"),
							SKU:       to.Ptr("windows2016"),
							Version:   to.Ptr("latest"),
						},
						OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
							Caching:      to.Ptr(armcompute.CachingTypesReadOnly),
							CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
							DiffDiskSettings: &armcompute.DiffDiskSettings{
								Option:    to.Ptr(armcompute.DiffDiskOptionsLocal),
								Placement: to.Ptr(armcompute.DiffDiskPlacementResourceDisk),
							},
							ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
								StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
							},
						},
					},
				},
			},
			SKU: &armcompute.SKU{
				Name:     to.Ptr("Standard_DS1_v2"),
				Capacity: to.Ptr[int64](3),
				Tier:     to.Ptr("Standard"),
			},
		},
		&armcompute.VirtualMachineScaleSetsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAScaleSetWithDiffOsDiskUsingDiffDiskPlacement.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAScaleSetWithDiffOsDiskUsingDiffDiskPlacement.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{vmss-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
		Location: to.Ptr("westus"),
		Plan: &armcompute.Plan{
			Name:      to.Ptr("standard-data-science-vm"),
			Product:   to.Ptr("standard-data-science-vm"),
			Publisher: to.Ptr("microsoft-ads"),
		},
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision:        to.Ptr(true),
			ProvisioningState:    to.Ptr("Succeeded"),
			SinglePlacementGroup: to.Ptr(true),
			UniqueID:             to.Ptr("b9e23088-6ffc-46e0-9e02-b0a6eeef47db"),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
					Secrets:            []*armcompute.VaultSecretGroup{},
					WindowsConfiguration: &armcompute.WindowsConfiguration{
						EnableAutomaticUpdates: to.Ptr(true),
						ProvisionVMAgent:       to.Ptr(true),
					},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("standard-data-science-vm"),
						Publisher: to.Ptr("microsoft-ads"),
						SKU:       to.Ptr("standard-data-science-vm"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadOnly),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						DiffDiskSettings: &armcompute.DiffDiskSettings{
							Option:    to.Ptr(armcompute.DiffDiskOptionsLocal),
							Placement: to.Ptr(armcompute.DiffDiskPlacementResourceDisk),
						},
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_DS1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineScaleSet)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAScaleSetWithDiffOsDiskUsingDiffDiskPlacement.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAScaleSetWithDiffOsDisk.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set with ephemeral os disks."},
	})
	client, err = armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"{vmss-name}",
		armcompute.VirtualMachineScaleSet{
			Location: to.Ptr("westus"),
			Plan: &armcompute.Plan{
				Name:      to.Ptr("windows2016"),
				Product:   to.Ptr("windows-data-science-vm"),
				Publisher: to.Ptr("microsoft-ads"),
			},
			Properties: &armcompute.VirtualMachineScaleSetProperties{
				Overprovision: to.Ptr(true),
				UpgradePolicy: &armcompute.UpgradePolicy{
					Mode: to.Ptr(armcompute.UpgradeModeManual),
				},
				VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
					NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
						NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
							{
								Name: to.Ptr("{vmss-name}"),
								Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
									EnableIPForwarding: to.Ptr(true),
									IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
										{
											Name: to.Ptr("{vmss-name}"),
											Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
												Subnet: &armcompute.APIEntityReference{
													ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
												},
											},
										}},
									Primary: to.Ptr(true),
								},
							}},
					},
					OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
						AdminPassword:      to.Ptr("{your-password}"),
						AdminUsername:      to.Ptr("{your-username}"),
						ComputerNamePrefix: to.Ptr("{vmss-name}"),
					},
					StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
						ImageReference: &armcompute.ImageReference{
							Offer:     to.Ptr("windows-data-science-vm"),
							Publisher: to.Ptr("microsoft-ads"),
							SKU:       to.Ptr("windows2016"),
							Version:   to.Ptr("latest"),
						},
						OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
							Caching:      to.Ptr(armcompute.CachingTypesReadOnly),
							CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
							DiffDiskSettings: &armcompute.DiffDiskSettings{
								Option: to.Ptr(armcompute.DiffDiskOptionsLocal),
							},
							ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
								StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
							},
						},
					},
				},
			},
			SKU: &armcompute.SKU{
				Name:     to.Ptr("Standard_DS1_v2"),
				Capacity: to.Ptr[int64](3),
				Tier:     to.Ptr("Standard"),
			},
		},
		&armcompute.VirtualMachineScaleSetsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAScaleSetWithDiffOsDisk.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAScaleSetWithDiffOsDisk.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{vmss-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
		Location: to.Ptr("westus"),
		Plan: &armcompute.Plan{
			Name:      to.Ptr("standard-data-science-vm"),
			Product:   to.Ptr("standard-data-science-vm"),
			Publisher: to.Ptr("microsoft-ads"),
		},
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision:        to.Ptr(true),
			ProvisioningState:    to.Ptr("Succeeded"),
			SinglePlacementGroup: to.Ptr(true),
			UniqueID:             to.Ptr("b9e23088-6ffc-46e0-9e02-b0a6eeef47db"),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
					Secrets:            []*armcompute.VaultSecretGroup{},
					WindowsConfiguration: &armcompute.WindowsConfiguration{
						EnableAutomaticUpdates: to.Ptr(true),
						ProvisionVMAgent:       to.Ptr(true),
					},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("standard-data-science-vm"),
						Publisher: to.Ptr("microsoft-ads"),
						SKU:       to.Ptr("standard-data-science-vm"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadOnly),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						DiffDiskSettings: &armcompute.DiffDiskSettings{
							Option: to.Ptr(armcompute.DiffDiskOptionsLocal),
						},
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_DS1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineScaleSet)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAScaleSetWithDiffOsDisk.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAScaleSetWithExtensionsTimeBudget.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set with extension time budget."},
	})
	client, err = armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"{vmss-name}",
		armcompute.VirtualMachineScaleSet{
			Location: to.Ptr("westus"),
			Properties: &armcompute.VirtualMachineScaleSetProperties{
				Overprovision: to.Ptr(true),
				UpgradePolicy: &armcompute.UpgradePolicy{
					Mode: to.Ptr(armcompute.UpgradeModeManual),
				},
				VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
					DiagnosticsProfile: &armcompute.DiagnosticsProfile{
						BootDiagnostics: &armcompute.BootDiagnostics{
							Enabled:    to.Ptr(true),
							StorageURI: to.Ptr("http://{existing-storage-account-name}.blob.core.windows.net"),
						},
					},
					ExtensionProfile: &armcompute.VirtualMachineScaleSetExtensionProfile{
						ExtensionsTimeBudget: to.Ptr("PT1H20M"),
						Extensions: []*armcompute.VirtualMachineScaleSetExtension{
							{
								Name: to.Ptr("{extension-name}"),
								Properties: &armcompute.VirtualMachineScaleSetExtensionProperties{
									Type:                    to.Ptr("{extension-Type}"),
									AutoUpgradeMinorVersion: to.Ptr(false),
									Publisher:               to.Ptr("{extension-Publisher}"),
									Settings:                map[string]interface{}{},
									TypeHandlerVersion:      to.Ptr("{handler-version}"),
								},
							}},
					},
					NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
						NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
							{
								Name: to.Ptr("{vmss-name}"),
								Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
									EnableIPForwarding: to.Ptr(true),
									IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
										{
											Name: to.Ptr("{vmss-name}"),
											Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
												Subnet: &armcompute.APIEntityReference{
													ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
												},
											},
										}},
									Primary: to.Ptr(true),
								},
							}},
					},
					OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
						AdminPassword:      to.Ptr("{your-password}"),
						AdminUsername:      to.Ptr("{your-username}"),
						ComputerNamePrefix: to.Ptr("{vmss-name}"),
					},
					StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
						ImageReference: &armcompute.ImageReference{
							Offer:     to.Ptr("WindowsServer"),
							Publisher: to.Ptr("MicrosoftWindowsServer"),
							SKU:       to.Ptr("2016-Datacenter"),
							Version:   to.Ptr("latest"),
						},
						OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
							Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
							CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
							ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
								StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
							},
						},
					},
				},
			},
			SKU: &armcompute.SKU{
				Name:     to.Ptr("Standard_D1_v2"),
				Capacity: to.Ptr[int64](3),
				Tier:     to.Ptr("Standard"),
			},
		},
		&armcompute.VirtualMachineScaleSetsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAScaleSetWithExtensionsTimeBudget.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAScaleSetWithExtensionsTimeBudget.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{vmss-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision:        to.Ptr(true),
			ProvisioningState:    to.Ptr("Succeeded"),
			SinglePlacementGroup: to.Ptr(true),
			UniqueID:             to.Ptr("d053ec5a-8da6-495f-ab13-38216503c6d7"),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				DiagnosticsProfile: &armcompute.DiagnosticsProfile{
					BootDiagnostics: &armcompute.BootDiagnostics{
						Enabled:    to.Ptr(true),
						StorageURI: to.Ptr("http://nsgdiagnostic.blob.core.windows.net"),
					},
				},
				ExtensionProfile: &armcompute.VirtualMachineScaleSetExtensionProfile{
					ExtensionsTimeBudget: to.Ptr("PT1H20M"),
					Extensions: []*armcompute.VirtualMachineScaleSetExtension{
						{
							Name: to.Ptr("{extension-name}"),
							Properties: &armcompute.VirtualMachineScaleSetExtensionProperties{
								Type:                    to.Ptr("{extension-Type}"),
								AutoUpgradeMinorVersion: to.Ptr(false),
								Publisher:               to.Ptr("{extension-Publisher}"),
								Settings:                map[string]interface{}{},
								TypeHandlerVersion:      to.Ptr("{handler-version}"),
							},
						}},
				},
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
					Secrets:            []*armcompute.VaultSecretGroup{},
					WindowsConfiguration: &armcompute.WindowsConfiguration{
						EnableAutomaticUpdates: to.Ptr(true),
						ProvisionVMAgent:       to.Ptr(true),
					},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineScaleSet)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAScaleSetWithExtensionsTimeBudget.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAScaleSetWithManagedBootDiagnostics.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set with managed boot diagnostics."},
	})
	client, err = armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"{vmss-name}",
		armcompute.VirtualMachineScaleSet{
			Location: to.Ptr("westus"),
			Properties: &armcompute.VirtualMachineScaleSetProperties{
				Overprovision: to.Ptr(true),
				UpgradePolicy: &armcompute.UpgradePolicy{
					Mode: to.Ptr(armcompute.UpgradeModeManual),
				},
				VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
					DiagnosticsProfile: &armcompute.DiagnosticsProfile{
						BootDiagnostics: &armcompute.BootDiagnostics{
							Enabled: to.Ptr(true),
						},
					},
					NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
						NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
							{
								Name: to.Ptr("{vmss-name}"),
								Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
									EnableIPForwarding: to.Ptr(true),
									IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
										{
											Name: to.Ptr("{vmss-name}"),
											Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
												Subnet: &armcompute.APIEntityReference{
													ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
												},
											},
										}},
									Primary: to.Ptr(true),
								},
							}},
					},
					OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
						AdminPassword:      to.Ptr("{your-password}"),
						AdminUsername:      to.Ptr("{your-username}"),
						ComputerNamePrefix: to.Ptr("{vmss-name}"),
					},
					StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
						ImageReference: &armcompute.ImageReference{
							Offer:     to.Ptr("WindowsServer"),
							Publisher: to.Ptr("MicrosoftWindowsServer"),
							SKU:       to.Ptr("2016-Datacenter"),
							Version:   to.Ptr("latest"),
						},
						OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
							Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
							CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
							ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
								StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
							},
						},
					},
				},
			},
			SKU: &armcompute.SKU{
				Name:     to.Ptr("Standard_D1_v2"),
				Capacity: to.Ptr[int64](3),
				Tier:     to.Ptr("Standard"),
			},
		},
		&armcompute.VirtualMachineScaleSetsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAScaleSetWithManagedBootDiagnostics.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAScaleSetWithManagedBootDiagnostics.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{vmss-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision:        to.Ptr(true),
			ProvisioningState:    to.Ptr("Succeeded"),
			SinglePlacementGroup: to.Ptr(true),
			UniqueID:             to.Ptr("d053ec5a-8da6-495f-ab13-38216503c6d7"),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				DiagnosticsProfile: &armcompute.DiagnosticsProfile{
					BootDiagnostics: &armcompute.BootDiagnostics{
						Enabled: to.Ptr(true),
					},
				},
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
					Secrets:            []*armcompute.VaultSecretGroup{},
					WindowsConfiguration: &armcompute.WindowsConfiguration{
						EnableAutomaticUpdates: to.Ptr(true),
						ProvisionVMAgent:       to.Ptr(true),
					},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineScaleSet)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAScaleSetWithManagedBootDiagnostics.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAScaleSetWithPasswordAuthentication.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set with password authentication."},
	})
	client, err = armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"{vmss-name}",
		armcompute.VirtualMachineScaleSet{
			Location: to.Ptr("westus"),
			Properties: &armcompute.VirtualMachineScaleSetProperties{
				Overprovision: to.Ptr(true),
				UpgradePolicy: &armcompute.UpgradePolicy{
					Mode: to.Ptr(armcompute.UpgradeModeManual),
				},
				VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
					NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
						NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
							{
								Name: to.Ptr("{vmss-name}"),
								Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
									EnableIPForwarding: to.Ptr(true),
									IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
										{
											Name: to.Ptr("{vmss-name}"),
											Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
												Subnet: &armcompute.APIEntityReference{
													ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
												},
											},
										}},
									Primary: to.Ptr(true),
								},
							}},
					},
					OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
						AdminPassword:      to.Ptr("{your-password}"),
						AdminUsername:      to.Ptr("{your-username}"),
						ComputerNamePrefix: to.Ptr("{vmss-name}"),
					},
					StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
						ImageReference: &armcompute.ImageReference{
							Offer:     to.Ptr("WindowsServer"),
							Publisher: to.Ptr("MicrosoftWindowsServer"),
							SKU:       to.Ptr("2016-Datacenter"),
							Version:   to.Ptr("latest"),
						},
						OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
							Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
							CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
							ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
								StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
							},
						},
					},
				},
			},
			SKU: &armcompute.SKU{
				Name:     to.Ptr("Standard_D1_v2"),
				Capacity: to.Ptr[int64](3),
				Tier:     to.Ptr("Standard"),
			},
		},
		&armcompute.VirtualMachineScaleSetsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAScaleSetWithPasswordAuthentication.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAScaleSetWithPasswordAuthentication.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{vmss-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision:        to.Ptr(true),
			ProvisioningState:    to.Ptr("Succeeded"),
			SinglePlacementGroup: to.Ptr(true),
			UniqueID:             to.Ptr("ffb27c5c-39a5-4d4e-b307-b32598689813"),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
					Secrets:            []*armcompute.VaultSecretGroup{},
					WindowsConfiguration: &armcompute.WindowsConfiguration{
						EnableAutomaticUpdates: to.Ptr(true),
						ProvisionVMAgent:       to.Ptr(true),
					},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineScaleSet)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAScaleSetWithPasswordAuthentication.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAScaleSetWithPremiumStorage.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set with premium storage."},
	})
	client, err = armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"{vmss-name}",
		armcompute.VirtualMachineScaleSet{
			Location: to.Ptr("westus"),
			Properties: &armcompute.VirtualMachineScaleSetProperties{
				Overprovision: to.Ptr(true),
				UpgradePolicy: &armcompute.UpgradePolicy{
					Mode: to.Ptr(armcompute.UpgradeModeManual),
				},
				VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
					NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
						NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
							{
								Name: to.Ptr("{vmss-name}"),
								Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
									EnableIPForwarding: to.Ptr(true),
									IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
										{
											Name: to.Ptr("{vmss-name}"),
											Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
												Subnet: &armcompute.APIEntityReference{
													ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
												},
											},
										}},
									Primary: to.Ptr(true),
								},
							}},
					},
					OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
						AdminPassword:      to.Ptr("{your-password}"),
						AdminUsername:      to.Ptr("{your-username}"),
						ComputerNamePrefix: to.Ptr("{vmss-name}"),
					},
					StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
						ImageReference: &armcompute.ImageReference{
							Offer:     to.Ptr("WindowsServer"),
							Publisher: to.Ptr("MicrosoftWindowsServer"),
							SKU:       to.Ptr("2016-Datacenter"),
							Version:   to.Ptr("latest"),
						},
						OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
							Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
							CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
							ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
								StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
							},
						},
					},
				},
			},
			SKU: &armcompute.SKU{
				Name:     to.Ptr("Standard_D1_v2"),
				Capacity: to.Ptr[int64](3),
				Tier:     to.Ptr("Standard"),
			},
		},
		&armcompute.VirtualMachineScaleSetsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAScaleSetWithPremiumStorage.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAScaleSetWithPremiumStorage.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{vmss-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision:        to.Ptr(true),
			ProvisioningState:    to.Ptr("Succeeded"),
			SinglePlacementGroup: to.Ptr(true),
			UniqueID:             to.Ptr("19fd38a2-f50a-42c6-9dc7-3f9cf3791225"),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
					Secrets:            []*armcompute.VaultSecretGroup{},
					WindowsConfiguration: &armcompute.WindowsConfiguration{
						EnableAutomaticUpdates: to.Ptr(true),
						ProvisionVMAgent:       to.Ptr(true),
					},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_DS1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineScaleSet)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAScaleSetWithPremiumStorage.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAScaleSetWithScaleInPolicy.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set with scaleInPolicy."},
	})
	client, err = armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"{vmss-name}",
		armcompute.VirtualMachineScaleSet{
			Location: to.Ptr("westus"),
			Properties: &armcompute.VirtualMachineScaleSetProperties{
				Overprovision: to.Ptr(true),
				ScaleInPolicy: &armcompute.ScaleInPolicy{
					ForceDeletion: to.Ptr(true),
					Rules: []*armcompute.VirtualMachineScaleSetScaleInRules{
						to.Ptr(armcompute.VirtualMachineScaleSetScaleInRulesOldestVM)},
				},
				UpgradePolicy: &armcompute.UpgradePolicy{
					Mode: to.Ptr(armcompute.UpgradeModeManual),
				},
				VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
					NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
						NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
							{
								Name: to.Ptr("{vmss-name}"),
								Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
									EnableIPForwarding: to.Ptr(true),
									IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
										{
											Name: to.Ptr("{vmss-name}"),
											Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
												Subnet: &armcompute.APIEntityReference{
													ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
												},
											},
										}},
									Primary: to.Ptr(true),
								},
							}},
					},
					OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
						AdminPassword:      to.Ptr("{your-password}"),
						AdminUsername:      to.Ptr("{your-username}"),
						ComputerNamePrefix: to.Ptr("{vmss-name}"),
					},
					StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
						ImageReference: &armcompute.ImageReference{
							Offer:     to.Ptr("WindowsServer"),
							Publisher: to.Ptr("MicrosoftWindowsServer"),
							SKU:       to.Ptr("2016-Datacenter"),
							Version:   to.Ptr("latest"),
						},
						OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
							Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
							CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
							ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
								StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
							},
						},
					},
				},
			},
			SKU: &armcompute.SKU{
				Name:     to.Ptr("Standard_D1_v2"),
				Capacity: to.Ptr[int64](3),
				Tier:     to.Ptr("Standard"),
			},
		},
		&armcompute.VirtualMachineScaleSetsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAScaleSetWithScaleInPolicy.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAScaleSetWithScaleInPolicy.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{vmss-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision:     to.Ptr(true),
			ProvisioningState: to.Ptr("Succeeded"),
			ScaleInPolicy: &armcompute.ScaleInPolicy{
				ForceDeletion: to.Ptr(true),
				Rules: []*armcompute.VirtualMachineScaleSetScaleInRules{
					to.Ptr(armcompute.VirtualMachineScaleSetScaleInRulesOldestVM)},
			},
			SinglePlacementGroup: to.Ptr(true),
			UniqueID:             to.Ptr("d053ec5a-8da6-495f-ab13-38216503c6d7"),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
					Secrets:            []*armcompute.VaultSecretGroup{},
					WindowsConfiguration: &armcompute.WindowsConfiguration{
						EnableAutomaticUpdates: to.Ptr(true),
						ProvisionVMAgent:       to.Ptr(true),
					},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineScaleSet)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAScaleSetWithScaleInPolicy.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAScaleSetWithSpotRestorePolicy.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set with spot restore policy"},
	})
	client, err = armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"{vmss-name}",
		armcompute.VirtualMachineScaleSet{
			Location: to.Ptr("westus"),
			Properties: &armcompute.VirtualMachineScaleSetProperties{
				Overprovision: to.Ptr(true),
				SpotRestorePolicy: &armcompute.SpotRestorePolicy{
					Enabled:        to.Ptr(true),
					RestoreTimeout: to.Ptr("PT1H"),
				},
				UpgradePolicy: &armcompute.UpgradePolicy{
					Mode: to.Ptr(armcompute.UpgradeModeManual),
				},
				VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
					BillingProfile: &armcompute.BillingProfile{
						MaxPrice: to.Ptr[float64](-1),
					},
					EvictionPolicy: to.Ptr(armcompute.VirtualMachineEvictionPolicyTypesDeallocate),
					NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
						NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
							{
								Name: to.Ptr("{vmss-name}"),
								Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
									EnableIPForwarding: to.Ptr(true),
									IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
										{
											Name: to.Ptr("{vmss-name}"),
											Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
												Subnet: &armcompute.APIEntityReference{
													ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
												},
											},
										}},
									Primary: to.Ptr(true),
								},
							}},
					},
					OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
						AdminPassword:      to.Ptr("{your-password}"),
						AdminUsername:      to.Ptr("{your-username}"),
						ComputerNamePrefix: to.Ptr("{vmss-name}"),
					},
					Priority: to.Ptr(armcompute.VirtualMachinePriorityTypesSpot),
					StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
						ImageReference: &armcompute.ImageReference{
							Offer:     to.Ptr("WindowsServer"),
							Publisher: to.Ptr("MicrosoftWindowsServer"),
							SKU:       to.Ptr("2016-Datacenter"),
							Version:   to.Ptr("latest"),
						},
						OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
							Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
							CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
							ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
								StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
							},
						},
					},
				},
			},
			SKU: &armcompute.SKU{
				Name:     to.Ptr("Standard_A8m_v2"),
				Capacity: to.Ptr[int64](2),
				Tier:     to.Ptr("Standard"),
			},
		},
		&armcompute.VirtualMachineScaleSetsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAScaleSetWithSpotRestorePolicy.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAScaleSetWithSpotRestorePolicy.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{vmss-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision:        to.Ptr(true),
			ProvisioningState:    to.Ptr("Succeeded"),
			SinglePlacementGroup: to.Ptr(true),
			SpotRestorePolicy: &armcompute.SpotRestorePolicy{
				Enabled:        to.Ptr(true),
				RestoreTimeout: to.Ptr("PT1H"),
			},
			UniqueID: to.Ptr("d053ec5a-8da6-495f-ab13-38216503c6d7"),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				BillingProfile: &armcompute.BillingProfile{
					MaxPrice: to.Ptr[float64](-1),
				},
				EvictionPolicy: to.Ptr(armcompute.VirtualMachineEvictionPolicyTypesDeallocate),
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
					Secrets:            []*armcompute.VaultSecretGroup{},
					WindowsConfiguration: &armcompute.WindowsConfiguration{
						EnableAutomaticUpdates: to.Ptr(true),
						ProvisionVMAgent:       to.Ptr(true),
					},
				},
				Priority: to.Ptr(armcompute.VirtualMachinePriorityTypesSpot),
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_A8m_v2"),
			Capacity: to.Ptr[int64](2),
			Tier:     to.Ptr("Standard"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineScaleSet)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAScaleSetWithSpotRestorePolicy.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAScaleSetWithSshAuthentication.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set with ssh authentication."},
	})
	client, err = armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"{vmss-name}",
		armcompute.VirtualMachineScaleSet{
			Location: to.Ptr("westus"),
			Properties: &armcompute.VirtualMachineScaleSetProperties{
				Overprovision: to.Ptr(true),
				UpgradePolicy: &armcompute.UpgradePolicy{
					Mode: to.Ptr(armcompute.UpgradeModeManual),
				},
				VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
					NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
						NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
							{
								Name: to.Ptr("{vmss-name}"),
								Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
									EnableIPForwarding: to.Ptr(true),
									IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
										{
											Name: to.Ptr("{vmss-name}"),
											Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
												Subnet: &armcompute.APIEntityReference{
													ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
												},
											},
										}},
									Primary: to.Ptr(true),
								},
							}},
					},
					OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
						AdminUsername:      to.Ptr("{your-username}"),
						ComputerNamePrefix: to.Ptr("{vmss-name}"),
						LinuxConfiguration: &armcompute.LinuxConfiguration{
							DisablePasswordAuthentication: to.Ptr(true),
							SSH: &armcompute.SSHConfiguration{
								PublicKeys: []*armcompute.SSHPublicKey{
									{
										Path:    to.Ptr("/home/{your-username}/.ssh/authorized_keys"),
										KeyData: to.Ptr("ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCeClRAk2ipUs/l5voIsDC5q9RI+YSRd1Bvd/O+axgY4WiBzG+4FwJWZm/mLLe5DoOdHQwmU2FrKXZSW4w2sYE70KeWnrFViCOX5MTVvJgPE8ClugNl8RWth/tU849DvM9sT7vFgfVSHcAS2yDRyDlueii+8nF2ym8XWAPltFVCyLHRsyBp5YPqK8JFYIa1eybKsY3hEAxRCA+/7bq8et+Gj3coOsuRmrehav7rE6N12Pb80I6ofa6SM5XNYq4Xk0iYNx7R3kdz0Jj9XgZYWjAHjJmT0gTRoOnt6upOuxK7xI/ykWrllgpXrCPu3Ymz+c+ujaqcxDopnAl2lmf69/J1"),
									}},
							},
						},
					},
					StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
						ImageReference: &armcompute.ImageReference{
							Offer:     to.Ptr("WindowsServer"),
							Publisher: to.Ptr("MicrosoftWindowsServer"),
							SKU:       to.Ptr("2016-Datacenter"),
							Version:   to.Ptr("latest"),
						},
						OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
							Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
							CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
							ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
								StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
							},
						},
					},
				},
			},
			SKU: &armcompute.SKU{
				Name:     to.Ptr("Standard_D1_v2"),
				Capacity: to.Ptr[int64](3),
				Tier:     to.Ptr("Standard"),
			},
		},
		&armcompute.VirtualMachineScaleSetsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAScaleSetWithSshAuthentication.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAScaleSetWithSshAuthentication.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{vmss-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision:        to.Ptr(true),
			ProvisioningState:    to.Ptr("Succeeded"),
			SinglePlacementGroup: to.Ptr(true),
			UniqueID:             to.Ptr("fb73af19-0090-467c-9ced-b00bceab1c45"),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
					LinuxConfiguration: &armcompute.LinuxConfiguration{
						DisablePasswordAuthentication: to.Ptr(true),
						SSH: &armcompute.SSHConfiguration{
							PublicKeys: []*armcompute.SSHPublicKey{
								{
									Path:    to.Ptr("/home/{your-username}/.ssh/authorized_keys"),
									KeyData: to.Ptr("ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCeClRAk2ipUs/l5voIsDC5q9RI+YSRd1Bvd/O+axgY4WiBzG+4FwJWZm/mLLe5DoOdHQwmU2FrKXZSW4w2sYE70KeWnrFViCOX5MTVvJgPE8ClugNl8RWth/tU849DvM9sT7vFgfVSHcAS2yDRyDlueii+8nF2ym8XWAPltFVCyLHRsyBp5YPqK8JFYIa1eybKsY3hEAxRCA+/7bq8et+Gj3coOsuRmrehav7rE6N12Pb80I6ofa6SM5XNYq4Xk0iYNx7R3kdz0Jj9XgZYWjAHjJmT0gTRoOnt6upOuxK7xI/ykWrllgpXrCPu3Ymz+c+ujaqcxDopnAl2lmf69/J1"),
								}},
						},
					},
					Secrets: []*armcompute.VaultSecretGroup{},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("UbuntuServer"),
						Publisher: to.Ptr("Canonical"),
						SKU:       to.Ptr("16.04-LTS"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineScaleSet)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAScaleSetWithSshAuthentication.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAScaleSetWithTerminateScheduledEventEnabled.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set with terminate scheduled events enabled."},
	})
	client, err = armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"{vmss-name}",
		armcompute.VirtualMachineScaleSet{
			Location: to.Ptr("westus"),
			Properties: &armcompute.VirtualMachineScaleSetProperties{
				Overprovision: to.Ptr(true),
				UpgradePolicy: &armcompute.UpgradePolicy{
					Mode: to.Ptr(armcompute.UpgradeModeManual),
				},
				VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
					NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
						NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
							{
								Name: to.Ptr("{vmss-name}"),
								Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
									EnableIPForwarding: to.Ptr(true),
									IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
										{
											Name: to.Ptr("{vmss-name}"),
											Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
												Subnet: &armcompute.APIEntityReference{
													ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
												},
											},
										}},
									Primary: to.Ptr(true),
								},
							}},
					},
					OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
						AdminPassword:      to.Ptr("{your-password}"),
						AdminUsername:      to.Ptr("{your-username}"),
						ComputerNamePrefix: to.Ptr("{vmss-name}"),
					},
					ScheduledEventsProfile: &armcompute.ScheduledEventsProfile{
						TerminateNotificationProfile: &armcompute.TerminateNotificationProfile{
							Enable:           to.Ptr(true),
							NotBeforeTimeout: to.Ptr("PT5M"),
						},
					},
					StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
						ImageReference: &armcompute.ImageReference{
							Offer:     to.Ptr("WindowsServer"),
							Publisher: to.Ptr("MicrosoftWindowsServer"),
							SKU:       to.Ptr("2016-Datacenter"),
							Version:   to.Ptr("latest"),
						},
						OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
							Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
							CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
							ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
								StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
							},
						},
					},
				},
			},
			SKU: &armcompute.SKU{
				Name:     to.Ptr("Standard_D1_v2"),
				Capacity: to.Ptr[int64](3),
				Tier:     to.Ptr("Standard"),
			},
		},
		&armcompute.VirtualMachineScaleSetsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAScaleSetWithTerminateScheduledEventEnabled.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAScaleSetWithTerminateScheduledEventEnabled.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{vmss-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision:        to.Ptr(true),
			ProvisioningState:    to.Ptr("Succeeded"),
			SinglePlacementGroup: to.Ptr(true),
			UniqueID:             to.Ptr("d053ec5a-8da6-495f-ab13-38216503c6d7"),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
					Secrets:            []*armcompute.VaultSecretGroup{},
					WindowsConfiguration: &armcompute.WindowsConfiguration{
						EnableAutomaticUpdates: to.Ptr(true),
						ProvisionVMAgent:       to.Ptr(true),
					},
				},
				ScheduledEventsProfile: &armcompute.ScheduledEventsProfile{
					TerminateNotificationProfile: &armcompute.TerminateNotificationProfile{
						Enable:           to.Ptr(true),
						NotBeforeTimeout: to.Ptr("PT5M"),
					},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineScaleSet)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAScaleSetWithTerminateScheduledEventEnabled.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateOrUpdateAScaleSetWithUserData.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set with userData."},
	})
	client, err = armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"{vmss-name}",
		armcompute.VirtualMachineScaleSet{
			Location: to.Ptr("westus"),
			Properties: &armcompute.VirtualMachineScaleSetProperties{
				Overprovision: to.Ptr(true),
				UpgradePolicy: &armcompute.UpgradePolicy{
					Mode: to.Ptr(armcompute.UpgradeModeManual),
				},
				VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
					NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
						NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
							{
								Name: to.Ptr("{vmss-name}"),
								Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
									EnableIPForwarding: to.Ptr(true),
									IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
										{
											Name: to.Ptr("{vmss-name}"),
											Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
												Subnet: &armcompute.APIEntityReference{
													ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
												},
											},
										}},
									Primary: to.Ptr(true),
								},
							}},
					},
					OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
						AdminPassword:      to.Ptr("{your-password}"),
						AdminUsername:      to.Ptr("{your-username}"),
						ComputerNamePrefix: to.Ptr("{vmss-name}"),
					},
					StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
						ImageReference: &armcompute.ImageReference{
							Offer:     to.Ptr("WindowsServer"),
							Publisher: to.Ptr("MicrosoftWindowsServer"),
							SKU:       to.Ptr("2016-Datacenter"),
							Version:   to.Ptr("latest"),
						},
						OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
							Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
							CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
							ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
								StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
							},
						},
					},
					UserData: to.Ptr("RXhhbXBsZSBVc2VyRGF0YQ=="),
				},
			},
			SKU: &armcompute.SKU{
				Name:     to.Ptr("Standard_D1_v2"),
				Capacity: to.Ptr[int64](3),
				Tier:     to.Ptr("Standard"),
			},
		},
		&armcompute.VirtualMachineScaleSetsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateOrUpdateAScaleSetWithUserData.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateOrUpdateAScaleSetWithUserData.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{vmss-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision:        to.Ptr(true),
			ProvisioningState:    to.Ptr("Succeeded"),
			SinglePlacementGroup: to.Ptr(true),
			UniqueID:             to.Ptr("d053ec5a-8da6-495f-ab13-38216503c6d7"),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				DiagnosticsProfile: &armcompute.DiagnosticsProfile{
					BootDiagnostics: &armcompute.BootDiagnostics{
						Enabled:    to.Ptr(true),
						StorageURI: to.Ptr("http://nsgdiagnostic.blob.core.windows.net"),
					},
				},
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
					Secrets:            []*armcompute.VaultSecretGroup{},
					WindowsConfiguration: &armcompute.WindowsConfiguration{
						EnableAutomaticUpdates: to.Ptr(true),
						ProvisionVMAgent:       to.Ptr(true),
					},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineScaleSet)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateOrUpdateAScaleSetWithUserData.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAScaleSetWithVMsInDifferentZones.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set with virtual machines in different zones."},
	})
	client, err = armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"{vmss-name}",
		armcompute.VirtualMachineScaleSet{
			Location: to.Ptr("centralus"),
			Properties: &armcompute.VirtualMachineScaleSetProperties{
				Overprovision: to.Ptr(true),
				UpgradePolicy: &armcompute.UpgradePolicy{
					Mode: to.Ptr(armcompute.UpgradeModeAutomatic),
				},
				VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
					NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
						NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
							{
								Name: to.Ptr("{vmss-name}"),
								Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
									EnableIPForwarding: to.Ptr(true),
									IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
										{
											Name: to.Ptr("{vmss-name}"),
											Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
												Subnet: &armcompute.APIEntityReference{
													ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
												},
											},
										}},
									Primary: to.Ptr(true),
								},
							}},
					},
					OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
						AdminPassword:      to.Ptr("{your-password}"),
						AdminUsername:      to.Ptr("{your-username}"),
						ComputerNamePrefix: to.Ptr("{vmss-name}"),
					},
					StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
						DataDisks: []*armcompute.VirtualMachineScaleSetDataDisk{
							{
								CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
								DiskSizeGB:   to.Ptr[int32](1023),
								Lun:          to.Ptr[int32](0),
							},
							{
								CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
								DiskSizeGB:   to.Ptr[int32](1023),
								Lun:          to.Ptr[int32](1),
							}},
						ImageReference: &armcompute.ImageReference{
							Offer:     to.Ptr("WindowsServer"),
							Publisher: to.Ptr("MicrosoftWindowsServer"),
							SKU:       to.Ptr("2016-Datacenter"),
							Version:   to.Ptr("latest"),
						},
						OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
							Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
							CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
							DiskSizeGB:   to.Ptr[int32](512),
							ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
								StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
							},
						},
					},
				},
			},
			SKU: &armcompute.SKU{
				Name:     to.Ptr("Standard_A1_v2"),
				Capacity: to.Ptr[int64](2),
				Tier:     to.Ptr("Standard"),
			},
			Zones: []*string{
				to.Ptr("1"),
				to.Ptr("3")},
		},
		&armcompute.VirtualMachineScaleSetsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAScaleSetWithVMsInDifferentZones.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAScaleSetWithVMsInDifferentZones.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{vmss-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
		Location: to.Ptr("centralus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision:        to.Ptr(true),
			ProvisioningState:    to.Ptr("Succeeded"),
			SinglePlacementGroup: to.Ptr(false),
			UniqueID:             to.Ptr("8042c376-4690-4c47-9fa2-fbdad70e32fa"),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeAutomatic),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
					Secrets:            []*armcompute.VaultSecretGroup{},
					WindowsConfiguration: &armcompute.WindowsConfiguration{
						EnableAutomaticUpdates: to.Ptr(true),
						ProvisionVMAgent:       to.Ptr(true),
					},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					DataDisks: []*armcompute.VirtualMachineScaleSetDataDisk{
						{
							Caching:      to.Ptr(armcompute.CachingTypesNone),
							CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
							DiskSizeGB:   to.Ptr[int32](1023),
							Lun:          to.Ptr[int32](0),
							ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
								StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
							},
						},
						{
							Caching:      to.Ptr(armcompute.CachingTypesNone),
							CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
							DiskSizeGB:   to.Ptr[int32](1023),
							Lun:          to.Ptr[int32](1),
							ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
								StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
							},
						}},
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						DiskSizeGB:   to.Ptr[int32](512),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
			ZoneBalance: to.Ptr(false),
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_A1_v2"),
			Capacity: to.Ptr[int64](2),
			Tier:     to.Ptr("Standard"),
		},
		Zones: []*string{
			to.Ptr("1"),
			to.Ptr("3")},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineScaleSet)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAScaleSetWithVMsInDifferentZones.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateOrUpdateAScaleSetWithVMSizeProperties.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a scale set with vm size properties"},
	})
	client, err = armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"{vmss-name}",
		armcompute.VirtualMachineScaleSet{
			Location: to.Ptr("westus"),
			Properties: &armcompute.VirtualMachineScaleSetProperties{
				Overprovision: to.Ptr(true),
				UpgradePolicy: &armcompute.UpgradePolicy{
					Mode: to.Ptr(armcompute.UpgradeModeManual),
				},
				VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
					HardwareProfile: &armcompute.VirtualMachineScaleSetHardwareProfile{
						VMSizeProperties: &armcompute.VMSizeProperties{
							VCPUsAvailable: to.Ptr[int32](1),
							VCPUsPerCore:   to.Ptr[int32](1),
						},
					},
					NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
						NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
							{
								Name: to.Ptr("{vmss-name}"),
								Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
									EnableIPForwarding: to.Ptr(true),
									IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
										{
											Name: to.Ptr("{vmss-name}"),
											Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
												Subnet: &armcompute.APIEntityReference{
													ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
												},
											},
										}},
									Primary: to.Ptr(true),
								},
							}},
					},
					OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
						AdminPassword:      to.Ptr("{your-password}"),
						AdminUsername:      to.Ptr("{your-username}"),
						ComputerNamePrefix: to.Ptr("{vmss-name}"),
					},
					StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
						ImageReference: &armcompute.ImageReference{
							Offer:     to.Ptr("WindowsServer"),
							Publisher: to.Ptr("MicrosoftWindowsServer"),
							SKU:       to.Ptr("2016-Datacenter"),
							Version:   to.Ptr("latest"),
						},
						OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
							Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
							CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
							ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
								StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
							},
						},
					},
					UserData: to.Ptr("RXhhbXBsZSBVc2VyRGF0YQ=="),
				},
			},
			SKU: &armcompute.SKU{
				Name:     to.Ptr("Standard_D1_v2"),
				Capacity: to.Ptr[int64](3),
				Tier:     to.Ptr("Standard"),
			},
		},
		&armcompute.VirtualMachineScaleSetsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateOrUpdateAScaleSetWithVMSizeProperties.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateOrUpdateAScaleSetWithVMSizeProperties.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{vmss-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision:        to.Ptr(true),
			ProvisioningState:    to.Ptr("Succeeded"),
			SinglePlacementGroup: to.Ptr(true),
			UniqueID:             to.Ptr("d053ec5a-8da6-495f-ab13-38216503c6d7"),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				DiagnosticsProfile: &armcompute.DiagnosticsProfile{
					BootDiagnostics: &armcompute.BootDiagnostics{
						Enabled:    to.Ptr(true),
						StorageURI: to.Ptr("http://nsgdiagnostic.blob.core.windows.net"),
					},
				},
				HardwareProfile: &armcompute.VirtualMachineScaleSetHardwareProfile{
					VMSizeProperties: &armcompute.VMSizeProperties{
						VCPUsAvailable: to.Ptr[int32](1),
						VCPUsPerCore:   to.Ptr[int32](1),
					},
				},
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
					Secrets:            []*armcompute.VaultSecretGroup{},
					WindowsConfiguration: &armcompute.WindowsConfiguration{
						EnableAutomaticUpdates: to.Ptr(true),
						ProvisionVMAgent:       to.Ptr(true),
					},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineScaleSet)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateOrUpdateAScaleSetWithVMSizeProperties.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateOrUpdateAScaleSetWithCapacityReservation.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a scale set with capacity reservation."},
	})
	client, err = armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"{vmss-name}",
		armcompute.VirtualMachineScaleSet{
			Location: to.Ptr("westus"),
			Properties: &armcompute.VirtualMachineScaleSetProperties{
				Overprovision: to.Ptr(true),
				UpgradePolicy: &armcompute.UpgradePolicy{
					Mode: to.Ptr(armcompute.UpgradeModeManual),
				},
				VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
					CapacityReservation: &armcompute.CapacityReservationProfile{
						CapacityReservationGroup: &armcompute.SubResource{
							ID: to.Ptr("subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/CapacityReservationGroups/{crgName}"),
						},
					},
					NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
						NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
							{
								Name: to.Ptr("{vmss-name}"),
								Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
									EnableIPForwarding: to.Ptr(true),
									IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
										{
											Name: to.Ptr("{vmss-name}"),
											Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
												Subnet: &armcompute.APIEntityReference{
													ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
												},
											},
										}},
									Primary: to.Ptr(true),
								},
							}},
					},
					OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
						AdminPassword:      to.Ptr("{your-password}"),
						AdminUsername:      to.Ptr("{your-username}"),
						ComputerNamePrefix: to.Ptr("{vmss-name}"),
					},
					StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
						ImageReference: &armcompute.ImageReference{
							Offer:     to.Ptr("WindowsServer"),
							Publisher: to.Ptr("MicrosoftWindowsServer"),
							SKU:       to.Ptr("2016-Datacenter"),
							Version:   to.Ptr("latest"),
						},
						OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
							Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
							CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
							ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
								StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
							},
						},
					},
				},
			},
			SKU: &armcompute.SKU{
				Name:     to.Ptr("Standard_DS1_v2"),
				Capacity: to.Ptr[int64](3),
				Tier:     to.Ptr("Standard"),
			},
		},
		&armcompute.VirtualMachineScaleSetsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateOrUpdateAScaleSetWithCapacityReservation.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateOrUpdateAScaleSetWithCapacityReservation.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{vmss-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			Overprovision:        to.Ptr(true),
			ProvisioningState:    to.Ptr("Succeeded"),
			SinglePlacementGroup: to.Ptr(true),
			UniqueID:             to.Ptr("d053ec5a-8da6-495f-ab13-38216503c6d7"),
			UpgradePolicy: &armcompute.UpgradePolicy{
				Mode: to.Ptr(armcompute.UpgradeModeManual),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				CapacityReservation: &armcompute.CapacityReservationProfile{
					CapacityReservationGroup: &armcompute.SubResource{
						ID: to.Ptr("subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/CapacityReservationGroups/{crgName}"),
					},
				},
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("{vmss-name}"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(false),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/nsgExistingVnet/subnets/nsgExistingSubnet"),
											},
										},
									}},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
					Secrets:            []*armcompute.VaultSecretGroup{},
					WindowsConfiguration: &armcompute.WindowsConfiguration{
						EnableAutomaticUpdates: to.Ptr(true),
						ProvisionVMAgent:       to.Ptr(true),
					},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("WindowsServer"),
						Publisher: to.Ptr("MicrosoftWindowsServer"),
						SKU:       to.Ptr("2016-Datacenter"),
						Version:   to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_DS1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineScaleSet)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateOrUpdateAScaleSetWithCapacityReservation.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestVirtualMachineScaleSets_Update(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_Update_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSets_Update_MaximumSet_Gen"},
	})
	client, err := armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginUpdate(ctx,
		"rgcompute",
		"aaaaaaaaaaaaa",
		armcompute.VirtualMachineScaleSetUpdate{
			Tags: map[string]*string{
				"key246": to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaa"),
			},
			Identity: &armcompute.VirtualMachineScaleSetIdentity{
				Type: to.Ptr(armcompute.ResourceIdentityTypeSystemAssigned),
				UserAssignedIdentities: map[string]*armcompute.VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue{
					"key3951": &armcompute.VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue{},
				},
			},
			Plan: &armcompute.Plan{
				Name:          to.Ptr("windows2016"),
				Product:       to.Ptr("windows-data-science-vm"),
				PromotionCode: to.Ptr("aaaaaaaaaa"),
				Publisher:     to.Ptr("microsoft-ads"),
			},
			Properties: &armcompute.VirtualMachineScaleSetUpdateProperties{
				AdditionalCapabilities: &armcompute.AdditionalCapabilities{
					HibernationEnabled: to.Ptr(true),
					UltraSSDEnabled:    to.Ptr(true),
				},
				AutomaticRepairsPolicy: &armcompute.AutomaticRepairsPolicy{
					Enabled:     to.Ptr(true),
					GracePeriod: to.Ptr("PT30M"),
				},
				DoNotRunExtensionsOnOverprovisionedVMs: to.Ptr(true),
				Overprovision:                          to.Ptr(true),
				ProximityPlacementGroup: &armcompute.SubResource{
					ID: to.Ptr("subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot"),
				},
				ScaleInPolicy: &armcompute.ScaleInPolicy{
					ForceDeletion: to.Ptr(true),
					Rules: []*armcompute.VirtualMachineScaleSetScaleInRules{
						to.Ptr(armcompute.VirtualMachineScaleSetScaleInRulesOldestVM)},
				},
				SinglePlacementGroup: to.Ptr(true),
				UpgradePolicy: &armcompute.UpgradePolicy{
					AutomaticOSUpgradePolicy: &armcompute.AutomaticOSUpgradePolicy{
						DisableAutomaticRollback: to.Ptr(true),
						EnableAutomaticOSUpgrade: to.Ptr(true),
					},
					Mode: to.Ptr(armcompute.UpgradeModeManual),
					RollingUpgradePolicy: &armcompute.RollingUpgradePolicy{
						EnableCrossZoneUpgrade:              to.Ptr(true),
						MaxBatchInstancePercent:             to.Ptr[int32](49),
						MaxUnhealthyInstancePercent:         to.Ptr[int32](81),
						MaxUnhealthyUpgradedInstancePercent: to.Ptr[int32](98),
						PauseTimeBetweenBatches:             to.Ptr("aaaaaaaaaaaaaaa"),
						PrioritizeUnhealthyInstances:        to.Ptr(true),
					},
				},
				VirtualMachineProfile: &armcompute.VirtualMachineScaleSetUpdateVMProfile{
					BillingProfile: &armcompute.BillingProfile{
						MaxPrice: to.Ptr[float64](-1),
					},
					DiagnosticsProfile: &armcompute.DiagnosticsProfile{
						BootDiagnostics: &armcompute.BootDiagnostics{
							Enabled:    to.Ptr(true),
							StorageURI: to.Ptr("http://{existing-storage-account-name}.blob.core.windows.net"),
						},
					},
					ExtensionProfile: &armcompute.VirtualMachineScaleSetExtensionProfile{
						ExtensionsTimeBudget: to.Ptr("PT1H20M"),
						Extensions: []*armcompute.VirtualMachineScaleSetExtension{
							{
								Name: to.Ptr("{extension-name}"),
								Properties: &armcompute.VirtualMachineScaleSetExtensionProperties{
									Type:                    to.Ptr("{extension-Type}"),
									AutoUpgradeMinorVersion: to.Ptr(true),
									EnableAutomaticUpgrade:  to.Ptr(true),
									ForceUpdateTag:          to.Ptr("aaaaaaaaa"),
									ProtectedSettings:       map[string]interface{}{},
									ProvisionAfterExtensions: []*string{
										to.Ptr("aa")},
									Publisher:          to.Ptr("{extension-Publisher}"),
									Settings:           map[string]interface{}{},
									SuppressFailures:   to.Ptr(true),
									TypeHandlerVersion: to.Ptr("{handler-version}"),
								},
							}},
					},
					LicenseType: to.Ptr("aaaaaaaaaaaa"),
					NetworkProfile: &armcompute.VirtualMachineScaleSetUpdateNetworkProfile{
						HealthProbe: &armcompute.APIEntityReference{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/disk123"),
						},
						NetworkAPIVersion: to.Ptr(armcompute.NetworkAPIVersionTwoThousandTwenty1101),
						NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetUpdateNetworkConfiguration{
							{
								ID:   to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
								Name: to.Ptr("aaaaaaaa"),
								Properties: &armcompute.VirtualMachineScaleSetUpdateNetworkConfigurationProperties{
									DeleteOption: to.Ptr(armcompute.DeleteOptionsDelete),
									DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
										DNSServers: []*string{},
									},
									EnableAcceleratedNetworking: to.Ptr(true),
									EnableFpga:                  to.Ptr(true),
									EnableIPForwarding:          to.Ptr(true),
									IPConfigurations: []*armcompute.VirtualMachineScaleSetUpdateIPConfiguration{
										{
											ID:   to.Ptr("aaaaaaaaaaaaaaaa"),
											Name: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
											Properties: &armcompute.VirtualMachineScaleSetUpdateIPConfigurationProperties{
												ApplicationGatewayBackendAddressPools: []*armcompute.SubResource{
													{
														ID: to.Ptr("subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot"),
													}},
												ApplicationSecurityGroups: []*armcompute.SubResource{
													{
														ID: to.Ptr("subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot"),
													}},
												LoadBalancerBackendAddressPools: []*armcompute.SubResource{
													{
														ID: to.Ptr("subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot"),
													}},
												LoadBalancerInboundNatPools: []*armcompute.SubResource{
													{
														ID: to.Ptr("subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot"),
													}},
												Primary:                 to.Ptr(true),
												PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
												PublicIPAddressConfiguration: &armcompute.VirtualMachineScaleSetUpdatePublicIPAddressConfiguration{
													Name: to.Ptr("a"),
													Properties: &armcompute.VirtualMachineScaleSetUpdatePublicIPAddressConfigurationProperties{
														DeleteOption: to.Ptr(armcompute.DeleteOptionsDelete),
														DNSSettings: &armcompute.VirtualMachineScaleSetPublicIPAddressConfigurationDNSSettings{
															DomainNameLabel: to.Ptr("aaaaaaaaaaaaaaaaaa"),
														},
														IdleTimeoutInMinutes: to.Ptr[int32](3),
													},
												},
												Subnet: &armcompute.APIEntityReference{
													ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/disk123"),
												},
											},
										}},
									NetworkSecurityGroup: &armcompute.SubResource{
										ID: to.Ptr("subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot"),
									},
									Primary: to.Ptr(true),
								},
							}},
					},
					OSProfile: &armcompute.VirtualMachineScaleSetUpdateOSProfile{
						CustomData: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaa"),
						LinuxConfiguration: &armcompute.LinuxConfiguration{
							DisablePasswordAuthentication: to.Ptr(true),
							PatchSettings: &armcompute.LinuxPatchSettings{
								AssessmentMode: to.Ptr(armcompute.LinuxPatchAssessmentModeImageDefault),
								PatchMode:      to.Ptr(armcompute.LinuxVMGuestPatchModeImageDefault),
							},
							ProvisionVMAgent: to.Ptr(true),
							SSH: &armcompute.SSHConfiguration{
								PublicKeys: []*armcompute.SSHPublicKey{
									{
										Path:    to.Ptr("/home/{your-username}/.ssh/authorized_keys"),
										KeyData: to.Ptr("ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCeClRAk2ipUs/l5voIsDC5q9RI+YSRd1Bvd/O+axgY4WiBzG+4FwJWZm/mLLe5DoOdHQwmU2FrKXZSW4w2sYE70KeWnrFViCOX5MTVvJgPE8ClugNl8RWth/tU849DvM9sT7vFgfVSHcAS2yDRyDlueii+8nF2ym8XWAPltFVCyLHRsyBp5YPqK8JFYIa1eybKsY3hEAxRCA+/7bq8et+Gj3coOsuRmrehav7rE6N12Pb80I6ofa6SM5XNYq4Xk0iYNx7R3kdz0Jj9XgZYWjAHjJmT0gTRoOnt6upOuxK7xI/ykWrllgpXrCPu3Ymz+c+ujaqcxDopnAl2lmf69/J1"),
									}},
							},
						},
						Secrets: []*armcompute.VaultSecretGroup{
							{
								SourceVault: &armcompute.SubResource{
									ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
								},
								VaultCertificates: []*armcompute.VaultCertificate{
									{
										CertificateStore: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaa"),
										CertificateURL:   to.Ptr("aaaaaaa"),
									}},
							}},
						WindowsConfiguration: &armcompute.WindowsConfiguration{
							AdditionalUnattendContent: []*armcompute.AdditionalUnattendContent{
								{
									ComponentName: to.Ptr("Microsoft-Windows-Shell-Setup"),
									Content:       to.Ptr("aaaaaaaaaaaaaaaaaaaa"),
									PassName:      to.Ptr("OobeSystem"),
									SettingName:   to.Ptr(armcompute.SettingNamesAutoLogon),
								}},
							EnableAutomaticUpdates: to.Ptr(true),
							PatchSettings: &armcompute.PatchSettings{
								AssessmentMode:    to.Ptr(armcompute.WindowsPatchAssessmentModeImageDefault),
								EnableHotpatching: to.Ptr(true),
								PatchMode:         to.Ptr(armcompute.WindowsVMGuestPatchModeAutomaticByOS),
							},
							ProvisionVMAgent: to.Ptr(true),
							TimeZone:         to.Ptr("aaaaaaaaaaaaaaaa"),
							WinRM: &armcompute.WinRMConfiguration{
								Listeners: []*armcompute.WinRMListener{
									{
										CertificateURL: to.Ptr("aaaaaaaaaaaaaaaaaaaaaa"),
										Protocol:       to.Ptr(armcompute.ProtocolTypesHTTP),
									}},
							},
						},
					},
					ScheduledEventsProfile: &armcompute.ScheduledEventsProfile{
						TerminateNotificationProfile: &armcompute.TerminateNotificationProfile{
							Enable:           to.Ptr(true),
							NotBeforeTimeout: to.Ptr("PT10M"),
						},
					},
					SecurityProfile: &armcompute.SecurityProfile{
						EncryptionAtHost: to.Ptr(true),
						SecurityType:     to.Ptr(armcompute.SecurityTypesTrustedLaunch),
						UefiSettings: &armcompute.UefiSettings{
							SecureBootEnabled: to.Ptr(true),
							VTpmEnabled:       to.Ptr(true),
						},
					},
					StorageProfile: &armcompute.VirtualMachineScaleSetUpdateStorageProfile{
						DataDisks: []*armcompute.VirtualMachineScaleSetDataDisk{
							{
								Name:              to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaa"),
								Caching:           to.Ptr(armcompute.CachingTypesNone),
								CreateOption:      to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
								DiskIOPSReadWrite: to.Ptr[int64](28),
								DiskMBpsReadWrite: to.Ptr[int64](15),
								DiskSizeGB:        to.Ptr[int32](1023),
								Lun:               to.Ptr[int32](26),
								ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
									DiskEncryptionSet: &armcompute.DiskEncryptionSetParameters{
										ID: to.Ptr("aaaaaaaaaaaa"),
									},
									StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
								},
								WriteAcceleratorEnabled: to.Ptr(true),
							}},
						ImageReference: &armcompute.ImageReference{
							ID:                   to.Ptr("aaaaaaaaaaaaaaaaaaa"),
							Offer:                to.Ptr("WindowsServer"),
							Publisher:            to.Ptr("MicrosoftWindowsServer"),
							SharedGalleryImageID: to.Ptr("aaaaaa"),
							SKU:                  to.Ptr("2016-Datacenter"),
							Version:              to.Ptr("latest"),
						},
						OSDisk: &armcompute.VirtualMachineScaleSetUpdateOSDisk{
							Caching:    to.Ptr(armcompute.CachingTypesReadWrite),
							DiskSizeGB: to.Ptr[int32](6),
							Image: &armcompute.VirtualHardDisk{
								URI: to.Ptr("http://{existing-storage-account-name}.blob.core.windows.net/{existing-container-name}/myDisk.vhd"),
							},
							ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
								DiskEncryptionSet: &armcompute.DiskEncryptionSetParameters{
									ID: to.Ptr("aaaaaaaaaaaa"),
								},
								StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
							},
							VhdContainers: []*string{
								to.Ptr("aa")},
							WriteAcceleratorEnabled: to.Ptr(true),
						},
					},
					UserData: to.Ptr("aaaaaaaaaaaaa"),
				},
			},
			SKU: &armcompute.SKU{
				Name:     to.Ptr("DSv3-Type1"),
				Capacity: to.Ptr[int64](7),
				Tier:     to.Ptr("aaa"),
			},
		},
		&armcompute.VirtualMachineScaleSetsClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_Update_MaximumSet_Gen.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_Update_MaximumSet_Gen.json: %v", err)
	}
	// Response check
	exampleRes := armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("{virtualMachineScaleSetName}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{virtualMachineScaleSetName}"),
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"key8425": to.Ptr("aaa"),
		},
		ExtendedLocation: &armcompute.ExtendedLocation{
			Name: to.Ptr("aaaaaaaaaaaaaaaaaaaaa"),
			Type: to.Ptr(armcompute.ExtendedLocationTypesEdgeZone),
		},
		Identity: &armcompute.VirtualMachineScaleSetIdentity{
			Type:        to.Ptr(armcompute.ResourceIdentityTypeSystemAssigned),
			PrincipalID: to.Ptr("aaaaaaaaaaaaaaa"),
			TenantID:    to.Ptr("aaaaaaaaaaaaaaaa"),
			UserAssignedIdentities: map[string]*armcompute.VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue{
				"key3951": &armcompute.VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue{
					ClientID:    to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaa"),
					PrincipalID: to.Ptr("aaaa"),
				},
			},
		},
		Plan: &armcompute.Plan{
			Name:          to.Ptr("aaaaaaaaaa"),
			Product:       to.Ptr("aaaaaaaaaaaaaaaaaaaa"),
			PromotionCode: to.Ptr("aaaaaaaaaaaaaaaaaaaa"),
			Publisher:     to.Ptr("aaaaaaaaaaaaaaaaaaaaaa"),
		},
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			AdditionalCapabilities: &armcompute.AdditionalCapabilities{
				HibernationEnabled: to.Ptr(true),
				UltraSSDEnabled:    to.Ptr(true),
			},
			AutomaticRepairsPolicy: &armcompute.AutomaticRepairsPolicy{
				Enabled:     to.Ptr(true),
				GracePeriod: to.Ptr("PT30M"),
			},
			DoNotRunExtensionsOnOverprovisionedVMs: to.Ptr(true),
			HostGroup: &armcompute.SubResource{
				ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
			},
			OrchestrationMode:        to.Ptr(armcompute.OrchestrationModeUniform),
			Overprovision:            to.Ptr(true),
			PlatformFaultDomainCount: to.Ptr[int32](1),
			ProvisioningState:        to.Ptr("Succeeded"),
			ProximityPlacementGroup: &armcompute.SubResource{
				ID: to.Ptr("subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot"),
			},
			ScaleInPolicy: &armcompute.ScaleInPolicy{
				ForceDeletion: to.Ptr(true),
				Rules: []*armcompute.VirtualMachineScaleSetScaleInRules{
					to.Ptr(armcompute.VirtualMachineScaleSetScaleInRulesOldestVM)},
			},
			SinglePlacementGroup: to.Ptr(true),
			SpotRestorePolicy: &armcompute.SpotRestorePolicy{
				Enabled:        to.Ptr(true),
				RestoreTimeout: to.Ptr("aaaaaaaaaa"),
			},
			UniqueID: to.Ptr("aaaaaaaa"),
			UpgradePolicy: &armcompute.UpgradePolicy{
				AutomaticOSUpgradePolicy: &armcompute.AutomaticOSUpgradePolicy{
					DisableAutomaticRollback: to.Ptr(true),
					EnableAutomaticOSUpgrade: to.Ptr(true),
				},
				Mode: to.Ptr(armcompute.UpgradeModeManual),
				RollingUpgradePolicy: &armcompute.RollingUpgradePolicy{
					EnableCrossZoneUpgrade:              to.Ptr(true),
					MaxBatchInstancePercent:             to.Ptr[int32](49),
					MaxUnhealthyInstancePercent:         to.Ptr[int32](81),
					MaxUnhealthyUpgradedInstancePercent: to.Ptr[int32](98),
					PauseTimeBetweenBatches:             to.Ptr("aaaaaaaaaaaaaaa"),
					PrioritizeUnhealthyInstances:        to.Ptr(true),
				},
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				ApplicationProfile: &armcompute.ApplicationProfile{
					GalleryApplications: []*armcompute.VMGalleryApplication{
						{
							ConfigurationReference: to.Ptr("aaaaa"),
							Order:                  to.Ptr[int32](29),
							PackageReferenceID:     to.Ptr("aaaaaaaaaa"),
							Tags:                   to.Ptr("aaaaaaaaaaa"),
						}},
				},
				BillingProfile: &armcompute.BillingProfile{
					MaxPrice: to.Ptr[float64](-1),
				},
				CapacityReservation: &armcompute.CapacityReservationProfile{
					CapacityReservationGroup: &armcompute.SubResource{
						ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
					},
				},
				DiagnosticsProfile: &armcompute.DiagnosticsProfile{
					BootDiagnostics: &armcompute.BootDiagnostics{
						Enabled:    to.Ptr(true),
						StorageURI: to.Ptr("http://{existing-storage-account-name}.blob.core.windows.net"),
					},
				},
				EvictionPolicy: to.Ptr(armcompute.VirtualMachineEvictionPolicyTypesDeallocate),
				ExtensionProfile: &armcompute.VirtualMachineScaleSetExtensionProfile{
					ExtensionsTimeBudget: to.Ptr("PT1H20M"),
					Extensions: []*armcompute.VirtualMachineScaleSetExtension{
						{
							ID:   to.Ptr("aaaaaaaaaaaaaaaaaaaaaa"),
							Name: to.Ptr("{extension-name}"),
							Type: to.Ptr("aaaaa"),
							Properties: &armcompute.VirtualMachineScaleSetExtensionProperties{
								Type:                    to.Ptr("{extension-Type}"),
								AutoUpgradeMinorVersion: to.Ptr(true),
								EnableAutomaticUpgrade:  to.Ptr(true),
								ForceUpdateTag:          to.Ptr("aaaaaaaaa"),
								ProtectedSettings:       map[string]interface{}{},
								ProvisionAfterExtensions: []*string{
									to.Ptr("aa")},
								ProvisioningState:  to.Ptr("Succeeded"),
								Publisher:          to.Ptr("{extension-Publisher}"),
								Settings:           map[string]interface{}{},
								SuppressFailures:   to.Ptr(true),
								TypeHandlerVersion: to.Ptr("{handler-version}"),
							},
						}},
				},
				LicenseType: to.Ptr("aaaaaaaaaaaa"),
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					HealthProbe: &armcompute.APIEntityReference{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/disk123"),
					},
					NetworkAPIVersion: to.Ptr(armcompute.NetworkAPIVersionTwoThousandTwenty1101),
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							ID:   to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
							Name: to.Ptr("aaaaaaaa"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DeleteOption: to.Ptr(armcompute.DeleteOptionsDelete),
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{
										to.Ptr("aaaaaaaaaaaa")},
								},
								EnableAcceleratedNetworking: to.Ptr(true),
								EnableFpga:                  to.Ptr(true),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										ID:   to.Ptr("aaaaaaaaaaaaaaaa"),
										Name: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											ApplicationGatewayBackendAddressPools: []*armcompute.SubResource{
												{
													ID: to.Ptr("subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot"),
												}},
											ApplicationSecurityGroups: []*armcompute.SubResource{
												{
													ID: to.Ptr("subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot"),
												}},
											LoadBalancerBackendAddressPools: []*armcompute.SubResource{
												{
													ID: to.Ptr("subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot"),
												}},
											LoadBalancerInboundNatPools: []*armcompute.SubResource{
												{
													ID: to.Ptr("subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot"),
												}},
											Primary:                 to.Ptr(true),
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											PublicIPAddressConfiguration: &armcompute.VirtualMachineScaleSetPublicIPAddressConfiguration{
												Name: to.Ptr("a"),
												Properties: &armcompute.VirtualMachineScaleSetPublicIPAddressConfigurationProperties{
													DeleteOption: to.Ptr(armcompute.DeleteOptionsDelete),
													DNSSettings: &armcompute.VirtualMachineScaleSetPublicIPAddressConfigurationDNSSettings{
														DomainNameLabel: to.Ptr("aaaaaaaaaaaaaaaaaa"),
													},
													IdleTimeoutInMinutes: to.Ptr[int32](3),
													IPTags: []*armcompute.VirtualMachineScaleSetIPTag{
														{
															IPTagType: to.Ptr("aaaaaaa"),
															Tag:       to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaa"),
														}},
													PublicIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
													PublicIPPrefix: &armcompute.SubResource{
														ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
													},
												},
												SKU: &armcompute.PublicIPAddressSKU{
													Name: to.Ptr(armcompute.PublicIPAddressSKUNameBasic),
													Tier: to.Ptr(armcompute.PublicIPAddressSKUTierRegional),
												},
											},
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/disk123"),
											},
										},
									}},
								NetworkSecurityGroup: &armcompute.SubResource{
									ID: to.Ptr("subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot"),
								},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminPassword:      to.Ptr("{your-password}"),
					AdminUsername:      to.Ptr("{your-username}"),
					ComputerNamePrefix: to.Ptr("{vmss-name}"),
					CustomData:         to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaa"),
					LinuxConfiguration: &armcompute.LinuxConfiguration{
						DisablePasswordAuthentication: to.Ptr(true),
						PatchSettings: &armcompute.LinuxPatchSettings{
							AssessmentMode: to.Ptr(armcompute.LinuxPatchAssessmentModeImageDefault),
							PatchMode:      to.Ptr(armcompute.LinuxVMGuestPatchModeImageDefault),
						},
						ProvisionVMAgent: to.Ptr(true),
						SSH: &armcompute.SSHConfiguration{
							PublicKeys: []*armcompute.SSHPublicKey{
								{
									Path:    to.Ptr("/home/{your-username}/.ssh/authorized_keys"),
									KeyData: to.Ptr("ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCeClRAk2ipUs/l5voIsDC5q9RI+YSRd1Bvd/O+axgY4WiBzG+4FwJWZm/mLLe5DoOdHQwmU2FrKXZSW4w2sYE70KeWnrFViCOX5MTVvJgPE8ClugNl8RWth/tU849DvM9sT7vFgfVSHcAS2yDRyDlueii+8nF2ym8XWAPltFVCyLHRsyBp5YPqK8JFYIa1eybKsY3hEAxRCA+/7bq8et+Gj3coOsuRmrehav7rE6N12Pb80I6ofa6SM5XNYq4Xk0iYNx7R3kdz0Jj9XgZYWjAHjJmT0gTRoOnt6upOuxK7xI/ykWrllgpXrCPu3Ymz+c+ujaqcxDopnAl2lmf69/J1"),
								}},
						},
					},
					Secrets: []*armcompute.VaultSecretGroup{
						{
							SourceVault: &armcompute.SubResource{
								ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
							},
							VaultCertificates: []*armcompute.VaultCertificate{
								{
									CertificateStore: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaa"),
									CertificateURL:   to.Ptr("aaaaaaa"),
								}},
						}},
					WindowsConfiguration: &armcompute.WindowsConfiguration{
						AdditionalUnattendContent: []*armcompute.AdditionalUnattendContent{
							{
								ComponentName: to.Ptr("Microsoft-Windows-Shell-Setup"),
								Content:       to.Ptr("aaaaaaaaaaaaaaaaaaaa"),
								PassName:      to.Ptr("OobeSystem"),
								SettingName:   to.Ptr(armcompute.SettingNamesAutoLogon),
							}},
						EnableAutomaticUpdates: to.Ptr(true),
						PatchSettings: &armcompute.PatchSettings{
							AssessmentMode:    to.Ptr(armcompute.WindowsPatchAssessmentModeImageDefault),
							EnableHotpatching: to.Ptr(true),
							PatchMode:         to.Ptr(armcompute.WindowsVMGuestPatchModeAutomaticByOS),
						},
						ProvisionVMAgent: to.Ptr(true),
						TimeZone:         to.Ptr("aaaaaaaaaaaaaaaa"),
						WinRM: &armcompute.WinRMConfiguration{
							Listeners: []*armcompute.WinRMListener{
								{
									CertificateURL: to.Ptr("aaaaaaaaaaaaaaaaaaaaaa"),
									Protocol:       to.Ptr(armcompute.ProtocolTypesHTTP),
								}},
						},
					},
				},
				Priority: to.Ptr(armcompute.VirtualMachinePriorityTypesRegular),
				ScheduledEventsProfile: &armcompute.ScheduledEventsProfile{
					TerminateNotificationProfile: &armcompute.TerminateNotificationProfile{
						Enable:           to.Ptr(true),
						NotBeforeTimeout: to.Ptr("PT10M"),
					},
				},
				SecurityProfile: &armcompute.SecurityProfile{
					EncryptionAtHost: to.Ptr(true),
					SecurityType:     to.Ptr(armcompute.SecurityTypesTrustedLaunch),
					UefiSettings: &armcompute.UefiSettings{
						SecureBootEnabled: to.Ptr(true),
						VTpmEnabled:       to.Ptr(true),
					},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					DataDisks: []*armcompute.VirtualMachineScaleSetDataDisk{
						{
							Name:              to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaa"),
							Caching:           to.Ptr(armcompute.CachingTypesNone),
							CreateOption:      to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
							DiskIOPSReadWrite: to.Ptr[int64](28),
							DiskMBpsReadWrite: to.Ptr[int64](15),
							DiskSizeGB:        to.Ptr[int32](1023),
							Lun:               to.Ptr[int32](26),
							ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
								DiskEncryptionSet: &armcompute.DiskEncryptionSetParameters{
									ID: to.Ptr("aaaaaaaaaaaa"),
								},
								StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
							},
							WriteAcceleratorEnabled: to.Ptr(true),
						}},
					ImageReference: &armcompute.ImageReference{
						ID:                   to.Ptr("aaaaaaaaaaaaaaaaaaa"),
						ExactVersion:         to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
						Offer:                to.Ptr("WindowsServer"),
						Publisher:            to.Ptr("MicrosoftWindowsServer"),
						SharedGalleryImageID: to.Ptr("aaaaaa"),
						SKU:                  to.Ptr("2016-Datacenter"),
						Version:              to.Ptr("latest"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Name:         to.Ptr("aaaaaaaaaaaaaaa"),
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						DiffDiskSettings: &armcompute.DiffDiskSettings{
							Option:    to.Ptr(armcompute.DiffDiskOptionsLocal),
							Placement: to.Ptr(armcompute.DiffDiskPlacementCacheDisk),
						},
						DiskSizeGB: to.Ptr[int32](6),
						Image: &armcompute.VirtualHardDisk{
							URI: to.Ptr("http://{existing-storage-account-name}.blob.core.windows.net/{existing-container-name}/myDisk.vhd"),
						},
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							DiskEncryptionSet: &armcompute.DiskEncryptionSetParameters{
								ID: to.Ptr("aaaaaaaaaaaa"),
							},
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
						OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
						VhdContainers: []*string{
							to.Ptr("aa")},
						WriteAcceleratorEnabled: to.Ptr(true),
					},
				},
				UserData: to.Ptr("aaaaaaaaaaaaa"),
			},
			ZoneBalance: to.Ptr(true),
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](3),
			Tier:     to.Ptr("Standard"),
		},
		Zones: []*string{
			to.Ptr("aaaaaaaaaaaaaaaaaaaa")},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineScaleSet)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_Update_MaximumSet_Gen.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_Update_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSets_Update_MinimumSet_Gen"},
	})
	client, err = armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginUpdate(ctx,
		"rgcompute",
		"aaaaaaaaaaaaaa",
		armcompute.VirtualMachineScaleSetUpdate{},
		&armcompute.VirtualMachineScaleSetsClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_Update_MinimumSet_Gen.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_Update_MinimumSet_Gen.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.VirtualMachineScaleSet{
		Location: to.Ptr("westus"),
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineScaleSet)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_Update_MinimumSet_Gen.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestVirtualMachineScaleSets_Delete(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/ForceDeleteVirtualMachineScaleSets.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Force Delete a VM scale set."},
	})
	client, err := armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"myvmScaleSet",
		&armcompute.VirtualMachineScaleSetsClientBeginDeleteOptions{ForceDeletion: to.Ptr(true),
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/ForceDeleteVirtualMachineScaleSets.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/ForceDeleteVirtualMachineScaleSets.json: %v", err)
	}
}

func TestVirtualMachineScaleSets_Get(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/GetVirtualMachineScaleSet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a virtual machine scale set"},
	})
	client, err := armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myVirtualMachineScaleSet",
		&armcompute.VirtualMachineScaleSetsClientGetOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/GetVirtualMachineScaleSet.json: %v", err)
	}
	// Response check
	exampleRes := armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("myVirtualMachineScaleSet"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/myVirtualMachineScaleSet"),
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"myTag1": to.Ptr("tagValue1"),
		},
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			DoNotRunExtensionsOnOverprovisionedVMs: to.Ptr(false),
			HostGroup: &armcompute.SubResource{
				ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/hostGroups/myHostGroup"),
			},
			Overprovision:            to.Ptr(false),
			PlatformFaultDomainCount: to.Ptr[int32](1),
			ProvisioningState:        to.Ptr("Succeeded"),
			SinglePlacementGroup:     to.Ptr(false),
			TimeCreated:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-27T01:02:38.3138469+00:00"); return t }()),
			UpgradePolicy: &armcompute.UpgradePolicy{
				AutomaticOSUpgradePolicy: &armcompute.AutomaticOSUpgradePolicy{
					EnableAutomaticOSUpgrade: to.Ptr(false),
				},
				Mode: to.Ptr(armcompute.UpgradeModeAutomatic),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				ApplicationProfile: &armcompute.ApplicationProfile{
					GalleryApplications: []*armcompute.VMGalleryApplication{
						{
							ConfigurationReference: to.Ptr("https://mystorageaccount.blob.core.windows.net/configurations/settings.config"),
							Order:                  to.Ptr[int32](1),
							PackageReferenceID:     to.Ptr("/subscriptions/32c17a9e-aa7b-4ba5-a45b-e324116b6fdb/resourceGroups/myresourceGroupName2/providers/Microsoft.Compute/galleries/myGallery1/applications/MyApplication1/versions/1.0"),
							Tags:                   to.Ptr("myTag1"),
						},
						{
							PackageReferenceID: to.Ptr("/subscriptions/32c17a9e-aa7b-4ba5-a45b-e324116b6fdg/resourceGroups/myresourceGroupName3/providers/Microsoft.Compute/galleries/myGallery2/applications/MyApplication2/versions/1.1"),
						}},
				},
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("myNic"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("myIPConfig"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											Primary: to.Ptr(true),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/myVNet/subnets/mySubnet"),
											},
										},
									}},
								NetworkSecurityGroup: &armcompute.SubResource{
									ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkSecurityGroups/myNetworkSecurityGroup"),
								},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("admin"),
					ComputerNamePrefix: to.Ptr("myVirtualMachineScaleSet"),
					LinuxConfiguration: &armcompute.LinuxConfiguration{
						DisablePasswordAuthentication: to.Ptr(false),
					},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					DataDisks: []*armcompute.VirtualMachineScaleSetDataDisk{},
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("databricks"),
						Publisher: to.Ptr("azuredatabricks"),
						SKU:       to.Ptr("databricksworker"),
						Version:   to.Ptr("3.15.2"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						DiskSizeGB:   to.Ptr[int32](30),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
						},
					},
				},
				UserData: to.Ptr("RXhhbXBsZSBVc2VyRGF0YQ=="),
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D2s_v3"),
			Capacity: to.Ptr[int64](4),
			Tier:     to.Ptr("Standard"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineScaleSet)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/GetVirtualMachineScaleSet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/GetVirtualMachineScaleSetAutoPlacedOnDedicatedHostGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a virtual machine scale set placed on a dedicated host group through automatic placement."},
	})
	client, err = armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err = client.Get(ctx,
		"myResourceGroup",
		"myVirtualMachineScaleSet",
		&armcompute.VirtualMachineScaleSetsClientGetOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/GetVirtualMachineScaleSetAutoPlacedOnDedicatedHostGroup.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("myVirtualMachineScaleSet"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/myVirtualMachineScaleSet"),
		Location: to.Ptr("West US"),
		Tags: map[string]*string{
			"myTag1": to.Ptr("tagValue1"),
		},
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			DoNotRunExtensionsOnOverprovisionedVMs: to.Ptr(false),
			HostGroup: &armcompute.SubResource{
				ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/hostGroups/myHostGroup"),
			},
			Overprovision:            to.Ptr(false),
			PlatformFaultDomainCount: to.Ptr[int32](1),
			ProvisioningState:        to.Ptr("Succeeded"),
			SinglePlacementGroup:     to.Ptr(false),
			UpgradePolicy: &armcompute.UpgradePolicy{
				AutomaticOSUpgradePolicy: &armcompute.AutomaticOSUpgradePolicy{
					EnableAutomaticOSUpgrade: to.Ptr(false),
				},
				Mode: to.Ptr(armcompute.UpgradeModeAutomatic),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("myNic"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("myIPConfig"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											Primary: to.Ptr(true),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/myVNet/subnets/mySubnet"),
											},
										},
									}},
								NetworkSecurityGroup: &armcompute.SubResource{
									ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkSecurityGroups/myNetworkSecurityGroup"),
								},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("admin"),
					ComputerNamePrefix: to.Ptr("myVirtualMachineScaleSet"),
					LinuxConfiguration: &armcompute.LinuxConfiguration{
						DisablePasswordAuthentication: to.Ptr(false),
					},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					DataDisks: []*armcompute.VirtualMachineScaleSetDataDisk{},
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("databricks"),
						Publisher: to.Ptr("azuredatabricks"),
						SKU:       to.Ptr("databricksworker"),
						Version:   to.Ptr("3.15.2"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						DiskSizeGB:   to.Ptr[int32](30),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
						},
					},
				},
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D2s_v3"),
			Capacity: to.Ptr[int64](4),
			Tier:     to.Ptr("Standard"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineScaleSet)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/GetVirtualMachineScaleSetAutoPlacedOnDedicatedHostGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/GetVirtualMachineScaleSetWithUserData.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a virtual machine scale set with UserData"},
	})
	client, err = armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err = client.Get(ctx,
		"myResourceGroup",
		"myVirtualMachineScaleSet",
		&armcompute.VirtualMachineScaleSetsClientGetOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/GetVirtualMachineScaleSetWithUserData.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.VirtualMachineScaleSet{
		Name:     to.Ptr("myVirtualMachineScaleSet"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/myVirtualMachineScaleSet"),
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"myTag1": to.Ptr("tagValue1"),
		},
		Properties: &armcompute.VirtualMachineScaleSetProperties{
			DoNotRunExtensionsOnOverprovisionedVMs: to.Ptr(false),
			HostGroup: &armcompute.SubResource{
				ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/hostGroups/myHostGroup"),
			},
			Overprovision:            to.Ptr(false),
			PlatformFaultDomainCount: to.Ptr[int32](1),
			ProvisioningState:        to.Ptr("Succeeded"),
			SinglePlacementGroup:     to.Ptr(false),
			UpgradePolicy: &armcompute.UpgradePolicy{
				AutomaticOSUpgradePolicy: &armcompute.AutomaticOSUpgradePolicy{
					EnableAutomaticOSUpgrade: to.Ptr(false),
				},
				Mode: to.Ptr(armcompute.UpgradeModeAutomatic),
			},
			VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
				ApplicationProfile: &armcompute.ApplicationProfile{
					GalleryApplications: []*armcompute.VMGalleryApplication{
						{
							ConfigurationReference: to.Ptr("https://mystorageaccount.blob.core.windows.net/configurations/settings.config"),
							Order:                  to.Ptr[int32](1),
							PackageReferenceID:     to.Ptr("/subscriptions/32c17a9e-aa7b-4ba5-a45b-e324116b6fdb/resourceGroups/myresourceGroupName2/providers/Microsoft.Compute/galleries/myGallery1/applications/MyApplication1/versions/1.0"),
							Tags:                   to.Ptr("myTag1"),
						},
						{
							PackageReferenceID: to.Ptr("/subscriptions/32c17a9e-aa7b-4ba5-a45b-e324116b6fdg/resourceGroups/myresourceGroupName3/providers/Microsoft.Compute/galleries/myGallery2/applications/MyApplication2/versions/1.1"),
						}},
				},
				NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							Name: to.Ptr("myNic"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										Name: to.Ptr("myIPConfig"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											Primary: to.Ptr(true),
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/myVNet/subnets/mySubnet"),
											},
										},
									}},
								NetworkSecurityGroup: &armcompute.SubResource{
									ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkSecurityGroups/myNetworkSecurityGroup"),
								},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
					AdminUsername:      to.Ptr("admin"),
					ComputerNamePrefix: to.Ptr("myVirtualMachineScaleSet"),
					LinuxConfiguration: &armcompute.LinuxConfiguration{
						DisablePasswordAuthentication: to.Ptr(false),
					},
				},
				StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
					DataDisks: []*armcompute.VirtualMachineScaleSetDataDisk{},
					ImageReference: &armcompute.ImageReference{
						Offer:     to.Ptr("databricks"),
						Publisher: to.Ptr("azuredatabricks"),
						SKU:       to.Ptr("databricksworker"),
						Version:   to.Ptr("3.15.2"),
					},
					OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
						Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						DiskSizeGB:   to.Ptr[int32](30),
						ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
						},
					},
				},
				UserData: to.Ptr("RXhhbXBsZSBVc2VyRGF0YQ=="),
			},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_D2s_v3"),
			Capacity: to.Ptr[int64](4),
			Tier:     to.Ptr("Standard"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSet) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineScaleSet)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/GetVirtualMachineScaleSetWithUserData.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestVirtualMachineScaleSets_Deallocate(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_Deallocate_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSets_Deallocate_MaximumSet_Gen"},
	})
	client, err := armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginDeallocate(ctx,
		"rgcompute",
		"aaaaaaaaaaaaaaaaaaaaaaaaaaaa",
		&armcompute.VirtualMachineScaleSetsClientBeginDeallocateOptions{VMInstanceIDs: &armcompute.VirtualMachineScaleSetVMInstanceIDs{
			InstanceIDs: []*string{
				to.Ptr("aaaaaaaaaaaaaaaaa")},
		},
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_Deallocate_MaximumSet_Gen.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_Deallocate_MaximumSet_Gen.json: %v", err)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_Deallocate_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSets_Deallocate_MinimumSet_Gen"},
	})
	client, err = armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginDeallocate(ctx,
		"rgcompute",
		"aaaaaaaaaaaaaaaaaaaaaaaa",
		&armcompute.VirtualMachineScaleSetsClientBeginDeallocateOptions{VMInstanceIDs: nil,
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_Deallocate_MinimumSet_Gen.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_Deallocate_MinimumSet_Gen.json: %v", err)
	}
}

func TestVirtualMachineScaleSets_DeleteInstances(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_DeleteInstances_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSets_DeleteInstances_MaximumSet_Gen"},
	})
	client, err := armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginDeleteInstances(ctx,
		"rgcompute",
		"aaaaaaaaaaaaaaaaaaaa",
		armcompute.VirtualMachineScaleSetVMInstanceRequiredIDs{
			InstanceIDs: []*string{
				to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaa")},
		},
		&armcompute.VirtualMachineScaleSetsClientBeginDeleteInstancesOptions{ForceDeletion: to.Ptr(true),
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_DeleteInstances_MaximumSet_Gen.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_DeleteInstances_MaximumSet_Gen.json: %v", err)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_DeleteInstances_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSets_DeleteInstances_MinimumSet_Gen"},
	})
	client, err = armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginDeleteInstances(ctx,
		"rgcompute",
		"aaaaaaaaaaaaaaa",
		armcompute.VirtualMachineScaleSetVMInstanceRequiredIDs{
			InstanceIDs: []*string{
				to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaa")},
		},
		&armcompute.VirtualMachineScaleSetsClientBeginDeleteInstancesOptions{ForceDeletion: nil,
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_DeleteInstances_MinimumSet_Gen.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_DeleteInstances_MinimumSet_Gen.json: %v", err)
	}
}

func TestVirtualMachineScaleSets_GetInstanceView(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_GetInstanceView_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSets_GetInstanceView_MaximumSet_Gen"},
	})
	client, err := armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := client.GetInstanceView(ctx,
		"rgcompute",
		"aaaaaaaaaaaaaaa",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_GetInstanceView_MaximumSet_Gen.json: %v", err)
	}
	// Response check
	exampleRes := armcompute.VirtualMachineScaleSetInstanceView{
		OrchestrationServices: []*armcompute.OrchestrationServiceSummary{
			{
				ServiceName:  to.Ptr(armcompute.OrchestrationServiceNamesAutomaticRepairs),
				ServiceState: to.Ptr(armcompute.OrchestrationServiceStateNotRunning),
			}},
		Statuses: []*armcompute.InstanceViewStatus{
			{
				Code:          to.Ptr("ProvisioningState/succeeded"),
				DisplayStatus: to.Ptr("Provisioning succeeded"),
				Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
				Message:       to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
				Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.526Z"); return t }()),
			}},
		VirtualMachine: &armcompute.VirtualMachineScaleSetInstanceViewStatusesSummary{
			StatusesSummary: []*armcompute.VirtualMachineStatusCodeCount{
				{
					Code:  to.Ptr("aa"),
					Count: to.Ptr[int32](21),
				}},
		},
		Extensions: []*armcompute.VirtualMachineScaleSetVMExtensionsSummary{
			{
				Name: to.Ptr("aaaaaaaaaaa"),
				StatusesSummary: []*armcompute.VirtualMachineStatusCodeCount{
					{
						Code:  to.Ptr("aa"),
						Count: to.Ptr[int32](21),
					}},
			}},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSetInstanceView) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineScaleSetInstanceView)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_GetInstanceView_MaximumSet_Gen.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_GetInstanceView_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSets_GetInstanceView_MinimumSet_Gen"},
	})
	client, err = armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err = client.GetInstanceView(ctx,
		"rgcompute",
		"aaaaaaaaaaaaaaa",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_GetInstanceView_MinimumSet_Gen.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.VirtualMachineScaleSetInstanceView{}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSetInstanceView) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineScaleSetInstanceView)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_GetInstanceView_MinimumSet_Gen.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestVirtualMachineScaleSets_List(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_List_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSets_List_MaximumSet_Gen"},
	})
	client, err := armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := client.NewListPager("rgcompute",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_List_MaximumSet_Gen.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcompute.VirtualMachineScaleSetListResult{
			Value: []*armcompute.VirtualMachineScaleSet{
				{
					Name:     to.Ptr("{virtualMachineScaleSetName}"),
					Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
					ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{virtualMachineScaleSetName}"),
					Location: to.Ptr("eastus"),
					Tags:     map[string]*string{},
					ExtendedLocation: &armcompute.ExtendedLocation{
						Name: to.Ptr("aaaaaaaaaaaaaaaaaaaaa"),
						Type: to.Ptr(armcompute.ExtendedLocationTypesEdgeZone),
					},
					Identity: &armcompute.VirtualMachineScaleSetIdentity{
						Type:        to.Ptr(armcompute.ResourceIdentityTypeSystemAssigned),
						PrincipalID: to.Ptr("aaaaaaaaaaaaaaa"),
						TenantID:    to.Ptr("aaaaaaaaaaaaaaaa"),
						UserAssignedIdentities: map[string]*armcompute.VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue{
							"key3951": &armcompute.VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue{
								ClientID:    to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaa"),
								PrincipalID: to.Ptr("aaaa"),
							},
						},
					},
					Plan: &armcompute.Plan{
						Name:          to.Ptr("aaaaaaaaaa"),
						Product:       to.Ptr("aaaaaaaaaaaaaaaaaaaa"),
						PromotionCode: to.Ptr("aaaaaaaaaaaaaaaaaaaa"),
						Publisher:     to.Ptr("aaaaaaaaaaaaaaaaaaaaaa"),
					},
					Properties: &armcompute.VirtualMachineScaleSetProperties{
						AdditionalCapabilities: &armcompute.AdditionalCapabilities{
							HibernationEnabled: to.Ptr(true),
							UltraSSDEnabled:    to.Ptr(true),
						},
						AutomaticRepairsPolicy: &armcompute.AutomaticRepairsPolicy{
							Enabled:     to.Ptr(true),
							GracePeriod: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaa"),
						},
						DoNotRunExtensionsOnOverprovisionedVMs: to.Ptr(true),
						HostGroup: &armcompute.SubResource{
							ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
						},
						OrchestrationMode:        to.Ptr(armcompute.OrchestrationModeUniform),
						Overprovision:            to.Ptr(true),
						PlatformFaultDomainCount: to.Ptr[int32](1),
						ProvisioningState:        to.Ptr("Succeeded"),
						ProximityPlacementGroup: &armcompute.SubResource{
							ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
						},
						ScaleInPolicy: &armcompute.ScaleInPolicy{
							ForceDeletion: to.Ptr(true),
							Rules: []*armcompute.VirtualMachineScaleSetScaleInRules{
								to.Ptr(armcompute.VirtualMachineScaleSetScaleInRulesDefault)},
						},
						SinglePlacementGroup: to.Ptr(true),
						SpotRestorePolicy: &armcompute.SpotRestorePolicy{
							Enabled:        to.Ptr(true),
							RestoreTimeout: to.Ptr("aaaaaaaaaa"),
						},
						UniqueID: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
						UpgradePolicy: &armcompute.UpgradePolicy{
							AutomaticOSUpgradePolicy: &armcompute.AutomaticOSUpgradePolicy{
								DisableAutomaticRollback: to.Ptr(true),
								EnableAutomaticOSUpgrade: to.Ptr(true),
							},
							Mode: to.Ptr(armcompute.UpgradeModeAutomatic),
							RollingUpgradePolicy: &armcompute.RollingUpgradePolicy{
								EnableCrossZoneUpgrade:              to.Ptr(true),
								MaxBatchInstancePercent:             to.Ptr[int32](49),
								MaxUnhealthyInstancePercent:         to.Ptr[int32](81),
								MaxUnhealthyUpgradedInstancePercent: to.Ptr[int32](98),
								PauseTimeBetweenBatches:             to.Ptr("aaaaaaaaaaaaaaa"),
								PrioritizeUnhealthyInstances:        to.Ptr(true),
							},
						},
						VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
							ApplicationProfile: &armcompute.ApplicationProfile{
								GalleryApplications: []*armcompute.VMGalleryApplication{
									{
										ConfigurationReference: to.Ptr("aaaaa"),
										Order:                  to.Ptr[int32](29),
										PackageReferenceID:     to.Ptr("aaaaaaaaaa"),
										Tags:                   to.Ptr("aaaaaaaaaaa"),
									}},
							},
							BillingProfile: &armcompute.BillingProfile{
								MaxPrice: to.Ptr[float64](4),
							},
							CapacityReservation: &armcompute.CapacityReservationProfile{
								CapacityReservationGroup: &armcompute.SubResource{
									ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
								},
							},
							DiagnosticsProfile: &armcompute.DiagnosticsProfile{
								BootDiagnostics: &armcompute.BootDiagnostics{
									Enabled:    to.Ptr(true),
									StorageURI: to.Ptr("aaaaaaaaaaaaaaaaaaa"),
								},
							},
							EvictionPolicy: to.Ptr(armcompute.VirtualMachineEvictionPolicyTypesDeallocate),
							ExtensionProfile: &armcompute.VirtualMachineScaleSetExtensionProfile{
								ExtensionsTimeBudget: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaa"),
								Extensions: []*armcompute.VirtualMachineScaleSetExtension{
									{
										ID:   to.Ptr("aaaaaaaaaaaaaaaaaaaaaa"),
										Name: to.Ptr("aa"),
										Type: to.Ptr("aaaaa"),
										Properties: &armcompute.VirtualMachineScaleSetExtensionProperties{
											Type:                    to.Ptr("aaaaaaaa"),
											AutoUpgradeMinorVersion: to.Ptr(true),
											EnableAutomaticUpgrade:  to.Ptr(true),
											ForceUpdateTag:          to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaa"),
											ProtectedSettings:       map[string]interface{}{},
											ProvisionAfterExtensions: []*string{
												to.Ptr("aaaaaaaaaaaaaa")},
											ProvisioningState:  to.Ptr("Succeeded"),
											Publisher:          to.Ptr("aaaaaaaaaaaaa"),
											Settings:           map[string]interface{}{},
											SuppressFailures:   to.Ptr(true),
											TypeHandlerVersion: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaa"),
										},
									}},
							},
							LicenseType: to.Ptr("aaaa"),
							NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
								HealthProbe: &armcompute.APIEntityReference{
									ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/restorePointCollections/rpcName/restorePoints/restorePointName/diskRestorePoints/testingexcludedisk_OsDisk_1_74cdaedcea50483d9833c96adefa100f_22b4bdfe-6c54-4f72-84d8-85d8860f0c57"),
								},
								NetworkAPIVersion: to.Ptr(armcompute.NetworkAPIVersionTwoThousandTwenty1101),
								NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
									{
										ID:   to.Ptr("aa"),
										Name: to.Ptr("myNic"),
										Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
											DeleteOption: to.Ptr(armcompute.DeleteOptionsDelete),
											DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
												DNSServers: []*string{
													to.Ptr("aaaaaaaaaaaa")},
											},
											EnableAcceleratedNetworking: to.Ptr(true),
											EnableFpga:                  to.Ptr(true),
											EnableIPForwarding:          to.Ptr(true),
											IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
												{
													ID:   to.Ptr("aaaaaaaaaaaaaaa"),
													Name: to.Ptr("myIPConfig"),
													Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
														ApplicationGatewayBackendAddressPools: []*armcompute.SubResource{
															{
																ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
															}},
														ApplicationSecurityGroups: []*armcompute.SubResource{
															{
																ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
															}},
														LoadBalancerBackendAddressPools: []*armcompute.SubResource{
															{
																ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
															}},
														LoadBalancerInboundNatPools: []*armcompute.SubResource{
															{
																ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
															}},
														Primary:                 to.Ptr(true),
														PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
														PublicIPAddressConfiguration: &armcompute.VirtualMachineScaleSetPublicIPAddressConfiguration{
															Name: to.Ptr("aaaaaaaaaaaaaaaaaa"),
															Properties: &armcompute.VirtualMachineScaleSetPublicIPAddressConfigurationProperties{
																DeleteOption: to.Ptr(armcompute.DeleteOptionsDelete),
																DNSSettings: &armcompute.VirtualMachineScaleSetPublicIPAddressConfigurationDNSSettings{
																	DomainNameLabel: to.Ptr("aaaaaaaaaaaaaaaaaa"),
																},
																IdleTimeoutInMinutes: to.Ptr[int32](18),
																IPTags: []*armcompute.VirtualMachineScaleSetIPTag{
																	{
																		IPTagType: to.Ptr("aaaaaaa"),
																		Tag:       to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaa"),
																	}},
																PublicIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
																PublicIPPrefix: &armcompute.SubResource{
																	ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
																},
															},
															SKU: &armcompute.PublicIPAddressSKU{
																Name: to.Ptr(armcompute.PublicIPAddressSKUNameBasic),
																Tier: to.Ptr(armcompute.PublicIPAddressSKUTierRegional),
															},
														},
														Subnet: &armcompute.APIEntityReference{
															ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/myVNet/subnets/mySubnet"),
														},
													},
												}},
											NetworkSecurityGroup: &armcompute.SubResource{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkSecurityGroups/myNetworkSecurityGroup"),
											},
											Primary: to.Ptr(true),
										},
									}},
							},
							OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
								AdminPassword:      to.Ptr("aaaaaaaaaaaaaaaaaaaaaa"),
								AdminUsername:      to.Ptr("admin"),
								ComputerNamePrefix: to.Ptr("{virtualMachineScaleSetName}"),
								CustomData:         to.Ptr("aaaaaaaaaaaaaaaaaa"),
								LinuxConfiguration: &armcompute.LinuxConfiguration{
									DisablePasswordAuthentication: to.Ptr(true),
									PatchSettings: &armcompute.LinuxPatchSettings{
										AssessmentMode: to.Ptr(armcompute.LinuxPatchAssessmentModeImageDefault),
										PatchMode:      to.Ptr(armcompute.LinuxVMGuestPatchModeImageDefault),
									},
									ProvisionVMAgent: to.Ptr(true),
									SSH: &armcompute.SSHConfiguration{
										PublicKeys: []*armcompute.SSHPublicKey{
											{
												Path:    to.Ptr("aaa"),
												KeyData: to.Ptr("aaaaaa"),
											}},
									},
								},
								Secrets: []*armcompute.VaultSecretGroup{
									{
										SourceVault: &armcompute.SubResource{
											ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
										},
										VaultCertificates: []*armcompute.VaultCertificate{
											{
												CertificateStore: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaa"),
												CertificateURL:   to.Ptr("aaaaaaa"),
											}},
									}},
								WindowsConfiguration: &armcompute.WindowsConfiguration{
									AdditionalUnattendContent: []*armcompute.AdditionalUnattendContent{
										{
											ComponentName: to.Ptr("Microsoft-Windows-Shell-Setup"),
											Content:       to.Ptr("aaaaaaaaaaaaaaaaaaaa"),
											PassName:      to.Ptr("OobeSystem"),
											SettingName:   to.Ptr(armcompute.SettingNamesAutoLogon),
										}},
									EnableAutomaticUpdates: to.Ptr(true),
									PatchSettings: &armcompute.PatchSettings{
										AssessmentMode:    to.Ptr(armcompute.WindowsPatchAssessmentModeImageDefault),
										EnableHotpatching: to.Ptr(true),
										PatchMode:         to.Ptr(armcompute.WindowsVMGuestPatchModeManual),
									},
									ProvisionVMAgent: to.Ptr(true),
									TimeZone:         to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
									WinRM: &armcompute.WinRMConfiguration{
										Listeners: []*armcompute.WinRMListener{
											{
												CertificateURL: to.Ptr("aaaaaaaaaaaaaaaaaaaaaa"),
												Protocol:       to.Ptr(armcompute.ProtocolTypesHTTP),
											}},
									},
								},
							},
							Priority: to.Ptr(armcompute.VirtualMachinePriorityTypesRegular),
							ScheduledEventsProfile: &armcompute.ScheduledEventsProfile{
								TerminateNotificationProfile: &armcompute.TerminateNotificationProfile{
									Enable:           to.Ptr(true),
									NotBeforeTimeout: to.Ptr("aa"),
								},
							},
							SecurityProfile: &armcompute.SecurityProfile{
								EncryptionAtHost: to.Ptr(true),
								SecurityType:     to.Ptr(armcompute.SecurityTypesTrustedLaunch),
								UefiSettings: &armcompute.UefiSettings{
									SecureBootEnabled: to.Ptr(true),
									VTpmEnabled:       to.Ptr(true),
								},
							},
							StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
								DataDisks: []*armcompute.VirtualMachineScaleSetDataDisk{},
								ImageReference: &armcompute.ImageReference{
									ID:                   to.Ptr("aaaaaaaaaa"),
									ExactVersion:         to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
									Offer:                to.Ptr("databricks"),
									Publisher:            to.Ptr("azuredatabricks"),
									SharedGalleryImageID: to.Ptr("aaaaaaaaaaaaaaaaaaaaaa"),
									SKU:                  to.Ptr("databricksworker"),
									Version:              to.Ptr("3.15.2"),
								},
								OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
									Name:         to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
									Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
									CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
									DiffDiskSettings: &armcompute.DiffDiskSettings{
										Option:    to.Ptr(armcompute.DiffDiskOptionsLocal),
										Placement: to.Ptr(armcompute.DiffDiskPlacementCacheDisk),
									},
									DiskSizeGB: to.Ptr[int32](30),
									Image: &armcompute.VirtualHardDisk{
										URI: to.Ptr("https://{storageAccountName}.blob.core.windows.net/{containerName}/{vhdName}.vhd"),
									},
									ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
										DiskEncryptionSet: &armcompute.DiskEncryptionSetParameters{
											ID: to.Ptr("aaaaaaaaaaaa"),
										},
										StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
									},
									OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
									VhdContainers: []*string{
										to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaaa")},
									WriteAcceleratorEnabled: to.Ptr(true),
								},
							},
							UserData: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaa"),
						},
						ZoneBalance: to.Ptr(true),
					},
					SKU: &armcompute.SKU{
						Name:     to.Ptr("Standard_D2s_v3"),
						Capacity: to.Ptr[int64](4),
						Tier:     to.Ptr("Standard"),
					},
					Zones: []*string{
						to.Ptr("aaaaaaa")},
				},
				{
					Name:     to.Ptr("{virtualMachineScaleSetName}"),
					Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
					ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{virtualMachineScaleSetName}1"),
					Location: to.Ptr("eastus"),
					Tags:     map[string]*string{},
					ExtendedLocation: &armcompute.ExtendedLocation{
						Name: to.Ptr("aaaaaaaaaaaaaaaaaaaaa"),
						Type: to.Ptr(armcompute.ExtendedLocationTypesEdgeZone),
					},
					Identity: &armcompute.VirtualMachineScaleSetIdentity{
						Type:        to.Ptr(armcompute.ResourceIdentityTypeSystemAssigned),
						PrincipalID: to.Ptr("aaaaaaaaaaaaaaa"),
						TenantID:    to.Ptr("aaaaaaaaaaaaaaaa"),
						UserAssignedIdentities: map[string]*armcompute.VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue{
							"key3951": &armcompute.VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue{
								ClientID:    to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaa"),
								PrincipalID: to.Ptr("aaaa"),
							},
						},
					},
					Plan: &armcompute.Plan{
						Name:          to.Ptr("aaaaaaaaaa"),
						Product:       to.Ptr("aaaaaaaaaaaaaaaaaaaa"),
						PromotionCode: to.Ptr("aaaaaaaaaaaaaaaaaaaa"),
						Publisher:     to.Ptr("aaaaaaaaaaaaaaaaaaaaaa"),
					},
					Properties: &armcompute.VirtualMachineScaleSetProperties{
						AdditionalCapabilities: &armcompute.AdditionalCapabilities{
							HibernationEnabled: to.Ptr(true),
							UltraSSDEnabled:    to.Ptr(true),
						},
						AutomaticRepairsPolicy: &armcompute.AutomaticRepairsPolicy{
							Enabled:     to.Ptr(true),
							GracePeriod: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaa"),
						},
						DoNotRunExtensionsOnOverprovisionedVMs: to.Ptr(true),
						HostGroup: &armcompute.SubResource{
							ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
						},
						OrchestrationMode:        to.Ptr(armcompute.OrchestrationModeUniform),
						Overprovision:            to.Ptr(true),
						PlatformFaultDomainCount: to.Ptr[int32](1),
						ProvisioningState:        to.Ptr("Succeeded"),
						ProximityPlacementGroup: &armcompute.SubResource{
							ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
						},
						ScaleInPolicy: &armcompute.ScaleInPolicy{
							ForceDeletion: to.Ptr(true),
							Rules: []*armcompute.VirtualMachineScaleSetScaleInRules{
								to.Ptr(armcompute.VirtualMachineScaleSetScaleInRulesDefault)},
						},
						SinglePlacementGroup: to.Ptr(true),
						SpotRestorePolicy: &armcompute.SpotRestorePolicy{
							Enabled:        to.Ptr(true),
							RestoreTimeout: to.Ptr("aaaaaaaaaa"),
						},
						UniqueID: to.Ptr("aaaaa"),
						UpgradePolicy: &armcompute.UpgradePolicy{
							AutomaticOSUpgradePolicy: &armcompute.AutomaticOSUpgradePolicy{
								DisableAutomaticRollback: to.Ptr(true),
								EnableAutomaticOSUpgrade: to.Ptr(true),
							},
							Mode: to.Ptr(armcompute.UpgradeModeAutomatic),
							RollingUpgradePolicy: &armcompute.RollingUpgradePolicy{
								EnableCrossZoneUpgrade:              to.Ptr(true),
								MaxBatchInstancePercent:             to.Ptr[int32](49),
								MaxUnhealthyInstancePercent:         to.Ptr[int32](81),
								MaxUnhealthyUpgradedInstancePercent: to.Ptr[int32](98),
								PauseTimeBetweenBatches:             to.Ptr("aaaaaaaaaaaaaaa"),
								PrioritizeUnhealthyInstances:        to.Ptr(true),
							},
						},
						VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
							ApplicationProfile: &armcompute.ApplicationProfile{
								GalleryApplications: []*armcompute.VMGalleryApplication{
									{
										ConfigurationReference: to.Ptr("aaaaa"),
										Order:                  to.Ptr[int32](29),
										PackageReferenceID:     to.Ptr("aaaaaaaaaa"),
										Tags:                   to.Ptr("aaaaaaaaaaa"),
									}},
							},
							BillingProfile: &armcompute.BillingProfile{
								MaxPrice: to.Ptr[float64](4),
							},
							CapacityReservation: &armcompute.CapacityReservationProfile{
								CapacityReservationGroup: &armcompute.SubResource{
									ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
								},
							},
							DiagnosticsProfile: &armcompute.DiagnosticsProfile{
								BootDiagnostics: &armcompute.BootDiagnostics{
									Enabled:    to.Ptr(true),
									StorageURI: to.Ptr("aaaaaaaaaaaaaaaaaaa"),
								},
							},
							EvictionPolicy: to.Ptr(armcompute.VirtualMachineEvictionPolicyTypesDeallocate),
							ExtensionProfile: &armcompute.VirtualMachineScaleSetExtensionProfile{
								ExtensionsTimeBudget: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaa"),
								Extensions: []*armcompute.VirtualMachineScaleSetExtension{
									{
										ID:   to.Ptr("aaaaaaaaaaaaaaaaaaaaaa"),
										Name: to.Ptr("aa"),
										Type: to.Ptr("aaaaa"),
										Properties: &armcompute.VirtualMachineScaleSetExtensionProperties{
											Type:                    to.Ptr("aaaaaaaa"),
											AutoUpgradeMinorVersion: to.Ptr(true),
											EnableAutomaticUpgrade:  to.Ptr(true),
											ForceUpdateTag:          to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaa"),
											ProtectedSettings:       map[string]interface{}{},
											ProvisionAfterExtensions: []*string{
												to.Ptr("aaaaaaaaaaaaaa")},
											ProvisioningState:  to.Ptr("Succeeded"),
											Publisher:          to.Ptr("aaaaaaaaaaaaa"),
											Settings:           map[string]interface{}{},
											SuppressFailures:   to.Ptr(true),
											TypeHandlerVersion: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaa"),
										},
									}},
							},
							LicenseType: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
							NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
								HealthProbe: &armcompute.APIEntityReference{
									ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/restorePointCollections/rpcName/restorePoints/restorePointName/diskRestorePoints/testingexcludedisk_OsDisk_1_74cdaedcea50483d9833c96adefa100f_22b4bdfe-6c54-4f72-84d8-85d8860f0c57"),
								},
								NetworkAPIVersion: to.Ptr(armcompute.NetworkAPIVersionTwoThousandTwenty1101),
								NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
									{
										ID:   to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaa"),
										Name: to.Ptr("myNic1"),
										Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
											DeleteOption: to.Ptr(armcompute.DeleteOptionsDelete),
											DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
												DNSServers: []*string{
													to.Ptr("aaaaaaaaaaaa")},
											},
											EnableAcceleratedNetworking: to.Ptr(true),
											EnableFpga:                  to.Ptr(true),
											EnableIPForwarding:          to.Ptr(true),
											IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
												{
													ID:   to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaa"),
													Name: to.Ptr("myIPConfig"),
													Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
														ApplicationGatewayBackendAddressPools: []*armcompute.SubResource{
															{
																ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
															}},
														ApplicationSecurityGroups: []*armcompute.SubResource{
															{
																ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
															}},
														LoadBalancerBackendAddressPools: []*armcompute.SubResource{
															{
																ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
															}},
														LoadBalancerInboundNatPools: []*armcompute.SubResource{
															{
																ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
															}},
														Primary:                 to.Ptr(true),
														PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
														PublicIPAddressConfiguration: &armcompute.VirtualMachineScaleSetPublicIPAddressConfiguration{
															Name: to.Ptr("aaaaaaaaaaaaaaaaaa"),
															Properties: &armcompute.VirtualMachineScaleSetPublicIPAddressConfigurationProperties{
																DeleteOption: to.Ptr(armcompute.DeleteOptionsDelete),
																DNSSettings: &armcompute.VirtualMachineScaleSetPublicIPAddressConfigurationDNSSettings{
																	DomainNameLabel: to.Ptr("aaaaaaaaaaaaaaaaaa"),
																},
																IdleTimeoutInMinutes: to.Ptr[int32](18),
																IPTags: []*armcompute.VirtualMachineScaleSetIPTag{
																	{
																		IPTagType: to.Ptr("aaaaaaa"),
																		Tag:       to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaa"),
																	}},
																PublicIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
																PublicIPPrefix: &armcompute.SubResource{
																	ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
																},
															},
															SKU: &armcompute.PublicIPAddressSKU{
																Name: to.Ptr(armcompute.PublicIPAddressSKUNameBasic),
																Tier: to.Ptr(armcompute.PublicIPAddressSKUTierRegional),
															},
														},
														Subnet: &armcompute.APIEntityReference{
															ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/myVNet/subnets/mySubnet"),
														},
													},
												}},
											NetworkSecurityGroup: &armcompute.SubResource{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkSecurityGroups/myNetworkSecurityGroup"),
											},
											Primary: to.Ptr(true),
										},
									}},
							},
							OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
								AdminPassword:      to.Ptr("{your-password}"),
								AdminUsername:      to.Ptr("admin"),
								ComputerNamePrefix: to.Ptr("{virtualMachineScaleSetName}"),
								CustomData:         to.Ptr("a"),
								LinuxConfiguration: &armcompute.LinuxConfiguration{
									DisablePasswordAuthentication: to.Ptr(true),
									PatchSettings: &armcompute.LinuxPatchSettings{
										AssessmentMode: to.Ptr(armcompute.LinuxPatchAssessmentModeImageDefault),
										PatchMode:      to.Ptr(armcompute.LinuxVMGuestPatchModeImageDefault),
									},
									ProvisionVMAgent: to.Ptr(true),
									SSH: &armcompute.SSHConfiguration{
										PublicKeys: []*armcompute.SSHPublicKey{
											{
												Path:    to.Ptr("aaa"),
												KeyData: to.Ptr("aaaaaa"),
											}},
									},
								},
								Secrets: []*armcompute.VaultSecretGroup{
									{
										SourceVault: &armcompute.SubResource{
											ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
										},
										VaultCertificates: []*armcompute.VaultCertificate{
											{
												CertificateStore: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaa"),
												CertificateURL:   to.Ptr("aaaaaaa"),
											}},
									}},
								WindowsConfiguration: &armcompute.WindowsConfiguration{
									AdditionalUnattendContent: []*armcompute.AdditionalUnattendContent{
										{
											ComponentName: to.Ptr("Microsoft-Windows-Shell-Setup"),
											Content:       to.Ptr("aaaaaaaaaaaaaaaaaaaa"),
											PassName:      to.Ptr("OobeSystem"),
											SettingName:   to.Ptr(armcompute.SettingNamesAutoLogon),
										}},
									EnableAutomaticUpdates: to.Ptr(true),
									PatchSettings: &armcompute.PatchSettings{
										AssessmentMode:    to.Ptr(armcompute.WindowsPatchAssessmentModeImageDefault),
										EnableHotpatching: to.Ptr(true),
										PatchMode:         to.Ptr(armcompute.WindowsVMGuestPatchModeManual),
									},
									ProvisionVMAgent: to.Ptr(true),
									TimeZone:         to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
									WinRM: &armcompute.WinRMConfiguration{
										Listeners: []*armcompute.WinRMListener{
											{
												CertificateURL: to.Ptr("aaaaaaaaaaaaaaaaaaaaaa"),
												Protocol:       to.Ptr(armcompute.ProtocolTypesHTTP),
											}},
									},
								},
							},
							Priority: to.Ptr(armcompute.VirtualMachinePriorityTypesRegular),
							ScheduledEventsProfile: &armcompute.ScheduledEventsProfile{
								TerminateNotificationProfile: &armcompute.TerminateNotificationProfile{
									Enable:           to.Ptr(true),
									NotBeforeTimeout: to.Ptr("aa"),
								},
							},
							SecurityProfile: &armcompute.SecurityProfile{
								EncryptionAtHost: to.Ptr(true),
								SecurityType:     to.Ptr(armcompute.SecurityTypesTrustedLaunch),
								UefiSettings: &armcompute.UefiSettings{
									SecureBootEnabled: to.Ptr(true),
									VTpmEnabled:       to.Ptr(true),
								},
							},
							StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
								DataDisks: []*armcompute.VirtualMachineScaleSetDataDisk{},
								ImageReference: &armcompute.ImageReference{
									ID:                   to.Ptr("aaa"),
									ExactVersion:         to.Ptr("aa"),
									Offer:                to.Ptr("databricks"),
									Publisher:            to.Ptr("azuredatabricks"),
									SharedGalleryImageID: to.Ptr("aaaaaaa"),
									SKU:                  to.Ptr("databricksworker"),
									Version:              to.Ptr("3.15.2"),
								},
								OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
									Name:         to.Ptr("a"),
									Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
									CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
									DiffDiskSettings: &armcompute.DiffDiskSettings{
										Option:    to.Ptr(armcompute.DiffDiskOptionsLocal),
										Placement: to.Ptr(armcompute.DiffDiskPlacementCacheDisk),
									},
									DiskSizeGB: to.Ptr[int32](30),
									Image: &armcompute.VirtualHardDisk{
										URI: to.Ptr("https://{storageAccountName}.blob.core.windows.net/{containerName}/{vhdName}.vhd"),
									},
									ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
										DiskEncryptionSet: &armcompute.DiskEncryptionSetParameters{
											ID: to.Ptr("aaaaaaaaaaaa"),
										},
										StorageAccountType: to.Ptr(armcompute.StorageAccountTypesPremiumLRS),
									},
									OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
									VhdContainers: []*string{
										to.Ptr("aaaaaaaaaaaaaaaa")},
									WriteAcceleratorEnabled: to.Ptr(true),
								},
							},
							UserData: to.Ptr("aaaaaaaaaaaaaaaaaaaaaa"),
						},
						ZoneBalance: to.Ptr(true),
					},
					SKU: &armcompute.SKU{
						Name:     to.Ptr("Standard_D2s_v3"),
						Capacity: to.Ptr[int64](4),
						Tier:     to.Ptr("Standard"),
					},
					Zones: []*string{
						to.Ptr("aaaaaaaa")},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.VirtualMachineScaleSetListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.VirtualMachineScaleSetListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_List_MaximumSet_Gen.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_List_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSets_List_MinimumSet_Gen"},
	})
	client, err = armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager = client.NewListPager("rgcompute",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_List_MinimumSet_Gen.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcompute.VirtualMachineScaleSetListResult{
			Value: []*armcompute.VirtualMachineScaleSet{
				{
					Location: to.Ptr("eastus"),
				},
				{
					Location: to.Ptr("eastus"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.VirtualMachineScaleSetListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.VirtualMachineScaleSetListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_List_MinimumSet_Gen.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualMachineScaleSets_ListAll(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_ListAll_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSets_ListAll_MaximumSet_Gen"},
	})
	client, err := armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := client.NewListAllPager(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_ListAll_MaximumSet_Gen.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcompute.VirtualMachineScaleSetListWithLinkResult{
			Value: []*armcompute.VirtualMachineScaleSet{
				{
					Name:     to.Ptr("{virtualMachineScaleSetName}"),
					Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets"),
					ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{virtualMachineScaleSetName}"),
					Location: to.Ptr("westus"),
					Tags: map[string]*string{
						"key8425": to.Ptr("aaa"),
					},
					ExtendedLocation: &armcompute.ExtendedLocation{
						Name: to.Ptr("aaaaaaaaaaaaaaaaaaaaa"),
						Type: to.Ptr(armcompute.ExtendedLocationTypesEdgeZone),
					},
					Identity: &armcompute.VirtualMachineScaleSetIdentity{
						Type:        to.Ptr(armcompute.ResourceIdentityTypeSystemAssigned),
						PrincipalID: to.Ptr("aaaaaaaaaaaaaaa"),
						TenantID:    to.Ptr("aaaaaaaaaaaaaaaa"),
						UserAssignedIdentities: map[string]*armcompute.VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue{
							"key3951": &armcompute.VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue{
								ClientID:    to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaa"),
								PrincipalID: to.Ptr("aaaa"),
							},
						},
					},
					Plan: &armcompute.Plan{
						Name:          to.Ptr("aaaaaaaaaa"),
						Product:       to.Ptr("aaaaaaaaaaaaaaaaaaaa"),
						PromotionCode: to.Ptr("aaaaaaaaaaaaaaaaaaaa"),
						Publisher:     to.Ptr("aaaaaaaaaaaaaaaaaaaaaa"),
					},
					Properties: &armcompute.VirtualMachineScaleSetProperties{
						AdditionalCapabilities: &armcompute.AdditionalCapabilities{
							HibernationEnabled: to.Ptr(true),
							UltraSSDEnabled:    to.Ptr(true),
						},
						AutomaticRepairsPolicy: &armcompute.AutomaticRepairsPolicy{
							Enabled:     to.Ptr(true),
							GracePeriod: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaa"),
						},
						DoNotRunExtensionsOnOverprovisionedVMs: to.Ptr(true),
						HostGroup: &armcompute.SubResource{
							ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
						},
						OrchestrationMode:        to.Ptr(armcompute.OrchestrationModeUniform),
						Overprovision:            to.Ptr(true),
						PlatformFaultDomainCount: to.Ptr[int32](1),
						ProvisioningState:        to.Ptr("Succeeded"),
						ProximityPlacementGroup: &armcompute.SubResource{
							ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
						},
						ScaleInPolicy: &armcompute.ScaleInPolicy{
							ForceDeletion: to.Ptr(true),
							Rules: []*armcompute.VirtualMachineScaleSetScaleInRules{
								to.Ptr(armcompute.VirtualMachineScaleSetScaleInRulesDefault)},
						},
						SinglePlacementGroup: to.Ptr(true),
						SpotRestorePolicy: &armcompute.SpotRestorePolicy{
							Enabled:        to.Ptr(true),
							RestoreTimeout: to.Ptr("aaaaaaaaaa"),
						},
						UniqueID: to.Ptr("aaaaaaaa"),
						UpgradePolicy: &armcompute.UpgradePolicy{
							AutomaticOSUpgradePolicy: &armcompute.AutomaticOSUpgradePolicy{
								DisableAutomaticRollback: to.Ptr(true),
								EnableAutomaticOSUpgrade: to.Ptr(true),
							},
							Mode: to.Ptr(armcompute.UpgradeModeManual),
							RollingUpgradePolicy: &armcompute.RollingUpgradePolicy{
								EnableCrossZoneUpgrade:              to.Ptr(true),
								MaxBatchInstancePercent:             to.Ptr[int32](49),
								MaxUnhealthyInstancePercent:         to.Ptr[int32](81),
								MaxUnhealthyUpgradedInstancePercent: to.Ptr[int32](98),
								PauseTimeBetweenBatches:             to.Ptr("aaaaaaaaaaaaaaa"),
								PrioritizeUnhealthyInstances:        to.Ptr(true),
							},
						},
						VirtualMachineProfile: &armcompute.VirtualMachineScaleSetVMProfile{
							ApplicationProfile: &armcompute.ApplicationProfile{
								GalleryApplications: []*armcompute.VMGalleryApplication{
									{
										ConfigurationReference: to.Ptr("aaaaa"),
										Order:                  to.Ptr[int32](29),
										PackageReferenceID:     to.Ptr("aaaaaaaaaa"),
										Tags:                   to.Ptr("aaaaaaaaaaa"),
									}},
							},
							BillingProfile: &armcompute.BillingProfile{
								MaxPrice: to.Ptr[float64](4),
							},
							CapacityReservation: &armcompute.CapacityReservationProfile{
								CapacityReservationGroup: &armcompute.SubResource{
									ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
								},
							},
							DiagnosticsProfile: &armcompute.DiagnosticsProfile{
								BootDiagnostics: &armcompute.BootDiagnostics{
									Enabled:    to.Ptr(true),
									StorageURI: to.Ptr("aaaaaaaaaaaaaaaaaaa"),
								},
							},
							EvictionPolicy: to.Ptr(armcompute.VirtualMachineEvictionPolicyTypesDeallocate),
							ExtensionProfile: &armcompute.VirtualMachineScaleSetExtensionProfile{
								ExtensionsTimeBudget: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaa"),
								Extensions: []*armcompute.VirtualMachineScaleSetExtension{
									{
										ID:   to.Ptr("aaaaaaaaaaaaaaaaaaaaaa"),
										Name: to.Ptr("aa"),
										Type: to.Ptr("aaaaa"),
										Properties: &armcompute.VirtualMachineScaleSetExtensionProperties{
											Type:                    to.Ptr("aaaaaaaa"),
											AutoUpgradeMinorVersion: to.Ptr(true),
											EnableAutomaticUpgrade:  to.Ptr(true),
											ForceUpdateTag:          to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaa"),
											ProtectedSettings:       map[string]interface{}{},
											ProvisionAfterExtensions: []*string{
												to.Ptr("aaaaaaaaaaaaaa")},
											ProvisioningState:  to.Ptr("Succeeded"),
											Publisher:          to.Ptr("aaaaaaaaaaaaa"),
											Settings:           map[string]interface{}{},
											SuppressFailures:   to.Ptr(true),
											TypeHandlerVersion: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaa"),
										},
									}},
							},
							LicenseType: to.Ptr("aaaaaaaaaa"),
							NetworkProfile: &armcompute.VirtualMachineScaleSetNetworkProfile{
								HealthProbe: &armcompute.APIEntityReference{
									ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/restorePointCollections/rpcName/restorePoints/restorePointName/diskRestorePoints/testingexcludedisk_OsDisk_1_74cdaedcea50483d9833c96adefa100f_22b4bdfe-6c54-4f72-84d8-85d8860f0c57"),
								},
								NetworkAPIVersion: to.Ptr(armcompute.NetworkAPIVersionTwoThousandTwenty1101),
								NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
									{
										ID:   to.Ptr("aaaaaaaaaaaaa"),
										Name: to.Ptr("{vmss-name}"),
										Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
											DeleteOption: to.Ptr(armcompute.DeleteOptionsDelete),
											DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
												DNSServers: []*string{
													to.Ptr("aaaaaaaaaaaa")},
											},
											EnableAcceleratedNetworking: to.Ptr(true),
											EnableFpga:                  to.Ptr(true),
											EnableIPForwarding:          to.Ptr(true),
											IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
												{
													ID:   to.Ptr("aaaaaaaaaaaaa"),
													Name: to.Ptr("{vmss-name}"),
													Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
														ApplicationGatewayBackendAddressPools: []*armcompute.SubResource{
															{
																ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
															}},
														ApplicationSecurityGroups: []*armcompute.SubResource{
															{
																ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
															}},
														LoadBalancerBackendAddressPools: []*armcompute.SubResource{
															{
																ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
															}},
														LoadBalancerInboundNatPools: []*armcompute.SubResource{
															{
																ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
															}},
														Primary:                 to.Ptr(true),
														PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
														PublicIPAddressConfiguration: &armcompute.VirtualMachineScaleSetPublicIPAddressConfiguration{
															Name: to.Ptr("aaaaaaaaaaaaaaaaaa"),
															Properties: &armcompute.VirtualMachineScaleSetPublicIPAddressConfigurationProperties{
																DeleteOption: to.Ptr(armcompute.DeleteOptionsDelete),
																DNSSettings: &armcompute.VirtualMachineScaleSetPublicIPAddressConfigurationDNSSettings{
																	DomainNameLabel: to.Ptr("aaaaaaaaaaaaaaaaaa"),
																},
																IdleTimeoutInMinutes: to.Ptr[int32](18),
																IPTags: []*armcompute.VirtualMachineScaleSetIPTag{
																	{
																		IPTagType: to.Ptr("aaaaaaa"),
																		Tag:       to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaa"),
																	}},
																PublicIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
																PublicIPPrefix: &armcompute.SubResource{
																	ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
																},
															},
															SKU: &armcompute.PublicIPAddressSKU{
																Name: to.Ptr(armcompute.PublicIPAddressSKUNameBasic),
																Tier: to.Ptr(armcompute.PublicIPAddressSKUTierRegional),
															},
														},
														Subnet: &armcompute.APIEntityReference{
															ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/{existing-virtual-network-name}/subnets/{existing-subnet-name}"),
														},
													},
												}},
											NetworkSecurityGroup: &armcompute.SubResource{
												ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
											},
											Primary: to.Ptr(true),
										},
									}},
							},
							OSProfile: &armcompute.VirtualMachineScaleSetOSProfile{
								AdminPassword:      to.Ptr("{your-password}"),
								AdminUsername:      to.Ptr("{your-username}"),
								ComputerNamePrefix: to.Ptr("{vmss-name}"),
								CustomData:         to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaa"),
								LinuxConfiguration: &armcompute.LinuxConfiguration{
									DisablePasswordAuthentication: to.Ptr(true),
									PatchSettings: &armcompute.LinuxPatchSettings{
										AssessmentMode: to.Ptr(armcompute.LinuxPatchAssessmentModeImageDefault),
										PatchMode:      to.Ptr(armcompute.LinuxVMGuestPatchModeImageDefault),
									},
									ProvisionVMAgent: to.Ptr(true),
									SSH: &armcompute.SSHConfiguration{
										PublicKeys: []*armcompute.SSHPublicKey{
											{
												Path:    to.Ptr("aaa"),
												KeyData: to.Ptr("aaaaaa"),
											}},
									},
								},
								Secrets: []*armcompute.VaultSecretGroup{
									{
										SourceVault: &armcompute.SubResource{
											ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
										},
										VaultCertificates: []*armcompute.VaultCertificate{
											{
												CertificateStore: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaa"),
												CertificateURL:   to.Ptr("aaaaaaa"),
											}},
									}},
								WindowsConfiguration: &armcompute.WindowsConfiguration{
									AdditionalUnattendContent: []*armcompute.AdditionalUnattendContent{
										{
											ComponentName: to.Ptr("Microsoft-Windows-Shell-Setup"),
											Content:       to.Ptr("aaaaaaaaaaaaaaaaaaaa"),
											PassName:      to.Ptr("OobeSystem"),
											SettingName:   to.Ptr(armcompute.SettingNamesAutoLogon),
										}},
									EnableAutomaticUpdates: to.Ptr(true),
									PatchSettings: &armcompute.PatchSettings{
										AssessmentMode:    to.Ptr(armcompute.WindowsPatchAssessmentModeImageDefault),
										EnableHotpatching: to.Ptr(true),
										PatchMode:         to.Ptr(armcompute.WindowsVMGuestPatchModeManual),
									},
									ProvisionVMAgent: to.Ptr(true),
									TimeZone:         to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
									WinRM: &armcompute.WinRMConfiguration{
										Listeners: []*armcompute.WinRMListener{
											{
												CertificateURL: to.Ptr("aaaaaaaaaaaaaaaaaaaaaa"),
												Protocol:       to.Ptr(armcompute.ProtocolTypesHTTP),
											}},
									},
								},
							},
							Priority: to.Ptr(armcompute.VirtualMachinePriorityTypesRegular),
							ScheduledEventsProfile: &armcompute.ScheduledEventsProfile{
								TerminateNotificationProfile: &armcompute.TerminateNotificationProfile{
									Enable:           to.Ptr(true),
									NotBeforeTimeout: to.Ptr("aa"),
								},
							},
							SecurityProfile: &armcompute.SecurityProfile{
								EncryptionAtHost: to.Ptr(true),
								SecurityType:     to.Ptr(armcompute.SecurityTypesTrustedLaunch),
								UefiSettings: &armcompute.UefiSettings{
									SecureBootEnabled: to.Ptr(true),
									VTpmEnabled:       to.Ptr(true),
								},
							},
							StorageProfile: &armcompute.VirtualMachineScaleSetStorageProfile{
								DataDisks: []*armcompute.VirtualMachineScaleSetDataDisk{
									{
										Name:              to.Ptr("aaaaaaaaaaaaaa"),
										Caching:           to.Ptr(armcompute.CachingTypesNone),
										CreateOption:      to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
										DiskIOPSReadWrite: to.Ptr[int64](11),
										DiskMBpsReadWrite: to.Ptr[int64](13),
										DiskSizeGB:        to.Ptr[int32](11),
										Lun:               to.Ptr[int32](24),
										ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
											DiskEncryptionSet: &armcompute.DiskEncryptionSetParameters{
												ID: to.Ptr("aaaaaaaaaaaa"),
											},
											StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
										},
										WriteAcceleratorEnabled: to.Ptr(true),
									}},
								ImageReference: &armcompute.ImageReference{
									ID:                   to.Ptr("a"),
									ExactVersion:         to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
									Offer:                to.Ptr("WindowsServer"),
									Publisher:            to.Ptr("MicrosoftWindowsServer"),
									SharedGalleryImageID: to.Ptr("aaaaaaaaaaaaaaaaaaaaaa"),
									SKU:                  to.Ptr("2016-Datacenter"),
									Version:              to.Ptr("latest"),
								},
								OSDisk: &armcompute.VirtualMachineScaleSetOSDisk{
									Name:         to.Ptr("aaaaaaaaaaaaaaa"),
									Caching:      to.Ptr(armcompute.CachingTypesReadWrite),
									CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
									DiffDiskSettings: &armcompute.DiffDiskSettings{
										Option:    to.Ptr(armcompute.DiffDiskOptionsLocal),
										Placement: to.Ptr(armcompute.DiffDiskPlacementCacheDisk),
									},
									DiskSizeGB: to.Ptr[int32](30),
									Image: &armcompute.VirtualHardDisk{
										URI: to.Ptr("https://{storageAccountName}.blob.core.windows.net/{containerName}/{vhdName}.vhd"),
									},
									ManagedDisk: &armcompute.VirtualMachineScaleSetManagedDiskParameters{
										DiskEncryptionSet: &armcompute.DiskEncryptionSetParameters{
											ID: to.Ptr("aaaaaaaaaaaa"),
										},
										StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
									},
									OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
									VhdContainers: []*string{
										to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaa")},
									WriteAcceleratorEnabled: to.Ptr(true),
								},
							},
							UserData: to.Ptr("aaa"),
						},
						ZoneBalance: to.Ptr(true),
					},
					SKU: &armcompute.SKU{
						Name:     to.Ptr("Standard_D1_v2"),
						Capacity: to.Ptr[int64](3),
						Tier:     to.Ptr("Standard"),
					},
					Zones: []*string{
						to.Ptr("aaaaaaaaaaaaaaaaaaaa")},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.VirtualMachineScaleSetListWithLinkResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.VirtualMachineScaleSetListWithLinkResult)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_ListAll_MaximumSet_Gen.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_ListAll_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSets_ListAll_MinimumSet_Gen"},
	})
	client, err = armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager = client.NewListAllPager(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_ListAll_MinimumSet_Gen.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcompute.VirtualMachineScaleSetListWithLinkResult{
			Value: []*armcompute.VirtualMachineScaleSet{
				{
					Location: to.Ptr("westus"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.VirtualMachineScaleSetListWithLinkResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.VirtualMachineScaleSetListWithLinkResult)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_ListAll_MinimumSet_Gen.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualMachineScaleSets_GetOSUpgradeHistory(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_GetOSUpgradeHistory_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSets_GetOSUpgradeHistory_MaximumSet_Gen"},
	})
	client, err := armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := client.NewGetOSUpgradeHistoryPager("rgcompute",
		"aaaaaa",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_GetOSUpgradeHistory_MaximumSet_Gen.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcompute.VirtualMachineScaleSetListOSUpgradeHistory{
			Value: []*armcompute.UpgradeOperationHistoricalStatusInfo{
				{
					Type:     to.Ptr("aaaaaaaaaaaaaaaaaaa"),
					Location: to.Ptr("aaaaaaaaaaaaa"),
					Properties: &armcompute.UpgradeOperationHistoricalStatusInfoProperties{
						Error: &armcompute.APIError{
							Code: to.Ptr("aaaaaaa"),
							Innererror: &armcompute.InnerError{
								Errordetail:   to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaa"),
								Exceptiontype: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
							},
							Message: to.Ptr("aaaaaaaaa"),
							Target:  to.Ptr("aaaaaaa"),
							Details: []*armcompute.APIErrorBase{
								{
									Code:    to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaa"),
									Message: to.Ptr("aa"),
									Target:  to.Ptr("aaaa"),
								}},
						},
						Progress: &armcompute.RollingUpgradeProgressInfo{
							FailedInstanceCount:     to.Ptr[int32](25),
							InProgressInstanceCount: to.Ptr[int32](20),
							PendingInstanceCount:    to.Ptr[int32](27),
							SuccessfulInstanceCount: to.Ptr[int32](6),
						},
						RollbackInfo: &armcompute.RollbackStatusInfo{
							FailedRolledbackInstanceCount: to.Ptr[int32](2),
							RollbackError: &armcompute.APIError{
								Code: to.Ptr("aaaaaaa"),
								Innererror: &armcompute.InnerError{
									Errordetail:   to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaa"),
									Exceptiontype: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
								},
								Message: to.Ptr("aaaaaaaaa"),
								Target:  to.Ptr("aaaaaaa"),
								Details: []*armcompute.APIErrorBase{
									{
										Code:    to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaa"),
										Message: to.Ptr("aa"),
										Target:  to.Ptr("aaaa"),
									}},
							},
							SuccessfullyRolledbackInstanceCount: to.Ptr[int32](12),
						},
						RunningStatus: &armcompute.UpgradeOperationHistoryStatus{
							Code:      to.Ptr(armcompute.UpgradeStateRollingForward),
							EndTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T13:05:40.443Z"); return t }()),
							StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T13:05:40.442Z"); return t }()),
						},
						StartedBy: to.Ptr(armcompute.UpgradeOperationInvokerUnknown),
						TargetImageReference: &armcompute.ImageReference{
							ID:                   to.Ptr("aaaaaaaaaaaaaaaaaaa"),
							ExactVersion:         to.Ptr("aaaaaaa"),
							Offer:                to.Ptr("WindowsServer"),
							Publisher:            to.Ptr("MicrosoftWindowsServer"),
							SharedGalleryImageID: to.Ptr("aaaaaa"),
							SKU:                  to.Ptr("2016-Datacenter"),
							Version:              to.Ptr("latest"),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.VirtualMachineScaleSetListOSUpgradeHistory) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.VirtualMachineScaleSetListOSUpgradeHistory)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_GetOSUpgradeHistory_MaximumSet_Gen.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_GetOSUpgradeHistory_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSets_GetOSUpgradeHistory_MinimumSet_Gen"},
	})
	client, err = armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager = client.NewGetOSUpgradeHistoryPager("rgcompute",
		"aaaaaaaaaaaaaaaaaaaaaaaaaa",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_GetOSUpgradeHistory_MinimumSet_Gen.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcompute.VirtualMachineScaleSetListOSUpgradeHistory{
			Value: []*armcompute.UpgradeOperationHistoricalStatusInfo{
				{}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.VirtualMachineScaleSetListOSUpgradeHistory) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.VirtualMachineScaleSetListOSUpgradeHistory)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_GetOSUpgradeHistory_MinimumSet_Gen.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualMachineScaleSets_PowerOff(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_PowerOff_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSets_PowerOff_MaximumSet_Gen"},
	})
	client, err := armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginPowerOff(ctx,
		"rgcompute",
		"aaaaaaaaaaaaaaaaaa",
		&armcompute.VirtualMachineScaleSetsClientBeginPowerOffOptions{SkipShutdown: to.Ptr(true),
			VMInstanceIDs: &armcompute.VirtualMachineScaleSetVMInstanceIDs{
				InstanceIDs: []*string{
					to.Ptr("aaaaaaaaaaaaaaaaa")},
			},
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_PowerOff_MaximumSet_Gen.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_PowerOff_MaximumSet_Gen.json: %v", err)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_PowerOff_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSets_PowerOff_MinimumSet_Gen"},
	})
	client, err = armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginPowerOff(ctx,
		"rgcompute",
		"a",
		&armcompute.VirtualMachineScaleSetsClientBeginPowerOffOptions{SkipShutdown: nil,
			VMInstanceIDs: nil,
			ResumeToken:   "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_PowerOff_MinimumSet_Gen.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_PowerOff_MinimumSet_Gen.json: %v", err)
	}
}

func TestVirtualMachineScaleSets_Restart(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_Restart_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSets_Restart_MaximumSet_Gen"},
	})
	client, err := armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginRestart(ctx,
		"rgcompute",
		"aaaaaaaaaaaaaaaaaaa",
		&armcompute.VirtualMachineScaleSetsClientBeginRestartOptions{VMInstanceIDs: &armcompute.VirtualMachineScaleSetVMInstanceIDs{
			InstanceIDs: []*string{
				to.Ptr("aaaaaaaaaaaaaaaaa")},
		},
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_Restart_MaximumSet_Gen.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_Restart_MaximumSet_Gen.json: %v", err)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_Restart_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSets_Restart_MinimumSet_Gen"},
	})
	client, err = armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginRestart(ctx,
		"rgcompute",
		"aaaa",
		&armcompute.VirtualMachineScaleSetsClientBeginRestartOptions{VMInstanceIDs: nil,
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_Restart_MinimumSet_Gen.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_Restart_MinimumSet_Gen.json: %v", err)
	}
}

func TestVirtualMachineScaleSets_Start(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_Start_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSets_Start_MaximumSet_Gen"},
	})
	client, err := armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginStart(ctx,
		"rgcompute",
		"aaaaaaaaaaaaaaaaaaaaaaaa",
		&armcompute.VirtualMachineScaleSetsClientBeginStartOptions{VMInstanceIDs: &armcompute.VirtualMachineScaleSetVMInstanceIDs{
			InstanceIDs: []*string{
				to.Ptr("aaaaaaaaaaaaaaaaa")},
		},
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_Start_MaximumSet_Gen.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_Start_MaximumSet_Gen.json: %v", err)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_Start_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSets_Start_MinimumSet_Gen"},
	})
	client, err = armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginStart(ctx,
		"rgcompute",
		"aaaaaaaaaaaaaaaaaaa",
		&armcompute.VirtualMachineScaleSetsClientBeginStartOptions{VMInstanceIDs: nil,
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_Start_MinimumSet_Gen.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_Start_MinimumSet_Gen.json: %v", err)
	}
}

func TestVirtualMachineScaleSets_Redeploy(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_Redeploy_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSets_Redeploy_MaximumSet_Gen"},
	})
	client, err := armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginRedeploy(ctx,
		"rgcompute",
		"aaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
		&armcompute.VirtualMachineScaleSetsClientBeginRedeployOptions{VMInstanceIDs: &armcompute.VirtualMachineScaleSetVMInstanceIDs{
			InstanceIDs: []*string{
				to.Ptr("aaaaaaaaaaaaaaaaa")},
		},
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_Redeploy_MaximumSet_Gen.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_Redeploy_MaximumSet_Gen.json: %v", err)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_Redeploy_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSets_Redeploy_MinimumSet_Gen"},
	})
	client, err = armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginRedeploy(ctx,
		"rgcompute",
		"aaaaaaaaaaaaaaaaaaaaaa",
		&armcompute.VirtualMachineScaleSetsClientBeginRedeployOptions{VMInstanceIDs: nil,
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_Redeploy_MinimumSet_Gen.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_Redeploy_MinimumSet_Gen.json: %v", err)
	}
}

func TestVirtualMachineScaleSets_PerformMaintenance(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_PerformMaintenance_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSets_PerformMaintenance_MaximumSet_Gen"},
	})
	client, err := armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginPerformMaintenance(ctx,
		"rgcompute",
		"aaaaaaaaaaa",
		&armcompute.VirtualMachineScaleSetsClientBeginPerformMaintenanceOptions{VMInstanceIDs: &armcompute.VirtualMachineScaleSetVMInstanceIDs{
			InstanceIDs: []*string{
				to.Ptr("aaaaaaaaaaaaaaaaa")},
		},
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_PerformMaintenance_MaximumSet_Gen.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_PerformMaintenance_MaximumSet_Gen.json: %v", err)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_PerformMaintenance_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSets_PerformMaintenance_MinimumSet_Gen"},
	})
	client, err = armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginPerformMaintenance(ctx,
		"rgcompute",
		"aa",
		&armcompute.VirtualMachineScaleSetsClientBeginPerformMaintenanceOptions{VMInstanceIDs: nil,
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_PerformMaintenance_MinimumSet_Gen.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_PerformMaintenance_MinimumSet_Gen.json: %v", err)
	}
}

func TestVirtualMachineScaleSets_UpdateInstances(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_UpdateInstances_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSets_UpdateInstances_MaximumSet_Gen"},
	})
	client, err := armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginUpdateInstances(ctx,
		"rgcompute",
		"aaaaaaaaaaaaaaaaaaaaaaaa",
		armcompute.VirtualMachineScaleSetVMInstanceRequiredIDs{
			InstanceIDs: []*string{
				to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaa")},
		},
		&armcompute.VirtualMachineScaleSetsClientBeginUpdateInstancesOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_UpdateInstances_MaximumSet_Gen.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_UpdateInstances_MaximumSet_Gen.json: %v", err)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_UpdateInstances_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSets_UpdateInstances_MinimumSet_Gen"},
	})
	client, err = armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginUpdateInstances(ctx,
		"rgcompute",
		"aaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
		armcompute.VirtualMachineScaleSetVMInstanceRequiredIDs{
			InstanceIDs: []*string{
				to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaa")},
		},
		&armcompute.VirtualMachineScaleSetsClientBeginUpdateInstancesOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_UpdateInstances_MinimumSet_Gen.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_UpdateInstances_MinimumSet_Gen.json: %v", err)
	}
}

func TestVirtualMachineScaleSets_Reimage(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_Reimage_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSets_Reimage_MaximumSet_Gen"},
	})
	client, err := armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginReimage(ctx,
		"rgcompute",
		"aaaaaaaaaaaaaaaaaaaaaaaaaa",
		&armcompute.VirtualMachineScaleSetsClientBeginReimageOptions{VMScaleSetReimageInput: &armcompute.VirtualMachineScaleSetReimageParameters{
			TempDisk: to.Ptr(true),
			InstanceIDs: []*string{
				to.Ptr("aaaaaaaaaa")},
		},
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_Reimage_MaximumSet_Gen.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_Reimage_MaximumSet_Gen.json: %v", err)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_Reimage_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSets_Reimage_MinimumSet_Gen"},
	})
	client, err = armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginReimage(ctx,
		"rgcompute",
		"aaaaaaaaaaaaaaaaaaaaaaaaaaaa",
		&armcompute.VirtualMachineScaleSetsClientBeginReimageOptions{VMScaleSetReimageInput: nil,
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_Reimage_MinimumSet_Gen.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_Reimage_MinimumSet_Gen.json: %v", err)
	}
}

func TestVirtualMachineScaleSets_ReimageAll(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_ReimageAll_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSets_ReimageAll_MaximumSet_Gen"},
	})
	client, err := armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginReimageAll(ctx,
		"rgcompute",
		"aaaaaaaaaaaa",
		&armcompute.VirtualMachineScaleSetsClientBeginReimageAllOptions{VMInstanceIDs: &armcompute.VirtualMachineScaleSetVMInstanceIDs{
			InstanceIDs: []*string{
				to.Ptr("aaaaaaaaaaaaaaaaa")},
		},
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_ReimageAll_MaximumSet_Gen.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_ReimageAll_MaximumSet_Gen.json: %v", err)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_ReimageAll_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSets_ReimageAll_MinimumSet_Gen"},
	})
	client, err = armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginReimageAll(ctx,
		"rgcompute",
		"aaaaaaaaaaaaaaaaaaaaaa",
		&armcompute.VirtualMachineScaleSetsClientBeginReimageAllOptions{VMInstanceIDs: nil,
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_ReimageAll_MinimumSet_Gen.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_ReimageAll_MinimumSet_Gen.json: %v", err)
	}
}

func TestVirtualMachineScaleSets_ForceRecoveryServiceFabricPlatformUpdateDomainWalk(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_ForceRecoveryServiceFabricPlatformUpdateDomainWalk_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSets_ForceRecoveryServiceFabricPlatformUpdateDomainWalk_MaximumSet_Gen"},
	})
	client, err := armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := client.ForceRecoveryServiceFabricPlatformUpdateDomainWalk(ctx,
		"rgcompute",
		"aaaaaaaaaaaaaaaa",
		30,
		&armcompute.VirtualMachineScaleSetsClientForceRecoveryServiceFabricPlatformUpdateDomainWalkOptions{Zone: nil,
			PlacementGroupID: nil,
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_ForceRecoveryServiceFabricPlatformUpdateDomainWalk_MaximumSet_Gen.json: %v", err)
	}
	// Response check
	exampleRes := armcompute.RecoveryWalkResponse{
		NextPlatformUpdateDomain: to.Ptr[int32](7),
		WalkPerformed:            to.Ptr(true),
	}
	if !reflect.DeepEqual(exampleRes, res.RecoveryWalkResponse) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.RecoveryWalkResponse)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_ForceRecoveryServiceFabricPlatformUpdateDomainWalk_MaximumSet_Gen.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_ForceRecoveryServiceFabricPlatformUpdateDomainWalk_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSets_ForceRecoveryServiceFabricPlatformUpdateDomainWalk_MinimumSet_Gen"},
	})
	client, err = armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err = client.ForceRecoveryServiceFabricPlatformUpdateDomainWalk(ctx,
		"rgcompute",
		"aaaaaaaaaaaa",
		9,
		&armcompute.VirtualMachineScaleSetsClientForceRecoveryServiceFabricPlatformUpdateDomainWalkOptions{Zone: nil,
			PlacementGroupID: nil,
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_ForceRecoveryServiceFabricPlatformUpdateDomainWalk_MinimumSet_Gen.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.RecoveryWalkResponse{}
	if !reflect.DeepEqual(exampleRes, res.RecoveryWalkResponse) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.RecoveryWalkResponse)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_ForceRecoveryServiceFabricPlatformUpdateDomainWalk_MinimumSet_Gen.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestVirtualMachineScaleSets_ConvertToSinglePlacementGroup(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_ConvertToSinglePlacementGroup_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSets_ConvertToSinglePlacementGroup_MaximumSet_Gen"},
	})
	client, err := armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	_, err = client.ConvertToSinglePlacementGroup(ctx,
		"rgcompute",
		"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
		armcompute.VMScaleSetConvertToSinglePlacementGroupInput{
			ActivePlacementGroupID: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaa"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_ConvertToSinglePlacementGroup_MaximumSet_Gen.json: %v", err)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_ConvertToSinglePlacementGroup_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSets_ConvertToSinglePlacementGroup_MinimumSet_Gen"},
	})
	client, err = armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	_, err = client.ConvertToSinglePlacementGroup(ctx,
		"rgcompute",
		"aaaaaaaaaaaaa",
		armcompute.VMScaleSetConvertToSinglePlacementGroupInput{},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_ConvertToSinglePlacementGroup_MinimumSet_Gen.json: %v", err)
	}
}

func TestVirtualMachineScaleSets_SetOrchestrationServiceState(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_SetOrchestrationServiceState_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSets_SetOrchestrationServiceState_MaximumSet_Gen"},
	})
	client, err := armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginSetOrchestrationServiceState(ctx,
		"rgcompute",
		"aaaaaaaaaaaaaaaa",
		armcompute.OrchestrationServiceStateInput{
			Action:      to.Ptr(armcompute.OrchestrationServiceStateActionResume),
			ServiceName: to.Ptr(armcompute.OrchestrationServiceNamesAutomaticRepairs),
		},
		&armcompute.VirtualMachineScaleSetsClientBeginSetOrchestrationServiceStateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_SetOrchestrationServiceState_MaximumSet_Gen.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_SetOrchestrationServiceState_MaximumSet_Gen.json: %v", err)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_SetOrchestrationServiceState_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSets_SetOrchestrationServiceState_MinimumSet_Gen"},
	})
	client, err = armcompute.NewVirtualMachineScaleSetsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginSetOrchestrationServiceState(ctx,
		"rgcompute",
		"aaaaaaaaaaaaaaaaaaaaaaaa",
		armcompute.OrchestrationServiceStateInput{
			Action:      to.Ptr(armcompute.OrchestrationServiceStateActionResume),
			ServiceName: to.Ptr(armcompute.OrchestrationServiceNamesAutomaticRepairs),
		},
		&armcompute.VirtualMachineScaleSetsClientBeginSetOrchestrationServiceStateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_SetOrchestrationServiceState_MinimumSet_Gen.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSets_SetOrchestrationServiceState_MinimumSet_Gen.json: %v", err)
	}
}

func TestVirtualMachineSizes_List(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineSizes_List_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineSizes_List_MaximumSet_Gen"},
	})
	client, err := armcompute.NewVirtualMachineSizesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := client.NewListPager("-e",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineSizes_List_MaximumSet_Gen.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcompute.VirtualMachineSizeListResult{
			Value: []*armcompute.VirtualMachineSize{
				{
					Name:                 to.Ptr("Standard_A1_V2"),
					MaxDataDiskCount:     to.Ptr[int32](2),
					MemoryInMB:           to.Ptr[int32](2048),
					NumberOfCores:        to.Ptr[int32](1),
					OSDiskSizeInMB:       to.Ptr[int32](1047552),
					ResourceDiskSizeInMB: to.Ptr[int32](10240),
				},
				{
					Name:                 to.Ptr("Standard_A2_V2"),
					MaxDataDiskCount:     to.Ptr[int32](4),
					MemoryInMB:           to.Ptr[int32](4096),
					NumberOfCores:        to.Ptr[int32](2),
					OSDiskSizeInMB:       to.Ptr[int32](1047552),
					ResourceDiskSizeInMB: to.Ptr[int32](20480),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.VirtualMachineSizeListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.VirtualMachineSizeListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineSizes_List_MaximumSet_Gen.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineSizes_List_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineSizes_List_MinimumSet_Gen"},
	})
	client, err = armcompute.NewVirtualMachineSizesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager = client.NewListPager("._..",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineSizes_List_MinimumSet_Gen.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcompute.VirtualMachineSizeListResult{}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.VirtualMachineSizeListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.VirtualMachineSizeListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineSizes_List_MinimumSet_Gen.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestImages_CreateOrUpdate(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAnImageFromABlobWithDiskEncryptionSet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a virtual machine image from a blob with DiskEncryptionSet resource."},
	})
	client, err := armcompute.NewImagesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myImage",
		armcompute.Image{
			Location: to.Ptr("West US"),
			Properties: &armcompute.ImageProperties{
				StorageProfile: &armcompute.ImageStorageProfile{
					OSDisk: &armcompute.ImageOSDisk{
						BlobURI: to.Ptr("https://mystorageaccount.blob.core.windows.net/osimages/osimage.vhd"),
						DiskEncryptionSet: &armcompute.DiskEncryptionSetParameters{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{existing-diskEncryptionSet-name}"),
						},
						OSState: to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
						OSType:  to.Ptr(armcompute.OperatingSystemTypesLinux),
					},
				},
			},
		},
		&armcompute.ImagesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAnImageFromABlobWithDiskEncryptionSet.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAnImageFromABlobWithDiskEncryptionSet.json: %v", err)
	}
	// Response check
	exampleRes := armcompute.Image{
		Name:     to.Ptr("myImage"),
		Type:     to.Ptr("Microsoft.Compute/images"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/disk/providers/Microsoft.Compute/images/myImage"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.ImageProperties{
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.ImageStorageProfile{
				DataDisks: []*armcompute.ImageDataDisk{},
				OSDisk: &armcompute.ImageOSDisk{
					BlobURI: to.Ptr("https://mystorageaccount.blob.core.windows.net/osimages/osimage.vhd"),
					Caching: to.Ptr(armcompute.CachingTypesReadWrite),
					DiskEncryptionSet: &armcompute.DiskEncryptionSetParameters{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{existing-diskEncryptionSet-name}"),
					},
					OSState: to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
					OSType:  to.Ptr(armcompute.OperatingSystemTypesLinux),
				},
			},
		},
	}
	if !reflect.DeepEqual(exampleRes, res.Image) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.Image)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAnImageFromABlobWithDiskEncryptionSet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAnImageFromABlob.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a virtual machine image from a blob."},
	})
	client, err = armcompute.NewImagesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myImage",
		armcompute.Image{
			Location: to.Ptr("West US"),
			Properties: &armcompute.ImageProperties{
				StorageProfile: &armcompute.ImageStorageProfile{
					OSDisk: &armcompute.ImageOSDisk{
						BlobURI: to.Ptr("https://mystorageaccount.blob.core.windows.net/osimages/osimage.vhd"),
						OSState: to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
						OSType:  to.Ptr(armcompute.OperatingSystemTypesLinux),
					},
					ZoneResilient: to.Ptr(true),
				},
			},
		},
		&armcompute.ImagesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAnImageFromABlob.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAnImageFromABlob.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.Image{
		Name:     to.Ptr("myImage"),
		Type:     to.Ptr("Microsoft.Compute/images"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/disk/providers/Microsoft.Compute/images/myImage"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.ImageProperties{
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.ImageStorageProfile{
				DataDisks: []*armcompute.ImageDataDisk{},
				OSDisk: &armcompute.ImageOSDisk{
					BlobURI: to.Ptr("https://mystorageaccount.blob.core.windows.net/osimages/osimage.vhd"),
					Caching: to.Ptr(armcompute.CachingTypesReadWrite),
					OSState: to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
					OSType:  to.Ptr(armcompute.OperatingSystemTypesLinux),
				},
				ZoneResilient: to.Ptr(true),
			},
		},
	}
	if !reflect.DeepEqual(exampleRes, res.Image) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.Image)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAnImageFromABlob.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAnImageFromAManagedDiskWithDiskEncryptionSet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a virtual machine image from a managed disk with DiskEncryptionSet resource."},
	})
	client, err = armcompute.NewImagesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myImage",
		armcompute.Image{
			Location: to.Ptr("West US"),
			Properties: &armcompute.ImageProperties{
				StorageProfile: &armcompute.ImageStorageProfile{
					OSDisk: &armcompute.ImageOSDisk{
						DiskEncryptionSet: &armcompute.DiskEncryptionSetParameters{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{existing-diskEncryptionSet-name}"),
						},
						ManagedDisk: &armcompute.SubResource{
							ID: to.Ptr("subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk"),
						},
						OSState: to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
						OSType:  to.Ptr(armcompute.OperatingSystemTypesLinux),
					},
				},
			},
		},
		&armcompute.ImagesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAnImageFromAManagedDiskWithDiskEncryptionSet.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAnImageFromAManagedDiskWithDiskEncryptionSet.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.Image{
		Name:     to.Ptr("myImage"),
		Type:     to.Ptr("Microsoft.Compute/images"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/disk/providers/Microsoft.Compute/images/myImage"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.ImageProperties{
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.ImageStorageProfile{
				DataDisks: []*armcompute.ImageDataDisk{},
				OSDisk: &armcompute.ImageOSDisk{
					Caching: to.Ptr(armcompute.CachingTypesReadWrite),
					DiskEncryptionSet: &armcompute.DiskEncryptionSetParameters{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{existing-diskEncryptionSet-name}"),
					},
					ManagedDisk: &armcompute.SubResource{
						ID: to.Ptr("subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk"),
					},
					OSState: to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
					OSType:  to.Ptr(armcompute.OperatingSystemTypesLinux),
				},
			},
		},
	}
	if !reflect.DeepEqual(exampleRes, res.Image) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.Image)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAnImageFromAManagedDiskWithDiskEncryptionSet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAnImageFromAManagedDisk.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a virtual machine image from a managed disk."},
	})
	client, err = armcompute.NewImagesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myImage",
		armcompute.Image{
			Location: to.Ptr("West US"),
			Properties: &armcompute.ImageProperties{
				StorageProfile: &armcompute.ImageStorageProfile{
					OSDisk: &armcompute.ImageOSDisk{
						ManagedDisk: &armcompute.SubResource{
							ID: to.Ptr("subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk"),
						},
						OSState: to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
						OSType:  to.Ptr(armcompute.OperatingSystemTypesLinux),
					},
					ZoneResilient: to.Ptr(true),
				},
			},
		},
		&armcompute.ImagesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAnImageFromAManagedDisk.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAnImageFromAManagedDisk.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.Image{
		Name:     to.Ptr("myImage"),
		Type:     to.Ptr("Microsoft.Compute/images"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/disk/providers/Microsoft.Compute/images/myImage"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.ImageProperties{
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.ImageStorageProfile{
				DataDisks: []*armcompute.ImageDataDisk{},
				OSDisk: &armcompute.ImageOSDisk{
					Caching: to.Ptr(armcompute.CachingTypesReadWrite),
					ManagedDisk: &armcompute.SubResource{
						ID: to.Ptr("subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk"),
					},
					OSState: to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
					OSType:  to.Ptr(armcompute.OperatingSystemTypesLinux),
				},
				ZoneResilient: to.Ptr(true),
			},
		},
	}
	if !reflect.DeepEqual(exampleRes, res.Image) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.Image)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAnImageFromAManagedDisk.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAnImageFromASnapshotWithDiskEncryptionSet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a virtual machine image from a snapshot with DiskEncryptionSet resource."},
	})
	client, err = armcompute.NewImagesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myImage",
		armcompute.Image{
			Location: to.Ptr("West US"),
			Properties: &armcompute.ImageProperties{
				StorageProfile: &armcompute.ImageStorageProfile{
					OSDisk: &armcompute.ImageOSDisk{
						DiskEncryptionSet: &armcompute.DiskEncryptionSetParameters{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{existing-diskEncryptionSet-name}"),
						},
						Snapshot: &armcompute.SubResource{
							ID: to.Ptr("subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot"),
						},
						OSState: to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
						OSType:  to.Ptr(armcompute.OperatingSystemTypesLinux),
					},
				},
			},
		},
		&armcompute.ImagesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAnImageFromASnapshotWithDiskEncryptionSet.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAnImageFromASnapshotWithDiskEncryptionSet.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.Image{
		Name:     to.Ptr("myImage"),
		Type:     to.Ptr("Microsoft.Compute/images"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/disk/providers/Microsoft.Compute/images/myImage"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.ImageProperties{
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.ImageStorageProfile{
				DataDisks: []*armcompute.ImageDataDisk{},
				OSDisk: &armcompute.ImageOSDisk{
					Caching: to.Ptr(armcompute.CachingTypesReadWrite),
					DiskEncryptionSet: &armcompute.DiskEncryptionSetParameters{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{existing-diskEncryptionSet-name}"),
					},
					Snapshot: &armcompute.SubResource{
						ID: to.Ptr("subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot"),
					},
					OSState: to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
					OSType:  to.Ptr(armcompute.OperatingSystemTypesLinux),
				},
			},
		},
	}
	if !reflect.DeepEqual(exampleRes, res.Image) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.Image)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAnImageFromASnapshotWithDiskEncryptionSet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAnImageFromASnapshot.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a virtual machine image from a snapshot."},
	})
	client, err = armcompute.NewImagesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myImage",
		armcompute.Image{
			Location: to.Ptr("West US"),
			Properties: &armcompute.ImageProperties{
				StorageProfile: &armcompute.ImageStorageProfile{
					OSDisk: &armcompute.ImageOSDisk{
						Snapshot: &armcompute.SubResource{
							ID: to.Ptr("subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot"),
						},
						OSState: to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
						OSType:  to.Ptr(armcompute.OperatingSystemTypesLinux),
					},
					ZoneResilient: to.Ptr(false),
				},
			},
		},
		&armcompute.ImagesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAnImageFromASnapshot.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAnImageFromASnapshot.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.Image{
		Name:     to.Ptr("myImage"),
		Type:     to.Ptr("Microsoft.Compute/images"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/disk/providers/Microsoft.Compute/images/myImage"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.ImageProperties{
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.ImageStorageProfile{
				DataDisks: []*armcompute.ImageDataDisk{},
				OSDisk: &armcompute.ImageOSDisk{
					Caching: to.Ptr(armcompute.CachingTypesReadWrite),
					Snapshot: &armcompute.SubResource{
						ID: to.Ptr("subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot"),
					},
					OSState: to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
					OSType:  to.Ptr(armcompute.OperatingSystemTypesLinux),
				},
				ZoneResilient: to.Ptr(false),
			},
		},
	}
	if !reflect.DeepEqual(exampleRes, res.Image) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.Image)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAnImageFromASnapshot.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAnImageFromAVM.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a virtual machine image from an existing virtual machine."},
	})
	client, err = armcompute.NewImagesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myImage",
		armcompute.Image{
			Location: to.Ptr("West US"),
			Properties: &armcompute.ImageProperties{
				SourceVirtualMachine: &armcompute.SubResource{
					ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
				},
			},
		},
		&armcompute.ImagesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAnImageFromAVM.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAnImageFromAVM.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.Image{
		Name:     to.Ptr("myImage"),
		Type:     to.Ptr("Microsoft.Compute/images"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/disk/providers/Microsoft.Compute/images/myImage"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.ImageProperties{
			ProvisioningState: to.Ptr("Succeeded"),
			SourceVirtualMachine: &armcompute.SubResource{
				ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
			},
			StorageProfile: &armcompute.ImageStorageProfile{
				DataDisks: []*armcompute.ImageDataDisk{},
				OSDisk: &armcompute.ImageOSDisk{
					Caching: to.Ptr(armcompute.CachingTypesReadWrite),
					ManagedDisk: &armcompute.SubResource{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myVM_OsDisk_1_6dc293b7d811433196903acf92665022"),
					},
					OSState: to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
					OSType:  to.Ptr(armcompute.OperatingSystemTypesLinux),
				},
				ZoneResilient: to.Ptr(false),
			},
		},
	}
	if !reflect.DeepEqual(exampleRes, res.Image) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.Image)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAnImageFromAVM.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAnImageThatIncludesADataDiskFromABlob.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a virtual machine image that includes a data disk from a blob."},
	})
	client, err = armcompute.NewImagesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myImage",
		armcompute.Image{
			Location: to.Ptr("West US"),
			Properties: &armcompute.ImageProperties{
				StorageProfile: &armcompute.ImageStorageProfile{
					DataDisks: []*armcompute.ImageDataDisk{
						{
							BlobURI: to.Ptr("https://mystorageaccount.blob.core.windows.net/dataimages/dataimage.vhd"),
							Lun:     to.Ptr[int32](1),
						}},
					OSDisk: &armcompute.ImageOSDisk{
						BlobURI: to.Ptr("https://mystorageaccount.blob.core.windows.net/osimages/osimage.vhd"),
						OSState: to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
						OSType:  to.Ptr(armcompute.OperatingSystemTypesLinux),
					},
					ZoneResilient: to.Ptr(false),
				},
			},
		},
		&armcompute.ImagesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAnImageThatIncludesADataDiskFromABlob.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAnImageThatIncludesADataDiskFromABlob.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.Image{
		Name:     to.Ptr("myImage"),
		Type:     to.Ptr("Microsoft.Compute/images"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/disk/providers/Microsoft.Compute/images/myImage"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.ImageProperties{
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.ImageStorageProfile{
				DataDisks: []*armcompute.ImageDataDisk{
					{
						BlobURI: to.Ptr("https://mystorageaccount.blob.core.windows.net/dataimages/dataimage.vhd"),
						Lun:     to.Ptr[int32](1),
					}},
				OSDisk: &armcompute.ImageOSDisk{
					BlobURI: to.Ptr("https://mystorageaccount.blob.core.windows.net/osimages/osimage.vhd"),
					Caching: to.Ptr(armcompute.CachingTypesReadWrite),
					OSState: to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
					OSType:  to.Ptr(armcompute.OperatingSystemTypesLinux),
				},
				ZoneResilient: to.Ptr(false),
			},
		},
	}
	if !reflect.DeepEqual(exampleRes, res.Image) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.Image)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAnImageThatIncludesADataDiskFromABlob.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAnImageThatIncludesADataDiskFromAManagedDisk.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a virtual machine image that includes a data disk from a managed disk."},
	})
	client, err = armcompute.NewImagesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myImage",
		armcompute.Image{
			Location: to.Ptr("West US"),
			Properties: &armcompute.ImageProperties{
				StorageProfile: &armcompute.ImageStorageProfile{
					DataDisks: []*armcompute.ImageDataDisk{
						{
							ManagedDisk: &armcompute.SubResource{
								ID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk2"),
							},
							Lun: to.Ptr[int32](1),
						}},
					OSDisk: &armcompute.ImageOSDisk{
						ManagedDisk: &armcompute.SubResource{
							ID: to.Ptr("subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk"),
						},
						OSState: to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
						OSType:  to.Ptr(armcompute.OperatingSystemTypesLinux),
					},
					ZoneResilient: to.Ptr(false),
				},
			},
		},
		&armcompute.ImagesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAnImageThatIncludesADataDiskFromAManagedDisk.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAnImageThatIncludesADataDiskFromAManagedDisk.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.Image{
		Name:     to.Ptr("myImage"),
		Type:     to.Ptr("Microsoft.Compute/images"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/disk/providers/Microsoft.Compute/images/myImage"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.ImageProperties{
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.ImageStorageProfile{
				DataDisks: []*armcompute.ImageDataDisk{
					{
						ManagedDisk: &armcompute.SubResource{
							ID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk2"),
						},
						Lun: to.Ptr[int32](1),
					}},
				OSDisk: &armcompute.ImageOSDisk{
					Caching: to.Ptr(armcompute.CachingTypesReadWrite),
					ManagedDisk: &armcompute.SubResource{
						ID: to.Ptr("subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk"),
					},
					OSState: to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
					OSType:  to.Ptr(armcompute.OperatingSystemTypesLinux),
				},
				ZoneResilient: to.Ptr(false),
			},
		},
	}
	if !reflect.DeepEqual(exampleRes, res.Image) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.Image)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAnImageThatIncludesADataDiskFromAManagedDisk.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAnImageThatIncludesADataDiskFromASnapshot.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a virtual machine image that includes a data disk from a snapshot."},
	})
	client, err = armcompute.NewImagesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myImage",
		armcompute.Image{
			Location: to.Ptr("West US"),
			Properties: &armcompute.ImageProperties{
				StorageProfile: &armcompute.ImageStorageProfile{
					DataDisks: []*armcompute.ImageDataDisk{
						{
							Snapshot: &armcompute.SubResource{
								ID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot2"),
							},
							Lun: to.Ptr[int32](1),
						}},
					OSDisk: &armcompute.ImageOSDisk{
						Snapshot: &armcompute.SubResource{
							ID: to.Ptr("subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot"),
						},
						OSState: to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
						OSType:  to.Ptr(armcompute.OperatingSystemTypesLinux),
					},
					ZoneResilient: to.Ptr(true),
				},
			},
		},
		&armcompute.ImagesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAnImageThatIncludesADataDiskFromASnapshot.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAnImageThatIncludesADataDiskFromASnapshot.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.Image{
		Name:     to.Ptr("myImage"),
		Type:     to.Ptr("Microsoft.Compute/images"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/disk/providers/Microsoft.Compute/images/myImage"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.ImageProperties{
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.ImageStorageProfile{
				DataDisks: []*armcompute.ImageDataDisk{
					{
						Snapshot: &armcompute.SubResource{
							ID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot2"),
						},
						Lun: to.Ptr[int32](1),
					}},
				OSDisk: &armcompute.ImageOSDisk{
					Caching: to.Ptr(armcompute.CachingTypesReadWrite),
					Snapshot: &armcompute.SubResource{
						ID: to.Ptr("subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot"),
					},
					OSState: to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
					OSType:  to.Ptr(armcompute.OperatingSystemTypesLinux),
				},
				ZoneResilient: to.Ptr(true),
			},
		},
	}
	if !reflect.DeepEqual(exampleRes, res.Image) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.Image)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateAnImageThatIncludesADataDiskFromASnapshot.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestImages_Update(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/UpdateImage.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Updates tags of an Image."},
	})
	client, err := armcompute.NewImagesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginUpdate(ctx,
		"myResourceGroup",
		"myImage",
		armcompute.ImageUpdate{
			Tags: map[string]*string{
				"department": to.Ptr("HR"),
			},
			Properties: &armcompute.ImageProperties{
				HyperVGeneration: to.Ptr(armcompute.HyperVGenerationTypesV1),
				SourceVirtualMachine: &armcompute.SubResource{
					ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
				},
			},
		},
		&armcompute.ImagesClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/UpdateImage.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/UpdateImage.json: %v", err)
	}
	// Response check
	exampleRes := armcompute.Image{
		Name:     to.Ptr("myImage"),
		Type:     to.Ptr("Microsoft.Compute/images"),
		ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/images/myImage"),
		Location: to.Ptr("West US"),
		Tags: map[string]*string{
			"department": to.Ptr("HR"),
		},
		Properties: &armcompute.ImageProperties{
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.ImageStorageProfile{
				DataDisks: []*armcompute.ImageDataDisk{
					{
						BlobURI: to.Ptr("https://mystorageaccount.blob.core.windows.net/dataimages/dataimage.vhd"),
						ManagedDisk: &armcompute.SubResource{
							ID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk2"),
						},
						Snapshot: &armcompute.SubResource{
							ID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot2"),
						},
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						Lun:                to.Ptr[int32](1),
					}},
				OSDisk: &armcompute.ImageOSDisk{
					BlobURI:    to.Ptr("https://mystorageaccount.blob.core.windows.net/osimages/osimage.vhd"),
					DiskSizeGB: to.Ptr[int32](20),
					ManagedDisk: &armcompute.SubResource{
						ID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk1"),
					},
					Snapshot: &armcompute.SubResource{
						ID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot1"),
					},
					StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					OSState:            to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
					OSType:             to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
				ZoneResilient: to.Ptr(true),
			},
		},
	}
	if !reflect.DeepEqual(exampleRes, res.Image) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.Image)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/UpdateImage.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestImages_Delete(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/Images_Delete_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Images_Delete_MaximumSet_Gen"},
	})
	client, err := armcompute.NewImagesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginDelete(ctx,
		"rgcompute",
		"aaaaaaaaaaaaaaaaaaaaaaaaaaa",
		&armcompute.ImagesClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/Images_Delete_MaximumSet_Gen.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/Images_Delete_MaximumSet_Gen.json: %v", err)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/Images_Delete_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Images_Delete_MinimumSet_Gen"},
	})
	client, err = armcompute.NewImagesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginDelete(ctx,
		"rgcompute",
		"aaaaaaaaaaaaaaaaaaaaaaaaaaaa",
		&armcompute.ImagesClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/Images_Delete_MinimumSet_Gen.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/Images_Delete_MinimumSet_Gen.json: %v", err)
	}
}

func TestImages_Get(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/GetInformationAboutAnImage.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get information about a virtual machine image."},
	})
	client, err := armcompute.NewImagesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myImage",
		&armcompute.ImagesClientGetOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/GetInformationAboutAnImage.json: %v", err)
	}
	// Response check
	exampleRes := armcompute.Image{
		Name:     to.Ptr("myImage"),
		Type:     to.Ptr("Microsoft.Compute/images"),
		ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/images/myImage"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.ImageProperties{
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.ImageStorageProfile{
				DataDisks: []*armcompute.ImageDataDisk{
					{
						BlobURI: to.Ptr("https://mystorageaccount.blob.core.windows.net/dataimages/dataimage.vhd"),
						ManagedDisk: &armcompute.SubResource{
							ID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk2"),
						},
						Snapshot: &armcompute.SubResource{
							ID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot2"),
						},
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						Lun:                to.Ptr[int32](1),
					}},
				OSDisk: &armcompute.ImageOSDisk{
					BlobURI:    to.Ptr("https://mystorageaccount.blob.core.windows.net/osimages/osimage.vhd"),
					DiskSizeGB: to.Ptr[int32](20),
					ManagedDisk: &armcompute.SubResource{
						ID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk1"),
					},
					Snapshot: &armcompute.SubResource{
						ID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot1"),
					},
					StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					OSState:            to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
					OSType:             to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
				ZoneResilient: to.Ptr(true),
			},
		},
	}
	if !reflect.DeepEqual(exampleRes, res.Image) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.Image)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/GetInformationAboutAnImage.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestImages_ListByResourceGroup(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/ListImagesInAResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all virtual machine images in a resource group."},
	})
	client, err := armcompute.NewImagesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := client.NewListByResourceGroupPager("myResourceGroup",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/ListImagesInAResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcompute.ImageListResult{
			Value: []*armcompute.Image{
				{
					Name:     to.Ptr("myImage"),
					Type:     to.Ptr("Microsoft.Compute/images"),
					ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/images/myImage"),
					Location: to.Ptr("West US"),
					Properties: &armcompute.ImageProperties{
						ProvisioningState: to.Ptr("Succeeded"),
						StorageProfile: &armcompute.ImageStorageProfile{
							DataDisks: []*armcompute.ImageDataDisk{
								{
									BlobURI: to.Ptr("https://mystorageaccount.blob.core.windows.net/dataimages/dataimage.vhd"),
									ManagedDisk: &armcompute.SubResource{
										ID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk2"),
									},
									Snapshot: &armcompute.SubResource{
										ID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot2"),
									},
									StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
									Lun:                to.Ptr[int32](1),
								}},
							OSDisk: &armcompute.ImageOSDisk{
								BlobURI: to.Ptr("https://mystorageaccount.blob.core.windows.net/osimages/osimage.vhd"),
								ManagedDisk: &armcompute.SubResource{
									ID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk1"),
								},
								Snapshot: &armcompute.SubResource{
									ID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot1"),
								},
								StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
								OSState:            to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
								OSType:             to.Ptr(armcompute.OperatingSystemTypesWindows),
							},
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ImageListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ImageListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/ListImagesInAResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestImages_List(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/ListImagesInASubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all virtual machine images in a subscription."},
	})
	client, err := armcompute.NewImagesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := client.NewListPager(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/ListImagesInASubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcompute.ImageListResult{
			Value: []*armcompute.Image{
				{
					Name:     to.Ptr("myImage"),
					Type:     to.Ptr("Microsoft.Compute/images"),
					ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/images/myImage"),
					Location: to.Ptr("West US"),
					Properties: &armcompute.ImageProperties{
						ProvisioningState: to.Ptr("Succeeded"),
						StorageProfile: &armcompute.ImageStorageProfile{
							DataDisks: []*armcompute.ImageDataDisk{
								{
									BlobURI: to.Ptr("https://mystorageaccount.blob.core.windows.net/dataimages/dataimage.vhd"),
									ManagedDisk: &armcompute.SubResource{
										ID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk2"),
									},
									Snapshot: &armcompute.SubResource{
										ID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot2"),
									},
									StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
									Lun:                to.Ptr[int32](1),
								}},
							OSDisk: &armcompute.ImageOSDisk{
								BlobURI: to.Ptr("https://mystorageaccount.blob.core.windows.net/osimages/osimage.vhd"),
								ManagedDisk: &armcompute.SubResource{
									ID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk1"),
								},
								Snapshot: &armcompute.SubResource{
									ID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot1"),
								},
								StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
								OSState:            to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
								OSType:             to.Ptr(armcompute.OperatingSystemTypesWindows),
							},
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ImageListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ImageListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/ListImagesInASubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRestorePointCollections_CreateOrUpdate(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateOrUpdateARestorePointCollectionForCrossRegionCopy.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a restore point collection for cross region copy."},
	})
	client, err := armcompute.NewRestorePointCollectionsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := client.CreateOrUpdate(ctx,
		"myResourceGroup",
		"myRpc",
		armcompute.RestorePointCollection{
			Location: to.Ptr("norwayeast"),
			Tags: map[string]*string{
				"myTag1": to.Ptr("tagValue1"),
			},
			Properties: &armcompute.RestorePointCollectionProperties{
				Source: &armcompute.RestorePointCollectionSourceProperties{
					ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/restorePointCollections/sourceRpcName"),
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateOrUpdateARestorePointCollectionForCrossRegionCopy.json: %v", err)
	}
	// Response check
	exampleRes := armcompute.RestorePointCollection{
		Name:     to.Ptr("myRpc"),
		Type:     to.Ptr("Microsoft.Compute/restorePointCollections"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/restorePointCollections/myRpc"),
		Location: to.Ptr("norwayeast"),
		Tags: map[string]*string{
			"myTag1": to.Ptr("tagValue1"),
		},
		Properties: &armcompute.RestorePointCollectionProperties{
			ProvisioningState:        to.Ptr("Succeeded"),
			RestorePointCollectionID: to.Ptr("638f052b-a7c2-450c-89e7-6a3b8f1d6a7c"),
			Source: &armcompute.RestorePointCollectionSourceProperties{
				ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
				Location: to.Ptr("eastus"),
			},
		},
	}
	if !reflect.DeepEqual(exampleRes, res.RestorePointCollection) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.RestorePointCollection)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateOrUpdateARestorePointCollectionForCrossRegionCopy.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateOrUpdateARestorePointCollection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a restore point collection."},
	})
	client, err = armcompute.NewRestorePointCollectionsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err = client.CreateOrUpdate(ctx,
		"myResourceGroup",
		"myRpc",
		armcompute.RestorePointCollection{
			Location: to.Ptr("norwayeast"),
			Tags: map[string]*string{
				"myTag1": to.Ptr("tagValue1"),
			},
			Properties: &armcompute.RestorePointCollectionProperties{
				Source: &armcompute.RestorePointCollectionSourceProperties{
					ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateOrUpdateARestorePointCollection.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.RestorePointCollection{
		Name:     to.Ptr("myRpc"),
		Type:     to.Ptr("Microsoft.Compute/restorePointCollections"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/restorePointCollections/myRpc"),
		Location: to.Ptr("norwayeast"),
		Tags: map[string]*string{
			"myTag1": to.Ptr("tagValue1"),
		},
		Properties: &armcompute.RestorePointCollectionProperties{
			ProvisioningState:        to.Ptr("Succeeded"),
			RestorePointCollectionID: to.Ptr("638f052b-a7c2-450c-89e7-6a3b8f1d6a7c"),
			Source: &armcompute.RestorePointCollectionSourceProperties{
				ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
				Location: to.Ptr("eastus"),
			},
		},
	}
	if !reflect.DeepEqual(exampleRes, res.RestorePointCollection) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.RestorePointCollection)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateOrUpdateARestorePointCollection.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestRestorePointCollections_Update(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/RestorePointCollections_Update_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RestorePointCollections_Update_MaximumSet_Gen"},
	})
	client, err := armcompute.NewRestorePointCollectionsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := client.Update(ctx,
		"rgcompute",
		"aaaaaaaaaaaaaaaaaaaa",
		armcompute.RestorePointCollectionUpdate{
			Tags: map[string]*string{
				"key8536": to.Ptr("aaaaaaaaaaaaaaaaaaa"),
			},
			Properties: &armcompute.RestorePointCollectionProperties{
				Source: &armcompute.RestorePointCollectionSourceProperties{
					ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/RestorePointCollections_Update_MaximumSet_Gen.json: %v", err)
	}
	// Response check
	exampleRes := armcompute.RestorePointCollection{
		Name:     to.Ptr("myRpc"),
		Type:     to.Ptr("Microsoft.Compute/restorePointCollections"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/restorePointCollections/myRpc"),
		Location: to.Ptr("norwayeast"),
		Tags:     map[string]*string{},
		Properties: &armcompute.RestorePointCollectionProperties{
			ProvisioningState:        to.Ptr("Succeeded"),
			RestorePointCollectionID: to.Ptr("638f052b-a7c2-450c-89e7-6a3b8f1d6a7c"),
			RestorePoints: []*armcompute.RestorePoint{
				{
					Name: to.Ptr("aaaaaaaaaaaaaaaaaa"),
					Type: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaa"),
					ID:   to.Ptr("aaaaaaaaaaa"),
					Properties: &armcompute.RestorePointProperties{
						ConsistencyMode: to.Ptr(armcompute.ConsistencyModeTypesCrashConsistent),
						ExcludeDisks: []*armcompute.APIEntityReference{
							{
								ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/restorePointCollections/rpcName/restorePoints/restorePointName/diskRestorePoints/testingexcludedisk_OsDisk_1_74cdaedcea50483d9833c96adefa100f_22b4bdfe-6c54-4f72-84d8-85d8860f0c57"),
							}},
						ProvisioningState: to.Ptr("Succeeded"),
						SourceMetadata: &armcompute.RestorePointSourceMetadata{
							DiagnosticsProfile: &armcompute.DiagnosticsProfile{
								BootDiagnostics: &armcompute.BootDiagnostics{
									Enabled:    to.Ptr(true),
									StorageURI: to.Ptr("aaaaaaaaaaaaaaaaaaa"),
								},
							},
							HardwareProfile: &armcompute.HardwareProfile{
								VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardB1S),
								VMSizeProperties: &armcompute.VMSizeProperties{
									VCPUsAvailable: to.Ptr[int32](9),
									VCPUsPerCore:   to.Ptr[int32](12),
								},
							},
							LicenseType: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaa"),
							Location:    to.Ptr("westus"),
							OSProfile: &armcompute.OSProfile{
								AdminPassword:            to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaa"),
								AdminUsername:            to.Ptr("admin"),
								AllowExtensionOperations: to.Ptr(true),
								ComputerName:             to.Ptr("computerName"),
								CustomData:               to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaa"),
								LinuxConfiguration: &armcompute.LinuxConfiguration{
									DisablePasswordAuthentication: to.Ptr(true),
									PatchSettings: &armcompute.LinuxPatchSettings{
										AssessmentMode: to.Ptr(armcompute.LinuxPatchAssessmentModeImageDefault),
										PatchMode:      to.Ptr(armcompute.LinuxVMGuestPatchModeImageDefault),
									},
									ProvisionVMAgent: to.Ptr(true),
									SSH: &armcompute.SSHConfiguration{
										PublicKeys: []*armcompute.SSHPublicKey{
											{
												Path:    to.Ptr("aaa"),
												KeyData: to.Ptr("aaaaaa"),
											}},
									},
								},
								RequireGuestProvisionSignal: to.Ptr(true),
								Secrets: []*armcompute.VaultSecretGroup{
									{
										SourceVault: &armcompute.SubResource{
											ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
										},
										VaultCertificates: []*armcompute.VaultCertificate{
											{
												CertificateStore: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaa"),
												CertificateURL:   to.Ptr("aaaaaaa"),
											}},
									}},
								WindowsConfiguration: &armcompute.WindowsConfiguration{
									AdditionalUnattendContent: []*armcompute.AdditionalUnattendContent{
										{
											ComponentName: to.Ptr("Microsoft-Windows-Shell-Setup"),
											Content:       to.Ptr("aaaaaaaaaaaaaaaaaaaa"),
											PassName:      to.Ptr("OobeSystem"),
											SettingName:   to.Ptr(armcompute.SettingNamesAutoLogon),
										}},
									EnableAutomaticUpdates: to.Ptr(true),
									PatchSettings: &armcompute.PatchSettings{
										AssessmentMode:    to.Ptr(armcompute.WindowsPatchAssessmentModeImageDefault),
										EnableHotpatching: to.Ptr(true),
										PatchMode:         to.Ptr(armcompute.WindowsVMGuestPatchModeManual),
									},
									ProvisionVMAgent: to.Ptr(true),
									TimeZone:         to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
									WinRM: &armcompute.WinRMConfiguration{
										Listeners: []*armcompute.WinRMListener{
											{
												CertificateURL: to.Ptr("aaaaaaaaaaaaaaaaaaaaaa"),
												Protocol:       to.Ptr(armcompute.ProtocolTypesHTTP),
											}},
									},
								},
							},
							SecurityProfile: &armcompute.SecurityProfile{
								EncryptionAtHost: to.Ptr(true),
								SecurityType:     to.Ptr(armcompute.SecurityTypesTrustedLaunch),
								UefiSettings: &armcompute.UefiSettings{
									SecureBootEnabled: to.Ptr(true),
									VTpmEnabled:       to.Ptr(true),
								},
							},
							StorageProfile: &armcompute.RestorePointSourceVMStorageProfile{
								DataDisks: []*armcompute.RestorePointSourceVMDataDisk{
									{
										Name:    to.Ptr("testingexcludedisk_DataDisk_1"),
										Caching: to.Ptr(armcompute.CachingTypesNone),
										DiskRestorePoint: &armcompute.APIEntityReference{
											ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/restorePointCollections/rpcName/restorePoints/restorePointName/diskRestorePoints/testingexcludedisk_DataDisk_1_68785190-1acb-4d5e-a8ae-705b45f3dca5"),
										},
										DiskSizeGB: to.Ptr[int32](24),
										Lun:        to.Ptr[int32](1),
										ManagedDisk: &armcompute.ManagedDiskParameters{
											ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/testingexcludedisk_DataDisk_1"),
											DiskEncryptionSet: &armcompute.DiskEncryptionSetParameters{
												ID: to.Ptr("aaaaaaaaaaaa"),
											},
											StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
										},
									}},
								OSDisk: &armcompute.RestorePointSourceVMOSDisk{
									Name:    to.Ptr("testingexcludedisk_OsDisk_1_74cdaedcea50483d9833c96adefa100f"),
									Caching: to.Ptr(armcompute.CachingTypesReadWrite),
									DiskRestorePoint: &armcompute.APIEntityReference{
										ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/restorePointCollections/rpcName/restorePoints/restorePointName/diskRestorePoints/testingexcludedisk_OsDisk_1_74cdaedcea50483d9833c96adefa100f_22b4bdfe-6c54-4f72-84d8-85d8860f0c57"),
									},
									DiskSizeGB: to.Ptr[int32](3),
									EncryptionSettings: &armcompute.DiskEncryptionSettings{
										DiskEncryptionKey: &armcompute.KeyVaultSecretReference{
											SecretURL: to.Ptr("aaaaaaaa"),
											SourceVault: &armcompute.SubResource{
												ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
											},
										},
										Enabled: to.Ptr(true),
										KeyEncryptionKey: &armcompute.KeyVaultKeyReference{
											KeyURL: to.Ptr("aaaaaaaaaaaaaa"),
											SourceVault: &armcompute.SubResource{
												ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
											},
										},
									},
									ManagedDisk: &armcompute.ManagedDiskParameters{
										ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/testingexcludedisk_OsDisk_1_74cdaedcea50483d9833c96adefa100f"),
										DiskEncryptionSet: &armcompute.DiskEncryptionSetParameters{
											ID: to.Ptr("aaaaaaaaaaaa"),
										},
										StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
									},
									OSType: to.Ptr(armcompute.OperatingSystemTypeWindows),
								},
							},
							VMID: to.Ptr("76d6541e-80bd-4dc1-932b-3cae4cfb80e7"),
						},
						TimeCreated: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.593Z"); return t }()),
					},
				}},
			Source: &armcompute.RestorePointCollectionSourceProperties{
				ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
				Location: to.Ptr("eastus"),
			},
		},
	}
	if !reflect.DeepEqual(exampleRes, res.RestorePointCollection) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.RestorePointCollection)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/RestorePointCollections_Update_MaximumSet_Gen.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/RestorePointCollections_Update_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RestorePointCollections_Update_MinimumSet_Gen"},
	})
	client, err = armcompute.NewRestorePointCollectionsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err = client.Update(ctx,
		"rgcompute",
		"aaaaaaaaaaaaaaaaaa",
		armcompute.RestorePointCollectionUpdate{},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/RestorePointCollections_Update_MinimumSet_Gen.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.RestorePointCollection{
		Location: to.Ptr("norwayeast"),
	}
	if !reflect.DeepEqual(exampleRes, res.RestorePointCollection) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.RestorePointCollection)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/RestorePointCollections_Update_MinimumSet_Gen.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestRestorePointCollections_Delete(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/RestorePointCollections_Delete_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RestorePointCollections_Delete_MaximumSet_Gen"},
	})
	client, err := armcompute.NewRestorePointCollectionsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginDelete(ctx,
		"rgcompute",
		"aaaaaaaaaaaaaaaaa",
		&armcompute.RestorePointCollectionsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/RestorePointCollections_Delete_MaximumSet_Gen.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/RestorePointCollections_Delete_MaximumSet_Gen.json: %v", err)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/RestorePointCollections_Delete_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RestorePointCollections_Delete_MinimumSet_Gen"},
	})
	client, err = armcompute.NewRestorePointCollectionsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginDelete(ctx,
		"rgcompute",
		"aaaaaaaaaaaaaaaaaaaa",
		&armcompute.RestorePointCollectionsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/RestorePointCollections_Delete_MinimumSet_Gen.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/RestorePointCollections_Delete_MinimumSet_Gen.json: %v", err)
	}
}

func TestRestorePointCollections_Get(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/GetRestorePointCollection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a restore point collection (but not the restore points contained in the restore point collection)"},
	})
	client, err := armcompute.NewRestorePointCollectionsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myRpc",
		&armcompute.RestorePointCollectionsClientGetOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/GetRestorePointCollection.json: %v", err)
	}
	// Response check
	exampleRes := armcompute.RestorePointCollection{
		Name:     to.Ptr("myRpc"),
		Type:     to.Ptr("Microsoft.Compute/restorePointCollections"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/restorePointCollections/myRpc"),
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"myTag1": to.Ptr("tagValue1"),
		},
		Properties: &armcompute.RestorePointCollectionProperties{
			ProvisioningState:        to.Ptr("Succeeded"),
			RestorePointCollectionID: to.Ptr("59f04a5d-f783-4200-a1bd-d3f464e8c4b4"),
			Source: &armcompute.RestorePointCollectionSourceProperties{
				ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/restorePointCollections/myRpc"),
				Location: to.Ptr("eastus"),
			},
		},
	}
	if !reflect.DeepEqual(exampleRes, res.RestorePointCollection) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.RestorePointCollection)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/GetRestorePointCollection.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/GetRestorePointCollectionWithContainedRestorePoints.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a restore point collection, including the restore points contained in the restore point collection"},
	})
	client, err = armcompute.NewRestorePointCollectionsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err = client.Get(ctx,
		"myResourceGroup",
		"rpcName",
		&armcompute.RestorePointCollectionsClientGetOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/GetRestorePointCollectionWithContainedRestorePoints.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.RestorePointCollection{
		Name:     to.Ptr("rpcName"),
		Type:     to.Ptr("Microsoft.Compute/restorePointCollections"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/restorePointCollections/rpcName"),
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"myTag1": to.Ptr("tagValue1"),
		},
		Properties: &armcompute.RestorePointCollectionProperties{
			ProvisioningState:        to.Ptr("Succeeded"),
			RestorePointCollectionID: to.Ptr("59f04a5d-f783-4200-a1bd-d3f464e8c4b4"),
			RestorePoints: []*armcompute.RestorePoint{
				{
					Name: to.Ptr("restorePointName"),
					ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/restorePointCollections/rpcName/restorePoints/restorePointName"),
					Properties: &armcompute.RestorePointProperties{
						ConsistencyMode: to.Ptr(armcompute.ConsistencyModeTypesApplicationConsistent),
						ExcludeDisks: []*armcompute.APIEntityReference{
							{
								ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/vm8768_disk2_fe6ffde4f69b491ca33fb984d5bcd89f"),
							}},
						ProvisioningState: to.Ptr("Succeeded"),
						SourceMetadata: &armcompute.RestorePointSourceMetadata{
							DiagnosticsProfile: &armcompute.DiagnosticsProfile{
								BootDiagnostics: &armcompute.BootDiagnostics{
									Enabled: to.Ptr(true),
								},
							},
							HardwareProfile: &armcompute.HardwareProfile{
								VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardB1S),
							},
							Location: to.Ptr("westus"),
							OSProfile: &armcompute.OSProfile{
								AdminUsername:               to.Ptr("admin"),
								AllowExtensionOperations:    to.Ptr(true),
								ComputerName:                to.Ptr("computerName"),
								RequireGuestProvisionSignal: to.Ptr(true),
								Secrets:                     []*armcompute.VaultSecretGroup{},
								WindowsConfiguration: &armcompute.WindowsConfiguration{
									EnableAutomaticUpdates: to.Ptr(true),
									ProvisionVMAgent:       to.Ptr(true),
								},
							},
							StorageProfile: &armcompute.RestorePointSourceVMStorageProfile{
								DataDisks: []*armcompute.RestorePointSourceVMDataDisk{
									{
										Name:    to.Ptr("testingexcludedisk_DataDisk_1"),
										Caching: to.Ptr(armcompute.CachingTypesNone),
										DiskRestorePoint: &armcompute.APIEntityReference{
											ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/restorePointCollections/rpcName/restorePoints/restorePointName/diskRestorePoints/testingexcludedisk_DataDisk_1_68785190-1acb-4d5e-a8ae-705b45f3dca5"),
										},
										Lun: to.Ptr[int32](1),
										ManagedDisk: &armcompute.ManagedDiskParameters{
											ID:                 to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/testingexcludedisk_DataDisk_1"),
											StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
										},
									}},
								OSDisk: &armcompute.RestorePointSourceVMOSDisk{
									Name:    to.Ptr("testingexcludedisk_OsDisk_1_74cdaedcea50483d9833c96adefa100f"),
									Caching: to.Ptr(armcompute.CachingTypesReadWrite),
									DiskRestorePoint: &armcompute.APIEntityReference{
										ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/restorePointCollections/rpcName/restorePoints/restorePointName/diskRestorePoints/testingexcludedisk_OsDisk_1_74cdaedcea50483d9833c96adefa100f_22b4bdfe-6c54-4f72-84d8-85d8860f0c57"),
									},
									ManagedDisk: &armcompute.ManagedDiskParameters{
										ID:                 to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/testingexcludedisk_OsDisk_1_74cdaedcea50483d9833c96adefa100f"),
										StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
									},
									OSType: to.Ptr(armcompute.OperatingSystemTypeWindows),
								},
							},
							VMID: to.Ptr("76d6541e-80bd-4dc1-932b-3cae4cfb80e7"),
						},
						TimeCreated: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-01-27T20:35:05.8401519+00:00"); return t }()),
					},
				}},
			Source: &armcompute.RestorePointCollectionSourceProperties{
				ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
				Location: to.Ptr("eastus"),
			},
		},
	}
	if !reflect.DeepEqual(exampleRes, res.RestorePointCollection) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.RestorePointCollection)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/GetRestorePointCollectionWithContainedRestorePoints.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestRestorePointCollections_List(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/GetRestorePointCollectionsInAResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets the list of restore point collections in a resource group."},
	})
	client, err := armcompute.NewRestorePointCollectionsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := client.NewListPager("myResourceGroup",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/GetRestorePointCollectionsInAResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcompute.RestorePointCollectionListResult{
			Value: []*armcompute.RestorePointCollection{
				{
					Name:     to.Ptr("restorePointCollection1"),
					Type:     to.Ptr("Microsoft.Compute/restorePointCollections"),
					ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/restorePointCollections/restorePointCollection1"),
					Location: to.Ptr("westus"),
					Tags: map[string]*string{
						"myTag1": to.Ptr("tagValue1"),
					},
					Properties: &armcompute.RestorePointCollectionProperties{
						ProvisioningState:        to.Ptr("Succeeded"),
						RestorePointCollectionID: to.Ptr("59f04a5d-f783-4200-a1bd-d3f464e8c4b4"),
						Source: &armcompute.RestorePointCollectionSourceProperties{
							ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/restorePointCollections/restorePointCollection1"),
							Location: to.Ptr("westus"),
						},
					},
				},
				{
					Name:     to.Ptr("restorePointCollection2"),
					Type:     to.Ptr("Microsoft.Compute/restorePointCollections"),
					ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/restorePointCollections/restorePointCollection2"),
					Location: to.Ptr("westus"),
					Tags: map[string]*string{
						"myTag1": to.Ptr("tagValue1"),
					},
					Properties: &armcompute.RestorePointCollectionProperties{
						ProvisioningState:        to.Ptr("Succeeded"),
						RestorePointCollectionID: to.Ptr("2875c590-e337-4102-9668-4f5b7e3f98a4"),
						Source: &armcompute.RestorePointCollectionSourceProperties{
							ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/restorePointCollections/restorePointCollection2"),
							Location: to.Ptr("westus"),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.RestorePointCollectionListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.RestorePointCollectionListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/GetRestorePointCollectionsInAResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRestorePointCollections_ListAll(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/GetRestorePointCollectionsInASubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets the list of restore point collections in a subscription"},
	})
	client, err := armcompute.NewRestorePointCollectionsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := client.NewListAllPager(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/GetRestorePointCollectionsInASubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcompute.RestorePointCollectionListResult{
			Value: []*armcompute.RestorePointCollection{
				{
					Name:     to.Ptr("restorePointCollection1"),
					Type:     to.Ptr("Microsoft.Compute/restorePointCollections"),
					ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/resourceGroup1/providers/Microsoft.Compute/restorePointCollections/restorePointCollection1"),
					Location: to.Ptr("westus"),
					Tags: map[string]*string{
						"myTag1": to.Ptr("tagValue1"),
					},
					Properties: &armcompute.RestorePointCollectionProperties{
						ProvisioningState:        to.Ptr("Succeeded"),
						RestorePointCollectionID: to.Ptr("59f04a5d-f783-4200-a1bd-d3f464e8c4b4"),
						Source: &armcompute.RestorePointCollectionSourceProperties{
							ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/VM_Test"),
							Location: to.Ptr("westus"),
						},
					},
				},
				{
					Name:     to.Ptr("restorePointCollection2"),
					Type:     to.Ptr("Microsoft.Compute/restorePointCollections"),
					ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/resourceGroup2/providers/Microsoft.Compute/restorePointCollections/restorePointCollection2"),
					Location: to.Ptr("westus"),
					Tags: map[string]*string{
						"myTag1": to.Ptr("tagValue1"),
					},
					Properties: &armcompute.RestorePointCollectionProperties{
						ProvisioningState:        to.Ptr("Succeeded"),
						RestorePointCollectionID: to.Ptr("2875c590-e337-4102-9668-4f5b7e3f98a4"),
						Source: &armcompute.RestorePointCollectionSourceProperties{
							ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/VM_Prod"),
							Location: to.Ptr("westus"),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.RestorePointCollectionListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.RestorePointCollectionListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/GetRestorePointCollectionsInASubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRestorePoints_Create(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CopyRestorePointBetweenRegions.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Copy a restore point to a different region"},
	})
	client, err := armcompute.NewRestorePointsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginCreate(ctx,
		"myResourceGroup",
		"rpcName",
		"rpName",
		armcompute.RestorePoint{
			Properties: &armcompute.RestorePointProperties{
				SourceRestorePoint: &armcompute.APIEntityReference{
					ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/restorePointCollections/sourceRpcName/restorePoints/sourceRpName"),
				},
			},
		},
		&armcompute.RestorePointsClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CopyRestorePointBetweenRegions.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CopyRestorePointBetweenRegions.json: %v", err)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateARestorePoint.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a restore point"},
	})
	client, err = armcompute.NewRestorePointsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginCreate(ctx,
		"myResourceGroup",
		"rpcName",
		"rpName",
		armcompute.RestorePoint{
			Properties: &armcompute.RestorePointProperties{
				ExcludeDisks: []*armcompute.APIEntityReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/disk123"),
					}},
			},
		},
		&armcompute.RestorePointsClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateARestorePoint.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateARestorePoint.json: %v", err)
	}
}

func TestRestorePoints_Delete(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/RestorePoints_Delete_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RestorePoints_Delete_MaximumSet_Gen"},
	})
	client, err := armcompute.NewRestorePointsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginDelete(ctx,
		"rgcompute",
		"aaaaaaaaaaaaaaaaaaaaaa",
		"a",
		&armcompute.RestorePointsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/RestorePoints_Delete_MaximumSet_Gen.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/RestorePoints_Delete_MaximumSet_Gen.json: %v", err)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/RestorePoints_Delete_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RestorePoints_Delete_MinimumSet_Gen"},
	})
	client, err = armcompute.NewRestorePointsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginDelete(ctx,
		"rgcompute",
		"aaaaaaaaaaaaaaaaa",
		"aaaaaaaaaaaaaaaaaaaaaaaa",
		&armcompute.RestorePointsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/RestorePoints_Delete_MinimumSet_Gen.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/RestorePoints_Delete_MinimumSet_Gen.json: %v", err)
	}
}

func TestRestorePoints_Get(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/GetRestorePoint.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a restore point"},
	})
	client, err := armcompute.NewRestorePointsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := client.Get(ctx,
		"myResourceGroup",
		"rpcName",
		"rpName",
		&armcompute.RestorePointsClientGetOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/GetRestorePoint.json: %v", err)
	}
	// Response check
	exampleRes := armcompute.RestorePoint{
		Name: to.Ptr("rpName"),
		ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/restorePointCollections/rpcName/restorePoints/rpName"),
		Properties: &armcompute.RestorePointProperties{
			ConsistencyMode: to.Ptr(armcompute.ConsistencyModeTypesApplicationConsistent),
			ExcludeDisks: []*armcompute.APIEntityReference{
				{
					ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/vm8768_disk2_fe6ffde4f69b491ca33fb984d5bcd89f"),
				}},
			ProvisioningState: to.Ptr("Succeeded"),
			SourceMetadata: &armcompute.RestorePointSourceMetadata{
				DiagnosticsProfile: &armcompute.DiagnosticsProfile{
					BootDiagnostics: &armcompute.BootDiagnostics{
						Enabled: to.Ptr(true),
					},
				},
				HardwareProfile: &armcompute.HardwareProfile{
					VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardB1S),
				},
				Location: to.Ptr("westus"),
				OSProfile: &armcompute.OSProfile{
					AdminUsername:               to.Ptr("admin"),
					AllowExtensionOperations:    to.Ptr(true),
					ComputerName:                to.Ptr("computerName"),
					RequireGuestProvisionSignal: to.Ptr(true),
					Secrets:                     []*armcompute.VaultSecretGroup{},
					WindowsConfiguration: &armcompute.WindowsConfiguration{
						EnableAutomaticUpdates: to.Ptr(true),
						ProvisionVMAgent:       to.Ptr(true),
					},
				},
				StorageProfile: &armcompute.RestorePointSourceVMStorageProfile{
					DataDisks: []*armcompute.RestorePointSourceVMDataDisk{
						{
							Name:    to.Ptr("testingexcludedisk_DataDisk_1"),
							Caching: to.Ptr(armcompute.CachingTypesNone),
							DiskRestorePoint: &armcompute.APIEntityReference{
								ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/userdata/providers/Microsoft.Compute/restorePointCollections/mynewrpc/restorePoints/restorepointtwo/diskRestorePoints/testingexcludedisk_DataDisk_1_68785190-1acb-4d5e-a8ae-705b45f3dca5"),
							},
							Lun: to.Ptr[int32](1),
							ManagedDisk: &armcompute.ManagedDiskParameters{
								ID:                 to.Ptr("/subscriptions/{subscription-id}/resourceGroups/userdata/providers/Microsoft.Compute/disks/testingexcludedisk_DataDisk_1"),
								StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
							},
						}},
					OSDisk: &armcompute.RestorePointSourceVMOSDisk{
						Name:    to.Ptr("testingexcludedisk_OsDisk_1_74cdaedcea50483d9833c96adefa100f"),
						Caching: to.Ptr(armcompute.CachingTypesReadWrite),
						DiskRestorePoint: &armcompute.APIEntityReference{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/restorePointCollections/rpcName/restorePoints/rpName/diskRestorePoints/testingexcludedisk_OsDisk_1_74cdaedcea50483d9833c96adefa100f_22b4bdfe-6c54-4f72-84d8-85d8860f0c57"),
						},
						ManagedDisk: &armcompute.ManagedDiskParameters{
							ID:                 to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/testingexcludedisk_OsDisk_1_74cdaedcea50483d9833c96adefa100f"),
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
						OSType: to.Ptr(armcompute.OperatingSystemTypeWindows),
					},
				},
				VMID: to.Ptr("76d6541e-80bd-4dc1-932b-3cae4cfb80e7"),
			},
			TimeCreated: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-01-27T20:35:05.8401519+00:00"); return t }()),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.RestorePoint) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.RestorePoint)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/GetRestorePoint.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/GetRestorePointWithInstanceView.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get restore point with instance view"},
	})
	client, err = armcompute.NewRestorePointsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err = client.Get(ctx,
		"myResourceGroup",
		"rpcName",
		"rpName",
		&armcompute.RestorePointsClientGetOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/GetRestorePointWithInstanceView.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.RestorePoint{
		Name: to.Ptr("rpName"),
		ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/restorePointCollections/rpcName/restorePoints/rpName"),
		Properties: &armcompute.RestorePointProperties{
			ConsistencyMode: to.Ptr(armcompute.ConsistencyModeTypesApplicationConsistent),
			ExcludeDisks: []*armcompute.APIEntityReference{
				{
					ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/vm8768_disk2_fe6ffde4f69b491ca33fb984d5bcd89f"),
				}},
			InstanceView: &armcompute.RestorePointInstanceView{
				DiskRestorePoints: []*armcompute.DiskRestorePointInstanceView{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/restorePointCollections/rpcName/restorePoints/rpName/diskRestorePoints/testingexcludedisk_OsDisk_1_74cdaedcea50483d9833c96adefa100f_22b4bdfe-6c54-4f72-84d8-85d8860f0c57"),
						ReplicationStatus: map[string]interface{}{
							"completionPercent": float64(100),
							"status": map[string]interface{}{
								"code":          "ReplicationState/succeeded",
								"displayStatus": "Succeeded",
								"level":         "Info",
							},
						},
					},
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/userdata/providers/Microsoft.Compute/restorePointCollections/mynewrpc/restorePoints/restorepointtwo/diskRestorePoints/testingexcludedisk_DataDisk_1_68785190-1acb-4d5e-a8ae-705b45f3dca5"),
						ReplicationStatus: map[string]interface{}{
							"completionPercent": float64(100),
							"status": map[string]interface{}{
								"code":          "ReplicationState/succeeded",
								"displayStatus": "Succeeded",
								"level":         "Info",
							},
						},
					}},
				Statuses: []*armcompute.InstanceViewStatus{
					{
						Code:          to.Ptr("ReplicationState/succeeded"),
						DisplayStatus: to.Ptr("Succeeded"),
						Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
					}},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			SourceMetadata: &armcompute.RestorePointSourceMetadata{
				DiagnosticsProfile: &armcompute.DiagnosticsProfile{
					BootDiagnostics: &armcompute.BootDiagnostics{
						Enabled: to.Ptr(true),
					},
				},
				HardwareProfile: &armcompute.HardwareProfile{
					VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesStandardB1S),
				},
				Location: to.Ptr("westus"),
				OSProfile: &armcompute.OSProfile{
					AdminUsername:               to.Ptr("admin"),
					AllowExtensionOperations:    to.Ptr(true),
					ComputerName:                to.Ptr("computerName"),
					RequireGuestProvisionSignal: to.Ptr(true),
					Secrets:                     []*armcompute.VaultSecretGroup{},
					WindowsConfiguration: &armcompute.WindowsConfiguration{
						EnableAutomaticUpdates: to.Ptr(true),
						ProvisionVMAgent:       to.Ptr(true),
					},
				},
				StorageProfile: &armcompute.RestorePointSourceVMStorageProfile{
					DataDisks: []*armcompute.RestorePointSourceVMDataDisk{
						{
							Name:    to.Ptr("testingexcludedisk_DataDisk_1"),
							Caching: to.Ptr(armcompute.CachingTypesNone),
							DiskRestorePoint: &armcompute.APIEntityReference{
								ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/userdata/providers/Microsoft.Compute/restorePointCollections/mynewrpc/restorePoints/restorepointtwo/diskRestorePoints/testingexcludedisk_DataDisk_1_68785190-1acb-4d5e-a8ae-705b45f3dca5"),
							},
							Lun: to.Ptr[int32](1),
							ManagedDisk: &armcompute.ManagedDiskParameters{
								ID:                 to.Ptr("/subscriptions/{subscription-id}/resourceGroups/userdata/providers/Microsoft.Compute/disks/testingexcludedisk_DataDisk_1"),
								StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
							},
						}},
					OSDisk: &armcompute.RestorePointSourceVMOSDisk{
						Name:    to.Ptr("testingexcludedisk_OsDisk_1_74cdaedcea50483d9833c96adefa100f"),
						Caching: to.Ptr(armcompute.CachingTypesReadWrite),
						DiskRestorePoint: &armcompute.APIEntityReference{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/restorePointCollections/rpcName/restorePoints/rpName/diskRestorePoints/testingexcludedisk_OsDisk_1_74cdaedcea50483d9833c96adefa100f_22b4bdfe-6c54-4f72-84d8-85d8860f0c57"),
						},
						ManagedDisk: &armcompute.ManagedDiskParameters{
							ID:                 to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/testingexcludedisk_OsDisk_1_74cdaedcea50483d9833c96adefa100f"),
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
						OSType: to.Ptr(armcompute.OperatingSystemTypeWindows),
					},
				},
				VMID: to.Ptr("76d6541e-80bd-4dc1-932b-3cae4cfb80e7"),
			},
			TimeCreated: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-01-27T20:35:05.8401519+00:00"); return t }()),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.RestorePoint) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.RestorePoint)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/GetRestorePointWithInstanceView.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestCapacityReservationGroups_CreateOrUpdate(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateOrUpdateACapacityReservationGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a capacity reservation group."},
	})
	client, err := armcompute.NewCapacityReservationGroupsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := client.CreateOrUpdate(ctx,
		"myResourceGroup",
		"myCapacityReservationGroup",
		armcompute.CapacityReservationGroup{
			Location: to.Ptr("westus"),
			Tags: map[string]*string{
				"department": to.Ptr("finance"),
			},
			Zones: []*string{
				to.Ptr("1"),
				to.Ptr("2")},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateOrUpdateACapacityReservationGroup.json: %v", err)
	}
	// Response check
	exampleRes := armcompute.CapacityReservationGroup{
		Name:     to.Ptr("myCapacityReservationGroup"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/CapacityReservationGroups/myCapacityReservationGroup"),
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"department": to.Ptr("finance"),
			"owner":      to.Ptr("myCompany"),
		},
		Zones: []*string{
			to.Ptr("1"),
			to.Ptr("2")},
	}
	if !reflect.DeepEqual(exampleRes, res.CapacityReservationGroup) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.CapacityReservationGroup)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateOrUpdateACapacityReservationGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestCapacityReservationGroups_Update(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CapacityReservationGroups_Update_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CapacityReservationGroups_Update_MaximumSet_Gen"},
	})
	client, err := armcompute.NewCapacityReservationGroupsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := client.Update(ctx,
		"rgcompute",
		"aaaaaaaaaaaaaaaaaaaaaa",
		armcompute.CapacityReservationGroupUpdate{
			Tags: map[string]*string{
				"key5355": to.Ptr("aaa"),
			},
			Properties: &armcompute.CapacityReservationGroupProperties{
				InstanceView: &armcompute.CapacityReservationGroupInstanceView{},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CapacityReservationGroups_Update_MaximumSet_Gen.json: %v", err)
	}
	// Response check
	exampleRes := armcompute.CapacityReservationGroup{
		Name:     to.Ptr("myCapacityReservationGroup"),
		Type:     to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/CapacityReservationGroups/myCapacityReservationGroup"),
		Location: to.Ptr("westus"),
		Tags:     map[string]*string{},
		Properties: &armcompute.CapacityReservationGroupProperties{
			CapacityReservations: []*armcompute.SubResourceReadOnly{
				{
					ID: to.Ptr("aaaa"),
				}},
			InstanceView: &armcompute.CapacityReservationGroupInstanceView{
				CapacityReservations: []*armcompute.CapacityReservationInstanceViewWithName{
					{
						Statuses: []*armcompute.InstanceViewStatus{
							{
								Code:          to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
								DisplayStatus: to.Ptr("aaaaaa"),
								Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
								Message:       to.Ptr("a"),
								Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.522Z"); return t }()),
							}},
						UtilizationInfo: &armcompute.CapacityReservationUtilization{
							VirtualMachinesAllocated: []*armcompute.SubResourceReadOnly{
								{
									ID: to.Ptr("aaaa"),
								}},
						},
						Name: to.Ptr("aaaaaaaaaaaaaaaa"),
					}},
			},
			VirtualMachinesAssociated: []*armcompute.SubResourceReadOnly{
				{
					ID: to.Ptr("aaaa"),
				}},
		},
		Zones: []*string{
			to.Ptr("1"),
			to.Ptr("2")},
	}
	if !reflect.DeepEqual(exampleRes, res.CapacityReservationGroup) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.CapacityReservationGroup)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CapacityReservationGroups_Update_MaximumSet_Gen.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CapacityReservationGroups_Update_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CapacityReservationGroups_Update_MinimumSet_Gen"},
	})
	client, err = armcompute.NewCapacityReservationGroupsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err = client.Update(ctx,
		"rgcompute",
		"aaaaaaaaaaaaaaaaaaaaaa",
		armcompute.CapacityReservationGroupUpdate{},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CapacityReservationGroups_Update_MinimumSet_Gen.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.CapacityReservationGroup{
		Location: to.Ptr("westus"),
	}
	if !reflect.DeepEqual(exampleRes, res.CapacityReservationGroup) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.CapacityReservationGroup)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CapacityReservationGroups_Update_MinimumSet_Gen.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestCapacityReservationGroups_Delete(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CapacityReservationGroups_Delete_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CapacityReservationGroups_Delete_MaximumSet_Gen"},
	})
	client, err := armcompute.NewCapacityReservationGroupsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	_, err = client.Delete(ctx,
		"rgcompute",
		"a",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CapacityReservationGroups_Delete_MaximumSet_Gen.json: %v", err)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CapacityReservationGroups_Delete_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CapacityReservationGroups_Delete_MinimumSet_Gen"},
	})
	client, err = armcompute.NewCapacityReservationGroupsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	_, err = client.Delete(ctx,
		"rgcompute",
		"aaaaaaaaaaaaaaaaaaaaaaaaaa",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CapacityReservationGroups_Delete_MinimumSet_Gen.json: %v", err)
	}
}

func TestCapacityReservationGroups_Get(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/GetACapacityReservationGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a capacity reservation Group."},
	})
	client, err := armcompute.NewCapacityReservationGroupsClient("{subscriptionId}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myCapacityReservationGroup",
		&armcompute.CapacityReservationGroupsClientGetOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/GetACapacityReservationGroup.json: %v", err)
	}
	// Response check
	exampleRes := armcompute.CapacityReservationGroup{
		Name:     to.Ptr("myCapacityReservationGroup"),
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"{tagName}": to.Ptr("{tagValue}"),
		},
		Properties: &armcompute.CapacityReservationGroupProperties{
			CapacityReservations: []*armcompute.SubResourceReadOnly{
				{
					ID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/capacityReservationGroups/myCapacityReservationGroup/capacityReservations/myCapacityReservation1"),
				},
				{
					ID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/capacityReservationGroups/myCapacityReservationGroup/capacityReservations/myCapacityReservation2"),
				}},
			InstanceView: &armcompute.CapacityReservationGroupInstanceView{
				CapacityReservations: []*armcompute.CapacityReservationInstanceViewWithName{
					{
						Statuses: []*armcompute.InstanceViewStatus{
							{
								Code:          to.Ptr("ProvisioningState/succeeded"),
								DisplayStatus: to.Ptr("Provisioning succeeded"),
								Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
							}},
						UtilizationInfo: &armcompute.CapacityReservationUtilization{
							VirtualMachinesAllocated: []*armcompute.SubResourceReadOnly{
								{
									ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM1"),
								},
								{
									ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM2"),
								}},
						},
						Name: to.Ptr("myCapacityReservation1"),
					},
					{
						Statuses: []*armcompute.InstanceViewStatus{
							{
								Code:          to.Ptr("ProvisioningState/succeeded"),
								DisplayStatus: to.Ptr("Provisioning succeeded"),
								Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
							}},
						UtilizationInfo: &armcompute.CapacityReservationUtilization{
							VirtualMachinesAllocated: []*armcompute.SubResourceReadOnly{
								{
									ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM3"),
								},
								{
									ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM4"),
								}},
						},
						Name: to.Ptr("myCapacityReservation2"),
					}},
			},
		},
		Zones: []*string{
			to.Ptr("3"),
			to.Ptr("1")},
	}
	if !reflect.DeepEqual(exampleRes, res.CapacityReservationGroup) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.CapacityReservationGroup)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/GetACapacityReservationGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestCapacityReservationGroups_ListByResourceGroup(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/ListCapacityReservationGroupsInResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List capacity reservation groups in resource group."},
	})
	client, err := armcompute.NewCapacityReservationGroupsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := client.NewListByResourceGroupPager("myResourceGroup",
		&armcompute.CapacityReservationGroupsClientListByResourceGroupOptions{Expand: to.Ptr(armcompute.ExpandTypesForGetCapacityReservationGroupsVirtualMachinesRef)})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/ListCapacityReservationGroupsInResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcompute.CapacityReservationGroupListResult{
			Value: []*armcompute.CapacityReservationGroup{
				{
					Name:     to.Ptr("{capacityReservationGroupName}"),
					Type:     to.Ptr("Microsoft.Compute/CapacityReservationGroups"),
					ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/capacityReservationGroups/{capacityReservationGroupName}"),
					Location: to.Ptr("West US"),
					Properties: &armcompute.CapacityReservationGroupProperties{
						CapacityReservations: []*armcompute.SubResourceReadOnly{
							{
								ID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/capacityReservationGroups/myCapacityReservationGroup/capacityReservations/myCapacityReservation1"),
							},
							{
								ID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/capacityReservationGroups/myCapacityReservationGroup/capacityReservations/myCapacityReservation2"),
							}},
						VirtualMachinesAssociated: []*armcompute.SubResourceReadOnly{
							{
								ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM1"),
							},
							{
								ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM2"),
							}},
					},
				},
				{
					Name:     to.Ptr("{capacityReservationGroupName}"),
					Type:     to.Ptr("Microsoft.Compute/CapacityReservationGroups"),
					ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/capacityReservationGroups/{capacityReservationGroupName}"),
					Location: to.Ptr("West US"),
					Properties: &armcompute.CapacityReservationGroupProperties{
						CapacityReservations: []*armcompute.SubResourceReadOnly{
							{
								ID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/capacityReservationGroups/myCapacityReservationGroup/capacityReservations/myCapacityReservation3"),
							},
							{
								ID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/capacityReservationGroups/myCapacityReservationGroup/capacityReservations/myCapacityReservation4"),
							}},
						VirtualMachinesAssociated: []*armcompute.SubResourceReadOnly{
							{
								ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM3"),
							}},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.CapacityReservationGroupListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.CapacityReservationGroupListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/ListCapacityReservationGroupsInResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCapacityReservationGroups_ListBySubscription(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/ListCapacityReservationGroupsInSubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List capacity reservation groups in subscription."},
	})
	client, err := armcompute.NewCapacityReservationGroupsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := client.NewListBySubscriptionPager(&armcompute.CapacityReservationGroupsClientListBySubscriptionOptions{Expand: to.Ptr(armcompute.ExpandTypesForGetCapacityReservationGroupsVirtualMachinesRef)})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/ListCapacityReservationGroupsInSubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcompute.CapacityReservationGroupListResult{
			Value: []*armcompute.CapacityReservationGroup{
				{
					Name:     to.Ptr("{capacityReservationGroupName}"),
					Type:     to.Ptr("Microsoft.Compute/CapacityReservationGroups"),
					ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup1/providers/Microsoft.Compute/capacityReservationGroups/{capacityReservationGroupName}"),
					Location: to.Ptr("West US"),
					Properties: &armcompute.CapacityReservationGroupProperties{
						CapacityReservations: []*armcompute.SubResourceReadOnly{
							{
								ID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup1/providers/Microsoft.Compute/capacityReservationGroups/myCapacityReservationGroup/capacityReservations/myCapacityReservation1"),
							},
							{
								ID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup1/providers/Microsoft.Compute/capacityReservationGroups/myCapacityReservationGroup/capacityReservations/myCapacityReservation2"),
							}},
						VirtualMachinesAssociated: []*armcompute.SubResourceReadOnly{
							{
								ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup1/providers/Microsoft.Compute/virtualMachines/myVM1"),
							},
							{
								ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup1/providers/Microsoft.Compute/virtualMachines/myVM2"),
							}},
					},
				},
				{
					Name:     to.Ptr("{capacityReservationGroupName}"),
					Type:     to.Ptr("Microsoft.Compute/CapacityReservationGroups"),
					ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup2/providers/Microsoft.Compute/capacityReservationGroups/{capacityReservationGroupName}"),
					Location: to.Ptr("West US"),
					Properties: &armcompute.CapacityReservationGroupProperties{
						CapacityReservations: []*armcompute.SubResourceReadOnly{
							{
								ID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup2/providers/Microsoft.Compute/capacityReservationGroups/myCapacityReservationGroup/capacityReservations/myCapacityReservation3"),
							},
							{
								ID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup2/providers/Microsoft.Compute/capacityReservationGroups/myCapacityReservationGroup/capacityReservations/myCapacityReservation4"),
							}},
						VirtualMachinesAssociated: []*armcompute.SubResourceReadOnly{
							{
								ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup2/providers/Microsoft.Compute/virtualMachines/myVM3"),
							}},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.CapacityReservationGroupListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.CapacityReservationGroupListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/ListCapacityReservationGroupsInSubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCapacityReservations_CreateOrUpdate(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateOrUpdateACapacityReservation.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a capacity reservation ."},
	})
	client, err := armcompute.NewCapacityReservationsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myCapacityReservationGroup",
		"myCapacityReservation",
		armcompute.CapacityReservation{
			Location: to.Ptr("westus"),
			Tags: map[string]*string{
				"department": to.Ptr("HR"),
			},
			SKU: &armcompute.SKU{
				Name:     to.Ptr("Standard_DS1_v2"),
				Capacity: to.Ptr[int64](4),
			},
			Zones: []*string{
				to.Ptr("1")},
		},
		&armcompute.CapacityReservationsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateOrUpdateACapacityReservation.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateOrUpdateACapacityReservation.json: %v", err)
	}
	// Response check
	exampleRes := armcompute.CapacityReservation{
		Name:     to.Ptr("myCapacityReservation"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/capacityReservationGroups/myCapacityReservationGroup/capacityReservations/myCapacityReservation"),
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"department": to.Ptr("HR"),
		},
		Properties: &armcompute.CapacityReservationProperties{
			ProvisioningState: to.Ptr("Succeeded"),
			ProvisioningTime:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-27T01:02:38.3138469+00:00"); return t }()),
			ReservationID:     to.Ptr("{GUID}"),
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_DS1_v2"),
			Capacity: to.Ptr[int64](4),
		},
		Zones: []*string{
			to.Ptr("1")},
	}
	if !reflect.DeepEqual(exampleRes, res.CapacityReservation) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.CapacityReservation)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateOrUpdateACapacityReservation.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestCapacityReservations_Update(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CapacityReservations_Update_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CapacityReservations_Update_MaximumSet_Gen"},
	})
	client, err := armcompute.NewCapacityReservationsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginUpdate(ctx,
		"rgcompute",
		"aaaaaaaaaa",
		"aaaaaaaaaaaaaaaaaaa",
		armcompute.CapacityReservationUpdate{
			Tags: map[string]*string{
				"key4974": to.Ptr("aaaaaaaaaaaaaaaa"),
			},
			Properties: &armcompute.CapacityReservationProperties{
				InstanceView: &armcompute.CapacityReservationInstanceView{
					Statuses: []*armcompute.InstanceViewStatus{
						{
							Code:          to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
							DisplayStatus: to.Ptr("aaaaaa"),
							Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
							Message:       to.Ptr("a"),
							Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.522Z"); return t }()),
						}},
					UtilizationInfo: &armcompute.CapacityReservationUtilization{},
				},
			},
			SKU: &armcompute.SKU{
				Name:     to.Ptr("DSv3-Type1"),
				Capacity: to.Ptr[int64](7),
				Tier:     to.Ptr("aaa"),
			},
		},
		&armcompute.CapacityReservationsClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CapacityReservations_Update_MaximumSet_Gen.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CapacityReservations_Update_MaximumSet_Gen.json: %v", err)
	}
	// Response check
	exampleRes := armcompute.CapacityReservation{
		Name:     to.Ptr("myCapacityReservation"),
		Type:     to.Ptr("aaaaaaaaaaaaaaa"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/capacityReservationGroups/myCapacityReservationGroup/capacityReservations/myCapacityReservation"),
		Location: to.Ptr("westus"),
		Tags:     map[string]*string{},
		Properties: &armcompute.CapacityReservationProperties{
			InstanceView: &armcompute.CapacityReservationInstanceView{
				Statuses: []*armcompute.InstanceViewStatus{
					{
						Code:          to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
						DisplayStatus: to.Ptr("aaaaaa"),
						Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
						Message:       to.Ptr("a"),
						Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.522Z"); return t }()),
					}},
				UtilizationInfo: &armcompute.CapacityReservationUtilization{
					VirtualMachinesAllocated: []*armcompute.SubResourceReadOnly{
						{
							ID: to.Ptr("aaaa"),
						}},
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			ProvisioningTime:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-27T01:02:38.3138469+00:00"); return t }()),
			ReservationID:     to.Ptr("{GUID}"),
			VirtualMachinesAssociated: []*armcompute.SubResourceReadOnly{
				{
					ID: to.Ptr("aaaa"),
				}},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_DS1_v2"),
			Capacity: to.Ptr[int64](4),
			Tier:     to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaa"),
		},
		Zones: []*string{
			to.Ptr("1")},
	}
	if !reflect.DeepEqual(exampleRes, res.CapacityReservation) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.CapacityReservation)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CapacityReservations_Update_MaximumSet_Gen.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CapacityReservations_Update_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CapacityReservations_Update_MinimumSet_Gen"},
	})
	client, err = armcompute.NewCapacityReservationsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginUpdate(ctx,
		"rgcompute",
		"aaaaaaaaaaaaaaaaaaaaaaaaaa",
		"aaa",
		armcompute.CapacityReservationUpdate{},
		&armcompute.CapacityReservationsClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CapacityReservations_Update_MinimumSet_Gen.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CapacityReservations_Update_MinimumSet_Gen.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.CapacityReservation{
		Location: to.Ptr("westus"),
		SKU:      &armcompute.SKU{},
	}
	if !reflect.DeepEqual(exampleRes, res.CapacityReservation) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.CapacityReservation)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CapacityReservations_Update_MinimumSet_Gen.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestCapacityReservations_Delete(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CapacityReservations_Delete_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CapacityReservations_Delete_MaximumSet_Gen"},
	})
	client, err := armcompute.NewCapacityReservationsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginDelete(ctx,
		"rgcompute",
		"aaaaaaaaaaa",
		"aaaaaaaaaaaaaaaaaaaaaaaaaaa",
		&armcompute.CapacityReservationsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CapacityReservations_Delete_MaximumSet_Gen.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CapacityReservations_Delete_MaximumSet_Gen.json: %v", err)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CapacityReservations_Delete_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CapacityReservations_Delete_MinimumSet_Gen"},
	})
	client, err = armcompute.NewCapacityReservationsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginDelete(ctx,
		"rgcompute",
		"aaa",
		"aaaaaa",
		&armcompute.CapacityReservationsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CapacityReservations_Delete_MinimumSet_Gen.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CapacityReservations_Delete_MinimumSet_Gen.json: %v", err)
	}
}

func TestCapacityReservations_Get(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/GetACapacityReservation.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a capacity reservation."},
	})
	client, err := armcompute.NewCapacityReservationsClient("{subscriptionId}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myCapacityReservationGroup",
		"myCapacityReservation",
		&armcompute.CapacityReservationsClientGetOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/GetACapacityReservation.json: %v", err)
	}
	// Response check
	exampleRes := armcompute.CapacityReservation{
		Name:     to.Ptr("myCapacityReservation"),
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"department": to.Ptr("HR"),
		},
		Properties: &armcompute.CapacityReservationProperties{
			InstanceView: &armcompute.CapacityReservationInstanceView{
				Statuses: []*armcompute.InstanceViewStatus{
					{
						Code:          to.Ptr("ProvisioningState/succeeded"),
						DisplayStatus: to.Ptr("Provisioning succeeded"),
						Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
					}},
				UtilizationInfo: &armcompute.CapacityReservationUtilization{
					VirtualMachinesAllocated: []*armcompute.SubResourceReadOnly{
						{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM1"),
						},
						{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM2"),
						}},
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			ProvisioningTime:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-27T01:02:38.3138469+00:00"); return t }()),
			ReservationID:     to.Ptr("{GUID}"),
			TimeCreated:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-27T01:02:38.3138469+00:00"); return t }()),
			VirtualMachinesAssociated: []*armcompute.SubResourceReadOnly{
				{
					ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM1"),
				},
				{
					ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM2"),
				},
				{
					ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM3"),
				}},
		},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Standard_DS1_v2"),
			Capacity: to.Ptr[int64](4),
		},
		Zones: []*string{
			to.Ptr("1")},
	}
	if !reflect.DeepEqual(exampleRes, res.CapacityReservation) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.CapacityReservation)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/GetACapacityReservation.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestCapacityReservations_ListByCapacityReservationGroup(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/ListCapacityReservationsInReservationGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List capacity reservations in reservation group."},
	})
	client, err := armcompute.NewCapacityReservationsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := client.NewListByCapacityReservationGroupPager("myResourceGroup",
		"myCapacityReservationGroup",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/ListCapacityReservationsInReservationGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcompute.CapacityReservationListResult{
			Value: []*armcompute.CapacityReservation{
				{
					Name:     to.Ptr("{capacityReservationName}"),
					Type:     to.Ptr("Microsoft.Compute/CapacityReservations"),
					ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/capacityReservationGroups/{capacityReservationGroupName}/CapacityReservation/{capacityReservationName}"),
					Location: to.Ptr("West US"),
					Tags: map[string]*string{
						"department": to.Ptr("HR"),
					},
					Properties: &armcompute.CapacityReservationProperties{
						ProvisioningState: to.Ptr("Succeeded"),
						ProvisioningTime:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-27T01:02:38.3138469+00:00"); return t }()),
						ReservationID:     to.Ptr("{GUID}"),
						VirtualMachinesAssociated: []*armcompute.SubResourceReadOnly{
							{
								ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM1"),
							},
							{
								ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM2"),
							},
							{
								ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM3"),
							}},
					},
					SKU: &armcompute.SKU{
						Name:     to.Ptr("Standard_DS1_v2"),
						Capacity: to.Ptr[int64](4),
					},
					Zones: []*string{
						to.Ptr("1")},
				},
				{
					Name:     to.Ptr("{capacityReservationName}"),
					Type:     to.Ptr("Microsoft.Compute/CapacityReservations"),
					ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/capacityReservationGroups/{capacityReservationGroupName}/CapacityReservation/{capacityReservationName}"),
					Location: to.Ptr("West US"),
					Tags: map[string]*string{
						"department": to.Ptr("HR"),
					},
					Properties: &armcompute.CapacityReservationProperties{
						ProvisioningState: to.Ptr("Succeeded"),
						ProvisioningTime:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-27T01:02:38.3138469+00:00"); return t }()),
						ReservationID:     to.Ptr("{GUID}"),
						VirtualMachinesAssociated: []*armcompute.SubResourceReadOnly{
							{
								ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM4"),
							}},
					},
					SKU: &armcompute.SKU{
						Name:     to.Ptr("Standard_A1_v2"),
						Capacity: to.Ptr[int64](4),
					},
					Zones: []*string{
						to.Ptr("1")},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.CapacityReservationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.CapacityReservationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/ListCapacityReservationsInReservationGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualMachineScaleSetExtensions_CreateOrUpdate(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetExtensions_CreateOrUpdate_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSetExtensions_CreateOrUpdate_MaximumSet_Gen"},
	})
	client, err := armcompute.NewVirtualMachineScaleSetExtensionsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rgcompute",
		"aaaaaaa",
		"aaaaaaaaaaaaaaaaaaaaa",
		armcompute.VirtualMachineScaleSetExtension{
			Name: to.Ptr("{extension-name}"),
			Properties: &armcompute.VirtualMachineScaleSetExtensionProperties{
				Type:                    to.Ptr("{extension-Type}"),
				AutoUpgradeMinorVersion: to.Ptr(true),
				EnableAutomaticUpgrade:  to.Ptr(true),
				ForceUpdateTag:          to.Ptr("aaaaaaaaa"),
				ProtectedSettings:       map[string]interface{}{},
				ProvisionAfterExtensions: []*string{
					to.Ptr("aa")},
				Publisher:          to.Ptr("{extension-Publisher}"),
				Settings:           map[string]interface{}{},
				SuppressFailures:   to.Ptr(true),
				TypeHandlerVersion: to.Ptr("{handler-version}"),
			},
		},
		&armcompute.VirtualMachineScaleSetExtensionsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetExtensions_CreateOrUpdate_MaximumSet_Gen.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetExtensions_CreateOrUpdate_MaximumSet_Gen.json: %v", err)
	}
	// Response check
	exampleRes := armcompute.VirtualMachineScaleSetExtension{
		ID:   to.Ptr("aaaaaaaa"),
		Name: to.Ptr("{extension-name}"),
		Type: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaa"),
		Properties: &armcompute.VirtualMachineScaleSetExtensionProperties{
			Type:                    to.Ptr("{extension-Type}"),
			AutoUpgradeMinorVersion: to.Ptr(true),
			EnableAutomaticUpgrade:  to.Ptr(true),
			ForceUpdateTag:          to.Ptr("aaaaaaaaa"),
			ProtectedSettings:       map[string]interface{}{},
			ProvisionAfterExtensions: []*string{
				to.Ptr("aa")},
			ProvisioningState:  to.Ptr("Succeeded"),
			Publisher:          to.Ptr("{extension-Publisher}"),
			Settings:           map[string]interface{}{},
			SuppressFailures:   to.Ptr(true),
			TypeHandlerVersion: to.Ptr("{handler-version}"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSetExtension) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineScaleSetExtension)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetExtensions_CreateOrUpdate_MaximumSet_Gen.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetExtensions_CreateOrUpdate_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSetExtensions_CreateOrUpdate_MinimumSet_Gen"},
	})
	client, err = armcompute.NewVirtualMachineScaleSetExtensionsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rgcompute",
		"aaaaaaaaaaa",
		"aaaaaaaaaaa",
		armcompute.VirtualMachineScaleSetExtension{},
		&armcompute.VirtualMachineScaleSetExtensionsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetExtensions_CreateOrUpdate_MinimumSet_Gen.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetExtensions_CreateOrUpdate_MinimumSet_Gen.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.VirtualMachineScaleSetExtension{}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSetExtension) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineScaleSetExtension)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetExtensions_CreateOrUpdate_MinimumSet_Gen.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestVirtualMachineScaleSetExtensions_Update(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetExtensions_Update_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSetExtensions_Update_MaximumSet_Gen"},
	})
	client, err := armcompute.NewVirtualMachineScaleSetExtensionsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginUpdate(ctx,
		"rgcompute",
		"aaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
		"aaaa",
		armcompute.VirtualMachineScaleSetExtensionUpdate{
			Properties: &armcompute.VirtualMachineScaleSetExtensionProperties{
				Type:                    to.Ptr("{extension-Type}"),
				AutoUpgradeMinorVersion: to.Ptr(true),
				EnableAutomaticUpgrade:  to.Ptr(true),
				ForceUpdateTag:          to.Ptr("aaaaaaaaa"),
				ProtectedSettings:       map[string]interface{}{},
				ProvisionAfterExtensions: []*string{
					to.Ptr("aa")},
				Publisher:          to.Ptr("{extension-Publisher}"),
				Settings:           map[string]interface{}{},
				SuppressFailures:   to.Ptr(true),
				TypeHandlerVersion: to.Ptr("{handler-version}"),
			},
		},
		&armcompute.VirtualMachineScaleSetExtensionsClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetExtensions_Update_MaximumSet_Gen.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetExtensions_Update_MaximumSet_Gen.json: %v", err)
	}
	// Response check
	exampleRes := armcompute.VirtualMachineScaleSetExtension{
		ID:   to.Ptr("aaaaaaaa"),
		Name: to.Ptr("{extension-name}"),
		Type: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaa"),
		Properties: &armcompute.VirtualMachineScaleSetExtensionProperties{
			Type:                    to.Ptr("{extension-Type}"),
			AutoUpgradeMinorVersion: to.Ptr(true),
			EnableAutomaticUpgrade:  to.Ptr(true),
			ForceUpdateTag:          to.Ptr("aaaaaaaaa"),
			ProtectedSettings:       map[string]interface{}{},
			ProvisionAfterExtensions: []*string{
				to.Ptr("aa")},
			ProvisioningState:  to.Ptr("Succeeded"),
			Publisher:          to.Ptr("{extension-Publisher}"),
			Settings:           map[string]interface{}{},
			SuppressFailures:   to.Ptr(true),
			TypeHandlerVersion: to.Ptr("{handler-version}"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSetExtension) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineScaleSetExtension)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetExtensions_Update_MaximumSet_Gen.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetExtensions_Update_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSetExtensions_Update_MinimumSet_Gen"},
	})
	client, err = armcompute.NewVirtualMachineScaleSetExtensionsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginUpdate(ctx,
		"rgcompute",
		"aaaaaaaaaaaaaaaaaaaaaaaaaa",
		"aa",
		armcompute.VirtualMachineScaleSetExtensionUpdate{},
		&armcompute.VirtualMachineScaleSetExtensionsClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetExtensions_Update_MinimumSet_Gen.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetExtensions_Update_MinimumSet_Gen.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.VirtualMachineScaleSetExtension{}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSetExtension) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineScaleSetExtension)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetExtensions_Update_MinimumSet_Gen.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestVirtualMachineScaleSetExtensions_Delete(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetExtensions_Delete_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSetExtensions_Delete_MaximumSet_Gen"},
	})
	client, err := armcompute.NewVirtualMachineScaleSetExtensionsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginDelete(ctx,
		"rgcompute",
		"aaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
		"aaaaaaaaaaaaaaaaaaaaaaaa",
		&armcompute.VirtualMachineScaleSetExtensionsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetExtensions_Delete_MaximumSet_Gen.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetExtensions_Delete_MaximumSet_Gen.json: %v", err)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetExtensions_Delete_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSetExtensions_Delete_MinimumSet_Gen"},
	})
	client, err = armcompute.NewVirtualMachineScaleSetExtensionsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginDelete(ctx,
		"rgcompute",
		"aaaa",
		"aaaaaaaaaaaaaaaaaaaaaaa",
		&armcompute.VirtualMachineScaleSetExtensionsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetExtensions_Delete_MinimumSet_Gen.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetExtensions_Delete_MinimumSet_Gen.json: %v", err)
	}
}

func TestVirtualMachineScaleSetExtensions_Get(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetExtensions_Get_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSetExtensions_Get_MaximumSet_Gen"},
	})
	client, err := armcompute.NewVirtualMachineScaleSetExtensionsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := client.Get(ctx,
		"rgcompute",
		"aaaaaaaaaaaaaaaaaaaaaaaa",
		"aaaaaaaaaaaaaaaaaaaa",
		&armcompute.VirtualMachineScaleSetExtensionsClientGetOptions{Expand: to.Ptr("aaaaaaa")})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetExtensions_Get_MaximumSet_Gen.json: %v", err)
	}
	// Response check
	exampleRes := armcompute.VirtualMachineScaleSetExtension{
		ID:   to.Ptr("aaaaaaaa"),
		Name: to.Ptr("{extension-name}"),
		Type: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaa"),
		Properties: &armcompute.VirtualMachineScaleSetExtensionProperties{
			Type:                    to.Ptr("{extension-Type}"),
			AutoUpgradeMinorVersion: to.Ptr(true),
			EnableAutomaticUpgrade:  to.Ptr(true),
			ForceUpdateTag:          to.Ptr("aaaaaaaaa"),
			ProtectedSettings:       map[string]interface{}{},
			ProvisionAfterExtensions: []*string{
				to.Ptr("aa")},
			ProvisioningState:  to.Ptr("Succeeded"),
			Publisher:          to.Ptr("{extension-Publisher}"),
			Settings:           map[string]interface{}{},
			SuppressFailures:   to.Ptr(true),
			TypeHandlerVersion: to.Ptr("{handler-version}"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSetExtension) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineScaleSetExtension)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetExtensions_Get_MaximumSet_Gen.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetExtensions_Get_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSetExtensions_Get_MinimumSet_Gen"},
	})
	client, err = armcompute.NewVirtualMachineScaleSetExtensionsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err = client.Get(ctx,
		"rgcompute",
		"a",
		"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
		&armcompute.VirtualMachineScaleSetExtensionsClientGetOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetExtensions_Get_MinimumSet_Gen.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.VirtualMachineScaleSetExtension{}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSetExtension) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineScaleSetExtension)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetExtensions_Get_MinimumSet_Gen.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestVirtualMachineScaleSetExtensions_List(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetExtensions_List_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSetExtensions_List_MaximumSet_Gen"},
	})
	client, err := armcompute.NewVirtualMachineScaleSetExtensionsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := client.NewListPager("rgcompute",
		"aaaaaaaaaaaaaaaaaaaa",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetExtensions_List_MaximumSet_Gen.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcompute.VirtualMachineScaleSetExtensionListResult{
			Value: []*armcompute.VirtualMachineScaleSetExtension{
				{
					ID:   to.Ptr("aaaaaaaa"),
					Name: to.Ptr("{extension-name}"),
					Type: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaa"),
					Properties: &armcompute.VirtualMachineScaleSetExtensionProperties{
						Type:                    to.Ptr("{extension-Type}"),
						AutoUpgradeMinorVersion: to.Ptr(true),
						EnableAutomaticUpgrade:  to.Ptr(true),
						ForceUpdateTag:          to.Ptr("aaaaaaaaa"),
						ProtectedSettings:       map[string]interface{}{},
						ProvisionAfterExtensions: []*string{
							to.Ptr("aa")},
						ProvisioningState:  to.Ptr("Succeeded"),
						Publisher:          to.Ptr("{extension-Publisher}"),
						Settings:           map[string]interface{}{},
						SuppressFailures:   to.Ptr(true),
						TypeHandlerVersion: to.Ptr("{handler-version}"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.VirtualMachineScaleSetExtensionListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.VirtualMachineScaleSetExtensionListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetExtensions_List_MaximumSet_Gen.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetExtensions_List_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSetExtensions_List_MinimumSet_Gen"},
	})
	client, err = armcompute.NewVirtualMachineScaleSetExtensionsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager = client.NewListPager("rgcompute",
		"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetExtensions_List_MinimumSet_Gen.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcompute.VirtualMachineScaleSetExtensionListResult{
			Value: []*armcompute.VirtualMachineScaleSetExtension{
				{}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.VirtualMachineScaleSetExtensionListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.VirtualMachineScaleSetExtensionListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetExtensions_List_MinimumSet_Gen.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualMachineScaleSetRollingUpgrades_Cancel(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetRollingUpgrades_Cancel_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSetRollingUpgrades_Cancel_MaximumSet_Gen"},
	})
	client, err := armcompute.NewVirtualMachineScaleSetRollingUpgradesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginCancel(ctx,
		"rgcompute",
		"aaaaa",
		&armcompute.VirtualMachineScaleSetRollingUpgradesClientBeginCancelOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetRollingUpgrades_Cancel_MaximumSet_Gen.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetRollingUpgrades_Cancel_MaximumSet_Gen.json: %v", err)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetRollingUpgrades_Cancel_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSetRollingUpgrades_Cancel_MinimumSet_Gen"},
	})
	client, err = armcompute.NewVirtualMachineScaleSetRollingUpgradesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginCancel(ctx,
		"rgcompute",
		"aaaaaa",
		&armcompute.VirtualMachineScaleSetRollingUpgradesClientBeginCancelOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetRollingUpgrades_Cancel_MinimumSet_Gen.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetRollingUpgrades_Cancel_MinimumSet_Gen.json: %v", err)
	}
}

func TestVirtualMachineScaleSetRollingUpgrades_StartOSUpgrade(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetRollingUpgrades_StartOSUpgrade_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSetRollingUpgrades_StartOSUpgrade_MaximumSet_Gen"},
	})
	client, err := armcompute.NewVirtualMachineScaleSetRollingUpgradesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginStartOSUpgrade(ctx,
		"rgcompute",
		"aaaa",
		&armcompute.VirtualMachineScaleSetRollingUpgradesClientBeginStartOSUpgradeOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetRollingUpgrades_StartOSUpgrade_MaximumSet_Gen.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetRollingUpgrades_StartOSUpgrade_MaximumSet_Gen.json: %v", err)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetRollingUpgrades_StartOSUpgrade_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSetRollingUpgrades_StartOSUpgrade_MinimumSet_Gen"},
	})
	client, err = armcompute.NewVirtualMachineScaleSetRollingUpgradesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginStartOSUpgrade(ctx,
		"rgcompute",
		"aaaaaaaaaaaaaaaaaa",
		&armcompute.VirtualMachineScaleSetRollingUpgradesClientBeginStartOSUpgradeOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetRollingUpgrades_StartOSUpgrade_MinimumSet_Gen.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetRollingUpgrades_StartOSUpgrade_MinimumSet_Gen.json: %v", err)
	}
}

func TestVirtualMachineScaleSetRollingUpgrades_StartExtensionUpgrade(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VMScaleSetExtensionRollingUpgrade.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Start an extension rolling upgrade."},
	})
	client, err := armcompute.NewVirtualMachineScaleSetRollingUpgradesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginStartExtensionUpgrade(ctx,
		"myResourceGroup",
		"{vmss-name}",
		&armcompute.VirtualMachineScaleSetRollingUpgradesClientBeginStartExtensionUpgradeOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VMScaleSetExtensionRollingUpgrade.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VMScaleSetExtensionRollingUpgrade.json: %v", err)
	}
}

func TestVirtualMachineScaleSetRollingUpgrades_GetLatest(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetRollingUpgrades_GetLatest_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSetRollingUpgrades_GetLatest_MaximumSet_Gen"},
	})
	client, err := armcompute.NewVirtualMachineScaleSetRollingUpgradesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := client.GetLatest(ctx,
		"rgcompute",
		"aaaaaaaaaaaaaaaaaaaaaaaaa",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetRollingUpgrades_GetLatest_MaximumSet_Gen.json: %v", err)
	}
	// Response check
	exampleRes := armcompute.RollingUpgradeStatusInfo{
		Name:     to.Ptr("aaaaaaaaaaaaaaaaaaa"),
		Type:     to.Ptr("aaaaaaaaaaaaaaaaaaaaa"),
		ID:       to.Ptr("aaaaaaaaaa"),
		Location: to.Ptr("aaaaaa"),
		Tags: map[string]*string{
			"key8533": to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaa"),
		},
		Properties: &armcompute.RollingUpgradeStatusInfoProperties{
			Error: &armcompute.APIError{
				Code: to.Ptr("aaaaaaa"),
				Innererror: &armcompute.InnerError{
					Errordetail:   to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaa"),
					Exceptiontype: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
				},
				Message: to.Ptr("aaaaaaaaa"),
				Target:  to.Ptr("aaaaaaa"),
				Details: []*armcompute.APIErrorBase{
					{
						Code:    to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaa"),
						Message: to.Ptr("aa"),
						Target:  to.Ptr("aaaa"),
					}},
			},
			Policy: &armcompute.RollingUpgradePolicy{
				EnableCrossZoneUpgrade:              to.Ptr(true),
				MaxBatchInstancePercent:             to.Ptr[int32](49),
				MaxUnhealthyInstancePercent:         to.Ptr[int32](81),
				MaxUnhealthyUpgradedInstancePercent: to.Ptr[int32](98),
				PauseTimeBetweenBatches:             to.Ptr("aaaaaaaaaaaaaaa"),
				PrioritizeUnhealthyInstances:        to.Ptr(true),
			},
			Progress: &armcompute.RollingUpgradeProgressInfo{
				FailedInstanceCount:     to.Ptr[int32](25),
				InProgressInstanceCount: to.Ptr[int32](20),
				PendingInstanceCount:    to.Ptr[int32](27),
				SuccessfulInstanceCount: to.Ptr[int32](6),
			},
			RunningStatus: &armcompute.RollingUpgradeRunningStatus{
				Code:           to.Ptr(armcompute.RollingUpgradeStatusCodeRollingForward),
				LastAction:     to.Ptr(armcompute.RollingUpgradeActionTypeStart),
				LastActionTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T13:06:23.362Z"); return t }()),
				StartTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T13:06:23.362Z"); return t }()),
			},
		},
	}
	if !reflect.DeepEqual(exampleRes, res.RollingUpgradeStatusInfo) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.RollingUpgradeStatusInfo)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetRollingUpgrades_GetLatest_MaximumSet_Gen.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetRollingUpgrades_GetLatest_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSetRollingUpgrades_GetLatest_MinimumSet_Gen"},
	})
	client, err = armcompute.NewVirtualMachineScaleSetRollingUpgradesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err = client.GetLatest(ctx,
		"rgcompute",
		"aaaaaaaaaaaaaaaaa",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetRollingUpgrades_GetLatest_MinimumSet_Gen.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.RollingUpgradeStatusInfo{
		Location: to.Ptr("aaaaaa"),
	}
	if !reflect.DeepEqual(exampleRes, res.RollingUpgradeStatusInfo) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.RollingUpgradeStatusInfo)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetRollingUpgrades_GetLatest_MinimumSet_Gen.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestVirtualMachineScaleSetVMExtensions_CreateOrUpdate(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateOrUpdateVirtualMachineScaleSetVMExtensions.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create VirtualMachineScaleSet VM extension."},
	})
	client, err := armcompute.NewVirtualMachineScaleSetVMExtensionsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myvmScaleSet",
		"0",
		"myVMExtension",
		armcompute.VirtualMachineScaleSetVMExtension{
			Properties: &armcompute.VirtualMachineExtensionProperties{
				Type:                    to.Ptr("extType"),
				AutoUpgradeMinorVersion: to.Ptr(true),
				Publisher:               to.Ptr("extPublisher"),
				Settings: map[string]interface{}{
					"UserName": "xyz@microsoft.com",
				},
				TypeHandlerVersion: to.Ptr("1.2"),
			},
		},
		&armcompute.VirtualMachineScaleSetVMExtensionsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateOrUpdateVirtualMachineScaleSetVMExtensions.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateOrUpdateVirtualMachineScaleSetVMExtensions.json: %v", err)
	}
	// Response check
	exampleRes := armcompute.VirtualMachineScaleSetVMExtension{
		ID:   to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/myvmScaleSet/virtualMachines/0/extensions/myVMExtension"),
		Name: to.Ptr("myVMExtension"),
		Type: to.Ptr("Microsoft.Compute/virtualMachineScaleSets/virtualMachines/extensions"),
		Properties: &armcompute.VirtualMachineExtensionProperties{
			Type:                    to.Ptr("extType"),
			AutoUpgradeMinorVersion: to.Ptr(true),
			ProvisioningState:       to.Ptr("Succeeded"),
			Publisher:               to.Ptr("extPublisher"),
			Settings: map[string]interface{}{
				"UserName": "xyz@microsoft.com",
			},
			TypeHandlerVersion: to.Ptr("1.2"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSetVMExtension) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineScaleSetVMExtension)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/CreateOrUpdateVirtualMachineScaleSetVMExtensions.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestVirtualMachineScaleSetVMExtensions_Update(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/UpdateVirtualMachineScaleSetVMExtensions.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update VirtualMachineScaleSet VM extension."},
	})
	client, err := armcompute.NewVirtualMachineScaleSetVMExtensionsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginUpdate(ctx,
		"myResourceGroup",
		"myvmScaleSet",
		"0",
		"myVMExtension",
		armcompute.VirtualMachineScaleSetVMExtensionUpdate{
			Properties: &armcompute.VirtualMachineExtensionUpdateProperties{
				Type:                    to.Ptr("extType"),
				AutoUpgradeMinorVersion: to.Ptr(true),
				Publisher:               to.Ptr("extPublisher"),
				Settings: map[string]interface{}{
					"UserName": "xyz@microsoft.com",
				},
				TypeHandlerVersion: to.Ptr("1.2"),
			},
		},
		&armcompute.VirtualMachineScaleSetVMExtensionsClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/UpdateVirtualMachineScaleSetVMExtensions.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/UpdateVirtualMachineScaleSetVMExtensions.json: %v", err)
	}
	// Response check
	exampleRes := armcompute.VirtualMachineScaleSetVMExtension{
		ID:   to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/myvmScaleSet/virtualMachines/0/extensions/myVMExtension"),
		Name: to.Ptr("myVMExtension"),
		Type: to.Ptr("Microsoft.Compute/virtualMachineScaleSets/virtualMachines/extensions"),
		Properties: &armcompute.VirtualMachineExtensionProperties{
			Type:                    to.Ptr("extType"),
			AutoUpgradeMinorVersion: to.Ptr(true),
			ProvisioningState:       to.Ptr("Succeeded"),
			Publisher:               to.Ptr("extPublisher"),
			Settings: map[string]interface{}{
				"UserName": "xyz@microsoft.com",
			},
			TypeHandlerVersion: to.Ptr("1.2"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSetVMExtension) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineScaleSetVMExtension)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/UpdateVirtualMachineScaleSetVMExtensions.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestVirtualMachineScaleSetVMExtensions_Delete(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/DeleteVirtualMachineScaleSetVMExtensions.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete VirtualMachineScaleSet VM extension."},
	})
	client, err := armcompute.NewVirtualMachineScaleSetVMExtensionsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"myvmScaleSet",
		"0",
		"myVMExtension",
		&armcompute.VirtualMachineScaleSetVMExtensionsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/DeleteVirtualMachineScaleSetVMExtensions.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/DeleteVirtualMachineScaleSetVMExtensions.json: %v", err)
	}
}

func TestVirtualMachineScaleSetVMExtensions_Get(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/GetVirtualMachineScaleSetVMExtensions.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get VirtualMachineScaleSet VM extension."},
	})
	client, err := armcompute.NewVirtualMachineScaleSetVMExtensionsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myvmScaleSet",
		"0",
		"myVMExtension",
		&armcompute.VirtualMachineScaleSetVMExtensionsClientGetOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/GetVirtualMachineScaleSetVMExtensions.json: %v", err)
	}
	// Response check
	exampleRes := armcompute.VirtualMachineScaleSetVMExtension{
		ID:   to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/myvmScaleSet/virtualMachines/0/extensions/myVMExtension"),
		Name: to.Ptr("myVMExtension"),
		Type: to.Ptr("Microsoft.Compute/virtualMachineScaleSets/virtualMachines/extensions"),
		Properties: &armcompute.VirtualMachineExtensionProperties{
			Type:                    to.Ptr("extType"),
			AutoUpgradeMinorVersion: to.Ptr(true),
			ProvisioningState:       to.Ptr("Succeeded"),
			Publisher:               to.Ptr("extPublisher"),
			Settings: map[string]interface{}{
				"UserName": "xyz@microsoft.com",
			},
			TypeHandlerVersion: to.Ptr("1.2"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSetVMExtension) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineScaleSetVMExtension)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/GetVirtualMachineScaleSetVMExtensions.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestVirtualMachineScaleSetVMExtensions_List(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/ListVirtualMachineScaleSetVMExtensions.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List extensions in Vmss instance."},
	})
	client, err := armcompute.NewVirtualMachineScaleSetVMExtensionsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := client.List(ctx,
		"myResourceGroup",
		"myvmScaleSet",
		"0",
		&armcompute.VirtualMachineScaleSetVMExtensionsClientListOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/ListVirtualMachineScaleSetVMExtensions.json: %v", err)
	}
	// Response check
	exampleRes := armcompute.VirtualMachineScaleSetVMExtensionsListResult{
		Value: []*armcompute.VirtualMachineScaleSetVMExtension{
			{
				ID:   to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/myvmScaleSet/virtualMachines/0/extensions/myVMExtension"),
				Name: to.Ptr("myVMExtension"),
				Type: to.Ptr("Microsoft.Compute/virtualMachineScaleSets/virtualMachines/extensions"),
				Properties: &armcompute.VirtualMachineExtensionProperties{
					Type:                    to.Ptr("extType"),
					AutoUpgradeMinorVersion: to.Ptr(true),
					ProvisioningState:       to.Ptr("Succeeded"),
					Publisher:               to.Ptr("extPublisher"),
					Settings: map[string]interface{}{
						"UserName": "xyz@microsoft.com",
					},
					TypeHandlerVersion: to.Ptr("1.2"),
				},
			},
			{
				ID:   to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/myvmScaleSet/virtualMachines/0/extensions/myVMExtension1"),
				Name: to.Ptr("myVMExtension1"),
				Type: to.Ptr("Microsoft.Compute/virtualMachineScaleSets/virtualMachines/extensions"),
				Properties: &armcompute.VirtualMachineExtensionProperties{
					Type:                    to.Ptr("extType1"),
					AutoUpgradeMinorVersion: to.Ptr(true),
					ProvisioningState:       to.Ptr("Succeeded"),
					Publisher:               to.Ptr("extPublisher1"),
					Settings: map[string]interface{}{
						"UserName": "xyz@microsoft.com",
					},
					TypeHandlerVersion: to.Ptr("1.0"),
				},
			}},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSetVMExtensionsListResult) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineScaleSetVMExtensionsListResult)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/ListVirtualMachineScaleSetVMExtensions.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestVirtualMachineScaleSetVMs_Reimage(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetVMs_Reimage_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSetVMs_Reimage_MaximumSet_Gen"},
	})
	client, err := armcompute.NewVirtualMachineScaleSetVMsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginReimage(ctx,
		"rgcompute",
		"aaaaaaaaaaaaaaaa",
		"aaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
		&armcompute.VirtualMachineScaleSetVMsClientBeginReimageOptions{VMScaleSetVMReimageInput: &armcompute.VirtualMachineScaleSetVMReimageParameters{
			TempDisk: to.Ptr(true),
		},
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetVMs_Reimage_MaximumSet_Gen.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetVMs_Reimage_MaximumSet_Gen.json: %v", err)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetVMs_Reimage_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSetVMs_Reimage_MinimumSet_Gen"},
	})
	client, err = armcompute.NewVirtualMachineScaleSetVMsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginReimage(ctx,
		"rgcompute",
		"aaaaaaa",
		"aaaaaaaaaaaaa",
		&armcompute.VirtualMachineScaleSetVMsClientBeginReimageOptions{VMScaleSetVMReimageInput: nil,
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetVMs_Reimage_MinimumSet_Gen.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetVMs_Reimage_MinimumSet_Gen.json: %v", err)
	}
}

func TestVirtualMachineScaleSetVMs_ReimageAll(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetVMs_ReimageAll_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSetVMs_ReimageAll_MaximumSet_Gen"},
	})
	client, err := armcompute.NewVirtualMachineScaleSetVMsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginReimageAll(ctx,
		"rgcompute",
		"aaaaaaaaaaaaaaaaaaaaaaaa",
		"aaaaaaaaaaaaaaaaaaa",
		&armcompute.VirtualMachineScaleSetVMsClientBeginReimageAllOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetVMs_ReimageAll_MaximumSet_Gen.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetVMs_ReimageAll_MaximumSet_Gen.json: %v", err)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetVMs_ReimageAll_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSetVMs_ReimageAll_MinimumSet_Gen"},
	})
	client, err = armcompute.NewVirtualMachineScaleSetVMsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginReimageAll(ctx,
		"rgcompute",
		"aaaaaaaaaaaaaaaaaaaaaaaaa",
		"aaaaaaaaaaaaaaaaaaaaaaaaaaaa",
		&armcompute.VirtualMachineScaleSetVMsClientBeginReimageAllOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetVMs_ReimageAll_MinimumSet_Gen.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetVMs_ReimageAll_MinimumSet_Gen.json: %v", err)
	}
}

func TestVirtualMachineScaleSetVMs_Deallocate(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetVMs_Deallocate_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSetVMs_Deallocate_MaximumSet_Gen"},
	})
	client, err := armcompute.NewVirtualMachineScaleSetVMsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginDeallocate(ctx,
		"rgcompute",
		"aaaaaaaaaaaaaaaaaaaaaaaa",
		"aaaaaaaaaaaaaaaaaaaaaa",
		&armcompute.VirtualMachineScaleSetVMsClientBeginDeallocateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetVMs_Deallocate_MaximumSet_Gen.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetVMs_Deallocate_MaximumSet_Gen.json: %v", err)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetVMs_Deallocate_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSetVMs_Deallocate_MinimumSet_Gen"},
	})
	client, err = armcompute.NewVirtualMachineScaleSetVMsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginDeallocate(ctx,
		"rgcompute",
		"aaaaaaaaaaaaaaaaaaaaaaaa",
		"aaaaaa",
		&armcompute.VirtualMachineScaleSetVMsClientBeginDeallocateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetVMs_Deallocate_MinimumSet_Gen.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetVMs_Deallocate_MinimumSet_Gen.json: %v", err)
	}
}

func TestVirtualMachineScaleSetVMs_Update(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetVMs_Update_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSetVMs_Update_MaximumSet_Gen"},
	})
	client, err := armcompute.NewVirtualMachineScaleSetVMsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginUpdate(ctx,
		"rgcompute",
		"aaaaaaaaaaaaaa",
		"aaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
		armcompute.VirtualMachineScaleSetVM{
			Location: to.Ptr("westus"),
			Tags:     map[string]*string{},
			Plan: &armcompute.Plan{
				Name:          to.Ptr("aaaaaaaaaa"),
				Product:       to.Ptr("aaaaaaaaaaaaaaaaaaaa"),
				PromotionCode: to.Ptr("aaaaaaaaaaaaaaaaaaaa"),
				Publisher:     to.Ptr("aaaaaaaaaaaaaaaaaaaaaa"),
			},
			Properties: &armcompute.VirtualMachineScaleSetVMProperties{
				AdditionalCapabilities: &armcompute.AdditionalCapabilities{
					HibernationEnabled: to.Ptr(true),
					UltraSSDEnabled:    to.Ptr(true),
				},
				AvailabilitySet: &armcompute.SubResource{
					ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
				},
				DiagnosticsProfile: &armcompute.DiagnosticsProfile{
					BootDiagnostics: &armcompute.BootDiagnostics{
						Enabled:    to.Ptr(true),
						StorageURI: to.Ptr("aaaaaaaaaaaaa"),
					},
				},
				HardwareProfile: &armcompute.HardwareProfile{
					VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesBasicA0),
					VMSizeProperties: &armcompute.VMSizeProperties{
						VCPUsAvailable: to.Ptr[int32](9),
						VCPUsPerCore:   to.Ptr[int32](12),
					},
				},
				InstanceView: &armcompute.VirtualMachineScaleSetVMInstanceView{
					BootDiagnostics: &armcompute.BootDiagnosticsInstanceView{
						Status: &armcompute.InstanceViewStatus{
							Code:          to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
							DisplayStatus: to.Ptr("aaaaaa"),
							Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
							Message:       to.Ptr("a"),
							Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.522Z"); return t }()),
						},
					},
					Disks: []*armcompute.DiskInstanceView{
						{
							Name: to.Ptr("aaaaaaaaaaa"),
							EncryptionSettings: []*armcompute.DiskEncryptionSettings{
								{
									DiskEncryptionKey: &armcompute.KeyVaultSecretReference{
										SecretURL: to.Ptr("aaaaaaaa"),
										SourceVault: &armcompute.SubResource{
											ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
										},
									},
									Enabled: to.Ptr(true),
									KeyEncryptionKey: &armcompute.KeyVaultKeyReference{
										KeyURL: to.Ptr("aaaaaaaaaaaaaa"),
										SourceVault: &armcompute.SubResource{
											ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
										},
									},
								}},
							Statuses: []*armcompute.InstanceViewStatus{
								{
									Code:          to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
									DisplayStatus: to.Ptr("aaaaaa"),
									Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
									Message:       to.Ptr("a"),
									Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.522Z"); return t }()),
								}},
						}},
					MaintenanceRedeployStatus: &armcompute.MaintenanceRedeployStatus{
						IsCustomerInitiatedMaintenanceAllowed: to.Ptr(true),
						LastOperationMessage:                  to.Ptr("aaaaaa"),
						LastOperationResultCode:               to.Ptr(armcompute.MaintenanceOperationResultCodeTypesNone),
						MaintenanceWindowEndTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.531Z"); return t }()),
						MaintenanceWindowStartTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.531Z"); return t }()),
						PreMaintenanceWindowEndTime:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.531Z"); return t }()),
						PreMaintenanceWindowStartTime:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.531Z"); return t }()),
					},
					PlacementGroupID:     to.Ptr("aaa"),
					PlatformFaultDomain:  to.Ptr[int32](14),
					PlatformUpdateDomain: to.Ptr[int32](23),
					RdpThumbPrint:        to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaa"),
					Statuses: []*armcompute.InstanceViewStatus{
						{
							Code:          to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
							DisplayStatus: to.Ptr("aaaaaa"),
							Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
							Message:       to.Ptr("a"),
							Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.522Z"); return t }()),
						}},
					VMAgent: &armcompute.VirtualMachineAgentInstanceView{
						ExtensionHandlers: []*armcompute.VirtualMachineExtensionHandlerInstanceView{
							{
								Type: to.Ptr("aaaaaaaaaaaaa"),
								Status: &armcompute.InstanceViewStatus{
									Code:          to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
									DisplayStatus: to.Ptr("aaaaaa"),
									Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
									Message:       to.Ptr("a"),
									Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.522Z"); return t }()),
								},
								TypeHandlerVersion: to.Ptr("aaaaa"),
							}},
						Statuses: []*armcompute.InstanceViewStatus{
							{
								Code:          to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
								DisplayStatus: to.Ptr("aaaaaa"),
								Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
								Message:       to.Ptr("a"),
								Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.522Z"); return t }()),
							}},
						VMAgentVersion: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
					},
					VMHealth: &armcompute.VirtualMachineHealthStatus{
						Status: &armcompute.InstanceViewStatus{
							Code:          to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
							DisplayStatus: to.Ptr("aaaaaa"),
							Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
							Message:       to.Ptr("a"),
							Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.522Z"); return t }()),
						},
					},
					Extensions: []*armcompute.VirtualMachineExtensionInstanceView{
						{
							Name: to.Ptr("aaaaaaaaaaaaaaaaa"),
							Type: to.Ptr("aaaaaaaaa"),
							Statuses: []*armcompute.InstanceViewStatus{
								{
									Code:          to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
									DisplayStatus: to.Ptr("aaaaaa"),
									Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
									Message:       to.Ptr("a"),
									Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.522Z"); return t }()),
								}},
							Substatuses: []*armcompute.InstanceViewStatus{
								{
									Code:          to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
									DisplayStatus: to.Ptr("aaaaaa"),
									Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
									Message:       to.Ptr("a"),
									Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.522Z"); return t }()),
								}},
							TypeHandlerVersion: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaa"),
						}},
				},
				LicenseType: to.Ptr("aaaaaaaaaa"),
				NetworkProfile: &armcompute.NetworkProfile{
					NetworkAPIVersion: to.Ptr(armcompute.NetworkAPIVersionTwoThousandTwenty1101),
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineNetworkInterfaceConfiguration{
						{
							Name: to.Ptr("aaaaaaaaaaa"),
							Properties: &armcompute.VirtualMachineNetworkInterfaceConfigurationProperties{
								DeleteOption: to.Ptr(armcompute.DeleteOptionsDelete),
								DNSSettings: &armcompute.VirtualMachineNetworkInterfaceDNSSettingsConfiguration{
									DNSServers: []*string{
										to.Ptr("aaaaaa")},
								},
								DscpConfiguration: &armcompute.SubResource{
									ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
								},
								EnableAcceleratedNetworking: to.Ptr(true),
								EnableFpga:                  to.Ptr(true),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineNetworkInterfaceIPConfiguration{
									{
										Name: to.Ptr("aa"),
										Properties: &armcompute.VirtualMachineNetworkInterfaceIPConfigurationProperties{
											ApplicationGatewayBackendAddressPools: []*armcompute.SubResource{
												{
													ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
												}},
											ApplicationSecurityGroups: []*armcompute.SubResource{
												{
													ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
												}},
											LoadBalancerBackendAddressPools: []*armcompute.SubResource{
												{
													ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
												}},
											Primary:                 to.Ptr(true),
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionsIPv4),
											PublicIPAddressConfiguration: &armcompute.VirtualMachinePublicIPAddressConfiguration{
												Name: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
												Properties: &armcompute.VirtualMachinePublicIPAddressConfigurationProperties{
													DeleteOption: to.Ptr(armcompute.DeleteOptionsDelete),
													DNSSettings: &armcompute.VirtualMachinePublicIPAddressDNSSettingsConfiguration{
														DomainNameLabel: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaa"),
													},
													IdleTimeoutInMinutes: to.Ptr[int32](2),
													IPTags: []*armcompute.VirtualMachineIPTag{
														{
															IPTagType: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaa"),
															Tag:       to.Ptr("aaaaaaaaaaaaaaaaaaaa"),
														}},
													PublicIPAddressVersion:   to.Ptr(armcompute.IPVersionsIPv4),
													PublicIPAllocationMethod: to.Ptr(armcompute.PublicIPAllocationMethodDynamic),
													PublicIPPrefix: &armcompute.SubResource{
														ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
													},
												},
												SKU: &armcompute.PublicIPAddressSKU{
													Name: to.Ptr(armcompute.PublicIPAddressSKUNameBasic),
													Tier: to.Ptr(armcompute.PublicIPAddressSKUTierRegional),
												},
											},
											Subnet: &armcompute.SubResource{
												ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
											},
										},
									}},
								NetworkSecurityGroup: &armcompute.SubResource{
									ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
								},
								Primary: to.Ptr(true),
							},
						}},
					NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
						{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}/virtualMachines/0/networkInterfaces/vmsstestnetconfig5415"),
							Properties: &armcompute.NetworkInterfaceReferenceProperties{
								DeleteOption: to.Ptr(armcompute.DeleteOptionsDelete),
								Primary:      to.Ptr(true),
							},
						}},
				},
				NetworkProfileConfiguration: &armcompute.VirtualMachineScaleSetVMNetworkProfileConfiguration{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							ID:   to.Ptr("aaaaaaaa"),
							Name: to.Ptr("vmsstestnetconfig5415"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DeleteOption: to.Ptr(armcompute.DeleteOptionsDelete),
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(true),
								EnableFpga:                  to.Ptr(true),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										ID:   to.Ptr("aaaaaaaaa"),
										Name: to.Ptr("vmsstestnetconfig9693"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											ApplicationGatewayBackendAddressPools: []*armcompute.SubResource{
												{
													ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
												}},
											ApplicationSecurityGroups: []*armcompute.SubResource{
												{
													ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
												}},
											LoadBalancerBackendAddressPools: []*armcompute.SubResource{
												{
													ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
												}},
											LoadBalancerInboundNatPools: []*armcompute.SubResource{
												{
													ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
												}},
											Primary:                 to.Ptr(true),
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											PublicIPAddressConfiguration: &armcompute.VirtualMachineScaleSetPublicIPAddressConfiguration{
												Name: to.Ptr("aaaaaaaaaaaaaaaaaa"),
												Properties: &armcompute.VirtualMachineScaleSetPublicIPAddressConfigurationProperties{
													DeleteOption: to.Ptr(armcompute.DeleteOptionsDelete),
													DNSSettings: &armcompute.VirtualMachineScaleSetPublicIPAddressConfigurationDNSSettings{
														DomainNameLabel: to.Ptr("aaaaaaaaaaaaaaaaaa"),
													},
													IdleTimeoutInMinutes: to.Ptr[int32](18),
													IPTags: []*armcompute.VirtualMachineScaleSetIPTag{
														{
															IPTagType: to.Ptr("aaaaaaa"),
															Tag:       to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaa"),
														}},
													PublicIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
													PublicIPPrefix: &armcompute.SubResource{
														ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
													},
												},
												SKU: &armcompute.PublicIPAddressSKU{
													Name: to.Ptr(armcompute.PublicIPAddressSKUNameBasic),
													Tier: to.Ptr(armcompute.PublicIPAddressSKUTierRegional),
												},
											},
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/vn4071/subnets/sn5503"),
											},
										},
									}},
								NetworkSecurityGroup: &armcompute.SubResource{
									ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
								},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.OSProfile{
					AdminPassword:            to.Ptr("aaaaaaaaaaaaaaaa"),
					AdminUsername:            to.Ptr("Foo12"),
					AllowExtensionOperations: to.Ptr(true),
					ComputerName:             to.Ptr("test000000"),
					CustomData:               to.Ptr("aaaa"),
					LinuxConfiguration: &armcompute.LinuxConfiguration{
						DisablePasswordAuthentication: to.Ptr(true),
						PatchSettings: &armcompute.LinuxPatchSettings{
							AssessmentMode: to.Ptr(armcompute.LinuxPatchAssessmentModeImageDefault),
							PatchMode:      to.Ptr(armcompute.LinuxVMGuestPatchModeImageDefault),
						},
						ProvisionVMAgent: to.Ptr(true),
						SSH: &armcompute.SSHConfiguration{
							PublicKeys: []*armcompute.SSHPublicKey{
								{
									Path:    to.Ptr("aaa"),
									KeyData: to.Ptr("aaaaaa"),
								}},
						},
					},
					RequireGuestProvisionSignal: to.Ptr(true),
					Secrets:                     []*armcompute.VaultSecretGroup{},
					WindowsConfiguration: &armcompute.WindowsConfiguration{
						AdditionalUnattendContent: []*armcompute.AdditionalUnattendContent{
							{
								ComponentName: to.Ptr("Microsoft-Windows-Shell-Setup"),
								Content:       to.Ptr("aaaaaaaaaaaaaaaaaaaa"),
								PassName:      to.Ptr("OobeSystem"),
								SettingName:   to.Ptr(armcompute.SettingNamesAutoLogon),
							}},
						EnableAutomaticUpdates: to.Ptr(true),
						PatchSettings: &armcompute.PatchSettings{
							AssessmentMode:    to.Ptr(armcompute.WindowsPatchAssessmentModeImageDefault),
							EnableHotpatching: to.Ptr(true),
							PatchMode:         to.Ptr(armcompute.WindowsVMGuestPatchModeManual),
						},
						ProvisionVMAgent: to.Ptr(true),
						TimeZone:         to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaa"),
						WinRM: &armcompute.WinRMConfiguration{
							Listeners: []*armcompute.WinRMListener{
								{
									CertificateURL: to.Ptr("aaaaaaaaaaaaaaaaaaaaaa"),
									Protocol:       to.Ptr(armcompute.ProtocolTypesHTTP),
								}},
						},
					},
				},
				ProtectionPolicy: &armcompute.VirtualMachineScaleSetVMProtectionPolicy{
					ProtectFromScaleIn:         to.Ptr(true),
					ProtectFromScaleSetActions: to.Ptr(true),
				},
				SecurityProfile: &armcompute.SecurityProfile{
					EncryptionAtHost: to.Ptr(true),
					SecurityType:     to.Ptr(armcompute.SecurityTypesTrustedLaunch),
					UefiSettings: &armcompute.UefiSettings{
						SecureBootEnabled: to.Ptr(true),
						VTpmEnabled:       to.Ptr(true),
					},
				},
				StorageProfile: &armcompute.StorageProfile{
					DataDisks: []*armcompute.DataDisk{
						{
							Name:         to.Ptr("vmss3176_vmss3176_0_disk2_6c4f554bdafa49baa780eb2d128ff39d"),
							Caching:      to.Ptr(armcompute.CachingTypesNone),
							CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
							DeleteOption: to.Ptr(armcompute.DiskDeleteOptionTypesDelete),
							DetachOption: to.Ptr(armcompute.DiskDetachOptionTypesForceDetach),
							DiskSizeGB:   to.Ptr[int32](128),
							Image: &armcompute.VirtualHardDisk{
								URI: to.Ptr("https://{storageAccountName}.blob.core.windows.net/{containerName}/{vhdName}.vhd"),
							},
							Lun: to.Ptr[int32](1),
							ManagedDisk: &armcompute.ManagedDiskParameters{
								ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/vmss3176_vmss3176_0_disk2_6c4f554bdafa49baa780eb2d128ff39d"),
								DiskEncryptionSet: &armcompute.DiskEncryptionSetParameters{
									ID: to.Ptr("aaaaaaaaaaaa"),
								},
								StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
							},
							ToBeDetached: to.Ptr(true),
							Vhd: &armcompute.VirtualHardDisk{
								URI: to.Ptr("https://{storageAccountName}.blob.core.windows.net/{containerName}/{vhdName}.vhd"),
							},
							WriteAcceleratorEnabled: to.Ptr(true),
						}},
					ImageReference: &armcompute.ImageReference{
						ID:                   to.Ptr("a"),
						Offer:                to.Ptr("WindowsServer"),
						Publisher:            to.Ptr("MicrosoftWindowsServer"),
						SharedGalleryImageID: to.Ptr("aaaaaaaaaaaaaaaaaaaa"),
						SKU:                  to.Ptr("2012-R2-Datacenter"),
						Version:              to.Ptr("4.127.20180315"),
					},
					OSDisk: &armcompute.OSDisk{
						Name:         to.Ptr("vmss3176_vmss3176_0_OsDisk_1_6d72b805e50e4de6830303c5055077fc"),
						Caching:      to.Ptr(armcompute.CachingTypesNone),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						DeleteOption: to.Ptr(armcompute.DiskDeleteOptionTypesDelete),
						DiffDiskSettings: &armcompute.DiffDiskSettings{
							Option:    to.Ptr(armcompute.DiffDiskOptionsLocal),
							Placement: to.Ptr(armcompute.DiffDiskPlacementCacheDisk),
						},
						DiskSizeGB: to.Ptr[int32](127),
						EncryptionSettings: &armcompute.DiskEncryptionSettings{
							DiskEncryptionKey: &armcompute.KeyVaultSecretReference{
								SecretURL: to.Ptr("aaaaaaaa"),
								SourceVault: &armcompute.SubResource{
									ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
								},
							},
							Enabled: to.Ptr(true),
							KeyEncryptionKey: &armcompute.KeyVaultKeyReference{
								KeyURL: to.Ptr("aaaaaaaaaaaaaa"),
								SourceVault: &armcompute.SubResource{
									ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
								},
							},
						},
						Image: &armcompute.VirtualHardDisk{
							URI: to.Ptr("https://{storageAccountName}.blob.core.windows.net/{containerName}/{vhdName}.vhd"),
						},
						ManagedDisk: &armcompute.ManagedDiskParameters{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/vmss3176_vmss3176_0_OsDisk_1_6d72b805e50e4de6830303c5055077fc"),
							DiskEncryptionSet: &armcompute.DiskEncryptionSetParameters{
								ID: to.Ptr("aaaaaaaaaaaa"),
							},
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
						OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
						Vhd: &armcompute.VirtualHardDisk{
							URI: to.Ptr("https://{storageAccountName}.blob.core.windows.net/{containerName}/{vhdName}.vhd"),
						},
						WriteAcceleratorEnabled: to.Ptr(true),
					},
				},
				UserData: to.Ptr("RXhhbXBsZSBVc2VyRGF0YQ=="),
			},
			SKU: &armcompute.SKU{
				Name:     to.Ptr("Classic"),
				Capacity: to.Ptr[int64](29),
				Tier:     to.Ptr("aaaaaaaaaaaaaa"),
			},
		},
		&armcompute.VirtualMachineScaleSetVMsClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetVMs_Update_MaximumSet_Gen.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetVMs_Update_MaximumSet_Gen.json: %v", err)
	}
	// Response check
	exampleRes := armcompute.VirtualMachineScaleSetVM{
		Name:       to.Ptr("{vmss-vm-name}"),
		Type:       to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:         to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}/virtualMachines/0"),
		Location:   to.Ptr("westus"),
		Tags:       map[string]*string{},
		InstanceID: to.Ptr("aaaaaaaaaaaa"),
		Plan: &armcompute.Plan{
			Name:          to.Ptr("aaaaaaaaaa"),
			Product:       to.Ptr("aaaaaaaaaaaaaaaaaaaa"),
			PromotionCode: to.Ptr("aaaaaaaaaaaaaaaaaaaa"),
			Publisher:     to.Ptr("aaaaaaaaaaaaaaaaaaaaaa"),
		},
		Properties: &armcompute.VirtualMachineScaleSetVMProperties{
			AdditionalCapabilities: &armcompute.AdditionalCapabilities{
				HibernationEnabled: to.Ptr(true),
				UltraSSDEnabled:    to.Ptr(true),
			},
			AvailabilitySet: &armcompute.SubResource{
				ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
			},
			DiagnosticsProfile: &armcompute.DiagnosticsProfile{
				BootDiagnostics: &armcompute.BootDiagnostics{
					Enabled:    to.Ptr(true),
					StorageURI: to.Ptr("aaaaaaaaaaaaa"),
				},
			},
			HardwareProfile: &armcompute.HardwareProfile{
				VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesBasicA0),
				VMSizeProperties: &armcompute.VMSizeProperties{
					VCPUsAvailable: to.Ptr[int32](9),
					VCPUsPerCore:   to.Ptr[int32](12),
				},
			},
			InstanceView: &armcompute.VirtualMachineScaleSetVMInstanceView{
				AssignedHost: to.Ptr("aaaaaaa"),
				BootDiagnostics: &armcompute.BootDiagnosticsInstanceView{
					ConsoleScreenshotBlobURI: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaa"),
					SerialConsoleLogBlobURI:  to.Ptr("aaaaaaaa"),
					Status: &armcompute.InstanceViewStatus{
						Code:          to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
						DisplayStatus: to.Ptr("aaaaaa"),
						Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
						Message:       to.Ptr("a"),
						Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.522Z"); return t }()),
					},
				},
				Disks: []*armcompute.DiskInstanceView{
					{
						Name: to.Ptr("aaaaaaaaaaa"),
						EncryptionSettings: []*armcompute.DiskEncryptionSettings{
							{
								DiskEncryptionKey: &armcompute.KeyVaultSecretReference{
									SecretURL: to.Ptr("aaaaaaaa"),
									SourceVault: &armcompute.SubResource{
										ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
									},
								},
								Enabled: to.Ptr(true),
								KeyEncryptionKey: &armcompute.KeyVaultKeyReference{
									KeyURL: to.Ptr("aaaaaaaaaaaaaa"),
									SourceVault: &armcompute.SubResource{
										ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
									},
								},
							}},
						Statuses: []*armcompute.InstanceViewStatus{
							{
								Code:          to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
								DisplayStatus: to.Ptr("aaaaaa"),
								Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
								Message:       to.Ptr("a"),
								Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.522Z"); return t }()),
							}},
					}},
				MaintenanceRedeployStatus: &armcompute.MaintenanceRedeployStatus{
					IsCustomerInitiatedMaintenanceAllowed: to.Ptr(true),
					LastOperationMessage:                  to.Ptr("aaaaaa"),
					LastOperationResultCode:               to.Ptr(armcompute.MaintenanceOperationResultCodeTypesNone),
					MaintenanceWindowEndTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.531Z"); return t }()),
					MaintenanceWindowStartTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.531Z"); return t }()),
					PreMaintenanceWindowEndTime:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.531Z"); return t }()),
					PreMaintenanceWindowStartTime:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.531Z"); return t }()),
				},
				PlacementGroupID:     to.Ptr("aaa"),
				PlatformFaultDomain:  to.Ptr[int32](14),
				PlatformUpdateDomain: to.Ptr[int32](23),
				RdpThumbPrint:        to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaa"),
				Statuses: []*armcompute.InstanceViewStatus{
					{
						Code:          to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
						DisplayStatus: to.Ptr("aaaaaa"),
						Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
						Message:       to.Ptr("a"),
						Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.522Z"); return t }()),
					}},
				VMAgent: &armcompute.VirtualMachineAgentInstanceView{
					ExtensionHandlers: []*armcompute.VirtualMachineExtensionHandlerInstanceView{
						{
							Type: to.Ptr("aaaaaaaaaaaaa"),
							Status: &armcompute.InstanceViewStatus{
								Code:          to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
								DisplayStatus: to.Ptr("aaaaaa"),
								Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
								Message:       to.Ptr("a"),
								Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.522Z"); return t }()),
							},
							TypeHandlerVersion: to.Ptr("aaaaa"),
						}},
					Statuses: []*armcompute.InstanceViewStatus{
						{
							Code:          to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
							DisplayStatus: to.Ptr("aaaaaa"),
							Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
							Message:       to.Ptr("a"),
							Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.522Z"); return t }()),
						}},
					VMAgentVersion: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
				},
				VMHealth: &armcompute.VirtualMachineHealthStatus{
					Status: &armcompute.InstanceViewStatus{
						Code:          to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
						DisplayStatus: to.Ptr("aaaaaa"),
						Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
						Message:       to.Ptr("a"),
						Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.522Z"); return t }()),
					},
				},
				Extensions: []*armcompute.VirtualMachineExtensionInstanceView{
					{
						Name: to.Ptr("aaaaaaaaaaaaaaaaa"),
						Type: to.Ptr("aaaaaaaaa"),
						Statuses: []*armcompute.InstanceViewStatus{
							{
								Code:          to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
								DisplayStatus: to.Ptr("aaaaaa"),
								Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
								Message:       to.Ptr("a"),
								Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.522Z"); return t }()),
							}},
						Substatuses: []*armcompute.InstanceViewStatus{
							{
								Code:          to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
								DisplayStatus: to.Ptr("aaaaaa"),
								Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
								Message:       to.Ptr("a"),
								Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.522Z"); return t }()),
							}},
						TypeHandlerVersion: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaa"),
					}},
			},
			LatestModelApplied:     to.Ptr(true),
			LicenseType:            to.Ptr("aaaaaaaaaa"),
			ModelDefinitionApplied: to.Ptr("VirtualMachineScaleSet"),
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkAPIVersion: to.Ptr(armcompute.NetworkAPIVersionTwoThousandTwenty1101),
				NetworkInterfaceConfigurations: []*armcompute.VirtualMachineNetworkInterfaceConfiguration{
					{
						Name: to.Ptr("aaaaaaaaaaa"),
						Properties: &armcompute.VirtualMachineNetworkInterfaceConfigurationProperties{
							DeleteOption: to.Ptr(armcompute.DeleteOptionsDelete),
							DNSSettings: &armcompute.VirtualMachineNetworkInterfaceDNSSettingsConfiguration{
								DNSServers: []*string{
									to.Ptr("aaaaaa")},
							},
							DscpConfiguration: &armcompute.SubResource{
								ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
							},
							EnableAcceleratedNetworking: to.Ptr(true),
							EnableFpga:                  to.Ptr(true),
							EnableIPForwarding:          to.Ptr(true),
							IPConfigurations: []*armcompute.VirtualMachineNetworkInterfaceIPConfiguration{
								{
									Name: to.Ptr("aa"),
									Properties: &armcompute.VirtualMachineNetworkInterfaceIPConfigurationProperties{
										ApplicationGatewayBackendAddressPools: []*armcompute.SubResource{
											{
												ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
											}},
										ApplicationSecurityGroups: []*armcompute.SubResource{
											{
												ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
											}},
										LoadBalancerBackendAddressPools: []*armcompute.SubResource{
											{
												ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
											}},
										Primary:                 to.Ptr(true),
										PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionsIPv4),
										PublicIPAddressConfiguration: &armcompute.VirtualMachinePublicIPAddressConfiguration{
											Name: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
											Properties: &armcompute.VirtualMachinePublicIPAddressConfigurationProperties{
												DeleteOption: to.Ptr(armcompute.DeleteOptionsDelete),
												DNSSettings: &armcompute.VirtualMachinePublicIPAddressDNSSettingsConfiguration{
													DomainNameLabel: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaa"),
												},
												IdleTimeoutInMinutes: to.Ptr[int32](2),
												IPTags: []*armcompute.VirtualMachineIPTag{
													{
														IPTagType: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaa"),
														Tag:       to.Ptr("aaaaaaaaaaaaaaaaaaaa"),
													}},
												PublicIPAddressVersion:   to.Ptr(armcompute.IPVersionsIPv4),
												PublicIPAllocationMethod: to.Ptr(armcompute.PublicIPAllocationMethodDynamic),
												PublicIPPrefix: &armcompute.SubResource{
													ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
												},
											},
											SKU: &armcompute.PublicIPAddressSKU{
												Name: to.Ptr(armcompute.PublicIPAddressSKUNameBasic),
												Tier: to.Ptr(armcompute.PublicIPAddressSKUTierRegional),
											},
										},
										Subnet: &armcompute.SubResource{
											ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
										},
									},
								}},
							NetworkSecurityGroup: &armcompute.SubResource{
								ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
							},
							Primary: to.Ptr(true),
						},
					}},
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}/virtualMachines/0/networkInterfaces/vmsstestnetconfig5415"),
						Properties: &armcompute.NetworkInterfaceReferenceProperties{
							DeleteOption: to.Ptr(armcompute.DeleteOptionsDelete),
							Primary:      to.Ptr(true),
						},
					}},
			},
			NetworkProfileConfiguration: &armcompute.VirtualMachineScaleSetVMNetworkProfileConfiguration{
				NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
					{
						ID:   to.Ptr("aaaaaaaa"),
						Name: to.Ptr("vmsstestnetconfig5415"),
						Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
							DeleteOption: to.Ptr(armcompute.DeleteOptionsDelete),
							DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
								DNSServers: []*string{},
							},
							EnableAcceleratedNetworking: to.Ptr(true),
							EnableFpga:                  to.Ptr(true),
							EnableIPForwarding:          to.Ptr(true),
							IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
								{
									ID:   to.Ptr("aaaaaaaaa"),
									Name: to.Ptr("vmsstestnetconfig9693"),
									Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
										ApplicationGatewayBackendAddressPools: []*armcompute.SubResource{
											{
												ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
											}},
										ApplicationSecurityGroups: []*armcompute.SubResource{
											{
												ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
											}},
										LoadBalancerBackendAddressPools: []*armcompute.SubResource{
											{
												ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
											}},
										LoadBalancerInboundNatPools: []*armcompute.SubResource{
											{
												ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
											}},
										Primary:                 to.Ptr(true),
										PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
										PublicIPAddressConfiguration: &armcompute.VirtualMachineScaleSetPublicIPAddressConfiguration{
											Name: to.Ptr("aaaaaaaaaaaaaaaaaa"),
											Properties: &armcompute.VirtualMachineScaleSetPublicIPAddressConfigurationProperties{
												DeleteOption: to.Ptr(armcompute.DeleteOptionsDelete),
												DNSSettings: &armcompute.VirtualMachineScaleSetPublicIPAddressConfigurationDNSSettings{
													DomainNameLabel: to.Ptr("aaaaaaaaaaaaaaaaaa"),
												},
												IdleTimeoutInMinutes: to.Ptr[int32](18),
												IPTags: []*armcompute.VirtualMachineScaleSetIPTag{
													{
														IPTagType: to.Ptr("aaaaaaa"),
														Tag:       to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaa"),
													}},
												PublicIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
												PublicIPPrefix: &armcompute.SubResource{
													ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
												},
											},
											SKU: &armcompute.PublicIPAddressSKU{
												Name: to.Ptr(armcompute.PublicIPAddressSKUNameBasic),
												Tier: to.Ptr(armcompute.PublicIPAddressSKUTierRegional),
											},
										},
										Subnet: &armcompute.APIEntityReference{
											ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/vn4071/subnets/sn5503"),
										},
									},
								}},
							NetworkSecurityGroup: &armcompute.SubResource{
								ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
							},
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminPassword:            to.Ptr("aaaaaaaaaaaaaaaa"),
				AdminUsername:            to.Ptr("Foo12"),
				AllowExtensionOperations: to.Ptr(true),
				ComputerName:             to.Ptr("test000000"),
				CustomData:               to.Ptr("aaaa"),
				LinuxConfiguration: &armcompute.LinuxConfiguration{
					DisablePasswordAuthentication: to.Ptr(true),
					PatchSettings: &armcompute.LinuxPatchSettings{
						AssessmentMode: to.Ptr(armcompute.LinuxPatchAssessmentModeImageDefault),
						PatchMode:      to.Ptr(armcompute.LinuxVMGuestPatchModeImageDefault),
					},
					ProvisionVMAgent: to.Ptr(true),
					SSH: &armcompute.SSHConfiguration{
						PublicKeys: []*armcompute.SSHPublicKey{
							{
								Path:    to.Ptr("aaa"),
								KeyData: to.Ptr("aaaaaa"),
							}},
					},
				},
				RequireGuestProvisionSignal: to.Ptr(true),
				Secrets:                     []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					AdditionalUnattendContent: []*armcompute.AdditionalUnattendContent{
						{
							ComponentName: to.Ptr("Microsoft-Windows-Shell-Setup"),
							Content:       to.Ptr("aaaaaaaaaaaaaaaaaaaa"),
							PassName:      to.Ptr("OobeSystem"),
							SettingName:   to.Ptr(armcompute.SettingNamesAutoLogon),
						}},
					EnableAutomaticUpdates: to.Ptr(true),
					PatchSettings: &armcompute.PatchSettings{
						AssessmentMode:    to.Ptr(armcompute.WindowsPatchAssessmentModeImageDefault),
						EnableHotpatching: to.Ptr(true),
						PatchMode:         to.Ptr(armcompute.WindowsVMGuestPatchModeManual),
					},
					ProvisionVMAgent: to.Ptr(true),
					TimeZone:         to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaa"),
					WinRM: &armcompute.WinRMConfiguration{
						Listeners: []*armcompute.WinRMListener{
							{
								CertificateURL: to.Ptr("aaaaaaaaaaaaaaaaaaaaaa"),
								Protocol:       to.Ptr(armcompute.ProtocolTypesHTTP),
							}},
					},
				},
			},
			ProtectionPolicy: &armcompute.VirtualMachineScaleSetVMProtectionPolicy{
				ProtectFromScaleIn:         to.Ptr(true),
				ProtectFromScaleSetActions: to.Ptr(true),
			},
			ProvisioningState: to.Ptr("Succeeded"),
			SecurityProfile: &armcompute.SecurityProfile{
				EncryptionAtHost: to.Ptr(true),
				SecurityType:     to.Ptr(armcompute.SecurityTypesTrustedLaunch),
				UefiSettings: &armcompute.UefiSettings{
					SecureBootEnabled: to.Ptr(true),
					VTpmEnabled:       to.Ptr(true),
				},
			},
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{
					{
						Name:              to.Ptr("vmss3176_vmss3176_0_disk2_6c4f554bdafa49baa780eb2d128ff39d"),
						Caching:           to.Ptr(armcompute.CachingTypesNone),
						CreateOption:      to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
						DeleteOption:      to.Ptr(armcompute.DiskDeleteOptionTypesDelete),
						DetachOption:      to.Ptr(armcompute.DiskDetachOptionTypesForceDetach),
						DiskIOPSReadWrite: to.Ptr[int64](18),
						DiskMBpsReadWrite: to.Ptr[int64](29),
						DiskSizeGB:        to.Ptr[int32](128),
						Image: &armcompute.VirtualHardDisk{
							URI: to.Ptr("https://{storageAccountName}.blob.core.windows.net/{containerName}/{vhdName}.vhd"),
						},
						Lun: to.Ptr[int32](1),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/vmss3176_vmss3176_0_disk2_6c4f554bdafa49baa780eb2d128ff39d"),
							DiskEncryptionSet: &armcompute.DiskEncryptionSetParameters{
								ID: to.Ptr("aaaaaaaaaaaa"),
							},
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
						ToBeDetached: to.Ptr(true),
						Vhd: &armcompute.VirtualHardDisk{
							URI: to.Ptr("https://{storageAccountName}.blob.core.windows.net/{containerName}/{vhdName}.vhd"),
						},
						WriteAcceleratorEnabled: to.Ptr(true),
					}},
				ImageReference: &armcompute.ImageReference{
					ID:                   to.Ptr("a"),
					ExactVersion:         to.Ptr("4.127.20180315"),
					Offer:                to.Ptr("WindowsServer"),
					Publisher:            to.Ptr("MicrosoftWindowsServer"),
					SharedGalleryImageID: to.Ptr("aaaaaaaaaaaaaaaaaaaa"),
					SKU:                  to.Ptr("2012-R2-Datacenter"),
					Version:              to.Ptr("4.127.20180315"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("vmss3176_vmss3176_0_OsDisk_1_6d72b805e50e4de6830303c5055077fc"),
					Caching:      to.Ptr(armcompute.CachingTypesNone),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					DeleteOption: to.Ptr(armcompute.DiskDeleteOptionTypesDelete),
					DiffDiskSettings: &armcompute.DiffDiskSettings{
						Option:    to.Ptr(armcompute.DiffDiskOptionsLocal),
						Placement: to.Ptr(armcompute.DiffDiskPlacementCacheDisk),
					},
					DiskSizeGB: to.Ptr[int32](127),
					EncryptionSettings: &armcompute.DiskEncryptionSettings{
						DiskEncryptionKey: &armcompute.KeyVaultSecretReference{
							SecretURL: to.Ptr("aaaaaaaa"),
							SourceVault: &armcompute.SubResource{
								ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
							},
						},
						Enabled: to.Ptr(true),
						KeyEncryptionKey: &armcompute.KeyVaultKeyReference{
							KeyURL: to.Ptr("aaaaaaaaaaaaaa"),
							SourceVault: &armcompute.SubResource{
								ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
							},
						},
					},
					Image: &armcompute.VirtualHardDisk{
						URI: to.Ptr("https://{storageAccountName}.blob.core.windows.net/{containerName}/{vhdName}.vhd"),
					},
					ManagedDisk: &armcompute.ManagedDiskParameters{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/vmss3176_vmss3176_0_OsDisk_1_6d72b805e50e4de6830303c5055077fc"),
						DiskEncryptionSet: &armcompute.DiskEncryptionSetParameters{
							ID: to.Ptr("aaaaaaaaaaaa"),
						},
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
					Vhd: &armcompute.VirtualHardDisk{
						URI: to.Ptr("https://{storageAccountName}.blob.core.windows.net/{containerName}/{vhdName}.vhd"),
					},
					WriteAcceleratorEnabled: to.Ptr(true),
				},
			},
			UserData: to.Ptr("RXhhbXBsZSBVc2VyRGF0YQ=="),
			VMID:     to.Ptr("42af9fdf-b906-4ad7-9905-8316209ff619"),
		},
		Resources: []*armcompute.VirtualMachineExtension{
			{
				Name:     to.Ptr("CustomScriptExtension-DSC"),
				Type:     to.Ptr("Microsoft.Compute/virtualMachines/extensions"),
				ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM/extensions/CustomScriptExtension-DSC"),
				Location: to.Ptr("westus"),
				Tags:     map[string]*string{},
				Properties: &armcompute.VirtualMachineExtensionProperties{
					Type:                    to.Ptr("CustomScriptExtension"),
					AutoUpgradeMinorVersion: to.Ptr(true),
					EnableAutomaticUpgrade:  to.Ptr(true),
					ForceUpdateTag:          to.Ptr("aaaaaaa"),
					InstanceView: &armcompute.VirtualMachineExtensionInstanceView{
						Name: to.Ptr("aaaaaaaaaaaaaaaaa"),
						Type: to.Ptr("aaaaaaaaa"),
						Statuses: []*armcompute.InstanceViewStatus{
							{
								Code:          to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
								DisplayStatus: to.Ptr("aaaaaa"),
								Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
								Message:       to.Ptr("a"),
								Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.522Z"); return t }()),
							}},
						Substatuses: []*armcompute.InstanceViewStatus{
							{
								Code:          to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
								DisplayStatus: to.Ptr("aaaaaa"),
								Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
								Message:       to.Ptr("a"),
								Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.522Z"); return t }()),
							}},
						TypeHandlerVersion: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaa"),
					},
					ProtectedSettings:  map[string]interface{}{},
					ProvisioningState:  to.Ptr("Succeeded"),
					Publisher:          to.Ptr("Microsoft.Compute"),
					Settings:           map[string]interface{}{},
					SuppressFailures:   to.Ptr(true),
					TypeHandlerVersion: to.Ptr("1.9"),
				},
			}},
		SKU: &armcompute.SKU{
			Name:     to.Ptr("Classic"),
			Capacity: to.Ptr[int64](29),
			Tier:     to.Ptr("aaaaaaaaaaaaaa"),
		},
		Zones: []*string{
			to.Ptr("a")},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSetVM) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineScaleSetVM)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetVMs_Update_MaximumSet_Gen.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetVMs_Update_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSetVMs_Update_MinimumSet_Gen"},
	})
	client, err = armcompute.NewVirtualMachineScaleSetVMsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginUpdate(ctx,
		"rgcompute",
		"aaaaaaaaaaaaaaaaaa",
		"aaaaaaaaaaaaaaaaaaaa",
		armcompute.VirtualMachineScaleSetVM{
			Location: to.Ptr("westus"),
		},
		&armcompute.VirtualMachineScaleSetVMsClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetVMs_Update_MinimumSet_Gen.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetVMs_Update_MinimumSet_Gen.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.VirtualMachineScaleSetVM{
		Location: to.Ptr("westus"),
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSetVM) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineScaleSetVM)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetVMs_Update_MinimumSet_Gen.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestVirtualMachineScaleSetVMs_Delete(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/ForceDeleteVirtualMachineScaleSetVM.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Force Delete a virtual machine from a VM scale set."},
	})
	client, err := armcompute.NewVirtualMachineScaleSetVMsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"myvmScaleSet",
		"0",
		&armcompute.VirtualMachineScaleSetVMsClientBeginDeleteOptions{ForceDeletion: to.Ptr(true),
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/ForceDeleteVirtualMachineScaleSetVM.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/ForceDeleteVirtualMachineScaleSetVM.json: %v", err)
	}
}

func TestVirtualMachineScaleSetVMs_Get(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/GetVirtualMachineScaleSetVMWithUserData.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get VM scale set VM with UserData"},
	})
	client, err := armcompute.NewVirtualMachineScaleSetVMsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := client.Get(ctx,
		"myResourceGroup",
		"{vmss-name}",
		"0",
		&armcompute.VirtualMachineScaleSetVMsClientGetOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/GetVirtualMachineScaleSetVMWithUserData.json: %v", err)
	}
	// Response check
	exampleRes := armcompute.VirtualMachineScaleSetVM{
		Name:     to.Ptr("{vmss-vm-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}/virtualMachines/0"),
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"myTag1": to.Ptr("tagValue1"),
		},
		Properties: &armcompute.VirtualMachineScaleSetVMProperties{
			DiagnosticsProfile: &armcompute.DiagnosticsProfile{
				BootDiagnostics: &armcompute.BootDiagnostics{
					Enabled: to.Ptr(true),
				},
			},
			HardwareProfile:        &armcompute.HardwareProfile{},
			LatestModelApplied:     to.Ptr(true),
			ModelDefinitionApplied: to.Ptr("VirtualMachineScaleSet"),
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}/virtualMachines/0/networkInterfaces/vmsstestnetconfig5415"),
					}},
			},
			NetworkProfileConfiguration: &armcompute.VirtualMachineScaleSetVMNetworkProfileConfiguration{
				NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
					{
						Name: to.Ptr("vmsstestnetconfig5415"),
						Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
							DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
								DNSServers: []*string{},
							},
							EnableAcceleratedNetworking: to.Ptr(false),
							EnableIPForwarding:          to.Ptr(false),
							IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
								{
									Name: to.Ptr("vmsstestnetconfig9693"),
									Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
										PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
										Subnet: &armcompute.APIEntityReference{
											ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/vn4071/subnets/sn5503"),
										},
									},
								}},
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername:               to.Ptr("Foo12"),
				AllowExtensionOperations:    to.Ptr(true),
				ComputerName:                to.Ptr("test000000"),
				RequireGuestProvisionSignal: to.Ptr(true),
				Secrets:                     []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					ProvisionVMAgent:       to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{
					{
						Name:         to.Ptr("vmss3176_vmss3176_0_disk2_6c4f554bdafa49baa780eb2d128ff39d"),
						Caching:      to.Ptr(armcompute.CachingTypesNone),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
						DiskSizeGB:   to.Ptr[int32](128),
						Lun:          to.Ptr[int32](1),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							ID:                 to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/vmss3176_vmss3176_0_disk2_6c4f554bdafa49baa780eb2d128ff39d"),
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
						ToBeDetached: to.Ptr(false),
					}},
				ImageReference: &armcompute.ImageReference{
					ExactVersion: to.Ptr("4.127.20180315"),
					Offer:        to.Ptr("WindowsServer"),
					Publisher:    to.Ptr("MicrosoftWindowsServer"),
					SKU:          to.Ptr("2012-R2-Datacenter"),
					Version:      to.Ptr("4.127.20180315"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("vmss3176_vmss3176_0_OsDisk_1_6d72b805e50e4de6830303c5055077fc"),
					Caching:      to.Ptr(armcompute.CachingTypesNone),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					DiskSizeGB:   to.Ptr[int32](127),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						ID:                 to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/vmss3176_vmss3176_0_OsDisk_1_6d72b805e50e4de6830303c5055077fc"),
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			},
			UserData: to.Ptr("RXhhbXBsZSBVc2VyRGF0YQ=="),
			VMID:     to.Ptr("42af9fdf-b906-4ad7-9905-8316209ff619"),
		},
		Resources: []*armcompute.VirtualMachineExtension{
			{
				Name:     to.Ptr("CustomScriptExtension-DSC"),
				Type:     to.Ptr("Microsoft.Compute/virtualMachines/extensions"),
				ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM/extensions/CustomScriptExtension-DSC"),
				Location: to.Ptr("westus"),
				Tags: map[string]*string{
					"displayName": to.Ptr("CustomScriptExtension-DSC"),
				},
				Properties: &armcompute.VirtualMachineExtensionProperties{
					Type:                    to.Ptr("CustomScriptExtension"),
					AutoUpgradeMinorVersion: to.Ptr(true),
					ProvisioningState:       to.Ptr("Succeeded"),
					Publisher:               to.Ptr("Microsoft.Compute"),
					Settings:                map[string]interface{}{},
					TypeHandlerVersion:      to.Ptr("1.9"),
				},
			}},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSetVM) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineScaleSetVM)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/GetVirtualMachineScaleSetVMWithUserData.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/GetVirtualMachineScaleSetVMWithVMSizeProperties.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get VM scale set VM with VMSizeProperties"},
	})
	client, err = armcompute.NewVirtualMachineScaleSetVMsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err = client.Get(ctx,
		"myResourceGroup",
		"{vmss-name}",
		"0",
		&armcompute.VirtualMachineScaleSetVMsClientGetOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/GetVirtualMachineScaleSetVMWithVMSizeProperties.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.VirtualMachineScaleSetVM{
		Name:     to.Ptr("{vmss-vm-name}"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}/virtualMachines/0"),
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"myTag1": to.Ptr("tagValue1"),
		},
		Properties: &armcompute.VirtualMachineScaleSetVMProperties{
			DiagnosticsProfile: &armcompute.DiagnosticsProfile{
				BootDiagnostics: &armcompute.BootDiagnostics{
					Enabled: to.Ptr(true),
				},
			},
			HardwareProfile: &armcompute.HardwareProfile{
				VMSizeProperties: &armcompute.VMSizeProperties{
					VCPUsAvailable: to.Ptr[int32](1),
					VCPUsPerCore:   to.Ptr[int32](1),
				},
			},
			LatestModelApplied:     to.Ptr(true),
			ModelDefinitionApplied: to.Ptr("VirtualMachineScaleSet"),
			NetworkProfile: &armcompute.NetworkProfile{
				NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}/virtualMachines/0/networkInterfaces/vmsstestnetconfig5415"),
					}},
			},
			NetworkProfileConfiguration: &armcompute.VirtualMachineScaleSetVMNetworkProfileConfiguration{
				NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
					{
						Name: to.Ptr("vmsstestnetconfig5415"),
						Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
							DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
								DNSServers: []*string{},
							},
							EnableAcceleratedNetworking: to.Ptr(false),
							EnableIPForwarding:          to.Ptr(false),
							IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
								{
									Name: to.Ptr("vmsstestnetconfig9693"),
									Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
										PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
										Subnet: &armcompute.APIEntityReference{
											ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/vn4071/subnets/sn5503"),
										},
									},
								}},
							Primary: to.Ptr(true),
						},
					}},
			},
			OSProfile: &armcompute.OSProfile{
				AdminUsername:               to.Ptr("Foo12"),
				AllowExtensionOperations:    to.Ptr(true),
				ComputerName:                to.Ptr("test000000"),
				RequireGuestProvisionSignal: to.Ptr(true),
				Secrets:                     []*armcompute.VaultSecretGroup{},
				WindowsConfiguration: &armcompute.WindowsConfiguration{
					EnableAutomaticUpdates: to.Ptr(true),
					ProvisionVMAgent:       to.Ptr(true),
				},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			StorageProfile: &armcompute.StorageProfile{
				DataDisks: []*armcompute.DataDisk{
					{
						Name:         to.Ptr("vmss3176_vmss3176_0_disk2_6c4f554bdafa49baa780eb2d128ff39d"),
						Caching:      to.Ptr(armcompute.CachingTypesNone),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
						DiskSizeGB:   to.Ptr[int32](128),
						Lun:          to.Ptr[int32](1),
						ManagedDisk: &armcompute.ManagedDiskParameters{
							ID:                 to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/vmss3176_vmss3176_0_disk2_6c4f554bdafa49baa780eb2d128ff39d"),
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
						ToBeDetached: to.Ptr(false),
					}},
				ImageReference: &armcompute.ImageReference{
					ExactVersion: to.Ptr("4.127.20180315"),
					Offer:        to.Ptr("WindowsServer"),
					Publisher:    to.Ptr("MicrosoftWindowsServer"),
					SKU:          to.Ptr("2012-R2-Datacenter"),
					Version:      to.Ptr("4.127.20180315"),
				},
				OSDisk: &armcompute.OSDisk{
					Name:         to.Ptr("vmss3176_vmss3176_0_OsDisk_1_6d72b805e50e4de6830303c5055077fc"),
					Caching:      to.Ptr(armcompute.CachingTypesNone),
					CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
					DiskSizeGB:   to.Ptr[int32](127),
					ManagedDisk: &armcompute.ManagedDiskParameters{
						ID:                 to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/vmss3176_vmss3176_0_OsDisk_1_6d72b805e50e4de6830303c5055077fc"),
						StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
					},
					OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
			},
			UserData: to.Ptr("RXhhbXBsZSBVc2VyRGF0YQ=="),
			VMID:     to.Ptr("42af9fdf-b906-4ad7-9905-8316209ff619"),
		},
		Resources: []*armcompute.VirtualMachineExtension{
			{
				Name:     to.Ptr("CustomScriptExtension-DSC"),
				Type:     to.Ptr("Microsoft.Compute/virtualMachines/extensions"),
				ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM/extensions/CustomScriptExtension-DSC"),
				Location: to.Ptr("westus"),
				Tags: map[string]*string{
					"displayName": to.Ptr("CustomScriptExtension-DSC"),
				},
				Properties: &armcompute.VirtualMachineExtensionProperties{
					Type:                    to.Ptr("CustomScriptExtension"),
					AutoUpgradeMinorVersion: to.Ptr(true),
					ProvisioningState:       to.Ptr("Succeeded"),
					Publisher:               to.Ptr("Microsoft.Compute"),
					Settings:                map[string]interface{}{},
					TypeHandlerVersion:      to.Ptr("1.9"),
				},
			}},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSetVM) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineScaleSetVM)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/GetVirtualMachineScaleSetVMWithVMSizeProperties.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestVirtualMachineScaleSetVMs_GetInstanceView(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/GetVirtualMachineScaleSetVMInstanceViewAutoPlacedOnDedicatedHostGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get instance view of a virtual machine from a VM scale set placed on a dedicated host group through automatic placement."},
	})
	client, err := armcompute.NewVirtualMachineScaleSetVMsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := client.GetInstanceView(ctx,
		"myResourceGroup",
		"myVirtualMachineScaleSet",
		"0",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/GetVirtualMachineScaleSetVMInstanceViewAutoPlacedOnDedicatedHostGroup.json: %v", err)
	}
	// Response check
	exampleRes := armcompute.VirtualMachineScaleSetVMInstanceView{
		AssignedHost: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/hostGroups/myHostGroup/hosts/myHost"),
		Disks: []*armcompute.DiskInstanceView{
			{
				Name: to.Ptr("myOSDisk"),
				Statuses: []*armcompute.InstanceViewStatus{
					{
						Code:          to.Ptr("ProvisioningState/succeeded"),
						DisplayStatus: to.Ptr("Provisioning succeeded"),
						Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
						Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-01T04:58:58.0882815+00:00"); return t }()),
					}},
			}},
		PlatformFaultDomain:  to.Ptr[int32](0),
		PlatformUpdateDomain: to.Ptr[int32](0),
		Statuses: []*armcompute.InstanceViewStatus{
			{
				Code:          to.Ptr("ProvisioningState/succeeded"),
				DisplayStatus: to.Ptr("Provisioning succeeded"),
				Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
				Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-06-05T04:59:58.1852966+00:00"); return t }()),
			},
			{
				Code:          to.Ptr("PowerState/running"),
				DisplayStatus: to.Ptr("VM running"),
				Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
			}},
		VMAgent: &armcompute.VirtualMachineAgentInstanceView{
			Statuses: []*armcompute.InstanceViewStatus{
				{
					Code:          to.Ptr("ProvisioningState/Unavailable"),
					DisplayStatus: to.Ptr("Not Ready"),
					Level:         to.Ptr(armcompute.StatusLevelTypesWarning),
					Message:       to.Ptr("VM status blob is found but not yet populated."),
					Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-01T05:00:32+00:00"); return t }()),
				}},
			VMAgentVersion: to.Ptr("Unknown"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineScaleSetVMInstanceView) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineScaleSetVMInstanceView)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/GetVirtualMachineScaleSetVMInstanceViewAutoPlacedOnDedicatedHostGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestVirtualMachineScaleSetVMs_List(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetVMs_List_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSetVMs_List_MaximumSet_Gen"},
	})
	client, err := armcompute.NewVirtualMachineScaleSetVMsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := client.NewListPager("rgcompute",
		"aaaaaaaaaaaaaaaaaaaaaa",
		&armcompute.VirtualMachineScaleSetVMsClientListOptions{Filter: to.Ptr("aaaaaaaaaaaaaa"),
			Select: to.Ptr("aaaaaaaaaaaaaaaaaaaaa"),
			Expand: to.Ptr("aaaaaaaaaaaaa"),
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetVMs_List_MaximumSet_Gen.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcompute.VirtualMachineScaleSetVMListResult{
			Value: []*armcompute.VirtualMachineScaleSetVM{
				{
					Name:       to.Ptr("{vmss-vm-name}"),
					Type:       to.Ptr("Microsoft.Compute/virtualMachines"),
					ID:         to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}/virtualMachines/0"),
					Location:   to.Ptr("westus"),
					Tags:       map[string]*string{},
					InstanceID: to.Ptr("aaaaaaaaaaaa"),
					Plan: &armcompute.Plan{
						Name:          to.Ptr("aaaaaaaaaa"),
						Product:       to.Ptr("aaaaaaaaaaaaaaaaaaaa"),
						PromotionCode: to.Ptr("aaaaaaaaaaaaaaaaaaaa"),
						Publisher:     to.Ptr("aaaaaaaaaaaaaaaaaaaaaa"),
					},
					Properties: &armcompute.VirtualMachineScaleSetVMProperties{
						AdditionalCapabilities: &armcompute.AdditionalCapabilities{
							HibernationEnabled: to.Ptr(true),
							UltraSSDEnabled:    to.Ptr(true),
						},
						AvailabilitySet: &armcompute.SubResource{
							ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
						},
						DiagnosticsProfile: &armcompute.DiagnosticsProfile{
							BootDiagnostics: &armcompute.BootDiagnostics{
								Enabled:    to.Ptr(true),
								StorageURI: to.Ptr("aaaaaaaaaaaaa"),
							},
						},
						HardwareProfile: &armcompute.HardwareProfile{
							VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesBasicA0),
							VMSizeProperties: &armcompute.VMSizeProperties{
								VCPUsAvailable: to.Ptr[int32](9),
								VCPUsPerCore:   to.Ptr[int32](12),
							},
						},
						InstanceView: &armcompute.VirtualMachineScaleSetVMInstanceView{
							AssignedHost: to.Ptr("aaaaaaa"),
							BootDiagnostics: &armcompute.BootDiagnosticsInstanceView{
								ConsoleScreenshotBlobURI: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaa"),
								SerialConsoleLogBlobURI:  to.Ptr("aaaaaaaa"),
								Status: &armcompute.InstanceViewStatus{
									Code:          to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
									DisplayStatus: to.Ptr("aaaaaa"),
									Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
									Message:       to.Ptr("a"),
									Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.522Z"); return t }()),
								},
							},
							Disks: []*armcompute.DiskInstanceView{
								{
									Name: to.Ptr("aaaaaaaaaaa"),
									EncryptionSettings: []*armcompute.DiskEncryptionSettings{
										{
											DiskEncryptionKey: &armcompute.KeyVaultSecretReference{
												SecretURL: to.Ptr("aaaaaaaa"),
												SourceVault: &armcompute.SubResource{
													ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
												},
											},
											Enabled: to.Ptr(true),
											KeyEncryptionKey: &armcompute.KeyVaultKeyReference{
												KeyURL: to.Ptr("aaaaaaaaaaaaaa"),
												SourceVault: &armcompute.SubResource{
													ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
												},
											},
										}},
									Statuses: []*armcompute.InstanceViewStatus{
										{
											Code:          to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
											DisplayStatus: to.Ptr("aaaaaa"),
											Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
											Message:       to.Ptr("a"),
											Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.522Z"); return t }()),
										}},
								}},
							MaintenanceRedeployStatus: &armcompute.MaintenanceRedeployStatus{
								IsCustomerInitiatedMaintenanceAllowed: to.Ptr(true),
								LastOperationMessage:                  to.Ptr("aaaaaa"),
								LastOperationResultCode:               to.Ptr(armcompute.MaintenanceOperationResultCodeTypesNone),
								MaintenanceWindowEndTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.531Z"); return t }()),
								MaintenanceWindowStartTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.531Z"); return t }()),
								PreMaintenanceWindowEndTime:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.531Z"); return t }()),
								PreMaintenanceWindowStartTime:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.531Z"); return t }()),
							},
							PlacementGroupID:     to.Ptr("aaa"),
							PlatformFaultDomain:  to.Ptr[int32](14),
							PlatformUpdateDomain: to.Ptr[int32](23),
							RdpThumbPrint:        to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaa"),
							Statuses: []*armcompute.InstanceViewStatus{
								{
									Code:          to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
									DisplayStatus: to.Ptr("aaaaaa"),
									Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
									Message:       to.Ptr("a"),
									Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.522Z"); return t }()),
								}},
							VMAgent: &armcompute.VirtualMachineAgentInstanceView{
								ExtensionHandlers: []*armcompute.VirtualMachineExtensionHandlerInstanceView{
									{
										Type: to.Ptr("aaaaaaaaaaaaa"),
										Status: &armcompute.InstanceViewStatus{
											Code:          to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
											DisplayStatus: to.Ptr("aaaaaa"),
											Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
											Message:       to.Ptr("a"),
											Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.522Z"); return t }()),
										},
										TypeHandlerVersion: to.Ptr("aaaaa"),
									}},
								Statuses: []*armcompute.InstanceViewStatus{
									{
										Code:          to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
										DisplayStatus: to.Ptr("aaaaaa"),
										Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
										Message:       to.Ptr("a"),
										Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.522Z"); return t }()),
									}},
								VMAgentVersion: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
							},
							VMHealth: &armcompute.VirtualMachineHealthStatus{
								Status: &armcompute.InstanceViewStatus{
									Code:          to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
									DisplayStatus: to.Ptr("aaaaaa"),
									Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
									Message:       to.Ptr("a"),
									Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.522Z"); return t }()),
								},
							},
							Extensions: []*armcompute.VirtualMachineExtensionInstanceView{
								{
									Name: to.Ptr("aaaaaaaaaaaaaaaaa"),
									Type: to.Ptr("aaaaaaaaa"),
									Statuses: []*armcompute.InstanceViewStatus{
										{
											Code:          to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
											DisplayStatus: to.Ptr("aaaaaa"),
											Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
											Message:       to.Ptr("a"),
											Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.522Z"); return t }()),
										}},
									Substatuses: []*armcompute.InstanceViewStatus{
										{
											Code:          to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
											DisplayStatus: to.Ptr("aaaaaa"),
											Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
											Message:       to.Ptr("a"),
											Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.522Z"); return t }()),
										}},
									TypeHandlerVersion: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaa"),
								}},
						},
						LatestModelApplied:     to.Ptr(true),
						LicenseType:            to.Ptr("aaaaaaaaaa"),
						ModelDefinitionApplied: to.Ptr("VirtualMachineScaleSet"),
						NetworkProfile: &armcompute.NetworkProfile{
							NetworkAPIVersion: to.Ptr(armcompute.NetworkAPIVersionTwoThousandTwenty1101),
							NetworkInterfaceConfigurations: []*armcompute.VirtualMachineNetworkInterfaceConfiguration{
								{
									Name: to.Ptr("aaaaaaaaaaa"),
									Properties: &armcompute.VirtualMachineNetworkInterfaceConfigurationProperties{
										DeleteOption: to.Ptr(armcompute.DeleteOptionsDelete),
										DNSSettings: &armcompute.VirtualMachineNetworkInterfaceDNSSettingsConfiguration{
											DNSServers: []*string{
												to.Ptr("aaaaaa")},
										},
										DscpConfiguration: &armcompute.SubResource{
											ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
										},
										EnableAcceleratedNetworking: to.Ptr(true),
										EnableFpga:                  to.Ptr(true),
										EnableIPForwarding:          to.Ptr(true),
										IPConfigurations: []*armcompute.VirtualMachineNetworkInterfaceIPConfiguration{
											{
												Name: to.Ptr("aa"),
												Properties: &armcompute.VirtualMachineNetworkInterfaceIPConfigurationProperties{
													ApplicationGatewayBackendAddressPools: []*armcompute.SubResource{
														{
															ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
														}},
													ApplicationSecurityGroups: []*armcompute.SubResource{
														{
															ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
														}},
													LoadBalancerBackendAddressPools: []*armcompute.SubResource{
														{
															ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
														}},
													Primary:                 to.Ptr(true),
													PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionsIPv4),
													PublicIPAddressConfiguration: &armcompute.VirtualMachinePublicIPAddressConfiguration{
														Name: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
														Properties: &armcompute.VirtualMachinePublicIPAddressConfigurationProperties{
															DeleteOption: to.Ptr(armcompute.DeleteOptionsDelete),
															DNSSettings: &armcompute.VirtualMachinePublicIPAddressDNSSettingsConfiguration{
																DomainNameLabel: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaa"),
															},
															IdleTimeoutInMinutes: to.Ptr[int32](2),
															IPTags: []*armcompute.VirtualMachineIPTag{
																{
																	IPTagType: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaa"),
																	Tag:       to.Ptr("aaaaaaaaaaaaaaaaaaaa"),
																}},
															PublicIPAddressVersion:   to.Ptr(armcompute.IPVersionsIPv4),
															PublicIPAllocationMethod: to.Ptr(armcompute.PublicIPAllocationMethodDynamic),
															PublicIPPrefix: &armcompute.SubResource{
																ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
															},
														},
														SKU: &armcompute.PublicIPAddressSKU{
															Name: to.Ptr(armcompute.PublicIPAddressSKUNameBasic),
															Tier: to.Ptr(armcompute.PublicIPAddressSKUTierRegional),
														},
													},
													Subnet: &armcompute.SubResource{
														ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
													},
												},
											}},
										NetworkSecurityGroup: &armcompute.SubResource{
											ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
										},
										Primary: to.Ptr(true),
									},
								}},
							NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
								{
									ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{vmss-name}/virtualMachines/0/networkInterfaces/vmsstestnetconfig5415"),
									Properties: &armcompute.NetworkInterfaceReferenceProperties{
										DeleteOption: to.Ptr(armcompute.DeleteOptionsDelete),
										Primary:      to.Ptr(true),
									},
								}},
						},
						NetworkProfileConfiguration: &armcompute.VirtualMachineScaleSetVMNetworkProfileConfiguration{
							NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
								{
									ID:   to.Ptr("aaaaaaaa"),
									Name: to.Ptr("vmsstestnetconfig5415"),
									Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
										DeleteOption: to.Ptr(armcompute.DeleteOptionsDelete),
										DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
											DNSServers: []*string{},
										},
										EnableAcceleratedNetworking: to.Ptr(true),
										EnableFpga:                  to.Ptr(true),
										EnableIPForwarding:          to.Ptr(true),
										IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
											{
												ID:   to.Ptr("aaaaaaaaa"),
												Name: to.Ptr("vmsstestnetconfig9693"),
												Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
													ApplicationGatewayBackendAddressPools: []*armcompute.SubResource{
														{
															ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
														}},
													ApplicationSecurityGroups: []*armcompute.SubResource{
														{
															ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
														}},
													LoadBalancerBackendAddressPools: []*armcompute.SubResource{
														{
															ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
														}},
													LoadBalancerInboundNatPools: []*armcompute.SubResource{
														{
															ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
														}},
													Primary:                 to.Ptr(true),
													PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
													PublicIPAddressConfiguration: &armcompute.VirtualMachineScaleSetPublicIPAddressConfiguration{
														Name: to.Ptr("aaaaaaaaaaaaaaaaaa"),
														Properties: &armcompute.VirtualMachineScaleSetPublicIPAddressConfigurationProperties{
															DeleteOption: to.Ptr(armcompute.DeleteOptionsDelete),
															DNSSettings: &armcompute.VirtualMachineScaleSetPublicIPAddressConfigurationDNSSettings{
																DomainNameLabel: to.Ptr("aaaaaaaaaaaaaaaaaa"),
															},
															IdleTimeoutInMinutes: to.Ptr[int32](18),
															IPTags: []*armcompute.VirtualMachineScaleSetIPTag{
																{
																	IPTagType: to.Ptr("aaaaaaa"),
																	Tag:       to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaa"),
																}},
															PublicIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
															PublicIPPrefix: &armcompute.SubResource{
																ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
															},
														},
														SKU: &armcompute.PublicIPAddressSKU{
															Name: to.Ptr(armcompute.PublicIPAddressSKUNameBasic),
															Tier: to.Ptr(armcompute.PublicIPAddressSKUTierRegional),
														},
													},
													Subnet: &armcompute.APIEntityReference{
														ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/vn4071/subnets/sn5503"),
													},
												},
											}},
										NetworkSecurityGroup: &armcompute.SubResource{
											ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
										},
										Primary: to.Ptr(true),
									},
								}},
						},
						OSProfile: &armcompute.OSProfile{
							AdminPassword:            to.Ptr("aaaaaaaaaaaaaaaa"),
							AdminUsername:            to.Ptr("Foo12"),
							AllowExtensionOperations: to.Ptr(true),
							ComputerName:             to.Ptr("test000000"),
							CustomData:               to.Ptr("aaaa"),
							LinuxConfiguration: &armcompute.LinuxConfiguration{
								DisablePasswordAuthentication: to.Ptr(true),
								PatchSettings: &armcompute.LinuxPatchSettings{
									AssessmentMode: to.Ptr(armcompute.LinuxPatchAssessmentModeImageDefault),
									PatchMode:      to.Ptr(armcompute.LinuxVMGuestPatchModeImageDefault),
								},
								ProvisionVMAgent: to.Ptr(true),
								SSH: &armcompute.SSHConfiguration{
									PublicKeys: []*armcompute.SSHPublicKey{
										{
											Path:    to.Ptr("aaa"),
											KeyData: to.Ptr("aaaaaa"),
										}},
								},
							},
							RequireGuestProvisionSignal: to.Ptr(true),
							Secrets:                     []*armcompute.VaultSecretGroup{},
							WindowsConfiguration: &armcompute.WindowsConfiguration{
								AdditionalUnattendContent: []*armcompute.AdditionalUnattendContent{
									{
										ComponentName: to.Ptr("Microsoft-Windows-Shell-Setup"),
										Content:       to.Ptr("aaaaaaaaaaaaaaaaaaaa"),
										PassName:      to.Ptr("OobeSystem"),
										SettingName:   to.Ptr(armcompute.SettingNamesAutoLogon),
									}},
								EnableAutomaticUpdates: to.Ptr(true),
								PatchSettings: &armcompute.PatchSettings{
									AssessmentMode:    to.Ptr(armcompute.WindowsPatchAssessmentModeImageDefault),
									EnableHotpatching: to.Ptr(true),
									PatchMode:         to.Ptr(armcompute.WindowsVMGuestPatchModeManual),
								},
								ProvisionVMAgent: to.Ptr(true),
								TimeZone:         to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaa"),
								WinRM: &armcompute.WinRMConfiguration{
									Listeners: []*armcompute.WinRMListener{
										{
											CertificateURL: to.Ptr("aaaaaaaaaaaaaaaaaaaaaa"),
											Protocol:       to.Ptr(armcompute.ProtocolTypesHTTP),
										}},
								},
							},
						},
						ProtectionPolicy: &armcompute.VirtualMachineScaleSetVMProtectionPolicy{
							ProtectFromScaleIn:         to.Ptr(true),
							ProtectFromScaleSetActions: to.Ptr(true),
						},
						ProvisioningState: to.Ptr("Succeeded"),
						SecurityProfile: &armcompute.SecurityProfile{
							EncryptionAtHost: to.Ptr(true),
							SecurityType:     to.Ptr(armcompute.SecurityTypesTrustedLaunch),
							UefiSettings: &armcompute.UefiSettings{
								SecureBootEnabled: to.Ptr(true),
								VTpmEnabled:       to.Ptr(true),
							},
						},
						StorageProfile: &armcompute.StorageProfile{
							DataDisks: []*armcompute.DataDisk{
								{
									Name:              to.Ptr("vmss3176_vmss3176_0_disk2_6c4f554bdafa49baa780eb2d128ff39d"),
									Caching:           to.Ptr(armcompute.CachingTypesNone),
									CreateOption:      to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
									DeleteOption:      to.Ptr(armcompute.DiskDeleteOptionTypesDelete),
									DetachOption:      to.Ptr(armcompute.DiskDetachOptionTypesForceDetach),
									DiskIOPSReadWrite: to.Ptr[int64](18),
									DiskMBpsReadWrite: to.Ptr[int64](29),
									DiskSizeGB:        to.Ptr[int32](128),
									Image: &armcompute.VirtualHardDisk{
										URI: to.Ptr("https://{storageAccountName}.blob.core.windows.net/{containerName}/{vhdName}.vhd"),
									},
									Lun: to.Ptr[int32](1),
									ManagedDisk: &armcompute.ManagedDiskParameters{
										ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/vmss3176_vmss3176_0_disk2_6c4f554bdafa49baa780eb2d128ff39d"),
										DiskEncryptionSet: &armcompute.DiskEncryptionSetParameters{
											ID: to.Ptr("aaaaaaaaaaaa"),
										},
										StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
									},
									ToBeDetached: to.Ptr(true),
									Vhd: &armcompute.VirtualHardDisk{
										URI: to.Ptr("https://{storageAccountName}.blob.core.windows.net/{containerName}/{vhdName}.vhd"),
									},
									WriteAcceleratorEnabled: to.Ptr(true),
								}},
							ImageReference: &armcompute.ImageReference{
								ID:                   to.Ptr("a"),
								ExactVersion:         to.Ptr("4.127.20180315"),
								Offer:                to.Ptr("WindowsServer"),
								Publisher:            to.Ptr("MicrosoftWindowsServer"),
								SharedGalleryImageID: to.Ptr("aaaaaaaaaaaaaaaaaaaa"),
								SKU:                  to.Ptr("2012-R2-Datacenter"),
								Version:              to.Ptr("4.127.20180315"),
							},
							OSDisk: &armcompute.OSDisk{
								Name:         to.Ptr("vmss3176_vmss3176_0_OsDisk_1_6d72b805e50e4de6830303c5055077fc"),
								Caching:      to.Ptr(armcompute.CachingTypesNone),
								CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
								DeleteOption: to.Ptr(armcompute.DiskDeleteOptionTypesDelete),
								DiffDiskSettings: &armcompute.DiffDiskSettings{
									Option:    to.Ptr(armcompute.DiffDiskOptionsLocal),
									Placement: to.Ptr(armcompute.DiffDiskPlacementCacheDisk),
								},
								DiskSizeGB: to.Ptr[int32](127),
								EncryptionSettings: &armcompute.DiskEncryptionSettings{
									DiskEncryptionKey: &armcompute.KeyVaultSecretReference{
										SecretURL: to.Ptr("aaaaaaaa"),
										SourceVault: &armcompute.SubResource{
											ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
										},
									},
									Enabled: to.Ptr(true),
									KeyEncryptionKey: &armcompute.KeyVaultKeyReference{
										KeyURL: to.Ptr("aaaaaaaaaaaaaa"),
										SourceVault: &armcompute.SubResource{
											ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"),
										},
									},
								},
								Image: &armcompute.VirtualHardDisk{
									URI: to.Ptr("https://{storageAccountName}.blob.core.windows.net/{containerName}/{vhdName}.vhd"),
								},
								ManagedDisk: &armcompute.ManagedDiskParameters{
									ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/vmss3176_vmss3176_0_OsDisk_1_6d72b805e50e4de6830303c5055077fc"),
									DiskEncryptionSet: &armcompute.DiskEncryptionSetParameters{
										ID: to.Ptr("aaaaaaaaaaaa"),
									},
									StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
								},
								OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
								Vhd: &armcompute.VirtualHardDisk{
									URI: to.Ptr("https://{storageAccountName}.blob.core.windows.net/{containerName}/{vhdName}.vhd"),
								},
								WriteAcceleratorEnabled: to.Ptr(true),
							},
						},
						UserData: to.Ptr("RXhhbXBsZSBVc2VyRGF0YQ=="),
						VMID:     to.Ptr("42af9fdf-b906-4ad7-9905-8316209ff619"),
					},
					Resources: []*armcompute.VirtualMachineExtension{
						{
							Name:     to.Ptr("CustomScriptExtension-DSC"),
							Type:     to.Ptr("Microsoft.Compute/virtualMachines/extensions"),
							ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM/extensions/CustomScriptExtension-DSC"),
							Location: to.Ptr("westus"),
							Tags:     map[string]*string{},
							Properties: &armcompute.VirtualMachineExtensionProperties{
								Type:                    to.Ptr("CustomScriptExtension"),
								AutoUpgradeMinorVersion: to.Ptr(true),
								EnableAutomaticUpgrade:  to.Ptr(true),
								ForceUpdateTag:          to.Ptr("aaaaaaa"),
								InstanceView: &armcompute.VirtualMachineExtensionInstanceView{
									Name: to.Ptr("aaaaaaaaaaaaaaaaa"),
									Type: to.Ptr("aaaaaaaaa"),
									Statuses: []*armcompute.InstanceViewStatus{
										{
											Code:          to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
											DisplayStatus: to.Ptr("aaaaaa"),
											Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
											Message:       to.Ptr("a"),
											Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.522Z"); return t }()),
										}},
									Substatuses: []*armcompute.InstanceViewStatus{
										{
											Code:          to.Ptr("aaaaaaaaaaaaaaaaaaaaaaa"),
											DisplayStatus: to.Ptr("aaaaaa"),
											Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
											Message:       to.Ptr("a"),
											Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.522Z"); return t }()),
										}},
									TypeHandlerVersion: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaa"),
								},
								ProtectedSettings:  map[string]interface{}{},
								ProvisioningState:  to.Ptr("Succeeded"),
								Publisher:          to.Ptr("Microsoft.Compute"),
								Settings:           map[string]interface{}{},
								SuppressFailures:   to.Ptr(true),
								TypeHandlerVersion: to.Ptr("1.9"),
							},
						}},
					SKU: &armcompute.SKU{
						Name:     to.Ptr("Classic"),
						Capacity: to.Ptr[int64](29),
						Tier:     to.Ptr("aaaaaaaaaaaaaa"),
					},
					Zones: []*string{
						to.Ptr("a")},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.VirtualMachineScaleSetVMListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.VirtualMachineScaleSetVMListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetVMs_List_MaximumSet_Gen.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetVMs_List_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSetVMs_List_MinimumSet_Gen"},
	})
	client, err = armcompute.NewVirtualMachineScaleSetVMsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager = client.NewListPager("rgcompute",
		"aaaaaaaaaaaaaaaaaaaaaaaaaaaa",
		&armcompute.VirtualMachineScaleSetVMsClientListOptions{Filter: nil,
			Select: nil,
			Expand: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetVMs_List_MinimumSet_Gen.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcompute.VirtualMachineScaleSetVMListResult{
			Value: []*armcompute.VirtualMachineScaleSetVM{
				{
					Location: to.Ptr("westus"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.VirtualMachineScaleSetVMListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.VirtualMachineScaleSetVMListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetVMs_List_MinimumSet_Gen.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualMachineScaleSetVMs_PowerOff(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetVMs_PowerOff_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSetVMs_PowerOff_MaximumSet_Gen"},
	})
	client, err := armcompute.NewVirtualMachineScaleSetVMsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginPowerOff(ctx,
		"rgcompute",
		"aaaaaa",
		"aaaaaaaaa",
		&armcompute.VirtualMachineScaleSetVMsClientBeginPowerOffOptions{SkipShutdown: to.Ptr(true),
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetVMs_PowerOff_MaximumSet_Gen.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetVMs_PowerOff_MaximumSet_Gen.json: %v", err)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetVMs_PowerOff_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSetVMs_PowerOff_MinimumSet_Gen"},
	})
	client, err = armcompute.NewVirtualMachineScaleSetVMsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginPowerOff(ctx,
		"rgcompute",
		"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
		"aaaaaaaaaaaaaaaaaaaaaa",
		&armcompute.VirtualMachineScaleSetVMsClientBeginPowerOffOptions{SkipShutdown: nil,
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetVMs_PowerOff_MinimumSet_Gen.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetVMs_PowerOff_MinimumSet_Gen.json: %v", err)
	}
}

func TestVirtualMachineScaleSetVMs_Restart(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetVMs_Restart_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSetVMs_Restart_MaximumSet_Gen"},
	})
	client, err := armcompute.NewVirtualMachineScaleSetVMsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginRestart(ctx,
		"rgcompute",
		"aa",
		"aaaaaaaaaaaaaaaaa",
		&armcompute.VirtualMachineScaleSetVMsClientBeginRestartOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetVMs_Restart_MaximumSet_Gen.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetVMs_Restart_MaximumSet_Gen.json: %v", err)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetVMs_Restart_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSetVMs_Restart_MinimumSet_Gen"},
	})
	client, err = armcompute.NewVirtualMachineScaleSetVMsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginRestart(ctx,
		"rgcompute",
		"aaaaaaaaaaaa",
		"aaaaaa",
		&armcompute.VirtualMachineScaleSetVMsClientBeginRestartOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetVMs_Restart_MinimumSet_Gen.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetVMs_Restart_MinimumSet_Gen.json: %v", err)
	}
}

func TestVirtualMachineScaleSetVMs_Start(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetVMs_Start_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSetVMs_Start_MaximumSet_Gen"},
	})
	client, err := armcompute.NewVirtualMachineScaleSetVMsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginStart(ctx,
		"rgcompute",
		"aaaaaaaaaaaaaa",
		"aaaaaaaaaaaaa",
		&armcompute.VirtualMachineScaleSetVMsClientBeginStartOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetVMs_Start_MaximumSet_Gen.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetVMs_Start_MaximumSet_Gen.json: %v", err)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetVMs_Start_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSetVMs_Start_MinimumSet_Gen"},
	})
	client, err = armcompute.NewVirtualMachineScaleSetVMsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginStart(ctx,
		"rgcompute",
		"aaaaaaaaaaaaaaaaaaaaaaaa",
		"aaaaaaaaaaaaaaaaa",
		&armcompute.VirtualMachineScaleSetVMsClientBeginStartOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetVMs_Start_MinimumSet_Gen.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetVMs_Start_MinimumSet_Gen.json: %v", err)
	}
}

func TestVirtualMachineScaleSetVMs_Redeploy(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetVMs_Redeploy_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSetVMs_Redeploy_MaximumSet_Gen"},
	})
	client, err := armcompute.NewVirtualMachineScaleSetVMsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginRedeploy(ctx,
		"rgcompute",
		"aaaaaaaaaaaaaaaaaaaaaaa",
		"aaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
		&armcompute.VirtualMachineScaleSetVMsClientBeginRedeployOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetVMs_Redeploy_MaximumSet_Gen.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetVMs_Redeploy_MaximumSet_Gen.json: %v", err)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetVMs_Redeploy_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSetVMs_Redeploy_MinimumSet_Gen"},
	})
	client, err = armcompute.NewVirtualMachineScaleSetVMsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginRedeploy(ctx,
		"rgcompute",
		"aaaaaaaaaaaaa",
		"aaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
		&armcompute.VirtualMachineScaleSetVMsClientBeginRedeployOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetVMs_Redeploy_MinimumSet_Gen.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetVMs_Redeploy_MinimumSet_Gen.json: %v", err)
	}
}

func TestVirtualMachineScaleSetVMs_RetrieveBootDiagnosticsData(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/RetrieveBootDiagnosticsDataVMScaleSetVM.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RetrieveBootDiagnosticsData of a virtual machine."},
	})
	client, err := armcompute.NewVirtualMachineScaleSetVMsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := client.RetrieveBootDiagnosticsData(ctx,
		"ResourceGroup",
		"myvmScaleSet",
		"0",
		&armcompute.VirtualMachineScaleSetVMsClientRetrieveBootDiagnosticsDataOptions{SasURIExpirationTimeInMinutes: to.Ptr[int32](60)})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/RetrieveBootDiagnosticsDataVMScaleSetVM.json: %v", err)
	}
	// Response check
	exampleRes := armcompute.RetrieveBootDiagnosticsDataResult{
		ConsoleScreenshotBlobURI: to.Ptr("https://storageuri/myvmScaleSetinstance.screenshot.bmp?{saskey}"),
		SerialConsoleLogBlobURI:  to.Ptr("https://storageuri/myvmScaleSetinstance.serialconsole.log?{saskey}"),
	}
	if !reflect.DeepEqual(exampleRes, res.RetrieveBootDiagnosticsDataResult) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.RetrieveBootDiagnosticsDataResult)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/RetrieveBootDiagnosticsDataVMScaleSetVM.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestVirtualMachineScaleSetVMs_PerformMaintenance(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetVMs_PerformMaintenance_MaximumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSetVMs_PerformMaintenance_MaximumSet_Gen"},
	})
	client, err := armcompute.NewVirtualMachineScaleSetVMsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginPerformMaintenance(ctx,
		"rgcompute",
		"aaaaaaaaaaaaaa",
		"aaaaaaaaaaaa",
		&armcompute.VirtualMachineScaleSetVMsClientBeginPerformMaintenanceOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetVMs_PerformMaintenance_MaximumSet_Gen.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetVMs_PerformMaintenance_MaximumSet_Gen.json: %v", err)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetVMs_PerformMaintenance_MinimumSet_Gen.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSetVMs_PerformMaintenance_MinimumSet_Gen"},
	})
	client, err = armcompute.NewVirtualMachineScaleSetVMsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginPerformMaintenance(ctx,
		"rgcompute",
		"aaaaaaaaaa",
		"aaaa",
		&armcompute.VirtualMachineScaleSetVMsClientBeginPerformMaintenanceOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetVMs_PerformMaintenance_MinimumSet_Gen.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetVMs_PerformMaintenance_MinimumSet_Gen.json: %v", err)
	}
}

func TestVirtualMachineScaleSetVMs_SimulateEviction(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/SimulateEvictionOfVmssVM.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Simulate Eviction a virtual machine."},
	})
	client, err := armcompute.NewVirtualMachineScaleSetVMsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	_, err = client.SimulateEviction(ctx,
		"ResourceGroup",
		"VmScaleSetName",
		"InstanceId",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/SimulateEvictionOfVmssVM.json: %v", err)
	}
}

func TestVirtualMachineScaleSetVMs_RunCommand(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/runCommands/VMScaleSetRunCommand.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineScaleSetVMs_RunCommand"},
	})
	client, err := armcompute.NewVirtualMachineScaleSetVMsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginRunCommand(ctx,
		"myResourceGroup",
		"myVirtualMachineScaleSet",
		"0",
		armcompute.RunCommandInput{
			CommandID: to.Ptr("RunPowerShellScript"),
			Script: []*string{
				to.Ptr("Write-Host Hello World!")},
		},
		&armcompute.VirtualMachineScaleSetVMsClientBeginRunCommandOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/runCommands/VMScaleSetRunCommand.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/runCommands/VMScaleSetRunCommand.json: %v", err)
	}
	// Response check
	exampleRes := armcompute.RunCommandResult{
		Value: []*armcompute.InstanceViewStatus{
			{
				Code:          to.Ptr("ComponentStatus/StdOut/succeeded"),
				DisplayStatus: to.Ptr("Provisioning succeeded"),
				Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
				Message:       to.Ptr("Hello World!"),
			},
			{
				Code:          to.Ptr("ComponentStatus/StdErr/succeeded"),
				DisplayStatus: to.Ptr("Provisioning succeeded"),
				Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
				Message:       to.Ptr(""),
			}},
	}
	if !reflect.DeepEqual(exampleRes, res.RunCommandResult) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.RunCommandResult)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/runCommands/VMScaleSetRunCommand.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestLogAnalytics_ExportRequestRateByInterval(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/LogAnalyticsRequestRateByInterval.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Export logs which contain all Api requests made to Compute Resource Provider within the given time period broken down by intervals."},
	})
	client, err := armcompute.NewLogAnalyticsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginExportRequestRateByInterval(ctx,
		"westus",
		armcompute.RequestRateByIntervalInput{
			BlobContainerSasURI: to.Ptr("https://somesasuri"),
			FromTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-21T01:54:06.862601Z"); return t }()),
			GroupByResourceName: to.Ptr(true),
			ToTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-23T01:54:06.862601Z"); return t }()),
			IntervalLength:      to.Ptr(armcompute.IntervalInMinsFiveMins),
		},
		&armcompute.LogAnalyticsClientBeginExportRequestRateByIntervalOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/LogAnalyticsRequestRateByInterval.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/LogAnalyticsRequestRateByInterval.json: %v", err)
	}
	// Response check
	exampleRes := armcompute.LogAnalyticsOperationResult{
		Properties: &armcompute.LogAnalyticsOutput{
			Output: to.Ptr("https://crptestar4227.blob.core.windows.net:443/sascontainer/RequestRateByInterval_20180121-0154_20180123-0154.csv"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.LogAnalyticsOperationResult) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.LogAnalyticsOperationResult)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/LogAnalyticsRequestRateByInterval.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestLogAnalytics_ExportThrottledRequests(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/LogAnalyticsThrottledRequests.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Export logs which contain all throttled Api requests made to Compute Resource Provider within the given time period."},
	})
	client, err := armcompute.NewLogAnalyticsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginExportThrottledRequests(ctx,
		"westus",
		armcompute.ThrottledRequestsInput{
			BlobContainerSasURI:        to.Ptr("https://somesasuri"),
			FromTime:                   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-21T01:54:06.862601Z"); return t }()),
			GroupByClientApplicationID: to.Ptr(false),
			GroupByOperationName:       to.Ptr(true),
			GroupByResourceName:        to.Ptr(false),
			GroupByUserAgent:           to.Ptr(false),
			ToTime:                     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-23T01:54:06.862601Z"); return t }()),
		},
		&armcompute.LogAnalyticsClientBeginExportThrottledRequestsOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/LogAnalyticsThrottledRequests.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/LogAnalyticsThrottledRequests.json: %v", err)
	}
	// Response check
	exampleRes := armcompute.LogAnalyticsOperationResult{
		Properties: &armcompute.LogAnalyticsOutput{
			Output: to.Ptr("https://crptestar4227.blob.core.windows.net:443/sascontainer/ThrottledRequests_20180121-0154_20180123-0154.csv"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.LogAnalyticsOperationResult) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.LogAnalyticsOperationResult)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/LogAnalyticsThrottledRequests.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestVirtualMachineRunCommands_List(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/runCommands/VirtualMachineRunCommandList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineRunCommandList"},
	})
	client, err := armcompute.NewVirtualMachineRunCommandsClient("subid", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := client.NewListPager("SoutheastAsia",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/runCommands/VirtualMachineRunCommandList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcompute.RunCommandListResult{
			Value: []*armcompute.RunCommandDocumentBase{
				{
					Description: to.Ptr("Configure the machine to enable remote PowerShell."),
					Schema:      to.Ptr("http://schema.management.azure.com/schemas/2016-11-17/runcommands.json"),
					ID:          to.Ptr("EnableRemotePS"),
					Label:       to.Ptr("Enable remote PowerShell"),
					OSType:      to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
				{
					Description: to.Ptr("Shows detailed information for the IP address, subnet mask and default gateway for each adapter bound to TCP/IP."),
					Schema:      to.Ptr("http://schema.management.azure.com/schemas/2016-11-17/runcommands.json"),
					ID:          to.Ptr("IPConfig"),
					Label:       to.Ptr("List IP configuration"),
					OSType:      to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
				{
					Description: to.Ptr("Custom multiline PowerShell script should be defined in script property. Optional parameters can be set in parameters property."),
					Schema:      to.Ptr("http://schema.management.azure.com/schemas/2016-11-17/runcommands.json"),
					ID:          to.Ptr("RunPowerShellScript"),
					Label:       to.Ptr("Executes a PowerShell script"),
					OSType:      to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
				{
					Description: to.Ptr("Custom multiline shell script should be defined in script property. Optional parameters can be set in parameters property."),
					Schema:      to.Ptr("http://schema.management.azure.com/schemas/2016-11-17/runcommands.json"),
					ID:          to.Ptr("RunShellScript"),
					Label:       to.Ptr("Executes a Linux shell script"),
					OSType:      to.Ptr(armcompute.OperatingSystemTypesLinux),
				},
				{
					Description: to.Ptr("Get the configuration of all network interfaces."),
					Schema:      to.Ptr("http://schema.management.azure.com/schemas/2016-11-17/runcommands.json"),
					ID:          to.Ptr("ifconfig"),
					Label:       to.Ptr("List network configuration"),
					OSType:      to.Ptr(armcompute.OperatingSystemTypesLinux),
				},
				{
					Description: to.Ptr("Checks if the local Administrator account is disabled, and if so enables it."),
					Schema:      to.Ptr("http://schema.management.azure.com/schemas/2016-11-17/runcommands.json"),
					ID:          to.Ptr("EnableAdminAccount"),
					Label:       to.Ptr("Enable administrator account"),
					OSType:      to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
				{
					Description: to.Ptr("Reset built-in Administrator account password."),
					Schema:      to.Ptr("http://schema.management.azure.com/schemas/2016-11-17/runcommands.json"),
					ID:          to.Ptr("ResetAccountPassword"),
					Label:       to.Ptr("Reset built-in Administrator account password"),
					OSType:      to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
				{
					Description: to.Ptr("Checks registry settings and domain policy settings. Suggests policy actions if machine is part of a domain or modifies the settings to default values."),
					Schema:      to.Ptr("http://schema.management.azure.com/schemas/2016-11-17/runcommands.json"),
					ID:          to.Ptr("RDPSettings"),
					Label:       to.Ptr("Verify RDP Listener Settings"),
					OSType:      to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
				{
					Description: to.Ptr("Sets the default or user specified port number for Remote Desktop connections. Enables firewall rule for inbound access to the port."),
					Schema:      to.Ptr("http://schema.management.azure.com/schemas/2016-11-17/runcommands.json"),
					ID:          to.Ptr("SetRDPPort"),
					Label:       to.Ptr("Set Remote Desktop port"),
					OSType:      to.Ptr(armcompute.OperatingSystemTypesWindows),
				},
				{
					Description: to.Ptr("Removes the SSL certificate tied to the RDP listener and restores the RDP listerner security to default. Use this script if you see any issues with the certificate."),
					Schema:      to.Ptr("http://schema.management.azure.com/schemas/2016-11-17/runcommands.json"),
					ID:          to.Ptr("ResetRDPCert"),
					Label:       to.Ptr("Restore RDP Authentication mode to defaults"),
					OSType:      to.Ptr(armcompute.OperatingSystemTypesWindows),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.RunCommandListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.RunCommandListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/runCommands/VirtualMachineRunCommandList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualMachineRunCommands_Get(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/runCommands/VirtualMachineRunCommandGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"VirtualMachineRunCommandGet"},
	})
	client, err := armcompute.NewVirtualMachineRunCommandsClient("24fb23e3-6ba3-41f0-9b6e-e41131d5d61e", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := client.Get(ctx,
		"SoutheastAsia",
		"RunPowerShellScript",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/runCommands/VirtualMachineRunCommandGet.json: %v", err)
	}
	// Response check
	exampleRes := armcompute.RunCommandDocument{
		Description: to.Ptr("Custom multiline PowerShell script should be defined in script property. Optional parameters can be set in parameters property."),
		Schema:      to.Ptr("http://schema.management.azure.com/schemas/2016-11-17/runcommands.json"),
		ID:          to.Ptr("RunPowerShellScript"),
		Label:       to.Ptr("Executes a PowerShell script"),
		OSType:      to.Ptr(armcompute.OperatingSystemTypesWindows),
		Parameters: []*armcompute.RunCommandParameterDefinition{
			{
				Name:         to.Ptr("arg1"),
				Type:         to.Ptr("string"),
				DefaultValue: to.Ptr("value1"),
			},
			{
				Name:         to.Ptr("arg2"),
				Type:         to.Ptr("string"),
				DefaultValue: to.Ptr("value2"),
			}},
		Script: []*string{
			to.Ptr("param("),
			to.Ptr("    [string]$arg1,"),
			to.Ptr("    [string]$arg2"),
			to.Ptr(")"),
			to.Ptr("Write-Host This is a sample script with parameters $arg1 $arg2")},
	}
	if !reflect.DeepEqual(exampleRes, res.RunCommandDocument) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.RunCommandDocument)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/runCommands/VirtualMachineRunCommandGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestVirtualMachineRunCommands_CreateOrUpdate(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/runCommands/CreateOrUpdateRunCommand.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a run command."},
	})
	client, err := armcompute.NewVirtualMachineRunCommandsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myVM",
		"myRunCommand",
		armcompute.VirtualMachineRunCommand{
			Location: to.Ptr("West US"),
			Properties: &armcompute.VirtualMachineRunCommandProperties{
				AsyncExecution: to.Ptr(false),
				Parameters: []*armcompute.RunCommandInputParameter{
					{
						Name:  to.Ptr("param1"),
						Value: to.Ptr("value1"),
					},
					{
						Name:  to.Ptr("param2"),
						Value: to.Ptr("value2"),
					}},
				RunAsPassword: to.Ptr("<runAsPassword>"),
				RunAsUser:     to.Ptr("user1"),
				Source: &armcompute.VirtualMachineRunCommandScriptSource{
					Script: to.Ptr("Write-Host Hello World!"),
				},
				TimeoutInSeconds: to.Ptr[int32](3600),
			},
		},
		&armcompute.VirtualMachineRunCommandsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/runCommands/CreateOrUpdateRunCommand.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/runCommands/CreateOrUpdateRunCommand.json: %v", err)
	}
	// Response check
	exampleRes := armcompute.VirtualMachineRunCommand{
		Name:     to.Ptr("myRunCommand"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines/runCommands"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM/runCommands/myRunCommand"),
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"tag1": to.Ptr("value1"),
			"tag2": to.Ptr("value2"),
		},
		Properties: &armcompute.VirtualMachineRunCommandProperties{
			AsyncExecution: to.Ptr(false),
			Parameters: []*armcompute.RunCommandInputParameter{
				{
					Name:  to.Ptr("param1"),
					Value: to.Ptr("value1"),
				},
				{
					Name:  to.Ptr("param2"),
					Value: to.Ptr("value2"),
				}},
			ProvisioningState: to.Ptr("Succeeded"),
			RunAsUser:         to.Ptr("user1"),
			Source: &armcompute.VirtualMachineRunCommandScriptSource{
				Script: to.Ptr("Write-Host Hello World!"),
			},
			TimeoutInSeconds: to.Ptr[int32](3600),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineRunCommand) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineRunCommand)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/runCommands/CreateOrUpdateRunCommand.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestVirtualMachineRunCommands_Update(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/runCommands/UpdateRunCommand.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a run command."},
	})
	client, err := armcompute.NewVirtualMachineRunCommandsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginUpdate(ctx,
		"myResourceGroup",
		"myVM",
		"myRunCommand",
		armcompute.VirtualMachineRunCommandUpdate{
			Properties: &armcompute.VirtualMachineRunCommandProperties{
				Source: &armcompute.VirtualMachineRunCommandScriptSource{
					Script: to.Ptr("Write-Host Script Source Updated!"),
				},
			},
		},
		&armcompute.VirtualMachineRunCommandsClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/runCommands/UpdateRunCommand.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/runCommands/UpdateRunCommand.json: %v", err)
	}
	// Response check
	exampleRes := armcompute.VirtualMachineRunCommand{
		Name:     to.Ptr("myRunCommand"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines/runCommands"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM/runCommands/myRunCommand"),
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"tag1": to.Ptr("value1"),
			"tag2": to.Ptr("value2"),
		},
		Properties: &armcompute.VirtualMachineRunCommandProperties{
			AsyncExecution: to.Ptr(false),
			Parameters: []*armcompute.RunCommandInputParameter{
				{
					Name:  to.Ptr("param1"),
					Value: to.Ptr("value1"),
				},
				{
					Name:  to.Ptr("param2"),
					Value: to.Ptr("value2"),
				}},
			ProvisioningState: to.Ptr("Succeeded"),
			RunAsUser:         to.Ptr("user1"),
			Source: &armcompute.VirtualMachineRunCommandScriptSource{
				Script: to.Ptr("Write-Host Script Source Updated!"),
			},
			TimeoutInSeconds: to.Ptr[int32](3600),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineRunCommand) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineRunCommand)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/runCommands/UpdateRunCommand.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestVirtualMachineRunCommands_Delete(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/runCommands/DeleteRunCommand.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a run command."},
	})
	client, err := armcompute.NewVirtualMachineRunCommandsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"myVM",
		"myRunCommand",
		&armcompute.VirtualMachineRunCommandsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/runCommands/DeleteRunCommand.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/runCommands/DeleteRunCommand.json: %v", err)
	}
}

func TestVirtualMachineRunCommands_GetByVirtualMachine(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/runCommands/GetRunCommand.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a run command."},
	})
	client, err := armcompute.NewVirtualMachineRunCommandsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := client.GetByVirtualMachine(ctx,
		"myResourceGroup",
		"myVM",
		"myRunCommand",
		&armcompute.VirtualMachineRunCommandsClientGetByVirtualMachineOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/runCommands/GetRunCommand.json: %v", err)
	}
	// Response check
	exampleRes := armcompute.VirtualMachineRunCommand{
		Name:     to.Ptr("myRunCommand"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachines/runCommands"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM/runCommands/myRunCommand"),
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"tag1": to.Ptr("value1"),
			"tag2": to.Ptr("value2"),
		},
		Properties: &armcompute.VirtualMachineRunCommandProperties{
			AsyncExecution: to.Ptr(false),
			Parameters: []*armcompute.RunCommandInputParameter{
				{
					Name:  to.Ptr("param1"),
					Value: to.Ptr("value1"),
				},
				{
					Name:  to.Ptr("param2"),
					Value: to.Ptr("value2"),
				}},
			ProvisioningState: to.Ptr("Succeeded"),
			RunAsUser:         to.Ptr("user1"),
			Source: &armcompute.VirtualMachineRunCommandScriptSource{
				Script: to.Ptr("Write-Host Hello World!"),
			},
			TimeoutInSeconds: to.Ptr[int32](3600),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineRunCommand) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineRunCommand)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/runCommands/GetRunCommand.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestVirtualMachineRunCommands_ListByVirtualMachine(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/runCommands/ListRunCommandsInVM.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List run commands in a Virtual Machine."},
	})
	client, err := armcompute.NewVirtualMachineRunCommandsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := client.NewListByVirtualMachinePager("myResourceGroup",
		"myVM",
		&armcompute.VirtualMachineRunCommandsClientListByVirtualMachineOptions{Expand: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/runCommands/ListRunCommandsInVM.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcompute.VirtualMachineRunCommandsListResult{
			Value: []*armcompute.VirtualMachineRunCommand{
				{
					Name:     to.Ptr("myRunCommand"),
					Type:     to.Ptr("Microsoft.Compute/virtualMachines/runCommands"),
					ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM/runCommands/myRunCommand"),
					Location: to.Ptr("westus"),
					Tags: map[string]*string{
						"tag1": to.Ptr("value1"),
						"tag2": to.Ptr("value2"),
					},
					Properties: &armcompute.VirtualMachineRunCommandProperties{
						AsyncExecution: to.Ptr(false),
						Parameters: []*armcompute.RunCommandInputParameter{
							{
								Name:  to.Ptr("param1"),
								Value: to.Ptr("value1"),
							},
							{
								Name:  to.Ptr("param2"),
								Value: to.Ptr("value2"),
							}},
						ProvisioningState: to.Ptr("Succeeded"),
						RunAsUser:         to.Ptr("user1"),
						Source: &armcompute.VirtualMachineRunCommandScriptSource{
							Script: to.Ptr("Write-Host Hello World!"),
						},
						TimeoutInSeconds: to.Ptr[int32](0),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.VirtualMachineRunCommandsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.VirtualMachineRunCommandsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/runCommands/ListRunCommandsInVM.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualMachineScaleSetVMRunCommands_CreateOrUpdate(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/runCommands/CreateOrUpdateVirtualMachineScaleSetVMRunCommands.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create VirtualMachineScaleSet VM run command."},
	})
	client, err := armcompute.NewVirtualMachineScaleSetVMRunCommandsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myvmScaleSet",
		"0",
		"myRunCommand",
		armcompute.VirtualMachineRunCommand{
			Location: to.Ptr("West US"),
			Properties: &armcompute.VirtualMachineRunCommandProperties{
				AsyncExecution: to.Ptr(false),
				Parameters: []*armcompute.RunCommandInputParameter{
					{
						Name:  to.Ptr("param1"),
						Value: to.Ptr("value1"),
					},
					{
						Name:  to.Ptr("param2"),
						Value: to.Ptr("value2"),
					}},
				RunAsPassword: to.Ptr("<runAsPassword>"),
				RunAsUser:     to.Ptr("user1"),
				Source: &armcompute.VirtualMachineRunCommandScriptSource{
					Script: to.Ptr("Write-Host Hello World!"),
				},
				TimeoutInSeconds: to.Ptr[int32](3600),
			},
		},
		&armcompute.VirtualMachineScaleSetVMRunCommandsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/runCommands/CreateOrUpdateVirtualMachineScaleSetVMRunCommands.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/runCommands/CreateOrUpdateVirtualMachineScaleSetVMRunCommands.json: %v", err)
	}
	// Response check
	exampleRes := armcompute.VirtualMachineRunCommand{
		Name:     to.Ptr("myRunCommand"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets/virtualMachines/runCommands"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/myvmScaleSet/virtualMachines/0/runCommands/myRunCommand"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.VirtualMachineRunCommandProperties{
			AsyncExecution: to.Ptr(false),
			Parameters: []*armcompute.RunCommandInputParameter{
				{
					Name:  to.Ptr("param1"),
					Value: to.Ptr("value1"),
				},
				{
					Name:  to.Ptr("param2"),
					Value: to.Ptr("value2"),
				}},
			ProvisioningState: to.Ptr("Succeeded"),
			RunAsUser:         to.Ptr("user1"),
			Source: &armcompute.VirtualMachineRunCommandScriptSource{
				Script: to.Ptr("Write-Host Hello World!"),
			},
			TimeoutInSeconds: to.Ptr[int32](3600),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineRunCommand) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineRunCommand)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/runCommands/CreateOrUpdateVirtualMachineScaleSetVMRunCommands.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestVirtualMachineScaleSetVMRunCommands_Update(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/runCommands/UpdateVirtualMachineScaleSetVMRunCommands.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update VirtualMachineScaleSet VM run command."},
	})
	client, err := armcompute.NewVirtualMachineScaleSetVMRunCommandsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginUpdate(ctx,
		"myResourceGroup",
		"myvmScaleSet",
		"0",
		"myRunCommand",
		armcompute.VirtualMachineRunCommandUpdate{
			Properties: &armcompute.VirtualMachineRunCommandProperties{
				Source: &armcompute.VirtualMachineRunCommandScriptSource{
					Script: to.Ptr("Write-Host Script Source Updated!"),
				},
			},
		},
		&armcompute.VirtualMachineScaleSetVMRunCommandsClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/runCommands/UpdateVirtualMachineScaleSetVMRunCommands.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/runCommands/UpdateVirtualMachineScaleSetVMRunCommands.json: %v", err)
	}
	// Response check
	exampleRes := armcompute.VirtualMachineRunCommand{
		Name:     to.Ptr("myRunCommand"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets/virtualMachines/runCommands"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/myvmScaleSet/virtualMachines/0/runCommands/myRunCommand"),
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"tag1": to.Ptr("value1"),
			"tag2": to.Ptr("value2"),
		},
		Properties: &armcompute.VirtualMachineRunCommandProperties{
			AsyncExecution: to.Ptr(false),
			Parameters: []*armcompute.RunCommandInputParameter{
				{
					Name:  to.Ptr("param1"),
					Value: to.Ptr("value1"),
				},
				{
					Name:  to.Ptr("param2"),
					Value: to.Ptr("value2"),
				}},
			ProvisioningState: to.Ptr("Succeeded"),
			RunAsUser:         to.Ptr("user1"),
			Source: &armcompute.VirtualMachineRunCommandScriptSource{
				Script: to.Ptr("Write-Host Script Source Updated!"),
			},
			TimeoutInSeconds: to.Ptr[int32](3600),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineRunCommand) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineRunCommand)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/runCommands/UpdateVirtualMachineScaleSetVMRunCommands.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestVirtualMachineScaleSetVMRunCommands_Delete(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/runCommands/DeleteVirtualMachineScaleSetVMRunCommands.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete VirtualMachineScaleSet VM run command."},
	})
	client, err := armcompute.NewVirtualMachineScaleSetVMRunCommandsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"myvmScaleSet",
		"0",
		"myRunCommand",
		&armcompute.VirtualMachineScaleSetVMRunCommandsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/runCommands/DeleteVirtualMachineScaleSetVMRunCommands.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/runCommands/DeleteVirtualMachineScaleSetVMRunCommands.json: %v", err)
	}
}

func TestVirtualMachineScaleSetVMRunCommands_Get(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/runCommands/GetVirtualMachineScaleSetVMRunCommands.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get VirtualMachineScaleSet VM run commands."},
	})
	client, err := armcompute.NewVirtualMachineScaleSetVMRunCommandsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myvmScaleSet",
		"0",
		"myRunCommand",
		&armcompute.VirtualMachineScaleSetVMRunCommandsClientGetOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/runCommands/GetVirtualMachineScaleSetVMRunCommands.json: %v", err)
	}
	// Response check
	exampleRes := armcompute.VirtualMachineRunCommand{
		Name:     to.Ptr("myRunCommand"),
		Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets/virtualMachines/runCommands"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/myvmScaleSet/virtualMachines/0/runCommands/myRunCommand"),
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"tag1": to.Ptr("value1"),
			"tag2": to.Ptr("value2"),
		},
		Properties: &armcompute.VirtualMachineRunCommandProperties{
			AsyncExecution: to.Ptr(false),
			Parameters: []*armcompute.RunCommandInputParameter{
				{
					Name:  to.Ptr("param1"),
					Value: to.Ptr("value1"),
				},
				{
					Name:  to.Ptr("param2"),
					Value: to.Ptr("value2"),
				}},
			ProvisioningState: to.Ptr("Succeeded"),
			RunAsUser:         to.Ptr("user1"),
			Source: &armcompute.VirtualMachineRunCommandScriptSource{
				Script: to.Ptr("Write-Host Hello World!"),
			},
			TimeoutInSeconds: to.Ptr[int32](3600),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.VirtualMachineRunCommand) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.VirtualMachineRunCommand)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/runCommands/GetVirtualMachineScaleSetVMRunCommands.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestVirtualMachineScaleSetVMRunCommands_List(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/runCommands/ListVirtualMachineScaleSetVMRunCommands.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List run commands in Vmss instance."},
	})
	client, err := armcompute.NewVirtualMachineScaleSetVMRunCommandsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := client.NewListPager("myResourceGroup",
		"myvmScaleSet",
		"0",
		&armcompute.VirtualMachineScaleSetVMRunCommandsClientListOptions{Expand: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/runCommands/ListVirtualMachineScaleSetVMRunCommands.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcompute.VirtualMachineRunCommandsListResult{
			Value: []*armcompute.VirtualMachineRunCommand{
				{
					Name:     to.Ptr("myRunCommand"),
					Type:     to.Ptr("Microsoft.Compute/virtualMachineScaleSets/virtualMachines/runCommands"),
					ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/myvmScaleSet/virtualMachines/0/runCommands/myRunCommand"),
					Location: to.Ptr("westus"),
					Properties: &armcompute.VirtualMachineRunCommandProperties{
						AsyncExecution: to.Ptr(false),
						Parameters: []*armcompute.RunCommandInputParameter{
							{
								Name:  to.Ptr("param1"),
								Value: to.Ptr("value1"),
							},
							{
								Name:  to.Ptr("param2"),
								Value: to.Ptr("value2"),
							}},
						ProvisioningState: to.Ptr("Succeeded"),
						RunAsUser:         to.Ptr("user1"),
						Source: &armcompute.VirtualMachineRunCommandScriptSource{
							Script: to.Ptr("Write-Host Hello World!"),
						},
						TimeoutInSeconds: to.Ptr[int32](0),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.VirtualMachineRunCommandsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.VirtualMachineRunCommandsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/runCommands/ListVirtualMachineScaleSetVMRunCommands.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestResourceSKUs_List(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-07-01/examples/skus/ListAvailableResourceSkus.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Lists all available Resource SKUs"},
	})
	client, err := armcompute.NewResourceSKUsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := client.NewListPager(&armcompute.ResourceSKUsClientListOptions{Filter: nil,
		IncludeExtendedLocations: nil,
	})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-07-01/examples/skus/ListAvailableResourceSkus.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcompute.ResourceSKUsResult{
			Value: []*armcompute.ResourceSKU{
				{
					Name: to.Ptr("Standard_A0"),
					Capabilities: []*armcompute.ResourceSKUCapabilities{
						{
							Name:  to.Ptr("MaxResourceVolumeMB"),
							Value: to.Ptr("20480"),
						},
						{
							Name:  to.Ptr("OSVhdSizeMB"),
							Value: to.Ptr("1047552"),
						},
						{
							Name:  to.Ptr("vCPUs"),
							Value: to.Ptr("1"),
						},
						{
							Name:  to.Ptr("HyperVGenerations"),
							Value: to.Ptr("V1"),
						},
						{
							Name:  to.Ptr("MemoryGB"),
							Value: to.Ptr("0.75"),
						},
						{
							Name:  to.Ptr("MaxDataDiskCount"),
							Value: to.Ptr("1"),
						},
						{
							Name:  to.Ptr("LowPriorityCapable"),
							Value: to.Ptr("False"),
						},
						{
							Name:  to.Ptr("PremiumIO"),
							Value: to.Ptr("False"),
						},
						{
							Name:  to.Ptr("vCPUsAvailable"),
							Value: to.Ptr("1"),
						},
						{
							Name:  to.Ptr("ACUs"),
							Value: to.Ptr("50"),
						},
						{
							Name:  to.Ptr("vCPUsPerCore"),
							Value: to.Ptr("1"),
						},
						{
							Name:  to.Ptr("EphemeralOSDiskSupported"),
							Value: to.Ptr("False"),
						},
						{
							Name:  to.Ptr("AcceleratedNetworkingEnabled"),
							Value: to.Ptr("False"),
						},
						{
							Name:  to.Ptr("RdmaEnabled"),
							Value: to.Ptr("False"),
						},
						{
							Name:  to.Ptr("MaxNetworkInterfaces"),
							Value: to.Ptr("2"),
						}},
					Family: to.Ptr("standardA0_A7Family"),
					LocationInfo: []*armcompute.ResourceSKULocationInfo{
						{
							Location: to.Ptr("westus"),
							ZoneDetails: []*armcompute.ResourceSKUZoneDetails{
								{
									Name: []*string{
										to.Ptr("2")},
									Capabilities: []*armcompute.ResourceSKUCapabilities{
										{
											Name:  to.Ptr("UltraSSDAvailable"),
											Value: to.Ptr("True"),
										}},
								}},
							Zones: []*string{
								to.Ptr("2"),
								to.Ptr("1")},
						}},
					Locations: []*string{
						to.Ptr("westus")},
					ResourceType: to.Ptr("virtualMachines"),
					Size:         to.Ptr("A0"),
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("Standard_A1"),
					Capabilities: []*armcompute.ResourceSKUCapabilities{
						{
							Name:  to.Ptr("MaxResourceVolumeMB"),
							Value: to.Ptr("71680"),
						},
						{
							Name:  to.Ptr("OSVhdSizeMB"),
							Value: to.Ptr("1047552"),
						},
						{
							Name:  to.Ptr("vCPUs"),
							Value: to.Ptr("1"),
						},
						{
							Name:  to.Ptr("HyperVGenerations"),
							Value: to.Ptr("V1"),
						},
						{
							Name:  to.Ptr("MemoryGB"),
							Value: to.Ptr("1.75"),
						},
						{
							Name:  to.Ptr("MaxDataDiskCount"),
							Value: to.Ptr("2"),
						},
						{
							Name:  to.Ptr("LowPriorityCapable"),
							Value: to.Ptr("True"),
						},
						{
							Name:  to.Ptr("PremiumIO"),
							Value: to.Ptr("False"),
						},
						{
							Name:  to.Ptr("vCPUsAvailable"),
							Value: to.Ptr("1"),
						},
						{
							Name:  to.Ptr("ACUs"),
							Value: to.Ptr("100"),
						},
						{
							Name:  to.Ptr("vCPUsPerCore"),
							Value: to.Ptr("1"),
						},
						{
							Name:  to.Ptr("EphemeralOSDiskSupported"),
							Value: to.Ptr("False"),
						},
						{
							Name:  to.Ptr("AcceleratedNetworkingEnabled"),
							Value: to.Ptr("False"),
						},
						{
							Name:  to.Ptr("RdmaEnabled"),
							Value: to.Ptr("False"),
						},
						{
							Name:  to.Ptr("MaxNetworkInterfaces"),
							Value: to.Ptr("2"),
						}},
					Family: to.Ptr("standardA0_A7Family"),
					LocationInfo: []*armcompute.ResourceSKULocationInfo{
						{
							Location: to.Ptr("westus"),
							Zones: []*string{
								to.Ptr("1"),
								to.Ptr("2"),
								to.Ptr("3")},
						}},
					Locations: []*string{
						to.Ptr("westus")},
					ResourceType: to.Ptr("virtualMachines"),
					Size:         to.Ptr("A1"),
					Tier:         to.Ptr("Standard"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ResourceSKUsResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ResourceSKUsResult)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-07-01/examples/skus/ListAvailableResourceSkus.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-07-01/examples/skus/ListAvailableResourceSkusForARegion.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Lists all available Resource SKUs for the specified region"},
	})
	client, err = armcompute.NewResourceSKUsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager = client.NewListPager(&armcompute.ResourceSKUsClientListOptions{Filter: to.Ptr("location eq 'westus'"),
		IncludeExtendedLocations: nil,
	})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-07-01/examples/skus/ListAvailableResourceSkusForARegion.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcompute.ResourceSKUsResult{
			Value: []*armcompute.ResourceSKU{
				{
					Name: to.Ptr("Standard_A0"),
					Capabilities: []*armcompute.ResourceSKUCapabilities{
						{
							Name:  to.Ptr("MaxResourceVolumeMB"),
							Value: to.Ptr("20480"),
						},
						{
							Name:  to.Ptr("OSVhdSizeMB"),
							Value: to.Ptr("1047552"),
						},
						{
							Name:  to.Ptr("vCPUs"),
							Value: to.Ptr("1"),
						},
						{
							Name:  to.Ptr("HyperVGenerations"),
							Value: to.Ptr("V1"),
						},
						{
							Name:  to.Ptr("MemoryGB"),
							Value: to.Ptr("0.75"),
						},
						{
							Name:  to.Ptr("MaxDataDiskCount"),
							Value: to.Ptr("1"),
						},
						{
							Name:  to.Ptr("LowPriorityCapable"),
							Value: to.Ptr("False"),
						},
						{
							Name:  to.Ptr("PremiumIO"),
							Value: to.Ptr("False"),
						},
						{
							Name:  to.Ptr("vCPUsAvailable"),
							Value: to.Ptr("1"),
						},
						{
							Name:  to.Ptr("ACUs"),
							Value: to.Ptr("50"),
						},
						{
							Name:  to.Ptr("vCPUsPerCore"),
							Value: to.Ptr("1"),
						},
						{
							Name:  to.Ptr("EphemeralOSDiskSupported"),
							Value: to.Ptr("False"),
						},
						{
							Name:  to.Ptr("AcceleratedNetworkingEnabled"),
							Value: to.Ptr("False"),
						},
						{
							Name:  to.Ptr("RdmaEnabled"),
							Value: to.Ptr("False"),
						},
						{
							Name:  to.Ptr("MaxNetworkInterfaces"),
							Value: to.Ptr("2"),
						}},
					Family: to.Ptr("standardA0_A7Family"),
					LocationInfo: []*armcompute.ResourceSKULocationInfo{
						{
							Location: to.Ptr("westus"),
							ZoneDetails: []*armcompute.ResourceSKUZoneDetails{
								{
									Name: []*string{
										to.Ptr("2")},
									Capabilities: []*armcompute.ResourceSKUCapabilities{
										{
											Name:  to.Ptr("UltraSSDAvailable"),
											Value: to.Ptr("True"),
										}},
								}},
							Zones: []*string{
								to.Ptr("2"),
								to.Ptr("1")},
						}},
					Locations: []*string{
						to.Ptr("westus")},
					ResourceType: to.Ptr("virtualMachines"),
					Size:         to.Ptr("A0"),
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("Standard_A1"),
					Capabilities: []*armcompute.ResourceSKUCapabilities{
						{
							Name:  to.Ptr("MaxResourceVolumeMB"),
							Value: to.Ptr("71680"),
						},
						{
							Name:  to.Ptr("OSVhdSizeMB"),
							Value: to.Ptr("1047552"),
						},
						{
							Name:  to.Ptr("vCPUs"),
							Value: to.Ptr("1"),
						},
						{
							Name:  to.Ptr("HyperVGenerations"),
							Value: to.Ptr("V1"),
						},
						{
							Name:  to.Ptr("MemoryGB"),
							Value: to.Ptr("1.75"),
						},
						{
							Name:  to.Ptr("MaxDataDiskCount"),
							Value: to.Ptr("2"),
						},
						{
							Name:  to.Ptr("LowPriorityCapable"),
							Value: to.Ptr("True"),
						},
						{
							Name:  to.Ptr("PremiumIO"),
							Value: to.Ptr("False"),
						},
						{
							Name:  to.Ptr("vCPUsAvailable"),
							Value: to.Ptr("1"),
						},
						{
							Name:  to.Ptr("ACUs"),
							Value: to.Ptr("100"),
						},
						{
							Name:  to.Ptr("vCPUsPerCore"),
							Value: to.Ptr("1"),
						},
						{
							Name:  to.Ptr("EphemeralOSDiskSupported"),
							Value: to.Ptr("False"),
						},
						{
							Name:  to.Ptr("AcceleratedNetworkingEnabled"),
							Value: to.Ptr("False"),
						},
						{
							Name:  to.Ptr("RdmaEnabled"),
							Value: to.Ptr("False"),
						},
						{
							Name:  to.Ptr("MaxNetworkInterfaces"),
							Value: to.Ptr("2"),
						}},
					Family: to.Ptr("standardA0_A7Family"),
					LocationInfo: []*armcompute.ResourceSKULocationInfo{
						{
							Location: to.Ptr("westus"),
							Zones: []*string{
								to.Ptr("1"),
								to.Ptr("2"),
								to.Ptr("3")},
						}},
					Locations: []*string{
						to.Ptr("westus")},
					ResourceType: to.Ptr("virtualMachines"),
					Size:         to.Ptr("A1"),
					Tier:         to.Ptr("Standard"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ResourceSKUsResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ResourceSKUsResult)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-07-01/examples/skus/ListAvailableResourceSkusForARegion.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-07-01/examples/skus/ListAvailableResourceSkusWithExtendedLocations.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Lists all available Resource SKUs with Extended Location information"},
	})
	client, err = armcompute.NewResourceSKUsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager = client.NewListPager(&armcompute.ResourceSKUsClientListOptions{Filter: nil,
		IncludeExtendedLocations: to.Ptr("true"),
	})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-07-01/examples/skus/ListAvailableResourceSkusWithExtendedLocations.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcompute.ResourceSKUsResult{
			Value: []*armcompute.ResourceSKU{
				{
					Name: to.Ptr("Standard_A0"),
					Capabilities: []*armcompute.ResourceSKUCapabilities{
						{
							Name:  to.Ptr("MaxResourceVolumeMB"),
							Value: to.Ptr("20480"),
						},
						{
							Name:  to.Ptr("OSVhdSizeMB"),
							Value: to.Ptr("1047552"),
						},
						{
							Name:  to.Ptr("vCPUs"),
							Value: to.Ptr("1"),
						},
						{
							Name:  to.Ptr("HyperVGenerations"),
							Value: to.Ptr("V1"),
						},
						{
							Name:  to.Ptr("MemoryGB"),
							Value: to.Ptr("0.75"),
						},
						{
							Name:  to.Ptr("MaxDataDiskCount"),
							Value: to.Ptr("1"),
						},
						{
							Name:  to.Ptr("LowPriorityCapable"),
							Value: to.Ptr("False"),
						},
						{
							Name:  to.Ptr("PremiumIO"),
							Value: to.Ptr("False"),
						},
						{
							Name:  to.Ptr("vCPUsAvailable"),
							Value: to.Ptr("1"),
						},
						{
							Name:  to.Ptr("ACUs"),
							Value: to.Ptr("50"),
						},
						{
							Name:  to.Ptr("vCPUsPerCore"),
							Value: to.Ptr("1"),
						},
						{
							Name:  to.Ptr("EphemeralOSDiskSupported"),
							Value: to.Ptr("False"),
						},
						{
							Name:  to.Ptr("AcceleratedNetworkingEnabled"),
							Value: to.Ptr("False"),
						},
						{
							Name:  to.Ptr("RdmaEnabled"),
							Value: to.Ptr("False"),
						},
						{
							Name:  to.Ptr("MaxNetworkInterfaces"),
							Value: to.Ptr("2"),
						}},
					Family: to.Ptr("standardA0_A7Family"),
					LocationInfo: []*armcompute.ResourceSKULocationInfo{
						{
							Location: to.Ptr("westus"),
							ZoneDetails: []*armcompute.ResourceSKUZoneDetails{
								{
									Name: []*string{
										to.Ptr("2")},
									Capabilities: []*armcompute.ResourceSKUCapabilities{
										{
											Name:  to.Ptr("UltraSSDAvailable"),
											Value: to.Ptr("True"),
										}},
								}},
							Zones: []*string{
								to.Ptr("2"),
								to.Ptr("1")},
						}},
					Locations: []*string{
						to.Ptr("westus")},
					ResourceType: to.Ptr("virtualMachines"),
					Size:         to.Ptr("A0"),
					Tier:         to.Ptr("Standard"),
				},
				{
					Name: to.Ptr("Standard_A1"),
					Capabilities: []*armcompute.ResourceSKUCapabilities{
						{
							Name:  to.Ptr("MaxResourceVolumeMB"),
							Value: to.Ptr("71680"),
						},
						{
							Name:  to.Ptr("OSVhdSizeMB"),
							Value: to.Ptr("1047552"),
						},
						{
							Name:  to.Ptr("vCPUs"),
							Value: to.Ptr("1"),
						},
						{
							Name:  to.Ptr("HyperVGenerations"),
							Value: to.Ptr("V1"),
						},
						{
							Name:  to.Ptr("MemoryGB"),
							Value: to.Ptr("1.75"),
						},
						{
							Name:  to.Ptr("MaxDataDiskCount"),
							Value: to.Ptr("2"),
						},
						{
							Name:  to.Ptr("LowPriorityCapable"),
							Value: to.Ptr("True"),
						},
						{
							Name:  to.Ptr("PremiumIO"),
							Value: to.Ptr("False"),
						},
						{
							Name:  to.Ptr("vCPUsAvailable"),
							Value: to.Ptr("1"),
						},
						{
							Name:  to.Ptr("ACUs"),
							Value: to.Ptr("100"),
						},
						{
							Name:  to.Ptr("vCPUsPerCore"),
							Value: to.Ptr("1"),
						},
						{
							Name:  to.Ptr("EphemeralOSDiskSupported"),
							Value: to.Ptr("False"),
						},
						{
							Name:  to.Ptr("AcceleratedNetworkingEnabled"),
							Value: to.Ptr("False"),
						},
						{
							Name:  to.Ptr("RdmaEnabled"),
							Value: to.Ptr("False"),
						},
						{
							Name:  to.Ptr("MaxNetworkInterfaces"),
							Value: to.Ptr("2"),
						}},
					Family: to.Ptr("standardA0_A7Family"),
					LocationInfo: []*armcompute.ResourceSKULocationInfo{
						{
							Location: to.Ptr("westus"),
							Zones: []*string{
								to.Ptr("1"),
								to.Ptr("2"),
								to.Ptr("3")},
						},
						{
							Type: to.Ptr(armcompute.ExtendedLocationTypeEdgeZone),
							ExtendedLocations: []*string{
								to.Ptr("Las Vegas"),
								to.Ptr("Seattle"),
								to.Ptr("Portland")},
							Location: to.Ptr("westus"),
						}},
					Locations: []*string{
						to.Ptr("westus")},
					ResourceType: to.Ptr("virtualMachines"),
					Size:         to.Ptr("A1"),
					Tier:         to.Ptr("Standard"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ResourceSKUsResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ResourceSKUsResult)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-07-01/examples/skus/ListAvailableResourceSkusWithExtendedLocations.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDisks_CreateOrUpdate(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/CreateAConfidentialVMDiskEncryptedWithCMK.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a confidential VM supported disk encrypted with customer managed key"},
	})
	client, err := armcompute.NewDisksClient("{subscriptionId}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myDisk",
		armcompute.Disk{
			Location: to.Ptr("West US"),
			Properties: &armcompute.DiskProperties{
				CreationData: &armcompute.CreationData{
					CreateOption: to.Ptr(armcompute.DiskCreateOptionFromImage),
					ImageReference: &armcompute.ImageDiskReference{
						ID: to.Ptr("/Subscriptions/{subscriptionId}/Providers/Microsoft.Compute/Locations/westus/Publishers/{publisher}/ArtifactTypes/VMImage/Offers/{offer}/Skus/{sku}/Versions/1.0.0"),
					},
				},
				OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				SecurityProfile: &armcompute.DiskSecurityProfile{
					SecureVMDiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{diskEncryptionSetName}"),
					SecurityType:                to.Ptr(armcompute.DiskSecurityTypesConfidentialVMDiskEncryptedWithCustomerKey),
				},
			},
		},
		&armcompute.DisksClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/CreateAConfidentialVMDiskEncryptedWithCMK.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/CreateAConfidentialVMDiskEncryptedWithCMK.json: %v", err)
	}
	// Response check
	exampleRes := armcompute.Disk{
		Name:     to.Ptr("myDisk"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption: to.Ptr(armcompute.DiskCreateOptionFromImage),
				ImageReference: &armcompute.ImageDiskReference{
					ID: to.Ptr("/Subscriptions/{subscriptionId}/Providers/Microsoft.Compute/Locations/westus/Publishers/{publisher}/ArtifactTypes/VMImage/Offers/{offer}/Skus/{sku}/Versions/1.0.0"),
				},
			},
			OSType:            to.Ptr(armcompute.OperatingSystemTypesWindows),
			ProvisioningState: to.Ptr("Succeeded"),
			SecurityProfile: &armcompute.DiskSecurityProfile{
				SecureVMDiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{diskEncryptionSetName}"),
				SecurityType:                to.Ptr(armcompute.DiskSecurityTypesConfidentialVMDiskEncryptedWithCustomerKey),
			},
		},
	}
	if !reflect.DeepEqual(exampleRes, res.Disk) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.Disk)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/CreateAConfidentialVMDiskEncryptedWithCMK.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/CreateAManagedDiskWithDiskAccess.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a managed disk and associate with disk access resource."},
	})
	client, err = armcompute.NewDisksClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myDisk",
		armcompute.Disk{
			Location: to.Ptr("West US"),
			Properties: &armcompute.DiskProperties{
				CreationData: &armcompute.CreationData{
					CreateOption: to.Ptr(armcompute.DiskCreateOptionEmpty),
				},
				DiskAccessID:        to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskAccesses/{existing-diskAccess-name}"),
				DiskSizeGB:          to.Ptr[int32](200),
				NetworkAccessPolicy: to.Ptr(armcompute.NetworkAccessPolicyAllowPrivate),
			},
		},
		&armcompute.DisksClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/CreateAManagedDiskWithDiskAccess.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/CreateAManagedDiskWithDiskAccess.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.Disk{
		Name:     to.Ptr("myDisk"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption: to.Ptr(armcompute.DiskCreateOptionEmpty),
			},
			DiskAccessID:        to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskAccesses/{existing-diskAccess-name}"),
			DiskSizeGB:          to.Ptr[int32](200),
			NetworkAccessPolicy: to.Ptr(armcompute.NetworkAccessPolicyAllowPrivate),
			ProvisioningState:   to.Ptr("Succeeded"),
			PublicNetworkAccess: to.Ptr(armcompute.PublicNetworkAccessEnabled),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.Disk) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.Disk)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/CreateAManagedDiskWithDiskAccess.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/CreateAManagedDiskWithDiskEncryptionSet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a managed disk and associate with disk encryption set."},
	})
	client, err = armcompute.NewDisksClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myDisk",
		armcompute.Disk{
			Location: to.Ptr("West US"),
			Properties: &armcompute.DiskProperties{
				CreationData: &armcompute.CreationData{
					CreateOption: to.Ptr(armcompute.DiskCreateOptionEmpty),
				},
				DiskSizeGB: to.Ptr[int32](200),
				Encryption: &armcompute.Encryption{
					DiskEncryptionSetID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{existing-diskEncryptionSet-name}"),
				},
			},
		},
		&armcompute.DisksClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/CreateAManagedDiskWithDiskEncryptionSet.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/CreateAManagedDiskWithDiskEncryptionSet.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.Disk{
		Name:     to.Ptr("myDisk"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption: to.Ptr(armcompute.DiskCreateOptionEmpty),
			},
			DiskSizeGB: to.Ptr[int32](200),
			Encryption: &armcompute.Encryption{
				DiskEncryptionSetID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{existing-diskEncryptionSet-name}"),
			},
			ProvisioningState: to.Ptr("Succeeded"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.Disk) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.Disk)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/CreateAManagedDiskWithDiskEncryptionSet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/CreateAManagedDiskByCopyingASnapshot.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a managed disk by copying a snapshot."},
	})
	client, err = armcompute.NewDisksClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myDisk",
		armcompute.Disk{
			Location: to.Ptr("West US"),
			Properties: &armcompute.DiskProperties{
				CreationData: &armcompute.CreationData{
					CreateOption:     to.Ptr(armcompute.DiskCreateOptionCopy),
					SourceResourceID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot"),
				},
			},
		},
		&armcompute.DisksClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/CreateAManagedDiskByCopyingASnapshot.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/CreateAManagedDiskByCopyingASnapshot.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.Disk{
		Name:     to.Ptr("myDisk"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption:     to.Ptr(armcompute.DiskCreateOptionCopy),
				SourceResourceID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot"),
			},
			ProvisioningState: to.Ptr("Succeeded"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.Disk) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.Disk)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/CreateAManagedDiskByCopyingASnapshot.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/CreateAManagedDiskByImportingAnUnmanagedBlobFromADifferentSubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a managed disk by importing an unmanaged blob from a different subscription."},
	})
	client, err = armcompute.NewDisksClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myDisk",
		armcompute.Disk{
			Location: to.Ptr("West US"),
			Properties: &armcompute.DiskProperties{
				CreationData: &armcompute.CreationData{
					CreateOption:     to.Ptr(armcompute.DiskCreateOptionImport),
					SourceURI:        to.Ptr("https://mystorageaccount.blob.core.windows.net/osimages/osimage.vhd"),
					StorageAccountID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Storage/storageAccounts/myStorageAccount"),
				},
			},
		},
		&armcompute.DisksClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/CreateAManagedDiskByImportingAnUnmanagedBlobFromADifferentSubscription.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/CreateAManagedDiskByImportingAnUnmanagedBlobFromADifferentSubscription.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.Disk{
		Name:     to.Ptr("myDisk"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption:     to.Ptr(armcompute.DiskCreateOptionImport),
				SourceURI:        to.Ptr("https://mystorageaccount.blob.core.windows.net/osimages/osimage.vhd"),
				StorageAccountID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Storage/storageAccounts/myStorageAccount"),
			},
			ProvisioningState: to.Ptr("Succeeded"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.Disk) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.Disk)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/CreateAManagedDiskByImportingAnUnmanagedBlobFromADifferentSubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/CreateAManagedDiskByImportingAnUnmanagedBlobFromTheSameSubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a managed disk by importing an unmanaged blob from the same subscription."},
	})
	client, err = armcompute.NewDisksClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myDisk",
		armcompute.Disk{
			Location: to.Ptr("West US"),
			Properties: &armcompute.DiskProperties{
				CreationData: &armcompute.CreationData{
					CreateOption: to.Ptr(armcompute.DiskCreateOptionImport),
					SourceURI:    to.Ptr("https://mystorageaccount.blob.core.windows.net/osimages/osimage.vhd"),
				},
			},
		},
		&armcompute.DisksClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/CreateAManagedDiskByImportingAnUnmanagedBlobFromTheSameSubscription.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/CreateAManagedDiskByImportingAnUnmanagedBlobFromTheSameSubscription.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.Disk{
		Name:     to.Ptr("myDisk"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption: to.Ptr(armcompute.DiskCreateOptionImport),
				SourceURI:    to.Ptr("https://mystorageaccount.blob.core.windows.net/osimages/osimage.vhd"),
			},
			ProvisioningState: to.Ptr("Succeeded"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.Disk) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.Disk)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/CreateAManagedDiskByImportingAnUnmanagedBlobFromTheSameSubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/CreateAManagedDiskFromImportSecure.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a managed disk from ImportSecure create option"},
	})
	client, err = armcompute.NewDisksClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myDisk",
		armcompute.Disk{
			Location: to.Ptr("West US"),
			Properties: &armcompute.DiskProperties{
				CreationData: &armcompute.CreationData{
					CreateOption:     to.Ptr(armcompute.DiskCreateOptionImportSecure),
					SecurityDataURI:  to.Ptr("https://mystorageaccount.blob.core.windows.net/osimages/vmgs.vhd"),
					SourceURI:        to.Ptr("https://mystorageaccount.blob.core.windows.net/osimages/osimage.vhd"),
					StorageAccountID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Storage/storageAccounts/myStorageAccount"),
				},
				OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				SecurityProfile: &armcompute.DiskSecurityProfile{
					SecurityType: to.Ptr(armcompute.DiskSecurityTypesConfidentialVMVmguestStateOnlyEncryptedWithPlatformKey),
				},
			},
		},
		&armcompute.DisksClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/CreateAManagedDiskFromImportSecure.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/CreateAManagedDiskFromImportSecure.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.Disk{
		Name:     to.Ptr("myDisk"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption:     to.Ptr(armcompute.DiskCreateOptionImportSecure),
				SecurityDataURI:  to.Ptr("https://mystorageaccount.blob.core.windows.net/osimages/vmgs.vhd"),
				SourceURI:        to.Ptr("https://mystorageaccount.blob.core.windows.net/osimages/osimage.vhd"),
				StorageAccountID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Storage/storageAccounts/myStorageAccount"),
			},
			OSType:            to.Ptr(armcompute.OperatingSystemTypesWindows),
			ProvisioningState: to.Ptr("Succeeded"),
			SecurityProfile: &armcompute.DiskSecurityProfile{
				SecurityType: to.Ptr(armcompute.DiskSecurityTypesConfidentialVMVmguestStateOnlyEncryptedWithPlatformKey),
			},
		},
	}
	if !reflect.DeepEqual(exampleRes, res.Disk) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.Disk)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/CreateAManagedDiskFromImportSecure.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/CreateAManagedDiskFromUploadPreparedSecure.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a managed disk from UploadPreparedSecure create option"},
	})
	client, err = armcompute.NewDisksClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myDisk",
		armcompute.Disk{
			Location: to.Ptr("West US"),
			Properties: &armcompute.DiskProperties{
				CreationData: &armcompute.CreationData{
					CreateOption:    to.Ptr(armcompute.DiskCreateOptionUploadPreparedSecure),
					UploadSizeBytes: to.Ptr[int64](10737418752),
				},
				OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				SecurityProfile: &armcompute.DiskSecurityProfile{
					SecurityType: to.Ptr(armcompute.DiskSecurityTypesTrustedLaunch),
				},
			},
		},
		&armcompute.DisksClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/CreateAManagedDiskFromUploadPreparedSecure.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/CreateAManagedDiskFromUploadPreparedSecure.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.Disk{
		Name:     to.Ptr("myDisk"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption:    to.Ptr(armcompute.DiskCreateOptionUploadPreparedSecure),
				UploadSizeBytes: to.Ptr[int64](10737418752),
			},
			OSType:            to.Ptr(armcompute.OperatingSystemTypesWindows),
			ProvisioningState: to.Ptr("Succeeded"),
			SecurityProfile: &armcompute.DiskSecurityProfile{
				SecurityType: to.Ptr(armcompute.DiskSecurityTypesTrustedLaunch),
			},
		},
	}
	if !reflect.DeepEqual(exampleRes, res.Disk) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.Disk)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/CreateAManagedDiskFromUploadPreparedSecure.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/CreateAManagedDiskFromAPlatformImage.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a managed disk from a platform image."},
	})
	client, err = armcompute.NewDisksClient("{subscriptionId}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myDisk",
		armcompute.Disk{
			Location: to.Ptr("West US"),
			Properties: &armcompute.DiskProperties{
				CreationData: &armcompute.CreationData{
					CreateOption: to.Ptr(armcompute.DiskCreateOptionFromImage),
					ImageReference: &armcompute.ImageDiskReference{
						ID: to.Ptr("/Subscriptions/{subscriptionId}/Providers/Microsoft.Compute/Locations/westus/Publishers/{publisher}/ArtifactTypes/VMImage/Offers/{offer}/Skus/{sku}/Versions/1.0.0"),
					},
				},
				OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
			},
		},
		&armcompute.DisksClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/CreateAManagedDiskFromAPlatformImage.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/CreateAManagedDiskFromAPlatformImage.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.Disk{
		Name:     to.Ptr("myDisk"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption: to.Ptr(armcompute.DiskCreateOptionFromImage),
				ImageReference: &armcompute.ImageDiskReference{
					ID: to.Ptr("/Subscriptions/{subscriptionId}/Providers/Microsoft.Compute/Locations/westus/Publishers/{publisher}/ArtifactTypes/VMImage/Offers/{offer}/Skus/{sku}/Versions/1.0.0"),
				},
			},
			HyperVGeneration:  to.Ptr(armcompute.HyperVGenerationV1),
			OSType:            to.Ptr(armcompute.OperatingSystemTypesWindows),
			ProvisioningState: to.Ptr("Succeeded"),
			PurchasePlan: &armcompute.DiskPurchasePlan{
				Name:      to.Ptr("{sku}"),
				Product:   to.Ptr("{offer}"),
				Publisher: to.Ptr("{publisher}"),
			},
			SupportedCapabilities: &armcompute.SupportedCapabilities{
				AcceleratedNetwork: to.Ptr(true),
			},
		},
	}
	if !reflect.DeepEqual(exampleRes, res.Disk) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.Disk)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/CreateAManagedDiskFromAPlatformImage.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/CreateAManagedDiskFromAnExistingManagedDisk.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a managed disk from an existing managed disk in the same or different subscription."},
	})
	client, err = armcompute.NewDisksClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myDisk2",
		armcompute.Disk{
			Location: to.Ptr("West US"),
			Properties: &armcompute.DiskProperties{
				CreationData: &armcompute.CreationData{
					CreateOption:     to.Ptr(armcompute.DiskCreateOptionCopy),
					SourceResourceID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myDisk1"),
				},
			},
		},
		&armcompute.DisksClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/CreateAManagedDiskFromAnExistingManagedDisk.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/CreateAManagedDiskFromAnExistingManagedDisk.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.Disk{
		Name:     to.Ptr("myDisk2"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption:     to.Ptr(armcompute.DiskCreateOptionCopy),
				SourceResourceID: to.Ptr("subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myDisk1"),
			},
			ProvisioningState: to.Ptr("Succeeded"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.Disk) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.Disk)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/CreateAManagedDiskFromAnExistingManagedDisk.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/CreateAManagedDiskWithDataAccessAuthMode.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a managed disk with dataAccessAuthMode"},
	})
	client, err = armcompute.NewDisksClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myDisk",
		armcompute.Disk{
			Location: to.Ptr("West US"),
			Properties: &armcompute.DiskProperties{
				CreationData: &armcompute.CreationData{
					CreateOption: to.Ptr(armcompute.DiskCreateOptionEmpty),
				},
				DataAccessAuthMode: to.Ptr(armcompute.DataAccessAuthModeAzureActiveDirectory),
				DiskSizeGB:         to.Ptr[int32](200),
			},
		},
		&armcompute.DisksClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/CreateAManagedDiskWithDataAccessAuthMode.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/CreateAManagedDiskWithDataAccessAuthMode.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.Disk{
		Name:     to.Ptr("myDisk"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption: to.Ptr(armcompute.DiskCreateOptionEmpty),
			},
			DataAccessAuthMode: to.Ptr(armcompute.DataAccessAuthModeAzureActiveDirectory),
			DiskSizeGB:         to.Ptr[int32](200),
			ProvisioningState:  to.Ptr("Succeeded"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.Disk) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.Disk)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/CreateAManagedDiskWithDataAccessAuthMode.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/CreateAManagedDiskWithSecurityProfile.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a managed disk with security profile"},
	})
	client, err = armcompute.NewDisksClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myDisk",
		armcompute.Disk{
			Location: to.Ptr("North Central US"),
			Properties: &armcompute.DiskProperties{
				CreationData: &armcompute.CreationData{
					CreateOption: to.Ptr(armcompute.DiskCreateOptionFromImage),
					ImageReference: &armcompute.ImageDiskReference{
						ID: to.Ptr("/Subscriptions/{subscriptionId}/Providers/Microsoft.Compute/Locations/uswest/Publishers/Microsoft/ArtifactTypes/VMImage/Offers/{offer}"),
					},
				},
				OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
				SecurityProfile: &armcompute.DiskSecurityProfile{
					SecurityType: to.Ptr(armcompute.DiskSecurityTypesTrustedLaunch),
				},
			},
		},
		&armcompute.DisksClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/CreateAManagedDiskWithSecurityProfile.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/CreateAManagedDiskWithSecurityProfile.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.Disk{
		Name:     to.Ptr("myDisk"),
		Location: to.Ptr("North Central US"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption: to.Ptr(armcompute.DiskCreateOptionFromImage),
				ImageReference: &armcompute.ImageDiskReference{
					ID: to.Ptr("/Subscriptions/{subscriptionId}/Providers/Microsoft.Compute/Locations/uswest/Publishers/Microsoft/ArtifactTypes/VMImage/Offers/{offer}"),
				},
			},
			OSType:            to.Ptr(armcompute.OperatingSystemTypesWindows),
			ProvisioningState: to.Ptr("Succeeded"),
			SecurityProfile: &armcompute.DiskSecurityProfile{
				SecurityType: to.Ptr(armcompute.DiskSecurityTypesTrustedLaunch),
			},
		},
	}
	if !reflect.DeepEqual(exampleRes, res.Disk) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.Disk)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/CreateAManagedDiskWithSecurityProfile.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/CreateAManagedDiskWithSSDZRSAccountType.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a managed disk with ssd zrs account type."},
	})
	client, err = armcompute.NewDisksClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myDisk",
		armcompute.Disk{
			Location: to.Ptr("West US"),
			Properties: &armcompute.DiskProperties{
				CreationData: &armcompute.CreationData{
					CreateOption: to.Ptr(armcompute.DiskCreateOptionEmpty),
				},
				DiskSizeGB: to.Ptr[int32](200),
			},
			SKU: &armcompute.DiskSKU{
				Name: to.Ptr(armcompute.DiskStorageAccountTypesPremiumZRS),
			},
		},
		&armcompute.DisksClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/CreateAManagedDiskWithSSDZRSAccountType.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/CreateAManagedDiskWithSSDZRSAccountType.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.Disk{
		Name:     to.Ptr("myDisk"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption: to.Ptr(armcompute.DiskCreateOptionEmpty),
			},
			DiskSizeGB:        to.Ptr[int32](200),
			ProvisioningState: to.Ptr("Succeeded"),
		},
		SKU: &armcompute.DiskSKU{
			Name: to.Ptr(armcompute.DiskStorageAccountTypesPremiumZRS),
			Tier: to.Ptr("Premium"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.Disk) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.Disk)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/CreateAManagedDiskWithSSDZRSAccountType.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/CreateAManagedUploadDisk.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a managed upload disk."},
	})
	client, err = armcompute.NewDisksClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myDisk",
		armcompute.Disk{
			Location: to.Ptr("West US"),
			Properties: &armcompute.DiskProperties{
				CreationData: &armcompute.CreationData{
					CreateOption:    to.Ptr(armcompute.DiskCreateOptionUpload),
					UploadSizeBytes: to.Ptr[int64](10737418752),
				},
			},
		},
		&armcompute.DisksClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/CreateAManagedUploadDisk.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/CreateAManagedUploadDisk.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.Disk{
		Name:     to.Ptr("myDisk"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption:    to.Ptr(armcompute.DiskCreateOptionUpload),
				UploadSizeBytes: to.Ptr[int64](10737418752),
			},
			ProvisioningState: to.Ptr("Succeeded"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.Disk) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.Disk)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/CreateAManagedUploadDisk.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/CreateAnEmptyManagedDiskInExtendedLocation.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create an empty managed disk in extended location."},
	})
	client, err = armcompute.NewDisksClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myDisk",
		armcompute.Disk{
			Location: to.Ptr("West US"),
			ExtendedLocation: &armcompute.ExtendedLocation{
				Name: to.Ptr("{edge-zone-id}"),
				Type: to.Ptr(armcompute.ExtendedLocationTypesEdgeZone),
			},
			Properties: &armcompute.DiskProperties{
				CreationData: &armcompute.CreationData{
					CreateOption: to.Ptr(armcompute.DiskCreateOptionEmpty),
				},
				DiskSizeGB: to.Ptr[int32](200),
			},
		},
		&armcompute.DisksClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/CreateAnEmptyManagedDiskInExtendedLocation.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/CreateAnEmptyManagedDiskInExtendedLocation.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.Disk{
		Name:     to.Ptr("myDisk"),
		Location: to.Ptr("West US"),
		ExtendedLocation: &armcompute.ExtendedLocation{
			Name: to.Ptr("{edge-zone-id}"),
			Type: to.Ptr(armcompute.ExtendedLocationTypesEdgeZone),
		},
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption: to.Ptr(armcompute.DiskCreateOptionEmpty),
			},
			DiskSizeGB:        to.Ptr[int32](200),
			ProvisioningState: to.Ptr("Succeeded"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.Disk) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.Disk)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/CreateAnEmptyManagedDiskInExtendedLocation.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/CreateAnEmptyManagedDisk.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create an empty managed disk."},
	})
	client, err = armcompute.NewDisksClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myDisk",
		armcompute.Disk{
			Location: to.Ptr("West US"),
			Properties: &armcompute.DiskProperties{
				CreationData: &armcompute.CreationData{
					CreateOption: to.Ptr(armcompute.DiskCreateOptionEmpty),
				},
				DiskSizeGB: to.Ptr[int32](200),
			},
		},
		&armcompute.DisksClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/CreateAnEmptyManagedDisk.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/CreateAnEmptyManagedDisk.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.Disk{
		Name:     to.Ptr("myDisk"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption: to.Ptr(armcompute.DiskCreateOptionEmpty),
			},
			DiskSizeGB:        to.Ptr[int32](200),
			ProvisioningState: to.Ptr("Succeeded"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.Disk) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.Disk)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/CreateAnEmptyManagedDisk.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/CreateAManagedDiskWithLogicalSectorSize.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create an ultra managed disk with logicalSectorSize 512E"},
	})
	client, err = armcompute.NewDisksClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myDisk",
		armcompute.Disk{
			Location: to.Ptr("West US"),
			Properties: &armcompute.DiskProperties{
				CreationData: &armcompute.CreationData{
					CreateOption:      to.Ptr(armcompute.DiskCreateOptionEmpty),
					LogicalSectorSize: to.Ptr[int32](512),
				},
				DiskSizeGB: to.Ptr[int32](200),
			},
			SKU: &armcompute.DiskSKU{
				Name: to.Ptr(armcompute.DiskStorageAccountTypesUltraSSDLRS),
			},
		},
		&armcompute.DisksClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/CreateAManagedDiskWithLogicalSectorSize.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/CreateAManagedDiskWithLogicalSectorSize.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.Disk{
		Name:     to.Ptr("myDisk"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption:      to.Ptr(armcompute.DiskCreateOptionEmpty),
				LogicalSectorSize: to.Ptr[int32](512),
			},
			DiskSizeGB:        to.Ptr[int32](200),
			ProvisioningState: to.Ptr("Succeeded"),
		},
		SKU: &armcompute.DiskSKU{
			Name: to.Ptr(armcompute.DiskStorageAccountTypesUltraSSDLRS),
			Tier: to.Ptr("Ultra"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.Disk) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.Disk)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/CreateAManagedDiskWithLogicalSectorSize.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestDisks_Update(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/CreateOrUpdateABurstingEnabledManagedDisk.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a bursting enabled managed disk."},
	})
	client, err := armcompute.NewDisksClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginUpdate(ctx,
		"myResourceGroup",
		"myDisk",
		armcompute.DiskUpdate{
			Properties: &armcompute.DiskUpdateProperties{
				BurstingEnabled: to.Ptr(true),
				DiskSizeGB:      to.Ptr[int32](1024),
			},
		},
		&armcompute.DisksClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/CreateOrUpdateABurstingEnabledManagedDisk.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/CreateOrUpdateABurstingEnabledManagedDisk.json: %v", err)
	}
	// Response check
	exampleRes := armcompute.Disk{
		Name:     to.Ptr("myDisk"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.DiskProperties{
			BurstingEnabled: to.Ptr(true),
			CreationData: &armcompute.CreationData{
				CreateOption: to.Ptr(armcompute.DiskCreateOptionEmpty),
			},
			DiskSizeGB:        to.Ptr[int32](1024),
			ProvisioningState: to.Ptr("Succeeded"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.Disk) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.Disk)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/CreateOrUpdateABurstingEnabledManagedDisk.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/UpdateAManagedDiskToAddAcceleratedNetworking.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a managed disk to add accelerated networking."},
	})
	client, err = armcompute.NewDisksClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginUpdate(ctx,
		"myResourceGroup",
		"myDisk",
		armcompute.DiskUpdate{
			Properties: &armcompute.DiskUpdateProperties{
				SupportedCapabilities: &armcompute.SupportedCapabilities{
					AcceleratedNetwork: to.Ptr(false),
				},
			},
		},
		&armcompute.DisksClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/UpdateAManagedDiskToAddAcceleratedNetworking.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/UpdateAManagedDiskToAddAcceleratedNetworking.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.Disk{
		Name:     to.Ptr("myDisk"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption: to.Ptr(armcompute.DiskCreateOptionFromImage),
				ImageReference: &armcompute.ImageDiskReference{
					ID: to.Ptr("/Subscriptions/{subscription-id}/Providers/Microsoft.Compute/Locations/westus/Publishers/test_test_pmc2pc1/ArtifactTypes/VMImage/Offers/marketplace_vm_test/Skus/test_sku/Versions/1.0.0"),
				},
			},
			DiskSizeGB:        to.Ptr[int32](127),
			HyperVGeneration:  to.Ptr(armcompute.HyperVGenerationV1),
			OSType:            to.Ptr(armcompute.OperatingSystemTypesWindows),
			ProvisioningState: to.Ptr("Succeeded"),
			SupportedCapabilities: &armcompute.SupportedCapabilities{
				AcceleratedNetwork: to.Ptr(false),
			},
		},
		SKU: &armcompute.DiskSKU{
			Name: to.Ptr(armcompute.DiskStorageAccountTypesStandardLRS),
			Tier: to.Ptr("Standard"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.Disk) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.Disk)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/UpdateAManagedDiskToAddAcceleratedNetworking.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/UpdateAManagedDiskToAddArchitecture.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a managed disk to add architecture."},
	})
	client, err = armcompute.NewDisksClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginUpdate(ctx,
		"myResourceGroup",
		"myDisk",
		armcompute.DiskUpdate{
			Properties: &armcompute.DiskUpdateProperties{
				SupportedCapabilities: &armcompute.SupportedCapabilities{
					Architecture: to.Ptr(armcompute.ArchitectureArm64),
				},
			},
		},
		&armcompute.DisksClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/UpdateAManagedDiskToAddArchitecture.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/UpdateAManagedDiskToAddArchitecture.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.Disk{
		Name:     to.Ptr("myDisk"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption: to.Ptr(armcompute.DiskCreateOptionFromImage),
				ImageReference: &armcompute.ImageDiskReference{
					ID: to.Ptr("/Subscriptions/{subscription-id}/Providers/Microsoft.Compute/Locations/westus/Publishers/test_test_pmc2pc1/ArtifactTypes/VMImage/Offers/marketplace_vm_test/Skus/test_sku/Versions/1.0.0"),
				},
			},
			DiskSizeGB:        to.Ptr[int32](127),
			HyperVGeneration:  to.Ptr(armcompute.HyperVGenerationV1),
			OSType:            to.Ptr(armcompute.OperatingSystemTypesWindows),
			ProvisioningState: to.Ptr("Succeeded"),
			SupportedCapabilities: &armcompute.SupportedCapabilities{
				Architecture: to.Ptr(armcompute.ArchitectureArm64),
			},
		},
		SKU: &armcompute.DiskSKU{
			Name: to.Ptr(armcompute.DiskStorageAccountTypesStandardLRS),
			Tier: to.Ptr("Standard"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.Disk) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.Disk)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/UpdateAManagedDiskToAddArchitecture.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/UpdateAManagedDiskToAddPurchasePlan.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a managed disk to add purchase plan."},
	})
	client, err = armcompute.NewDisksClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginUpdate(ctx,
		"myResourceGroup",
		"myDisk",
		armcompute.DiskUpdate{
			Properties: &armcompute.DiskUpdateProperties{
				PurchasePlan: &armcompute.DiskPurchasePlan{
					Name:          to.Ptr("myPurchasePlanName"),
					Product:       to.Ptr("myPurchasePlanProduct"),
					PromotionCode: to.Ptr("myPurchasePlanPromotionCode"),
					Publisher:     to.Ptr("myPurchasePlanPublisher"),
				},
			},
		},
		&armcompute.DisksClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/UpdateAManagedDiskToAddPurchasePlan.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/UpdateAManagedDiskToAddPurchasePlan.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.Disk{
		Name:     to.Ptr("myDisk"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption: to.Ptr(armcompute.DiskCreateOptionFromImage),
				ImageReference: &armcompute.ImageDiskReference{
					ID: to.Ptr("/Subscriptions/{subscription-id}/Providers/Microsoft.Compute/Locations/westus/Publishers/test_test_pmc2pc1/ArtifactTypes/VMImage/Offers/marketplace_vm_test/Skus/test_sku/Versions/1.0.0"),
				},
			},
			DiskSizeGB:        to.Ptr[int32](127),
			HyperVGeneration:  to.Ptr(armcompute.HyperVGenerationV1),
			OSType:            to.Ptr(armcompute.OperatingSystemTypesWindows),
			ProvisioningState: to.Ptr("Succeeded"),
			PurchasePlan: &armcompute.DiskPurchasePlan{
				Name:          to.Ptr("myPurchasePlanName"),
				Product:       to.Ptr("myPurchasePlanProduct"),
				PromotionCode: to.Ptr("myPurchasePlanPromotionCode"),
				Publisher:     to.Ptr("myPurchasePlanPublisher"),
			},
		},
		SKU: &armcompute.DiskSKU{
			Name: to.Ptr(armcompute.DiskStorageAccountTypesStandardLRS),
			Tier: to.Ptr("Standard"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.Disk) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.Disk)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/UpdateAManagedDiskToAddPurchasePlan.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/UpdateAManagedDiskToAddSupportsHibernation.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a managed disk to add supportsHibernation."},
	})
	client, err = armcompute.NewDisksClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginUpdate(ctx,
		"myResourceGroup",
		"myDisk",
		armcompute.DiskUpdate{
			Properties: &armcompute.DiskUpdateProperties{
				SupportsHibernation: to.Ptr(true),
			},
		},
		&armcompute.DisksClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/UpdateAManagedDiskToAddSupportsHibernation.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/UpdateAManagedDiskToAddSupportsHibernation.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.Disk{
		Name:     to.Ptr("myDisk"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption: to.Ptr(armcompute.DiskCreateOptionImport),
				SourceURI:    to.Ptr("https://mystorageaccount.blob.core.windows.net/osimages/osimage.vhd"),
			},
			DiskSizeGB:          to.Ptr[int32](127),
			HyperVGeneration:    to.Ptr(armcompute.HyperVGenerationV1),
			OSType:              to.Ptr(armcompute.OperatingSystemTypesWindows),
			ProvisioningState:   to.Ptr("Succeeded"),
			SupportsHibernation: to.Ptr(true),
		},
		SKU: &armcompute.DiskSKU{
			Name: to.Ptr(armcompute.DiskStorageAccountTypesStandardLRS),
			Tier: to.Ptr("Standard"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.Disk) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.Disk)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/UpdateAManagedDiskToAddSupportsHibernation.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/UpdateAManagedDiskToChangeTier.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a managed disk to change tier."},
	})
	client, err = armcompute.NewDisksClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginUpdate(ctx,
		"myResourceGroup",
		"myDisk",
		armcompute.DiskUpdate{
			Properties: &armcompute.DiskUpdateProperties{
				Tier: to.Ptr("P30"),
			},
		},
		&armcompute.DisksClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/UpdateAManagedDiskToChangeTier.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/UpdateAManagedDiskToChangeTier.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.Disk{
		Name:     to.Ptr("myDisk"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption: to.Ptr(armcompute.DiskCreateOptionEmpty),
			},
			ProvisioningState: to.Ptr("Succeeded"),
			Tier:              to.Ptr("P30"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.Disk) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.Disk)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/UpdateAManagedDiskToChangeTier.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/UpdateAManagedDiskToDisableBursting.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a managed disk to disable bursting."},
	})
	client, err = armcompute.NewDisksClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginUpdate(ctx,
		"myResourceGroup",
		"myDisk",
		armcompute.DiskUpdate{
			Properties: &armcompute.DiskUpdateProperties{
				BurstingEnabled: to.Ptr(false),
			},
		},
		&armcompute.DisksClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/UpdateAManagedDiskToDisableBursting.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/UpdateAManagedDiskToDisableBursting.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.Disk{
		Name:     to.Ptr("myDisk"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption: to.Ptr(armcompute.DiskCreateOptionEmpty),
			},
			ProvisioningState: to.Ptr("Succeeded"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.Disk) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.Disk)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/UpdateAManagedDiskToDisableBursting.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/UpdateAManagedDiskToRemoveDiskAccess.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update managed disk to remove disk access resource association."},
	})
	client, err = armcompute.NewDisksClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginUpdate(ctx,
		"myResourceGroup",
		"myDisk",
		armcompute.DiskUpdate{
			Properties: &armcompute.DiskUpdateProperties{
				NetworkAccessPolicy: to.Ptr(armcompute.NetworkAccessPolicyAllowAll),
			},
		},
		&armcompute.DisksClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/UpdateAManagedDiskToRemoveDiskAccess.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/UpdateAManagedDiskToRemoveDiskAccess.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.Disk{
		Name:     to.Ptr("myDisk"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption: to.Ptr(armcompute.DiskCreateOptionEmpty),
			},
			DiskSizeGB:          to.Ptr[int32](200),
			NetworkAccessPolicy: to.Ptr(armcompute.NetworkAccessPolicyAllowAll),
			ProvisioningState:   to.Ptr("Succeeded"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.Disk) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.Disk)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/UpdateAManagedDiskToRemoveDiskAccess.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestDisks_Get(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/GetInformationAboutAManagedDisk.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get information about a managed disk."},
	})
	client, err := armcompute.NewDisksClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myManagedDisk",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/GetInformationAboutAManagedDisk.json: %v", err)
	}
	// Response check
	exampleRes := armcompute.Disk{
		Name:     to.Ptr("myManagedDisk"),
		Type:     to.Ptr("Microsoft.Compute/disks"),
		ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk"),
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"department": to.Ptr("Development"),
			"project":    to.Ptr("ManagedDisks"),
		},
		ManagedBy: to.Ptr("/subscriptions/123caaa-123v-v211-a49f-f88ccac5bf88/resourceGroups/ResourceGroupName/providers/Microsoft.Compute/virtualMachines/TestVM414689371c88843d65ec"),
		Properties: &armcompute.DiskProperties{
			CreationData: &armcompute.CreationData{
				CreateOption: to.Ptr(armcompute.DiskCreateOptionFromImage),
				ImageReference: &armcompute.ImageDiskReference{
					ID: to.Ptr("/Subscriptions/{subscription-id}/Providers/Microsoft.Compute/Locations/westus/Publishers/test_test_pmc2pc1/ArtifactTypes/VMImage/Offers/marketplace_vm_test/Skus/test_sku/Versions/1.0.0"),
				},
			},
			DataAccessAuthMode: to.Ptr(armcompute.DataAccessAuthModeAzureActiveDirectory),
			DiskSizeGB:         to.Ptr[int32](10),
			Encryption: &armcompute.Encryption{
				Type: to.Ptr(armcompute.EncryptionTypeEncryptionAtRestWithPlatformKey),
			},
			EncryptionSettingsCollection: &armcompute.EncryptionSettingsCollection{
				Enabled: to.Ptr(true),
				EncryptionSettings: []*armcompute.EncryptionSettingsElement{
					{
						DiskEncryptionKey: &armcompute.KeyVaultAndSecretReference{
							SecretURL: to.Ptr("https://myvmvault.vault-int.azure-int.net/secrets/{secret}"),
							SourceVault: &armcompute.SourceVault{
								ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
							},
						},
						KeyEncryptionKey: &armcompute.KeyVaultAndKeyReference{
							KeyURL: to.Ptr("https://myvmvault.vault-int.azure-int.net/keys/{key}"),
							SourceVault: &armcompute.SourceVault{
								ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
							},
						},
					}},
			},
			HyperVGeneration:  to.Ptr(armcompute.HyperVGenerationV1),
			OSType:            to.Ptr(armcompute.OperatingSystemTypesWindows),
			ProvisioningState: to.Ptr("Succeeded"),
			PurchasePlan: &armcompute.DiskPurchasePlan{
				Name:      to.Ptr("test_sku"),
				Product:   to.Ptr("marketplace_vm_test"),
				Publisher: to.Ptr("test_test_pmc2pc1"),
			},
			SecurityProfile: &armcompute.DiskSecurityProfile{
				SecurityType: to.Ptr(armcompute.DiskSecurityTypesTrustedLaunch),
			},
			SupportedCapabilities: &armcompute.SupportedCapabilities{
				AcceleratedNetwork: to.Ptr(true),
				Architecture:       to.Ptr(armcompute.ArchitectureArm64),
			},
			SupportsHibernation: to.Ptr(true),
			TimeCreated:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-12-28T04:41:35.079872+00:00"); return t }()),
		},
		SKU: &armcompute.DiskSKU{
			Name: to.Ptr(armcompute.DiskStorageAccountTypesStandardLRS),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.Disk) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.Disk)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/GetInformationAboutAManagedDisk.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestDisks_Delete(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/DeleteAManagedDisk.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a managed disk."},
	})
	client, err := armcompute.NewDisksClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"myDisk",
		&armcompute.DisksClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/DeleteAManagedDisk.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/DeleteAManagedDisk.json: %v", err)
	}
}

func TestDisks_ListByResourceGroup(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/ListManagedDisksInAResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all managed disks in a resource group."},
	})
	client, err := armcompute.NewDisksClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := client.NewListByResourceGroupPager("myResourceGroup",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/ListManagedDisksInAResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcompute.DiskList{
			Value: []*armcompute.Disk{
				{
					Name:     to.Ptr("myManagedDisk1"),
					Type:     to.Ptr("Microsoft.Compute/disks"),
					ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk"),
					Location: to.Ptr("westus"),
					Tags: map[string]*string{
						"department": to.Ptr("Development"),
						"project":    to.Ptr("ManagedDisks"),
					},
					Properties: &armcompute.DiskProperties{
						CreationData: &armcompute.CreationData{
							CreateOption:     to.Ptr(armcompute.DiskCreateOptionCopy),
							SourceResourceID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk"),
						},
						DiskSizeGB: to.Ptr[int32](200),
						Encryption: &armcompute.Encryption{
							Type: to.Ptr(armcompute.EncryptionTypeEncryptionAtRestWithPlatformKey),
						},
						EncryptionSettingsCollection: &armcompute.EncryptionSettingsCollection{
							Enabled: to.Ptr(true),
							EncryptionSettings: []*armcompute.EncryptionSettingsElement{
								{
									DiskEncryptionKey: &armcompute.KeyVaultAndSecretReference{
										SecretURL: to.Ptr("https://myvmvault.vault-int.azure-int.net/secrets/{secret}"),
										SourceVault: &armcompute.SourceVault{
											ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
										},
									},
									KeyEncryptionKey: &armcompute.KeyVaultAndKeyReference{
										KeyURL: to.Ptr("https://myvmvault.vault-int.azure-int.net/keys/{key}"),
										SourceVault: &armcompute.SourceVault{
											ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
										},
									},
								}},
						},
						OSType:            to.Ptr(armcompute.OperatingSystemTypesWindows),
						ProvisioningState: to.Ptr("Succeeded"),
						TimeCreated:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-12-28T04:41:35.9278721+00:00"); return t }()),
					},
				},
				{
					Name:     to.Ptr("myManagedDisk2"),
					Type:     to.Ptr("Microsoft.Compute/disks"),
					ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk"),
					Location: to.Ptr("westus"),
					Properties: &armcompute.DiskProperties{
						CreationData: &armcompute.CreationData{
							CreateOption: to.Ptr(armcompute.DiskCreateOptionEmpty),
						},
						DiskSizeGB: to.Ptr[int32](10),
						Encryption: &armcompute.Encryption{
							Type: to.Ptr(armcompute.EncryptionTypeEncryptionAtRestWithPlatformKey),
						},
						OSType:            to.Ptr(armcompute.OperatingSystemTypesWindows),
						ProvisioningState: to.Ptr("Succeeded"),
						TimeCreated:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-12-28T04:41:36.872242+00:00"); return t }()),
					},
				},
				{
					Name:     to.Ptr("myManagedDisk3"),
					Type:     to.Ptr("Microsoft.Compute/disks"),
					ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk"),
					Location: to.Ptr("westus"),
					Tags: map[string]*string{
						"department": to.Ptr("Development"),
						"project":    to.Ptr("ManagedDisks"),
					},
					Properties: &armcompute.DiskProperties{
						CreationData: &armcompute.CreationData{
							CreateOption: to.Ptr(armcompute.DiskCreateOptionFromImage),
							ImageReference: &armcompute.ImageDiskReference{
								ID: to.Ptr("/Subscriptions/{subscriptionId}/Providers/Microsoft.Compute/Locations/uswest/Publishers/Microsoft/ArtifactTypes/VMImage/Offers/{offer}"),
							},
						},
						DiskSizeGB: to.Ptr[int32](200),
						Encryption: &armcompute.Encryption{
							Type: to.Ptr(armcompute.EncryptionTypeEncryptionAtRestWithPlatformKey),
						},
						EncryptionSettingsCollection: &armcompute.EncryptionSettingsCollection{
							Enabled: to.Ptr(true),
							EncryptionSettings: []*armcompute.EncryptionSettingsElement{
								{
									DiskEncryptionKey: &armcompute.KeyVaultAndSecretReference{
										SecretURL: to.Ptr("https://myvmvault.vault-int.azure-int.net/secrets/{secret}"),
										SourceVault: &armcompute.SourceVault{
											ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
										},
									},
									KeyEncryptionKey: &armcompute.KeyVaultAndKeyReference{
										KeyURL: to.Ptr("https://myvmvault.vault-int.azure-int.net/keys/{key}"),
										SourceVault: &armcompute.SourceVault{
											ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
										},
									},
								}},
						},
						OSType:            to.Ptr(armcompute.OperatingSystemTypesWindows),
						ProvisioningState: to.Ptr("Succeeded"),
						TimeCreated:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-12-28T04:41:36.3973934+00:00"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DiskList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DiskList)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/ListManagedDisksInAResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDisks_List(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/ListManagedDisksInASubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all managed disks in a subscription."},
	})
	client, err := armcompute.NewDisksClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := client.NewListPager(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/ListManagedDisksInASubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcompute.DiskList{
			Value: []*armcompute.Disk{
				{
					Name:     to.Ptr("myManagedDisk1"),
					Type:     to.Ptr("Microsoft.Compute/disks"),
					ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk1"),
					Location: to.Ptr("westus"),
					Tags: map[string]*string{
						"department": to.Ptr("Development"),
						"project":    to.Ptr("ManagedDisks"),
					},
					Properties: &armcompute.DiskProperties{
						CreationData: &armcompute.CreationData{
							CreateOption:     to.Ptr(armcompute.DiskCreateOptionCopy),
							SourceResourceID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk1"),
						},
						DiskSizeGB: to.Ptr[int32](200),
						Encryption: &armcompute.Encryption{
							Type: to.Ptr(armcompute.EncryptionTypeEncryptionAtRestWithPlatformKey),
						},
						EncryptionSettingsCollection: &armcompute.EncryptionSettingsCollection{
							Enabled: to.Ptr(true),
							EncryptionSettings: []*armcompute.EncryptionSettingsElement{
								{
									DiskEncryptionKey: &armcompute.KeyVaultAndSecretReference{
										SecretURL: to.Ptr("https://myvmvault.vault-int.azure-int.net/secrets/{secret}"),
										SourceVault: &armcompute.SourceVault{
											ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
										},
									},
									KeyEncryptionKey: &armcompute.KeyVaultAndKeyReference{
										KeyURL: to.Ptr("https://myvmvault.vault-int.azure-int.net/keys/{key}"),
										SourceVault: &armcompute.SourceVault{
											ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
										},
									},
								}},
						},
						OSType:            to.Ptr(armcompute.OperatingSystemTypesWindows),
						ProvisioningState: to.Ptr("Succeeded"),
						TimeCreated:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-12-28T04:41:35.9278721+00:00"); return t }()),
					},
				},
				{
					Name:     to.Ptr("myManagedDisk2"),
					Type:     to.Ptr("Microsoft.Compute/disks"),
					ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk2"),
					Location: to.Ptr("westus"),
					Properties: &armcompute.DiskProperties{
						CreationData: &armcompute.CreationData{
							CreateOption: to.Ptr(armcompute.DiskCreateOptionEmpty),
						},
						DiskSizeGB: to.Ptr[int32](10),
						Encryption: &armcompute.Encryption{
							Type: to.Ptr(armcompute.EncryptionTypeEncryptionAtRestWithPlatformKey),
						},
						OSType:            to.Ptr(armcompute.OperatingSystemTypesWindows),
						ProvisioningState: to.Ptr("Succeeded"),
						TimeCreated:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-12-28T04:41:36.872242+00:00"); return t }()),
					},
				},
				{
					Name:     to.Ptr("myManagedDisk3"),
					Type:     to.Ptr("Microsoft.Compute/disks"),
					ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk3"),
					Location: to.Ptr("westus"),
					Tags: map[string]*string{
						"department": to.Ptr("Development"),
						"project":    to.Ptr("ManagedDisks"),
					},
					Properties: &armcompute.DiskProperties{
						CreationData: &armcompute.CreationData{
							CreateOption: to.Ptr(armcompute.DiskCreateOptionFromImage),
							ImageReference: &armcompute.ImageDiskReference{
								ID: to.Ptr("/Subscriptions/{subscriptionId}/Providers/Microsoft.Compute/Locations/uswest/Publishers/Microsoft/ArtifactTypes/VMImage/Offers/{offer}"),
							},
						},
						DiskSizeGB: to.Ptr[int32](200),
						Encryption: &armcompute.Encryption{
							Type: to.Ptr(armcompute.EncryptionTypeEncryptionAtRestWithPlatformKey),
						},
						EncryptionSettingsCollection: &armcompute.EncryptionSettingsCollection{
							Enabled: to.Ptr(true),
							EncryptionSettings: []*armcompute.EncryptionSettingsElement{
								{
									DiskEncryptionKey: &armcompute.KeyVaultAndSecretReference{
										SecretURL: to.Ptr("https://myvmvault.vault-int.azure-int.net/secrets/{secret}"),
										SourceVault: &armcompute.SourceVault{
											ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
										},
									},
									KeyEncryptionKey: &armcompute.KeyVaultAndKeyReference{
										KeyURL: to.Ptr("https://myvmvault.vault-int.azure-int.net/keys/{key}"),
										SourceVault: &armcompute.SourceVault{
											ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
										},
									},
								}},
						},
						OSType:            to.Ptr(armcompute.OperatingSystemTypesWindows),
						ProvisioningState: to.Ptr("Succeeded"),
						TimeCreated:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-12-28T04:41:36.3973934+00:00"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DiskList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DiskList)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/ListManagedDisksInASubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDisks_GrantAccess(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/BeginGetAccessManagedDisk.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a sas on a managed disk."},
	})
	client, err := armcompute.NewDisksClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginGrantAccess(ctx,
		"myResourceGroup",
		"myDisk",
		armcompute.GrantAccessData{
			Access:            to.Ptr(armcompute.AccessLevelRead),
			DurationInSeconds: to.Ptr[int32](300),
		},
		&armcompute.DisksClientBeginGrantAccessOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/BeginGetAccessManagedDisk.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/BeginGetAccessManagedDisk.json: %v", err)
	}
	// Response check
	exampleRes := armcompute.AccessURI{
		AccessSAS: to.Ptr("https://md-gpvmcxzlzxgd.partition.blob.storage.azure.net/xx3cqcx53f0v/abcd?sv=2014-02-14&sr=b&sk=key1&sig=XXX&st=2021-05-24T18:02:34Z&se=2021-05-24T18:19:14Z&sp=r"),
	}
	if !reflect.DeepEqual(exampleRes, res.AccessURI) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.AccessURI)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/BeginGetAccessManagedDisk.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/BeginGetAccessManagedDiskWithVMGuestState.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get sas on managed disk and VM guest state"},
	})
	client, err = armcompute.NewDisksClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginGrantAccess(ctx,
		"myResourceGroup",
		"myDisk",
		armcompute.GrantAccessData{
			Access:                   to.Ptr(armcompute.AccessLevelRead),
			DurationInSeconds:        to.Ptr[int32](300),
			GetSecureVMGuestStateSAS: to.Ptr(true),
		},
		&armcompute.DisksClientBeginGrantAccessOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/BeginGetAccessManagedDiskWithVMGuestState.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/BeginGetAccessManagedDiskWithVMGuestState.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.AccessURI{
		AccessSAS:             to.Ptr("https://md-gpvmcxzlzxgd.partition.blob.storage.azure.net/xx3cqcx53f0v/abcd?sv=2014-02-14&sr=b&sk=key1&sig=XXX&st=2021-05-24T18:02:34Z&se=2021-05-24T18:19:14Z&sp=r"),
		SecurityDataAccessSAS: to.Ptr("https://md-gpvmcxzlzxgd.partition.blob.storage.azure.net/xx3cqcx53f0v/b9bf5824-6122-49e0-ba22-042f76ccd8a1_vmgs?sv=2014-02-14&sr=b&sk=key1&sig=XXX&st=2021-05-24T18:02:34Z&se=2021-05-24T18:19:14Z&sp=r"),
	}
	if !reflect.DeepEqual(exampleRes, res.AccessURI) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.AccessURI)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/BeginGetAccessManagedDiskWithVMGuestState.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestDisks_RevokeAccess(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/EndGetAccessManagedDisk.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Revoke access to a managed disk."},
	})
	client, err := armcompute.NewDisksClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginRevokeAccess(ctx,
		"myResourceGroup",
		"myDisk",
		&armcompute.DisksClientBeginRevokeAccessOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/EndGetAccessManagedDisk.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/EndGetAccessManagedDisk.json: %v", err)
	}
}

func TestSnapshots_CreateOrUpdate(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/CreateASnapshotByImportingAnUnmanagedBlobFromADifferentSubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a snapshot by importing an unmanaged blob from a different subscription."},
	})
	client, err := armcompute.NewSnapshotsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"mySnapshot1",
		armcompute.Snapshot{
			Location: to.Ptr("West US"),
			Properties: &armcompute.SnapshotProperties{
				CreationData: &armcompute.CreationData{
					CreateOption:     to.Ptr(armcompute.DiskCreateOptionImport),
					SourceURI:        to.Ptr("https://mystorageaccount.blob.core.windows.net/osimages/osimage.vhd"),
					StorageAccountID: to.Ptr("subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Storage/storageAccounts/myStorageAccount"),
				},
			},
		},
		&armcompute.SnapshotsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/CreateASnapshotByImportingAnUnmanagedBlobFromADifferentSubscription.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/CreateASnapshotByImportingAnUnmanagedBlobFromADifferentSubscription.json: %v", err)
	}
	// Response check
	exampleRes := armcompute.Snapshot{
		Name:     to.Ptr("mySnapshot1"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.SnapshotProperties{
			CreationData: &armcompute.CreationData{
				CreateOption:     to.Ptr(armcompute.DiskCreateOptionImport),
				SourceURI:        to.Ptr("https://mystorageaccount.blob.core.windows.net/osimages/osimage.vhd"),
				StorageAccountID: to.Ptr("subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Storage/storageAccounts/myStorageAccount"),
			},
			ProvisioningState: to.Ptr("Succeeded"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.Snapshot) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.Snapshot)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/CreateASnapshotByImportingAnUnmanagedBlobFromADifferentSubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/CreateASnapshotByImportingAnUnmanagedBlobFromTheSameSubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a snapshot by importing an unmanaged blob from the same subscription."},
	})
	client, err = armcompute.NewSnapshotsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"mySnapshot1",
		armcompute.Snapshot{
			Location: to.Ptr("West US"),
			Properties: &armcompute.SnapshotProperties{
				CreationData: &armcompute.CreationData{
					CreateOption: to.Ptr(armcompute.DiskCreateOptionImport),
					SourceURI:    to.Ptr("https://mystorageaccount.blob.core.windows.net/osimages/osimage.vhd"),
				},
			},
		},
		&armcompute.SnapshotsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/CreateASnapshotByImportingAnUnmanagedBlobFromTheSameSubscription.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/CreateASnapshotByImportingAnUnmanagedBlobFromTheSameSubscription.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.Snapshot{
		Name:     to.Ptr("mySnapshot1"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.SnapshotProperties{
			CreationData: &armcompute.CreationData{
				CreateOption: to.Ptr(armcompute.DiskCreateOptionImport),
				SourceURI:    to.Ptr("https://mystorageaccount.blob.core.windows.net/osimages/osimage.vhd"),
			},
			ProvisioningState: to.Ptr("Succeeded"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.Snapshot) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.Snapshot)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/CreateASnapshotByImportingAnUnmanagedBlobFromTheSameSubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/CreateASnapshotFromAnExistingSnapshotInDifferentRegion.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a snapshot from an existing snapshot in the same or a different subscription in a different region."},
	})
	client, err = armcompute.NewSnapshotsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"mySnapshot2",
		armcompute.Snapshot{
			Location: to.Ptr("West US"),
			Properties: &armcompute.SnapshotProperties{
				CreationData: &armcompute.CreationData{
					CreateOption:     to.Ptr(armcompute.DiskCreateOptionCopyStart),
					SourceResourceID: to.Ptr("subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot1"),
				},
			},
		},
		&armcompute.SnapshotsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/CreateASnapshotFromAnExistingSnapshotInDifferentRegion.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/CreateASnapshotFromAnExistingSnapshotInDifferentRegion.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.Snapshot{
		Name:     to.Ptr("mySnapshot2"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.SnapshotProperties{
			CreationData: &armcompute.CreationData{
				CreateOption:     to.Ptr(armcompute.DiskCreateOptionCopyStart),
				SourceResourceID: to.Ptr("subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot1"),
			},
			ProvisioningState: to.Ptr("Succeeded"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.Snapshot) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.Snapshot)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/CreateASnapshotFromAnExistingSnapshotInDifferentRegion.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/CreateASnapshotFromAnExistingSnapshot.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a snapshot from an existing snapshot in the same or a different subscription."},
	})
	client, err = armcompute.NewSnapshotsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"mySnapshot2",
		armcompute.Snapshot{
			Location: to.Ptr("West US"),
			Properties: &armcompute.SnapshotProperties{
				CreationData: &armcompute.CreationData{
					CreateOption:     to.Ptr(armcompute.DiskCreateOptionCopy),
					SourceResourceID: to.Ptr("subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot1"),
				},
			},
		},
		&armcompute.SnapshotsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/CreateASnapshotFromAnExistingSnapshot.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/CreateASnapshotFromAnExistingSnapshot.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.Snapshot{
		Name:     to.Ptr("mySnapshot2"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.SnapshotProperties{
			CreationData: &armcompute.CreationData{
				CreateOption:     to.Ptr(armcompute.DiskCreateOptionCopy),
				SourceResourceID: to.Ptr("subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot1"),
			},
			ProvisioningState: to.Ptr("Succeeded"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.Snapshot) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.Snapshot)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/CreateASnapshotFromAnExistingSnapshot.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestSnapshots_Update(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/UpdateASnapshotWithAcceleratedNetwork.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a snapshot with accelerated networking."},
	})
	client, err := armcompute.NewSnapshotsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginUpdate(ctx,
		"myResourceGroup",
		"mySnapshot",
		armcompute.SnapshotUpdate{
			Properties: &armcompute.SnapshotUpdateProperties{
				DiskSizeGB: to.Ptr[int32](20),
				SupportedCapabilities: &armcompute.SupportedCapabilities{
					AcceleratedNetwork: to.Ptr(false),
				},
			},
			Tags: map[string]*string{
				"department": to.Ptr("Development"),
				"project":    to.Ptr("UpdateSnapshots"),
			},
		},
		&armcompute.SnapshotsClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/UpdateASnapshotWithAcceleratedNetwork.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/UpdateASnapshotWithAcceleratedNetwork.json: %v", err)
	}
	// Response check
	exampleRes := armcompute.Snapshot{
		Name:     to.Ptr("mySnapshot"),
		Location: to.Ptr("West US"),
		Tags: map[string]*string{
			"department": to.Ptr("Development"),
			"project":    to.Ptr("UpdateSnapshots"),
		},
		Properties: &armcompute.SnapshotProperties{
			CreationData: &armcompute.CreationData{
				CreateOption:     to.Ptr(armcompute.DiskCreateOptionCopy),
				SourceResourceID: to.Ptr("subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot1"),
			},
			DiskSizeGB:        to.Ptr[int32](20),
			ProvisioningState: to.Ptr("Succeeded"),
			SupportedCapabilities: &armcompute.SupportedCapabilities{
				AcceleratedNetwork: to.Ptr(false),
			},
		},
	}
	if !reflect.DeepEqual(exampleRes, res.Snapshot) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.Snapshot)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/UpdateASnapshotWithAcceleratedNetwork.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/UpdateASnapshot.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a snapshot."},
	})
	client, err = armcompute.NewSnapshotsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginUpdate(ctx,
		"myResourceGroup",
		"mySnapshot",
		armcompute.SnapshotUpdate{
			Properties: &armcompute.SnapshotUpdateProperties{
				DiskSizeGB: to.Ptr[int32](20),
			},
			Tags: map[string]*string{
				"department": to.Ptr("Development"),
				"project":    to.Ptr("UpdateSnapshots"),
			},
		},
		&armcompute.SnapshotsClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/UpdateASnapshot.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/UpdateASnapshot.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.Snapshot{
		Name:     to.Ptr("mySnapshot"),
		Location: to.Ptr("West US"),
		Tags: map[string]*string{
			"department": to.Ptr("Development"),
			"project":    to.Ptr("UpdateSnapshots"),
		},
		Properties: &armcompute.SnapshotProperties{
			CreationData: &armcompute.CreationData{
				CreateOption:     to.Ptr(armcompute.DiskCreateOptionCopy),
				SourceResourceID: to.Ptr("subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot1"),
			},
			DiskSizeGB:        to.Ptr[int32](20),
			ProvisioningState: to.Ptr("Succeeded"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.Snapshot) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.Snapshot)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/UpdateASnapshot.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestSnapshots_Get(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/GetInformationAboutASnapshot.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get information about a snapshot."},
	})
	client, err := armcompute.NewSnapshotsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := client.Get(ctx,
		"myResourceGroup",
		"mySnapshot",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/GetInformationAboutASnapshot.json: %v", err)
	}
	// Response check
	exampleRes := armcompute.Snapshot{
		Name:     to.Ptr("mySnapshot"),
		Type:     to.Ptr("Microsoft.Compute/snapshots"),
		ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot"),
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"department": to.Ptr("Development"),
			"project":    to.Ptr("Snapshots"),
		},
		Properties: &armcompute.SnapshotProperties{
			CreationData: &armcompute.CreationData{
				CreateOption:     to.Ptr(armcompute.DiskCreateOptionCopy),
				SourceResourceID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myDisk"),
				SourceUniqueID:   to.Ptr("d633885d-d102-4481-901e-5b2413d1a7be"),
			},
			DataAccessAuthMode: to.Ptr(armcompute.DataAccessAuthModeAzureActiveDirectory),
			DiskSizeGB:         to.Ptr[int32](100),
			Encryption: &armcompute.Encryption{
				Type: to.Ptr(armcompute.EncryptionTypeEncryptionAtRestWithPlatformKey),
			},
			EncryptionSettingsCollection: &armcompute.EncryptionSettingsCollection{
				Enabled: to.Ptr(true),
				EncryptionSettings: []*armcompute.EncryptionSettingsElement{
					{
						DiskEncryptionKey: &armcompute.KeyVaultAndSecretReference{
							SecretURL: to.Ptr("https://myvmvault.vault-int.azure-int.net/secrets/{secret}"),
							SourceVault: &armcompute.SourceVault{
								ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
							},
						},
						KeyEncryptionKey: &armcompute.KeyVaultAndKeyReference{
							KeyURL: to.Ptr("https://myvmvault.vault-int.azure-int.net/keys/{key}"),
							SourceVault: &armcompute.SourceVault{
								ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
							},
						},
					}},
			},
			HyperVGeneration:  to.Ptr(armcompute.HyperVGenerationV1),
			OSType:            to.Ptr(armcompute.OperatingSystemTypesWindows),
			ProvisioningState: to.Ptr("Succeeded"),
			PurchasePlan: &armcompute.DiskPurchasePlan{
				Name:      to.Ptr("test_sku"),
				Product:   to.Ptr("marketplace_vm_test"),
				Publisher: to.Ptr("test_test_pmc2pc1"),
			},
			SupportedCapabilities: &armcompute.SupportedCapabilities{
				AcceleratedNetwork: to.Ptr(true),
				Architecture:       to.Ptr(armcompute.ArchitectureArm64),
			},
			SupportsHibernation: to.Ptr(true),
			TimeCreated:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-12-28T04:41:35.079872+00:00"); return t }()),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.Snapshot) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.Snapshot)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/GetInformationAboutASnapshot.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestSnapshots_Delete(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/DeleteASnapshot.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a snapshot."},
	})
	client, err := armcompute.NewSnapshotsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"mySnapshot",
		&armcompute.SnapshotsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/DeleteASnapshot.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/DeleteASnapshot.json: %v", err)
	}
}

func TestSnapshots_ListByResourceGroup(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/ListSnapshotsInAResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all snapshots in a resource group."},
	})
	client, err := armcompute.NewSnapshotsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := client.NewListByResourceGroupPager("myResourceGroup",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/ListSnapshotsInAResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcompute.SnapshotList{
			Value: []*armcompute.Snapshot{
				{
					Name:     to.Ptr("mySnapshot"),
					Type:     to.Ptr("Microsoft.Compute/snapshots"),
					ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot"),
					Location: to.Ptr("westus"),
					Tags: map[string]*string{
						"department": to.Ptr("Development"),
						"project":    to.Ptr("Snapshots"),
					},
					Properties: &armcompute.SnapshotProperties{
						CreationData: &armcompute.CreationData{
							CreateOption:     to.Ptr(armcompute.DiskCreateOptionCopy),
							SourceResourceID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot"),
						},
						DiskSizeGB: to.Ptr[int32](200),
						Encryption: &armcompute.Encryption{
							Type: to.Ptr(armcompute.EncryptionTypeEncryptionAtRestWithPlatformKey),
						},
						EncryptionSettingsCollection: &armcompute.EncryptionSettingsCollection{
							Enabled: to.Ptr(true),
							EncryptionSettings: []*armcompute.EncryptionSettingsElement{
								{
									DiskEncryptionKey: &armcompute.KeyVaultAndSecretReference{
										SecretURL: to.Ptr("https://myvmvault.vault-int.azure-int.net/secrets/{secret}"),
										SourceVault: &armcompute.SourceVault{
											ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
										},
									},
									KeyEncryptionKey: &armcompute.KeyVaultAndKeyReference{
										KeyURL: to.Ptr("https://myvmvault.vault-int.azure-int.net/keys/{key}"),
										SourceVault: &armcompute.SourceVault{
											ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
										},
									},
								}},
						},
						OSType:            to.Ptr(armcompute.OperatingSystemTypesWindows),
						ProvisioningState: to.Ptr("Succeeded"),
						TimeCreated:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-12-28T04:41:35.9278721+00:00"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SnapshotList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SnapshotList)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/ListSnapshotsInAResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSnapshots_List(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/ListSnapshotsInASubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all snapshots in a subscription."},
	})
	client, err := armcompute.NewSnapshotsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := client.NewListPager(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/ListSnapshotsInASubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcompute.SnapshotList{
			Value: []*armcompute.Snapshot{
				{
					Name:     to.Ptr("mySnapshot1"),
					Type:     to.Ptr("Microsoft.Compute/snapshots"),
					ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot1"),
					Location: to.Ptr("westus"),
					Tags: map[string]*string{
						"department": to.Ptr("Development"),
						"project":    to.Ptr("Snapshots"),
					},
					Properties: &armcompute.SnapshotProperties{
						CreationData: &armcompute.CreationData{
							CreateOption:     to.Ptr(armcompute.DiskCreateOptionCopy),
							SourceResourceID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot"),
						},
						DiskSizeGB: to.Ptr[int32](200),
						Encryption: &armcompute.Encryption{
							Type: to.Ptr(armcompute.EncryptionTypeEncryptionAtRestWithPlatformKey),
						},
						EncryptionSettingsCollection: &armcompute.EncryptionSettingsCollection{
							Enabled: to.Ptr(true),
							EncryptionSettings: []*armcompute.EncryptionSettingsElement{
								{
									DiskEncryptionKey: &armcompute.KeyVaultAndSecretReference{
										SecretURL: to.Ptr("https://myvmvault.vault-int.azure-int.net/secrets/{secret}"),
										SourceVault: &armcompute.SourceVault{
											ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
										},
									},
									KeyEncryptionKey: &armcompute.KeyVaultAndKeyReference{
										KeyURL: to.Ptr("https://myvmvault.vault-int.azure-int.net/keys/{key}"),
										SourceVault: &armcompute.SourceVault{
											ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
										},
									},
								}},
						},
						OSType:            to.Ptr(armcompute.OperatingSystemTypesWindows),
						ProvisioningState: to.Ptr("Succeeded"),
						TimeCreated:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-12-28T04:47:30.6630569+00:00"); return t }()),
					},
				},
				{
					Name:     to.Ptr("mySnapshot2"),
					Type:     to.Ptr("Microsoft.Compute/snapshots"),
					ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot2"),
					Location: to.Ptr("westus"),
					Tags: map[string]*string{
						"department": to.Ptr("Development"),
						"project":    to.Ptr("Snapshots"),
					},
					Properties: &armcompute.SnapshotProperties{
						CreationData: &armcompute.CreationData{
							CreateOption:     to.Ptr(armcompute.DiskCreateOptionImport),
							SourceURI:        to.Ptr("https://mystorageaccount.blob.core.windows.net/osimages/osimage.vhd"),
							StorageAccountID: to.Ptr("subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Storage/storageAccounts/myStorageAccount"),
						},
						DiskSizeGB: to.Ptr[int32](200),
						Encryption: &armcompute.Encryption{
							Type: to.Ptr(armcompute.EncryptionTypeEncryptionAtRestWithPlatformKey),
						},
						EncryptionSettingsCollection: &armcompute.EncryptionSettingsCollection{
							Enabled: to.Ptr(true),
							EncryptionSettings: []*armcompute.EncryptionSettingsElement{
								{
									DiskEncryptionKey: &armcompute.KeyVaultAndSecretReference{
										SecretURL: to.Ptr("https://myvmvault.vault-int.azure-int.net/secrets/{secret}"),
										SourceVault: &armcompute.SourceVault{
											ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
										},
									},
									KeyEncryptionKey: &armcompute.KeyVaultAndKeyReference{
										KeyURL: to.Ptr("https://myvmvault.vault-int.azure-int.net/keys/{key}"),
										SourceVault: &armcompute.SourceVault{
											ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
										},
									},
								}},
						},
						OSType:            to.Ptr(armcompute.OperatingSystemTypesWindows),
						ProvisioningState: to.Ptr("Succeeded"),
						TimeCreated:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-12-28T04:47:30.3247198+00:00"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SnapshotList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SnapshotList)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/ListSnapshotsInASubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSnapshots_GrantAccess(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/BeginGetAccessSnapshot.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a sas on a snapshot."},
	})
	client, err := armcompute.NewSnapshotsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginGrantAccess(ctx,
		"myResourceGroup",
		"mySnapshot",
		armcompute.GrantAccessData{
			Access:            to.Ptr(armcompute.AccessLevelRead),
			DurationInSeconds: to.Ptr[int32](300),
		},
		&armcompute.SnapshotsClientBeginGrantAccessOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/BeginGetAccessSnapshot.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/BeginGetAccessSnapshot.json: %v", err)
	}
	// Response check
	exampleRes := armcompute.AccessURI{
		AccessSAS: to.Ptr("https://md-gpvmcxzlzxgd.partition.blob.storage.azure.net/xx3cqcx53f0v/abcd?sv=2014-02-14&sr=b&sk=key1&sig=XXX&st=2021-05-24T18:02:34Z&se=2021-05-24T18:19:14Z&sp=r"),
	}
	if !reflect.DeepEqual(exampleRes, res.AccessURI) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.AccessURI)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/BeginGetAccessSnapshot.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestSnapshots_RevokeAccess(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/EndGetAccessSnapshot.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Revoke access to a snapshot."},
	})
	client, err := armcompute.NewSnapshotsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginRevokeAccess(ctx,
		"myResourceGroup",
		"mySnapshot",
		&armcompute.SnapshotsClientBeginRevokeAccessOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/EndGetAccessSnapshot.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/EndGetAccessSnapshot.json: %v", err)
	}
}

func TestDiskEncryptionSets_CreateOrUpdate(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/CreateADiskEncryptionSetWithKeyVaultFromADifferentSubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a disk encryption set with key vault from a different subscription."},
	})
	client, err := armcompute.NewDiskEncryptionSetsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myDiskEncryptionSet",
		armcompute.DiskEncryptionSet{
			Location: to.Ptr("West US"),
			Identity: &armcompute.EncryptionSetIdentity{
				Type: to.Ptr(armcompute.DiskEncryptionSetIdentityTypeSystemAssigned),
			},
			Properties: &armcompute.EncryptionSetProperties{
				ActiveKey: &armcompute.KeyForDiskEncryptionSet{
					KeyURL: to.Ptr("https://myvaultdifferentsub.vault-int.azure-int.net/keys/{key}"),
				},
				EncryptionType: to.Ptr(armcompute.DiskEncryptionSetTypeEncryptionAtRestWithCustomerKey),
			},
		},
		&armcompute.DiskEncryptionSetsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/CreateADiskEncryptionSetWithKeyVaultFromADifferentSubscription.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/CreateADiskEncryptionSetWithKeyVaultFromADifferentSubscription.json: %v", err)
	}
	// Response check
	exampleRes := armcompute.DiskEncryptionSet{
		Name:     to.Ptr("myDiskEncryptionSet"),
		Location: to.Ptr("West US"),
		Identity: &armcompute.EncryptionSetIdentity{
			Type: to.Ptr(armcompute.DiskEncryptionSetIdentityTypeSystemAssigned),
		},
		Properties: &armcompute.EncryptionSetProperties{
			ActiveKey: &armcompute.KeyForDiskEncryptionSet{
				KeyURL: to.Ptr("https://myvaultdifferentsub.vault-int.azure-int.net/keys/{key}"),
			},
			EncryptionType: to.Ptr(armcompute.DiskEncryptionSetTypeEncryptionAtRestWithCustomerKey),
			PreviousKeys:   []*armcompute.KeyForDiskEncryptionSet{},
		},
	}
	if !reflect.DeepEqual(exampleRes, res.DiskEncryptionSet) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.DiskEncryptionSet)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/CreateADiskEncryptionSetWithKeyVaultFromADifferentSubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/CreateADiskEncryptionSet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a disk encryption set."},
	})
	client, err = armcompute.NewDiskEncryptionSetsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myDiskEncryptionSet",
		armcompute.DiskEncryptionSet{
			Location: to.Ptr("West US"),
			Identity: &armcompute.EncryptionSetIdentity{
				Type: to.Ptr(armcompute.DiskEncryptionSetIdentityTypeSystemAssigned),
			},
			Properties: &armcompute.EncryptionSetProperties{
				ActiveKey: &armcompute.KeyForDiskEncryptionSet{
					KeyURL: to.Ptr("https://myvmvault.vault-int.azure-int.net/keys/{key}"),
					SourceVault: &armcompute.SourceVault{
						ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
					},
				},
				EncryptionType: to.Ptr(armcompute.DiskEncryptionSetTypeEncryptionAtRestWithCustomerKey),
			},
		},
		&armcompute.DiskEncryptionSetsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/CreateADiskEncryptionSet.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/CreateADiskEncryptionSet.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.DiskEncryptionSet{
		Name:     to.Ptr("myDiskEncryptionSet"),
		Location: to.Ptr("West US"),
		Identity: &armcompute.EncryptionSetIdentity{
			Type: to.Ptr(armcompute.DiskEncryptionSetIdentityTypeSystemAssigned),
		},
		Properties: &armcompute.EncryptionSetProperties{
			ActiveKey: &armcompute.KeyForDiskEncryptionSet{
				KeyURL: to.Ptr("https://myvmvault.vault-int.azure-int.net/keys/{key}"),
				SourceVault: &armcompute.SourceVault{
					ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
				},
			},
			EncryptionType: to.Ptr(armcompute.DiskEncryptionSetTypeEncryptionAtRestWithCustomerKey),
			PreviousKeys:   []*armcompute.KeyForDiskEncryptionSet{},
		},
	}
	if !reflect.DeepEqual(exampleRes, res.DiskEncryptionSet) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.DiskEncryptionSet)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/CreateADiskEncryptionSet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestDiskEncryptionSets_Update(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/UpdateADiskEncryptionSetWithRotationToLatestKeyVersionEnabled.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a disk encryption set with rotationToLatestKeyVersionEnabled set to true - Succeeded"},
	})
	client, err := armcompute.NewDiskEncryptionSetsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginUpdate(ctx,
		"myResourceGroup",
		"myDiskEncryptionSet",
		armcompute.DiskEncryptionSetUpdate{
			Identity: &armcompute.EncryptionSetIdentity{
				Type: to.Ptr(armcompute.DiskEncryptionSetIdentityTypeSystemAssigned),
			},
			Properties: &armcompute.DiskEncryptionSetUpdateProperties{
				ActiveKey: &armcompute.KeyForDiskEncryptionSet{
					KeyURL: to.Ptr("https://myvaultdifferentsub.vault-int.azure-int.net/keys/keyName/keyVersion1"),
				},
				EncryptionType:                    to.Ptr(armcompute.DiskEncryptionSetTypeEncryptionAtRestWithCustomerKey),
				RotationToLatestKeyVersionEnabled: to.Ptr(true),
			},
		},
		&armcompute.DiskEncryptionSetsClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/UpdateADiskEncryptionSetWithRotationToLatestKeyVersionEnabled.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/UpdateADiskEncryptionSetWithRotationToLatestKeyVersionEnabled.json: %v", err)
	}
	// Response check
	exampleRes := armcompute.DiskEncryptionSet{
		Name:     to.Ptr("myDiskEncryptionSet"),
		Type:     to.Ptr("Microsoft.Compute/diskEncryptionSets"),
		ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/myDiskEncryptionSet"),
		Location: to.Ptr("West US"),
		Identity: &armcompute.EncryptionSetIdentity{
			Type: to.Ptr(armcompute.DiskEncryptionSetIdentityTypeSystemAssigned),
		},
		Properties: &armcompute.EncryptionSetProperties{
			ActiveKey: &armcompute.KeyForDiskEncryptionSet{
				KeyURL: to.Ptr("https://myvaultdifferentsub.vault-int.azure-int.net/keys/keyName/KeyVersion2"),
			},
			EncryptionType:                    to.Ptr(armcompute.DiskEncryptionSetTypeEncryptionAtRestWithCustomerKey),
			LastKeyRotationTimestamp:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-01T04:41:35.079872+00:00"); return t }()),
			ProvisioningState:                 to.Ptr("Succeeded"),
			RotationToLatestKeyVersionEnabled: to.Ptr(true),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.DiskEncryptionSet) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.DiskEncryptionSet)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/UpdateADiskEncryptionSetWithRotationToLatestKeyVersionEnabled.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/UpdateADiskEncryptionSetWithRotationToLatestKeyVersionEnabledInProgress.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a disk encryption set with rotationToLatestKeyVersionEnabled set to true - Updating"},
	})
	client, err = armcompute.NewDiskEncryptionSetsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginUpdate(ctx,
		"myResourceGroup",
		"myDiskEncryptionSet",
		armcompute.DiskEncryptionSetUpdate{
			Identity: &armcompute.EncryptionSetIdentity{
				Type: to.Ptr(armcompute.DiskEncryptionSetIdentityTypeSystemAssigned),
			},
			Properties: &armcompute.DiskEncryptionSetUpdateProperties{
				ActiveKey: &armcompute.KeyForDiskEncryptionSet{
					KeyURL: to.Ptr("https://myvaultdifferentsub.vault-int.azure-int.net/keys/keyName/keyVersion1"),
				},
				EncryptionType:                    to.Ptr(armcompute.DiskEncryptionSetTypeEncryptionAtRestWithCustomerKey),
				RotationToLatestKeyVersionEnabled: to.Ptr(true),
			},
		},
		&armcompute.DiskEncryptionSetsClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/UpdateADiskEncryptionSetWithRotationToLatestKeyVersionEnabledInProgress.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/UpdateADiskEncryptionSetWithRotationToLatestKeyVersionEnabledInProgress.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.DiskEncryptionSet{
		Name:     to.Ptr("myDiskEncryptionSet"),
		Type:     to.Ptr("Microsoft.Compute/diskEncryptionSets"),
		ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/myDiskEncryptionSet"),
		Location: to.Ptr("West US"),
		Identity: &armcompute.EncryptionSetIdentity{
			Type: to.Ptr(armcompute.DiskEncryptionSetIdentityTypeSystemAssigned),
		},
		Properties: &armcompute.EncryptionSetProperties{
			ActiveKey: &armcompute.KeyForDiskEncryptionSet{
				KeyURL: to.Ptr("https://myvaultdifferentsub.vault-int.azure-int.net/keys/keyName/keyVersion2"),
			},
			EncryptionType:           to.Ptr(armcompute.DiskEncryptionSetTypeEncryptionAtRestWithCustomerKey),
			LastKeyRotationTimestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-01T04:41:35.079872+00:00"); return t }()),
			PreviousKeys: []*armcompute.KeyForDiskEncryptionSet{
				{
					KeyURL: to.Ptr("https://myvaultdifferentsub.vault-int.azure-int.net/keys/keyName/keyVersion1"),
				}},
			ProvisioningState:                 to.Ptr("Succeeded"),
			RotationToLatestKeyVersionEnabled: to.Ptr(true),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.DiskEncryptionSet) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.DiskEncryptionSet)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/UpdateADiskEncryptionSetWithRotationToLatestKeyVersionEnabledInProgress.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/UpdateADiskEncryptionSet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a disk encryption set."},
	})
	client, err = armcompute.NewDiskEncryptionSetsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginUpdate(ctx,
		"myResourceGroup",
		"myDiskEncryptionSet",
		armcompute.DiskEncryptionSetUpdate{
			Properties: &armcompute.DiskEncryptionSetUpdateProperties{
				ActiveKey: &armcompute.KeyForDiskEncryptionSet{
					KeyURL: to.Ptr("https://myvmvault.vault-int.azure-int.net/keys/keyName/keyVersion"),
					SourceVault: &armcompute.SourceVault{
						ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
					},
				},
				EncryptionType: to.Ptr(armcompute.DiskEncryptionSetTypeEncryptionAtRestWithCustomerKey),
			},
			Tags: map[string]*string{
				"department": to.Ptr("Development"),
				"project":    to.Ptr("Encryption"),
			},
		},
		&armcompute.DiskEncryptionSetsClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/UpdateADiskEncryptionSet.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/UpdateADiskEncryptionSet.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.DiskEncryptionSet{
		Name:     to.Ptr("myDiskEncryptionSet"),
		Location: to.Ptr("West US"),
		Tags: map[string]*string{
			"department": to.Ptr("Development"),
			"project":    to.Ptr("Encryption"),
		},
		Identity: &armcompute.EncryptionSetIdentity{
			Type: to.Ptr(armcompute.DiskEncryptionSetIdentityTypeSystemAssigned),
		},
		Properties: &armcompute.EncryptionSetProperties{
			ActiveKey: &armcompute.KeyForDiskEncryptionSet{
				KeyURL: to.Ptr("https://myvmvault.vault-int.azure-int.net/keys/keyName/keyVersion"),
				SourceVault: &armcompute.SourceVault{
					ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
				},
			},
			EncryptionType:           to.Ptr(armcompute.DiskEncryptionSetTypeEncryptionAtRestWithCustomerKey),
			LastKeyRotationTimestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-01T04:41:35.079872+00:00"); return t }()),
			PreviousKeys:             []*armcompute.KeyForDiskEncryptionSet{},
		},
	}
	if !reflect.DeepEqual(exampleRes, res.DiskEncryptionSet) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.DiskEncryptionSet)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/UpdateADiskEncryptionSet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestDiskEncryptionSets_Get(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/GetInformationAboutADiskEncryptionSetWithAutoKeyRotationError.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get information about a disk encryption set when auto-key rotation failed."},
	})
	client, err := armcompute.NewDiskEncryptionSetsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myDiskEncryptionSet",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/GetInformationAboutADiskEncryptionSetWithAutoKeyRotationError.json: %v", err)
	}
	// Response check
	exampleRes := armcompute.DiskEncryptionSet{
		Name:     to.Ptr("myDiskEncryptionSet"),
		Type:     to.Ptr("Microsoft.Compute/diskEncryptionSets"),
		ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/myDiskEncryptionSet"),
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"department": to.Ptr("Development"),
			"project":    to.Ptr("Encryption"),
		},
		Identity: &armcompute.EncryptionSetIdentity{
			Type: to.Ptr(armcompute.DiskEncryptionSetIdentityTypeSystemAssigned),
		},
		Properties: &armcompute.EncryptionSetProperties{
			ActiveKey: &armcompute.KeyForDiskEncryptionSet{
				KeyURL: to.Ptr("https://myvmvault.vault-int.azure-int.net/keys/{key}"),
				SourceVault: &armcompute.SourceVault{
					ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
				},
			},
			AutoKeyRotationError: &armcompute.APIError{
				Code:    to.Ptr("ManagedServiceIdentityNotFound"),
				Message: to.Ptr("Auto-key rotation was disabled as managed service identity associated with DiskEncryptionSet 'myDiskEncryptionSet' was not found. Please update the resource with correct identity to re-enable auto-key rotation."),
			},
			EncryptionType:                    to.Ptr(armcompute.DiskEncryptionSetTypeEncryptionAtRestWithCustomerKey),
			PreviousKeys:                      []*armcompute.KeyForDiskEncryptionSet{},
			ProvisioningState:                 to.Ptr("Succeeded"),
			RotationToLatestKeyVersionEnabled: to.Ptr(true),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.DiskEncryptionSet) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.DiskEncryptionSet)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/GetInformationAboutADiskEncryptionSetWithAutoKeyRotationError.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/GetInformationAboutADiskEncryptionSet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get information about a disk encryption set."},
	})
	client, err = armcompute.NewDiskEncryptionSetsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err = client.Get(ctx,
		"myResourceGroup",
		"myDiskEncryptionSet",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/GetInformationAboutADiskEncryptionSet.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.DiskEncryptionSet{
		Name:     to.Ptr("myDiskEncryptionSet"),
		Type:     to.Ptr("Microsoft.Compute/diskEncryptionSets"),
		ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/myDiskEncryptionSet"),
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"department": to.Ptr("Development"),
			"project":    to.Ptr("Encryption"),
		},
		Identity: &armcompute.EncryptionSetIdentity{
			Type: to.Ptr(armcompute.DiskEncryptionSetIdentityTypeSystemAssigned),
		},
		Properties: &armcompute.EncryptionSetProperties{
			ActiveKey: &armcompute.KeyForDiskEncryptionSet{
				KeyURL: to.Ptr("https://myvmvault.vault-int.azure-int.net/keys/{key}"),
				SourceVault: &armcompute.SourceVault{
					ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
				},
			},
			EncryptionType:    to.Ptr(armcompute.DiskEncryptionSetTypeEncryptionAtRestWithCustomerKey),
			PreviousKeys:      []*armcompute.KeyForDiskEncryptionSet{},
			ProvisioningState: to.Ptr("Succeeded"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.DiskEncryptionSet) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.DiskEncryptionSet)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/GetInformationAboutADiskEncryptionSet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestDiskEncryptionSets_Delete(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/DeleteADiskEncryptionSet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a disk encryption set."},
	})
	client, err := armcompute.NewDiskEncryptionSetsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"myDiskEncryptionSet",
		&armcompute.DiskEncryptionSetsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/DeleteADiskEncryptionSet.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/DeleteADiskEncryptionSet.json: %v", err)
	}
}

func TestDiskEncryptionSets_ListByResourceGroup(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/ListDiskEncryptionSetsInAResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all disk encryption sets in a resource group."},
	})
	client, err := armcompute.NewDiskEncryptionSetsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := client.NewListByResourceGroupPager("myResourceGroup",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/ListDiskEncryptionSetsInAResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcompute.DiskEncryptionSetList{
			Value: []*armcompute.DiskEncryptionSet{
				{
					Name:     to.Ptr("myDiskEncryptionSet"),
					Type:     to.Ptr("Microsoft.Compute/diskEncryptionSets"),
					ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/myDiskEncryptionSet"),
					Location: to.Ptr("westus"),
					Tags: map[string]*string{
						"department": to.Ptr("Development"),
						"project":    to.Ptr("Encryption"),
					},
					Identity: &armcompute.EncryptionSetIdentity{
						Type: to.Ptr(armcompute.DiskEncryptionSetIdentityTypeSystemAssigned),
					},
					Properties: &armcompute.EncryptionSetProperties{
						ActiveKey: &armcompute.KeyForDiskEncryptionSet{
							KeyURL: to.Ptr("https://myvmvault.vault-int.azure-int.net/keys/{key}"),
							SourceVault: &armcompute.SourceVault{
								ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
							},
						},
						EncryptionType:    to.Ptr(armcompute.DiskEncryptionSetTypeEncryptionAtRestWithCustomerKey),
						PreviousKeys:      []*armcompute.KeyForDiskEncryptionSet{},
						ProvisioningState: to.Ptr("Succeeded"),
					},
				},
				{
					Name:     to.Ptr("myDiskEncryptionSet2"),
					Type:     to.Ptr("Microsoft.Compute/diskEncryptionSets"),
					ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/myDiskEncryptionSet2"),
					Location: to.Ptr("westus"),
					Tags: map[string]*string{
						"department": to.Ptr("Development"),
						"project":    to.Ptr("Encryption"),
					},
					Identity: &armcompute.EncryptionSetIdentity{
						Type: to.Ptr(armcompute.DiskEncryptionSetIdentityTypeSystemAssigned),
					},
					Properties: &armcompute.EncryptionSetProperties{
						ActiveKey: &armcompute.KeyForDiskEncryptionSet{
							KeyURL: to.Ptr("https://myvmvault.vault-int.azure-int.net/keys/{key}"),
							SourceVault: &armcompute.SourceVault{
								ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault2"),
							},
						},
						EncryptionType:    to.Ptr(armcompute.DiskEncryptionSetTypeEncryptionAtRestWithCustomerKey),
						PreviousKeys:      []*armcompute.KeyForDiskEncryptionSet{},
						ProvisioningState: to.Ptr("Succeeded"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DiskEncryptionSetList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DiskEncryptionSetList)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/ListDiskEncryptionSetsInAResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDiskEncryptionSets_List(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/ListDiskEncryptionSetsInASubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all disk encryption sets in a subscription."},
	})
	client, err := armcompute.NewDiskEncryptionSetsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := client.NewListPager(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/ListDiskEncryptionSetsInASubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcompute.DiskEncryptionSetList{
			Value: []*armcompute.DiskEncryptionSet{
				{
					Name:     to.Ptr("myDiskEncryptionSet"),
					Type:     to.Ptr("Microsoft.Compute/diskEncryptionSets"),
					ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/myDiskEncryptionSet"),
					Location: to.Ptr("westus"),
					Tags: map[string]*string{
						"department": to.Ptr("Development"),
						"project":    to.Ptr("Encryption"),
					},
					Identity: &armcompute.EncryptionSetIdentity{
						Type: to.Ptr(armcompute.DiskEncryptionSetIdentityTypeSystemAssigned),
					},
					Properties: &armcompute.EncryptionSetProperties{
						ActiveKey: &armcompute.KeyForDiskEncryptionSet{
							KeyURL: to.Ptr("https://myvmvault.vault-int.azure-int.net/keys/{key}"),
							SourceVault: &armcompute.SourceVault{
								ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault"),
							},
						},
						EncryptionType:    to.Ptr(armcompute.DiskEncryptionSetTypeEncryptionAtRestWithCustomerKey),
						PreviousKeys:      []*armcompute.KeyForDiskEncryptionSet{},
						ProvisioningState: to.Ptr("Succeeded"),
					},
				},
				{
					Name:     to.Ptr("myDiskEncryptionSet2"),
					Type:     to.Ptr("Microsoft.Compute/diskEncryptionSets"),
					ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/mySecondResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/myDiskEncryptionSet2"),
					Location: to.Ptr("westus"),
					Tags: map[string]*string{
						"department": to.Ptr("Development"),
						"project":    to.Ptr("Encryption"),
					},
					Identity: &armcompute.EncryptionSetIdentity{
						Type: to.Ptr(armcompute.DiskEncryptionSetIdentityTypeSystemAssigned),
					},
					Properties: &armcompute.EncryptionSetProperties{
						ActiveKey: &armcompute.KeyForDiskEncryptionSet{
							KeyURL: to.Ptr("https://myvmvault.vault-int.azure-int.net/keys/{key}"),
							SourceVault: &armcompute.SourceVault{
								ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/mySecondResourceGroup/providers/Microsoft.KeyVault/vaults/myVMVault2"),
							},
						},
						EncryptionType:    to.Ptr(armcompute.DiskEncryptionSetTypeEncryptionAtRestWithCustomerKey),
						PreviousKeys:      []*armcompute.KeyForDiskEncryptionSet{},
						ProvisioningState: to.Ptr("Succeeded"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DiskEncryptionSetList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DiskEncryptionSetList)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/ListDiskEncryptionSetsInASubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDiskEncryptionSets_ListAssociatedResources(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/ListDiskEncryptionSetAssociatedResources.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all resources that are encrypted with this disk encryption set."},
	})
	client, err := armcompute.NewDiskEncryptionSetsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := client.NewListAssociatedResourcesPager("myResourceGroup",
		"myDiskEncryptionSet",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/ListDiskEncryptionSetAssociatedResources.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcompute.ResourceURIList{
			Value: []*string{
				to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/myManagedDisk"),
				to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/snapshots/mySnapshot")},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ResourceURIList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ResourceURIList)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/ListDiskEncryptionSetAssociatedResources.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDiskAccesses_CreateOrUpdate(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/CreateADiskAccess.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a disk access resource."},
	})
	client, err := armcompute.NewDiskAccessesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myDiskAccess",
		armcompute.DiskAccess{
			Location: to.Ptr("West US"),
		},
		&armcompute.DiskAccessesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/CreateADiskAccess.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/CreateADiskAccess.json: %v", err)
	}
	// Response check
	exampleRes := armcompute.DiskAccess{
		Name:     to.Ptr("myDiskAccess"),
		Type:     to.Ptr("Microsoft.Compute/diskAccesses"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourcegroup/providers/Microsoft.Compute/diskAccesses/myDiskAccess"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.DiskAccessProperties{
			ProvisioningState: to.Ptr("Succeeded"),
			TimeCreated:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-01T04:41:35.079872+00:00"); return t }()),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.DiskAccess) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.DiskAccess)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/CreateADiskAccess.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestDiskAccesses_Update(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/UpdateADiskAccess.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a disk access resource."},
	})
	client, err := armcompute.NewDiskAccessesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginUpdate(ctx,
		"myResourceGroup",
		"myDiskAccess",
		armcompute.DiskAccessUpdate{
			Tags: map[string]*string{
				"department": to.Ptr("Development"),
				"project":    to.Ptr("PrivateEndpoints"),
			},
		},
		&armcompute.DiskAccessesClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/UpdateADiskAccess.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/UpdateADiskAccess.json: %v", err)
	}
	// Response check
	exampleRes := armcompute.DiskAccess{
		Name:     to.Ptr("myDiskAccess"),
		Type:     to.Ptr("Microsoft.Compute/diskAccesses"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourcegroup/providers/Microsoft.Compute/diskAccesses/myDiskAccess"),
		Location: to.Ptr("West US"),
		Tags: map[string]*string{
			"department": to.Ptr("Development"),
			"project":    to.Ptr("PrivateEndpoints"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.DiskAccess) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.DiskAccess)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/UpdateADiskAccess.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestDiskAccesses_Get(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/GetInformationAboutADiskAccessWithPrivateEndpoints.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get information about a disk access resource with private endpoints."},
	})
	client, err := armcompute.NewDiskAccessesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myDiskAccess",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/GetInformationAboutADiskAccessWithPrivateEndpoints.json: %v", err)
	}
	// Response check
	exampleRes := armcompute.DiskAccess{
		Name:     to.Ptr("myDiskAccess"),
		Type:     to.Ptr("Microsoft.Compute/diskAccesses"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskAccesses/myDiskAccess"),
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"department": to.Ptr("Development"),
			"project":    to.Ptr("PrivateEndpoints"),
		},
		Properties: &armcompute.DiskAccessProperties{
			PrivateEndpointConnections: []*armcompute.PrivateEndpointConnection{
				{
					Name: to.Ptr("myDiskAccess.d4914cfa-6bc2-4049-a57c-3d1f622d8eef"),
					Type: to.Ptr("Microsoft.Compute/diskAccesses/PrivateEndpointConnections"),
					ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskAccesses/myDiskAccess/privateEndpoinConnections/myDiskAccess.d4914cfa-6bc2-4049-a57c-3d1f622d8eef"),
					Properties: &armcompute.PrivateEndpointConnectionProperties{
						PrivateEndpoint: &armcompute.PrivateEndpoint{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/privateEndpoints/myPrivateEndpoint"),
						},
						PrivateLinkServiceConnectionState: &armcompute.PrivateLinkServiceConnectionState{
							Description:     to.Ptr("Auto-Approved"),
							ActionsRequired: to.Ptr("None"),
							Status:          to.Ptr(armcompute.PrivateEndpointServiceConnectionStatusApproved),
						},
						ProvisioningState: to.Ptr(armcompute.PrivateEndpointConnectionProvisioningStateSucceeded),
					},
				}},
			ProvisioningState: to.Ptr("Succeeded"),
			TimeCreated:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-01T04:41:35.079872+00:00"); return t }()),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.DiskAccess) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.DiskAccess)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/GetInformationAboutADiskAccessWithPrivateEndpoints.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/GetInformationAboutADiskAccess.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get information about a disk access resource."},
	})
	client, err = armcompute.NewDiskAccessesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err = client.Get(ctx,
		"myResourceGroup",
		"myDiskAccess",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/GetInformationAboutADiskAccess.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.DiskAccess{
		Name:     to.Ptr("myDiskAccess"),
		Type:     to.Ptr("Microsoft.Compute/diskAccesses"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskAccesses/myDiskAccess"),
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"department": to.Ptr("Development"),
			"project":    to.Ptr("PrivateEndpoints"),
		},
		Properties: &armcompute.DiskAccessProperties{
			ProvisioningState: to.Ptr("Succeeded"),
			TimeCreated:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-01T04:41:35.079872+00:00"); return t }()),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.DiskAccess) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.DiskAccess)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/GetInformationAboutADiskAccess.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestDiskAccesses_Delete(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/DeleteADiskAccess.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a disk access resource."},
	})
	client, err := armcompute.NewDiskAccessesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"myDiskAccess",
		&armcompute.DiskAccessesClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/DeleteADiskAccess.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/DeleteADiskAccess.json: %v", err)
	}
}

func TestDiskAccesses_ListByResourceGroup(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/ListDiskAccessesInAResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all disk access resources in a resource group."},
	})
	client, err := armcompute.NewDiskAccessesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := client.NewListByResourceGroupPager("myResourceGroup",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/ListDiskAccessesInAResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcompute.DiskAccessList{
			Value: []*armcompute.DiskAccess{
				{
					Name:     to.Ptr("myDiskAccess"),
					Type:     to.Ptr("Microsoft.Compute/diskAccesses"),
					ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskAccesses/myDiskAccess"),
					Location: to.Ptr("westus"),
					Tags: map[string]*string{
						"department": to.Ptr("Development"),
						"project":    to.Ptr("PrivateEndpoints"),
					},
					Properties: &armcompute.DiskAccessProperties{
						ProvisioningState: to.Ptr("Succeeded"),
						TimeCreated:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-01T04:41:35.079872+00:00"); return t }()),
					},
				},
				{
					Name:     to.Ptr("myDiskAccess2"),
					Type:     to.Ptr("Microsoft.Compute/diskAccesses"),
					ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskAccesses/myDiskAccess2"),
					Location: to.Ptr("westus"),
					Tags: map[string]*string{
						"department": to.Ptr("Development"),
						"project":    to.Ptr("PrivateEndpoints"),
					},
					Properties: &armcompute.DiskAccessProperties{
						PrivateEndpointConnections: []*armcompute.PrivateEndpointConnection{
							{
								Name: to.Ptr("myDiskAccess.d4914cfa-6bc2-4049-a57c-3d1f622d8eef"),
								Type: to.Ptr("Microsoft.Compute/diskAccesses/PrivateEndpointConnections"),
								ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskAccesses/myDiskAccess2/privateEndpoinConnections/myDiskAccess2.d4914cfa-6bc2-4049-a57c-3d1f622d8eef"),
								Properties: &armcompute.PrivateEndpointConnectionProperties{
									PrivateEndpoint: &armcompute.PrivateEndpoint{
										ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/privateEndpoints/myPrivateEndpoint2"),
									},
									PrivateLinkServiceConnectionState: &armcompute.PrivateLinkServiceConnectionState{
										Description:     to.Ptr("Auto-Approved"),
										ActionsRequired: to.Ptr("None"),
										Status:          to.Ptr(armcompute.PrivateEndpointServiceConnectionStatusApproved),
									},
									ProvisioningState: to.Ptr(armcompute.PrivateEndpointConnectionProvisioningStateSucceeded),
								},
							}},
						ProvisioningState: to.Ptr("Succeeded"),
						TimeCreated:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-01T04:41:35.079872+00:00"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DiskAccessList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DiskAccessList)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/ListDiskAccessesInAResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDiskAccesses_List(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/ListDiskAccessesInASubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all disk access resources in a subscription."},
	})
	client, err := armcompute.NewDiskAccessesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := client.NewListPager(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/ListDiskAccessesInASubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcompute.DiskAccessList{
			Value: []*armcompute.DiskAccess{
				{
					Name:     to.Ptr("myDiskAccess"),
					Type:     to.Ptr("Microsoft.Compute/diskAccesses"),
					ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskAccesses/myDiskAccess"),
					Location: to.Ptr("westus"),
					Tags: map[string]*string{
						"department": to.Ptr("Development"),
						"project":    to.Ptr("PrivateEndpoints"),
					},
					Properties: &armcompute.DiskAccessProperties{
						ProvisioningState: to.Ptr("Succeeded"),
						TimeCreated:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-01T04:41:35.079872+00:00"); return t }()),
					},
				},
				{
					Name:     to.Ptr("myDiskAccess2"),
					Type:     to.Ptr("Microsoft.Compute/diskAccesses"),
					ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/mySecondResourceGroup/providers/Microsoft.Compute/diskAccesses/myDiskAccess2"),
					Location: to.Ptr("westus"),
					Tags: map[string]*string{
						"department": to.Ptr("Development"),
						"project":    to.Ptr("PrivateEndpoints"),
					},
					Properties: &armcompute.DiskAccessProperties{
						PrivateEndpointConnections: []*armcompute.PrivateEndpointConnection{
							{
								Name: to.Ptr("myDiskAccess.d4914cfa-6bc2-4049-a57c-3d1f622d8eef"),
								Type: to.Ptr("Microsoft.Compute/diskAccesses/PrivateEndpointConnections"),
								ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/mySecondResourceGroup/providers/Microsoft.Compute/diskAccesses/myDiskAccess2/privateEndpoinConnections/myDiskAccess2.d4914cfa-6bc2-4049-a57c-3d1f622d8eef"),
								Properties: &armcompute.PrivateEndpointConnectionProperties{
									PrivateEndpoint: &armcompute.PrivateEndpoint{
										ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/mySecondResourceGroup/providers/Microsoft.Network/privateEndpoints/myPrivateEndpoint2"),
									},
									PrivateLinkServiceConnectionState: &armcompute.PrivateLinkServiceConnectionState{
										Description:     to.Ptr("Auto-Approved"),
										ActionsRequired: to.Ptr("None"),
										Status:          to.Ptr(armcompute.PrivateEndpointServiceConnectionStatusApproved),
									},
									ProvisioningState: to.Ptr(armcompute.PrivateEndpointConnectionProvisioningStateSucceeded),
								},
							}},
						ProvisioningState: to.Ptr("Succeeded"),
						TimeCreated:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-01T04:41:35.079872+00:00"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DiskAccessList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DiskAccessList)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/ListDiskAccessesInASubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDiskAccesses_GetPrivateLinkResources(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/GetDiskAccessPrivateLinkResources.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all possible private link resources under disk access resource."},
	})
	client, err := armcompute.NewDiskAccessesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := client.GetPrivateLinkResources(ctx,
		"myResourceGroup",
		"myDiskAccess",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/GetDiskAccessPrivateLinkResources.json: %v", err)
	}
	// Response check
	exampleRes := armcompute.PrivateLinkResourceListResult{
		Value: []*armcompute.PrivateLinkResource{
			{
				Name: to.Ptr("disks"),
				Type: to.Ptr("Microsoft.Compute/diskAccesses/privateLinkResources"),
				ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskAccesses/myDiskAccess/privateLinkResources/disks"),
				Properties: &armcompute.PrivateLinkResourceProperties{
					GroupID: to.Ptr("disks"),
					RequiredMembers: []*string{
						to.Ptr("diskAccess_1")},
					RequiredZoneNames: []*string{
						to.Ptr("privatelink.blob.core.windows.net")},
				},
			}},
	}
	if !reflect.DeepEqual(exampleRes, res.PrivateLinkResourceListResult) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.PrivateLinkResourceListResult)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/GetDiskAccessPrivateLinkResources.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestDiskAccesses_UpdateAPrivateEndpointConnection(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/ApprovePrivateEndpointConnection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Approve a Private Endpoint Connection under a disk access resource."},
	})
	client, err := armcompute.NewDiskAccessesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginUpdateAPrivateEndpointConnection(ctx,
		"myResourceGroup",
		"myDiskAccess",
		"myPrivateEndpointConnection",
		armcompute.PrivateEndpointConnection{
			Properties: &armcompute.PrivateEndpointConnectionProperties{
				PrivateLinkServiceConnectionState: &armcompute.PrivateLinkServiceConnectionState{
					Description: to.Ptr("Approving myPrivateEndpointConnection"),
					Status:      to.Ptr(armcompute.PrivateEndpointServiceConnectionStatusApproved),
				},
			},
		},
		&armcompute.DiskAccessesClientBeginUpdateAPrivateEndpointConnectionOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/ApprovePrivateEndpointConnection.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/ApprovePrivateEndpointConnection.json: %v", err)
	}
	// Response check
	exampleRes := armcompute.PrivateEndpointConnection{
		Name: to.Ptr("myPrivateEndpointConnectionName"),
		Type: to.Ptr("Microsoft.Compute/diskAccesses/PrivateEndpointConnections"),
		ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskAccesses/myDiskAccess/privateEndpoinConnections/myPrivateEndpointConnectionName"),
		Properties: &armcompute.PrivateEndpointConnectionProperties{
			PrivateEndpoint: &armcompute.PrivateEndpoint{
				ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/privateEndpoints/myPrivateEndpoint"),
			},
			PrivateLinkServiceConnectionState: &armcompute.PrivateLinkServiceConnectionState{
				Description:     to.Ptr("Approving myPrivateEndpointConnection"),
				ActionsRequired: to.Ptr("None"),
				Status:          to.Ptr(armcompute.PrivateEndpointServiceConnectionStatusApproved),
			},
			ProvisioningState: to.Ptr(armcompute.PrivateEndpointConnectionProvisioningStateSucceeded),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnection) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.PrivateEndpointConnection)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/ApprovePrivateEndpointConnection.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestDiskAccesses_GetAPrivateEndpointConnection(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/GetInformationAboutAPrivateEndpointConnection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get information about a private endpoint connection under a disk access resource."},
	})
	client, err := armcompute.NewDiskAccessesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := client.GetAPrivateEndpointConnection(ctx,
		"myResourceGroup",
		"myDiskAccess",
		"myPrivateEndpointConnection",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/GetInformationAboutAPrivateEndpointConnection.json: %v", err)
	}
	// Response check
	exampleRes := armcompute.PrivateEndpointConnection{
		Name: to.Ptr("myPrivateEndpointConnection"),
		Type: to.Ptr("Microsoft.Compute/diskAccesses/PrivateEndpointConnections"),
		ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskAccesses/myDiskAccess/privateEndpoinConnections/myPrivateEndpointConnection"),
		Properties: &armcompute.PrivateEndpointConnectionProperties{
			PrivateEndpoint: &armcompute.PrivateEndpoint{
				ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/privateEndpoints/myPrivateEndpoint"),
			},
			PrivateLinkServiceConnectionState: &armcompute.PrivateLinkServiceConnectionState{
				Description:     to.Ptr("Auto-Approved"),
				ActionsRequired: to.Ptr("None"),
				Status:          to.Ptr(armcompute.PrivateEndpointServiceConnectionStatusApproved),
			},
			ProvisioningState: to.Ptr(armcompute.PrivateEndpointConnectionProvisioningStateSucceeded),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnection) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.PrivateEndpointConnection)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/GetInformationAboutAPrivateEndpointConnection.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestDiskAccesses_DeleteAPrivateEndpointConnection(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/DeleteAPrivateEndpointConnection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a private endpoint connection under a disk access resource."},
	})
	client, err := armcompute.NewDiskAccessesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginDeleteAPrivateEndpointConnection(ctx,
		"myResourceGroup",
		"myDiskAccess",
		"myPrivateEndpointConnection",
		&armcompute.DiskAccessesClientBeginDeleteAPrivateEndpointConnectionOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/DeleteAPrivateEndpointConnection.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/DeleteAPrivateEndpointConnection.json: %v", err)
	}
}

func TestDiskAccesses_ListPrivateEndpointConnections(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/ListPrivateEndpointConnectionsInADiskAccess.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get information about a private endpoint connection under a disk access resource."},
	})
	client, err := armcompute.NewDiskAccessesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := client.NewListPrivateEndpointConnectionsPager("myResourceGroup",
		"myDiskAccess",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/ListPrivateEndpointConnectionsInADiskAccess.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcompute.PrivateEndpointConnectionListResult{
			Value: []*armcompute.PrivateEndpointConnection{
				{
					Name: to.Ptr("myPrivateEndpointConnection"),
					Type: to.Ptr("Microsoft.Compute/diskAccesses/PrivateEndpointConnections"),
					ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskAccesses/myDiskAccess/privateEndpoinConnections/myPrivateEndpointConnection"),
					Properties: &armcompute.PrivateEndpointConnectionProperties{
						PrivateEndpoint: &armcompute.PrivateEndpoint{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/privateEndpoints/myPrivateEndpoint"),
						},
						PrivateLinkServiceConnectionState: &armcompute.PrivateLinkServiceConnectionState{
							Description:     to.Ptr("Auto-Approved"),
							ActionsRequired: to.Ptr("None"),
							Status:          to.Ptr(armcompute.PrivateEndpointServiceConnectionStatusApproved),
						},
						ProvisioningState: to.Ptr(armcompute.PrivateEndpointConnectionProvisioningStateSucceeded),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PrivateEndpointConnectionListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PrivateEndpointConnectionListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/ListPrivateEndpointConnectionsInADiskAccess.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDiskRestorePoint_Get(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/GetDiskRestorePointResources.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get an incremental disk restorePoint resource."},
	})
	client, err := armcompute.NewDiskRestorePointClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := client.Get(ctx,
		"myResourceGroup",
		"rpc",
		"vmrp",
		"TestDisk45ceb03433006d1baee0_b70cd924-3362-4a80-93c2-9415eaa12745",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/GetDiskRestorePointResources.json: %v", err)
	}
	// Response check
	exampleRes := armcompute.DiskRestorePoint{
		Name: to.Ptr("TestDisk45ceb03433006d1baee0_b70cd924-3362-4a80-93c2-9415eaa12745"),
		ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/restorePointCollections/rpc/restorePoints/vmrp/diskRestorePoints/TestDisk45ceb03433006d1baee0_b70cd924-3362-4a80-93c2-9415eaa12745"),
		Properties: &armcompute.DiskRestorePointProperties{
			FamilyID:            to.Ptr("996bf3ce-b6ff-4e86-9db6-dc27ea06cea5"),
			HyperVGeneration:    to.Ptr(armcompute.HyperVGenerationV1),
			NetworkAccessPolicy: to.Ptr(armcompute.NetworkAccessPolicyAllowAll),
			OSType:              to.Ptr(armcompute.OperatingSystemTypesWindows),
			PublicNetworkAccess: to.Ptr(armcompute.PublicNetworkAccessDisabled),
			SourceResourceID:    to.Ptr("/subscriptions/d2260d06-e00d-422f-8b63-93df551a59ae/resourceGroups/rg0680fb0c-89f1-41b4-96c0-35733a181558/providers/Microsoft.Compute/disks/TestDisk45ceb03433006d1baee0"),
			SourceUniqueID:      to.Ptr("48e058b1-7eea-4968-b532-10a8a1130c13"),
			TimeCreated:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-09-16T04:41:35.079872+00:00"); return t }()),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.DiskRestorePoint) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.DiskRestorePoint)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/GetDiskRestorePointResources.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/GetDiskRestorePointWhenSourceResourceIsFromDifferentRegion.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get an incremental disk restorePoint when source resource is from a different region"},
	})
	client, err = armcompute.NewDiskRestorePointClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err = client.Get(ctx,
		"myResourceGroup",
		"rpc",
		"vmrp",
		"TestDisk45ceb03433006d1baee0_b70cd924-3362-4a80-93c2-9415eaa12745",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/GetDiskRestorePointWhenSourceResourceIsFromDifferentRegion.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.DiskRestorePoint{
		Name: to.Ptr("TestDisk45ceb03433006d1baee0_b70cd924-3362-4a80-93c2-9415eaa12745"),
		ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/restorePointCollections/rpc/restorePoints/vmrp/diskRestorePoints/TestDisk45ceb03433006d1baee0_b70cd924-3362-4a80-93c2-9415eaa12745"),
		Properties: &armcompute.DiskRestorePointProperties{
			CompletionPercent:      to.Ptr[float32](100),
			FamilyID:               to.Ptr("996bf3ce-b6ff-4e86-9db6-dc27ea06cea5"),
			HyperVGeneration:       to.Ptr(armcompute.HyperVGenerationV1),
			NetworkAccessPolicy:    to.Ptr(armcompute.NetworkAccessPolicyAllowAll),
			OSType:                 to.Ptr(armcompute.OperatingSystemTypesWindows),
			PublicNetworkAccess:    to.Ptr(armcompute.PublicNetworkAccessDisabled),
			ReplicationState:       to.Ptr("Succeeded"),
			SourceResourceID:       to.Ptr("/subscriptions/d2260d06-e00d-422f-8b63-93df551a59ae/resourceGroups/rg0680fb0c-89f1-41b4-96c0-35733a181558/providers/Microsoft.Compute/disks/TestDisk45ceb03433006d1baee0"),
			SourceResourceLocation: to.Ptr("eastus2"),
			SourceUniqueID:         to.Ptr("48e058b1-7eea-4968-b532-10a8a1130c13"),
			TimeCreated:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-09-16T04:41:35.079872+00:00"); return t }()),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.DiskRestorePoint) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.DiskRestorePoint)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/GetDiskRestorePointWhenSourceResourceIsFromDifferentRegion.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestDiskRestorePoint_ListByRestorePoint(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/ListDiskRestorePointsInVmRestorePoint.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get an incremental disk restorePoint resource."},
	})
	client, err := armcompute.NewDiskRestorePointClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := client.NewListByRestorePointPager("myResourceGroup",
		"rpc",
		"vmrp",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/ListDiskRestorePointsInVmRestorePoint.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcompute.DiskRestorePointList{
			Value: []*armcompute.DiskRestorePoint{
				{
					Name: to.Ptr("TestDisk45ceb03433006d1baee0_b70cd924-3362-4a80-93c2-9415eaa12745"),
					ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/restorePointCollections/rpc/restorePoints/vmrp/diskRestorePoints/TestDisk45ceb03433006d1baee0_b70cd924-3362-4a80-93c2-9415eaa12745"),
					Properties: &armcompute.DiskRestorePointProperties{
						FamilyID:            to.Ptr("996bf3ce-b6ff-4e86-9db6-dc27ea06cea5"),
						HyperVGeneration:    to.Ptr(armcompute.HyperVGenerationV1),
						NetworkAccessPolicy: to.Ptr(armcompute.NetworkAccessPolicyAllowAll),
						OSType:              to.Ptr(armcompute.OperatingSystemTypesWindows),
						PublicNetworkAccess: to.Ptr(armcompute.PublicNetworkAccessDisabled),
						SourceResourceID:    to.Ptr("/subscriptions/d2260d06-e00d-422f-8b63-93df551a59ae/resourceGroups/rg0680fb0c-89f1-41b4-96c0-35733a181558/providers/Microsoft.Compute/disks/TestDisk45ceb03433006d1baee0"),
						SourceUniqueID:      to.Ptr("48e058b1-7eea-4968-b532-10a8a1130c13"),
						TimeCreated:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-09-16T04:41:35.079872+00:00"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DiskRestorePointList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DiskRestorePointList)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/ListDiskRestorePointsInVmRestorePoint.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDiskRestorePoint_GrantAccess(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/BeginGetAccessDiskRestorePoint.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Grants access to a diskRestorePoint."},
	})
	client, err := armcompute.NewDiskRestorePointClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginGrantAccess(ctx,
		"myResourceGroup",
		"rpc",
		"vmrp",
		"TestDisk45ceb03433006d1baee0_b70cd924-3362-4a80-93c2-9415eaa12745",
		armcompute.GrantAccessData{
			Access:            to.Ptr(armcompute.AccessLevelRead),
			DurationInSeconds: to.Ptr[int32](300),
		},
		&armcompute.DiskRestorePointClientBeginGrantAccessOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/BeginGetAccessDiskRestorePoint.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/BeginGetAccessDiskRestorePoint.json: %v", err)
	}
	// Response check
	exampleRes := armcompute.AccessURI{
		AccessSAS: to.Ptr("https://md-gpvmcxzlzxgd.partition.blob.storage.azure.net/xx3cqcx53f0v/abcd?sv=2014-02-14&sr=b&sk=key1&sig=XXX&st=2021-05-24T18:02:34Z&se=2021-05-24T18:19:14Z&sp=r"),
	}
	if !reflect.DeepEqual(exampleRes, res.AccessURI) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.AccessURI)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/BeginGetAccessDiskRestorePoint.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestDiskRestorePoint_RevokeAccess(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/EndGetAccessDiskRestorePoint.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Revokes access to a diskRestorePoint."},
	})
	client, err := armcompute.NewDiskRestorePointClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginRevokeAccess(ctx,
		"myResourceGroup",
		"rpc",
		"vmrp",
		"TestDisk45ceb03433006d1baee0_b70cd924-3362-4a80-93c2-9415eaa12745",
		&armcompute.DiskRestorePointClientBeginRevokeAccessOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/EndGetAccessDiskRestorePoint.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-12-01/examples/EndGetAccessDiskRestorePoint.json: %v", err)
	}
}

func TestGalleries_CreateOrUpdate(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/CreateACommunityGallery.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a community gallery."},
	})
	client, err := armcompute.NewGalleriesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myGalleryName",
		armcompute.Gallery{
			Location: to.Ptr("West US"),
			Properties: &armcompute.GalleryProperties{
				Description: to.Ptr("This is the gallery description."),
				SharingProfile: &armcompute.SharingProfile{
					CommunityGalleryInfo: map[string]interface{}{
						"eula":             "eula",
						"publicNamePrefix": "PirPublic",
						"publisherContact": "pir@microsoft.com",
						"publisherUri":     "uri",
					},
					Permissions: to.Ptr(armcompute.GallerySharingPermissionTypes("Community")),
				},
			},
		},
		&armcompute.GalleriesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/CreateACommunityGallery.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/CreateACommunityGallery.json: %v", err)
	}
	// Response check
	exampleRes := armcompute.Gallery{
		Name:     to.Ptr("myGalleryName"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryProperties{
			Description: to.Ptr("This is the gallery description."),
			Identifier: &armcompute.GalleryIdentifier{
				UniqueName: to.Ptr("{subscription-id}-MYGALLERYNAME"),
			},
			ProvisioningState: to.Ptr(armcompute.GalleryPropertiesProvisioningStateSucceeded),
			SharingProfile: &armcompute.SharingProfile{
				CommunityGalleryInfo: map[string]interface{}{
					"eula":             "eula",
					"publicNamePrefix": "PirPublic",
					"publisherContact": "pir@microsoft.com",
					"publisherUri":     "uri",
				},
				Permissions: to.Ptr(armcompute.GallerySharingPermissionTypes("Community")),
			},
		},
	}
	if !reflect.DeepEqual(exampleRes, res.Gallery) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.Gallery)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/CreateACommunityGallery.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/CreateOrUpdateASimpleGalleryWithSharingProfile.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a simple gallery with sharing profile."},
	})
	client, err = armcompute.NewGalleriesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myGalleryName",
		armcompute.Gallery{
			Location: to.Ptr("West US"),
			Properties: &armcompute.GalleryProperties{
				Description: to.Ptr("This is the gallery description."),
				SharingProfile: &armcompute.SharingProfile{
					Permissions: to.Ptr(armcompute.GallerySharingPermissionTypesGroups),
				},
			},
		},
		&armcompute.GalleriesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/CreateOrUpdateASimpleGalleryWithSharingProfile.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/CreateOrUpdateASimpleGalleryWithSharingProfile.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.Gallery{
		Name:     to.Ptr("myGalleryName"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryProperties{
			Description: to.Ptr("This is the gallery description."),
			Identifier: &armcompute.GalleryIdentifier{
				UniqueName: to.Ptr("{subscription-id}-MYGALLERYNAME"),
			},
			ProvisioningState: to.Ptr(armcompute.GalleryPropertiesProvisioningStateSucceeded),
			SharingProfile: &armcompute.SharingProfile{
				Permissions: to.Ptr(armcompute.GallerySharingPermissionTypesGroups),
			},
		},
	}
	if !reflect.DeepEqual(exampleRes, res.Gallery) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.Gallery)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/CreateOrUpdateASimpleGalleryWithSharingProfile.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/CreateOrUpdateASimpleGalleryWithSoftDeletionEnabled.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a simple gallery with soft deletion enabled."},
	})
	client, err = armcompute.NewGalleriesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myGalleryName",
		armcompute.Gallery{
			Location: to.Ptr("West US"),
			Properties: &armcompute.GalleryProperties{
				Description: to.Ptr("This is the gallery description."),
				SoftDeletePolicy: &armcompute.SoftDeletePolicy{
					IsSoftDeleteEnabled: to.Ptr(true),
				},
			},
		},
		&armcompute.GalleriesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/CreateOrUpdateASimpleGalleryWithSoftDeletionEnabled.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/CreateOrUpdateASimpleGalleryWithSoftDeletionEnabled.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.Gallery{
		Name:     to.Ptr("myGalleryName"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryProperties{
			Description: to.Ptr("This is the gallery description."),
			Identifier: &armcompute.GalleryIdentifier{
				UniqueName: to.Ptr("{subscription-id}-MYGALLERYNAME"),
			},
			ProvisioningState: to.Ptr(armcompute.GalleryPropertiesProvisioningStateSucceeded),
			SoftDeletePolicy: &armcompute.SoftDeletePolicy{
				IsSoftDeleteEnabled: to.Ptr(true),
			},
		},
	}
	if !reflect.DeepEqual(exampleRes, res.Gallery) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.Gallery)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/CreateOrUpdateASimpleGalleryWithSoftDeletionEnabled.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/CreateOrUpdateASimpleGallery.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a simple gallery."},
	})
	client, err = armcompute.NewGalleriesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myGalleryName",
		armcompute.Gallery{
			Location: to.Ptr("West US"),
			Properties: &armcompute.GalleryProperties{
				Description: to.Ptr("This is the gallery description."),
			},
		},
		&armcompute.GalleriesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/CreateOrUpdateASimpleGallery.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/CreateOrUpdateASimpleGallery.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.Gallery{
		Name:     to.Ptr("myGalleryName"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryProperties{
			Description: to.Ptr("This is the gallery description."),
			Identifier: &armcompute.GalleryIdentifier{
				UniqueName: to.Ptr("{subscription-id}-MYGALLERYNAME"),
			},
			ProvisioningState: to.Ptr(armcompute.GalleryPropertiesProvisioningStateSucceeded),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.Gallery) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.Gallery)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/CreateOrUpdateASimpleGallery.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestGalleries_Update(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/UpdateASimpleGallery.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a simple gallery."},
	})
	client, err := armcompute.NewGalleriesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginUpdate(ctx,
		"myResourceGroup",
		"myGalleryName",
		armcompute.GalleryUpdate{
			Properties: &armcompute.GalleryProperties{
				Description: to.Ptr("This is the gallery description."),
			},
		},
		&armcompute.GalleriesClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/UpdateASimpleGallery.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/UpdateASimpleGallery.json: %v", err)
	}
	// Response check
	exampleRes := armcompute.Gallery{
		Name:     to.Ptr("myGalleryName"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryProperties{
			Description: to.Ptr("This is the gallery description."),
			Identifier: &armcompute.GalleryIdentifier{
				UniqueName: to.Ptr("{subscription-id}-MYGALLERYNAME"),
			},
			ProvisioningState: to.Ptr(armcompute.GalleryPropertiesProvisioningStateSucceeded),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.Gallery) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.Gallery)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/UpdateASimpleGallery.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestGalleries_Get(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/GetACommunityGallery.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a community gallery."},
	})
	client, err := armcompute.NewGalleriesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myGalleryName",
		&armcompute.GalleriesClientGetOptions{Select: nil,
			Expand: nil,
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/GetACommunityGallery.json: %v", err)
	}
	// Response check
	exampleRes := armcompute.Gallery{
		Name:     to.Ptr("myGalleryName"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryProperties{
			Description: to.Ptr("This is the gallery description."),
			Identifier: &armcompute.GalleryIdentifier{
				UniqueName: to.Ptr("{subscription-id}-MYGALLERYNAME"),
			},
			ProvisioningState: to.Ptr(armcompute.GalleryPropertiesProvisioningStateSucceeded),
			SharingProfile: &armcompute.SharingProfile{
				CommunityGalleryInfo: map[string]interface{}{
					"communityGalleryEnabled": true,
					"eula":                    "eula",
					"publicNames": []interface{}{
						"GalelryPublicName",
					},
					"publisherContact": "pir@microsoft.com",
					"publisherUri":     "uri",
				},
				Permissions: to.Ptr(armcompute.GallerySharingPermissionTypes("Community")),
			},
			SharingStatus: &armcompute.SharingStatus{
				AggregatedState: to.Ptr(armcompute.SharingStateSucceeded),
				Summary: []*armcompute.RegionalSharingStatus{
					{
						Region:  to.Ptr("westus"),
						State:   to.Ptr(armcompute.SharingStateSucceeded),
						Details: to.Ptr(""),
					}},
			},
		},
	}
	if !reflect.DeepEqual(exampleRes, res.Gallery) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.Gallery)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/GetACommunityGallery.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/GetAGalleryWithExpandSharingProfileGroups.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a gallery with expand sharingProfile groups."},
	})
	client, err = armcompute.NewGalleriesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err = client.Get(ctx,
		"myResourceGroup",
		"myGalleryName",
		&armcompute.GalleriesClientGetOptions{Select: nil,
			Expand: to.Ptr(armcompute.GalleryExpandParamsSharingProfileGroups),
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/GetAGalleryWithExpandSharingProfileGroups.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.Gallery{
		Name:     to.Ptr("myGalleryName"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryProperties{
			SharingProfile: &armcompute.SharingProfile{
				Groups: []*armcompute.SharingProfileGroup{
					{
						Type: to.Ptr(armcompute.SharingProfileGroupTypesSubscriptions),
						IDs: []*string{
							to.Ptr("34a4ab42-0d72-47d9-bd1a-aed207386dac"),
							to.Ptr("380fd389-260b-41aa-bad9-0a83108c370b")},
					},
					{
						Type: to.Ptr(armcompute.SharingProfileGroupTypesAADTenants),
						IDs: []*string{
							to.Ptr("c24c76aa-8897-4027-9b03-8f7928b54ff6")},
					}},
				Permissions: to.Ptr(armcompute.GallerySharingPermissionTypesGroups),
			},
		},
	}
	if !reflect.DeepEqual(exampleRes, res.Gallery) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.Gallery)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/GetAGalleryWithExpandSharingProfileGroups.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/GetAGalleryWithSelectPermissions.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a gallery with select permissions."},
	})
	client, err = armcompute.NewGalleriesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err = client.Get(ctx,
		"myResourceGroup",
		"myGalleryName",
		&armcompute.GalleriesClientGetOptions{Select: to.Ptr(armcompute.SelectPermissionsPermissions),
			Expand: nil,
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/GetAGalleryWithSelectPermissions.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.Gallery{
		Name:     to.Ptr("myGalleryName"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryProperties{
			SharingProfile: &armcompute.SharingProfile{
				Groups: []*armcompute.SharingProfileGroup{
					{
						Type: to.Ptr(armcompute.SharingProfileGroupTypesSubscriptions),
						IDs: []*string{
							to.Ptr("34a4ab42-0d72-47d9-bd1a-aed207386dac"),
							to.Ptr("380fd389-260b-41aa-bad9-0a83108c370b")},
					},
					{
						Type: to.Ptr(armcompute.SharingProfileGroupTypesAADTenants),
						IDs: []*string{
							to.Ptr("c24c76aa-8897-4027-9b03-8f7928b54ff6")},
					}},
				Permissions: to.Ptr(armcompute.GallerySharingPermissionTypesGroups),
			},
		},
	}
	if !reflect.DeepEqual(exampleRes, res.Gallery) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.Gallery)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/GetAGalleryWithSelectPermissions.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/GetAGallery.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a gallery."},
	})
	client, err = armcompute.NewGalleriesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err = client.Get(ctx,
		"myResourceGroup",
		"myGalleryName",
		&armcompute.GalleriesClientGetOptions{Select: nil,
			Expand: nil,
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/GetAGallery.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.Gallery{
		Name:     to.Ptr("myGalleryName"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryProperties{
			Description: to.Ptr("This is the gallery description."),
			Identifier: &armcompute.GalleryIdentifier{
				UniqueName: to.Ptr("{subscription-id}-MYGALLERYNAME"),
			},
			ProvisioningState: to.Ptr(armcompute.GalleryPropertiesProvisioningStateSucceeded),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.Gallery) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.Gallery)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/GetAGallery.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestGalleries_Delete(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/DeleteAGallery.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a gallery."},
	})
	client, err := armcompute.NewGalleriesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"myGalleryName",
		&armcompute.GalleriesClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/DeleteAGallery.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/DeleteAGallery.json: %v", err)
	}
}

func TestGalleries_ListByResourceGroup(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/ListGalleriesInAResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List galleries in a resource group."},
	})
	client, err := armcompute.NewGalleriesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := client.NewListByResourceGroupPager("myResourceGroup",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/ListGalleriesInAResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcompute.GalleryList{
			Value: []*armcompute.Gallery{
				{
					Name:     to.Ptr("myGalleryName"),
					ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/galleries/myGalleryName"),
					Location: to.Ptr("West US"),
					Properties: &armcompute.GalleryProperties{
						Description: to.Ptr("This is the gallery description."),
						Identifier: &armcompute.GalleryIdentifier{
							UniqueName: to.Ptr("{subscription-id}-MYGALLERYNAME"),
						},
						ProvisioningState: to.Ptr(armcompute.GalleryPropertiesProvisioningStateSucceeded),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.GalleryList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.GalleryList)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/ListGalleriesInAResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestGalleries_List(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/ListGalleriesInASubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List galleries in a subscription."},
	})
	client, err := armcompute.NewGalleriesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := client.NewListPager(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/ListGalleriesInASubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcompute.GalleryList{
			Value: []*armcompute.Gallery{
				{
					Name:     to.Ptr("myGalleryName"),
					ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/galleries/myGalleryName"),
					Location: to.Ptr("West US"),
					Properties: &armcompute.GalleryProperties{
						Description: to.Ptr("This is the gallery description."),
						Identifier: &armcompute.GalleryIdentifier{
							UniqueName: to.Ptr("{subscription-id}-MYGALLERYNAME"),
						},
						ProvisioningState: to.Ptr(armcompute.GalleryPropertiesProvisioningStateSucceeded),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.GalleryList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.GalleryList)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/ListGalleriesInASubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestGalleryImages_CreateOrUpdate(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/CreateOrUpdateASimpleGalleryImage.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a simple gallery image."},
	})
	client, err := armcompute.NewGalleryImagesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myGalleryName",
		"myGalleryImageName",
		armcompute.GalleryImage{
			Location: to.Ptr("West US"),
			Properties: &armcompute.GalleryImageProperties{
				HyperVGeneration: to.Ptr(armcompute.HyperVGenerationV1),
				Identifier: &armcompute.GalleryImageIdentifier{
					Offer:     to.Ptr("myOfferName"),
					Publisher: to.Ptr("myPublisherName"),
					SKU:       to.Ptr("mySkuName"),
				},
				OSState: to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
				OSType:  to.Ptr(armcompute.OperatingSystemTypesWindows),
			},
		},
		&armcompute.GalleryImagesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/CreateOrUpdateASimpleGalleryImage.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/CreateOrUpdateASimpleGalleryImage.json: %v", err)
	}
	// Response check
	exampleRes := armcompute.GalleryImage{
		Name:     to.Ptr("myGalleryImageName"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryImageProperties{
			HyperVGeneration: to.Ptr(armcompute.HyperVGenerationV1),
			Identifier: &armcompute.GalleryImageIdentifier{
				Offer:     to.Ptr("myOfferName"),
				Publisher: to.Ptr("myPublisherName"),
				SKU:       to.Ptr("mySkuName"),
			},
			OSState:           to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
			OSType:            to.Ptr(armcompute.OperatingSystemTypesWindows),
			ProvisioningState: to.Ptr(armcompute.GalleryImagePropertiesProvisioningStateSucceeded),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.GalleryImage) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.GalleryImage)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/CreateOrUpdateASimpleGalleryImage.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestGalleryImages_Update(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/UpdateASimpleGalleryImage.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a simple gallery image."},
	})
	client, err := armcompute.NewGalleryImagesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginUpdate(ctx,
		"myResourceGroup",
		"myGalleryName",
		"myGalleryImageName",
		armcompute.GalleryImageUpdate{
			Properties: &armcompute.GalleryImageProperties{
				HyperVGeneration: to.Ptr(armcompute.HyperVGenerationV1),
				Identifier: &armcompute.GalleryImageIdentifier{
					Offer:     to.Ptr("myOfferName"),
					Publisher: to.Ptr("myPublisherName"),
					SKU:       to.Ptr("mySkuName"),
				},
				OSState: to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
				OSType:  to.Ptr(armcompute.OperatingSystemTypesWindows),
			},
		},
		&armcompute.GalleryImagesClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/UpdateASimpleGalleryImage.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/UpdateASimpleGalleryImage.json: %v", err)
	}
	// Response check
	exampleRes := armcompute.GalleryImage{
		Name:     to.Ptr("myGalleryImageName"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryImageProperties{
			HyperVGeneration: to.Ptr(armcompute.HyperVGenerationV1),
			Identifier: &armcompute.GalleryImageIdentifier{
				Offer:     to.Ptr("myOfferName"),
				Publisher: to.Ptr("myPublisherName"),
				SKU:       to.Ptr("mySkuName"),
			},
			OSState:           to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
			OSType:            to.Ptr(armcompute.OperatingSystemTypesWindows),
			ProvisioningState: to.Ptr(armcompute.GalleryImagePropertiesProvisioningStateSucceeded),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.GalleryImage) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.GalleryImage)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/UpdateASimpleGalleryImage.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestGalleryImages_Get(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/GetAGalleryImage.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a gallery image."},
	})
	client, err := armcompute.NewGalleryImagesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myGalleryName",
		"myGalleryImageName",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/GetAGalleryImage.json: %v", err)
	}
	// Response check
	exampleRes := armcompute.GalleryImage{
		Name:     to.Ptr("myGalleryImageName"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryImageProperties{
			HyperVGeneration: to.Ptr(armcompute.HyperVGenerationV1),
			Identifier: &armcompute.GalleryImageIdentifier{
				Offer:     to.Ptr("myOfferName"),
				Publisher: to.Ptr("myPublisherName"),
				SKU:       to.Ptr("mySkuName"),
			},
			OSState:           to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
			OSType:            to.Ptr(armcompute.OperatingSystemTypesWindows),
			ProvisioningState: to.Ptr(armcompute.GalleryImagePropertiesProvisioningStateSucceeded),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.GalleryImage) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.GalleryImage)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/GetAGalleryImage.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestGalleryImages_Delete(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/DeleteAGalleryImage.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a gallery image."},
	})
	client, err := armcompute.NewGalleryImagesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"myGalleryName",
		"myGalleryImageName",
		&armcompute.GalleryImagesClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/DeleteAGalleryImage.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/DeleteAGalleryImage.json: %v", err)
	}
}

func TestGalleryImages_ListByGallery(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/ListGalleryImagesInAGallery.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List gallery images in a gallery."},
	})
	client, err := armcompute.NewGalleryImagesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := client.NewListByGalleryPager("myResourceGroup",
		"myGalleryName",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/ListGalleryImagesInAGallery.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcompute.GalleryImageList{
			Value: []*armcompute.GalleryImage{
				{
					Name:     to.Ptr("myGalleryImageName"),
					Location: to.Ptr("West US"),
					Properties: &armcompute.GalleryImageProperties{
						HyperVGeneration: to.Ptr(armcompute.HyperVGenerationV1),
						Identifier: &armcompute.GalleryImageIdentifier{
							Offer:     to.Ptr("myOfferName"),
							Publisher: to.Ptr("myPublisherName"),
							SKU:       to.Ptr("mySkuName"),
						},
						OSState:           to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
						OSType:            to.Ptr(armcompute.OperatingSystemTypesWindows),
						ProvisioningState: to.Ptr(armcompute.GalleryImagePropertiesProvisioningStateSucceeded),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.GalleryImageList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.GalleryImageList)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/ListGalleryImagesInAGallery.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestGalleryImageVersions_CreateOrUpdate(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/CreateOrUpdateASimpleGalleryImageVersionWithVMAsSource.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a simple Gallery Image Version using VM as source."},
	})
	client, err := armcompute.NewGalleryImageVersionsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myGalleryName",
		"myGalleryImageName",
		"1.0.0",
		armcompute.GalleryImageVersion{
			Location: to.Ptr("West US"),
			Properties: &armcompute.GalleryImageVersionProperties{
				PublishingProfile: &armcompute.GalleryImageVersionPublishingProfile{
					TargetRegions: []*armcompute.TargetRegion{
						{
							Name: to.Ptr("West US"),
							Encryption: &armcompute.EncryptionImages{
								DataDiskImages: []*armcompute.DataDiskImageEncryption{
									{
										DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myOtherWestUSDiskEncryptionSet"),
										Lun:                 to.Ptr[int32](0),
									},
									{
										DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet"),
										Lun:                 to.Ptr[int32](1),
									}},
								OSDiskImage: &armcompute.OSDiskImageEncryption{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet"),
								},
							},
							RegionalReplicaCount: to.Ptr[int32](1),
						},
						{
							Name: to.Ptr("East US"),
							Encryption: &armcompute.EncryptionImages{
								DataDiskImages: []*armcompute.DataDiskImageEncryption{
									{
										DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myOtherEastUSDiskEncryptionSet"),
										Lun:                 to.Ptr[int32](0),
									},
									{
										DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet"),
										Lun:                 to.Ptr[int32](1),
									}},
								OSDiskImage: &armcompute.OSDiskImageEncryption{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet"),
								},
							},
							RegionalReplicaCount: to.Ptr[int32](2),
							StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardZRS),
						}},
				},
				StorageProfile: &armcompute.GalleryImageVersionStorageProfile{
					Source: &armcompute.GalleryArtifactVersionSource{
						ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/virtualMachines/{vmName}"),
					},
				},
			},
		},
		&armcompute.GalleryImageVersionsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/CreateOrUpdateASimpleGalleryImageVersionWithVMAsSource.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/CreateOrUpdateASimpleGalleryImageVersionWithVMAsSource.json: %v", err)
	}
	// Response check
	exampleRes := armcompute.GalleryImageVersion{
		Name:     to.Ptr("1.0.0"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryImageVersionProperties{
			ProvisioningState: to.Ptr(armcompute.GalleryImageVersionPropertiesProvisioningStateSucceeded),
			PublishingProfile: &armcompute.GalleryImageVersionPublishingProfile{
				PublishedDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-01T00:00:00Z"); return t }()),
				ReplicaCount:       to.Ptr[int32](1),
				StorageAccountType: to.Ptr(armcompute.StorageAccountTypeStandardLRS),
				TargetRegions: []*armcompute.TargetRegion{
					{
						Name: to.Ptr("West US"),
						Encryption: &armcompute.EncryptionImages{
							DataDiskImages: []*armcompute.DataDiskImageEncryption{
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myOtherWestUSDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](0),
								},
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](1),
								}},
							OSDiskImage: &armcompute.OSDiskImageEncryption{
								DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet"),
							},
						},
						RegionalReplicaCount: to.Ptr[int32](1),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardLRS),
					},
					{
						Name: to.Ptr("East US"),
						Encryption: &armcompute.EncryptionImages{
							DataDiskImages: []*armcompute.DataDiskImageEncryption{
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myOtherEastUSDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](0),
								},
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](1),
								}},
							OSDiskImage: &armcompute.OSDiskImageEncryption{
								DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet"),
							},
						},
						RegionalReplicaCount: to.Ptr[int32](2),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardZRS),
					}},
			},
			StorageProfile: &armcompute.GalleryImageVersionStorageProfile{
				DataDiskImages: []*armcompute.GalleryDataDiskImage{
					{
						HostCaching: to.Ptr(armcompute.HostCachingNone),
						SizeInGB:    to.Ptr[int32](10),
						Lun:         to.Ptr[int32](1),
					}},
				OSDiskImage: &armcompute.GalleryOSDiskImage{
					HostCaching: to.Ptr(armcompute.HostCachingReadOnly),
					SizeInGB:    to.Ptr[int32](10),
				},
				Source: &armcompute.GalleryArtifactVersionSource{
					ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/virtualMachines/{vmName}"),
				},
			},
		},
	}
	if !reflect.DeepEqual(exampleRes, res.GalleryImageVersion) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.GalleryImageVersion)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/CreateOrUpdateASimpleGalleryImageVersionWithVMAsSource.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/CreateOrUpdateASimpleGalleryImageVersion.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a simple Gallery Image Version using managed image as source."},
	})
	client, err = armcompute.NewGalleryImageVersionsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myGalleryName",
		"myGalleryImageName",
		"1.0.0",
		armcompute.GalleryImageVersion{
			Location: to.Ptr("West US"),
			Properties: &armcompute.GalleryImageVersionProperties{
				PublishingProfile: &armcompute.GalleryImageVersionPublishingProfile{
					TargetRegions: []*armcompute.TargetRegion{
						{
							Name: to.Ptr("West US"),
							Encryption: &armcompute.EncryptionImages{
								DataDiskImages: []*armcompute.DataDiskImageEncryption{
									{
										DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myOtherWestUSDiskEncryptionSet"),
										Lun:                 to.Ptr[int32](0),
									},
									{
										DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet"),
										Lun:                 to.Ptr[int32](1),
									}},
								OSDiskImage: &armcompute.OSDiskImageEncryption{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet"),
								},
							},
							RegionalReplicaCount: to.Ptr[int32](1),
						},
						{
							Name: to.Ptr("East US"),
							Encryption: &armcompute.EncryptionImages{
								DataDiskImages: []*armcompute.DataDiskImageEncryption{
									{
										DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myOtherEastUSDiskEncryptionSet"),
										Lun:                 to.Ptr[int32](0),
									},
									{
										DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet"),
										Lun:                 to.Ptr[int32](1),
									}},
								OSDiskImage: &armcompute.OSDiskImageEncryption{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet"),
								},
							},
							RegionalReplicaCount: to.Ptr[int32](2),
							StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardZRS),
						}},
				},
				StorageProfile: &armcompute.GalleryImageVersionStorageProfile{
					Source: &armcompute.GalleryArtifactVersionSource{
						ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/images/{imageName}"),
					},
				},
			},
		},
		&armcompute.GalleryImageVersionsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/CreateOrUpdateASimpleGalleryImageVersion.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/CreateOrUpdateASimpleGalleryImageVersion.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.GalleryImageVersion{
		Name:     to.Ptr("1.0.0"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryImageVersionProperties{
			ProvisioningState: to.Ptr(armcompute.GalleryImageVersionPropertiesProvisioningStateSucceeded),
			PublishingProfile: &armcompute.GalleryImageVersionPublishingProfile{
				PublishedDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-01T00:00:00Z"); return t }()),
				ReplicaCount:       to.Ptr[int32](1),
				StorageAccountType: to.Ptr(armcompute.StorageAccountTypeStandardLRS),
				TargetRegions: []*armcompute.TargetRegion{
					{
						Name: to.Ptr("West US"),
						Encryption: &armcompute.EncryptionImages{
							DataDiskImages: []*armcompute.DataDiskImageEncryption{
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myOtherWestUSDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](0),
								},
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](1),
								}},
							OSDiskImage: &armcompute.OSDiskImageEncryption{
								DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet"),
							},
						},
						RegionalReplicaCount: to.Ptr[int32](1),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardLRS),
					},
					{
						Name: to.Ptr("East US"),
						Encryption: &armcompute.EncryptionImages{
							DataDiskImages: []*armcompute.DataDiskImageEncryption{
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myOtherEastUSDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](0),
								},
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](1),
								}},
							OSDiskImage: &armcompute.OSDiskImageEncryption{
								DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet"),
							},
						},
						RegionalReplicaCount: to.Ptr[int32](2),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardZRS),
					}},
			},
			StorageProfile: &armcompute.GalleryImageVersionStorageProfile{
				DataDiskImages: []*armcompute.GalleryDataDiskImage{
					{
						HostCaching: to.Ptr(armcompute.HostCachingNone),
						SizeInGB:    to.Ptr[int32](10),
						Lun:         to.Ptr[int32](1),
					}},
				OSDiskImage: &armcompute.GalleryOSDiskImage{
					HostCaching: to.Ptr(armcompute.HostCachingReadOnly),
					SizeInGB:    to.Ptr[int32](10),
				},
				Source: &armcompute.GalleryArtifactVersionSource{
					ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/images/{imageName}"),
				},
			},
		},
	}
	if !reflect.DeepEqual(exampleRes, res.GalleryImageVersion) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.GalleryImageVersion)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/CreateOrUpdateASimpleGalleryImageVersion.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/CreateOrUpdateASimpleGalleryImageVersionWithSnapshotsAsSource.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a simple Gallery Image Version using mix of disks and snapshots as a source."},
	})
	client, err = armcompute.NewGalleryImageVersionsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myGalleryName",
		"myGalleryImageName",
		"1.0.0",
		armcompute.GalleryImageVersion{
			Location: to.Ptr("West US"),
			Properties: &armcompute.GalleryImageVersionProperties{
				PublishingProfile: &armcompute.GalleryImageVersionPublishingProfile{
					TargetRegions: []*armcompute.TargetRegion{
						{
							Name: to.Ptr("West US"),
							Encryption: &armcompute.EncryptionImages{
								DataDiskImages: []*armcompute.DataDiskImageEncryption{
									{
										DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet"),
										Lun:                 to.Ptr[int32](1),
									}},
								OSDiskImage: &armcompute.OSDiskImageEncryption{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet"),
								},
							},
							RegionalReplicaCount: to.Ptr[int32](1),
						},
						{
							Name: to.Ptr("East US"),
							Encryption: &armcompute.EncryptionImages{
								DataDiskImages: []*armcompute.DataDiskImageEncryption{
									{
										DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet"),
										Lun:                 to.Ptr[int32](1),
									}},
								OSDiskImage: &armcompute.OSDiskImageEncryption{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet"),
								},
							},
							RegionalReplicaCount: to.Ptr[int32](2),
							StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardZRS),
						}},
				},
				StorageProfile: &armcompute.GalleryImageVersionStorageProfile{
					DataDiskImages: []*armcompute.GalleryDataDiskImage{
						{
							HostCaching: to.Ptr(armcompute.HostCachingNone),
							Source: &armcompute.GalleryArtifactVersionSource{
								ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/disks/{dataDiskName}"),
							},
							Lun: to.Ptr[int32](1),
						}},
					OSDiskImage: &armcompute.GalleryOSDiskImage{
						HostCaching: to.Ptr(armcompute.HostCachingReadOnly),
						Source: &armcompute.GalleryArtifactVersionSource{
							ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/snapshots/{osSnapshotName}"),
						},
					},
				},
			},
		},
		&armcompute.GalleryImageVersionsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/CreateOrUpdateASimpleGalleryImageVersionWithSnapshotsAsSource.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/CreateOrUpdateASimpleGalleryImageVersionWithSnapshotsAsSource.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.GalleryImageVersion{
		Name:     to.Ptr("1.0.0"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryImageVersionProperties{
			ProvisioningState: to.Ptr(armcompute.GalleryImageVersionPropertiesProvisioningStateSucceeded),
			PublishingProfile: &armcompute.GalleryImageVersionPublishingProfile{
				PublishedDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-01T00:00:00Z"); return t }()),
				ReplicaCount:       to.Ptr[int32](1),
				StorageAccountType: to.Ptr(armcompute.StorageAccountTypeStandardLRS),
				TargetRegions: []*armcompute.TargetRegion{
					{
						Name: to.Ptr("West US"),
						Encryption: &armcompute.EncryptionImages{
							DataDiskImages: []*armcompute.DataDiskImageEncryption{
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](1),
								}},
							OSDiskImage: &armcompute.OSDiskImageEncryption{
								DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet"),
							},
						},
						RegionalReplicaCount: to.Ptr[int32](1),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardLRS),
					},
					{
						Name: to.Ptr("East US"),
						Encryption: &armcompute.EncryptionImages{
							DataDiskImages: []*armcompute.DataDiskImageEncryption{
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](1),
								}},
							OSDiskImage: &armcompute.OSDiskImageEncryption{
								DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet"),
							},
						},
						RegionalReplicaCount: to.Ptr[int32](2),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardZRS),
					}},
			},
			StorageProfile: &armcompute.GalleryImageVersionStorageProfile{
				DataDiskImages: []*armcompute.GalleryDataDiskImage{
					{
						HostCaching: to.Ptr(armcompute.HostCachingNone),
						SizeInGB:    to.Ptr[int32](10),
						Source: &armcompute.GalleryArtifactVersionSource{
							ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/disks/{dataDiskName}"),
						},
						Lun: to.Ptr[int32](1),
					}},
				OSDiskImage: &armcompute.GalleryOSDiskImage{
					HostCaching: to.Ptr(armcompute.HostCachingReadOnly),
					SizeInGB:    to.Ptr[int32](10),
					Source: &armcompute.GalleryArtifactVersionSource{
						ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/snapshots/{osSnapshotName}"),
					},
				},
			},
		},
	}
	if !reflect.DeepEqual(exampleRes, res.GalleryImageVersion) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.GalleryImageVersion)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/CreateOrUpdateASimpleGalleryImageVersionWithSnapshotsAsSource.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/CreateOrUpdateASimpleGalleryImageVersionWithShallowReplicationMode.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a simple Gallery Image Version using shallow replication mode."},
	})
	client, err = armcompute.NewGalleryImageVersionsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myGalleryName",
		"myGalleryImageName",
		"1.0.0",
		armcompute.GalleryImageVersion{
			Location: to.Ptr("West US"),
			Properties: &armcompute.GalleryImageVersionProperties{
				PublishingProfile: &armcompute.GalleryImageVersionPublishingProfile{
					ReplicationMode: to.Ptr(armcompute.ReplicationModeShallow),
					TargetRegions: []*armcompute.TargetRegion{
						{
							Name:                 to.Ptr("West US"),
							RegionalReplicaCount: to.Ptr[int32](1),
						}},
				},
				StorageProfile: &armcompute.GalleryImageVersionStorageProfile{
					Source: &armcompute.GalleryArtifactVersionSource{
						ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/images/{imageName}"),
					},
				},
			},
		},
		&armcompute.GalleryImageVersionsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/CreateOrUpdateASimpleGalleryImageVersionWithShallowReplicationMode.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/CreateOrUpdateASimpleGalleryImageVersionWithShallowReplicationMode.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.GalleryImageVersion{
		Name:     to.Ptr("1.0.0"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryImageVersionProperties{
			ProvisioningState: to.Ptr(armcompute.GalleryImageVersionPropertiesProvisioningStateSucceeded),
			PublishingProfile: &armcompute.GalleryImageVersionPublishingProfile{
				PublishedDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-01T00:00:00Z"); return t }()),
				ReplicaCount:       to.Ptr[int32](1),
				ReplicationMode:    to.Ptr(armcompute.ReplicationModeShallow),
				StorageAccountType: to.Ptr(armcompute.StorageAccountTypeStandardLRS),
				TargetRegions: []*armcompute.TargetRegion{
					{
						Name:                 to.Ptr("West US"),
						RegionalReplicaCount: to.Ptr[int32](1),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardLRS),
					}},
			},
			StorageProfile: &armcompute.GalleryImageVersionStorageProfile{
				DataDiskImages: []*armcompute.GalleryDataDiskImage{
					{
						HostCaching: to.Ptr(armcompute.HostCachingNone),
						SizeInGB:    to.Ptr[int32](10),
						Lun:         to.Ptr[int32](1),
					}},
				OSDiskImage: &armcompute.GalleryOSDiskImage{
					HostCaching: to.Ptr(armcompute.HostCachingReadOnly),
					SizeInGB:    to.Ptr[int32](10),
				},
				Source: &armcompute.GalleryArtifactVersionSource{
					ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/images/{imageName}"),
				},
			},
		},
	}
	if !reflect.DeepEqual(exampleRes, res.GalleryImageVersion) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.GalleryImageVersion)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/CreateOrUpdateASimpleGalleryImageVersionWithShallowReplicationMode.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/CreateOrUpdateASimpleGalleryImageVersionWithImageVersionAsSource.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a simple Gallery Image Version using shared image as source."},
	})
	client, err = armcompute.NewGalleryImageVersionsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myGalleryName",
		"myGalleryImageName",
		"1.0.0",
		armcompute.GalleryImageVersion{
			Location: to.Ptr("West US"),
			Properties: &armcompute.GalleryImageVersionProperties{
				PublishingProfile: &armcompute.GalleryImageVersionPublishingProfile{
					TargetRegions: []*armcompute.TargetRegion{
						{
							Name: to.Ptr("West US"),
							Encryption: &armcompute.EncryptionImages{
								DataDiskImages: []*armcompute.DataDiskImageEncryption{
									{
										DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myOtherWestUSDiskEncryptionSet"),
										Lun:                 to.Ptr[int32](0),
									},
									{
										DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet"),
										Lun:                 to.Ptr[int32](1),
									}},
								OSDiskImage: &armcompute.OSDiskImageEncryption{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet"),
								},
							},
							RegionalReplicaCount: to.Ptr[int32](1),
						},
						{
							Name: to.Ptr("East US"),
							Encryption: &armcompute.EncryptionImages{
								DataDiskImages: []*armcompute.DataDiskImageEncryption{
									{
										DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myOtherEastUSDiskEncryptionSet"),
										Lun:                 to.Ptr[int32](0),
									},
									{
										DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet"),
										Lun:                 to.Ptr[int32](1),
									}},
								OSDiskImage: &armcompute.OSDiskImageEncryption{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet"),
								},
							},
							RegionalReplicaCount: to.Ptr[int32](2),
							StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardZRS),
						}},
				},
				StorageProfile: &armcompute.GalleryImageVersionStorageProfile{
					Source: &armcompute.GalleryArtifactVersionSource{
						ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/galleries/{galleryName}/images/{imageDefinitionName}/versions/{versionName}"),
					},
				},
			},
		},
		&armcompute.GalleryImageVersionsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/CreateOrUpdateASimpleGalleryImageVersionWithImageVersionAsSource.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/CreateOrUpdateASimpleGalleryImageVersionWithImageVersionAsSource.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.GalleryImageVersion{
		Name:     to.Ptr("1.0.0"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryImageVersionProperties{
			ProvisioningState: to.Ptr(armcompute.GalleryImageVersionPropertiesProvisioningStateSucceeded),
			PublishingProfile: &armcompute.GalleryImageVersionPublishingProfile{
				PublishedDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-01T00:00:00Z"); return t }()),
				ReplicaCount:       to.Ptr[int32](1),
				StorageAccountType: to.Ptr(armcompute.StorageAccountTypeStandardLRS),
				TargetRegions: []*armcompute.TargetRegion{
					{
						Name: to.Ptr("West US"),
						Encryption: &armcompute.EncryptionImages{
							DataDiskImages: []*armcompute.DataDiskImageEncryption{
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myOtherWestUSDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](0),
								},
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](1),
								}},
							OSDiskImage: &armcompute.OSDiskImageEncryption{
								DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet"),
							},
						},
						RegionalReplicaCount: to.Ptr[int32](1),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardLRS),
					},
					{
						Name: to.Ptr("East US"),
						Encryption: &armcompute.EncryptionImages{
							DataDiskImages: []*armcompute.DataDiskImageEncryption{
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myOtherEastUSDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](0),
								},
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](1),
								}},
							OSDiskImage: &armcompute.OSDiskImageEncryption{
								DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet"),
							},
						},
						RegionalReplicaCount: to.Ptr[int32](2),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardZRS),
					}},
			},
			StorageProfile: &armcompute.GalleryImageVersionStorageProfile{
				DataDiskImages: []*armcompute.GalleryDataDiskImage{
					{
						HostCaching: to.Ptr(armcompute.HostCachingNone),
						SizeInGB:    to.Ptr[int32](10),
						Lun:         to.Ptr[int32](1),
					}},
				OSDiskImage: &armcompute.GalleryOSDiskImage{
					HostCaching: to.Ptr(armcompute.HostCachingReadOnly),
					SizeInGB:    to.Ptr[int32](10),
				},
				Source: &armcompute.GalleryArtifactVersionSource{
					ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/galleries/{galleryName}/images/{imageDefinitionName}/versions/{versionName}"),
				},
			},
		},
	}
	if !reflect.DeepEqual(exampleRes, res.GalleryImageVersion) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.GalleryImageVersion)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/CreateOrUpdateASimpleGalleryImageVersionWithImageVersionAsSource.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/CreateOrUpdateASimpleGalleryImageVersionWithSnapshotsAsSource.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a simple Gallery Image Version using snapshots as a source."},
	})
	client, err = armcompute.NewGalleryImageVersionsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myGalleryName",
		"myGalleryImageName",
		"1.0.0",
		armcompute.GalleryImageVersion{
			Location: to.Ptr("West US"),
			Properties: &armcompute.GalleryImageVersionProperties{
				PublishingProfile: &armcompute.GalleryImageVersionPublishingProfile{
					TargetRegions: []*armcompute.TargetRegion{
						{
							Name: to.Ptr("West US"),
							Encryption: &armcompute.EncryptionImages{
								DataDiskImages: []*armcompute.DataDiskImageEncryption{
									{
										DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet"),
										Lun:                 to.Ptr[int32](1),
									}},
								OSDiskImage: &armcompute.OSDiskImageEncryption{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet"),
								},
							},
							RegionalReplicaCount: to.Ptr[int32](1),
						},
						{
							Name: to.Ptr("East US"),
							Encryption: &armcompute.EncryptionImages{
								DataDiskImages: []*armcompute.DataDiskImageEncryption{
									{
										DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet"),
										Lun:                 to.Ptr[int32](1),
									}},
								OSDiskImage: &armcompute.OSDiskImageEncryption{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet"),
								},
							},
							RegionalReplicaCount: to.Ptr[int32](2),
							StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardZRS),
						}},
				},
				StorageProfile: &armcompute.GalleryImageVersionStorageProfile{
					DataDiskImages: []*armcompute.GalleryDataDiskImage{
						{
							HostCaching: to.Ptr(armcompute.HostCachingNone),
							Source: &armcompute.GalleryArtifactVersionSource{
								ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/disks/{dataDiskName}"),
							},
							Lun: to.Ptr[int32](1),
						}},
					OSDiskImage: &armcompute.GalleryOSDiskImage{
						HostCaching: to.Ptr(armcompute.HostCachingReadOnly),
						Source: &armcompute.GalleryArtifactVersionSource{
							ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/snapshots/{osSnapshotName}"),
						},
					},
				},
			},
		},
		&armcompute.GalleryImageVersionsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/CreateOrUpdateASimpleGalleryImageVersionWithSnapshotsAsSource.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/CreateOrUpdateASimpleGalleryImageVersionWithSnapshotsAsSource.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.GalleryImageVersion{
		Name:     to.Ptr("1.0.0"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryImageVersionProperties{
			ProvisioningState: to.Ptr(armcompute.GalleryImageVersionPropertiesProvisioningStateSucceeded),
			PublishingProfile: &armcompute.GalleryImageVersionPublishingProfile{
				PublishedDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-01T00:00:00Z"); return t }()),
				ReplicaCount:       to.Ptr[int32](1),
				StorageAccountType: to.Ptr(armcompute.StorageAccountTypeStandardLRS),
				TargetRegions: []*armcompute.TargetRegion{
					{
						Name: to.Ptr("West US"),
						Encryption: &armcompute.EncryptionImages{
							DataDiskImages: []*armcompute.DataDiskImageEncryption{
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](1),
								}},
							OSDiskImage: &armcompute.OSDiskImageEncryption{
								DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet"),
							},
						},
						RegionalReplicaCount: to.Ptr[int32](1),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardLRS),
					},
					{
						Name: to.Ptr("East US"),
						Encryption: &armcompute.EncryptionImages{
							DataDiskImages: []*armcompute.DataDiskImageEncryption{
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](1),
								}},
							OSDiskImage: &armcompute.OSDiskImageEncryption{
								DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet"),
							},
						},
						RegionalReplicaCount: to.Ptr[int32](2),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardZRS),
					}},
			},
			StorageProfile: &armcompute.GalleryImageVersionStorageProfile{
				DataDiskImages: []*armcompute.GalleryDataDiskImage{
					{
						HostCaching: to.Ptr(armcompute.HostCachingNone),
						SizeInGB:    to.Ptr[int32](10),
						Source: &armcompute.GalleryArtifactVersionSource{
							ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/disks/{dataDiskName}"),
						},
						Lun: to.Ptr[int32](1),
					}},
				OSDiskImage: &armcompute.GalleryOSDiskImage{
					HostCaching: to.Ptr(armcompute.HostCachingReadOnly),
					SizeInGB:    to.Ptr[int32](10),
					Source: &armcompute.GalleryArtifactVersionSource{
						ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/snapshots/{osSnapshotName}"),
					},
				},
			},
		},
	}
	if !reflect.DeepEqual(exampleRes, res.GalleryImageVersion) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.GalleryImageVersion)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/CreateOrUpdateASimpleGalleryImageVersionWithSnapshotsAsSource.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/CreateOrUpdateASimpleGalleryImageVersionWithVHD.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a simple Gallery Image Version using vhd as a source."},
	})
	client, err = armcompute.NewGalleryImageVersionsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myGalleryName",
		"myGalleryImageName",
		"1.0.0",
		armcompute.GalleryImageVersion{
			Location: to.Ptr("West US"),
			Properties: &armcompute.GalleryImageVersionProperties{
				PublishingProfile: &armcompute.GalleryImageVersionPublishingProfile{
					TargetRegions: []*armcompute.TargetRegion{
						{
							Name: to.Ptr("West US"),
							Encryption: &armcompute.EncryptionImages{
								DataDiskImages: []*armcompute.DataDiskImageEncryption{
									{
										DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myOtherDiskEncryptionSet"),
										Lun:                 to.Ptr[int32](1),
									}},
								OSDiskImage: &armcompute.OSDiskImageEncryption{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myDiskEncryptionSet"),
								},
							},
							RegionalReplicaCount: to.Ptr[int32](1),
						},
						{
							Name:                 to.Ptr("East US"),
							RegionalReplicaCount: to.Ptr[int32](2),
							StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardZRS),
						}},
				},
				StorageProfile: &armcompute.GalleryImageVersionStorageProfile{
					DataDiskImages: []*armcompute.GalleryDataDiskImage{
						{
							HostCaching: to.Ptr(armcompute.HostCachingNone),
							Source: &armcompute.GalleryArtifactVersionSource{
								ID:  to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Storage/storageAccounts/{storageAccount}"),
								URI: to.Ptr("https://gallerysourcencus.blob.core.windows.net/myvhds/Windows-Server-2012-R2-20171216-en.us-128GB.vhd"),
							},
							Lun: to.Ptr[int32](1),
						}},
					OSDiskImage: &armcompute.GalleryOSDiskImage{
						HostCaching: to.Ptr(armcompute.HostCachingReadOnly),
						Source: &armcompute.GalleryArtifactVersionSource{
							ID:  to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Storage/storageAccounts/{storageAccount}"),
							URI: to.Ptr("https://gallerysourcencus.blob.core.windows.net/myvhds/Windows-Server-2012-R2-20171216-en.us-128GB.vhd"),
						},
					},
				},
			},
		},
		&armcompute.GalleryImageVersionsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/CreateOrUpdateASimpleGalleryImageVersionWithVHD.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/CreateOrUpdateASimpleGalleryImageVersionWithVHD.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.GalleryImageVersion{
		Name:     to.Ptr("1.0.0"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryImageVersionProperties{
			ProvisioningState: to.Ptr(armcompute.GalleryImageVersionPropertiesProvisioningStateSucceeded),
			PublishingProfile: &armcompute.GalleryImageVersionPublishingProfile{
				PublishedDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-01T00:00:00Z"); return t }()),
				ReplicaCount:       to.Ptr[int32](1),
				StorageAccountType: to.Ptr(armcompute.StorageAccountTypeStandardLRS),
				TargetRegions: []*armcompute.TargetRegion{
					{
						Name: to.Ptr("West US"),
						Encryption: &armcompute.EncryptionImages{
							DataDiskImages: []*armcompute.DataDiskImageEncryption{
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myOtherDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](1),
								}},
							OSDiskImage: &armcompute.OSDiskImageEncryption{
								DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myDiskEncryptionSet"),
							},
						},
						RegionalReplicaCount: to.Ptr[int32](1),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardLRS),
					},
					{
						Name:                 to.Ptr("East US"),
						RegionalReplicaCount: to.Ptr[int32](2),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardZRS),
					}},
			},
			StorageProfile: &armcompute.GalleryImageVersionStorageProfile{
				DataDiskImages: []*armcompute.GalleryDataDiskImage{
					{
						HostCaching: to.Ptr(armcompute.HostCachingNone),
						Source: &armcompute.GalleryArtifactVersionSource{
							ID:  to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Storage/storageAccounts/{storageAccount}"),
							URI: to.Ptr("https://gallerysourcencus.blob.core.windows.net/myvhds/Windows-Server-2012-R2-20171216-en.us-128GB.vhd"),
						},
						Lun: to.Ptr[int32](1),
					}},
				OSDiskImage: &armcompute.GalleryOSDiskImage{
					HostCaching: to.Ptr(armcompute.HostCachingReadOnly),
					Source: &armcompute.GalleryArtifactVersionSource{
						ID:  to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Storage/storageAccounts/{storageAccount}"),
						URI: to.Ptr("https://gallerysourcencus.blob.core.windows.net/myvhds/Windows-Server-2012-R2-20171216-en.us-128GB.vhd"),
					},
				},
			},
		},
	}
	if !reflect.DeepEqual(exampleRes, res.GalleryImageVersion) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.GalleryImageVersion)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/CreateOrUpdateASimpleGalleryImageVersionWithVHD.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/CreateOrUpdateASimpleGalleryImageVersionWithTargetExtendedLocations.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a simple gallery image version with target extended locations specified."},
	})
	client, err = armcompute.NewGalleryImageVersionsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myGalleryName",
		"myGalleryImageName",
		"1.0.0",
		armcompute.GalleryImageVersion{
			Location: to.Ptr("West US"),
			Properties: &armcompute.GalleryImageVersionProperties{
				PublishingProfile: &armcompute.GalleryImageVersionPublishingProfile{
					TargetRegions: []*armcompute.TargetRegion{
						{
							Name: to.Ptr("West US"),
							Encryption: &armcompute.EncryptionImages{
								DataDiskImages: []*armcompute.DataDiskImageEncryption{
									{
										DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myOtherWestUSDiskEncryptionSet"),
										Lun:                 to.Ptr[int32](0),
									},
									{
										DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet"),
										Lun:                 to.Ptr[int32](1),
									}},
								OSDiskImage: &armcompute.OSDiskImageEncryption{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet"),
								},
							},
							RegionalReplicaCount: to.Ptr[int32](1),
						},
						{
							Name: to.Ptr("East US"),
							Encryption: &armcompute.EncryptionImages{
								DataDiskImages: []*armcompute.DataDiskImageEncryption{
									{
										DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myOtherEastUSDiskEncryptionSet"),
										Lun:                 to.Ptr[int32](0),
									},
									{
										DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet"),
										Lun:                 to.Ptr[int32](1),
									}},
								OSDiskImage: &armcompute.OSDiskImageEncryption{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet"),
								},
							},
							RegionalReplicaCount: to.Ptr[int32](2),
							StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardZRS),
						}},
				},
				StorageProfile: &armcompute.GalleryImageVersionStorageProfile{
					Source: &armcompute.GalleryArtifactVersionSource{
						ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/images/{imageName}"),
					},
				},
			},
		},
		&armcompute.GalleryImageVersionsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/CreateOrUpdateASimpleGalleryImageVersionWithTargetExtendedLocations.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/CreateOrUpdateASimpleGalleryImageVersionWithTargetExtendedLocations.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.GalleryImageVersion{
		Name:     to.Ptr("1.0.0"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryImageVersionProperties{
			ProvisioningState: to.Ptr(armcompute.GalleryImageVersionPropertiesProvisioningStateSucceeded),
			PublishingProfile: &armcompute.GalleryImageVersionPublishingProfile{
				PublishedDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-01T00:00:00Z"); return t }()),
				ReplicaCount:       to.Ptr[int32](1),
				StorageAccountType: to.Ptr(armcompute.StorageAccountTypeStandardLRS),
				TargetExtendedLocations: []*armcompute.GalleryTargetExtendedLocation{
					{
						Name: to.Ptr("West US"),
						Encryption: &armcompute.EncryptionImages{
							DataDiskImages: []*armcompute.DataDiskImageEncryption{
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](0),
								}},
							OSDiskImage: &armcompute.OSDiskImageEncryption{
								DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet"),
							},
						},
						ExtendedLocation: &armcompute.GalleryExtendedLocation{
							Name: to.Ptr("microsoftlosangeles1"),
							Type: to.Ptr(armcompute.GalleryExtendedLocationTypeEdgeZone),
						},
						ExtendedLocationReplicaCount: to.Ptr[int32](1),
						StorageAccountType:           to.Ptr(armcompute.StorageAccountType("StandardSSD_LRS(default)")),
					},
					{
						Name: to.Ptr("East US"),
						Encryption: &armcompute.EncryptionImages{
							DataDiskImages: []*armcompute.DataDiskImageEncryption{
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](0),
								}},
							OSDiskImage: &armcompute.OSDiskImageEncryption{
								DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet"),
							},
						},
						ExtendedLocation: &armcompute.GalleryExtendedLocation{
							Name: to.Ptr("microsoftnewyork1"),
							Type: to.Ptr(armcompute.GalleryExtendedLocationTypeEdgeZone),
						},
						ExtendedLocationReplicaCount: to.Ptr[int32](1),
						StorageAccountType:           to.Ptr(armcompute.StorageAccountType("StandardSSD_LRS(default)")),
					}},
				TargetRegions: []*armcompute.TargetRegion{
					{
						Name: to.Ptr("West US"),
						Encryption: &armcompute.EncryptionImages{
							DataDiskImages: []*armcompute.DataDiskImageEncryption{
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myOtherWestUSDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](0),
								},
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](1),
								}},
							OSDiskImage: &armcompute.OSDiskImageEncryption{
								DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myWestUSDiskEncryptionSet"),
							},
						},
						RegionalReplicaCount: to.Ptr[int32](1),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardLRS),
					},
					{
						Name: to.Ptr("East US"),
						Encryption: &armcompute.EncryptionImages{
							DataDiskImages: []*armcompute.DataDiskImageEncryption{
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myOtherEastUSDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](0),
								},
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](1),
								}},
							OSDiskImage: &armcompute.OSDiskImageEncryption{
								DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myEastUSDiskEncryptionSet"),
							},
						},
						RegionalReplicaCount: to.Ptr[int32](2),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardZRS),
					}},
			},
			StorageProfile: &armcompute.GalleryImageVersionStorageProfile{
				DataDiskImages: []*armcompute.GalleryDataDiskImage{
					{
						HostCaching: to.Ptr(armcompute.HostCachingNone),
						SizeInGB:    to.Ptr[int32](10),
						Lun:         to.Ptr[int32](1),
					}},
				OSDiskImage: &armcompute.GalleryOSDiskImage{
					HostCaching: to.Ptr(armcompute.HostCachingReadOnly),
					SizeInGB:    to.Ptr[int32](10),
				},
				Source: &armcompute.GalleryArtifactVersionSource{
					ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/images/{imageName}"),
				},
			},
		},
	}
	if !reflect.DeepEqual(exampleRes, res.GalleryImageVersion) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.GalleryImageVersion)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/CreateOrUpdateASimpleGalleryImageVersionWithTargetExtendedLocations.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestGalleryImageVersions_Update(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/UpdateASimpleGalleryImageVersion.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a simple Gallery Image Version (Managed Image as source)."},
	})
	client, err := armcompute.NewGalleryImageVersionsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginUpdate(ctx,
		"myResourceGroup",
		"myGalleryName",
		"myGalleryImageName",
		"1.0.0",
		armcompute.GalleryImageVersionUpdate{
			Properties: &armcompute.GalleryImageVersionProperties{
				PublishingProfile: &armcompute.GalleryImageVersionPublishingProfile{
					TargetRegions: []*armcompute.TargetRegion{
						{
							Name:                 to.Ptr("West US"),
							RegionalReplicaCount: to.Ptr[int32](1),
						},
						{
							Name:                 to.Ptr("East US"),
							RegionalReplicaCount: to.Ptr[int32](2),
							StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardZRS),
						}},
				},
				StorageProfile: &armcompute.GalleryImageVersionStorageProfile{
					Source: &armcompute.GalleryArtifactVersionSource{
						ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/images/{imageName}"),
					},
				},
			},
		},
		&armcompute.GalleryImageVersionsClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/UpdateASimpleGalleryImageVersion.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/UpdateASimpleGalleryImageVersion.json: %v", err)
	}
	// Response check
	exampleRes := armcompute.GalleryImageVersion{
		Name:     to.Ptr("1.0.0"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryImageVersionProperties{
			ProvisioningState: to.Ptr(armcompute.GalleryImageVersionPropertiesProvisioningStateSucceeded),
			PublishingProfile: &armcompute.GalleryImageVersionPublishingProfile{
				PublishedDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-01T00:00:00Z"); return t }()),
				ReplicaCount:       to.Ptr[int32](1),
				StorageAccountType: to.Ptr(armcompute.StorageAccountTypeStandardLRS),
				TargetRegions: []*armcompute.TargetRegion{
					{
						Name: to.Ptr("West US"),
						Encryption: &armcompute.EncryptionImages{
							DataDiskImages: []*armcompute.DataDiskImageEncryption{
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](1),
								}},
							OSDiskImage: &armcompute.OSDiskImageEncryption{
								DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myDiskEncryptionSet"),
							},
						},
						RegionalReplicaCount: to.Ptr[int32](1),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardLRS),
					},
					{
						Name:                 to.Ptr("East US"),
						RegionalReplicaCount: to.Ptr[int32](2),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardZRS),
					}},
			},
			StorageProfile: &armcompute.GalleryImageVersionStorageProfile{
				DataDiskImages: []*armcompute.GalleryDataDiskImage{
					{
						HostCaching: to.Ptr(armcompute.HostCachingNone),
						SizeInGB:    to.Ptr[int32](10),
						Lun:         to.Ptr[int32](1),
					}},
				OSDiskImage: &armcompute.GalleryOSDiskImage{
					HostCaching: to.Ptr(armcompute.HostCachingReadOnly),
					SizeInGB:    to.Ptr[int32](10),
				},
				Source: &armcompute.GalleryArtifactVersionSource{
					ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/images/{imageName}"),
				},
			},
		},
	}
	if !reflect.DeepEqual(exampleRes, res.GalleryImageVersion) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.GalleryImageVersion)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/UpdateASimpleGalleryImageVersion.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/UpdateASimpleGalleryImageVersionWithoutSourceId.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a simple Gallery Image Version without source id."},
	})
	client, err = armcompute.NewGalleryImageVersionsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginUpdate(ctx,
		"myResourceGroup",
		"myGalleryName",
		"myGalleryImageName",
		"1.0.0",
		armcompute.GalleryImageVersionUpdate{
			Properties: &armcompute.GalleryImageVersionProperties{
				PublishingProfile: &armcompute.GalleryImageVersionPublishingProfile{
					TargetRegions: []*armcompute.TargetRegion{
						{
							Name:                 to.Ptr("West US"),
							RegionalReplicaCount: to.Ptr[int32](1),
						},
						{
							Name:                 to.Ptr("East US"),
							RegionalReplicaCount: to.Ptr[int32](2),
							StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardZRS),
						}},
				},
				StorageProfile: &armcompute.GalleryImageVersionStorageProfile{},
			},
		},
		&armcompute.GalleryImageVersionsClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/UpdateASimpleGalleryImageVersionWithoutSourceId.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/UpdateASimpleGalleryImageVersionWithoutSourceId.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.GalleryImageVersion{
		Name:     to.Ptr("1.0.0"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryImageVersionProperties{
			ProvisioningState: to.Ptr(armcompute.GalleryImageVersionPropertiesProvisioningStateSucceeded),
			PublishingProfile: &armcompute.GalleryImageVersionPublishingProfile{
				PublishedDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-01T00:00:00Z"); return t }()),
				ReplicaCount:       to.Ptr[int32](1),
				StorageAccountType: to.Ptr(armcompute.StorageAccountTypeStandardLRS),
				TargetRegions: []*armcompute.TargetRegion{
					{
						Name: to.Ptr("West US"),
						Encryption: &armcompute.EncryptionImages{
							DataDiskImages: []*armcompute.DataDiskImageEncryption{
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](1),
								}},
							OSDiskImage: &armcompute.OSDiskImageEncryption{
								DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myDiskEncryptionSet"),
							},
						},
						RegionalReplicaCount: to.Ptr[int32](1),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardLRS),
					},
					{
						Name:                 to.Ptr("East US"),
						RegionalReplicaCount: to.Ptr[int32](2),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardZRS),
					}},
			},
			StorageProfile: &armcompute.GalleryImageVersionStorageProfile{
				DataDiskImages: []*armcompute.GalleryDataDiskImage{
					{
						HostCaching: to.Ptr(armcompute.HostCachingNone),
						SizeInGB:    to.Ptr[int32](10),
						Lun:         to.Ptr[int32](1),
					}},
				OSDiskImage: &armcompute.GalleryOSDiskImage{
					HostCaching: to.Ptr(armcompute.HostCachingReadOnly),
					SizeInGB:    to.Ptr[int32](10),
				},
				Source: &armcompute.GalleryArtifactVersionSource{
					ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/images/{imageName}"),
				},
			},
		},
	}
	if !reflect.DeepEqual(exampleRes, res.GalleryImageVersion) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.GalleryImageVersion)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/UpdateASimpleGalleryImageVersionWithoutSourceId.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestGalleryImageVersions_Get(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/GetAGalleryImageVersionWithReplicationStatus.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a gallery image version with replication status."},
	})
	client, err := armcompute.NewGalleryImageVersionsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myGalleryName",
		"myGalleryImageName",
		"1.0.0",
		&armcompute.GalleryImageVersionsClientGetOptions{Expand: to.Ptr(armcompute.ReplicationStatusTypesReplicationStatus)})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/GetAGalleryImageVersionWithReplicationStatus.json: %v", err)
	}
	// Response check
	exampleRes := armcompute.GalleryImageVersion{
		Name:     to.Ptr("1.0.0"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryImageVersionProperties{
			ProvisioningState: to.Ptr(armcompute.GalleryImageVersionPropertiesProvisioningStateSucceeded),
			PublishingProfile: &armcompute.GalleryImageVersionPublishingProfile{
				PublishedDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-01T00:00:00Z"); return t }()),
				ReplicaCount:       to.Ptr[int32](1),
				StorageAccountType: to.Ptr(armcompute.StorageAccountTypeStandardLRS),
				TargetRegions: []*armcompute.TargetRegion{
					{
						Name: to.Ptr("West US"),
						Encryption: &armcompute.EncryptionImages{
							DataDiskImages: []*armcompute.DataDiskImageEncryption{
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myOtherDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](0),
								},
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](1),
								}},
							OSDiskImage: &armcompute.OSDiskImageEncryption{
								DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myDiskEncryptionSet"),
							},
						},
						RegionalReplicaCount: to.Ptr[int32](1),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardLRS),
					},
					{
						Name:                 to.Ptr("East US"),
						RegionalReplicaCount: to.Ptr[int32](2),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardLRS),
					}},
			},
			ReplicationStatus: &armcompute.ReplicationStatus{
				AggregatedState: to.Ptr(armcompute.AggregatedReplicationStateCompleted),
				Summary: []*armcompute.RegionalReplicationStatus{
					{
						Progress: to.Ptr[int32](100),
						Region:   to.Ptr("West US"),
						State:    to.Ptr(armcompute.ReplicationStateCompleted),
						Details:  to.Ptr(""),
					},
					{
						Progress: to.Ptr[int32](100),
						Region:   to.Ptr("East US"),
						State:    to.Ptr(armcompute.ReplicationStateCompleted),
						Details:  to.Ptr(""),
					}},
			},
			StorageProfile: &armcompute.GalleryImageVersionStorageProfile{
				DataDiskImages: []*armcompute.GalleryDataDiskImage{
					{
						HostCaching: to.Ptr(armcompute.HostCachingNone),
						SizeInGB:    to.Ptr[int32](10),
						Lun:         to.Ptr[int32](1),
					}},
				OSDiskImage: &armcompute.GalleryOSDiskImage{
					HostCaching: to.Ptr(armcompute.HostCachingReadOnly),
					SizeInGB:    to.Ptr[int32](10),
				},
				Source: &armcompute.GalleryArtifactVersionSource{
					ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/images/{imageName}"),
				},
			},
		},
	}
	if !reflect.DeepEqual(exampleRes, res.GalleryImageVersion) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.GalleryImageVersion)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/GetAGalleryImageVersionWithReplicationStatus.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/GetAGalleryImageVersionWithSnapshotsAsSource.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a gallery image version with snapshots as a source."},
	})
	client, err = armcompute.NewGalleryImageVersionsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err = client.Get(ctx,
		"myResourceGroup",
		"myGalleryName",
		"myGalleryImageName",
		"1.0.0",
		&armcompute.GalleryImageVersionsClientGetOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/GetAGalleryImageVersionWithSnapshotsAsSource.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.GalleryImageVersion{
		Name:     to.Ptr("1.0.0"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryImageVersionProperties{
			ProvisioningState: to.Ptr(armcompute.GalleryImageVersionPropertiesProvisioningStateSucceeded),
			PublishingProfile: &armcompute.GalleryImageVersionPublishingProfile{
				PublishedDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-01T00:00:00Z"); return t }()),
				ReplicaCount:       to.Ptr[int32](1),
				StorageAccountType: to.Ptr(armcompute.StorageAccountTypeStandardLRS),
				TargetRegions: []*armcompute.TargetRegion{
					{
						Name: to.Ptr("West US"),
						Encryption: &armcompute.EncryptionImages{
							DataDiskImages: []*armcompute.DataDiskImageEncryption{
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](1),
								}},
							OSDiskImage: &armcompute.OSDiskImageEncryption{
								DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myDiskEncryptionSet"),
							},
						},
						RegionalReplicaCount: to.Ptr[int32](1),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardLRS),
					},
					{
						Name:                 to.Ptr("East US"),
						RegionalReplicaCount: to.Ptr[int32](2),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardLRS),
					}},
			},
			StorageProfile: &armcompute.GalleryImageVersionStorageProfile{
				DataDiskImages: []*armcompute.GalleryDataDiskImage{
					{
						HostCaching: to.Ptr(armcompute.HostCachingNone),
						SizeInGB:    to.Ptr[int32](10),
						Source:      &armcompute.GalleryArtifactVersionSource{},
						Lun:         to.Ptr[int32](1),
					}},
				OSDiskImage: &armcompute.GalleryOSDiskImage{
					HostCaching: to.Ptr(armcompute.HostCachingReadOnly),
					SizeInGB:    to.Ptr[int32](10),
					Source:      &armcompute.GalleryArtifactVersionSource{},
				},
			},
		},
	}
	if !reflect.DeepEqual(exampleRes, res.GalleryImageVersion) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.GalleryImageVersion)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/GetAGalleryImageVersionWithSnapshotsAsSource.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/GetAGalleryImageVersionWithVhdAsSource.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a gallery image version with vhd as a source."},
	})
	client, err = armcompute.NewGalleryImageVersionsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err = client.Get(ctx,
		"myResourceGroup",
		"myGalleryName",
		"myGalleryImageName",
		"1.0.0",
		&armcompute.GalleryImageVersionsClientGetOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/GetAGalleryImageVersionWithVhdAsSource.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.GalleryImageVersion{
		Name:     to.Ptr("1.0.0"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryImageVersionProperties{
			ProvisioningState: to.Ptr(armcompute.GalleryImageVersionPropertiesProvisioningStateSucceeded),
			PublishingProfile: &armcompute.GalleryImageVersionPublishingProfile{
				PublishedDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-01T00:00:00Z"); return t }()),
				ReplicaCount:       to.Ptr[int32](1),
				StorageAccountType: to.Ptr(armcompute.StorageAccountTypeStandardLRS),
				TargetRegions: []*armcompute.TargetRegion{
					{
						Name: to.Ptr("West US"),
						Encryption: &armcompute.EncryptionImages{
							DataDiskImages: []*armcompute.DataDiskImageEncryption{
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](1),
								}},
							OSDiskImage: &armcompute.OSDiskImageEncryption{
								DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myDiskEncryptionSet"),
							},
						},
						RegionalReplicaCount: to.Ptr[int32](1),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardLRS),
					},
					{
						Name:                 to.Ptr("East US"),
						RegionalReplicaCount: to.Ptr[int32](2),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardLRS),
					}},
			},
			StorageProfile: &armcompute.GalleryImageVersionStorageProfile{
				DataDiskImages: []*armcompute.GalleryDataDiskImage{
					{
						HostCaching: to.Ptr(armcompute.HostCachingNone),
						Source: &armcompute.GalleryArtifactVersionSource{
							ID:  to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Storage/storageAccounts/{storageAccount}"),
							URI: to.Ptr("https://gallerysourcencus.blob.core.windows.net/myvhds/Windows-Server-2012-R2-20171216-en.us-128GB.vhd"),
						},
						Lun: to.Ptr[int32](1),
					}},
				OSDiskImage: &armcompute.GalleryOSDiskImage{
					HostCaching: to.Ptr(armcompute.HostCachingReadOnly),
					Source: &armcompute.GalleryArtifactVersionSource{
						ID:  to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Storage/storageAccounts/{storageAccount}"),
						URI: to.Ptr("https://gallerysourcencus.blob.core.windows.net/myvhds/Windows-Server-2012-R2-20171216-en.us-128GB.vhd"),
					},
				},
			},
		},
	}
	if !reflect.DeepEqual(exampleRes, res.GalleryImageVersion) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.GalleryImageVersion)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/GetAGalleryImageVersionWithVhdAsSource.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/GetAGalleryImageVersion.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a gallery image version."},
	})
	client, err = armcompute.NewGalleryImageVersionsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err = client.Get(ctx,
		"myResourceGroup",
		"myGalleryName",
		"myGalleryImageName",
		"1.0.0",
		&armcompute.GalleryImageVersionsClientGetOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/GetAGalleryImageVersion.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.GalleryImageVersion{
		Name:     to.Ptr("1.0.0"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryImageVersionProperties{
			ProvisioningState: to.Ptr(armcompute.GalleryImageVersionPropertiesProvisioningStateSucceeded),
			PublishingProfile: &armcompute.GalleryImageVersionPublishingProfile{
				PublishedDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-01T00:00:00Z"); return t }()),
				ReplicaCount:       to.Ptr[int32](1),
				StorageAccountType: to.Ptr(armcompute.StorageAccountTypeStandardLRS),
				TargetRegions: []*armcompute.TargetRegion{
					{
						Name: to.Ptr("West US"),
						Encryption: &armcompute.EncryptionImages{
							DataDiskImages: []*armcompute.DataDiskImageEncryption{
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myOtherDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](0),
								},
								{
									DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myDiskEncryptionSet"),
									Lun:                 to.Ptr[int32](1),
								}},
							OSDiskImage: &armcompute.OSDiskImageEncryption{
								DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myDiskEncryptionSet"),
							},
						},
						RegionalReplicaCount: to.Ptr[int32](1),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardLRS),
					},
					{
						Name:                 to.Ptr("East US"),
						RegionalReplicaCount: to.Ptr[int32](2),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardLRS),
					}},
			},
			StorageProfile: &armcompute.GalleryImageVersionStorageProfile{
				DataDiskImages: []*armcompute.GalleryDataDiskImage{
					{
						HostCaching: to.Ptr(armcompute.HostCachingNone),
						SizeInGB:    to.Ptr[int32](10),
						Lun:         to.Ptr[int32](1),
					}},
				OSDiskImage: &armcompute.GalleryOSDiskImage{
					HostCaching: to.Ptr(armcompute.HostCachingReadOnly),
					SizeInGB:    to.Ptr[int32](10),
				},
				Source: &armcompute.GalleryArtifactVersionSource{
					ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/images/{imageName}"),
				},
			},
		},
	}
	if !reflect.DeepEqual(exampleRes, res.GalleryImageVersion) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.GalleryImageVersion)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/GetAGalleryImageVersion.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestGalleryImageVersions_Delete(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/DeleteAGalleryImageVersion.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a gallery image version."},
	})
	client, err := armcompute.NewGalleryImageVersionsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"myGalleryName",
		"myGalleryImageName",
		"1.0.0",
		&armcompute.GalleryImageVersionsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/DeleteAGalleryImageVersion.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/DeleteAGalleryImageVersion.json: %v", err)
	}
}

func TestGalleryImageVersions_ListByGalleryImage(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/ListGalleryImageVersionsInAGalleryImage.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List gallery image versions in a gallery image definition."},
	})
	client, err := armcompute.NewGalleryImageVersionsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := client.NewListByGalleryImagePager("myResourceGroup",
		"myGalleryName",
		"myGalleryImageName",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/ListGalleryImageVersionsInAGalleryImage.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcompute.GalleryImageVersionList{
			Value: []*armcompute.GalleryImageVersion{
				{
					Name:     to.Ptr("1.0.0"),
					Location: to.Ptr("West US"),
					Properties: &armcompute.GalleryImageVersionProperties{
						ProvisioningState: to.Ptr(armcompute.GalleryImageVersionPropertiesProvisioningStateSucceeded),
						PublishingProfile: &armcompute.GalleryImageVersionPublishingProfile{
							PublishedDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-01T00:00:00Z"); return t }()),
							ReplicaCount:       to.Ptr[int32](1),
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypeStandardLRS),
							TargetRegions: []*armcompute.TargetRegion{
								{
									Name: to.Ptr("West US"),
									Encryption: &armcompute.EncryptionImages{
										DataDiskImages: []*armcompute.DataDiskImageEncryption{
											{
												DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myOtherDiskEncryptionSet"),
												Lun:                 to.Ptr[int32](0),
											},
											{
												DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myDiskEncryptionSet"),
												Lun:                 to.Ptr[int32](1),
											}},
										OSDiskImage: &armcompute.OSDiskImageEncryption{
											DiskEncryptionSetID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSet/myDiskEncryptionSet"),
										},
									},
									RegionalReplicaCount: to.Ptr[int32](1),
									StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardLRS),
								},
								{
									Name:                 to.Ptr("East US"),
									RegionalReplicaCount: to.Ptr[int32](2),
									StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardLRS),
								}},
						},
						StorageProfile: &armcompute.GalleryImageVersionStorageProfile{
							DataDiskImages: []*armcompute.GalleryDataDiskImage{
								{
									HostCaching: to.Ptr(armcompute.HostCachingNone),
									SizeInGB:    to.Ptr[int32](10),
									Lun:         to.Ptr[int32](1),
								}},
							OSDiskImage: &armcompute.GalleryOSDiskImage{
								HostCaching: to.Ptr(armcompute.HostCachingReadOnly),
								SizeInGB:    to.Ptr[int32](10),
							},
							Source: &armcompute.GalleryArtifactVersionSource{
								ID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/images/{imageName}"),
							},
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.GalleryImageVersionList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.GalleryImageVersionList)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/ListGalleryImageVersionsInAGalleryImage.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestGalleryApplications_CreateOrUpdate(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/CreateOrUpdateASimpleGalleryApplication.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a simple gallery Application."},
	})
	client, err := armcompute.NewGalleryApplicationsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myGalleryName",
		"myGalleryApplicationName",
		armcompute.GalleryApplication{
			Location: to.Ptr("West US"),
			Properties: &armcompute.GalleryApplicationProperties{
				Description:         to.Ptr("This is the gallery application description."),
				Eula:                to.Ptr("This is the gallery application EULA."),
				PrivacyStatementURI: to.Ptr("myPrivacyStatementUri}"),
				ReleaseNoteURI:      to.Ptr("myReleaseNoteUri"),
				SupportedOSType:     to.Ptr(armcompute.OperatingSystemTypesWindows),
			},
		},
		&armcompute.GalleryApplicationsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/CreateOrUpdateASimpleGalleryApplication.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/CreateOrUpdateASimpleGalleryApplication.json: %v", err)
	}
	// Response check
	exampleRes := armcompute.GalleryApplication{
		Name:     to.Ptr("myGalleryApplicationName"),
		Type:     to.Ptr("Microsoft.Compute/galleries"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/galleries/myGalleryName/applications/myGalleryApplicationName"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryApplicationProperties{
			Description:         to.Ptr("This is the gallery application description."),
			Eula:                to.Ptr("This is the gallery application EULA."),
			PrivacyStatementURI: to.Ptr("myPrivacyStatementUri}"),
			ReleaseNoteURI:      to.Ptr("myReleaseNoteUri"),
			SupportedOSType:     to.Ptr(armcompute.OperatingSystemTypesWindows),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.GalleryApplication) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.GalleryApplication)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/CreateOrUpdateASimpleGalleryApplication.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestGalleryApplications_Update(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/UpdateASimpleGalleryApplication.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a simple gallery Application."},
	})
	client, err := armcompute.NewGalleryApplicationsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginUpdate(ctx,
		"myResourceGroup",
		"myGalleryName",
		"myGalleryApplicationName",
		armcompute.GalleryApplicationUpdate{
			Properties: &armcompute.GalleryApplicationProperties{
				Description:         to.Ptr("This is the gallery application description."),
				Eula:                to.Ptr("This is the gallery application EULA."),
				PrivacyStatementURI: to.Ptr("myPrivacyStatementUri}"),
				ReleaseNoteURI:      to.Ptr("myReleaseNoteUri"),
				SupportedOSType:     to.Ptr(armcompute.OperatingSystemTypesWindows),
			},
		},
		&armcompute.GalleryApplicationsClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/UpdateASimpleGalleryApplication.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/UpdateASimpleGalleryApplication.json: %v", err)
	}
	// Response check
	exampleRes := armcompute.GalleryApplication{
		Name:     to.Ptr("myGalleryApplicationName"),
		Type:     to.Ptr("Microsoft.Compute/galleries"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/galleries/myGalleryName/applications/myGalleryApplicationName"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryApplicationProperties{
			Description:         to.Ptr("This is the gallery application description."),
			Eula:                to.Ptr("This is the gallery application EULA."),
			PrivacyStatementURI: to.Ptr("myPrivacyStatementUri}"),
			ReleaseNoteURI:      to.Ptr("myReleaseNoteUri"),
			SupportedOSType:     to.Ptr(armcompute.OperatingSystemTypesWindows),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.GalleryApplication) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.GalleryApplication)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/UpdateASimpleGalleryApplication.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestGalleryApplications_Get(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/GetAGalleryApplication.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a gallery Application."},
	})
	client, err := armcompute.NewGalleryApplicationsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myGalleryName",
		"myGalleryApplicationName",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/GetAGalleryApplication.json: %v", err)
	}
	// Response check
	exampleRes := armcompute.GalleryApplication{
		Name:     to.Ptr("myGalleryApplicationName"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryApplicationProperties{
			Description:         to.Ptr("This is the gallery application description."),
			Eula:                to.Ptr("This is the gallery application EULA."),
			PrivacyStatementURI: to.Ptr("myPrivacyStatementUri}"),
			ReleaseNoteURI:      to.Ptr("myReleaseNoteUri"),
			SupportedOSType:     to.Ptr(armcompute.OperatingSystemTypesWindows),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.GalleryApplication) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.GalleryApplication)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/GetAGalleryApplication.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestGalleryApplications_Delete(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/DeleteAGalleryApplication.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a gallery Application."},
	})
	client, err := armcompute.NewGalleryApplicationsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"myGalleryName",
		"myGalleryApplicationName",
		&armcompute.GalleryApplicationsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/DeleteAGalleryApplication.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/DeleteAGalleryApplication.json: %v", err)
	}
}

func TestGalleryApplications_ListByGallery(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/ListGalleryApplicationsInAGallery.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List gallery Applications in a gallery."},
	})
	client, err := armcompute.NewGalleryApplicationsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := client.NewListByGalleryPager("myResourceGroup",
		"myGalleryName",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/ListGalleryApplicationsInAGallery.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcompute.GalleryApplicationList{
			Value: []*armcompute.GalleryApplication{
				{
					Name:     to.Ptr("myGalleryApplicationName"),
					Location: to.Ptr("West US"),
					Properties: &armcompute.GalleryApplicationProperties{
						Description:         to.Ptr("This is the gallery application description."),
						Eula:                to.Ptr("This is the gallery application EULA."),
						PrivacyStatementURI: to.Ptr("myPrivacyStatementUri}"),
						ReleaseNoteURI:      to.Ptr("myReleaseNoteUri"),
						SupportedOSType:     to.Ptr(armcompute.OperatingSystemTypesWindows),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.GalleryApplicationList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.GalleryApplicationList)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/ListGalleryApplicationsInAGallery.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestGalleryApplicationVersions_CreateOrUpdate(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/CreateOrUpdateASimpleGalleryApplicationVersion.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a simple gallery Application Version."},
	})
	client, err := armcompute.NewGalleryApplicationVersionsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myGalleryName",
		"myGalleryApplicationName",
		"1.0.0",
		armcompute.GalleryApplicationVersion{
			Location: to.Ptr("West US"),
			Properties: &armcompute.GalleryApplicationVersionProperties{
				PublishingProfile: &armcompute.GalleryApplicationVersionPublishingProfile{
					EndOfLifeDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-07-01T07:00:00Z"); return t }()),
					ReplicaCount:       to.Ptr[int32](1),
					StorageAccountType: to.Ptr(armcompute.StorageAccountTypeStandardLRS),
					TargetRegions: []*armcompute.TargetRegion{
						{
							Name:                 to.Ptr("West US"),
							RegionalReplicaCount: to.Ptr[int32](1),
							StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardLRS),
						}},
					ManageActions: &armcompute.UserArtifactManage{
						Install: to.Ptr("powershell -command \"Expand-Archive -Path package.zip -DestinationPath C:\\package\""),
						Remove:  to.Ptr("del C:\\package "),
					},
					Source: &armcompute.UserArtifactSource{
						MediaLink: to.Ptr("https://mystorageaccount.blob.core.windows.net/mycontainer/package.zip?{sasKey}"),
					},
				},
			},
		},
		&armcompute.GalleryApplicationVersionsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/CreateOrUpdateASimpleGalleryApplicationVersion.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/CreateOrUpdateASimpleGalleryApplicationVersion.json: %v", err)
	}
	// Response check
	exampleRes := armcompute.GalleryApplicationVersion{
		Name:     to.Ptr("1.0.0"),
		Type:     to.Ptr("Microsoft.Compute/galleries/applications/versions"),
		ID:       to.Ptr("/subscriptions/01523d7c-60da-455e-adef-521b547922c4/resourceGroups/galleryPsTestRg98/providers/Microsoft.Compute/galleries/galleryPsTestGallery6165/applications/galleryPsTestGalleryApplication7825/versions/1.0.0"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryApplicationVersionProperties{
			ProvisioningState: to.Ptr(armcompute.GalleryApplicationVersionPropertiesProvisioningStateSucceeded),
			PublishingProfile: &armcompute.GalleryApplicationVersionPublishingProfile{
				EndOfLifeDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-07-01T07:00:00+00:00"); return t }()),
				ExcludeFromLatest:  to.Ptr(false),
				PublishedDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-06-21T17:13:57.5972568+00:00"); return t }()),
				ReplicaCount:       to.Ptr[int32](1),
				StorageAccountType: to.Ptr(armcompute.StorageAccountTypeStandardLRS),
				TargetRegions: []*armcompute.TargetRegion{
					{
						Name:                 to.Ptr("West US"),
						RegionalReplicaCount: to.Ptr[int32](1),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardLRS),
					}},
				EnableHealthCheck: to.Ptr(false),
				ManageActions: &armcompute.UserArtifactManage{
					Install: to.Ptr("powershell -command \"Expand-Archive -Path package.zip -DestinationPath C:\\package\""),
					Remove:  to.Ptr("del C:\\package "),
				},
				Source: &armcompute.UserArtifactSource{
					MediaLink: to.Ptr("https://mystorageaccount.blob.core.windows.net/mycontainer/package.zip?{sasKey}"),
				},
			},
		},
	}
	if !reflect.DeepEqual(exampleRes, res.GalleryApplicationVersion) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.GalleryApplicationVersion)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/CreateOrUpdateASimpleGalleryApplicationVersion.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestGalleryApplicationVersions_Update(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/UpdateASimpleGalleryApplicationVersion.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a simple gallery Application Version."},
	})
	client, err := armcompute.NewGalleryApplicationVersionsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginUpdate(ctx,
		"myResourceGroup",
		"myGalleryName",
		"myGalleryApplicationName",
		"1.0.0",
		armcompute.GalleryApplicationVersionUpdate{
			Properties: &armcompute.GalleryApplicationVersionProperties{
				PublishingProfile: &armcompute.GalleryApplicationVersionPublishingProfile{
					EndOfLifeDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-07-01T07:00:00Z"); return t }()),
					ReplicaCount:       to.Ptr[int32](1),
					StorageAccountType: to.Ptr(armcompute.StorageAccountTypeStandardLRS),
					TargetRegions: []*armcompute.TargetRegion{
						{
							Name:                 to.Ptr("West US"),
							RegionalReplicaCount: to.Ptr[int32](1),
							StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardLRS),
						}},
					ManageActions: &armcompute.UserArtifactManage{
						Install: to.Ptr("powershell -command \"Expand-Archive -Path package.zip -DestinationPath C:\\package\""),
						Remove:  to.Ptr("del C:\\package "),
					},
					Source: &armcompute.UserArtifactSource{
						MediaLink: to.Ptr("https://mystorageaccount.blob.core.windows.net/mycontainer/package.zip?{sasKey}"),
					},
				},
			},
		},
		&armcompute.GalleryApplicationVersionsClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/UpdateASimpleGalleryApplicationVersion.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/UpdateASimpleGalleryApplicationVersion.json: %v", err)
	}
	// Response check
	exampleRes := armcompute.GalleryApplicationVersion{
		Name:     to.Ptr("1.0.0"),
		Type:     to.Ptr("Microsoft.Compute/galleries/applications/versions"),
		ID:       to.Ptr("/subscriptions/01523d7c-60da-455e-adef-521b547922c4/resourceGroups/galleryPsTestRg98/providers/Microsoft.Compute/galleries/galleryPsTestGallery6165/applications/galleryPsTestGalleryApplication7825/versions/1.0.0"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryApplicationVersionProperties{
			ProvisioningState: to.Ptr(armcompute.GalleryApplicationVersionPropertiesProvisioningStateSucceeded),
			PublishingProfile: &armcompute.GalleryApplicationVersionPublishingProfile{
				EndOfLifeDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-07-01T07:00:00+00:00"); return t }()),
				ExcludeFromLatest:  to.Ptr(false),
				PublishedDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-06-21T17:13:57.5972568+00:00"); return t }()),
				ReplicaCount:       to.Ptr[int32](1),
				StorageAccountType: to.Ptr(armcompute.StorageAccountTypeStandardLRS),
				TargetRegions: []*armcompute.TargetRegion{
					{
						Name:                 to.Ptr("West US"),
						RegionalReplicaCount: to.Ptr[int32](1),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardLRS),
					}},
				EnableHealthCheck: to.Ptr(false),
				ManageActions: &armcompute.UserArtifactManage{
					Install: to.Ptr("powershell -command \"Expand-Archive -Path package.zip -DestinationPath C:\\package\""),
					Remove:  to.Ptr("del C:\\package "),
				},
				Source: &armcompute.UserArtifactSource{
					MediaLink: to.Ptr("https://mystorageaccount.blob.core.windows.net/mycontainer/package.zip?{sasKey}"),
				},
			},
		},
	}
	if !reflect.DeepEqual(exampleRes, res.GalleryApplicationVersion) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.GalleryApplicationVersion)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/UpdateASimpleGalleryApplicationVersion.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestGalleryApplicationVersions_Get(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/GetAGalleryApplicationVersionWithReplicationStatus.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a gallery Application Version with replication status."},
	})
	client, err := armcompute.NewGalleryApplicationVersionsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myGalleryName",
		"myGalleryApplicationName",
		"1.0.0",
		&armcompute.GalleryApplicationVersionsClientGetOptions{Expand: to.Ptr(armcompute.ReplicationStatusTypesReplicationStatus)})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/GetAGalleryApplicationVersionWithReplicationStatus.json: %v", err)
	}
	// Response check
	exampleRes := armcompute.GalleryApplicationVersion{
		Name:     to.Ptr("1.0.0"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryApplicationVersionProperties{
			ProvisioningState: to.Ptr(armcompute.GalleryApplicationVersionPropertiesProvisioningStateSucceeded),
			PublishingProfile: &armcompute.GalleryApplicationVersionPublishingProfile{
				EndOfLifeDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-07-01T07:00:00+00:00"); return t }()),
				ExcludeFromLatest:  to.Ptr(false),
				PublishedDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-06-21T17:13:57.5972568+00:00"); return t }()),
				ReplicaCount:       to.Ptr[int32](1),
				StorageAccountType: to.Ptr(armcompute.StorageAccountTypeStandardLRS),
				TargetRegions: []*armcompute.TargetRegion{
					{
						Name:                 to.Ptr("West US"),
						RegionalReplicaCount: to.Ptr[int32](1),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardLRS),
					}},
				EnableHealthCheck: to.Ptr(false),
				ManageActions: &armcompute.UserArtifactManage{
					Install: to.Ptr("powershell -command \"Expand-Archive -Path package.zip -DestinationPath C:\\package\""),
					Remove:  to.Ptr("del C:\\package "),
				},
				Source: &armcompute.UserArtifactSource{
					MediaLink: to.Ptr("https://mystorageaccount.blob.core.windows.net/mycontainer/package.zip?{sasKey}"),
				},
			},
			ReplicationStatus: &armcompute.ReplicationStatus{
				AggregatedState: to.Ptr(armcompute.AggregatedReplicationStateCompleted),
				Summary: []*armcompute.RegionalReplicationStatus{
					{
						Progress: to.Ptr[int32](100),
						Region:   to.Ptr("West US"),
						State:    to.Ptr(armcompute.ReplicationStateCompleted),
						Details:  to.Ptr(""),
					}},
			},
		},
	}
	if !reflect.DeepEqual(exampleRes, res.GalleryApplicationVersion) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.GalleryApplicationVersion)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/GetAGalleryApplicationVersionWithReplicationStatus.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/GetAGalleryApplicationVersion.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a gallery Application Version."},
	})
	client, err = armcompute.NewGalleryApplicationVersionsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err = client.Get(ctx,
		"myResourceGroup",
		"myGalleryName",
		"myGalleryApplicationName",
		"1.0.0",
		&armcompute.GalleryApplicationVersionsClientGetOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/GetAGalleryApplicationVersion.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.GalleryApplicationVersion{
		Name:     to.Ptr("1.0.0"),
		Type:     to.Ptr("Microsoft.Compute/galleries/applications/versions"),
		ID:       to.Ptr("/subscriptions/01523d7c-60da-455e-adef-521b547922c4/resourceGroups/galleryPsTestRg98/providers/Microsoft.Compute/galleries/galleryPsTestGallery6165/applications/galleryPsTestGalleryApplication7825/versions/1.0.0"),
		Location: to.Ptr("West US"),
		Properties: &armcompute.GalleryApplicationVersionProperties{
			ProvisioningState: to.Ptr(armcompute.GalleryApplicationVersionPropertiesProvisioningStateSucceeded),
			PublishingProfile: &armcompute.GalleryApplicationVersionPublishingProfile{
				EndOfLifeDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-07-01T07:00:00+00:00"); return t }()),
				ExcludeFromLatest:  to.Ptr(false),
				PublishedDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-06-21T17:13:57.5972568+00:00"); return t }()),
				ReplicaCount:       to.Ptr[int32](1),
				StorageAccountType: to.Ptr(armcompute.StorageAccountTypeStandardLRS),
				TargetRegions: []*armcompute.TargetRegion{
					{
						Name:                 to.Ptr("West US"),
						RegionalReplicaCount: to.Ptr[int32](1),
						StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardLRS),
					}},
				EnableHealthCheck: to.Ptr(false),
				ManageActions: &armcompute.UserArtifactManage{
					Install: to.Ptr("powershell -command \"Expand-Archive -Path package.zip -DestinationPath C:\\package\""),
					Remove:  to.Ptr("del C:\\package "),
				},
				Source: &armcompute.UserArtifactSource{
					MediaLink: to.Ptr("https://mystorageaccount.blob.core.windows.net/mycontainer/package.zip?{sasKey}"),
				},
			},
		},
	}
	if !reflect.DeepEqual(exampleRes, res.GalleryApplicationVersion) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.GalleryApplicationVersion)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/GetAGalleryApplicationVersion.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestGalleryApplicationVersions_Delete(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/DeleteAGalleryApplicationVersion.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a gallery Application Version."},
	})
	client, err := armcompute.NewGalleryApplicationVersionsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"myGalleryName",
		"myGalleryApplicationName",
		"1.0.0",
		&armcompute.GalleryApplicationVersionsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/DeleteAGalleryApplicationVersion.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/DeleteAGalleryApplicationVersion.json: %v", err)
	}
}

func TestGalleryApplicationVersions_ListByGalleryApplication(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/ListGalleryApplicationVersionsInAGalleryApplication.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List gallery Application Versions in a gallery Application Definition."},
	})
	client, err := armcompute.NewGalleryApplicationVersionsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := client.NewListByGalleryApplicationPager("myResourceGroup",
		"myGalleryName",
		"myGalleryApplicationName",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/ListGalleryApplicationVersionsInAGalleryApplication.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcompute.GalleryApplicationVersionList{
			Value: []*armcompute.GalleryApplicationVersion{
				{
					Name:     to.Ptr("1.0.0"),
					Type:     to.Ptr("Microsoft.Compute/galleries/applications/versions"),
					ID:       to.Ptr("/subscriptions/01523d7c-60da-455e-adef-521b547922c4/resourceGroups/galleryPsTestRg98/providers/Microsoft.Compute/galleries/galleryPsTestGallery6165/applications/galleryPsTestGalleryApplication7825/versions/1.0.0"),
					Location: to.Ptr("West US"),
					Properties: &armcompute.GalleryApplicationVersionProperties{
						ProvisioningState: to.Ptr(armcompute.GalleryApplicationVersionPropertiesProvisioningStateSucceeded),
						PublishingProfile: &armcompute.GalleryApplicationVersionPublishingProfile{
							EndOfLifeDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-07-01T07:00:00+00:00"); return t }()),
							ExcludeFromLatest:  to.Ptr(false),
							PublishedDate:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-06-21T17:13:57.5972568+00:00"); return t }()),
							ReplicaCount:       to.Ptr[int32](1),
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypeStandardLRS),
							TargetRegions: []*armcompute.TargetRegion{
								{
									Name:                 to.Ptr("West US"),
									RegionalReplicaCount: to.Ptr[int32](1),
									StorageAccountType:   to.Ptr(armcompute.StorageAccountTypeStandardLRS),
								}},
							EnableHealthCheck: to.Ptr(false),
							ManageActions: &armcompute.UserArtifactManage{
								Install: to.Ptr("powershell -command \"Expand-Archive -Path package.zip -DestinationPath C:\\package\""),
								Remove:  to.Ptr("del C:\\package "),
							},
							Source: &armcompute.UserArtifactSource{
								MediaLink: to.Ptr("https://mystorageaccount.blob.core.windows.net/mycontainer/package.zip?{sasKey}"),
							},
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.GalleryApplicationVersionList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.GalleryApplicationVersionList)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/ListGalleryApplicationVersionsInAGalleryApplication.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestGallerySharingProfile_Update(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/AddToSharingProfileInAGallery.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Add sharing id to the sharing profile of a gallery."},
	})
	client, err := armcompute.NewGallerySharingProfileClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginUpdate(ctx,
		"myResourceGroup",
		"myGalleryName",
		armcompute.SharingUpdate{
			Groups: []*armcompute.SharingProfileGroup{
				{
					Type: to.Ptr(armcompute.SharingProfileGroupTypesSubscriptions),
					IDs: []*string{
						to.Ptr("34a4ab42-0d72-47d9-bd1a-aed207386dac"),
						to.Ptr("380fd389-260b-41aa-bad9-0a83108c370b")},
				},
				{
					Type: to.Ptr(armcompute.SharingProfileGroupTypesAADTenants),
					IDs: []*string{
						to.Ptr("c24c76aa-8897-4027-9b03-8f7928b54ff6")},
				}},
			OperationType: to.Ptr(armcompute.SharingUpdateOperationTypesAdd),
		},
		&armcompute.GallerySharingProfileClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/AddToSharingProfileInAGallery.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/AddToSharingProfileInAGallery.json: %v", err)
	}
	// Response check
	exampleRes := armcompute.SharingUpdate{
		Groups: []*armcompute.SharingProfileGroup{
			{
				Type: to.Ptr(armcompute.SharingProfileGroupTypesSubscriptions),
				IDs: []*string{
					to.Ptr("34a4ab42-0d72-47d9-bd1a-aed207386dac"),
					to.Ptr("380fd389-260b-41aa-bad9-0a83108c370b")},
			},
			{
				Type: to.Ptr(armcompute.SharingProfileGroupTypesAADTenants),
				IDs: []*string{
					to.Ptr("c24c76aa-8897-4027-9b03-8f7928b54ff6")},
			}},
		OperationType: to.Ptr(armcompute.SharingUpdateOperationTypesAdd),
	}
	if !reflect.DeepEqual(exampleRes, res.SharingUpdate) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.SharingUpdate)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/AddToSharingProfileInAGallery.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/ResetSharingProfileInAGallery.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"reset sharing profile of a gallery."},
	})
	client, err = armcompute.NewGallerySharingProfileClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginUpdate(ctx,
		"myResourceGroup",
		"myGalleryName",
		armcompute.SharingUpdate{
			OperationType: to.Ptr(armcompute.SharingUpdateOperationTypesReset),
		},
		&armcompute.GallerySharingProfileClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/ResetSharingProfileInAGallery.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/ResetSharingProfileInAGallery.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.SharingUpdate{
		OperationType: to.Ptr(armcompute.SharingUpdateOperationTypesReset),
	}
	if !reflect.DeepEqual(exampleRes, res.SharingUpdate) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.SharingUpdate)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/ResetSharingProfileInAGallery.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/EnableACommunityGallery.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"share a gallery to community."},
	})
	client, err = armcompute.NewGallerySharingProfileClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginUpdate(ctx,
		"myResourceGroup",
		"myGalleryName",
		armcompute.SharingUpdate{
			OperationType: to.Ptr(armcompute.SharingUpdateOperationTypesEnableCommunity),
		},
		&armcompute.GallerySharingProfileClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/EnableACommunityGallery.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/EnableACommunityGallery.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.SharingUpdate{
		OperationType: to.Ptr(armcompute.SharingUpdateOperationTypesEnableCommunity),
	}
	if !reflect.DeepEqual(exampleRes, res.SharingUpdate) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.SharingUpdate)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-10-01/examples/gallery/EnableACommunityGallery.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestSharedGalleries_List(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-07-01/examples/sharedGallery/ListSharedGalleries.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a gallery."},
	})
	client, err := armcompute.NewSharedGalleriesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := client.NewListPager("myLocation",
		&armcompute.SharedGalleriesClientListOptions{SharedTo: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-07-01/examples/sharedGallery/ListSharedGalleries.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcompute.SharedGalleryList{
			Value: []*armcompute.SharedGallery{
				{
					Name:     to.Ptr("galleryUniqueName"),
					Location: to.Ptr("myLocation"),
					Identifier: &armcompute.SharedGalleryIdentifier{
						UniqueID: to.Ptr("/SharedGalleries/galleryUniqueName"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SharedGalleryList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SharedGalleryList)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-07-01/examples/sharedGallery/ListSharedGalleries.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSharedGalleries_Get(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-07-01/examples/sharedGallery/GetASharedGallery.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a gallery."},
	})
	client, err := armcompute.NewSharedGalleriesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := client.Get(ctx,
		"myLocation",
		"galleryUniqueName",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-07-01/examples/sharedGallery/GetASharedGallery.json: %v", err)
	}
	// Response check
	exampleRes := armcompute.SharedGallery{
		Name:     to.Ptr("myGalleryName"),
		Location: to.Ptr("myLocation"),
		Identifier: &armcompute.SharedGalleryIdentifier{
			UniqueID: to.Ptr("/SharedGalleries/galleryUniqueName"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.SharedGallery) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.SharedGallery)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-07-01/examples/sharedGallery/GetASharedGallery.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestSharedGalleryImages_List(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-07-01/examples/sharedGallery/ListSharedGalleryImages.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a gallery."},
	})
	client, err := armcompute.NewSharedGalleryImagesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := client.NewListPager("myLocation",
		"galleryUniqueName",
		&armcompute.SharedGalleryImagesClientListOptions{SharedTo: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-07-01/examples/sharedGallery/ListSharedGalleryImages.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcompute.SharedGalleryImageList{
			Value: []*armcompute.SharedGalleryImage{
				{
					Name:     to.Ptr("myGalleryImageName"),
					Location: to.Ptr("myLocation"),
					Identifier: &armcompute.SharedGalleryIdentifier{
						UniqueID: to.Ptr("/SharedGalleries/galleryUniqueName/Images/myGalleryImageName"),
					},
					Properties: &armcompute.SharedGalleryImageProperties{
						HyperVGeneration: to.Ptr(armcompute.HyperVGenerationV1),
						Identifier: &armcompute.GalleryImageIdentifier{
							Offer:     to.Ptr("myOfferName"),
							Publisher: to.Ptr("myPublisherName"),
							SKU:       to.Ptr("mySkuName"),
						},
						OSState: to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
						OSType:  to.Ptr(armcompute.OperatingSystemTypesWindows),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SharedGalleryImageList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SharedGalleryImageList)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-07-01/examples/sharedGallery/ListSharedGalleryImages.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSharedGalleryImages_Get(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-07-01/examples/sharedGallery/GetASharedGalleryImage.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a gallery."},
	})
	client, err := armcompute.NewSharedGalleryImagesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := client.Get(ctx,
		"myLocation",
		"galleryUniqueName",
		"myGalleryImageName",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-07-01/examples/sharedGallery/GetASharedGalleryImage.json: %v", err)
	}
	// Response check
	exampleRes := armcompute.SharedGalleryImage{
		Name:     to.Ptr("myGalleryImageName"),
		Location: to.Ptr("myLocation"),
		Identifier: &armcompute.SharedGalleryIdentifier{
			UniqueID: to.Ptr("/SharedGalleries/galleryUniqueName/Images/myGalleryImageName"),
		},
		Properties: &armcompute.SharedGalleryImageProperties{
			HyperVGeneration: to.Ptr(armcompute.HyperVGenerationV1),
			Identifier: &armcompute.GalleryImageIdentifier{
				Offer:     to.Ptr("myOfferName"),
				Publisher: to.Ptr("myPublisherName"),
				SKU:       to.Ptr("mySkuName"),
			},
			OSState: to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
			OSType:  to.Ptr(armcompute.OperatingSystemTypesWindows),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.SharedGalleryImage) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.SharedGalleryImage)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-07-01/examples/sharedGallery/GetASharedGalleryImage.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestSharedGalleryImageVersions_List(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-07-01/examples/sharedGallery/ListSharedGalleryImageVersions.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a gallery."},
	})
	client, err := armcompute.NewSharedGalleryImageVersionsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := client.NewListPager("myLocation",
		"galleryUniqueName",
		"myGalleryImageName",
		&armcompute.SharedGalleryImageVersionsClientListOptions{SharedTo: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-07-01/examples/sharedGallery/ListSharedGalleryImageVersions.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcompute.SharedGalleryImageVersionList{
			Value: []*armcompute.SharedGalleryImageVersion{
				{
					Name:     to.Ptr("myGalleryImageVersionName"),
					Location: to.Ptr("myLocation"),
					Identifier: &armcompute.SharedGalleryIdentifier{
						UniqueID: to.Ptr("/SharedGalleries/galleryUniqueName/Images/myGalleryImageName/Versions/myGalleryImageVersionName"),
					},
					Properties: &armcompute.SharedGalleryImageVersionProperties{
						EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-03-20T09:12:28Z"); return t }()),
						PublishedDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-20T09:12:28Z"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SharedGalleryImageVersionList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SharedGalleryImageVersionList)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-07-01/examples/sharedGallery/ListSharedGalleryImageVersions.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSharedGalleryImageVersions_Get(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-07-01/examples/sharedGallery/GetASharedGalleryImageVersion.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a gallery."},
	})
	client, err := armcompute.NewSharedGalleryImageVersionsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := client.Get(ctx,
		"myLocation",
		"galleryUniqueName",
		"myGalleryImageName",
		"myGalleryImageVersionName",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-07-01/examples/sharedGallery/GetASharedGalleryImageVersion.json: %v", err)
	}
	// Response check
	exampleRes := armcompute.SharedGalleryImageVersion{
		Name:     to.Ptr("myGalleryImageVersionName"),
		Location: to.Ptr("myLocation"),
		Identifier: &armcompute.SharedGalleryIdentifier{
			UniqueID: to.Ptr("/SharedGalleries/galleryUniqueName/Images/myGalleryImageName/Versions/myGalleryImageVersionName"),
		},
		Properties: &armcompute.SharedGalleryImageVersionProperties{
			EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-03-20T09:12:28Z"); return t }()),
			PublishedDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-20T09:12:28Z"); return t }()),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.SharedGalleryImageVersion) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.SharedGalleryImageVersion)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-07-01/examples/sharedGallery/GetASharedGalleryImageVersion.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestCommunityGalleries_Get(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-07-01/examples/communityGallery/GetACommunityGallery.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a gallery."},
	})
	client, err := armcompute.NewCommunityGalleriesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := client.Get(ctx,
		"myLocation",
		"publicGalleryName",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-07-01/examples/communityGallery/GetACommunityGallery.json: %v", err)
	}
	// Response check
	exampleRes := armcompute.CommunityGallery{
		Name: to.Ptr("publicGalleryName"),
		Type: to.Ptr("Microsoft.Compute/Locations/CommunityGallery"),
		Identifier: &armcompute.CommunityGalleryIdentifier{
			UniqueID: to.Ptr("/CommunityGalleries/publicGalleryName"),
		},
		Location: to.Ptr("myLocation"),
	}
	if !reflect.DeepEqual(exampleRes, res.CommunityGallery) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.CommunityGallery)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-07-01/examples/communityGallery/GetACommunityGallery.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestCommunityGalleryImages_Get(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-07-01/examples/communityGallery/GetACommunityGalleryImage.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a gallery."},
	})
	client, err := armcompute.NewCommunityGalleryImagesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := client.Get(ctx,
		"myLocation",
		"publicGalleryName",
		"myGalleryImageName",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-07-01/examples/communityGallery/GetACommunityGalleryImage.json: %v", err)
	}
	// Response check
	exampleRes := armcompute.CommunityGalleryImage{
		Name: to.Ptr("myGalleryImageName"),
		Type: to.Ptr("Microsoft.Compute/Locations/CommunityGalleryImage"),
		Identifier: &armcompute.CommunityGalleryIdentifier{
			UniqueID: to.Ptr("/CommunityGalleries/publicGalleryName/Images/myGalleryImageName"),
		},
		Location: to.Ptr("myLocation"),
		Properties: &armcompute.CommunityGalleryImageProperties{
			HyperVGeneration: to.Ptr(armcompute.HyperVGenerationV1),
			Identifier: &armcompute.GalleryImageIdentifier{
				Offer:     to.Ptr("myOfferName"),
				Publisher: to.Ptr("myPublisherName"),
				SKU:       to.Ptr("mySkuName"),
			},
			OSState: to.Ptr(armcompute.OperatingSystemStateTypesGeneralized),
			OSType:  to.Ptr(armcompute.OperatingSystemTypesWindows),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.CommunityGalleryImage) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.CommunityGalleryImage)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-07-01/examples/communityGallery/GetACommunityGalleryImage.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestCommunityGalleryImageVersions_Get(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-07-01/examples/communityGallery/GetACommunityGalleryImageVersion.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a gallery."},
	})
	client, err := armcompute.NewCommunityGalleryImageVersionsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := client.Get(ctx,
		"myLocation",
		"publicGalleryName",
		"myGalleryImageName",
		"myGalleryImageVersionName",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-07-01/examples/communityGallery/GetACommunityGalleryImageVersion.json: %v", err)
	}
	// Response check
	exampleRes := armcompute.CommunityGalleryImageVersion{
		Name: to.Ptr("myGalleryImageVersionName"),
		Type: to.Ptr("Microsoft.Compute/Locations/CommunityGalleryImageVersion"),
		Identifier: &armcompute.CommunityGalleryIdentifier{
			UniqueID: to.Ptr("/CommunityGalleries/publicGalleryName/Images/myGalleryImageName/Versions/myGalleryImageVersionName"),
		},
		Location: to.Ptr("myLocation"),
		Properties: &armcompute.CommunityGalleryImageVersionProperties{
			EndOfLifeDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-03-20T09:12:28Z"); return t }()),
			PublishedDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-20T09:12:28Z"); return t }()),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.CommunityGalleryImageVersion) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.CommunityGalleryImageVersion)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-07-01/examples/communityGallery/GetACommunityGalleryImageVersion.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestCloudServiceRoleInstances_Delete(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/DeleteCloudServiceRoleInstance.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete Cloud Service Role Instance"},
	})
	client, err := armcompute.NewCloudServiceRoleInstancesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginDelete(ctx,
		"{roleInstance-name}",
		"ConstosoRG",
		"{cs-name}",
		&armcompute.CloudServiceRoleInstancesClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/DeleteCloudServiceRoleInstance.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/DeleteCloudServiceRoleInstance.json: %v", err)
	}
}

func TestCloudServiceRoleInstances_Get(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetCloudServiceRoleInstance.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Cloud Service Role Instance"},
	})
	client, err := armcompute.NewCloudServiceRoleInstancesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := client.Get(ctx,
		"{roleInstance-name}",
		"ConstosoRG",
		"{cs-name}",
		&armcompute.CloudServiceRoleInstancesClientGetOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetCloudServiceRoleInstance.json: %v", err)
	}
	// Response check
	exampleRes := armcompute.RoleInstance{
		Name:     to.Ptr("{roleInstance-name}"),
		Type:     to.Ptr("Microsoft.Compute/cloudServices/roleInstances"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name}/roleInstances/{roleInstance-name}"),
		Location: to.Ptr("eastus2euap"),
		Properties: &armcompute.RoleInstanceProperties{
			NetworkProfile: &armcompute.RoleInstanceNetworkProfile{
				NetworkInterfaces: []*armcompute.SubResource{
					{
						ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name}/roleInstances/{roleInstance-name}/networkInterfaces/nic1"),
					}},
			},
		},
		SKU: &armcompute.InstanceSKU{
			Name: to.Ptr("Standard_D1_v2"),
			Tier: to.Ptr("Standard"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.RoleInstance) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.RoleInstance)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetCloudServiceRoleInstance.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestCloudServiceRoleInstances_GetInstanceView(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetInstanceViewOfCloudServiceRoleInstance.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Instance View of Cloud Service Role Instance"},
	})
	client, err := armcompute.NewCloudServiceRoleInstancesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := client.GetInstanceView(ctx,
		"{roleInstance-name}",
		"ConstosoRG",
		"{cs-name}",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetInstanceViewOfCloudServiceRoleInstance.json: %v", err)
	}
	// Response check
	exampleRes := armcompute.RoleInstanceView{
		PlatformFaultDomain:  to.Ptr[int32](0),
		PlatformUpdateDomain: to.Ptr[int32](0),
		PrivateID:            to.Ptr("3491bc0c-1f6c-444f-b1d0-ec0751a74e3e"),
		Statuses: []*armcompute.ResourceInstanceViewStatus{
			{
				Code:          to.Ptr("RoleState/RoleStateStarted"),
				DisplayStatus: to.Ptr("RoleStateStarted"),
				Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
				Message:       to.Ptr(""),
			}},
	}
	if !reflect.DeepEqual(exampleRes, res.RoleInstanceView) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.RoleInstanceView)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetInstanceViewOfCloudServiceRoleInstance.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestCloudServiceRoleInstances_List(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListCloudServiceRolesInstances.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Role Instances in a Cloud Service"},
	})
	client, err := armcompute.NewCloudServiceRoleInstancesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := client.NewListPager("ConstosoRG",
		"{cs-name}",
		&armcompute.CloudServiceRoleInstancesClientListOptions{Expand: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListCloudServiceRolesInstances.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcompute.RoleInstanceListResult{
			Value: []*armcompute.RoleInstance{
				{
					Name:     to.Ptr("ContosoFrontend_IN_0"),
					Type:     to.Ptr("Microsoft.Compute/cloudServices/roleInstances"),
					ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name}/roleInstances/ContosoFrontend_IN_0"),
					Location: to.Ptr("eastus2euap"),
					Properties: &armcompute.RoleInstanceProperties{
						NetworkProfile: &armcompute.RoleInstanceNetworkProfile{
							NetworkInterfaces: []*armcompute.SubResource{
								{
									ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name}/roleInstances/ContosoFrontend_IN_0/networkInterfaces/nic1"),
								}},
						},
					},
					SKU: &armcompute.InstanceSKU{
						Name: to.Ptr("Standard_D1_v2"),
						Tier: to.Ptr("Standard"),
					},
				},
				{
					Name:     to.Ptr("ContosoFrontend_IN_1"),
					Type:     to.Ptr("Microsoft.Compute/cloudServices/roleInstances"),
					ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name}/roleInstances/ContosoFrontend_IN_1"),
					Location: to.Ptr("eastus2euap"),
					Properties: &armcompute.RoleInstanceProperties{
						NetworkProfile: &armcompute.RoleInstanceNetworkProfile{
							NetworkInterfaces: []*armcompute.SubResource{
								{
									ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name}/roleInstances/ContosoFrontend_IN_1/networkInterfaces/nic1"),
								}},
						},
					},
					SKU: &armcompute.InstanceSKU{
						Name: to.Ptr("Standard_D1_v2"),
						Tier: to.Ptr("Standard"),
					},
				},
				{
					Name:     to.Ptr("ContosoBackend_IN_0"),
					Type:     to.Ptr("Microsoft.Compute/cloudServices/roleInstances"),
					ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name}/roleInstances/ContosoBackend_IN_0"),
					Location: to.Ptr("eastus2euap"),
					Properties: &armcompute.RoleInstanceProperties{
						NetworkProfile: &armcompute.RoleInstanceNetworkProfile{
							NetworkInterfaces: []*armcompute.SubResource{
								{
									ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name}/roleInstances/ContosoBackend_IN_0/networkInterfaces/nic1"),
								}},
						},
					},
					SKU: &armcompute.InstanceSKU{
						Name: to.Ptr("Standard_D1_v2"),
						Tier: to.Ptr("Standard"),
					},
				},
				{
					Name:     to.Ptr("ContosoBackend_IN_1"),
					Type:     to.Ptr("Microsoft.Compute/cloudServices/roleInstances"),
					ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name}/roleInstances/ContosoBackend_IN_1"),
					Location: to.Ptr("eastus2euap"),
					Properties: &armcompute.RoleInstanceProperties{
						NetworkProfile: &armcompute.RoleInstanceNetworkProfile{
							NetworkInterfaces: []*armcompute.SubResource{
								{
									ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name}/roleInstances/ContosoBackend_IN_1/networkInterfaces/nic1"),
								}},
						},
					},
					SKU: &armcompute.InstanceSKU{
						Name: to.Ptr("Standard_D1_v2"),
						Tier: to.Ptr("Standard"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.RoleInstanceListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.RoleInstanceListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListCloudServiceRolesInstances.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCloudServiceRoleInstances_Restart(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/RestartCloudServiceRoleInstance.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Restart Cloud Service Role Instance"},
	})
	client, err := armcompute.NewCloudServiceRoleInstancesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginRestart(ctx,
		"{roleInstance-name}",
		"ConstosoRG",
		"{cs-name}",
		&armcompute.CloudServiceRoleInstancesClientBeginRestartOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/RestartCloudServiceRoleInstance.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/RestartCloudServiceRoleInstance.json: %v", err)
	}
}

func TestCloudServiceRoleInstances_Reimage(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ReimageCloudServiceRoleInstance.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Reimage Cloud Service Role Instance"},
	})
	client, err := armcompute.NewCloudServiceRoleInstancesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginReimage(ctx,
		"{roleInstance-name}",
		"ConstosoRG",
		"{cs-name}",
		&armcompute.CloudServiceRoleInstancesClientBeginReimageOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ReimageCloudServiceRoleInstance.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ReimageCloudServiceRoleInstance.json: %v", err)
	}
}

func TestCloudServiceRoleInstances_Rebuild(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/RebuildCloudServiceRoleInstance.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Rebuild Cloud Service Role Instance"},
	})
	client, err := armcompute.NewCloudServiceRoleInstancesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginRebuild(ctx,
		"{roleInstance-name}",
		"ConstosoRG",
		"{cs-name}",
		&armcompute.CloudServiceRoleInstancesClientBeginRebuildOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/RebuildCloudServiceRoleInstance.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/RebuildCloudServiceRoleInstance.json: %v", err)
	}
}

func TestCloudServiceRoleInstances_GetRemoteDesktopFile(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestCloudServiceRoles_Get(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetCloudServiceRole.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Cloud Service Role"},
	})
	client, err := armcompute.NewCloudServiceRolesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := client.Get(ctx,
		"{role-name}",
		"ConstosoRG",
		"{cs-name}",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetCloudServiceRole.json: %v", err)
	}
	// Response check
	exampleRes := armcompute.CloudServiceRole{
		Name:     to.Ptr("{role-name}"),
		Type:     to.Ptr("Microsoft.Compute/cloudServices/roles"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name}/roles/{role-name}"),
		Location: to.Ptr("eastus2euap"),
		Properties: &armcompute.CloudServiceRoleProperties{
			UniqueID: to.Ptr("b03bc269-766b-4921-b91a-7dffaae4d03b:{role-name}"),
		},
		SKU: &armcompute.CloudServiceRoleSKU{
			Name:     to.Ptr("Standard_D1_v2"),
			Capacity: to.Ptr[int64](2),
			Tier:     to.Ptr("Standard"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.CloudServiceRole) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.CloudServiceRole)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetCloudServiceRole.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestCloudServiceRoles_List(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListCloudServiceRoles.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Roles in a Cloud Service"},
	})
	client, err := armcompute.NewCloudServiceRolesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := client.NewListPager("ConstosoRG",
		"{cs-name}",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListCloudServiceRoles.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcompute.CloudServiceRoleListResult{
			Value: []*armcompute.CloudServiceRole{
				{
					Name:     to.Ptr("ContosoFrontend"),
					Type:     to.Ptr("Microsoft.Compute/cloudServices/roles"),
					ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name}/roles/ContosoFrontend"),
					Location: to.Ptr("eastus2euap"),
					Properties: &armcompute.CloudServiceRoleProperties{
						UniqueID: to.Ptr("b03bc269-766b-4921-b91a-7dffaae4d03b:ContosoFrontend"),
					},
					SKU: &armcompute.CloudServiceRoleSKU{
						Name:     to.Ptr("Standard_D1_v2"),
						Capacity: to.Ptr[int64](2),
						Tier:     to.Ptr("Standard"),
					},
				},
				{
					Name:     to.Ptr("ContosoBackend"),
					Type:     to.Ptr("Microsoft.Compute/cloudServices/roles"),
					ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name}/roles/ContosoBackend"),
					Location: to.Ptr("eastus2euap"),
					Properties: &armcompute.CloudServiceRoleProperties{
						UniqueID: to.Ptr("b03bc269-766b-4921-b91a-7dffaae4d03b:ContosoBackend"),
					},
					SKU: &armcompute.CloudServiceRoleSKU{
						Name:     to.Ptr("Standard_D1_v2"),
						Capacity: to.Ptr[int64](2),
						Tier:     to.Ptr("Standard"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.CloudServiceRoleListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.CloudServiceRoleListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListCloudServiceRoles.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCloudServices_CreateOrUpdate(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateCloudServiceWithMultiRole.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create New Cloud Service with Multiple Roles"},
	})
	client, err := armcompute.NewCloudServicesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginCreateOrUpdate(ctx,
		"ConstosoRG",
		"{cs-name}",
		&armcompute.CloudServicesClientBeginCreateOrUpdateOptions{Parameters: &armcompute.CloudService{
			Location: to.Ptr("westus"),
			Properties: &armcompute.CloudServiceProperties{
				Configuration: to.Ptr("{ServiceConfiguration}"),
				NetworkProfile: &armcompute.CloudServiceNetworkProfile{
					LoadBalancerConfigurations: []*armcompute.LoadBalancerConfiguration{
						{
							Name: to.Ptr("contosolb"),
							Properties: &armcompute.LoadBalancerConfigurationProperties{
								FrontendIPConfigurations: []*armcompute.LoadBalancerFrontendIPConfiguration{
									{
										Name: to.Ptr("contosofe"),
										Properties: &armcompute.LoadBalancerFrontendIPConfigurationProperties{
											PublicIPAddress: &armcompute.SubResource{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Network/publicIPAddresses/contosopublicip"),
											},
										},
									}},
							},
						}},
				},
				PackageURL: to.Ptr("{PackageUrl}"),
				RoleProfile: &armcompute.CloudServiceRoleProfile{
					Roles: []*armcompute.CloudServiceRoleProfileProperties{
						{
							Name: to.Ptr("ContosoFrontend"),
							SKU: &armcompute.CloudServiceRoleSKU{
								Name:     to.Ptr("Standard_D1_v2"),
								Capacity: to.Ptr[int64](1),
								Tier:     to.Ptr("Standard"),
							},
						},
						{
							Name: to.Ptr("ContosoBackend"),
							SKU: &armcompute.CloudServiceRoleSKU{
								Name:     to.Ptr("Standard_D1_v2"),
								Capacity: to.Ptr[int64](1),
								Tier:     to.Ptr("Standard"),
							},
						}},
				},
				UpgradeMode: to.Ptr(armcompute.CloudServiceUpgradeModeAuto),
			},
		},
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateCloudServiceWithMultiRole.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateCloudServiceWithMultiRole.json: %v", err)
	}
	// Response check
	exampleRes := armcompute.CloudService{
		Name:     to.Ptr("{cs-name}"),
		Type:     to.Ptr("Microsoft.Compute/cloudServices"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name}"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.CloudServiceProperties{
			Configuration: to.Ptr("{ServiceConfiguration}"),
			NetworkProfile: &armcompute.CloudServiceNetworkProfile{
				LoadBalancerConfigurations: []*armcompute.LoadBalancerConfiguration{
					{
						Name: to.Ptr("contosolb"),
						Properties: &armcompute.LoadBalancerConfigurationProperties{
							FrontendIPConfigurations: []*armcompute.LoadBalancerFrontendIPConfiguration{
								{
									Name: to.Ptr("contosofe"),
									Properties: &armcompute.LoadBalancerFrontendIPConfigurationProperties{
										PublicIPAddress: &armcompute.SubResource{
											ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Network/publicIPAddresses/contosopublicip"),
										},
									},
								}},
						},
					}},
			},
			OSProfile: &armcompute.CloudServiceOsProfile{
				Secrets: []*armcompute.CloudServiceVaultSecretGroup{},
			},
			PackageURL:        to.Ptr("{PackageUrl}"),
			ProvisioningState: to.Ptr("Succeeded"),
			RoleProfile: &armcompute.CloudServiceRoleProfile{
				Roles: []*armcompute.CloudServiceRoleProfileProperties{
					{
						Name: to.Ptr("ContosoFrontend"),
						SKU: &armcompute.CloudServiceRoleSKU{
							Name:     to.Ptr("Standard_D1_v2"),
							Capacity: to.Ptr[int64](1),
							Tier:     to.Ptr("Standard"),
						},
					},
					{
						Name: to.Ptr("ContosoBackend"),
						SKU: &armcompute.CloudServiceRoleSKU{
							Name:     to.Ptr("Standard_D1_v2"),
							Capacity: to.Ptr[int64](1),
							Tier:     to.Ptr("Standard"),
						},
					}},
			},
			UniqueID:    to.Ptr("7f3edf91-cb34-4a3e-971a-177dc3dd43cb"),
			UpgradeMode: to.Ptr(armcompute.CloudServiceUpgradeModeAuto),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.CloudService) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.CloudService)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateCloudServiceWithMultiRole.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateCloudServiceWithSingleRole.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create New Cloud Service with Single Role"},
	})
	client, err = armcompute.NewCloudServicesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginCreateOrUpdate(ctx,
		"ConstosoRG",
		"{cs-name}",
		&armcompute.CloudServicesClientBeginCreateOrUpdateOptions{Parameters: &armcompute.CloudService{
			Location: to.Ptr("westus"),
			Properties: &armcompute.CloudServiceProperties{
				Configuration: to.Ptr("{ServiceConfiguration}"),
				NetworkProfile: &armcompute.CloudServiceNetworkProfile{
					LoadBalancerConfigurations: []*armcompute.LoadBalancerConfiguration{
						{
							Name: to.Ptr("myLoadBalancer"),
							Properties: &armcompute.LoadBalancerConfigurationProperties{
								FrontendIPConfigurations: []*armcompute.LoadBalancerFrontendIPConfiguration{
									{
										Name: to.Ptr("myfe"),
										Properties: &armcompute.LoadBalancerFrontendIPConfigurationProperties{
											PublicIPAddress: &armcompute.SubResource{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Network/publicIPAddresses/myPublicIP"),
											},
										},
									}},
							},
						}},
				},
				PackageURL: to.Ptr("{PackageUrl}"),
				RoleProfile: &armcompute.CloudServiceRoleProfile{
					Roles: []*armcompute.CloudServiceRoleProfileProperties{
						{
							Name: to.Ptr("ContosoFrontend"),
							SKU: &armcompute.CloudServiceRoleSKU{
								Name:     to.Ptr("Standard_D1_v2"),
								Capacity: to.Ptr[int64](1),
								Tier:     to.Ptr("Standard"),
							},
						}},
				},
				UpgradeMode: to.Ptr(armcompute.CloudServiceUpgradeModeAuto),
			},
		},
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateCloudServiceWithSingleRole.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateCloudServiceWithSingleRole.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.CloudService{
		Name:     to.Ptr("{cs-name}"),
		Type:     to.Ptr("Microsoft.Compute/cloudServices"),
		ID:       to.Ptr("/subscriptions/5393f919-a68a-43d0-9063-4b2bda6bffdf/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name}"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.CloudServiceProperties{
			Configuration: to.Ptr("{ServiceConfiguration}"),
			NetworkProfile: &armcompute.CloudServiceNetworkProfile{
				LoadBalancerConfigurations: []*armcompute.LoadBalancerConfiguration{
					{
						Name: to.Ptr("myLoadBalancer"),
						Properties: &armcompute.LoadBalancerConfigurationProperties{
							FrontendIPConfigurations: []*armcompute.LoadBalancerFrontendIPConfiguration{
								{
									Name: to.Ptr("myfe"),
									Properties: &armcompute.LoadBalancerFrontendIPConfigurationProperties{
										PublicIPAddress: &armcompute.SubResource{
											ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Network/publicIPAddresses/myPublicIP"),
										},
									},
								}},
						},
					}},
			},
			OSProfile: &armcompute.CloudServiceOsProfile{
				Secrets: []*armcompute.CloudServiceVaultSecretGroup{},
			},
			PackageURL:        to.Ptr("{PackageUrl}"),
			ProvisioningState: to.Ptr("Succeeded"),
			RoleProfile: &armcompute.CloudServiceRoleProfile{
				Roles: []*armcompute.CloudServiceRoleProfileProperties{
					{
						Name: to.Ptr("ContosoFrontend"),
						SKU: &armcompute.CloudServiceRoleSKU{
							Name:     to.Ptr("Standard_D1_v2"),
							Capacity: to.Ptr[int64](1),
							Tier:     to.Ptr("Standard"),
						},
					}},
			},
			UniqueID:    to.Ptr("14d10b45-ced7-42ef-a406-50a3df2cea7d"),
			UpgradeMode: to.Ptr(armcompute.CloudServiceUpgradeModeAuto),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.CloudService) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.CloudService)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateCloudServiceWithSingleRole.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateCloudServiceWithSingleRoleAndCertificate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create New Cloud Service with Single Role and Certificate from Key Vault"},
	})
	client, err = armcompute.NewCloudServicesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginCreateOrUpdate(ctx,
		"ConstosoRG",
		"{cs-name}",
		&armcompute.CloudServicesClientBeginCreateOrUpdateOptions{Parameters: &armcompute.CloudService{
			Location: to.Ptr("westus"),
			Properties: &armcompute.CloudServiceProperties{
				Configuration: to.Ptr("{ServiceConfiguration}"),
				NetworkProfile: &armcompute.CloudServiceNetworkProfile{
					LoadBalancerConfigurations: []*armcompute.LoadBalancerConfiguration{
						{
							Name: to.Ptr("contosolb"),
							Properties: &armcompute.LoadBalancerConfigurationProperties{
								FrontendIPConfigurations: []*armcompute.LoadBalancerFrontendIPConfiguration{
									{
										Name: to.Ptr("contosofe"),
										Properties: &armcompute.LoadBalancerFrontendIPConfigurationProperties{
											PublicIPAddress: &armcompute.SubResource{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Network/publicIPAddresses/contosopublicip"),
											},
										},
									}},
							},
						}},
				},
				OSProfile: &armcompute.CloudServiceOsProfile{
					Secrets: []*armcompute.CloudServiceVaultSecretGroup{
						{
							SourceVault: &armcompute.SubResource{
								ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.KeyVault/vaults/{keyvault-name}"),
							},
							VaultCertificates: []*armcompute.CloudServiceVaultCertificate{
								{
									CertificateURL: to.Ptr("https://{keyvault-name}.vault.azure.net:443/secrets/ContosoCertificate/{secret-id}"),
								}},
						}},
				},
				PackageURL: to.Ptr("{PackageUrl}"),
				RoleProfile: &armcompute.CloudServiceRoleProfile{
					Roles: []*armcompute.CloudServiceRoleProfileProperties{
						{
							Name: to.Ptr("ContosoFrontend"),
							SKU: &armcompute.CloudServiceRoleSKU{
								Name:     to.Ptr("Standard_D1_v2"),
								Capacity: to.Ptr[int64](1),
								Tier:     to.Ptr("Standard"),
							},
						}},
				},
				UpgradeMode: to.Ptr(armcompute.CloudServiceUpgradeModeAuto),
			},
		},
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateCloudServiceWithSingleRoleAndCertificate.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateCloudServiceWithSingleRoleAndCertificate.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.CloudService{
		Name:     to.Ptr("{cs-name}"),
		Type:     to.Ptr("Microsoft.Compute/cloudServices"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name}"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.CloudServiceProperties{
			Configuration: to.Ptr("{ServiceConfiguration}"),
			NetworkProfile: &armcompute.CloudServiceNetworkProfile{
				LoadBalancerConfigurations: []*armcompute.LoadBalancerConfiguration{
					{
						Name: to.Ptr("contosolb"),
						Properties: &armcompute.LoadBalancerConfigurationProperties{
							FrontendIPConfigurations: []*armcompute.LoadBalancerFrontendIPConfiguration{
								{
									Name: to.Ptr("contosofe"),
									Properties: &armcompute.LoadBalancerFrontendIPConfigurationProperties{
										PublicIPAddress: &armcompute.SubResource{
											ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Network/publicIPAddresses/contosopublicip"),
										},
									},
								}},
						},
					}},
			},
			OSProfile: &armcompute.CloudServiceOsProfile{
				Secrets: []*armcompute.CloudServiceVaultSecretGroup{
					{
						SourceVault: &armcompute.SubResource{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.KeyVault/vaults/{keyvault-name}"),
						},
						VaultCertificates: []*armcompute.CloudServiceVaultCertificate{
							{
								CertificateURL: to.Ptr("https://{keyvault-name}.vault.azure.net:443/secrets/ContosoCertificate/{secret-id}"),
							}},
					}},
			},
			PackageURL:        to.Ptr("{PackageUrl}"),
			ProvisioningState: to.Ptr("Succeeded"),
			RoleProfile: &armcompute.CloudServiceRoleProfile{
				Roles: []*armcompute.CloudServiceRoleProfileProperties{
					{
						Name: to.Ptr("ContosoFrontend"),
						SKU: &armcompute.CloudServiceRoleSKU{
							Name:     to.Ptr("Standard_D1_v2"),
							Capacity: to.Ptr[int64](1),
							Tier:     to.Ptr("Standard"),
						},
					}},
			},
			UniqueID:    to.Ptr("60b6cd59-600b-4e02-b717-521b07aa94bf"),
			UpgradeMode: to.Ptr(armcompute.CloudServiceUpgradeModeAuto),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.CloudService) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.CloudService)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateCloudServiceWithSingleRoleAndCertificate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateCloudServiceWithSingleRoleAndRDP.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create New Cloud Service with Single Role and RDP Extension"},
	})
	client, err = armcompute.NewCloudServicesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginCreateOrUpdate(ctx,
		"ConstosoRG",
		"{cs-name}",
		&armcompute.CloudServicesClientBeginCreateOrUpdateOptions{Parameters: &armcompute.CloudService{
			Location: to.Ptr("westus"),
			Properties: &armcompute.CloudServiceProperties{
				Configuration: to.Ptr("{ServiceConfiguration}"),
				ExtensionProfile: &armcompute.CloudServiceExtensionProfile{
					Extensions: []*armcompute.Extension{
						{
							Name: to.Ptr("RDPExtension"),
							Properties: &armcompute.CloudServiceExtensionProperties{
								Type:                    to.Ptr("RDP"),
								AutoUpgradeMinorVersion: to.Ptr(false),
								ProtectedSettings:       to.Ptr("<PrivateConfig><Password>{password}</Password></PrivateConfig>"),
								Publisher:               to.Ptr("Microsoft.Windows.Azure.Extensions"),
								Settings:                to.Ptr("<PublicConfig><UserName>UserAzure</UserName><Expiration>10/22/2021 15:05:45</Expiration></PublicConfig>"),
								TypeHandlerVersion:      to.Ptr("1.2.1"),
							},
						}},
				},
				NetworkProfile: &armcompute.CloudServiceNetworkProfile{
					LoadBalancerConfigurations: []*armcompute.LoadBalancerConfiguration{
						{
							Name: to.Ptr("contosolb"),
							Properties: &armcompute.LoadBalancerConfigurationProperties{
								FrontendIPConfigurations: []*armcompute.LoadBalancerFrontendIPConfiguration{
									{
										Name: to.Ptr("contosofe"),
										Properties: &armcompute.LoadBalancerFrontendIPConfigurationProperties{
											PublicIPAddress: &armcompute.SubResource{
												ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Network/publicIPAddresses/contosopublicip"),
											},
										},
									}},
							},
						}},
				},
				PackageURL: to.Ptr("{PackageUrl}"),
				RoleProfile: &armcompute.CloudServiceRoleProfile{
					Roles: []*armcompute.CloudServiceRoleProfileProperties{
						{
							Name: to.Ptr("ContosoFrontend"),
							SKU: &armcompute.CloudServiceRoleSKU{
								Name:     to.Ptr("Standard_D1_v2"),
								Capacity: to.Ptr[int64](1),
								Tier:     to.Ptr("Standard"),
							},
						}},
				},
				UpgradeMode: to.Ptr(armcompute.CloudServiceUpgradeModeAuto),
			},
		},
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateCloudServiceWithSingleRoleAndRDP.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateCloudServiceWithSingleRoleAndRDP.json: %v", err)
	}
	// Response check
	exampleRes = armcompute.CloudService{
		Name:     to.Ptr("{cs-name}"),
		Type:     to.Ptr("Microsoft.Compute/cloudServices"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name}"),
		Location: to.Ptr("westus"),
		Properties: &armcompute.CloudServiceProperties{
			Configuration: to.Ptr("{ServiceConfiguration}"),
			ExtensionProfile: &armcompute.CloudServiceExtensionProfile{
				Extensions: []*armcompute.Extension{
					{
						Name: to.Ptr("RDPExtension"),
						Properties: &armcompute.CloudServiceExtensionProperties{
							Type:                    to.Ptr("RDP"),
							AutoUpgradeMinorVersion: to.Ptr(false),
							ProvisioningState:       to.Ptr("Succeeded"),
							Publisher:               to.Ptr("Microsoft.Windows.Azure.Extensions"),
							RolesAppliedTo: []*string{
								to.Ptr("*")},
							Settings:           to.Ptr("<PublicConfig><UserName>UserAzure</UserName><Expiration>10/22/2021 15:05:45</Expiration></PublicConfig>"),
							TypeHandlerVersion: to.Ptr("1.2.1"),
						},
					}},
			},
			NetworkProfile: &armcompute.CloudServiceNetworkProfile{
				LoadBalancerConfigurations: []*armcompute.LoadBalancerConfiguration{
					{
						Name: to.Ptr("contosolb"),
						Properties: &armcompute.LoadBalancerConfigurationProperties{
							FrontendIPConfigurations: []*armcompute.LoadBalancerFrontendIPConfiguration{
								{
									Name: to.Ptr("contosofe"),
									Properties: &armcompute.LoadBalancerFrontendIPConfigurationProperties{
										PublicIPAddress: &armcompute.SubResource{
											ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Network/publicIPAddresses/contosopublicip"),
										},
									},
								}},
						},
					}},
			},
			OSProfile: &armcompute.CloudServiceOsProfile{
				Secrets: []*armcompute.CloudServiceVaultSecretGroup{},
			},
			PackageURL:        to.Ptr("{PackageUrl}"),
			ProvisioningState: to.Ptr("Succeeded"),
			RoleProfile: &armcompute.CloudServiceRoleProfile{
				Roles: []*armcompute.CloudServiceRoleProfileProperties{
					{
						Name: to.Ptr("ContosoFrontend"),
						SKU: &armcompute.CloudServiceRoleSKU{
							Name:     to.Ptr("Standard_D1_v2"),
							Capacity: to.Ptr[int64](1),
							Tier:     to.Ptr("Standard"),
						},
					}},
			},
			UniqueID:    to.Ptr("c948cccb-bbfa-4516-a250-c28abc4d0c15"),
			UpgradeMode: to.Ptr(armcompute.CloudServiceUpgradeModeAuto),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.CloudService) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.CloudService)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/CreateCloudServiceWithSingleRoleAndRDP.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestCloudServices_Update(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/UpdateCloudServiceToIncludeTags.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update existing Cloud Service to add tags"},
	})
	client, err := armcompute.NewCloudServicesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginUpdate(ctx,
		"ConstosoRG",
		"{cs-name}",
		&armcompute.CloudServicesClientBeginUpdateOptions{Parameters: &armcompute.CloudServiceUpdate{
			Tags: map[string]*string{
				"Documentation": to.Ptr("RestAPI"),
			},
		},
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/UpdateCloudServiceToIncludeTags.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/UpdateCloudServiceToIncludeTags.json: %v", err)
	}
	// Response check
	exampleRes := armcompute.CloudService{
		Name:     to.Ptr("{cs-name}"),
		Type:     to.Ptr("Microsoft.Compute/cloudServices"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name}"),
		Location: to.Ptr("eastus2euap"),
		Properties: &armcompute.CloudServiceProperties{
			Configuration: to.Ptr("{ServiceConfiguration}"),
			NetworkProfile: &armcompute.CloudServiceNetworkProfile{
				LoadBalancerConfigurations: []*armcompute.LoadBalancerConfiguration{
					{
						Name: to.Ptr("contosolb"),
						Properties: &armcompute.LoadBalancerConfigurationProperties{
							FrontendIPConfigurations: []*armcompute.LoadBalancerFrontendIPConfiguration{
								{
									Name: to.Ptr("contosofe"),
									Properties: &armcompute.LoadBalancerFrontendIPConfigurationProperties{
										PublicIPAddress: &armcompute.SubResource{
											ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Network/publicIPAddresses/contosopublicip"),
										},
									},
								}},
						},
					}},
			},
			OSProfile: &armcompute.CloudServiceOsProfile{
				Secrets: []*armcompute.CloudServiceVaultSecretGroup{},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			RoleProfile: &armcompute.CloudServiceRoleProfile{
				Roles: []*armcompute.CloudServiceRoleProfileProperties{
					{
						Name: to.Ptr("ContosoFrontend"),
						SKU: &armcompute.CloudServiceRoleSKU{
							Name:     to.Ptr("Standard_D1_v2"),
							Capacity: to.Ptr[int64](2),
							Tier:     to.Ptr("Standard"),
						},
					},
					{
						Name: to.Ptr("ContosoBackend"),
						SKU: &armcompute.CloudServiceRoleSKU{
							Name:     to.Ptr("Standard_D1_v2"),
							Capacity: to.Ptr[int64](2),
							Tier:     to.Ptr("Standard"),
						},
					}},
			},
			UniqueID:    to.Ptr("4ccb4323-4740-4545-bb81-780b27375947"),
			UpgradeMode: to.Ptr(armcompute.CloudServiceUpgradeModeAuto),
		},
		Tags: map[string]*string{
			"Documentation": to.Ptr("RestAPI"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.CloudService) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.CloudService)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/UpdateCloudServiceToIncludeTags.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestCloudServices_Delete(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/DeleteCloudService.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete Cloud Service"},
	})
	client, err := armcompute.NewCloudServicesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginDelete(ctx,
		"ConstosoRG",
		"{cs-name}",
		&armcompute.CloudServicesClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/DeleteCloudService.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/DeleteCloudService.json: %v", err)
	}
}

func TestCloudServices_Get(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetCloudServiceWithMultiRoleAndRDP.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Cloud Service with Multiple Roles and RDP Extension"},
	})
	client, err := armcompute.NewCloudServicesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := client.Get(ctx,
		"ConstosoRG",
		"{cs-name}",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetCloudServiceWithMultiRoleAndRDP.json: %v", err)
	}
	// Response check
	exampleRes := armcompute.CloudService{
		Name:     to.Ptr("{cs-name}"),
		Type:     to.Ptr("Microsoft.Compute/cloudServices"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name}"),
		Location: to.Ptr("eastus2euap"),
		Properties: &armcompute.CloudServiceProperties{
			Configuration: to.Ptr("{ServiceConfiguration}"),
			ExtensionProfile: &armcompute.CloudServiceExtensionProfile{
				Extensions: []*armcompute.Extension{
					{
						Name: to.Ptr("RDPExtension"),
						Properties: &armcompute.CloudServiceExtensionProperties{
							Type:                    to.Ptr("RDP"),
							AutoUpgradeMinorVersion: to.Ptr(false),
							ProvisioningState:       to.Ptr("Succeeded"),
							Publisher:               to.Ptr("Microsoft.Windows.Azure.Extensions"),
							RolesAppliedTo: []*string{
								to.Ptr("*")},
							Settings:           to.Ptr("<PublicConfig><UserName>userazure</UserName><Expiration>01/12/2022 16:29:02</Expiration></PublicConfig>"),
							TypeHandlerVersion: to.Ptr("1.2.1"),
						},
					}},
			},
			NetworkProfile: &armcompute.CloudServiceNetworkProfile{
				LoadBalancerConfigurations: []*armcompute.LoadBalancerConfiguration{
					{
						Name: to.Ptr("contosolb"),
						Properties: &armcompute.LoadBalancerConfigurationProperties{
							FrontendIPConfigurations: []*armcompute.LoadBalancerFrontendIPConfiguration{
								{
									Name: to.Ptr("contosofe"),
									Properties: &armcompute.LoadBalancerFrontendIPConfigurationProperties{
										PublicIPAddress: &armcompute.SubResource{
											ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Network/publicIPAddresses/contosopublicip"),
										},
									},
								}},
						},
					}},
			},
			OSProfile: &armcompute.CloudServiceOsProfile{
				Secrets: []*armcompute.CloudServiceVaultSecretGroup{},
			},
			ProvisioningState: to.Ptr("Succeeded"),
			RoleProfile: &armcompute.CloudServiceRoleProfile{
				Roles: []*armcompute.CloudServiceRoleProfileProperties{
					{
						Name: to.Ptr("ContosoFrontend"),
						SKU: &armcompute.CloudServiceRoleSKU{
							Name:     to.Ptr("Standard_D1_v2"),
							Capacity: to.Ptr[int64](2),
							Tier:     to.Ptr("Standard"),
						},
					},
					{
						Name: to.Ptr("ContosoBackend"),
						SKU: &armcompute.CloudServiceRoleSKU{
							Name:     to.Ptr("Standard_D1_v2"),
							Capacity: to.Ptr[int64](2),
							Tier:     to.Ptr("Standard"),
						},
					}},
			},
			UniqueID:    to.Ptr("4ccb4323-4740-4545-bb81-780b27375947"),
			UpgradeMode: to.Ptr(armcompute.CloudServiceUpgradeModeAuto),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.CloudService) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.CloudService)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetCloudServiceWithMultiRoleAndRDP.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestCloudServices_GetInstanceView(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetCloudServiceInstanceViewWithMultiRole.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Cloud Service Instance View with Multiple Roles"},
	})
	client, err := armcompute.NewCloudServicesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := client.GetInstanceView(ctx,
		"ConstosoRG",
		"{cs-name}",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetCloudServiceInstanceViewWithMultiRole.json: %v", err)
	}
	// Response check
	exampleRes := armcompute.CloudServiceInstanceView{
		PrivateIDs: []*string{
			to.Ptr("3491bc0c-1f6c-444f-b1d0-ec0751a74e3e")},
		RoleInstance: &armcompute.InstanceViewStatusesSummary{
			StatusesSummary: []*armcompute.StatusCodeCount{
				{
					Code:  to.Ptr("ProvisioningState/succeeded"),
					Count: to.Ptr[int32](4),
				},
				{
					Code:  to.Ptr("PowerState/started"),
					Count: to.Ptr[int32](4),
				},
				{
					Code:  to.Ptr("RoleState/RoleStateStarted"),
					Count: to.Ptr[int32](4),
				}},
		},
		SdkVersion: to.Ptr("2.9.6496.3"),
		Statuses: []*armcompute.ResourceInstanceViewStatus{
			{
				Code:          to.Ptr("ProvisioningState/succeeded"),
				DisplayStatus: to.Ptr("Provisioning succeeded"),
				Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
				Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-01-12T16:50:07.0953535+05:30"); return t }()),
			},
			{
				Code:          to.Ptr("PowerState/started"),
				DisplayStatus: to.Ptr("Started"),
				Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
				Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-01-12T16:50:07.0953535+05:30"); return t }()),
			},
			{
				Code:          to.Ptr("CurrentUpgradeDomain/-1"),
				DisplayStatus: to.Ptr("Current Upgrade Domain of cloud service is -1."),
				Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
			},
			{
				Code:          to.Ptr("MaxUpgradeDomain/1"),
				DisplayStatus: to.Ptr("Max Upgrade Domain of cloud service is 1."),
				Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
			}},
	}
	if !reflect.DeepEqual(exampleRes, res.CloudServiceInstanceView) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.CloudServiceInstanceView)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetCloudServiceInstanceViewWithMultiRole.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestCloudServices_ListAll(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListCloudServicesInSubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Cloud Services in a Subscription"},
	})
	client, err := armcompute.NewCloudServicesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := client.NewListAllPager(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListCloudServicesInSubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcompute.CloudServiceListResult{
			Value: []*armcompute.CloudService{
				{
					Name:     to.Ptr("{cs-name}"),
					Type:     to.Ptr("Microsoft.Compute/cloudServices"),
					ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name}"),
					Location: to.Ptr("eastus2euap"),
					Properties: &armcompute.CloudServiceProperties{
						Configuration: to.Ptr("{ServiceConfiguration}"),
						ExtensionProfile: &armcompute.CloudServiceExtensionProfile{
							Extensions: []*armcompute.Extension{
								{
									Name: to.Ptr("RDPExtension"),
									Properties: &armcompute.CloudServiceExtensionProperties{
										Type:                    to.Ptr("RDP"),
										AutoUpgradeMinorVersion: to.Ptr(false),
										ProvisioningState:       to.Ptr("Succeeded"),
										Publisher:               to.Ptr("Microsoft.Windows.Azure.Extensions"),
										RolesAppliedTo: []*string{
											to.Ptr("*")},
										Settings:           to.Ptr("<PublicConfig><UserName>userazure</UserName><Expiration>01/12/2022 16:29:02</Expiration></PublicConfig>"),
										TypeHandlerVersion: to.Ptr("1.2.1"),
									},
								}},
						},
						NetworkProfile: &armcompute.CloudServiceNetworkProfile{
							LoadBalancerConfigurations: []*armcompute.LoadBalancerConfiguration{
								{
									Name: to.Ptr("contosolb"),
									Properties: &armcompute.LoadBalancerConfigurationProperties{
										FrontendIPConfigurations: []*armcompute.LoadBalancerFrontendIPConfiguration{
											{
												Name: to.Ptr("contosofe"),
												Properties: &armcompute.LoadBalancerFrontendIPConfigurationProperties{
													PublicIPAddress: &armcompute.SubResource{
														ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Network/publicIPAddresses/contosopublicip"),
													},
												},
											}},
									},
								}},
						},
						OSProfile: &armcompute.CloudServiceOsProfile{
							Secrets: []*armcompute.CloudServiceVaultSecretGroup{},
						},
						ProvisioningState: to.Ptr("Succeeded"),
						RoleProfile: &armcompute.CloudServiceRoleProfile{
							Roles: []*armcompute.CloudServiceRoleProfileProperties{
								{
									Name: to.Ptr("ContosoFrontend"),
									SKU: &armcompute.CloudServiceRoleSKU{
										Name:     to.Ptr("Standard_D1_v2"),
										Capacity: to.Ptr[int64](2),
										Tier:     to.Ptr("Standard"),
									},
								},
								{
									Name: to.Ptr("ContosoBackend"),
									SKU: &armcompute.CloudServiceRoleSKU{
										Name:     to.Ptr("Standard_D1_v2"),
										Capacity: to.Ptr[int64](2),
										Tier:     to.Ptr("Standard"),
									},
								}},
						},
						UniqueID:    to.Ptr("4ccb4323-4740-4545-bb81-780b27375947"),
						UpgradeMode: to.Ptr(armcompute.CloudServiceUpgradeModeAuto),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.CloudServiceListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.CloudServiceListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListCloudServicesInSubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCloudServices_List(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListCloudServicesInResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Cloud Services in a Resource Group"},
	})
	client, err := armcompute.NewCloudServicesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := client.NewListPager("ConstosoRG",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListCloudServicesInResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcompute.CloudServiceListResult{
			Value: []*armcompute.CloudService{
				{
					Name:     to.Ptr("{cs-name}"),
					Type:     to.Ptr("Microsoft.Compute/cloudServices"),
					ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name}"),
					Location: to.Ptr("eastus2euap"),
					Properties: &armcompute.CloudServiceProperties{
						Configuration: to.Ptr("{ServiceConfiguration}"),
						ExtensionProfile: &armcompute.CloudServiceExtensionProfile{
							Extensions: []*armcompute.Extension{
								{
									Name: to.Ptr("RDPExtension"),
									Properties: &armcompute.CloudServiceExtensionProperties{
										Type:                    to.Ptr("RDP"),
										AutoUpgradeMinorVersion: to.Ptr(false),
										ProvisioningState:       to.Ptr("Succeeded"),
										Publisher:               to.Ptr("Microsoft.Windows.Azure.Extensions"),
										RolesAppliedTo: []*string{
											to.Ptr("*")},
										Settings:           to.Ptr("<PublicConfig><UserName>userazure</UserName><Expiration>01/12/2022 16:29:02</Expiration></PublicConfig>"),
										TypeHandlerVersion: to.Ptr("1.2.1"),
									},
								}},
						},
						NetworkProfile: &armcompute.CloudServiceNetworkProfile{
							LoadBalancerConfigurations: []*armcompute.LoadBalancerConfiguration{
								{
									Name: to.Ptr("contosolb"),
									Properties: &armcompute.LoadBalancerConfigurationProperties{
										FrontendIPConfigurations: []*armcompute.LoadBalancerFrontendIPConfiguration{
											{
												Name: to.Ptr("contosofe"),
												Properties: &armcompute.LoadBalancerFrontendIPConfigurationProperties{
													PublicIPAddress: &armcompute.SubResource{
														ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Network/publicIPAddresses/contosopublicip"),
													},
												},
											}},
									},
								}},
						},
						OSProfile: &armcompute.CloudServiceOsProfile{
							Secrets: []*armcompute.CloudServiceVaultSecretGroup{},
						},
						ProvisioningState: to.Ptr("Succeeded"),
						RoleProfile: &armcompute.CloudServiceRoleProfile{
							Roles: []*armcompute.CloudServiceRoleProfileProperties{
								{
									Name: to.Ptr("ContosoFrontend"),
									SKU: &armcompute.CloudServiceRoleSKU{
										Name:     to.Ptr("Standard_D1_v2"),
										Capacity: to.Ptr[int64](2),
										Tier:     to.Ptr("Standard"),
									},
								},
								{
									Name: to.Ptr("ContosoBackend"),
									SKU: &armcompute.CloudServiceRoleSKU{
										Name:     to.Ptr("Standard_D1_v2"),
										Capacity: to.Ptr[int64](2),
										Tier:     to.Ptr("Standard"),
									},
								}},
						},
						UniqueID:    to.Ptr("4ccb4323-4740-4545-bb81-780b27375947"),
						UpgradeMode: to.Ptr(armcompute.CloudServiceUpgradeModeAuto),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.CloudServiceListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.CloudServiceListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListCloudServicesInResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCloudServices_Start(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/StartCloudService.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Start Cloud Service"},
	})
	client, err := armcompute.NewCloudServicesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginStart(ctx,
		"ConstosoRG",
		"{cs-name}",
		&armcompute.CloudServicesClientBeginStartOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/StartCloudService.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/StartCloudService.json: %v", err)
	}
}

func TestCloudServices_PowerOff(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/PowerOffCloudService.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Stop or PowerOff Cloud Service"},
	})
	client, err := armcompute.NewCloudServicesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginPowerOff(ctx,
		"ConstosoRG",
		"{cs-name}",
		&armcompute.CloudServicesClientBeginPowerOffOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/PowerOffCloudService.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/PowerOffCloudService.json: %v", err)
	}
}

func TestCloudServices_Restart(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/RestartCloudServiceRoleInstances.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Restart Cloud Service Role Instances"},
	})
	client, err := armcompute.NewCloudServicesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginRestart(ctx,
		"ConstosoRG",
		"{cs-name}",
		&armcompute.CloudServicesClientBeginRestartOptions{Parameters: &armcompute.RoleInstances{
			RoleInstances: []*string{
				to.Ptr("ContosoFrontend_IN_0"),
				to.Ptr("ContosoBackend_IN_1")},
		},
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/RestartCloudServiceRoleInstances.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/RestartCloudServiceRoleInstances.json: %v", err)
	}
}

func TestCloudServices_Reimage(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ReimageCloudServiceRoleInstances.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Reimage Cloud Service Role Instances"},
	})
	client, err := armcompute.NewCloudServicesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginReimage(ctx,
		"ConstosoRG",
		"{cs-name}",
		&armcompute.CloudServicesClientBeginReimageOptions{Parameters: &armcompute.RoleInstances{
			RoleInstances: []*string{
				to.Ptr("ContosoFrontend_IN_0"),
				to.Ptr("ContosoBackend_IN_1")},
		},
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ReimageCloudServiceRoleInstances.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ReimageCloudServiceRoleInstances.json: %v", err)
	}
}

func TestCloudServices_Rebuild(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/RebuildCloudServiceRoleInstances.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Rebuild Cloud Service Role Instances"},
	})
	client, err := armcompute.NewCloudServicesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginRebuild(ctx,
		"ConstosoRG",
		"{cs-name}",
		&armcompute.CloudServicesClientBeginRebuildOptions{Parameters: &armcompute.RoleInstances{
			RoleInstances: []*string{
				to.Ptr("ContosoFrontend_IN_0"),
				to.Ptr("ContosoBackend_IN_1")},
		},
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/RebuildCloudServiceRoleInstances.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/RebuildCloudServiceRoleInstances.json: %v", err)
	}
}

func TestCloudServices_DeleteInstances(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/DeleteCloudServiceRoleInstances.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete Cloud Service Role Instances"},
	})
	client, err := armcompute.NewCloudServicesClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginDeleteInstances(ctx,
		"ConstosoRG",
		"{cs-name}",
		&armcompute.CloudServicesClientBeginDeleteInstancesOptions{Parameters: &armcompute.RoleInstances{
			RoleInstances: []*string{
				to.Ptr("ContosoFrontend_IN_0"),
				to.Ptr("ContosoBackend_IN_1")},
		},
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/DeleteCloudServiceRoleInstances.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/DeleteCloudServiceRoleInstances.json: %v", err)
	}
}

func TestCloudServicesUpdateDomain_WalkUpdateDomain(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/UpdateCloudServiceUpdateDomain.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update Cloud Service to specified Domain"},
	})
	client, err := armcompute.NewCloudServicesUpdateDomainClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginWalkUpdateDomain(ctx,
		"ConstosoRG",
		"{cs-name}",
		1,
		&armcompute.CloudServicesUpdateDomainClientBeginWalkUpdateDomainOptions{Parameters: nil,
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/UpdateCloudServiceUpdateDomain.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/UpdateCloudServiceUpdateDomain.json: %v", err)
	}
}

func TestCloudServicesUpdateDomain_GetUpdateDomain(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetCloudServiceUpdateDomain.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Cloud Service Update Domain"},
	})
	client, err := armcompute.NewCloudServicesUpdateDomainClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := client.GetUpdateDomain(ctx,
		"ConstosoRG",
		"{cs-name}",
		1,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetCloudServiceUpdateDomain.json: %v", err)
	}
	// Response check
	exampleRes := armcompute.UpdateDomain{
		Name: to.Ptr("1"),
		ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name}/updateDomains/1"),
	}
	if !reflect.DeepEqual(exampleRes, res.UpdateDomain) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.UpdateDomain)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetCloudServiceUpdateDomain.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestCloudServicesUpdateDomain_ListUpdateDomains(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListCloudServiceUpdateDomains.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Update Domains in Cloud Service"},
	})
	client, err := armcompute.NewCloudServicesUpdateDomainClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := client.NewListUpdateDomainsPager("ConstosoRG",
		"{cs-name}",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListCloudServiceUpdateDomains.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcompute.UpdateDomainListResult{
			Value: []*armcompute.UpdateDomain{
				{
					Name: to.Ptr("0"),
					ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name}/updateDomains/0"),
				},
				{
					Name: to.Ptr("1"),
					ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/ConstosoRG/providers/Microsoft.Compute/cloudServices/{cs-name}/updateDomains/1"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.UpdateDomainListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.UpdateDomainListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListCloudServiceUpdateDomains.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCloudServiceOperatingSystems_GetOSVersion(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetCloudServiceOSVersion.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Cloud Service OS Version"},
	})
	client, err := armcompute.NewCloudServiceOperatingSystemsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := client.GetOSVersion(ctx,
		"westus2",
		"WA-GUEST-OS-3.90_202010-02",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetCloudServiceOSVersion.json: %v", err)
	}
	// Response check
	exampleRes := armcompute.OSVersion{
		Name:     to.Ptr("WA-GUEST-OS-3.90_202010-02"),
		Type:     to.Ptr("Microsoft.Compute/locations/cloudServiceOsVersions"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/providers/Microsoft.Compute/locations/westus2/cloudServiceOSVersions/WA-GUEST-OS-3.90_202010-02"),
		Location: to.Ptr("westus2"),
		Properties: &armcompute.OSVersionProperties{
			Family:      to.Ptr("3"),
			FamilyLabel: to.Ptr("Windows Server 2012"),
			IsActive:    to.Ptr(true),
			IsDefault:   to.Ptr(true),
			Label:       to.Ptr("Windows Azure Guest OS 3.90 (Release 202010-02)"),
			Version:     to.Ptr("WA-GUEST-OS-3.90_202010-02"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.OSVersion) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.OSVersion)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetCloudServiceOSVersion.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestCloudServiceOperatingSystems_ListOSVersions(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListCloudServiceOSVersions.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Cloud Service OS Versions in a subscription"},
	})
	client, err := armcompute.NewCloudServiceOperatingSystemsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := client.NewListOSVersionsPager("westus2",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListCloudServiceOSVersions.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcompute.OSVersionListResult{
			Value: []*armcompute.OSVersion{
				{
					Name:     to.Ptr("WA-GUEST-OS-3.90_202010-02"),
					Type:     to.Ptr("Microsoft.Compute/locations/cloudServiceOsVersions"),
					ID:       to.Ptr("/subscriptions/{subscription-id}/providers/Microsoft.Compute/locations/westus2/cloudServiceOSVersions/WA-GUEST-OS-3.90_202010-02"),
					Location: to.Ptr("westus2"),
					Properties: &armcompute.OSVersionProperties{
						Family:      to.Ptr("3"),
						FamilyLabel: to.Ptr("Windows Server 2012"),
						IsActive:    to.Ptr(true),
						IsDefault:   to.Ptr(true),
						Label:       to.Ptr("Windows Azure Guest OS 3.90 (Release 202010-02)"),
						Version:     to.Ptr("WA-GUEST-OS-3.90_202010-02"),
					},
				},
				{
					Name:     to.Ptr("WA-GUEST-OS-4.83_202010-02"),
					Type:     to.Ptr("Microsoft.Compute/locations/cloudServiceOsVersions"),
					ID:       to.Ptr("/subscriptions/{subscription-id}/providers/Microsoft.Compute/locations/westus2/cloudServiceOSVersions/WA-GUEST-OS-4.83_202010-02"),
					Location: to.Ptr("westus2"),
					Properties: &armcompute.OSVersionProperties{
						Family:      to.Ptr("4"),
						FamilyLabel: to.Ptr("Windows Server 2012 R2"),
						IsActive:    to.Ptr(true),
						IsDefault:   to.Ptr(true),
						Label:       to.Ptr("Windows Azure Guest OS 4.83 (Release 202010-02)"),
						Version:     to.Ptr("WA-GUEST-OS-4.83_202010-02"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OSVersionListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OSVersionListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListCloudServiceOSVersions.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCloudServiceOperatingSystems_GetOSFamily(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetCloudServiceOSFamily.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Cloud Service OS Family"},
	})
	client, err := armcompute.NewCloudServiceOperatingSystemsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := client.GetOSFamily(ctx,
		"westus2",
		"3",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetCloudServiceOSFamily.json: %v", err)
	}
	// Response check
	exampleRes := armcompute.OSFamily{
		Name:     to.Ptr("3"),
		Type:     to.Ptr("Microsoft.Compute/locations/cloudServiceOsFamilies"),
		ID:       to.Ptr("/subscriptions/{subscription-id}/providers/Microsoft.Compute/locations/westus2/cloudServiceOSFamilies/3"),
		Location: to.Ptr("westus2"),
		Properties: &armcompute.OSFamilyProperties{
			Name:  to.Ptr("3"),
			Label: to.Ptr("Windows Server 2012"),
			Versions: []*armcompute.OSVersionPropertiesBase{
				{
					IsActive:  to.Ptr(true),
					IsDefault: to.Ptr(true),
					Label:     to.Ptr("Windows Azure Guest OS 3.90 (Release 202010-02)"),
					Version:   to.Ptr("WA-GUEST-OS-3.90_202010-02"),
				}},
		},
	}
	if !reflect.DeepEqual(exampleRes, res.OSFamily) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.OSFamily)
		t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/GetCloudServiceOSFamily.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestCloudServiceOperatingSystems_ListOSFamilies(t *testing.T) {
	// From example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListCloudServiceOSFamilies.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Cloud Service OS Families in a subscription"},
	})
	client, err := armcompute.NewCloudServiceOperatingSystemsClient("{subscription-id}", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := client.NewListOSFamiliesPager("westus2",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListCloudServiceOSFamilies.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcompute.OSFamilyListResult{
			Value: []*armcompute.OSFamily{
				{
					Name:     to.Ptr("3"),
					Type:     to.Ptr("Microsoft.Compute/locations/cloudServiceOsFamilies"),
					ID:       to.Ptr("/subscriptions/{subscription-id}/providers/Microsoft.Compute/locations/westus2/cloudServiceOSFamilies/3"),
					Location: to.Ptr("westus2"),
					Properties: &armcompute.OSFamilyProperties{
						Name:  to.Ptr("3"),
						Label: to.Ptr("Windows Server 2012"),
						Versions: []*armcompute.OSVersionPropertiesBase{
							{
								IsActive:  to.Ptr(true),
								IsDefault: to.Ptr(true),
								Label:     to.Ptr("Windows Azure Guest OS 3.90 (Release 202010-02)"),
								Version:   to.Ptr("WA-GUEST-OS-3.90_202010-02"),
							}},
					},
				},
				{
					Name:     to.Ptr("4"),
					Type:     to.Ptr("Microsoft.Compute/locations/cloudServiceOsFamilies"),
					ID:       to.Ptr("/subscriptions/{subscription-id}/providers/Microsoft.Compute/locations/westus2/cloudServiceOSFamilies/4"),
					Location: to.Ptr("westus2"),
					Properties: &armcompute.OSFamilyProperties{
						Name:  to.Ptr("4"),
						Label: to.Ptr("Windows Server 2012 R2"),
						Versions: []*armcompute.OSVersionPropertiesBase{
							{
								IsActive:  to.Ptr(true),
								IsDefault: to.Ptr(true),
								Label:     to.Ptr("Windows Azure Guest OS 4.83 (Release 202010-02)"),
								Version:   to.Ptr("WA-GUEST-OS-4.83_202010-02"),
							}},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OSFamilyListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OSFamilyListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/compute/resource-manager/Microsoft.Compute/stable/2021-03-01/examples/ListCloudServiceOSFamilies.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
			Cloud: cloud.Configuration{
				Services: map[cloud.ServiceName]cloud.ServiceConfiguration{
					cloud.ResourceManager: {
						Audience: mockHost,
						Endpoint: mockHost,
					},
				},
			},
		},
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
