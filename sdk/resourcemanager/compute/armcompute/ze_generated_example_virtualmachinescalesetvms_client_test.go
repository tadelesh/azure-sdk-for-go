//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armcompute_test

import (
	"context"
	"log"

	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/compute/armcompute"
)

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetVMs_Reimage_MaximumSet_Gen.json
func ExampleVirtualMachineScaleSetVMsClient_BeginReimage() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	virtualMachineScaleSetVMsClient, err := armcompute.NewVirtualMachineScaleSetVMsClient("<subscription-id>", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	virtualMachineScaleSetVMsClientReimageResponsePoller, err := virtualMachineScaleSetVMsClient.BeginReimage(ctx,
		"<resource-group-name>",
		"<vm-scale-set-name>",
		"<instance-id>",
		&armcompute.VirtualMachineScaleSetVMsClientBeginReimageOptions{VMScaleSetVMReimageInput: &armcompute.VirtualMachineScaleSetVMReimageParameters{
			TempDisk: to.Ptr(true),
		},
			ResumeToken: "",
		})
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	_, err = virtualMachineScaleSetVMsClientReimageResponsePoller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetVMs_ReimageAll_MaximumSet_Gen.json
func ExampleVirtualMachineScaleSetVMsClient_BeginReimageAll() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	virtualMachineScaleSetVMsClient, err := armcompute.NewVirtualMachineScaleSetVMsClient("<subscription-id>", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	virtualMachineScaleSetVMsClientReimageAllResponsePoller, err := virtualMachineScaleSetVMsClient.BeginReimageAll(ctx,
		"<resource-group-name>",
		"<vm-scale-set-name>",
		"<instance-id>",
		&armcompute.VirtualMachineScaleSetVMsClientBeginReimageAllOptions{ResumeToken: ""})
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	_, err = virtualMachineScaleSetVMsClientReimageAllResponsePoller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetVMs_Deallocate_MaximumSet_Gen.json
func ExampleVirtualMachineScaleSetVMsClient_BeginDeallocate() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	virtualMachineScaleSetVMsClient, err := armcompute.NewVirtualMachineScaleSetVMsClient("<subscription-id>", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	virtualMachineScaleSetVMsClientDeallocateResponsePoller, err := virtualMachineScaleSetVMsClient.BeginDeallocate(ctx,
		"<resource-group-name>",
		"<vm-scale-set-name>",
		"<instance-id>",
		&armcompute.VirtualMachineScaleSetVMsClientBeginDeallocateOptions{ResumeToken: ""})
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	_, err = virtualMachineScaleSetVMsClientDeallocateResponsePoller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetVMs_Update_MaximumSet_Gen.json
func ExampleVirtualMachineScaleSetVMsClient_BeginUpdate() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	virtualMachineScaleSetVMsClient, err := armcompute.NewVirtualMachineScaleSetVMsClient("<subscription-id>", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	virtualMachineScaleSetVMsClientUpdateResponsePoller, err := virtualMachineScaleSetVMsClient.BeginUpdate(ctx,
		"<resource-group-name>",
		"<vm-scale-set-name>",
		"<instance-id>",
		armcompute.VirtualMachineScaleSetVM{
			Location: to.Ptr("<resource-location>"),
			Tags:     map[string]*string{},
			Plan: &armcompute.Plan{
				Name:          to.Ptr("<the-plan-id.>"),
				Product:       to.Ptr("<specifies-the-product-of-the-image-from-the-marketplace.-this-is-the-same-value-as-offer-under-the-image-reference-element.>"),
				PromotionCode: to.Ptr("<the-promotion-code.>"),
				Publisher:     to.Ptr("<the-publisher-id.>"),
			},
			Properties: &armcompute.VirtualMachineScaleSetVMProperties{
				AdditionalCapabilities: &armcompute.AdditionalCapabilities{
					HibernationEnabled: to.Ptr(true),
					UltraSSDEnabled:    to.Ptr(true),
				},
				AvailabilitySet: &armcompute.SubResource{
					ID: to.Ptr("<resource-id>"),
				},
				DiagnosticsProfile: &armcompute.DiagnosticsProfile{
					BootDiagnostics: &armcompute.BootDiagnostics{
						Enabled:    to.Ptr(true),
						StorageURI: to.Ptr("<uri-of-the-storage-account-to-use-for-placing-the-console-output-and-screenshot.-<br><br>if-storage-uri-is-not-specified-while-enabling-boot-diagnostics,-managed-storage-will-be-used.>"),
					},
				},
				HardwareProfile: &armcompute.HardwareProfile{
					VMSize: to.Ptr(armcompute.VirtualMachineSizeTypesBasicA0),
					VMSizeProperties: &armcompute.VMSizeProperties{
						VCPUsAvailable: to.Ptr[int32](9),
						VCPUsPerCore:   to.Ptr[int32](12),
					},
				},
				InstanceView: &armcompute.VirtualMachineScaleSetVMInstanceView{
					BootDiagnostics: &armcompute.BootDiagnosticsInstanceView{
						Status: &armcompute.InstanceViewStatus{
							Code:          to.Ptr("<the-status-code.>"),
							DisplayStatus: to.Ptr("<the-short-localizable-label-for-the-status.>"),
							Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
							Message:       to.Ptr("<the-detailed-status-message,-including-for-alerts-and-error-messages.>"),
							Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.522Z"); return t }()),
						},
					},
					Disks: []*armcompute.DiskInstanceView{
						{
							Name: to.Ptr("<the-disk-name.>"),
							EncryptionSettings: []*armcompute.DiskEncryptionSettings{
								{
									DiskEncryptionKey: &armcompute.KeyVaultSecretReference{
										SecretURL: to.Ptr("<the-url-referencing-a-secret-in-a-key-vault.>"),
										SourceVault: &armcompute.SubResource{
											ID: to.Ptr("<resource-id>"),
										},
									},
									Enabled: to.Ptr(true),
									KeyEncryptionKey: &armcompute.KeyVaultKeyReference{
										KeyURL: to.Ptr("<the-url-referencing-a-key-encryption-key-in-key-vault.>"),
										SourceVault: &armcompute.SubResource{
											ID: to.Ptr("<resource-id>"),
										},
									},
								}},
							Statuses: []*armcompute.InstanceViewStatus{
								{
									Code:          to.Ptr("<the-status-code.>"),
									DisplayStatus: to.Ptr("<the-short-localizable-label-for-the-status.>"),
									Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
									Message:       to.Ptr("<the-detailed-status-message,-including-for-alerts-and-error-messages.>"),
									Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.522Z"); return t }()),
								}},
						}},
					MaintenanceRedeployStatus: &armcompute.MaintenanceRedeployStatus{
						IsCustomerInitiatedMaintenanceAllowed: to.Ptr(true),
						LastOperationMessage:                  to.Ptr("<message-returned-for-the-last-maintenance-operation.>"),
						LastOperationResultCode:               to.Ptr(armcompute.MaintenanceOperationResultCodeTypesNone),
						MaintenanceWindowEndTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.531Z"); return t }()),
						MaintenanceWindowStartTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.531Z"); return t }()),
						PreMaintenanceWindowEndTime:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.531Z"); return t }()),
						PreMaintenanceWindowStartTime:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.531Z"); return t }()),
					},
					PlacementGroupID:     to.Ptr("<the-placement-group-in-which-the-vm-is-running.-if-the-vm-is-deallocated-it-will-not-have-a-placement-group-id.>"),
					PlatformFaultDomain:  to.Ptr[int32](14),
					PlatformUpdateDomain: to.Ptr[int32](23),
					RdpThumbPrint:        to.Ptr("<the-remote-desktop-certificate-thumbprint.>"),
					Statuses: []*armcompute.InstanceViewStatus{
						{
							Code:          to.Ptr("<the-status-code.>"),
							DisplayStatus: to.Ptr("<the-short-localizable-label-for-the-status.>"),
							Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
							Message:       to.Ptr("<the-detailed-status-message,-including-for-alerts-and-error-messages.>"),
							Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.522Z"); return t }()),
						}},
					VMAgent: &armcompute.VirtualMachineAgentInstanceView{
						ExtensionHandlers: []*armcompute.VirtualMachineExtensionHandlerInstanceView{
							{
								Type: to.Ptr("<specifies-the-type-of-the-extension;-an-example-is-\"custom-script-extension\".>"),
								Status: &armcompute.InstanceViewStatus{
									Code:          to.Ptr("<the-status-code.>"),
									DisplayStatus: to.Ptr("<the-short-localizable-label-for-the-status.>"),
									Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
									Message:       to.Ptr("<the-detailed-status-message,-including-for-alerts-and-error-messages.>"),
									Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.522Z"); return t }()),
								},
								TypeHandlerVersion: to.Ptr("<specifies-the-version-of-the-script-handler.>"),
							}},
						Statuses: []*armcompute.InstanceViewStatus{
							{
								Code:          to.Ptr("<the-status-code.>"),
								DisplayStatus: to.Ptr("<the-short-localizable-label-for-the-status.>"),
								Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
								Message:       to.Ptr("<the-detailed-status-message,-including-for-alerts-and-error-messages.>"),
								Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.522Z"); return t }()),
							}},
						VMAgentVersion: to.Ptr("<the-vm-agent-full-version.>"),
					},
					VMHealth: &armcompute.VirtualMachineHealthStatus{
						Status: &armcompute.InstanceViewStatus{
							Code:          to.Ptr("<the-status-code.>"),
							DisplayStatus: to.Ptr("<the-short-localizable-label-for-the-status.>"),
							Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
							Message:       to.Ptr("<the-detailed-status-message,-including-for-alerts-and-error-messages.>"),
							Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.522Z"); return t }()),
						},
					},
					Extensions: []*armcompute.VirtualMachineExtensionInstanceView{
						{
							Name: to.Ptr("<the-virtual-machine-extension-name.>"),
							Type: to.Ptr("<specifies-the-type-of-the-extension;-an-example-is-\"custom-script-extension\".>"),
							Statuses: []*armcompute.InstanceViewStatus{
								{
									Code:          to.Ptr("<the-status-code.>"),
									DisplayStatus: to.Ptr("<the-short-localizable-label-for-the-status.>"),
									Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
									Message:       to.Ptr("<the-detailed-status-message,-including-for-alerts-and-error-messages.>"),
									Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.522Z"); return t }()),
								}},
							Substatuses: []*armcompute.InstanceViewStatus{
								{
									Code:          to.Ptr("<the-status-code.>"),
									DisplayStatus: to.Ptr("<the-short-localizable-label-for-the-status.>"),
									Level:         to.Ptr(armcompute.StatusLevelTypesInfo),
									Message:       to.Ptr("<the-detailed-status-message,-including-for-alerts-and-error-messages.>"),
									Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-11-30T12:58:26.522Z"); return t }()),
								}},
							TypeHandlerVersion: to.Ptr("<specifies-the-version-of-the-script-handler.>"),
						}},
				},
				LicenseType: to.Ptr("<specifies-that-the-image-or-disk-that-is-being-used-was-licensed-on-premises.-<br><br>-possible-values-for-windows-server-operating-system-are:-<br><br>-windows_client-<br><br>-windows_server-<br><br>-possible-values-for-linux-server-operating-system-are:-<br><br>-rhel_byos-(for-rhel)-<br><br>-sles_byos-(for-suse)-<br><br>-for-more-information,-see-[azure-hybrid-use-benefit-for-windows-server](https://docs.microsoft.com/azure/virtual-machines/windows/hybrid-use-benefit-licensing)-<br><br>-[azure-hybrid-use-benefit-for-linux-server](https://docs.microsoft.com/azure/virtual-machines/linux/azure-hybrid-benefit-linux)-<br><br>-minimum-api-version:-2015-06-15>"),
				NetworkProfile: &armcompute.NetworkProfile{
					NetworkAPIVersion: to.Ptr(armcompute.NetworkAPIVersionTwoThousandTwenty1101),
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineNetworkInterfaceConfiguration{
						{
							Name: to.Ptr("<the-network-interface-configuration-name.>"),
							Properties: &armcompute.VirtualMachineNetworkInterfaceConfigurationProperties{
								DeleteOption: to.Ptr(armcompute.DeleteOptionsDelete),
								DNSSettings: &armcompute.VirtualMachineNetworkInterfaceDNSSettingsConfiguration{
									DNSServers: []*string{
										to.Ptr("aaaaaa")},
								},
								DscpConfiguration: &armcompute.SubResource{
									ID: to.Ptr("<resource-id>"),
								},
								EnableAcceleratedNetworking: to.Ptr(true),
								EnableFpga:                  to.Ptr(true),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineNetworkInterfaceIPConfiguration{
									{
										Name: to.Ptr("<the-ip-configuration-name.>"),
										Properties: &armcompute.VirtualMachineNetworkInterfaceIPConfigurationProperties{
											ApplicationGatewayBackendAddressPools: []*armcompute.SubResource{
												{
													ID: to.Ptr("<resource-id>"),
												}},
											ApplicationSecurityGroups: []*armcompute.SubResource{
												{
													ID: to.Ptr("<resource-id>"),
												}},
											LoadBalancerBackendAddressPools: []*armcompute.SubResource{
												{
													ID: to.Ptr("<resource-id>"),
												}},
											Primary:                 to.Ptr(true),
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionsIPv4),
											PublicIPAddressConfiguration: &armcompute.VirtualMachinePublicIPAddressConfiguration{
												Name: to.Ptr("<the-public-ip-address-configuration-name.>"),
												Properties: &armcompute.VirtualMachinePublicIPAddressConfigurationProperties{
													DeleteOption: to.Ptr(armcompute.DeleteOptionsDelete),
													DNSSettings: &armcompute.VirtualMachinePublicIPAddressDNSSettingsConfiguration{
														DomainNameLabel: to.Ptr("<the-domain-name-label-prefix-of-the-public-ipaddress-resources-that-will-be-created.-the-generated-name-label-is-the-concatenation-of-the-domain-name-label-and-vm-network-profile-unique-id.>"),
													},
													IdleTimeoutInMinutes: to.Ptr[int32](2),
													IPTags: []*armcompute.VirtualMachineIPTag{
														{
															IPTagType: to.Ptr("<ip-tag-type.-example:-first-party-usage.>"),
															Tag:       to.Ptr("<ip-tag-associated-with-the-public-ip.-example:-sql,-storage-etc.>"),
														}},
													PublicIPAddressVersion:   to.Ptr(armcompute.IPVersionsIPv4),
													PublicIPAllocationMethod: to.Ptr(armcompute.PublicIPAllocationMethodDynamic),
													PublicIPPrefix: &armcompute.SubResource{
														ID: to.Ptr("<resource-id>"),
													},
												},
												SKU: &armcompute.PublicIPAddressSKU{
													Name: to.Ptr(armcompute.PublicIPAddressSKUNameBasic),
													Tier: to.Ptr(armcompute.PublicIPAddressSKUTierRegional),
												},
											},
											Subnet: &armcompute.SubResource{
												ID: to.Ptr("<resource-id>"),
											},
										},
									}},
								NetworkSecurityGroup: &armcompute.SubResource{
									ID: to.Ptr("<resource-id>"),
								},
								Primary: to.Ptr(true),
							},
						}},
					NetworkInterfaces: []*armcompute.NetworkInterfaceReference{
						{
							ID: to.Ptr("<resource-id>"),
							Properties: &armcompute.NetworkInterfaceReferenceProperties{
								DeleteOption: to.Ptr(armcompute.DeleteOptionsDelete),
								Primary:      to.Ptr(true),
							},
						}},
				},
				NetworkProfileConfiguration: &armcompute.VirtualMachineScaleSetVMNetworkProfileConfiguration{
					NetworkInterfaceConfigurations: []*armcompute.VirtualMachineScaleSetNetworkConfiguration{
						{
							ID:   to.Ptr("<resource-id>"),
							Name: to.Ptr("<the-network-configuration-name.>"),
							Properties: &armcompute.VirtualMachineScaleSetNetworkConfigurationProperties{
								DeleteOption: to.Ptr(armcompute.DeleteOptionsDelete),
								DNSSettings: &armcompute.VirtualMachineScaleSetNetworkConfigurationDNSSettings{
									DNSServers: []*string{},
								},
								EnableAcceleratedNetworking: to.Ptr(true),
								EnableFpga:                  to.Ptr(true),
								EnableIPForwarding:          to.Ptr(true),
								IPConfigurations: []*armcompute.VirtualMachineScaleSetIPConfiguration{
									{
										ID:   to.Ptr("<resource-id>"),
										Name: to.Ptr("<the-ip-configuration-name.>"),
										Properties: &armcompute.VirtualMachineScaleSetIPConfigurationProperties{
											ApplicationGatewayBackendAddressPools: []*armcompute.SubResource{
												{
													ID: to.Ptr("<resource-id>"),
												}},
											ApplicationSecurityGroups: []*armcompute.SubResource{
												{
													ID: to.Ptr("<resource-id>"),
												}},
											LoadBalancerBackendAddressPools: []*armcompute.SubResource{
												{
													ID: to.Ptr("<resource-id>"),
												}},
											LoadBalancerInboundNatPools: []*armcompute.SubResource{
												{
													ID: to.Ptr("<resource-id>"),
												}},
											Primary:                 to.Ptr(true),
											PrivateIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
											PublicIPAddressConfiguration: &armcompute.VirtualMachineScaleSetPublicIPAddressConfiguration{
												Name: to.Ptr("<the-public-ip-address-configuration-name.>"),
												Properties: &armcompute.VirtualMachineScaleSetPublicIPAddressConfigurationProperties{
													DeleteOption: to.Ptr(armcompute.DeleteOptionsDelete),
													DNSSettings: &armcompute.VirtualMachineScaleSetPublicIPAddressConfigurationDNSSettings{
														DomainNameLabel: to.Ptr("<the-domain-name-label.the-concatenation-of-the-domain-name-label-and-vm-index-will-be-the-domain-name-labels-of-the-public-ipaddress-resources-that-will-be-created>"),
													},
													IdleTimeoutInMinutes: to.Ptr[int32](18),
													IPTags: []*armcompute.VirtualMachineScaleSetIPTag{
														{
															IPTagType: to.Ptr("<ip-tag-type.-example:-first-party-usage.>"),
															Tag:       to.Ptr("<ip-tag-associated-with-the-public-ip.-example:-sql,-storage-etc.>"),
														}},
													PublicIPAddressVersion: to.Ptr(armcompute.IPVersionIPv4),
													PublicIPPrefix: &armcompute.SubResource{
														ID: to.Ptr("<resource-id>"),
													},
												},
												SKU: &armcompute.PublicIPAddressSKU{
													Name: to.Ptr(armcompute.PublicIPAddressSKUNameBasic),
													Tier: to.Ptr(armcompute.PublicIPAddressSKUTierRegional),
												},
											},
											Subnet: &armcompute.APIEntityReference{
												ID: to.Ptr("<the-arm-resource-id-in-the-form-of-/subscriptions/{subscription-id}/resource-groups/{resource-group-name}/...>"),
											},
										},
									}},
								NetworkSecurityGroup: &armcompute.SubResource{
									ID: to.Ptr("<resource-id>"),
								},
								Primary: to.Ptr(true),
							},
						}},
				},
				OSProfile: &armcompute.OSProfile{
					AdminPassword:            to.Ptr("<specifies-the-password-of-the-administrator-account.-<br><br>-**minimum-length-(windows):**-8-characters-<br><br>-**minimum-length-(linux):**-6-characters-<br><br>-**max-length-(windows):**-123-characters-<br><br>-**max-length-(linux):**-72-characters-<br><br>-**complexity-requirements:**-3-out-of-4-conditions-below-need-to-be-fulfilled-<br>-has-lower-characters-<br>has-upper-characters-<br>-has-a-digit-<br>-has-a-special-character-(regex-match-[\\w_])-<br><br>-**disallowed-values:**-\"abc@123\",-\"p@$$w0rd\",-\"p@ssw0rd\",-\"p@ssword123\",-\"pa$$word\",-\"pass@word1\",-\"password!\",-\"password1\",-\"password22\",-\"iloveyou!\"-<br><br>-for-resetting-the-password,-see-[how-to-reset-the-remote-desktop-service-or-its-login-password-in-a-windows-vm](https://docs.microsoft.com/troubleshoot/azure/virtual-machines/reset-rdp)-<br><br>-for-resetting-root-password,-see-[manage-users,-ssh,-and-check-or-repair-disks-on-azure-linux-vms-using-the-vmaccess-extension](https://docs.microsoft.com/troubleshoot/azure/virtual-machines/troubleshoot-ssh-connection)>"),
					AdminUsername:            to.Ptr("<specifies-the-name-of-the-administrator-account.-<br><br>-this-property-cannot-be-updated-after-the-vm-is-created.-<br><br>-**windows-only-restriction:**-cannot-end-in-\".\"-<br><br>-**disallowed-values:**-\"administrator\",-\"admin\",-\"user\",-\"user1\",-\"test\",-\"user2\",-\"test1\",-\"user3\",-\"admin1\",-\"1\",-\"123\",-\"a\",-\"actuser\",-\"adm\",-\"admin2\",-\"aspnet\",-\"backup\",-\"console\",-\"david\",-\"guest\",-\"john\",-\"owner\",-\"root\",-\"server\",-\"sql\",-\"support\",-\"support_388945a0\",-\"sys\",-\"test2\",-\"test3\",-\"user4\",-\"user5\".-<br><br>-**minimum-length-(linux):**-1--character-<br><br>-**max-length-(linux):**-64-characters-<br><br>-**max-length-(windows):**-20-characters.>"),
					AllowExtensionOperations: to.Ptr(true),
					ComputerName:             to.Ptr("<specifies-the-host-os-name-of-the-virtual-machine.-<br><br>-this-name-cannot-be-updated-after-the-vm-is-created.-<br><br>-**max-length-(windows):**-15-characters-<br><br>-**max-length-(linux):**-64-characters.-<br><br>-for-naming-conventions-and-restrictions-see-[azure-infrastructure-services-implementation-guidelines](https://docs.microsoft.com/azure/azure-resource-manager/management/resource-name-rules).>"),
					CustomData:               to.Ptr("<specifies-a-base-64-encoded-string-of-custom-data.-the-base-64-encoded-string-is-decoded-to-a-binary-array-that-is-saved-as-a-file-on-the-virtual-machine.-the-maximum-length-of-the-binary-array-is-65535-bytes.-<br><br>-**note:-do-not-pass-any-secrets-or-passwords-in-custom-data-property**-<br><br>-this-property-cannot-be-updated-after-the-vm-is-created.-<br><br>-custom-data-is-passed-to-the-vm-to-be-saved-as-a-file,-for-more-information-see-[custom-data-on-azure-vms](https://azure.microsoft.com/blog/custom-data-and-cloud-init-on-windows-azure/)-<br><br>-for-using-cloud-init-for-your-linux-vm,-see-[using-cloud-init-to-customize-a-linux-vm-during-creation](https://docs.microsoft.com/azure/virtual-machines/linux/using-cloud-init)>"),
					LinuxConfiguration: &armcompute.LinuxConfiguration{
						DisablePasswordAuthentication: to.Ptr(true),
						PatchSettings: &armcompute.LinuxPatchSettings{
							AssessmentMode: to.Ptr(armcompute.LinuxPatchAssessmentModeImageDefault),
							PatchMode:      to.Ptr(armcompute.LinuxVMGuestPatchModeImageDefault),
						},
						ProvisionVMAgent: to.Ptr(true),
						SSH: &armcompute.SSHConfiguration{
							PublicKeys: []*armcompute.SSHPublicKey{
								{
									Path:    to.Ptr("<specifies-the-full-path-on-the-created-vm-where-ssh-public-key-is-stored.-if-the-file-already-exists,-the-specified-key-is-appended-to-the-file.-example:-/home/user/.ssh/authorized_keys>"),
									KeyData: to.Ptr("<ssh-public-key-certificate-used-to-authenticate-with-the-vm-through-ssh.-the-key-needs-to-be-at-least-2048-bit-and-in-ssh-rsa-format.-<br><br>-for-creating-ssh-keys,-see-[create-ssh-keys-on-linux-and-mac-for-linux-vms-in-azure]https://docs.microsoft.com/azure/virtual-machines/linux/create-ssh-keys-detailed).>"),
								}},
						},
					},
					RequireGuestProvisionSignal: to.Ptr(true),
					Secrets:                     []*armcompute.VaultSecretGroup{},
					WindowsConfiguration: &armcompute.WindowsConfiguration{
						AdditionalUnattendContent: []*armcompute.AdditionalUnattendContent{
							{
								ComponentName: to.Ptr("<the-component-name.-currently,-the-only-allowable-value-is-microsoft-windows-shell-setup.>"),
								Content:       to.Ptr("<specifies-the-xml-formatted-content-that-is-added-to-the-unattend.xml-file-for-the-specified-path-and-component.-the-xml-must-be-less-than-4kb-and-must-include-the-root-element-for-the-setting-or-feature-that-is-being-inserted.>"),
								PassName:      to.Ptr("<the-pass-name.-currently,-the-only-allowable-value-is-oobe-system.>"),
								SettingName:   to.Ptr(armcompute.SettingNamesAutoLogon),
							}},
						EnableAutomaticUpdates: to.Ptr(true),
						PatchSettings: &armcompute.PatchSettings{
							AssessmentMode:    to.Ptr(armcompute.WindowsPatchAssessmentModeImageDefault),
							EnableHotpatching: to.Ptr(true),
							PatchMode:         to.Ptr(armcompute.WindowsVMGuestPatchModeManual),
						},
						ProvisionVMAgent: to.Ptr(true),
						TimeZone:         to.Ptr("<specifies-the-time-zone-of-the-virtual-machine.-e.g.-\"pacific-standard-time\".-<br><br>-possible-values-can-be-[time-zone-info.id](https://docs.microsoft.com/dotnet/api/system.timezoneinfo.id?#system_time-zone-info_id)-value-from-time-zones-returned-by-[time-zone-info.get-system-time-zones](https://docs.microsoft.com/dotnet/api/system.timezoneinfo.getsystemtimezones).>"),
						WinRM: &armcompute.WinRMConfiguration{
							Listeners: []*armcompute.WinRMListener{
								{
									CertificateURL: to.Ptr("<this-is-the-url-of-a-certificate-that-has-been-uploaded-to-key-vault-as-a-secret.-for-adding-a-secret-to-the-key-vault,-see-[add-a-key-or-secret-to-the-key-vault](https://docs.microsoft.com/azure/key-vault/key-vault-get-started/#add).-in-this-case,-your-certificate-needs-to-be-it-is-the-base64-encoding-of-the-following-json-object-which-is-encoded-in-utf-8:-<br><br>-{<br>--\"data\":\"<base64-encoded-certificate>\",<br>--\"data-type\":\"pfx\",<br>--\"password\":\"<pfx-file-password>\"<br>}-<br>-to-install-certificates-on-a-virtual-machine-it-is-recommended-to-use-the-[azure-key-vault-virtual-machine-extension-for-linux](https://docs.microsoft.com/azure/virtual-machines/extensions/key-vault-linux)-or-the-[azure-key-vault-virtual-machine-extension-for-windows](https://docs.microsoft.com/azure/virtual-machines/extensions/key-vault-windows).>"),
									Protocol:       to.Ptr(armcompute.ProtocolTypesHTTP),
								}},
						},
					},
				},
				ProtectionPolicy: &armcompute.VirtualMachineScaleSetVMProtectionPolicy{
					ProtectFromScaleIn:         to.Ptr(true),
					ProtectFromScaleSetActions: to.Ptr(true),
				},
				SecurityProfile: &armcompute.SecurityProfile{
					EncryptionAtHost: to.Ptr(true),
					SecurityType:     to.Ptr(armcompute.SecurityTypesTrustedLaunch),
					UefiSettings: &armcompute.UefiSettings{
						SecureBootEnabled: to.Ptr(true),
						VTpmEnabled:       to.Ptr(true),
					},
				},
				StorageProfile: &armcompute.StorageProfile{
					DataDisks: []*armcompute.DataDisk{
						{
							Name:         to.Ptr("<the-disk-name.>"),
							Caching:      to.Ptr(armcompute.CachingTypesNone),
							CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesEmpty),
							DeleteOption: to.Ptr(armcompute.DiskDeleteOptionTypesDelete),
							DetachOption: to.Ptr(armcompute.DiskDetachOptionTypesForceDetach),
							DiskSizeGB:   to.Ptr[int32](128),
							Image: &armcompute.VirtualHardDisk{
								URI: to.Ptr("<specifies-the-virtual-hard-disk's-uri.>"),
							},
							Lun: to.Ptr[int32](1),
							ManagedDisk: &armcompute.ManagedDiskParameters{
								ID: to.Ptr("<resource-id>"),
								DiskEncryptionSet: &armcompute.DiskEncryptionSetParameters{
									ID: to.Ptr("<resource-id>"),
								},
								StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
							},
							ToBeDetached: to.Ptr(true),
							Vhd: &armcompute.VirtualHardDisk{
								URI: to.Ptr("<specifies-the-virtual-hard-disk's-uri.>"),
							},
							WriteAcceleratorEnabled: to.Ptr(true),
						}},
					ImageReference: &armcompute.ImageReference{
						ID:                   to.Ptr("<resource-id>"),
						Offer:                to.Ptr("<specifies-the-offer-of-the-platform-image-or-marketplace-image-used-to-create-the-virtual-machine.>"),
						Publisher:            to.Ptr("<the-image-publisher.>"),
						SharedGalleryImageID: to.Ptr("<specified-the-shared-gallery-image-unique-id-for-vm-deployment.-this-can-be-fetched-from-shared-gallery-image-get-call.>"),
						SKU:                  to.Ptr("<the-image-sku.>"),
						Version:              to.Ptr("<specifies-the-version-of-the-platform-image-or-marketplace-image-used-to-create-the-virtual-machine.-the-allowed-formats-are-major.minor.build-or-'latest'.-major,-minor,-and-build-are-decimal-numbers.-specify-'latest'-to-use-the-latest-version-of-an-image-available-at-deploy-time.-even-if-you-use-'latest',-the-vm-image-will-not-automatically-update-after-deploy-time-even-if-a-new-version-becomes-available.-please-do-not-use-field-'version'-for-gallery-image-deployment,-gallery-image-should-always-use-'id'-field-for-deployment,-to-use-'latest'-version-of-gallery-image,-just-set-'/subscriptions/{subscription-id}/resource-groups/{resource-group-name}/providers/microsoft.compute/galleries/{gallery-name}/images/{image-name}'-in-the-'id'-field-without-version-input.>"),
					},
					OSDisk: &armcompute.OSDisk{
						Name:         to.Ptr("<the-disk-name.>"),
						Caching:      to.Ptr(armcompute.CachingTypesNone),
						CreateOption: to.Ptr(armcompute.DiskCreateOptionTypesFromImage),
						DeleteOption: to.Ptr(armcompute.DiskDeleteOptionTypesDelete),
						DiffDiskSettings: &armcompute.DiffDiskSettings{
							Option:    to.Ptr(armcompute.DiffDiskOptionsLocal),
							Placement: to.Ptr(armcompute.DiffDiskPlacementCacheDisk),
						},
						DiskSizeGB: to.Ptr[int32](127),
						EncryptionSettings: &armcompute.DiskEncryptionSettings{
							DiskEncryptionKey: &armcompute.KeyVaultSecretReference{
								SecretURL: to.Ptr("<the-url-referencing-a-secret-in-a-key-vault.>"),
								SourceVault: &armcompute.SubResource{
									ID: to.Ptr("<resource-id>"),
								},
							},
							Enabled: to.Ptr(true),
							KeyEncryptionKey: &armcompute.KeyVaultKeyReference{
								KeyURL: to.Ptr("<the-url-referencing-a-key-encryption-key-in-key-vault.>"),
								SourceVault: &armcompute.SubResource{
									ID: to.Ptr("<resource-id>"),
								},
							},
						},
						Image: &armcompute.VirtualHardDisk{
							URI: to.Ptr("<specifies-the-virtual-hard-disk's-uri.>"),
						},
						ManagedDisk: &armcompute.ManagedDiskParameters{
							ID: to.Ptr("<resource-id>"),
							DiskEncryptionSet: &armcompute.DiskEncryptionSetParameters{
								ID: to.Ptr("<resource-id>"),
							},
							StorageAccountType: to.Ptr(armcompute.StorageAccountTypesStandardLRS),
						},
						OSType: to.Ptr(armcompute.OperatingSystemTypesWindows),
						Vhd: &armcompute.VirtualHardDisk{
							URI: to.Ptr("<specifies-the-virtual-hard-disk's-uri.>"),
						},
						WriteAcceleratorEnabled: to.Ptr(true),
					},
				},
				UserData: to.Ptr("<user-data-for-the-vm,-which-must-be-base-64-encoded.-customer-should-not-pass-any-secrets-in-here.-<br><br>minimum-api-version:-2021-03-01>"),
			},
			SKU: &armcompute.SKU{
				Name:     to.Ptr("<the-sku-name.>"),
				Capacity: to.Ptr[int64](29),
				Tier:     to.Ptr("<specifies-the-tier-of-virtual-machines-in-a-scale-set.<br-/><br-/>-possible-values:<br-/><br-/>-**standard**<br-/><br-/>-**basic**>"),
			},
		},
		&armcompute.VirtualMachineScaleSetVMsClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	virtualMachineScaleSetVMsClientUpdateResponse, err := virtualMachineScaleSetVMsClientUpdateResponsePoller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
	// TODO: use response item
	_ = virtualMachineScaleSetVMsClientUpdateResponse
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/ForceDeleteVirtualMachineScaleSetVM.json
func ExampleVirtualMachineScaleSetVMsClient_BeginDelete() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	virtualMachineScaleSetVMsClient, err := armcompute.NewVirtualMachineScaleSetVMsClient("<subscription-id>", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	virtualMachineScaleSetVMsClientDeleteResponsePoller, err := virtualMachineScaleSetVMsClient.BeginDelete(ctx,
		"<resource-group-name>",
		"<vm-scale-set-name>",
		"<instance-id>",
		&armcompute.VirtualMachineScaleSetVMsClientBeginDeleteOptions{ForceDeletion: to.Ptr(true),
			ResumeToken: "",
		})
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	_, err = virtualMachineScaleSetVMsClientDeleteResponsePoller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/GetVirtualMachineScaleSetVMWithUserData.json
func ExampleVirtualMachineScaleSetVMsClient_Get() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	virtualMachineScaleSetVMsClient, err := armcompute.NewVirtualMachineScaleSetVMsClient("<subscription-id>", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	virtualMachineScaleSetVMsClientGetResponse, err := virtualMachineScaleSetVMsClient.Get(ctx,
		"<resource-group-name>",
		"<vm-scale-set-name>",
		"<instance-id>",
		&armcompute.VirtualMachineScaleSetVMsClientGetOptions{Expand: nil})
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	// TODO: use response item
	_ = virtualMachineScaleSetVMsClientGetResponse
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/GetVirtualMachineScaleSetVMInstanceViewAutoPlacedOnDedicatedHostGroup.json
func ExampleVirtualMachineScaleSetVMsClient_GetInstanceView() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	virtualMachineScaleSetVMsClient, err := armcompute.NewVirtualMachineScaleSetVMsClient("<subscription-id>", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	virtualMachineScaleSetVMsClientGetInstanceViewResponse, err := virtualMachineScaleSetVMsClient.GetInstanceView(ctx,
		"<resource-group-name>",
		"<vm-scale-set-name>",
		"<instance-id>",
		nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	// TODO: use response item
	_ = virtualMachineScaleSetVMsClientGetInstanceViewResponse
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetVMs_List_MaximumSet_Gen.json
func ExampleVirtualMachineScaleSetVMsClient_NewListPager() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	virtualMachineScaleSetVMsClient, err := armcompute.NewVirtualMachineScaleSetVMsClient("<subscription-id>", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	virtualMachineScaleSetVMsClientNewListPager := virtualMachineScaleSetVMsClient.NewListPager("<resource-group-name>",
		"<virtual-machine-scale-set-name>",
		&armcompute.VirtualMachineScaleSetVMsClientListOptions{Filter: to.Ptr("<filter>"),
			Select: to.Ptr("<select>"),
			Expand: to.Ptr("<expand>"),
		})
	for virtualMachineScaleSetVMsClientNewListPager.More() {
		nextResult, err := virtualMachineScaleSetVMsClientNewListPager.NextPage(ctx)
		if err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range nextResult.Value {
			// TODO: use page item
			_ = v
		}
	}
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetVMs_PowerOff_MaximumSet_Gen.json
func ExampleVirtualMachineScaleSetVMsClient_BeginPowerOff() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	virtualMachineScaleSetVMsClient, err := armcompute.NewVirtualMachineScaleSetVMsClient("<subscription-id>", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	virtualMachineScaleSetVMsClientPowerOffResponsePoller, err := virtualMachineScaleSetVMsClient.BeginPowerOff(ctx,
		"<resource-group-name>",
		"<vm-scale-set-name>",
		"<instance-id>",
		&armcompute.VirtualMachineScaleSetVMsClientBeginPowerOffOptions{SkipShutdown: to.Ptr(true),
			ResumeToken: "",
		})
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	_, err = virtualMachineScaleSetVMsClientPowerOffResponsePoller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetVMs_Restart_MaximumSet_Gen.json
func ExampleVirtualMachineScaleSetVMsClient_BeginRestart() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	virtualMachineScaleSetVMsClient, err := armcompute.NewVirtualMachineScaleSetVMsClient("<subscription-id>", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	virtualMachineScaleSetVMsClientRestartResponsePoller, err := virtualMachineScaleSetVMsClient.BeginRestart(ctx,
		"<resource-group-name>",
		"<vm-scale-set-name>",
		"<instance-id>",
		&armcompute.VirtualMachineScaleSetVMsClientBeginRestartOptions{ResumeToken: ""})
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	_, err = virtualMachineScaleSetVMsClientRestartResponsePoller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetVMs_Start_MaximumSet_Gen.json
func ExampleVirtualMachineScaleSetVMsClient_BeginStart() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	virtualMachineScaleSetVMsClient, err := armcompute.NewVirtualMachineScaleSetVMsClient("<subscription-id>", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	virtualMachineScaleSetVMsClientStartResponsePoller, err := virtualMachineScaleSetVMsClient.BeginStart(ctx,
		"<resource-group-name>",
		"<vm-scale-set-name>",
		"<instance-id>",
		&armcompute.VirtualMachineScaleSetVMsClientBeginStartOptions{ResumeToken: ""})
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	_, err = virtualMachineScaleSetVMsClientStartResponsePoller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetVMs_Redeploy_MaximumSet_Gen.json
func ExampleVirtualMachineScaleSetVMsClient_BeginRedeploy() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	virtualMachineScaleSetVMsClient, err := armcompute.NewVirtualMachineScaleSetVMsClient("<subscription-id>", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	virtualMachineScaleSetVMsClientRedeployResponsePoller, err := virtualMachineScaleSetVMsClient.BeginRedeploy(ctx,
		"<resource-group-name>",
		"<vm-scale-set-name>",
		"<instance-id>",
		&armcompute.VirtualMachineScaleSetVMsClientBeginRedeployOptions{ResumeToken: ""})
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	_, err = virtualMachineScaleSetVMsClientRedeployResponsePoller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/RetrieveBootDiagnosticsDataVMScaleSetVM.json
func ExampleVirtualMachineScaleSetVMsClient_RetrieveBootDiagnosticsData() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	virtualMachineScaleSetVMsClient, err := armcompute.NewVirtualMachineScaleSetVMsClient("<subscription-id>", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	virtualMachineScaleSetVMsClientRetrieveBootDiagnosticsDataResponse, err := virtualMachineScaleSetVMsClient.RetrieveBootDiagnosticsData(ctx,
		"<resource-group-name>",
		"<vm-scale-set-name>",
		"<instance-id>",
		&armcompute.VirtualMachineScaleSetVMsClientRetrieveBootDiagnosticsDataOptions{SasURIExpirationTimeInMinutes: to.Ptr[int32](60)})
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	// TODO: use response item
	_ = virtualMachineScaleSetVMsClientRetrieveBootDiagnosticsDataResponse
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/VirtualMachineScaleSetVMs_PerformMaintenance_MaximumSet_Gen.json
func ExampleVirtualMachineScaleSetVMsClient_BeginPerformMaintenance() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	virtualMachineScaleSetVMsClient, err := armcompute.NewVirtualMachineScaleSetVMsClient("<subscription-id>", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	virtualMachineScaleSetVMsClientPerformMaintenanceResponsePoller, err := virtualMachineScaleSetVMsClient.BeginPerformMaintenance(ctx,
		"<resource-group-name>",
		"<vm-scale-set-name>",
		"<instance-id>",
		&armcompute.VirtualMachineScaleSetVMsClientBeginPerformMaintenanceOptions{ResumeToken: ""})
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	_, err = virtualMachineScaleSetVMsClientPerformMaintenanceResponsePoller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/compute/SimulateEvictionOfVmssVM.json
func ExampleVirtualMachineScaleSetVMsClient_SimulateEviction() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	virtualMachineScaleSetVMsClient, err := armcompute.NewVirtualMachineScaleSetVMsClient("<subscription-id>", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	_, err = virtualMachineScaleSetVMsClient.SimulateEviction(ctx,
		"<resource-group-name>",
		"<vm-scale-set-name>",
		"<instance-id>",
		nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/compute/resource-manager/Microsoft.Compute/stable/2021-11-01/examples/runCommands/VMScaleSetRunCommand.json
func ExampleVirtualMachineScaleSetVMsClient_BeginRunCommand() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	virtualMachineScaleSetVMsClient, err := armcompute.NewVirtualMachineScaleSetVMsClient("<subscription-id>", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	virtualMachineScaleSetVMsClientRunCommandResponsePoller, err := virtualMachineScaleSetVMsClient.BeginRunCommand(ctx,
		"<resource-group-name>",
		"<vm-scale-set-name>",
		"<instance-id>",
		armcompute.RunCommandInput{
			CommandID: to.Ptr("<the-run-command-id.>"),
			Script: []*string{
				to.Ptr("Write-Host Hello World!")},
		},
		&armcompute.VirtualMachineScaleSetVMsClientBeginRunCommandOptions{ResumeToken: ""})
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	virtualMachineScaleSetVMsClientRunCommandResponse, err := virtualMachineScaleSetVMsClientRunCommandResponsePoller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
	// TODO: use response item
	_ = virtualMachineScaleSetVMsClientRunCommandResponse
}
