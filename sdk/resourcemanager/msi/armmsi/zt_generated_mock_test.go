//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armmsi_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"
	"time"

	"encoding/json"
	"reflect"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/msi/armmsi"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestSystemAssignedIdentities_GetByScope(t *testing.T) {
	// From example specification/msi/resource-manager/Microsoft.ManagedIdentity/stable/2018-11-30/examples/SystemAssignedIdentityGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"MsiOperationsList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmsi.NewSystemAssignedIdentitiesClient(cred, &options)
	res, err := client.GetByScope(ctx,
		"scope",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/msi/resource-manager/Microsoft.ManagedIdentity/stable/2018-11-30/examples/SystemAssignedIdentityGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmsi.SystemAssignedIdentity{
			Name:     to.Ptr("resourceName"),
			Type:     to.Ptr("ResourceProvider"),
			ID:       to.Ptr("/scope"),
			Location: to.Ptr("cus"),
			Properties: &armmsi.SystemAssignedIdentityProperties{
				ClientID:        to.Ptr("clientGUID"),
				ClientSecretURL: to.Ptr("https://serviceRoot/scope/credentials?tid=tenantId&oid=principalId&aid=clientId"),
				PrincipalID:     to.Ptr("identityObjectID"),
				TenantID:        to.Ptr("tenantGUID"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SystemAssignedIdentity) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SystemAssignedIdentity)
			t.Fatalf("Mock response is not equal to example response for example specification/msi/resource-manager/Microsoft.ManagedIdentity/stable/2018-11-30/examples/SystemAssignedIdentityGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOperations_List(t *testing.T) {
	// From example specification/msi/resource-manager/Microsoft.ManagedIdentity/stable/2018-11-30/examples/MsiOperationsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"MsiOperationsList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmsi.NewOperationsClient(cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/msi/resource-manager/Microsoft.ManagedIdentity/stable/2018-11-30/examples/MsiOperationsList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmsi.OperationListResult{
			Value: []*armmsi.Operation{
				{
					Name: to.Ptr("Microsoft.ManagedIdentity/userAssignedIdentities/read"),
					Display: &armmsi.OperationDisplay{
						Description: to.Ptr("Gets an existing user assigned identity"),
						Operation:   to.Ptr("Get User Assigned Identity"),
						Provider:    to.Ptr("Managed Service Identity"),
						Resource:    to.Ptr("User Assigned Identities"),
					},
				},
				{
					Name: to.Ptr("Microsoft.ManagedIdentity/userAssignedIdentities/write"),
					Display: &armmsi.OperationDisplay{
						Description: to.Ptr("Creates a new user assigned identity or updates the tags associated with an existing user assigned identity"),
						Operation:   to.Ptr("Create/Update User Assigned Identity"),
						Provider:    to.Ptr("Managed Service Identity"),
						Resource:    to.Ptr("User Assigned Identities"),
					},
				},
				{
					Name: to.Ptr("Microsoft.ManagedIdentity/userAssignedIdentities/delete"),
					Display: &armmsi.OperationDisplay{
						Description: to.Ptr("Deletes an existing user assigned identity"),
						Operation:   to.Ptr("Delete User Assigned Identity"),
						Provider:    to.Ptr("Managed Service Identity"),
						Resource:    to.Ptr("User Assigned Identities"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OperationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OperationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/msi/resource-manager/Microsoft.ManagedIdentity/stable/2018-11-30/examples/MsiOperationsList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestUserAssignedIdentities_ListBySubscription(t *testing.T) {
	// From example specification/msi/resource-manager/Microsoft.ManagedIdentity/stable/2018-11-30/examples/IdentityListBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"IdentityListBySubscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmsi.NewUserAssignedIdentitiesClient("subid", cred, &options)
	pager := client.ListBySubscription(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/msi/resource-manager/Microsoft.ManagedIdentity/stable/2018-11-30/examples/IdentityListBySubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmsi.UserAssignedIdentitiesListResult{
			Value: []*armmsi.Identity{
				{
					Name:     to.Ptr("identityName"),
					Type:     to.Ptr("Microsoft.ManagedIdentity/userAssignedIdentities"),
					ID:       to.Ptr("/subscriptions/subid/resourcegroups/rgName/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identityName"),
					Location: to.Ptr("eastus"),
					Tags: map[string]*string{
						"key1": to.Ptr("value1"),
						"key2": to.Ptr("value2"),
					},
					Properties: &armmsi.UserAssignedIdentityProperties{
						ClientID:    to.Ptr("clientGUID"),
						PrincipalID: to.Ptr("identityObjectID"),
						TenantID:    to.Ptr("tenantGUID"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.UserAssignedIdentitiesListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.UserAssignedIdentitiesListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/msi/resource-manager/Microsoft.ManagedIdentity/stable/2018-11-30/examples/IdentityListBySubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestUserAssignedIdentities_ListByResourceGroup(t *testing.T) {
	// From example specification/msi/resource-manager/Microsoft.ManagedIdentity/stable/2018-11-30/examples/IdentityListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"IdentityListByResourceGroup"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmsi.NewUserAssignedIdentitiesClient("subid", cred, &options)
	pager := client.ListByResourceGroup("rgName",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/msi/resource-manager/Microsoft.ManagedIdentity/stable/2018-11-30/examples/IdentityListByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmsi.UserAssignedIdentitiesListResult{
			Value: []*armmsi.Identity{
				{
					Name:     to.Ptr("identityName"),
					Type:     to.Ptr("Microsoft.ManagedIdentity/userAssignedIdentities"),
					ID:       to.Ptr("/subscriptions/subid/resourcegroups/rgName/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identityName"),
					Location: to.Ptr("eastus"),
					Tags: map[string]*string{
						"key1": to.Ptr("value1"),
						"key2": to.Ptr("value2"),
					},
					Properties: &armmsi.UserAssignedIdentityProperties{
						ClientID:    to.Ptr("clientGUID"),
						PrincipalID: to.Ptr("identityObjectID"),
						TenantID:    to.Ptr("tenantGUID"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.UserAssignedIdentitiesListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.UserAssignedIdentitiesListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/msi/resource-manager/Microsoft.ManagedIdentity/stable/2018-11-30/examples/IdentityListByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestUserAssignedIdentities_CreateOrUpdate(t *testing.T) {
	// From example specification/msi/resource-manager/Microsoft.ManagedIdentity/stable/2018-11-30/examples/IdentityCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"IdentityCreate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmsi.NewUserAssignedIdentitiesClient("subid", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"rgName",
		"resourceName",
		armmsi.Identity{
			Location: to.Ptr("eastus"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
				"key2": to.Ptr("value2"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/msi/resource-manager/Microsoft.ManagedIdentity/stable/2018-11-30/examples/IdentityCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmsi.Identity{
			Name:     to.Ptr("identityName"),
			Type:     to.Ptr("Microsoft.ManagedIdentity/userAssignedIdentities"),
			ID:       to.Ptr("/subscriptions/subid/resourcegroups/rgName/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identityName"),
			Location: to.Ptr("eastus"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
				"key2": to.Ptr("value2"),
			},
			Properties: &armmsi.UserAssignedIdentityProperties{
				ClientID:    to.Ptr("clientGUID"),
				PrincipalID: to.Ptr("identityObjectID"),
				TenantID:    to.Ptr("tenantGUID"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Identity) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Identity)
			t.Fatalf("Mock response is not equal to example response for example specification/msi/resource-manager/Microsoft.ManagedIdentity/stable/2018-11-30/examples/IdentityCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestUserAssignedIdentities_Update(t *testing.T) {
	// From example specification/msi/resource-manager/Microsoft.ManagedIdentity/stable/2018-11-30/examples/IdentityUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"IdentityUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmsi.NewUserAssignedIdentitiesClient("subid", cred, &options)
	res, err := client.Update(ctx,
		"rgName",
		"resourceName",
		armmsi.IdentityUpdate{
			Location: to.Ptr("eastus"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
				"key2": to.Ptr("value2"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/msi/resource-manager/Microsoft.ManagedIdentity/stable/2018-11-30/examples/IdentityUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmsi.Identity{
			Name:     to.Ptr("identityName"),
			Type:     to.Ptr("Microsoft.ManagedIdentity/userAssignedIdentities"),
			ID:       to.Ptr("/subscriptions/subid/resourcegroups/rgName/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identityName"),
			Location: to.Ptr("eastus"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
				"key2": to.Ptr("value2"),
			},
			Properties: &armmsi.UserAssignedIdentityProperties{
				ClientID:    to.Ptr("clientGUID"),
				PrincipalID: to.Ptr("identityObjectID"),
				TenantID:    to.Ptr("tenantGUID"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Identity) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Identity)
			t.Fatalf("Mock response is not equal to example response for example specification/msi/resource-manager/Microsoft.ManagedIdentity/stable/2018-11-30/examples/IdentityUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestUserAssignedIdentities_Get(t *testing.T) {
	// From example specification/msi/resource-manager/Microsoft.ManagedIdentity/stable/2018-11-30/examples/IdentityGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"IdentityGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmsi.NewUserAssignedIdentitiesClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rgName",
		"resourceName",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/msi/resource-manager/Microsoft.ManagedIdentity/stable/2018-11-30/examples/IdentityGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmsi.Identity{
			Name:     to.Ptr("identityName"),
			Type:     to.Ptr("Microsoft.ManagedIdentity/userAssignedIdentities"),
			ID:       to.Ptr("/subscriptions/subid/resourcegroups/rgName/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identityName"),
			Location: to.Ptr("eastus"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
				"key2": to.Ptr("value2"),
			},
			Properties: &armmsi.UserAssignedIdentityProperties{
				ClientID:    to.Ptr("clientGUID"),
				PrincipalID: to.Ptr("identityObjectID"),
				TenantID:    to.Ptr("tenantGUID"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Identity) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Identity)
			t.Fatalf("Mock response is not equal to example response for example specification/msi/resource-manager/Microsoft.ManagedIdentity/stable/2018-11-30/examples/IdentityGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestUserAssignedIdentities_Delete(t *testing.T) {
	// From example specification/msi/resource-manager/Microsoft.ManagedIdentity/stable/2018-11-30/examples/IdentityDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"IdentityDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmsi.NewUserAssignedIdentitiesClient("subid", cred, &options)
	_, err := client.Delete(ctx,
		"rgName",
		"resourceName",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/msi/resource-manager/Microsoft.ManagedIdentity/stable/2018-11-30/examples/IdentityDelete.json: %v", err)
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
