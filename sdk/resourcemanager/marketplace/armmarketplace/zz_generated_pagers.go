//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armmarketplace

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"reflect"
)

// PrivateStoreClientListPager provides operations for iterating over paged responses.
type PrivateStoreClientListPager struct {
	client    *PrivateStoreClient
	current   PrivateStoreClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, PrivateStoreClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *PrivateStoreClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PrivateStoreList.NextLink == nil || len(*p.current.PrivateStoreList.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *PrivateStoreClientListPager) NextPage(ctx context.Context) (PrivateStoreClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return PrivateStoreClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return PrivateStoreClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return PrivateStoreClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return PrivateStoreClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return PrivateStoreClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// PrivateStoreCollectionOfferClientListPager provides operations for iterating over paged responses.
type PrivateStoreCollectionOfferClientListPager struct {
	client    *PrivateStoreCollectionOfferClient
	current   PrivateStoreCollectionOfferClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, PrivateStoreCollectionOfferClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *PrivateStoreCollectionOfferClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.OfferListResponse.NextLink == nil || len(*p.current.OfferListResponse.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *PrivateStoreCollectionOfferClientListPager) NextPage(ctx context.Context) (PrivateStoreCollectionOfferClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return PrivateStoreCollectionOfferClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return PrivateStoreCollectionOfferClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return PrivateStoreCollectionOfferClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return PrivateStoreCollectionOfferClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return PrivateStoreCollectionOfferClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}
