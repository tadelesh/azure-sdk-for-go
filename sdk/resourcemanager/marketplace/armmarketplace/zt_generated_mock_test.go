//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armmarketplace_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/marketplace/armmarketplace"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestPrivateStore_List(t *testing.T) {
	// From example specification/marketplace/resource-manager/Microsoft.Marketplace/stable/2021-06-01/examples/GetPrivateStores.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetPrivateStores"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmarketplace.NewPrivateStoreClient(cred, &options)
	pager := client.List(&armmarketplace.PrivateStoreClientListOptions{UseCache: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/marketplace/resource-manager/Microsoft.Marketplace/stable/2021-06-01/examples/GetPrivateStores.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmarketplace.PrivateStoreList{
			Value: []*armmarketplace.PrivateStore{
				{
					Name: to.Ptr("a0e28e55-90c4-41d8-8e34-bb7ef7775406"),
					Type: to.Ptr("Microsoft.Marketplace/privateStores"),
					ID:   to.Ptr("/providers/Microsoft.Marketplace/privateStores/a0e28e55-90c4-41d8-8e34-bb7ef7775406"),
					Properties: &armmarketplace.PrivateStoreProperties{
						Availability: to.Ptr(armmarketplace.AvailabilityEnabled),
						Branding: map[string]*string{
							"color":   to.Ptr("blue"),
							"iconUrl": to.Ptr("https://some-images.someDomail.com/image/stroeIcon.12345678-4321"),
						},
						CollectionIDs: []*string{
							to.Ptr("ab80ed4-c5de-4593-b3c1-c46d4a3a56c7"),
							to.Ptr("a09107d4-c585-4594-b3c6-c46d4a3a56c8")},
						ETag:  to.Ptr("\"9301f4fd-0000-0100-0000-5e248b350332\""),
						IsGov: to.Ptr(false),
						NotificationsSettings: &armmarketplace.NotificationsSettingsProperties{
							Recipients: []*armmarketplace.Recipient{
								{
									DisplayName:  to.Ptr("John Doe"),
									EmailAddress: to.Ptr("john_doe@microsoft.com"),
									PrincipalID:  to.Ptr("6d583005-403b-407a-8ac0-c4af72b47ce9"),
								},
								{
									DisplayName:  to.Ptr("Jane Doe"),
									EmailAddress: to.Ptr("jane_doe@microsoft.com"),
									PrincipalID:  to.Ptr("c5b680d4-aac2-4940-9e1c-399454056ff2"),
								}},
							SendToAllMarketplaceAdmins: to.Ptr(true),
						},
						PrivateStoreID: to.Ptr("a0e28e55-90c4-41d8-8e34-bb7ef7775406"),
						TenantID:       to.Ptr("f686d426-123a-42db-81b7-ab578e110ccd"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PrivateStoreList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PrivateStoreList)
			t.Fatalf("Mock response is not equal to example response for example specification/marketplace/resource-manager/Microsoft.Marketplace/stable/2021-06-01/examples/GetPrivateStores.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateStore_Get(t *testing.T) {
	// From example specification/marketplace/resource-manager/Microsoft.Marketplace/stable/2021-06-01/examples/GetPrivateStore.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetPrivateStore"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmarketplace.NewPrivateStoreClient(cred, &options)
	res, err := client.Get(ctx,
		"a0e28e55-90c4-41d8-8e34-bb7ef7775406",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/marketplace/resource-manager/Microsoft.Marketplace/stable/2021-06-01/examples/GetPrivateStore.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmarketplace.PrivateStore{
			Name: to.Ptr("a0e28e55-90c4-41d8-8e34-bb7ef7775406"),
			Type: to.Ptr("Microsoft.Marketplace/privateStores"),
			ID:   to.Ptr("/providers/Microsoft.Marketplace/privateStores/a0e28e55-90c4-41d8-8e34-bb7ef7775406"),
			Properties: &armmarketplace.PrivateStoreProperties{
				Availability: to.Ptr(armmarketplace.AvailabilityEnabled),
				Branding: map[string]*string{
					"color":   to.Ptr("blue"),
					"iconUrl": to.Ptr("https://some-images.someDomail.com/image/stroeIcon.12345678-4321"),
				},
				CollectionIDs: []*string{
					to.Ptr("ab80ed4-c5de-4593-b3c1-c46d4a3a56c7"),
					to.Ptr("a09107d4-c585-4594-b3c6-c46d4a3a56c8")},
				ETag:  to.Ptr("\"9301f4fd-0000-0100-0000-5e248b350345\""),
				IsGov: to.Ptr(false),
				NotificationsSettings: &armmarketplace.NotificationsSettingsProperties{
					Recipients: []*armmarketplace.Recipient{
						{
							DisplayName:  to.Ptr("John Doe"),
							EmailAddress: to.Ptr("john_doe@microsoft.com"),
							PrincipalID:  to.Ptr("6d583005-403b-407a-8ac0-c4af72b47ce9"),
						},
						{
							DisplayName:  to.Ptr("Jane Doe"),
							EmailAddress: to.Ptr("jane_doe@microsoft.com"),
							PrincipalID:  to.Ptr("c5b680d4-aac2-4940-9e1c-399454056ff2"),
						}},
					SendToAllMarketplaceAdmins: to.Ptr(true),
				},
				PrivateStoreID: to.Ptr("a0e28e55-90c4-41d8-8e34-bb7ef7775406"),
				TenantID:       to.Ptr("a0e28e55-90c4-41d8-8e34-bb7ef7775406"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateStore) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateStore)
			t.Fatalf("Mock response is not equal to example response for example specification/marketplace/resource-manager/Microsoft.Marketplace/stable/2021-06-01/examples/GetPrivateStore.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateStore_CreateOrUpdate(t *testing.T) {
	// From example specification/marketplace/resource-manager/Microsoft.Marketplace/stable/2021-06-01/examples/PrivateStores_update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateStores_update"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmarketplace.NewPrivateStoreClient(cred, &options)
	_, err := client.CreateOrUpdate(ctx,
		"a0e28e55-90c4-41d8-8e34-bb7ef7775406",
		&armmarketplace.PrivateStoreClientCreateOrUpdateOptions{Payload: &armmarketplace.PrivateStore{
			Properties: &armmarketplace.PrivateStoreProperties{
				Availability: to.Ptr(armmarketplace.AvailabilityDisabled),
				ETag:         to.Ptr("\"9301f4fd-0000-0100-0000-5e248b350345\""),
			},
		},
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/marketplace/resource-manager/Microsoft.Marketplace/stable/2021-06-01/examples/PrivateStores_update.json: %v", err)
	}
}

func TestPrivateStore_Delete(t *testing.T) {
	// From example specification/marketplace/resource-manager/Microsoft.Marketplace/stable/2021-06-01/examples/DeletePrivateStore.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DeletePrivateStores"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmarketplace.NewPrivateStoreClient(cred, &options)
	_, err := client.Delete(ctx,
		"a0e28e55-90c4-41d8-8e34-bb7ef7775406",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/marketplace/resource-manager/Microsoft.Marketplace/stable/2021-06-01/examples/DeletePrivateStore.json: %v", err)
	}
}

func TestPrivateStore_QueryOffers(t *testing.T) {
	// From example specification/marketplace/resource-manager/Microsoft.Marketplace/stable/2021-06-01/examples/QueryOffers.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"QueryOffers"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmarketplace.NewPrivateStoreClient(cred, &options)
	res, err := client.QueryOffers(ctx,
		"a0e28e55-90c4-41d8-8e34-bb7ef7775406",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/marketplace/resource-manager/Microsoft.Marketplace/stable/2021-06-01/examples/QueryOffers.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmarketplace.QueryOffers{
			Value: []*armmarketplace.OfferProperties{
				{
					CreatedAt:            to.Ptr("05/28/2015 5:50"),
					ETag:                 to.Ptr("\"9301f4fd-0000-0100-0000-5e248b350000\""),
					ModifiedAt:           to.Ptr("05/29/2015 5:50"),
					OfferDisplayName:     to.Ptr("md-test-third-party-2"),
					PrivateStoreID:       to.Ptr("a0e28e55-90c4-41d8-8e34-bb7ef7775406"),
					PublisherDisplayName: to.Ptr("Marketplace Test Third Party"),
					SpecificPlanIDsLimitation: []*string{
						to.Ptr("0001"),
						to.Ptr("0002"),
						to.Ptr("0003")},
					UniqueOfferID: to.Ptr("marketplacetestthirdparty.md-test-third-party-2"),
				},
				{
					CreatedAt:            to.Ptr("05/28/2015 5:50"),
					ETag:                 to.Ptr("\"9301f4fd-0000-0100-0304-5e248b350043\""),
					ModifiedAt:           to.Ptr("05/29/2015 5:50"),
					OfferDisplayName:     to.Ptr("md-test-third-party-3"),
					PrivateStoreID:       to.Ptr("a0e28e55-90c4-41d8-8e34-bb7ef7775406"),
					PublisherDisplayName: to.Ptr("Marketplace Test Third Party"),
					SpecificPlanIDsLimitation: []*string{
						to.Ptr("0001"),
						to.Ptr("0002")},
					UniqueOfferID: to.Ptr("marketplacetestthirdparty.md-test-third-party-3"),
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.QueryOffers) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.QueryOffers)
			t.Fatalf("Mock response is not equal to example response for example specification/marketplace/resource-manager/Microsoft.Marketplace/stable/2021-06-01/examples/QueryOffers.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateStore_BillingAccounts(t *testing.T) {
	// From example specification/marketplace/resource-manager/Microsoft.Marketplace/stable/2021-06-01/examples/BillingAccounts.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"BillingAccounts"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmarketplace.NewPrivateStoreClient(cred, &options)
	res, err := client.BillingAccounts(ctx,
		"a0e28e55-90c4-41d8-8e34-bb7ef7775406",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/marketplace/resource-manager/Microsoft.Marketplace/stable/2021-06-01/examples/BillingAccounts.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmarketplace.BillingAccountsResponse{
			BillingAccounts: []*string{
				to.Ptr("Billing Account 1"),
				to.Ptr("Billing Account 2")},
		}
		if !reflect.DeepEqual(exampleRes, res.BillingAccountsResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.BillingAccountsResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/marketplace/resource-manager/Microsoft.Marketplace/stable/2021-06-01/examples/BillingAccounts.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateStore_CollectionsToSubscriptionsMapping(t *testing.T) {
	// From example specification/marketplace/resource-manager/Microsoft.Marketplace/stable/2021-06-01/examples/CollectionsToSubscriptionsMapping.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CollectionsToSubscriptionsMapping"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmarketplace.NewPrivateStoreClient(cred, &options)
	res, err := client.CollectionsToSubscriptionsMapping(ctx,
		"a0e28e55-90c4-41d8-8e34-bb7ef7775406",
		&armmarketplace.PrivateStoreClientCollectionsToSubscriptionsMappingOptions{Payload: &armmarketplace.CollectionsToSubscriptionsMappingPayload{
			Properties: &armmarketplace.CollectionsToSubscriptionsMappingProperties{
				SubscriptionIDs: []*string{
					to.Ptr("b340914e-353d-453a-85fb-8f9b65b51f91"),
					to.Ptr("f2baa04d-5bfc-461b-b6d8-61b403c9ec48")},
			},
		},
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/marketplace/resource-manager/Microsoft.Marketplace/stable/2021-06-01/examples/CollectionsToSubscriptionsMapping.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmarketplace.CollectionsToSubscriptionsMappingResponse{
			Details: map[string]*armmarketplace.CollectionsSubscriptionsMappingDetails{
				"4eb49758-f591-486f-bd58-dff00fb7a8d8": {
					CollectionName: to.Ptr("Test Collection"),
					Subscriptions: []*string{
						to.Ptr("b340914e-353d-453a-85fb-8f9b65b51f91"),
						to.Ptr("f2baa04d-5bfc-461b-b6d8-61b403c9ec48")},
				},
				"74c02e27-2524-436c-831d-d64565f31153": {
					CollectionName: to.Ptr("Test Collection 2"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.CollectionsToSubscriptionsMappingResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CollectionsToSubscriptionsMappingResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/marketplace/resource-manager/Microsoft.Marketplace/stable/2021-06-01/examples/CollectionsToSubscriptionsMapping.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateStore_QueryApprovedPlans(t *testing.T) {
	// From example specification/marketplace/resource-manager/Microsoft.Marketplace/stable/2021-06-01/examples/QueryApprovedPlans.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"QueryApprovedPlans"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmarketplace.NewPrivateStoreClient(cred, &options)
	res, err := client.QueryApprovedPlans(ctx,
		"a0e28e55-90c4-41d8-8e34-bb7ef7775406",
		&armmarketplace.PrivateStoreClientQueryApprovedPlansOptions{Payload: &armmarketplace.QueryApprovedPlansPayload{
			Properties: &armmarketplace.QueryApprovedPlans{
				OfferID: to.Ptr("marketplacetestthirdparty.md-test-third-party-2"),
				PlanIDs: []*string{
					to.Ptr("testPlanA"),
					to.Ptr("testPlanB"),
					to.Ptr("testPlanC")},
			},
		},
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/marketplace/resource-manager/Microsoft.Marketplace/stable/2021-06-01/examples/QueryApprovedPlans.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmarketplace.QueryApprovedPlansResponse{
			Details: []*armmarketplace.QueryApprovedPlansDetails{
				{
					AllSubscriptions: to.Ptr(false),
					PlanID:           to.Ptr("testPlanA"),
					SubscriptionIDs: []*string{
						to.Ptr("85e3e079-c718-4e4c-abbe-f72fceba8305"),
						to.Ptr("7752d461-4bf1-4185-8b56-8a3f11486ac6")},
				},
				{
					AllSubscriptions: to.Ptr(true),
					PlanID:           to.Ptr("testPlanB"),
					SubscriptionIDs:  []*string{},
				},
				{
					AllSubscriptions: to.Ptr(false),
					PlanID:           to.Ptr("testPlanC"),
					SubscriptionIDs:  []*string{},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.QueryApprovedPlansResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.QueryApprovedPlansResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/marketplace/resource-manager/Microsoft.Marketplace/stable/2021-06-01/examples/QueryApprovedPlans.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateStore_BulkCollectionsAction(t *testing.T) {
	// From example specification/marketplace/resource-manager/Microsoft.Marketplace/stable/2021-06-01/examples/BulkCollectionsAction.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"BulkCollectionsAction"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmarketplace.NewPrivateStoreClient(cred, &options)
	res, err := client.BulkCollectionsAction(ctx,
		"a0e28e55-90c4-41d8-8e34-bb7ef7775406",
		&armmarketplace.PrivateStoreClientBulkCollectionsActionOptions{Payload: &armmarketplace.BulkCollectionsPayload{
			Properties: &armmarketplace.BulkCollectionsDetails{
				Action: to.Ptr("EnableCollections"),
				CollectionIDs: []*string{
					to.Ptr("c752f021-1c37-4af5-b82f-74c51c27b44a"),
					to.Ptr("f47ef1c7-e908-4f39-ae29-db181634ad8d")},
			},
		},
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/marketplace/resource-manager/Microsoft.Marketplace/stable/2021-06-01/examples/BulkCollectionsAction.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmarketplace.BulkCollectionsResponse{
			Failed: []*armmarketplace.CollectionsDetails{
				{
					CollectionID:   to.Ptr("f47ef1c7-e908-4f39-ae29-db181634ad8d"),
					CollectionName: to.Ptr("Test collection 2"),
				}},
			Succeeded: []*armmarketplace.CollectionsDetails{
				{
					CollectionID:   to.Ptr("c752f021-1c37-4af5-b82f-74c51c27b44a"),
					CollectionName: to.Ptr("Test collection"),
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.BulkCollectionsResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.BulkCollectionsResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/marketplace/resource-manager/Microsoft.Marketplace/stable/2021-06-01/examples/BulkCollectionsAction.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateStore_GetApprovalRequestsList(t *testing.T) {
	// From example specification/marketplace/resource-manager/Microsoft.Marketplace/stable/2021-06-01/examples/GetApprovalRequestsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetApprovalRequestsList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmarketplace.NewPrivateStoreClient(cred, &options)
	res, err := client.GetApprovalRequestsList(ctx,
		"a0e28e55-90c4-41d8-8e34-bb7ef7775406",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/marketplace/resource-manager/Microsoft.Marketplace/stable/2021-06-01/examples/GetApprovalRequestsList.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmarketplace.RequestApprovalsList{
			Value: []*armmarketplace.RequestApprovalResource{
				{
					Name: to.Ptr("marketplacetestthirdparty.md-test-third-party-2"),
					Type: to.Ptr("Microsoft.Marketplace/privateStores/requestApprovals"),
					ID:   to.Ptr("/providers/Microsoft.Marketplace/privateStores/9afd3c45-5230-4d58-9469-2cacc00bba68/requestApprovals/marketplacetestthirdparty.md-test-third-party-2"),
					SystemData: &armmarketplace.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-02-01T10:23:17.6571572+02:00"); return t }()),
						CreatedBy:          to.Ptr("user@somedoamin.com"),
						CreatedByType:      to.Ptr(armmarketplace.IdentityTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-02-01T10:23:17.6571572+02:00"); return t }()),
						LastModifiedBy:     to.Ptr("user@somedoamin.com"),
						LastModifiedByType: to.Ptr(armmarketplace.IdentityTypeUser),
					},
					Properties: &armmarketplace.RequestApprovalProperties{
						IsClosed:         to.Ptr(false),
						MessageCode:      to.Ptr[int64](0),
						OfferDisplayName: to.Ptr("Offer Display name"),
						OfferID:          to.Ptr("marketplacetestthirdparty.md-test-third-party-2"),
						PlansDetails: []*armmarketplace.PlanDetails{
							{
								Justification:    to.Ptr("Because I want to...."),
								PlanID:           to.Ptr("testPlanA"),
								RequestDate:      "2021-02-01T10:23:17.6571572+02:00",
								Status:           to.Ptr(armmarketplace.StatusPending),
								SubscriptionID:   to.Ptr(""),
								SubscriptionName: to.Ptr(""),
							},
							{
								Justification:    to.Ptr("try me :)"),
								PlanID:           to.Ptr("*"),
								RequestDate:      "2021-02-01T10:23:17.6571572+02:00",
								Status:           to.Ptr(armmarketplace.StatusPending),
								SubscriptionID:   to.Ptr(""),
								SubscriptionName: to.Ptr(""),
							}},
						PublisherID: to.Ptr("marketplacetestthirdparty"),
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.RequestApprovalsList) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RequestApprovalsList)
			t.Fatalf("Mock response is not equal to example response for example specification/marketplace/resource-manager/Microsoft.Marketplace/stable/2021-06-01/examples/GetApprovalRequestsList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateStore_GetRequestApproval(t *testing.T) {
	// From example specification/marketplace/resource-manager/Microsoft.Marketplace/stable/2021-06-01/examples/GetRequestApproval.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetApprovalRequest"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmarketplace.NewPrivateStoreClient(cred, &options)
	res, err := client.GetRequestApproval(ctx,
		"a0e28e55-90c4-41d8-8e34-bb7ef7775406",
		"marketplacetestthirdparty.md-test-third-party-2",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/marketplace/resource-manager/Microsoft.Marketplace/stable/2021-06-01/examples/GetRequestApproval.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmarketplace.RequestApprovalResource{
			Name: to.Ptr("marketplacetestthirdparty.md-test-third-party-2"),
			Type: to.Ptr("Microsoft.Marketplace/privateStores/requestApprovals"),
			ID:   to.Ptr("/providers/Microsoft.Marketplace/privateStores/a0e28e55-90c4-41d8-8e34-bb7ef7775406/requestApprovals/marketplacetestthirdparty.md-test-third-party-2"),
			SystemData: &armmarketplace.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-10-05T17:18:19.1234567Z"); return t }()),
				CreatedBy:          to.Ptr("test@somedomain.com"),
				CreatedByType:      to.Ptr(armmarketplace.IdentityTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-10-05T17:18:19.1234567Z"); return t }()),
				LastModifiedBy:     to.Ptr("testuser@somedomail.com"),
				LastModifiedByType: to.Ptr(armmarketplace.IdentityTypeUser),
			},
			Properties: &armmarketplace.RequestApprovalProperties{
				IsClosed:         to.Ptr(false),
				MessageCode:      to.Ptr[int64](0),
				OfferDisplayName: to.Ptr("Offer display Name"),
				OfferID:          to.Ptr("marketplacetestthirdparty.md-test-third-party-2"),
				PlansDetails: []*armmarketplace.PlanDetails{
					{
						Justification:    to.Ptr("Because I want to...."),
						PlanID:           to.Ptr("testPlanA"),
						RequestDate:      "2020-10-05T17:18:19.1234567Z",
						Status:           to.Ptr(armmarketplace.StatusPending),
						SubscriptionID:   to.Ptr(""),
						SubscriptionName: to.Ptr(""),
					},
					{
						Justification:    to.Ptr("Because I want to...."),
						PlanID:           to.Ptr("testPlanB"),
						RequestDate:      "2020-10-05T17:18:19.1234567Z",
						Status:           to.Ptr(armmarketplace.StatusPending),
						SubscriptionID:   to.Ptr(""),
						SubscriptionName: to.Ptr(""),
					}},
				PublisherID: to.Ptr("marketplacetestthirdparty"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RequestApprovalResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RequestApprovalResource)
			t.Fatalf("Mock response is not equal to example response for example specification/marketplace/resource-manager/Microsoft.Marketplace/stable/2021-06-01/examples/GetRequestApproval.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateStore_CreateApprovalRequest(t *testing.T) {
	// From example specification/marketplace/resource-manager/Microsoft.Marketplace/stable/2021-06-01/examples/CreateApprovalRequest.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CreateApprovalRequest"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmarketplace.NewPrivateStoreClient(cred, &options)
	res, err := client.CreateApprovalRequest(ctx,
		"a0e28e55-90c4-41d8-8e34-bb7ef7775406",
		"marketplacetestthirdparty.md-test-third-party-2",
		&armmarketplace.PrivateStoreClientCreateApprovalRequestOptions{Payload: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/marketplace/resource-manager/Microsoft.Marketplace/stable/2021-06-01/examples/CreateApprovalRequest.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmarketplace.RequestApprovalResource{
			Name: to.Ptr("marketplacetestthirdparty.md-test-third-party-2"),
			Type: to.Ptr("Microsoft.Marketplace/privateStores/requestApprovals"),
			ID:   to.Ptr("/providers/Microsoft.Marketplace/privateStores/9afd3c45-5230-4d58-9469-2cacc00bba68/requestApprovals/marketplacetestthirdparty.md-test-third-party-2"),
			SystemData: &armmarketplace.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-02-01T10:23:17.6571572+02:00"); return t }()),
				CreatedBy:          to.Ptr("user@somedoamin.com"),
				CreatedByType:      to.Ptr(armmarketplace.IdentityTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-02-01T10:23:17.6571572+02:00"); return t }()),
				LastModifiedBy:     to.Ptr("user@somedoamin.com"),
				LastModifiedByType: to.Ptr(armmarketplace.IdentityTypeUser),
			},
			Properties: &armmarketplace.RequestApprovalProperties{
				IsClosed:         to.Ptr(false),
				MessageCode:      to.Ptr[int64](0),
				OfferDisplayName: to.Ptr("Offer Display name"),
				OfferID:          to.Ptr("marketplacetestthirdparty.md-test-third-party-2"),
				PlansDetails: []*armmarketplace.PlanDetails{
					{
						Justification:    to.Ptr("Because I want to...."),
						PlanID:           to.Ptr("testPlanA"),
						RequestDate:      "2021-02-01T10:23:17.6571572+02:00",
						Status:           to.Ptr(armmarketplace.StatusPending),
						SubscriptionID:   to.Ptr("4ca4753c-5a1e-4913-b849-2c68880e03c2"),
						SubscriptionName: to.Ptr("Test subscription 2"),
					},
					{
						Justification:    to.Ptr("try me :)"),
						PlanID:           to.Ptr("*"),
						RequestDate:      "2021-02-01T10:23:17.6571572+02:00",
						Status:           to.Ptr(armmarketplace.StatusPending),
						SubscriptionID:   to.Ptr("4ca4753c-5a1e-4913-b849-2c68880e03c2"),
						SubscriptionName: to.Ptr("Test subscription 2"),
					}},
				PublisherID: to.Ptr("marketplacetestthirdparty"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RequestApprovalResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RequestApprovalResource)
			t.Fatalf("Mock response is not equal to example response for example specification/marketplace/resource-manager/Microsoft.Marketplace/stable/2021-06-01/examples/CreateApprovalRequest.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateStore_QueryRequestApproval(t *testing.T) {
	// From example specification/marketplace/resource-manager/Microsoft.Marketplace/stable/2021-06-01/examples/QueryRequestApproval.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"QueryRequestApproval"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmarketplace.NewPrivateStoreClient(cred, &options)
	res, err := client.QueryRequestApproval(ctx,
		"a0e28e55-90c4-41d8-8e34-bb7ef7775406",
		"marketplacetestthirdparty.md-test-third-party-2",
		&armmarketplace.PrivateStoreClientQueryRequestApprovalOptions{Payload: &armmarketplace.QueryRequestApprovalProperties{
			Properties: &armmarketplace.RequestDetails{
				PlanIDs: []*string{
					to.Ptr("testPlanA"),
					to.Ptr("testPlanB"),
					to.Ptr("*")},
				PublisherID: to.Ptr("marketplacetestthirdparty"),
			},
		},
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/marketplace/resource-manager/Microsoft.Marketplace/stable/2021-06-01/examples/QueryRequestApproval.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmarketplace.QueryRequestApproval{
			MessageCode: to.Ptr[int64](0),
			PlansDetails: map[string]*armmarketplace.PlanDetails{
				"*": {
					PlanID:           to.Ptr("*"),
					Status:           to.Ptr(armmarketplace.StatusNone),
					SubscriptionID:   to.Ptr(""),
					SubscriptionName: to.Ptr(""),
				},
				"byol": {
					Justification:    to.Ptr(""),
					PlanID:           to.Ptr("testPlanA"),
					Status:           to.Ptr(armmarketplace.StatusNone),
					SubscriptionID:   to.Ptr(""),
					SubscriptionName: to.Ptr(""),
				},
				"hourly": {
					Justification:    to.Ptr(""),
					PlanID:           to.Ptr("testPlanB"),
					Status:           to.Ptr(armmarketplace.Status("ApprovedByAdmin")),
					SubscriptionID:   to.Ptr("4ca4753c-5a1e-4913-b849-2c68880e03c2"),
					SubscriptionName: to.Ptr("Test subscription 2"),
				},
			},
			UniqueOfferID: to.Ptr("marketplacetestthirdparty.md-test-third-party-2"),
		}
		if !reflect.DeepEqual(exampleRes, res.QueryRequestApproval) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.QueryRequestApproval)
			t.Fatalf("Mock response is not equal to example response for example specification/marketplace/resource-manager/Microsoft.Marketplace/stable/2021-06-01/examples/QueryRequestApproval.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateStore_AdminRequestApprovalsList(t *testing.T) {
	// From example specification/marketplace/resource-manager/Microsoft.Marketplace/stable/2021-06-01/examples/AdminRequestApprovalsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AdminRequestApprovalsList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmarketplace.NewPrivateStoreClient(cred, &options)
	res, err := client.AdminRequestApprovalsList(ctx,
		"a0e28e55-90c4-41d8-8e34-bb7ef7775406",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/marketplace/resource-manager/Microsoft.Marketplace/stable/2021-06-01/examples/AdminRequestApprovalsList.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmarketplace.AdminRequestApprovalsList{
			Value: []*armmarketplace.AdminRequestApprovalsResource{
				{
					Name: to.Ptr("marketplacetestthirdparty.md-test-third-party-2"),
					Type: to.Ptr("/providers/Microsoft.Marketplace/privateStores/adminRequestApprovals"),
					ID:   to.Ptr("/providers/Microsoft.Marketplace/privateStores/a0e28e55-90c4-41d8-8e34-bb7ef7775406/adminRequestApprovals/marketplacetestthirdparty.md-test-third-party-2"),
					SystemData: &armmarketplace.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-02-01T10:23:17.6571572+02:00"); return t }()),
						CreatedBy:          to.Ptr("user@somedoamin.com"),
						CreatedByType:      to.Ptr(armmarketplace.IdentityTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-02-01T10:23:17.6571572+02:00"); return t }()),
						LastModifiedBy:     to.Ptr("user@somedoamin.com"),
						LastModifiedByType: to.Ptr(armmarketplace.IdentityTypeUser),
					},
					Properties: &armmarketplace.AdminRequestApprovalProperties{
						AdminAction:   to.Ptr(armmarketplace.AdminAction("Pending")),
						CollectionIDs: []*string{},
						DisplayName:   to.Ptr("Offer display name"),
						OfferID:       to.Ptr("marketplacetestthirdparty.md-test-third-party-2"),
						Plans: []*armmarketplace.PlanRequesterDetails{
							{
								PlanDisplayName: to.Ptr("Plan display name A"),
								PlanID:          to.Ptr("testA"),
								Requesters: []*armmarketplace.UserRequestDetails{
									{
										Date:             to.Ptr("2021-02-01T11:42:12.9526511+02:00"),
										Justification:    to.Ptr("Because I want to...."),
										SubscriptionID:   to.Ptr("404a1952-706a-453a-989b-647cc4ca5f9c"),
										SubscriptionName: to.Ptr("Test subscription"),
										User:             to.Ptr("testUser3"),
									}},
							},
							{
								PlanDisplayName: to.Ptr("*  (this means the user requested any plan, here you will get only *)"),
								PlanID:          to.Ptr("*"),
								Requesters: []*armmarketplace.UserRequestDetails{
									{
										Date:             to.Ptr("2021-02-01T11:42:12.9526511+02:00"),
										Justification:    to.Ptr("try me :)"),
										SubscriptionID:   to.Ptr("4ca4753c-5a1e-4913-b849-2c68880e03c2"),
										SubscriptionName: to.Ptr("Test subscription 2"),
										User:             to.Ptr("testUser3"),
									}},
							}},
						PublisherID: to.Ptr("marketplacetestthirdparty"),
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.AdminRequestApprovalsList) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AdminRequestApprovalsList)
			t.Fatalf("Mock response is not equal to example response for example specification/marketplace/resource-manager/Microsoft.Marketplace/stable/2021-06-01/examples/AdminRequestApprovalsList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateStore_GetAdminRequestApproval(t *testing.T) {
	// From example specification/marketplace/resource-manager/Microsoft.Marketplace/stable/2021-06-01/examples/GetAdminRequestApproval.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetAdminRequestApproval"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmarketplace.NewPrivateStoreClient(cred, &options)
	res, err := client.GetAdminRequestApproval(ctx,
		"a0e28e55-90c4-41d8-8e34-bb7ef7775406",
		"marketplacetestthirdparty.md-test-third-party-2",
		"marketplacetestthirdparty",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/marketplace/resource-manager/Microsoft.Marketplace/stable/2021-06-01/examples/GetAdminRequestApproval.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmarketplace.AdminRequestApprovalsResource{
			Name: to.Ptr("marketplacetestthirdparty.md-test-third-party-2"),
			Type: to.Ptr("/providers/Microsoft.Marketplace/privateStores/adminRequestApprovals"),
			ID:   to.Ptr("/providers/Microsoft.Marketplace/privateStores/a0e28e55-90c4-41d8-8e34-bb7ef7775406/adminRequestApprovals/marketplacetestthirdparty.md-test-third-party-2"),
			SystemData: &armmarketplace.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-02-01T10:23:17.6571572+02:00"); return t }()),
				CreatedBy:          to.Ptr("user@somedoamin.com"),
				CreatedByType:      to.Ptr(armmarketplace.IdentityTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-02-01T10:23:17.6571572+02:00"); return t }()),
				LastModifiedBy:     to.Ptr("user@somedoamin.com"),
				LastModifiedByType: to.Ptr(armmarketplace.IdentityTypeUser),
			},
			Properties: &armmarketplace.AdminRequestApprovalProperties{
				AdminAction:   to.Ptr(armmarketplace.AdminAction("Pending")),
				CollectionIDs: []*string{},
				DisplayName:   to.Ptr("Offer display name"),
				OfferID:       to.Ptr("marketplacetestthirdparty.md-test-third-party-2"),
				Plans: []*armmarketplace.PlanRequesterDetails{
					{
						PlanDisplayName: to.Ptr("Plan display name A"),
						PlanID:          to.Ptr("testA"),
						Requesters: []*armmarketplace.UserRequestDetails{
							{
								Date:             to.Ptr("2021-02-01T11:42:12.9526511+02:00"),
								Justification:    to.Ptr("Because I want to...."),
								SubscriptionID:   to.Ptr("1fs4r5t6-5a1e-4913-b849-2c68880e03c2"),
								SubscriptionName: to.Ptr("Test subscription 1"),
								User:             to.Ptr("testUser3"),
							}},
					},
					{
						PlanDisplayName: to.Ptr("*  (this means the user requested any plan, here you will get only *)"),
						PlanID:          to.Ptr("*"),
						Requesters: []*armmarketplace.UserRequestDetails{
							{
								Date:             to.Ptr("2021-02-01T11:42:12.9526511+02:00"),
								Justification:    to.Ptr("try me :)"),
								SubscriptionID:   to.Ptr("4ca4753c-5a1e-4913-b849-2c68880e03c2"),
								SubscriptionName: to.Ptr("Test subscription 2"),
								User:             to.Ptr("testUser3"),
							}},
					}},
				PublisherID: to.Ptr("marketplacetestthirdparty"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AdminRequestApprovalsResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AdminRequestApprovalsResource)
			t.Fatalf("Mock response is not equal to example response for example specification/marketplace/resource-manager/Microsoft.Marketplace/stable/2021-06-01/examples/GetAdminRequestApproval.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateStore_UpdateAdminRequestApproval(t *testing.T) {
	// From example specification/marketplace/resource-manager/Microsoft.Marketplace/stable/2021-06-01/examples/UpdateAdminRequestApproval.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"UpdateAdminRequestApproval"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmarketplace.NewPrivateStoreClient(cred, &options)
	res, err := client.UpdateAdminRequestApproval(ctx,
		"a0e28e55-90c4-41d8-8e34-bb7ef7775406",
		"marketplacetestthirdparty.md-test-third-party-2",
		&armmarketplace.PrivateStoreClientUpdateAdminRequestApprovalOptions{Payload: &armmarketplace.AdminRequestApprovalsResource{
			Properties: &armmarketplace.AdminRequestApprovalProperties{
				AdminAction: to.Ptr(armmarketplace.AdminActionApproved),
				ApprovedPlans: []*string{
					to.Ptr("testPlan")},
				CollectionIDs: []*string{
					to.Ptr("f8ee227e-85d7-477d-abbf-854d6decaf70"),
					to.Ptr("39246ad6-c521-4fed-8de7-77dede2e873f")},
				Comment:     to.Ptr("I'm ok with that"),
				PublisherID: to.Ptr("marketplacetestthirdparty"),
			},
		},
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/marketplace/resource-manager/Microsoft.Marketplace/stable/2021-06-01/examples/UpdateAdminRequestApproval.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmarketplace.AdminRequestApprovalsResource{
			Name: to.Ptr("marketplacetestthirdparty.md-test-third-party-2"),
			Type: to.Ptr("/providers/Microsoft.Marketplace/privateStores/adminRequestApprovals"),
			ID:   to.Ptr("/providers/Microsoft.Marketplace/privateStores/a0e28e55-90c4-41d8-8e34-bb7ef7775406/adminRequestApprovals/marketplacetestthirdparty.md-test-third-party-2"),
			SystemData: &armmarketplace.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-10-05T17:18:19.1234567Z"); return t }()),
				CreatedBy:          to.Ptr("test@somedomain.com"),
				CreatedByType:      to.Ptr(armmarketplace.IdentityTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-10-05T17:18:19.1234567Z"); return t }()),
				LastModifiedBy:     to.Ptr("testuser@somedomail.com"),
				LastModifiedByType: to.Ptr(armmarketplace.IdentityTypeUser),
			},
			Properties: &armmarketplace.AdminRequestApprovalProperties{
				AdminAction:   to.Ptr(armmarketplace.AdminActionApproved),
				Administrator: to.Ptr("admin@someDomain.com"),
				ApprovedPlans: []*string{
					to.Ptr("testPlan")},
				CollectionIDs: []*string{
					to.Ptr("f8ee227e-85d7-477d-abbf-854d6decaf70"),
					to.Ptr("39246ad6-c521-4fed-8de7-77dede2e873f")},
				Comment:     to.Ptr("I'm ok with that"),
				DisplayName: to.Ptr("Offer display name"),
				OfferID:     to.Ptr("marketplacetestthirdparty.md-test-third-party-2"),
				PublisherID: to.Ptr("marketplacetestthirdparty"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AdminRequestApprovalsResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AdminRequestApprovalsResource)
			t.Fatalf("Mock response is not equal to example response for example specification/marketplace/resource-manager/Microsoft.Marketplace/stable/2021-06-01/examples/UpdateAdminRequestApproval.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateStore_QueryNotificationsState(t *testing.T) {
	// From example specification/marketplace/resource-manager/Microsoft.Marketplace/stable/2021-06-01/examples/NotificationsState.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"NotificationsState"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmarketplace.NewPrivateStoreClient(cred, &options)
	res, err := client.QueryNotificationsState(ctx,
		"a0e28e55-90c4-41d8-8e34-bb7ef7775406",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/marketplace/resource-manager/Microsoft.Marketplace/stable/2021-06-01/examples/NotificationsState.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmarketplace.PrivateStoreNotificationsState{
			ApprovalRequests: []*armmarketplace.RequestApprovalsDetails{
				{
					DisplayName: to.Ptr("Offer display name"),
					Icon:        to.Ptr("https://some-images.someDomail.com/image/apps.12345678-09876567894321"),
					MessageCode: to.Ptr[int64](0),
					OfferID:     to.Ptr("publisherId.legacyId"),
					Plans: []*armmarketplace.PlanNotificationDetails{
						{
							PlanDisplayName: to.Ptr("Plan Test display name"),
							PlanID:          to.Ptr("test-plan"),
						},
						{
							PlanDisplayName: to.Ptr("Plan Test display name B"),
							PlanID:          to.Ptr("test-planB"),
						}},
					PublisherID: to.Ptr("publisherId"),
				}},
			NewNotifications: []*armmarketplace.NewNotifications{
				{
					DisplayName:          to.Ptr("Offer display name C"),
					Icon:                 to.Ptr("https://some-images.someDomail.com/image/apps.12345678-76545678"),
					IsFuturePlansEnabled: to.Ptr(false),
					MessageCode:          to.Ptr[int64](10000),
					OfferID:              to.Ptr("publisherIdC.legacyIdC"),
					Plans: []*armmarketplace.PlanNotificationDetails{
						{
							PlanDisplayName: to.Ptr("Display Name Test"),
							PlanID:          to.Ptr("plan-test"),
						}},
				}},
			StopSellNotifications: []*armmarketplace.StopSellNotifications{
				{
					DisplayName: to.Ptr("Offer display name"),
					Icon:        to.Ptr("https://some-images.someDomail.com/image/apps.12345678-4321"),
					IsEntire:    to.Ptr(false),
					MessageCode: to.Ptr[int64](10002),
					OfferID:     to.Ptr("publisherId.legacyId"),
					Plans: []*armmarketplace.PlanNotificationDetails{
						{
							PlanDisplayName: to.Ptr("test123"),
							PlanID:          to.Ptr("aaa"),
						}},
				},
				{
					DisplayName: to.Ptr("Offer display name B"),
					Icon:        to.Ptr("https://some-images.someDomail.com/image/apps.12345678-7654"),
					IsEntire:    to.Ptr(true),
					MessageCode: to.Ptr[int64](10003),
					OfferID:     to.Ptr("publisherIdB.legacyIdB"),
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateStoreNotificationsState) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateStoreNotificationsState)
			t.Fatalf("Mock response is not equal to example response for example specification/marketplace/resource-manager/Microsoft.Marketplace/stable/2021-06-01/examples/NotificationsState.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateStore_AcknowledgeOfferNotification(t *testing.T) {
	// From example specification/marketplace/resource-manager/Microsoft.Marketplace/stable/2021-06-01/examples/AcknowledgeNotification.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AcknowledgeNotification"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmarketplace.NewPrivateStoreClient(cred, &options)
	_, err := client.AcknowledgeOfferNotification(ctx,
		"a0e28e55-90c4-41d8-8e34-bb7ef7775406",
		"marketplacetestthirdparty.md-test-third-party-2",
		&armmarketplace.PrivateStoreClientAcknowledgeOfferNotificationOptions{Payload: &armmarketplace.AcknowledgeOfferNotificationProperties{
			Properties: &armmarketplace.AcknowledgeOfferNotificationDetails{
				Acknowledge: to.Ptr(false),
				Dismiss:     to.Ptr(false),
				RemoveOffer: to.Ptr(false),
				RemovePlans: []*string{
					to.Ptr("testPlanA")},
			},
		},
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/marketplace/resource-manager/Microsoft.Marketplace/stable/2021-06-01/examples/AcknowledgeNotification.json: %v", err)
	}
}

func TestPrivateStore_WithdrawPlan(t *testing.T) {
	// From example specification/marketplace/resource-manager/Microsoft.Marketplace/stable/2021-06-01/examples/WithdrawPlan.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WithdrawPlan"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmarketplace.NewPrivateStoreClient(cred, &options)
	_, err := client.WithdrawPlan(ctx,
		"a0e28e55-90c4-41d8-8e34-bb7ef7775406",
		"marketplacetestthirdparty.md-test-third-party-2",
		&armmarketplace.PrivateStoreClientWithdrawPlanOptions{Payload: &armmarketplace.WithdrawProperties{
			Properties: &armmarketplace.WithdrawDetails{
				PlanID:      to.Ptr("*"),
				PublisherID: to.Ptr("marketplacetestthirdparty"),
			},
		},
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/marketplace/resource-manager/Microsoft.Marketplace/stable/2021-06-01/examples/WithdrawPlan.json: %v", err)
	}
}

func TestPrivateStoreCollection_List(t *testing.T) {
	// From example specification/marketplace/resource-manager/Microsoft.Marketplace/stable/2021-06-01/examples/GetPrivateStoreCollectionsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetPrivateStoreCollectionsList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmarketplace.NewPrivateStoreCollectionClient(cred, &options)
	res, err := client.List(ctx,
		"a0e28e55-90c4-41d8-8e34-bb7ef7775406",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/marketplace/resource-manager/Microsoft.Marketplace/stable/2021-06-01/examples/GetPrivateStoreCollectionsList.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmarketplace.CollectionsList{
			Value: []*armmarketplace.Collection{
				{
					Name: to.Ptr("56a1a02d-8cf8-45df-bf37-d5f7120fcb3d"),
					Type: to.Ptr("Microsoft.Marketplace/privateStores/collections"),
					ID:   to.Ptr("providers/Microsoft.Marketplace/privateStores/a0e28e55-90c4-41d8-8e34-bb7ef7775406/collections"),
					SystemData: &armmarketplace.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-02-01T10:23:17.6571572+02:00"); return t }()),
						CreatedBy:          to.Ptr("user@somedoamin.com"),
						CreatedByType:      to.Ptr(armmarketplace.IdentityTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-02-01T10:23:17.6571572+02:00"); return t }()),
						LastModifiedBy:     to.Ptr("user@somedoamin.com"),
						LastModifiedByType: to.Ptr(armmarketplace.IdentityTypeUser),
					},
					Properties: &armmarketplace.CollectionProperties{
						AllSubscriptions:  to.Ptr(true),
						Claim:             to.Ptr(""),
						CollectionID:      to.Ptr("56a1a02d-8cf8-45df-bf37-d5f7120fcb3d"),
						CollectionName:    to.Ptr("Default Collection"),
						SubscriptionsList: []*string{},
					},
				},
				{
					Name: to.Ptr("fba3f52c-874a-4010-87cf-c1cfa6ed3490"),
					Type: to.Ptr("Microsoft.Marketplace/privateStores/collections"),
					ID:   to.Ptr("providers/Microsoft.Marketplace/privateStores/a0e28e55-90c4-41d8-8e34-bb7ef7775406/collections"),
					SystemData: &armmarketplace.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-02-01T10:23:17.6571572+02:00"); return t }()),
						CreatedBy:          to.Ptr("user@somedoamin.com"),
						CreatedByType:      to.Ptr(armmarketplace.IdentityTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-02-01T10:23:17.6571572+02:00"); return t }()),
						LastModifiedBy:     to.Ptr("user@somedoamin.com"),
						LastModifiedByType: to.Ptr(armmarketplace.IdentityTypeUser),
					},
					Properties: &armmarketplace.CollectionProperties{
						AllSubscriptions: to.Ptr(false),
						Claim:            to.Ptr(""),
						CollectionID:     to.Ptr("56a1a02d-8cf8-45df-bf37-d5f7120fcb3d"),
						CollectionName:   to.Ptr("Dev collection"),
						SubscriptionsList: []*string{
							to.Ptr("7c927b63-59cf-4a0f-9d13-41e11f1ddf76")},
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.CollectionsList) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CollectionsList)
			t.Fatalf("Mock response is not equal to example response for example specification/marketplace/resource-manager/Microsoft.Marketplace/stable/2021-06-01/examples/GetPrivateStoreCollectionsList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateStoreCollection_Get(t *testing.T) {
	// From example specification/marketplace/resource-manager/Microsoft.Marketplace/stable/2021-06-01/examples/GetPrivateStoreCollection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetPrivateStoreCollection"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmarketplace.NewPrivateStoreCollectionClient(cred, &options)
	res, err := client.Get(ctx,
		"a0e28e55-90c4-41d8-8e34-bb7ef7775406",
		"56a1a02d-8cf8-45df-bf37-d5f7120fcb3d",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/marketplace/resource-manager/Microsoft.Marketplace/stable/2021-06-01/examples/GetPrivateStoreCollection.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmarketplace.Collection{
			Name: to.Ptr("56a1a02d-8cf8-45df-bf37-d5f7120fcb3d"),
			Type: to.Ptr("Microsoft.Marketplace/privateStores/collections"),
			ID:   to.Ptr("providers/Microsoft.Marketplace/privateStores/a0e28e55-90c4-41d8-8e34-bb7ef7775406/collections/56a1a02d-8cf8-45df-bf37-d5f7120fcb3d"),
			SystemData: &armmarketplace.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-02-01T10:23:17.6571572+02:00"); return t }()),
				CreatedBy:          to.Ptr("user@somedoamin.com"),
				CreatedByType:      to.Ptr(armmarketplace.IdentityTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-02-01T10:23:17.6571572+02:00"); return t }()),
				LastModifiedBy:     to.Ptr("user@somedoamin.com"),
				LastModifiedByType: to.Ptr(armmarketplace.IdentityTypeUser),
			},
			Properties: &armmarketplace.CollectionProperties{
				AllSubscriptions:  to.Ptr(true),
				Claim:             to.Ptr(""),
				CollectionID:      to.Ptr("56a1a02d-8cf8-45df-bf37-d5f7120fcb3d"),
				CollectionName:    to.Ptr("Default Collection"),
				SubscriptionsList: []*string{},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Collection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Collection)
			t.Fatalf("Mock response is not equal to example response for example specification/marketplace/resource-manager/Microsoft.Marketplace/stable/2021-06-01/examples/GetPrivateStoreCollection.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateStoreCollection_CreateOrUpdate(t *testing.T) {
	// From example specification/marketplace/resource-manager/Microsoft.Marketplace/stable/2021-06-01/examples/CreatePrivateStoreCollection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CreatePrivateStoreCollection"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmarketplace.NewPrivateStoreCollectionClient(cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"a0e28e55-90c4-41d8-8e34-bb7ef7775406",
		"d0f5aa2c-ecc3-4d87-906a-f8c486dcc4f1",
		&armmarketplace.PrivateStoreCollectionClientCreateOrUpdateOptions{Payload: &armmarketplace.Collection{
			Properties: &armmarketplace.CollectionProperties{
				AllSubscriptions: to.Ptr(false),
				Claim:            to.Ptr(""),
				CollectionName:   to.Ptr("Test Collection"),
				SubscriptionsList: []*string{
					to.Ptr("b340914e-353d-453a-85fb-8f9b65b51f91"),
					to.Ptr("f2baa04d-5bfc-461b-b6d8-61b403c9ec48")},
			},
		},
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/marketplace/resource-manager/Microsoft.Marketplace/stable/2021-06-01/examples/CreatePrivateStoreCollection.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmarketplace.Collection{
			Name: to.Ptr("d0f5aa2c-ecc3-4d87-906a-f8c486dcc4f1"),
			Type: to.Ptr("Microsoft.Marketplace/privateStores/collections"),
			ID:   to.Ptr("providers/Microsoft.Marketplace/privateStores/a0e28e55-90c4-41d8-8e34-bb7ef7775406/collections/d0f5aa2c-ecc3-4d87-906a-f8c486dcc4f1"),
			SystemData: &armmarketplace.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-01T10:23:17.6571572+02:00"); return t }()),
				CreatedBy:          to.Ptr("user@somedoamin.com"),
				CreatedByType:      to.Ptr(armmarketplace.IdentityTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-01T10:23:17.6571572+02:00"); return t }()),
				LastModifiedBy:     to.Ptr("user@somedoamin.com"),
				LastModifiedByType: to.Ptr(armmarketplace.IdentityTypeUser),
			},
			Properties: &armmarketplace.CollectionProperties{
				AllSubscriptions: to.Ptr(false),
				Claim:            to.Ptr(""),
				CollectionName:   to.Ptr("Test Collection"),
				SubscriptionsList: []*string{
					to.Ptr("b340914e-353d-453a-85fb-8f9b65b51f91"),
					to.Ptr("f2baa04d-5bfc-461b-b6d8-61b403c9ec48")},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Collection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Collection)
			t.Fatalf("Mock response is not equal to example response for example specification/marketplace/resource-manager/Microsoft.Marketplace/stable/2021-06-01/examples/CreatePrivateStoreCollection.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateStoreCollection_Delete(t *testing.T) {
	// From example specification/marketplace/resource-manager/Microsoft.Marketplace/stable/2021-06-01/examples/DeletePrivateStoreCollection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DeletePrivateStoreCollection"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmarketplace.NewPrivateStoreCollectionClient(cred, &options)
	_, err := client.Delete(ctx,
		"a0e28e55-90c4-41d8-8e34-bb7ef7775406",
		"d0f5aa2c-ecc3-4d87-906a-f8c486dcc4f1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/marketplace/resource-manager/Microsoft.Marketplace/stable/2021-06-01/examples/DeletePrivateStoreCollection.json: %v", err)
	}
}

func TestPrivateStoreCollection_Post(t *testing.T) {
	// From example specification/marketplace/resource-manager/Microsoft.Marketplace/stable/2021-06-01/examples/PostPrivateStoreCollection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PostPrivateStoreCollection"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmarketplace.NewPrivateStoreCollectionClient(cred, &options)
	_, err := client.Post(ctx,
		"a0e28e55-90c4-41d8-8e34-bb7ef7775406",
		"56a1a02d-8cf8-45df-bf37-d5f7120fcb3d",
		&armmarketplace.PrivateStoreCollectionClientPostOptions{Payload: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/marketplace/resource-manager/Microsoft.Marketplace/stable/2021-06-01/examples/PostPrivateStoreCollection.json: %v", err)
	}
}

func TestPrivateStoreCollection_TransferOffers(t *testing.T) {
	// From example specification/marketplace/resource-manager/Microsoft.Marketplace/stable/2021-06-01/examples/TransferOffers.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"TransferOffers"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmarketplace.NewPrivateStoreCollectionClient(cred, &options)
	res, err := client.TransferOffers(ctx,
		"a0e28e55-90c4-41d8-8e34-bb7ef7775406",
		"56a1a02d-8cf8-45df-bf37-d5f7120fcb3d",
		&armmarketplace.PrivateStoreCollectionClientTransferOffersOptions{Payload: &armmarketplace.TransferOffersProperties{
			Properties: &armmarketplace.TransferOffersDetails{
				OfferIDsList: []*string{
					to.Ptr("marketplacetestthirdparty.md-test-third-party-2"),
					to.Ptr("marketplacetestthirdparty.md-test-third-party-3")},
				Operation: to.Ptr("copy"),
				TargetCollections: []*string{
					to.Ptr("c752f021-1c37-4af5-b82f-74c51c27b44a"),
					to.Ptr("f47ef1c7-e908-4f39-ae29-db181634ad8d")},
			},
		},
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/marketplace/resource-manager/Microsoft.Marketplace/stable/2021-06-01/examples/TransferOffers.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmarketplace.TransferOffersResponse{
			Failed: []*armmarketplace.CollectionsDetails{
				{
					CollectionID:   to.Ptr("f47ef1c7-e908-4f39-ae29-db181634ad8d"),
					CollectionName: to.Ptr("Test collection 2"),
				}},
			Succeeded: []*armmarketplace.CollectionsDetails{
				{
					CollectionID:   to.Ptr("c752f021-1c37-4af5-b82f-74c51c27b44a"),
					CollectionName: to.Ptr("Test collection"),
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.TransferOffersResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.TransferOffersResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/marketplace/resource-manager/Microsoft.Marketplace/stable/2021-06-01/examples/TransferOffers.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateStoreCollectionOffer_List(t *testing.T) {
	// From example specification/marketplace/resource-manager/Microsoft.Marketplace/stable/2021-06-01/examples/GetPrivateStoreOffers.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetPrivateStoreOffers"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmarketplace.NewPrivateStoreCollectionOfferClient(cred, &options)
	pager := client.List("a0e28e55-90c4-41d8-8e34-bb7ef7775406",
		"56a1a02d-8cf8-45df-bf37-d5f7120fcb3d",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/marketplace/resource-manager/Microsoft.Marketplace/stable/2021-06-01/examples/GetPrivateStoreOffers.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmarketplace.OfferListResponse{
			Value: []*armmarketplace.Offer{
				{
					Name: to.Ptr("marketplacetestthirdparty.md-test-third-party-2"),
					Type: to.Ptr("Microsoft.Marketplace/privateStores/collections/offers"),
					ID:   to.Ptr("/providers/Microsoft.Marketplace/privateStores/a0e28e55-90c4-41d8-8e34-bb7ef7775406/collections/56a1a02d-8cf8-45df-bf37-d5f7120fcb3d/offers/marketplacetestthirdparty.md-test-third-party-2"),
					Properties: &armmarketplace.OfferProperties{
						CreatedAt:            to.Ptr("05/28/2015 5:50"),
						ETag:                 to.Ptr("\"9301f4fd-0000-0100-0000-5e248b350000\""),
						ModifiedAt:           to.Ptr("05/29/2015 5:50"),
						OfferDisplayName:     to.Ptr("md-test-third-party-2"),
						PrivateStoreID:       to.Ptr("a0e28e55-90c4-41d8-8e34-bb7ef7775406"),
						PublisherDisplayName: to.Ptr("Marketplace Test Third Party"),
						SpecificPlanIDsLimitation: []*string{
							to.Ptr("0001"),
							to.Ptr("0002"),
							to.Ptr("0003")},
						UniqueOfferID: to.Ptr("marketplacetestthirdparty.md-test-third-party-2"),
					},
				},
				{
					Name: to.Ptr("marketplacetestthirdparty.md-test-third-party-2"),
					Type: to.Ptr("Microsoft.Marketplace/privateStores/collections/offers"),
					ID:   to.Ptr("/providers/Microsoft.Marketplace/privateStores/a0e28e55-90c4-41d8-8e34-bb7ef7775406/collections/56a1a02d-8cf8-45df-bf37-d5f7120fcb3d/offers/marketplacetestthirdparty.md-test-third-party-3"),
					Properties: &armmarketplace.OfferProperties{
						CreatedAt:            to.Ptr("05/28/2015 5:50"),
						ETag:                 to.Ptr("\"9301f4fd-0000-0100-0304-5e248b350043\""),
						ModifiedAt:           to.Ptr("05/29/2015 5:50"),
						OfferDisplayName:     to.Ptr("md-test-third-party-3"),
						PrivateStoreID:       to.Ptr("a0e28e55-90c4-41d8-8e34-bb7ef7775406"),
						PublisherDisplayName: to.Ptr("Marketplace Test Third Party"),
						SpecificPlanIDsLimitation: []*string{
							to.Ptr("0001"),
							to.Ptr("0002")},
						UniqueOfferID: to.Ptr("marketplacetestthirdparty.md-test-third-party-3"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OfferListResponse) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OfferListResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/marketplace/resource-manager/Microsoft.Marketplace/stable/2021-06-01/examples/GetPrivateStoreOffers.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateStoreCollectionOffer_Get(t *testing.T) {
	// From example specification/marketplace/resource-manager/Microsoft.Marketplace/stable/2021-06-01/examples/GetPrivateStoreCollectionOffer.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetPrivateStoreCollectionOffer"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmarketplace.NewPrivateStoreCollectionOfferClient(cred, &options)
	res, err := client.Get(ctx,
		"a0e28e55-90c4-41d8-8e34-bb7ef7775406",
		"marketplacetestthirdparty.md-test-third-party-2",
		"56a1a02d-8cf8-45df-bf37-d5f7120fcb3d",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/marketplace/resource-manager/Microsoft.Marketplace/stable/2021-06-01/examples/GetPrivateStoreCollectionOffer.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmarketplace.Offer{
			Name: to.Ptr("marketplacetestthirdparty.md-test-third-party-2"),
			Type: to.Ptr("Microsoft.Marketplace/privateStores/collections/offers"),
			ID:   to.Ptr("/providers/Microsoft.Marketplace/privateStores/a0e28e55-90c4-41d8-8e34-bb7ef7775406/collections/56a1a02d-8cf8-45df-bf37-d5f7120fcb3d/offers/marketplacetestthirdparty.md-test-third-party-2"),
			Properties: &armmarketplace.OfferProperties{
				CreatedAt:            to.Ptr("05/28/2015 5:50"),
				ETag:                 to.Ptr("\"9301f4fd-0000-0100-0000-5e248b350000\""),
				ModifiedAt:           to.Ptr("05/29/2015 5:50"),
				OfferDisplayName:     to.Ptr("md-test-third-party-2"),
				PrivateStoreID:       to.Ptr("a0e28e55-90c4-41d8-8e34-bb7ef7775406"),
				PublisherDisplayName: to.Ptr("Marketplace Test Third Party"),
				SpecificPlanIDsLimitation: []*string{
					to.Ptr("0001"),
					to.Ptr("0002"),
					to.Ptr("0003")},
				UniqueOfferID: to.Ptr("marketplacetestthirdparty.md-test-third-party-2"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Offer) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Offer)
			t.Fatalf("Mock response is not equal to example response for example specification/marketplace/resource-manager/Microsoft.Marketplace/stable/2021-06-01/examples/GetPrivateStoreCollectionOffer.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateStoreCollectionOffer_CreateOrUpdate(t *testing.T) {
	// From example specification/marketplace/resource-manager/Microsoft.Marketplace/stable/2021-06-01/examples/PrivateStoreOffer_update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateStoreOffer_update"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmarketplace.NewPrivateStoreCollectionOfferClient(cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"a0e28e55-90c4-41d8-8e34-bb7ef7775406",
		"marketplacetestthirdparty.md-test-third-party-2",
		"56a1a02d-8cf8-45df-bf37-d5f7120fcb3d",
		&armmarketplace.PrivateStoreCollectionOfferClientCreateOrUpdateOptions{Payload: &armmarketplace.Offer{
			Properties: &armmarketplace.OfferProperties{
				ETag: to.Ptr("\"9301f4fd-0000-0100-0000-5e248b350666\""),
				SpecificPlanIDsLimitation: []*string{
					to.Ptr("0001"),
					to.Ptr("0002")},
			},
		},
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/marketplace/resource-manager/Microsoft.Marketplace/stable/2021-06-01/examples/PrivateStoreOffer_update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmarketplace.Offer{
			Name: to.Ptr("marketplacetestthirdparty.md-test-third-party-2"),
			Type: to.Ptr("Microsoft.Marketplace/privateStores/collections/offers"),
			ID:   to.Ptr("/providers/Microsoft.Marketplace/privateStores/a0e28e55-90c4-41d8-8e34-bb7ef7775406/collections/56a1a02d-8cf8-45df-bf37-d5f7120fcb3d/offers/marketplacetestthirdparty.md-test-third-party-2"),
			Properties: &armmarketplace.OfferProperties{
				CreatedAt:            to.Ptr("05/28/2015 5:50"),
				ETag:                 to.Ptr("\"9301f4fd-0000-0100-0000-5e248b350666\""),
				ModifiedAt:           to.Ptr("05/29/2015 5:50"),
				OfferDisplayName:     to.Ptr("md-test-third-party-2"),
				PrivateStoreID:       to.Ptr("a0e28e55-90c4-41d8-8e34-bb7ef7775406"),
				PublisherDisplayName: to.Ptr("Marketplace Test Third Party"),
				SpecificPlanIDsLimitation: []*string{
					to.Ptr("0001"),
					to.Ptr("0002")},
				UniqueOfferID: to.Ptr("marketplacetestthirdparty.md-test-third-party-2"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Offer) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Offer)
			t.Fatalf("Mock response is not equal to example response for example specification/marketplace/resource-manager/Microsoft.Marketplace/stable/2021-06-01/examples/PrivateStoreOffer_update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateStoreCollectionOffer_Delete(t *testing.T) {
	// From example specification/marketplace/resource-manager/Microsoft.Marketplace/stable/2021-06-01/examples/DeletePrivateStoreOffer.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DeletePrivateStoreOffer"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmarketplace.NewPrivateStoreCollectionOfferClient(cred, &options)
	_, err := client.Delete(ctx,
		"a0e28e55-90c4-41d8-8e34-bb7ef7775406",
		"marketplacetestthirdparty.md-test-third-party-2",
		"56a1a02d-8cf8-45df-bf37-d5f7120fcb3d",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/marketplace/resource-manager/Microsoft.Marketplace/stable/2021-06-01/examples/DeletePrivateStoreOffer.json: %v", err)
	}
}

func TestPrivateStoreCollectionOffer_Post(t *testing.T) {
	// From example specification/marketplace/resource-manager/Microsoft.Marketplace/stable/2021-06-01/examples/PostPrivateStoreCollectionOffer.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PostPrivateStoreCollectionOffer"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmarketplace.NewPrivateStoreCollectionOfferClient(cred, &options)
	_, err := client.Post(ctx,
		"a0e28e55-90c4-41d8-8e34-bb7ef7775406",
		"marketplacetestthirdparty.md-test-third-party-2",
		"56a1a02d-8cf8-45df-bf37-d5f7120fcb3d",
		&armmarketplace.PrivateStoreCollectionOfferClientPostOptions{Payload: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/marketplace/resource-manager/Microsoft.Marketplace/stable/2021-06-01/examples/PostPrivateStoreCollectionOffer.json: %v", err)
	}
}

func TestOperations_List(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
