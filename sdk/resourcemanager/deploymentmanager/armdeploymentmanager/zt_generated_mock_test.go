//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armdeploymentmanager_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/deploymentmanager/armdeploymentmanager"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestServiceTopologies_CreateOrUpdate(t *testing.T) {
	// From example specification/deploymentmanager/resource-manager/Microsoft.DeploymentManager/preview/2019-11-01-preview/examples/servicetopology_createorupdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a topology with Artifact Source"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdeploymentmanager.NewServiceTopologiesClient("caac1590-e859-444f-a9e0-62091c0f5929", cred, &options)
	_, err := client.CreateOrUpdate(ctx,
		"myResourceGroup",
		"myTopology",
		armdeploymentmanager.ServiceTopologyResource{
			Location: to.Ptr("centralus"),
			Tags:     map[string]*string{},
			Properties: &armdeploymentmanager.ServiceTopologyResourceProperties{
				ArtifactSourceID: to.Ptr("Microsoft.DeploymentManager/artifactSources/myArtifactSource"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/deploymentmanager/resource-manager/Microsoft.DeploymentManager/preview/2019-11-01-preview/examples/servicetopology_createorupdate.json: %v", err)
	}

	// From example specification/deploymentmanager/resource-manager/Microsoft.DeploymentManager/preview/2019-11-01-preview/examples/servicetopology_createorupdate_noartifactsource.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a topology without Artifact Source"},
	})
	client = armdeploymentmanager.NewServiceTopologiesClient("caac1590-e859-444f-a9e0-62091c0f5929", cred, &options)
	_, err = client.CreateOrUpdate(ctx,
		"myResourceGroup",
		"myTopology",
		armdeploymentmanager.ServiceTopologyResource{
			Location:   to.Ptr("centralus"),
			Tags:       map[string]*string{},
			Properties: &armdeploymentmanager.ServiceTopologyResourceProperties{},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/deploymentmanager/resource-manager/Microsoft.DeploymentManager/preview/2019-11-01-preview/examples/servicetopology_createorupdate_noartifactsource.json: %v", err)
	}
}

func TestServiceTopologies_Get(t *testing.T) {
	// From example specification/deploymentmanager/resource-manager/Microsoft.DeploymentManager/preview/2019-11-01-preview/examples/servicetopology_get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get topology"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdeploymentmanager.NewServiceTopologiesClient("caac1590-e859-444f-a9e0-62091c0f5929", cred, &options)
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myTopology",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/deploymentmanager/resource-manager/Microsoft.DeploymentManager/preview/2019-11-01-preview/examples/servicetopology_get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdeploymentmanager.ServiceTopologyResource{
			Name:     to.Ptr("myTopology"),
			Type:     to.Ptr("Microsoft.DeploymentManager/serviceTopologies"),
			Location: to.Ptr("centralus"),
			Tags:     map[string]*string{},
			Properties: &armdeploymentmanager.ServiceTopologyResourceProperties{
				ArtifactSourceID: to.Ptr("Microsoft.DeploymentManager/artifactSources/myArtifactSource"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServiceTopologyResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServiceTopologyResource)
			t.Fatalf("Mock response is not equal to example response for example specification/deploymentmanager/resource-manager/Microsoft.DeploymentManager/preview/2019-11-01-preview/examples/servicetopology_get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServiceTopologies_Delete(t *testing.T) {
	// From example specification/deploymentmanager/resource-manager/Microsoft.DeploymentManager/preview/2019-11-01-preview/examples/servicetopology_delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete topology"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdeploymentmanager.NewServiceTopologiesClient("caac1590-e859-444f-a9e0-62091c0f5929", cred, &options)
	_, err := client.Delete(ctx,
		"myResourceGroup",
		"myTopology",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/deploymentmanager/resource-manager/Microsoft.DeploymentManager/preview/2019-11-01-preview/examples/servicetopology_delete.json: %v", err)
	}
}

func TestServiceTopologies_List(t *testing.T) {
	// From example specification/deploymentmanager/resource-manager/Microsoft.DeploymentManager/preview/2019-11-01-preview/examples/servicetopologies_list.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List topologies"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdeploymentmanager.NewServiceTopologiesClient("caac1590-e859-444f-a9e0-62091c0f5929", cred, &options)
	res, err := client.List(ctx,
		"myResourceGroup",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/deploymentmanager/resource-manager/Microsoft.DeploymentManager/preview/2019-11-01-preview/examples/servicetopologies_list.json: %v", err)
	}
	// Response check
	{
		exampleRes := []*armdeploymentmanager.ServiceTopologyResource{
			{
				Name:     to.Ptr("ContosoSvc1Topology"),
				Type:     to.Ptr("Microsoft.DeploymentManager/serviceTopologies"),
				Location: to.Ptr("centralus"),
				Tags:     map[string]*string{},
				Properties: &armdeploymentmanager.ServiceTopologyResourceProperties{
					ArtifactSourceID: to.Ptr("Microsoft.DeploymentManager/artifactSources/contoso1ArtifactSource"),
				},
			},
			{
				Name:     to.Ptr("ContosoSvc2Topology"),
				Type:     to.Ptr("Microsoft.DeploymentManager/serviceTopologies"),
				Location: to.Ptr("centralus"),
				Tags:     map[string]*string{},
				Properties: &armdeploymentmanager.ServiceTopologyResourceProperties{
					ArtifactSourceID: to.Ptr("Microsoft.DeploymentManager/artifactSources/contoso2ArtifactSource"),
				},
			}}
		if !reflect.DeepEqual(exampleRes, res.ServiceTopologyResourceArray) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServiceTopologyResourceArray)
			t.Fatalf("Mock response is not equal to example response for example specification/deploymentmanager/resource-manager/Microsoft.DeploymentManager/preview/2019-11-01-preview/examples/servicetopologies_list.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServices_CreateOrUpdate(t *testing.T) {
	// From example specification/deploymentmanager/resource-manager/Microsoft.DeploymentManager/preview/2019-11-01-preview/examples/service_createorupdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create service"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdeploymentmanager.NewServicesClient("caac1590-e859-444f-a9e0-62091c0f5929", cred, &options)
	_, err := client.CreateOrUpdate(ctx,
		"myResourceGroup",
		"myTopology",
		"myService",
		armdeploymentmanager.ServiceResource{
			Location: to.Ptr("centralus"),
			Tags:     map[string]*string{},
			Properties: &armdeploymentmanager.ServiceResourceProperties{
				TargetLocation:       to.Ptr("centralus"),
				TargetSubscriptionID: to.Ptr("600c95c5-3ee5-44fe-b190-ca38a19adcd7"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/deploymentmanager/resource-manager/Microsoft.DeploymentManager/preview/2019-11-01-preview/examples/service_createorupdate.json: %v", err)
	}
}

func TestServices_Get(t *testing.T) {
	// From example specification/deploymentmanager/resource-manager/Microsoft.DeploymentManager/preview/2019-11-01-preview/examples/service_get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get service"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdeploymentmanager.NewServicesClient("caac1590-e859-444f-a9e0-62091c0f5929", cred, &options)
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myTopology",
		"myService",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/deploymentmanager/resource-manager/Microsoft.DeploymentManager/preview/2019-11-01-preview/examples/service_get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdeploymentmanager.ServiceResource{
			Name:     to.Ptr("myService"),
			Type:     to.Ptr("Microsoft.DeploymentManager/serviceTopologies/services"),
			Location: to.Ptr("centralus"),
			Tags:     map[string]*string{},
			Properties: &armdeploymentmanager.ServiceResourceProperties{
				TargetLocation:       to.Ptr("centralus"),
				TargetSubscriptionID: to.Ptr("600c95c5-3ee5-44fe-b190-ca38a19adcd7"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServiceResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServiceResource)
			t.Fatalf("Mock response is not equal to example response for example specification/deploymentmanager/resource-manager/Microsoft.DeploymentManager/preview/2019-11-01-preview/examples/service_get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServices_Delete(t *testing.T) {
	// From example specification/deploymentmanager/resource-manager/Microsoft.DeploymentManager/preview/2019-11-01-preview/examples/service_delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete service"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdeploymentmanager.NewServicesClient("caac1590-e859-444f-a9e0-62091c0f5929", cred, &options)
	_, err := client.Delete(ctx,
		"myResourceGroup",
		"myTopology",
		"myService",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/deploymentmanager/resource-manager/Microsoft.DeploymentManager/preview/2019-11-01-preview/examples/service_delete.json: %v", err)
	}
}

func TestServices_List(t *testing.T) {
	// From example specification/deploymentmanager/resource-manager/Microsoft.DeploymentManager/preview/2019-11-01-preview/examples/services_list.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List services"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdeploymentmanager.NewServicesClient("caac1590-e859-444f-a9e0-62091c0f5929", cred, &options)
	res, err := client.List(ctx,
		"myResourceGroup",
		"myTopology",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/deploymentmanager/resource-manager/Microsoft.DeploymentManager/preview/2019-11-01-preview/examples/services_list.json: %v", err)
	}
	// Response check
	{
		exampleRes := []*armdeploymentmanager.ServiceResource{
			{
				Name:     to.Ptr("Service East"),
				Type:     to.Ptr("Microsoft.DeploymentManager/serviceTopologies/services"),
				Location: to.Ptr("centralus"),
				Tags:     map[string]*string{},
				Properties: &armdeploymentmanager.ServiceResourceProperties{
					TargetLocation:       to.Ptr("eastus"),
					TargetSubscriptionID: to.Ptr("600c95c5-3ee5-44fe-b190-ca38a19adcd7"),
				},
			},
			{
				Name:     to.Ptr("Service West"),
				Type:     to.Ptr("Microsoft.DeploymentManager/serviceTopologies/services"),
				Location: to.Ptr("centralus"),
				Tags:     map[string]*string{},
				Properties: &armdeploymentmanager.ServiceResourceProperties{
					TargetLocation:       to.Ptr("westus"),
					TargetSubscriptionID: to.Ptr("600c95c5-3ee5-44fe-b190-ca38a19adcd7"),
				},
			}}
		if !reflect.DeepEqual(exampleRes, res.ServiceResourceArray) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServiceResourceArray)
			t.Fatalf("Mock response is not equal to example response for example specification/deploymentmanager/resource-manager/Microsoft.DeploymentManager/preview/2019-11-01-preview/examples/services_list.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServiceUnits_CreateOrUpdate(t *testing.T) {
	// From example specification/deploymentmanager/resource-manager/Microsoft.DeploymentManager/preview/2019-11-01-preview/examples/serviceunit_createorupdate_noartifactsource.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create service unit using SAS URIs"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdeploymentmanager.NewServiceUnitsClient("caac1590-e859-444f-a9e0-62091c0f5929", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myTopology",
		"myService",
		"myServiceUnit",
		armdeploymentmanager.ServiceUnitResource{
			Location: to.Ptr("centralus"),
			Tags:     map[string]*string{},
			Properties: &armdeploymentmanager.ServiceUnitResourceProperties{
				Artifacts: &armdeploymentmanager.ServiceUnitArtifacts{
					ParametersURI: to.Ptr("https://mystorageaccount.blob.core.windows.net/myartifactsource/parameter/myTopologyUnit.parameters.json?st=2018-07-07T14%3A10%3A00Z&se=2019-12-31T15%3A10%3A00Z&sp=rl&sv=2017-04-17&sr=c&sig=Yh2SoJ1NhhLRwCLln7de%2Fkabcdefghijklmno5sWEIk%3D"),
					TemplateURI:   to.Ptr("https://mystorageaccount.blob.core.windows.net/myartifactsource/templates/myTopologyUnit.template.json?st=2018-07-07T14%3A10%3A00Z&se=2019-12-31T15%3A10%3A00Z&sp=rl&sv=2017-04-17&sr=c&sig=Yh2SoJ1NhhLRwCLln7de%2Fkabcdefghijklmno5sWEIk%3D"),
				},
				DeploymentMode:      to.Ptr(armdeploymentmanager.DeploymentModeIncremental),
				TargetResourceGroup: to.Ptr("myDeploymentResourceGroup"),
			},
		},
		&armdeploymentmanager.ServiceUnitsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/deploymentmanager/resource-manager/Microsoft.DeploymentManager/preview/2019-11-01-preview/examples/serviceunit_createorupdate_noartifactsource.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/deploymentmanager/resource-manager/Microsoft.DeploymentManager/preview/2019-11-01-preview/examples/serviceunit_createorupdate_noartifactsource.json: %v", err)
	}

	// From example specification/deploymentmanager/resource-manager/Microsoft.DeploymentManager/preview/2019-11-01-preview/examples/serviceunit_createorupdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create service unit using relative paths into the artifact source"},
	})
	client = armdeploymentmanager.NewServiceUnitsClient("caac1590-e859-444f-a9e0-62091c0f5929", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myTopology",
		"myService",
		"myServiceUnit",
		armdeploymentmanager.ServiceUnitResource{
			Location: to.Ptr("centralus"),
			Tags:     map[string]*string{},
			Properties: &armdeploymentmanager.ServiceUnitResourceProperties{
				Artifacts: &armdeploymentmanager.ServiceUnitArtifacts{
					ParametersArtifactSourceRelativePath: to.Ptr("parameter/myTopologyUnit.parameters.json"),
					TemplateArtifactSourceRelativePath:   to.Ptr("templates/myTopologyUnit.template.json"),
				},
				DeploymentMode:      to.Ptr(armdeploymentmanager.DeploymentModeIncremental),
				TargetResourceGroup: to.Ptr("myDeploymentResourceGroup"),
			},
		},
		&armdeploymentmanager.ServiceUnitsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/deploymentmanager/resource-manager/Microsoft.DeploymentManager/preview/2019-11-01-preview/examples/serviceunit_createorupdate.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/deploymentmanager/resource-manager/Microsoft.DeploymentManager/preview/2019-11-01-preview/examples/serviceunit_createorupdate.json: %v", err)
	}
}

func TestServiceUnits_Get(t *testing.T) {
	// From example specification/deploymentmanager/resource-manager/Microsoft.DeploymentManager/preview/2019-11-01-preview/examples/serviceunit_get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get service unit"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdeploymentmanager.NewServiceUnitsClient("caac1590-e859-444f-a9e0-62091c0f5929", cred, &options)
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myTopology",
		"myService",
		"myServiceUnit",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/deploymentmanager/resource-manager/Microsoft.DeploymentManager/preview/2019-11-01-preview/examples/serviceunit_get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdeploymentmanager.ServiceUnitResource{
			Name:     to.Ptr("myServiceUnit"),
			Type:     to.Ptr("Microsoft.DeploymentManager/servicetopologies/services/serviceunits"),
			Location: to.Ptr("centralus"),
			Tags:     map[string]*string{},
			Properties: &armdeploymentmanager.ServiceUnitResourceProperties{
				Artifacts: &armdeploymentmanager.ServiceUnitArtifacts{
					ParametersArtifactSourceRelativePath: to.Ptr("parameter/myTopologyUnit.parameters.json"),
					TemplateArtifactSourceRelativePath:   to.Ptr("templates/myTopologyUnit.template.json"),
				},
				DeploymentMode:      to.Ptr(armdeploymentmanager.DeploymentModeIncremental),
				TargetResourceGroup: to.Ptr("myDeploymentResourceGroup"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServiceUnitResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServiceUnitResource)
			t.Fatalf("Mock response is not equal to example response for example specification/deploymentmanager/resource-manager/Microsoft.DeploymentManager/preview/2019-11-01-preview/examples/serviceunit_get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServiceUnits_Delete(t *testing.T) {
	// From example specification/deploymentmanager/resource-manager/Microsoft.DeploymentManager/preview/2019-11-01-preview/examples/serviceunit_delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete service unit"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdeploymentmanager.NewServiceUnitsClient("caac1590-e859-444f-a9e0-62091c0f5929", cred, &options)
	_, err := client.Delete(ctx,
		"myResourceGroup",
		"myTopology",
		"myService",
		"myServiceUnit",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/deploymentmanager/resource-manager/Microsoft.DeploymentManager/preview/2019-11-01-preview/examples/serviceunit_delete.json: %v", err)
	}
}

func TestServiceUnits_List(t *testing.T) {
	// From example specification/deploymentmanager/resource-manager/Microsoft.DeploymentManager/preview/2019-11-01-preview/examples/serviceunits_list.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List service units"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdeploymentmanager.NewServiceUnitsClient("caac1590-e859-444f-a9e0-62091c0f5929", cred, &options)
	res, err := client.List(ctx,
		"myResourceGroup",
		"myTopology",
		"myService",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/deploymentmanager/resource-manager/Microsoft.DeploymentManager/preview/2019-11-01-preview/examples/serviceunits_list.json: %v", err)
	}
	// Response check
	{
		exampleRes := []*armdeploymentmanager.ServiceUnitResource{
			{
				Name:     to.Ptr("BackEndServiceUnit"),
				Type:     to.Ptr("Microsoft.DeploymentManager/servicetopologies/services/serviceunits"),
				Location: to.Ptr("centralus"),
				Tags:     map[string]*string{},
				Properties: &armdeploymentmanager.ServiceUnitResourceProperties{
					Artifacts: &armdeploymentmanager.ServiceUnitArtifacts{
						ParametersArtifactSourceRelativePath: to.Ptr("parameter/backend.parameters.json"),
						TemplateArtifactSourceRelativePath:   to.Ptr("templates/backend.template.json"),
					},
					DeploymentMode:      to.Ptr(armdeploymentmanager.DeploymentModeIncremental),
					TargetResourceGroup: to.Ptr("myDeploymentResourceGroup"),
				},
			},
			{
				Name:     to.Ptr("FrontEndServiceUnit"),
				Type:     to.Ptr("Microsoft.DeploymentManager/servicetopologies/services/serviceunits"),
				Location: to.Ptr("centralus"),
				Tags:     map[string]*string{},
				Properties: &armdeploymentmanager.ServiceUnitResourceProperties{
					Artifacts: &armdeploymentmanager.ServiceUnitArtifacts{
						ParametersArtifactSourceRelativePath: to.Ptr("parameter/frontend.parameters.json"),
						TemplateArtifactSourceRelativePath:   to.Ptr("templates/frontend.template.json"),
					},
					DeploymentMode:      to.Ptr(armdeploymentmanager.DeploymentModeComplete),
					TargetResourceGroup: to.Ptr("myDeploymentResourceGroup"),
				},
			}}
		if !reflect.DeepEqual(exampleRes, res.ServiceUnitResourceArray) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServiceUnitResourceArray)
			t.Fatalf("Mock response is not equal to example response for example specification/deploymentmanager/resource-manager/Microsoft.DeploymentManager/preview/2019-11-01-preview/examples/serviceunits_list.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSteps_CreateOrUpdate(t *testing.T) {
	// From example specification/deploymentmanager/resource-manager/Microsoft.DeploymentManager/preview/2019-11-01-preview/examples/step_health_check_createorupdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create health check step"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdeploymentmanager.NewStepsClient("caac1590-e859-444f-a9e0-62091c0f5929", cred, &options)
	_, err := client.CreateOrUpdate(ctx,
		"myResourceGroup",
		"healthCheckStep",
		&armdeploymentmanager.StepsClientCreateOrUpdateOptions{StepInfo: &armdeploymentmanager.StepResource{
			Location: to.Ptr("centralus"),
			Tags:     map[string]*string{},
			Properties: &armdeploymentmanager.HealthCheckStepProperties{
				StepType: to.Ptr(armdeploymentmanager.StepTypeHealthCheck),
				Attributes: &armdeploymentmanager.RestHealthCheckStepAttributes{
					Type:                 to.Ptr("REST"),
					HealthyStateDuration: to.Ptr("PT2H"),
					MaxElasticDuration:   to.Ptr("PT30M"),
					WaitDuration:         to.Ptr("PT15M"),
					Properties: &armdeploymentmanager.RestParameters{
						HealthChecks: []*armdeploymentmanager.RestHealthCheck{
							{
								Name: to.Ptr("appHealth"),
								Response: &armdeploymentmanager.RestResponse{
									Regex: &armdeploymentmanager.RestResponseRegex{
										MatchQuantifier: to.Ptr(armdeploymentmanager.RestMatchQuantifierAll),
										Matches: []*string{
											to.Ptr("(?i)Contoso-App"),
											to.Ptr("(?i)\"health_status\":((.|\n)*)\"(green|yellow)\""),
											to.Ptr("(?mi)^(\"application_host\": 94781052)$")},
									},
									SuccessStatusCodes: []*string{
										to.Ptr("OK")},
								},
								Request: &armdeploymentmanager.RestRequest{
									Method: to.Ptr(armdeploymentmanager.RestRequestMethodGET),
									Authentication: &armdeploymentmanager.APIKeyAuthentication{
										Type:  to.Ptr(armdeploymentmanager.RestAuthTypeAPIKey),
										Name:  to.Ptr("Code"),
										In:    to.Ptr(armdeploymentmanager.RestAuthLocationQuery),
										Value: to.Ptr("NBCapiMOBQyAAbCkeytoPadnvO0eGHmidwFz5rXpappznKp3Jt7LLg=="),
									},
									URI: to.Ptr("https://resthealth.healthservice.com/api/applications/contosoApp/healthStatus"),
								},
							},
							{
								Name: to.Ptr("serviceHealth"),
								Response: &armdeploymentmanager.RestResponse{
									Regex: &armdeploymentmanager.RestResponseRegex{
										MatchQuantifier: to.Ptr(armdeploymentmanager.RestMatchQuantifierAll),
										Matches: []*string{
											to.Ptr("(?i)Contoso-Service-EndToEnd"),
											to.Ptr("(?i)\"health_status\":((.|\n)*)\"(green)\"")},
									},
									SuccessStatusCodes: []*string{
										to.Ptr("OK")},
								},
								Request: &armdeploymentmanager.RestRequest{
									Method: to.Ptr(armdeploymentmanager.RestRequestMethodGET),
									Authentication: &armdeploymentmanager.APIKeyAuthentication{
										Type:  to.Ptr(armdeploymentmanager.RestAuthTypeAPIKey),
										Name:  to.Ptr("code"),
										In:    to.Ptr(armdeploymentmanager.RestAuthLocationHeader),
										Value: to.Ptr("NBCapiMOBQyAAbCkeytoPadnvO0eGHmidwFz5rXpappznKp3Jt7LLg=="),
									},
									URI: to.Ptr("https://resthealth.healthservice.com/api/services/contosoService/healthStatus"),
								},
							}},
					},
				},
			},
		},
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/deploymentmanager/resource-manager/Microsoft.DeploymentManager/preview/2019-11-01-preview/examples/step_health_check_createorupdate.json: %v", err)
	}

	// From example specification/deploymentmanager/resource-manager/Microsoft.DeploymentManager/preview/2019-11-01-preview/examples/step_wait_createorupdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create wait step"},
	})
	client = armdeploymentmanager.NewStepsClient("caac1590-e859-444f-a9e0-62091c0f5929", cred, &options)
	_, err = client.CreateOrUpdate(ctx,
		"myResourceGroup",
		"waitStep",
		&armdeploymentmanager.StepsClientCreateOrUpdateOptions{StepInfo: &armdeploymentmanager.StepResource{
			Location: to.Ptr("centralus"),
			Tags:     map[string]*string{},
			Properties: &armdeploymentmanager.WaitStepProperties{
				StepType: to.Ptr(armdeploymentmanager.StepTypeWait),
				Attributes: &armdeploymentmanager.WaitStepAttributes{
					Duration: to.Ptr("PT20M"),
				},
			},
		},
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/deploymentmanager/resource-manager/Microsoft.DeploymentManager/preview/2019-11-01-preview/examples/step_wait_createorupdate.json: %v", err)
	}
}

func TestSteps_Get(t *testing.T) {
	// From example specification/deploymentmanager/resource-manager/Microsoft.DeploymentManager/preview/2019-11-01-preview/examples/step_get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get deployment step"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdeploymentmanager.NewStepsClient("caac1590-e859-444f-a9e0-62091c0f5929", cred, &options)
	res, err := client.Get(ctx,
		"myResourceGroup",
		"waitStep",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/deploymentmanager/resource-manager/Microsoft.DeploymentManager/preview/2019-11-01-preview/examples/step_get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdeploymentmanager.StepResource{
			Name:     to.Ptr("deploymentStep1"),
			Type:     to.Ptr("Microsoft.DeploymentManager/steps"),
			Location: to.Ptr("centralus"),
			Tags:     map[string]*string{},
			Properties: &armdeploymentmanager.WaitStepProperties{
				StepType: to.Ptr(armdeploymentmanager.StepTypeWait),
				Attributes: &armdeploymentmanager.WaitStepAttributes{
					Duration: to.Ptr("PT20M"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.StepResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.StepResource)
			t.Fatalf("Mock response is not equal to example response for example specification/deploymentmanager/resource-manager/Microsoft.DeploymentManager/preview/2019-11-01-preview/examples/step_get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSteps_Delete(t *testing.T) {
	// From example specification/deploymentmanager/resource-manager/Microsoft.DeploymentManager/preview/2019-11-01-preview/examples/step_delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete deployment step"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdeploymentmanager.NewStepsClient("caac1590-e859-444f-a9e0-62091c0f5929", cred, &options)
	_, err := client.Delete(ctx,
		"myResourceGroup",
		"deploymentStep1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/deploymentmanager/resource-manager/Microsoft.DeploymentManager/preview/2019-11-01-preview/examples/step_delete.json: %v", err)
	}
}

func TestSteps_List(t *testing.T) {
	// From example specification/deploymentmanager/resource-manager/Microsoft.DeploymentManager/preview/2019-11-01-preview/examples/steps_list.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List steps"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdeploymentmanager.NewStepsClient("caac1590-e859-444f-a9e0-62091c0f5929", cred, &options)
	res, err := client.List(ctx,
		"myResourceGroup",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/deploymentmanager/resource-manager/Microsoft.DeploymentManager/preview/2019-11-01-preview/examples/steps_list.json: %v", err)
	}
	// Response check
	{
		exampleRes := []*armdeploymentmanager.StepResource{
			{
				Name:     to.Ptr("waitStepfrontEnd"),
				Type:     to.Ptr("Microsoft.DeploymentManager/steps"),
				Location: to.Ptr("centralus"),
				Tags:     map[string]*string{},
				Properties: &armdeploymentmanager.WaitStepProperties{
					StepType: to.Ptr(armdeploymentmanager.StepTypeWait),
					Attributes: &armdeploymentmanager.WaitStepAttributes{
						Duration: to.Ptr("PT10M"),
					},
				},
			},
			{
				Name:     to.Ptr("waitStepBackEnd"),
				Type:     to.Ptr("Microsoft.DeploymentManager/steps"),
				Location: to.Ptr("centralus"),
				Tags:     map[string]*string{},
				Properties: &armdeploymentmanager.WaitStepProperties{
					StepType: to.Ptr(armdeploymentmanager.StepTypeWait),
					Attributes: &armdeploymentmanager.WaitStepAttributes{
						Duration: to.Ptr("PT30M"),
					},
				},
			}}
		if !reflect.DeepEqual(exampleRes, res.StepResourceArray) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.StepResourceArray)
			t.Fatalf("Mock response is not equal to example response for example specification/deploymentmanager/resource-manager/Microsoft.DeploymentManager/preview/2019-11-01-preview/examples/steps_list.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRollouts_CreateOrUpdate(t *testing.T) {
	// From example specification/deploymentmanager/resource-manager/Microsoft.DeploymentManager/preview/2019-11-01-preview/examples/rollout_createorupdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update rollout"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdeploymentmanager.NewRolloutsClient("caac1590-e859-444f-a9e0-62091c0f5929", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myRollout",
		&armdeploymentmanager.RolloutsClientBeginCreateOrUpdateOptions{RolloutRequest: &armdeploymentmanager.RolloutRequest{
			Location: to.Ptr("centralus"),
			Tags:     map[string]*string{},
			Identity: &armdeploymentmanager.Identity{
				Type: to.Ptr("userAssigned"),
				IdentityIDs: []*string{
					to.Ptr("/subscriptions/caac1590-e859-444f-a9e0-62091c0f5929/resourceGroups/myResourceGroup/providers/Microsoft.ManagedIdentity/userassignedidentities/myuseridentity")},
			},
			Properties: &armdeploymentmanager.RolloutRequestProperties{
				ArtifactSourceID: to.Ptr("/subscriptions/caac1590-e859-444f-a9e0-62091c0f5929/resourceGroups/myResourceGroup/Microsoft.DeploymentManager/artifactSources/myArtifactSource"),
				BuildVersion:     to.Ptr("1.0.0.1"),
				StepGroups: []*armdeploymentmanager.StepGroup{
					{
						Name:               to.Ptr("FirstRegion"),
						DeploymentTargetID: to.Ptr("Microsoft.DeploymentManager/serviceTopologies/myTopology/services/myService/serviceUnits/myServiceUnit1'"),
						PostDeploymentSteps: []*armdeploymentmanager.PrePostStep{
							{
								StepID: to.Ptr("Microsoft.DeploymentManager/steps/postDeployStep1"),
							}},
						PreDeploymentSteps: []*armdeploymentmanager.PrePostStep{
							{
								StepID: to.Ptr("Microsoft.DeploymentManager/steps/preDeployStep1"),
							},
							{
								StepID: to.Ptr("Microsoft.DeploymentManager/steps/preDeployStep2"),
							}},
					},
					{
						Name: to.Ptr("SecondRegion"),
						DependsOnStepGroups: []*string{
							to.Ptr("FirstRegion")},
						DeploymentTargetID: to.Ptr("Microsoft.DeploymentManager/serviceTopologies/myTopology/services/myService/serviceUnits/myServiceUnit2'"),
						PostDeploymentSteps: []*armdeploymentmanager.PrePostStep{
							{
								StepID: to.Ptr("Microsoft.DeploymentManager/steps/postDeployStep5"),
							}},
						PreDeploymentSteps: []*armdeploymentmanager.PrePostStep{
							{
								StepID: to.Ptr("Microsoft.DeploymentManager/steps/preDeployStep3"),
							},
							{
								StepID: to.Ptr("Microsoft.DeploymentManager/steps/preDeployStep4"),
							}},
					}},
				TargetServiceTopologyID: to.Ptr("/subscriptions/caac1590-e859-444f-a9e0-62091c0f5929/resourceGroups/myResourceGroup/Microsoft.DeploymentManager/serviceTopologies/myTopology"),
			},
		},
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/deploymentmanager/resource-manager/Microsoft.DeploymentManager/preview/2019-11-01-preview/examples/rollout_createorupdate.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/deploymentmanager/resource-manager/Microsoft.DeploymentManager/preview/2019-11-01-preview/examples/rollout_createorupdate.json: %v", err)
	}
}

func TestRollouts_Get(t *testing.T) {
	// From example specification/deploymentmanager/resource-manager/Microsoft.DeploymentManager/preview/2019-11-01-preview/examples/rollout_get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get rollout"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdeploymentmanager.NewRolloutsClient("caac1590-e859-444f-a9e0-62091c0f5929", cred, &options)
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myRollout",
		&armdeploymentmanager.RolloutsClientGetOptions{RetryAttempt: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/deploymentmanager/resource-manager/Microsoft.DeploymentManager/preview/2019-11-01-preview/examples/rollout_get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdeploymentmanager.Rollout{
			Name:     to.Ptr("myRollout"),
			Type:     to.Ptr("Microsoft.DeploymentManager/rollouts"),
			Location: to.Ptr("centralus"),
			Tags:     map[string]*string{},
			Identity: &armdeploymentmanager.Identity{
				Type: to.Ptr("userAssigned"),
				IdentityIDs: []*string{
					to.Ptr("/subscriptions/caac1590-e859-444f-a9e0-62091c0f5929/resourceGroups/myResourceGroup/providers/Microsoft.ManagedIdentity/userassignedidentities/myuseridentity")},
			},
			Properties: &armdeploymentmanager.RolloutProperties{
				OperationInfo: &armdeploymentmanager.RolloutOperationInfo{
					RetryAttempt: to.Ptr[int32](0),
					StartTime:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-28T03:33:56.386Z"); return t }()),
				},
				Services: []*armdeploymentmanager.Service{
					{
						TargetLocation:       to.Ptr("centralus"),
						TargetSubscriptionID: to.Ptr("600c95c5-3ee5-44fe-b190-ca38a19adcd7"),
						Name:                 to.Ptr("myService1"),
						ServiceUnits: []*armdeploymentmanager.ServiceUnit{
							{
								DeploymentMode:      to.Ptr(armdeploymentmanager.DeploymentModeIncremental),
								TargetResourceGroup: to.Ptr("myDeploymentResourceGroup"),
								Name:                to.Ptr("myTopologyUni1"),
								Steps: []*armdeploymentmanager.RolloutStep{
									{
										Name: to.Ptr("preDeploymentStep1"),
										OperationInfo: &armdeploymentmanager.StepOperationInfo{
											EndTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-28T03:35:28.556Z"); return t }()),
											StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-28T03:33:56.386Z"); return t }()),
										},
										Status: to.Ptr("succeeded"),
									},
									{
										Name: to.Ptr("preDeploymentStep2"),
										OperationInfo: &armdeploymentmanager.StepOperationInfo{
											EndTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-28T03:37:28.556Z"); return t }()),
											StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-28T03:36:56.386Z"); return t }()),
										},
										Status: to.Ptr("succeeded"),
									},
									{
										Name: to.Ptr("deploy"),
										OperationInfo: &armdeploymentmanager.StepOperationInfo{
											LastUpdatedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-28T03:39:28.556Z"); return t }()),
											StartTime:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-28T03:38:56.386Z"); return t }()),
										},
										ResourceOperations: []*armdeploymentmanager.ResourceOperation{
											{
												OperationID:       to.Ptr("20FC5A21382DA306"),
												ProvisioningState: to.Ptr("Succeeded"),
												ResourceName:      to.Ptr("keyVaultcentralus"),
												ResourceType:      to.Ptr("Microsoft.KeyVault/vaults"),
												StatusCode:        to.Ptr("OK"),
												StatusMessage:     to.Ptr(""),
											}},
										Status: to.Ptr("running"),
									}},
							}},
					}},
				Status:             to.Ptr("Running"),
				TotalRetryAttempts: to.Ptr[int32](0),
				ArtifactSourceID:   to.Ptr("/subscriptions/caac1590-e859-444f-a9e0-62091c0f5929/resourceGroups/myResourceGroup/Microsoft.DeploymentManager/artifactSources/myArtifactSource"),
				BuildVersion:       to.Ptr("1.0.0.1"),
				StepGroups: []*armdeploymentmanager.StepGroup{
					{
						Name:               to.Ptr("FirstRegion"),
						DeploymentTargetID: to.Ptr("Microsoft.DeploymentManager/serviceTopologies/myTopology/services/myService/serviceUnits/myServiceUnit1'"),
						PostDeploymentSteps: []*armdeploymentmanager.PrePostStep{
							{
								StepID: to.Ptr("Microsoft.DeploymentManager/steps/postDeployStep1"),
							}},
						PreDeploymentSteps: []*armdeploymentmanager.PrePostStep{
							{
								StepID: to.Ptr("Microsoft.DeploymentManager/steps/preDeployStep1"),
							},
							{
								StepID: to.Ptr("Microsoft.DeploymentManager/steps/preDeployStep2"),
							}},
					},
					{
						Name: to.Ptr("SecondRegion"),
						DependsOnStepGroups: []*string{
							to.Ptr("FirstRegion")},
						DeploymentTargetID: to.Ptr("Microsoft.DeploymentManager/serviceTopologies/myTopology/services/myService/serviceUnits/myServiceUnit2'"),
						PostDeploymentSteps: []*armdeploymentmanager.PrePostStep{
							{
								StepID: to.Ptr("Microsoft.DeploymentManager/steps/postDeployStep5"),
							}},
						PreDeploymentSteps: []*armdeploymentmanager.PrePostStep{
							{
								StepID: to.Ptr("Microsoft.DeploymentManager/steps/preDeployStep3"),
							},
							{
								StepID: to.Ptr("Microsoft.DeploymentManager/steps/preDeployStep4"),
							}},
					}},
				TargetServiceTopologyID: to.Ptr("/subscriptions/caac1590-e859-444f-a9e0-62091c0f5929/resourceGroups/myResourceGroup/Microsoft.DeploymentManager/serviceTopologies/myTopology"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Rollout) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Rollout)
			t.Fatalf("Mock response is not equal to example response for example specification/deploymentmanager/resource-manager/Microsoft.DeploymentManager/preview/2019-11-01-preview/examples/rollout_get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRollouts_Delete(t *testing.T) {
	// From example specification/deploymentmanager/resource-manager/Microsoft.DeploymentManager/preview/2019-11-01-preview/examples/rollout_delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete rollout"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdeploymentmanager.NewRolloutsClient("caac1590-e859-444f-a9e0-62091c0f5929", cred, &options)
	_, err := client.Delete(ctx,
		"myResourceGroup",
		"myRollout",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/deploymentmanager/resource-manager/Microsoft.DeploymentManager/preview/2019-11-01-preview/examples/rollout_delete.json: %v", err)
	}
}

func TestRollouts_Cancel(t *testing.T) {
	// From example specification/deploymentmanager/resource-manager/Microsoft.DeploymentManager/preview/2019-11-01-preview/examples/rollout_post_cancel.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Cancel rollout"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdeploymentmanager.NewRolloutsClient("caac1590-e859-444f-a9e0-62091c0f5929", cred, &options)
	res, err := client.Cancel(ctx,
		"myResourceGroup",
		"myRollout",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/deploymentmanager/resource-manager/Microsoft.DeploymentManager/preview/2019-11-01-preview/examples/rollout_post_cancel.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdeploymentmanager.Rollout{
			Name:     to.Ptr("myRollout"),
			Type:     to.Ptr("Microsoft.DeploymentManager/rollouts"),
			Location: to.Ptr("centralus"),
			Tags:     map[string]*string{},
			Identity: &armdeploymentmanager.Identity{
				Type: to.Ptr("userAssigned"),
				IdentityIDs: []*string{
					to.Ptr("/subscriptions/caac1590-e859-444f-a9e0-62091c0f5929/resourceGroups/myResourceGroup/providers/Microsoft.ManagedIdentity/userassignedidentities/myuseridentity")},
			},
			Properties: &armdeploymentmanager.RolloutProperties{
				OperationInfo: &armdeploymentmanager.RolloutOperationInfo{
					RetryAttempt: to.Ptr[int32](0),
					StartTime:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-28T03:33:56.386Z"); return t }()),
				},
				Services: []*armdeploymentmanager.Service{
					{
						TargetLocation:       to.Ptr("centralus"),
						TargetSubscriptionID: to.Ptr("600c95c5-3ee5-44fe-b190-ca38a19adcd7"),
						Name:                 to.Ptr("myService1"),
						ServiceUnits: []*armdeploymentmanager.ServiceUnit{
							{
								DeploymentMode:      to.Ptr(armdeploymentmanager.DeploymentModeIncremental),
								TargetResourceGroup: to.Ptr("myDeploymentResourceGroup"),
								Name:                to.Ptr("myTopologyUni1"),
								Steps: []*armdeploymentmanager.RolloutStep{
									{
										Name: to.Ptr("preDeploymentStep1"),
										OperationInfo: &armdeploymentmanager.StepOperationInfo{
											EndTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-28T03:35:28.556Z"); return t }()),
											StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-28T03:33:56.386Z"); return t }()),
										},
										Status: to.Ptr("succeeded"),
									},
									{
										Name: to.Ptr("preDeploymentStep2"),
										OperationInfo: &armdeploymentmanager.StepOperationInfo{
											EndTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-28T03:37:28.556Z"); return t }()),
											StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-28T03:36:56.386Z"); return t }()),
										},
										Status: to.Ptr("succeeded"),
									},
									{
										Name: to.Ptr("deploy"),
										OperationInfo: &armdeploymentmanager.StepOperationInfo{
											LastUpdatedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-28T03:39:28.556Z"); return t }()),
											StartTime:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-28T03:38:56.386Z"); return t }()),
										},
										ResourceOperations: []*armdeploymentmanager.ResourceOperation{
											{
												OperationID:       to.Ptr("20FC5A21382DA306"),
												ProvisioningState: to.Ptr("Succeeded"),
												ResourceName:      to.Ptr("keyVaultcentralus"),
												ResourceType:      to.Ptr("Microsoft.KeyVault/vaults"),
												StatusCode:        to.Ptr("OK"),
												StatusMessage:     to.Ptr(""),
											}},
										Status: to.Ptr("running"),
									}},
							}},
					}},
				Status:             to.Ptr("Canceling"),
				TotalRetryAttempts: to.Ptr[int32](0),
				ArtifactSourceID:   to.Ptr("/subscriptions/caac1590-e859-444f-a9e0-62091c0f5929/resourceGroups/myResourceGroup/Microsoft.DeploymentManager/artifactSources/myArtifactSource"),
				BuildVersion:       to.Ptr("1.0.0.1"),
				StepGroups: []*armdeploymentmanager.StepGroup{
					{
						Name:               to.Ptr("FirstRegion"),
						DeploymentTargetID: to.Ptr("Microsoft.DeploymentManager/serviceTopologies/myTopology/services/myService/serviceUnits/myServiceUnit1'"),
						PostDeploymentSteps: []*armdeploymentmanager.PrePostStep{
							{
								StepID: to.Ptr("Microsoft.DeploymentManager/steps/postDeployStep1"),
							}},
						PreDeploymentSteps: []*armdeploymentmanager.PrePostStep{
							{
								StepID: to.Ptr("Microsoft.DeploymentManager/steps/preDeployStep1"),
							},
							{
								StepID: to.Ptr("Microsoft.DeploymentManager/steps/preDeployStep2"),
							}},
					},
					{
						Name: to.Ptr("SecondRegion"),
						DependsOnStepGroups: []*string{
							to.Ptr("FirstRegion")},
						DeploymentTargetID: to.Ptr("Microsoft.DeploymentManager/serviceTopologies/myTopology/services/myService/serviceUnits/myServiceUnit2'"),
						PostDeploymentSteps: []*armdeploymentmanager.PrePostStep{
							{
								StepID: to.Ptr("Microsoft.DeploymentManager/steps/postDeployStep5"),
							}},
						PreDeploymentSteps: []*armdeploymentmanager.PrePostStep{
							{
								StepID: to.Ptr("Microsoft.DeploymentManager/steps/preDeployStep3"),
							},
							{
								StepID: to.Ptr("Microsoft.DeploymentManager/steps/preDeployStep4"),
							}},
					}},
				TargetServiceTopologyID: to.Ptr("/subscriptions/caac1590-e859-444f-a9e0-62091c0f5929/resourceGroups/myResourceGroup/Microsoft.DeploymentManager/serviceTopologies/myTopology"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Rollout) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Rollout)
			t.Fatalf("Mock response is not equal to example response for example specification/deploymentmanager/resource-manager/Microsoft.DeploymentManager/preview/2019-11-01-preview/examples/rollout_post_cancel.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRollouts_Restart(t *testing.T) {
	// From example specification/deploymentmanager/resource-manager/Microsoft.DeploymentManager/preview/2019-11-01-preview/examples/rollout_post_restart.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Restart rollout"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdeploymentmanager.NewRolloutsClient("caac1590-e859-444f-a9e0-62091c0f5929", cred, &options)
	res, err := client.Restart(ctx,
		"myResourceGroup",
		"myRollout",
		&armdeploymentmanager.RolloutsClientRestartOptions{SkipSucceeded: to.Ptr(true)})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/deploymentmanager/resource-manager/Microsoft.DeploymentManager/preview/2019-11-01-preview/examples/rollout_post_restart.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdeploymentmanager.Rollout{
			Name:     to.Ptr("myRollout"),
			Type:     to.Ptr("Microsoft.DeploymentManager/rollouts"),
			Location: to.Ptr("centralus"),
			Tags:     map[string]*string{},
			Identity: &armdeploymentmanager.Identity{
				Type: to.Ptr("userAssigned"),
				IdentityIDs: []*string{
					to.Ptr("/subscriptions/caac1590-e859-444f-a9e0-62091c0f5929/resourceGroups/myResourceGroup/providers/Microsoft.ManagedIdentity/userassignedidentities/myuseridentity")},
			},
			Properties: &armdeploymentmanager.RolloutProperties{
				OperationInfo: &armdeploymentmanager.RolloutOperationInfo{
					RetryAttempt: to.Ptr[int32](1),
					StartTime:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-28T03:33:56.386Z"); return t }()),
				},
				Status:             to.Ptr("Running"),
				TotalRetryAttempts: to.Ptr[int32](1),
				ArtifactSourceID:   to.Ptr("/subscriptions/caac1590-e859-444f-a9e0-62091c0f5929/resourceGroups/myResourceGroup/Microsoft.DeploymentManager/artifactSources/myArtifactSource"),
				BuildVersion:       to.Ptr("1.0.0.1"),
				StepGroups: []*armdeploymentmanager.StepGroup{
					{
						Name:               to.Ptr("FirstRegion"),
						DeploymentTargetID: to.Ptr("Microsoft.DeploymentManager/serviceTopologies/myTopology/services/myService/serviceUnits/myServiceUnit1'"),
						PostDeploymentSteps: []*armdeploymentmanager.PrePostStep{
							{
								StepID: to.Ptr("Microsoft.DeploymentManager/steps/postDeployStep1"),
							}},
						PreDeploymentSteps: []*armdeploymentmanager.PrePostStep{
							{
								StepID: to.Ptr("Microsoft.DeploymentManager/steps/preDeployStep1"),
							},
							{
								StepID: to.Ptr("Microsoft.DeploymentManager/steps/preDeployStep2"),
							}},
					},
					{
						Name: to.Ptr("SecondRegion"),
						DependsOnStepGroups: []*string{
							to.Ptr("FirstRegion")},
						DeploymentTargetID: to.Ptr("Microsoft.DeploymentManager/serviceTopologies/myTopology/services/myService/serviceUnits/myServiceUnit2'"),
						PostDeploymentSteps: []*armdeploymentmanager.PrePostStep{
							{
								StepID: to.Ptr("Microsoft.DeploymentManager/steps/postDeployStep5"),
							}},
						PreDeploymentSteps: []*armdeploymentmanager.PrePostStep{
							{
								StepID: to.Ptr("Microsoft.DeploymentManager/steps/preDeployStep3"),
							},
							{
								StepID: to.Ptr("Microsoft.DeploymentManager/steps/preDeployStep4"),
							}},
					}},
				TargetServiceTopologyID: to.Ptr("/subscriptions/caac1590-e859-444f-a9e0-62091c0f5929/resourceGroups/myResourceGroup/Microsoft.DeploymentManager/serviceTopologies/myTopology"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Rollout) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Rollout)
			t.Fatalf("Mock response is not equal to example response for example specification/deploymentmanager/resource-manager/Microsoft.DeploymentManager/preview/2019-11-01-preview/examples/rollout_post_restart.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRollouts_List(t *testing.T) {
	// From example specification/deploymentmanager/resource-manager/Microsoft.DeploymentManager/preview/2019-11-01-preview/examples/rollouts_list.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List rollouts by resource group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdeploymentmanager.NewRolloutsClient("caac1590-e859-444f-a9e0-62091c0f5929", cred, &options)
	res, err := client.List(ctx,
		"myResourceGroup",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/deploymentmanager/resource-manager/Microsoft.DeploymentManager/preview/2019-11-01-preview/examples/rollouts_list.json: %v", err)
	}
	// Response check
	{
		exampleRes := []*armdeploymentmanager.Rollout{
			{
				Name:     to.Ptr("CanaryRollout"),
				Type:     to.Ptr("Microsoft.DeploymentManager/rollouts"),
				Location: to.Ptr("centralus"),
				Tags:     map[string]*string{},
				Identity: &armdeploymentmanager.Identity{
					Type: to.Ptr("userAssigned"),
					IdentityIDs: []*string{
						to.Ptr("/subscriptions/caac1590-e859-444f-a9e0-62091c0f5929/resourceGroups/myResourceGroup/providers/Microsoft.ManagedIdentity/userassignedidentities/myuseridentity")},
				},
				Properties: &armdeploymentmanager.RolloutProperties{
					OperationInfo: &armdeploymentmanager.RolloutOperationInfo{
						EndTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-28T03:43:55.010Z"); return t }()),
						RetryAttempt: to.Ptr[int32](0),
						StartTime:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-28T03:33:56.386Z"); return t }()),
					},
					Status:             to.Ptr("Succeeded"),
					TotalRetryAttempts: to.Ptr[int32](0),
					ArtifactSourceID:   to.Ptr("/subscriptions/caac1590-e859-444f-a9e0-62091c0f5929/resourceGroups/myResourceGroup/Microsoft.DeploymentManager/artifactSources/binariesArtifactSource"),
					BuildVersion:       to.Ptr("1.0.0.1"),
					StepGroups: []*armdeploymentmanager.StepGroup{
						{
							Name:               to.Ptr("FirstRegion"),
							DeploymentTargetID: to.Ptr("Microsoft.DeploymentManager/serviceTopologies/myTopology/services/myService/serviceUnits/myServiceUnit1'"),
							PostDeploymentSteps: []*armdeploymentmanager.PrePostStep{
								{
									StepID: to.Ptr("Microsoft.DeploymentManager/steps/postDeployStep1"),
								}},
							PreDeploymentSteps: []*armdeploymentmanager.PrePostStep{
								{
									StepID: to.Ptr("Microsoft.DeploymentManager/steps/preDeployStep1"),
								},
								{
									StepID: to.Ptr("Microsoft.DeploymentManager/steps/preDeployStep2"),
								}},
						}},
					TargetServiceTopologyID: to.Ptr("/subscriptions/caac1590-e859-444f-a9e0-62091c0f5929/resourceGroups/myResourceGroup/Microsoft.DeploymentManager/serviceTopologies/myTopology"),
				},
			},
			{
				Name:     to.Ptr("ProdRollout"),
				Type:     to.Ptr("Microsoft.DeploymentManager/rollouts"),
				Location: to.Ptr("centralus"),
				Tags:     map[string]*string{},
				Identity: &armdeploymentmanager.Identity{
					Type: to.Ptr("userAssigned"),
					IdentityIDs: []*string{
						to.Ptr("/subscriptions/caac1590-e859-444f-a9e0-62091c0f5929/resourceGroups/myResourceGroup/providers/Microsoft.ManagedIdentity/userassignedidentities/myuseridentity")},
				},
				Properties: &armdeploymentmanager.RolloutProperties{
					OperationInfo: &armdeploymentmanager.RolloutOperationInfo{
						RetryAttempt: to.Ptr[int32](0),
						StartTime:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-02T03:33:56.386Z"); return t }()),
					},
					Status:             to.Ptr("Running"),
					TotalRetryAttempts: to.Ptr[int32](0),
					ArtifactSourceID:   to.Ptr("/subscriptions/caac1590-e859-444f-a9e0-62091c0f5929/resourceGroups/myResourceGroup/Microsoft.DeploymentManager/artifactSources/binariesArtifactSource"),
					BuildVersion:       to.Ptr("1.0.0.1"),
					StepGroups: []*armdeploymentmanager.StepGroup{
						{
							Name: to.Ptr("ProdRegion"),
							DependsOnStepGroups: []*string{
								to.Ptr("FirstRegion")},
							DeploymentTargetID: to.Ptr("Microsoft.DeploymentManager/serviceTopologies/myTopology/services/myService/serviceUnits/myServiceUnit2'"),
							PostDeploymentSteps: []*armdeploymentmanager.PrePostStep{
								{
									StepID: to.Ptr("Microsoft.DeploymentManager/steps/postDeployStep3"),
								}},
							PreDeploymentSteps: []*armdeploymentmanager.PrePostStep{
								{
									StepID: to.Ptr("Microsoft.DeploymentManager/steps/preDeployStep"),
								},
								{
									StepID: to.Ptr("Microsoft.DeploymentManager/steps/preDeployStep2"),
								}},
						}},
					TargetServiceTopologyID: to.Ptr("/subscriptions/caac1590-e859-444f-a9e0-62091c0f5929/resourceGroups/myResourceGroup/Microsoft.DeploymentManager/serviceTopologies/myTopology"),
				},
			}}
		if !reflect.DeepEqual(exampleRes, res.RolloutArray) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RolloutArray)
			t.Fatalf("Mock response is not equal to example response for example specification/deploymentmanager/resource-manager/Microsoft.DeploymentManager/preview/2019-11-01-preview/examples/rollouts_list.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestArtifactSources_CreateOrUpdate(t *testing.T) {
	// From example specification/deploymentmanager/resource-manager/Microsoft.DeploymentManager/preview/2019-11-01-preview/examples/artifactsource_createorupdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create artifact source"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdeploymentmanager.NewArtifactSourcesClient("caac1590-e859-444f-a9e0-62091c0f5929", cred, &options)
	_, err := client.CreateOrUpdate(ctx,
		"myResourceGroup",
		"myArtifactSource",
		&armdeploymentmanager.ArtifactSourcesClientCreateOrUpdateOptions{ArtifactSourceInfo: &armdeploymentmanager.ArtifactSource{
			Location: to.Ptr("centralus"),
			Tags:     map[string]*string{},
			Properties: &armdeploymentmanager.ArtifactSourceProperties{
				Authentication: &armdeploymentmanager.SasAuthentication{
					Type: to.Ptr("Sas"),
					Properties: &armdeploymentmanager.SasProperties{
						SasURI: to.Ptr("https://mystorageaccount.blob.core.windows.net/myartifactsource?st=2018-07-07T14%3A10%3A00Z&se=2019-12-31T15%3A10%3A00Z&sp=rl&sv=2017-04-17&sr=c&sig=Yh2SoJ1NhhLRwCLln7de%2Fkabcdefghijklmno5sWEIk%3D"),
					},
				},
				SourceType: to.Ptr("AzureStorage"),
			},
		},
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/deploymentmanager/resource-manager/Microsoft.DeploymentManager/preview/2019-11-01-preview/examples/artifactsource_createorupdate.json: %v", err)
	}

	// From example specification/deploymentmanager/resource-manager/Microsoft.DeploymentManager/preview/2019-11-01-preview/examples/artifactsource_createorupdate_artifactroot.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create artifact source with artifact root, an offset into the storage container"},
	})
	client = armdeploymentmanager.NewArtifactSourcesClient("caac1590-e859-444f-a9e0-62091c0f5929", cred, &options)
	_, err = client.CreateOrUpdate(ctx,
		"myResourceGroup",
		"myArtifactSource",
		&armdeploymentmanager.ArtifactSourcesClientCreateOrUpdateOptions{ArtifactSourceInfo: &armdeploymentmanager.ArtifactSource{
			Location: to.Ptr("centralus"),
			Tags:     map[string]*string{},
			Properties: &armdeploymentmanager.ArtifactSourceProperties{
				ArtifactRoot: to.Ptr("1.0.0.0"),
				Authentication: &armdeploymentmanager.SasAuthentication{
					Type: to.Ptr("Sas"),
					Properties: &armdeploymentmanager.SasProperties{
						SasURI: to.Ptr("https://mystorageaccount.blob.core.windows.net/myartifactsource?st=2018-07-07T14%3A10%3A00Z&se=2019-12-31T15%3A10%3A00Z&sp=rl&sv=2017-04-17&sr=c&sig=Yh2SoJ1NhhLRwCLln7de%2Fkabcdefghijklmno5sWEIk%3D"),
					},
				},
				SourceType: to.Ptr("AzureStorage"),
			},
		},
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/deploymentmanager/resource-manager/Microsoft.DeploymentManager/preview/2019-11-01-preview/examples/artifactsource_createorupdate_artifactroot.json: %v", err)
	}
}

func TestArtifactSources_Get(t *testing.T) {
	// From example specification/deploymentmanager/resource-manager/Microsoft.DeploymentManager/preview/2019-11-01-preview/examples/artifactsource_get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get artifact source"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdeploymentmanager.NewArtifactSourcesClient("caac1590-e859-444f-a9e0-62091c0f5929", cred, &options)
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myArtifactSource",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/deploymentmanager/resource-manager/Microsoft.DeploymentManager/preview/2019-11-01-preview/examples/artifactsource_get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdeploymentmanager.ArtifactSource{
			Name:     to.Ptr("myArtifactSource"),
			Type:     to.Ptr("Microsoft.DeploymentManager/artifactSources"),
			Location: to.Ptr("centralus"),
			Tags:     map[string]*string{},
			Properties: &armdeploymentmanager.ArtifactSourceProperties{
				Authentication: &armdeploymentmanager.SasAuthentication{
					Type: to.Ptr("Sas"),
					Properties: &armdeploymentmanager.SasProperties{
						SasURI: to.Ptr("https://mystorageaccount.blob.core.windows.net/myartifactsource?st=2018-07-07T14%3A10%3A00Z&se=2019-12-31T15%3A10%3A00Z&sp=rl&sv=2017-04-17&sr=c&sig=Yh2SoJ1NhhLRwCLln7de%2Fkabcdefghijklmno5sWEIk%3D"),
					},
				},
				SourceType: to.Ptr("AzureStorage"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ArtifactSource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ArtifactSource)
			t.Fatalf("Mock response is not equal to example response for example specification/deploymentmanager/resource-manager/Microsoft.DeploymentManager/preview/2019-11-01-preview/examples/artifactsource_get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestArtifactSources_Delete(t *testing.T) {
	// From example specification/deploymentmanager/resource-manager/Microsoft.DeploymentManager/preview/2019-11-01-preview/examples/artifactsource_delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete artifact source"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdeploymentmanager.NewArtifactSourcesClient("caac1590-e859-444f-a9e0-62091c0f5929", cred, &options)
	_, err := client.Delete(ctx,
		"myResourceGroup",
		"myArtifactSource",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/deploymentmanager/resource-manager/Microsoft.DeploymentManager/preview/2019-11-01-preview/examples/artifactsource_delete.json: %v", err)
	}
}

func TestArtifactSources_List(t *testing.T) {
	// From example specification/deploymentmanager/resource-manager/Microsoft.DeploymentManager/preview/2019-11-01-preview/examples/artifactsources_list.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List steps"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdeploymentmanager.NewArtifactSourcesClient("caac1590-e859-444f-a9e0-62091c0f5929", cred, &options)
	res, err := client.List(ctx,
		"myResourceGroup",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/deploymentmanager/resource-manager/Microsoft.DeploymentManager/preview/2019-11-01-preview/examples/artifactsources_list.json: %v", err)
	}
	// Response check
	{
		exampleRes := []*armdeploymentmanager.ArtifactSource{
			{
				Name:     to.Ptr("TemplatesArtifactSource"),
				Type:     to.Ptr("Microsoft.DeploymentManager/artifactSources"),
				Location: to.Ptr("centralus"),
				Tags:     map[string]*string{},
				Properties: &armdeploymentmanager.ArtifactSourceProperties{
					Authentication: &armdeploymentmanager.SasAuthentication{
						Type: to.Ptr("Sas"),
						Properties: &armdeploymentmanager.SasProperties{
							SasURI: to.Ptr("https://mystorageaccount.blob.core.windows.net/templates?st=2018-07-07T14%3A10%3A00Z&se=2019-12-31T15%3A10%3A00Z&sp=rl&sv=2017-04-17&sr=c&sig=Yh2SoJ1NhhLRwCLln7de%2Fkabcdefghijklmno5sWEIk%3D"),
						},
					},
					SourceType: to.Ptr("AzureStorage"),
				},
			},
			{
				Name:     to.Ptr("BinariesArtifactSource"),
				Type:     to.Ptr("Microsoft.DeploymentManager/artifactSources"),
				Location: to.Ptr("centralus"),
				Tags:     map[string]*string{},
				Properties: &armdeploymentmanager.ArtifactSourceProperties{
					ArtifactRoot: to.Ptr("builds/1.0.0.1"),
					Authentication: &armdeploymentmanager.SasAuthentication{
						Type: to.Ptr("Sas"),
						Properties: &armdeploymentmanager.SasProperties{
							SasURI: to.Ptr("https://mystorageaccount.blob.core.windows.net/binaries?st=2018-07-07T14%3A10%3A00Z&se=2019-12-31T15%3A10%3A00Z&sp=rl&sv=2017-04-17&sr=c&sig=Yh2SoJ1NhhLRwCLln7de%2Fkabcdefghijklmno5sWEIk%3D"),
						},
					},
					SourceType: to.Ptr("AzureStorage"),
				},
			}}
		if !reflect.DeepEqual(exampleRes, res.ArtifactSourceArray) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ArtifactSourceArray)
			t.Fatalf("Mock response is not equal to example response for example specification/deploymentmanager/resource-manager/Microsoft.DeploymentManager/preview/2019-11-01-preview/examples/artifactsources_list.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOperations_List(t *testing.T) {
	// From example specification/deploymentmanager/resource-manager/Microsoft.DeploymentManager/preview/2019-11-01-preview/examples/operations_list.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get operations"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdeploymentmanager.NewOperationsClient(cred, &options)
	res, err := client.List(ctx,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/deploymentmanager/resource-manager/Microsoft.DeploymentManager/preview/2019-11-01-preview/examples/operations_list.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdeploymentmanager.OperationsList{
			Value: &armdeploymentmanager.Operation{},
		}
		if !reflect.DeepEqual(exampleRes, res.OperationsList) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.OperationsList)
			t.Fatalf("Mock response is not equal to example response for example specification/deploymentmanager/resource-manager/Microsoft.DeploymentManager/preview/2019-11-01-preview/examples/operations_list.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
