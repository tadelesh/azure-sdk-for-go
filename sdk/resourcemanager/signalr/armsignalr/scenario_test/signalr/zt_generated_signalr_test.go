//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package signalr_test

import (
	"context"
	"testing"

	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/internal/recording"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/resources/armresources"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/signalr/armsignalr"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/signalr/armsignalr/scenario_test"
)

var (
	ctx               context.Context
	cred              azcore.TokenCredential
	pathToPackage     = "sdk/resourcemanager/signalr/armsignalr/scenario_test/signalr/testdata"
	options           *arm.ClientOptions
	resourceGroup     *armresources.ResourceGroup
	location          = scenario_test.GetEnv("LOCATION", "eastus")
	resourceGroupName = scenario_test.GetEnv("RESOURCE_GROUP_NAME", "")
	subscriptionId    = scenario_test.GetEnv("SUBSCRIPTION_ID", scenario_test.GetEnv("AZURE_SUBSCRIPTION_ID", ""))
)

func TestSignalr(t *testing.T) {
	// Setup for test
	scenario_test.StartRecording(t, pathToPackage)
	ctx = context.Background()
	options = scenario_test.CreateArmOptions(t)
	cred = scenario_test.CreateCred(t, ctx, options)
	resourceGroup = scenario_test.CreateResourceGroup(t, ctx, cred, subscriptionId, location, options)
	resourceGroupName = *resourceGroup.Name
	// Clenup for test
	t.Cleanup(func() {
		scenario_test.DeleteResourceGroup(t, ctx, cred, subscriptionId, resourceGroupName, options)
		scenario_test.StopRecording(t)
	})
	prepare(t)
	scenarioSignalr(t)
	cleanup(t)
}

func prepare(t *testing.T) {
}

func scenarioSignalr(t *testing.T) {
	var resourceName string
	// From step Generate_Unique_Name
	{
		template := map[string]interface{}{
			"$schema":        "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
			"contentVersion": "1.0.0.0",
			"outputs": map[string]interface{}{
				"resourceName": map[string]interface{}{
					"type":  "string",
					"value": "[variables('name').value]",
				},
			},
			"resources": []interface{}{},
			"variables": map[string]interface{}{
				"name": map[string]interface{}{
					"type": "string",
					"metadata": map[string]interface{}{
						"description": "Name of the SignalR service.",
					},
					"value": "[concat('sw',uniqueString(resourceGroup().id))]",
				},
			},
		}
		params := map[string]interface{}{}
		deploymentExtend, err := scenario_test.CreateDeployment(ctx, cred, options, subscriptionId, resourceGroupName, "Generate_Unique_Name", template, params)
		if err != nil {
			t.Fatalf("Deployment error: %v", err)
		}
		resourceName = deploymentExtend.Properties.Outputs["resourceName"].(map[string]interface{})["value"].(string)
	}

	// From step SignalR_CheckNameAvailability
	client := armsignalr.NewClient(subscriptionId, cred, options)
	{
		clientCheckNameAvailabilityResponse, err := client.CheckNameAvailability(ctx,
			location,
			armsignalr.NameAvailabilityParameters{
				Name: to.StringPtr(resourceName),
				Type: to.StringPtr("Microsoft.SignalRService/SignalR"),
			},
			nil)
		if err != nil {
			t.Fatalf("Request error: %v", err)
		}
		t.Logf("Response result: %#v\n", clientCheckNameAvailabilityResponse.ClientCheckNameAvailabilityResult)
	}

	// From step SignalR_CreateOrUpdate
	{
		clientCreateOrUpdatePollerResponse, err := client.BeginCreateOrUpdate(ctx,
			resourceGroupName,
			resourceName,
			armsignalr.ResourceInfo{
				Location: to.StringPtr(location),
				Tags: map[string]*string{
					"key1": to.StringPtr("value1"),
				},
				Identity: &armsignalr.ManagedIdentity{
					Type: armsignalr.ManagedIdentityTypeSystemAssigned.ToPtr(),
				},
				Kind: armsignalr.ServiceKindSignalR.ToPtr(),
				Properties: &armsignalr.Properties{
					Cors: &armsignalr.CorsSettings{
						AllowedOrigins: []*string{
							to.StringPtr("https://foo.com"),
							to.StringPtr("https://bar.com")},
					},
					DisableAADAuth:   to.BoolPtr(false),
					DisableLocalAuth: to.BoolPtr(false),
					Features: []*armsignalr.Feature{
						{
							Flag:       armsignalr.FeatureFlagsServiceMode.ToPtr(),
							Properties: map[string]*string{},
							Value:      to.StringPtr("Serverless"),
						},
						{
							Flag:       armsignalr.FeatureFlagsEnableConnectivityLogs.ToPtr(),
							Properties: map[string]*string{},
							Value:      to.StringPtr("True"),
						},
						{
							Flag:       armsignalr.FeatureFlagsEnableMessagingLogs.ToPtr(),
							Properties: map[string]*string{},
							Value:      to.StringPtr("False"),
						},
						{
							Flag:       armsignalr.FeatureFlagsEnableLiveTrace.ToPtr(),
							Properties: map[string]*string{},
							Value:      to.StringPtr("False"),
						}},
					NetworkACLs: &armsignalr.NetworkACLs{
						DefaultAction: armsignalr.ACLActionDeny.ToPtr(),
						PrivateEndpoints: []*armsignalr.PrivateEndpointACL{
							{
								Allow: []*armsignalr.SignalRRequestType{
									armsignalr.SignalRRequestTypeServerConnection.ToPtr()},
								Name: to.StringPtr(resourceName + ".1fa229cd-bf3f-47f0-8c49-afb36723997e"),
							}},
						PublicNetwork: &armsignalr.NetworkACL{
							Allow: []*armsignalr.SignalRRequestType{
								armsignalr.SignalRRequestTypeClientConnection.ToPtr()},
						},
					},
					PublicNetworkAccess: to.StringPtr("Enabled"),
					TLS: &armsignalr.TLSSettings{
						ClientCertEnabled: to.BoolPtr(false),
					},
					Upstream: &armsignalr.ServerlessUpstreamSettings{
						Templates: []*armsignalr.UpstreamTemplate{
							{
								Auth: &armsignalr.UpstreamAuthSettings{
									Type: armsignalr.UpstreamAuthTypeManagedIdentity.ToPtr(),
									ManagedIdentity: &armsignalr.ManagedIdentitySettings{
										Resource: to.StringPtr("api://example"),
									},
								},
								CategoryPattern: to.StringPtr("*"),
								EventPattern:    to.StringPtr("connect,disconnect"),
								HubPattern:      to.StringPtr("*"),
								URLTemplate:     to.StringPtr("https://example.com/chat/api/connect"),
							}},
					},
				},
				SKU: &armsignalr.ResourceSKU{
					Name:     to.StringPtr("Standard_S1"),
					Capacity: to.Int32Ptr(1),
					Tier:     armsignalr.SignalRSKUTierStandard.ToPtr(),
				},
			},
			nil)
		if err != nil {
			t.Fatalf("Request error: %v", err)
		}
		var response armsignalr.ClientCreateOrUpdateResponse
		if recording.GetRecordMode() == recording.PlaybackMode {
			for {
				_, err = clientCreateOrUpdatePollerResponse.Poller.Poll(ctx)
				if err != nil {
					t.Fatalf("Request error: %v", err)
				}
				if clientCreateOrUpdatePollerResponse.Poller.Done() {
					response, err = clientCreateOrUpdatePollerResponse.Poller.FinalResponse(ctx)
					if err != nil {
						t.Fatalf("Request error: %v", err)
					}
					break
				}
			}
		} else {
			response, err = clientCreateOrUpdatePollerResponse.PollUntilDone(ctx, 10*time.Second)
			if err != nil {
				t.Fatalf("Request error: %v", err)
			}
		}
		t.Logf("Response result: %#v\n", response.ClientCreateOrUpdateResult)
	}

	// From step SignalR_Get
	{
		clientGetResponse, err := client.Get(ctx,
			resourceGroupName,
			resourceName,
			nil)
		if err != nil {
			t.Fatalf("Request error: %v", err)
		}
		t.Logf("Response result: %#v\n", clientGetResponse.ClientGetResult)
	}

	// From step SignalR_Update
	{
		clientUpdatePollerResponse, err := client.BeginUpdate(ctx,
			resourceGroupName,
			resourceName,
			armsignalr.ResourceInfo{
				Location: to.StringPtr(location),
				Tags: map[string]*string{
					"key1": to.StringPtr("value1"),
				},
				Identity: &armsignalr.ManagedIdentity{
					Type: armsignalr.ManagedIdentityTypeSystemAssigned.ToPtr(),
				},
				Kind: armsignalr.ServiceKindSignalR.ToPtr(),
				Properties: &armsignalr.Properties{
					Cors: &armsignalr.CorsSettings{
						AllowedOrigins: []*string{
							to.StringPtr("https://foo.com"),
							to.StringPtr("https://bar.com")},
					},
					DisableAADAuth:   to.BoolPtr(false),
					DisableLocalAuth: to.BoolPtr(false),
					Features: []*armsignalr.Feature{
						{
							Flag:       armsignalr.FeatureFlagsServiceMode.ToPtr(),
							Properties: map[string]*string{},
							Value:      to.StringPtr("Serverless"),
						},
						{
							Flag:       armsignalr.FeatureFlagsEnableConnectivityLogs.ToPtr(),
							Properties: map[string]*string{},
							Value:      to.StringPtr("True"),
						},
						{
							Flag:       armsignalr.FeatureFlagsEnableMessagingLogs.ToPtr(),
							Properties: map[string]*string{},
							Value:      to.StringPtr("False"),
						},
						{
							Flag:       armsignalr.FeatureFlagsEnableLiveTrace.ToPtr(),
							Properties: map[string]*string{},
							Value:      to.StringPtr("False"),
						}},
					NetworkACLs: &armsignalr.NetworkACLs{
						DefaultAction: armsignalr.ACLActionDeny.ToPtr(),
						PrivateEndpoints: []*armsignalr.PrivateEndpointACL{
							{
								Allow: []*armsignalr.SignalRRequestType{
									armsignalr.SignalRRequestTypeServerConnection.ToPtr()},
								Name: to.StringPtr(resourceName + ".1fa229cd-bf3f-47f0-8c49-afb36723997e"),
							}},
						PublicNetwork: &armsignalr.NetworkACL{
							Allow: []*armsignalr.SignalRRequestType{
								armsignalr.SignalRRequestTypeClientConnection.ToPtr()},
						},
					},
					PublicNetworkAccess: to.StringPtr("Enabled"),
					TLS: &armsignalr.TLSSettings{
						ClientCertEnabled: to.BoolPtr(false),
					},
					Upstream: &armsignalr.ServerlessUpstreamSettings{
						Templates: []*armsignalr.UpstreamTemplate{
							{
								Auth: &armsignalr.UpstreamAuthSettings{
									Type: armsignalr.UpstreamAuthTypeManagedIdentity.ToPtr(),
									ManagedIdentity: &armsignalr.ManagedIdentitySettings{
										Resource: to.StringPtr("api://example"),
									},
								},
								CategoryPattern: to.StringPtr("*"),
								EventPattern:    to.StringPtr("connect,disconnect"),
								HubPattern:      to.StringPtr("*"),
								URLTemplate:     to.StringPtr("https://example.com/chat/api/connect"),
							}},
					},
				},
				SKU: &armsignalr.ResourceSKU{
					Name:     to.StringPtr("Standard_S1"),
					Capacity: to.Int32Ptr(1),
					Tier:     armsignalr.SignalRSKUTierStandard.ToPtr(),
				},
			},
			nil)
		if err != nil {
			t.Fatalf("Request error: %v", err)
		}
		var response armsignalr.ClientUpdateResponse
		if recording.GetRecordMode() == recording.PlaybackMode {
			for {
				_, err = clientUpdatePollerResponse.Poller.Poll(ctx)
				if err != nil {
					t.Fatalf("Request error: %v", err)
				}
				if clientUpdatePollerResponse.Poller.Done() {
					response, err = clientUpdatePollerResponse.Poller.FinalResponse(ctx)
					if err != nil {
						t.Fatalf("Request error: %v", err)
					}
					break
				}
			}
		} else {
			response, err = clientUpdatePollerResponse.PollUntilDone(ctx, 10*time.Second)
			if err != nil {
				t.Fatalf("Request error: %v", err)
			}
		}
		t.Logf("Response result: %#v\n", response.ClientUpdateResult)
	}

	// From step SignalR_ListKeys
	{
		clientListKeysResponse, err := client.ListKeys(ctx,
			resourceGroupName,
			resourceName,
			nil)
		if err != nil {
			t.Fatalf("Request error: %v", err)
		}
		t.Logf("Response result: %#v\n", clientListKeysResponse.ClientListKeysResult)
	}

	// From step SignalR_RegenerateKey
	{
		clientRegenerateKeyPollerResponse, err := client.BeginRegenerateKey(ctx,
			resourceGroupName,
			resourceName,
			armsignalr.RegenerateKeyParameters{
				KeyType: armsignalr.KeyTypePrimary.ToPtr(),
			},
			nil)
		if err != nil {
			t.Fatalf("Request error: %v", err)
		}
		if recording.GetRecordMode() == recording.PlaybackMode {
			for {
				_, err = clientRegenerateKeyPollerResponse.Poller.Poll(ctx)
				if err != nil {
					t.Fatalf("Request error: %v", err)
				}
				if clientRegenerateKeyPollerResponse.Poller.Done() {
					_, err = clientRegenerateKeyPollerResponse.Poller.FinalResponse(ctx)
					if err != nil {
						t.Fatalf("Request error: %v", err)
					}
					break
				}
			}
		} else {
			_, err = clientRegenerateKeyPollerResponse.PollUntilDone(ctx, 10*time.Second)
			if err != nil {
				t.Fatalf("Request error: %v", err)
			}
		}
	}

	// From step SignalR_Restart
	{
		clientRestartPollerResponse, err := client.BeginRestart(ctx,
			resourceGroupName,
			resourceName,
			nil)
		if err != nil {
			t.Fatalf("Request error: %v", err)
		}
		if recording.GetRecordMode() == recording.PlaybackMode {
			for {
				_, err = clientRestartPollerResponse.Poller.Poll(ctx)
				if err != nil {
					t.Fatalf("Request error: %v", err)
				}
				if clientRestartPollerResponse.Poller.Done() {
					_, err = clientRestartPollerResponse.Poller.FinalResponse(ctx)
					if err != nil {
						t.Fatalf("Request error: %v", err)
					}
					break
				}
			}
		} else {
			_, err = clientRestartPollerResponse.PollUntilDone(ctx, 10*time.Second)
			if err != nil {
				t.Fatalf("Request error: %v", err)
			}
		}
	}

	// From step Usages_List
	usagesClient := armsignalr.NewUsagesClient(subscriptionId, cred, options)
	{
		usagesClientListPager := usagesClient.List(location,
			nil)
		for usagesClientListPager.NextPage(ctx) {
			if err := usagesClientListPager.Err(); err != nil {
				t.Fatalf("Failed to advance page: %v", err)
			}
			for _, v := range usagesClientListPager.PageResponse().Value {
				t.Logf("Pager result: %#v\n", v)
			}
		}
	}

	// From step SignalR_ListByResourceGroup
	{
		clientListByResourceGroupPager := client.ListByResourceGroup(resourceGroupName,
			nil)
		for clientListByResourceGroupPager.NextPage(ctx) {
			if err := clientListByResourceGroupPager.Err(); err != nil {
				t.Fatalf("Failed to advance page: %v", err)
			}
			for _, v := range clientListByResourceGroupPager.PageResponse().Value {
				t.Logf("Pager result: %#v\n", v)
			}
		}
	}

	// From step SignalR_ListBySubscription
	{
		clientListBySubscriptionPager := client.ListBySubscription(nil)
		for clientListBySubscriptionPager.NextPage(ctx) {
			if err := clientListBySubscriptionPager.Err(); err != nil {
				t.Fatalf("Failed to advance page: %v", err)
			}
			for _, v := range clientListBySubscriptionPager.PageResponse().Value {
				t.Logf("Pager result: %#v\n", v)
			}
		}
	}

	// From step Operations_List
	operationsClient := armsignalr.NewOperationsClient(cred, options)
	{
		operationsClientListPager := operationsClient.List(nil)
		for operationsClientListPager.NextPage(ctx) {
			if err := operationsClientListPager.Err(); err != nil {
				t.Fatalf("Failed to advance page: %v", err)
			}
			for _, v := range operationsClientListPager.PageResponse().Value {
				t.Logf("Pager result: %#v\n", v)
			}
		}
	}

	// From step SignalR_Delete
	{
		clientDeletePollerResponse, err := client.BeginDelete(ctx,
			resourceGroupName,
			resourceName,
			nil)
		if err != nil {
			t.Fatalf("Request error: %v", err)
		}
		if recording.GetRecordMode() == recording.PlaybackMode {
			for {
				_, err = clientDeletePollerResponse.Poller.Poll(ctx)
				if err != nil {
					t.Fatalf("Request error: %v", err)
				}
				if clientDeletePollerResponse.Poller.Done() {
					_, err = clientDeletePollerResponse.Poller.FinalResponse(ctx)
					if err != nil {
						t.Fatalf("Request error: %v", err)
					}
					break
				}
			}
		} else {
			_, err = clientDeletePollerResponse.PollUntilDone(ctx, 10*time.Second)
			if err != nil {
				t.Fatalf("Request error: %v", err)
			}
		}
	}
}

func cleanup(t *testing.T) {
}
