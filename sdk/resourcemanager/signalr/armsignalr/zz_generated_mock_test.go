//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armsignalr

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"golang.org/x/net/http2"
)

var (
	ctx            context.Context
	subscriptionId string
	cred           azcore.TokenCredential
	err            error
	con            *arm.Connection
	mockHost       string
)

func TestOperations_List(t *testing.T) {
	// From example Operations_List
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewOperationsClient(con)
	pager := client.List(&OperationsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
	}
}

func TestSignalR_CheckNameAvailability(t *testing.T) {
	// From example SignalR_CheckNameAvailability
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSignalRClient(con,
		"00000000-0000-0000-0000-000000000000")
	_, err := client.CheckNameAvailability(ctx,
		"eastus",
		NameAvailabilityParameters{
			Name: to.StringPtr("mySignalRService"),
			Type: to.StringPtr("Microsoft.SignalRService/SignalR"),
		},
		&SignalRCheckNameAvailabilityOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestSignalR_ListBySubscription(t *testing.T) {
	// From example SignalR_ListBySubscription
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSignalRClient(con,
		"00000000-0000-0000-0000-000000000000")
	pager := client.ListBySubscription(&SignalRListBySubscriptionOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("SignalRResource.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("SignalRResource.ID should not be nil!")
			}
		}
	}
}

func TestSignalR_ListByResourceGroup(t *testing.T) {
	// From example SignalR_ListByResourceGroup
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSignalRClient(con,
		"00000000-0000-0000-0000-000000000000")
	pager := client.ListByResourceGroup("myResourceGroup",
		&SignalRListByResourceGroupOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("SignalRResource.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("SignalRResource.ID should not be nil!")
			}
		}
	}
}

func TestSignalR_Get(t *testing.T) {
	// From example SignalR_Get
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSignalRClient(con,
		"00000000-0000-0000-0000-000000000000")
	res, err := client.Get(ctx,
		"myResourceGroup",
		"mySignalRService",
		&SignalRGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.SignalRResource.ID == nil {
		t.Fatal("SignalRResource.ID should not be nil!")
	}
}

func TestSignalR_CreateOrUpdate(t *testing.T) {
	// From example SignalR_CreateOrUpdate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSignalRClient(con,
		"00000000-0000-0000-0000-000000000000")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"mySignalRService",
		SignalRResource{
			TrackedResource: TrackedResource{
				Location: to.StringPtr("eastus"),
				Tags: map[string]*string{
					"key1": to.StringPtr("value1"),
				},
			},
			Identity: &ManagedIdentity{
				Type: ManagedIdentityTypeSystemAssigned.ToPtr(),
			},
			Kind: ServiceKindSignalR.ToPtr(),
			Properties: &SignalRProperties{
				Cors: &SignalRCorsSettings{
					AllowedOrigins: []*string{
						to.StringPtr("https://foo.com"),
						to.StringPtr("https://bar.com")},
				},
				DisableAADAuth:   to.BoolPtr(false),
				DisableLocalAuth: to.BoolPtr(false),
				Features: []*SignalRFeature{
					{
						Flag:       FeatureFlagsServiceMode.ToPtr(),
						Properties: map[string]*string{},
						Value:      to.StringPtr("Serverless"),
					},
					{
						Flag:       FeatureFlagsEnableConnectivityLogs.ToPtr(),
						Properties: map[string]*string{},
						Value:      to.StringPtr("True"),
					},
					{
						Flag:       FeatureFlagsEnableMessagingLogs.ToPtr(),
						Properties: map[string]*string{},
						Value:      to.StringPtr("False"),
					},
					{
						Flag:       FeatureFlagsEnableLiveTrace.ToPtr(),
						Properties: map[string]*string{},
						Value:      to.StringPtr("False"),
					}},
				NetworkACLs: &SignalRNetworkACLs{
					DefaultAction: ACLActionDeny.ToPtr(),
					PrivateEndpoints: []*PrivateEndpointACL{
						{
							NetworkACL: NetworkACL{
								Allow: []*SignalRRequestType{
									SignalRRequestTypeServerConnection.ToPtr()},
							},
							Name: to.StringPtr("mysignalrservice.1fa229cd-bf3f-47f0-8c49-afb36723997e"),
						}},
					PublicNetwork: &NetworkACL{
						Allow: []*SignalRRequestType{
							SignalRRequestTypeClientConnection.ToPtr()},
					},
				},
				PublicNetworkAccess: to.StringPtr("Enabled"),
				TLS: &SignalRTLSSettings{
					ClientCertEnabled: to.BoolPtr(false),
				},
				Upstream: &ServerlessUpstreamSettings{
					Templates: []*UpstreamTemplate{
						{
							Auth: &UpstreamAuthSettings{
								Type: UpstreamAuthTypeManagedIdentity.ToPtr(),
								ManagedIdentity: &ManagedIdentitySettings{
									Resource: to.StringPtr("api://example"),
								},
							},
							CategoryPattern: to.StringPtr("*"),
							EventPattern:    to.StringPtr("connect,disconnect"),
							HubPattern:      to.StringPtr("*"),
							URLTemplate:     to.StringPtr("https://example.com/chat/api/connect"),
						}},
				},
			},
			SKU: &ResourceSKU{
				Name:     to.StringPtr("Standard_S1"),
				Capacity: to.Int32Ptr(1),
				Tier:     SignalRSKUTierStandard.ToPtr(),
			},
		},
		&SignalRBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.SignalRResource.ID == nil {
		t.Fatal("SignalRResource.ID should not be nil!")
	}
}

func TestSignalR_Delete(t *testing.T) {
	// From example SignalR_Delete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSignalRClient(con,
		"00000000-0000-0000-0000-000000000000")
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"mySignalRService",
		&SignalRBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestSignalR_Update(t *testing.T) {
	// From example SignalR_Update
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSignalRClient(con,
		"00000000-0000-0000-0000-000000000000")
	poller, err := client.BeginUpdate(ctx,
		"myResourceGroup",
		"mySignalRService",
		SignalRResource{
			TrackedResource: TrackedResource{
				Location: to.StringPtr("eastus"),
				Tags: map[string]*string{
					"key1": to.StringPtr("value1"),
				},
			},
			Identity: &ManagedIdentity{
				Type: ManagedIdentityTypeSystemAssigned.ToPtr(),
			},
			Kind: ServiceKindSignalR.ToPtr(),
			Properties: &SignalRProperties{
				Cors: &SignalRCorsSettings{
					AllowedOrigins: []*string{
						to.StringPtr("https://foo.com"),
						to.StringPtr("https://bar.com")},
				},
				DisableAADAuth:   to.BoolPtr(false),
				DisableLocalAuth: to.BoolPtr(false),
				Features: []*SignalRFeature{
					{
						Flag:       FeatureFlagsServiceMode.ToPtr(),
						Properties: map[string]*string{},
						Value:      to.StringPtr("Serverless"),
					},
					{
						Flag:       FeatureFlagsEnableConnectivityLogs.ToPtr(),
						Properties: map[string]*string{},
						Value:      to.StringPtr("True"),
					},
					{
						Flag:       FeatureFlagsEnableMessagingLogs.ToPtr(),
						Properties: map[string]*string{},
						Value:      to.StringPtr("False"),
					},
					{
						Flag:       FeatureFlagsEnableLiveTrace.ToPtr(),
						Properties: map[string]*string{},
						Value:      to.StringPtr("False"),
					}},
				NetworkACLs: &SignalRNetworkACLs{
					DefaultAction: ACLActionDeny.ToPtr(),
					PrivateEndpoints: []*PrivateEndpointACL{
						{
							NetworkACL: NetworkACL{
								Allow: []*SignalRRequestType{
									SignalRRequestTypeServerConnection.ToPtr()},
							},
							Name: to.StringPtr("mysignalrservice.1fa229cd-bf3f-47f0-8c49-afb36723997e"),
						}},
					PublicNetwork: &NetworkACL{
						Allow: []*SignalRRequestType{
							SignalRRequestTypeClientConnection.ToPtr()},
					},
				},
				PublicNetworkAccess: to.StringPtr("Enabled"),
				TLS: &SignalRTLSSettings{
					ClientCertEnabled: to.BoolPtr(false),
				},
				Upstream: &ServerlessUpstreamSettings{
					Templates: []*UpstreamTemplate{
						{
							Auth: &UpstreamAuthSettings{
								Type: UpstreamAuthTypeManagedIdentity.ToPtr(),
								ManagedIdentity: &ManagedIdentitySettings{
									Resource: to.StringPtr("api://example"),
								},
							},
							CategoryPattern: to.StringPtr("*"),
							EventPattern:    to.StringPtr("connect,disconnect"),
							HubPattern:      to.StringPtr("*"),
							URLTemplate:     to.StringPtr("https://example.com/chat/api/connect"),
						}},
				},
			},
			SKU: &ResourceSKU{
				Name:     to.StringPtr("Standard_S1"),
				Capacity: to.Int32Ptr(1),
				Tier:     SignalRSKUTierStandard.ToPtr(),
			},
		},
		&SignalRBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.SignalRResource.ID == nil {
		t.Fatal("SignalRResource.ID should not be nil!")
	}
}

func TestSignalR_ListKeys(t *testing.T) {
	// From example SignalR_ListKeys
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSignalRClient(con,
		"00000000-0000-0000-0000-000000000000")
	_, err := client.ListKeys(ctx,
		"myResourceGroup",
		"mySignalRService",
		&SignalRListKeysOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestSignalR_RegenerateKey(t *testing.T) {
	// From example SignalR_RegenerateKey
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSignalRClient(con,
		"00000000-0000-0000-0000-000000000000")
	poller, err := client.BeginRegenerateKey(ctx,
		"myResourceGroup",
		"mySignalRService",
		RegenerateKeyParameters{
			KeyType: KeyTypePrimary.ToPtr(),
		},
		&SignalRBeginRegenerateKeyOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestSignalR_Restart(t *testing.T) {
	// From example SignalR_Restart
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSignalRClient(con,
		"00000000-0000-0000-0000-000000000000")
	poller, err := client.BeginRestart(ctx,
		"myResourceGroup",
		"mySignalRService",
		&SignalRBeginRestartOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestSignalR_ListSkus(t *testing.T) {
	// From example SignalR_ListSkus
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSignalRClient(con,
		"00000000-0000-0000-0000-000000000000")
	_, err := client.ListSKUs(ctx,
		"myResourceGroup",
		"mySignalRService",
		&SignalRListSKUsOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestUsages_List(t *testing.T) {
	// From example Usages_List
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewUsagesClient(con,
		"00000000-0000-0000-0000-000000000000")
	pager := client.List("eastus",
		&UsagesListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("SignalRUsage.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("SignalRUsage.ID should not be nil!")
			}
		}
	}
}

func TestSignalRPrivateEndpointConnections_List(t *testing.T) {
	// From example SignalRPrivateEndpointConnections_List
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSignalRPrivateEndpointConnectionsClient(con,
		"00000000-0000-0000-0000-000000000000")
	pager := client.List("myResourceGroup",
		"mySignalRService",
		&SignalRPrivateEndpointConnectionsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("PrivateEndpointConnection.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("PrivateEndpointConnection.ID should not be nil!")
			}
		}
	}
}

func TestSignalRPrivateEndpointConnections_Get(t *testing.T) {
	// From example SignalRPrivateEndpointConnections_Get
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSignalRPrivateEndpointConnectionsClient(con,
		"00000000-0000-0000-0000-000000000000")
	res, err := client.Get(ctx,
		"mysignalrservice.1fa229cd-bf3f-47f0-8c49-afb36723997e",
		"myResourceGroup",
		"mySignalRService",
		&SignalRPrivateEndpointConnectionsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.PrivateEndpointConnection.ID == nil {
		t.Fatal("PrivateEndpointConnection.ID should not be nil!")
	}
}

func TestSignalRPrivateEndpointConnections_Update(t *testing.T) {
	// From example SignalRPrivateEndpointConnections_Update
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSignalRPrivateEndpointConnectionsClient(con,
		"00000000-0000-0000-0000-000000000000")
	res, err := client.Update(ctx,
		"mysignalrservice.1fa229cd-bf3f-47f0-8c49-afb36723997e",
		"myResourceGroup",
		"mySignalRService",
		PrivateEndpointConnection{
			Properties: &PrivateEndpointConnectionProperties{
				PrivateEndpoint: &PrivateEndpoint{
					ID: to.StringPtr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.Network/privateEndpoints/myPrivateEndpoint"),
				},
				PrivateLinkServiceConnectionState: &PrivateLinkServiceConnectionState{
					ActionsRequired: to.StringPtr("None"),
					Status:          PrivateLinkServiceConnectionStatusApproved.ToPtr(),
				},
			},
		},
		&SignalRPrivateEndpointConnectionsUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.PrivateEndpointConnection.ID == nil {
		t.Fatal("PrivateEndpointConnection.ID should not be nil!")
	}
}

func TestSignalRPrivateEndpointConnections_Delete(t *testing.T) {
	// From example SignalRPrivateEndpointConnections_Delete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSignalRPrivateEndpointConnectionsClient(con,
		"00000000-0000-0000-0000-000000000000")
	poller, err := client.BeginDelete(ctx,
		"mysignalrservice.1fa229cd-bf3f-47f0-8c49-afb36723997e",
		"myResourceGroup",
		"mySignalRService",
		&SignalRPrivateEndpointConnectionsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestSignalRPrivateLinkResources_List(t *testing.T) {
	// From example SignalRPrivateLinkResources_List
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSignalRPrivateLinkResourcesClient(con,
		"00000000-0000-0000-0000-000000000000")
	pager := client.List("myResourceGroup",
		"mySignalRService",
		&SignalRPrivateLinkResourcesListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("PrivateLinkResource.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("PrivateLinkResource.ID should not be nil!")
			}
		}
	}
}

func TestSignalRSharedPrivateLinkResources_List(t *testing.T) {
	// From example SignalRSharedPrivateLinkResources_List
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSignalRSharedPrivateLinkResourcesClient(con,
		"00000000-0000-0000-0000-000000000000")
	pager := client.List("myResourceGroup",
		"mySignalRService",
		&SignalRSharedPrivateLinkResourcesListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("SharedPrivateLinkResource.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("SharedPrivateLinkResource.ID should not be nil!")
			}
		}
	}
}

func TestSignalRSharedPrivateLinkResources_Get(t *testing.T) {
	// From example SignalRSharedPrivateLinkResources_Get
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSignalRSharedPrivateLinkResourcesClient(con,
		"00000000-0000-0000-0000-000000000000")
	res, err := client.Get(ctx,
		"upstream",
		"myResourceGroup",
		"mySignalRService",
		&SignalRSharedPrivateLinkResourcesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.SharedPrivateLinkResource.ID == nil {
		t.Fatal("SharedPrivateLinkResource.ID should not be nil!")
	}
}

func TestSignalRSharedPrivateLinkResources_CreateOrUpdate(t *testing.T) {
	// From example SignalRSharedPrivateLinkResources_CreateOrUpdate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSignalRSharedPrivateLinkResourcesClient(con,
		"00000000-0000-0000-0000-000000000000")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"upstream",
		"myResourceGroup",
		"mySignalRService",
		SharedPrivateLinkResource{
			Properties: &SharedPrivateLinkResourceProperties{
				GroupID:               to.StringPtr("sites"),
				PrivateLinkResourceID: to.StringPtr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.Web/sites/myWebApp"),
				RequestMessage:        to.StringPtr("Please approve"),
			},
		},
		&SignalRSharedPrivateLinkResourcesBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.SharedPrivateLinkResource.ID == nil {
		t.Fatal("SharedPrivateLinkResource.ID should not be nil!")
	}
}

func TestSignalRSharedPrivateLinkResources_Delete(t *testing.T) {
	// From example SignalRSharedPrivateLinkResources_Delete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSignalRSharedPrivateLinkResourcesClient(con,
		"00000000-0000-0000-0000-000000000000")
	poller, err := client.BeginDelete(ctx,
		"upstream",
		"myResourceGroup",
		"mySignalRService",
		&SignalRSharedPrivateLinkResourcesBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	subscriptionId = getEnv("SUBSCRIPTION_ID", "00000000-0000-0000-0000-000000000000")
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}
	cred, err = azidentity.NewEnvironmentCredential(&azidentity.EnvironmentCredentialOptions{AuthorityHost: mockHost, HTTPClient: client})
	if err != nil {
		panic(err)
	}

	con = arm.NewConnection(mockHost, cred, &arm.ConnectionOptions{
		Logging: policy.LogOptions{
			IncludeBody: true,
		},
		HTTPClient: client,
	})
}

func tearDown() {

}
