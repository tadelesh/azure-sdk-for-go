//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armsignalr_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/signalr/armsignalr"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestOperations_List(t *testing.T) {
	// From example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/Operations_List.json
	ctx = policy.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Operations_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsignalr.NewOperationsClient(cred, &options)
	pager := client.List(nil)
	for {
		nextResult := pager.NextPage(ctx)
		if err := pager.Err(); err != nil {
			t.Fatalf("Failed to advance page for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/Operations_List.json: %v", err)
		}
		// Response check
		if nextResult {
			pagerExampleRes := armsignalr.OperationList{
				Value: []*armsignalr.Operation{
					{
						Name: to.StringPtr("Microsoft.SignalRService/SignalR/read"),
						Display: &armsignalr.OperationDisplay{
							Description: to.StringPtr("View the resource settings and configurations in the management portal or through API"),
							Operation:   to.StringPtr("Manage SignalR (read-only)"),
							Provider:    to.StringPtr("Microsoft.SignalRService"),
							Resource:    to.StringPtr("SignalR"),
						},
						IsDataAction: to.BoolPtr(false),
						Properties:   &armsignalr.OperationProperties{},
					}},
			}
			if !reflect.DeepEqual(pagerExampleRes, pager.PageResponse().OperationList) {
				exampleResJson, _ := json.Marshal(pagerExampleRes)
				mockResJson, _ := json.Marshal(pager.PageResponse().OperationList)
				t.Fatalf("Mock response is not equal to example response for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/Operations_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
			}
		} else {
			t.Logf("Page end.")
			break
		}
	}
}

func TestSignalR_CheckNameAvailability(t *testing.T) {
	// From example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_CheckNameAvailability.json
	ctx = policy.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SignalR_CheckNameAvailability"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsignalr.NewClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.CheckNameAvailability(ctx,
		"eastus",
		armsignalr.NameAvailabilityParameters{
			Name: to.StringPtr("mySignalRService"),
			Type: to.StringPtr("Microsoft.SignalRService/SignalR"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_CheckNameAvailability.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsignalr.NameAvailability{
			Message:       to.StringPtr("The name is already taken. Please try a different name."),
			NameAvailable: to.BoolPtr(false),
			Reason:        to.StringPtr("AlreadyExists"),
		}
		if !reflect.DeepEqual(exampleRes, res.NameAvailability) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.NameAvailability)
			t.Fatalf("Mock response is not equal to example response for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_CheckNameAvailability.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSignalR_ListBySubscription(t *testing.T) {
	// From example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_ListBySubscription.json
	ctx = policy.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SignalR_ListBySubscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsignalr.NewClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.ListBySubscription(nil)
	for {
		nextResult := pager.NextPage(ctx)
		if err := pager.Err(); err != nil {
			t.Fatalf("Failed to advance page for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_ListBySubscription.json: %v", err)
		}
		// Response check
		if nextResult {
			pagerExampleRes := armsignalr.ResourceInfoList{
				Value: []*armsignalr.ResourceInfo{
					{
						Name:     to.StringPtr("mySignalRService"),
						Type:     to.StringPtr("Microsoft.SignalRService/SignalR"),
						ID:       to.StringPtr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.SignalRService/SignalR/mySignalRService"),
						Location: to.StringPtr("eastus"),
						Tags: map[string]*string{
							"key1": to.StringPtr("value1"),
						},
						Identity: &armsignalr.ManagedIdentity{
							Type:        armsignalr.ManagedIdentityTypeSystemAssigned.ToPtr(),
							PrincipalID: to.StringPtr("00000000-0000-0000-0000-000000000000"),
							TenantID:    to.StringPtr("00000000-0000-0000-0000-000000000000"),
						},
						Kind: armsignalr.ServiceKindSignalR.ToPtr(),
						Properties: &armsignalr.Properties{
							Cors: &armsignalr.CorsSettings{
								AllowedOrigins: []*string{
									to.StringPtr("https://foo.com"),
									to.StringPtr("https://bar.com")},
							},
							DisableAADAuth:   to.BoolPtr(false),
							DisableLocalAuth: to.BoolPtr(false),
							ExternalIP:       to.StringPtr("10.0.0.1"),
							Features: []*armsignalr.Feature{
								{
									Flag:       armsignalr.FeatureFlagsServiceMode.ToPtr(),
									Properties: map[string]*string{},
									Value:      to.StringPtr("Serverless"),
								},
								{
									Flag:       armsignalr.FeatureFlagsEnableConnectivityLogs.ToPtr(),
									Properties: map[string]*string{},
									Value:      to.StringPtr("True"),
								},
								{
									Flag:       armsignalr.FeatureFlagsEnableMessagingLogs.ToPtr(),
									Properties: map[string]*string{},
									Value:      to.StringPtr("False"),
								},
								{
									Flag:       armsignalr.FeatureFlagsEnableLiveTrace.ToPtr(),
									Properties: map[string]*string{},
									Value:      to.StringPtr("False"),
								}},
							HostName: to.StringPtr("mysignalrservice.service.signalr.net"),
							NetworkACLs: &armsignalr.NetworkACLs{
								DefaultAction: armsignalr.ACLActionDeny.ToPtr(),
								PrivateEndpoints: []*armsignalr.PrivateEndpointACL{
									{
										Allow: []*armsignalr.SignalRRequestType{
											armsignalr.SignalRRequestTypeServerConnection.ToPtr()},
										Name: to.StringPtr("mysignalrservice.1fa229cd-bf3f-47f0-8c49-afb36723997e"),
									}},
								PublicNetwork: &armsignalr.NetworkACL{
									Allow: []*armsignalr.SignalRRequestType{
										armsignalr.SignalRRequestTypeClientConnection.ToPtr()},
								},
							},
							PrivateEndpointConnections: []*armsignalr.PrivateEndpointConnection{
								{
									Name: to.StringPtr("mysignalrservice.1fa229cd-bf3f-47f0-8c49-afb36723997e"),
									Type: to.StringPtr("Microsoft.SignalRService/SignalR/privateEndpointConnections"),
									ID:   to.StringPtr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.SignalRService/SignalR/mySignalRService/privateEndpointConnections/mysignalrservice.1fa229cd-bf3f-47f0-8c49-afb36723997e"),
									Properties: &armsignalr.PrivateEndpointConnectionProperties{
										PrivateEndpoint: &armsignalr.PrivateEndpoint{
											ID: to.StringPtr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.Network/privateEndpoints/myPrivateEndpoint"),
										},
										PrivateLinkServiceConnectionState: &armsignalr.PrivateLinkServiceConnectionState{
											ActionsRequired: to.StringPtr("None"),
											Status:          armsignalr.PrivateLinkServiceConnectionStatusApproved.ToPtr(),
										},
										ProvisioningState: armsignalr.ProvisioningStateSucceeded.ToPtr(),
									},
									SystemData: &armsignalr.SystemData{
										CreatedAt:          to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06Z"); return t }()),
										CreatedBy:          to.StringPtr("string"),
										CreatedByType:      armsignalr.CreatedByTypeUser.ToPtr(),
										LastModifiedAt:     to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06Z"); return t }()),
										LastModifiedBy:     to.StringPtr("string"),
										LastModifiedByType: armsignalr.CreatedByTypeUser.ToPtr(),
									},
								}},
							ProvisioningState:   armsignalr.ProvisioningStateSucceeded.ToPtr(),
							PublicNetworkAccess: to.StringPtr("Enabled"),
							PublicPort:          to.Int32Ptr(443),
							ServerPort:          to.Int32Ptr(443),
							TLS: &armsignalr.TLSSettings{
								ClientCertEnabled: to.BoolPtr(true),
							},
							Upstream: &armsignalr.ServerlessUpstreamSettings{
								Templates: []*armsignalr.UpstreamTemplate{
									{
										URLTemplate: to.StringPtr("http://foo.com"),
									}},
							},
							Version: to.StringPtr("1.0"),
						},
						SKU: &armsignalr.ResourceSKU{
							Name:     to.StringPtr("Standard_S1"),
							Capacity: to.Int32Ptr(1),
							Size:     to.StringPtr("S1"),
							Tier:     armsignalr.SignalRSKUTierStandard.ToPtr(),
						},
						SystemData: &armsignalr.SystemData{
							CreatedAt:          to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06Z"); return t }()),
							CreatedBy:          to.StringPtr("string"),
							CreatedByType:      armsignalr.CreatedByTypeUser.ToPtr(),
							LastModifiedAt:     to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06Z"); return t }()),
							LastModifiedBy:     to.StringPtr("string"),
							LastModifiedByType: armsignalr.CreatedByTypeUser.ToPtr(),
						},
					}},
			}
			if !reflect.DeepEqual(pagerExampleRes, pager.PageResponse().ResourceInfoList) {
				exampleResJson, _ := json.Marshal(pagerExampleRes)
				mockResJson, _ := json.Marshal(pager.PageResponse().ResourceInfoList)
				t.Fatalf("Mock response is not equal to example response for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_ListBySubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
			}
		} else {
			t.Logf("Page end.")
			break
		}
	}
}

func TestSignalR_ListByResourceGroup(t *testing.T) {
	// From example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_ListByResourceGroup.json
	ctx = policy.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SignalR_ListByResourceGroup"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsignalr.NewClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.ListByResourceGroup("myResourceGroup",
		nil)
	for {
		nextResult := pager.NextPage(ctx)
		if err := pager.Err(); err != nil {
			t.Fatalf("Failed to advance page for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_ListByResourceGroup.json: %v", err)
		}
		// Response check
		if nextResult {
			pagerExampleRes := armsignalr.ResourceInfoList{
				Value: []*armsignalr.ResourceInfo{
					{
						Name:     to.StringPtr("mySignalRService"),
						Type:     to.StringPtr("Microsoft.SignalRService/SignalR"),
						ID:       to.StringPtr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.SignalRService/SignalR/mySignalRService"),
						Location: to.StringPtr("eastus"),
						Tags: map[string]*string{
							"key1": to.StringPtr("value1"),
						},
						Identity: &armsignalr.ManagedIdentity{
							Type:        armsignalr.ManagedIdentityTypeSystemAssigned.ToPtr(),
							PrincipalID: to.StringPtr("00000000-0000-0000-0000-000000000000"),
							TenantID:    to.StringPtr("00000000-0000-0000-0000-000000000000"),
						},
						Kind: armsignalr.ServiceKindSignalR.ToPtr(),
						Properties: &armsignalr.Properties{
							Cors: &armsignalr.CorsSettings{
								AllowedOrigins: []*string{
									to.StringPtr("https://foo.com"),
									to.StringPtr("https://bar.com")},
							},
							DisableAADAuth:   to.BoolPtr(false),
							DisableLocalAuth: to.BoolPtr(false),
							ExternalIP:       to.StringPtr("10.0.0.1"),
							Features: []*armsignalr.Feature{
								{
									Flag:       armsignalr.FeatureFlagsServiceMode.ToPtr(),
									Properties: map[string]*string{},
									Value:      to.StringPtr("Serverless"),
								},
								{
									Flag:       armsignalr.FeatureFlagsEnableConnectivityLogs.ToPtr(),
									Properties: map[string]*string{},
									Value:      to.StringPtr("True"),
								},
								{
									Flag:       armsignalr.FeatureFlagsEnableMessagingLogs.ToPtr(),
									Properties: map[string]*string{},
									Value:      to.StringPtr("False"),
								},
								{
									Flag:       armsignalr.FeatureFlagsEnableLiveTrace.ToPtr(),
									Properties: map[string]*string{},
									Value:      to.StringPtr("False"),
								}},
							HostName: to.StringPtr("mysignalrservice.service.signalr.net"),
							NetworkACLs: &armsignalr.NetworkACLs{
								DefaultAction: armsignalr.ACLActionDeny.ToPtr(),
								PrivateEndpoints: []*armsignalr.PrivateEndpointACL{
									{
										Allow: []*armsignalr.SignalRRequestType{
											armsignalr.SignalRRequestTypeServerConnection.ToPtr()},
										Name: to.StringPtr("mysignalrservice.1fa229cd-bf3f-47f0-8c49-afb36723997e"),
									}},
								PublicNetwork: &armsignalr.NetworkACL{
									Allow: []*armsignalr.SignalRRequestType{
										armsignalr.SignalRRequestTypeClientConnection.ToPtr()},
								},
							},
							PrivateEndpointConnections: []*armsignalr.PrivateEndpointConnection{
								{
									Name: to.StringPtr("mysignalrservice.1fa229cd-bf3f-47f0-8c49-afb36723997e"),
									Type: to.StringPtr("Microsoft.SignalRService/SignalR/privateEndpointConnections"),
									ID:   to.StringPtr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.SignalRService/SignalR/mySignalRService/privateEndpointConnections/mysignalrservice.1fa229cd-bf3f-47f0-8c49-afb36723997e"),
									Properties: &armsignalr.PrivateEndpointConnectionProperties{
										PrivateEndpoint: &armsignalr.PrivateEndpoint{
											ID: to.StringPtr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.Network/privateEndpoints/myPrivateEndpoint"),
										},
										PrivateLinkServiceConnectionState: &armsignalr.PrivateLinkServiceConnectionState{
											ActionsRequired: to.StringPtr("None"),
											Status:          armsignalr.PrivateLinkServiceConnectionStatusApproved.ToPtr(),
										},
										ProvisioningState: armsignalr.ProvisioningStateSucceeded.ToPtr(),
									},
									SystemData: &armsignalr.SystemData{
										CreatedAt:          to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06Z"); return t }()),
										CreatedBy:          to.StringPtr("string"),
										CreatedByType:      armsignalr.CreatedByTypeUser.ToPtr(),
										LastModifiedAt:     to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06Z"); return t }()),
										LastModifiedBy:     to.StringPtr("string"),
										LastModifiedByType: armsignalr.CreatedByTypeUser.ToPtr(),
									},
								}},
							ProvisioningState:   armsignalr.ProvisioningStateSucceeded.ToPtr(),
							PublicNetworkAccess: to.StringPtr("Enabled"),
							PublicPort:          to.Int32Ptr(443),
							ServerPort:          to.Int32Ptr(443),
							TLS: &armsignalr.TLSSettings{
								ClientCertEnabled: to.BoolPtr(true),
							},
							Upstream: &armsignalr.ServerlessUpstreamSettings{
								Templates: []*armsignalr.UpstreamTemplate{
									{
										URLTemplate: to.StringPtr("http://foo.com"),
									}},
							},
							Version: to.StringPtr("1.0"),
						},
						SKU: &armsignalr.ResourceSKU{
							Name:     to.StringPtr("Standard_S1"),
							Capacity: to.Int32Ptr(1),
							Size:     to.StringPtr("S1"),
							Tier:     armsignalr.SignalRSKUTierStandard.ToPtr(),
						},
						SystemData: &armsignalr.SystemData{
							CreatedAt:          to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06Z"); return t }()),
							CreatedBy:          to.StringPtr("string"),
							CreatedByType:      armsignalr.CreatedByTypeUser.ToPtr(),
							LastModifiedAt:     to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06Z"); return t }()),
							LastModifiedBy:     to.StringPtr("string"),
							LastModifiedByType: armsignalr.CreatedByTypeUser.ToPtr(),
						},
					}},
			}
			if !reflect.DeepEqual(pagerExampleRes, pager.PageResponse().ResourceInfoList) {
				exampleResJson, _ := json.Marshal(pagerExampleRes)
				mockResJson, _ := json.Marshal(pager.PageResponse().ResourceInfoList)
				t.Fatalf("Mock response is not equal to example response for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_ListByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
			}
		} else {
			t.Logf("Page end.")
			break
		}
	}
}

func TestSignalR_Get(t *testing.T) {
	// From example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_Get.json
	ctx = policy.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SignalR_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsignalr.NewClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		"myResourceGroup",
		"mySignalRService",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsignalr.ResourceInfo{
			Name:     to.StringPtr("mySignalRService"),
			Type:     to.StringPtr("Microsoft.SignalRService/SignalR"),
			ID:       to.StringPtr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.SignalRService/SignalR/mySignalRService"),
			Location: to.StringPtr("eastus"),
			Tags: map[string]*string{
				"key1": to.StringPtr("value1"),
			},
			Identity: &armsignalr.ManagedIdentity{
				Type:        armsignalr.ManagedIdentityTypeSystemAssigned.ToPtr(),
				PrincipalID: to.StringPtr("00000000-0000-0000-0000-000000000000"),
				TenantID:    to.StringPtr("00000000-0000-0000-0000-000000000000"),
			},
			Kind: armsignalr.ServiceKindSignalR.ToPtr(),
			Properties: &armsignalr.Properties{
				Cors: &armsignalr.CorsSettings{
					AllowedOrigins: []*string{
						to.StringPtr("https://foo.com"),
						to.StringPtr("https://bar.com")},
				},
				DisableAADAuth:   to.BoolPtr(false),
				DisableLocalAuth: to.BoolPtr(false),
				ExternalIP:       to.StringPtr("10.0.0.1"),
				Features: []*armsignalr.Feature{
					{
						Flag:       armsignalr.FeatureFlagsServiceMode.ToPtr(),
						Properties: map[string]*string{},
						Value:      to.StringPtr("Serverless"),
					},
					{
						Flag:       armsignalr.FeatureFlagsEnableConnectivityLogs.ToPtr(),
						Properties: map[string]*string{},
						Value:      to.StringPtr("True"),
					},
					{
						Flag:       armsignalr.FeatureFlagsEnableMessagingLogs.ToPtr(),
						Properties: map[string]*string{},
						Value:      to.StringPtr("False"),
					},
					{
						Flag:       armsignalr.FeatureFlagsEnableLiveTrace.ToPtr(),
						Properties: map[string]*string{},
						Value:      to.StringPtr("False"),
					}},
				HostName: to.StringPtr("mysignalrservice.service.signalr.net"),
				NetworkACLs: &armsignalr.NetworkACLs{
					DefaultAction: armsignalr.ACLActionDeny.ToPtr(),
					PrivateEndpoints: []*armsignalr.PrivateEndpointACL{
						{
							Allow: []*armsignalr.SignalRRequestType{
								armsignalr.SignalRRequestTypeServerConnection.ToPtr()},
							Name: to.StringPtr("mysignalrservice.1fa229cd-bf3f-47f0-8c49-afb36723997e"),
						}},
					PublicNetwork: &armsignalr.NetworkACL{
						Allow: []*armsignalr.SignalRRequestType{
							armsignalr.SignalRRequestTypeClientConnection.ToPtr()},
					},
				},
				PrivateEndpointConnections: []*armsignalr.PrivateEndpointConnection{
					{
						Name: to.StringPtr("mysignalrservice.1fa229cd-bf3f-47f0-8c49-afb36723997e"),
						Type: to.StringPtr("Microsoft.SignalRService/SignalR/privateEndpointConnections"),
						ID:   to.StringPtr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.SignalRService/SignalR/mySignalRService/privateEndpointConnections/mysignalrservice.1fa229cd-bf3f-47f0-8c49-afb36723997e"),
						Properties: &armsignalr.PrivateEndpointConnectionProperties{
							PrivateEndpoint: &armsignalr.PrivateEndpoint{
								ID: to.StringPtr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.Network/privateEndpoints/myPrivateEndpoint"),
							},
							PrivateLinkServiceConnectionState: &armsignalr.PrivateLinkServiceConnectionState{
								ActionsRequired: to.StringPtr("None"),
								Status:          armsignalr.PrivateLinkServiceConnectionStatusApproved.ToPtr(),
							},
							ProvisioningState: armsignalr.ProvisioningStateSucceeded.ToPtr(),
						},
						SystemData: &armsignalr.SystemData{
							CreatedAt:          to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06Z"); return t }()),
							CreatedBy:          to.StringPtr("string"),
							CreatedByType:      armsignalr.CreatedByTypeUser.ToPtr(),
							LastModifiedAt:     to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06Z"); return t }()),
							LastModifiedBy:     to.StringPtr("string"),
							LastModifiedByType: armsignalr.CreatedByTypeUser.ToPtr(),
						},
					}},
				ProvisioningState:   armsignalr.ProvisioningStateSucceeded.ToPtr(),
				PublicNetworkAccess: to.StringPtr("Enabled"),
				PublicPort:          to.Int32Ptr(443),
				ServerPort:          to.Int32Ptr(443),
				TLS: &armsignalr.TLSSettings{
					ClientCertEnabled: to.BoolPtr(true),
				},
				Upstream: &armsignalr.ServerlessUpstreamSettings{
					Templates: []*armsignalr.UpstreamTemplate{
						{
							URLTemplate: to.StringPtr("http://foo.com"),
						}},
				},
				Version: to.StringPtr("1.0"),
			},
			SKU: &armsignalr.ResourceSKU{
				Name:     to.StringPtr("Standard_S1"),
				Capacity: to.Int32Ptr(1),
				Size:     to.StringPtr("S1"),
				Tier:     armsignalr.SignalRSKUTierStandard.ToPtr(),
			},
			SystemData: &armsignalr.SystemData{
				CreatedAt:          to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06Z"); return t }()),
				CreatedBy:          to.StringPtr("string"),
				CreatedByType:      armsignalr.CreatedByTypeUser.ToPtr(),
				LastModifiedAt:     to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06Z"); return t }()),
				LastModifiedBy:     to.StringPtr("string"),
				LastModifiedByType: armsignalr.CreatedByTypeUser.ToPtr(),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ResourceInfo) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ResourceInfo)
			t.Fatalf("Mock response is not equal to example response for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSignalR_CreateOrUpdate(t *testing.T) {
	// From example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_CreateOrUpdate.json
	ctx = policy.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SignalR_CreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsignalr.NewClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"mySignalRService",
		armsignalr.ResourceInfo{
			Location: to.StringPtr("eastus"),
			Tags: map[string]*string{
				"key1": to.StringPtr("value1"),
			},
			Identity: &armsignalr.ManagedIdentity{
				Type: armsignalr.ManagedIdentityTypeSystemAssigned.ToPtr(),
			},
			Kind: armsignalr.ServiceKindSignalR.ToPtr(),
			Properties: &armsignalr.Properties{
				Cors: &armsignalr.CorsSettings{
					AllowedOrigins: []*string{
						to.StringPtr("https://foo.com"),
						to.StringPtr("https://bar.com")},
				},
				DisableAADAuth:   to.BoolPtr(false),
				DisableLocalAuth: to.BoolPtr(false),
				Features: []*armsignalr.Feature{
					{
						Flag:       armsignalr.FeatureFlagsServiceMode.ToPtr(),
						Properties: map[string]*string{},
						Value:      to.StringPtr("Serverless"),
					},
					{
						Flag:       armsignalr.FeatureFlagsEnableConnectivityLogs.ToPtr(),
						Properties: map[string]*string{},
						Value:      to.StringPtr("True"),
					},
					{
						Flag:       armsignalr.FeatureFlagsEnableMessagingLogs.ToPtr(),
						Properties: map[string]*string{},
						Value:      to.StringPtr("False"),
					},
					{
						Flag:       armsignalr.FeatureFlagsEnableLiveTrace.ToPtr(),
						Properties: map[string]*string{},
						Value:      to.StringPtr("False"),
					}},
				NetworkACLs: &armsignalr.NetworkACLs{
					DefaultAction: armsignalr.ACLActionDeny.ToPtr(),
					PrivateEndpoints: []*armsignalr.PrivateEndpointACL{
						{
							Allow: []*armsignalr.SignalRRequestType{
								armsignalr.SignalRRequestTypeServerConnection.ToPtr()},
							Name: to.StringPtr("mysignalrservice.1fa229cd-bf3f-47f0-8c49-afb36723997e"),
						}},
					PublicNetwork: &armsignalr.NetworkACL{
						Allow: []*armsignalr.SignalRRequestType{
							armsignalr.SignalRRequestTypeClientConnection.ToPtr()},
					},
				},
				PublicNetworkAccess: to.StringPtr("Enabled"),
				TLS: &armsignalr.TLSSettings{
					ClientCertEnabled: to.BoolPtr(false),
				},
				Upstream: &armsignalr.ServerlessUpstreamSettings{
					Templates: []*armsignalr.UpstreamTemplate{
						{
							Auth: &armsignalr.UpstreamAuthSettings{
								Type: armsignalr.UpstreamAuthTypeManagedIdentity.ToPtr(),
								ManagedIdentity: &armsignalr.ManagedIdentitySettings{
									Resource: to.StringPtr("api://example"),
								},
							},
							CategoryPattern: to.StringPtr("*"),
							EventPattern:    to.StringPtr("connect,disconnect"),
							HubPattern:      to.StringPtr("*"),
							URLTemplate:     to.StringPtr("https://example.com/chat/api/connect"),
						}},
				},
			},
			SKU: &armsignalr.ResourceSKU{
				Name:     to.StringPtr("Standard_S1"),
				Capacity: to.Int32Ptr(1),
				Tier:     armsignalr.SignalRSKUTierStandard.ToPtr(),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_CreateOrUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_CreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsignalr.ResourceInfo{
			Name:     to.StringPtr("mySignalRService"),
			Type:     to.StringPtr("Microsoft.SignalRService/SignalR"),
			ID:       to.StringPtr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.SignalRService/SignalR/mySignalRService"),
			Location: to.StringPtr("eastus"),
			Tags: map[string]*string{
				"key1": to.StringPtr("value1"),
			},
			Identity: &armsignalr.ManagedIdentity{
				Type:        armsignalr.ManagedIdentityTypeSystemAssigned.ToPtr(),
				PrincipalID: to.StringPtr("00000000-0000-0000-0000-000000000000"),
				TenantID:    to.StringPtr("00000000-0000-0000-0000-000000000000"),
			},
			Kind: armsignalr.ServiceKindSignalR.ToPtr(),
			Properties: &armsignalr.Properties{
				Cors: &armsignalr.CorsSettings{
					AllowedOrigins: []*string{
						to.StringPtr("https://foo.com"),
						to.StringPtr("https://bar.com")},
				},
				DisableAADAuth:   to.BoolPtr(false),
				DisableLocalAuth: to.BoolPtr(false),
				ExternalIP:       to.StringPtr("10.0.0.1"),
				Features: []*armsignalr.Feature{
					{
						Flag:       armsignalr.FeatureFlagsServiceMode.ToPtr(),
						Properties: map[string]*string{},
						Value:      to.StringPtr("Serverless"),
					},
					{
						Flag:       armsignalr.FeatureFlagsEnableConnectivityLogs.ToPtr(),
						Properties: map[string]*string{},
						Value:      to.StringPtr("True"),
					},
					{
						Flag:       armsignalr.FeatureFlagsEnableMessagingLogs.ToPtr(),
						Properties: map[string]*string{},
						Value:      to.StringPtr("False"),
					},
					{
						Flag:       armsignalr.FeatureFlagsEnableLiveTrace.ToPtr(),
						Properties: map[string]*string{},
						Value:      to.StringPtr("False"),
					}},
				HostName: to.StringPtr("mysignalrservice.service.signalr.net"),
				NetworkACLs: &armsignalr.NetworkACLs{
					DefaultAction: armsignalr.ACLActionDeny.ToPtr(),
					PrivateEndpoints: []*armsignalr.PrivateEndpointACL{
						{
							Allow: []*armsignalr.SignalRRequestType{
								armsignalr.SignalRRequestTypeServerConnection.ToPtr()},
							Name: to.StringPtr("mysignalrservice.1fa229cd-bf3f-47f0-8c49-afb36723997e"),
						}},
					PublicNetwork: &armsignalr.NetworkACL{
						Allow: []*armsignalr.SignalRRequestType{
							armsignalr.SignalRRequestTypeClientConnection.ToPtr()},
					},
				},
				PrivateEndpointConnections: []*armsignalr.PrivateEndpointConnection{
					{
						Name: to.StringPtr("mysignalrservice.1fa229cd-bf3f-47f0-8c49-afb36723997e"),
						Type: to.StringPtr("Microsoft.SignalRService/SignalR/privateEndpointConnections"),
						ID:   to.StringPtr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.SignalRService/SignalR/mySignalRService/privateEndpointConnections/mysignalrservice.1fa229cd-bf3f-47f0-8c49-afb36723997e"),
						Properties: &armsignalr.PrivateEndpointConnectionProperties{
							PrivateEndpoint: &armsignalr.PrivateEndpoint{
								ID: to.StringPtr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.Network/privateEndpoints/myPrivateEndpoint"),
							},
							PrivateLinkServiceConnectionState: &armsignalr.PrivateLinkServiceConnectionState{
								ActionsRequired: to.StringPtr("None"),
								Status:          armsignalr.PrivateLinkServiceConnectionStatusApproved.ToPtr(),
							},
							ProvisioningState: armsignalr.ProvisioningStateSucceeded.ToPtr(),
						},
						SystemData: &armsignalr.SystemData{
							CreatedAt:          to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06Z"); return t }()),
							CreatedBy:          to.StringPtr("string"),
							CreatedByType:      armsignalr.CreatedByTypeUser.ToPtr(),
							LastModifiedAt:     to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06Z"); return t }()),
							LastModifiedBy:     to.StringPtr("string"),
							LastModifiedByType: armsignalr.CreatedByTypeUser.ToPtr(),
						},
					}},
				ProvisioningState:   armsignalr.ProvisioningStateSucceeded.ToPtr(),
				PublicNetworkAccess: to.StringPtr("Enabled"),
				PublicPort:          to.Int32Ptr(443),
				ServerPort:          to.Int32Ptr(443),
				TLS: &armsignalr.TLSSettings{
					ClientCertEnabled: to.BoolPtr(true),
				},
				Upstream: &armsignalr.ServerlessUpstreamSettings{
					Templates: []*armsignalr.UpstreamTemplate{
						{
							URLTemplate: to.StringPtr("http://foo.com"),
						}},
				},
				Version: to.StringPtr("1.0"),
			},
			SKU: &armsignalr.ResourceSKU{
				Name:     to.StringPtr("Standard_S1"),
				Capacity: to.Int32Ptr(1),
				Size:     to.StringPtr("S1"),
				Tier:     armsignalr.SignalRSKUTierStandard.ToPtr(),
			},
			SystemData: &armsignalr.SystemData{
				CreatedAt:          to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06Z"); return t }()),
				CreatedBy:          to.StringPtr("string"),
				CreatedByType:      armsignalr.CreatedByTypeUser.ToPtr(),
				LastModifiedAt:     to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06Z"); return t }()),
				LastModifiedBy:     to.StringPtr("string"),
				LastModifiedByType: armsignalr.CreatedByTypeUser.ToPtr(),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ResourceInfo) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ResourceInfo)
			t.Fatalf("Mock response is not equal to example response for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_CreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSignalR_Delete(t *testing.T) {
	// From example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_Delete.json
	ctx = policy.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SignalR_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsignalr.NewClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"mySignalRService",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_Delete.json: %v", err)
	}
}

func TestSignalR_Update(t *testing.T) {
	// From example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_Update.json
	ctx = policy.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SignalR_Update"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsignalr.NewClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"myResourceGroup",
		"mySignalRService",
		armsignalr.ResourceInfo{
			Location: to.StringPtr("eastus"),
			Tags: map[string]*string{
				"key1": to.StringPtr("value1"),
			},
			Identity: &armsignalr.ManagedIdentity{
				Type: armsignalr.ManagedIdentityTypeSystemAssigned.ToPtr(),
			},
			Kind: armsignalr.ServiceKindSignalR.ToPtr(),
			Properties: &armsignalr.Properties{
				Cors: &armsignalr.CorsSettings{
					AllowedOrigins: []*string{
						to.StringPtr("https://foo.com"),
						to.StringPtr("https://bar.com")},
				},
				DisableAADAuth:   to.BoolPtr(false),
				DisableLocalAuth: to.BoolPtr(false),
				Features: []*armsignalr.Feature{
					{
						Flag:       armsignalr.FeatureFlagsServiceMode.ToPtr(),
						Properties: map[string]*string{},
						Value:      to.StringPtr("Serverless"),
					},
					{
						Flag:       armsignalr.FeatureFlagsEnableConnectivityLogs.ToPtr(),
						Properties: map[string]*string{},
						Value:      to.StringPtr("True"),
					},
					{
						Flag:       armsignalr.FeatureFlagsEnableMessagingLogs.ToPtr(),
						Properties: map[string]*string{},
						Value:      to.StringPtr("False"),
					},
					{
						Flag:       armsignalr.FeatureFlagsEnableLiveTrace.ToPtr(),
						Properties: map[string]*string{},
						Value:      to.StringPtr("False"),
					}},
				NetworkACLs: &armsignalr.NetworkACLs{
					DefaultAction: armsignalr.ACLActionDeny.ToPtr(),
					PrivateEndpoints: []*armsignalr.PrivateEndpointACL{
						{
							Allow: []*armsignalr.SignalRRequestType{
								armsignalr.SignalRRequestTypeServerConnection.ToPtr()},
							Name: to.StringPtr("mysignalrservice.1fa229cd-bf3f-47f0-8c49-afb36723997e"),
						}},
					PublicNetwork: &armsignalr.NetworkACL{
						Allow: []*armsignalr.SignalRRequestType{
							armsignalr.SignalRRequestTypeClientConnection.ToPtr()},
					},
				},
				PublicNetworkAccess: to.StringPtr("Enabled"),
				TLS: &armsignalr.TLSSettings{
					ClientCertEnabled: to.BoolPtr(false),
				},
				Upstream: &armsignalr.ServerlessUpstreamSettings{
					Templates: []*armsignalr.UpstreamTemplate{
						{
							Auth: &armsignalr.UpstreamAuthSettings{
								Type: armsignalr.UpstreamAuthTypeManagedIdentity.ToPtr(),
								ManagedIdentity: &armsignalr.ManagedIdentitySettings{
									Resource: to.StringPtr("api://example"),
								},
							},
							CategoryPattern: to.StringPtr("*"),
							EventPattern:    to.StringPtr("connect,disconnect"),
							HubPattern:      to.StringPtr("*"),
							URLTemplate:     to.StringPtr("https://example.com/chat/api/connect"),
						}},
				},
			},
			SKU: &armsignalr.ResourceSKU{
				Name:     to.StringPtr("Standard_S1"),
				Capacity: to.Int32Ptr(1),
				Tier:     armsignalr.SignalRSKUTierStandard.ToPtr(),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_Update.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsignalr.ResourceInfo{
			Name:     to.StringPtr("mySignalRService"),
			Type:     to.StringPtr("Microsoft.SignalRService/SignalR"),
			ID:       to.StringPtr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.SignalRService/SignalR/mySignalRService"),
			Location: to.StringPtr("eastus"),
			Tags: map[string]*string{
				"key1": to.StringPtr("value1"),
			},
			Identity: &armsignalr.ManagedIdentity{
				Type:        armsignalr.ManagedIdentityTypeSystemAssigned.ToPtr(),
				PrincipalID: to.StringPtr("00000000-0000-0000-0000-000000000000"),
				TenantID:    to.StringPtr("00000000-0000-0000-0000-000000000000"),
			},
			Kind: armsignalr.ServiceKindSignalR.ToPtr(),
			Properties: &armsignalr.Properties{
				Cors: &armsignalr.CorsSettings{
					AllowedOrigins: []*string{
						to.StringPtr("https://foo.com"),
						to.StringPtr("https://bar.com")},
				},
				DisableAADAuth:   to.BoolPtr(false),
				DisableLocalAuth: to.BoolPtr(false),
				ExternalIP:       to.StringPtr("10.0.0.1"),
				Features: []*armsignalr.Feature{
					{
						Flag:       armsignalr.FeatureFlagsServiceMode.ToPtr(),
						Properties: map[string]*string{},
						Value:      to.StringPtr("Serverless"),
					},
					{
						Flag:       armsignalr.FeatureFlagsEnableConnectivityLogs.ToPtr(),
						Properties: map[string]*string{},
						Value:      to.StringPtr("True"),
					},
					{
						Flag:       armsignalr.FeatureFlagsEnableMessagingLogs.ToPtr(),
						Properties: map[string]*string{},
						Value:      to.StringPtr("False"),
					},
					{
						Flag:       armsignalr.FeatureFlagsEnableLiveTrace.ToPtr(),
						Properties: map[string]*string{},
						Value:      to.StringPtr("False"),
					}},
				HostName: to.StringPtr("mysignalrservice.service.signalr.net"),
				NetworkACLs: &armsignalr.NetworkACLs{
					DefaultAction: armsignalr.ACLActionDeny.ToPtr(),
					PrivateEndpoints: []*armsignalr.PrivateEndpointACL{
						{
							Allow: []*armsignalr.SignalRRequestType{
								armsignalr.SignalRRequestTypeServerConnection.ToPtr()},
							Name: to.StringPtr("mysignalrservice.1fa229cd-bf3f-47f0-8c49-afb36723997e"),
						}},
					PublicNetwork: &armsignalr.NetworkACL{
						Allow: []*armsignalr.SignalRRequestType{
							armsignalr.SignalRRequestTypeClientConnection.ToPtr()},
					},
				},
				PrivateEndpointConnections: []*armsignalr.PrivateEndpointConnection{
					{
						Name: to.StringPtr("mysignalrservice.1fa229cd-bf3f-47f0-8c49-afb36723997e"),
						Type: to.StringPtr("Microsoft.SignalRService/SignalR/privateEndpointConnections"),
						ID:   to.StringPtr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.SignalRService/SignalR/mySignalRService/privateEndpointConnections/mysignalrservice.1fa229cd-bf3f-47f0-8c49-afb36723997e"),
						Properties: &armsignalr.PrivateEndpointConnectionProperties{
							PrivateEndpoint: &armsignalr.PrivateEndpoint{
								ID: to.StringPtr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.Network/privateEndpoints/myPrivateEndpoint"),
							},
							PrivateLinkServiceConnectionState: &armsignalr.PrivateLinkServiceConnectionState{
								ActionsRequired: to.StringPtr("None"),
								Status:          armsignalr.PrivateLinkServiceConnectionStatusApproved.ToPtr(),
							},
							ProvisioningState: armsignalr.ProvisioningStateSucceeded.ToPtr(),
						},
						SystemData: &armsignalr.SystemData{
							CreatedAt:          to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06Z"); return t }()),
							CreatedBy:          to.StringPtr("string"),
							CreatedByType:      armsignalr.CreatedByTypeUser.ToPtr(),
							LastModifiedAt:     to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06Z"); return t }()),
							LastModifiedBy:     to.StringPtr("string"),
							LastModifiedByType: armsignalr.CreatedByTypeUser.ToPtr(),
						},
					}},
				ProvisioningState:   armsignalr.ProvisioningStateSucceeded.ToPtr(),
				PublicNetworkAccess: to.StringPtr("Enabled"),
				PublicPort:          to.Int32Ptr(443),
				ServerPort:          to.Int32Ptr(443),
				TLS: &armsignalr.TLSSettings{
					ClientCertEnabled: to.BoolPtr(true),
				},
				Upstream: &armsignalr.ServerlessUpstreamSettings{
					Templates: []*armsignalr.UpstreamTemplate{
						{
							URLTemplate: to.StringPtr("http://foo.com"),
						}},
				},
				Version: to.StringPtr("1.0"),
			},
			SKU: &armsignalr.ResourceSKU{
				Name:     to.StringPtr("Standard_S1"),
				Capacity: to.Int32Ptr(1),
				Size:     to.StringPtr("S1"),
				Tier:     armsignalr.SignalRSKUTierStandard.ToPtr(),
			},
			SystemData: &armsignalr.SystemData{
				CreatedAt:          to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06Z"); return t }()),
				CreatedBy:          to.StringPtr("string"),
				CreatedByType:      armsignalr.CreatedByTypeUser.ToPtr(),
				LastModifiedAt:     to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06Z"); return t }()),
				LastModifiedBy:     to.StringPtr("string"),
				LastModifiedByType: armsignalr.CreatedByTypeUser.ToPtr(),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ResourceInfo) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ResourceInfo)
			t.Fatalf("Mock response is not equal to example response for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSignalR_ListKeys(t *testing.T) {
	// From example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_ListKeys.json
	ctx = policy.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SignalR_ListKeys"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsignalr.NewClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.ListKeys(ctx,
		"myResourceGroup",
		"mySignalRService",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_ListKeys.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsignalr.Keys{}
		if !reflect.DeepEqual(exampleRes, res.Keys) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Keys)
			t.Fatalf("Mock response is not equal to example response for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_ListKeys.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSignalR_RegenerateKey(t *testing.T) {
	// From example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_RegenerateKey.json
	ctx = policy.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SignalR_RegenerateKey"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsignalr.NewClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginRegenerateKey(ctx,
		"myResourceGroup",
		"mySignalRService",
		armsignalr.RegenerateKeyParameters{
			KeyType: armsignalr.KeyTypePrimary.ToPtr(),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_RegenerateKey.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_RegenerateKey.json: %v", err)
	}
}

func TestSignalR_Restart(t *testing.T) {
	// From example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_Restart.json
	ctx = policy.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SignalR_Restart"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsignalr.NewClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginRestart(ctx,
		"myResourceGroup",
		"mySignalRService",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_Restart.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalR_Restart.json: %v", err)
	}
}

func TestUsages_List(t *testing.T) {
	// From example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/Usages_List.json
	ctx = policy.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Usages_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsignalr.NewUsagesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.List("eastus",
		nil)
	for {
		nextResult := pager.NextPage(ctx)
		if err := pager.Err(); err != nil {
			t.Fatalf("Failed to advance page for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/Usages_List.json: %v", err)
		}
		// Response check
		if nextResult {
			pagerExampleRes := armsignalr.UsageList{
				Value: []*armsignalr.Usage{
					{
						Name: &armsignalr.UsageName{
							LocalizedValue: to.StringPtr("Usage1"),
							Value:          to.StringPtr("Usage1"),
						},
						CurrentValue: to.Int64Ptr(0),
						ID:           to.StringPtr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.SignalRService/locations/eastus/usages/Usage1"),
						Limit:        to.Int64Ptr(100),
						Unit:         to.StringPtr("Count"),
					},
					{
						Name: &armsignalr.UsageName{
							LocalizedValue: to.StringPtr("Usage2"),
							Value:          to.StringPtr("Usage2"),
						},
						CurrentValue: to.Int64Ptr(0),
						ID:           to.StringPtr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.SignalRService/locations/eastus/usages/Usage2"),
						Limit:        to.Int64Ptr(100),
						Unit:         to.StringPtr("Count"),
					}},
			}
			if !reflect.DeepEqual(pagerExampleRes, pager.PageResponse().UsageList) {
				exampleResJson, _ := json.Marshal(pagerExampleRes)
				mockResJson, _ := json.Marshal(pager.PageResponse().UsageList)
				t.Fatalf("Mock response is not equal to example response for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/Usages_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
			}
		} else {
			t.Logf("Page end.")
			break
		}
	}
}

func TestSignalRPrivateEndpointConnections_List(t *testing.T) {
	// From example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalRPrivateEndpointConnections_List.json
	ctx = policy.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SignalRPrivateEndpointConnections_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsignalr.NewPrivateEndpointConnectionsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.List("myResourceGroup",
		"mySignalRService",
		nil)
	for {
		nextResult := pager.NextPage(ctx)
		if err := pager.Err(); err != nil {
			t.Fatalf("Failed to advance page for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalRPrivateEndpointConnections_List.json: %v", err)
		}
		// Response check
		if nextResult {
			pagerExampleRes := armsignalr.PrivateEndpointConnectionList{
				Value: []*armsignalr.PrivateEndpointConnection{
					{
						Name: to.StringPtr("mysignalrservice.1fa229cd-bf3f-47f0-8c49-afb36723997e"),
						Type: to.StringPtr("Microsoft.SignalRService/SignalR/privateEndpointConnections"),
						ID:   to.StringPtr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.SignalRService/SignalR/mySignalRService/privateEndpointConnections/mysignalrservice.1fa229cd-bf3f-47f0-8c49-afb36723997e"),
						Properties: &armsignalr.PrivateEndpointConnectionProperties{
							PrivateEndpoint: &armsignalr.PrivateEndpoint{
								ID: to.StringPtr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.Network/privateEndpoints/myPrivateEndpoint"),
							},
							PrivateLinkServiceConnectionState: &armsignalr.PrivateLinkServiceConnectionState{
								ActionsRequired: to.StringPtr("None"),
								Status:          armsignalr.PrivateLinkServiceConnectionStatusApproved.ToPtr(),
							},
							ProvisioningState: armsignalr.ProvisioningStateSucceeded.ToPtr(),
						},
						SystemData: &armsignalr.SystemData{
							CreatedAt:          to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06Z"); return t }()),
							CreatedBy:          to.StringPtr("string"),
							CreatedByType:      armsignalr.CreatedByTypeUser.ToPtr(),
							LastModifiedAt:     to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06Z"); return t }()),
							LastModifiedBy:     to.StringPtr("string"),
							LastModifiedByType: armsignalr.CreatedByTypeUser.ToPtr(),
						},
					}},
			}
			if !reflect.DeepEqual(pagerExampleRes, pager.PageResponse().PrivateEndpointConnectionList) {
				exampleResJson, _ := json.Marshal(pagerExampleRes)
				mockResJson, _ := json.Marshal(pager.PageResponse().PrivateEndpointConnectionList)
				t.Fatalf("Mock response is not equal to example response for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalRPrivateEndpointConnections_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
			}
		} else {
			t.Logf("Page end.")
			break
		}
	}
}

func TestSignalRPrivateEndpointConnections_Get(t *testing.T) {
	// From example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalRPrivateEndpointConnections_Get.json
	ctx = policy.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SignalRPrivateEndpointConnections_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsignalr.NewPrivateEndpointConnectionsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		"mysignalrservice.1fa229cd-bf3f-47f0-8c49-afb36723997e",
		"myResourceGroup",
		"mySignalRService",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalRPrivateEndpointConnections_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsignalr.PrivateEndpointConnection{
			Name: to.StringPtr("mysignalrservice.1fa229cd-bf3f-47f0-8c49-afb36723997e"),
			Type: to.StringPtr("Microsoft.SignalRService/SignalR/privateEndpointConnections"),
			ID:   to.StringPtr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.SignalRService/SignalR/mySignalRService/privateEndpointConnections/mysignalrservice.1fa229cd-bf3f-47f0-8c49-afb36723997e"),
			Properties: &armsignalr.PrivateEndpointConnectionProperties{
				PrivateEndpoint: &armsignalr.PrivateEndpoint{
					ID: to.StringPtr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.Network/privateEndpoints/myPrivateEndpoint"),
				},
				PrivateLinkServiceConnectionState: &armsignalr.PrivateLinkServiceConnectionState{
					ActionsRequired: to.StringPtr("None"),
					Status:          armsignalr.PrivateLinkServiceConnectionStatusApproved.ToPtr(),
				},
				ProvisioningState: armsignalr.ProvisioningStateSucceeded.ToPtr(),
			},
			SystemData: &armsignalr.SystemData{
				CreatedAt:          to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06Z"); return t }()),
				CreatedBy:          to.StringPtr("string"),
				CreatedByType:      armsignalr.CreatedByTypeUser.ToPtr(),
				LastModifiedAt:     to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06Z"); return t }()),
				LastModifiedBy:     to.StringPtr("string"),
				LastModifiedByType: armsignalr.CreatedByTypeUser.ToPtr(),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateEndpointConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalRPrivateEndpointConnections_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSignalRPrivateEndpointConnections_Update(t *testing.T) {
	// From example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalRPrivateEndpointConnections_Update.json
	ctx = policy.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SignalRPrivateEndpointConnections_Update"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsignalr.NewPrivateEndpointConnectionsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Update(ctx,
		"mysignalrservice.1fa229cd-bf3f-47f0-8c49-afb36723997e",
		"myResourceGroup",
		"mySignalRService",
		armsignalr.PrivateEndpointConnection{
			Properties: &armsignalr.PrivateEndpointConnectionProperties{
				PrivateEndpoint: &armsignalr.PrivateEndpoint{
					ID: to.StringPtr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.Network/privateEndpoints/myPrivateEndpoint"),
				},
				PrivateLinkServiceConnectionState: &armsignalr.PrivateLinkServiceConnectionState{
					ActionsRequired: to.StringPtr("None"),
					Status:          armsignalr.PrivateLinkServiceConnectionStatusApproved.ToPtr(),
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalRPrivateEndpointConnections_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsignalr.PrivateEndpointConnection{
			Name: to.StringPtr("mysignalrservice.1fa229cd-bf3f-47f0-8c49-afb36723997e"),
			Type: to.StringPtr("Microsoft.SignalRService/SignalR/privateEndpointConnections"),
			ID:   to.StringPtr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.SignalRService/SignalR/mySignalRService/privateEndpointConnections/mysignalrservice.1fa229cd-bf3f-47f0-8c49-afb36723997e"),
			Properties: &armsignalr.PrivateEndpointConnectionProperties{
				PrivateEndpoint: &armsignalr.PrivateEndpoint{
					ID: to.StringPtr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.Network/privateEndpoints/myPrivateEndpoint"),
				},
				PrivateLinkServiceConnectionState: &armsignalr.PrivateLinkServiceConnectionState{
					ActionsRequired: to.StringPtr("None"),
					Status:          armsignalr.PrivateLinkServiceConnectionStatusApproved.ToPtr(),
				},
				ProvisioningState: armsignalr.ProvisioningStateSucceeded.ToPtr(),
			},
			SystemData: &armsignalr.SystemData{
				CreatedAt:          to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06Z"); return t }()),
				CreatedBy:          to.StringPtr("string"),
				CreatedByType:      armsignalr.CreatedByTypeUser.ToPtr(),
				LastModifiedAt:     to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2015-02-03T04:05:06Z"); return t }()),
				LastModifiedBy:     to.StringPtr("string"),
				LastModifiedByType: armsignalr.CreatedByTypeUser.ToPtr(),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateEndpointConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalRPrivateEndpointConnections_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSignalRPrivateEndpointConnections_Delete(t *testing.T) {
	// From example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalRPrivateEndpointConnections_Delete.json
	ctx = policy.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SignalRPrivateEndpointConnections_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsignalr.NewPrivateEndpointConnectionsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"mysignalrservice.1fa229cd-bf3f-47f0-8c49-afb36723997e",
		"myResourceGroup",
		"mySignalRService",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalRPrivateEndpointConnections_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalRPrivateEndpointConnections_Delete.json: %v", err)
	}
}

func TestSignalRPrivateLinkResources_List(t *testing.T) {
	// From example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalRPrivateLinkResources_List.json
	ctx = policy.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SignalRPrivateLinkResources_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsignalr.NewPrivateLinkResourcesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.List("myResourceGroup",
		"mySignalRService",
		nil)
	for {
		nextResult := pager.NextPage(ctx)
		if err := pager.Err(); err != nil {
			t.Fatalf("Failed to advance page for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalRPrivateLinkResources_List.json: %v", err)
		}
		// Response check
		if nextResult {
			pagerExampleRes := armsignalr.PrivateLinkResourceList{
				Value: []*armsignalr.PrivateLinkResource{
					{
						Name: to.StringPtr("myPrivateLink"),
						Type: to.StringPtr("privateLinkResources"),
						ID:   to.StringPtr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.SignalRService/SignalR/mySignalRService/privateLinkResources/myPrivateLink"),
						Properties: &armsignalr.PrivateLinkResourceProperties{
							GroupID: to.StringPtr("signalr"),
							RequiredMembers: []*string{
								to.StringPtr("signalr")},
							RequiredZoneNames: []*string{
								to.StringPtr("privatelink.service.signalr.net")},
							ShareablePrivateLinkResourceTypes: []*armsignalr.ShareablePrivateLinkResourceType{
								{
									Name: to.StringPtr("site"),
									Properties: &armsignalr.ShareablePrivateLinkResourceProperties{
										Type:        to.StringPtr("Microsoft.Web/sites"),
										Description: to.StringPtr("Azure App Service can be used as an upstream"),
										GroupID:     to.StringPtr("sites"),
									},
								}},
						},
					}},
			}
			if !reflect.DeepEqual(pagerExampleRes, pager.PageResponse().PrivateLinkResourceList) {
				exampleResJson, _ := json.Marshal(pagerExampleRes)
				mockResJson, _ := json.Marshal(pager.PageResponse().PrivateLinkResourceList)
				t.Fatalf("Mock response is not equal to example response for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalRPrivateLinkResources_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
			}
		} else {
			t.Logf("Page end.")
			break
		}
	}
}

func TestSignalRSharedPrivateLinkResources_List(t *testing.T) {
	// From example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalRSharedPrivateLinkResources_List.json
	ctx = policy.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SignalRSharedPrivateLinkResources_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsignalr.NewSharedPrivateLinkResourcesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.List("myResourceGroup",
		"mySignalRService",
		nil)
	for {
		nextResult := pager.NextPage(ctx)
		if err := pager.Err(); err != nil {
			t.Fatalf("Failed to advance page for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalRSharedPrivateLinkResources_List.json: %v", err)
		}
		// Response check
		if nextResult {
			pagerExampleRes := armsignalr.SharedPrivateLinkResourceList{
				Value: []*armsignalr.SharedPrivateLinkResource{
					{
						Name: to.StringPtr("upstream"),
						Type: to.StringPtr("Microsoft.SignalRService/SignalR/privateEndpointConnections"),
						ID:   to.StringPtr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.SignalRService/SignalR/mySignalRService/privateEndpointConnections/upstream"),
						Properties: &armsignalr.SharedPrivateLinkResourceProperties{
							GroupID:               to.StringPtr("sites"),
							PrivateLinkResourceID: to.StringPtr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.Web/sites/myWebApp"),
							ProvisioningState:     armsignalr.ProvisioningStateSucceeded.ToPtr(),
							RequestMessage:        to.StringPtr("Please approve"),
							Status:                armsignalr.SharedPrivateLinkResourceStatusApproved.ToPtr(),
						},
					}},
			}
			if !reflect.DeepEqual(pagerExampleRes, pager.PageResponse().SharedPrivateLinkResourceList) {
				exampleResJson, _ := json.Marshal(pagerExampleRes)
				mockResJson, _ := json.Marshal(pager.PageResponse().SharedPrivateLinkResourceList)
				t.Fatalf("Mock response is not equal to example response for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalRSharedPrivateLinkResources_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
			}
		} else {
			t.Logf("Page end.")
			break
		}
	}
}

func TestSignalRSharedPrivateLinkResources_Get(t *testing.T) {
	// From example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalRSharedPrivateLinkResources_Get.json
	ctx = policy.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SignalRSharedPrivateLinkResources_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsignalr.NewSharedPrivateLinkResourcesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		"upstream",
		"myResourceGroup",
		"mySignalRService",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalRSharedPrivateLinkResources_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsignalr.SharedPrivateLinkResource{
			Name: to.StringPtr("upstream"),
			Type: to.StringPtr("Microsoft.SignalRService/SignalR/privateEndpointConnections"),
			ID:   to.StringPtr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.SignalRService/SignalR/mySignalRService/privateEndpointConnections/upstream"),
			Properties: &armsignalr.SharedPrivateLinkResourceProperties{
				GroupID:               to.StringPtr("sites"),
				PrivateLinkResourceID: to.StringPtr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.Web/sites/myWebApp"),
				ProvisioningState:     armsignalr.ProvisioningStateSucceeded.ToPtr(),
				RequestMessage:        to.StringPtr("Please approve"),
				Status:                armsignalr.SharedPrivateLinkResourceStatusApproved.ToPtr(),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SharedPrivateLinkResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SharedPrivateLinkResource)
			t.Fatalf("Mock response is not equal to example response for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalRSharedPrivateLinkResources_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSignalRSharedPrivateLinkResources_CreateOrUpdate(t *testing.T) {
	// From example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalRSharedPrivateLinkResources_CreateOrUpdate.json
	ctx = policy.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SignalRSharedPrivateLinkResources_CreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsignalr.NewSharedPrivateLinkResourcesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"upstream",
		"myResourceGroup",
		"mySignalRService",
		armsignalr.SharedPrivateLinkResource{
			Properties: &armsignalr.SharedPrivateLinkResourceProperties{
				GroupID:               to.StringPtr("sites"),
				PrivateLinkResourceID: to.StringPtr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.Web/sites/myWebApp"),
				RequestMessage:        to.StringPtr("Please approve"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalRSharedPrivateLinkResources_CreateOrUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalRSharedPrivateLinkResources_CreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsignalr.SharedPrivateLinkResource{
			Name: to.StringPtr("upstream"),
			Type: to.StringPtr("Microsoft.SignalRService/SignalR/privateEndpointConnections"),
			ID:   to.StringPtr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.SignalRService/SignalR/mySignalRService/privateEndpointConnections/upstream"),
			Properties: &armsignalr.SharedPrivateLinkResourceProperties{
				GroupID:               to.StringPtr("sites"),
				PrivateLinkResourceID: to.StringPtr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.Web/sites/myWebApp"),
				ProvisioningState:     armsignalr.ProvisioningStateSucceeded.ToPtr(),
				RequestMessage:        to.StringPtr("Please approve"),
				Status:                armsignalr.SharedPrivateLinkResourceStatusApproved.ToPtr(),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SharedPrivateLinkResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SharedPrivateLinkResource)
			t.Fatalf("Mock response is not equal to example response for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalRSharedPrivateLinkResources_CreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSignalRSharedPrivateLinkResources_Delete(t *testing.T) {
	// From example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalRSharedPrivateLinkResources_Delete.json
	ctx = policy.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SignalRSharedPrivateLinkResources_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsignalr.NewSharedPrivateLinkResourcesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"upstream",
		"myResourceGroup",
		"mySignalRService",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalRSharedPrivateLinkResources_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/signalr/resource-manager/Microsoft.SignalRService/preview/2021-06-01-preview/examples/SignalRSharedPrivateLinkResources_Delete.json: %v", err)
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
