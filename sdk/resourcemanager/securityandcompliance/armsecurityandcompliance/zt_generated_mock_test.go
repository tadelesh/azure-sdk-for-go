//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armsecurityandcompliance_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/securityandcompliance/armsecurityandcompliance"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestOperations_List(t *testing.T) {
	// From example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/ComplianceCenterOperationsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List ComplianceCenter operations"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityandcompliance.NewOperationsClient(cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/ComplianceCenterOperationsList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsecurityandcompliance.OperationListResult{
			Value: []*armsecurityandcompliance.Operation{
				{
					Name:    to.Ptr("Microsoft.SecurityAndCompliance/privateLinkServicesForM365ComplianceCenter/read"),
					Display: &armsecurityandcompliance.OperationDisplay{},
					Origin:  to.Ptr("user,system"),
				},
				{
					Name:    to.Ptr("Microsoft.SecurityAndCompliance/privateLinkServicesForM365ComplianceCenter/write"),
					Display: &armsecurityandcompliance.OperationDisplay{},
					Origin:  to.Ptr("user,system"),
				},
				{
					Name:    to.Ptr("Microsoft.SecurityAndCompliance/privateLinkServicesForM365ComplianceCenter/delete"),
					Display: &armsecurityandcompliance.OperationDisplay{},
					Origin:  to.Ptr("user,system"),
				},
				{
					Name:    to.Ptr("Microsoft.SecurityAndCompliance/privateLinkServicesForM365ComplianceCenter/privateEndpointConnections/read"),
					Display: &armsecurityandcompliance.OperationDisplay{},
					Origin:  to.Ptr("user,system"),
				},
				{
					Name:    to.Ptr("Microsoft.SecurityAndCompliance/privateLinkServicesForM365ComplianceCenter/privateEndpointConnections/write"),
					Display: &armsecurityandcompliance.OperationDisplay{},
					Origin:  to.Ptr("user,system"),
				},
				{
					Name:    to.Ptr("Microsoft.SecurityAndCompliance/privateLinkServicesForM365ComplianceCenter/privateEndpointConnections/delete"),
					Display: &armsecurityandcompliance.OperationDisplay{},
					Origin:  to.Ptr("user,system"),
				},
				{
					Name:    to.Ptr("Microsoft.SecurityAndCompliance/privateLinkServicesForM365ComplianceCenter/privateLinkResources/read"),
					Display: &armsecurityandcompliance.OperationDisplay{},
					Origin:  to.Ptr("user,system"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OperationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OperationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/ComplianceCenterOperationsList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/EdmUploadOperationsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List EDMUpload operations"},
	})
	client = armsecurityandcompliance.NewOperationsClient(cred, &options)
	pager = client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/EdmUploadOperationsList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsecurityandcompliance.OperationListResult{
			Value: []*armsecurityandcompliance.Operation{
				{
					Name:    to.Ptr("Microsoft.SecurityAndCompliance/privateLinkServicesForEDMUpload/read"),
					Display: &armsecurityandcompliance.OperationDisplay{},
					Origin:  to.Ptr("user,system"),
				},
				{
					Name:    to.Ptr("Microsoft.SecurityAndCompliance/privateLinkServicesForEDMUpload/write"),
					Display: &armsecurityandcompliance.OperationDisplay{},
					Origin:  to.Ptr("user,system"),
				},
				{
					Name:    to.Ptr("Microsoft.SecurityAndCompliance/privateLinkServicesForEDMUpload/delete"),
					Display: &armsecurityandcompliance.OperationDisplay{},
					Origin:  to.Ptr("user,system"),
				},
				{
					Name:    to.Ptr("Microsoft.SecurityAndCompliance/privateLinkServicesForEDMUpload/privateEndpointConnections/read"),
					Display: &armsecurityandcompliance.OperationDisplay{},
					Origin:  to.Ptr("user,system"),
				},
				{
					Name:    to.Ptr("Microsoft.SecurityAndCompliance/privateLinkServicesForEDMUpload/privateEndpointConnections/write"),
					Display: &armsecurityandcompliance.OperationDisplay{},
					Origin:  to.Ptr("user,system"),
				},
				{
					Name:    to.Ptr("Microsoft.SecurityAndCompliance/privateLinkServicesForEDMUpload/privateEndpointConnections/delete"),
					Display: &armsecurityandcompliance.OperationDisplay{},
					Origin:  to.Ptr("user,system"),
				},
				{
					Name:    to.Ptr("Microsoft.SecurityAndCompliance/privateLinkServicesForEDMUpload/privateLinkResources/read"),
					Display: &armsecurityandcompliance.OperationDisplay{},
					Origin:  to.Ptr("user,system"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OperationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OperationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/EdmUploadOperationsList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/MIPPolicySyncOperationsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List MIPPolicySync operations"},
	})
	client = armsecurityandcompliance.NewOperationsClient(cred, &options)
	pager = client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/MIPPolicySyncOperationsList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsecurityandcompliance.OperationListResult{
			Value: []*armsecurityandcompliance.Operation{
				{
					Name:    to.Ptr("Microsoft.SecurityAndCompliance/privateLinkServicesForMIPPolicySync/read"),
					Display: &armsecurityandcompliance.OperationDisplay{},
					Origin:  to.Ptr("user,system"),
				},
				{
					Name:    to.Ptr("Microsoft.SecurityAndCompliance/privateLinkServicesForMIPPolicySync/write"),
					Display: &armsecurityandcompliance.OperationDisplay{},
					Origin:  to.Ptr("user,system"),
				},
				{
					Name:    to.Ptr("Microsoft.SecurityAndCompliance/privateLinkServicesForMIPPolicySync/delete"),
					Display: &armsecurityandcompliance.OperationDisplay{},
					Origin:  to.Ptr("user,system"),
				},
				{
					Name:    to.Ptr("Microsoft.SecurityAndCompliance/privateLinkServicesForMIPPolicySync/privateEndpointConnections/read"),
					Display: &armsecurityandcompliance.OperationDisplay{},
					Origin:  to.Ptr("user,system"),
				},
				{
					Name:    to.Ptr("Microsoft.SecurityAndCompliance/privateLinkServicesForMIPPolicySync/privateEndpointConnections/write"),
					Display: &armsecurityandcompliance.OperationDisplay{},
					Origin:  to.Ptr("user,system"),
				},
				{
					Name:    to.Ptr("Microsoft.SecurityAndCompliance/privateLinkServicesForMIPPolicySync/privateEndpointConnections/delete"),
					Display: &armsecurityandcompliance.OperationDisplay{},
					Origin:  to.Ptr("user,system"),
				},
				{
					Name:    to.Ptr("Microsoft.SecurityAndCompliance/privateLinkServicesForMIPPolicySync/privateLinkResources/read"),
					Display: &armsecurityandcompliance.OperationDisplay{},
					Origin:  to.Ptr("user,system"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OperationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OperationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/MIPPolicySyncOperationsList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/ManagementAPIOperationsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List ManagementAPI operations"},
	})
	client = armsecurityandcompliance.NewOperationsClient(cred, &options)
	pager = client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/ManagementAPIOperationsList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsecurityandcompliance.OperationListResult{
			Value: []*armsecurityandcompliance.Operation{
				{
					Name:    to.Ptr("Microsoft.SecurityAndCompliance/privateLinkServicesForO365ManagementActivityAPI/read"),
					Display: &armsecurityandcompliance.OperationDisplay{},
					Origin:  to.Ptr("user,system"),
				},
				{
					Name:    to.Ptr("Microsoft.SecurityAndCompliance/privateLinkServicesForO365ManagementActivityAPI/write"),
					Display: &armsecurityandcompliance.OperationDisplay{},
					Origin:  to.Ptr("user,system"),
				},
				{
					Name:    to.Ptr("Microsoft.SecurityAndCompliance/privateLinkServicesForO365ManagementActivityAPI/delete"),
					Display: &armsecurityandcompliance.OperationDisplay{},
					Origin:  to.Ptr("user,system"),
				},
				{
					Name:    to.Ptr("Microsoft.SecurityAndCompliance/privateLinkServicesForO365ManagementActivityAPI/privateEndpointConnections/read"),
					Display: &armsecurityandcompliance.OperationDisplay{},
					Origin:  to.Ptr("user,system"),
				},
				{
					Name:    to.Ptr("Microsoft.SecurityAndCompliance/privateLinkServicesForO365ManagementActivityAPI/privateEndpointConnections/write"),
					Display: &armsecurityandcompliance.OperationDisplay{},
					Origin:  to.Ptr("user,system"),
				},
				{
					Name:    to.Ptr("Microsoft.SecurityAndCompliance/privateLinkServicesForO365ManagementActivityAPI/privateEndpointConnections/delete"),
					Display: &armsecurityandcompliance.OperationDisplay{},
					Origin:  to.Ptr("user,system"),
				},
				{
					Name:    to.Ptr("Microsoft.SecurityAndCompliance/privateLinkServicesForO365ManagementActivityAPI/privateLinkResources/read"),
					Display: &armsecurityandcompliance.OperationDisplay{},
					Origin:  to.Ptr("user,system"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OperationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OperationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/ManagementAPIOperationsList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/SCCPowershellOperationsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List SCCPowershell operations"},
	})
	client = armsecurityandcompliance.NewOperationsClient(cred, &options)
	pager = client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/SCCPowershellOperationsList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsecurityandcompliance.OperationListResult{
			Value: []*armsecurityandcompliance.Operation{
				{
					Name:    to.Ptr("Microsoft.SecurityAndCompliance/privateLinkServicesForSCCPowershell/read"),
					Display: &armsecurityandcompliance.OperationDisplay{},
					Origin:  to.Ptr("user,system"),
				},
				{
					Name:    to.Ptr("Microsoft.SecurityAndCompliance/privateLinkServicesForSCCPowershell/write"),
					Display: &armsecurityandcompliance.OperationDisplay{},
					Origin:  to.Ptr("user,system"),
				},
				{
					Name:    to.Ptr("Microsoft.SecurityAndCompliance/privateLinkServicesForSCCPowershell/delete"),
					Display: &armsecurityandcompliance.OperationDisplay{},
					Origin:  to.Ptr("user,system"),
				},
				{
					Name:    to.Ptr("Microsoft.SecurityAndCompliance/privateLinkServicesForSCCPowershell/privateEndpointConnections/read"),
					Display: &armsecurityandcompliance.OperationDisplay{},
					Origin:  to.Ptr("user,system"),
				},
				{
					Name:    to.Ptr("Microsoft.SecurityAndCompliance/privateLinkServicesForSCCPowershell/privateEndpointConnections/write"),
					Display: &armsecurityandcompliance.OperationDisplay{},
					Origin:  to.Ptr("user,system"),
				},
				{
					Name:    to.Ptr("Microsoft.SecurityAndCompliance/privateLinkServicesForSCCPowershell/privateEndpointConnections/delete"),
					Display: &armsecurityandcompliance.OperationDisplay{},
					Origin:  to.Ptr("user,system"),
				},
				{
					Name:    to.Ptr("Microsoft.SecurityAndCompliance/privateLinkServicesForSCCPowershell/privateLinkResources/read"),
					Display: &armsecurityandcompliance.OperationDisplay{},
					Origin:  to.Ptr("user,system"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OperationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OperationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/SCCPowershellOperationsList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/SecurityCenterOperationsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List SecurityCenter operations"},
	})
	client = armsecurityandcompliance.NewOperationsClient(cred, &options)
	pager = client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/SecurityCenterOperationsList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsecurityandcompliance.OperationListResult{
			Value: []*armsecurityandcompliance.Operation{
				{
					Name:    to.Ptr("Microsoft.SecurityAndCompliance/privateLinkServicesForM365SecurityCenter/read"),
					Display: &armsecurityandcompliance.OperationDisplay{},
					Origin:  to.Ptr("user,system"),
				},
				{
					Name:    to.Ptr("Microsoft.SecurityAndCompliance/privateLinkServicesForM365SecurityCenter/write"),
					Display: &armsecurityandcompliance.OperationDisplay{},
					Origin:  to.Ptr("user,system"),
				},
				{
					Name:    to.Ptr("Microsoft.SecurityAndCompliance/privateLinkServicesForM365SecurityCenter/delete"),
					Display: &armsecurityandcompliance.OperationDisplay{},
					Origin:  to.Ptr("user,system"),
				},
				{
					Name:    to.Ptr("Microsoft.SecurityAndCompliance/privateLinkServicesForM365SecurityCenter/privateEndpointConnections/read"),
					Display: &armsecurityandcompliance.OperationDisplay{},
					Origin:  to.Ptr("user,system"),
				},
				{
					Name:    to.Ptr("Microsoft.SecurityAndCompliance/privateLinkServicesForM365SecurityCenter/privateEndpointConnections/write"),
					Display: &armsecurityandcompliance.OperationDisplay{},
					Origin:  to.Ptr("user,system"),
				},
				{
					Name:    to.Ptr("Microsoft.SecurityAndCompliance/privateLinkServicesForM365SecurityCenter/privateEndpointConnections/delete"),
					Display: &armsecurityandcompliance.OperationDisplay{},
					Origin:  to.Ptr("user,system"),
				},
				{
					Name:    to.Ptr("Microsoft.SecurityAndCompliance/privateLinkServicesForM365SecurityCenter/privateLinkResources/read"),
					Display: &armsecurityandcompliance.OperationDisplay{},
					Origin:  to.Ptr("user,system"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OperationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OperationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/SecurityCenterOperationsList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/OperationsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List operations"},
	})
	client = armsecurityandcompliance.NewOperationsClient(cred, &options)
	pager = client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/OperationsList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsecurityandcompliance.OperationListResult{
			Value: []*armsecurityandcompliance.Operation{
				{
					Name: to.Ptr("Microsoft.SecurityAndCompliance/locations/operationresults/read"),
					Display: &armsecurityandcompliance.OperationDisplay{
						Description: to.Ptr("Get the status of an asynchronous operation"),
						Operation:   to.Ptr("read"),
						Provider:    to.Ptr("Microsoft.SecurityAndCompliance"),
						Resource:    to.Ptr("operationresults"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.SecurityAndCompliance/Operations/read"),
					Display: &armsecurityandcompliance.OperationDisplay{
						Description: to.Ptr("Get the list of operations supported by this Resource Provider."),
						Operation:   to.Ptr("read"),
						Provider:    to.Ptr("Microsoft.SecurityAndCompliance"),
						Resource:    to.Ptr("operations"),
					},
					Origin: to.Ptr("user,system"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OperationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OperationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/OperationsList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOperationResults_Get(t *testing.T) {
	// From example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/OperationResultsGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get operation result"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityandcompliance.NewOperationResultsClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"westus",
		"exampleid",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/OperationResultsGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityandcompliance.OperationResultsDescription{
			Name:       to.Ptr("servicename"),
			ID:         to.Ptr("/subscriptions/subid/providers/Microsoft.SecurityAndCompliance/locations/westus/operationresults/exampleid"),
			Properties: map[string]interface{}{},
			StartTime:  to.Ptr("2020-01-11T06:03:30.2716301Z"),
			Status:     to.Ptr(armsecurityandcompliance.OperationResultStatusRequested),
		}
		if !reflect.DeepEqual(exampleRes, res.OperationResultsDescription) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.OperationResultsDescription)
			t.Fatalf("Mock response is not equal to example response for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/OperationResultsGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateLinkServicesForEDMUpload_Get(t *testing.T) {
	// From example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/EdmUploadServiceGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get metadata"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityandcompliance.NewPrivateLinkServicesForEDMUploadClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"service1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/EdmUploadServiceGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityandcompliance.PrivateLinkServicesForEDMUploadDescription{
			Name:     to.Ptr("service1"),
			Type:     to.Ptr("Microsoft.SecurityAndCompliance/privateLinkServicesForEDMUpload"),
			Etag:     to.Ptr("etagvalue"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.SecurityAndCompliance/privateLinkServicesForEDMUpload/service1"),
			Kind:     to.Ptr(armsecurityandcompliance.KindFhirR4),
			Location: to.Ptr("West US"),
			SystemData: &armsecurityandcompliance.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-08T13:30:28.958Z"); return t }()),
				CreatedBy:          to.Ptr("sove"),
				CreatedByType:      to.Ptr(armsecurityandcompliance.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-08T13:30:28.958Z"); return t }()),
				LastModifiedBy:     to.Ptr("sove"),
				LastModifiedByType: to.Ptr(armsecurityandcompliance.CreatedByTypeUser),
			},
			Tags: map[string]*string{},
			Properties: &armsecurityandcompliance.ServicesProperties{
				AccessPolicies: []*armsecurityandcompliance.ServiceAccessPolicyEntry{
					{
						ObjectID: to.Ptr("c487e7d1-3210-41a3-8ccc-e9372b78da47"),
					},
					{
						ObjectID: to.Ptr("5b307da8-43d4-492b-8b66-b0294ade872f"),
					}},
				AuthenticationConfiguration: &armsecurityandcompliance.ServiceAuthenticationConfigurationInfo{
					Audience:          to.Ptr("https://azurehealthcareapis.com"),
					Authority:         to.Ptr("https://login.microsoftonline.com/abfde7b2-df0f-47e6-aabf-2462b07508dc"),
					SmartProxyEnabled: to.Ptr(true),
				},
				CorsConfiguration: &armsecurityandcompliance.ServiceCorsConfigurationInfo{
					AllowCredentials: to.Ptr(false),
					Headers: []*string{
						to.Ptr("*")},
					MaxAge: to.Ptr[int64](1440),
					Methods: []*string{
						to.Ptr("DELETE"),
						to.Ptr("GET"),
						to.Ptr("OPTIONS"),
						to.Ptr("PATCH"),
						to.Ptr("POST"),
						to.Ptr("PUT")},
					Origins: []*string{
						to.Ptr("*")},
				},
				CosmosDbConfiguration: &armsecurityandcompliance.ServiceCosmosDbConfigurationInfo{
					KeyVaultKeyURI:  to.Ptr("https://my-vault.vault.azure.net/keys/my-key"),
					OfferThroughput: to.Ptr[int64](1000),
				},
				PrivateEndpointConnections: []*armsecurityandcompliance.PrivateEndpointConnection{},
				ProvisioningState:          to.Ptr(armsecurityandcompliance.ProvisioningStateSucceeded),
				PublicNetworkAccess:        to.Ptr(armsecurityandcompliance.PublicNetworkAccessDisabled),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateLinkServicesForEDMUploadDescription) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateLinkServicesForEDMUploadDescription)
			t.Fatalf("Mock response is not equal to example response for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/EdmUploadServiceGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateLinkServicesForEDMUpload_CreateOrUpdate(t *testing.T) {
	// From example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/EdmUploadServiceCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or Update a service with all parameters"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityandcompliance.NewPrivateLinkServicesForEDMUploadClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"service1",
		armsecurityandcompliance.PrivateLinkServicesForEDMUploadDescription{
			Identity: &armsecurityandcompliance.ServicesResourceIdentity{
				Type: to.Ptr(armsecurityandcompliance.ManagedServiceIdentityTypeSystemAssigned),
			},
			Kind:     to.Ptr(armsecurityandcompliance.KindFhirR4),
			Location: to.Ptr("westus2"),
			Tags:     map[string]*string{},
			Properties: &armsecurityandcompliance.ServicesProperties{
				AccessPolicies: []*armsecurityandcompliance.ServiceAccessPolicyEntry{
					{
						ObjectID: to.Ptr("c487e7d1-3210-41a3-8ccc-e9372b78da47"),
					},
					{
						ObjectID: to.Ptr("5b307da8-43d4-492b-8b66-b0294ade872f"),
					}},
				AuthenticationConfiguration: &armsecurityandcompliance.ServiceAuthenticationConfigurationInfo{
					Audience:          to.Ptr("https://azurehealthcareapis.com"),
					Authority:         to.Ptr("https://login.microsoftonline.com/abfde7b2-df0f-47e6-aabf-2462b07508dc"),
					SmartProxyEnabled: to.Ptr(true),
				},
				CorsConfiguration: &armsecurityandcompliance.ServiceCorsConfigurationInfo{
					AllowCredentials: to.Ptr(false),
					Headers: []*string{
						to.Ptr("*")},
					MaxAge: to.Ptr[int64](1440),
					Methods: []*string{
						to.Ptr("DELETE"),
						to.Ptr("GET"),
						to.Ptr("OPTIONS"),
						to.Ptr("PATCH"),
						to.Ptr("POST"),
						to.Ptr("PUT")},
					Origins: []*string{
						to.Ptr("*")},
				},
				CosmosDbConfiguration: &armsecurityandcompliance.ServiceCosmosDbConfigurationInfo{
					KeyVaultKeyURI:  to.Ptr("https://my-vault.vault.azure.net/keys/my-key"),
					OfferThroughput: to.Ptr[int64](1000),
				},
				ExportConfiguration: &armsecurityandcompliance.ServiceExportConfigurationInfo{
					StorageAccountName: to.Ptr("existingStorageAccount"),
				},
				PrivateEndpointConnections: []*armsecurityandcompliance.PrivateEndpointConnection{},
				PublicNetworkAccess:        to.Ptr(armsecurityandcompliance.PublicNetworkAccessDisabled),
			},
		},
		&armsecurityandcompliance.PrivateLinkServicesForEDMUploadClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/EdmUploadServiceCreate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/EdmUploadServiceCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityandcompliance.PrivateLinkServicesForEDMUploadDescription{
			Name: to.Ptr("service1"),
			Type: to.Ptr("Microsoft.SecurityAndCompliance/privateLinkServicesForEDMUpload"),
			Etag: to.Ptr("etagvalue"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.SecurityAndCompliance/privateLinkServicesForEDMUpload/service1"),
			Identity: &armsecurityandcompliance.ServicesResourceIdentity{
				Type:        to.Ptr(armsecurityandcompliance.ManagedServiceIdentityTypeSystemAssigned),
				PrincipalID: to.Ptr("03fe6ae0-952c-4e4b-954b-cc0364dd252e"),
				TenantID:    to.Ptr("72f988bf-86f1-41af-91ab-2d8cd011db47"),
			},
			Kind:     to.Ptr(armsecurityandcompliance.KindFhirR4),
			Location: to.Ptr("West US 2"),
			SystemData: &armsecurityandcompliance.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-08T13:30:28.958Z"); return t }()),
				CreatedBy:          to.Ptr("sove"),
				CreatedByType:      to.Ptr(armsecurityandcompliance.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-08T13:30:28.958Z"); return t }()),
				LastModifiedBy:     to.Ptr("sove"),
				LastModifiedByType: to.Ptr(armsecurityandcompliance.CreatedByTypeUser),
			},
			Tags: map[string]*string{},
			Properties: &armsecurityandcompliance.ServicesProperties{
				AccessPolicies: []*armsecurityandcompliance.ServiceAccessPolicyEntry{
					{
						ObjectID: to.Ptr("c487e7d1-3210-41a3-8ccc-e9372b78da47"),
					},
					{
						ObjectID: to.Ptr("5b307da8-43d4-492b-8b66-b0294ade872f"),
					}},
				AuthenticationConfiguration: &armsecurityandcompliance.ServiceAuthenticationConfigurationInfo{
					Audience:          to.Ptr("https://azurehealthcareapis.com"),
					Authority:         to.Ptr("https://login.microsoftonline.com/abfde7b2-df0f-47e6-aabf-2462b07508dc"),
					SmartProxyEnabled: to.Ptr(true),
				},
				CorsConfiguration: &armsecurityandcompliance.ServiceCorsConfigurationInfo{
					AllowCredentials: to.Ptr(false),
					Headers: []*string{
						to.Ptr("*")},
					MaxAge: to.Ptr[int64](1440),
					Methods: []*string{
						to.Ptr("DELETE"),
						to.Ptr("GET"),
						to.Ptr("OPTIONS"),
						to.Ptr("PATCH"),
						to.Ptr("POST"),
						to.Ptr("PUT")},
					Origins: []*string{
						to.Ptr("*")},
				},
				CosmosDbConfiguration: &armsecurityandcompliance.ServiceCosmosDbConfigurationInfo{
					KeyVaultKeyURI:  to.Ptr("https://my-vault.vault.azure.net/keys/my-key"),
					OfferThroughput: to.Ptr[int64](1000),
				},
				ExportConfiguration: &armsecurityandcompliance.ServiceExportConfigurationInfo{
					StorageAccountName: to.Ptr("existingStorageAccount"),
				},
				PrivateEndpointConnections: []*armsecurityandcompliance.PrivateEndpointConnection{},
				ProvisioningState:          to.Ptr(armsecurityandcompliance.ProvisioningStateSucceeded),
				PublicNetworkAccess:        to.Ptr(armsecurityandcompliance.PublicNetworkAccessDisabled),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateLinkServicesForEDMUploadDescription) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateLinkServicesForEDMUploadDescription)
			t.Fatalf("Mock response is not equal to example response for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/EdmUploadServiceCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/EdmUploadServiceCreateMinimum.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or Update a service with minimum parameters"},
	})
	client = armsecurityandcompliance.NewPrivateLinkServicesForEDMUploadClient("subid", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"service2",
		armsecurityandcompliance.PrivateLinkServicesForEDMUploadDescription{
			Kind:     to.Ptr(armsecurityandcompliance.KindFhirR4),
			Location: to.Ptr("westus2"),
			Tags:     map[string]*string{},
			Properties: &armsecurityandcompliance.ServicesProperties{
				AccessPolicies: []*armsecurityandcompliance.ServiceAccessPolicyEntry{
					{
						ObjectID: to.Ptr("c487e7d1-3210-41a3-8ccc-e9372b78da47"),
					}},
			},
		},
		&armsecurityandcompliance.PrivateLinkServicesForEDMUploadClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/EdmUploadServiceCreateMinimum.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/EdmUploadServiceCreateMinimum.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityandcompliance.PrivateLinkServicesForEDMUploadDescription{
			Name:     to.Ptr("service2"),
			Type:     to.Ptr("Microsoft.SecurityAndCompliance/privateLinkServicesForEDMUpload"),
			Etag:     to.Ptr("etagvalue"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.SecurityAndCompliance/privateLinkServicesForEDMUpload/service2"),
			Kind:     to.Ptr(armsecurityandcompliance.KindFhirR4),
			Location: to.Ptr("westus2"),
			SystemData: &armsecurityandcompliance.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-08T13:30:28.958Z"); return t }()),
				CreatedBy:          to.Ptr("sove"),
				CreatedByType:      to.Ptr(armsecurityandcompliance.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-08T13:30:28.958Z"); return t }()),
				LastModifiedBy:     to.Ptr("sove"),
				LastModifiedByType: to.Ptr(armsecurityandcompliance.CreatedByTypeUser),
			},
			Tags: map[string]*string{},
			Properties: &armsecurityandcompliance.ServicesProperties{
				AccessPolicies: []*armsecurityandcompliance.ServiceAccessPolicyEntry{
					{
						ObjectID: to.Ptr("c487e7d1-3210-41a3-8ccc-e9372b78da47"),
					}},
				AuthenticationConfiguration: &armsecurityandcompliance.ServiceAuthenticationConfigurationInfo{
					Audience:          to.Ptr("https://azurehealthcareapis.com"),
					Authority:         to.Ptr("https://login.microsoftonline.com/abfde7b2-df0f-47e6-aabf-2462b07508dc"),
					SmartProxyEnabled: to.Ptr(false),
				},
				CorsConfiguration: &armsecurityandcompliance.ServiceCorsConfigurationInfo{
					AllowCredentials: to.Ptr(false),
					Headers:          []*string{},
					Methods:          []*string{},
					Origins:          []*string{},
				},
				CosmosDbConfiguration: &armsecurityandcompliance.ServiceCosmosDbConfigurationInfo{
					OfferThroughput: to.Ptr[int64](1000),
				},
				PrivateEndpointConnections: []*armsecurityandcompliance.PrivateEndpointConnection{},
				ProvisioningState:          to.Ptr(armsecurityandcompliance.ProvisioningStateSucceeded),
				PublicNetworkAccess:        to.Ptr(armsecurityandcompliance.PublicNetworkAccessDisabled),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateLinkServicesForEDMUploadDescription) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateLinkServicesForEDMUploadDescription)
			t.Fatalf("Mock response is not equal to example response for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/EdmUploadServiceCreateMinimum.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateLinkServicesForEDMUpload_Update(t *testing.T) {
	// From example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/EdmUploadServicePatch.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Patch service"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityandcompliance.NewPrivateLinkServicesForEDMUploadClient("subid", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"rg1",
		"service1",
		armsecurityandcompliance.ServicesPatchDescription{
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
		},
		&armsecurityandcompliance.PrivateLinkServicesForEDMUploadClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/EdmUploadServicePatch.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/EdmUploadServicePatch.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityandcompliance.PrivateLinkServicesForEDMUploadDescription{
			Name:     to.Ptr("service1"),
			Type:     to.Ptr("Microsoft.SecurityAndCompliance/privateLinkServicesForEDMUpload"),
			Etag:     to.Ptr("etagvalue"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.SecurityAndCompliance/privateLinkServicesForEDMUpload/service1"),
			Kind:     to.Ptr(armsecurityandcompliance.KindFhirR4),
			Location: to.Ptr("West US"),
			SystemData: &armsecurityandcompliance.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-08T13:30:28.958Z"); return t }()),
				CreatedBy:          to.Ptr("sove"),
				CreatedByType:      to.Ptr(armsecurityandcompliance.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-08T13:30:28.958Z"); return t }()),
				LastModifiedBy:     to.Ptr("sove"),
				LastModifiedByType: to.Ptr(armsecurityandcompliance.CreatedByTypeUser),
			},
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
			Properties: &armsecurityandcompliance.ServicesProperties{
				AccessPolicies: []*armsecurityandcompliance.ServiceAccessPolicyEntry{
					{
						ObjectID: to.Ptr("c487e7d1-3210-41a3-8ccc-e9372b78da47"),
					},
					{
						ObjectID: to.Ptr("5b307da8-43d4-492b-8b66-b0294ade872f"),
					}},
				AuthenticationConfiguration: &armsecurityandcompliance.ServiceAuthenticationConfigurationInfo{
					Audience:          to.Ptr("https://azurehealthcareapis.com"),
					Authority:         to.Ptr("https://login.microsoftonline.com/abfde7b2-df0f-47e6-aabf-2462b07508dc"),
					SmartProxyEnabled: to.Ptr(true),
				},
				CorsConfiguration: &armsecurityandcompliance.ServiceCorsConfigurationInfo{
					AllowCredentials: to.Ptr(false),
					Headers: []*string{
						to.Ptr("*")},
					MaxAge: to.Ptr[int64](1440),
					Methods: []*string{
						to.Ptr("DELETE"),
						to.Ptr("GET"),
						to.Ptr("OPTIONS"),
						to.Ptr("PATCH"),
						to.Ptr("POST"),
						to.Ptr("PUT")},
					Origins: []*string{
						to.Ptr("*")},
				},
				CosmosDbConfiguration: &armsecurityandcompliance.ServiceCosmosDbConfigurationInfo{
					KeyVaultKeyURI:  to.Ptr("https://my-vault.vault.azure.net/keys/my-key"),
					OfferThroughput: to.Ptr[int64](1000),
				},
				PrivateEndpointConnections: []*armsecurityandcompliance.PrivateEndpointConnection{},
				ProvisioningState:          to.Ptr(armsecurityandcompliance.ProvisioningStateSucceeded),
				PublicNetworkAccess:        to.Ptr(armsecurityandcompliance.PublicNetworkAccessDisabled),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateLinkServicesForEDMUploadDescription) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateLinkServicesForEDMUploadDescription)
			t.Fatalf("Mock response is not equal to example response for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/EdmUploadServicePatch.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateLinkServicesForEDMUpload_List(t *testing.T) {
	// From example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/EdmUploadServiceList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all services in subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityandcompliance.NewPrivateLinkServicesForEDMUploadClient("subid", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/EdmUploadServiceList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsecurityandcompliance.PrivateLinkServicesForEDMUploadDescriptionListResult{
			Value: []*armsecurityandcompliance.PrivateLinkServicesForEDMUploadDescription{
				{
					Name:     to.Ptr("service1"),
					Type:     to.Ptr("Microsoft.SecurityAndCompliance/privateLinkServicesForEDMUpload"),
					Etag:     to.Ptr("etag"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.SecurityAndCompliance/privateLinkServicesForEDMUpload/service1"),
					Kind:     to.Ptr(armsecurityandcompliance.KindFhirR4),
					Location: to.Ptr("West US"),
					Tags:     map[string]*string{},
					Properties: &armsecurityandcompliance.ServicesProperties{
						AccessPolicies: []*armsecurityandcompliance.ServiceAccessPolicyEntry{
							{
								ObjectID: to.Ptr("c487e7d1-3210-41a3-8ccc-e9372b78da47"),
							},
							{
								ObjectID: to.Ptr("5b307da8-43d4-492b-8b66-b0294ade872f"),
							}},
						AuthenticationConfiguration: &armsecurityandcompliance.ServiceAuthenticationConfigurationInfo{
							Audience:          to.Ptr("https://azurehealthcareapis.com"),
							Authority:         to.Ptr("https://login.microsoftonline.com/abfde7b2-df0f-47e6-aabf-2462b07508dc"),
							SmartProxyEnabled: to.Ptr(true),
						},
						CorsConfiguration: &armsecurityandcompliance.ServiceCorsConfigurationInfo{
							AllowCredentials: to.Ptr(false),
							Headers: []*string{
								to.Ptr("*")},
							MaxAge: to.Ptr[int64](1440),
							Methods: []*string{
								to.Ptr("DELETE"),
								to.Ptr("GET"),
								to.Ptr("OPTIONS"),
								to.Ptr("PATCH"),
								to.Ptr("POST"),
								to.Ptr("PUT")},
							Origins: []*string{
								to.Ptr("*")},
						},
						CosmosDbConfiguration: &armsecurityandcompliance.ServiceCosmosDbConfigurationInfo{
							KeyVaultKeyURI:  to.Ptr("https://my-vault.vault.azure.net/keys/my-key"),
							OfferThroughput: to.Ptr[int64](1000),
						},
						PrivateEndpointConnections: []*armsecurityandcompliance.PrivateEndpointConnection{},
						ProvisioningState:          to.Ptr(armsecurityandcompliance.ProvisioningStateSucceeded),
						PublicNetworkAccess:        to.Ptr(armsecurityandcompliance.PublicNetworkAccessDisabled),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PrivateLinkServicesForEDMUploadDescriptionListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PrivateLinkServicesForEDMUploadDescriptionListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/EdmUploadServiceList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateLinkServicesForEDMUpload_ListByResourceGroup(t *testing.T) {
	// From example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/EdmUploadServiceListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all services in resource group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityandcompliance.NewPrivateLinkServicesForEDMUploadClient("subid", cred, &options)
	pager := client.ListByResourceGroup("rgname",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/EdmUploadServiceListByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsecurityandcompliance.PrivateLinkServicesForEDMUploadDescriptionListResult{
			Value: []*armsecurityandcompliance.PrivateLinkServicesForEDMUploadDescription{
				{
					Name:     to.Ptr("service1"),
					Type:     to.Ptr("Microsoft.SecurityAndCompliance/privateLinkServicesForEDMUpload"),
					Etag:     to.Ptr("etagvalue"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.SecurityAndCompliance/privateLinkServicesForEDMUpload/dddb8dcb-effb-4290-bb47-ce1e8440c729"),
					Kind:     to.Ptr(armsecurityandcompliance.KindFhirR4),
					Location: to.Ptr("westus"),
					Tags:     map[string]*string{},
					Properties: &armsecurityandcompliance.ServicesProperties{
						AccessPolicies: []*armsecurityandcompliance.ServiceAccessPolicyEntry{
							{
								ObjectID: to.Ptr("c487e7d1-3210-41a3-8ccc-e9372b78da47"),
							},
							{
								ObjectID: to.Ptr("5b307da8-43d4-492b-8b66-b0294ade872f"),
							}},
						AuthenticationConfiguration: &armsecurityandcompliance.ServiceAuthenticationConfigurationInfo{
							Audience:          to.Ptr("https://azurehealthcareapis.com"),
							Authority:         to.Ptr("https://login.microsoftonline.com/abfde7b2-df0f-47e6-aabf-2462b07508dc"),
							SmartProxyEnabled: to.Ptr(true),
						},
						CorsConfiguration: &armsecurityandcompliance.ServiceCorsConfigurationInfo{
							AllowCredentials: to.Ptr(false),
							Headers: []*string{
								to.Ptr("*")},
							MaxAge: to.Ptr[int64](1440),
							Methods: []*string{
								to.Ptr("DELETE"),
								to.Ptr("GET"),
								to.Ptr("OPTIONS"),
								to.Ptr("PATCH"),
								to.Ptr("POST"),
								to.Ptr("PUT")},
							Origins: []*string{
								to.Ptr("*")},
						},
						CosmosDbConfiguration: &armsecurityandcompliance.ServiceCosmosDbConfigurationInfo{
							KeyVaultKeyURI:  to.Ptr("https://my-vault.vault.azure.net/keys/my-key"),
							OfferThroughput: to.Ptr[int64](1000),
						},
						PrivateEndpointConnections: []*armsecurityandcompliance.PrivateEndpointConnection{},
						ProvisioningState:          to.Ptr(armsecurityandcompliance.ProvisioningStateSucceeded),
						PublicNetworkAccess:        to.Ptr(armsecurityandcompliance.PublicNetworkAccessDisabled),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PrivateLinkServicesForEDMUploadDescriptionListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PrivateLinkServicesForEDMUploadDescriptionListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/EdmUploadServiceListByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServices_Delete(t *testing.T) {
	// From example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/EdmUploadServiceDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete service"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityandcompliance.NewServicesClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"service1",
		&armsecurityandcompliance.ServicesClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/EdmUploadServiceDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/EdmUploadServiceDelete.json: %v", err)
	}
}

func TestPrivateEndpointConnectionsForEDM_ListByService(t *testing.T) {
	// From example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/EdmUploadServiceListPrivateEndpointConnections.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateEndpointConnection_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityandcompliance.NewPrivateEndpointConnectionsForEDMClient("subid", cred, &options)
	pager := client.ListByService("rgname",
		"service1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/EdmUploadServiceListPrivateEndpointConnections.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsecurityandcompliance.PrivateEndpointConnectionListResult{
			Value: []*armsecurityandcompliance.PrivateEndpointConnection{
				{
					Name: to.Ptr("myConnection"),
					Type: to.Ptr("Microsoft.SecurityAndCompliance/privateLinkServicesForEDMUpload/privateEndpointConnections"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.SecurityAndCompliance/privateLinkServicesForEDMUpload/service1/privateEndpointConnections/myConnection"),
					Properties: &armsecurityandcompliance.PrivateEndpointConnectionProperties{
						PrivateEndpoint: &armsecurityandcompliance.PrivateEndpoint{
							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/privateEndpoints/peexample01"),
						},
						PrivateLinkServiceConnectionState: &armsecurityandcompliance.PrivateLinkServiceConnectionState{
							Description:     to.Ptr("Auto-Approved"),
							ActionsRequired: to.Ptr("None"),
							Status:          to.Ptr(armsecurityandcompliance.PrivateEndpointServiceConnectionStatusApproved),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PrivateEndpointConnectionListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PrivateEndpointConnectionListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/EdmUploadServiceListPrivateEndpointConnections.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnectionsForEDM_Get(t *testing.T) {
	// From example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/EdmUploadServiceGetPrivateEndpointConnection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateEndpointConnection_GetConnection"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityandcompliance.NewPrivateEndpointConnectionsForEDMClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rgname",
		"service1",
		"myConnection",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/EdmUploadServiceGetPrivateEndpointConnection.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityandcompliance.PrivateEndpointConnection{
			Name: to.Ptr("myConnection"),
			Type: to.Ptr("Microsoft.SecurityAndCompliance/privateLinkServicesForEDMUpload/privateEndpointConnections"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.SecurityAndCompliance/privateLinkServicesForEDMUpload/service1/privateEndpointConnections/myConnection"),
			Properties: &armsecurityandcompliance.PrivateEndpointConnectionProperties{
				PrivateEndpoint: &armsecurityandcompliance.PrivateEndpoint{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/privateEndpoints/peexample01"),
				},
				PrivateLinkServiceConnectionState: &armsecurityandcompliance.PrivateLinkServiceConnectionState{
					Description:     to.Ptr("Auto-Approved"),
					ActionsRequired: to.Ptr("None"),
					Status:          to.Ptr(armsecurityandcompliance.PrivateEndpointServiceConnectionStatusApproved),
				},
			},
			SystemData: &armsecurityandcompliance.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-08T13:30:28.958Z"); return t }()),
				CreatedBy:          to.Ptr("sove"),
				CreatedByType:      to.Ptr(armsecurityandcompliance.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-08T13:30:28.958Z"); return t }()),
				LastModifiedBy:     to.Ptr("sove"),
				LastModifiedByType: to.Ptr(armsecurityandcompliance.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateEndpointConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/EdmUploadServiceGetPrivateEndpointConnection.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnectionsForEDM_CreateOrUpdate(t *testing.T) {
	// From example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/EdmUploadServiceCreatePrivateEndpointConnection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateEndpointConnection_CreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityandcompliance.NewPrivateEndpointConnectionsForEDMClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rgname",
		"service1",
		"myConnection",
		armsecurityandcompliance.PrivateEndpointConnection{
			Properties: &armsecurityandcompliance.PrivateEndpointConnectionProperties{
				PrivateLinkServiceConnectionState: &armsecurityandcompliance.PrivateLinkServiceConnectionState{
					Description: to.Ptr("Auto-Approved"),
					Status:      to.Ptr(armsecurityandcompliance.PrivateEndpointServiceConnectionStatusApproved),
				},
			},
		},
		&armsecurityandcompliance.PrivateEndpointConnectionsForEDMClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/EdmUploadServiceCreatePrivateEndpointConnection.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/EdmUploadServiceCreatePrivateEndpointConnection.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityandcompliance.PrivateEndpointConnection{
			Name: to.Ptr("myConnection"),
			Type: to.Ptr("Microsoft.SecurityAndCompliance/privateLinkServicesForEDMUpload/privateEndpointConnections"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.SecurityAndCompliance/privateLinkServicesForEDMUpload/service1/privateEndpointConnections/myConnection"),
			Properties: &armsecurityandcompliance.PrivateEndpointConnectionProperties{
				PrivateEndpoint: &armsecurityandcompliance.PrivateEndpoint{
					ID: to.Ptr("/subscriptions/c80fb759-c965-4c6a-9110-9b2b2d038882/resourceGroups/myResourceGroup/providers/Microsoft.Network/privateEndpoints/peexample01"),
				},
				PrivateLinkServiceConnectionState: &armsecurityandcompliance.PrivateLinkServiceConnectionState{
					Description:     to.Ptr("Auto-Approved"),
					ActionsRequired: to.Ptr("None"),
					Status:          to.Ptr(armsecurityandcompliance.PrivateEndpointServiceConnectionStatusApproved),
				},
				ProvisioningState: to.Ptr(armsecurityandcompliance.PrivateEndpointConnectionProvisioningStateSucceeded),
			},
			SystemData: &armsecurityandcompliance.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-08T13:30:28.958Z"); return t }()),
				CreatedBy:          to.Ptr("sove"),
				CreatedByType:      to.Ptr(armsecurityandcompliance.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-08T13:30:28.958Z"); return t }()),
				LastModifiedBy:     to.Ptr("sove"),
				LastModifiedByType: to.Ptr(armsecurityandcompliance.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateEndpointConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/EdmUploadServiceCreatePrivateEndpointConnection.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnectionsForEDM_Delete(t *testing.T) {
	// From example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/EdmUploadServiceDeletePrivateEndpointConnection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateEndpointConnections_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityandcompliance.NewPrivateEndpointConnectionsForEDMClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"rgname",
		"service1",
		"myConnection",
		&armsecurityandcompliance.PrivateEndpointConnectionsForEDMClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/EdmUploadServiceDeletePrivateEndpointConnection.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/EdmUploadServiceDeletePrivateEndpointConnection.json: %v", err)
	}
}

func TestPrivateLinkResources_ListByService(t *testing.T) {
	// From example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/EdmUploadPrivateLinkResourcesListByService.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateLinkResources_ListGroupIds"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityandcompliance.NewPrivateLinkResourcesClient("subid", cred, &options)
	res, err := client.ListByService(ctx,
		"rgname",
		"service1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/EdmUploadPrivateLinkResourcesListByService.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityandcompliance.PrivateLinkResourceListResult{
			Value: []*armsecurityandcompliance.PrivateLinkResource{
				{
					Name: to.Ptr("fhir"),
					Type: to.Ptr("Microsoft.SecurityAndCompliance/privateLinkServicesForEDMUpload/privateLinkResources"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.SecurityAndCompliance/privateLinkServicesForEDMUpload/service1/privateLinkResources/fhir"),
					Properties: &armsecurityandcompliance.PrivateLinkResourceProperties{
						GroupID: to.Ptr("fhir"),
						RequiredMembers: []*string{
							to.Ptr("fhir")},
						RequiredZoneNames: []*string{
							to.Ptr("privatelink.compliance.microsoft.com")},
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateLinkResourceListResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateLinkResourceListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/EdmUploadPrivateLinkResourcesListByService.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateLinkResources_Get(t *testing.T) {
	// From example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/EdmUploadPrivateLinkResourceGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateLinkResources_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityandcompliance.NewPrivateLinkResourcesClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rgname",
		"service1",
		"fhir",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/EdmUploadPrivateLinkResourceGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityandcompliance.PrivateLinkResource{
			Name: to.Ptr("fhir"),
			Type: to.Ptr("Microsoft.SecurityAndCompliance/privateLinkServicesForEDMUpload/privateLinkResources"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.SecurityAndCompliance/privateLinkServicesForEDMUpload/service1/privateLinkResources/fhir"),
			Properties: &armsecurityandcompliance.PrivateLinkResourceProperties{
				GroupID: to.Ptr("fhir"),
				RequiredMembers: []*string{
					to.Ptr("fhir")},
				RequiredZoneNames: []*string{
					to.Ptr("privatelink.security.microsoft.com")},
			},
			SystemData: &armsecurityandcompliance.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-08T13:30:28.958Z"); return t }()),
				CreatedBy:          to.Ptr("sove"),
				CreatedByType:      to.Ptr(armsecurityandcompliance.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-08T13:30:28.958Z"); return t }()),
				LastModifiedBy:     to.Ptr("sove"),
				LastModifiedByType: to.Ptr(armsecurityandcompliance.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateLinkResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateLinkResource)
			t.Fatalf("Mock response is not equal to example response for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/EdmUploadPrivateLinkResourceGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateLinkServicesForM365ComplianceCenter_Get(t *testing.T) {
	// From example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/ComplianceCenterServiceGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get metadata"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityandcompliance.NewPrivateLinkServicesForM365ComplianceCenterClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"service1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/ComplianceCenterServiceGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityandcompliance.PrivateLinkServicesForM365ComplianceCenterDescription{
			Name:     to.Ptr("service1"),
			Type:     to.Ptr("Microsoft.SecurityAndCompliance/privateLinkServicesForM365ComplianceCenter"),
			Etag:     to.Ptr("etagvalue"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.SecurityAndCompliance/privateLinkServicesForM365ComplianceCenter/service1"),
			Kind:     to.Ptr(armsecurityandcompliance.KindFhirR4),
			Location: to.Ptr("West US"),
			SystemData: &armsecurityandcompliance.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-08T13:30:28.958Z"); return t }()),
				CreatedBy:          to.Ptr("sove"),
				CreatedByType:      to.Ptr(armsecurityandcompliance.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-08T13:30:28.958Z"); return t }()),
				LastModifiedBy:     to.Ptr("sove"),
				LastModifiedByType: to.Ptr(armsecurityandcompliance.CreatedByTypeUser),
			},
			Tags: map[string]*string{},
			Properties: &armsecurityandcompliance.ServicesProperties{
				AccessPolicies: []*armsecurityandcompliance.ServiceAccessPolicyEntry{
					{
						ObjectID: to.Ptr("c487e7d1-3210-41a3-8ccc-e9372b78da47"),
					},
					{
						ObjectID: to.Ptr("5b307da8-43d4-492b-8b66-b0294ade872f"),
					}},
				AuthenticationConfiguration: &armsecurityandcompliance.ServiceAuthenticationConfigurationInfo{
					Audience:          to.Ptr("https://azurehealthcareapis.com"),
					Authority:         to.Ptr("https://login.microsoftonline.com/abfde7b2-df0f-47e6-aabf-2462b07508dc"),
					SmartProxyEnabled: to.Ptr(true),
				},
				CorsConfiguration: &armsecurityandcompliance.ServiceCorsConfigurationInfo{
					AllowCredentials: to.Ptr(false),
					Headers: []*string{
						to.Ptr("*")},
					MaxAge: to.Ptr[int64](1440),
					Methods: []*string{
						to.Ptr("DELETE"),
						to.Ptr("GET"),
						to.Ptr("OPTIONS"),
						to.Ptr("PATCH"),
						to.Ptr("POST"),
						to.Ptr("PUT")},
					Origins: []*string{
						to.Ptr("*")},
				},
				CosmosDbConfiguration: &armsecurityandcompliance.ServiceCosmosDbConfigurationInfo{
					KeyVaultKeyURI:  to.Ptr("https://my-vault.vault.azure.net/keys/my-key"),
					OfferThroughput: to.Ptr[int64](1000),
				},
				PrivateEndpointConnections: []*armsecurityandcompliance.PrivateEndpointConnection{},
				ProvisioningState:          to.Ptr(armsecurityandcompliance.ProvisioningStateSucceeded),
				PublicNetworkAccess:        to.Ptr(armsecurityandcompliance.PublicNetworkAccessDisabled),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateLinkServicesForM365ComplianceCenterDescription) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateLinkServicesForM365ComplianceCenterDescription)
			t.Fatalf("Mock response is not equal to example response for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/ComplianceCenterServiceGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateLinkServicesForM365ComplianceCenter_CreateOrUpdate(t *testing.T) {
	// From example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/ComplianceCenterServiceCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or Update a service with all parameters"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityandcompliance.NewPrivateLinkServicesForM365ComplianceCenterClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"service1",
		armsecurityandcompliance.PrivateLinkServicesForM365ComplianceCenterDescription{
			Identity: &armsecurityandcompliance.ServicesResourceIdentity{
				Type: to.Ptr(armsecurityandcompliance.ManagedServiceIdentityTypeSystemAssigned),
			},
			Kind:     to.Ptr(armsecurityandcompliance.KindFhirR4),
			Location: to.Ptr("westus2"),
			Tags:     map[string]*string{},
			Properties: &armsecurityandcompliance.ServicesProperties{
				AccessPolicies: []*armsecurityandcompliance.ServiceAccessPolicyEntry{
					{
						ObjectID: to.Ptr("c487e7d1-3210-41a3-8ccc-e9372b78da47"),
					},
					{
						ObjectID: to.Ptr("5b307da8-43d4-492b-8b66-b0294ade872f"),
					}},
				AuthenticationConfiguration: &armsecurityandcompliance.ServiceAuthenticationConfigurationInfo{
					Audience:          to.Ptr("https://azurehealthcareapis.com"),
					Authority:         to.Ptr("https://login.microsoftonline.com/abfde7b2-df0f-47e6-aabf-2462b07508dc"),
					SmartProxyEnabled: to.Ptr(true),
				},
				CorsConfiguration: &armsecurityandcompliance.ServiceCorsConfigurationInfo{
					AllowCredentials: to.Ptr(false),
					Headers: []*string{
						to.Ptr("*")},
					MaxAge: to.Ptr[int64](1440),
					Methods: []*string{
						to.Ptr("DELETE"),
						to.Ptr("GET"),
						to.Ptr("OPTIONS"),
						to.Ptr("PATCH"),
						to.Ptr("POST"),
						to.Ptr("PUT")},
					Origins: []*string{
						to.Ptr("*")},
				},
				CosmosDbConfiguration: &armsecurityandcompliance.ServiceCosmosDbConfigurationInfo{
					KeyVaultKeyURI:  to.Ptr("https://my-vault.vault.azure.net/keys/my-key"),
					OfferThroughput: to.Ptr[int64](1000),
				},
				ExportConfiguration: &armsecurityandcompliance.ServiceExportConfigurationInfo{
					StorageAccountName: to.Ptr("existingStorageAccount"),
				},
				PrivateEndpointConnections: []*armsecurityandcompliance.PrivateEndpointConnection{},
				PublicNetworkAccess:        to.Ptr(armsecurityandcompliance.PublicNetworkAccessDisabled),
			},
		},
		&armsecurityandcompliance.PrivateLinkServicesForM365ComplianceCenterClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/ComplianceCenterServiceCreate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/ComplianceCenterServiceCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityandcompliance.PrivateLinkServicesForM365ComplianceCenterDescription{
			Name: to.Ptr("service1"),
			Type: to.Ptr("Microsoft.SecurityAndCompliance/privateLinkServicesForM365ComplianceCenter"),
			Etag: to.Ptr("etagvalue"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.SecurityAndCompliance/privateLinkServicesForM365ComplianceCenter/service1"),
			Identity: &armsecurityandcompliance.ServicesResourceIdentity{
				Type:        to.Ptr(armsecurityandcompliance.ManagedServiceIdentityTypeSystemAssigned),
				PrincipalID: to.Ptr("03fe6ae0-952c-4e4b-954b-cc0364dd252e"),
				TenantID:    to.Ptr("72f988bf-86f1-41af-91ab-2d8cd011db47"),
			},
			Kind:     to.Ptr(armsecurityandcompliance.KindFhirR4),
			Location: to.Ptr("West US 2"),
			SystemData: &armsecurityandcompliance.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-08T13:30:28.958Z"); return t }()),
				CreatedBy:          to.Ptr("sove"),
				CreatedByType:      to.Ptr(armsecurityandcompliance.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-08T13:30:28.958Z"); return t }()),
				LastModifiedBy:     to.Ptr("sove"),
				LastModifiedByType: to.Ptr(armsecurityandcompliance.CreatedByTypeUser),
			},
			Tags: map[string]*string{},
			Properties: &armsecurityandcompliance.ServicesProperties{
				AccessPolicies: []*armsecurityandcompliance.ServiceAccessPolicyEntry{
					{
						ObjectID: to.Ptr("c487e7d1-3210-41a3-8ccc-e9372b78da47"),
					},
					{
						ObjectID: to.Ptr("5b307da8-43d4-492b-8b66-b0294ade872f"),
					}},
				AuthenticationConfiguration: &armsecurityandcompliance.ServiceAuthenticationConfigurationInfo{
					Audience:          to.Ptr("https://azurehealthcareapis.com"),
					Authority:         to.Ptr("https://login.microsoftonline.com/abfde7b2-df0f-47e6-aabf-2462b07508dc"),
					SmartProxyEnabled: to.Ptr(true),
				},
				CorsConfiguration: &armsecurityandcompliance.ServiceCorsConfigurationInfo{
					AllowCredentials: to.Ptr(false),
					Headers: []*string{
						to.Ptr("*")},
					MaxAge: to.Ptr[int64](1440),
					Methods: []*string{
						to.Ptr("DELETE"),
						to.Ptr("GET"),
						to.Ptr("OPTIONS"),
						to.Ptr("PATCH"),
						to.Ptr("POST"),
						to.Ptr("PUT")},
					Origins: []*string{
						to.Ptr("*")},
				},
				CosmosDbConfiguration: &armsecurityandcompliance.ServiceCosmosDbConfigurationInfo{
					KeyVaultKeyURI:  to.Ptr("https://my-vault.vault.azure.net/keys/my-key"),
					OfferThroughput: to.Ptr[int64](1000),
				},
				ExportConfiguration: &armsecurityandcompliance.ServiceExportConfigurationInfo{
					StorageAccountName: to.Ptr("existingStorageAccount"),
				},
				PrivateEndpointConnections: []*armsecurityandcompliance.PrivateEndpointConnection{},
				ProvisioningState:          to.Ptr(armsecurityandcompliance.ProvisioningStateSucceeded),
				PublicNetworkAccess:        to.Ptr(armsecurityandcompliance.PublicNetworkAccessDisabled),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateLinkServicesForM365ComplianceCenterDescription) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateLinkServicesForM365ComplianceCenterDescription)
			t.Fatalf("Mock response is not equal to example response for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/ComplianceCenterServiceCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/ComplianceCenterServiceCreateMinimum.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or Update a service with minimum parameters"},
	})
	client = armsecurityandcompliance.NewPrivateLinkServicesForM365ComplianceCenterClient("subid", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"service2",
		armsecurityandcompliance.PrivateLinkServicesForM365ComplianceCenterDescription{
			Kind:     to.Ptr(armsecurityandcompliance.KindFhirR4),
			Location: to.Ptr("westus2"),
			Tags:     map[string]*string{},
			Properties: &armsecurityandcompliance.ServicesProperties{
				AccessPolicies: []*armsecurityandcompliance.ServiceAccessPolicyEntry{
					{
						ObjectID: to.Ptr("c487e7d1-3210-41a3-8ccc-e9372b78da47"),
					}},
			},
		},
		&armsecurityandcompliance.PrivateLinkServicesForM365ComplianceCenterClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/ComplianceCenterServiceCreateMinimum.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/ComplianceCenterServiceCreateMinimum.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityandcompliance.PrivateLinkServicesForM365ComplianceCenterDescription{
			Name:     to.Ptr("service2"),
			Type:     to.Ptr("Microsoft.SecurityAndCompliance/privateLinkServicesForM365ComplianceCenter"),
			Etag:     to.Ptr("etagvalue"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.SecurityAndCompliance/privateLinkServicesForM365ComplianceCenter/service2"),
			Kind:     to.Ptr(armsecurityandcompliance.KindFhirR4),
			Location: to.Ptr("westus2"),
			SystemData: &armsecurityandcompliance.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-08T13:30:28.958Z"); return t }()),
				CreatedBy:          to.Ptr("sove"),
				CreatedByType:      to.Ptr(armsecurityandcompliance.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-08T13:30:28.958Z"); return t }()),
				LastModifiedBy:     to.Ptr("sove"),
				LastModifiedByType: to.Ptr(armsecurityandcompliance.CreatedByTypeUser),
			},
			Tags: map[string]*string{},
			Properties: &armsecurityandcompliance.ServicesProperties{
				AccessPolicies: []*armsecurityandcompliance.ServiceAccessPolicyEntry{
					{
						ObjectID: to.Ptr("c487e7d1-3210-41a3-8ccc-e9372b78da47"),
					}},
				AuthenticationConfiguration: &armsecurityandcompliance.ServiceAuthenticationConfigurationInfo{
					Audience:          to.Ptr("https://azurehealthcareapis.com"),
					Authority:         to.Ptr("https://login.microsoftonline.com/abfde7b2-df0f-47e6-aabf-2462b07508dc"),
					SmartProxyEnabled: to.Ptr(false),
				},
				CorsConfiguration: &armsecurityandcompliance.ServiceCorsConfigurationInfo{
					AllowCredentials: to.Ptr(false),
					Headers:          []*string{},
					Methods:          []*string{},
					Origins:          []*string{},
				},
				CosmosDbConfiguration: &armsecurityandcompliance.ServiceCosmosDbConfigurationInfo{
					OfferThroughput: to.Ptr[int64](1000),
				},
				PrivateEndpointConnections: []*armsecurityandcompliance.PrivateEndpointConnection{},
				ProvisioningState:          to.Ptr(armsecurityandcompliance.ProvisioningStateSucceeded),
				PublicNetworkAccess:        to.Ptr(armsecurityandcompliance.PublicNetworkAccessDisabled),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateLinkServicesForM365ComplianceCenterDescription) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateLinkServicesForM365ComplianceCenterDescription)
			t.Fatalf("Mock response is not equal to example response for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/ComplianceCenterServiceCreateMinimum.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateLinkServicesForM365ComplianceCenter_Update(t *testing.T) {
	// From example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/ComplianceCenterServicePatch.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Patch service"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityandcompliance.NewPrivateLinkServicesForM365ComplianceCenterClient("subid", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"rg1",
		"service1",
		armsecurityandcompliance.ServicesPatchDescription{
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
		},
		&armsecurityandcompliance.PrivateLinkServicesForM365ComplianceCenterClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/ComplianceCenterServicePatch.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/ComplianceCenterServicePatch.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityandcompliance.PrivateLinkServicesForM365ComplianceCenterDescription{
			Name:     to.Ptr("service1"),
			Type:     to.Ptr("Microsoft.SecurityAndCompliance/privateLinkServicesForM365ComplianceCenter"),
			Etag:     to.Ptr("etagvalue"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.SecurityAndCompliance/privateLinkServicesForM365ComplianceCenter/service1"),
			Kind:     to.Ptr(armsecurityandcompliance.KindFhirR4),
			Location: to.Ptr("West US"),
			SystemData: &armsecurityandcompliance.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-08T13:30:28.958Z"); return t }()),
				CreatedBy:          to.Ptr("sove"),
				CreatedByType:      to.Ptr(armsecurityandcompliance.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-08T13:30:28.958Z"); return t }()),
				LastModifiedBy:     to.Ptr("sove"),
				LastModifiedByType: to.Ptr(armsecurityandcompliance.CreatedByTypeUser),
			},
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
			Properties: &armsecurityandcompliance.ServicesProperties{
				AccessPolicies: []*armsecurityandcompliance.ServiceAccessPolicyEntry{
					{
						ObjectID: to.Ptr("c487e7d1-3210-41a3-8ccc-e9372b78da47"),
					},
					{
						ObjectID: to.Ptr("5b307da8-43d4-492b-8b66-b0294ade872f"),
					}},
				AuthenticationConfiguration: &armsecurityandcompliance.ServiceAuthenticationConfigurationInfo{
					Audience:          to.Ptr("https://azurehealthcareapis.com"),
					Authority:         to.Ptr("https://login.microsoftonline.com/abfde7b2-df0f-47e6-aabf-2462b07508dc"),
					SmartProxyEnabled: to.Ptr(true),
				},
				CorsConfiguration: &armsecurityandcompliance.ServiceCorsConfigurationInfo{
					AllowCredentials: to.Ptr(false),
					Headers: []*string{
						to.Ptr("*")},
					MaxAge: to.Ptr[int64](1440),
					Methods: []*string{
						to.Ptr("DELETE"),
						to.Ptr("GET"),
						to.Ptr("OPTIONS"),
						to.Ptr("PATCH"),
						to.Ptr("POST"),
						to.Ptr("PUT")},
					Origins: []*string{
						to.Ptr("*")},
				},
				CosmosDbConfiguration: &armsecurityandcompliance.ServiceCosmosDbConfigurationInfo{
					KeyVaultKeyURI:  to.Ptr("https://my-vault.vault.azure.net/keys/my-key"),
					OfferThroughput: to.Ptr[int64](1000),
				},
				PrivateEndpointConnections: []*armsecurityandcompliance.PrivateEndpointConnection{},
				ProvisioningState:          to.Ptr(armsecurityandcompliance.ProvisioningStateSucceeded),
				PublicNetworkAccess:        to.Ptr(armsecurityandcompliance.PublicNetworkAccessDisabled),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateLinkServicesForM365ComplianceCenterDescription) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateLinkServicesForM365ComplianceCenterDescription)
			t.Fatalf("Mock response is not equal to example response for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/ComplianceCenterServicePatch.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateLinkServicesForM365ComplianceCenter_Delete(t *testing.T) {
	// From example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/ComplianceCenterServiceDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete service"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityandcompliance.NewPrivateLinkServicesForM365ComplianceCenterClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"service1",
		&armsecurityandcompliance.PrivateLinkServicesForM365ComplianceCenterClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/ComplianceCenterServiceDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/ComplianceCenterServiceDelete.json: %v", err)
	}
}

func TestPrivateLinkServicesForM365ComplianceCenter_List(t *testing.T) {
	// From example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/ComplianceCenterServiceList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all services in subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityandcompliance.NewPrivateLinkServicesForM365ComplianceCenterClient("subid", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/ComplianceCenterServiceList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsecurityandcompliance.PrivateLinkServicesForM365ComplianceCenterDescriptionListResult{
			Value: []*armsecurityandcompliance.PrivateLinkServicesForM365ComplianceCenterDescription{
				{
					Name:     to.Ptr("service1"),
					Type:     to.Ptr("Microsoft.SecurityAndCompliance/privateLinkServicesForM365ComplianceCenter"),
					Etag:     to.Ptr("etag"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.SecurityAndCompliance/privateLinkServicesForM365ComplianceCenter/service1"),
					Kind:     to.Ptr(armsecurityandcompliance.KindFhirR4),
					Location: to.Ptr("West US"),
					Tags:     map[string]*string{},
					Properties: &armsecurityandcompliance.ServicesProperties{
						AccessPolicies: []*armsecurityandcompliance.ServiceAccessPolicyEntry{
							{
								ObjectID: to.Ptr("c487e7d1-3210-41a3-8ccc-e9372b78da47"),
							},
							{
								ObjectID: to.Ptr("5b307da8-43d4-492b-8b66-b0294ade872f"),
							}},
						AuthenticationConfiguration: &armsecurityandcompliance.ServiceAuthenticationConfigurationInfo{
							Audience:          to.Ptr("https://azurehealthcareapis.com"),
							Authority:         to.Ptr("https://login.microsoftonline.com/abfde7b2-df0f-47e6-aabf-2462b07508dc"),
							SmartProxyEnabled: to.Ptr(true),
						},
						CorsConfiguration: &armsecurityandcompliance.ServiceCorsConfigurationInfo{
							AllowCredentials: to.Ptr(false),
							Headers: []*string{
								to.Ptr("*")},
							MaxAge: to.Ptr[int64](1440),
							Methods: []*string{
								to.Ptr("DELETE"),
								to.Ptr("GET"),
								to.Ptr("OPTIONS"),
								to.Ptr("PATCH"),
								to.Ptr("POST"),
								to.Ptr("PUT")},
							Origins: []*string{
								to.Ptr("*")},
						},
						CosmosDbConfiguration: &armsecurityandcompliance.ServiceCosmosDbConfigurationInfo{
							KeyVaultKeyURI:  to.Ptr("https://my-vault.vault.azure.net/keys/my-key"),
							OfferThroughput: to.Ptr[int64](1000),
						},
						PrivateEndpointConnections: []*armsecurityandcompliance.PrivateEndpointConnection{},
						ProvisioningState:          to.Ptr(armsecurityandcompliance.ProvisioningStateSucceeded),
						PublicNetworkAccess:        to.Ptr(armsecurityandcompliance.PublicNetworkAccessDisabled),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PrivateLinkServicesForM365ComplianceCenterDescriptionListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PrivateLinkServicesForM365ComplianceCenterDescriptionListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/ComplianceCenterServiceList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateLinkServicesForM365ComplianceCenter_ListByResourceGroup(t *testing.T) {
	// From example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/ComplianceCenterServiceListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all services in resource group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityandcompliance.NewPrivateLinkServicesForM365ComplianceCenterClient("subid", cred, &options)
	pager := client.ListByResourceGroup("rgname",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/ComplianceCenterServiceListByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsecurityandcompliance.PrivateLinkServicesForM365ComplianceCenterDescriptionListResult{
			Value: []*armsecurityandcompliance.PrivateLinkServicesForM365ComplianceCenterDescription{
				{
					Name:     to.Ptr("service1"),
					Type:     to.Ptr("Microsoft.SecurityAndCompliance/privateLinkServicesForM365ComplianceCenter"),
					Etag:     to.Ptr("etagvalue"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.SecurityAndCompliance/privateLinkServicesForM365ComplianceCenter/dddb8dcb-effb-4290-bb47-ce1e8440c729"),
					Kind:     to.Ptr(armsecurityandcompliance.KindFhirR4),
					Location: to.Ptr("westus"),
					Tags:     map[string]*string{},
					Properties: &armsecurityandcompliance.ServicesProperties{
						AccessPolicies: []*armsecurityandcompliance.ServiceAccessPolicyEntry{
							{
								ObjectID: to.Ptr("c487e7d1-3210-41a3-8ccc-e9372b78da47"),
							},
							{
								ObjectID: to.Ptr("5b307da8-43d4-492b-8b66-b0294ade872f"),
							}},
						AuthenticationConfiguration: &armsecurityandcompliance.ServiceAuthenticationConfigurationInfo{
							Audience:          to.Ptr("https://azurehealthcareapis.com"),
							Authority:         to.Ptr("https://login.microsoftonline.com/abfde7b2-df0f-47e6-aabf-2462b07508dc"),
							SmartProxyEnabled: to.Ptr(true),
						},
						CorsConfiguration: &armsecurityandcompliance.ServiceCorsConfigurationInfo{
							AllowCredentials: to.Ptr(false),
							Headers: []*string{
								to.Ptr("*")},
							MaxAge: to.Ptr[int64](1440),
							Methods: []*string{
								to.Ptr("DELETE"),
								to.Ptr("GET"),
								to.Ptr("OPTIONS"),
								to.Ptr("PATCH"),
								to.Ptr("POST"),
								to.Ptr("PUT")},
							Origins: []*string{
								to.Ptr("*")},
						},
						CosmosDbConfiguration: &armsecurityandcompliance.ServiceCosmosDbConfigurationInfo{
							KeyVaultKeyURI:  to.Ptr("https://my-vault.vault.azure.net/keys/my-key"),
							OfferThroughput: to.Ptr[int64](1000),
						},
						PrivateEndpointConnections: []*armsecurityandcompliance.PrivateEndpointConnection{},
						ProvisioningState:          to.Ptr(armsecurityandcompliance.ProvisioningStateSucceeded),
						PublicNetworkAccess:        to.Ptr(armsecurityandcompliance.PublicNetworkAccessDisabled),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PrivateLinkServicesForM365ComplianceCenterDescriptionListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PrivateLinkServicesForM365ComplianceCenterDescriptionListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/ComplianceCenterServiceListByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnectionsComp_ListByService(t *testing.T) {
	// From example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/ComplianceCenterServiceListPrivateEndpointConnections.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateEndpointConnection_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityandcompliance.NewPrivateEndpointConnectionsCompClient("subid", cred, &options)
	pager := client.ListByService("rgname",
		"service1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/ComplianceCenterServiceListPrivateEndpointConnections.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsecurityandcompliance.PrivateEndpointConnectionListResult{
			Value: []*armsecurityandcompliance.PrivateEndpointConnection{
				{
					Name: to.Ptr("myConnection"),
					Type: to.Ptr("Microsoft.SecurityAndCompliance/privateLinkServicesForM365ComplianceCenter/privateEndpointConnections"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.SecurityAndCompliance/privateLinkServicesForM365ComplianceCenter/service1/privateEndpointConnections/myConnection"),
					Properties: &armsecurityandcompliance.PrivateEndpointConnectionProperties{
						PrivateEndpoint: &armsecurityandcompliance.PrivateEndpoint{
							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/privateEndpoints/peexample01"),
						},
						PrivateLinkServiceConnectionState: &armsecurityandcompliance.PrivateLinkServiceConnectionState{
							Description:     to.Ptr("Auto-Approved"),
							ActionsRequired: to.Ptr("None"),
							Status:          to.Ptr(armsecurityandcompliance.PrivateEndpointServiceConnectionStatusApproved),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PrivateEndpointConnectionListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PrivateEndpointConnectionListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/ComplianceCenterServiceListPrivateEndpointConnections.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnectionsComp_Get(t *testing.T) {
	// From example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/ComplianceCenterServiceGetPrivateEndpointConnection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateEndpointConnection_GetConnection"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityandcompliance.NewPrivateEndpointConnectionsCompClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rgname",
		"service1",
		"myConnection",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/ComplianceCenterServiceGetPrivateEndpointConnection.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityandcompliance.PrivateEndpointConnection{
			Name: to.Ptr("myConnection"),
			Type: to.Ptr("Microsoft.SecurityAndCompliance/privateLinkServicesForM365ComplianceCenter/privateEndpointConnections"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.SecurityAndCompliance/privateLinkServicesForM365ComplianceCenter/service1/privateEndpointConnections/myConnection"),
			Properties: &armsecurityandcompliance.PrivateEndpointConnectionProperties{
				PrivateEndpoint: &armsecurityandcompliance.PrivateEndpoint{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/privateEndpoints/peexample01"),
				},
				PrivateLinkServiceConnectionState: &armsecurityandcompliance.PrivateLinkServiceConnectionState{
					Description:     to.Ptr("Auto-Approved"),
					ActionsRequired: to.Ptr("None"),
					Status:          to.Ptr(armsecurityandcompliance.PrivateEndpointServiceConnectionStatusApproved),
				},
			},
			SystemData: &armsecurityandcompliance.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-08T13:30:28.958Z"); return t }()),
				CreatedBy:          to.Ptr("sove"),
				CreatedByType:      to.Ptr(armsecurityandcompliance.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-08T13:30:28.958Z"); return t }()),
				LastModifiedBy:     to.Ptr("sove"),
				LastModifiedByType: to.Ptr(armsecurityandcompliance.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateEndpointConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/ComplianceCenterServiceGetPrivateEndpointConnection.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnectionsComp_CreateOrUpdate(t *testing.T) {
	// From example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/ComplianceCenterServiceCreatePrivateEndpointConnection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateEndpointConnection_CreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityandcompliance.NewPrivateEndpointConnectionsCompClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rgname",
		"service1",
		"myConnection",
		armsecurityandcompliance.PrivateEndpointConnection{
			Properties: &armsecurityandcompliance.PrivateEndpointConnectionProperties{
				PrivateLinkServiceConnectionState: &armsecurityandcompliance.PrivateLinkServiceConnectionState{
					Description: to.Ptr("Auto-Approved"),
					Status:      to.Ptr(armsecurityandcompliance.PrivateEndpointServiceConnectionStatusApproved),
				},
			},
		},
		&armsecurityandcompliance.PrivateEndpointConnectionsCompClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/ComplianceCenterServiceCreatePrivateEndpointConnection.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/ComplianceCenterServiceCreatePrivateEndpointConnection.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityandcompliance.PrivateEndpointConnection{
			Name: to.Ptr("myConnection"),
			Type: to.Ptr("Microsoft.SecurityAndCompliance/privateLinkServicesForM365ComplianceCenter/privateEndpointConnections"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.SecurityAndCompliance/privateLinkServicesForM365ComplianceCenter/service1/privateEndpointConnections/myConnection"),
			Properties: &armsecurityandcompliance.PrivateEndpointConnectionProperties{
				PrivateEndpoint: &armsecurityandcompliance.PrivateEndpoint{
					ID: to.Ptr("/subscriptions/c80fb759-c965-4c6a-9110-9b2b2d038882/resourceGroups/myResourceGroup/providers/Microsoft.Network/privateEndpoints/peexample01"),
				},
				PrivateLinkServiceConnectionState: &armsecurityandcompliance.PrivateLinkServiceConnectionState{
					Description:     to.Ptr("Auto-Approved"),
					ActionsRequired: to.Ptr("None"),
					Status:          to.Ptr(armsecurityandcompliance.PrivateEndpointServiceConnectionStatusApproved),
				},
				ProvisioningState: to.Ptr(armsecurityandcompliance.PrivateEndpointConnectionProvisioningStateSucceeded),
			},
			SystemData: &armsecurityandcompliance.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-08T13:30:28.958Z"); return t }()),
				CreatedBy:          to.Ptr("sove"),
				CreatedByType:      to.Ptr(armsecurityandcompliance.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-08T13:30:28.958Z"); return t }()),
				LastModifiedBy:     to.Ptr("sove"),
				LastModifiedByType: to.Ptr(armsecurityandcompliance.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateEndpointConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/ComplianceCenterServiceCreatePrivateEndpointConnection.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnectionsComp_Delete(t *testing.T) {
	// From example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/ComplianceCenterServiceDeletePrivateEndpointConnection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateEndpointConnections_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityandcompliance.NewPrivateEndpointConnectionsCompClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"rgname",
		"service1",
		"myConnection",
		&armsecurityandcompliance.PrivateEndpointConnectionsCompClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/ComplianceCenterServiceDeletePrivateEndpointConnection.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/ComplianceCenterServiceDeletePrivateEndpointConnection.json: %v", err)
	}
}

func TestPrivateLinkResourcesComp_ListByService(t *testing.T) {
	// From example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/ComplianceCenterPrivateLinkResourcesListByService.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateLinkResources_ListGroupIds"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityandcompliance.NewPrivateLinkResourcesCompClient("subid", cred, &options)
	res, err := client.ListByService(ctx,
		"rgname",
		"service1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/ComplianceCenterPrivateLinkResourcesListByService.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityandcompliance.PrivateLinkResourceListResult{
			Value: []*armsecurityandcompliance.PrivateLinkResource{
				{
					Name: to.Ptr("fhir"),
					Type: to.Ptr("Microsoft.SecurityAndCompliance/privateLinkServicesForM365ComplianceCenter/privateLinkResources"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.SecurityAndCompliance/privateLinkServicesForM365ComplianceCenter/service1/privateLinkResources/fhir"),
					Properties: &armsecurityandcompliance.PrivateLinkResourceProperties{
						GroupID: to.Ptr("fhir"),
						RequiredMembers: []*string{
							to.Ptr("fhir")},
						RequiredZoneNames: []*string{
							to.Ptr("privatelink.compliance.microsoft.com")},
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateLinkResourceListResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateLinkResourceListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/ComplianceCenterPrivateLinkResourcesListByService.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateLinkResourcesComp_Get(t *testing.T) {
	// From example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/ComplianceCenterPrivateLinkResourceGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateLinkResources_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityandcompliance.NewPrivateLinkResourcesCompClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rgname",
		"service1",
		"fhir",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/ComplianceCenterPrivateLinkResourceGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityandcompliance.PrivateLinkResource{
			Name: to.Ptr("fhir"),
			Type: to.Ptr("Microsoft.SecurityAndCompliance/privateLinkServicesForM365ComplianceCenter/privateLinkResources"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.SecurityAndCompliance/privateLinkServicesForM365ComplianceCenter/service1/privateLinkResources/fhir"),
			Properties: &armsecurityandcompliance.PrivateLinkResourceProperties{
				GroupID: to.Ptr("fhir"),
				RequiredMembers: []*string{
					to.Ptr("fhir")},
				RequiredZoneNames: []*string{
					to.Ptr("privatelink.security.microsoft.com")},
			},
			SystemData: &armsecurityandcompliance.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-08T13:30:28.958Z"); return t }()),
				CreatedBy:          to.Ptr("sove"),
				CreatedByType:      to.Ptr(armsecurityandcompliance.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-08T13:30:28.958Z"); return t }()),
				LastModifiedBy:     to.Ptr("sove"),
				LastModifiedByType: to.Ptr(armsecurityandcompliance.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateLinkResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateLinkResource)
			t.Fatalf("Mock response is not equal to example response for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/ComplianceCenterPrivateLinkResourceGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateLinkServicesForM365SecurityCenter_Get(t *testing.T) {
	// From example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/SecurityCenterServiceGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get metadata"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityandcompliance.NewPrivateLinkServicesForM365SecurityCenterClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"service1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/SecurityCenterServiceGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityandcompliance.PrivateLinkServicesForM365SecurityCenterDescription{
			Name:     to.Ptr("service1"),
			Type:     to.Ptr("Microsoft.SecurityAndCompliance/privateLinkServicesForM365SecurityCenter"),
			Etag:     to.Ptr("etagvalue"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.SecurityAndCompliance/privateLinkServicesForM365SecurityCenter/service1"),
			Kind:     to.Ptr(armsecurityandcompliance.KindFhirR4),
			Location: to.Ptr("West US"),
			SystemData: &armsecurityandcompliance.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-08T13:30:28.958Z"); return t }()),
				CreatedBy:          to.Ptr("sove"),
				CreatedByType:      to.Ptr(armsecurityandcompliance.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-08T13:30:28.958Z"); return t }()),
				LastModifiedBy:     to.Ptr("sove"),
				LastModifiedByType: to.Ptr(armsecurityandcompliance.CreatedByTypeUser),
			},
			Tags: map[string]*string{},
			Properties: &armsecurityandcompliance.ServicesProperties{
				AccessPolicies: []*armsecurityandcompliance.ServiceAccessPolicyEntry{
					{
						ObjectID: to.Ptr("c487e7d1-3210-41a3-8ccc-e9372b78da47"),
					},
					{
						ObjectID: to.Ptr("5b307da8-43d4-492b-8b66-b0294ade872f"),
					}},
				AuthenticationConfiguration: &armsecurityandcompliance.ServiceAuthenticationConfigurationInfo{
					Audience:          to.Ptr("https://azurehealthcareapis.com"),
					Authority:         to.Ptr("https://login.microsoftonline.com/abfde7b2-df0f-47e6-aabf-2462b07508dc"),
					SmartProxyEnabled: to.Ptr(true),
				},
				CorsConfiguration: &armsecurityandcompliance.ServiceCorsConfigurationInfo{
					AllowCredentials: to.Ptr(false),
					Headers: []*string{
						to.Ptr("*")},
					MaxAge: to.Ptr[int64](1440),
					Methods: []*string{
						to.Ptr("DELETE"),
						to.Ptr("GET"),
						to.Ptr("OPTIONS"),
						to.Ptr("PATCH"),
						to.Ptr("POST"),
						to.Ptr("PUT")},
					Origins: []*string{
						to.Ptr("*")},
				},
				CosmosDbConfiguration: &armsecurityandcompliance.ServiceCosmosDbConfigurationInfo{
					KeyVaultKeyURI:  to.Ptr("https://my-vault.vault.azure.net/keys/my-key"),
					OfferThroughput: to.Ptr[int64](1000),
				},
				PrivateEndpointConnections: []*armsecurityandcompliance.PrivateEndpointConnection{},
				ProvisioningState:          to.Ptr(armsecurityandcompliance.ProvisioningStateSucceeded),
				PublicNetworkAccess:        to.Ptr(armsecurityandcompliance.PublicNetworkAccessDisabled),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateLinkServicesForM365SecurityCenterDescription) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateLinkServicesForM365SecurityCenterDescription)
			t.Fatalf("Mock response is not equal to example response for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/SecurityCenterServiceGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateLinkServicesForM365SecurityCenter_CreateOrUpdate(t *testing.T) {
	// From example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/SecurityCenterServiceCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or Update a service with all parameters"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityandcompliance.NewPrivateLinkServicesForM365SecurityCenterClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"service1",
		armsecurityandcompliance.PrivateLinkServicesForM365SecurityCenterDescription{
			Identity: &armsecurityandcompliance.ServicesResourceIdentity{
				Type: to.Ptr(armsecurityandcompliance.ManagedServiceIdentityTypeSystemAssigned),
			},
			Kind:     to.Ptr(armsecurityandcompliance.KindFhirR4),
			Location: to.Ptr("westus2"),
			Tags:     map[string]*string{},
			Properties: &armsecurityandcompliance.ServicesProperties{
				AccessPolicies: []*armsecurityandcompliance.ServiceAccessPolicyEntry{
					{
						ObjectID: to.Ptr("c487e7d1-3210-41a3-8ccc-e9372b78da47"),
					},
					{
						ObjectID: to.Ptr("5b307da8-43d4-492b-8b66-b0294ade872f"),
					}},
				AuthenticationConfiguration: &armsecurityandcompliance.ServiceAuthenticationConfigurationInfo{
					Audience:          to.Ptr("https://azurehealthcareapis.com"),
					Authority:         to.Ptr("https://login.microsoftonline.com/abfde7b2-df0f-47e6-aabf-2462b07508dc"),
					SmartProxyEnabled: to.Ptr(true),
				},
				CorsConfiguration: &armsecurityandcompliance.ServiceCorsConfigurationInfo{
					AllowCredentials: to.Ptr(false),
					Headers: []*string{
						to.Ptr("*")},
					MaxAge: to.Ptr[int64](1440),
					Methods: []*string{
						to.Ptr("DELETE"),
						to.Ptr("GET"),
						to.Ptr("OPTIONS"),
						to.Ptr("PATCH"),
						to.Ptr("POST"),
						to.Ptr("PUT")},
					Origins: []*string{
						to.Ptr("*")},
				},
				CosmosDbConfiguration: &armsecurityandcompliance.ServiceCosmosDbConfigurationInfo{
					KeyVaultKeyURI:  to.Ptr("https://my-vault.vault.azure.net/keys/my-key"),
					OfferThroughput: to.Ptr[int64](1000),
				},
				ExportConfiguration: &armsecurityandcompliance.ServiceExportConfigurationInfo{
					StorageAccountName: to.Ptr("existingStorageAccount"),
				},
				PrivateEndpointConnections: []*armsecurityandcompliance.PrivateEndpointConnection{},
				PublicNetworkAccess:        to.Ptr(armsecurityandcompliance.PublicNetworkAccessDisabled),
			},
		},
		&armsecurityandcompliance.PrivateLinkServicesForM365SecurityCenterClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/SecurityCenterServiceCreate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/SecurityCenterServiceCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityandcompliance.PrivateLinkServicesForM365SecurityCenterDescription{
			Name: to.Ptr("service1"),
			Type: to.Ptr("Microsoft.SecurityAndCompliance/privateLinkServicesForM365SecurityCenter"),
			Etag: to.Ptr("etagvalue"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.SecurityAndCompliance/privateLinkServicesForM365SecurityCenter/service1"),
			Identity: &armsecurityandcompliance.ServicesResourceIdentity{
				Type:        to.Ptr(armsecurityandcompliance.ManagedServiceIdentityTypeSystemAssigned),
				PrincipalID: to.Ptr("03fe6ae0-952c-4e4b-954b-cc0364dd252e"),
				TenantID:    to.Ptr("72f988bf-86f1-41af-91ab-2d8cd011db47"),
			},
			Kind:     to.Ptr(armsecurityandcompliance.KindFhirR4),
			Location: to.Ptr("West US 2"),
			SystemData: &armsecurityandcompliance.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-08T13:30:28.958Z"); return t }()),
				CreatedBy:          to.Ptr("sove"),
				CreatedByType:      to.Ptr(armsecurityandcompliance.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-08T13:30:28.958Z"); return t }()),
				LastModifiedBy:     to.Ptr("sove"),
				LastModifiedByType: to.Ptr(armsecurityandcompliance.CreatedByTypeUser),
			},
			Tags: map[string]*string{},
			Properties: &armsecurityandcompliance.ServicesProperties{
				AccessPolicies: []*armsecurityandcompliance.ServiceAccessPolicyEntry{
					{
						ObjectID: to.Ptr("c487e7d1-3210-41a3-8ccc-e9372b78da47"),
					},
					{
						ObjectID: to.Ptr("5b307da8-43d4-492b-8b66-b0294ade872f"),
					}},
				AuthenticationConfiguration: &armsecurityandcompliance.ServiceAuthenticationConfigurationInfo{
					Audience:          to.Ptr("https://azurehealthcareapis.com"),
					Authority:         to.Ptr("https://login.microsoftonline.com/abfde7b2-df0f-47e6-aabf-2462b07508dc"),
					SmartProxyEnabled: to.Ptr(true),
				},
				CorsConfiguration: &armsecurityandcompliance.ServiceCorsConfigurationInfo{
					AllowCredentials: to.Ptr(false),
					Headers: []*string{
						to.Ptr("*")},
					MaxAge: to.Ptr[int64](1440),
					Methods: []*string{
						to.Ptr("DELETE"),
						to.Ptr("GET"),
						to.Ptr("OPTIONS"),
						to.Ptr("PATCH"),
						to.Ptr("POST"),
						to.Ptr("PUT")},
					Origins: []*string{
						to.Ptr("*")},
				},
				CosmosDbConfiguration: &armsecurityandcompliance.ServiceCosmosDbConfigurationInfo{
					KeyVaultKeyURI:  to.Ptr("https://my-vault.vault.azure.net/keys/my-key"),
					OfferThroughput: to.Ptr[int64](1000),
				},
				ExportConfiguration: &armsecurityandcompliance.ServiceExportConfigurationInfo{
					StorageAccountName: to.Ptr("existingStorageAccount"),
				},
				PrivateEndpointConnections: []*armsecurityandcompliance.PrivateEndpointConnection{},
				ProvisioningState:          to.Ptr(armsecurityandcompliance.ProvisioningStateSucceeded),
				PublicNetworkAccess:        to.Ptr(armsecurityandcompliance.PublicNetworkAccessDisabled),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateLinkServicesForM365SecurityCenterDescription) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateLinkServicesForM365SecurityCenterDescription)
			t.Fatalf("Mock response is not equal to example response for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/SecurityCenterServiceCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/SecurityCenterServiceCreateMinimum.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or Update a service with minimum parameters"},
	})
	client = armsecurityandcompliance.NewPrivateLinkServicesForM365SecurityCenterClient("subid", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"service2",
		armsecurityandcompliance.PrivateLinkServicesForM365SecurityCenterDescription{
			Kind:     to.Ptr(armsecurityandcompliance.KindFhirR4),
			Location: to.Ptr("westus2"),
			Tags:     map[string]*string{},
			Properties: &armsecurityandcompliance.ServicesProperties{
				AccessPolicies: []*armsecurityandcompliance.ServiceAccessPolicyEntry{
					{
						ObjectID: to.Ptr("c487e7d1-3210-41a3-8ccc-e9372b78da47"),
					}},
			},
		},
		&armsecurityandcompliance.PrivateLinkServicesForM365SecurityCenterClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/SecurityCenterServiceCreateMinimum.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/SecurityCenterServiceCreateMinimum.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityandcompliance.PrivateLinkServicesForM365SecurityCenterDescription{
			Name:     to.Ptr("service2"),
			Type:     to.Ptr("Microsoft.SecurityAndCompliance/privateLinkServicesForM365SecurityCenter"),
			Etag:     to.Ptr("etagvalue"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.SecurityAndCompliance/privateLinkServicesForM365SecurityCenter/service2"),
			Kind:     to.Ptr(armsecurityandcompliance.KindFhirR4),
			Location: to.Ptr("westus2"),
			SystemData: &armsecurityandcompliance.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-08T13:30:28.958Z"); return t }()),
				CreatedBy:          to.Ptr("sove"),
				CreatedByType:      to.Ptr(armsecurityandcompliance.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-08T13:30:28.958Z"); return t }()),
				LastModifiedBy:     to.Ptr("sove"),
				LastModifiedByType: to.Ptr(armsecurityandcompliance.CreatedByTypeUser),
			},
			Tags: map[string]*string{},
			Properties: &armsecurityandcompliance.ServicesProperties{
				AccessPolicies: []*armsecurityandcompliance.ServiceAccessPolicyEntry{
					{
						ObjectID: to.Ptr("c487e7d1-3210-41a3-8ccc-e9372b78da47"),
					}},
				AuthenticationConfiguration: &armsecurityandcompliance.ServiceAuthenticationConfigurationInfo{
					Audience:          to.Ptr("https://azurehealthcareapis.com"),
					Authority:         to.Ptr("https://login.microsoftonline.com/abfde7b2-df0f-47e6-aabf-2462b07508dc"),
					SmartProxyEnabled: to.Ptr(false),
				},
				CorsConfiguration: &armsecurityandcompliance.ServiceCorsConfigurationInfo{
					AllowCredentials: to.Ptr(false),
					Headers:          []*string{},
					Methods:          []*string{},
					Origins:          []*string{},
				},
				CosmosDbConfiguration: &armsecurityandcompliance.ServiceCosmosDbConfigurationInfo{
					OfferThroughput: to.Ptr[int64](1000),
				},
				PrivateEndpointConnections: []*armsecurityandcompliance.PrivateEndpointConnection{},
				ProvisioningState:          to.Ptr(armsecurityandcompliance.ProvisioningStateSucceeded),
				PublicNetworkAccess:        to.Ptr(armsecurityandcompliance.PublicNetworkAccessDisabled),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateLinkServicesForM365SecurityCenterDescription) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateLinkServicesForM365SecurityCenterDescription)
			t.Fatalf("Mock response is not equal to example response for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/SecurityCenterServiceCreateMinimum.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateLinkServicesForM365SecurityCenter_Update(t *testing.T) {
	// From example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/SecurityCenterServicePatch.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Patch service"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityandcompliance.NewPrivateLinkServicesForM365SecurityCenterClient("subid", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"rg1",
		"service1",
		armsecurityandcompliance.ServicesPatchDescription{
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
		},
		&armsecurityandcompliance.PrivateLinkServicesForM365SecurityCenterClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/SecurityCenterServicePatch.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/SecurityCenterServicePatch.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityandcompliance.PrivateLinkServicesForM365SecurityCenterDescription{
			Name:     to.Ptr("service1"),
			Type:     to.Ptr("Microsoft.SecurityAndCompliance/privateLinkServicesForM365SecurityCenter"),
			Etag:     to.Ptr("etagvalue"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.SecurityAndCompliance/privateLinkServicesForM365SecurityCenter/service1"),
			Kind:     to.Ptr(armsecurityandcompliance.KindFhirR4),
			Location: to.Ptr("West US"),
			SystemData: &armsecurityandcompliance.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-08T13:30:28.958Z"); return t }()),
				CreatedBy:          to.Ptr("sove"),
				CreatedByType:      to.Ptr(armsecurityandcompliance.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-08T13:30:28.958Z"); return t }()),
				LastModifiedBy:     to.Ptr("sove"),
				LastModifiedByType: to.Ptr(armsecurityandcompliance.CreatedByTypeUser),
			},
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
			Properties: &armsecurityandcompliance.ServicesProperties{
				AccessPolicies: []*armsecurityandcompliance.ServiceAccessPolicyEntry{
					{
						ObjectID: to.Ptr("c487e7d1-3210-41a3-8ccc-e9372b78da47"),
					},
					{
						ObjectID: to.Ptr("5b307da8-43d4-492b-8b66-b0294ade872f"),
					}},
				AuthenticationConfiguration: &armsecurityandcompliance.ServiceAuthenticationConfigurationInfo{
					Audience:          to.Ptr("https://azurehealthcareapis.com"),
					Authority:         to.Ptr("https://login.microsoftonline.com/abfde7b2-df0f-47e6-aabf-2462b07508dc"),
					SmartProxyEnabled: to.Ptr(true),
				},
				CorsConfiguration: &armsecurityandcompliance.ServiceCorsConfigurationInfo{
					AllowCredentials: to.Ptr(false),
					Headers: []*string{
						to.Ptr("*")},
					MaxAge: to.Ptr[int64](1440),
					Methods: []*string{
						to.Ptr("DELETE"),
						to.Ptr("GET"),
						to.Ptr("OPTIONS"),
						to.Ptr("PATCH"),
						to.Ptr("POST"),
						to.Ptr("PUT")},
					Origins: []*string{
						to.Ptr("*")},
				},
				CosmosDbConfiguration: &armsecurityandcompliance.ServiceCosmosDbConfigurationInfo{
					KeyVaultKeyURI:  to.Ptr("https://my-vault.vault.azure.net/keys/my-key"),
					OfferThroughput: to.Ptr[int64](1000),
				},
				PrivateEndpointConnections: []*armsecurityandcompliance.PrivateEndpointConnection{},
				ProvisioningState:          to.Ptr(armsecurityandcompliance.ProvisioningStateSucceeded),
				PublicNetworkAccess:        to.Ptr(armsecurityandcompliance.PublicNetworkAccessDisabled),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateLinkServicesForM365SecurityCenterDescription) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateLinkServicesForM365SecurityCenterDescription)
			t.Fatalf("Mock response is not equal to example response for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/SecurityCenterServicePatch.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateLinkServicesForM365SecurityCenter_Delete(t *testing.T) {
	// From example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/SecurityCenterServiceDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete service"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityandcompliance.NewPrivateLinkServicesForM365SecurityCenterClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"service1",
		&armsecurityandcompliance.PrivateLinkServicesForM365SecurityCenterClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/SecurityCenterServiceDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/SecurityCenterServiceDelete.json: %v", err)
	}
}

func TestPrivateLinkServicesForM365SecurityCenter_List(t *testing.T) {
	// From example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/SecurityCenterServiceList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all services in subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityandcompliance.NewPrivateLinkServicesForM365SecurityCenterClient("subid", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/SecurityCenterServiceList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsecurityandcompliance.PrivateLinkServicesForM365SecurityCenterDescriptionListResult{
			Value: []*armsecurityandcompliance.PrivateLinkServicesForM365SecurityCenterDescription{
				{
					Name:     to.Ptr("service1"),
					Type:     to.Ptr("Microsoft.SecurityAndCompliance/privateLinkServicesForM365SecurityCenter"),
					Etag:     to.Ptr("etag"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.SecurityAndCompliance/privateLinkServicesForM365SecurityCenter/service1"),
					Kind:     to.Ptr(armsecurityandcompliance.KindFhirR4),
					Location: to.Ptr("West US"),
					Tags:     map[string]*string{},
					Properties: &armsecurityandcompliance.ServicesProperties{
						AccessPolicies: []*armsecurityandcompliance.ServiceAccessPolicyEntry{
							{
								ObjectID: to.Ptr("c487e7d1-3210-41a3-8ccc-e9372b78da47"),
							},
							{
								ObjectID: to.Ptr("5b307da8-43d4-492b-8b66-b0294ade872f"),
							}},
						AuthenticationConfiguration: &armsecurityandcompliance.ServiceAuthenticationConfigurationInfo{
							Audience:          to.Ptr("https://azurehealthcareapis.com"),
							Authority:         to.Ptr("https://login.microsoftonline.com/abfde7b2-df0f-47e6-aabf-2462b07508dc"),
							SmartProxyEnabled: to.Ptr(true),
						},
						CorsConfiguration: &armsecurityandcompliance.ServiceCorsConfigurationInfo{
							AllowCredentials: to.Ptr(false),
							Headers: []*string{
								to.Ptr("*")},
							MaxAge: to.Ptr[int64](1440),
							Methods: []*string{
								to.Ptr("DELETE"),
								to.Ptr("GET"),
								to.Ptr("OPTIONS"),
								to.Ptr("PATCH"),
								to.Ptr("POST"),
								to.Ptr("PUT")},
							Origins: []*string{
								to.Ptr("*")},
						},
						CosmosDbConfiguration: &armsecurityandcompliance.ServiceCosmosDbConfigurationInfo{
							KeyVaultKeyURI:  to.Ptr("https://my-vault.vault.azure.net/keys/my-key"),
							OfferThroughput: to.Ptr[int64](1000),
						},
						PrivateEndpointConnections: []*armsecurityandcompliance.PrivateEndpointConnection{},
						ProvisioningState:          to.Ptr(armsecurityandcompliance.ProvisioningStateSucceeded),
						PublicNetworkAccess:        to.Ptr(armsecurityandcompliance.PublicNetworkAccessDisabled),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PrivateLinkServicesForM365SecurityCenterDescriptionListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PrivateLinkServicesForM365SecurityCenterDescriptionListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/SecurityCenterServiceList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateLinkServicesForM365SecurityCenter_ListByResourceGroup(t *testing.T) {
	// From example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/SecurityCenterServiceListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all services in resource group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityandcompliance.NewPrivateLinkServicesForM365SecurityCenterClient("subid", cred, &options)
	pager := client.ListByResourceGroup("rgname",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/SecurityCenterServiceListByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsecurityandcompliance.PrivateLinkServicesForM365SecurityCenterDescriptionListResult{
			Value: []*armsecurityandcompliance.PrivateLinkServicesForM365SecurityCenterDescription{
				{
					Name:     to.Ptr("service1"),
					Type:     to.Ptr("Microsoft.SecurityAndCompliance/privateLinkServicesForM365SecurityCenter"),
					Etag:     to.Ptr("etagvalue"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.SecurityAndCompliance/privateLinkServicesForM365SecurityCenter/dddb8dcb-effb-4290-bb47-ce1e8440c729"),
					Kind:     to.Ptr(armsecurityandcompliance.KindFhirR4),
					Location: to.Ptr("westus"),
					Tags:     map[string]*string{},
					Properties: &armsecurityandcompliance.ServicesProperties{
						AccessPolicies: []*armsecurityandcompliance.ServiceAccessPolicyEntry{
							{
								ObjectID: to.Ptr("c487e7d1-3210-41a3-8ccc-e9372b78da47"),
							},
							{
								ObjectID: to.Ptr("5b307da8-43d4-492b-8b66-b0294ade872f"),
							}},
						AuthenticationConfiguration: &armsecurityandcompliance.ServiceAuthenticationConfigurationInfo{
							Audience:          to.Ptr("https://azurehealthcareapis.com"),
							Authority:         to.Ptr("https://login.microsoftonline.com/abfde7b2-df0f-47e6-aabf-2462b07508dc"),
							SmartProxyEnabled: to.Ptr(true),
						},
						CorsConfiguration: &armsecurityandcompliance.ServiceCorsConfigurationInfo{
							AllowCredentials: to.Ptr(false),
							Headers: []*string{
								to.Ptr("*")},
							MaxAge: to.Ptr[int64](1440),
							Methods: []*string{
								to.Ptr("DELETE"),
								to.Ptr("GET"),
								to.Ptr("OPTIONS"),
								to.Ptr("PATCH"),
								to.Ptr("POST"),
								to.Ptr("PUT")},
							Origins: []*string{
								to.Ptr("*")},
						},
						CosmosDbConfiguration: &armsecurityandcompliance.ServiceCosmosDbConfigurationInfo{
							KeyVaultKeyURI:  to.Ptr("https://my-vault.vault.azure.net/keys/my-key"),
							OfferThroughput: to.Ptr[int64](1000),
						},
						PrivateEndpointConnections: []*armsecurityandcompliance.PrivateEndpointConnection{},
						ProvisioningState:          to.Ptr(armsecurityandcompliance.ProvisioningStateSucceeded),
						PublicNetworkAccess:        to.Ptr(armsecurityandcompliance.PublicNetworkAccessDisabled),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PrivateLinkServicesForM365SecurityCenterDescriptionListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PrivateLinkServicesForM365SecurityCenterDescriptionListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/SecurityCenterServiceListByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnectionsSec_ListByService(t *testing.T) {
	// From example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/SecurityCenterServiceListPrivateEndpointConnections.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateEndpointConnection_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityandcompliance.NewPrivateEndpointConnectionsSecClient("subid", cred, &options)
	pager := client.ListByService("rgname",
		"service1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/SecurityCenterServiceListPrivateEndpointConnections.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsecurityandcompliance.PrivateEndpointConnectionListResult{
			Value: []*armsecurityandcompliance.PrivateEndpointConnection{
				{
					Name: to.Ptr("myConnection"),
					Type: to.Ptr("Microsoft.SecurityAndCompliance/privateLinkServicesForM365SecurityCenter/privateEndpointConnections"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.SecurityAndCompliance/privateLinkServicesForM365SecurityCenter/service1/privateEndpointConnections/myConnection"),
					Properties: &armsecurityandcompliance.PrivateEndpointConnectionProperties{
						PrivateEndpoint: &armsecurityandcompliance.PrivateEndpoint{
							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/privateEndpoints/peexample01"),
						},
						PrivateLinkServiceConnectionState: &armsecurityandcompliance.PrivateLinkServiceConnectionState{
							Description:     to.Ptr("Auto-Approved"),
							ActionsRequired: to.Ptr("None"),
							Status:          to.Ptr(armsecurityandcompliance.PrivateEndpointServiceConnectionStatusApproved),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PrivateEndpointConnectionListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PrivateEndpointConnectionListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/SecurityCenterServiceListPrivateEndpointConnections.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnectionsSec_Get(t *testing.T) {
	// From example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/SecurityCenterServiceGetPrivateEndpointConnection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateEndpointConnection_GetConnection"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityandcompliance.NewPrivateEndpointConnectionsSecClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rgname",
		"service1",
		"myConnection",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/SecurityCenterServiceGetPrivateEndpointConnection.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityandcompliance.PrivateEndpointConnection{
			Name: to.Ptr("myConnection"),
			Type: to.Ptr("Microsoft.SecurityAndCompliance/privateLinkServicesForM365SecurityCenter/privateEndpointConnections"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.SecurityAndCompliance/privateLinkServicesForM365SecurityCenter/service1/privateEndpointConnections/myConnection"),
			Properties: &armsecurityandcompliance.PrivateEndpointConnectionProperties{
				PrivateEndpoint: &armsecurityandcompliance.PrivateEndpoint{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/privateEndpoints/peexample01"),
				},
				PrivateLinkServiceConnectionState: &armsecurityandcompliance.PrivateLinkServiceConnectionState{
					Description:     to.Ptr("Auto-Approved"),
					ActionsRequired: to.Ptr("None"),
					Status:          to.Ptr(armsecurityandcompliance.PrivateEndpointServiceConnectionStatusApproved),
				},
			},
			SystemData: &armsecurityandcompliance.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-08T13:30:28.958Z"); return t }()),
				CreatedBy:          to.Ptr("sove"),
				CreatedByType:      to.Ptr(armsecurityandcompliance.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-08T13:30:28.958Z"); return t }()),
				LastModifiedBy:     to.Ptr("sove"),
				LastModifiedByType: to.Ptr(armsecurityandcompliance.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateEndpointConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/SecurityCenterServiceGetPrivateEndpointConnection.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnectionsSec_CreateOrUpdate(t *testing.T) {
	// From example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/SecurityCenterServiceCreatePrivateEndpointConnection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateEndpointConnection_CreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityandcompliance.NewPrivateEndpointConnectionsSecClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rgname",
		"service1",
		"myConnection",
		armsecurityandcompliance.PrivateEndpointConnection{
			Properties: &armsecurityandcompliance.PrivateEndpointConnectionProperties{
				PrivateLinkServiceConnectionState: &armsecurityandcompliance.PrivateLinkServiceConnectionState{
					Description: to.Ptr("Auto-Approved"),
					Status:      to.Ptr(armsecurityandcompliance.PrivateEndpointServiceConnectionStatusApproved),
				},
			},
		},
		&armsecurityandcompliance.PrivateEndpointConnectionsSecClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/SecurityCenterServiceCreatePrivateEndpointConnection.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/SecurityCenterServiceCreatePrivateEndpointConnection.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityandcompliance.PrivateEndpointConnection{
			Name: to.Ptr("myConnection"),
			Type: to.Ptr("Microsoft.SecurityAndCompliance/privateLinkServicesForM365SecurityCenter/privateEndpointConnections"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.SecurityAndCompliance/privateLinkServicesForM365SecurityCenter/service1/privateEndpointConnections/myConnection"),
			Properties: &armsecurityandcompliance.PrivateEndpointConnectionProperties{
				PrivateEndpoint: &armsecurityandcompliance.PrivateEndpoint{
					ID: to.Ptr("/subscriptions/c80fb759-c965-4c6a-9110-9b2b2d038882/resourceGroups/myResourceGroup/providers/Microsoft.Network/privateEndpoints/peexample01"),
				},
				PrivateLinkServiceConnectionState: &armsecurityandcompliance.PrivateLinkServiceConnectionState{
					Description:     to.Ptr("Auto-Approved"),
					ActionsRequired: to.Ptr("None"),
					Status:          to.Ptr(armsecurityandcompliance.PrivateEndpointServiceConnectionStatusApproved),
				},
				ProvisioningState: to.Ptr(armsecurityandcompliance.PrivateEndpointConnectionProvisioningStateSucceeded),
			},
			SystemData: &armsecurityandcompliance.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-08T13:30:28.958Z"); return t }()),
				CreatedBy:          to.Ptr("sove"),
				CreatedByType:      to.Ptr(armsecurityandcompliance.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-08T13:30:28.958Z"); return t }()),
				LastModifiedBy:     to.Ptr("sove"),
				LastModifiedByType: to.Ptr(armsecurityandcompliance.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateEndpointConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/SecurityCenterServiceCreatePrivateEndpointConnection.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnectionsSec_Delete(t *testing.T) {
	// From example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/SecurityCenterServiceDeletePrivateEndpointConnection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateEndpointConnections_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityandcompliance.NewPrivateEndpointConnectionsSecClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"rgname",
		"service1",
		"myConnection",
		&armsecurityandcompliance.PrivateEndpointConnectionsSecClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/SecurityCenterServiceDeletePrivateEndpointConnection.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/SecurityCenterServiceDeletePrivateEndpointConnection.json: %v", err)
	}
}

func TestPrivateLinkResourcesSec_ListByService(t *testing.T) {
	// From example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/SecurityCenterPrivateLinkResourcesListByService.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateLinkResources_ListGroupIds"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityandcompliance.NewPrivateLinkResourcesSecClient("subid", cred, &options)
	res, err := client.ListByService(ctx,
		"rgname",
		"service1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/SecurityCenterPrivateLinkResourcesListByService.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityandcompliance.PrivateLinkResourceListResult{
			Value: []*armsecurityandcompliance.PrivateLinkResource{
				{
					Name: to.Ptr("fhir"),
					Type: to.Ptr("Microsoft.SecurityAndCompliance/privateLinkServicesForM365SecurityCenter/privateLinkResources"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.SecurityAndCompliance/privateLinkServicesForM365SecurityCenter/service1/privateLinkResources/fhir"),
					Properties: &armsecurityandcompliance.PrivateLinkResourceProperties{
						GroupID: to.Ptr("fhir"),
						RequiredMembers: []*string{
							to.Ptr("fhir")},
						RequiredZoneNames: []*string{
							to.Ptr("privatelink.compliance.microsoft.com")},
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateLinkResourceListResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateLinkResourceListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/SecurityCenterPrivateLinkResourcesListByService.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateLinkResourcesSec_Get(t *testing.T) {
	// From example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/SecurityCenterPrivateLinkResourceGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateLinkResources_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityandcompliance.NewPrivateLinkResourcesSecClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rgname",
		"service1",
		"fhir",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/SecurityCenterPrivateLinkResourceGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityandcompliance.PrivateLinkResource{
			Name: to.Ptr("fhir"),
			Type: to.Ptr("Microsoft.SecurityAndCompliance/privateLinkServicesForM365SecurityCenter/privateLinkResources"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.SecurityAndCompliance/privateLinkServicesForM365SecurityCenter/service1/privateLinkResources/fhir"),
			Properties: &armsecurityandcompliance.PrivateLinkResourceProperties{
				GroupID: to.Ptr("fhir"),
				RequiredMembers: []*string{
					to.Ptr("fhir")},
				RequiredZoneNames: []*string{
					to.Ptr("privatelink.security.microsoft.com")},
			},
			SystemData: &armsecurityandcompliance.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-08T13:30:28.958Z"); return t }()),
				CreatedBy:          to.Ptr("sove"),
				CreatedByType:      to.Ptr(armsecurityandcompliance.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-08T13:30:28.958Z"); return t }()),
				LastModifiedBy:     to.Ptr("sove"),
				LastModifiedByType: to.Ptr(armsecurityandcompliance.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateLinkResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateLinkResource)
			t.Fatalf("Mock response is not equal to example response for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/SecurityCenterPrivateLinkResourceGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateLinkServicesForO365ManagementActivityAPI_Get(t *testing.T) {
	// From example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/ManagementAPIServiceGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get metadata"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityandcompliance.NewPrivateLinkServicesForO365ManagementActivityAPIClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"service1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/ManagementAPIServiceGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityandcompliance.PrivateLinkServicesForO365ManagementActivityAPIDescription{
			Name:     to.Ptr("service1"),
			Type:     to.Ptr("Microsoft.SecurityAndCompliance/privateLinkServicesForO365ManagementActivityAPI"),
			Etag:     to.Ptr("etagvalue"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.SecurityAndCompliance/privateLinkServicesForO365ManagementActivityAPI/service1"),
			Kind:     to.Ptr(armsecurityandcompliance.KindFhirR4),
			Location: to.Ptr("West US"),
			SystemData: &armsecurityandcompliance.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-08T13:30:28.958Z"); return t }()),
				CreatedBy:          to.Ptr("sove"),
				CreatedByType:      to.Ptr(armsecurityandcompliance.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-08T13:30:28.958Z"); return t }()),
				LastModifiedBy:     to.Ptr("sove"),
				LastModifiedByType: to.Ptr(armsecurityandcompliance.CreatedByTypeUser),
			},
			Tags: map[string]*string{},
			Properties: &armsecurityandcompliance.ServicesProperties{
				AccessPolicies: []*armsecurityandcompliance.ServiceAccessPolicyEntry{
					{
						ObjectID: to.Ptr("c487e7d1-3210-41a3-8ccc-e9372b78da47"),
					},
					{
						ObjectID: to.Ptr("5b307da8-43d4-492b-8b66-b0294ade872f"),
					}},
				AuthenticationConfiguration: &armsecurityandcompliance.ServiceAuthenticationConfigurationInfo{
					Audience:          to.Ptr("https://azurehealthcareapis.com"),
					Authority:         to.Ptr("https://login.microsoftonline.com/abfde7b2-df0f-47e6-aabf-2462b07508dc"),
					SmartProxyEnabled: to.Ptr(true),
				},
				CorsConfiguration: &armsecurityandcompliance.ServiceCorsConfigurationInfo{
					AllowCredentials: to.Ptr(false),
					Headers: []*string{
						to.Ptr("*")},
					MaxAge: to.Ptr[int64](1440),
					Methods: []*string{
						to.Ptr("DELETE"),
						to.Ptr("GET"),
						to.Ptr("OPTIONS"),
						to.Ptr("PATCH"),
						to.Ptr("POST"),
						to.Ptr("PUT")},
					Origins: []*string{
						to.Ptr("*")},
				},
				CosmosDbConfiguration: &armsecurityandcompliance.ServiceCosmosDbConfigurationInfo{
					KeyVaultKeyURI:  to.Ptr("https://my-vault.vault.azure.net/keys/my-key"),
					OfferThroughput: to.Ptr[int64](1000),
				},
				PrivateEndpointConnections: []*armsecurityandcompliance.PrivateEndpointConnection{},
				ProvisioningState:          to.Ptr(armsecurityandcompliance.ProvisioningStateSucceeded),
				PublicNetworkAccess:        to.Ptr(armsecurityandcompliance.PublicNetworkAccessDisabled),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateLinkServicesForO365ManagementActivityAPIDescription) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateLinkServicesForO365ManagementActivityAPIDescription)
			t.Fatalf("Mock response is not equal to example response for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/ManagementAPIServiceGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateLinkServicesForO365ManagementActivityAPI_CreateOrUpdate(t *testing.T) {
	// From example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/ManagementAPIServiceCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or Update a service with all parameters"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityandcompliance.NewPrivateLinkServicesForO365ManagementActivityAPIClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"service1",
		armsecurityandcompliance.PrivateLinkServicesForO365ManagementActivityAPIDescription{
			Identity: &armsecurityandcompliance.ServicesResourceIdentity{
				Type: to.Ptr(armsecurityandcompliance.ManagedServiceIdentityTypeSystemAssigned),
			},
			Kind:     to.Ptr(armsecurityandcompliance.KindFhirR4),
			Location: to.Ptr("westus2"),
			Tags:     map[string]*string{},
			Properties: &armsecurityandcompliance.ServicesProperties{
				AccessPolicies: []*armsecurityandcompliance.ServiceAccessPolicyEntry{
					{
						ObjectID: to.Ptr("c487e7d1-3210-41a3-8ccc-e9372b78da47"),
					},
					{
						ObjectID: to.Ptr("5b307da8-43d4-492b-8b66-b0294ade872f"),
					}},
				AuthenticationConfiguration: &armsecurityandcompliance.ServiceAuthenticationConfigurationInfo{
					Audience:          to.Ptr("https://azurehealthcareapis.com"),
					Authority:         to.Ptr("https://login.microsoftonline.com/abfde7b2-df0f-47e6-aabf-2462b07508dc"),
					SmartProxyEnabled: to.Ptr(true),
				},
				CorsConfiguration: &armsecurityandcompliance.ServiceCorsConfigurationInfo{
					AllowCredentials: to.Ptr(false),
					Headers: []*string{
						to.Ptr("*")},
					MaxAge: to.Ptr[int64](1440),
					Methods: []*string{
						to.Ptr("DELETE"),
						to.Ptr("GET"),
						to.Ptr("OPTIONS"),
						to.Ptr("PATCH"),
						to.Ptr("POST"),
						to.Ptr("PUT")},
					Origins: []*string{
						to.Ptr("*")},
				},
				CosmosDbConfiguration: &armsecurityandcompliance.ServiceCosmosDbConfigurationInfo{
					KeyVaultKeyURI:  to.Ptr("https://my-vault.vault.azure.net/keys/my-key"),
					OfferThroughput: to.Ptr[int64](1000),
				},
				ExportConfiguration: &armsecurityandcompliance.ServiceExportConfigurationInfo{
					StorageAccountName: to.Ptr("existingStorageAccount"),
				},
				PrivateEndpointConnections: []*armsecurityandcompliance.PrivateEndpointConnection{},
				PublicNetworkAccess:        to.Ptr(armsecurityandcompliance.PublicNetworkAccessDisabled),
			},
		},
		&armsecurityandcompliance.PrivateLinkServicesForO365ManagementActivityAPIClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/ManagementAPIServiceCreate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/ManagementAPIServiceCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityandcompliance.PrivateLinkServicesForO365ManagementActivityAPIDescription{
			Name: to.Ptr("service1"),
			Type: to.Ptr("Microsoft.SecurityAndCompliance/privateLinkServicesForO365ManagementActivityAPI"),
			Etag: to.Ptr("etagvalue"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.SecurityAndCompliance/privateLinkServicesForO365ManagementActivityAPI/service1"),
			Identity: &armsecurityandcompliance.ServicesResourceIdentity{
				Type:        to.Ptr(armsecurityandcompliance.ManagedServiceIdentityTypeSystemAssigned),
				PrincipalID: to.Ptr("03fe6ae0-952c-4e4b-954b-cc0364dd252e"),
				TenantID:    to.Ptr("72f988bf-86f1-41af-91ab-2d8cd011db47"),
			},
			Kind:     to.Ptr(armsecurityandcompliance.KindFhirR4),
			Location: to.Ptr("West US 2"),
			SystemData: &armsecurityandcompliance.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-08T13:30:28.958Z"); return t }()),
				CreatedBy:          to.Ptr("sove"),
				CreatedByType:      to.Ptr(armsecurityandcompliance.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-08T13:30:28.958Z"); return t }()),
				LastModifiedBy:     to.Ptr("sove"),
				LastModifiedByType: to.Ptr(armsecurityandcompliance.CreatedByTypeUser),
			},
			Tags: map[string]*string{},
			Properties: &armsecurityandcompliance.ServicesProperties{
				AccessPolicies: []*armsecurityandcompliance.ServiceAccessPolicyEntry{
					{
						ObjectID: to.Ptr("c487e7d1-3210-41a3-8ccc-e9372b78da47"),
					},
					{
						ObjectID: to.Ptr("5b307da8-43d4-492b-8b66-b0294ade872f"),
					}},
				AuthenticationConfiguration: &armsecurityandcompliance.ServiceAuthenticationConfigurationInfo{
					Audience:          to.Ptr("https://azurehealthcareapis.com"),
					Authority:         to.Ptr("https://login.microsoftonline.com/abfde7b2-df0f-47e6-aabf-2462b07508dc"),
					SmartProxyEnabled: to.Ptr(true),
				},
				CorsConfiguration: &armsecurityandcompliance.ServiceCorsConfigurationInfo{
					AllowCredentials: to.Ptr(false),
					Headers: []*string{
						to.Ptr("*")},
					MaxAge: to.Ptr[int64](1440),
					Methods: []*string{
						to.Ptr("DELETE"),
						to.Ptr("GET"),
						to.Ptr("OPTIONS"),
						to.Ptr("PATCH"),
						to.Ptr("POST"),
						to.Ptr("PUT")},
					Origins: []*string{
						to.Ptr("*")},
				},
				CosmosDbConfiguration: &armsecurityandcompliance.ServiceCosmosDbConfigurationInfo{
					KeyVaultKeyURI:  to.Ptr("https://my-vault.vault.azure.net/keys/my-key"),
					OfferThroughput: to.Ptr[int64](1000),
				},
				ExportConfiguration: &armsecurityandcompliance.ServiceExportConfigurationInfo{
					StorageAccountName: to.Ptr("existingStorageAccount"),
				},
				PrivateEndpointConnections: []*armsecurityandcompliance.PrivateEndpointConnection{},
				ProvisioningState:          to.Ptr(armsecurityandcompliance.ProvisioningStateSucceeded),
				PublicNetworkAccess:        to.Ptr(armsecurityandcompliance.PublicNetworkAccessDisabled),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateLinkServicesForO365ManagementActivityAPIDescription) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateLinkServicesForO365ManagementActivityAPIDescription)
			t.Fatalf("Mock response is not equal to example response for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/ManagementAPIServiceCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/ManagementAPIServiceCreateMinimum.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or Update a service with minimum parameters"},
	})
	client = armsecurityandcompliance.NewPrivateLinkServicesForO365ManagementActivityAPIClient("subid", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"service2",
		armsecurityandcompliance.PrivateLinkServicesForO365ManagementActivityAPIDescription{
			Kind:     to.Ptr(armsecurityandcompliance.KindFhirR4),
			Location: to.Ptr("westus2"),
			Tags:     map[string]*string{},
			Properties: &armsecurityandcompliance.ServicesProperties{
				AccessPolicies: []*armsecurityandcompliance.ServiceAccessPolicyEntry{
					{
						ObjectID: to.Ptr("c487e7d1-3210-41a3-8ccc-e9372b78da47"),
					}},
			},
		},
		&armsecurityandcompliance.PrivateLinkServicesForO365ManagementActivityAPIClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/ManagementAPIServiceCreateMinimum.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/ManagementAPIServiceCreateMinimum.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityandcompliance.PrivateLinkServicesForO365ManagementActivityAPIDescription{
			Name:     to.Ptr("service2"),
			Type:     to.Ptr("Microsoft.SecurityAndCompliance/privateLinkServicesForO365ManagementActivityAPI"),
			Etag:     to.Ptr("etagvalue"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.SecurityAndCompliance/privateLinkServicesForO365ManagementActivityAPI/service2"),
			Kind:     to.Ptr(armsecurityandcompliance.KindFhirR4),
			Location: to.Ptr("westus2"),
			SystemData: &armsecurityandcompliance.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-08T13:30:28.958Z"); return t }()),
				CreatedBy:          to.Ptr("sove"),
				CreatedByType:      to.Ptr(armsecurityandcompliance.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-08T13:30:28.958Z"); return t }()),
				LastModifiedBy:     to.Ptr("sove"),
				LastModifiedByType: to.Ptr(armsecurityandcompliance.CreatedByTypeUser),
			},
			Tags: map[string]*string{},
			Properties: &armsecurityandcompliance.ServicesProperties{
				AccessPolicies: []*armsecurityandcompliance.ServiceAccessPolicyEntry{
					{
						ObjectID: to.Ptr("c487e7d1-3210-41a3-8ccc-e9372b78da47"),
					}},
				AuthenticationConfiguration: &armsecurityandcompliance.ServiceAuthenticationConfigurationInfo{
					Audience:          to.Ptr("https://azurehealthcareapis.com"),
					Authority:         to.Ptr("https://login.microsoftonline.com/abfde7b2-df0f-47e6-aabf-2462b07508dc"),
					SmartProxyEnabled: to.Ptr(false),
				},
				CorsConfiguration: &armsecurityandcompliance.ServiceCorsConfigurationInfo{
					AllowCredentials: to.Ptr(false),
					Headers:          []*string{},
					Methods:          []*string{},
					Origins:          []*string{},
				},
				CosmosDbConfiguration: &armsecurityandcompliance.ServiceCosmosDbConfigurationInfo{
					OfferThroughput: to.Ptr[int64](1000),
				},
				PrivateEndpointConnections: []*armsecurityandcompliance.PrivateEndpointConnection{},
				ProvisioningState:          to.Ptr(armsecurityandcompliance.ProvisioningStateSucceeded),
				PublicNetworkAccess:        to.Ptr(armsecurityandcompliance.PublicNetworkAccessDisabled),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateLinkServicesForO365ManagementActivityAPIDescription) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateLinkServicesForO365ManagementActivityAPIDescription)
			t.Fatalf("Mock response is not equal to example response for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/ManagementAPIServiceCreateMinimum.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateLinkServicesForO365ManagementActivityAPI_Update(t *testing.T) {
	// From example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/ManagementAPIServicePatch.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Patch service"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityandcompliance.NewPrivateLinkServicesForO365ManagementActivityAPIClient("subid", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"rg1",
		"service1",
		armsecurityandcompliance.ServicesPatchDescription{
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
		},
		&armsecurityandcompliance.PrivateLinkServicesForO365ManagementActivityAPIClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/ManagementAPIServicePatch.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/ManagementAPIServicePatch.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityandcompliance.PrivateLinkServicesForO365ManagementActivityAPIDescription{
			Name:     to.Ptr("service1"),
			Type:     to.Ptr("Microsoft.SecurityAndCompliance/privateLinkServicesForO365ManagementActivityAPI"),
			Etag:     to.Ptr("etagvalue"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.SecurityAndCompliance/privateLinkServicesForO365ManagementActivityAPI/service1"),
			Kind:     to.Ptr(armsecurityandcompliance.KindFhirR4),
			Location: to.Ptr("West US"),
			SystemData: &armsecurityandcompliance.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-08T13:30:28.958Z"); return t }()),
				CreatedBy:          to.Ptr("sove"),
				CreatedByType:      to.Ptr(armsecurityandcompliance.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-08T13:30:28.958Z"); return t }()),
				LastModifiedBy:     to.Ptr("sove"),
				LastModifiedByType: to.Ptr(armsecurityandcompliance.CreatedByTypeUser),
			},
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
			Properties: &armsecurityandcompliance.ServicesProperties{
				AccessPolicies: []*armsecurityandcompliance.ServiceAccessPolicyEntry{
					{
						ObjectID: to.Ptr("c487e7d1-3210-41a3-8ccc-e9372b78da47"),
					},
					{
						ObjectID: to.Ptr("5b307da8-43d4-492b-8b66-b0294ade872f"),
					}},
				AuthenticationConfiguration: &armsecurityandcompliance.ServiceAuthenticationConfigurationInfo{
					Audience:          to.Ptr("https://azurehealthcareapis.com"),
					Authority:         to.Ptr("https://login.microsoftonline.com/abfde7b2-df0f-47e6-aabf-2462b07508dc"),
					SmartProxyEnabled: to.Ptr(true),
				},
				CorsConfiguration: &armsecurityandcompliance.ServiceCorsConfigurationInfo{
					AllowCredentials: to.Ptr(false),
					Headers: []*string{
						to.Ptr("*")},
					MaxAge: to.Ptr[int64](1440),
					Methods: []*string{
						to.Ptr("DELETE"),
						to.Ptr("GET"),
						to.Ptr("OPTIONS"),
						to.Ptr("PATCH"),
						to.Ptr("POST"),
						to.Ptr("PUT")},
					Origins: []*string{
						to.Ptr("*")},
				},
				CosmosDbConfiguration: &armsecurityandcompliance.ServiceCosmosDbConfigurationInfo{
					KeyVaultKeyURI:  to.Ptr("https://my-vault.vault.azure.net/keys/my-key"),
					OfferThroughput: to.Ptr[int64](1000),
				},
				PrivateEndpointConnections: []*armsecurityandcompliance.PrivateEndpointConnection{},
				ProvisioningState:          to.Ptr(armsecurityandcompliance.ProvisioningStateSucceeded),
				PublicNetworkAccess:        to.Ptr(armsecurityandcompliance.PublicNetworkAccessDisabled),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateLinkServicesForO365ManagementActivityAPIDescription) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateLinkServicesForO365ManagementActivityAPIDescription)
			t.Fatalf("Mock response is not equal to example response for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/ManagementAPIServicePatch.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateLinkServicesForO365ManagementActivityAPI_Delete(t *testing.T) {
	// From example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/ManagementAPIServiceDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete service"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityandcompliance.NewPrivateLinkServicesForO365ManagementActivityAPIClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"service1",
		&armsecurityandcompliance.PrivateLinkServicesForO365ManagementActivityAPIClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/ManagementAPIServiceDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/ManagementAPIServiceDelete.json: %v", err)
	}
}

func TestPrivateLinkServicesForO365ManagementActivityAPI_List(t *testing.T) {
	// From example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/ManagementAPIServiceList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all services in subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityandcompliance.NewPrivateLinkServicesForO365ManagementActivityAPIClient("subid", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/ManagementAPIServiceList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsecurityandcompliance.PrivateLinkServicesForO365ManagementActivityAPIDescriptionListResult{
			Value: []*armsecurityandcompliance.PrivateLinkServicesForO365ManagementActivityAPIDescription{
				{
					Name:     to.Ptr("service1"),
					Type:     to.Ptr("Microsoft.SecurityAndCompliance/privateLinkServicesForO365ManagementActivityAPI"),
					Etag:     to.Ptr("etag"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.SecurityAndCompliance/privateLinkServicesForO365ManagementActivityAPI/service1"),
					Kind:     to.Ptr(armsecurityandcompliance.KindFhirR4),
					Location: to.Ptr("West US"),
					Tags:     map[string]*string{},
					Properties: &armsecurityandcompliance.ServicesProperties{
						AccessPolicies: []*armsecurityandcompliance.ServiceAccessPolicyEntry{
							{
								ObjectID: to.Ptr("c487e7d1-3210-41a3-8ccc-e9372b78da47"),
							},
							{
								ObjectID: to.Ptr("5b307da8-43d4-492b-8b66-b0294ade872f"),
							}},
						AuthenticationConfiguration: &armsecurityandcompliance.ServiceAuthenticationConfigurationInfo{
							Audience:          to.Ptr("https://azurehealthcareapis.com"),
							Authority:         to.Ptr("https://login.microsoftonline.com/abfde7b2-df0f-47e6-aabf-2462b07508dc"),
							SmartProxyEnabled: to.Ptr(true),
						},
						CorsConfiguration: &armsecurityandcompliance.ServiceCorsConfigurationInfo{
							AllowCredentials: to.Ptr(false),
							Headers: []*string{
								to.Ptr("*")},
							MaxAge: to.Ptr[int64](1440),
							Methods: []*string{
								to.Ptr("DELETE"),
								to.Ptr("GET"),
								to.Ptr("OPTIONS"),
								to.Ptr("PATCH"),
								to.Ptr("POST"),
								to.Ptr("PUT")},
							Origins: []*string{
								to.Ptr("*")},
						},
						CosmosDbConfiguration: &armsecurityandcompliance.ServiceCosmosDbConfigurationInfo{
							KeyVaultKeyURI:  to.Ptr("https://my-vault.vault.azure.net/keys/my-key"),
							OfferThroughput: to.Ptr[int64](1000),
						},
						PrivateEndpointConnections: []*armsecurityandcompliance.PrivateEndpointConnection{},
						ProvisioningState:          to.Ptr(armsecurityandcompliance.ProvisioningStateSucceeded),
						PublicNetworkAccess:        to.Ptr(armsecurityandcompliance.PublicNetworkAccessDisabled),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PrivateLinkServicesForO365ManagementActivityAPIDescriptionListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PrivateLinkServicesForO365ManagementActivityAPIDescriptionListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/ManagementAPIServiceList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateLinkServicesForO365ManagementActivityAPI_ListByResourceGroup(t *testing.T) {
	// From example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/ManagementAPIServiceListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all services in resource group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityandcompliance.NewPrivateLinkServicesForO365ManagementActivityAPIClient("subid", cred, &options)
	pager := client.ListByResourceGroup("rgname",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/ManagementAPIServiceListByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsecurityandcompliance.PrivateLinkServicesForO365ManagementActivityAPIDescriptionListResult{
			Value: []*armsecurityandcompliance.PrivateLinkServicesForO365ManagementActivityAPIDescription{
				{
					Name:     to.Ptr("service1"),
					Type:     to.Ptr("Microsoft.SecurityAndCompliance/privateLinkServicesForO365ManagementActivityAPI"),
					Etag:     to.Ptr("etagvalue"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.SecurityAndCompliance/privateLinkServicesForO365ManagementActivityAPI/dddb8dcb-effb-4290-bb47-ce1e8440c729"),
					Kind:     to.Ptr(armsecurityandcompliance.KindFhirR4),
					Location: to.Ptr("westus"),
					Tags:     map[string]*string{},
					Properties: &armsecurityandcompliance.ServicesProperties{
						AccessPolicies: []*armsecurityandcompliance.ServiceAccessPolicyEntry{
							{
								ObjectID: to.Ptr("c487e7d1-3210-41a3-8ccc-e9372b78da47"),
							},
							{
								ObjectID: to.Ptr("5b307da8-43d4-492b-8b66-b0294ade872f"),
							}},
						AuthenticationConfiguration: &armsecurityandcompliance.ServiceAuthenticationConfigurationInfo{
							Audience:          to.Ptr("https://azurehealthcareapis.com"),
							Authority:         to.Ptr("https://login.microsoftonline.com/abfde7b2-df0f-47e6-aabf-2462b07508dc"),
							SmartProxyEnabled: to.Ptr(true),
						},
						CorsConfiguration: &armsecurityandcompliance.ServiceCorsConfigurationInfo{
							AllowCredentials: to.Ptr(false),
							Headers: []*string{
								to.Ptr("*")},
							MaxAge: to.Ptr[int64](1440),
							Methods: []*string{
								to.Ptr("DELETE"),
								to.Ptr("GET"),
								to.Ptr("OPTIONS"),
								to.Ptr("PATCH"),
								to.Ptr("POST"),
								to.Ptr("PUT")},
							Origins: []*string{
								to.Ptr("*")},
						},
						CosmosDbConfiguration: &armsecurityandcompliance.ServiceCosmosDbConfigurationInfo{
							KeyVaultKeyURI:  to.Ptr("https://my-vault.vault.azure.net/keys/my-key"),
							OfferThroughput: to.Ptr[int64](1000),
						},
						PrivateEndpointConnections: []*armsecurityandcompliance.PrivateEndpointConnection{},
						ProvisioningState:          to.Ptr(armsecurityandcompliance.ProvisioningStateSucceeded),
						PublicNetworkAccess:        to.Ptr(armsecurityandcompliance.PublicNetworkAccessDisabled),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PrivateLinkServicesForO365ManagementActivityAPIDescriptionListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PrivateLinkServicesForO365ManagementActivityAPIDescriptionListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/ManagementAPIServiceListByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnectionsAdtAPI_ListByService(t *testing.T) {
	// From example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/ManagementAPIServiceListPrivateEndpointConnections.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateEndpointConnection_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityandcompliance.NewPrivateEndpointConnectionsAdtAPIClient("subid", cred, &options)
	pager := client.ListByService("rgname",
		"service1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/ManagementAPIServiceListPrivateEndpointConnections.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsecurityandcompliance.PrivateEndpointConnectionListResult{
			Value: []*armsecurityandcompliance.PrivateEndpointConnection{
				{
					Name: to.Ptr("myConnection"),
					Type: to.Ptr("Microsoft.SecurityAndCompliance/privateLinkServicesForO365ManagementActivityAPI/privateEndpointConnections"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.SecurityAndCompliance/privateLinkServicesForO365ManagementActivityAPI/service1/privateEndpointConnections/myConnection"),
					Properties: &armsecurityandcompliance.PrivateEndpointConnectionProperties{
						PrivateEndpoint: &armsecurityandcompliance.PrivateEndpoint{
							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/privateEndpoints/peexample01"),
						},
						PrivateLinkServiceConnectionState: &armsecurityandcompliance.PrivateLinkServiceConnectionState{
							Description:     to.Ptr("Auto-Approved"),
							ActionsRequired: to.Ptr("None"),
							Status:          to.Ptr(armsecurityandcompliance.PrivateEndpointServiceConnectionStatusApproved),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PrivateEndpointConnectionListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PrivateEndpointConnectionListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/ManagementAPIServiceListPrivateEndpointConnections.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnectionsAdtAPI_Get(t *testing.T) {
	// From example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/ManagementAPIServiceGetPrivateEndpointConnection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateEndpointConnection_GetConnection"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityandcompliance.NewPrivateEndpointConnectionsAdtAPIClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rgname",
		"service1",
		"myConnection",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/ManagementAPIServiceGetPrivateEndpointConnection.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityandcompliance.PrivateEndpointConnection{
			Name: to.Ptr("myConnection"),
			Type: to.Ptr("Microsoft.SecurityAndCompliance/privateLinkServicesForO365ManagementActivityAPI/privateEndpointConnections"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.SecurityAndCompliance/privateLinkServicesForO365ManagementActivityAPI/service1/privateEndpointConnections/myConnection"),
			Properties: &armsecurityandcompliance.PrivateEndpointConnectionProperties{
				PrivateEndpoint: &armsecurityandcompliance.PrivateEndpoint{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/privateEndpoints/peexample01"),
				},
				PrivateLinkServiceConnectionState: &armsecurityandcompliance.PrivateLinkServiceConnectionState{
					Description:     to.Ptr("Auto-Approved"),
					ActionsRequired: to.Ptr("None"),
					Status:          to.Ptr(armsecurityandcompliance.PrivateEndpointServiceConnectionStatusApproved),
				},
			},
			SystemData: &armsecurityandcompliance.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-08T13:30:28.958Z"); return t }()),
				CreatedBy:          to.Ptr("sove"),
				CreatedByType:      to.Ptr(armsecurityandcompliance.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-08T13:30:28.958Z"); return t }()),
				LastModifiedBy:     to.Ptr("sove"),
				LastModifiedByType: to.Ptr(armsecurityandcompliance.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateEndpointConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/ManagementAPIServiceGetPrivateEndpointConnection.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnectionsAdtAPI_CreateOrUpdate(t *testing.T) {
	// From example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/ManagementAPIServiceCreatePrivateEndpointConnection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateEndpointConnection_CreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityandcompliance.NewPrivateEndpointConnectionsAdtAPIClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rgname",
		"service1",
		"myConnection",
		armsecurityandcompliance.PrivateEndpointConnection{
			Properties: &armsecurityandcompliance.PrivateEndpointConnectionProperties{
				PrivateLinkServiceConnectionState: &armsecurityandcompliance.PrivateLinkServiceConnectionState{
					Description: to.Ptr("Auto-Approved"),
					Status:      to.Ptr(armsecurityandcompliance.PrivateEndpointServiceConnectionStatusApproved),
				},
			},
		},
		&armsecurityandcompliance.PrivateEndpointConnectionsAdtAPIClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/ManagementAPIServiceCreatePrivateEndpointConnection.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/ManagementAPIServiceCreatePrivateEndpointConnection.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityandcompliance.PrivateEndpointConnection{
			Name: to.Ptr("myConnection"),
			Type: to.Ptr("Microsoft.SecurityAndCompliance/privateLinkServicesForO365ManagementActivityAPI/privateEndpointConnections"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.SecurityAndCompliance/privateLinkServicesForO365ManagementActivityAPI/service1/privateEndpointConnections/myConnection"),
			Properties: &armsecurityandcompliance.PrivateEndpointConnectionProperties{
				PrivateEndpoint: &armsecurityandcompliance.PrivateEndpoint{
					ID: to.Ptr("/subscriptions/c80fb759-c965-4c6a-9110-9b2b2d038882/resourceGroups/myResourceGroup/providers/Microsoft.Network/privateEndpoints/peexample01"),
				},
				PrivateLinkServiceConnectionState: &armsecurityandcompliance.PrivateLinkServiceConnectionState{
					Description:     to.Ptr("Auto-Approved"),
					ActionsRequired: to.Ptr("None"),
					Status:          to.Ptr(armsecurityandcompliance.PrivateEndpointServiceConnectionStatusApproved),
				},
				ProvisioningState: to.Ptr(armsecurityandcompliance.PrivateEndpointConnectionProvisioningStateSucceeded),
			},
			SystemData: &armsecurityandcompliance.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-08T13:30:28.958Z"); return t }()),
				CreatedBy:          to.Ptr("sove"),
				CreatedByType:      to.Ptr(armsecurityandcompliance.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-08T13:30:28.958Z"); return t }()),
				LastModifiedBy:     to.Ptr("sove"),
				LastModifiedByType: to.Ptr(armsecurityandcompliance.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateEndpointConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/ManagementAPIServiceCreatePrivateEndpointConnection.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnectionsAdtAPI_Delete(t *testing.T) {
	// From example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/ManagementAPIServiceDeletePrivateEndpointConnection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateEndpointConnections_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityandcompliance.NewPrivateEndpointConnectionsAdtAPIClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"rgname",
		"service1",
		"myConnection",
		&armsecurityandcompliance.PrivateEndpointConnectionsAdtAPIClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/ManagementAPIServiceDeletePrivateEndpointConnection.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/ManagementAPIServiceDeletePrivateEndpointConnection.json: %v", err)
	}
}

func TestPrivateLinkResourcesAdtAPI_ListByService(t *testing.T) {
	// From example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/ManagementAPIPrivateLinkResourcesListByService.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateLinkResources_ListGroupIds"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityandcompliance.NewPrivateLinkResourcesAdtAPIClient("subid", cred, &options)
	res, err := client.ListByService(ctx,
		"rgname",
		"service1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/ManagementAPIPrivateLinkResourcesListByService.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityandcompliance.PrivateLinkResourceListResult{
			Value: []*armsecurityandcompliance.PrivateLinkResource{
				{
					Name: to.Ptr("fhir"),
					Type: to.Ptr("Microsoft.SecurityAndCompliance/privateLinkServicesForO365ManagementActivityAPI/privateLinkResources"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.SecurityAndCompliance/privateLinkServicesForO365ManagementActivityAPI/service1/privateLinkResources/fhir"),
					Properties: &armsecurityandcompliance.PrivateLinkResourceProperties{
						GroupID: to.Ptr("fhir"),
						RequiredMembers: []*string{
							to.Ptr("fhir")},
						RequiredZoneNames: []*string{
							to.Ptr("privatelink.compliance.microsoft.com")},
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateLinkResourceListResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateLinkResourceListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/ManagementAPIPrivateLinkResourcesListByService.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateLinkResourcesAdtAPI_Get(t *testing.T) {
	// From example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/ManagementAPIPrivateLinkResourceGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateLinkResources_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityandcompliance.NewPrivateLinkResourcesAdtAPIClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rgname",
		"service1",
		"fhir",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/ManagementAPIPrivateLinkResourceGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityandcompliance.PrivateLinkResource{
			Name: to.Ptr("fhir"),
			Type: to.Ptr("Microsoft.SecurityAndCompliance/privateLinkServicesForO365ManagementActivityAPI/privateLinkResources"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.SecurityAndCompliance/privateLinkServicesForO365ManagementActivityAPI/service1/privateLinkResources/fhir"),
			Properties: &armsecurityandcompliance.PrivateLinkResourceProperties{
				GroupID: to.Ptr("fhir"),
				RequiredMembers: []*string{
					to.Ptr("fhir")},
				RequiredZoneNames: []*string{
					to.Ptr("privatelink.security.microsoft.com")},
			},
			SystemData: &armsecurityandcompliance.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-08T13:30:28.958Z"); return t }()),
				CreatedBy:          to.Ptr("sove"),
				CreatedByType:      to.Ptr(armsecurityandcompliance.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-08T13:30:28.958Z"); return t }()),
				LastModifiedBy:     to.Ptr("sove"),
				LastModifiedByType: to.Ptr(armsecurityandcompliance.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateLinkResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateLinkResource)
			t.Fatalf("Mock response is not equal to example response for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/ManagementAPIPrivateLinkResourceGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateLinkServicesForSCCPowershell_Get(t *testing.T) {
	// From example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/SCCPowershellServiceGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get metadata"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityandcompliance.NewPrivateLinkServicesForSCCPowershellClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"service1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/SCCPowershellServiceGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityandcompliance.PrivateLinkServicesForSCCPowershellDescription{
			Name:     to.Ptr("service1"),
			Type:     to.Ptr("Microsoft.SecurityAndCompliance/privateLinkServicesForSCCPowershell"),
			Etag:     to.Ptr("etagvalue"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.SecurityAndCompliance/privateLinkServicesForSCCPowershell/service1"),
			Kind:     to.Ptr(armsecurityandcompliance.KindFhirR4),
			Location: to.Ptr("West US"),
			SystemData: &armsecurityandcompliance.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-08T13:30:28.958Z"); return t }()),
				CreatedBy:          to.Ptr("sove"),
				CreatedByType:      to.Ptr(armsecurityandcompliance.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-08T13:30:28.958Z"); return t }()),
				LastModifiedBy:     to.Ptr("sove"),
				LastModifiedByType: to.Ptr(armsecurityandcompliance.CreatedByTypeUser),
			},
			Tags: map[string]*string{},
			Properties: &armsecurityandcompliance.ServicesProperties{
				AccessPolicies: []*armsecurityandcompliance.ServiceAccessPolicyEntry{
					{
						ObjectID: to.Ptr("c487e7d1-3210-41a3-8ccc-e9372b78da47"),
					},
					{
						ObjectID: to.Ptr("5b307da8-43d4-492b-8b66-b0294ade872f"),
					}},
				AuthenticationConfiguration: &armsecurityandcompliance.ServiceAuthenticationConfigurationInfo{
					Audience:          to.Ptr("https://azurehealthcareapis.com"),
					Authority:         to.Ptr("https://login.microsoftonline.com/abfde7b2-df0f-47e6-aabf-2462b07508dc"),
					SmartProxyEnabled: to.Ptr(true),
				},
				CorsConfiguration: &armsecurityandcompliance.ServiceCorsConfigurationInfo{
					AllowCredentials: to.Ptr(false),
					Headers: []*string{
						to.Ptr("*")},
					MaxAge: to.Ptr[int64](1440),
					Methods: []*string{
						to.Ptr("DELETE"),
						to.Ptr("GET"),
						to.Ptr("OPTIONS"),
						to.Ptr("PATCH"),
						to.Ptr("POST"),
						to.Ptr("PUT")},
					Origins: []*string{
						to.Ptr("*")},
				},
				CosmosDbConfiguration: &armsecurityandcompliance.ServiceCosmosDbConfigurationInfo{
					KeyVaultKeyURI:  to.Ptr("https://my-vault.vault.azure.net/keys/my-key"),
					OfferThroughput: to.Ptr[int64](1000),
				},
				PrivateEndpointConnections: []*armsecurityandcompliance.PrivateEndpointConnection{},
				ProvisioningState:          to.Ptr(armsecurityandcompliance.ProvisioningStateSucceeded),
				PublicNetworkAccess:        to.Ptr(armsecurityandcompliance.PublicNetworkAccessDisabled),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateLinkServicesForSCCPowershellDescription) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateLinkServicesForSCCPowershellDescription)
			t.Fatalf("Mock response is not equal to example response for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/SCCPowershellServiceGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateLinkServicesForSCCPowershell_CreateOrUpdate(t *testing.T) {
	// From example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/SCCPowershellServiceCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or Update a service with all parameters"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityandcompliance.NewPrivateLinkServicesForSCCPowershellClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"service1",
		armsecurityandcompliance.PrivateLinkServicesForSCCPowershellDescription{
			Identity: &armsecurityandcompliance.ServicesResourceIdentity{
				Type: to.Ptr(armsecurityandcompliance.ManagedServiceIdentityTypeSystemAssigned),
			},
			Kind:     to.Ptr(armsecurityandcompliance.KindFhirR4),
			Location: to.Ptr("westus2"),
			Tags:     map[string]*string{},
			Properties: &armsecurityandcompliance.ServicesProperties{
				AccessPolicies: []*armsecurityandcompliance.ServiceAccessPolicyEntry{
					{
						ObjectID: to.Ptr("c487e7d1-3210-41a3-8ccc-e9372b78da47"),
					},
					{
						ObjectID: to.Ptr("5b307da8-43d4-492b-8b66-b0294ade872f"),
					}},
				AuthenticationConfiguration: &armsecurityandcompliance.ServiceAuthenticationConfigurationInfo{
					Audience:          to.Ptr("https://azurehealthcareapis.com"),
					Authority:         to.Ptr("https://login.microsoftonline.com/abfde7b2-df0f-47e6-aabf-2462b07508dc"),
					SmartProxyEnabled: to.Ptr(true),
				},
				CorsConfiguration: &armsecurityandcompliance.ServiceCorsConfigurationInfo{
					AllowCredentials: to.Ptr(false),
					Headers: []*string{
						to.Ptr("*")},
					MaxAge: to.Ptr[int64](1440),
					Methods: []*string{
						to.Ptr("DELETE"),
						to.Ptr("GET"),
						to.Ptr("OPTIONS"),
						to.Ptr("PATCH"),
						to.Ptr("POST"),
						to.Ptr("PUT")},
					Origins: []*string{
						to.Ptr("*")},
				},
				CosmosDbConfiguration: &armsecurityandcompliance.ServiceCosmosDbConfigurationInfo{
					KeyVaultKeyURI:  to.Ptr("https://my-vault.vault.azure.net/keys/my-key"),
					OfferThroughput: to.Ptr[int64](1000),
				},
				ExportConfiguration: &armsecurityandcompliance.ServiceExportConfigurationInfo{
					StorageAccountName: to.Ptr("existingStorageAccount"),
				},
				PrivateEndpointConnections: []*armsecurityandcompliance.PrivateEndpointConnection{},
				PublicNetworkAccess:        to.Ptr(armsecurityandcompliance.PublicNetworkAccessDisabled),
			},
		},
		&armsecurityandcompliance.PrivateLinkServicesForSCCPowershellClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/SCCPowershellServiceCreate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/SCCPowershellServiceCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityandcompliance.PrivateLinkServicesForSCCPowershellDescription{
			Name: to.Ptr("service1"),
			Type: to.Ptr("Microsoft.SecurityAndCompliance/privateLinkServicesForSCCPowershell"),
			Etag: to.Ptr("etagvalue"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.SecurityAndCompliance/privateLinkServicesForSCCPowershell/service1"),
			Identity: &armsecurityandcompliance.ServicesResourceIdentity{
				Type:        to.Ptr(armsecurityandcompliance.ManagedServiceIdentityTypeSystemAssigned),
				PrincipalID: to.Ptr("03fe6ae0-952c-4e4b-954b-cc0364dd252e"),
				TenantID:    to.Ptr("72f988bf-86f1-41af-91ab-2d8cd011db47"),
			},
			Kind:     to.Ptr(armsecurityandcompliance.KindFhirR4),
			Location: to.Ptr("West US 2"),
			SystemData: &armsecurityandcompliance.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-08T13:30:28.958Z"); return t }()),
				CreatedBy:          to.Ptr("sove"),
				CreatedByType:      to.Ptr(armsecurityandcompliance.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-08T13:30:28.958Z"); return t }()),
				LastModifiedBy:     to.Ptr("sove"),
				LastModifiedByType: to.Ptr(armsecurityandcompliance.CreatedByTypeUser),
			},
			Tags: map[string]*string{},
			Properties: &armsecurityandcompliance.ServicesProperties{
				AccessPolicies: []*armsecurityandcompliance.ServiceAccessPolicyEntry{
					{
						ObjectID: to.Ptr("c487e7d1-3210-41a3-8ccc-e9372b78da47"),
					},
					{
						ObjectID: to.Ptr("5b307da8-43d4-492b-8b66-b0294ade872f"),
					}},
				AuthenticationConfiguration: &armsecurityandcompliance.ServiceAuthenticationConfigurationInfo{
					Audience:          to.Ptr("https://azurehealthcareapis.com"),
					Authority:         to.Ptr("https://login.microsoftonline.com/abfde7b2-df0f-47e6-aabf-2462b07508dc"),
					SmartProxyEnabled: to.Ptr(true),
				},
				CorsConfiguration: &armsecurityandcompliance.ServiceCorsConfigurationInfo{
					AllowCredentials: to.Ptr(false),
					Headers: []*string{
						to.Ptr("*")},
					MaxAge: to.Ptr[int64](1440),
					Methods: []*string{
						to.Ptr("DELETE"),
						to.Ptr("GET"),
						to.Ptr("OPTIONS"),
						to.Ptr("PATCH"),
						to.Ptr("POST"),
						to.Ptr("PUT")},
					Origins: []*string{
						to.Ptr("*")},
				},
				CosmosDbConfiguration: &armsecurityandcompliance.ServiceCosmosDbConfigurationInfo{
					KeyVaultKeyURI:  to.Ptr("https://my-vault.vault.azure.net/keys/my-key"),
					OfferThroughput: to.Ptr[int64](1000),
				},
				ExportConfiguration: &armsecurityandcompliance.ServiceExportConfigurationInfo{
					StorageAccountName: to.Ptr("existingStorageAccount"),
				},
				PrivateEndpointConnections: []*armsecurityandcompliance.PrivateEndpointConnection{},
				ProvisioningState:          to.Ptr(armsecurityandcompliance.ProvisioningStateSucceeded),
				PublicNetworkAccess:        to.Ptr(armsecurityandcompliance.PublicNetworkAccessDisabled),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateLinkServicesForSCCPowershellDescription) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateLinkServicesForSCCPowershellDescription)
			t.Fatalf("Mock response is not equal to example response for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/SCCPowershellServiceCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/SCCPowershellServiceCreateMinimum.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or Update a service with minimum parameters"},
	})
	client = armsecurityandcompliance.NewPrivateLinkServicesForSCCPowershellClient("subid", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"service2",
		armsecurityandcompliance.PrivateLinkServicesForSCCPowershellDescription{
			Kind:     to.Ptr(armsecurityandcompliance.KindFhirR4),
			Location: to.Ptr("westus2"),
			Tags:     map[string]*string{},
			Properties: &armsecurityandcompliance.ServicesProperties{
				AccessPolicies: []*armsecurityandcompliance.ServiceAccessPolicyEntry{
					{
						ObjectID: to.Ptr("c487e7d1-3210-41a3-8ccc-e9372b78da47"),
					}},
			},
		},
		&armsecurityandcompliance.PrivateLinkServicesForSCCPowershellClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/SCCPowershellServiceCreateMinimum.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/SCCPowershellServiceCreateMinimum.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityandcompliance.PrivateLinkServicesForSCCPowershellDescription{
			Name:     to.Ptr("service2"),
			Type:     to.Ptr("Microsoft.SecurityAndCompliance/privateLinkServicesForSCCPowershell"),
			Etag:     to.Ptr("etagvalue"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.SecurityAndCompliance/privateLinkServicesForSCCPowershell/service2"),
			Kind:     to.Ptr(armsecurityandcompliance.KindFhirR4),
			Location: to.Ptr("westus2"),
			SystemData: &armsecurityandcompliance.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-08T13:30:28.958Z"); return t }()),
				CreatedBy:          to.Ptr("sove"),
				CreatedByType:      to.Ptr(armsecurityandcompliance.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-08T13:30:28.958Z"); return t }()),
				LastModifiedBy:     to.Ptr("sove"),
				LastModifiedByType: to.Ptr(armsecurityandcompliance.CreatedByTypeUser),
			},
			Tags: map[string]*string{},
			Properties: &armsecurityandcompliance.ServicesProperties{
				AccessPolicies: []*armsecurityandcompliance.ServiceAccessPolicyEntry{
					{
						ObjectID: to.Ptr("c487e7d1-3210-41a3-8ccc-e9372b78da47"),
					}},
				AuthenticationConfiguration: &armsecurityandcompliance.ServiceAuthenticationConfigurationInfo{
					Audience:          to.Ptr("https://azurehealthcareapis.com"),
					Authority:         to.Ptr("https://login.microsoftonline.com/abfde7b2-df0f-47e6-aabf-2462b07508dc"),
					SmartProxyEnabled: to.Ptr(false),
				},
				CorsConfiguration: &armsecurityandcompliance.ServiceCorsConfigurationInfo{
					AllowCredentials: to.Ptr(false),
					Headers:          []*string{},
					Methods:          []*string{},
					Origins:          []*string{},
				},
				CosmosDbConfiguration: &armsecurityandcompliance.ServiceCosmosDbConfigurationInfo{
					OfferThroughput: to.Ptr[int64](1000),
				},
				PrivateEndpointConnections: []*armsecurityandcompliance.PrivateEndpointConnection{},
				ProvisioningState:          to.Ptr(armsecurityandcompliance.ProvisioningStateSucceeded),
				PublicNetworkAccess:        to.Ptr(armsecurityandcompliance.PublicNetworkAccessDisabled),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateLinkServicesForSCCPowershellDescription) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateLinkServicesForSCCPowershellDescription)
			t.Fatalf("Mock response is not equal to example response for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/SCCPowershellServiceCreateMinimum.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateLinkServicesForSCCPowershell_Update(t *testing.T) {
	// From example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/SCCPowershellServicePatch.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Patch service"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityandcompliance.NewPrivateLinkServicesForSCCPowershellClient("subid", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"rg1",
		"service1",
		armsecurityandcompliance.ServicesPatchDescription{
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
		},
		&armsecurityandcompliance.PrivateLinkServicesForSCCPowershellClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/SCCPowershellServicePatch.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/SCCPowershellServicePatch.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityandcompliance.PrivateLinkServicesForSCCPowershellDescription{
			Name:     to.Ptr("service1"),
			Type:     to.Ptr("Microsoft.SecurityAndCompliance/privateLinkServicesForSCCPowershell"),
			Etag:     to.Ptr("etagvalue"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.SecurityAndCompliance/privateLinkServicesForSCCPowershell/service1"),
			Kind:     to.Ptr(armsecurityandcompliance.KindFhirR4),
			Location: to.Ptr("West US"),
			SystemData: &armsecurityandcompliance.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-08T13:30:28.958Z"); return t }()),
				CreatedBy:          to.Ptr("sove"),
				CreatedByType:      to.Ptr(armsecurityandcompliance.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-08T13:30:28.958Z"); return t }()),
				LastModifiedBy:     to.Ptr("sove"),
				LastModifiedByType: to.Ptr(armsecurityandcompliance.CreatedByTypeUser),
			},
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
			Properties: &armsecurityandcompliance.ServicesProperties{
				AccessPolicies: []*armsecurityandcompliance.ServiceAccessPolicyEntry{
					{
						ObjectID: to.Ptr("c487e7d1-3210-41a3-8ccc-e9372b78da47"),
					},
					{
						ObjectID: to.Ptr("5b307da8-43d4-492b-8b66-b0294ade872f"),
					}},
				AuthenticationConfiguration: &armsecurityandcompliance.ServiceAuthenticationConfigurationInfo{
					Audience:          to.Ptr("https://azurehealthcareapis.com"),
					Authority:         to.Ptr("https://login.microsoftonline.com/abfde7b2-df0f-47e6-aabf-2462b07508dc"),
					SmartProxyEnabled: to.Ptr(true),
				},
				CorsConfiguration: &armsecurityandcompliance.ServiceCorsConfigurationInfo{
					AllowCredentials: to.Ptr(false),
					Headers: []*string{
						to.Ptr("*")},
					MaxAge: to.Ptr[int64](1440),
					Methods: []*string{
						to.Ptr("DELETE"),
						to.Ptr("GET"),
						to.Ptr("OPTIONS"),
						to.Ptr("PATCH"),
						to.Ptr("POST"),
						to.Ptr("PUT")},
					Origins: []*string{
						to.Ptr("*")},
				},
				CosmosDbConfiguration: &armsecurityandcompliance.ServiceCosmosDbConfigurationInfo{
					KeyVaultKeyURI:  to.Ptr("https://my-vault.vault.azure.net/keys/my-key"),
					OfferThroughput: to.Ptr[int64](1000),
				},
				PrivateEndpointConnections: []*armsecurityandcompliance.PrivateEndpointConnection{},
				ProvisioningState:          to.Ptr(armsecurityandcompliance.ProvisioningStateSucceeded),
				PublicNetworkAccess:        to.Ptr(armsecurityandcompliance.PublicNetworkAccessDisabled),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateLinkServicesForSCCPowershellDescription) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateLinkServicesForSCCPowershellDescription)
			t.Fatalf("Mock response is not equal to example response for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/SCCPowershellServicePatch.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateLinkServicesForSCCPowershell_Delete(t *testing.T) {
	// From example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/SCCPowershellServiceDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete service"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityandcompliance.NewPrivateLinkServicesForSCCPowershellClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"service1",
		&armsecurityandcompliance.PrivateLinkServicesForSCCPowershellClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/SCCPowershellServiceDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/SCCPowershellServiceDelete.json: %v", err)
	}
}

func TestPrivateLinkServicesForSCCPowershell_List(t *testing.T) {
	// From example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/SCCPowershellServiceList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all services in subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityandcompliance.NewPrivateLinkServicesForSCCPowershellClient("subid", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/SCCPowershellServiceList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsecurityandcompliance.PrivateLinkServicesForSCCPowershellDescriptionListResult{
			Value: []*armsecurityandcompliance.PrivateLinkServicesForSCCPowershellDescription{
				{
					Name:     to.Ptr("service1"),
					Type:     to.Ptr("Microsoft.SecurityAndCompliance/privateLinkServicesForSCCPowershell"),
					Etag:     to.Ptr("etag"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.SecurityAndCompliance/privateLinkServicesForSCCPowershell/service1"),
					Kind:     to.Ptr(armsecurityandcompliance.KindFhirR4),
					Location: to.Ptr("West US"),
					Tags:     map[string]*string{},
					Properties: &armsecurityandcompliance.ServicesProperties{
						AccessPolicies: []*armsecurityandcompliance.ServiceAccessPolicyEntry{
							{
								ObjectID: to.Ptr("c487e7d1-3210-41a3-8ccc-e9372b78da47"),
							},
							{
								ObjectID: to.Ptr("5b307da8-43d4-492b-8b66-b0294ade872f"),
							}},
						AuthenticationConfiguration: &armsecurityandcompliance.ServiceAuthenticationConfigurationInfo{
							Audience:          to.Ptr("https://azurehealthcareapis.com"),
							Authority:         to.Ptr("https://login.microsoftonline.com/abfde7b2-df0f-47e6-aabf-2462b07508dc"),
							SmartProxyEnabled: to.Ptr(true),
						},
						CorsConfiguration: &armsecurityandcompliance.ServiceCorsConfigurationInfo{
							AllowCredentials: to.Ptr(false),
							Headers: []*string{
								to.Ptr("*")},
							MaxAge: to.Ptr[int64](1440),
							Methods: []*string{
								to.Ptr("DELETE"),
								to.Ptr("GET"),
								to.Ptr("OPTIONS"),
								to.Ptr("PATCH"),
								to.Ptr("POST"),
								to.Ptr("PUT")},
							Origins: []*string{
								to.Ptr("*")},
						},
						CosmosDbConfiguration: &armsecurityandcompliance.ServiceCosmosDbConfigurationInfo{
							KeyVaultKeyURI:  to.Ptr("https://my-vault.vault.azure.net/keys/my-key"),
							OfferThroughput: to.Ptr[int64](1000),
						},
						PrivateEndpointConnections: []*armsecurityandcompliance.PrivateEndpointConnection{},
						ProvisioningState:          to.Ptr(armsecurityandcompliance.ProvisioningStateSucceeded),
						PublicNetworkAccess:        to.Ptr(armsecurityandcompliance.PublicNetworkAccessDisabled),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PrivateLinkServicesForSCCPowershellDescriptionListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PrivateLinkServicesForSCCPowershellDescriptionListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/SCCPowershellServiceList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateLinkServicesForSCCPowershell_ListByResourceGroup(t *testing.T) {
	// From example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/SCCPowershellServiceListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all services in resource group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityandcompliance.NewPrivateLinkServicesForSCCPowershellClient("subid", cred, &options)
	pager := client.ListByResourceGroup("rgname",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/SCCPowershellServiceListByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsecurityandcompliance.PrivateLinkServicesForSCCPowershellDescriptionListResult{
			Value: []*armsecurityandcompliance.PrivateLinkServicesForSCCPowershellDescription{
				{
					Name:     to.Ptr("service1"),
					Type:     to.Ptr("Microsoft.SecurityAndCompliance/privateLinkServicesForSCCPowershell"),
					Etag:     to.Ptr("etagvalue"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.SecurityAndCompliance/privateLinkServicesForSCCPowershell/dddb8dcb-effb-4290-bb47-ce1e8440c729"),
					Kind:     to.Ptr(armsecurityandcompliance.KindFhirR4),
					Location: to.Ptr("westus"),
					Tags:     map[string]*string{},
					Properties: &armsecurityandcompliance.ServicesProperties{
						AccessPolicies: []*armsecurityandcompliance.ServiceAccessPolicyEntry{
							{
								ObjectID: to.Ptr("c487e7d1-3210-41a3-8ccc-e9372b78da47"),
							},
							{
								ObjectID: to.Ptr("5b307da8-43d4-492b-8b66-b0294ade872f"),
							}},
						AuthenticationConfiguration: &armsecurityandcompliance.ServiceAuthenticationConfigurationInfo{
							Audience:          to.Ptr("https://azurehealthcareapis.com"),
							Authority:         to.Ptr("https://login.microsoftonline.com/abfde7b2-df0f-47e6-aabf-2462b07508dc"),
							SmartProxyEnabled: to.Ptr(true),
						},
						CorsConfiguration: &armsecurityandcompliance.ServiceCorsConfigurationInfo{
							AllowCredentials: to.Ptr(false),
							Headers: []*string{
								to.Ptr("*")},
							MaxAge: to.Ptr[int64](1440),
							Methods: []*string{
								to.Ptr("DELETE"),
								to.Ptr("GET"),
								to.Ptr("OPTIONS"),
								to.Ptr("PATCH"),
								to.Ptr("POST"),
								to.Ptr("PUT")},
							Origins: []*string{
								to.Ptr("*")},
						},
						CosmosDbConfiguration: &armsecurityandcompliance.ServiceCosmosDbConfigurationInfo{
							KeyVaultKeyURI:  to.Ptr("https://my-vault.vault.azure.net/keys/my-key"),
							OfferThroughput: to.Ptr[int64](1000),
						},
						PrivateEndpointConnections: []*armsecurityandcompliance.PrivateEndpointConnection{},
						ProvisioningState:          to.Ptr(armsecurityandcompliance.ProvisioningStateSucceeded),
						PublicNetworkAccess:        to.Ptr(armsecurityandcompliance.PublicNetworkAccessDisabled),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PrivateLinkServicesForSCCPowershellDescriptionListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PrivateLinkServicesForSCCPowershellDescriptionListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/SCCPowershellServiceListByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnectionsForSCCPowershell_ListByService(t *testing.T) {
	// From example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/SCCPowershellServiceListPrivateEndpointConnections.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateEndpointConnection_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityandcompliance.NewPrivateEndpointConnectionsForSCCPowershellClient("subid", cred, &options)
	pager := client.ListByService("rgname",
		"service1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/SCCPowershellServiceListPrivateEndpointConnections.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsecurityandcompliance.PrivateEndpointConnectionListResult{
			Value: []*armsecurityandcompliance.PrivateEndpointConnection{
				{
					Name: to.Ptr("myConnection"),
					Type: to.Ptr("Microsoft.SecurityAndCompliance/privateLinkServicesForSCCPowershell/privateEndpointConnections"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.SecurityAndCompliance/privateLinkServicesForSCCPowershell/service1/privateEndpointConnections/myConnection"),
					Properties: &armsecurityandcompliance.PrivateEndpointConnectionProperties{
						PrivateEndpoint: &armsecurityandcompliance.PrivateEndpoint{
							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/privateEndpoints/peexample01"),
						},
						PrivateLinkServiceConnectionState: &armsecurityandcompliance.PrivateLinkServiceConnectionState{
							Description:     to.Ptr("Auto-Approved"),
							ActionsRequired: to.Ptr("None"),
							Status:          to.Ptr(armsecurityandcompliance.PrivateEndpointServiceConnectionStatusApproved),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PrivateEndpointConnectionListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PrivateEndpointConnectionListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/SCCPowershellServiceListPrivateEndpointConnections.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnectionsForSCCPowershell_Get(t *testing.T) {
	// From example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/SCCPowershellServiceGetPrivateEndpointConnection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateEndpointConnection_GetConnection"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityandcompliance.NewPrivateEndpointConnectionsForSCCPowershellClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rgname",
		"service1",
		"myConnection",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/SCCPowershellServiceGetPrivateEndpointConnection.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityandcompliance.PrivateEndpointConnection{
			Name: to.Ptr("myConnection"),
			Type: to.Ptr("Microsoft.SecurityAndCompliance/privateLinkServicesForSCCPowershell/privateEndpointConnections"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.SecurityAndCompliance/privateLinkServicesForSCCPowershell/service1/privateEndpointConnections/myConnection"),
			Properties: &armsecurityandcompliance.PrivateEndpointConnectionProperties{
				PrivateEndpoint: &armsecurityandcompliance.PrivateEndpoint{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/privateEndpoints/peexample01"),
				},
				PrivateLinkServiceConnectionState: &armsecurityandcompliance.PrivateLinkServiceConnectionState{
					Description:     to.Ptr("Auto-Approved"),
					ActionsRequired: to.Ptr("None"),
					Status:          to.Ptr(armsecurityandcompliance.PrivateEndpointServiceConnectionStatusApproved),
				},
			},
			SystemData: &armsecurityandcompliance.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-08T13:30:28.958Z"); return t }()),
				CreatedBy:          to.Ptr("sove"),
				CreatedByType:      to.Ptr(armsecurityandcompliance.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-08T13:30:28.958Z"); return t }()),
				LastModifiedBy:     to.Ptr("sove"),
				LastModifiedByType: to.Ptr(armsecurityandcompliance.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateEndpointConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/SCCPowershellServiceGetPrivateEndpointConnection.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnectionsForSCCPowershell_CreateOrUpdate(t *testing.T) {
	// From example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/SCCPowershellServiceCreatePrivateEndpointConnection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateEndpointConnection_CreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityandcompliance.NewPrivateEndpointConnectionsForSCCPowershellClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rgname",
		"service1",
		"myConnection",
		armsecurityandcompliance.PrivateEndpointConnection{
			Properties: &armsecurityandcompliance.PrivateEndpointConnectionProperties{
				PrivateLinkServiceConnectionState: &armsecurityandcompliance.PrivateLinkServiceConnectionState{
					Description: to.Ptr("Auto-Approved"),
					Status:      to.Ptr(armsecurityandcompliance.PrivateEndpointServiceConnectionStatusApproved),
				},
			},
		},
		&armsecurityandcompliance.PrivateEndpointConnectionsForSCCPowershellClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/SCCPowershellServiceCreatePrivateEndpointConnection.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/SCCPowershellServiceCreatePrivateEndpointConnection.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityandcompliance.PrivateEndpointConnection{
			Name: to.Ptr("myConnection"),
			Type: to.Ptr("Microsoft.SecurityAndCompliance/privateLinkServicesForSCCPowershell/privateEndpointConnections"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.SecurityAndCompliance/privateLinkServicesForSCCPowershell/service1/privateEndpointConnections/myConnection"),
			Properties: &armsecurityandcompliance.PrivateEndpointConnectionProperties{
				PrivateEndpoint: &armsecurityandcompliance.PrivateEndpoint{
					ID: to.Ptr("/subscriptions/c80fb759-c965-4c6a-9110-9b2b2d038882/resourceGroups/myResourceGroup/providers/Microsoft.Network/privateEndpoints/peexample01"),
				},
				PrivateLinkServiceConnectionState: &armsecurityandcompliance.PrivateLinkServiceConnectionState{
					Description:     to.Ptr("Auto-Approved"),
					ActionsRequired: to.Ptr("None"),
					Status:          to.Ptr(armsecurityandcompliance.PrivateEndpointServiceConnectionStatusApproved),
				},
				ProvisioningState: to.Ptr(armsecurityandcompliance.PrivateEndpointConnectionProvisioningStateSucceeded),
			},
			SystemData: &armsecurityandcompliance.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-08T13:30:28.958Z"); return t }()),
				CreatedBy:          to.Ptr("sove"),
				CreatedByType:      to.Ptr(armsecurityandcompliance.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-08T13:30:28.958Z"); return t }()),
				LastModifiedBy:     to.Ptr("sove"),
				LastModifiedByType: to.Ptr(armsecurityandcompliance.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateEndpointConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/SCCPowershellServiceCreatePrivateEndpointConnection.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnectionsForSCCPowershell_Delete(t *testing.T) {
	// From example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/SCCPowershellServiceDeletePrivateEndpointConnection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateEndpointConnections_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityandcompliance.NewPrivateEndpointConnectionsForSCCPowershellClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"rgname",
		"service1",
		"myConnection",
		&armsecurityandcompliance.PrivateEndpointConnectionsForSCCPowershellClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/SCCPowershellServiceDeletePrivateEndpointConnection.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/SCCPowershellServiceDeletePrivateEndpointConnection.json: %v", err)
	}
}

func TestPrivateLinkResourcesForSCCPowershell_ListByService(t *testing.T) {
	// From example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/SCCPowershellPrivateLinkResourcesListByService.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateLinkResources_ListGroupIds"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityandcompliance.NewPrivateLinkResourcesForSCCPowershellClient("subid", cred, &options)
	res, err := client.ListByService(ctx,
		"rgname",
		"service1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/SCCPowershellPrivateLinkResourcesListByService.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityandcompliance.PrivateLinkResourceListResult{
			Value: []*armsecurityandcompliance.PrivateLinkResource{
				{
					Name: to.Ptr("fhir"),
					Type: to.Ptr("Microsoft.SecurityAndCompliance/privateLinkServicesForSCCPowershell/privateLinkResources"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.SecurityAndCompliance/privateLinkServicesForSCCPowershell/service1/privateLinkResources/fhir"),
					Properties: &armsecurityandcompliance.PrivateLinkResourceProperties{
						GroupID: to.Ptr("fhir"),
						RequiredMembers: []*string{
							to.Ptr("fhir")},
						RequiredZoneNames: []*string{
							to.Ptr("privatelink.compliance.microsoft.com")},
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateLinkResourceListResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateLinkResourceListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/SCCPowershellPrivateLinkResourcesListByService.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateLinkResourcesForSCCPowershell_Get(t *testing.T) {
	// From example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/SCCPowershellPrivateLinkResourceGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateLinkResources_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityandcompliance.NewPrivateLinkResourcesForSCCPowershellClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rgname",
		"service1",
		"fhir",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/SCCPowershellPrivateLinkResourceGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityandcompliance.PrivateLinkResource{
			Name: to.Ptr("fhir"),
			Type: to.Ptr("Microsoft.SecurityAndCompliance/privateLinkServicesForSCCPowershell/privateLinkResources"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.SecurityAndCompliance/privateLinkServicesForSCCPowershell/service1/privateLinkResources/fhir"),
			Properties: &armsecurityandcompliance.PrivateLinkResourceProperties{
				GroupID: to.Ptr("fhir"),
				RequiredMembers: []*string{
					to.Ptr("fhir")},
				RequiredZoneNames: []*string{
					to.Ptr("privatelink.security.microsoft.com")},
			},
			SystemData: &armsecurityandcompliance.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-08T13:30:28.958Z"); return t }()),
				CreatedBy:          to.Ptr("sove"),
				CreatedByType:      to.Ptr(armsecurityandcompliance.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-08T13:30:28.958Z"); return t }()),
				LastModifiedBy:     to.Ptr("sove"),
				LastModifiedByType: to.Ptr(armsecurityandcompliance.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateLinkResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateLinkResource)
			t.Fatalf("Mock response is not equal to example response for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/SCCPowershellPrivateLinkResourceGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateLinkServicesForMIPPolicySync_Get(t *testing.T) {
	// From example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/MIPPolicySyncServiceGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get metadata"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityandcompliance.NewPrivateLinkServicesForMIPPolicySyncClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"service1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/MIPPolicySyncServiceGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityandcompliance.PrivateLinkServicesForMIPPolicySyncDescription{
			Name:     to.Ptr("service1"),
			Type:     to.Ptr("Microsoft.SecurityAndCompliance/privateLinkServicesForSCCPowershell"),
			Etag:     to.Ptr("etagvalue"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.SecurityAndCompliance/privateLinkServicesForMIPPolicySync/service1"),
			Kind:     to.Ptr(armsecurityandcompliance.KindFhirR4),
			Location: to.Ptr("West US"),
			SystemData: &armsecurityandcompliance.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-08T13:30:28.958Z"); return t }()),
				CreatedBy:          to.Ptr("fangsu"),
				CreatedByType:      to.Ptr(armsecurityandcompliance.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-08T13:30:28.958Z"); return t }()),
				LastModifiedBy:     to.Ptr("fangsu"),
				LastModifiedByType: to.Ptr(armsecurityandcompliance.CreatedByTypeUser),
			},
			Tags: map[string]*string{},
			Properties: &armsecurityandcompliance.ServicesProperties{
				AccessPolicies: []*armsecurityandcompliance.ServiceAccessPolicyEntry{
					{
						ObjectID: to.Ptr("c487e7d1-3210-41a3-8ccc-e9372b78da47"),
					},
					{
						ObjectID: to.Ptr("5b307da8-43d4-492b-8b66-b0294ade872f"),
					}},
				AuthenticationConfiguration: &armsecurityandcompliance.ServiceAuthenticationConfigurationInfo{
					Audience:          to.Ptr("https://azurehealthcareapis.com"),
					Authority:         to.Ptr("https://login.microsoftonline.com/abfde7b2-df0f-47e6-aabf-2462b07508dc"),
					SmartProxyEnabled: to.Ptr(true),
				},
				CorsConfiguration: &armsecurityandcompliance.ServiceCorsConfigurationInfo{
					AllowCredentials: to.Ptr(false),
					Headers: []*string{
						to.Ptr("*")},
					MaxAge: to.Ptr[int64](1440),
					Methods: []*string{
						to.Ptr("DELETE"),
						to.Ptr("GET"),
						to.Ptr("OPTIONS"),
						to.Ptr("PATCH"),
						to.Ptr("POST"),
						to.Ptr("PUT")},
					Origins: []*string{
						to.Ptr("*")},
				},
				CosmosDbConfiguration: &armsecurityandcompliance.ServiceCosmosDbConfigurationInfo{
					KeyVaultKeyURI:  to.Ptr("https://my-vault.vault.azure.net/keys/my-key"),
					OfferThroughput: to.Ptr[int64](1000),
				},
				PrivateEndpointConnections: []*armsecurityandcompliance.PrivateEndpointConnection{},
				ProvisioningState:          to.Ptr(armsecurityandcompliance.ProvisioningStateSucceeded),
				PublicNetworkAccess:        to.Ptr(armsecurityandcompliance.PublicNetworkAccessDisabled),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateLinkServicesForMIPPolicySyncDescription) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateLinkServicesForMIPPolicySyncDescription)
			t.Fatalf("Mock response is not equal to example response for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/MIPPolicySyncServiceGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateLinkServicesForMIPPolicySync_CreateOrUpdate(t *testing.T) {
	// From example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/MIPPolicySyncServiceCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or Update a service with all parameters"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityandcompliance.NewPrivateLinkServicesForMIPPolicySyncClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"service1",
		armsecurityandcompliance.PrivateLinkServicesForMIPPolicySyncDescription{
			Identity: &armsecurityandcompliance.ServicesResourceIdentity{
				Type: to.Ptr(armsecurityandcompliance.ManagedServiceIdentityTypeSystemAssigned),
			},
			Kind:     to.Ptr(armsecurityandcompliance.KindFhirR4),
			Location: to.Ptr("westus2"),
			Tags:     map[string]*string{},
			Properties: &armsecurityandcompliance.ServicesProperties{
				AccessPolicies: []*armsecurityandcompliance.ServiceAccessPolicyEntry{
					{
						ObjectID: to.Ptr("c487e7d1-3210-41a3-8ccc-e9372b78da47"),
					},
					{
						ObjectID: to.Ptr("5b307da8-43d4-492b-8b66-b0294ade872f"),
					}},
				AuthenticationConfiguration: &armsecurityandcompliance.ServiceAuthenticationConfigurationInfo{
					Audience:          to.Ptr("https://azurehealthcareapis.com"),
					Authority:         to.Ptr("https://login.microsoftonline.com/abfde7b2-df0f-47e6-aabf-2462b07508dc"),
					SmartProxyEnabled: to.Ptr(true),
				},
				CorsConfiguration: &armsecurityandcompliance.ServiceCorsConfigurationInfo{
					AllowCredentials: to.Ptr(false),
					Headers: []*string{
						to.Ptr("*")},
					MaxAge: to.Ptr[int64](1440),
					Methods: []*string{
						to.Ptr("DELETE"),
						to.Ptr("GET"),
						to.Ptr("OPTIONS"),
						to.Ptr("PATCH"),
						to.Ptr("POST"),
						to.Ptr("PUT")},
					Origins: []*string{
						to.Ptr("*")},
				},
				CosmosDbConfiguration: &armsecurityandcompliance.ServiceCosmosDbConfigurationInfo{
					KeyVaultKeyURI:  to.Ptr("https://my-vault.vault.azure.net/keys/my-key"),
					OfferThroughput: to.Ptr[int64](1000),
				},
				ExportConfiguration: &armsecurityandcompliance.ServiceExportConfigurationInfo{
					StorageAccountName: to.Ptr("existingStorageAccount"),
				},
				PrivateEndpointConnections: []*armsecurityandcompliance.PrivateEndpointConnection{},
				PublicNetworkAccess:        to.Ptr(armsecurityandcompliance.PublicNetworkAccessDisabled),
			},
		},
		&armsecurityandcompliance.PrivateLinkServicesForMIPPolicySyncClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/MIPPolicySyncServiceCreate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/MIPPolicySyncServiceCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityandcompliance.PrivateLinkServicesForMIPPolicySyncDescription{
			Name: to.Ptr("service1"),
			Type: to.Ptr("Microsoft.SecurityAndCompliance/privateLinkServicesForMIPPolicySync"),
			Etag: to.Ptr("etagvalue"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.SecurityAndCompliance/privateLinkServicesForMIPPolicySync/service1"),
			Identity: &armsecurityandcompliance.ServicesResourceIdentity{
				Type:        to.Ptr(armsecurityandcompliance.ManagedServiceIdentityTypeSystemAssigned),
				PrincipalID: to.Ptr("03fe6ae0-952c-4e4b-954b-cc0364dd252e"),
				TenantID:    to.Ptr("72f988bf-86f1-41af-91ab-2d8cd011db47"),
			},
			Kind:     to.Ptr(armsecurityandcompliance.KindFhirR4),
			Location: to.Ptr("West US 2"),
			SystemData: &armsecurityandcompliance.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-08T13:30:28.958Z"); return t }()),
				CreatedBy:          to.Ptr("fangsu"),
				CreatedByType:      to.Ptr(armsecurityandcompliance.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-08T13:30:28.958Z"); return t }()),
				LastModifiedBy:     to.Ptr("fangsu"),
				LastModifiedByType: to.Ptr(armsecurityandcompliance.CreatedByTypeUser),
			},
			Tags: map[string]*string{},
			Properties: &armsecurityandcompliance.ServicesProperties{
				AccessPolicies: []*armsecurityandcompliance.ServiceAccessPolicyEntry{
					{
						ObjectID: to.Ptr("c487e7d1-3210-41a3-8ccc-e9372b78da47"),
					},
					{
						ObjectID: to.Ptr("5b307da8-43d4-492b-8b66-b0294ade872f"),
					}},
				AuthenticationConfiguration: &armsecurityandcompliance.ServiceAuthenticationConfigurationInfo{
					Audience:          to.Ptr("https://azurehealthcareapis.com"),
					Authority:         to.Ptr("https://login.microsoftonline.com/abfde7b2-df0f-47e6-aabf-2462b07508dc"),
					SmartProxyEnabled: to.Ptr(true),
				},
				CorsConfiguration: &armsecurityandcompliance.ServiceCorsConfigurationInfo{
					AllowCredentials: to.Ptr(false),
					Headers: []*string{
						to.Ptr("*")},
					MaxAge: to.Ptr[int64](1440),
					Methods: []*string{
						to.Ptr("DELETE"),
						to.Ptr("GET"),
						to.Ptr("OPTIONS"),
						to.Ptr("PATCH"),
						to.Ptr("POST"),
						to.Ptr("PUT")},
					Origins: []*string{
						to.Ptr("*")},
				},
				CosmosDbConfiguration: &armsecurityandcompliance.ServiceCosmosDbConfigurationInfo{
					KeyVaultKeyURI:  to.Ptr("https://my-vault.vault.azure.net/keys/my-key"),
					OfferThroughput: to.Ptr[int64](1000),
				},
				ExportConfiguration: &armsecurityandcompliance.ServiceExportConfigurationInfo{
					StorageAccountName: to.Ptr("existingStorageAccount"),
				},
				PrivateEndpointConnections: []*armsecurityandcompliance.PrivateEndpointConnection{},
				ProvisioningState:          to.Ptr(armsecurityandcompliance.ProvisioningStateSucceeded),
				PublicNetworkAccess:        to.Ptr(armsecurityandcompliance.PublicNetworkAccessDisabled),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateLinkServicesForMIPPolicySyncDescription) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateLinkServicesForMIPPolicySyncDescription)
			t.Fatalf("Mock response is not equal to example response for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/MIPPolicySyncServiceCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/MIPPolicySyncServiceCreateMinimum.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or Update a service with minimum parameters"},
	})
	client = armsecurityandcompliance.NewPrivateLinkServicesForMIPPolicySyncClient("subid", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"service2",
		armsecurityandcompliance.PrivateLinkServicesForMIPPolicySyncDescription{
			Kind:     to.Ptr(armsecurityandcompliance.KindFhirR4),
			Location: to.Ptr("westus2"),
			Tags:     map[string]*string{},
			Properties: &armsecurityandcompliance.ServicesProperties{
				AccessPolicies: []*armsecurityandcompliance.ServiceAccessPolicyEntry{
					{
						ObjectID: to.Ptr("c487e7d1-3210-41a3-8ccc-e9372b78da47"),
					}},
			},
		},
		&armsecurityandcompliance.PrivateLinkServicesForMIPPolicySyncClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/MIPPolicySyncServiceCreateMinimum.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/MIPPolicySyncServiceCreateMinimum.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityandcompliance.PrivateLinkServicesForMIPPolicySyncDescription{
			Name:     to.Ptr("service2"),
			Type:     to.Ptr("Microsoft.SecurityAndCompliance/privateLinkServicesForMIPPolicySync"),
			Etag:     to.Ptr("etagvalue"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.SecurityAndCompliance/privateLinkServicesForMIPPolicySync/service2"),
			Kind:     to.Ptr(armsecurityandcompliance.KindFhirR4),
			Location: to.Ptr("westus2"),
			SystemData: &armsecurityandcompliance.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-08T13:30:28.958Z"); return t }()),
				CreatedBy:          to.Ptr("fangsu"),
				CreatedByType:      to.Ptr(armsecurityandcompliance.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-08T13:30:28.958Z"); return t }()),
				LastModifiedBy:     to.Ptr("fangsu"),
				LastModifiedByType: to.Ptr(armsecurityandcompliance.CreatedByTypeUser),
			},
			Tags: map[string]*string{},
			Properties: &armsecurityandcompliance.ServicesProperties{
				AccessPolicies: []*armsecurityandcompliance.ServiceAccessPolicyEntry{
					{
						ObjectID: to.Ptr("c487e7d1-3210-41a3-8ccc-e9372b78da47"),
					}},
				AuthenticationConfiguration: &armsecurityandcompliance.ServiceAuthenticationConfigurationInfo{
					Audience:          to.Ptr("https://azurehealthcareapis.com"),
					Authority:         to.Ptr("https://login.microsoftonline.com/abfde7b2-df0f-47e6-aabf-2462b07508dc"),
					SmartProxyEnabled: to.Ptr(false),
				},
				CorsConfiguration: &armsecurityandcompliance.ServiceCorsConfigurationInfo{
					AllowCredentials: to.Ptr(false),
					Headers:          []*string{},
					Methods:          []*string{},
					Origins:          []*string{},
				},
				CosmosDbConfiguration: &armsecurityandcompliance.ServiceCosmosDbConfigurationInfo{
					OfferThroughput: to.Ptr[int64](1000),
				},
				PrivateEndpointConnections: []*armsecurityandcompliance.PrivateEndpointConnection{},
				ProvisioningState:          to.Ptr(armsecurityandcompliance.ProvisioningStateSucceeded),
				PublicNetworkAccess:        to.Ptr(armsecurityandcompliance.PublicNetworkAccessDisabled),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateLinkServicesForMIPPolicySyncDescription) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateLinkServicesForMIPPolicySyncDescription)
			t.Fatalf("Mock response is not equal to example response for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/MIPPolicySyncServiceCreateMinimum.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateLinkServicesForMIPPolicySync_Update(t *testing.T) {
	// From example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/MIPPolicySyncServicePatch.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Patch service"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityandcompliance.NewPrivateLinkServicesForMIPPolicySyncClient("subid", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"rg1",
		"service1",
		armsecurityandcompliance.ServicesPatchDescription{
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
		},
		&armsecurityandcompliance.PrivateLinkServicesForMIPPolicySyncClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/MIPPolicySyncServicePatch.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/MIPPolicySyncServicePatch.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityandcompliance.PrivateLinkServicesForMIPPolicySyncDescription{
			Name:     to.Ptr("service1"),
			Type:     to.Ptr("Microsoft.SecurityAndCompliance/privateLinkServicesForMIPPolicySync"),
			Etag:     to.Ptr("etagvalue"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.SecurityAndCompliance/privateLinkServicesForMIPPolicySync/service1"),
			Kind:     to.Ptr(armsecurityandcompliance.KindFhirR4),
			Location: to.Ptr("West US"),
			SystemData: &armsecurityandcompliance.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-08T13:30:28.958Z"); return t }()),
				CreatedBy:          to.Ptr("fangsu"),
				CreatedByType:      to.Ptr(armsecurityandcompliance.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-08T13:30:28.958Z"); return t }()),
				LastModifiedBy:     to.Ptr("fangsu"),
				LastModifiedByType: to.Ptr(armsecurityandcompliance.CreatedByTypeUser),
			},
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
			Properties: &armsecurityandcompliance.ServicesProperties{
				AccessPolicies: []*armsecurityandcompliance.ServiceAccessPolicyEntry{
					{
						ObjectID: to.Ptr("c487e7d1-3210-41a3-8ccc-e9372b78da47"),
					},
					{
						ObjectID: to.Ptr("5b307da8-43d4-492b-8b66-b0294ade872f"),
					}},
				AuthenticationConfiguration: &armsecurityandcompliance.ServiceAuthenticationConfigurationInfo{
					Audience:          to.Ptr("https://azurehealthcareapis.com"),
					Authority:         to.Ptr("https://login.microsoftonline.com/abfde7b2-df0f-47e6-aabf-2462b07508dc"),
					SmartProxyEnabled: to.Ptr(true),
				},
				CorsConfiguration: &armsecurityandcompliance.ServiceCorsConfigurationInfo{
					AllowCredentials: to.Ptr(false),
					Headers: []*string{
						to.Ptr("*")},
					MaxAge: to.Ptr[int64](1440),
					Methods: []*string{
						to.Ptr("DELETE"),
						to.Ptr("GET"),
						to.Ptr("OPTIONS"),
						to.Ptr("PATCH"),
						to.Ptr("POST"),
						to.Ptr("PUT")},
					Origins: []*string{
						to.Ptr("*")},
				},
				CosmosDbConfiguration: &armsecurityandcompliance.ServiceCosmosDbConfigurationInfo{
					KeyVaultKeyURI:  to.Ptr("https://my-vault.vault.azure.net/keys/my-key"),
					OfferThroughput: to.Ptr[int64](1000),
				},
				PrivateEndpointConnections: []*armsecurityandcompliance.PrivateEndpointConnection{},
				ProvisioningState:          to.Ptr(armsecurityandcompliance.ProvisioningStateSucceeded),
				PublicNetworkAccess:        to.Ptr(armsecurityandcompliance.PublicNetworkAccessDisabled),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateLinkServicesForMIPPolicySyncDescription) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateLinkServicesForMIPPolicySyncDescription)
			t.Fatalf("Mock response is not equal to example response for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/MIPPolicySyncServicePatch.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateLinkServicesForMIPPolicySync_Delete(t *testing.T) {
	// From example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/MIPPolicySyncServiceDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete service"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityandcompliance.NewPrivateLinkServicesForMIPPolicySyncClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"service1",
		&armsecurityandcompliance.PrivateLinkServicesForMIPPolicySyncClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/MIPPolicySyncServiceDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/MIPPolicySyncServiceDelete.json: %v", err)
	}
}

func TestPrivateLinkServicesForMIPPolicySync_List(t *testing.T) {
	// From example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/MIPPolicySyncServiceList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all services in subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityandcompliance.NewPrivateLinkServicesForMIPPolicySyncClient("subid", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/MIPPolicySyncServiceList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsecurityandcompliance.PrivateLinkServicesForMIPPolicySyncDescriptionListResult{
			Value: []*armsecurityandcompliance.PrivateLinkServicesForMIPPolicySyncDescription{
				{
					Name:     to.Ptr("service1"),
					Type:     to.Ptr("Microsoft.SecurityAndCompliance/privateLinkServicesForMIPPolicySync"),
					Etag:     to.Ptr("etag"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.SecurityAndCompliance/privateLinkServicesForMIPPolicySync/service1"),
					Kind:     to.Ptr(armsecurityandcompliance.KindFhirR4),
					Location: to.Ptr("West US"),
					Tags:     map[string]*string{},
					Properties: &armsecurityandcompliance.ServicesProperties{
						AccessPolicies: []*armsecurityandcompliance.ServiceAccessPolicyEntry{
							{
								ObjectID: to.Ptr("c487e7d1-3210-41a3-8ccc-e9372b78da47"),
							},
							{
								ObjectID: to.Ptr("5b307da8-43d4-492b-8b66-b0294ade872f"),
							}},
						AuthenticationConfiguration: &armsecurityandcompliance.ServiceAuthenticationConfigurationInfo{
							Audience:          to.Ptr("https://azurehealthcareapis.com"),
							Authority:         to.Ptr("https://login.microsoftonline.com/abfde7b2-df0f-47e6-aabf-2462b07508dc"),
							SmartProxyEnabled: to.Ptr(true),
						},
						CorsConfiguration: &armsecurityandcompliance.ServiceCorsConfigurationInfo{
							AllowCredentials: to.Ptr(false),
							Headers: []*string{
								to.Ptr("*")},
							MaxAge: to.Ptr[int64](1440),
							Methods: []*string{
								to.Ptr("DELETE"),
								to.Ptr("GET"),
								to.Ptr("OPTIONS"),
								to.Ptr("PATCH"),
								to.Ptr("POST"),
								to.Ptr("PUT")},
							Origins: []*string{
								to.Ptr("*")},
						},
						CosmosDbConfiguration: &armsecurityandcompliance.ServiceCosmosDbConfigurationInfo{
							KeyVaultKeyURI:  to.Ptr("https://my-vault.vault.azure.net/keys/my-key"),
							OfferThroughput: to.Ptr[int64](1000),
						},
						PrivateEndpointConnections: []*armsecurityandcompliance.PrivateEndpointConnection{},
						ProvisioningState:          to.Ptr(armsecurityandcompliance.ProvisioningStateSucceeded),
						PublicNetworkAccess:        to.Ptr(armsecurityandcompliance.PublicNetworkAccessDisabled),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PrivateLinkServicesForMIPPolicySyncDescriptionListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PrivateLinkServicesForMIPPolicySyncDescriptionListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/MIPPolicySyncServiceList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateLinkServicesForMIPPolicySync_ListByResourceGroup(t *testing.T) {
	// From example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/MIPPolicySyncServiceListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all services in resource group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityandcompliance.NewPrivateLinkServicesForMIPPolicySyncClient("subid", cred, &options)
	pager := client.ListByResourceGroup("rgname",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/MIPPolicySyncServiceListByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsecurityandcompliance.PrivateLinkServicesForMIPPolicySyncDescriptionListResult{
			Value: []*armsecurityandcompliance.PrivateLinkServicesForMIPPolicySyncDescription{
				{
					Name:     to.Ptr("service1"),
					Type:     to.Ptr("Microsoft.SecurityAndCompliance/privateLinkServicesForMIPPolicySync"),
					Etag:     to.Ptr("etagvalue"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.SecurityAndCompliance/privateLinkServicesForMIPPolicySync/dddb8dcb-effb-4290-bb47-ce1e8440c729"),
					Kind:     to.Ptr(armsecurityandcompliance.KindFhirR4),
					Location: to.Ptr("westus"),
					Tags:     map[string]*string{},
					Properties: &armsecurityandcompliance.ServicesProperties{
						AccessPolicies: []*armsecurityandcompliance.ServiceAccessPolicyEntry{
							{
								ObjectID: to.Ptr("c487e7d1-3210-41a3-8ccc-e9372b78da47"),
							},
							{
								ObjectID: to.Ptr("5b307da8-43d4-492b-8b66-b0294ade872f"),
							}},
						AuthenticationConfiguration: &armsecurityandcompliance.ServiceAuthenticationConfigurationInfo{
							Audience:          to.Ptr("https://azurehealthcareapis.com"),
							Authority:         to.Ptr("https://login.microsoftonline.com/abfde7b2-df0f-47e6-aabf-2462b07508dc"),
							SmartProxyEnabled: to.Ptr(true),
						},
						CorsConfiguration: &armsecurityandcompliance.ServiceCorsConfigurationInfo{
							AllowCredentials: to.Ptr(false),
							Headers: []*string{
								to.Ptr("*")},
							MaxAge: to.Ptr[int64](1440),
							Methods: []*string{
								to.Ptr("DELETE"),
								to.Ptr("GET"),
								to.Ptr("OPTIONS"),
								to.Ptr("PATCH"),
								to.Ptr("POST"),
								to.Ptr("PUT")},
							Origins: []*string{
								to.Ptr("*")},
						},
						CosmosDbConfiguration: &armsecurityandcompliance.ServiceCosmosDbConfigurationInfo{
							KeyVaultKeyURI:  to.Ptr("https://my-vault.vault.azure.net/keys/my-key"),
							OfferThroughput: to.Ptr[int64](1000),
						},
						PrivateEndpointConnections: []*armsecurityandcompliance.PrivateEndpointConnection{},
						ProvisioningState:          to.Ptr(armsecurityandcompliance.ProvisioningStateSucceeded),
						PublicNetworkAccess:        to.Ptr(armsecurityandcompliance.PublicNetworkAccessDisabled),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PrivateLinkServicesForMIPPolicySyncDescriptionListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PrivateLinkServicesForMIPPolicySyncDescriptionListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/MIPPolicySyncServiceListByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnectionsForMIPPolicySync_ListByService(t *testing.T) {
	// From example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/MIPPolicySyncServiceListPrivateEndpointConnections.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateEndpointConnection_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityandcompliance.NewPrivateEndpointConnectionsForMIPPolicySyncClient("subid", cred, &options)
	pager := client.ListByService("rgname",
		"service1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/MIPPolicySyncServiceListPrivateEndpointConnections.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsecurityandcompliance.PrivateEndpointConnectionListResult{
			Value: []*armsecurityandcompliance.PrivateEndpointConnection{
				{
					Name: to.Ptr("myConnection"),
					Type: to.Ptr("Microsoft.SecurityAndCompliance/privateLinkServicesForMIPPolicySync/privateEndpointConnections"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.SecurityAndCompliance/privateLinkServicesForMIPPolicySync/service1/privateEndpointConnections/myConnection"),
					Properties: &armsecurityandcompliance.PrivateEndpointConnectionProperties{
						PrivateEndpoint: &armsecurityandcompliance.PrivateEndpoint{
							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/privateEndpoints/peexample01"),
						},
						PrivateLinkServiceConnectionState: &armsecurityandcompliance.PrivateLinkServiceConnectionState{
							Description:     to.Ptr("Auto-Approved"),
							ActionsRequired: to.Ptr("None"),
							Status:          to.Ptr(armsecurityandcompliance.PrivateEndpointServiceConnectionStatusApproved),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PrivateEndpointConnectionListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PrivateEndpointConnectionListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/MIPPolicySyncServiceListPrivateEndpointConnections.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnectionsForMIPPolicySync_Get(t *testing.T) {
	// From example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/MIPPolicySyncServiceGetPrivateEndpointConnection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateEndpointConnection_GetConnection"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityandcompliance.NewPrivateEndpointConnectionsForMIPPolicySyncClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rgname",
		"service1",
		"myConnection",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/MIPPolicySyncServiceGetPrivateEndpointConnection.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityandcompliance.PrivateEndpointConnection{
			Name: to.Ptr("myConnection"),
			Type: to.Ptr("Microsoft.SecurityAndCompliance/privateLinkServicesForSCCPowershell/privateEndpointConnections"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.SecurityAndCompliance/privateLinkServicesForMIPPolicySync/service1/privateEndpointConnections/myConnection"),
			Properties: &armsecurityandcompliance.PrivateEndpointConnectionProperties{
				PrivateEndpoint: &armsecurityandcompliance.PrivateEndpoint{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/privateEndpoints/peexample01"),
				},
				PrivateLinkServiceConnectionState: &armsecurityandcompliance.PrivateLinkServiceConnectionState{
					Description:     to.Ptr("Auto-Approved"),
					ActionsRequired: to.Ptr("None"),
					Status:          to.Ptr(armsecurityandcompliance.PrivateEndpointServiceConnectionStatusApproved),
				},
			},
			SystemData: &armsecurityandcompliance.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-08T13:30:28.958Z"); return t }()),
				CreatedBy:          to.Ptr("fangsu"),
				CreatedByType:      to.Ptr(armsecurityandcompliance.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-08T13:30:28.958Z"); return t }()),
				LastModifiedBy:     to.Ptr("fangsu"),
				LastModifiedByType: to.Ptr(armsecurityandcompliance.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateEndpointConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/MIPPolicySyncServiceGetPrivateEndpointConnection.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnectionsForMIPPolicySync_CreateOrUpdate(t *testing.T) {
	// From example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/MIPPolicySyncServiceCreatePrivateEndpointConnection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateEndpointConnection_CreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityandcompliance.NewPrivateEndpointConnectionsForMIPPolicySyncClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rgname",
		"service1",
		"myConnection",
		armsecurityandcompliance.PrivateEndpointConnection{
			Properties: &armsecurityandcompliance.PrivateEndpointConnectionProperties{
				PrivateLinkServiceConnectionState: &armsecurityandcompliance.PrivateLinkServiceConnectionState{
					Description: to.Ptr("Auto-Approved"),
					Status:      to.Ptr(armsecurityandcompliance.PrivateEndpointServiceConnectionStatusApproved),
				},
			},
		},
		&armsecurityandcompliance.PrivateEndpointConnectionsForMIPPolicySyncClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/MIPPolicySyncServiceCreatePrivateEndpointConnection.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/MIPPolicySyncServiceCreatePrivateEndpointConnection.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityandcompliance.PrivateEndpointConnection{
			Name: to.Ptr("myConnection"),
			Type: to.Ptr("Microsoft.SecurityAndCompliance/privateLinkServicesForMIPPolicySync/privateEndpointConnections"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.SecurityAndCompliance/privateLinkServicesForMIPPolicySync/service1/privateEndpointConnections/myConnection"),
			Properties: &armsecurityandcompliance.PrivateEndpointConnectionProperties{
				PrivateEndpoint: &armsecurityandcompliance.PrivateEndpoint{
					ID: to.Ptr("/subscriptions/c80fb759-c965-4c6a-9110-9b2b2d038882/resourceGroups/myResourceGroup/providers/Microsoft.Network/privateEndpoints/peexample01"),
				},
				PrivateLinkServiceConnectionState: &armsecurityandcompliance.PrivateLinkServiceConnectionState{
					Description:     to.Ptr("Auto-Approved"),
					ActionsRequired: to.Ptr("None"),
					Status:          to.Ptr(armsecurityandcompliance.PrivateEndpointServiceConnectionStatusApproved),
				},
				ProvisioningState: to.Ptr(armsecurityandcompliance.PrivateEndpointConnectionProvisioningStateSucceeded),
			},
			SystemData: &armsecurityandcompliance.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-08T13:30:28.958Z"); return t }()),
				CreatedBy:          to.Ptr("fangsu"),
				CreatedByType:      to.Ptr(armsecurityandcompliance.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-08T13:30:28.958Z"); return t }()),
				LastModifiedBy:     to.Ptr("fangsu"),
				LastModifiedByType: to.Ptr(armsecurityandcompliance.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateEndpointConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/MIPPolicySyncServiceCreatePrivateEndpointConnection.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnectionsForMIPPolicySync_Delete(t *testing.T) {
	// From example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/MIPPolicySyncServiceDeletePrivateEndpointConnection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateEndpointConnections_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityandcompliance.NewPrivateEndpointConnectionsForMIPPolicySyncClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"rgname",
		"service1",
		"myConnection",
		&armsecurityandcompliance.PrivateEndpointConnectionsForMIPPolicySyncClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/MIPPolicySyncServiceDeletePrivateEndpointConnection.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/MIPPolicySyncServiceDeletePrivateEndpointConnection.json: %v", err)
	}
}

func TestPrivateLinkResourcesForMIPPolicySync_ListByService(t *testing.T) {
	// From example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/MIPPolicySyncPrivateLinkResourcesListByService.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateLinkResources_ListGroupIds"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityandcompliance.NewPrivateLinkResourcesForMIPPolicySyncClient("subid", cred, &options)
	res, err := client.ListByService(ctx,
		"rgname",
		"service1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/MIPPolicySyncPrivateLinkResourcesListByService.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityandcompliance.PrivateLinkResourceListResult{
			Value: []*armsecurityandcompliance.PrivateLinkResource{
				{
					Name: to.Ptr("fhir"),
					Type: to.Ptr("Microsoft.SecurityAndCompliance/privateLinkServicesForMIPPolicySync/privateLinkResources"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.SecurityAndCompliance/privateLinkServicesForMIPPolicySync/service1/privateLinkResources/fhir"),
					Properties: &armsecurityandcompliance.PrivateLinkResourceProperties{
						GroupID: to.Ptr("fhir"),
						RequiredMembers: []*string{
							to.Ptr("fhir")},
						RequiredZoneNames: []*string{
							to.Ptr("privatelink.compliance.microsoft.com")},
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateLinkResourceListResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateLinkResourceListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/MIPPolicySyncPrivateLinkResourcesListByService.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateLinkResourcesForMIPPolicySync_Get(t *testing.T) {
	// From example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/MIPPolicySyncPrivateLinkResourceGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateLinkResources_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurityandcompliance.NewPrivateLinkResourcesForMIPPolicySyncClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rgname",
		"service1",
		"fhir",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/MIPPolicySyncPrivateLinkResourceGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurityandcompliance.PrivateLinkResource{
			Name: to.Ptr("fhir"),
			Type: to.Ptr("Microsoft.SecurityAndCompliance/privateLinkServicesForMIPPolicySync/privateLinkResources"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.SecurityAndCompliance/privateLinkServicesForMIPPolicySync/service1/privateLinkResources/fhir"),
			Properties: &armsecurityandcompliance.PrivateLinkResourceProperties{
				GroupID: to.Ptr("fhir"),
				RequiredMembers: []*string{
					to.Ptr("fhir")},
				RequiredZoneNames: []*string{
					to.Ptr("privatelink.security.microsoft.com")},
			},
			SystemData: &armsecurityandcompliance.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-08T13:30:28.958Z"); return t }()),
				CreatedBy:          to.Ptr("fangsu"),
				CreatedByType:      to.Ptr(armsecurityandcompliance.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-08T13:30:28.958Z"); return t }()),
				LastModifiedBy:     to.Ptr("fangsu"),
				LastModifiedByType: to.Ptr(armsecurityandcompliance.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateLinkResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateLinkResource)
			t.Fatalf("Mock response is not equal to example response for example specification/securityandcompliance/resource-manager/Microsoft.SecurityAndCompliance/stable/2021-03-08/examples/MIPPolicySyncPrivateLinkResourceGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
