//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armsecurityandcompliance

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"reflect"
)

// OperationsClientListPager provides operations for iterating over paged responses.
type OperationsClientListPager struct {
	client    *OperationsClient
	current   OperationsClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, OperationsClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *OperationsClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.OperationListResult.NextLink == nil || len(*p.current.OperationListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *OperationsClientListPager) NextPage(ctx context.Context) (OperationsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return OperationsClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return OperationsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return OperationsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return OperationsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return OperationsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// PrivateEndpointConnectionsAdtAPIClientListByServicePager provides operations for iterating over paged responses.
type PrivateEndpointConnectionsAdtAPIClientListByServicePager struct {
	client    *PrivateEndpointConnectionsAdtAPIClient
	current   PrivateEndpointConnectionsAdtAPIClientListByServiceResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, PrivateEndpointConnectionsAdtAPIClientListByServiceResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *PrivateEndpointConnectionsAdtAPIClientListByServicePager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PrivateEndpointConnectionListResult.NextLink == nil || len(*p.current.PrivateEndpointConnectionListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *PrivateEndpointConnectionsAdtAPIClientListByServicePager) NextPage(ctx context.Context) (PrivateEndpointConnectionsAdtAPIClientListByServiceResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return PrivateEndpointConnectionsAdtAPIClientListByServiceResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return PrivateEndpointConnectionsAdtAPIClientListByServiceResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return PrivateEndpointConnectionsAdtAPIClientListByServiceResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return PrivateEndpointConnectionsAdtAPIClientListByServiceResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByServiceHandleResponse(resp)
	if err != nil {
		return PrivateEndpointConnectionsAdtAPIClientListByServiceResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// PrivateEndpointConnectionsCompClientListByServicePager provides operations for iterating over paged responses.
type PrivateEndpointConnectionsCompClientListByServicePager struct {
	client    *PrivateEndpointConnectionsCompClient
	current   PrivateEndpointConnectionsCompClientListByServiceResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, PrivateEndpointConnectionsCompClientListByServiceResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *PrivateEndpointConnectionsCompClientListByServicePager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PrivateEndpointConnectionListResult.NextLink == nil || len(*p.current.PrivateEndpointConnectionListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *PrivateEndpointConnectionsCompClientListByServicePager) NextPage(ctx context.Context) (PrivateEndpointConnectionsCompClientListByServiceResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return PrivateEndpointConnectionsCompClientListByServiceResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return PrivateEndpointConnectionsCompClientListByServiceResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return PrivateEndpointConnectionsCompClientListByServiceResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return PrivateEndpointConnectionsCompClientListByServiceResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByServiceHandleResponse(resp)
	if err != nil {
		return PrivateEndpointConnectionsCompClientListByServiceResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// PrivateEndpointConnectionsForEDMClientListByServicePager provides operations for iterating over paged responses.
type PrivateEndpointConnectionsForEDMClientListByServicePager struct {
	client    *PrivateEndpointConnectionsForEDMClient
	current   PrivateEndpointConnectionsForEDMClientListByServiceResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, PrivateEndpointConnectionsForEDMClientListByServiceResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *PrivateEndpointConnectionsForEDMClientListByServicePager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PrivateEndpointConnectionListResult.NextLink == nil || len(*p.current.PrivateEndpointConnectionListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *PrivateEndpointConnectionsForEDMClientListByServicePager) NextPage(ctx context.Context) (PrivateEndpointConnectionsForEDMClientListByServiceResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return PrivateEndpointConnectionsForEDMClientListByServiceResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return PrivateEndpointConnectionsForEDMClientListByServiceResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return PrivateEndpointConnectionsForEDMClientListByServiceResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return PrivateEndpointConnectionsForEDMClientListByServiceResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByServiceHandleResponse(resp)
	if err != nil {
		return PrivateEndpointConnectionsForEDMClientListByServiceResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// PrivateEndpointConnectionsForMIPPolicySyncClientListByServicePager provides operations for iterating over paged responses.
type PrivateEndpointConnectionsForMIPPolicySyncClientListByServicePager struct {
	client    *PrivateEndpointConnectionsForMIPPolicySyncClient
	current   PrivateEndpointConnectionsForMIPPolicySyncClientListByServiceResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, PrivateEndpointConnectionsForMIPPolicySyncClientListByServiceResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *PrivateEndpointConnectionsForMIPPolicySyncClientListByServicePager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PrivateEndpointConnectionListResult.NextLink == nil || len(*p.current.PrivateEndpointConnectionListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *PrivateEndpointConnectionsForMIPPolicySyncClientListByServicePager) NextPage(ctx context.Context) (PrivateEndpointConnectionsForMIPPolicySyncClientListByServiceResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return PrivateEndpointConnectionsForMIPPolicySyncClientListByServiceResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return PrivateEndpointConnectionsForMIPPolicySyncClientListByServiceResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return PrivateEndpointConnectionsForMIPPolicySyncClientListByServiceResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return PrivateEndpointConnectionsForMIPPolicySyncClientListByServiceResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByServiceHandleResponse(resp)
	if err != nil {
		return PrivateEndpointConnectionsForMIPPolicySyncClientListByServiceResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// PrivateEndpointConnectionsForSCCPowershellClientListByServicePager provides operations for iterating over paged responses.
type PrivateEndpointConnectionsForSCCPowershellClientListByServicePager struct {
	client    *PrivateEndpointConnectionsForSCCPowershellClient
	current   PrivateEndpointConnectionsForSCCPowershellClientListByServiceResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, PrivateEndpointConnectionsForSCCPowershellClientListByServiceResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *PrivateEndpointConnectionsForSCCPowershellClientListByServicePager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PrivateEndpointConnectionListResult.NextLink == nil || len(*p.current.PrivateEndpointConnectionListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *PrivateEndpointConnectionsForSCCPowershellClientListByServicePager) NextPage(ctx context.Context) (PrivateEndpointConnectionsForSCCPowershellClientListByServiceResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return PrivateEndpointConnectionsForSCCPowershellClientListByServiceResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return PrivateEndpointConnectionsForSCCPowershellClientListByServiceResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return PrivateEndpointConnectionsForSCCPowershellClientListByServiceResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return PrivateEndpointConnectionsForSCCPowershellClientListByServiceResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByServiceHandleResponse(resp)
	if err != nil {
		return PrivateEndpointConnectionsForSCCPowershellClientListByServiceResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// PrivateEndpointConnectionsSecClientListByServicePager provides operations for iterating over paged responses.
type PrivateEndpointConnectionsSecClientListByServicePager struct {
	client    *PrivateEndpointConnectionsSecClient
	current   PrivateEndpointConnectionsSecClientListByServiceResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, PrivateEndpointConnectionsSecClientListByServiceResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *PrivateEndpointConnectionsSecClientListByServicePager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PrivateEndpointConnectionListResult.NextLink == nil || len(*p.current.PrivateEndpointConnectionListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *PrivateEndpointConnectionsSecClientListByServicePager) NextPage(ctx context.Context) (PrivateEndpointConnectionsSecClientListByServiceResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return PrivateEndpointConnectionsSecClientListByServiceResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return PrivateEndpointConnectionsSecClientListByServiceResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return PrivateEndpointConnectionsSecClientListByServiceResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return PrivateEndpointConnectionsSecClientListByServiceResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByServiceHandleResponse(resp)
	if err != nil {
		return PrivateEndpointConnectionsSecClientListByServiceResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// PrivateLinkServicesForEDMUploadClientListByResourceGroupPager provides operations for iterating over paged responses.
type PrivateLinkServicesForEDMUploadClientListByResourceGroupPager struct {
	client    *PrivateLinkServicesForEDMUploadClient
	current   PrivateLinkServicesForEDMUploadClientListByResourceGroupResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, PrivateLinkServicesForEDMUploadClientListByResourceGroupResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *PrivateLinkServicesForEDMUploadClientListByResourceGroupPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PrivateLinkServicesForEDMUploadDescriptionListResult.NextLink == nil || len(*p.current.PrivateLinkServicesForEDMUploadDescriptionListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *PrivateLinkServicesForEDMUploadClientListByResourceGroupPager) NextPage(ctx context.Context) (PrivateLinkServicesForEDMUploadClientListByResourceGroupResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return PrivateLinkServicesForEDMUploadClientListByResourceGroupResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return PrivateLinkServicesForEDMUploadClientListByResourceGroupResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return PrivateLinkServicesForEDMUploadClientListByResourceGroupResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return PrivateLinkServicesForEDMUploadClientListByResourceGroupResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		return PrivateLinkServicesForEDMUploadClientListByResourceGroupResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// PrivateLinkServicesForEDMUploadClientListPager provides operations for iterating over paged responses.
type PrivateLinkServicesForEDMUploadClientListPager struct {
	client    *PrivateLinkServicesForEDMUploadClient
	current   PrivateLinkServicesForEDMUploadClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, PrivateLinkServicesForEDMUploadClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *PrivateLinkServicesForEDMUploadClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PrivateLinkServicesForEDMUploadDescriptionListResult.NextLink == nil || len(*p.current.PrivateLinkServicesForEDMUploadDescriptionListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *PrivateLinkServicesForEDMUploadClientListPager) NextPage(ctx context.Context) (PrivateLinkServicesForEDMUploadClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return PrivateLinkServicesForEDMUploadClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return PrivateLinkServicesForEDMUploadClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return PrivateLinkServicesForEDMUploadClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return PrivateLinkServicesForEDMUploadClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return PrivateLinkServicesForEDMUploadClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// PrivateLinkServicesForM365ComplianceCenterClientListByResourceGroupPager provides operations for iterating over paged responses.
type PrivateLinkServicesForM365ComplianceCenterClientListByResourceGroupPager struct {
	client    *PrivateLinkServicesForM365ComplianceCenterClient
	current   PrivateLinkServicesForM365ComplianceCenterClientListByResourceGroupResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, PrivateLinkServicesForM365ComplianceCenterClientListByResourceGroupResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *PrivateLinkServicesForM365ComplianceCenterClientListByResourceGroupPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PrivateLinkServicesForM365ComplianceCenterDescriptionListResult.NextLink == nil || len(*p.current.PrivateLinkServicesForM365ComplianceCenterDescriptionListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *PrivateLinkServicesForM365ComplianceCenterClientListByResourceGroupPager) NextPage(ctx context.Context) (PrivateLinkServicesForM365ComplianceCenterClientListByResourceGroupResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return PrivateLinkServicesForM365ComplianceCenterClientListByResourceGroupResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return PrivateLinkServicesForM365ComplianceCenterClientListByResourceGroupResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return PrivateLinkServicesForM365ComplianceCenterClientListByResourceGroupResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return PrivateLinkServicesForM365ComplianceCenterClientListByResourceGroupResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		return PrivateLinkServicesForM365ComplianceCenterClientListByResourceGroupResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// PrivateLinkServicesForM365ComplianceCenterClientListPager provides operations for iterating over paged responses.
type PrivateLinkServicesForM365ComplianceCenterClientListPager struct {
	client    *PrivateLinkServicesForM365ComplianceCenterClient
	current   PrivateLinkServicesForM365ComplianceCenterClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, PrivateLinkServicesForM365ComplianceCenterClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *PrivateLinkServicesForM365ComplianceCenterClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PrivateLinkServicesForM365ComplianceCenterDescriptionListResult.NextLink == nil || len(*p.current.PrivateLinkServicesForM365ComplianceCenterDescriptionListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *PrivateLinkServicesForM365ComplianceCenterClientListPager) NextPage(ctx context.Context) (PrivateLinkServicesForM365ComplianceCenterClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return PrivateLinkServicesForM365ComplianceCenterClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return PrivateLinkServicesForM365ComplianceCenterClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return PrivateLinkServicesForM365ComplianceCenterClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return PrivateLinkServicesForM365ComplianceCenterClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return PrivateLinkServicesForM365ComplianceCenterClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// PrivateLinkServicesForM365SecurityCenterClientListByResourceGroupPager provides operations for iterating over paged responses.
type PrivateLinkServicesForM365SecurityCenterClientListByResourceGroupPager struct {
	client    *PrivateLinkServicesForM365SecurityCenterClient
	current   PrivateLinkServicesForM365SecurityCenterClientListByResourceGroupResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, PrivateLinkServicesForM365SecurityCenterClientListByResourceGroupResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *PrivateLinkServicesForM365SecurityCenterClientListByResourceGroupPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PrivateLinkServicesForM365SecurityCenterDescriptionListResult.NextLink == nil || len(*p.current.PrivateLinkServicesForM365SecurityCenterDescriptionListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *PrivateLinkServicesForM365SecurityCenterClientListByResourceGroupPager) NextPage(ctx context.Context) (PrivateLinkServicesForM365SecurityCenterClientListByResourceGroupResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return PrivateLinkServicesForM365SecurityCenterClientListByResourceGroupResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return PrivateLinkServicesForM365SecurityCenterClientListByResourceGroupResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return PrivateLinkServicesForM365SecurityCenterClientListByResourceGroupResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return PrivateLinkServicesForM365SecurityCenterClientListByResourceGroupResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		return PrivateLinkServicesForM365SecurityCenterClientListByResourceGroupResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// PrivateLinkServicesForM365SecurityCenterClientListPager provides operations for iterating over paged responses.
type PrivateLinkServicesForM365SecurityCenterClientListPager struct {
	client    *PrivateLinkServicesForM365SecurityCenterClient
	current   PrivateLinkServicesForM365SecurityCenterClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, PrivateLinkServicesForM365SecurityCenterClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *PrivateLinkServicesForM365SecurityCenterClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PrivateLinkServicesForM365SecurityCenterDescriptionListResult.NextLink == nil || len(*p.current.PrivateLinkServicesForM365SecurityCenterDescriptionListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *PrivateLinkServicesForM365SecurityCenterClientListPager) NextPage(ctx context.Context) (PrivateLinkServicesForM365SecurityCenterClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return PrivateLinkServicesForM365SecurityCenterClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return PrivateLinkServicesForM365SecurityCenterClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return PrivateLinkServicesForM365SecurityCenterClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return PrivateLinkServicesForM365SecurityCenterClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return PrivateLinkServicesForM365SecurityCenterClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// PrivateLinkServicesForMIPPolicySyncClientListByResourceGroupPager provides operations for iterating over paged responses.
type PrivateLinkServicesForMIPPolicySyncClientListByResourceGroupPager struct {
	client    *PrivateLinkServicesForMIPPolicySyncClient
	current   PrivateLinkServicesForMIPPolicySyncClientListByResourceGroupResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, PrivateLinkServicesForMIPPolicySyncClientListByResourceGroupResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *PrivateLinkServicesForMIPPolicySyncClientListByResourceGroupPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PrivateLinkServicesForMIPPolicySyncDescriptionListResult.NextLink == nil || len(*p.current.PrivateLinkServicesForMIPPolicySyncDescriptionListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *PrivateLinkServicesForMIPPolicySyncClientListByResourceGroupPager) NextPage(ctx context.Context) (PrivateLinkServicesForMIPPolicySyncClientListByResourceGroupResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return PrivateLinkServicesForMIPPolicySyncClientListByResourceGroupResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return PrivateLinkServicesForMIPPolicySyncClientListByResourceGroupResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return PrivateLinkServicesForMIPPolicySyncClientListByResourceGroupResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return PrivateLinkServicesForMIPPolicySyncClientListByResourceGroupResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		return PrivateLinkServicesForMIPPolicySyncClientListByResourceGroupResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// PrivateLinkServicesForMIPPolicySyncClientListPager provides operations for iterating over paged responses.
type PrivateLinkServicesForMIPPolicySyncClientListPager struct {
	client    *PrivateLinkServicesForMIPPolicySyncClient
	current   PrivateLinkServicesForMIPPolicySyncClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, PrivateLinkServicesForMIPPolicySyncClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *PrivateLinkServicesForMIPPolicySyncClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PrivateLinkServicesForMIPPolicySyncDescriptionListResult.NextLink == nil || len(*p.current.PrivateLinkServicesForMIPPolicySyncDescriptionListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *PrivateLinkServicesForMIPPolicySyncClientListPager) NextPage(ctx context.Context) (PrivateLinkServicesForMIPPolicySyncClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return PrivateLinkServicesForMIPPolicySyncClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return PrivateLinkServicesForMIPPolicySyncClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return PrivateLinkServicesForMIPPolicySyncClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return PrivateLinkServicesForMIPPolicySyncClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return PrivateLinkServicesForMIPPolicySyncClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// PrivateLinkServicesForO365ManagementActivityAPIClientListByResourceGroupPager provides operations for iterating over paged responses.
type PrivateLinkServicesForO365ManagementActivityAPIClientListByResourceGroupPager struct {
	client    *PrivateLinkServicesForO365ManagementActivityAPIClient
	current   PrivateLinkServicesForO365ManagementActivityAPIClientListByResourceGroupResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, PrivateLinkServicesForO365ManagementActivityAPIClientListByResourceGroupResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *PrivateLinkServicesForO365ManagementActivityAPIClientListByResourceGroupPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PrivateLinkServicesForO365ManagementActivityAPIDescriptionListResult.NextLink == nil || len(*p.current.PrivateLinkServicesForO365ManagementActivityAPIDescriptionListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *PrivateLinkServicesForO365ManagementActivityAPIClientListByResourceGroupPager) NextPage(ctx context.Context) (PrivateLinkServicesForO365ManagementActivityAPIClientListByResourceGroupResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return PrivateLinkServicesForO365ManagementActivityAPIClientListByResourceGroupResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return PrivateLinkServicesForO365ManagementActivityAPIClientListByResourceGroupResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return PrivateLinkServicesForO365ManagementActivityAPIClientListByResourceGroupResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return PrivateLinkServicesForO365ManagementActivityAPIClientListByResourceGroupResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		return PrivateLinkServicesForO365ManagementActivityAPIClientListByResourceGroupResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// PrivateLinkServicesForO365ManagementActivityAPIClientListPager provides operations for iterating over paged responses.
type PrivateLinkServicesForO365ManagementActivityAPIClientListPager struct {
	client    *PrivateLinkServicesForO365ManagementActivityAPIClient
	current   PrivateLinkServicesForO365ManagementActivityAPIClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, PrivateLinkServicesForO365ManagementActivityAPIClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *PrivateLinkServicesForO365ManagementActivityAPIClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PrivateLinkServicesForO365ManagementActivityAPIDescriptionListResult.NextLink == nil || len(*p.current.PrivateLinkServicesForO365ManagementActivityAPIDescriptionListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *PrivateLinkServicesForO365ManagementActivityAPIClientListPager) NextPage(ctx context.Context) (PrivateLinkServicesForO365ManagementActivityAPIClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return PrivateLinkServicesForO365ManagementActivityAPIClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return PrivateLinkServicesForO365ManagementActivityAPIClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return PrivateLinkServicesForO365ManagementActivityAPIClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return PrivateLinkServicesForO365ManagementActivityAPIClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return PrivateLinkServicesForO365ManagementActivityAPIClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// PrivateLinkServicesForSCCPowershellClientListByResourceGroupPager provides operations for iterating over paged responses.
type PrivateLinkServicesForSCCPowershellClientListByResourceGroupPager struct {
	client    *PrivateLinkServicesForSCCPowershellClient
	current   PrivateLinkServicesForSCCPowershellClientListByResourceGroupResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, PrivateLinkServicesForSCCPowershellClientListByResourceGroupResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *PrivateLinkServicesForSCCPowershellClientListByResourceGroupPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PrivateLinkServicesForSCCPowershellDescriptionListResult.NextLink == nil || len(*p.current.PrivateLinkServicesForSCCPowershellDescriptionListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *PrivateLinkServicesForSCCPowershellClientListByResourceGroupPager) NextPage(ctx context.Context) (PrivateLinkServicesForSCCPowershellClientListByResourceGroupResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return PrivateLinkServicesForSCCPowershellClientListByResourceGroupResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return PrivateLinkServicesForSCCPowershellClientListByResourceGroupResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return PrivateLinkServicesForSCCPowershellClientListByResourceGroupResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return PrivateLinkServicesForSCCPowershellClientListByResourceGroupResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		return PrivateLinkServicesForSCCPowershellClientListByResourceGroupResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// PrivateLinkServicesForSCCPowershellClientListPager provides operations for iterating over paged responses.
type PrivateLinkServicesForSCCPowershellClientListPager struct {
	client    *PrivateLinkServicesForSCCPowershellClient
	current   PrivateLinkServicesForSCCPowershellClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, PrivateLinkServicesForSCCPowershellClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *PrivateLinkServicesForSCCPowershellClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PrivateLinkServicesForSCCPowershellDescriptionListResult.NextLink == nil || len(*p.current.PrivateLinkServicesForSCCPowershellDescriptionListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *PrivateLinkServicesForSCCPowershellClientListPager) NextPage(ctx context.Context) (PrivateLinkServicesForSCCPowershellClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return PrivateLinkServicesForSCCPowershellClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return PrivateLinkServicesForSCCPowershellClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return PrivateLinkServicesForSCCPowershellClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return PrivateLinkServicesForSCCPowershellClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return PrivateLinkServicesForSCCPowershellClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}
