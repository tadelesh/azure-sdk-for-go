//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armsearch_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/search/armsearch"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestOperations_List(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAdminKeys_Get(t *testing.T) {
	// From example specification/search/resource-manager/Microsoft.Search/stable/2020-08-01/examples/SearchGetAdminKeys.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SearchGetAdminKeys"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsearch.NewAdminKeysClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"mysearchservice",
		&armsearch.SearchManagementRequestOptions{ClientRequestID: nil},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/search/resource-manager/Microsoft.Search/stable/2020-08-01/examples/SearchGetAdminKeys.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsearch.AdminKeyResult{
			PrimaryKey:   to.Ptr("<your primary admin API key>"),
			SecondaryKey: to.Ptr("<your secondary admin API key>"),
		}
		if !reflect.DeepEqual(exampleRes, res.AdminKeyResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AdminKeyResult)
			t.Fatalf("Mock response is not equal to example response for example specification/search/resource-manager/Microsoft.Search/stable/2020-08-01/examples/SearchGetAdminKeys.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAdminKeys_Regenerate(t *testing.T) {
	// From example specification/search/resource-manager/Microsoft.Search/stable/2020-08-01/examples/SearchRegenerateAdminKey.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SearchRegenerateAdminKey"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsearch.NewAdminKeysClient("subid", cred, &options)
	res, err := client.Regenerate(ctx,
		"rg1",
		"mysearchservice",
		armsearch.AdminKeyKindPrimary,
		&armsearch.SearchManagementRequestOptions{ClientRequestID: nil},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/search/resource-manager/Microsoft.Search/stable/2020-08-01/examples/SearchRegenerateAdminKey.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsearch.AdminKeyResult{
			PrimaryKey:   to.Ptr("<your primary admin API key>"),
			SecondaryKey: to.Ptr("<your secondary admin API key>"),
		}
		if !reflect.DeepEqual(exampleRes, res.AdminKeyResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AdminKeyResult)
			t.Fatalf("Mock response is not equal to example response for example specification/search/resource-manager/Microsoft.Search/stable/2020-08-01/examples/SearchRegenerateAdminKey.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestQueryKeys_Create(t *testing.T) {
	// From example specification/search/resource-manager/Microsoft.Search/stable/2020-08-01/examples/SearchCreateQueryKey.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SearchCreateQueryKey"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsearch.NewQueryKeysClient("subid", cred, &options)
	res, err := client.Create(ctx,
		"rg1",
		"mysearchservice",
		"Query key for browser-based clients",
		&armsearch.SearchManagementRequestOptions{ClientRequestID: nil},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/search/resource-manager/Microsoft.Search/stable/2020-08-01/examples/SearchCreateQueryKey.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsearch.QueryKey{
			Name: to.Ptr("Query key for browser-based clients"),
			Key:  to.Ptr("<a query API key>"),
		}
		if !reflect.DeepEqual(exampleRes, res.QueryKey) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.QueryKey)
			t.Fatalf("Mock response is not equal to example response for example specification/search/resource-manager/Microsoft.Search/stable/2020-08-01/examples/SearchCreateQueryKey.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestQueryKeys_ListBySearchService(t *testing.T) {
	// From example specification/search/resource-manager/Microsoft.Search/stable/2020-08-01/examples/SearchListQueryKeysBySearchService.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SearchListQueryKeysBySearchService"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsearch.NewQueryKeysClient("subid", cred, &options)
	pager := client.ListBySearchService("rg1",
		"mysearchservice",
		&armsearch.SearchManagementRequestOptions{ClientRequestID: nil},
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/search/resource-manager/Microsoft.Search/stable/2020-08-01/examples/SearchListQueryKeysBySearchService.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsearch.ListQueryKeysResult{
			Value: []*armsearch.QueryKey{
				{
					Name: to.Ptr("Query key for browser-based clients"),
					Key:  to.Ptr("<a query API key>"),
				},
				{
					Name: to.Ptr("Query key for mobile clients"),
					Key:  to.Ptr("<another query API key>"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ListQueryKeysResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ListQueryKeysResult)
			t.Fatalf("Mock response is not equal to example response for example specification/search/resource-manager/Microsoft.Search/stable/2020-08-01/examples/SearchListQueryKeysBySearchService.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestQueryKeys_Delete(t *testing.T) {
	// From example specification/search/resource-manager/Microsoft.Search/stable/2020-08-01/examples/SearchDeleteQueryKey.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SearchDeleteQueryKey"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsearch.NewQueryKeysClient("subid", cred, &options)
	_, err := client.Delete(ctx,
		"rg1",
		"mysearchservice",
		"<a query API key>",
		&armsearch.SearchManagementRequestOptions{ClientRequestID: nil},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/search/resource-manager/Microsoft.Search/stable/2020-08-01/examples/SearchDeleteQueryKey.json: %v", err)
	}
}

func TestServices_CreateOrUpdate(t *testing.T) {
	// From example specification/search/resource-manager/Microsoft.Search/stable/2020-08-01/examples/SearchCreateOrUpdateService.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SearchCreateOrUpdateService"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsearch.NewServicesClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"mysearchservice",
		armsearch.Service{
			Location: to.Ptr("westus"),
			Tags: map[string]*string{
				"app-name": to.Ptr("My e-commerce app"),
			},
			Properties: &armsearch.ServiceProperties{
				HostingMode:    to.Ptr(armsearch.HostingModeDefault),
				PartitionCount: to.Ptr[int32](1),
				ReplicaCount:   to.Ptr[int32](3),
			},
			SKU: &armsearch.SKU{
				Name: to.Ptr(armsearch.SKUNameStandard),
			},
		},
		&armsearch.SearchManagementRequestOptions{ClientRequestID: nil},
		&armsearch.ServicesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/search/resource-manager/Microsoft.Search/stable/2020-08-01/examples/SearchCreateOrUpdateService.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/search/resource-manager/Microsoft.Search/stable/2020-08-01/examples/SearchCreateOrUpdateService.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsearch.Service{
			Name:     to.Ptr("mysearchservice"),
			Type:     to.Ptr("Microsoft.Search/searchServices"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Search/searchServices/mysearchservice"),
			Location: to.Ptr("westus"),
			Tags: map[string]*string{
				"app-name": to.Ptr("My e-commerce app"),
			},
			Properties: &armsearch.ServiceProperties{
				HostingMode: to.Ptr(armsearch.HostingModeDefault),
				NetworkRuleSet: &armsearch.NetworkRuleSet{
					IPRules: []*armsearch.IPRule{},
				},
				PartitionCount:             to.Ptr[int32](1),
				PrivateEndpointConnections: []*armsearch.PrivateEndpointConnection{},
				ProvisioningState:          to.Ptr(armsearch.ProvisioningStateSucceeded),
				PublicNetworkAccess:        to.Ptr(armsearch.PublicNetworkAccessEnabled),
				ReplicaCount:               to.Ptr[int32](3),
				Status:                     to.Ptr(armsearch.SearchServiceStatusProvisioning),
				StatusDetails:              to.Ptr(""),
			},
			SKU: &armsearch.SKU{
				Name: to.Ptr(armsearch.SKUNameStandard),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Service) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Service)
			t.Fatalf("Mock response is not equal to example response for example specification/search/resource-manager/Microsoft.Search/stable/2020-08-01/examples/SearchCreateOrUpdateService.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/search/resource-manager/Microsoft.Search/stable/2020-08-01/examples/SearchCreateOrUpdateServiceToAllowAccessFromPrivateEndpoints.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SearchCreateOrUpdateServiceToAllowAccessFromPrivateEndpoints"},
	})
	client = armsearch.NewServicesClient("subid", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"mysearchservice",
		armsearch.Service{
			Location: to.Ptr("westus"),
			Tags: map[string]*string{
				"app-name": to.Ptr("My e-commerce app"),
			},
			Properties: &armsearch.ServiceProperties{
				HostingMode:         to.Ptr(armsearch.HostingModeDefault),
				PartitionCount:      to.Ptr[int32](1),
				PublicNetworkAccess: to.Ptr(armsearch.PublicNetworkAccessDisabled),
				ReplicaCount:        to.Ptr[int32](3),
			},
			SKU: &armsearch.SKU{
				Name: to.Ptr(armsearch.SKUNameStandard),
			},
		},
		&armsearch.SearchManagementRequestOptions{ClientRequestID: nil},
		&armsearch.ServicesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/search/resource-manager/Microsoft.Search/stable/2020-08-01/examples/SearchCreateOrUpdateServiceToAllowAccessFromPrivateEndpoints.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/search/resource-manager/Microsoft.Search/stable/2020-08-01/examples/SearchCreateOrUpdateServiceToAllowAccessFromPrivateEndpoints.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsearch.Service{
			Name:     to.Ptr("mysearchservice"),
			Type:     to.Ptr("Microsoft.Search/searchServices"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Search/searchServices/mysearchservice"),
			Location: to.Ptr("westus"),
			Tags: map[string]*string{
				"app-name": to.Ptr("My e-commerce app"),
			},
			Properties: &armsearch.ServiceProperties{
				HostingMode: to.Ptr(armsearch.HostingModeDefault),
				NetworkRuleSet: &armsearch.NetworkRuleSet{
					IPRules: []*armsearch.IPRule{},
				},
				PartitionCount:             to.Ptr[int32](1),
				PrivateEndpointConnections: []*armsearch.PrivateEndpointConnection{},
				ProvisioningState:          to.Ptr(armsearch.ProvisioningStateSucceeded),
				PublicNetworkAccess:        to.Ptr(armsearch.PublicNetworkAccessDisabled),
				ReplicaCount:               to.Ptr[int32](3),
				Status:                     to.Ptr(armsearch.SearchServiceStatusProvisioning),
				StatusDetails:              to.Ptr(""),
			},
			SKU: &armsearch.SKU{
				Name: to.Ptr(armsearch.SKUNameStandard),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Service) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Service)
			t.Fatalf("Mock response is not equal to example response for example specification/search/resource-manager/Microsoft.Search/stable/2020-08-01/examples/SearchCreateOrUpdateServiceToAllowAccessFromPrivateEndpoints.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/search/resource-manager/Microsoft.Search/stable/2020-08-01/examples/SearchCreateOrUpdateServiceToAllowAccessFromPublicCustomIPs.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SearchCreateOrUpdateServiceToAllowAccessFromPublicCustomIPs"},
	})
	client = armsearch.NewServicesClient("subid", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"mysearchservice",
		armsearch.Service{
			Location: to.Ptr("westus"),
			Tags: map[string]*string{
				"app-name": to.Ptr("My e-commerce app"),
			},
			Properties: &armsearch.ServiceProperties{
				HostingMode: to.Ptr(armsearch.HostingModeDefault),
				NetworkRuleSet: &armsearch.NetworkRuleSet{
					IPRules: []*armsearch.IPRule{
						{
							Value: to.Ptr("123.4.5.6"),
						},
						{
							Value: to.Ptr("123.4.6.0/18"),
						}},
				},
				PartitionCount: to.Ptr[int32](1),
				ReplicaCount:   to.Ptr[int32](1),
			},
			SKU: &armsearch.SKU{
				Name: to.Ptr(armsearch.SKUNameStandard),
			},
		},
		&armsearch.SearchManagementRequestOptions{ClientRequestID: nil},
		&armsearch.ServicesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/search/resource-manager/Microsoft.Search/stable/2020-08-01/examples/SearchCreateOrUpdateServiceToAllowAccessFromPublicCustomIPs.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/search/resource-manager/Microsoft.Search/stable/2020-08-01/examples/SearchCreateOrUpdateServiceToAllowAccessFromPublicCustomIPs.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsearch.Service{
			Name:     to.Ptr("mysearchservice"),
			Type:     to.Ptr("Microsoft.Search/searchServices"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Search/searchServices/mysearchservice"),
			Location: to.Ptr("westus"),
			Tags: map[string]*string{
				"app-name": to.Ptr("My e-commerce app"),
			},
			Properties: &armsearch.ServiceProperties{
				HostingMode: to.Ptr(armsearch.HostingModeDefault),
				NetworkRuleSet: &armsearch.NetworkRuleSet{
					IPRules: []*armsearch.IPRule{
						{
							Value: to.Ptr("123.4.5.6"),
						},
						{
							Value: to.Ptr("123.4.6.0/18"),
						}},
				},
				PartitionCount:             to.Ptr[int32](1),
				PrivateEndpointConnections: []*armsearch.PrivateEndpointConnection{},
				ProvisioningState:          to.Ptr(armsearch.ProvisioningStateSucceeded),
				PublicNetworkAccess:        to.Ptr(armsearch.PublicNetworkAccessEnabled),
				ReplicaCount:               to.Ptr[int32](1),
				Status:                     to.Ptr(armsearch.SearchServiceStatusProvisioning),
				StatusDetails:              to.Ptr(""),
			},
			SKU: &armsearch.SKU{
				Name: to.Ptr(armsearch.SKUNameStandard),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Service) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Service)
			t.Fatalf("Mock response is not equal to example response for example specification/search/resource-manager/Microsoft.Search/stable/2020-08-01/examples/SearchCreateOrUpdateServiceToAllowAccessFromPublicCustomIPs.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/search/resource-manager/Microsoft.Search/stable/2020-08-01/examples/SearchCreateOrUpdateServiceWithIdentity.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SearchCreateOrUpdateServiceWithIdentity"},
	})
	client = armsearch.NewServicesClient("subid", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"mysearchservice",
		armsearch.Service{
			Location: to.Ptr("westus"),
			Tags: map[string]*string{
				"app-name": to.Ptr("My e-commerce app"),
			},
			Identity: &armsearch.Identity{
				Type: to.Ptr(armsearch.IdentityTypeSystemAssigned),
			},
			Properties: &armsearch.ServiceProperties{
				HostingMode:    to.Ptr(armsearch.HostingModeDefault),
				PartitionCount: to.Ptr[int32](1),
				ReplicaCount:   to.Ptr[int32](3),
			},
			SKU: &armsearch.SKU{
				Name: to.Ptr(armsearch.SKUNameStandard),
			},
		},
		&armsearch.SearchManagementRequestOptions{ClientRequestID: nil},
		&armsearch.ServicesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/search/resource-manager/Microsoft.Search/stable/2020-08-01/examples/SearchCreateOrUpdateServiceWithIdentity.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/search/resource-manager/Microsoft.Search/stable/2020-08-01/examples/SearchCreateOrUpdateServiceWithIdentity.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsearch.Service{
			Name:     to.Ptr("mysearchservice"),
			Type:     to.Ptr("Microsoft.Search/searchServices"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Search/searchServices/mysearchservice"),
			Location: to.Ptr("westus"),
			Tags: map[string]*string{
				"app-name": to.Ptr("My e-commerce app"),
			},
			Identity: &armsearch.Identity{
				Type:        to.Ptr(armsearch.IdentityTypeSystemAssigned),
				PrincipalID: to.Ptr("9d1e1f18-2122-4988-a11c-878782e40a5c"),
				TenantID:    to.Ptr("f686d426-8d16-42db-81b7-ab578e110ccd"),
			},
			Properties: &armsearch.ServiceProperties{
				HostingMode: to.Ptr(armsearch.HostingModeDefault),
				NetworkRuleSet: &armsearch.NetworkRuleSet{
					IPRules: []*armsearch.IPRule{},
				},
				PartitionCount:             to.Ptr[int32](1),
				PrivateEndpointConnections: []*armsearch.PrivateEndpointConnection{},
				ProvisioningState:          to.Ptr(armsearch.ProvisioningStateSucceeded),
				PublicNetworkAccess:        to.Ptr(armsearch.PublicNetworkAccessEnabled),
				ReplicaCount:               to.Ptr[int32](3),
				Status:                     to.Ptr(armsearch.SearchServiceStatusProvisioning),
				StatusDetails:              to.Ptr(""),
			},
			SKU: &armsearch.SKU{
				Name: to.Ptr(armsearch.SKUNameStandard),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Service) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Service)
			t.Fatalf("Mock response is not equal to example response for example specification/search/resource-manager/Microsoft.Search/stable/2020-08-01/examples/SearchCreateOrUpdateServiceWithIdentity.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServices_Update(t *testing.T) {
	// From example specification/search/resource-manager/Microsoft.Search/stable/2020-08-01/examples/SearchUpdateService.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SearchUpdateService"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsearch.NewServicesClient("subid", cred, &options)
	res, err := client.Update(ctx,
		"rg1",
		"mysearchservice",
		armsearch.ServiceUpdate{
			Properties: &armsearch.ServiceProperties{
				ReplicaCount: to.Ptr[int32](2),
			},
			Tags: map[string]*string{
				"app-name": to.Ptr("My e-commerce app"),
				"new-tag":  to.Ptr("Adding a new tag"),
			},
		},
		&armsearch.SearchManagementRequestOptions{ClientRequestID: nil},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/search/resource-manager/Microsoft.Search/stable/2020-08-01/examples/SearchUpdateService.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsearch.Service{
			Name:     to.Ptr("mysearchservice"),
			Type:     to.Ptr("Microsoft.Search/searchServices"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Search/searchServices/mysearchservice"),
			Location: to.Ptr("westus"),
			Tags: map[string]*string{
				"app-name": to.Ptr("My e-commerce app"),
				"new-tag":  to.Ptr("Adding a new tag"),
			},
			Properties: &armsearch.ServiceProperties{
				HostingMode: to.Ptr(armsearch.HostingModeDefault),
				NetworkRuleSet: &armsearch.NetworkRuleSet{
					IPRules: []*armsearch.IPRule{},
				},
				PartitionCount:             to.Ptr[int32](1),
				PrivateEndpointConnections: []*armsearch.PrivateEndpointConnection{},
				ProvisioningState:          to.Ptr(armsearch.ProvisioningStateSucceeded),
				PublicNetworkAccess:        to.Ptr(armsearch.PublicNetworkAccessEnabled),
				ReplicaCount:               to.Ptr[int32](2),
				Status:                     to.Ptr(armsearch.SearchServiceStatusProvisioning),
				StatusDetails:              to.Ptr(""),
			},
			SKU: &armsearch.SKU{
				Name: to.Ptr(armsearch.SKUNameStandard),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Service) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Service)
			t.Fatalf("Mock response is not equal to example response for example specification/search/resource-manager/Microsoft.Search/stable/2020-08-01/examples/SearchUpdateService.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/search/resource-manager/Microsoft.Search/stable/2020-08-01/examples/SearchUpdateServiceToRemoveIdentity.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SearchUpdateServiceToRemoveIdentity"},
	})
	client = armsearch.NewServicesClient("subid", cred, &options)
	res, err = client.Update(ctx,
		"rg1",
		"mysearchservice",
		armsearch.ServiceUpdate{
			Identity: &armsearch.Identity{
				Type: to.Ptr(armsearch.IdentityTypeNone),
			},
			SKU: &armsearch.SKU{
				Name: to.Ptr(armsearch.SKUNameStandard),
			},
		},
		&armsearch.SearchManagementRequestOptions{ClientRequestID: nil},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/search/resource-manager/Microsoft.Search/stable/2020-08-01/examples/SearchUpdateServiceToRemoveIdentity.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsearch.Service{
			Name:     to.Ptr("mysearchservice"),
			Type:     to.Ptr("Microsoft.Search/searchServices"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Search/searchServices/mysearchservice"),
			Location: to.Ptr("westus"),
			Tags:     map[string]*string{},
			Identity: &armsearch.Identity{
				Type: to.Ptr(armsearch.IdentityTypeNone),
			},
			Properties: &armsearch.ServiceProperties{
				HostingMode: to.Ptr(armsearch.HostingModeDefault),
				NetworkRuleSet: &armsearch.NetworkRuleSet{
					IPRules: []*armsearch.IPRule{},
				},
				PartitionCount:             to.Ptr[int32](1),
				PrivateEndpointConnections: []*armsearch.PrivateEndpointConnection{},
				ProvisioningState:          to.Ptr(armsearch.ProvisioningStateSucceeded),
				PublicNetworkAccess:        to.Ptr(armsearch.PublicNetworkAccessEnabled),
				ReplicaCount:               to.Ptr[int32](3),
				Status:                     to.Ptr(armsearch.SearchServiceStatusRunning),
				StatusDetails:              to.Ptr(""),
			},
			SKU: &armsearch.SKU{
				Name: to.Ptr(armsearch.SKUNameStandard),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Service) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Service)
			t.Fatalf("Mock response is not equal to example response for example specification/search/resource-manager/Microsoft.Search/stable/2020-08-01/examples/SearchUpdateServiceToRemoveIdentity.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/search/resource-manager/Microsoft.Search/stable/2020-08-01/examples/SearchUpdateServiceToAllowAccessFromPrivateEndpoints.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"searchUpdateServiceToAllowAccessFromPrivateEndpoints"},
	})
	client = armsearch.NewServicesClient("subid", cred, &options)
	res, err = client.Update(ctx,
		"rg1",
		"mysearchservice",
		armsearch.ServiceUpdate{
			Properties: &armsearch.ServiceProperties{
				PartitionCount:      to.Ptr[int32](1),
				PublicNetworkAccess: to.Ptr(armsearch.PublicNetworkAccessDisabled),
				ReplicaCount:        to.Ptr[int32](1),
			},
		},
		&armsearch.SearchManagementRequestOptions{ClientRequestID: nil},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/search/resource-manager/Microsoft.Search/stable/2020-08-01/examples/SearchUpdateServiceToAllowAccessFromPrivateEndpoints.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsearch.Service{
			Name:     to.Ptr("mysearchservice"),
			Type:     to.Ptr("Microsoft.Search/searchServices"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Search/searchServices/mysearchservice"),
			Location: to.Ptr("westus"),
			Tags: map[string]*string{
				"app-name": to.Ptr("My e-commerce app"),
				"new-tag":  to.Ptr("Adding a new tag"),
			},
			Properties: &armsearch.ServiceProperties{
				HostingMode: to.Ptr(armsearch.HostingModeDefault),
				NetworkRuleSet: &armsearch.NetworkRuleSet{
					IPRules: []*armsearch.IPRule{},
				},
				PartitionCount:             to.Ptr[int32](1),
				PrivateEndpointConnections: []*armsearch.PrivateEndpointConnection{},
				ProvisioningState:          to.Ptr(armsearch.ProvisioningStateSucceeded),
				PublicNetworkAccess:        to.Ptr(armsearch.PublicNetworkAccessDisabled),
				ReplicaCount:               to.Ptr[int32](1),
				Status:                     to.Ptr(armsearch.SearchServiceStatusRunning),
				StatusDetails:              to.Ptr(""),
			},
			SKU: &armsearch.SKU{
				Name: to.Ptr(armsearch.SKUNameBasic),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Service) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Service)
			t.Fatalf("Mock response is not equal to example response for example specification/search/resource-manager/Microsoft.Search/stable/2020-08-01/examples/SearchUpdateServiceToAllowAccessFromPrivateEndpoints.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/search/resource-manager/Microsoft.Search/stable/2020-08-01/examples/SearchUpdateServiceToAllowAccessFromPublicCustomIPs.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"searchUpdateServiceToAllowAccessFromPublicCustomIPs"},
	})
	client = armsearch.NewServicesClient("subid", cred, &options)
	res, err = client.Update(ctx,
		"rg1",
		"mysearchservice",
		armsearch.ServiceUpdate{
			Properties: &armsearch.ServiceProperties{
				NetworkRuleSet: &armsearch.NetworkRuleSet{
					IPRules: []*armsearch.IPRule{
						{
							Value: to.Ptr("123.4.5.6"),
						},
						{
							Value: to.Ptr("123.4.6.0/18"),
						}},
				},
				PartitionCount:      to.Ptr[int32](1),
				PublicNetworkAccess: to.Ptr(armsearch.PublicNetworkAccessEnabled),
				ReplicaCount:        to.Ptr[int32](3),
			},
		},
		&armsearch.SearchManagementRequestOptions{ClientRequestID: nil},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/search/resource-manager/Microsoft.Search/stable/2020-08-01/examples/SearchUpdateServiceToAllowAccessFromPublicCustomIPs.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsearch.Service{
			Name:     to.Ptr("mysearchservice"),
			Type:     to.Ptr("Microsoft.Search/searchServices"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Search/searchServices/mysearchservice"),
			Location: to.Ptr("westus"),
			Tags: map[string]*string{
				"app-name": to.Ptr("My e-commerce app"),
				"new-tag":  to.Ptr("Adding a new tag"),
			},
			Properties: &armsearch.ServiceProperties{
				HostingMode: to.Ptr(armsearch.HostingModeDefault),
				NetworkRuleSet: &armsearch.NetworkRuleSet{
					IPRules: []*armsearch.IPRule{
						{
							Value: to.Ptr("10.2.3.4"),
						}},
				},
				PartitionCount:             to.Ptr[int32](1),
				PrivateEndpointConnections: []*armsearch.PrivateEndpointConnection{},
				ProvisioningState:          to.Ptr(armsearch.ProvisioningStateSucceeded),
				PublicNetworkAccess:        to.Ptr(armsearch.PublicNetworkAccessEnabled),
				ReplicaCount:               to.Ptr[int32](3),
				Status:                     to.Ptr(armsearch.SearchServiceStatusRunning),
				StatusDetails:              to.Ptr(""),
			},
			SKU: &armsearch.SKU{
				Name: to.Ptr(armsearch.SKUNameStandard),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Service) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Service)
			t.Fatalf("Mock response is not equal to example response for example specification/search/resource-manager/Microsoft.Search/stable/2020-08-01/examples/SearchUpdateServiceToAllowAccessFromPublicCustomIPs.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServices_Get(t *testing.T) {
	// From example specification/search/resource-manager/Microsoft.Search/stable/2020-08-01/examples/SearchGetService.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SearchGetService"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsearch.NewServicesClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"mysearchservice",
		&armsearch.SearchManagementRequestOptions{ClientRequestID: nil},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/search/resource-manager/Microsoft.Search/stable/2020-08-01/examples/SearchGetService.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsearch.Service{
			Name:     to.Ptr("mysearchservice"),
			Type:     to.Ptr("Microsoft.Search/searchServices"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Search/searchServices/mysearchservice"),
			Location: to.Ptr("westus"),
			Tags: map[string]*string{
				"app-name": to.Ptr("My e-commerce app"),
			},
			Properties: &armsearch.ServiceProperties{
				HostingMode: to.Ptr(armsearch.HostingModeDefault),
				NetworkRuleSet: &armsearch.NetworkRuleSet{
					IPRules: []*armsearch.IPRule{},
				},
				PartitionCount:             to.Ptr[int32](1),
				PrivateEndpointConnections: []*armsearch.PrivateEndpointConnection{},
				ProvisioningState:          to.Ptr(armsearch.ProvisioningStateSucceeded),
				PublicNetworkAccess:        to.Ptr(armsearch.PublicNetworkAccessEnabled),
				ReplicaCount:               to.Ptr[int32](3),
				Status:                     to.Ptr(armsearch.SearchServiceStatusRunning),
				StatusDetails:              to.Ptr(""),
			},
			SKU: &armsearch.SKU{
				Name: to.Ptr(armsearch.SKUNameStandard),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Service) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Service)
			t.Fatalf("Mock response is not equal to example response for example specification/search/resource-manager/Microsoft.Search/stable/2020-08-01/examples/SearchGetService.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServices_Delete(t *testing.T) {
	// From example specification/search/resource-manager/Microsoft.Search/stable/2020-08-01/examples/SearchDeleteService.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SearchDeleteService"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsearch.NewServicesClient("subid", cred, &options)
	_, err := client.Delete(ctx,
		"rg1",
		"mysearchservice",
		&armsearch.SearchManagementRequestOptions{ClientRequestID: nil},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/search/resource-manager/Microsoft.Search/stable/2020-08-01/examples/SearchDeleteService.json: %v", err)
	}
}

func TestServices_ListByResourceGroup(t *testing.T) {
	// From example specification/search/resource-manager/Microsoft.Search/stable/2020-08-01/examples/SearchListServicesByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SearchListServicesByResourceGroup"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsearch.NewServicesClient("subid", cred, &options)
	pager := client.ListByResourceGroup("rg1",
		&armsearch.SearchManagementRequestOptions{ClientRequestID: nil},
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/search/resource-manager/Microsoft.Search/stable/2020-08-01/examples/SearchListServicesByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsearch.ServiceListResult{
			Value: []*armsearch.Service{
				{
					Name:     to.Ptr("mysearchservice"),
					Type:     to.Ptr("Microsoft.Search/searchServices"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Search/searchServices/mysearchservice"),
					Location: to.Ptr("westus"),
					Tags: map[string]*string{
						"app-name": to.Ptr("My e-commerce app"),
					},
					Properties: &armsearch.ServiceProperties{
						HostingMode: to.Ptr(armsearch.HostingModeDefault),
						NetworkRuleSet: &armsearch.NetworkRuleSet{
							IPRules: []*armsearch.IPRule{},
						},
						PartitionCount:             to.Ptr[int32](1),
						PrivateEndpointConnections: []*armsearch.PrivateEndpointConnection{},
						ProvisioningState:          to.Ptr(armsearch.ProvisioningStateSucceeded),
						PublicNetworkAccess:        to.Ptr(armsearch.PublicNetworkAccessEnabled),
						ReplicaCount:               to.Ptr[int32](3),
						Status:                     to.Ptr(armsearch.SearchServiceStatusRunning),
						StatusDetails:              to.Ptr(""),
					},
					SKU: &armsearch.SKU{
						Name: to.Ptr(armsearch.SKUNameStandard),
					},
				},
				{
					Name:     to.Ptr("mysearchservice2"),
					Type:     to.Ptr("Microsoft.Search/searchServices"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Search/searchServices/mysearchservice2"),
					Location: to.Ptr("eastus"),
					Tags: map[string]*string{
						"app-name": to.Ptr("My e-commerce app"),
					},
					Properties: &armsearch.ServiceProperties{
						HostingMode: to.Ptr(armsearch.HostingModeDefault),
						NetworkRuleSet: &armsearch.NetworkRuleSet{
							IPRules: []*armsearch.IPRule{},
						},
						PartitionCount:             to.Ptr[int32](1),
						PrivateEndpointConnections: []*armsearch.PrivateEndpointConnection{},
						ProvisioningState:          to.Ptr(armsearch.ProvisioningStateSucceeded),
						PublicNetworkAccess:        to.Ptr(armsearch.PublicNetworkAccessEnabled),
						ReplicaCount:               to.Ptr[int32](1),
						Status:                     to.Ptr(armsearch.SearchServiceStatusRunning),
						StatusDetails:              to.Ptr(""),
					},
					SKU: &armsearch.SKU{
						Name: to.Ptr(armsearch.SKUNameBasic),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ServiceListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ServiceListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/search/resource-manager/Microsoft.Search/stable/2020-08-01/examples/SearchListServicesByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServices_ListBySubscription(t *testing.T) {
	// From example specification/search/resource-manager/Microsoft.Search/stable/2020-08-01/examples/SearchListServicesBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SearchListServicesBySubscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsearch.NewServicesClient("subid", cred, &options)
	pager := client.ListBySubscription(&armsearch.SearchManagementRequestOptions{ClientRequestID: nil},
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/search/resource-manager/Microsoft.Search/stable/2020-08-01/examples/SearchListServicesBySubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsearch.ServiceListResult{
			Value: []*armsearch.Service{
				{
					Name:     to.Ptr("mysearchservice"),
					Type:     to.Ptr("Microsoft.Search/searchServices"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Search/searchServices/mysearchservice"),
					Location: to.Ptr("westus"),
					Tags: map[string]*string{
						"app-name": to.Ptr("My e-commerce app"),
					},
					Properties: &armsearch.ServiceProperties{
						HostingMode: to.Ptr(armsearch.HostingModeDefault),
						NetworkRuleSet: &armsearch.NetworkRuleSet{
							IPRules: []*armsearch.IPRule{},
						},
						PartitionCount:             to.Ptr[int32](1),
						PrivateEndpointConnections: []*armsearch.PrivateEndpointConnection{},
						ProvisioningState:          to.Ptr(armsearch.ProvisioningStateSucceeded),
						PublicNetworkAccess:        to.Ptr(armsearch.PublicNetworkAccessEnabled),
						ReplicaCount:               to.Ptr[int32](3),
						Status:                     to.Ptr(armsearch.SearchServiceStatusRunning),
						StatusDetails:              to.Ptr(""),
					},
					SKU: &armsearch.SKU{
						Name: to.Ptr(armsearch.SKUNameStandard),
					},
				},
				{
					Name:     to.Ptr("mysearchservice2"),
					Type:     to.Ptr("Microsoft.Search/searchServices"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Search/searchServices/mysearchservice2"),
					Location: to.Ptr("eastus"),
					Tags: map[string]*string{
						"app-name": to.Ptr("My e-commerce app"),
					},
					Properties: &armsearch.ServiceProperties{
						HostingMode: to.Ptr(armsearch.HostingModeDefault),
						NetworkRuleSet: &armsearch.NetworkRuleSet{
							IPRules: []*armsearch.IPRule{},
						},
						PartitionCount:             to.Ptr[int32](1),
						PrivateEndpointConnections: []*armsearch.PrivateEndpointConnection{},
						ProvisioningState:          to.Ptr(armsearch.ProvisioningStateSucceeded),
						PublicNetworkAccess:        to.Ptr(armsearch.PublicNetworkAccessEnabled),
						ReplicaCount:               to.Ptr[int32](1),
						Status:                     to.Ptr(armsearch.SearchServiceStatusRunning),
						StatusDetails:              to.Ptr(""),
					},
					SKU: &armsearch.SKU{
						Name: to.Ptr(armsearch.SKUNameBasic),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ServiceListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ServiceListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/search/resource-manager/Microsoft.Search/stable/2020-08-01/examples/SearchListServicesBySubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServices_CheckNameAvailability(t *testing.T) {
	// From example specification/search/resource-manager/Microsoft.Search/stable/2020-08-01/examples/SearchCheckNameAvailability.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SearchCheckNameAvailability"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsearch.NewServicesClient("subid", cred, &options)
	res, err := client.CheckNameAvailability(ctx,
		armsearch.CheckNameAvailabilityInput{
			Name: to.Ptr("mysearchservice"),
			Type: to.Ptr("searchServices"),
		},
		&armsearch.SearchManagementRequestOptions{ClientRequestID: nil},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/search/resource-manager/Microsoft.Search/stable/2020-08-01/examples/SearchCheckNameAvailability.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsearch.CheckNameAvailabilityOutput{
			Message:         to.Ptr(""),
			IsNameAvailable: to.Ptr(false),
			Reason:          to.Ptr(armsearch.UnavailableNameReasonAlreadyExists),
		}
		if !reflect.DeepEqual(exampleRes, res.CheckNameAvailabilityOutput) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CheckNameAvailabilityOutput)
			t.Fatalf("Mock response is not equal to example response for example specification/search/resource-manager/Microsoft.Search/stable/2020-08-01/examples/SearchCheckNameAvailability.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateLinkResources_ListSupported(t *testing.T) {
	// From example specification/search/resource-manager/Microsoft.Search/stable/2020-08-01/examples/ListSupportedPrivateLinkResources.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ListSupportedPrivateLinkResources"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsearch.NewPrivateLinkResourcesClient("subid", cred, &options)
	pager := client.ListSupported("rg1",
		"mysearchservice",
		&armsearch.SearchManagementRequestOptions{ClientRequestID: nil},
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/search/resource-manager/Microsoft.Search/stable/2020-08-01/examples/ListSupportedPrivateLinkResources.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsearch.PrivateLinkResourcesResult{
			Value: []*armsearch.PrivateLinkResource{
				{
					Name: to.Ptr("searchService"),
					Type: to.Ptr("Microsoft.Search/searchServices/privateLinkResources"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Search/searchServices/mysearchservice/privateLinkResources/searchService"),
					Properties: &armsearch.PrivateLinkResourceProperties{
						GroupID: to.Ptr("searchService"),
						RequiredMembers: []*string{
							to.Ptr("searchService")},
						RequiredZoneNames: []*string{
							to.Ptr("privatelink.search.windows.net")},
						ShareablePrivateLinkResourceTypes: []*armsearch.ShareablePrivateLinkResourceType{
							{
								Name: to.Ptr("blob"),
								Properties: &armsearch.ShareablePrivateLinkResourceProperties{
									Type:        to.Ptr("Microsoft.Storage/storageAccounts"),
									Description: to.Ptr("Azure Cognitive Search indexers can connect to blobs in Azure Storage for reading data (data source), for writing intermediate results of indexer execution (annotation cache, preview) or for storing any knowledge store projections (preview)"),
									GroupID:     to.Ptr("blob"),
								},
							},
							{
								Name: to.Ptr("table"),
								Properties: &armsearch.ShareablePrivateLinkResourceProperties{
									Type:        to.Ptr("Microsoft.Storage/storageAccounts"),
									Description: to.Ptr("Azure Cognitive Search indexers can connect to tables in Azure Storage for reading data (data source), for writing book-keeping information about intermediate results of indexer execution (annotation cache, preview) or for storing any knowledge store projections (preview)"),
									GroupID:     to.Ptr("table"),
								},
							},
							{
								Name: to.Ptr("Sql"),
								Properties: &armsearch.ShareablePrivateLinkResourceProperties{
									Type:        to.Ptr("Microsoft.DocumentDB/databaseAccounts"),
									Description: to.Ptr("Azure Cognitive Search indexers can connect to CosmosDB using the SQL head for reading data (data source)."),
									GroupID:     to.Ptr("Sql"),
								},
							},
							{
								Name: to.Ptr("plr"),
								Properties: &armsearch.ShareablePrivateLinkResourceProperties{
									Type:        to.Ptr("Microsoft.Sql/servers"),
									Description: to.Ptr("Azure Cognitive Search indexers can connect to AzureSQL databases in a SQL server for reading data (data source)."),
									GroupID:     to.Ptr("sqlServer"),
								},
							},
							{
								Name: to.Ptr("vault"),
								Properties: &armsearch.ShareablePrivateLinkResourceProperties{
									Type:        to.Ptr("Microsoft.KeyVault/vaults"),
									Description: to.Ptr("Azure Cognitive Search can access keys in Azure Key Vault to encrypt search index and synonym map data"),
									GroupID:     to.Ptr("vault"),
								},
							},
							{
								Name: to.Ptr("plr"),
								Properties: &armsearch.ShareablePrivateLinkResourceProperties{
									Type:        to.Ptr("Microsoft.DBforMySQL/servers"),
									Description: to.Ptr("Azure Cognitive Search indexers can connect to MySQL databases for reading data (data source, preview)."),
									GroupID:     to.Ptr("mysqlServer"),
								},
							},
							{
								Name: to.Ptr("site"),
								Properties: &armsearch.ShareablePrivateLinkResourceProperties{
									Type:        to.Ptr("Microsoft.Web/sites"),
									Description: to.Ptr("Azure Cognitive Search indexers can connect to App Services when executing custom web api skills that can be present in a skillset (optional) attached to the indexer."),
									GroupID:     to.Ptr("sites"),
								},
							}},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PrivateLinkResourcesResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PrivateLinkResourcesResult)
			t.Fatalf("Mock response is not equal to example response for example specification/search/resource-manager/Microsoft.Search/stable/2020-08-01/examples/ListSupportedPrivateLinkResources.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnections_Update(t *testing.T) {
	// From example specification/search/resource-manager/Microsoft.Search/stable/2020-08-01/examples/UpdatePrivateEndpointConnection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateEndpointConnectionUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsearch.NewPrivateEndpointConnectionsClient("subid", cred, &options)
	res, err := client.Update(ctx,
		"rg1",
		"mysearchservice",
		"testEndpoint.50bf4fbe-d7c1-4b48-a642-4f5892642546",
		armsearch.PrivateEndpointConnection{
			Properties: &armsearch.PrivateEndpointConnectionProperties{
				PrivateLinkServiceConnectionState: &armsearch.PrivateEndpointConnectionPropertiesPrivateLinkServiceConnectionState{
					Description: to.Ptr("Rejected for some reason"),
					Status:      to.Ptr(armsearch.PrivateLinkServiceConnectionStatusRejected),
				},
			},
		},
		&armsearch.SearchManagementRequestOptions{ClientRequestID: nil},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/search/resource-manager/Microsoft.Search/stable/2020-08-01/examples/UpdatePrivateEndpointConnection.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsearch.PrivateEndpointConnection{
			Name: to.Ptr("testEndpoint.50bf4fbe-d7c1-4b48-a642-4f5892642546"),
			Type: to.Ptr("Microsoft.Search/searchServices/privateEndpointConnections"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Search/searchServices/mysearchservice/privateEndpointConnections/testEndpoint.50bf4fbe-d7c1-4b48-a642-4f5892642546"),
			Properties: &armsearch.PrivateEndpointConnectionProperties{
				PrivateEndpoint: &armsearch.PrivateEndpointConnectionPropertiesPrivateEndpoint{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/privateEndpoints/testEndpoint"),
				},
				PrivateLinkServiceConnectionState: &armsearch.PrivateEndpointConnectionPropertiesPrivateLinkServiceConnectionState{
					Description:     to.Ptr("Rejected for some reason"),
					ActionsRequired: to.Ptr("None"),
					Status:          to.Ptr(armsearch.PrivateLinkServiceConnectionStatusRejected),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateEndpointConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/search/resource-manager/Microsoft.Search/stable/2020-08-01/examples/UpdatePrivateEndpointConnection.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnections_Get(t *testing.T) {
	// From example specification/search/resource-manager/Microsoft.Search/stable/2020-08-01/examples/GetPrivateEndpointConnection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateEndpointConnectionGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsearch.NewPrivateEndpointConnectionsClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"mysearchservice",
		"testEndpoint.50bf4fbe-d7c1-4b48-a642-4f5892642546",
		&armsearch.SearchManagementRequestOptions{ClientRequestID: nil},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/search/resource-manager/Microsoft.Search/stable/2020-08-01/examples/GetPrivateEndpointConnection.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsearch.PrivateEndpointConnection{
			Name: to.Ptr("testEndpoint.50bf4fbe-d7c1-4b48-a642-4f5892642546"),
			Type: to.Ptr("Microsoft.Search/searchServices/privateEndpointConnections"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Search/searchServices/mysearchservice/privateEndpointConnections/testEndpoint.50bf4fbe-d7c1-4b48-a642-4f5892642546"),
			Properties: &armsearch.PrivateEndpointConnectionProperties{
				PrivateEndpoint: &armsearch.PrivateEndpointConnectionPropertiesPrivateEndpoint{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/privateEndpoints/testEndpoint"),
				},
				PrivateLinkServiceConnectionState: &armsearch.PrivateEndpointConnectionPropertiesPrivateLinkServiceConnectionState{
					Description:     to.Ptr(""),
					ActionsRequired: to.Ptr("None"),
					Status:          to.Ptr(armsearch.PrivateLinkServiceConnectionStatusApproved),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateEndpointConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/search/resource-manager/Microsoft.Search/stable/2020-08-01/examples/GetPrivateEndpointConnection.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnections_Delete(t *testing.T) {
	// From example specification/search/resource-manager/Microsoft.Search/stable/2020-08-01/examples/DeletePrivateEndpointConnection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateEndpointConnectionDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsearch.NewPrivateEndpointConnectionsClient("subid", cred, &options)
	res, err := client.Delete(ctx,
		"rg1",
		"mysearchservice",
		"testEndpoint.50bf4fbe-d7c1-4b48-a642-4f5892642546",
		&armsearch.SearchManagementRequestOptions{ClientRequestID: nil},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/search/resource-manager/Microsoft.Search/stable/2020-08-01/examples/DeletePrivateEndpointConnection.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsearch.PrivateEndpointConnection{
			Name: to.Ptr("testEndpoint.50bf4fbe-d7c1-4b48-a642-4f5892642546"),
			Type: to.Ptr("Microsoft.Search/searchServices/privateEndpointConnections"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Search/searchServices/mysearchservice/privateEndpointConnections/testEndpoint.50bf4fbe-d7c1-4b48-a642-4f5892642546"),
			Properties: &armsearch.PrivateEndpointConnectionProperties{
				PrivateEndpoint: &armsearch.PrivateEndpointConnectionPropertiesPrivateEndpoint{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/privateEndpoints/testEndpoint"),
				},
				PrivateLinkServiceConnectionState: &armsearch.PrivateEndpointConnectionPropertiesPrivateLinkServiceConnectionState{
					Description:     to.Ptr(""),
					ActionsRequired: to.Ptr("None"),
					Status:          to.Ptr(armsearch.PrivateLinkServiceConnectionStatusDisconnected),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateEndpointConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/search/resource-manager/Microsoft.Search/stable/2020-08-01/examples/DeletePrivateEndpointConnection.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnections_ListByService(t *testing.T) {
	// From example specification/search/resource-manager/Microsoft.Search/stable/2020-08-01/examples/ListPrivateEndpointConnectionsByService.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ListPrivateEndpointConnectionsByService"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsearch.NewPrivateEndpointConnectionsClient("subid", cred, &options)
	pager := client.ListByService("rg1",
		"mysearchservice",
		&armsearch.SearchManagementRequestOptions{ClientRequestID: nil},
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/search/resource-manager/Microsoft.Search/stable/2020-08-01/examples/ListPrivateEndpointConnectionsByService.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsearch.PrivateEndpointConnectionListResult{
			Value: []*armsearch.PrivateEndpointConnection{
				{
					Name: to.Ptr("testEndpoint.50bf4fbe-d7c1-4b48-a642-4f5892642546"),
					Type: to.Ptr("Microsoft.Search/searchServices/privateEndpointConnections"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Search/searchServices/mysearchservice/privateEndpointConnections/testEndpoint.50bf4fbe-d7c1-4b48-a642-4f5892642546"),
					Properties: &armsearch.PrivateEndpointConnectionProperties{
						PrivateEndpoint: &armsearch.PrivateEndpointConnectionPropertiesPrivateEndpoint{
							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/privateEndpoints/testEndpoint"),
						},
						PrivateLinkServiceConnectionState: &armsearch.PrivateEndpointConnectionPropertiesPrivateLinkServiceConnectionState{
							Description:     to.Ptr(""),
							ActionsRequired: to.Ptr("None"),
							Status:          to.Ptr(armsearch.PrivateLinkServiceConnectionStatusApproved),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PrivateEndpointConnectionListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PrivateEndpointConnectionListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/search/resource-manager/Microsoft.Search/stable/2020-08-01/examples/ListPrivateEndpointConnectionsByService.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSharedPrivateLinkResources_CreateOrUpdate(t *testing.T) {
	// From example specification/search/resource-manager/Microsoft.Search/stable/2020-08-01/examples/CreateOrUpdateSharedPrivateLinkResource.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SharedPrivateLinkResourceCreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsearch.NewSharedPrivateLinkResourcesClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"mysearchservice",
		"testResource",
		armsearch.SharedPrivateLinkResource{
			Properties: &armsearch.SharedPrivateLinkResourceProperties{
				GroupID:               to.Ptr("blob"),
				PrivateLinkResourceID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Storage/storageAccounts/storageAccountName"),
				RequestMessage:        to.Ptr("please approve"),
			},
		},
		&armsearch.SearchManagementRequestOptions{ClientRequestID: nil},
		&armsearch.SharedPrivateLinkResourcesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/search/resource-manager/Microsoft.Search/stable/2020-08-01/examples/CreateOrUpdateSharedPrivateLinkResource.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/search/resource-manager/Microsoft.Search/stable/2020-08-01/examples/CreateOrUpdateSharedPrivateLinkResource.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsearch.SharedPrivateLinkResource{
			Name: to.Ptr("testResource"),
			Type: to.Ptr("Microsoft.Search/searchServices/sharedPrivateLinkResources"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Search/searchServices/mysearchservice/sharedPrivateLinkResources/testResource"),
			Properties: &armsearch.SharedPrivateLinkResourceProperties{
				GroupID:               to.Ptr("blob"),
				PrivateLinkResourceID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Storage/storageAccounts/storageAccountName"),
				RequestMessage:        to.Ptr("please approve"),
				Status:                to.Ptr(armsearch.SharedPrivateLinkResourceStatusPending),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SharedPrivateLinkResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SharedPrivateLinkResource)
			t.Fatalf("Mock response is not equal to example response for example specification/search/resource-manager/Microsoft.Search/stable/2020-08-01/examples/CreateOrUpdateSharedPrivateLinkResource.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSharedPrivateLinkResources_Get(t *testing.T) {
	// From example specification/search/resource-manager/Microsoft.Search/stable/2020-08-01/examples/GetSharedPrivateLinkResource.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SharedPrivateLinkResourceGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsearch.NewSharedPrivateLinkResourcesClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"mysearchservice",
		"testResource",
		&armsearch.SearchManagementRequestOptions{ClientRequestID: nil},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/search/resource-manager/Microsoft.Search/stable/2020-08-01/examples/GetSharedPrivateLinkResource.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsearch.SharedPrivateLinkResource{
			Name: to.Ptr("testResource"),
			Type: to.Ptr("Microsoft.Search/searchServices/sharedPrivateLinkResources"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Search/searchServices/mysearchservice/sharedPrivateLinkResources/testResource"),
			Properties: &armsearch.SharedPrivateLinkResourceProperties{
				GroupID:               to.Ptr("blob"),
				PrivateLinkResourceID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Storage/storageAccounts/storageAccountName"),
				RequestMessage:        to.Ptr("please approve"),
				Status:                to.Ptr(armsearch.SharedPrivateLinkResourceStatusPending),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SharedPrivateLinkResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SharedPrivateLinkResource)
			t.Fatalf("Mock response is not equal to example response for example specification/search/resource-manager/Microsoft.Search/stable/2020-08-01/examples/GetSharedPrivateLinkResource.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSharedPrivateLinkResources_Delete(t *testing.T) {
	// From example specification/search/resource-manager/Microsoft.Search/stable/2020-08-01/examples/DeleteSharedPrivateLinkResource.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SharedPrivateLinkResourceDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsearch.NewSharedPrivateLinkResourcesClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"mysearchservice",
		"testResource",
		&armsearch.SearchManagementRequestOptions{ClientRequestID: nil},
		&armsearch.SharedPrivateLinkResourcesClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/search/resource-manager/Microsoft.Search/stable/2020-08-01/examples/DeleteSharedPrivateLinkResource.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/search/resource-manager/Microsoft.Search/stable/2020-08-01/examples/DeleteSharedPrivateLinkResource.json: %v", err)
	}
}

func TestSharedPrivateLinkResources_ListByService(t *testing.T) {
	// From example specification/search/resource-manager/Microsoft.Search/stable/2020-08-01/examples/ListSharedPrivateLinkResourcesByService.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ListSharedPrivateLinkResourcesByService"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsearch.NewSharedPrivateLinkResourcesClient("subid", cred, &options)
	pager := client.ListByService("rg1",
		"mysearchservice",
		&armsearch.SearchManagementRequestOptions{ClientRequestID: nil},
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/search/resource-manager/Microsoft.Search/stable/2020-08-01/examples/ListSharedPrivateLinkResourcesByService.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsearch.SharedPrivateLinkResourceListResult{
			Value: []*armsearch.SharedPrivateLinkResource{
				{
					Name: to.Ptr("testResource"),
					Type: to.Ptr("Microsoft.Search/searchServices/sharedPrivateLinkResources"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Search/searchServices/mysearchservice/sharedPrivateLinkResources/testResource"),
					Properties: &armsearch.SharedPrivateLinkResourceProperties{
						GroupID:               to.Ptr("blob"),
						PrivateLinkResourceID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Storage/storageAccounts/storageAccountName"),
						RequestMessage:        to.Ptr("please approve"),
						Status:                to.Ptr(armsearch.SharedPrivateLinkResourceStatusPending),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SharedPrivateLinkResourceListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SharedPrivateLinkResourceListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/search/resource-manager/Microsoft.Search/stable/2020-08-01/examples/ListSharedPrivateLinkResourcesByService.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
