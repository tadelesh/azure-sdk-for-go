//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armvmwarecloudsimple

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"reflect"
)

// CustomizationPoliciesClientListPager provides operations for iterating over paged responses.
type CustomizationPoliciesClientListPager struct {
	client    *CustomizationPoliciesClient
	current   CustomizationPoliciesClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, CustomizationPoliciesClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *CustomizationPoliciesClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.CustomizationPoliciesListResponse.NextLink == nil || len(*p.current.CustomizationPoliciesListResponse.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *CustomizationPoliciesClientListPager) NextPage(ctx context.Context) (CustomizationPoliciesClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return CustomizationPoliciesClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return CustomizationPoliciesClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return CustomizationPoliciesClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return CustomizationPoliciesClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return CustomizationPoliciesClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// DedicatedCloudNodesClientListByResourceGroupPager provides operations for iterating over paged responses.
type DedicatedCloudNodesClientListByResourceGroupPager struct {
	client    *DedicatedCloudNodesClient
	current   DedicatedCloudNodesClientListByResourceGroupResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, DedicatedCloudNodesClientListByResourceGroupResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *DedicatedCloudNodesClientListByResourceGroupPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DedicatedCloudNodeListResponse.NextLink == nil || len(*p.current.DedicatedCloudNodeListResponse.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *DedicatedCloudNodesClientListByResourceGroupPager) NextPage(ctx context.Context) (DedicatedCloudNodesClientListByResourceGroupResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return DedicatedCloudNodesClientListByResourceGroupResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return DedicatedCloudNodesClientListByResourceGroupResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return DedicatedCloudNodesClientListByResourceGroupResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return DedicatedCloudNodesClientListByResourceGroupResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		return DedicatedCloudNodesClientListByResourceGroupResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// DedicatedCloudNodesClientListBySubscriptionPager provides operations for iterating over paged responses.
type DedicatedCloudNodesClientListBySubscriptionPager struct {
	client    *DedicatedCloudNodesClient
	current   DedicatedCloudNodesClientListBySubscriptionResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, DedicatedCloudNodesClientListBySubscriptionResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *DedicatedCloudNodesClientListBySubscriptionPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DedicatedCloudNodeListResponse.NextLink == nil || len(*p.current.DedicatedCloudNodeListResponse.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *DedicatedCloudNodesClientListBySubscriptionPager) NextPage(ctx context.Context) (DedicatedCloudNodesClientListBySubscriptionResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return DedicatedCloudNodesClientListBySubscriptionResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return DedicatedCloudNodesClientListBySubscriptionResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return DedicatedCloudNodesClientListBySubscriptionResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return DedicatedCloudNodesClientListBySubscriptionResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listBySubscriptionHandleResponse(resp)
	if err != nil {
		return DedicatedCloudNodesClientListBySubscriptionResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// DedicatedCloudServicesClientListByResourceGroupPager provides operations for iterating over paged responses.
type DedicatedCloudServicesClientListByResourceGroupPager struct {
	client    *DedicatedCloudServicesClient
	current   DedicatedCloudServicesClientListByResourceGroupResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, DedicatedCloudServicesClientListByResourceGroupResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *DedicatedCloudServicesClientListByResourceGroupPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DedicatedCloudServiceListResponse.NextLink == nil || len(*p.current.DedicatedCloudServiceListResponse.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *DedicatedCloudServicesClientListByResourceGroupPager) NextPage(ctx context.Context) (DedicatedCloudServicesClientListByResourceGroupResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return DedicatedCloudServicesClientListByResourceGroupResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return DedicatedCloudServicesClientListByResourceGroupResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return DedicatedCloudServicesClientListByResourceGroupResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return DedicatedCloudServicesClientListByResourceGroupResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		return DedicatedCloudServicesClientListByResourceGroupResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// DedicatedCloudServicesClientListBySubscriptionPager provides operations for iterating over paged responses.
type DedicatedCloudServicesClientListBySubscriptionPager struct {
	client    *DedicatedCloudServicesClient
	current   DedicatedCloudServicesClientListBySubscriptionResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, DedicatedCloudServicesClientListBySubscriptionResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *DedicatedCloudServicesClientListBySubscriptionPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DedicatedCloudServiceListResponse.NextLink == nil || len(*p.current.DedicatedCloudServiceListResponse.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *DedicatedCloudServicesClientListBySubscriptionPager) NextPage(ctx context.Context) (DedicatedCloudServicesClientListBySubscriptionResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return DedicatedCloudServicesClientListBySubscriptionResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return DedicatedCloudServicesClientListBySubscriptionResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return DedicatedCloudServicesClientListBySubscriptionResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return DedicatedCloudServicesClientListBySubscriptionResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listBySubscriptionHandleResponse(resp)
	if err != nil {
		return DedicatedCloudServicesClientListBySubscriptionResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// OperationsClientListPager provides operations for iterating over paged responses.
type OperationsClientListPager struct {
	client    *OperationsClient
	current   OperationsClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, OperationsClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *OperationsClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.AvailableOperationsListResponse.NextLink == nil || len(*p.current.AvailableOperationsListResponse.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *OperationsClientListPager) NextPage(ctx context.Context) (OperationsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return OperationsClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return OperationsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return OperationsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return OperationsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return OperationsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// PrivateCloudsClientListPager provides operations for iterating over paged responses.
type PrivateCloudsClientListPager struct {
	client    *PrivateCloudsClient
	current   PrivateCloudsClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, PrivateCloudsClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *PrivateCloudsClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PrivateCloudList.NextLink == nil || len(*p.current.PrivateCloudList.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *PrivateCloudsClientListPager) NextPage(ctx context.Context) (PrivateCloudsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return PrivateCloudsClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return PrivateCloudsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return PrivateCloudsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return PrivateCloudsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return PrivateCloudsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// ResourcePoolsClientListPager provides operations for iterating over paged responses.
type ResourcePoolsClientListPager struct {
	client    *ResourcePoolsClient
	current   ResourcePoolsClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ResourcePoolsClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ResourcePoolsClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ResourcePoolsListResponse.NextLink == nil || len(*p.current.ResourcePoolsListResponse.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *ResourcePoolsClientListPager) NextPage(ctx context.Context) (ResourcePoolsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return ResourcePoolsClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ResourcePoolsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ResourcePoolsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ResourcePoolsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return ResourcePoolsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// SKUsAvailabilityClientListPager provides operations for iterating over paged responses.
type SKUsAvailabilityClientListPager struct {
	client    *SKUsAvailabilityClient
	current   SKUsAvailabilityClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, SKUsAvailabilityClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *SKUsAvailabilityClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SKUAvailabilityListResponse.NextLink == nil || len(*p.current.SKUAvailabilityListResponse.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *SKUsAvailabilityClientListPager) NextPage(ctx context.Context) (SKUsAvailabilityClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return SKUsAvailabilityClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return SKUsAvailabilityClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return SKUsAvailabilityClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return SKUsAvailabilityClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return SKUsAvailabilityClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// UsagesClientListPager provides operations for iterating over paged responses.
type UsagesClientListPager struct {
	client    *UsagesClient
	current   UsagesClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, UsagesClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *UsagesClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.UsageListResponse.NextLink == nil || len(*p.current.UsageListResponse.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *UsagesClientListPager) NextPage(ctx context.Context) (UsagesClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return UsagesClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return UsagesClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return UsagesClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return UsagesClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return UsagesClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// VirtualMachineTemplatesClientListPager provides operations for iterating over paged responses.
type VirtualMachineTemplatesClientListPager struct {
	client    *VirtualMachineTemplatesClient
	current   VirtualMachineTemplatesClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, VirtualMachineTemplatesClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *VirtualMachineTemplatesClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.VirtualMachineTemplateListResponse.NextLink == nil || len(*p.current.VirtualMachineTemplateListResponse.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *VirtualMachineTemplatesClientListPager) NextPage(ctx context.Context) (VirtualMachineTemplatesClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return VirtualMachineTemplatesClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return VirtualMachineTemplatesClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return VirtualMachineTemplatesClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return VirtualMachineTemplatesClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return VirtualMachineTemplatesClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// VirtualMachinesClientListByResourceGroupPager provides operations for iterating over paged responses.
type VirtualMachinesClientListByResourceGroupPager struct {
	client    *VirtualMachinesClient
	current   VirtualMachinesClientListByResourceGroupResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, VirtualMachinesClientListByResourceGroupResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *VirtualMachinesClientListByResourceGroupPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.VirtualMachineListResponse.NextLink == nil || len(*p.current.VirtualMachineListResponse.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *VirtualMachinesClientListByResourceGroupPager) NextPage(ctx context.Context) (VirtualMachinesClientListByResourceGroupResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return VirtualMachinesClientListByResourceGroupResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return VirtualMachinesClientListByResourceGroupResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return VirtualMachinesClientListByResourceGroupResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return VirtualMachinesClientListByResourceGroupResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		return VirtualMachinesClientListByResourceGroupResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// VirtualMachinesClientListBySubscriptionPager provides operations for iterating over paged responses.
type VirtualMachinesClientListBySubscriptionPager struct {
	client    *VirtualMachinesClient
	current   VirtualMachinesClientListBySubscriptionResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, VirtualMachinesClientListBySubscriptionResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *VirtualMachinesClientListBySubscriptionPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.VirtualMachineListResponse.NextLink == nil || len(*p.current.VirtualMachineListResponse.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *VirtualMachinesClientListBySubscriptionPager) NextPage(ctx context.Context) (VirtualMachinesClientListBySubscriptionResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return VirtualMachinesClientListBySubscriptionResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return VirtualMachinesClientListBySubscriptionResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return VirtualMachinesClientListBySubscriptionResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return VirtualMachinesClientListBySubscriptionResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listBySubscriptionHandleResponse(resp)
	if err != nil {
		return VirtualMachinesClientListBySubscriptionResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// VirtualNetworksClientListPager provides operations for iterating over paged responses.
type VirtualNetworksClientListPager struct {
	client    *VirtualNetworksClient
	current   VirtualNetworksClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, VirtualNetworksClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *VirtualNetworksClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.VirtualNetworkListResponse.NextLink == nil || len(*p.current.VirtualNetworkListResponse.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *VirtualNetworksClientListPager) NextPage(ctx context.Context) (VirtualNetworksClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return VirtualNetworksClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return VirtualNetworksClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return VirtualNetworksClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return VirtualNetworksClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return VirtualNetworksClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}
