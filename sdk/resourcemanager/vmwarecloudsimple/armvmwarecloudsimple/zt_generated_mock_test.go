//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armvmwarecloudsimple_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/vmwarecloudsimple/armvmwarecloudsimple"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestOperations_List(t *testing.T) {
	// From example specification/vmwarecloudsimple/resource-manager/Microsoft.VMwareCloudSimple/stable/2019-04-01/examples/ListOperations.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ListOperations"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armvmwarecloudsimple.NewOperationsClient("<subscription-id>",
		"<referer>", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/vmwarecloudsimple/resource-manager/Microsoft.VMwareCloudSimple/stable/2019-04-01/examples/ListOperations.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armvmwarecloudsimple.AvailableOperationsListResponse{
			Value: []*armvmwarecloudsimple.AvailableOperation{
				{
					Name: to.Ptr("Microsoft.VMwareCloudSimple/dedicatedCloudNodes/write"),
					Display: &armvmwarecloudsimple.AvailableOperationDisplay{
						Description: to.Ptr("Creates a new dedicated cloud node"),
						Operation:   to.Ptr("Create Dedicated Cloud Node"),
						Provider:    to.Ptr("VMware Solution by CloudSimple"),
						Resource:    to.Ptr("Dedicated Cloud Nodes"),
					},
					Origin: to.Ptr(armvmwarecloudsimple.OperationOriginUserSystem),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AvailableOperationsListResponse) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AvailableOperationsListResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/vmwarecloudsimple/resource-manager/Microsoft.VMwareCloudSimple/stable/2019-04-01/examples/ListOperations.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOperations_Get(t *testing.T) {
	// From example specification/vmwarecloudsimple/resource-manager/Microsoft.VMwareCloudSimple/stable/2019-04-01/examples/GetFailedOperationResult.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetFailedOperationResult"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armvmwarecloudsimple.NewOperationsClient("{subscription-id}",
		"https://management.azure.com/", cred, &options)
	res, err := client.Get(ctx,
		"westus2",
		"d030bb3f-7d53-11e9-8e09-9a86872085ff",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vmwarecloudsimple/resource-manager/Microsoft.VMwareCloudSimple/stable/2019-04-01/examples/GetFailedOperationResult.json: %v", err)
	}
	// Response check
	{
		exampleRes := armvmwarecloudsimple.OperationResource{
			Name:    to.Ptr("d030bb3f-7d53-11e9-8e09-9a86872085ff"),
			EndTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-23T12:11:00.655Z"); return t }()),
			Error: &armvmwarecloudsimple.OperationError{
				Code:    to.Ptr("InternalError"),
				Message: to.Ptr("Internal Service error"),
			},
			ID:        to.Ptr("/subscriptions/{subscription-id}/providers/microsoft.vmwarecloudsimple/locations/westus2/operationresults/d030bb3f-7d53-11e9-8e09-9a86872085ff"),
			StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-23T12:10:54.012Z"); return t }()),
			Status:    to.Ptr("Failed"),
		}
		if !reflect.DeepEqual(exampleRes, res.OperationResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.OperationResource)
			t.Fatalf("Mock response is not equal to example response for example specification/vmwarecloudsimple/resource-manager/Microsoft.VMwareCloudSimple/stable/2019-04-01/examples/GetFailedOperationResult.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/vmwarecloudsimple/resource-manager/Microsoft.VMwareCloudSimple/stable/2019-04-01/examples/GetOperationResult.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetOperationResult"},
	})
	client = armvmwarecloudsimple.NewOperationsClient("{subscription-id}",
		"https://management.azure.com/", cred, &options)
	res, err = client.Get(ctx,
		"westus2",
		"f8e1c8f1-7d52-11e9-8e07-9a86872085ff",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vmwarecloudsimple/resource-manager/Microsoft.VMwareCloudSimple/stable/2019-04-01/examples/GetOperationResult.json: %v", err)
	}
	// Response check
	{
		exampleRes := armvmwarecloudsimple.OperationResource{
			Name:      to.Ptr("f8e1c8f1-7d52-11e9-8e07-9a86872085ff"),
			EndTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-23T12:05:55.660Z"); return t }()),
			ID:        to.Ptr("/subscriptions/{subscription-id}/providers/microsoft.vmwarecloudsimple/locations/westus2/operationresults/f8e1c8f1-7d52-11e9-8e07-9a86872085ff"),
			StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-23T12:04:52.784Z"); return t }()),
			Status:    to.Ptr("Succeeded"),
		}
		if !reflect.DeepEqual(exampleRes, res.OperationResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.OperationResource)
			t.Fatalf("Mock response is not equal to example response for example specification/vmwarecloudsimple/resource-manager/Microsoft.VMwareCloudSimple/stable/2019-04-01/examples/GetOperationResult.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDedicatedCloudNodes_ListBySubscription(t *testing.T) {
	// From example specification/vmwarecloudsimple/resource-manager/Microsoft.VMwareCloudSimple/stable/2019-04-01/examples/ListDedicatedCloudNodes.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ListDedicatedCloudNodes"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armvmwarecloudsimple.NewDedicatedCloudNodesClient("{subscription-id}",
		"<referer>", cred, &options)
	pager := client.ListBySubscription(&armvmwarecloudsimple.DedicatedCloudNodesClientListBySubscriptionOptions{Filter: nil,
		Top:       nil,
		SkipToken: nil,
	})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/vmwarecloudsimple/resource-manager/Microsoft.VMwareCloudSimple/stable/2019-04-01/examples/ListDedicatedCloudNodes.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armvmwarecloudsimple.DedicatedCloudNodeListResponse{
			Value: []*armvmwarecloudsimple.DedicatedCloudNode{
				{
					Name:     to.Ptr("node-2"),
					Type:     to.Ptr("Microsoft.VMwareCloudSimple/dedicatedCloudNodes"),
					ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup-1/providers/Microsoft.VMwareCloudSimple/dedicatedCloudNodes/node-2"),
					Location: to.Ptr("westus2"),
					Properties: &armvmwarecloudsimple.DedicatedCloudNodeProperties{
						AvailabilityZoneID:   to.Ptr("az1"),
						AvailabilityZoneName: to.Ptr("Availability Zone 1"),
						CloudRackName:        to.Ptr("cloud_rack_1"),
						Created:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-21T07:32:12.134Z"); return t }()),
						NodesCount:           to.Ptr[int32](0),
						PlacementGroupID:     to.Ptr("n2"),
						PlacementGroupName:   to.Ptr("Placement Group 2"),
						PrivateCloudID:       to.Ptr("/subscriptions/{subscription-id}/providers/Microsoft.VMwareCloudSimple/locations/westus2/privateClouds/myPrivateCloud"),
						PrivateCloudName:     to.Ptr("private_cloud_name"),
						PurchaseID:           to.Ptr("225fadec-3bbe-4e61-a119-ff102da67d0d"),
						SKUDescription: &armvmwarecloudsimple.SKUDescription{
							Name: to.Ptr("CS28-Node"),
							ID:   to.Ptr("general"),
						},
						Status:            to.Ptr(armvmwarecloudsimple.NodeStatusUsed),
						VmwareClusterName: to.Ptr("Cluster"),
					},
					SKU: &armvmwarecloudsimple.SKU{
						Name: to.Ptr("VMware_CloudSimple_CS28"),
					},
				},
				{
					Name:     to.Ptr("node1"),
					Type:     to.Ptr("Microsoft.VMwareCloudSimple/dedicatedCloudNodes"),
					ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup-2/providers/Microsoft.VMwareCloudSimple/dedicatedCloudNodes/node-1"),
					Location: to.Ptr("westus2"),
					Properties: &armvmwarecloudsimple.DedicatedCloudNodeProperties{
						AvailabilityZoneID:   to.Ptr("az1"),
						AvailabilityZoneName: to.Ptr("Availability Zone 1"),
						Created:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-22T11:57:43.891Z"); return t }()),
						NodesCount:           to.Ptr[int32](0),
						PlacementGroupID:     to.Ptr("n1"),
						PlacementGroupName:   to.Ptr("Placement Group 1"),
						PurchaseID:           to.Ptr("eb9d2e22-c787-4723-aa4f-3760b53a0a4d"),
						SKUDescription: &armvmwarecloudsimple.SKUDescription{
							Name: to.Ptr("CS28-Node"),
							ID:   to.Ptr("general"),
						},
						Status: to.Ptr(armvmwarecloudsimple.NodeStatusUnused),
					},
					SKU: &armvmwarecloudsimple.SKU{
						Name: to.Ptr("VMware_CloudSimple_CS28"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DedicatedCloudNodeListResponse) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DedicatedCloudNodeListResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/vmwarecloudsimple/resource-manager/Microsoft.VMwareCloudSimple/stable/2019-04-01/examples/ListDedicatedCloudNodes.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDedicatedCloudNodes_ListByResourceGroup(t *testing.T) {
	// From example specification/vmwarecloudsimple/resource-manager/Microsoft.VMwareCloudSimple/stable/2019-04-01/examples/ListRGDedicatedCloudNodes.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ListRGDedicatedCloudNodes"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armvmwarecloudsimple.NewDedicatedCloudNodesClient("{subscription-id}",
		"<referer>", cred, &options)
	pager := client.ListByResourceGroup("myResourceGroup",
		&armvmwarecloudsimple.DedicatedCloudNodesClientListByResourceGroupOptions{Filter: nil,
			Top:       nil,
			SkipToken: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/vmwarecloudsimple/resource-manager/Microsoft.VMwareCloudSimple/stable/2019-04-01/examples/ListRGDedicatedCloudNodes.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armvmwarecloudsimple.DedicatedCloudNodeListResponse{
			Value: []*armvmwarecloudsimple.DedicatedCloudNode{
				{
					Name:     to.Ptr("node-east-1"),
					Type:     to.Ptr("Microsoft.VMwareCloudSimple/dedicatedCloudNodes"),
					ID:       to.Ptr("/subscriptions/{subscription-id}/resourcegroups/myResourceGroup/providers/Microsoft.VMwareCloudSimple/dedicatedCloudNodes/node-east-1"),
					Location: to.Ptr("eastus"),
					Properties: &armvmwarecloudsimple.DedicatedCloudNodeProperties{
						AvailabilityZoneID:   to.Ptr("az1"),
						AvailabilityZoneName: to.Ptr("Availability Zone 1"),
						CloudRackName:        to.Ptr("cloud_rack_1"),
						Created:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-21T07:32:12.134Z"); return t }()),
						NodesCount:           to.Ptr[int32](0),
						PlacementGroupID:     to.Ptr("n2"),
						PlacementGroupName:   to.Ptr("Placement Group 2"),
						PrivateCloudID:       to.Ptr("private_cloud_id"),
						PrivateCloudName:     to.Ptr("private_cloud_name"),
						PurchaseID:           to.Ptr("225fadec-3bbe-4e61-a119-ff102da67d0d"),
						SKUDescription: &armvmwarecloudsimple.SKUDescription{
							Name: to.Ptr("CS28-Node"),
							ID:   to.Ptr("general"),
						},
						Status:            to.Ptr(armvmwarecloudsimple.NodeStatusUsed),
						VmwareClusterName: to.Ptr("Cluster"),
					},
					SKU: &armvmwarecloudsimple.SKU{
						Name: to.Ptr("VMware_CloudSimple_CS28"),
					},
				},
				{
					Name:     to.Ptr("node-east-2"),
					Type:     to.Ptr("Microsoft.VMwareCloudSimple/dedicatedCloudNodes"),
					ID:       to.Ptr("/subscriptions/{subscription-id}/resourcegroups/myResourceGroup/providers/Microsoft.VMwareCloudSimple/dedicatedCloudNodes/node-east-2"),
					Location: to.Ptr("eastus"),
					Properties: &armvmwarecloudsimple.DedicatedCloudNodeProperties{
						AvailabilityZoneID:   to.Ptr("az1"),
						AvailabilityZoneName: to.Ptr("Availability Zone 1"),
						CloudRackName:        to.Ptr("cloud_rack_1"),
						Created:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-21T07:32:12.114Z"); return t }()),
						NodesCount:           to.Ptr[int32](0),
						PlacementGroupID:     to.Ptr("n2"),
						PlacementGroupName:   to.Ptr("Placement Group 2"),
						PrivateCloudID:       to.Ptr("/subscriptions/{subscription-id}/providers/Microsoft.VMwareCloudSimple/locations/westus2/privateClouds/myPrivateCloud"),
						PrivateCloudName:     to.Ptr("private_cloud_name"),
						PurchaseID:           to.Ptr("225fadec-3bbe-4e61-a119-ff102da67d0d"),
						SKUDescription: &armvmwarecloudsimple.SKUDescription{
							Name: to.Ptr("CS28-Node"),
							ID:   to.Ptr("general"),
						},
						Status:            to.Ptr(armvmwarecloudsimple.NodeStatusUsed),
						VmwareClusterName: to.Ptr("Cluster"),
					},
					SKU: &armvmwarecloudsimple.SKU{
						Name: to.Ptr("VMware_CloudSimple_CS28"),
					},
				},
				{
					Name:     to.Ptr("myNode"),
					Type:     to.Ptr("Microsoft.VMwareCloudSimple/dedicatedCloudNodes"),
					ID:       to.Ptr("/subscriptions/{subscription-id}/resourcegroups/myResourceGroup/providers/Microsoft.VMwareCloudSimple/dedicatedCloudNodes/myNode"),
					Location: to.Ptr("eastus"),
					Properties: &armvmwarecloudsimple.DedicatedCloudNodeProperties{
						AvailabilityZoneID:   to.Ptr("az1"),
						AvailabilityZoneName: to.Ptr("Availability Zone 1"),
						CloudRackName:        to.Ptr("cloud_rack_1"),
						Created:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-08T09:35:47.961Z"); return t }()),
						NodesCount:           to.Ptr[int32](0),
						PlacementGroupID:     to.Ptr("n2"),
						PlacementGroupName:   to.Ptr("Placement Group 2"),
						PrivateCloudID:       to.Ptr("/subscriptions/{subscription-id}/providers/Microsoft.VMwareCloudSimple/locations/westus2/privateClouds/myPrivateCloud"),
						PrivateCloudName:     to.Ptr("myPrivateCloud"),
						PurchaseID:           to.Ptr("b3fcd958-f19c-4421-ab46-e4fa9cc8514e"),
						SKUDescription: &armvmwarecloudsimple.SKUDescription{
							Name: to.Ptr("CS28-Node"),
							ID:   to.Ptr("general"),
						},
						Status:            to.Ptr(armvmwarecloudsimple.NodeStatusUsed),
						VmwareClusterName: to.Ptr("Cluster"),
					},
					SKU: &armvmwarecloudsimple.SKU{
						Name: to.Ptr("VMware_CloudSimple_CS28"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DedicatedCloudNodeListResponse) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DedicatedCloudNodeListResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/vmwarecloudsimple/resource-manager/Microsoft.VMwareCloudSimple/stable/2019-04-01/examples/ListRGDedicatedCloudNodes.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDedicatedCloudNodes_Get(t *testing.T) {
	// From example specification/vmwarecloudsimple/resource-manager/Microsoft.VMwareCloudSimple/stable/2019-04-01/examples/GetDedicatedCloudNode.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetDedicatedCloudNode"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armvmwarecloudsimple.NewDedicatedCloudNodesClient("{subscription-id}",
		"<referer>", cred, &options)
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myNode",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vmwarecloudsimple/resource-manager/Microsoft.VMwareCloudSimple/stable/2019-04-01/examples/GetDedicatedCloudNode.json: %v", err)
	}
	// Response check
	{
		exampleRes := armvmwarecloudsimple.DedicatedCloudNode{
			Name:     to.Ptr("myNode"),
			Type:     to.Ptr("Microsoft.VMwareCloudSimple/dedicatedCloudNodes"),
			ID:       to.Ptr("/subscriptions/{subscription-id}/resourcegroups/myResourceGroup/providers/Microsoft.VMwareCloudSimple/dedicatedCloudNodes/myNode"),
			Location: to.Ptr("eastus"),
			Properties: &armvmwarecloudsimple.DedicatedCloudNodeProperties{
				AvailabilityZoneID:   to.Ptr("az1"),
				AvailabilityZoneName: to.Ptr("Availability Zone 1"),
				CloudRackName:        to.Ptr("cloud_rack_1"),
				Created:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-21T07:32:12.114Z"); return t }()),
				NodesCount:           to.Ptr[int32](0),
				PlacementGroupID:     to.Ptr("n2"),
				PlacementGroupName:   to.Ptr("Placement Group 2"),
				PrivateCloudID:       to.Ptr("/subscriptions/{subscription-id}/providers/Microsoft.VMwareCloudSimple/locations/westus2/privateClouds/myPrivateCloud"),
				PrivateCloudName:     to.Ptr("private_cloud_name"),
				PurchaseID:           to.Ptr("225fadec-3bbe-4e61-a119-ff102da67d0d"),
				SKUDescription: &armvmwarecloudsimple.SKUDescription{
					Name: to.Ptr("CS28-Node"),
					ID:   to.Ptr("general"),
				},
				Status:            to.Ptr(armvmwarecloudsimple.NodeStatusUsed),
				VmwareClusterName: to.Ptr("Cluster"),
			},
			SKU: &armvmwarecloudsimple.SKU{
				Name: to.Ptr("VMware_CloudSimple_CS28"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DedicatedCloudNode) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DedicatedCloudNode)
			t.Fatalf("Mock response is not equal to example response for example specification/vmwarecloudsimple/resource-manager/Microsoft.VMwareCloudSimple/stable/2019-04-01/examples/GetDedicatedCloudNode.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDedicatedCloudNodes_CreateOrUpdate(t *testing.T) {
	// From example specification/vmwarecloudsimple/resource-manager/Microsoft.VMwareCloudSimple/stable/2019-04-01/examples/CreateDedicatedCloudNode.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CreateDedicatedCloudNode"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armvmwarecloudsimple.NewDedicatedCloudNodesClient("{subscription-id}",
		"https://management.azure.com/", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myNode",
		armvmwarecloudsimple.DedicatedCloudNode{
			Location: to.Ptr("westus"),
			Properties: &armvmwarecloudsimple.DedicatedCloudNodeProperties{
				AvailabilityZoneID: to.Ptr("az1"),
				NodesCount:         to.Ptr[int32](1),
				PlacementGroupID:   to.Ptr("n1"),
				PurchaseID:         to.Ptr("56acbd46-3d36-4bbf-9b08-57c30fdf6932"),
				SKUDescription: &armvmwarecloudsimple.SKUDescription{
					Name: to.Ptr("CS28-Node"),
					ID:   to.Ptr("general"),
				},
			},
			SKU: &armvmwarecloudsimple.SKU{
				Name: to.Ptr("VMware_CloudSimple_CS28"),
			},
		},
		&armvmwarecloudsimple.DedicatedCloudNodesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vmwarecloudsimple/resource-manager/Microsoft.VMwareCloudSimple/stable/2019-04-01/examples/CreateDedicatedCloudNode.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/vmwarecloudsimple/resource-manager/Microsoft.VMwareCloudSimple/stable/2019-04-01/examples/CreateDedicatedCloudNode.json: %v", err)
	}
	// Response check
	{
		exampleRes := armvmwarecloudsimple.DedicatedCloudNode{
			Name:     to.Ptr("myNode"),
			Type:     to.Ptr("Microsoft.VMwareCloudSimple/dedicatedCloudNodes"),
			ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.VMwareCloudSimple/dedicatedCloudNodes/myNode"),
			Location: to.Ptr("westus"),
			Properties: &armvmwarecloudsimple.DedicatedCloudNodeProperties{
				AvailabilityZoneID: to.Ptr("az1"),
				Created:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-21T13:43:26.441Z"); return t }()),
				NodesCount:         to.Ptr[int32](0),
				PlacementGroupID:   to.Ptr("n1"),
				ProvisioningState:  to.Ptr("Succeeded"),
				PurchaseID:         to.Ptr("56acbd46-3d36-4bbf-9b08-57c30fdf6932"),
				SKUDescription: &armvmwarecloudsimple.SKUDescription{
					Name: to.Ptr("CS28-Node"),
					ID:   to.Ptr("general"),
				},
				Status: to.Ptr(armvmwarecloudsimple.NodeStatusUnused),
			},
			SKU: &armvmwarecloudsimple.SKU{
				Name: to.Ptr("VMware_CloudSimple_CS28"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DedicatedCloudNode) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DedicatedCloudNode)
			t.Fatalf("Mock response is not equal to example response for example specification/vmwarecloudsimple/resource-manager/Microsoft.VMwareCloudSimple/stable/2019-04-01/examples/CreateDedicatedCloudNode.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDedicatedCloudNodes_Delete(t *testing.T) {
	// From example specification/vmwarecloudsimple/resource-manager/Microsoft.VMwareCloudSimple/stable/2019-04-01/examples/DeleteDedicatedCloudNode.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DeleteDedicatedCloudNode"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armvmwarecloudsimple.NewDedicatedCloudNodesClient("{subscription-id}",
		"<referer>", cred, &options)
	_, err := client.Delete(ctx,
		"myResourceGroup",
		"myNode",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vmwarecloudsimple/resource-manager/Microsoft.VMwareCloudSimple/stable/2019-04-01/examples/DeleteDedicatedCloudNode.json: %v", err)
	}
}

func TestDedicatedCloudNodes_Update(t *testing.T) {
	// From example specification/vmwarecloudsimple/resource-manager/Microsoft.VMwareCloudSimple/stable/2019-04-01/examples/PatchDedicatedCloudNode.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PatchDedicatedCloudNode"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armvmwarecloudsimple.NewDedicatedCloudNodesClient("{subscription-id}",
		"<referer>", cred, &options)
	res, err := client.Update(ctx,
		"myResourceGroup",
		"myNode",
		armvmwarecloudsimple.PatchPayload{
			Tags: map[string]*string{
				"myTag": to.Ptr("tagValue"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vmwarecloudsimple/resource-manager/Microsoft.VMwareCloudSimple/stable/2019-04-01/examples/PatchDedicatedCloudNode.json: %v", err)
	}
	// Response check
	{
		exampleRes := armvmwarecloudsimple.DedicatedCloudNode{
			Name:     to.Ptr("myNode"),
			Type:     to.Ptr("Microsoft.VMwareCloudSimple/dedicatedCloudNodes"),
			ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.VMwareCloudSimple/dedicatedCloudNodes/myNode"),
			Location: to.Ptr("westus"),
			Properties: &armvmwarecloudsimple.DedicatedCloudNodeProperties{
				AvailabilityZoneID: to.Ptr("az1"),
				Created:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-21T13:43:26.441Z"); return t }()),
				NodesCount:         to.Ptr[int32](0),
				PlacementGroupID:   to.Ptr("n1"),
				PurchaseID:         to.Ptr("56acbd46-3d36-4bbf-9b08-57c30fdf6932"),
				SKUDescription: &armvmwarecloudsimple.SKUDescription{
					Name: to.Ptr("CS28-Node"),
					ID:   to.Ptr("general"),
				},
				Status: to.Ptr(armvmwarecloudsimple.NodeStatusUnused),
			},
			Tags: map[string]*string{
				"myTag": to.Ptr("tagValue"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DedicatedCloudNode) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DedicatedCloudNode)
			t.Fatalf("Mock response is not equal to example response for example specification/vmwarecloudsimple/resource-manager/Microsoft.VMwareCloudSimple/stable/2019-04-01/examples/PatchDedicatedCloudNode.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDedicatedCloudServices_ListBySubscription(t *testing.T) {
	// From example specification/vmwarecloudsimple/resource-manager/Microsoft.VMwareCloudSimple/stable/2019-04-01/examples/ListDedicatedCloudServices.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ListDedicatedCloudServices"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armvmwarecloudsimple.NewDedicatedCloudServicesClient("{subscription-id}", cred, &options)
	pager := client.ListBySubscription(&armvmwarecloudsimple.DedicatedCloudServicesClientListBySubscriptionOptions{Filter: nil,
		Top:       nil,
		SkipToken: nil,
	})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/vmwarecloudsimple/resource-manager/Microsoft.VMwareCloudSimple/stable/2019-04-01/examples/ListDedicatedCloudServices.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armvmwarecloudsimple.DedicatedCloudServiceListResponse{
			Value: []*armvmwarecloudsimple.DedicatedCloudService{
				{
					Name:     to.Ptr("service-east"),
					Type:     to.Ptr("Microsoft.VMwareCloudSimple/dedicatedCloudServices"),
					ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup-1/providers/Microsoft.VMwareCloudSimple/dedicatedCloudServices/service-east"),
					Location: to.Ptr("eastus"),
					Properties: &armvmwarecloudsimple.DedicatedCloudServiceProperties{
						GatewaySubnet:      to.Ptr("10.101.201.0/28"),
						IsAccountOnboarded: to.Ptr(armvmwarecloudsimple.OnboardingStatusOnBoarded),
						ServiceURL:         to.Ptr("https://eastus-he.azure.cloudsimple.com"),
					},
				},
				{
					Name:     to.Ptr("service-west"),
					Type:     to.Ptr("Microsoft.VMwareCloudSimple/dedicatedCloudServices"),
					ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup-2/providers/Microsoft.VMwareCloudSimple/dedicatedCloudServices/service-west"),
					Location: to.Ptr("westus"),
					Properties: &armvmwarecloudsimple.DedicatedCloudServiceProperties{
						GatewaySubnet:      to.Ptr("10.0.0.0/28"),
						IsAccountOnboarded: to.Ptr(armvmwarecloudsimple.OnboardingStatusOnBoarded),
						ServiceURL:         to.Ptr("https://westus-he.azure.cloudsimple.com"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DedicatedCloudServiceListResponse) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DedicatedCloudServiceListResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/vmwarecloudsimple/resource-manager/Microsoft.VMwareCloudSimple/stable/2019-04-01/examples/ListDedicatedCloudServices.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDedicatedCloudServices_ListByResourceGroup(t *testing.T) {
	// From example specification/vmwarecloudsimple/resource-manager/Microsoft.VMwareCloudSimple/stable/2019-04-01/examples/ListRGDedicatedCloudServices.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ListRGDedicatedCloudServices"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armvmwarecloudsimple.NewDedicatedCloudServicesClient("{subscription-id}", cred, &options)
	pager := client.ListByResourceGroup("myResourceGroup",
		&armvmwarecloudsimple.DedicatedCloudServicesClientListByResourceGroupOptions{Filter: nil,
			Top:       nil,
			SkipToken: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/vmwarecloudsimple/resource-manager/Microsoft.VMwareCloudSimple/stable/2019-04-01/examples/ListRGDedicatedCloudServices.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armvmwarecloudsimple.DedicatedCloudServiceListResponse{
			Value: []*armvmwarecloudsimple.DedicatedCloudService{
				{
					Name:     to.Ptr("service-east"),
					Type:     to.Ptr("Microsoft.VMwareCloudSimple/dedicatedCloudServices"),
					ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.VMwareCloudSimple/dedicatedCloudServices/service-east"),
					Location: to.Ptr("eastus"),
					Properties: &armvmwarecloudsimple.DedicatedCloudServiceProperties{
						GatewaySubnet:      to.Ptr("10.101.201.0/28"),
						IsAccountOnboarded: to.Ptr(armvmwarecloudsimple.OnboardingStatusOnBoarded),
						ServiceURL:         to.Ptr("https://eastus-he.azure.cloudsimple.com"),
					},
				},
				{
					Name:     to.Ptr("service-west"),
					Type:     to.Ptr("Microsoft.VMwareCloudSimple/dedicatedCloudServices"),
					ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.VMwareCloudSimple/dedicatedCloudServices/service-west"),
					Location: to.Ptr("westus"),
					Properties: &armvmwarecloudsimple.DedicatedCloudServiceProperties{
						GatewaySubnet:      to.Ptr("10.0.0.0/28"),
						IsAccountOnboarded: to.Ptr(armvmwarecloudsimple.OnboardingStatusOnBoarded),
						ServiceURL:         to.Ptr("https://westus-he.azure.cloudsimple.com"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DedicatedCloudServiceListResponse) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DedicatedCloudServiceListResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/vmwarecloudsimple/resource-manager/Microsoft.VMwareCloudSimple/stable/2019-04-01/examples/ListRGDedicatedCloudServices.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDedicatedCloudServices_Get(t *testing.T) {
	// From example specification/vmwarecloudsimple/resource-manager/Microsoft.VMwareCloudSimple/stable/2019-04-01/examples/GetDedicatedCloudService.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetDedicatedCloudService"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armvmwarecloudsimple.NewDedicatedCloudServicesClient("{subscription-id}", cred, &options)
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myService",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vmwarecloudsimple/resource-manager/Microsoft.VMwareCloudSimple/stable/2019-04-01/examples/GetDedicatedCloudService.json: %v", err)
	}
	// Response check
	{
		exampleRes := armvmwarecloudsimple.DedicatedCloudService{
			Name:     to.Ptr("myService"),
			Type:     to.Ptr("Microsoft.VMwareCloudSimple/dedicatedCloudServices"),
			ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.VMwareCloudSimple/dedicatedCloudServices/myService"),
			Location: to.Ptr("westus"),
			Properties: &armvmwarecloudsimple.DedicatedCloudServiceProperties{
				GatewaySubnet:      to.Ptr("10.0.10.0/28"),
				IsAccountOnboarded: to.Ptr(armvmwarecloudsimple.OnboardingStatusNotOnBoarded),
				Nodes:              to.Ptr[int32](1),
				ServiceURL:         to.Ptr("https://westus-he.azure.cloudsimple.com"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DedicatedCloudService) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DedicatedCloudService)
			t.Fatalf("Mock response is not equal to example response for example specification/vmwarecloudsimple/resource-manager/Microsoft.VMwareCloudSimple/stable/2019-04-01/examples/GetDedicatedCloudService.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDedicatedCloudServices_CreateOrUpdate(t *testing.T) {
	// From example specification/vmwarecloudsimple/resource-manager/Microsoft.VMwareCloudSimple/stable/2019-04-01/examples/CreateDedicatedCloudService.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CreateDedicatedCloudService"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armvmwarecloudsimple.NewDedicatedCloudServicesClient("{subscription-id}", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"myResourceGroup",
		"myService",
		armvmwarecloudsimple.DedicatedCloudService{
			Location: to.Ptr("westus"),
			Properties: &armvmwarecloudsimple.DedicatedCloudServiceProperties{
				GatewaySubnet: to.Ptr("10.0.0.0"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vmwarecloudsimple/resource-manager/Microsoft.VMwareCloudSimple/stable/2019-04-01/examples/CreateDedicatedCloudService.json: %v", err)
	}
	// Response check
	{
		exampleRes := armvmwarecloudsimple.DedicatedCloudService{
			Name:     to.Ptr("myService"),
			Type:     to.Ptr("Microsoft.VMwareCloudSimple/dedicatedCloudServices"),
			ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.VMwareCloudSimple/dedicatedCloudServices/myService"),
			Location: to.Ptr("westus"),
			Properties: &armvmwarecloudsimple.DedicatedCloudServiceProperties{
				GatewaySubnet:      to.Ptr("10.0.10.0/28"),
				IsAccountOnboarded: to.Ptr(armvmwarecloudsimple.OnboardingStatusNotOnBoarded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DedicatedCloudService) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DedicatedCloudService)
			t.Fatalf("Mock response is not equal to example response for example specification/vmwarecloudsimple/resource-manager/Microsoft.VMwareCloudSimple/stable/2019-04-01/examples/CreateDedicatedCloudService.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDedicatedCloudServices_Delete(t *testing.T) {
	// From example specification/vmwarecloudsimple/resource-manager/Microsoft.VMwareCloudSimple/stable/2019-04-01/examples/DeleteDedicatedCloudService.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DeleteDedicatedCloudService"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armvmwarecloudsimple.NewDedicatedCloudServicesClient("{subscription-id}", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"myService",
		&armvmwarecloudsimple.DedicatedCloudServicesClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vmwarecloudsimple/resource-manager/Microsoft.VMwareCloudSimple/stable/2019-04-01/examples/DeleteDedicatedCloudService.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/vmwarecloudsimple/resource-manager/Microsoft.VMwareCloudSimple/stable/2019-04-01/examples/DeleteDedicatedCloudService.json: %v", err)
	}
}

func TestDedicatedCloudServices_Update(t *testing.T) {
	// From example specification/vmwarecloudsimple/resource-manager/Microsoft.VMwareCloudSimple/stable/2019-04-01/examples/PatchDedicatedService.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PatchDedicatedService"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armvmwarecloudsimple.NewDedicatedCloudServicesClient("{subscription-id}", cred, &options)
	res, err := client.Update(ctx,
		"myResourceGroup",
		"myService",
		armvmwarecloudsimple.PatchPayload{
			Tags: map[string]*string{
				"myTag": to.Ptr("tagValue"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vmwarecloudsimple/resource-manager/Microsoft.VMwareCloudSimple/stable/2019-04-01/examples/PatchDedicatedService.json: %v", err)
	}
	// Response check
	{
		exampleRes := armvmwarecloudsimple.DedicatedCloudService{
			Name:     to.Ptr("myService"),
			Type:     to.Ptr("Microsoft.VMwareCloudSimple/dedicatedCloudServices"),
			ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.VMwareCloudSimple/dedicatedCloudServices/myService"),
			Location: to.Ptr("westus2"),
			Properties: &armvmwarecloudsimple.DedicatedCloudServiceProperties{
				GatewaySubnet:      to.Ptr("10.0.0.0/28"),
				IsAccountOnboarded: to.Ptr(armvmwarecloudsimple.OnboardingStatusOnBoarded),
				ServiceURL:         to.Ptr("https://westus-he.azure.cloudsimple.com"),
			},
			Tags: map[string]*string{
				"myTag": to.Ptr("tagValue"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DedicatedCloudService) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DedicatedCloudService)
			t.Fatalf("Mock response is not equal to example response for example specification/vmwarecloudsimple/resource-manager/Microsoft.VMwareCloudSimple/stable/2019-04-01/examples/PatchDedicatedService.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSKUsAvailability_List(t *testing.T) {
	// From example specification/vmwarecloudsimple/resource-manager/Microsoft.VMwareCloudSimple/stable/2019-04-01/examples/ListAvailabilities.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ListAvailabilities"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armvmwarecloudsimple.NewSKUsAvailabilityClient("{subscription-id}", cred, &options)
	pager := client.List("westus2",
		&armvmwarecloudsimple.SKUsAvailabilityClientListOptions{SKUID: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/vmwarecloudsimple/resource-manager/Microsoft.VMwareCloudSimple/stable/2019-04-01/examples/ListAvailabilities.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armvmwarecloudsimple.SKUAvailabilityListResponse{
			Value: []*armvmwarecloudsimple.SKUAvailability{
				{
					DedicatedAvailabilityZoneID:   to.Ptr("az1"),
					DedicatedAvailabilityZoneName: to.Ptr("Availability Zone 1"),
					DedicatedPlacementGroupID:     to.Ptr("n1"),
					DedicatedPlacementGroupName:   to.Ptr("Placement Group 1"),
					Limit:                         to.Ptr[int32](0),
					ResourceType:                  to.Ptr("Microsoft.VMwareCloudSimple/dedicatedCloudNodes"),
					SKUID:                         to.Ptr("general"),
					SKUName:                       to.Ptr("CS28-Node"),
				},
				{
					DedicatedAvailabilityZoneID:   to.Ptr("az1"),
					DedicatedAvailabilityZoneName: to.Ptr("Availability Zone 1"),
					DedicatedPlacementGroupID:     to.Ptr("n1"),
					DedicatedPlacementGroupName:   to.Ptr("Placement Group 1"),
					Limit:                         to.Ptr[int32](0),
					ResourceType:                  to.Ptr("Microsoft.VMwareCloudSimple/dedicatedCloudNodes"),
					SKUID:                         to.Ptr("large"),
					SKUName:                       to.Ptr("CS36-Node"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SKUAvailabilityListResponse) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SKUAvailabilityListResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/vmwarecloudsimple/resource-manager/Microsoft.VMwareCloudSimple/stable/2019-04-01/examples/ListAvailabilities.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateClouds_List(t *testing.T) {
	// From example specification/vmwarecloudsimple/resource-manager/Microsoft.VMwareCloudSimple/stable/2019-04-01/examples/ListPrivateCloudInLocation.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ListPrivateCloudInLocation"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armvmwarecloudsimple.NewPrivateCloudsClient("{subscription-id}", cred, &options)
	pager := client.List("eastus",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/vmwarecloudsimple/resource-manager/Microsoft.VMwareCloudSimple/stable/2019-04-01/examples/ListPrivateCloudInLocation.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armvmwarecloudsimple.PrivateCloudList{
			Value: []*armvmwarecloudsimple.PrivateCloud{
				{
					Name:     to.Ptr("myPrivateCloud"),
					Type:     to.Ptr("Microsoft.VMwareCloudSimple/privateClouds"),
					ID:       to.Ptr("/subscriptions/{subscription-id}/providers/Microsoft.VMwareCloudSimple/locations/eastus/privateClouds/myPrivateCloud"),
					Location: to.Ptr("eastus"),
					Properties: &armvmwarecloudsimple.PrivateCloudProperties{
						Type:                 to.Ptr("vSphere"),
						AvailabilityZoneID:   to.Ptr("az1"),
						AvailabilityZoneName: to.Ptr("Availability Zone 1"),
						ClustersNumber:       to.Ptr[int32](1),
						CreatedBy:            to.Ptr("john.doe@cloudsimple.com"),
						CreatedOn:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-21T07:32:59.491Z"); return t }()),
						DNSServers: []*string{
							to.Ptr("100.100.100.8"),
							to.Ptr("100.100.100.9")},
						Expires:            to.Ptr("n/a"),
						NsxType:            to.Ptr("Advanced"),
						PlacementGroupID:   to.Ptr("n2"),
						PlacementGroupName: to.Ptr("Placement Group 2"),
						PrivateCloudID:     to.Ptr("private-cloud-id"),
						State:              to.Ptr("operational"),
						TotalCPUCores:      to.Ptr[int32](84),
						TotalNodes:         to.Ptr[int32](3),
						TotalRAM:           to.Ptr[int32](768),
						TotalStorage:       to.Ptr[float32](16.875),
						VSphereVersion:     to.Ptr("6.7u1"),
						VcenterFqdn:        to.Ptr("vcsa-eastus.az.cloudsimple.io"),
						VcenterRefid:       to.Ptr("100.100.100.6"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PrivateCloudList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PrivateCloudList)
			t.Fatalf("Mock response is not equal to example response for example specification/vmwarecloudsimple/resource-manager/Microsoft.VMwareCloudSimple/stable/2019-04-01/examples/ListPrivateCloudInLocation.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateClouds_Get(t *testing.T) {
	// From example specification/vmwarecloudsimple/resource-manager/Microsoft.VMwareCloudSimple/stable/2019-04-01/examples/GetPrivateCloud.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetPrivateCloud"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armvmwarecloudsimple.NewPrivateCloudsClient("{subscription-id}", cred, &options)
	res, err := client.Get(ctx,
		"myPrivateCloud",
		"westus2",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vmwarecloudsimple/resource-manager/Microsoft.VMwareCloudSimple/stable/2019-04-01/examples/GetPrivateCloud.json: %v", err)
	}
	// Response check
	{
		exampleRes := armvmwarecloudsimple.PrivateCloud{
			Name:     to.Ptr("myPrivateCloud"),
			Type:     to.Ptr("Microsoft.VMwareCloudSimple/privateClouds"),
			ID:       to.Ptr("/subscriptions/{subscription-id}/providers/Microsoft.VMwareCloudSimple/locations/westus2/privateClouds/myPrivateCloud"),
			Location: to.Ptr("westus2"),
			Properties: &armvmwarecloudsimple.PrivateCloudProperties{
				Type:                 to.Ptr("vSphere"),
				AvailabilityZoneID:   to.Ptr("az1"),
				AvailabilityZoneName: to.Ptr("Availability Zone 1"),
				ClustersNumber:       to.Ptr[int32](1),
				CreatedBy:            to.Ptr("john.doe@cloudsimple.com"),
				CreatedOn:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-22T09:55:36.627Z"); return t }()),
				DNSServers: []*string{
					to.Ptr("100.0.0.8"),
					to.Ptr("100.0.0.9")},
				Expires:            to.Ptr("n/a"),
				NsxType:            to.Ptr("Advanced"),
				PlacementGroupID:   to.Ptr("n1"),
				PlacementGroupName: to.Ptr("Placement Group 1"),
				PrivateCloudID:     to.Ptr("{pc-id}"),
				ResourcePools: []*armvmwarecloudsimple.ResourcePool{
					{
						Name:           to.Ptr("Workload"),
						Type:           to.Ptr("Microsoft.VMwareCloudSimple/resourcePools"),
						ID:             to.Ptr("/subscriptions/{subscription-id}/providers/Microsoft.VMwareCloudSimple/locations/westus2/privateClouds/myPrivateCloud/resourcePools/resgroup-26"),
						Location:       to.Ptr("westus2"),
						PrivateCloudID: to.Ptr("/subscriptions/{subscription-id}/providers/Microsoft.VMwareCloudSimple/locations/westus2/privateClouds/myPrivateCloud"),
						Properties: &armvmwarecloudsimple.ResourcePoolProperties{
							FullName: to.Ptr("myPrivateCloud/Datacenter/Cluster/Workload"),
						},
					}},
				State:          to.Ptr("operational"),
				TotalCPUCores:  to.Ptr[int32](28),
				TotalNodes:     to.Ptr[int32](1),
				TotalRAM:       to.Ptr[int32](256),
				TotalStorage:   to.Ptr[float32](5.625),
				VSphereVersion: to.Ptr("6.7u1"),
				VcenterFqdn:    to.Ptr("vcsa-4-westus2.az.cloudsimple.io"),
				VcenterRefid:   to.Ptr("100.0.0.6"),
				VirtualMachineTemplates: []*armvmwarecloudsimple.VirtualMachineTemplate{
					{
						Name:     to.Ptr("centos-template"),
						Type:     to.Ptr("Microsoft.VMwareCloudSimple/virtualMachineTemplates"),
						ID:       to.Ptr("/subscriptions/{subscription-id}/providers/Microsoft.VMwareCloudSimple/locations/westus2/privateClouds/myPrivateCloud/virtualMachineTemplates/vm-34"),
						Location: to.Ptr("westus2"),
						Properties: &armvmwarecloudsimple.VirtualMachineTemplateProperties{
							Path:        to.Ptr("Datacenter/Workload VMs"),
							AmountOfRAM: to.Ptr[int32](4096),
							Controllers: []*armvmwarecloudsimple.VirtualDiskController{
								{
									Name:    to.Ptr("SCSI controller 0"),
									Type:    to.Ptr("SCSI"),
									ID:      to.Ptr("1000"),
									SubType: to.Ptr("LSI_PARALEL"),
								}},
							Disks: []*armvmwarecloudsimple.VirtualDisk{
								{
									ControllerID:     to.Ptr("1000"),
									IndependenceMode: to.Ptr(armvmwarecloudsimple.DiskIndependenceModePersistent),
									TotalSize:        to.Ptr[int32](10485760),
									VirtualDiskID:    to.Ptr("2000"),
									VirtualDiskName:  to.Ptr("Hard disk 1"),
								}},
							GuestOS:     to.Ptr("Other (32-bit)"),
							GuestOSType: to.Ptr("other"),
							Nics: []*armvmwarecloudsimple.VirtualNic{
								{
									MacAddress: to.Ptr("00:50:56:a6:7e:93"),
									Network: &armvmwarecloudsimple.VirtualNetwork{
										ID: to.Ptr("/subscriptions/{subscription-id}/providers/Microsoft.VMwareCloudSimple/locations/westus2/privateClouds/myPrivateCloud/virtualNetworks/dvportgroup-19"),
									},
									NicType:        to.Ptr(armvmwarecloudsimple.NICTypeE1000),
									PowerOnBoot:    to.Ptr(true),
									VirtualNicID:   to.Ptr("4000"),
									VirtualNicName: to.Ptr("Network adapter 1"),
								}},
							NumberOfCores:  to.Ptr[int32](2),
							PrivateCloudID: to.Ptr("/subscriptions/{subscription-id}/providers/Microsoft.VMwareCloudSimple/locations/westus2/privateClouds/myPrivateCloud"),
							Vmwaretools:    to.Ptr("10309"),
						},
					}},
				VirtualNetworks: []*armvmwarecloudsimple.VirtualNetwork{
					{
						Name:       to.Ptr("Datacenter/CS-Management"),
						Type:       to.Ptr("Microsoft.VMwareCloudSimple/virtualNetworks"),
						Assignable: to.Ptr(false),
						ID:         to.Ptr("/subscriptions/{subscription-id}/providers/Microsoft.VMwareCloudSimple/locations/westus2/privateClouds/myPrivateCloud/virtualNetworks/dvportgroup-19"),
						Location:   to.Ptr("westus2"),
						Properties: &armvmwarecloudsimple.VirtualNetworkProperties{
							PrivateCloudID: to.Ptr("/subscriptions/{subscription-id}/providers/Microsoft.VMwareCloudSimple/locations/westus2/privateClouds/myPrivateCloud"),
						},
					},
					{
						Name:       to.Ptr("Datacenter/CS-Rescue"),
						Type:       to.Ptr("Microsoft.VMwareCloudSimple/virtualNetworks"),
						Assignable: to.Ptr(true),
						ID:         to.Ptr("/subscriptions/{subscription-id}/providers/Microsoft.VMwareCloudSimple/locations/westus2/privateClouds/myPrivateCloud/virtualNetworks/dvportgroup-20"),
						Location:   to.Ptr("westus2"),
						Properties: &armvmwarecloudsimple.VirtualNetworkProperties{
							PrivateCloudID: to.Ptr("/subscriptions/{subscription-id}/providers/Microsoft.VMwareCloudSimple/locations/westus2/privateClouds/myPrivateCloud"),
						},
					},
					{
						Name:       to.Ptr("Datacenter/CS-VSAN"),
						Type:       to.Ptr("Microsoft.VMwareCloudSimple/virtualNetworks"),
						Assignable: to.Ptr(false),
						ID:         to.Ptr("/subscriptions/{subscription-id}/providers/Microsoft.VMwareCloudSimple/locations/westus2/privateClouds/myPrivateCloud/virtualNetworks/dvportgroup-21"),
						Location:   to.Ptr("westus2"),
						Properties: &armvmwarecloudsimple.VirtualNetworkProperties{
							PrivateCloudID: to.Ptr("/subscriptions/{subscription-id}/providers/Microsoft.VMwareCloudSimple/locations/westus2/privateClouds/myPrivateCloud"),
						},
					},
					{
						Name:       to.Ptr("Datacenter/CS-VMotion"),
						Type:       to.Ptr("Microsoft.VMwareCloudSimple/virtualNetworks"),
						Assignable: to.Ptr(false),
						ID:         to.Ptr("/subscriptions/{subscription-id}/providers/Microsoft.VMwareCloudSimple/locations/westus2/privateClouds/myPrivateCloud/virtualNetworks/dvportgroup-22"),
						Location:   to.Ptr("westus2"),
						Properties: &armvmwarecloudsimple.VirtualNetworkProperties{
							PrivateCloudID: to.Ptr("/subscriptions/{subscription-id}/providers/Microsoft.VMwareCloudSimple/locations/westus2/privateClouds/myPrivateCloud"),
						},
					},
					{
						Name:       to.Ptr("Datacenter/net-01"),
						Type:       to.Ptr("Microsoft.VMwareCloudSimple/virtualNetworks"),
						Assignable: to.Ptr(true),
						ID:         to.Ptr("/subscriptions/{subscription-id}/providers/Microsoft.VMwareCloudSimple/locations/westus2/privateClouds/myPrivateCloud/virtualNetworks/dvportgroup-35"),
						Location:   to.Ptr("westus2"),
						Properties: &armvmwarecloudsimple.VirtualNetworkProperties{
							PrivateCloudID: to.Ptr("/subscriptions/{subscription-id}/providers/Microsoft.VMwareCloudSimple/locations/westus2/privateClouds/myPrivateCloud"),
						},
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateCloud) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateCloud)
			t.Fatalf("Mock response is not equal to example response for example specification/vmwarecloudsimple/resource-manager/Microsoft.VMwareCloudSimple/stable/2019-04-01/examples/GetPrivateCloud.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCustomizationPolicies_List(t *testing.T) {
	// From example specification/vmwarecloudsimple/resource-manager/Microsoft.VMwareCloudSimple/stable/2019-04-01/examples/ListCustomizationPolicies.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ListCustomizationPolicies"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armvmwarecloudsimple.NewCustomizationPoliciesClient("{subscription-id}", cred, &options)
	pager := client.List("myResourceGroup",
		"myPrivateCloud",
		&armvmwarecloudsimple.CustomizationPoliciesClientListOptions{Filter: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/vmwarecloudsimple/resource-manager/Microsoft.VMwareCloudSimple/stable/2019-04-01/examples/ListCustomizationPolicies.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armvmwarecloudsimple.CustomizationPoliciesListResponse{
			Value: []*armvmwarecloudsimple.CustomizationPolicy{
				{
					Name:     to.Ptr("Linux1"),
					Type:     to.Ptr("Microsoft.VMwareCloudSimple/customizationPolicies"),
					ID:       to.Ptr("/subscriptions/b85c4986-56ae-4ebd-b5c5-a1595ca3dab1/providers/Microsoft.VMwareCloudSimple/locations/westus2/privateClouds/foobar/customizationpolicies/Linux1"),
					Location: to.Ptr("westus2"),
					Properties: &armvmwarecloudsimple.CustomizationPolicyProperties{
						Type:           to.Ptr(armvmwarecloudsimple.CustomizationPolicyPropertiesTypeLINUX),
						PrivateCloudID: to.Ptr("/subscriptions/b85c4986-56ae-4ebd-b5c5-a1595ca3dab1/providers/Microsoft.VMwareCloudSimple/locations/westus2/privateClouds/foobar"),
						Specification: &armvmwarecloudsimple.CustomizationSpecification{
							Identity: &armvmwarecloudsimple.CustomizationIdentity{
								Type: to.Ptr(armvmwarecloudsimple.CustomizationIdentityTypeLINUX),
								HostName: &armvmwarecloudsimple.CustomizationHostName{
									Type: to.Ptr(armvmwarecloudsimple.CustomizationHostNameTypeUSERDEFINED),
								},
								UserData: &armvmwarecloudsimple.CustomizationIdentityUserData{
									IsPasswordPredefined: to.Ptr(false),
								},
							},
							NicSettings: []*armvmwarecloudsimple.CustomizationNicSetting{
								{
									Adapter: &armvmwarecloudsimple.CustomizationIPSettings{
										IP: &armvmwarecloudsimple.CustomizationIPAddress{
											Type: to.Ptr(armvmwarecloudsimple.CustomizationIPAddressTypeUSERDEFINED),
										},
									},
								}},
						},
						Version: to.Ptr("1568102823"),
					},
				},
				{
					Name:     to.Ptr("Linux2"),
					Type:     to.Ptr("Microsoft.VMwareCloudSimple/customizationPolicies"),
					ID:       to.Ptr("/subscriptions/b85c4986-56ae-4ebd-b5c5-a1595ca3dab1/providers/Microsoft.VMwareCloudSimple/locations/westus2/privateClouds/foobar/customizationpolicies/Linux2"),
					Location: to.Ptr("westus2"),
					Properties: &armvmwarecloudsimple.CustomizationPolicyProperties{
						Type:           to.Ptr(armvmwarecloudsimple.CustomizationPolicyPropertiesTypeLINUX),
						PrivateCloudID: to.Ptr("/subscriptions/b85c4986-56ae-4ebd-b5c5-a1595ca3dab1/providers/Microsoft.VMwareCloudSimple/locations/westus2/privateClouds/foobar"),
						Specification: &armvmwarecloudsimple.CustomizationSpecification{
							Identity: &armvmwarecloudsimple.CustomizationIdentity{
								Type: to.Ptr(armvmwarecloudsimple.CustomizationIdentityTypeLINUX),
								HostName: &armvmwarecloudsimple.CustomizationHostName{
									Type: to.Ptr(armvmwarecloudsimple.CustomizationHostNameTypeVIRTUALMACHINENAME),
								},
								UserData: &armvmwarecloudsimple.CustomizationIdentityUserData{
									IsPasswordPredefined: to.Ptr(false),
								},
							},
							NicSettings: []*armvmwarecloudsimple.CustomizationNicSetting{
								{
									Adapter: &armvmwarecloudsimple.CustomizationIPSettings{
										IP: &armvmwarecloudsimple.CustomizationIPAddress{
											Type: to.Ptr(armvmwarecloudsimple.CustomizationIPAddressTypeDHCPIP),
										},
									},
								}},
						},
						Version: to.Ptr("1568102846"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.CustomizationPoliciesListResponse) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.CustomizationPoliciesListResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/vmwarecloudsimple/resource-manager/Microsoft.VMwareCloudSimple/stable/2019-04-01/examples/ListCustomizationPolicies.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCustomizationPolicies_Get(t *testing.T) {
	// From example specification/vmwarecloudsimple/resource-manager/Microsoft.VMwareCloudSimple/stable/2019-04-01/examples/GetCustomizationPolicy.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetCustomizationPolicy"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armvmwarecloudsimple.NewCustomizationPoliciesClient("{subscription-id}", cred, &options)
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myPrivateCloud",
		"Linux1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vmwarecloudsimple/resource-manager/Microsoft.VMwareCloudSimple/stable/2019-04-01/examples/GetCustomizationPolicy.json: %v", err)
	}
	// Response check
	{
		exampleRes := armvmwarecloudsimple.CustomizationPolicy{
			Name:     to.Ptr("Linux1"),
			Type:     to.Ptr("Microsoft.VMwareCloudSimple/customizationPolicies"),
			ID:       to.Ptr("/subscriptions/b85c4986-56ae-4ebd-b5c5-a1595ca3dab1/providers/Microsoft.VMwareCloudSimple/locations/westus2/privateClouds/foobar/customizationpolicies/Linux1"),
			Location: to.Ptr("westus2"),
			Properties: &armvmwarecloudsimple.CustomizationPolicyProperties{
				Type:           to.Ptr(armvmwarecloudsimple.CustomizationPolicyPropertiesTypeLINUX),
				PrivateCloudID: to.Ptr("/subscriptions/b85c4986-56ae-4ebd-b5c5-a1595ca3dab1/providers/Microsoft.VMwareCloudSimple/locations/westus2/privateClouds/foobar"),
				Specification: &armvmwarecloudsimple.CustomizationSpecification{
					Identity: &armvmwarecloudsimple.CustomizationIdentity{
						Type: to.Ptr(armvmwarecloudsimple.CustomizationIdentityTypeLINUX),
						HostName: &armvmwarecloudsimple.CustomizationHostName{
							Type: to.Ptr(armvmwarecloudsimple.CustomizationHostNameTypeUSERDEFINED),
						},
						UserData: &armvmwarecloudsimple.CustomizationIdentityUserData{
							IsPasswordPredefined: to.Ptr(false),
						},
					},
					NicSettings: []*armvmwarecloudsimple.CustomizationNicSetting{
						{
							Adapter: &armvmwarecloudsimple.CustomizationIPSettings{
								IP: &armvmwarecloudsimple.CustomizationIPAddress{
									Type: to.Ptr(armvmwarecloudsimple.CustomizationIPAddressTypeUSERDEFINED),
								},
							},
						}},
				},
				Version: to.Ptr("1568102823"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.CustomizationPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CustomizationPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/vmwarecloudsimple/resource-manager/Microsoft.VMwareCloudSimple/stable/2019-04-01/examples/GetCustomizationPolicy.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestResourcePools_List(t *testing.T) {
	// From example specification/vmwarecloudsimple/resource-manager/Microsoft.VMwareCloudSimple/stable/2019-04-01/examples/ListResourcePools.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ListResourcePools"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armvmwarecloudsimple.NewResourcePoolsClient("{subscription-id}", cred, &options)
	pager := client.List("westus2",
		"myPrivateCloud",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/vmwarecloudsimple/resource-manager/Microsoft.VMwareCloudSimple/stable/2019-04-01/examples/ListResourcePools.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armvmwarecloudsimple.ResourcePoolsListResponse{
			Value: []*armvmwarecloudsimple.ResourcePool{
				{
					Name:           to.Ptr("Workload"),
					Type:           to.Ptr("Microsoft.VMwareCloudSimple/resourcePools"),
					ID:             to.Ptr("/subscriptions/{subscription-id}/providers/Microsoft.VMwareCloudSimple/locations/westus2/privateClouds/myPrivateCloud/resourcePools/resgroup-26"),
					Location:       to.Ptr("westus2"),
					PrivateCloudID: to.Ptr("/subscriptions/{subscription-id}/providers/Microsoft.VMwareCloudSimple/locations/westus2/privateClouds/myPrivateCloud"),
					Properties: &armvmwarecloudsimple.ResourcePoolProperties{
						FullName: to.Ptr("myPrivateCloud/Datacenter/Cluster/Workload"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ResourcePoolsListResponse) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ResourcePoolsListResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/vmwarecloudsimple/resource-manager/Microsoft.VMwareCloudSimple/stable/2019-04-01/examples/ListResourcePools.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestResourcePools_Get(t *testing.T) {
	// From example specification/vmwarecloudsimple/resource-manager/Microsoft.VMwareCloudSimple/stable/2019-04-01/examples/GetResourcePool.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetResourcePool"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armvmwarecloudsimple.NewResourcePoolsClient("{subscription-id}", cred, &options)
	res, err := client.Get(ctx,
		"westus2",
		"myPrivateCloud",
		"resgroup-26",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vmwarecloudsimple/resource-manager/Microsoft.VMwareCloudSimple/stable/2019-04-01/examples/GetResourcePool.json: %v", err)
	}
	// Response check
	{
		exampleRes := armvmwarecloudsimple.ResourcePool{
			Name:           to.Ptr("Workload"),
			Type:           to.Ptr("Microsoft.VMwareCloudSimple/resourcePools"),
			ID:             to.Ptr("/subscriptions/{subscription-id}/providers/Microsoft.VMwareCloudSimple/locations/westus2/privateClouds/myPrivateCloud/resourcePools/resgroup-26"),
			Location:       to.Ptr("westus2"),
			PrivateCloudID: to.Ptr("/subscriptions/{subscription-id}/providers/Microsoft.VMwareCloudSimple/locations/westus2/privateClouds/myPrivateCloud"),
			Properties: &armvmwarecloudsimple.ResourcePoolProperties{
				FullName: to.Ptr("myPrivateCloud/Datacenter/Cluster/Workload"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ResourcePool) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ResourcePool)
			t.Fatalf("Mock response is not equal to example response for example specification/vmwarecloudsimple/resource-manager/Microsoft.VMwareCloudSimple/stable/2019-04-01/examples/GetResourcePool.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualMachineTemplates_List(t *testing.T) {
	// From example specification/vmwarecloudsimple/resource-manager/Microsoft.VMwareCloudSimple/stable/2019-04-01/examples/ListVirtualMachineTemplates.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ListVirtualMachineTemplates"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armvmwarecloudsimple.NewVirtualMachineTemplatesClient("{subscription-id}", cred, &options)
	pager := client.List("myPrivateCloud",
		"westus2",
		"/subscriptions/{subscription-id}/providers/Microsoft.VMwareCloudSimple/locations/westus2/privateClouds/myPrivateCloud/resourcePools/resgroup-26",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/vmwarecloudsimple/resource-manager/Microsoft.VMwareCloudSimple/stable/2019-04-01/examples/ListVirtualMachineTemplates.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armvmwarecloudsimple.VirtualMachineTemplateListResponse{
			Value: []*armvmwarecloudsimple.VirtualMachineTemplate{
				{
					Name:     to.Ptr("centos-template"),
					Type:     to.Ptr("Microsoft.VMwareCloudSimple/virtualMachineTemplates"),
					ID:       to.Ptr("/subscriptions/{subscription-id}/providers/Microsoft.VMwareCloudSimple/locations/westus2/privateClouds/myPrivateCloud/virtualMachineTemplates/vm-34"),
					Location: to.Ptr("westus2"),
					Properties: &armvmwarecloudsimple.VirtualMachineTemplateProperties{
						Path:        to.Ptr("Datacenter/Workload VMs"),
						AmountOfRAM: to.Ptr[int32](4096),
						Controllers: []*armvmwarecloudsimple.VirtualDiskController{
							{
								Name:    to.Ptr("SCSI controller 0"),
								Type:    to.Ptr("SCSI"),
								ID:      to.Ptr("1000"),
								SubType: to.Ptr("LSI_PARALEL"),
							}},
						Disks: []*armvmwarecloudsimple.VirtualDisk{
							{
								ControllerID:     to.Ptr("1000"),
								IndependenceMode: to.Ptr(armvmwarecloudsimple.DiskIndependenceModePersistent),
								TotalSize:        to.Ptr[int32](10485760),
								VirtualDiskID:    to.Ptr("2000"),
								VirtualDiskName:  to.Ptr("Hard disk 1"),
							}},
						GuestOS:     to.Ptr("Other (32-bit)"),
						GuestOSType: to.Ptr("other"),
						Nics: []*armvmwarecloudsimple.VirtualNic{
							{
								MacAddress: to.Ptr("00:50:56:a6:7e:93"),
								Network: &armvmwarecloudsimple.VirtualNetwork{
									ID: to.Ptr("/subscriptions/{subscription-id}/providers/Microsoft.VMwareCloudSimple/locations/westus2/privateClouds/myPrivateCloud/virtualNetworks/dvportgroup-19"),
								},
								NicType:        to.Ptr(armvmwarecloudsimple.NICTypeE1000),
								PowerOnBoot:    to.Ptr(true),
								VirtualNicID:   to.Ptr("4000"),
								VirtualNicName: to.Ptr("Network adapter 1"),
							}},
						NumberOfCores:  to.Ptr[int32](2),
						PrivateCloudID: to.Ptr("/subscriptions/{subscription-id}/providers/Microsoft.VMwareCloudSimple/locations/westus2/privateClouds/myPrivateCloud"),
						Vmwaretools:    to.Ptr("10309"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.VirtualMachineTemplateListResponse) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.VirtualMachineTemplateListResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/vmwarecloudsimple/resource-manager/Microsoft.VMwareCloudSimple/stable/2019-04-01/examples/ListVirtualMachineTemplates.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualMachineTemplates_Get(t *testing.T) {
	// From example specification/vmwarecloudsimple/resource-manager/Microsoft.VMwareCloudSimple/stable/2019-04-01/examples/GetVirtualMachineTemplate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetVirtualMachineTemplate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armvmwarecloudsimple.NewVirtualMachineTemplatesClient("{subscription-id}", cred, &options)
	res, err := client.Get(ctx,
		"westus2",
		"myPrivateCloud",
		"vm-34",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vmwarecloudsimple/resource-manager/Microsoft.VMwareCloudSimple/stable/2019-04-01/examples/GetVirtualMachineTemplate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armvmwarecloudsimple.VirtualMachineTemplate{
			Name:     to.Ptr("centos-template"),
			Type:     to.Ptr("Microsoft.VMwareCloudSimple/virtualMachineTemplates"),
			ID:       to.Ptr("/subscriptions/{subscription-id}/providers/Microsoft.VMwareCloudSimple/locations/westus2/privateClouds/myPrivateCloud/virtualMachineTemplates/vm-34"),
			Location: to.Ptr("westus2"),
			Properties: &armvmwarecloudsimple.VirtualMachineTemplateProperties{
				Path:        to.Ptr("Datacenter/Workload VMs"),
				AmountOfRAM: to.Ptr[int32](4096),
				Controllers: []*armvmwarecloudsimple.VirtualDiskController{
					{
						Name:    to.Ptr("SCSI controller 0"),
						Type:    to.Ptr("SCSI"),
						ID:      to.Ptr("1000"),
						SubType: to.Ptr("LSI_PARALEL"),
					}},
				Disks: []*armvmwarecloudsimple.VirtualDisk{
					{
						ControllerID:     to.Ptr("1000"),
						IndependenceMode: to.Ptr(armvmwarecloudsimple.DiskIndependenceModePersistent),
						TotalSize:        to.Ptr[int32](10485760),
						VirtualDiskID:    to.Ptr("2000"),
						VirtualDiskName:  to.Ptr("Hard disk 1"),
					}},
				GuestOS:     to.Ptr("Other (32-bit)"),
				GuestOSType: to.Ptr("other"),
				Nics: []*armvmwarecloudsimple.VirtualNic{
					{
						MacAddress: to.Ptr("00:50:56:a6:7e:93"),
						Network: &armvmwarecloudsimple.VirtualNetwork{
							ID: to.Ptr("/subscriptions/{subscription-id}/providers/Microsoft.VMwareCloudSimple/locations/westus2/privateClouds/myPrivateCloud/virtualNetworks/dvportgroup-19"),
						},
						NicType:        to.Ptr(armvmwarecloudsimple.NICTypeE1000),
						PowerOnBoot:    to.Ptr(true),
						VirtualNicID:   to.Ptr("4000"),
						VirtualNicName: to.Ptr("Network adapter 1"),
					}},
				NumberOfCores:  to.Ptr[int32](2),
				PrivateCloudID: to.Ptr("/subscriptions/{subscription-id}/providers/Microsoft.VMwareCloudSimple/locations/westus2/privateClouds/myPrivateCloud"),
				Vmwaretools:    to.Ptr("10309"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualMachineTemplate) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualMachineTemplate)
			t.Fatalf("Mock response is not equal to example response for example specification/vmwarecloudsimple/resource-manager/Microsoft.VMwareCloudSimple/stable/2019-04-01/examples/GetVirtualMachineTemplate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualNetworks_List(t *testing.T) {
	// From example specification/vmwarecloudsimple/resource-manager/Microsoft.VMwareCloudSimple/stable/2019-04-01/examples/ListVirtualNetworks.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ListVirtualNetworks"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armvmwarecloudsimple.NewVirtualNetworksClient("{subscription-id}", cred, &options)
	pager := client.List("westus2",
		"myPrivateCloud",
		"/subscriptions/{subscription-id}/providers/Microsoft.VMwareCloudSimple/locations/westus2/privateClouds/myPrivateCloud/resourcePools/resgroup-26",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/vmwarecloudsimple/resource-manager/Microsoft.VMwareCloudSimple/stable/2019-04-01/examples/ListVirtualNetworks.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armvmwarecloudsimple.VirtualNetworkListResponse{
			Value: []*armvmwarecloudsimple.VirtualNetwork{
				{
					Name:       to.Ptr("Datacenter/CS-Management"),
					Type:       to.Ptr("Microsoft.VMwareCloudSimple/virtualNetworks"),
					Assignable: to.Ptr(false),
					ID:         to.Ptr("/subscriptions/{subscription-id}/providers/Microsoft.VMwareCloudSimple/locations/westus2/privateClouds/myPrivateCloud/virtualNetworks/dvportgroup-19"),
					Location:   to.Ptr("westus2"),
					Properties: &armvmwarecloudsimple.VirtualNetworkProperties{
						PrivateCloudID: to.Ptr("/subscriptions/{subscription-id}/providers/Microsoft.VMwareCloudSimple/locations/westus2/privateClouds/myPrivateCloud"),
					},
				},
				{
					Name:       to.Ptr("Datacenter/CS-Rescue"),
					Type:       to.Ptr("Microsoft.VMwareCloudSimple/virtualNetworks"),
					Assignable: to.Ptr(true),
					ID:         to.Ptr("/subscriptions/{subscription-id}/providers/Microsoft.VMwareCloudSimple/locations/westus2/privateClouds/myPrivateCloud/virtualNetworks/dvportgroup-20"),
					Location:   to.Ptr("westus2"),
					Properties: &armvmwarecloudsimple.VirtualNetworkProperties{
						PrivateCloudID: to.Ptr("/subscriptions/{subscription-id}/providers/Microsoft.VMwareCloudSimple/locations/westus2/privateClouds/myPrivateCloud"),
					},
				},
				{
					Name:       to.Ptr("Datacenter/CS-VSAN"),
					Type:       to.Ptr("Microsoft.VMwareCloudSimple/virtualNetworks"),
					Assignable: to.Ptr(false),
					ID:         to.Ptr("/subscriptions/{subscription-id}/providers/Microsoft.VMwareCloudSimple/locations/westus2/privateClouds/myPrivateCloud/virtualNetworks/dvportgroup-21"),
					Location:   to.Ptr("westus2"),
					Properties: &armvmwarecloudsimple.VirtualNetworkProperties{
						PrivateCloudID: to.Ptr("/subscriptions/{subscription-id}/providers/Microsoft.VMwareCloudSimple/locations/westus2/privateClouds/myPrivateCloud"),
					},
				},
				{
					Name:       to.Ptr("Datacenter/CS-VMotion"),
					Type:       to.Ptr("Microsoft.VMwareCloudSimple/virtualNetworks"),
					Assignable: to.Ptr(false),
					ID:         to.Ptr("/subscriptions/{subscription-id}/providers/Microsoft.VMwareCloudSimple/locations/westus2/privateClouds/myPrivateCloud/virtualNetworks/dvportgroup-22"),
					Location:   to.Ptr("westus2"),
					Properties: &armvmwarecloudsimple.VirtualNetworkProperties{
						PrivateCloudID: to.Ptr("/subscriptions/{subscription-id}/providers/Microsoft.VMwareCloudSimple/locations/westus2/privateClouds/myPrivateCloud"),
					},
				},
				{
					Name:       to.Ptr("Datacenter/net-01"),
					Type:       to.Ptr("Microsoft.VMwareCloudSimple/virtualNetworks"),
					Assignable: to.Ptr(true),
					ID:         to.Ptr("/subscriptions/{subscription-id}/providers/Microsoft.VMwareCloudSimple/locations/westus2/privateClouds/myPrivateCloud/virtualNetworks/dvportgroup-35"),
					Location:   to.Ptr("westus2"),
					Properties: &armvmwarecloudsimple.VirtualNetworkProperties{
						PrivateCloudID: to.Ptr("/subscriptions/{subscription-id}/providers/Microsoft.VMwareCloudSimple/locations/westus2/privateClouds/myPrivateCloud"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.VirtualNetworkListResponse) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.VirtualNetworkListResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/vmwarecloudsimple/resource-manager/Microsoft.VMwareCloudSimple/stable/2019-04-01/examples/ListVirtualNetworks.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualNetworks_Get(t *testing.T) {
	// From example specification/vmwarecloudsimple/resource-manager/Microsoft.VMwareCloudSimple/stable/2019-04-01/examples/GetVirtualNetwork.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetVirtualNetwork"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armvmwarecloudsimple.NewVirtualNetworksClient("{subscription-id}", cred, &options)
	res, err := client.Get(ctx,
		"westus2",
		"myPrivateCloud",
		"dvportgroup-19",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vmwarecloudsimple/resource-manager/Microsoft.VMwareCloudSimple/stable/2019-04-01/examples/GetVirtualNetwork.json: %v", err)
	}
	// Response check
	{
		exampleRes := armvmwarecloudsimple.VirtualNetwork{
			Name:       to.Ptr("Datacenter/CS-Management"),
			Type:       to.Ptr("Microsoft.VMwareCloudSimple/virtualNetworks"),
			Assignable: to.Ptr(false),
			ID:         to.Ptr("/subscriptions/{subscription-id}/providers/Microsoft.VMwareCloudSimple/locations/westus2/privateClouds/myPrivateCloud/virtualNetworks/dvportgroup-19"),
			Location:   to.Ptr("westus2"),
			Properties: &armvmwarecloudsimple.VirtualNetworkProperties{
				PrivateCloudID: to.Ptr("/subscriptions/{subscription-id}/providers/Microsoft.VMwareCloudSimple/locations/westus2/privateClouds/myPrivateCloud"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualNetwork) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualNetwork)
			t.Fatalf("Mock response is not equal to example response for example specification/vmwarecloudsimple/resource-manager/Microsoft.VMwareCloudSimple/stable/2019-04-01/examples/GetVirtualNetwork.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestUsages_List(t *testing.T) {
	// From example specification/vmwarecloudsimple/resource-manager/Microsoft.VMwareCloudSimple/stable/2019-04-01/examples/ListUsages.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ListUsages"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armvmwarecloudsimple.NewUsagesClient("{subscription-id}", cred, &options)
	pager := client.List("westus2",
		&armvmwarecloudsimple.UsagesClientListOptions{Filter: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/vmwarecloudsimple/resource-manager/Microsoft.VMwareCloudSimple/stable/2019-04-01/examples/ListUsages.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armvmwarecloudsimple.UsageListResponse{
			Value: []*armvmwarecloudsimple.Usage{
				{
					Name: &armvmwarecloudsimple.UsageName{
						LocalizedValue: to.Ptr("CS28-Node"),
						Value:          to.Ptr("general"),
					},
					CurrentValue: to.Ptr[int32](1),
					Limit:        to.Ptr[int32](5),
					Unit:         to.Ptr(armvmwarecloudsimple.UsageCountCount),
				},
				{
					Name: &armvmwarecloudsimple.UsageName{
						LocalizedValue: to.Ptr("CS36-Node"),
						Value:          to.Ptr("large"),
					},
					CurrentValue: to.Ptr[int32](0),
					Limit:        to.Ptr[int32](5),
					Unit:         to.Ptr(armvmwarecloudsimple.UsageCountCount),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.UsageListResponse) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.UsageListResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/vmwarecloudsimple/resource-manager/Microsoft.VMwareCloudSimple/stable/2019-04-01/examples/ListUsages.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualMachines_ListBySubscription(t *testing.T) {
	// From example specification/vmwarecloudsimple/resource-manager/Microsoft.VMwareCloudSimple/stable/2019-04-01/examples/ListVirtualMachines.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ListVirtualMachines"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armvmwarecloudsimple.NewVirtualMachinesClient("{subscription-id}",
		"<referer>", cred, &options)
	pager := client.ListBySubscription(&armvmwarecloudsimple.VirtualMachinesClientListBySubscriptionOptions{Filter: nil,
		Top:       nil,
		SkipToken: nil,
	})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/vmwarecloudsimple/resource-manager/Microsoft.VMwareCloudSimple/stable/2019-04-01/examples/ListVirtualMachines.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armvmwarecloudsimple.VirtualMachineListResponse{
			Value: []*armvmwarecloudsimple.VirtualMachine{
				{
					Name:     to.Ptr("virtualMachine-1"),
					Type:     to.Ptr("Microsoft.VMwareCloudSimple/virtualMachines"),
					ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup-1/providers/Microsoft.VMwareCloudSimple/virtualMachines/virtualMachine-1"),
					Location: to.Ptr("westus2"),
					Properties: &armvmwarecloudsimple.VirtualMachineProperties{
						AmountOfRAM: to.Ptr[int32](4096),
						Controllers: []*armvmwarecloudsimple.VirtualDiskController{
							{
								Name:    to.Ptr("SCSI controller 0"),
								Type:    to.Ptr("SCSI"),
								ID:      to.Ptr("1000"),
								SubType: to.Ptr("LSI_PARALEL"),
							}},
						Disks: []*armvmwarecloudsimple.VirtualDisk{
							{
								ControllerID:     to.Ptr("1000"),
								IndependenceMode: to.Ptr(armvmwarecloudsimple.DiskIndependenceModePersistent),
								TotalSize:        to.Ptr[int32](10485760),
								VirtualDiskID:    to.Ptr("2000"),
								VirtualDiskName:  to.Ptr("Hard disk 1"),
							}},
						GuestOS:     to.Ptr("Other (32-bit)"),
						GuestOSType: to.Ptr(armvmwarecloudsimple.GuestOSTypeOther),
						Nics: []*armvmwarecloudsimple.VirtualNic{
							{
								MacAddress: to.Ptr("00:50:56:a6:d0:e1"),
								Network: &armvmwarecloudsimple.VirtualNetwork{
									ID: to.Ptr("/subscriptions/{subscription-id}/providers/Microsoft.VMwareCloudSimple/locations/westus2/privateClouds/myPrivateCloud/virtualNetworks/dvportgroup-19"),
								},
								NicType:        to.Ptr(armvmwarecloudsimple.NICTypeE1000),
								PowerOnBoot:    to.Ptr(true),
								VirtualNicID:   to.Ptr("4000"),
								VirtualNicName: to.Ptr("Network adapter 1"),
							}},
						NumberOfCores:  to.Ptr[int32](2),
						PrivateCloudID: to.Ptr("/subscriptions/{subscription-id}/providers/Microsoft.VMwareCloudSimple/locations/westus2/privateClouds/myPrivateCloud"),
						ResourcePool: &armvmwarecloudsimple.ResourcePool{
							ID: to.Ptr("/subscriptions/{subscription-id}/providers/Microsoft.VMwareCloudSimple/locations/westus2/privateClouds/rp-test/resourcepools/resgroup-26"),
						},
						TemplateID:  to.Ptr("/subscriptions/{subscription-id}/providers/Microsoft.VMwareCloudSimple/locations/westus2/privateClouds/myPrivateCloud/virtualMachineTemplates/vm-34"),
						VMID:        to.Ptr("vm-100"),
						Vmwaretools: to.Ptr("10309"),
					},
					Tags: map[string]*string{
						"inUse": to.Ptr("true"),
					},
				},
				{
					Name:     to.Ptr("virtualMachine-2"),
					Type:     to.Ptr("Microsoft.VMwareCloudSimple/virtualMachines"),
					ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup-2/providers/Microsoft.VMwareCloudSimple/virtualMachines/virtualMachine-2"),
					Location: to.Ptr("westus2"),
					Properties: &armvmwarecloudsimple.VirtualMachineProperties{
						AmountOfRAM: to.Ptr[int32](4096),
						Controllers: []*armvmwarecloudsimple.VirtualDiskController{
							{
								Name:    to.Ptr("SCSI controller 0"),
								Type:    to.Ptr("SCSI"),
								ID:      to.Ptr("1000"),
								SubType: to.Ptr("LSI_PARALEL"),
							}},
						Disks: []*armvmwarecloudsimple.VirtualDisk{
							{
								ControllerID:     to.Ptr("1000"),
								IndependenceMode: to.Ptr(armvmwarecloudsimple.DiskIndependenceModePersistent),
								TotalSize:        to.Ptr[int32](10485760),
								VirtualDiskID:    to.Ptr("2000"),
								VirtualDiskName:  to.Ptr("Hard disk 1"),
							}},
						GuestOS:     to.Ptr("Other (32-bit)"),
						GuestOSType: to.Ptr(armvmwarecloudsimple.GuestOSTypeOther),
						Nics: []*armvmwarecloudsimple.VirtualNic{
							{
								MacAddress: to.Ptr("00:50:56:a6:33:12"),
								Network: &armvmwarecloudsimple.VirtualNetwork{
									ID: to.Ptr("/subscriptions/{subscription-id}/providers/Microsoft.VMwareCloudSimple/locations/westus2/privateClouds/myPrivateCloud/virtualNetworks/dvportgroup-19"),
								},
								NicType:        to.Ptr(armvmwarecloudsimple.NICTypeE1000),
								PowerOnBoot:    to.Ptr(true),
								VirtualNicID:   to.Ptr("4000"),
								VirtualNicName: to.Ptr("Network adapter 1"),
							}},
						NumberOfCores:  to.Ptr[int32](2),
						PrivateCloudID: to.Ptr("/subscriptions/{subscription-id}/providers/Microsoft.VMwareCloudSimple/locations/westus2/privateClouds/myPrivateCloud"),
						ResourcePool: &armvmwarecloudsimple.ResourcePool{
							ID: to.Ptr("/subscriptions/{subscription-id}/providers/Microsoft.VMwareCloudSimple/locations/westus2/privateClouds/rp-test/resourcepools/resgroup-26"),
						},
						TemplateID:  to.Ptr("/subscriptions/{subscription-id}/providers/Microsoft.VMwareCloudSimple/locations/westus2/privateClouds/myPrivateCloud/virtualMachineTemplates/vm-34"),
						VMID:        to.Ptr("vm-101"),
						Vmwaretools: to.Ptr("10309"),
					},
					Tags: map[string]*string{
						"inUse": to.Ptr("true"),
					},
				},
				{
					Name:     to.Ptr("virtualMachine-3"),
					Type:     to.Ptr("Microsoft.VMwareCloudSimple/virtualMachines"),
					ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup-1/providers/Microsoft.VMwareCloudSimple/virtualMachines/virtualMachine-3"),
					Location: to.Ptr("westus2"),
					Properties: &armvmwarecloudsimple.VirtualMachineProperties{
						AmountOfRAM: to.Ptr[int32](4096),
						Controllers: []*armvmwarecloudsimple.VirtualDiskController{
							{
								Name:    to.Ptr("SCSI controller 0"),
								Type:    to.Ptr("SCSI"),
								ID:      to.Ptr("1000"),
								SubType: to.Ptr("LSI_PARALEL"),
							}},
						Disks: []*armvmwarecloudsimple.VirtualDisk{
							{
								ControllerID:     to.Ptr("1000"),
								IndependenceMode: to.Ptr(armvmwarecloudsimple.DiskIndependenceModePersistent),
								TotalSize:        to.Ptr[int32](10485760),
								VirtualDiskID:    to.Ptr("2000"),
								VirtualDiskName:  to.Ptr("Hard disk 1"),
							}},
						GuestOS:     to.Ptr("Other (32-bit)"),
						GuestOSType: to.Ptr(armvmwarecloudsimple.GuestOSTypeOther),
						Nics: []*armvmwarecloudsimple.VirtualNic{
							{
								MacAddress: to.Ptr("00:50:56:a6:63:f3"),
								Network: &armvmwarecloudsimple.VirtualNetwork{
									ID: to.Ptr("/subscriptions/{subscription-id}/providers/Microsoft.VMwareCloudSimple/locations/westus2/privateClouds/myPrivateCloud/virtualNetworks/dvportgroup-19"),
								},
								NicType:        to.Ptr(armvmwarecloudsimple.NICTypeE1000),
								PowerOnBoot:    to.Ptr(true),
								VirtualNicID:   to.Ptr("4000"),
								VirtualNicName: to.Ptr("Network adapter 1"),
							}},
						NumberOfCores:  to.Ptr[int32](2),
						PrivateCloudID: to.Ptr("/subscriptions/{subscription-id}/providers/Microsoft.VMwareCloudSimple/locations/westus2/privateClouds/myPrivateCloud"),
						ResourcePool: &armvmwarecloudsimple.ResourcePool{
							ID: to.Ptr("/subscriptions/{subscription-id}/providers/Microsoft.VMwareCloudSimple/locations/westus2/privateClouds/rp-test/resourcepools/resgroup-26"),
						},
						TemplateID:  to.Ptr("/subscriptions/{subscription-id}/providers/Microsoft.VMwareCloudSimple/locations/westus2/privateClouds/myPrivateCloud/virtualMachineTemplates/vm-34"),
						VMID:        to.Ptr("vm-102"),
						Vmwaretools: to.Ptr("10309"),
					},
					Tags: map[string]*string{
						"inUse": to.Ptr("true"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.VirtualMachineListResponse) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.VirtualMachineListResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/vmwarecloudsimple/resource-manager/Microsoft.VMwareCloudSimple/stable/2019-04-01/examples/ListVirtualMachines.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualMachines_ListByResourceGroup(t *testing.T) {
	// From example specification/vmwarecloudsimple/resource-manager/Microsoft.VMwareCloudSimple/stable/2019-04-01/examples/ListRGVirtualMachines.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ListRGVirtualMachines"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armvmwarecloudsimple.NewVirtualMachinesClient("{subscription-id}",
		"<referer>", cred, &options)
	pager := client.ListByResourceGroup("myResourceGroup",
		&armvmwarecloudsimple.VirtualMachinesClientListByResourceGroupOptions{Filter: nil,
			Top:       nil,
			SkipToken: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/vmwarecloudsimple/resource-manager/Microsoft.VMwareCloudSimple/stable/2019-04-01/examples/ListRGVirtualMachines.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armvmwarecloudsimple.VirtualMachineListResponse{
			Value: []*armvmwarecloudsimple.VirtualMachine{
				{
					Name:     to.Ptr("virtualMachine-2"),
					Type:     to.Ptr("Microsoft.VMwareCloudSimple/virtualMachines"),
					ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.VMwareCloudSimple/virtualMachines/virtualMachine-2"),
					Location: to.Ptr("westus2"),
					Properties: &armvmwarecloudsimple.VirtualMachineProperties{
						AmountOfRAM: to.Ptr[int32](4096),
						Controllers: []*armvmwarecloudsimple.VirtualDiskController{
							{
								Name:    to.Ptr("SCSI controller 0"),
								Type:    to.Ptr("SCSI"),
								ID:      to.Ptr("1000"),
								SubType: to.Ptr("LSI_PARALEL"),
							}},
						Disks: []*armvmwarecloudsimple.VirtualDisk{
							{
								ControllerID:     to.Ptr("1000"),
								IndependenceMode: to.Ptr(armvmwarecloudsimple.DiskIndependenceModePersistent),
								TotalSize:        to.Ptr[int32](10485760),
								VirtualDiskID:    to.Ptr("2000"),
								VirtualDiskName:  to.Ptr("Hard disk 1"),
							}},
						GuestOS:     to.Ptr("Other (32-bit)"),
						GuestOSType: to.Ptr(armvmwarecloudsimple.GuestOSTypeOther),
						Nics: []*armvmwarecloudsimple.VirtualNic{
							{
								MacAddress: to.Ptr("00:50:56:a6:33:12"),
								Network: &armvmwarecloudsimple.VirtualNetwork{
									ID: to.Ptr("/subscriptions/{subscription-id}/providers/Microsoft.VMwareCloudSimple/locations/westus2/privateClouds/myPrivateCloud/virtualNetworks/dvportgroup-19"),
								},
								NicType:        to.Ptr(armvmwarecloudsimple.NICTypeE1000),
								PowerOnBoot:    to.Ptr(true),
								VirtualNicID:   to.Ptr("4000"),
								VirtualNicName: to.Ptr("Network adapter 1"),
							}},
						NumberOfCores:  to.Ptr[int32](2),
						PrivateCloudID: to.Ptr("/subscriptions/{subscription-id}/providers/Microsoft.VMwareCloudSimple/locations/westus2/privateClouds/myPrivateCloud"),
						ResourcePool: &armvmwarecloudsimple.ResourcePool{
							ID: to.Ptr("/subscriptions/{subscription-id}/providers/Microsoft.VMwareCloudSimple/locations/westus2/privateClouds/rp-test/resourcepools/resgroup-26"),
						},
						TemplateID:  to.Ptr("/subscriptions/{subscription-id}/providers/Microsoft.VMwareCloudSimple/locations/westus2/privateClouds/myPrivateCloud/virtualMachineTemplates/vm-34"),
						VMID:        to.Ptr("vm-101"),
						Vmwaretools: to.Ptr("10309"),
					},
					Tags: map[string]*string{
						"inUse": to.Ptr("true"),
					},
				},
				{
					Name:     to.Ptr("virtualMachine-3"),
					Type:     to.Ptr("Microsoft.VMwareCloudSimple/virtualMachines"),
					ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.VMwareCloudSimple/virtualMachines/virtualMachine-3"),
					Location: to.Ptr("westus2"),
					Properties: &armvmwarecloudsimple.VirtualMachineProperties{
						AmountOfRAM: to.Ptr[int32](4096),
						Controllers: []*armvmwarecloudsimple.VirtualDiskController{
							{
								Name:    to.Ptr("SCSI controller 0"),
								Type:    to.Ptr("SCSI"),
								ID:      to.Ptr("1000"),
								SubType: to.Ptr("LSI_PARALEL"),
							}},
						Disks: []*armvmwarecloudsimple.VirtualDisk{
							{
								ControllerID:     to.Ptr("1000"),
								IndependenceMode: to.Ptr(armvmwarecloudsimple.DiskIndependenceModePersistent),
								TotalSize:        to.Ptr[int32](10485760),
								VirtualDiskID:    to.Ptr("2000"),
								VirtualDiskName:  to.Ptr("Hard disk 1"),
							}},
						GuestOS:     to.Ptr("Other (32-bit)"),
						GuestOSType: to.Ptr(armvmwarecloudsimple.GuestOSTypeOther),
						Nics: []*armvmwarecloudsimple.VirtualNic{
							{
								MacAddress: to.Ptr("00:50:56:a6:63:f3"),
								Network: &armvmwarecloudsimple.VirtualNetwork{
									ID: to.Ptr("/subscriptions/{subscription-id}/providers/Microsoft.VMwareCloudSimple/locations/westus2/privateClouds/myPrivateCloud/virtualNetworks/dvportgroup-19"),
								},
								NicType:        to.Ptr(armvmwarecloudsimple.NICTypeE1000),
								PowerOnBoot:    to.Ptr(true),
								VirtualNicID:   to.Ptr("4000"),
								VirtualNicName: to.Ptr("Network adapter 1"),
							}},
						NumberOfCores:  to.Ptr[int32](2),
						PrivateCloudID: to.Ptr("/subscriptions/{subscription-id}/providers/Microsoft.VMwareCloudSimple/locations/westus2/privateClouds/myPrivateCloud"),
						ResourcePool: &armvmwarecloudsimple.ResourcePool{
							ID: to.Ptr("/subscriptions/{subscription-id}/providers/Microsoft.VMwareCloudSimple/locations/westus2/privateClouds/rp-test/resourcepools/resgroup-26"),
						},
						TemplateID:  to.Ptr("/subscriptions/{subscription-id}/providers/Microsoft.VMwareCloudSimple/locations/westus2/privateClouds/myPrivateCloud/virtualMachineTemplates/vm-34"),
						VMID:        to.Ptr("vm-102"),
						Vmwaretools: to.Ptr("10309"),
					},
					Tags: map[string]*string{
						"inUse": to.Ptr("true"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.VirtualMachineListResponse) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.VirtualMachineListResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/vmwarecloudsimple/resource-manager/Microsoft.VMwareCloudSimple/stable/2019-04-01/examples/ListRGVirtualMachines.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualMachines_Get(t *testing.T) {
	// From example specification/vmwarecloudsimple/resource-manager/Microsoft.VMwareCloudSimple/stable/2019-04-01/examples/GetVirtualMachine.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetVirtualMachine"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armvmwarecloudsimple.NewVirtualMachinesClient("{subscription-id}",
		"<referer>", cred, &options)
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myVirtualMachine",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vmwarecloudsimple/resource-manager/Microsoft.VMwareCloudSimple/stable/2019-04-01/examples/GetVirtualMachine.json: %v", err)
	}
	// Response check
	{
		exampleRes := armvmwarecloudsimple.VirtualMachine{
			Name:     to.Ptr("myVirtualMachine"),
			Type:     to.Ptr("Microsoft.VMwareCloudSimple/virtualMachines"),
			ID:       to.Ptr("/subscriptions/{subscription-id}/resourcegroups/myResourceGroup/providers/Microsoft.VMwareCloudSimple/virtualMachines/myVirtualMachine"),
			Location: to.Ptr("westus2"),
			Properties: &armvmwarecloudsimple.VirtualMachineProperties{
				AmountOfRAM: to.Ptr[int32](4096),
				Controllers: []*armvmwarecloudsimple.VirtualDiskController{
					{
						Name:    to.Ptr("SCSI controller 0"),
						Type:    to.Ptr("SCSI"),
						ID:      to.Ptr("1000"),
						SubType: to.Ptr("LSI_PARALEL"),
					}},
				Disks: []*armvmwarecloudsimple.VirtualDisk{
					{
						ControllerID:     to.Ptr("1000"),
						IndependenceMode: to.Ptr(armvmwarecloudsimple.DiskIndependenceModePersistent),
						TotalSize:        to.Ptr[int32](10485760),
						VirtualDiskID:    to.Ptr("2000"),
						VirtualDiskName:  to.Ptr("Hard disk 1"),
					}},
				Folder:      to.Ptr("Datacenter/Workload VMs"),
				GuestOS:     to.Ptr("Other (32-bit)"),
				GuestOSType: to.Ptr(armvmwarecloudsimple.GuestOSTypeOther),
				Nics: []*armvmwarecloudsimple.VirtualNic{
					{
						MacAddress: to.Ptr("00:50:56:a6:d0:e1"),
						Network: &armvmwarecloudsimple.VirtualNetwork{
							Name:       to.Ptr("Datacenter/CS-Management"),
							Type:       to.Ptr("Microsoft.VMwareCloudSimple/virtualNetworks"),
							Assignable: to.Ptr(false),
							ID:         to.Ptr("/subscriptions/{subscription-id}/providers/Microsoft.VMwareCloudSimple/locations/westus2/privateClouds/myPrivateCloud/virtualnetworks/dvportgroup-19"),
							Location:   to.Ptr("westus2"),
							Properties: &armvmwarecloudsimple.VirtualNetworkProperties{
								PrivateCloudID: to.Ptr("/subscriptions/{subscription-id}/providers/Microsoft.VMwareCloudSimple/locations/westus2/privateClouds/myPrivateCloud"),
							},
						},
						NicType:        to.Ptr(armvmwarecloudsimple.NICTypeE1000),
						PowerOnBoot:    to.Ptr(true),
						VirtualNicID:   to.Ptr("4000"),
						VirtualNicName: to.Ptr("Network adapter 1"),
					}},
				NumberOfCores:     to.Ptr[int32](2),
				PrivateCloudID:    to.Ptr("/subscriptions/{subscription-id}/providers/Microsoft.VMwareCloudSimple/locations/westus2/privateClouds/myPrivateCloud"),
				ProvisioningState: to.Ptr("Succeeded"),
				ResourcePool: &armvmwarecloudsimple.ResourcePool{
					Name:           to.Ptr("Workload"),
					Type:           to.Ptr("Microsoft.VMwareCloudSimple/resourcePools"),
					ID:             to.Ptr("/subscriptions/{subscription-id}/providers/Microsoft.VMwareCloudSimple/locations/westus2/privateClouds/myPrivateCloud/resourcepools/resgroup-26"),
					Location:       to.Ptr("westus2"),
					PrivateCloudID: to.Ptr("/subscriptions/{subscription-id}/providers/Microsoft.VMwareCloudSimple/locations/westus2/privateClouds/myPrivateCloud"),
					Properties: &armvmwarecloudsimple.ResourcePoolProperties{
						FullName: to.Ptr("Datacenter/Cluster/Workload"),
					},
				},
				Status:      to.Ptr(armvmwarecloudsimple.VirtualMachineStatusRunning),
				TemplateID:  to.Ptr("/subscriptions/{subscription-id}/providers/Microsoft.VMwareCloudSimple/locations/westus2/privateClouds/myPrivateCloud/virtualmachinetemplates/vm-34"),
				VMID:        to.Ptr("vm-100"),
				Vmwaretools: to.Ptr("10309"),
			},
			Tags: map[string]*string{
				"inUse": to.Ptr("true"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualMachine) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualMachine)
			t.Fatalf("Mock response is not equal to example response for example specification/vmwarecloudsimple/resource-manager/Microsoft.VMwareCloudSimple/stable/2019-04-01/examples/GetVirtualMachine.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualMachines_CreateOrUpdate(t *testing.T) {
	// From example specification/vmwarecloudsimple/resource-manager/Microsoft.VMwareCloudSimple/stable/2019-04-01/examples/CreateVirtualMachine.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CreateVirtualMachine"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armvmwarecloudsimple.NewVirtualMachinesClient("{subscription-id}",
		"https://management.azure.com/", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myVirtualMachine",
		armvmwarecloudsimple.VirtualMachine{
			Location: to.Ptr("westus2"),
			Properties: &armvmwarecloudsimple.VirtualMachineProperties{
				AmountOfRAM: to.Ptr[int32](4096),
				Disks: []*armvmwarecloudsimple.VirtualDisk{
					{
						ControllerID:     to.Ptr("1000"),
						IndependenceMode: to.Ptr(armvmwarecloudsimple.DiskIndependenceModePersistent),
						TotalSize:        to.Ptr[int32](10485760),
						VirtualDiskID:    to.Ptr("2000"),
					}},
				Nics: []*armvmwarecloudsimple.VirtualNic{
					{
						Network: &armvmwarecloudsimple.VirtualNetwork{
							ID: to.Ptr("/subscriptions/{subscription-id}/providers/Microsoft.VMwareCloudSimple/locations/westus2/privateClouds/myPrivateCloud/virtualNetworks/dvportgroup-19"),
						},
						NicType:      to.Ptr(armvmwarecloudsimple.NICTypeE1000),
						PowerOnBoot:  to.Ptr(true),
						VirtualNicID: to.Ptr("4000"),
					}},
				NumberOfCores:  to.Ptr[int32](2),
				PrivateCloudID: to.Ptr("/subscriptions/{subscription-id}/providers/Microsoft.VMwareCloudSimple/locations/westus2/privateClouds/myPrivateCloud"),
				ResourcePool: &armvmwarecloudsimple.ResourcePool{
					ID: to.Ptr("/subscriptions/{subscription-id}/providers/Microsoft.VMwareCloudSimple/locations/westus2/privateClouds/myPrivateCloud/resourcePools/resgroup-26"),
				},
				TemplateID: to.Ptr("/subscriptions/{subscription-id}/providers/Microsoft.VMwareCloudSimple/locations/westus2/privateClouds/myPrivateCloud/virtualMachineTemplates/vm-34"),
			},
		},
		&armvmwarecloudsimple.VirtualMachinesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vmwarecloudsimple/resource-manager/Microsoft.VMwareCloudSimple/stable/2019-04-01/examples/CreateVirtualMachine.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/vmwarecloudsimple/resource-manager/Microsoft.VMwareCloudSimple/stable/2019-04-01/examples/CreateVirtualMachine.json: %v", err)
	}
	// Response check
	{
		exampleRes := armvmwarecloudsimple.VirtualMachine{
			Name:     to.Ptr("myVirtualMachine"),
			Type:     to.Ptr("Microsoft.VMwareCloudSimple/virtualMachines"),
			ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.VMwareCloudSimple/virtualMachines/myVirtualMachine"),
			Location: to.Ptr("westus2"),
			Properties: &armvmwarecloudsimple.VirtualMachineProperties{
				AmountOfRAM: to.Ptr[int32](4096),
				Controllers: []*armvmwarecloudsimple.VirtualDiskController{},
				Disks: []*armvmwarecloudsimple.VirtualDisk{
					{
						ControllerID:     to.Ptr("1000"),
						IndependenceMode: to.Ptr(armvmwarecloudsimple.DiskIndependenceModePersistent),
						TotalSize:        to.Ptr[int32](10485760),
						VirtualDiskID:    to.Ptr("2000"),
						VirtualDiskName:  to.Ptr("Hard disk 1"),
					}},
				GuestOS:     to.Ptr("Other (32-bit)"),
				GuestOSType: to.Ptr(armvmwarecloudsimple.GuestOSTypeOther),
				Nics: []*armvmwarecloudsimple.VirtualNic{
					{
						Network: &armvmwarecloudsimple.VirtualNetwork{
							ID: to.Ptr("/subscriptions/{subscription-id}/providers/Microsoft.VMwareCloudSimple/locations/westus2/privateClouds/myPrivateCloud/virtualNetworks/dvportgroup-19"),
						},
						NicType:        to.Ptr(armvmwarecloudsimple.NICTypeE1000),
						PowerOnBoot:    to.Ptr(true),
						VirtualNicID:   to.Ptr("4000"),
						VirtualNicName: to.Ptr("Network adapter 1"),
					}},
				NumberOfCores:     to.Ptr[int32](2),
				PrivateCloudID:    to.Ptr("/subscriptions/{subscription-id}/providers/Microsoft.VMwareCloudSimple/locations/westus2/privateClouds/myPrivateCloud"),
				ProvisioningState: to.Ptr("Succeeded"),
				ResourcePool: &armvmwarecloudsimple.ResourcePool{
					ID: to.Ptr("/subscriptions/{subscription-id}/providers/Microsoft.VMwareCloudSimple/locations/westus2/privateClouds/myPrivateCloud/resourcePools/resgroup-26"),
				},
				TemplateID:  to.Ptr("/subscriptions/{subscription-id}/providers/Microsoft.VMwareCloudSimple/locations/westus2/privateClouds/myPrivateCloud/virtualMachineTemplates/vm-34"),
				Vmwaretools: to.Ptr("0"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualMachine) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualMachine)
			t.Fatalf("Mock response is not equal to example response for example specification/vmwarecloudsimple/resource-manager/Microsoft.VMwareCloudSimple/stable/2019-04-01/examples/CreateVirtualMachine.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualMachines_Delete(t *testing.T) {
	// From example specification/vmwarecloudsimple/resource-manager/Microsoft.VMwareCloudSimple/stable/2019-04-01/examples/DeleteVirtualMachine.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DeleteVirtualMachine"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armvmwarecloudsimple.NewVirtualMachinesClient("{subscription-id}",
		"https://management.azure.com/", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"myVirtualMachine",
		&armvmwarecloudsimple.VirtualMachinesClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vmwarecloudsimple/resource-manager/Microsoft.VMwareCloudSimple/stable/2019-04-01/examples/DeleteVirtualMachine.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/vmwarecloudsimple/resource-manager/Microsoft.VMwareCloudSimple/stable/2019-04-01/examples/DeleteVirtualMachine.json: %v", err)
	}
}

func TestVirtualMachines_Update(t *testing.T) {
	// From example specification/vmwarecloudsimple/resource-manager/Microsoft.VMwareCloudSimple/stable/2019-04-01/examples/PatchVirtualMachine.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PatchVirtualMachine"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armvmwarecloudsimple.NewVirtualMachinesClient("{subscription-id}",
		"<referer>", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"myResourceGroup",
		"myVirtualMachine",
		armvmwarecloudsimple.PatchPayload{
			Tags: map[string]*string{
				"myTag": to.Ptr("tagValue"),
			},
		},
		&armvmwarecloudsimple.VirtualMachinesClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vmwarecloudsimple/resource-manager/Microsoft.VMwareCloudSimple/stable/2019-04-01/examples/PatchVirtualMachine.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/vmwarecloudsimple/resource-manager/Microsoft.VMwareCloudSimple/stable/2019-04-01/examples/PatchVirtualMachine.json: %v", err)
	}
	// Response check
	{
		exampleRes := armvmwarecloudsimple.VirtualMachine{
			Name:     to.Ptr("myVirtualMachine"),
			Type:     to.Ptr("Microsoft.VMwareCloudSimple/virtualMachines"),
			ID:       to.Ptr("/subscriptions/{subscription-id}/resourcegroups/myResourceGroup/providers/Microsoft.VMwareCloudSimple/virtualMachines/myVirtualMachine"),
			Location: to.Ptr("westus2"),
			Properties: &armvmwarecloudsimple.VirtualMachineProperties{
				AmountOfRAM: to.Ptr[int32](4096),
				Controllers: []*armvmwarecloudsimple.VirtualDiskController{
					{
						Name:    to.Ptr("SCSI controller 0"),
						Type:    to.Ptr("SCSI"),
						ID:      to.Ptr("1000"),
						SubType: to.Ptr("LSI_PARALEL"),
					}},
				Disks: []*armvmwarecloudsimple.VirtualDisk{
					{
						ControllerID:     to.Ptr("1000"),
						IndependenceMode: to.Ptr(armvmwarecloudsimple.DiskIndependenceModePersistent),
						TotalSize:        to.Ptr[int32](10485760),
						VirtualDiskID:    to.Ptr("2000"),
						VirtualDiskName:  to.Ptr("Hard disk 1"),
					}},
				GuestOS:     to.Ptr("Other (32-bit)"),
				GuestOSType: to.Ptr(armvmwarecloudsimple.GuestOSTypeOther),
				Nics: []*armvmwarecloudsimple.VirtualNic{
					{
						Network: &armvmwarecloudsimple.VirtualNetwork{
							ID: to.Ptr("/subscriptions/{subscription-id}/providers/Microsoft.VMwareCloudSimple/locations/westus2/privateClouds/myPrivateCloud/virtualNetworks/dvportgroup-19"),
						},
						NicType:        to.Ptr(armvmwarecloudsimple.NICTypeE1000),
						PowerOnBoot:    to.Ptr(true),
						VirtualNicID:   to.Ptr("4000"),
						VirtualNicName: to.Ptr("Network adapter 1"),
					}},
				NumberOfCores:     to.Ptr[int32](2),
				PrivateCloudID:    to.Ptr("/subscriptions/{subscription-id}/providers/Microsoft.VMwareCloudSimple/locations/westus2/privateClouds/myPrivateCloud"),
				ProvisioningState: to.Ptr("Succeeded"),
				ResourcePool: &armvmwarecloudsimple.ResourcePool{
					ID: to.Ptr("/subscriptions/{subscription-id}/providers/Microsoft.VMwareCloudSimple/locations/westus2/privateClouds/myPrivateCloud/resourcePools/resgroup-26"),
				},
				Status:      to.Ptr(armvmwarecloudsimple.VirtualMachineStatusRunning),
				TemplateID:  to.Ptr("/subscriptions/{subscription-id}/providers/Microsoft.VMwareCloudSimple/locations/westus2/privateClouds/myPrivateCloud/virtualMachineTemplates/vm-34"),
				VMID:        to.Ptr("vm-106"),
				Vmwaretools: to.Ptr("10309"),
			},
			Tags: map[string]*string{
				"myTag": to.Ptr("tagValue"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VirtualMachine) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VirtualMachine)
			t.Fatalf("Mock response is not equal to example response for example specification/vmwarecloudsimple/resource-manager/Microsoft.VMwareCloudSimple/stable/2019-04-01/examples/PatchVirtualMachine.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestVirtualMachines_Start(t *testing.T) {
	// From example specification/vmwarecloudsimple/resource-manager/Microsoft.VMwareCloudSimple/stable/2019-04-01/examples/StartVirtualMachine.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"StartVirtualMachine"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armvmwarecloudsimple.NewVirtualMachinesClient("{subscription-id}",
		"https://management.azure.com/", cred, &options)
	poller, err := client.BeginStart(ctx,
		"myResourceGroup",
		"myVirtualMachine",
		&armvmwarecloudsimple.VirtualMachinesClientBeginStartOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vmwarecloudsimple/resource-manager/Microsoft.VMwareCloudSimple/stable/2019-04-01/examples/StartVirtualMachine.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/vmwarecloudsimple/resource-manager/Microsoft.VMwareCloudSimple/stable/2019-04-01/examples/StartVirtualMachine.json: %v", err)
	}
}

func TestVirtualMachines_Stop(t *testing.T) {
	// From example specification/vmwarecloudsimple/resource-manager/Microsoft.VMwareCloudSimple/stable/2019-04-01/examples/StopInBodyVirtualMachine.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"StopInBodyVirtualMachine"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armvmwarecloudsimple.NewVirtualMachinesClient("{subscription-id}",
		"https://management.azure.com/", cred, &options)
	poller, err := client.BeginStop(ctx,
		"myResourceGroup",
		"myVirtualMachine",
		&armvmwarecloudsimple.VirtualMachinesClientBeginStopOptions{Mode: nil,
			M:           &armvmwarecloudsimple.VirtualMachineStopMode{},
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vmwarecloudsimple/resource-manager/Microsoft.VMwareCloudSimple/stable/2019-04-01/examples/StopInBodyVirtualMachine.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/vmwarecloudsimple/resource-manager/Microsoft.VMwareCloudSimple/stable/2019-04-01/examples/StopInBodyVirtualMachine.json: %v", err)
	}

	// From example specification/vmwarecloudsimple/resource-manager/Microsoft.VMwareCloudSimple/stable/2019-04-01/examples/StopInQueryVirtualMachine.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"StopInQueryVirtualMachine"},
	})
	client = armvmwarecloudsimple.NewVirtualMachinesClient("{subscription-id}",
		"https://management.azure.com/", cred, &options)
	poller, err = client.BeginStop(ctx,
		"myResourceGroup",
		"myVirtualMachine",
		&armvmwarecloudsimple.VirtualMachinesClientBeginStopOptions{Mode: to.Ptr(armvmwarecloudsimple.StopModeSuspend),
			M:           nil,
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/vmwarecloudsimple/resource-manager/Microsoft.VMwareCloudSimple/stable/2019-04-01/examples/StopInQueryVirtualMachine.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/vmwarecloudsimple/resource-manager/Microsoft.VMwareCloudSimple/stable/2019-04-01/examples/StopInQueryVirtualMachine.json: %v", err)
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
