//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armvmwarecloudsimple

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"golang.org/x/net/http2"
)

var (
	ctx            context.Context
	subscriptionId string
	cred           azcore.TokenCredential
	err            error
	con            *arm.Connection
	mockHost       string
)

func TestOperations_List(t *testing.T) {
	// From example ListOperations
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewOperationsClient(con,
		nil,
		nil)
	pager := client.List(&OperationsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
	}
}

func TestOperations_Get(t *testing.T) {
	// From example GetFailedOperationResult
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewOperationsClient(con,
		"{subscription-id}",
		"https://management.azure.com/")
	res, err := client.Get(ctx,
		"westus2",
		"d030bb3f-7d53-11e9-8e09-9a86872085ff",
		&OperationsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.OperationResource.ID == nil {
		t.Fatal("OperationResource.ID should not be nil!")
	}

	// From example GetOperationResult
	res, err = client.Get(ctx,
		"westus2",
		"f8e1c8f1-7d52-11e9-8e07-9a86872085ff",
		&OperationsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.OperationResource.ID == nil {
		t.Fatal("OperationResource.ID should not be nil!")
	}
}

func TestDedicatedCloudNodes_ListBySubscription(t *testing.T) {
	// From example ListDedicatedCloudNodes
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDedicatedCloudNodesClient(con,
		"{subscription-id}",
		nil)
	pager := client.ListBySubscription(&DedicatedCloudNodesListBySubscriptionOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("DedicatedCloudNode.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("DedicatedCloudNode.ID should not be nil!")
			}
		}
	}
}

func TestDedicatedCloudNodes_ListByResourceGroup(t *testing.T) {
	// From example ListRGDedicatedCloudNodes
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDedicatedCloudNodesClient(con,
		"{subscription-id}",
		nil)
	pager := client.ListByResourceGroup("myResourceGroup",
		&DedicatedCloudNodesListByResourceGroupOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("DedicatedCloudNode.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("DedicatedCloudNode.ID should not be nil!")
			}
		}
	}
}

func TestDedicatedCloudNodes_Get(t *testing.T) {
	// From example GetDedicatedCloudNode
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDedicatedCloudNodesClient(con,
		"{subscription-id}",
		nil)
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myNode",
		&DedicatedCloudNodesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DedicatedCloudNode.ID == nil {
		t.Fatal("DedicatedCloudNode.ID should not be nil!")
	}
}

func TestDedicatedCloudNodes_CreateOrUpdate(t *testing.T) {
	// From example CreateDedicatedCloudNode
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDedicatedCloudNodesClient(con,
		"{subscription-id}",
		"https://management.azure.com/")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myNode",
		DedicatedCloudNode{
			Location: to.StringPtr("westus"),
			Properties: &DedicatedCloudNodeProperties{
				AvailabilityZoneID: to.StringPtr("az1"),
				NodesCount:         to.Int32Ptr(1),
				PlacementGroupID:   to.StringPtr("n1"),
				PurchaseID:         to.StringPtr("56acbd46-3d36-4bbf-9b08-57c30fdf6932"),
				SKUDescription: &SKUDescription{
					Name: to.StringPtr("CS28-Node"),
					ID:   to.StringPtr("general"),
				},
			},
			SKU: &SKU{
				Name: to.StringPtr("VMware_CloudSimple_CS28"),
			},
		},
		&DedicatedCloudNodesBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.DedicatedCloudNode.ID == nil {
		t.Fatal("DedicatedCloudNode.ID should not be nil!")
	}
}

func TestDedicatedCloudNodes_Delete(t *testing.T) {
	// From example DeleteDedicatedCloudNode
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDedicatedCloudNodesClient(con,
		"{subscription-id}",
		nil)
	_, err := client.Delete(ctx,
		"myResourceGroup",
		"myNode",
		&DedicatedCloudNodesDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestDedicatedCloudNodes_Update(t *testing.T) {
	// From example PatchDedicatedCloudNode
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDedicatedCloudNodesClient(con,
		"{subscription-id}",
		nil)
	res, err := client.Update(ctx,
		"myResourceGroup",
		"myNode",
		PatchPayload{
			Tags: map[string]*string{
				"myTag": to.StringPtr("tagValue"),
			},
		},
		&DedicatedCloudNodesUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DedicatedCloudNode.ID == nil {
		t.Fatal("DedicatedCloudNode.ID should not be nil!")
	}
}

func TestDedicatedCloudServices_ListBySubscription(t *testing.T) {
	// From example ListDedicatedCloudServices
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDedicatedCloudServicesClient(con,
		"{subscription-id}")
	pager := client.ListBySubscription(&DedicatedCloudServicesListBySubscriptionOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("DedicatedCloudService.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("DedicatedCloudService.ID should not be nil!")
			}
		}
	}
}

func TestDedicatedCloudServices_ListByResourceGroup(t *testing.T) {
	// From example ListRGDedicatedCloudServices
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDedicatedCloudServicesClient(con,
		"{subscription-id}")
	pager := client.ListByResourceGroup("myResourceGroup",
		&DedicatedCloudServicesListByResourceGroupOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("DedicatedCloudService.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("DedicatedCloudService.ID should not be nil!")
			}
		}
	}
}

func TestDedicatedCloudServices_Get(t *testing.T) {
	// From example GetDedicatedCloudService
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDedicatedCloudServicesClient(con,
		"{subscription-id}")
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myService",
		&DedicatedCloudServicesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DedicatedCloudService.ID == nil {
		t.Fatal("DedicatedCloudService.ID should not be nil!")
	}
}

func TestDedicatedCloudServices_CreateOrUpdate(t *testing.T) {
	// From example CreateDedicatedCloudService
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDedicatedCloudServicesClient(con,
		"{subscription-id}")
	res, err := client.CreateOrUpdate(ctx,
		"myResourceGroup",
		"myService",
		DedicatedCloudService{
			Location: to.StringPtr("westus"),
			Properties: &DedicatedCloudServiceProperties{
				GatewaySubnet: to.StringPtr("10.0.0.0"),
			},
		},
		&DedicatedCloudServicesCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DedicatedCloudService.ID == nil {
		t.Fatal("DedicatedCloudService.ID should not be nil!")
	}
}

func TestDedicatedCloudServices_Delete(t *testing.T) {
	// From example DeleteDedicatedCloudService
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDedicatedCloudServicesClient(con,
		"{subscription-id}")
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"myService",
		&DedicatedCloudServicesBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestDedicatedCloudServices_Update(t *testing.T) {
	// From example PatchDedicatedService
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDedicatedCloudServicesClient(con,
		"{subscription-id}")
	res, err := client.Update(ctx,
		"myResourceGroup",
		"myService",
		PatchPayload{
			Tags: map[string]*string{
				"myTag": to.StringPtr("tagValue"),
			},
		},
		&DedicatedCloudServicesUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DedicatedCloudService.ID == nil {
		t.Fatal("DedicatedCloudService.ID should not be nil!")
	}
}

func TestSkusAvailability_List(t *testing.T) {
	// From example ListAvailabilities
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSKUsAvailabilityClient(con,
		"{subscription-id}")
	pager := client.List("westus2",
		&SKUsAvailabilityListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
	}
}

func TestPrivateClouds_List(t *testing.T) {
	// From example ListPrivateCloudInLocation
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateCloudsClient(con,
		"{subscription-id}")
	pager := client.List("eastus",
		&PrivateCloudsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("PrivateCloud.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("PrivateCloud.ID should not be nil!")
			}
		}
	}
}

func TestPrivateClouds_Get(t *testing.T) {
	// From example GetPrivateCloud
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateCloudsClient(con,
		"{subscription-id}")
	res, err := client.Get(ctx,
		"myPrivateCloud",
		"westus2",
		&PrivateCloudsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.PrivateCloud.ID == nil {
		t.Fatal("PrivateCloud.ID should not be nil!")
	}
}

func TestCustomizationPolicies_List(t *testing.T) {
	// From example ListCustomizationPolicies
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewCustomizationPoliciesClient(con,
		"{subscription-id}")
	pager := client.List("myResourceGroup",
		"myPrivateCloud",
		&CustomizationPoliciesListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("CustomizationPolicy.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("CustomizationPolicy.ID should not be nil!")
			}
		}
	}
}

func TestCustomizationPolicies_Get(t *testing.T) {
	// From example GetCustomizationPolicy
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewCustomizationPoliciesClient(con,
		"{subscription-id}")
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myPrivateCloud",
		"Linux1",
		&CustomizationPoliciesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.CustomizationPolicy.ID == nil {
		t.Fatal("CustomizationPolicy.ID should not be nil!")
	}
}

func TestResourcePools_List(t *testing.T) {
	// From example ListResourcePools
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewResourcePoolsClient(con,
		"{subscription-id}")
	pager := client.List("westus2",
		"myPrivateCloud",
		&ResourcePoolsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ResourcePool.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ResourcePool.ID should not be nil!")
			}
		}
	}
}

func TestResourcePools_Get(t *testing.T) {
	// From example GetResourcePool
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewResourcePoolsClient(con,
		"{subscription-id}")
	res, err := client.Get(ctx,
		"westus2",
		"myPrivateCloud",
		"resgroup-26",
		&ResourcePoolsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ResourcePool.ID == nil {
		t.Fatal("ResourcePool.ID should not be nil!")
	}
}

func TestVirtualMachineTemplates_List(t *testing.T) {
	// From example ListVirtualMachineTemplates
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualMachineTemplatesClient(con,
		"{subscription-id}")
	pager := client.List("myPrivateCloud",
		"westus2",
		"/subscriptions/{subscription-id}/providers/Microsoft.VMwareCloudSimple/locations/westus2/privateClouds/myPrivateCloud/resourcePools/resgroup-26",
		&VirtualMachineTemplatesListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("VirtualMachineTemplate.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("VirtualMachineTemplate.ID should not be nil!")
			}
		}
	}
}

func TestVirtualMachineTemplates_Get(t *testing.T) {
	// From example GetVirtualMachineTemplate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualMachineTemplatesClient(con,
		"{subscription-id}")
	res, err := client.Get(ctx,
		"westus2",
		"myPrivateCloud",
		"vm-34",
		&VirtualMachineTemplatesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.VirtualMachineTemplate.ID == nil {
		t.Fatal("VirtualMachineTemplate.ID should not be nil!")
	}
}

func TestVirtualNetworks_List(t *testing.T) {
	// From example ListVirtualNetworks
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualNetworksClient(con,
		"{subscription-id}")
	pager := client.List("westus2",
		"myPrivateCloud",
		"/subscriptions/{subscription-id}/providers/Microsoft.VMwareCloudSimple/locations/westus2/privateClouds/myPrivateCloud/resourcePools/resgroup-26",
		&VirtualNetworksListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("VirtualNetwork.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("VirtualNetwork.ID should not be nil!")
			}
		}
	}
}

func TestVirtualNetworks_Get(t *testing.T) {
	// From example GetVirtualNetwork
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualNetworksClient(con,
		"{subscription-id}")
	res, err := client.Get(ctx,
		"westus2",
		"myPrivateCloud",
		"dvportgroup-19",
		&VirtualNetworksGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.VirtualNetwork.ID == nil {
		t.Fatal("VirtualNetwork.ID should not be nil!")
	}
}

func TestUsages_List(t *testing.T) {
	// From example ListUsages
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewUsagesClient(con,
		"{subscription-id}")
	pager := client.List("westus2",
		&UsagesListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
	}
}

func TestVirtualMachines_ListBySubscription(t *testing.T) {
	// From example ListVirtualMachines
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualMachinesClient(con,
		"{subscription-id}",
		nil)
	pager := client.ListBySubscription(&VirtualMachinesListBySubscriptionOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("VirtualMachine.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("VirtualMachine.ID should not be nil!")
			}
		}
	}
}

func TestVirtualMachines_ListByResourceGroup(t *testing.T) {
	// From example ListRGVirtualMachines
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualMachinesClient(con,
		"{subscription-id}",
		nil)
	pager := client.ListByResourceGroup("myResourceGroup",
		&VirtualMachinesListByResourceGroupOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("VirtualMachine.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("VirtualMachine.ID should not be nil!")
			}
		}
	}
}

func TestVirtualMachines_Get(t *testing.T) {
	// From example GetVirtualMachine
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualMachinesClient(con,
		"{subscription-id}",
		nil)
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myVirtualMachine",
		&VirtualMachinesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.VirtualMachine.ID == nil {
		t.Fatal("VirtualMachine.ID should not be nil!")
	}
}

func TestVirtualMachines_CreateOrUpdate(t *testing.T) {
	// From example CreateVirtualMachine
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualMachinesClient(con,
		"{subscription-id}",
		"https://management.azure.com/")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myVirtualMachine",
		VirtualMachine{
			Location: to.StringPtr("westus2"),
			Properties: &VirtualMachineProperties{
				AmountOfRAM: to.Int32Ptr(4096),
				Disks: []*VirtualDisk{
					{
						ControllerID:     to.StringPtr("1000"),
						IndependenceMode: DiskIndependenceModePersistent.ToPtr(),
						TotalSize:        to.Int32Ptr(10485760),
						VirtualDiskID:    to.StringPtr("2000"),
					}},
				Nics: []*VirtualNic{
					{
						Network: &VirtualNetwork{
							ID: to.StringPtr("/subscriptions/{subscription-id}/providers/Microsoft.VMwareCloudSimple/locations/westus2/privateClouds/myPrivateCloud/virtualNetworks/dvportgroup-19"),
						},
						NicType:      NICTypeE1000.ToPtr(),
						PowerOnBoot:  to.BoolPtr(true),
						VirtualNicID: to.StringPtr("4000"),
					}},
				NumberOfCores:  to.Int32Ptr(2),
				PrivateCloudID: to.StringPtr("/subscriptions/{subscription-id}/providers/Microsoft.VMwareCloudSimple/locations/westus2/privateClouds/myPrivateCloud"),
				ResourcePool: &ResourcePool{
					ID: to.StringPtr("/subscriptions/{subscription-id}/providers/Microsoft.VMwareCloudSimple/locations/westus2/privateClouds/myPrivateCloud/resourcePools/resgroup-26"),
				},
				TemplateID: to.StringPtr("/subscriptions/{subscription-id}/providers/Microsoft.VMwareCloudSimple/locations/westus2/privateClouds/myPrivateCloud/virtualMachineTemplates/vm-34"),
			},
		},
		&VirtualMachinesBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.VirtualMachine.ID == nil {
		t.Fatal("VirtualMachine.ID should not be nil!")
	}
}

func TestVirtualMachines_Delete(t *testing.T) {
	// From example DeleteVirtualMachine
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualMachinesClient(con,
		"{subscription-id}",
		"https://management.azure.com/")
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"myVirtualMachine",
		&VirtualMachinesBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestVirtualMachines_Update(t *testing.T) {
	// From example PatchVirtualMachine
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualMachinesClient(con,
		"{subscription-id}",
		nil)
	poller, err := client.BeginUpdate(ctx,
		"myResourceGroup",
		"myVirtualMachine",
		PatchPayload{
			Tags: map[string]*string{
				"myTag": to.StringPtr("tagValue"),
			},
		},
		&VirtualMachinesBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.VirtualMachine.ID == nil {
		t.Fatal("VirtualMachine.ID should not be nil!")
	}
}

func TestVirtualMachines_Start(t *testing.T) {
	// From example StartVirtualMachine
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualMachinesClient(con,
		"{subscription-id}",
		"https://management.azure.com/")
	poller, err := client.BeginStart(ctx,
		"myResourceGroup",
		"myVirtualMachine",
		&VirtualMachinesBeginStartOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestVirtualMachines_Stop(t *testing.T) {
	// From example StopInBodyVirtualMachine
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewVirtualMachinesClient(con,
		"{subscription-id}",
		"https://management.azure.com/")
	poller, err := client.BeginStop(ctx,
		"myResourceGroup",
		"myVirtualMachine",
		&VirtualMachinesBeginStopOptions{M: &VirtualMachineStopMode{}})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}

	// From example StopInQueryVirtualMachine
	poller, err = client.BeginStop(ctx,
		"myResourceGroup",
		"myVirtualMachine",
		&VirtualMachinesBeginStopOptions{Mode: StopModeSuspend.ToPtr()})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	subscriptionId = getEnv("SUBSCRIPTION_ID", "00000000-0000-0000-0000-000000000000")
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}
	cred, err = azidentity.NewEnvironmentCredential(&azidentity.EnvironmentCredentialOptions{AuthorityHost: mockHost, HTTPClient: client})
	if err != nil {
		panic(err)
	}

	con = arm.NewConnection(mockHost, cred, &arm.ConnectionOptions{
		Logging: policy.LogOptions{
			IncludeBody: true,
		},
		HTTPClient: client,
	})
}

func tearDown() {

}
