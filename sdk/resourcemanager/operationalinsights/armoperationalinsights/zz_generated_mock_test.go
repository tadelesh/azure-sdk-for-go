//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armoperationalinsights

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"golang.org/x/net/http2"
)

var (
	ctx            context.Context
	subscriptionId string
	cred           azcore.TokenCredential
	err            error
	con            *arm.Connection
	mockHost       string
)

func TestDataExports_ListByWorkspace(t *testing.T) {
	// From example DataExportGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDataExportsClient(con,
		"00000000-0000-0000-0000-00000000000")
	_, err := client.ListByWorkspace(ctx,
		"RgTest1",
		"DeWnTest1234",
		&DataExportsListByWorkspaceOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestDataExports_CreateOrUpdate(t *testing.T) {
	// From example DataExportCreate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDataExportsClient(con,
		"00000000-0000-0000-0000-00000000000")
	res, err := client.CreateOrUpdate(ctx,
		"RgTest1",
		"DeWnTest1234",
		"export1",
		DataExport{
			Properties: &DataExportProperties{
				Destination: &Destination{
					ResourceID: to.StringPtr("/subscriptions/192b9f85-a39a-4276-b96d-d5cd351703f9/resourceGroups/OIAutoRest1234/providers/Microsoft.EventHub/namespaces/test"),
				},
				TableNames: []*string{
					to.StringPtr("Heartbeat")},
			},
		},
		&DataExportsCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DataExport.ID == nil {
		t.Fatal("DataExport.ID should not be nil!")
	}
}

func TestDataExports_Get(t *testing.T) {
	// From example DataExportGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDataExportsClient(con,
		"00000000-0000-0000-0000-00000000000")
	res, err := client.Get(ctx,
		"RgTest1",
		"DeWnTest1234",
		"export1",
		&DataExportsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DataExport.ID == nil {
		t.Fatal("DataExport.ID should not be nil!")
	}
}

func TestDataExports_Delete(t *testing.T) {
	// From example DataExportDelete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDataExportsClient(con,
		"00000000-0000-0000-0000-00000000000")
	_, err := client.Delete(ctx,
		"RgTest1",
		"DeWnTest1234",
		"export1",
		&DataExportsDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestDataSources_CreateOrUpdate(t *testing.T) {
	// From example DataSourcesCreate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDataSourcesClient(con,
		"00000000-0000-0000-0000-00000000000")
	res, err := client.CreateOrUpdate(ctx,
		"OIAutoRest5123",
		"AzTest9724",
		"AzTestDS774",
		DataSource{
			Kind: DataSourceKindAzureActivityLog.ToPtr(),
			Properties: map[string]interface{}{
				"LinkedResourceId": "/subscriptions/00000000-0000-0000-0000-00000000000/providers/microsoft.insights/eventtypes/management",
			},
		},
		&DataSourcesCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DataSource.ID == nil {
		t.Fatal("DataSource.ID should not be nil!")
	}
}

func TestDataSources_Delete(t *testing.T) {
	// From example DataSourcesDelete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDataSourcesClient(con,
		"00000000-0000-0000-0000-00000000000")
	_, err := client.Delete(ctx,
		"OIAutoRest5123",
		"AzTest9724",
		"AzTestDS774",
		&DataSourcesDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestDataSources_Get(t *testing.T) {
	// From example DataSourcesGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDataSourcesClient(con,
		"00000000-0000-0000-0000-00000000000")
	res, err := client.Get(ctx,
		"OIAutoRest5123",
		"AzTest9724",
		"AzTestDS774",
		&DataSourcesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DataSource.ID == nil {
		t.Fatal("DataSource.ID should not be nil!")
	}
}

func TestDataSources_ListByWorkspace(t *testing.T) {
	// From example DataSourcesListByWorkspace
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDataSourcesClient(con,
		"00000000-0000-0000-0000-00000000000")
	pager := client.ListByWorkspace("OIAutoRest5123",
		"AzTest9724",
		"kind='WindowsEvent'",
		&DataSourcesListByWorkspaceOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("DataSource.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("DataSource.ID should not be nil!")
			}
		}
	}
}

func TestIntelligencePacks_Disable(t *testing.T) {
	// From example IntelligencePacksDisable
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIntelligencePacksClient(con,
		"00000000-0000-0000-0000-00000000000")
	_, err := client.Disable(ctx,
		"rg1",
		"TestLinkWS",
		"ChangeTracking",
		&IntelligencePacksDisableOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestIntelligencePacks_Enable(t *testing.T) {
	// From example IntelligencePacksEnable
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIntelligencePacksClient(con,
		"00000000-0000-0000-0000-00000000000")
	_, err := client.Enable(ctx,
		"rg1",
		"TestLinkWS",
		"ChangeTracking",
		&IntelligencePacksEnableOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestIntelligencePacks_List(t *testing.T) {
	// From example IntelligencePacksList
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIntelligencePacksClient(con,
		"00000000-0000-0000-0000-00000000000")
	_, err := client.List(ctx,
		"rg1",
		"TestLinkWS",
		&IntelligencePacksListOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestLinkedServices_CreateOrUpdate(t *testing.T) {
	// From example LinkedServicesCreate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLinkedServicesClient(con,
		"00000000-0000-0000-0000-00000000000")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"mms-eus",
		"TestLinkWS",
		"Cluster",
		LinkedService{
			Properties: &LinkedServiceProperties{
				WriteAccessResourceID: to.StringPtr("/subscriptions/00000000-0000-0000-0000-00000000000/resourceGroups/mms-eus/providers/Microsoft.OperationalInsights/clusters/testcluster"),
			},
		},
		&LinkedServicesBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.LinkedService.ID == nil {
		t.Fatal("LinkedService.ID should not be nil!")
	}
}

func TestLinkedServices_Delete(t *testing.T) {
	// From example LinkedServicesDelete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLinkedServicesClient(con,
		"00000000-0000-0000-0000-00000000000")
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"TestLinkWS",
		"Cluster",
		&LinkedServicesBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.LinkedService.ID == nil {
		t.Fatal("LinkedService.ID should not be nil!")
	}
}

func TestLinkedServices_Get(t *testing.T) {
	// From example LinkedServicesGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLinkedServicesClient(con,
		"00000000-0000-0000-0000-00000000000")
	res, err := client.Get(ctx,
		"mms-eus",
		"TestLinkWS",
		"Cluster",
		&LinkedServicesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.LinkedService.ID == nil {
		t.Fatal("LinkedService.ID should not be nil!")
	}
}

func TestLinkedServices_ListByWorkspace(t *testing.T) {
	// From example LinkedServicesListByWorkspace
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLinkedServicesClient(con,
		"00000000-0000-0000-0000-00000000000")
	_, err := client.ListByWorkspace(ctx,
		"mms-eus",
		"TestLinkWS",
		&LinkedServicesListByWorkspaceOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestLinkedStorageAccounts_CreateOrUpdate(t *testing.T) {
	// From example LinkedStorageAccountsCreate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLinkedStorageAccountsClient(con,
		"00000000-0000-0000-0000-00000000000")
	res, err := client.CreateOrUpdate(ctx,
		"mms-eus",
		"testLinkStorageAccountsWS",
		DataSourceTypeCustomLogs,
		LinkedStorageAccountsResource{
			Properties: &LinkedStorageAccountsProperties{
				StorageAccountIDs: []*string{
					to.StringPtr("/subscriptions/00000000-0000-0000-0000-00000000000/resourceGroups/mms-eus/providers/Microsoft.Storage/storageAccounts/testStorageA"),
					to.StringPtr("/subscriptions/00000000-0000-0000-0000-00000000000/resourceGroups/mms-eus/providers/Microsoft.Storage/storageAccounts/testStorageB")},
			},
		},
		&LinkedStorageAccountsCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.LinkedStorageAccountsResource.ID == nil {
		t.Fatal("LinkedStorageAccountsResource.ID should not be nil!")
	}
}

func TestLinkedStorageAccounts_Delete(t *testing.T) {
	// From example LinkedStorageAccountsDelete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLinkedStorageAccountsClient(con,
		"00000000-0000-0000-0000-00000000000")
	_, err := client.Delete(ctx,
		"mms-eus",
		"testLinkStorageAccountsWS",
		DataSourceTypeCustomLogs,
		&LinkedStorageAccountsDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestLinkedStorageAccounts_Get(t *testing.T) {
	// From example LinkedStorageAccountsGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLinkedStorageAccountsClient(con,
		"00000000-0000-0000-0000-00000000000")
	res, err := client.Get(ctx,
		"mms-eus",
		"testLinkStorageAccountsWS",
		DataSourceTypeCustomLogs,
		&LinkedStorageAccountsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.LinkedStorageAccountsResource.ID == nil {
		t.Fatal("LinkedStorageAccountsResource.ID should not be nil!")
	}
}

func TestLinkedStorageAccounts_ListByWorkspace(t *testing.T) {
	// From example Gets list of linked storage accounts on a workspace.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLinkedStorageAccountsClient(con,
		"00000000-0000-0000-0000-00000000000")
	_, err := client.ListByWorkspace(ctx,
		"mms-eus",
		"testLinkStorageAccountsWS",
		&LinkedStorageAccountsListByWorkspaceOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestManagementGroups_List(t *testing.T) {
	// From example WorkspacesListManagementGroups
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewManagementGroupsClient(con,
		"00000000-0000-0000-0000-00000000000")
	_, err := client.List(ctx,
		"rg1",
		"TestLinkWS",
		&ManagementGroupsListOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestOperationStatuses_Get(t *testing.T) {
	// From example Get specific operation status
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewOperationStatusesClient(con,
		"613192d7-503f-477a-9cfe-4efc3ee2bd60")
	res, err := client.Get(ctx,
		"West US",
		"713192d7-503f-477a-9cfe-4efc3ee2bd11",
		&OperationStatusesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.OperationStatus.ID == nil {
		t.Fatal("OperationStatus.ID should not be nil!")
	}
}

func TestSharedKeys_GetSharedKeys(t *testing.T) {
	// From example SharedKeysList
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSharedKeysClient(con,
		"00000000-0000-0000-0000-00000000000")
	_, err := client.GetSharedKeys(ctx,
		"rg1",
		"TestLinkWS",
		&SharedKeysGetSharedKeysOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestSharedKeys_Regenerate(t *testing.T) {
	// From example RegenerateSharedKeys
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSharedKeysClient(con,
		"00000000-0000-0000-0000-00000000000")
	_, err := client.Regenerate(ctx,
		"rg1",
		"workspace1",
		&SharedKeysRegenerateOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestUsages_List(t *testing.T) {
	// From example UsagesList
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewUsagesClient(con,
		"00000000-0000-0000-0000-00000000000")
	_, err := client.List(ctx,
		"rg1",
		"TestLinkWS",
		&UsagesListOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestStorageInsightConfigs_CreateOrUpdate(t *testing.T) {
	// From example StorageInsightsCreate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewStorageInsightConfigsClient(con,
		"00000000-0000-0000-0000-00000000000")
	res, err := client.CreateOrUpdate(ctx,
		"OIAutoRest5123",
		"aztest5048",
		"AzTestSI1110",
		StorageInsight{
			Properties: &StorageInsightProperties{
				Containers: []*string{
					to.StringPtr("wad-iis-logfiles")},
				StorageAccount: &StorageAccount{
					ID:  to.StringPtr("/subscriptions/00000000-0000-0000-0000-000000000005/resourcegroups/OIAutoRest6987/providers/microsoft.storage/storageaccounts/AzTestFakeSA9945"),
					Key: to.StringPtr("1234"),
				},
				Tables: []*string{
					to.StringPtr("WADWindowsEventLogsTable"),
					to.StringPtr("LinuxSyslogVer2v0")},
			},
		},
		&StorageInsightConfigsCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.StorageInsight.ID == nil {
		t.Fatal("StorageInsight.ID should not be nil!")
	}
}

func TestStorageInsightConfigs_Get(t *testing.T) {
	// From example StorageInsightsGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewStorageInsightConfigsClient(con,
		"00000000-0000-0000-0000-00000000000")
	res, err := client.Get(ctx,
		"OIAutoRest5123",
		"aztest5048",
		"AzTestSI1110",
		&StorageInsightConfigsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.StorageInsight.ID == nil {
		t.Fatal("StorageInsight.ID should not be nil!")
	}
}

func TestStorageInsightConfigs_Delete(t *testing.T) {
	// From example StorageInsightsDelete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewStorageInsightConfigsClient(con,
		"00000000-0000-0000-0000-00000000000")
	_, err := client.Delete(ctx,
		"OIAutoRest5123",
		"aztest5048",
		"AzTestSI1110",
		&StorageInsightConfigsDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestStorageInsightConfigs_ListByWorkspace(t *testing.T) {
	// From example StorageInsightsList
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewStorageInsightConfigsClient(con,
		"00000000-0000-0000-0000-00000000000")
	pager := client.ListByWorkspace("OIAutoRest5123",
		"aztest5048",
		&StorageInsightConfigsListByWorkspaceOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("StorageInsight.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("StorageInsight.ID should not be nil!")
			}
		}
	}
}

func TestSavedSearches_Delete(t *testing.T) {
	// From example SavedSearchesDelete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSavedSearchesClient(con,
		"00000000-0000-0000-0000-00000000000")
	_, err := client.Delete(ctx,
		"TestRG",
		"TestWS",
		"00000000-0000-0000-0000-00000000000",
		&SavedSearchesDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestSavedSearches_CreateOrUpdate(t *testing.T) {
	// From example SavedSearchCreateOrUpdate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSavedSearchesClient(con,
		"00000000-0000-0000-0000-00000000000")
	res, err := client.CreateOrUpdate(ctx,
		"TestRG",
		"TestWS",
		"00000000-0000-0000-0000-00000000000",
		SavedSearch{
			Properties: &SavedSearchProperties{
				Category:           to.StringPtr("Saved Search Test Category"),
				DisplayName:        to.StringPtr("Create or Update Saved Search Test"),
				FunctionAlias:      to.StringPtr("heartbeat_func"),
				FunctionParameters: to.StringPtr("a:int=1"),
				Query:              to.StringPtr("Heartbeat | summarize Count() by Computer | take a"),
				Tags: []*Tag{
					{
						Name:  to.StringPtr("Group"),
						Value: to.StringPtr("Computer"),
					}},
				Version: to.Int64Ptr(2),
			},
		},
		&SavedSearchesCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.SavedSearch.ID == nil {
		t.Fatal("SavedSearch.ID should not be nil!")
	}
}

func TestSavedSearches_Get(t *testing.T) {
	// From example SavedSearchesGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSavedSearchesClient(con,
		"00000000-0000-0000-0000-00000000000")
	res, err := client.Get(ctx,
		"TestRG",
		"TestWS",
		"00000000-0000-0000-0000-00000000000",
		&SavedSearchesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.SavedSearch.ID == nil {
		t.Fatal("SavedSearch.ID should not be nil!")
	}
}

func TestSavedSearches_ListByWorkspace(t *testing.T) {
	// From example SavedSearchesList
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSavedSearchesClient(con,
		"00000000-0000-0000-0000-00000000000")
	_, err := client.ListByWorkspace(ctx,
		"TestRG",
		"TestWS",
		&SavedSearchesListByWorkspaceOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestAvailableServiceTiers_ListByWorkspace(t *testing.T) {
	// From example AvailableServiceTiers
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAvailableServiceTiersClient(con,
		"00000000-0000-0000-0000-00000000000")
	_, err := client.ListByWorkspace(ctx,
		"rg1",
		"workspace1",
		&AvailableServiceTiersListByWorkspaceOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestGateways_Delete(t *testing.T) {
	// From example DeleteGateways
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewGatewaysClient(con,
		"00000000-0000-0000-0000-00000000000")
	_, err := client.Delete(ctx,
		"OIAutoRest5123",
		"aztest5048",
		"00000000-0000-0000-0000-00000000000",
		&GatewaysDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestSchema_Get(t *testing.T) {
	// From example WorkspacesGetSchema
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSchemaClient(con,
		"00000000-0000-0000-0000-00000000000")
	_, err := client.Get(ctx,
		"mms-eus",
		"atlantisdemo",
		&SchemaGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestWorkspacePurge_Purge(t *testing.T) {
	// From example WorkspacePurge
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkspacePurgeClient(con,
		"00000000-0000-0000-0000-00000000000")
	_, err := client.Purge(ctx,
		"OIAutoRest5123",
		"aztest5048",
		WorkspacePurgeBody{
			Filters: []*WorkspacePurgeBodyFilters{
				{
					Column:   to.StringPtr("TimeGenerated"),
					Operator: to.StringPtr(">"),
					Value:    "2017-09-01T00:00:00",
				}},
			Table: to.StringPtr("Heartbeat"),
		},
		&WorkspacePurgePurgeOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestWorkspacePurge_GetPurgeStatus(t *testing.T) {
	// From example WorkspacePurgeOperation
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkspacePurgeClient(con,
		"00000000-0000-0000-0000-00000000000")
	_, err := client.GetPurgeStatus(ctx,
		"OIAutoRest5123",
		"aztest5048",
		"purge-970318e7-b859-4edb-8903-83b1b54d0b74",
		&WorkspacePurgeGetPurgeStatusOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestOperations_List(t *testing.T) {
	// From example Get specific operation status
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewOperationsClient(con)
	pager := client.List(&OperationsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
	}
}

func TestClusters_ListByResourceGroup(t *testing.T) {
	// From example ClustersGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewClustersClient(con,
		"00000000-0000-0000-0000-00000000000")
	pager := client.ListByResourceGroup("oiautorest6685",
		&ClustersListByResourceGroupOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Cluster.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Cluster.ID should not be nil!")
			}
		}
	}
}

func TestClusters_List(t *testing.T) {
	// From example ClustersSubscriptionList
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewClustersClient(con,
		"00000000-0000-0000-0000-00000000000")
	pager := client.List(&ClustersListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Cluster.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Cluster.ID should not be nil!")
			}
		}
	}
}

func TestClusters_CreateOrUpdate(t *testing.T) {
	// From example ClustersCreate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewClustersClient(con,
		"00000000-0000-0000-0000-00000000000")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"oiautorest6685",
		"oiautorest6685",
		Cluster{
			TrackedResource: TrackedResource{
				Location: to.StringPtr("australiasoutheast"),
				Tags: map[string]*string{
					"tag1": to.StringPtr("val1"),
				},
			},
			SKU: &ClusterSKU{
				Name:     ClusterSKUNameEnumCapacityReservation.ToPtr(),
				Capacity: CapacityTenHundred.ToPtr(),
			},
		},
		&ClustersBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Cluster.ID == nil {
		t.Fatal("Cluster.ID should not be nil!")
	}
}

func TestClusters_Delete(t *testing.T) {
	// From example ClustersDelete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewClustersClient(con,
		"00000000-0000-0000-0000-00000000000")
	poller, err := client.BeginDelete(ctx,
		"oiautorest6685",
		"oiautorest6685",
		&ClustersBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestClusters_Get(t *testing.T) {
	// From example ClustersGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewClustersClient(con,
		"00000000-0000-0000-0000-00000000000")
	res, err := client.Get(ctx,
		"oiautorest6685",
		"oiautorest6685",
		&ClustersGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Cluster.ID == nil {
		t.Fatal("Cluster.ID should not be nil!")
	}
}

func TestClusters_Update(t *testing.T) {
	// From example ClustersPatch
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewClustersClient(con,
		"00000000-0000-0000-0000-00000000000")
	res, err := client.Update(ctx,
		"oiautorest6685",
		"oiautorest6685",
		ClusterPatch{
			Identity: &Identity{
				Type: IdentityTypeUserAssigned.ToPtr(),
				UserAssignedIdentities: map[string]*UserIdentityProperties{
					"/subscriptions/00000000-0000-0000-0000-00000000000/resourcegroups/oiautorest6685/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myidentity": &UserIdentityProperties{},
				},
			},
			Properties: &ClusterPatchProperties{
				KeyVaultProperties: &KeyVaultProperties{
					KeyName:     to.StringPtr("aztest2170cert"),
					KeyRsaSize:  to.Int32Ptr(1024),
					KeyVaultURI: to.StringPtr("https://aztest2170.vault.azure.net"),
					KeyVersion:  to.StringPtr("654ft6c4e63845cbb50fd6fg51540429"),
				},
			},
			SKU: &ClusterSKU{
				Name:     ClusterSKUNameEnumCapacityReservation.ToPtr(),
				Capacity: CapacityTenHundred.ToPtr(),
			},
			Tags: map[string]*string{
				"tag1": to.StringPtr("val1"),
			},
		},
		&ClustersUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Cluster.ID == nil {
		t.Fatal("Cluster.ID should not be nil!")
	}
}

func TestWorkspaces_List(t *testing.T) {
	// From example WorkspacesSubscriptionList
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkspacesClient(con,
		"00000000-0000-0000-0000-00000000000")
	_, err := client.List(ctx,
		&WorkspacesListOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestWorkspaces_ListByResourceGroup(t *testing.T) {
	// From example WorkspacesGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkspacesClient(con,
		"00000000-0000-0000-0000-00000000000")
	_, err := client.ListByResourceGroup(ctx,
		"oiautorest6685",
		&WorkspacesListByResourceGroupOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestWorkspaces_CreateOrUpdate(t *testing.T) {
	// From example WorkspacesCreate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkspacesClient(con,
		"00000000-0000-0000-0000-00000000000")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"oiautorest6685",
		"oiautorest6685",
		Workspace{
			TrackedResource: TrackedResource{
				Location: to.StringPtr("australiasoutheast"),
				Tags: map[string]*string{
					"tag1": to.StringPtr("val1"),
				},
			},
			Properties: &WorkspaceProperties{
				RetentionInDays: to.Int32Ptr(30),
				SKU: &WorkspaceSKU{
					Name: WorkspaceSKUNameEnumPerGB2018.ToPtr(),
				},
			},
		},
		&WorkspacesBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Workspace.ID == nil {
		t.Fatal("Workspace.ID should not be nil!")
	}
}

func TestWorkspaces_Delete(t *testing.T) {
	// From example WorkspacesDelete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkspacesClient(con,
		"00000000-0000-0000-0000-00000000000")
	poller, err := client.BeginDelete(ctx,
		"oiautorest6685",
		"oiautorest6685",
		&WorkspacesBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestWorkspaces_Get(t *testing.T) {
	// From example WorkspaceGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkspacesClient(con,
		"00000000-0000-0000-0000-00000000000")
	res, err := client.Get(ctx,
		"oiautorest6685",
		"oiautorest6685",
		&WorkspacesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Workspace.ID == nil {
		t.Fatal("Workspace.ID should not be nil!")
	}
}

func TestWorkspaces_Update(t *testing.T) {
	// From example WorkspacesPatch
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkspacesClient(con,
		"00000000-0000-0000-0000-00000000000")
	res, err := client.Update(ctx,
		"oiautorest6685",
		"oiautorest6685",
		WorkspacePatch{
			Properties: &WorkspaceProperties{
				RetentionInDays: to.Int32Ptr(30),
				SKU: &WorkspaceSKU{
					Name: WorkspaceSKUNameEnumPerGB2018.ToPtr(),
				},
				WorkspaceCapping: &WorkspaceCapping{
					DailyQuotaGb: to.Float64Ptr(-1),
				},
			},
		},
		&WorkspacesUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Workspace.ID == nil {
		t.Fatal("Workspace.ID should not be nil!")
	}
}

func TestDeletedWorkspaces_List(t *testing.T) {
	// From example WorkspacesSubscriptionList
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDeletedWorkspacesClient(con,
		"00000000-0000-0000-0000-00000000000")
	_, err := client.List(ctx,
		&DeletedWorkspacesListOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestDeletedWorkspaces_ListByResourceGroup(t *testing.T) {
	// From example WorkspacesGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDeletedWorkspacesClient(con,
		"00000000-0000-0000-0000-00000000000")
	_, err := client.ListByResourceGroup(ctx,
		"oiautorest6685",
		&DeletedWorkspacesListByResourceGroupOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	subscriptionId = getEnv("SUBSCRIPTION_ID", "00000000-0000-0000-0000-000000000000")
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}
	cred, err = azidentity.NewEnvironmentCredential(&azidentity.EnvironmentCredentialOptions{AuthorityHost: mockHost, HTTPClient: client})
	if err != nil {
		panic(err)
	}

	con = arm.NewConnection(mockHost, cred, &arm.ConnectionOptions{
		Logging: policy.LogOptions{
			IncludeBody: true,
		},
		HTTPClient: client,
	})
}

func tearDown() {

}
