//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armoperationalinsights_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/operationalinsights/armoperationalinsights"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestOperations_List(t *testing.T) {
	// From example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/preview/2021-12-01-preview/examples/OperationsListByTenant.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get specific operation status"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armoperationalinsights.NewOperationsClient(cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/preview/2021-12-01-preview/examples/OperationsListByTenant.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armoperationalinsights.OperationListResult{
			Value: []*armoperationalinsights.Operation{
				{
					Name: to.Ptr("Microsoft.OperationalInsights/workspaces/write"),
					Display: &armoperationalinsights.OperationDisplay{
						Description: to.Ptr("Creates a new workspace or links to an existing workspace by providing the customer id from the existing workspace."),
						Operation:   to.Ptr("Create Workspace"),
						Provider:    to.Ptr("Microsoft Operational Insights"),
						Resource:    to.Ptr("Workspace"),
					},
				},
				{
					Name: to.Ptr("Microsoft.OperationalInsights/workspaces/read"),
					Display: &armoperationalinsights.OperationDisplay{
						Description: to.Ptr("Gets an existing workspace"),
						Operation:   to.Ptr("Get Workspace"),
						Provider:    to.Ptr("Microsoft Operational Insights"),
						Resource:    to.Ptr("Workspace"),
					},
				},
				{
					Name: to.Ptr("Microsoft.OperationalInsights/workspaces/delete"),
					Display: &armoperationalinsights.OperationDisplay{
						Description: to.Ptr("Deletes a workspace. If the workspace was linked to an existing workspace at creation time then the workspace it was linked to is not deleted."),
						Operation:   to.Ptr("Delete Workspace"),
						Provider:    to.Ptr("Microsoft Operational Insights"),
						Resource:    to.Ptr("Workspace"),
					},
				},
				{
					Name: to.Ptr("Microsoft.OperationalInsights/workspaces/generateregistrationcertificate/action"),
					Display: &armoperationalinsights.OperationDisplay{
						Description: to.Ptr("Generates Registration Certificate for the workspace. This Certificate is used to connect Microsoft System Center Operation Manager to the workspace."),
						Operation:   to.Ptr("Generates Registration Certificate for Workspace."),
						Provider:    to.Ptr("Microsoft Operational Insights"),
						Resource:    to.Ptr("Registration Certificate"),
					},
				},
				{
					Name: to.Ptr("Microsoft.OperationalInsights/workspaces/storageinsightconfigs/write"),
					Display: &armoperationalinsights.OperationDisplay{
						Description: to.Ptr("Creates a new storage configuration. These configurations are used to pull data from a location in an existing storage account."),
						Operation:   to.Ptr("Create Storage Configuration"),
						Provider:    to.Ptr("Microsoft Operational Insights"),
						Resource:    to.Ptr("Storage Insight Configuration"),
					},
				},
				{
					Name: to.Ptr("Microsoft.OperationalInsights/workspaces/storageinsightconfigs/read"),
					Display: &armoperationalinsights.OperationDisplay{
						Description: to.Ptr("Gets a storage configuration."),
						Operation:   to.Ptr("Get Storage Configuration"),
						Provider:    to.Ptr("Microsoft Operational Insights"),
						Resource:    to.Ptr("Storage Insight Configuration"),
					},
				},
				{
					Name: to.Ptr("Microsoft.OperationalInsights/workspaces/storageinsightconfigs/delete"),
					Display: &armoperationalinsights.OperationDisplay{
						Description: to.Ptr("Deletes a storage configuration. This will stop Microsoft Operational Insights from reading data from the storage account."),
						Operation:   to.Ptr("Delete Storage Configuration"),
						Provider:    to.Ptr("Microsoft Operational Insights"),
						Resource:    to.Ptr("Storage Insight Configuration"),
					},
				},
				{
					Name: to.Ptr("Microsoft.OperationalInsights/register/action"),
					Display: &armoperationalinsights.OperationDisplay{
						Description: to.Ptr("Register a subscription to a resource provider."),
						Operation:   to.Ptr("Register a subscription to a resource provider."),
						Provider:    to.Ptr("Microsoft Operational Insights"),
						Resource:    to.Ptr("Register"),
					},
				},
				{
					Name: to.Ptr("Microsoft.OperationalInsights/workspaces/sharedKeys/action"),
					Display: &armoperationalinsights.OperationDisplay{
						Description: to.Ptr("Retrieves the shared keys for the workspace. These keys are used to connect Microsoft Operational Insights agents to the workspace."),
						Operation:   to.Ptr("List Workspace Shared Keys"),
						Provider:    to.Ptr("Microsoft Operational Insights"),
						Resource:    to.Ptr("Shared Keys"),
					},
				},
				{
					Name: to.Ptr("Microsoft.OperationalInsights/workspaces/sharedKeys/read"),
					Display: &armoperationalinsights.OperationDisplay{
						Description: to.Ptr("Retrieves the shared keys for the workspace. These keys are used to connect Microsoft Operational Insights agents to the workspace."),
						Operation:   to.Ptr("List Workspace Shared Keys"),
						Provider:    to.Ptr("Microsoft Operational Insights"),
						Resource:    to.Ptr("Shared Keys"),
					},
				},
				{
					Name: to.Ptr("Microsoft.OperationalInsights/workspaces/listKeys/action"),
					Display: &armoperationalinsights.OperationDisplay{
						Description: to.Ptr("Retrieves the list keys for the workspace. These keys are used to connect Microsoft Operational Insights agents to the workspace."),
						Operation:   to.Ptr("List Workspace Keys"),
						Provider:    to.Ptr("Microsoft Operational Insights"),
						Resource:    to.Ptr("List Keys"),
					},
				},
				{
					Name: to.Ptr("Microsoft.OperationalInsights/workspaces/listKeys/read"),
					Display: &armoperationalinsights.OperationDisplay{
						Description: to.Ptr("Retrieves the list keys for the workspace. These keys are used to connect Microsoft Operational Insights agents to the workspace."),
						Operation:   to.Ptr("List Workspace Keys"),
						Provider:    to.Ptr("Microsoft Operational Insights"),
						Resource:    to.Ptr("List Keys"),
					},
				},
				{
					Name: to.Ptr("Microsoft.OperationalInsights/workspaces/managementGroups/read"),
					Display: &armoperationalinsights.OperationDisplay{
						Description: to.Ptr("Gets the names and metadata for System Center Operations Manager management groups connected to this workspace."),
						Operation:   to.Ptr("Get Management Groups for Workspace"),
						Provider:    to.Ptr("Microsoft Operational Insights"),
						Resource:    to.Ptr("Management Group"),
					},
				},
				{
					Name: to.Ptr("Microsoft.OperationalInsights/workspaces/usages/read"),
					Display: &armoperationalinsights.OperationDisplay{
						Description: to.Ptr("Gets usage data for a workspace including the amount of data read by the workspace."),
						Operation:   to.Ptr("Get Usage Data for Workspace"),
						Provider:    to.Ptr("Microsoft Operational Insights"),
						Resource:    to.Ptr("Usage Metric"),
					},
				},
				{
					Name: to.Ptr("Microsoft.OperationalInsights/workspaces/search/action"),
					Display: &armoperationalinsights.OperationDisplay{
						Description: to.Ptr("Executes a search query"),
						Operation:   to.Ptr("Search Workspace Data"),
						Provider:    to.Ptr("Microsoft Operational Insights"),
						Resource:    to.Ptr("Search"),
					},
				},
				{
					Name: to.Ptr("Microsoft.OperationalInsights/workspaces/schema/read"),
					Display: &armoperationalinsights.OperationDisplay{
						Description: to.Ptr("Gets the search schema for the workspace.  Search schema includes the exposed fields and their types."),
						Operation:   to.Ptr("Get Search Schema"),
						Provider:    to.Ptr("Microsoft Operational Insights"),
						Resource:    to.Ptr("Search Schema"),
					},
				},
				{
					Name: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources/read"),
					Display: &armoperationalinsights.OperationDisplay{
						Description: to.Ptr("Get datasources under a workspace."),
						Operation:   to.Ptr("Get datasources under a workspace."),
						Provider:    to.Ptr("Microsoft Operational Insights"),
						Resource:    to.Ptr("Data Source"),
					},
				},
				{
					Name: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources/write"),
					Display: &armoperationalinsights.OperationDisplay{
						Description: to.Ptr("Create/Update datasources under a workspace."),
						Operation:   to.Ptr("Create/Update datasources under a workspace."),
						Provider:    to.Ptr("Microsoft Operational Insights"),
						Resource:    to.Ptr("Data Source"),
					},
				},
				{},
				{},
				{},
				{},
				{
					Name: to.Ptr("Microsoft.OperationalInsights/workspaces/notificationSettings/read"),
					Display: &armoperationalinsights.OperationDisplay{
						Description: to.Ptr("Get the user's notification settings for the workspace."),
						Operation:   to.Ptr("Get Notification Settings"),
						Provider:    to.Ptr("Microsoft Operational Insights"),
						Resource:    to.Ptr("Notification Settings"),
					},
				},
				{
					Name: to.Ptr("Microsoft.OperationalInsights/workspaces/notificationSettings/write"),
					Display: &armoperationalinsights.OperationDisplay{
						Description: to.Ptr("Set the user's notification settings for the workspace."),
						Operation:   to.Ptr("Put Notification Settings"),
						Provider:    to.Ptr("Microsoft Operational Insights"),
						Resource:    to.Ptr("Notification Settings"),
					},
				},
				{},
				{},
				{},
				{
					Name: to.Ptr("Microsoft.OperationalInsights/workspaces/configurationScopes/delete"),
					Display: &armoperationalinsights.OperationDisplay{
						Description: to.Ptr("Delete Configuration Scope"),
						Operation:   to.Ptr("Delete Configuration Scope"),
						Provider:    to.Ptr("Microsoft Operational Insights"),
						Resource:    to.Ptr("Configuration Scope"),
					},
				},
				{
					Name: to.Ptr("Microsoft.OperationalInsights/workspaces/linkedServices/read"),
					Display: &armoperationalinsights.OperationDisplay{
						Description: to.Ptr("Get linked services under given workspace."),
						Operation:   to.Ptr("Get linked services under given workspace."),
						Provider:    to.Ptr("Microsoft Operational Insights"),
						Resource:    to.Ptr("Linked Services"),
					},
				},
				{
					Name: to.Ptr("Microsoft.OperationalInsights/workspaces/linkedServices/write"),
					Display: &armoperationalinsights.OperationDisplay{
						Description: to.Ptr("Create/Update linked services under given workspace."),
						Operation:   to.Ptr("Create/Update linked services under given workspace."),
						Provider:    to.Ptr("Microsoft Operational Insights"),
						Resource:    to.Ptr("Linked Services"),
					},
				},
				{
					Name: to.Ptr("Microsoft.OperationalInsights/workspaces/linkedServices/delete"),
					Display: &armoperationalinsights.OperationDisplay{
						Description: to.Ptr("Delete linked services under given workspace."),
						Operation:   to.Ptr("Delete linked services under given workspace."),
						Provider:    to.Ptr("Microsoft Operational Insights"),
						Resource:    to.Ptr("Linked Services"),
					},
				},
				{
					Name: to.Ptr("Microsoft.OperationalInsights/workspaces/intelligencepacks/read"),
					Display: &armoperationalinsights.OperationDisplay{
						Description: to.Ptr("Lists all intelligence packs that are visible for a given worksapce and also lists whether the pack is enabled or disabled for that workspace."),
						Operation:   to.Ptr("List Intelligence Packs"),
						Provider:    to.Ptr("Microsoft Operational Insights"),
						Resource:    to.Ptr("Intelligence Packs"),
					},
				},
				{
					Name: to.Ptr("Microsoft.OperationalInsights/workspaces/intelligencepacks/enable/action"),
					Display: &armoperationalinsights.OperationDisplay{
						Description: to.Ptr("Enables an intelligence pack for a given workspace."),
						Operation:   to.Ptr("Enable Intelligence Pack"),
						Provider:    to.Ptr("Microsoft Operational Insights"),
						Resource:    to.Ptr("Intelligence Packs"),
					},
				},
				{
					Name: to.Ptr("Microsoft.OperationalInsights/workspaces/intelligencepacks/disable/action"),
					Display: &armoperationalinsights.OperationDisplay{
						Description: to.Ptr("Disables an intelligence pack for a given workspace."),
						Operation:   to.Ptr("Disable Intelligence Pack"),
						Provider:    to.Ptr("Microsoft Operational Insights"),
						Resource:    to.Ptr("Intelligence Packs"),
					},
				},
				{
					Name: to.Ptr("Microsoft.OperationalInsights/workspaces/analytics/query/action"),
					Display: &armoperationalinsights.OperationDisplay{
						Description: to.Ptr("Search using new engine."),
						Operation:   to.Ptr("Search using new engine."),
						Provider:    to.Ptr("Microsoft Operational Insights"),
						Resource:    to.Ptr("analytics"),
					},
				},
				{
					Name: to.Ptr("Microsoft.OperationalInsights/workspaces/analytics/query/schema/read"),
					Display: &armoperationalinsights.OperationDisplay{
						Description: to.Ptr("Get search schema V2."),
						Operation:   to.Ptr("Get search schema V2."),
						Provider:    to.Ptr("Microsoft Operational Insights"),
						Resource:    to.Ptr("analytics"),
					},
				},
				{
					Name: to.Ptr("Microsoft.OperationalInsights/workspaces/api/query/action"),
					Display: &armoperationalinsights.OperationDisplay{
						Description: to.Ptr("Search using new engine."),
						Operation:   to.Ptr("Search using new engine."),
						Provider:    to.Ptr("Microsoft Operational Insights"),
						Resource:    to.Ptr("analytics"),
					},
				},
				{
					Name: to.Ptr("Microsoft.OperationalInsights/workspaces/api/query/schema/read"),
					Display: &armoperationalinsights.OperationDisplay{
						Description: to.Ptr("Get search schema V2."),
						Operation:   to.Ptr("Get search schema V2."),
						Provider:    to.Ptr("Microsoft Operational Insights"),
						Resource:    to.Ptr("analytics"),
					},
				},
				{
					Name: to.Ptr("Microsoft.OperationalInsights/workspaces/purge/action"),
					Display: &armoperationalinsights.OperationDisplay{
						Description: to.Ptr("Delete specified data from workspace"),
						Operation:   to.Ptr("Delete specified data from workspace"),
						Provider:    to.Ptr("Microsoft Operational Insights"),
						Resource:    to.Ptr("analytics"),
					},
				},
				{
					Name: to.Ptr("Microsoft.OperationalInsights/linkTargets/read"),
					Display: &armoperationalinsights.OperationDisplay{
						Description: to.Ptr("Lists existing accounts that are not associated with an Azure subscription. To link this Azure subscription to a workspace, use a customer id returned by this operation in the customer id property of the Create Workspace operation."),
						Operation:   to.Ptr("List Unlinked Accounts"),
						Provider:    to.Ptr("Microsoft Operational Insights"),
						Resource:    to.Ptr("Unlinked Account"),
					},
				},
				{
					Name: to.Ptr("Microsoft.OperationalInsights/workspaces/metricDefinitions/read"),
					Display: &armoperationalinsights.OperationDisplay{
						Description: to.Ptr("Get Metric Definitions under workspace"),
						Operation:   to.Ptr("Metric Definition operation"),
						Provider:    to.Ptr("Microsoft Operational Insights"),
						Resource:    to.Ptr("Metric Definitions"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OperationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OperationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/preview/2021-12-01-preview/examples/OperationsListByTenant.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkspaces_List(t *testing.T) {
	// From example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/preview/2021-12-01-preview/examples/WorkspacesSubscriptionList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WorkspacesSubscriptionList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armoperationalinsights.NewWorkspacesClient("00000000-0000-0000-0000-00000000000", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/preview/2021-12-01-preview/examples/WorkspacesSubscriptionList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armoperationalinsights.WorkspaceListResult{
			Value: []*armoperationalinsights.Workspace{
				{
					Name:     to.Ptr("AzTest2170"),
					Type:     to.Ptr("Microsoft.OperationalInsights/workspaces"),
					ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourcegroups/oiautorest6685/providers/microsoft.operationalinsights/workspaces/aztest2170"),
					Location: to.Ptr("australiasoutheast"),
					Tags: map[string]*string{
						"tag1": to.Ptr("val1"),
					},
					Properties: &armoperationalinsights.WorkspaceProperties{
						CustomerID:                      to.Ptr("bc089d7b-485c-4aff-a71e-c00f362d8d2f"),
						ProvisioningState:               to.Ptr(armoperationalinsights.WorkspaceEntityStatusSucceeded),
						PublicNetworkAccessForIngestion: to.Ptr(armoperationalinsights.PublicNetworkAccessTypeEnabled),
						PublicNetworkAccessForQuery:     to.Ptr(armoperationalinsights.PublicNetworkAccessTypeEnabled),
						RetentionInDays:                 to.Ptr[int32](30),
						SKU: &armoperationalinsights.WorkspaceSKU{
							Name: to.Ptr(armoperationalinsights.WorkspaceSKUNameEnumPerGB2018),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.WorkspaceListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.WorkspaceListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/preview/2021-12-01-preview/examples/WorkspacesSubscriptionList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkspaces_ListByResourceGroup(t *testing.T) {
	// From example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/preview/2021-12-01-preview/examples/WorkspacesListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WorkspacesGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armoperationalinsights.NewWorkspacesClient("00000000-0000-0000-0000-00000000000", cred, &options)
	pager := client.ListByResourceGroup("oiautorest6685",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/preview/2021-12-01-preview/examples/WorkspacesListByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armoperationalinsights.WorkspaceListResult{
			Value: []*armoperationalinsights.Workspace{
				{
					Name:     to.Ptr("AzTest2170"),
					Type:     to.Ptr("Microsoft.OperationalInsights/workspaces"),
					ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourcegroups/oiautorest6685/providers/microsoft.operationalinsights/workspaces/aztest2170"),
					Location: to.Ptr("australiasoutheast"),
					Tags: map[string]*string{
						"tag1": to.Ptr("val1"),
					},
					Properties: &armoperationalinsights.WorkspaceProperties{
						CustomerID:                      to.Ptr("bc089d7b-485c-4aff-a71e-c00f362d8d2f"),
						ProvisioningState:               to.Ptr(armoperationalinsights.WorkspaceEntityStatusSucceeded),
						PublicNetworkAccessForIngestion: to.Ptr(armoperationalinsights.PublicNetworkAccessTypeEnabled),
						PublicNetworkAccessForQuery:     to.Ptr(armoperationalinsights.PublicNetworkAccessTypeEnabled),
						RetentionInDays:                 to.Ptr[int32](30),
						SKU: &armoperationalinsights.WorkspaceSKU{
							Name: to.Ptr(armoperationalinsights.WorkspaceSKUNameEnumPerGB2018),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.WorkspaceListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.WorkspaceListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/preview/2021-12-01-preview/examples/WorkspacesListByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkspaces_CreateOrUpdate(t *testing.T) {
	// From example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/preview/2021-12-01-preview/examples/WorkspacesCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WorkspacesCreate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armoperationalinsights.NewWorkspacesClient("00000000-0000-0000-0000-00000000000", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"oiautorest6685",
		"oiautorest6685",
		armoperationalinsights.Workspace{
			Location: to.Ptr("australiasoutheast"),
			Tags: map[string]*string{
				"tag1": to.Ptr("val1"),
			},
			Properties: &armoperationalinsights.WorkspaceProperties{
				RetentionInDays: to.Ptr[int32](30),
				SKU: &armoperationalinsights.WorkspaceSKU{
					Name: to.Ptr(armoperationalinsights.WorkspaceSKUNameEnumPerGB2018),
				},
			},
		},
		&armoperationalinsights.WorkspacesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/preview/2021-12-01-preview/examples/WorkspacesCreate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/preview/2021-12-01-preview/examples/WorkspacesCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armoperationalinsights.Workspace{
			Name:     to.Ptr("AzTest2170"),
			Type:     to.Ptr("Microsoft.OperationalInsights/workspaces"),
			ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourcegroups/oiautorest6685/providers/microsoft.operationalinsights/workspaces/aztest2170"),
			Location: to.Ptr("australiasoutheast"),
			Tags: map[string]*string{
				"tag1": to.Ptr("val1"),
			},
			Properties: &armoperationalinsights.WorkspaceProperties{
				CustomerID:                      to.Ptr("bc089d7b-485c-4aff-a71e-c00f362d8d2f"),
				ProvisioningState:               to.Ptr(armoperationalinsights.WorkspaceEntityStatusSucceeded),
				PublicNetworkAccessForIngestion: to.Ptr(armoperationalinsights.PublicNetworkAccessTypeEnabled),
				PublicNetworkAccessForQuery:     to.Ptr(armoperationalinsights.PublicNetworkAccessTypeEnabled),
				RetentionInDays:                 to.Ptr[int32](30),
				SKU: &armoperationalinsights.WorkspaceSKU{
					Name: to.Ptr(armoperationalinsights.WorkspaceSKUNameEnumPerGB2018),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Workspace) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Workspace)
			t.Fatalf("Mock response is not equal to example response for example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/preview/2021-12-01-preview/examples/WorkspacesCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkspaces_Delete(t *testing.T) {
	// From example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/preview/2021-12-01-preview/examples/WorkspacesDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WorkspacesDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armoperationalinsights.NewWorkspacesClient("00000000-0000-0000-0000-00000000000", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"oiautorest6685",
		"oiautorest6685",
		&armoperationalinsights.WorkspacesClientBeginDeleteOptions{Force: nil,
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/preview/2021-12-01-preview/examples/WorkspacesDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/preview/2021-12-01-preview/examples/WorkspacesDelete.json: %v", err)
	}
}

func TestWorkspaces_Get(t *testing.T) {
	// From example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/preview/2021-12-01-preview/examples/WorkspacesGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WorkspaceGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armoperationalinsights.NewWorkspacesClient("00000000-0000-0000-0000-00000000000", cred, &options)
	res, err := client.Get(ctx,
		"oiautorest6685",
		"oiautorest6685",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/preview/2021-12-01-preview/examples/WorkspacesGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armoperationalinsights.Workspace{}
		if !reflect.DeepEqual(exampleRes, res.Workspace) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Workspace)
			t.Fatalf("Mock response is not equal to example response for example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/preview/2021-12-01-preview/examples/WorkspacesGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkspaces_Update(t *testing.T) {
	// From example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/preview/2021-12-01-preview/examples/WorkspacesUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WorkspacesPatch"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armoperationalinsights.NewWorkspacesClient("00000000-0000-0000-0000-00000000000", cred, &options)
	res, err := client.Update(ctx,
		"oiautorest6685",
		"oiautorest6685",
		armoperationalinsights.WorkspacePatch{
			Properties: &armoperationalinsights.WorkspaceProperties{
				RetentionInDays: to.Ptr[int32](30),
				SKU: &armoperationalinsights.WorkspaceSKU{
					Name: to.Ptr(armoperationalinsights.WorkspaceSKUNameEnumPerGB2018),
				},
				WorkspaceCapping: &armoperationalinsights.WorkspaceCapping{
					DailyQuotaGb: to.Ptr[float64](-1),
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/preview/2021-12-01-preview/examples/WorkspacesUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armoperationalinsights.Workspace{
			Location: to.Ptr("australiasoutheast"),
			Tags: map[string]*string{
				"tag1": to.Ptr("val1"),
			},
			Properties: &armoperationalinsights.WorkspaceProperties{
				PublicNetworkAccessForIngestion: to.Ptr(armoperationalinsights.PublicNetworkAccessTypeEnabled),
				PublicNetworkAccessForQuery:     to.Ptr(armoperationalinsights.PublicNetworkAccessTypeEnabled),
				RetentionInDays:                 to.Ptr[int32](30),
				SKU: &armoperationalinsights.WorkspaceSKU{
					Name: to.Ptr(armoperationalinsights.WorkspaceSKUNameEnumPerGB2018),
				},
				WorkspaceCapping: &armoperationalinsights.WorkspaceCapping{
					DailyQuotaGb:        to.Ptr[float64](-1),
					DataIngestionStatus: to.Ptr(armoperationalinsights.DataIngestionStatusRespectQuota),
					QuotaNextResetTime:  to.Ptr("Mon, 16 Nov 2020 15:00:00 GMT"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Workspace) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Workspace)
			t.Fatalf("Mock response is not equal to example response for example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/preview/2021-12-01-preview/examples/WorkspacesUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDeletedWorkspaces_List(t *testing.T) {
	// From example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/preview/2021-12-01-preview/examples/WorkspacesSubscriptionList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WorkspacesSubscriptionList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armoperationalinsights.NewDeletedWorkspacesClient("00000000-0000-0000-0000-00000000000", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/preview/2021-12-01-preview/examples/WorkspacesSubscriptionList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armoperationalinsights.WorkspaceListResult{
			Value: []*armoperationalinsights.Workspace{
				{
					Name:     to.Ptr("AzTest2170"),
					Type:     to.Ptr("Microsoft.OperationalInsights/workspaces"),
					ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourcegroups/oiautorest6685/providers/microsoft.operationalinsights/workspaces/aztest2170"),
					Location: to.Ptr("australiasoutheast"),
					Tags: map[string]*string{
						"tag1": to.Ptr("val1"),
					},
					Properties: &armoperationalinsights.WorkspaceProperties{
						CustomerID:                      to.Ptr("bc089d7b-485c-4aff-a71e-c00f362d8d2f"),
						ProvisioningState:               to.Ptr(armoperationalinsights.WorkspaceEntityStatusSucceeded),
						PublicNetworkAccessForIngestion: to.Ptr(armoperationalinsights.PublicNetworkAccessTypeEnabled),
						PublicNetworkAccessForQuery:     to.Ptr(armoperationalinsights.PublicNetworkAccessTypeEnabled),
						RetentionInDays:                 to.Ptr[int32](30),
						SKU: &armoperationalinsights.WorkspaceSKU{
							Name: to.Ptr(armoperationalinsights.WorkspaceSKUNameEnumPerGB2018),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.WorkspaceListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.WorkspaceListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/preview/2021-12-01-preview/examples/WorkspacesSubscriptionList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDeletedWorkspaces_ListByResourceGroup(t *testing.T) {
	// From example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/preview/2021-12-01-preview/examples/WorkspacesListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WorkspacesGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armoperationalinsights.NewDeletedWorkspacesClient("00000000-0000-0000-0000-00000000000", cred, &options)
	pager := client.ListByResourceGroup("oiautorest6685",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/preview/2021-12-01-preview/examples/WorkspacesListByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armoperationalinsights.WorkspaceListResult{
			Value: []*armoperationalinsights.Workspace{
				{
					Name:     to.Ptr("AzTest2170"),
					Type:     to.Ptr("Microsoft.OperationalInsights/workspaces"),
					ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourcegroups/oiautorest6685/providers/microsoft.operationalinsights/workspaces/aztest2170"),
					Location: to.Ptr("australiasoutheast"),
					Tags: map[string]*string{
						"tag1": to.Ptr("val1"),
					},
					Properties: &armoperationalinsights.WorkspaceProperties{
						CustomerID:                      to.Ptr("bc089d7b-485c-4aff-a71e-c00f362d8d2f"),
						ProvisioningState:               to.Ptr(armoperationalinsights.WorkspaceEntityStatusSucceeded),
						PublicNetworkAccessForIngestion: to.Ptr(armoperationalinsights.PublicNetworkAccessTypeEnabled),
						PublicNetworkAccessForQuery:     to.Ptr(armoperationalinsights.PublicNetworkAccessTypeEnabled),
						RetentionInDays:                 to.Ptr[int32](30),
						SKU: &armoperationalinsights.WorkspaceSKU{
							Name: to.Ptr(armoperationalinsights.WorkspaceSKUNameEnumPerGB2018),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.WorkspaceListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.WorkspaceListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/preview/2021-12-01-preview/examples/WorkspacesListByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTables_ListByWorkspace(t *testing.T) {
	// From example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/preview/2021-12-01-preview/examples/TablesList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"TablesListByWorkspace"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armoperationalinsights.NewTablesClient("00000000-0000-0000-0000-00000000000", cred, &options)
	pager := client.ListByWorkspace("oiautorest6685",
		"oiautorest6685",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/preview/2021-12-01-preview/examples/TablesList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armoperationalinsights.TablesListResult{
			Value: []*armoperationalinsights.Table{
				{
					Name: to.Ptr("AzureNetworkFlow"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-00000000000/resourcegroups/oiautorest6685/providers/Microsoft.OperationalInsights/workspaces/oiautorest6685/tables/AzureNetworkFlow"),
					Properties: &armoperationalinsights.TableProperties{
						Schema: &armoperationalinsights.Schema{
							Name: to.Ptr("AzureNetworkFlow"),
							Solutions: []*string{
								to.Ptr("LogManagement")},
							StandardColumns: []*armoperationalinsights.Column{
								{
									Name:             to.Ptr("TenantId"),
									Type:             to.Ptr(armoperationalinsights.ColumnTypeEnumGUID),
									IsDefaultDisplay: to.Ptr(false),
									IsHidden:         to.Ptr(true),
								},
								{
									Name:             to.Ptr("SourceSystem"),
									Type:             to.Ptr(armoperationalinsights.ColumnTypeEnumString),
									IsDefaultDisplay: to.Ptr(false),
									IsHidden:         to.Ptr(false),
								},
								{
									Name:             to.Ptr("TimeGenerated"),
									Type:             to.Ptr(armoperationalinsights.ColumnTypeEnumDateTime),
									IsDefaultDisplay: to.Ptr(false),
									IsHidden:         to.Ptr(false),
								},
								{
									Name:             to.Ptr("AgentID"),
									Type:             to.Ptr(armoperationalinsights.ColumnTypeEnumString),
									IsDefaultDisplay: to.Ptr(false),
									IsHidden:         to.Ptr(false),
								},
								{
									Name:             to.Ptr("SourceIP"),
									Type:             to.Ptr(armoperationalinsights.ColumnTypeEnumString),
									IsDefaultDisplay: to.Ptr(false),
									IsHidden:         to.Ptr(false),
								},
								{
									Name:             to.Ptr("Protocol"),
									Type:             to.Ptr(armoperationalinsights.ColumnTypeEnumString),
									IsDefaultDisplay: to.Ptr(false),
									IsHidden:         to.Ptr(false),
								},
								{
									Name:             to.Ptr("SourcePort"),
									Type:             to.Ptr(armoperationalinsights.ColumnTypeEnumInt),
									IsDefaultDisplay: to.Ptr(false),
									IsHidden:         to.Ptr(false),
								},
								{
									Name:             to.Ptr("DestinationPort"),
									Type:             to.Ptr(armoperationalinsights.ColumnTypeEnumInt),
									IsDefaultDisplay: to.Ptr(false),
									IsHidden:         to.Ptr(false),
								},
								{
									Name:             to.Ptr("TcpFlags"),
									Type:             to.Ptr(armoperationalinsights.ColumnTypeEnumInt),
									IsDefaultDisplay: to.Ptr(false),
									IsHidden:         to.Ptr(false),
								},
								{
									Name:             to.Ptr("Packets"),
									Type:             to.Ptr(armoperationalinsights.ColumnTypeEnumInt),
									IsDefaultDisplay: to.Ptr(false),
									IsHidden:         to.Ptr(false),
								},
								{
									Name:             to.Ptr("Bytes"),
									Type:             to.Ptr(armoperationalinsights.ColumnTypeEnumInt),
									IsDefaultDisplay: to.Ptr(false),
									IsHidden:         to.Ptr(false),
								},
								{
									Name:             to.Ptr("BytesOut"),
									Type:             to.Ptr(armoperationalinsights.ColumnTypeEnumInt),
									IsDefaultDisplay: to.Ptr(false),
									IsHidden:         to.Ptr(false),
								},
								{
									Name:             to.Ptr("DurationInMs"),
									Type:             to.Ptr(armoperationalinsights.ColumnTypeEnumInt),
									IsDefaultDisplay: to.Ptr(false),
									IsHidden:         to.Ptr(false),
								},
								{
									Name:             to.Ptr("RstCount"),
									Type:             to.Ptr(armoperationalinsights.ColumnTypeEnumInt),
									IsDefaultDisplay: to.Ptr(false),
									IsHidden:         to.Ptr(false),
								},
								{
									Name:             to.Ptr("MaxSampleRtt"),
									Type:             to.Ptr(armoperationalinsights.ColumnTypeEnumInt),
									IsDefaultDisplay: to.Ptr(false),
									IsHidden:         to.Ptr(false),
								}},
							TableSubType: to.Ptr(armoperationalinsights.TableSubTypeEnumAny),
							TableType:    to.Ptr(armoperationalinsights.TableTypeEnumMicrosoft),
						},
						ArchiveRetentionInDays: to.Ptr[int32](25),
						Plan:                   to.Ptr(armoperationalinsights.TablePlanEnumAnalytics),
						ProvisioningState:      to.Ptr(armoperationalinsights.ProvisioningStateEnumSucceeded),
						RetentionInDays:        to.Ptr[int32](45),
						TotalRetentionInDays:   to.Ptr[int32](70),
					},
				},
				{
					Name: to.Ptr("SurfaceHubDns"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-00000000000/resourcegroups/oiautorest6685/providers/Microsoft.OperationalInsights/workspaces/oiautorest6685/tables/SurfaceHubDns"),
					Properties: &armoperationalinsights.TableProperties{
						Schema: &armoperationalinsights.Schema{
							Name: to.Ptr("SurfaceHubDns"),
							Solutions: []*string{
								to.Ptr("LogManagement")},
							StandardColumns: []*armoperationalinsights.Column{
								{
									Name:             to.Ptr("TenantId"),
									Type:             to.Ptr(armoperationalinsights.ColumnTypeEnumGUID),
									IsDefaultDisplay: to.Ptr(false),
									IsHidden:         to.Ptr(true),
								},
								{
									Name:             to.Ptr("SourceSystem"),
									Type:             to.Ptr(armoperationalinsights.ColumnTypeEnumString),
									IsDefaultDisplay: to.Ptr(false),
									IsHidden:         to.Ptr(false),
								},
								{
									Name:             to.Ptr("TimeGenerated"),
									Type:             to.Ptr(armoperationalinsights.ColumnTypeEnumDateTime),
									IsDefaultDisplay: to.Ptr(false),
									IsHidden:         to.Ptr(false),
								},
								{
									Name:             to.Ptr("QueryName"),
									Type:             to.Ptr(armoperationalinsights.ColumnTypeEnumString),
									IsDefaultDisplay: to.Ptr(false),
									IsHidden:         to.Ptr(false),
								},
								{
									Name:             to.Ptr("ComputerName"),
									Type:             to.Ptr(armoperationalinsights.ColumnTypeEnumString),
									IsDefaultDisplay: to.Ptr(false),
									IsHidden:         to.Ptr(false),
								}},
							TableSubType: to.Ptr(armoperationalinsights.TableSubTypeEnumAny),
							TableType:    to.Ptr(armoperationalinsights.TableTypeEnumMicrosoft),
						},
						ArchiveRetentionInDays: to.Ptr[int32](0),
						Plan:                   to.Ptr(armoperationalinsights.TablePlanEnumAnalytics),
						ProvisioningState:      to.Ptr(armoperationalinsights.ProvisioningStateEnumSucceeded),
						RetentionInDays:        to.Ptr[int32](30),
						TotalRetentionInDays:   to.Ptr[int32](30),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.TablesListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.TablesListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/preview/2021-12-01-preview/examples/TablesList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTables_CreateOrUpdate(t *testing.T) {
	// From example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/preview/2021-12-01-preview/examples/TablesUpsert.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"TablesUpsert"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armoperationalinsights.NewTablesClient("00000000-0000-0000-0000-00000000000", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"oiautorest6685",
		"oiautorest6685",
		"AzureNetworkFlow",
		armoperationalinsights.Table{
			Properties: &armoperationalinsights.TableProperties{
				Schema: &armoperationalinsights.Schema{
					Name: to.Ptr("AzureNetworkFlow"),
					Columns: []*armoperationalinsights.Column{
						{
							Name: to.Ptr("MyNewColumn"),
							Type: to.Ptr(armoperationalinsights.ColumnTypeEnumGUID),
						}},
				},
				RetentionInDays:      to.Ptr[int32](45),
				TotalRetentionInDays: to.Ptr[int32](70),
			},
		},
		&armoperationalinsights.TablesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/preview/2021-12-01-preview/examples/TablesUpsert.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/preview/2021-12-01-preview/examples/TablesUpsert.json: %v", err)
	}
	// Response check
	{
		exampleRes := armoperationalinsights.Table{
			Name: to.Ptr("AzureNetworkFlow"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-00000000000/resourcegroups/oiautorest6685/providers/Microsoft.OperationalInsights/workspaces/oiautorest6685/tables/AzureNetworkFlow"),
			Properties: &armoperationalinsights.TableProperties{
				Schema: &armoperationalinsights.Schema{
					Name: to.Ptr("AzureNetworkFlow"),
					Columns: []*armoperationalinsights.Column{
						{
							Name:             to.Ptr("MyNewColumn"),
							Type:             to.Ptr(armoperationalinsights.ColumnTypeEnumGUID),
							IsDefaultDisplay: to.Ptr(false),
							IsHidden:         to.Ptr(false),
						}},
					Solutions: []*string{
						to.Ptr("LogManagement")},
					StandardColumns: []*armoperationalinsights.Column{
						{
							Name:             to.Ptr("TenantId"),
							Type:             to.Ptr(armoperationalinsights.ColumnTypeEnumGUID),
							IsDefaultDisplay: to.Ptr(false),
							IsHidden:         to.Ptr(true),
						},
						{
							Name:             to.Ptr("SourceSystem"),
							Type:             to.Ptr(armoperationalinsights.ColumnTypeEnumString),
							IsDefaultDisplay: to.Ptr(false),
							IsHidden:         to.Ptr(false),
						},
						{
							Name:             to.Ptr("TimeGenerated"),
							Type:             to.Ptr(armoperationalinsights.ColumnTypeEnumDateTime),
							IsDefaultDisplay: to.Ptr(false),
							IsHidden:         to.Ptr(false),
						},
						{
							Name:             to.Ptr("AgentID"),
							Type:             to.Ptr(armoperationalinsights.ColumnTypeEnumString),
							IsDefaultDisplay: to.Ptr(false),
							IsHidden:         to.Ptr(false),
						},
						{
							Name:             to.Ptr("SourceIP"),
							Type:             to.Ptr(armoperationalinsights.ColumnTypeEnumString),
							IsDefaultDisplay: to.Ptr(false),
							IsHidden:         to.Ptr(false),
						},
						{
							Name:             to.Ptr("Protocol"),
							Type:             to.Ptr(armoperationalinsights.ColumnTypeEnumString),
							IsDefaultDisplay: to.Ptr(false),
							IsHidden:         to.Ptr(false),
						},
						{
							Name:             to.Ptr("SourcePort"),
							Type:             to.Ptr(armoperationalinsights.ColumnTypeEnumInt),
							IsDefaultDisplay: to.Ptr(false),
							IsHidden:         to.Ptr(false),
						},
						{
							Name:             to.Ptr("DestinationPort"),
							Type:             to.Ptr(armoperationalinsights.ColumnTypeEnumInt),
							IsDefaultDisplay: to.Ptr(false),
							IsHidden:         to.Ptr(false),
						},
						{
							Name:             to.Ptr("TcpFlags"),
							Type:             to.Ptr(armoperationalinsights.ColumnTypeEnumInt),
							IsDefaultDisplay: to.Ptr(false),
							IsHidden:         to.Ptr(false),
						},
						{
							Name:             to.Ptr("Packets"),
							Type:             to.Ptr(armoperationalinsights.ColumnTypeEnumInt),
							IsDefaultDisplay: to.Ptr(false),
							IsHidden:         to.Ptr(false),
						},
						{
							Name:             to.Ptr("Bytes"),
							Type:             to.Ptr(armoperationalinsights.ColumnTypeEnumInt),
							IsDefaultDisplay: to.Ptr(false),
							IsHidden:         to.Ptr(false),
						},
						{
							Name:             to.Ptr("BytesOut"),
							Type:             to.Ptr(armoperationalinsights.ColumnTypeEnumInt),
							IsDefaultDisplay: to.Ptr(false),
							IsHidden:         to.Ptr(false),
						},
						{
							Name:             to.Ptr("DurationInMs"),
							Type:             to.Ptr(armoperationalinsights.ColumnTypeEnumInt),
							IsDefaultDisplay: to.Ptr(false),
							IsHidden:         to.Ptr(false),
						},
						{
							Name:             to.Ptr("RstCount"),
							Type:             to.Ptr(armoperationalinsights.ColumnTypeEnumInt),
							IsDefaultDisplay: to.Ptr(false),
							IsHidden:         to.Ptr(false),
						},
						{
							Name:             to.Ptr("MaxSampleRtt"),
							Type:             to.Ptr(armoperationalinsights.ColumnTypeEnumInt),
							IsDefaultDisplay: to.Ptr(false),
							IsHidden:         to.Ptr(false),
						}},
					TableSubType: to.Ptr(armoperationalinsights.TableSubTypeEnumDataCollectionRuleBased),
					TableType:    to.Ptr(armoperationalinsights.TableTypeEnumMicrosoft),
				},
				ArchiveRetentionInDays: to.Ptr[int32](25),
				Plan:                   to.Ptr(armoperationalinsights.TablePlanEnumAnalytics),
				ProvisioningState:      to.Ptr(armoperationalinsights.ProvisioningStateEnumSucceeded),
				RetentionInDays:        to.Ptr[int32](45),
				TotalRetentionInDays:   to.Ptr[int32](70),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Table) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Table)
			t.Fatalf("Mock response is not equal to example response for example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/preview/2021-12-01-preview/examples/TablesUpsert.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTables_Update(t *testing.T) {
	// From example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/preview/2021-12-01-preview/examples/TablesUpsert.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"TablesUpsert"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armoperationalinsights.NewTablesClient("00000000-0000-0000-0000-00000000000", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"oiautorest6685",
		"oiautorest6685",
		"AzureNetworkFlow",
		armoperationalinsights.Table{
			Properties: &armoperationalinsights.TableProperties{
				Schema: &armoperationalinsights.Schema{
					Name: to.Ptr("AzureNetworkFlow"),
					Columns: []*armoperationalinsights.Column{
						{
							Name: to.Ptr("MyNewColumn"),
							Type: to.Ptr(armoperationalinsights.ColumnTypeEnumGUID),
						}},
				},
				RetentionInDays:      to.Ptr[int32](45),
				TotalRetentionInDays: to.Ptr[int32](70),
			},
		},
		&armoperationalinsights.TablesClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/preview/2021-12-01-preview/examples/TablesUpsert.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/preview/2021-12-01-preview/examples/TablesUpsert.json: %v", err)
	}
	// Response check
	{
		exampleRes := armoperationalinsights.Table{
			Name: to.Ptr("AzureNetworkFlow"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-00000000000/resourcegroups/oiautorest6685/providers/Microsoft.OperationalInsights/workspaces/oiautorest6685/tables/AzureNetworkFlow"),
			Properties: &armoperationalinsights.TableProperties{
				Schema: &armoperationalinsights.Schema{
					Name: to.Ptr("AzureNetworkFlow"),
					Columns: []*armoperationalinsights.Column{
						{
							Name:             to.Ptr("MyNewColumn"),
							Type:             to.Ptr(armoperationalinsights.ColumnTypeEnumGUID),
							IsDefaultDisplay: to.Ptr(false),
							IsHidden:         to.Ptr(false),
						}},
					Solutions: []*string{
						to.Ptr("LogManagement")},
					StandardColumns: []*armoperationalinsights.Column{
						{
							Name:             to.Ptr("TenantId"),
							Type:             to.Ptr(armoperationalinsights.ColumnTypeEnumGUID),
							IsDefaultDisplay: to.Ptr(false),
							IsHidden:         to.Ptr(true),
						},
						{
							Name:             to.Ptr("SourceSystem"),
							Type:             to.Ptr(armoperationalinsights.ColumnTypeEnumString),
							IsDefaultDisplay: to.Ptr(false),
							IsHidden:         to.Ptr(false),
						},
						{
							Name:             to.Ptr("TimeGenerated"),
							Type:             to.Ptr(armoperationalinsights.ColumnTypeEnumDateTime),
							IsDefaultDisplay: to.Ptr(false),
							IsHidden:         to.Ptr(false),
						},
						{
							Name:             to.Ptr("AgentID"),
							Type:             to.Ptr(armoperationalinsights.ColumnTypeEnumString),
							IsDefaultDisplay: to.Ptr(false),
							IsHidden:         to.Ptr(false),
						},
						{
							Name:             to.Ptr("SourceIP"),
							Type:             to.Ptr(armoperationalinsights.ColumnTypeEnumString),
							IsDefaultDisplay: to.Ptr(false),
							IsHidden:         to.Ptr(false),
						},
						{
							Name:             to.Ptr("Protocol"),
							Type:             to.Ptr(armoperationalinsights.ColumnTypeEnumString),
							IsDefaultDisplay: to.Ptr(false),
							IsHidden:         to.Ptr(false),
						},
						{
							Name:             to.Ptr("SourcePort"),
							Type:             to.Ptr(armoperationalinsights.ColumnTypeEnumInt),
							IsDefaultDisplay: to.Ptr(false),
							IsHidden:         to.Ptr(false),
						},
						{
							Name:             to.Ptr("DestinationPort"),
							Type:             to.Ptr(armoperationalinsights.ColumnTypeEnumInt),
							IsDefaultDisplay: to.Ptr(false),
							IsHidden:         to.Ptr(false),
						},
						{
							Name:             to.Ptr("TcpFlags"),
							Type:             to.Ptr(armoperationalinsights.ColumnTypeEnumInt),
							IsDefaultDisplay: to.Ptr(false),
							IsHidden:         to.Ptr(false),
						},
						{
							Name:             to.Ptr("Packets"),
							Type:             to.Ptr(armoperationalinsights.ColumnTypeEnumInt),
							IsDefaultDisplay: to.Ptr(false),
							IsHidden:         to.Ptr(false),
						},
						{
							Name:             to.Ptr("Bytes"),
							Type:             to.Ptr(armoperationalinsights.ColumnTypeEnumInt),
							IsDefaultDisplay: to.Ptr(false),
							IsHidden:         to.Ptr(false),
						},
						{
							Name:             to.Ptr("BytesOut"),
							Type:             to.Ptr(armoperationalinsights.ColumnTypeEnumInt),
							IsDefaultDisplay: to.Ptr(false),
							IsHidden:         to.Ptr(false),
						},
						{
							Name:             to.Ptr("DurationInMs"),
							Type:             to.Ptr(armoperationalinsights.ColumnTypeEnumInt),
							IsDefaultDisplay: to.Ptr(false),
							IsHidden:         to.Ptr(false),
						},
						{
							Name:             to.Ptr("RstCount"),
							Type:             to.Ptr(armoperationalinsights.ColumnTypeEnumInt),
							IsDefaultDisplay: to.Ptr(false),
							IsHidden:         to.Ptr(false),
						},
						{
							Name:             to.Ptr("MaxSampleRtt"),
							Type:             to.Ptr(armoperationalinsights.ColumnTypeEnumInt),
							IsDefaultDisplay: to.Ptr(false),
							IsHidden:         to.Ptr(false),
						}},
					TableSubType: to.Ptr(armoperationalinsights.TableSubTypeEnumDataCollectionRuleBased),
					TableType:    to.Ptr(armoperationalinsights.TableTypeEnumMicrosoft),
				},
				ArchiveRetentionInDays: to.Ptr[int32](25),
				Plan:                   to.Ptr(armoperationalinsights.TablePlanEnumAnalytics),
				ProvisioningState:      to.Ptr(armoperationalinsights.ProvisioningStateEnumSucceeded),
				RetentionInDays:        to.Ptr[int32](45),
				TotalRetentionInDays:   to.Ptr[int32](70),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Table) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Table)
			t.Fatalf("Mock response is not equal to example response for example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/preview/2021-12-01-preview/examples/TablesUpsert.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTables_Get(t *testing.T) {
	// From example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/preview/2021-12-01-preview/examples/TablesGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"TablesGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armoperationalinsights.NewTablesClient("00000000-0000-0000-0000-00000000000", cred, &options)
	res, err := client.Get(ctx,
		"oiautorest6685",
		"oiautorest6685",
		"table1_SRCH",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/preview/2021-12-01-preview/examples/TablesGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armoperationalinsights.Table{
			Name: to.Ptr("table1_SRCH"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-00000000000/resourceGroups/oiautorest6685/providers/Microsoft.OperationalInsights/workspaces/oiautorest6685/tables/table1_SRCH"),
			Properties: &armoperationalinsights.TableProperties{
				Schema: &armoperationalinsights.Schema{
					Name:    to.Ptr("table1_SRCH"),
					Columns: []*armoperationalinsights.Column{},
					SearchResults: &armoperationalinsights.SearchResults{
						Description:     to.Ptr("This table was created using a Search Job with the following query: 'Heartbeat | where SourceSystem != '' | project SourceSystem'."),
						EndSearchTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-02T04:05:06Z"); return t }()),
						Limit:           to.Ptr[int32](1000),
						Query:           to.Ptr("Heartbeat | where SourceSystem != '' | project SourceSystem"),
						SourceTable:     to.Ptr("Heartbeat"),
						StartSearchTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-03T04:05:06Z"); return t }()),
					},
					Solutions: []*string{
						to.Ptr("LogManagement")},
					StandardColumns: []*armoperationalinsights.Column{
						{
							Name:             to.Ptr("TenantId"),
							Type:             to.Ptr(armoperationalinsights.ColumnTypeEnumGUID),
							IsDefaultDisplay: to.Ptr(false),
							IsHidden:         to.Ptr(false),
						},
						{
							Name:             to.Ptr("SourceSystem"),
							Type:             to.Ptr(armoperationalinsights.ColumnTypeEnumString),
							IsDefaultDisplay: to.Ptr(false),
							IsHidden:         to.Ptr(false),
						},
						{
							Name:             to.Ptr("MG"),
							Type:             to.Ptr(armoperationalinsights.ColumnTypeEnumGUID),
							IsDefaultDisplay: to.Ptr(false),
							IsHidden:         to.Ptr(false),
						},
						{
							Name:             to.Ptr("ManagementGroupName"),
							Type:             to.Ptr(armoperationalinsights.ColumnTypeEnumString),
							IsDefaultDisplay: to.Ptr(false),
							IsHidden:         to.Ptr(false),
						},
						{
							Name:             to.Ptr("TimeGenerated"),
							Type:             to.Ptr(armoperationalinsights.ColumnTypeEnumDateTime),
							IsDefaultDisplay: to.Ptr(false),
							IsHidden:         to.Ptr(false),
						},
						{
							Name:             to.Ptr("Computer"),
							Type:             to.Ptr(armoperationalinsights.ColumnTypeEnumString),
							IsDefaultDisplay: to.Ptr(false),
							IsHidden:         to.Ptr(false),
						},
						{
							Name:             to.Ptr("RawData"),
							Type:             to.Ptr(armoperationalinsights.ColumnTypeEnumString),
							IsDefaultDisplay: to.Ptr(false),
							IsHidden:         to.Ptr(false),
						}},
					TableSubType: to.Ptr(armoperationalinsights.TableSubTypeEnumDataCollectionRuleBased),
					TableType:    to.Ptr(armoperationalinsights.TableTypeEnumSearchResults),
				},
				ArchiveRetentionInDays: to.Ptr[int32](0),
				Plan:                   to.Ptr(armoperationalinsights.TablePlanEnumAnalytics),
				ProvisioningState:      to.Ptr(armoperationalinsights.ProvisioningStateEnumSucceeded),
				ResultStatistics: &armoperationalinsights.ResultStatistics{
					IngestedRecords: to.Ptr[int32](5),
					Progress:        to.Ptr[float32](75),
				},
				RetentionInDays:      to.Ptr[int32](50),
				TotalRetentionInDays: to.Ptr[int32](50),
			},
			SystemData: &armoperationalinsights.SystemData{
				CreatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-03T04:05:06Z"); return t }()),
				CreatedBy: to.Ptr("00000000-0000-0000-0000-00000000000"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Table) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Table)
			t.Fatalf("Mock response is not equal to example response for example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/preview/2021-12-01-preview/examples/TablesGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTables_Delete(t *testing.T) {
	// From example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/preview/2021-12-01-preview/examples/TablesDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"TablesGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armoperationalinsights.NewTablesClient("00000000-0000-0000-0000-00000000000", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"oiautorest6685",
		"oiautorest6685",
		"table1_CL",
		&armoperationalinsights.TablesClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/preview/2021-12-01-preview/examples/TablesDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/preview/2021-12-01-preview/examples/TablesDelete.json: %v", err)
	}
}

func TestDataExports_ListByWorkspace(t *testing.T) {
	// From example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2020-08-01/examples/DataExportListByWorkspace.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DataExportGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armoperationalinsights.NewDataExportsClient("00000000-0000-0000-0000-00000000000", cred, &options)
	pager := client.ListByWorkspace("RgTest1",
		"DeWnTest1234",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2020-08-01/examples/DataExportListByWorkspace.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armoperationalinsights.DataExportListResult{
			Value: []*armoperationalinsights.DataExport{
				{
					Name: to.Ptr("export1"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/export"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-00000000000/resourcegroups/RgTest1/providers/microsoft.operationalinsights/workspaces/DeWnTest1234/export/export1"),
					Properties: &armoperationalinsights.DataExportProperties{
						CreatedDate:  to.Ptr("Sun, 12 Jan 2020 12:51:10 GMT"),
						DataExportID: to.Ptr("d5233afc-7829-4b89-c594-08d7975e19a5"),
						Destination: &armoperationalinsights.Destination{
							Type:       to.Ptr(armoperationalinsights.TypeEventHub),
							ResourceID: to.Ptr("/subscriptions/192b9f85-a39a-4276-b96d-d5cd351703f9/resourceGroups/OIAutoRest1234/providers/Microsoft.EventHub/namespaces/test"),
						},
						Enable:           to.Ptr(true),
						LastModifiedDate: to.Ptr("Sun, 12 Jan 2020 12:51:10 GMT"),
						TableNames: []*string{
							to.Ptr("Heartbeat")},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DataExportListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DataExportListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2020-08-01/examples/DataExportListByWorkspace.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDataExports_CreateOrUpdate(t *testing.T) {
	// From example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2020-08-01/examples/DataExportCreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DataExportCreate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armoperationalinsights.NewDataExportsClient("00000000-0000-0000-0000-00000000000", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"RgTest1",
		"DeWnTest1234",
		"export1",
		armoperationalinsights.DataExport{
			Properties: &armoperationalinsights.DataExportProperties{
				Destination: &armoperationalinsights.Destination{
					ResourceID: to.Ptr("/subscriptions/192b9f85-a39a-4276-b96d-d5cd351703f9/resourceGroups/OIAutoRest1234/providers/Microsoft.EventHub/namespaces/test"),
				},
				TableNames: []*string{
					to.Ptr("Heartbeat")},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2020-08-01/examples/DataExportCreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armoperationalinsights.DataExport{
			Name: to.Ptr("export1"),
			Type: to.Ptr("Microsoft.OperationalInsights/workspaces/export"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-00000000000/resourcegroups/RgTest1/providers/microsoft.operationalinsights/workspaces/DeWnTest1234/export/export1"),
			Properties: &armoperationalinsights.DataExportProperties{
				CreatedDate:  to.Ptr("Sun, 12 Jan 2020 12:51:10 GMT"),
				DataExportID: to.Ptr("d5233afc-7829-4b89-c594-08d7975e19a5"),
				Destination: &armoperationalinsights.Destination{
					Type:       to.Ptr(armoperationalinsights.TypeEventHub),
					ResourceID: to.Ptr("/subscriptions/192b9f85-a39a-4276-b96d-d5cd351703f9/resourceGroups/OIAutoRest1234/providers/Microsoft.EventHub/namespaces/test"),
				},
				Enable:           to.Ptr(true),
				LastModifiedDate: to.Ptr("Sun, 12 Jan 2020 12:51:10 GMT"),
				TableNames: []*string{
					to.Ptr("Heartbeat")},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DataExport) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DataExport)
			t.Fatalf("Mock response is not equal to example response for example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2020-08-01/examples/DataExportCreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDataExports_Get(t *testing.T) {
	// From example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2020-08-01/examples/DataExportGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DataExportGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armoperationalinsights.NewDataExportsClient("00000000-0000-0000-0000-00000000000", cred, &options)
	res, err := client.Get(ctx,
		"RgTest1",
		"DeWnTest1234",
		"export1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2020-08-01/examples/DataExportGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armoperationalinsights.DataExport{
			Name: to.Ptr("export1"),
			Type: to.Ptr("Microsoft.OperationalInsights/workspaces/export"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-00000000000/resourcegroups/RgTest1/providers/microsoft.operationalinsights/workspaces/DeWnTest1234/export/export1"),
			Properties: &armoperationalinsights.DataExportProperties{
				CreatedDate:  to.Ptr("Sun, 12 Jan 2020 12:51:10 GMT"),
				DataExportID: to.Ptr("d5233afc-7829-4b89-c594-08d7975e19a5"),
				Destination: &armoperationalinsights.Destination{
					Type:       to.Ptr(armoperationalinsights.TypeEventHub),
					ResourceID: to.Ptr("/subscriptions/192b9f85-a39a-4276-b96d-d5cd351703f9/resourceGroups/OIAutoRest1234/providers/Microsoft.EventHub/namespaces/test"),
				},
				Enable:           to.Ptr(true),
				LastModifiedDate: to.Ptr("Sun, 12 Jan 2020 12:51:10 GMT"),
				TableNames: []*string{
					to.Ptr("Heartbeat")},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DataExport) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DataExport)
			t.Fatalf("Mock response is not equal to example response for example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2020-08-01/examples/DataExportGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDataExports_Delete(t *testing.T) {
	// From example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2020-08-01/examples/DataExportDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DataExportDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armoperationalinsights.NewDataExportsClient("00000000-0000-0000-0000-00000000000", cred, &options)
	_, err := client.Delete(ctx,
		"RgTest1",
		"DeWnTest1234",
		"export1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2020-08-01/examples/DataExportDelete.json: %v", err)
	}
}

func TestDataSources_CreateOrUpdate(t *testing.T) {
	// From example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2020-08-01/examples/DataSourcesCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DataSourcesCreate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armoperationalinsights.NewDataSourcesClient("00000000-0000-0000-0000-00000000000", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"OIAutoRest5123",
		"AzTest9724",
		"AzTestDS774",
		armoperationalinsights.DataSource{
			Kind: to.Ptr(armoperationalinsights.DataSourceKindAzureActivityLog),
			Properties: map[string]interface{}{
				"LinkedResourceId": "/subscriptions/00000000-0000-0000-0000-00000000000/providers/microsoft.insights/eventtypes/management",
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2020-08-01/examples/DataSourcesCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armoperationalinsights.DataSource{
			Name: to.Ptr("AzTestDS774"),
			Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest5123/providers/Microsoft.OperationalInsights/workspaces/AzTest9724/datasources/AzTestDS774"),
			Etag: to.Ptr("W/\"datetime'2017-10-01T08%3A01%3A21.2351243Z'\""),
			Kind: to.Ptr(armoperationalinsights.DataSourceKindAzureActivityLog),
			Properties: map[string]interface{}{
				"linkedResourceId": "/subscriptions/00000000-0000-0000-0000-00000000000/providers/microsoft.insights/eventtypes/management",
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DataSource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DataSource)
			t.Fatalf("Mock response is not equal to example response for example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2020-08-01/examples/DataSourcesCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDataSources_Delete(t *testing.T) {
	// From example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2020-08-01/examples/DataSourcesDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DataSourcesDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armoperationalinsights.NewDataSourcesClient("00000000-0000-0000-0000-00000000000", cred, &options)
	_, err := client.Delete(ctx,
		"OIAutoRest5123",
		"AzTest9724",
		"AzTestDS774",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2020-08-01/examples/DataSourcesDelete.json: %v", err)
	}
}

func TestDataSources_Get(t *testing.T) {
	// From example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2020-08-01/examples/DataSourcesGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DataSourcesGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armoperationalinsights.NewDataSourcesClient("00000000-0000-0000-0000-00000000000", cred, &options)
	res, err := client.Get(ctx,
		"OIAutoRest5123",
		"AzTest9724",
		"AzTestDS774",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2020-08-01/examples/DataSourcesGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armoperationalinsights.DataSource{
			Name: to.Ptr("AzTestDS774"),
			Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest5123/providers/Microsoft.OperationalInsights/workspaces/AzTest9724/datasources/AzTestDS774"),
			Etag: to.Ptr("W/\"datetime'2017-10-01T08%3A01%3A21.2351243Z'\""),
			Kind: to.Ptr(armoperationalinsights.DataSourceKindAzureActivityLog),
			Properties: map[string]interface{}{
				"linkedResourceId": "/subscriptions/00000000-0000-0000-0000-00000000000/providers/microsoft.insights/eventtypes/management",
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DataSource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DataSource)
			t.Fatalf("Mock response is not equal to example response for example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2020-08-01/examples/DataSourcesGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDataSources_ListByWorkspace(t *testing.T) {
	// From example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2020-08-01/examples/DataSourcesListByWorkspace.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DataSourcesListByWorkspace"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armoperationalinsights.NewDataSourcesClient("00000000-0000-0000-0000-00000000000", cred, &options)
	pager := client.ListByWorkspace("OIAutoRest5123",
		"AzTest9724",
		"kind='WindowsEvent'",
		&armoperationalinsights.DataSourcesClientListByWorkspaceOptions{Skiptoken: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2020-08-01/examples/DataSourcesListByWorkspace.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armoperationalinsights.DataSourceListResult{
			Value: []*armoperationalinsights.DataSource{
				{
					Name: to.Ptr("AzTestDSWE1011"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE1011"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A08.5629323Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent14",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE1013"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE1013"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A22.2533211Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent64",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE1020"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE1020"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A21%3A04.4645698Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent202",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE1074"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE1074"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A21%3A12.5871672Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent231",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE1117"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE1117"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A28.9325389Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent86",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE1128"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE1128"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A13.2185735Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent30",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE1176"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE1176"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A22.7779289Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent66",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE1293"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE1293"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A21%3A03.5114136Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent199",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE134"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE134"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A33.6788897Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent102",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE1352"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE1352"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A36.2312139Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent111",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE1360"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE1360"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A13.4685716Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent31",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE1382"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE1382"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A19.2840543Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent53",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE1410"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE1410"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A42.7070374Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent132",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE1417"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE1417"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A21%3A06.8922838Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent211",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE1560"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE1560"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A21%3A26.6932412Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent274",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE1618"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE1618"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A21%3A07.1422661Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent212",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE1662"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE1662"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A21%3A09.5980265Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent221",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE1675"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE1675"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A39.6167744Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent121",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE169"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE169"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A50.1064668Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent157",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE1735"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE1735"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A21%3A02.4954752Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent196",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE1742"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE1742"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A08.0452997Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent12",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE1815"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE1815"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A46.5966089Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent145",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE1828"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE1828"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A23.6529754Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent69",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE188"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE188"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A20.7216320Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent58",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE1962"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE1962"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A17.9341560Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent48",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE1997"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE1997"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A21%3A17.3081821Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent246",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE2046"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE2046"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A49.2918213Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent154",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE2056"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE2056"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A52.4111189Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent165",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE2116"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE2116"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A54.7598026Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent172",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE2142"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE2142"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A07.2711237Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent9",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE22"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE22"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A48.2064500Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent150",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE2208"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE2208"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A21%3A08.7849248Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent218",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE2221"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE2221"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A51.3306230Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent161",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE2226"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE2226"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A25.5991266Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent75",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE2231"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE2231"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A15.3592513Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent38",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE2242"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE2242"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A21%3A06.0641077Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent208",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE2263"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE2263"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A21%3A11.7829226Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent228",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE2369"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE2369"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A21%3A21.5874093Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent259",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE240"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE240"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A21%3A06.6266574Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent210",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE2423"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE2423"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A21%3A23.4752361Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent265",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE2463"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE2463"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A36.5611370Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent112",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE2499"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE2499"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A13.7187131Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent32",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE2509"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE2509"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A21%3A09.3324224Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent220",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE2541"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE2541"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A29.2312540Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent87",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE2578"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE2578"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A05.3117461Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent2",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE2619"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE2619"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A38.5379572Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent119",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE274"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE274"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A05.0735592Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent1",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE2754"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE2754"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A30.6297451Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent92",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE281"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE281"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A21%3A05.2972963Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent205",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE2818"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE2818"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A33.3820072Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent101",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE2860"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE2860"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A21%3A14.0876077Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent236",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE2867"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE2867"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A30.9266089Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent93",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE2923"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE2923"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A21%3A27.9342580Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent278",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE2979"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE2979"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A44.4311007Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent138",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE3009"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE3009"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A21%3A08.5349323Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent217",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE3033"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE3033"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A21%3A24.9696296Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent269",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE3095"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE3095"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A18.2006423Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent49",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE3114"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE3114"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A38.2879169Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent118",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE3132"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE3132"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A37.6889867Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent116",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE3147"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE3147"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A58.9331954Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent185",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE3159"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE3159"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A35.6843083Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent109",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE317"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE317"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A17.4118415Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent46",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE3175"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE3175"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A35.0592573Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent107",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE3183"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE3183"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A12.6247906Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent28",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE3217"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE3217"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A21%3A14.4938899Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent237",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE3220"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE3220"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A21.7373059Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent62",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE3228"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE3228"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A18.7785353Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent51",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE3395"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE3395"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A54.4936956Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent171",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE3416"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE3416"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A22.0032694Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent63",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE3506"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE3506"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A21%3A28.8251658Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent280",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE3517"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE3517"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A11.2153209Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent23",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE3528"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE3528"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A21%3A12.0402565Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent229",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE3530"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE3530"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A43.8027590Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent136",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE3594"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE3594"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A21%3A01.9173304Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent194",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE3615"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE3615"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A21%3A00.8990889Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent191",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE3645"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE3645"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A21%3A16.0877829Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent242",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE3676"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE3676"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A07.8068460Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent11",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE3700"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE3700"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A49.5439700Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent155",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE3738"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE3738"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A38.0363694Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent117",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE3740"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE3740"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A50.6390339Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent159",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE3754"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE3754"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A31.5203823Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent95",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE3761"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE3761"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A31.7860159Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent96",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE3787"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE3787"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A20.0966078Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent56",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE3880"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE3880"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A57.8394298Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent181",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE3887"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE3887"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A51.0806178Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent160",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE3899"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE3899"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A21%3A16.6987634Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent244",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE3928"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE3928"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A41.4223363Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent127",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE4005"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE4005"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A59.1831854Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent186",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE4021"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE4021"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A21%3A31.5314824Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent288",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE4054"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE4054"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A21%3A01.6667691Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent193",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE406"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE406"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A42.9581303Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent133",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE4128"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE4128"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A29.4890798Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent88",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE4140"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE4140"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A21%3A00.2051432Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent189",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE4209"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE4209"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A58.3706603Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent183",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE4216"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE4216"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A23.1240354Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent67",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE4240"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE4240"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A21%3A33.5368097Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent294",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE4279"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE4279"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A30.3641074Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent91",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE4289"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE4289"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A21%3A26.3963554Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent273",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE4317"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE4317"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A47.6751803Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent148",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE4324"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE4324"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A05.8120517Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent4",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE4362"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE4362"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A21%3A04.1208323Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent201",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE4416"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE4416"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A08.3109506Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent13",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE4424"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE4424"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A48.9744951Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent153",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE4466"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE4466"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A19.0457713Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent52",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE4467"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE4467"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A15.0936374Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent37",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE4503"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE4503"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A41.9399246Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent129",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE4521"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE4521"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A21%3A27.2714771Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent276",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE4530"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE4530"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A26.7419933Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent79",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE4600"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE4600"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A37.4227966Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent115",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE4644"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE4644"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A43.5519204Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent135",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE4694"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE4694"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A51.6431386Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent162",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE4715"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE4715"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A06.0530002Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent5",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE472"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE472"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A21%3A24.3989962Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent267",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE4721"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE4721"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A21%3A16.3706498Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent243",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE4734"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE4734"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A21%3A33.8337155Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent295",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE4755"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE4755"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A21%3A25.2712759Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent270",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE4779"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE4779"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A27.5076680Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent81",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE4791"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE4791"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A04.6828938Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent0",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE4798"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE4798"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A54.0073520Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent170",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE480"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE480"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A21%3A22.9077505Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent263",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE4847"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE4847"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A11.7028912Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent25",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE4876"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE4876"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A21%3A04.9847854Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent204",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE4900"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE4900"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A23.4029367Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent68",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE4918"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE4918"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A34.5280091Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent105",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE4928"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE4928"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A21%3A34.2882196Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent296",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE4930"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE4930"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A21%3A33.2381803Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent293",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE4945"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE4945"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A36.8423994Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent113",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE4967"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE4967"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A08.9379456Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent15",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE4969"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE4969"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A57.5893926Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent180",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE4983"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE4983"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A19.5497139Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent54",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE5011"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE5011"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A48.4588661Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent151",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE5082"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE5082"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A21%3A32.2694295Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent290",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE5136"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE5136"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A21%3A17.8863220Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent248",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE5141"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE5141"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A21%3A05.5484906Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent206",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE5166"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE5166"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A21%3A23.9283342Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent266",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE5207"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE5207"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A21%3A29.4970655Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent282",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE5223"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE5223"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A21%3A04.7146038Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent203",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE5233"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE5233"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A10.3237629Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent20",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE5253"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE5253"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A21%3A18.1831872Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent249",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE5255"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE5255"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A21%3A30.9049829Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent286",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE5263"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE5263"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A12.8904269Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent29",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE5351"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE5351"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A21%3A20.4543884Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent255",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE5385"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE5385"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A19.7997319Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent55",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE5394"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE5394"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A29.7703365Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent89",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE541"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE541"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A09.4692151Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent17",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE5439"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE5439"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A21%3A15.7994161Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent241",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE5460"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE5460"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A21%3A10.3032105Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent223",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE5479"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE5479"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A21%3A24.6802546Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent268",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE5483"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE5483"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A21%3A01.1670463Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent192",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE5486"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE5486"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A37.1393156Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent114",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE5554"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE5554"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A41.1205470Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent126",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE5559"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE5559"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A21%3A20.7200407Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent256",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE5585"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE5585"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A18.4534330Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent50",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE568"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE568"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A40.8861587Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent125",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE5741"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE5741"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A21%3A12.3059271Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent230",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE58"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE58"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A39.0692471Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent120",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE5810"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE5810"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A16.9117573Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent44",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE5815"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE5815"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A45.4055476Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent141",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE5858"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE5858"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A55.0097893Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent173",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE5866"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE5866"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A21%3A18.9931389Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent251",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE5888"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE5888"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A59.4332080Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent187",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE5905"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE5905"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A09.7599986Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent18",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE6027"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE6027"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A21%3A10.6395291Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent224",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE607"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE607"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A21%3A13.7282386Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent235",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE6099"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE6099"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A33.1319662Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent100",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE6122"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE6122"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A06.3186640Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent6",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE6218"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE6218"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A11.4528829Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent24",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE622"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE622"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A47.9407875Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent149",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE6222"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE6222"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A21%3A06.3453921Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent209",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE6240"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE6240"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A21.2372832Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent60",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE6251"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE6251"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A21%3A08.2849036Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent216",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE6274"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE6274"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A21%3A02.1829375Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent195",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE6296"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE6296"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A32.3491070Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent98",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE6301"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE6301"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A21%3A22.1811938Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent261",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE6404"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE6404"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A06.7093003Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent7",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE6406"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE6406"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A05.5617435Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent3",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE6432"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE6432"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A40.2886854Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent123",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE6439"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE6439"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A35.9811949Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent110",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE6451"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE6451"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A21%3A13.1344490Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent233",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE6486"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE6486"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A10.9653354Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent22",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE6505"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE6505"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A10.0582011Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent19",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE6514"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE6514"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A52.8955201Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent166",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE6518"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE6518"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A21%3A10.9395226Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent225",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE6537"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE6537"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A24.0123335Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent70",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE6547"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE6547"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A57.3394082Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent179",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE6556"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE6556"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A33.9457044Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent103",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE6718"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE6718"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A21%3A13.4313542Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent234",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE6724"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE6724"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A35.4186784Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent108",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE6741"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE6741"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A12.3279180Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent27",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE6796"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE6796"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A24.5764501Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent72",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE6826"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE6826"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A21%3A35.2579899Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent299",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE6829"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE6829"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A21%3A34.6319483Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent297",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE6893"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE6893"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A28.5887776Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent85",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE6974"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE6974"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A16.1249736Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent41",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE7008"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE7008"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A21%3A28.3876585Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent279",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE7014"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE7014"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A21%3A29.1220764Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent281",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE7068"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE7068"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A21%3A26.0213457Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent272",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE7080"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE7080"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A21%3A21.8686663Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent260",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE7166"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE7166"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A40.5423724Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent124",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				},
				{
					Name: to.Ptr("AzTestDSWE7178"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/datasources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/OIAutoRest7887/providers/Microsoft.OperationalInsights/workspaces/AzTest218/datasources/AzTestDSWE7178"),
					Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A20%3A16.3906307Z'\""),
					Kind: to.Ptr(armoperationalinsights.DataSourceKindWindowsEvent),
					Properties: map[string]interface{}{
						"eventLogName": "windowsEvent42",
						"eventTypes": []interface{}{
							map[string]interface{}{
								"eventType": "Error",
							},
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DataSourceListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DataSourceListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2020-08-01/examples/DataSourcesListByWorkspace.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIntelligencePacks_Disable(t *testing.T) {
	// From example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2020-08-01/examples/WorkspacesDisableIntelligencePack.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"IntelligencePacksDisable"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armoperationalinsights.NewIntelligencePacksClient("00000000-0000-0000-0000-00000000000", cred, &options)
	_, err := client.Disable(ctx,
		"rg1",
		"TestLinkWS",
		"ChangeTracking",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2020-08-01/examples/WorkspacesDisableIntelligencePack.json: %v", err)
	}
}

func TestIntelligencePacks_Enable(t *testing.T) {
	// From example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2020-08-01/examples/WorkspacesEnableIntelligencePack.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"IntelligencePacksEnable"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armoperationalinsights.NewIntelligencePacksClient("00000000-0000-0000-0000-00000000000", cred, &options)
	_, err := client.Enable(ctx,
		"rg1",
		"TestLinkWS",
		"ChangeTracking",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2020-08-01/examples/WorkspacesEnableIntelligencePack.json: %v", err)
	}
}

func TestIntelligencePacks_List(t *testing.T) {
	// From example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2020-08-01/examples/WorkspacesListIntelligencePacks.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"IntelligencePacksList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armoperationalinsights.NewIntelligencePacksClient("00000000-0000-0000-0000-00000000000", cred, &options)
	res, err := client.List(ctx,
		"rg1",
		"TestLinkWS",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2020-08-01/examples/WorkspacesListIntelligencePacks.json: %v", err)
	}
	// Response check
	{
		exampleRes := []*armoperationalinsights.IntelligencePack{
			{
				Name:        to.Ptr("CapacityPerformance"),
				DisplayName: to.Ptr("Capacity and Performance"),
				Enabled:     to.Ptr(false),
			},
			{
				Name:        to.Ptr("AzureWebAppsAnalytics"),
				DisplayName: to.Ptr("Azure Web Apps Analytics (Preview)"),
				Enabled:     to.Ptr(false),
			},
			{
				Name:        to.Ptr("Security"),
				DisplayName: to.Ptr("Security and Audit"),
				Enabled:     to.Ptr(false),
			},
			{
				Name:        to.Ptr("Updates"),
				DisplayName: to.Ptr("Update Management"),
				Enabled:     to.Ptr(false),
			},
			{
				Name:        to.Ptr("AntiMalware"),
				DisplayName: to.Ptr("Antimalware Assessment"),
				Enabled:     to.Ptr(false),
			},
			{
				Name:        to.Ptr("LogManagement"),
				DisplayName: to.Ptr("Log Management"),
				Enabled:     to.Ptr(true),
			},
			{
				Name:        to.Ptr("ChangeTracking"),
				DisplayName: to.Ptr("Change Tracking"),
				Enabled:     to.Ptr(true),
			},
			{
				Name:        to.Ptr("SQLAssessment"),
				DisplayName: to.Ptr("SQL Assessment"),
				Enabled:     to.Ptr(false),
			},
			{
				Name:        to.Ptr("SCOMAssessment"),
				DisplayName: to.Ptr("System Center Operations Manager Assessment (Preview)"),
				Enabled:     to.Ptr(false),
			},
			{
				Name:        to.Ptr("ServiceDesk"),
				DisplayName: to.Ptr("IT Service Management Connector(Preview)"),
				Enabled:     to.Ptr(false),
			},
			{
				Name:        to.Ptr("ADAssessment"),
				DisplayName: to.Ptr("AD Assessment"),
				Enabled:     to.Ptr(false),
			},
			{
				Name:        to.Ptr("AlertManagement"),
				DisplayName: to.Ptr("Alert Management"),
				Enabled:     to.Ptr(false),
			},
			{
				Name:        to.Ptr("AzureAutomation"),
				DisplayName: to.Ptr("Azure Automation"),
				Enabled:     to.Ptr(false),
			},
			{
				Name:        to.Ptr("WireData"),
				DisplayName: to.Ptr("Wire Data"),
				Enabled:     to.Ptr(false),
			},
			{
				Name:        to.Ptr("SiteRecovery"),
				DisplayName: to.Ptr("Azure Site Recovery"),
				Enabled:     to.Ptr(true),
			},
			{
				Name:        to.Ptr("Backup"),
				DisplayName: to.Ptr("Backup"),
				Enabled:     to.Ptr(false),
			},
			{
				Name:        to.Ptr("SurfaceHub"),
				DisplayName: to.Ptr("Surface Hub"),
				Enabled:     to.Ptr(false),
			},
			{
				Name:        to.Ptr("NetworkMonitoring"),
				DisplayName: to.Ptr("Network Performance Monitor"),
				Enabled:     to.Ptr(false),
			},
			{
				Name:        to.Ptr("Containers"),
				DisplayName: to.Ptr("Container Monitoring Solution"),
				Enabled:     to.Ptr(false),
			},
			{
				Name:        to.Ptr("ServiceMap"),
				DisplayName: to.Ptr("Service Map"),
				Enabled:     to.Ptr(false),
			},
			{
				Name:        to.Ptr("AzureNetworking"),
				DisplayName: to.Ptr("Azure Networking Analytics (Deprecated)"),
				Enabled:     to.Ptr(false),
			},
			{
				Name:        to.Ptr("ADReplication"),
				DisplayName: to.Ptr("AD Replication Status"),
				Enabled:     to.Ptr(false),
			},
			{
				Name:        to.Ptr("Office365"),
				DisplayName: to.Ptr("Office 365 (Preview)"),
				Enabled:     to.Ptr(false),
			},
			{
				Name:        to.Ptr("CompatibilityAssessment"),
				DisplayName: to.Ptr("Upgrade Readiness"),
				Enabled:     to.Ptr(false),
			},
			{
				Name:        to.Ptr("KeyVault"),
				DisplayName: to.Ptr("Key Vault (Deprecated)"),
				Enabled:     to.Ptr(false),
			},
			{
				Name:        to.Ptr("ServiceFabric"),
				DisplayName: to.Ptr("Service Fabric"),
				Enabled:     to.Ptr(false),
			},
			{
				Name:        to.Ptr("DnsAnalytics"),
				DisplayName: to.Ptr("DNS Analytics (Preview)"),
				Enabled:     to.Ptr(false),
			},
			{
				Name:        to.Ptr("ApplicationInsights"),
				DisplayName: to.Ptr("Application Insights (Preview)"),
				Enabled:     to.Ptr(false),
			},
			{
				Name:        to.Ptr("WireData2"),
				DisplayName: to.Ptr("Wire Data 2.0"),
				Enabled:     to.Ptr(false),
			},
			{
				Name:        to.Ptr("WaaSUpdateInsights"),
				DisplayName: to.Ptr("Update Compliance (Preview)"),
				Enabled:     to.Ptr(false),
			},
			{
				Name:        to.Ptr("AgentHealthAssessment"),
				DisplayName: to.Ptr("Agent Health "),
				Enabled:     to.Ptr(false),
			},
			{
				Name:        to.Ptr("AzureActivity"),
				DisplayName: to.Ptr("Activity Log Analytics"),
				Enabled:     to.Ptr(false),
			},
			{
				Name:        to.Ptr("HDInsight"),
				DisplayName: to.Ptr("HDInsight HBase Monitoring (Preview)"),
				Enabled:     to.Ptr(false),
			},
			{
				Name:        to.Ptr("HDInsightKafka"),
				DisplayName: to.Ptr("HDInsight Kafka Monitoring"),
				Enabled:     to.Ptr(false),
			},
			{
				Name:        to.Ptr("HDInsightSpark"),
				DisplayName: to.Ptr("HDInsight Spark Monitoring"),
				Enabled:     to.Ptr(false),
			},
			{
				Name:        to.Ptr("VMware"),
				DisplayName: to.Ptr("VMware (Preview)"),
				Enabled:     to.Ptr(false),
			},
			{
				Name:        to.Ptr("SecurityCenterFree"),
				DisplayName: to.Ptr("Security Center Free � for Azure Resources only"),
				Enabled:     to.Ptr(false),
			},
			{
				Name:        to.Ptr("LogicAppsManagement"),
				DisplayName: to.Ptr("Logic Apps Management"),
				Enabled:     to.Ptr(false),
			},
			{
				Name:        to.Ptr("LogicAppB2B"),
				DisplayName: to.Ptr("Logic Apps B2B"),
				Enabled:     to.Ptr(false),
			},
			{
				Name:        to.Ptr("AzureSQLAnalytics"),
				DisplayName: to.Ptr("Azure SQL Analytics (Preview)"),
				Enabled:     to.Ptr(false),
			},
			{
				Name:        to.Ptr("KeyVaultAnalytics"),
				DisplayName: to.Ptr("Key Vault Analytics"),
				Enabled:     to.Ptr(false),
			},
			{
				Name:        to.Ptr("AzureNSGAnalytics"),
				DisplayName: to.Ptr("Azure Network Security Group Analytics"),
				Enabled:     to.Ptr(false),
			},
			{
				Name:        to.Ptr("AzureAppGatewayAnalytics"),
				DisplayName: to.Ptr("Azure Application Gateway Analytics"),
				Enabled:     to.Ptr(false),
			},
			{
				Name:        to.Ptr("DeviceHealthProd"),
				DisplayName: to.Ptr("Device Health (Preview)"),
				Enabled:     to.Ptr(false),
			},
			{
				Name:        to.Ptr("WindowsDefenderATP"),
				DisplayName: to.Ptr("Windows Defender ATP"),
				Enabled:     to.Ptr(false),
			},
			{
				Name:        to.Ptr("ProcessInvestigator"),
				DisplayName: to.Ptr("ProcessInvestigator"),
				Enabled:     to.Ptr(false),
			}}
		if !reflect.DeepEqual(exampleRes, res.IntelligencePackArray) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.IntelligencePackArray)
			t.Fatalf("Mock response is not equal to example response for example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2020-08-01/examples/WorkspacesListIntelligencePacks.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLinkedServices_CreateOrUpdate(t *testing.T) {
	// From example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2020-08-01/examples/LinkedServicesCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"LinkedServicesCreate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armoperationalinsights.NewLinkedServicesClient("00000000-0000-0000-0000-00000000000", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"mms-eus",
		"TestLinkWS",
		"Cluster",
		armoperationalinsights.LinkedService{
			Properties: &armoperationalinsights.LinkedServiceProperties{
				WriteAccessResourceID: to.Ptr("/subscriptions/00000000-0000-0000-0000-00000000000/resourceGroups/mms-eus/providers/Microsoft.OperationalInsights/clusters/testcluster"),
			},
		},
		&armoperationalinsights.LinkedServicesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2020-08-01/examples/LinkedServicesCreate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2020-08-01/examples/LinkedServicesCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armoperationalinsights.LinkedService{
			Name: to.Ptr("TestLinkWS/Cluster"),
			Type: to.Ptr("Microsoft.OperationalInsights/workspaces/linkedServices"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-00000000000/resourcegroups/mms-eus/providers/microsoft.operationalinsights/workspaces/testlinkws/linkedservices/cluster"),
			Properties: &armoperationalinsights.LinkedServiceProperties{
				ProvisioningState:     to.Ptr(armoperationalinsights.LinkedServiceEntityStatusSucceeded),
				WriteAccessResourceID: to.Ptr("/subscriptions/00000000-0000-0000-0000-00000000000/resourceGroups/mms-eus/providers/Microsoft.OperationalInsights/clusters/testcluster"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.LinkedService) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.LinkedService)
			t.Fatalf("Mock response is not equal to example response for example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2020-08-01/examples/LinkedServicesCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLinkedServices_Delete(t *testing.T) {
	// From example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2020-08-01/examples/LinkedServicesDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"LinkedServicesDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armoperationalinsights.NewLinkedServicesClient("00000000-0000-0000-0000-00000000000", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"TestLinkWS",
		"Cluster",
		&armoperationalinsights.LinkedServicesClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2020-08-01/examples/LinkedServicesDelete.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2020-08-01/examples/LinkedServicesDelete.json: %v", err)
	}
	// Response check
	{
		exampleRes := armoperationalinsights.LinkedService{
			Name: to.Ptr("TestLinkWS/Cluster"),
			Type: to.Ptr("Microsoft.OperationalInsights/workspaces/linkedServices"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-00000000000/resourcegroups/mms-eus/providers/microsoft.operationalinsights/workspaces/testlinkws/linkedservices/cluster"),
			Properties: &armoperationalinsights.LinkedServiceProperties{
				ProvisioningState:     to.Ptr(armoperationalinsights.LinkedServiceEntityStatusSucceeded),
				WriteAccessResourceID: to.Ptr("/subscriptions/00000000-0000-0000-0000-00000000000/resourceGroups/mms-eus/providers/Microsoft.OperationalInsights/clusters/testcluster"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.LinkedService) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.LinkedService)
			t.Fatalf("Mock response is not equal to example response for example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2020-08-01/examples/LinkedServicesDelete.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLinkedServices_Get(t *testing.T) {
	// From example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2020-08-01/examples/LinkedServicesGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"LinkedServicesGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armoperationalinsights.NewLinkedServicesClient("00000000-0000-0000-0000-00000000000", cred, &options)
	res, err := client.Get(ctx,
		"mms-eus",
		"TestLinkWS",
		"Cluster",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2020-08-01/examples/LinkedServicesGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armoperationalinsights.LinkedService{
			Name: to.Ptr("TestLinkWS/Cluster"),
			Type: to.Ptr("Microsoft.OperationalInsights/workspaces/linkedServices"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourcegroups/mms-eus/providers/microsoft.operationalinsights/workspaces/testlinkws/linkedservices/cluster"),
			Properties: &armoperationalinsights.LinkedServiceProperties{
				ProvisioningState:     to.Ptr(armoperationalinsights.LinkedServiceEntityStatusSucceeded),
				WriteAccessResourceID: to.Ptr("/subscriptions/00000000-0000-0000-0000-00000000000/resourceGroups/mms-eus/providers/Microsoft.OperationalInsights/clusters/testcluster"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.LinkedService) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.LinkedService)
			t.Fatalf("Mock response is not equal to example response for example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2020-08-01/examples/LinkedServicesGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLinkedServices_ListByWorkspace(t *testing.T) {
	// From example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2020-08-01/examples/LinkedServicesListByWorkspace.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"LinkedServicesListByWorkspace"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armoperationalinsights.NewLinkedServicesClient("00000000-0000-0000-0000-00000000000", cred, &options)
	pager := client.ListByWorkspace("mms-eus",
		"TestLinkWS",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2020-08-01/examples/LinkedServicesListByWorkspace.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armoperationalinsights.LinkedServiceListResult{
			Value: []*armoperationalinsights.LinkedService{
				{
					Name: to.Ptr("TestLinkWS/Automation"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/linkedServices"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourcegroups/mms-eus/providers/microsoft.operationalinsights/workspaces/testlinkws/linkedservices/automation"),
					Properties: &armoperationalinsights.LinkedServiceProperties{
						ProvisioningState: to.Ptr(armoperationalinsights.LinkedServiceEntityStatusSucceeded),
						ResourceID:        to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/mms-eus/providers/Microsoft.Automation/automationAccounts/TestAccount"),
					},
				},
				{
					Name: to.Ptr("TestLinkWS/Cluster"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/linkedServices"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourcegroups/mms-eus/providers/microsoft.operationalinsights/workspaces/testlinkws/linkedservices/cluster"),
					Properties: &armoperationalinsights.LinkedServiceProperties{
						ProvisioningState:     to.Ptr(armoperationalinsights.LinkedServiceEntityStatusSucceeded),
						WriteAccessResourceID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/mms-eus/providers/Microsoft.OperationalInsights/clusters/TestCluster"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.LinkedServiceListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.LinkedServiceListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2020-08-01/examples/LinkedServicesListByWorkspace.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLinkedStorageAccounts_CreateOrUpdate(t *testing.T) {
	// From example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2020-08-01/examples/LinkedStorageAccountsCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"LinkedStorageAccountsCreate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armoperationalinsights.NewLinkedStorageAccountsClient("00000000-0000-0000-0000-00000000000", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"mms-eus",
		"testLinkStorageAccountsWS",
		armoperationalinsights.DataSourceTypeCustomLogs,
		armoperationalinsights.LinkedStorageAccountsResource{
			Properties: &armoperationalinsights.LinkedStorageAccountsProperties{
				StorageAccountIDs: []*string{
					to.Ptr("/subscriptions/00000000-0000-0000-0000-00000000000/resourceGroups/mms-eus/providers/Microsoft.Storage/storageAccounts/testStorageA"),
					to.Ptr("/subscriptions/00000000-0000-0000-0000-00000000000/resourceGroups/mms-eus/providers/Microsoft.Storage/storageAccounts/testStorageB")},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2020-08-01/examples/LinkedStorageAccountsCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armoperationalinsights.LinkedStorageAccountsResource{
			Name: to.Ptr("CustomLogs"),
			Type: to.Ptr("Microsoft.OperationalInsights/workspaces/linkedStorageAccounts"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-00000000000/resourcegroups/mms-eus/providers/microsoft.operationalinsights/workspaces/testLinkStorageAccountsWS/linkedStorageAccounts/CustomLogs"),
			Properties: &armoperationalinsights.LinkedStorageAccountsProperties{
				DataSourceType: to.Ptr(armoperationalinsights.DataSourceTypeCustomLogs),
				StorageAccountIDs: []*string{
					to.Ptr("/subscriptions/00000000-0000-0000-0000-00000000000/resourceGroups/mms-eus/providers/Microsoft.Storage/storageAccounts/testStorageA"),
					to.Ptr("/subscriptions/00000000-0000-0000-0000-00000000000/resourceGroups/mms-eus/providers/Microsoft.Storage/storageAccounts/testStorageB")},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.LinkedStorageAccountsResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.LinkedStorageAccountsResource)
			t.Fatalf("Mock response is not equal to example response for example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2020-08-01/examples/LinkedStorageAccountsCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLinkedStorageAccounts_Delete(t *testing.T) {
	// From example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2020-08-01/examples/LinkedStorageAccountsDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"LinkedStorageAccountsDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armoperationalinsights.NewLinkedStorageAccountsClient("00000000-0000-0000-0000-00000000000", cred, &options)
	_, err := client.Delete(ctx,
		"mms-eus",
		"testLinkStorageAccountsWS",
		armoperationalinsights.DataSourceTypeCustomLogs,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2020-08-01/examples/LinkedStorageAccountsDelete.json: %v", err)
	}
}

func TestLinkedStorageAccounts_Get(t *testing.T) {
	// From example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2020-08-01/examples/LinkedStorageAccountsGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"LinkedStorageAccountsGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armoperationalinsights.NewLinkedStorageAccountsClient("00000000-0000-0000-0000-00000000000", cred, &options)
	res, err := client.Get(ctx,
		"mms-eus",
		"testLinkStorageAccountsWS",
		armoperationalinsights.DataSourceTypeCustomLogs,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2020-08-01/examples/LinkedStorageAccountsGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armoperationalinsights.LinkedStorageAccountsResource{
			Name: to.Ptr("CustomLogs"),
			Type: to.Ptr("Microsoft.OperationalInsights/workspaces/linkedStorageAccounts"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourcegroups/mms-eus/providers/microsoft.operationalinsights/workspaces/testLinkStorageAccountsWS/linkedStorageAccounts/CustomLogs"),
			Properties: &armoperationalinsights.LinkedStorageAccountsProperties{
				DataSourceType: to.Ptr(armoperationalinsights.DataSourceTypeCustomLogs),
				StorageAccountIDs: []*string{
					to.Ptr("/subscriptions/00000000-0000-0000-0000-00000000000/resourceGroups/mms-eus/providers/Microsoft.Storage/storageAccounts/testStorageA"),
					to.Ptr("/subscriptions/00000000-0000-0000-0000-00000000000/resourceGroups/mms-eus/providers/Microsoft.Storage/storageAccounts/testStorageB")},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.LinkedStorageAccountsResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.LinkedStorageAccountsResource)
			t.Fatalf("Mock response is not equal to example response for example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2020-08-01/examples/LinkedStorageAccountsGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLinkedStorageAccounts_ListByWorkspace(t *testing.T) {
	// From example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2020-08-01/examples/LinkedStorageAccountsListByWorkspace.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets list of linked storage accounts on a workspace."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armoperationalinsights.NewLinkedStorageAccountsClient("00000000-0000-0000-0000-00000000000", cred, &options)
	pager := client.ListByWorkspace("mms-eus",
		"testLinkStorageAccountsWS",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2020-08-01/examples/LinkedStorageAccountsListByWorkspace.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armoperationalinsights.LinkedStorageAccountsListResult{
			Value: []*armoperationalinsights.LinkedStorageAccountsResource{
				{
					Name: to.Ptr("CustomLogs"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/linkedStorageAccounts"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourcegroups/mms-eus/providers/microsoft.operationalinsights/workspaces/testLinkStorageAccountsWS/linkedStorageAccounts/CustomLogs"),
					Properties: &armoperationalinsights.LinkedStorageAccountsProperties{
						DataSourceType: to.Ptr(armoperationalinsights.DataSourceTypeCustomLogs),
						StorageAccountIDs: []*string{
							to.Ptr("/subscriptions/00000000-0000-0000-0000-00000000000/resourceGroups/mms-eus/providers/Microsoft.Storage/storageAccounts/testStorageA"),
							to.Ptr("/subscriptions/00000000-0000-0000-0000-00000000000/resourceGroups/mms-eus/providers/Microsoft.Storage/storageAccounts/testStorageB")},
					},
				},
				{
					Name: to.Ptr("AzureWatson"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/linkedStorageAccounts"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourcegroups/mms-eus/providers/microsoft.operationalinsights/workspaces/testLinkStorageAccountsWS/linkedStorageAccounts/AzureWatson"),
					Properties: &armoperationalinsights.LinkedStorageAccountsProperties{
						DataSourceType: to.Ptr(armoperationalinsights.DataSourceTypeAzureWatson),
						StorageAccountIDs: []*string{
							to.Ptr("/subscriptions/00000000-0000-0000-0000-00000000000/resourceGroups/mms-eus/providers/Microsoft.Storage/storageAccounts/testStorageA"),
							to.Ptr("/subscriptions/00000000-0000-0000-0000-00000000000/resourceGroups/mms-eus/providers/Microsoft.Storage/storageAccounts/testStorageC")},
					},
				},
				{
					Name: to.Ptr("Query"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/linkedStorageAccounts"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourcegroups/mms-eus/providers/microsoft.operationalinsights/workspaces/testLinkStorageAccountsWS/linkedStorageAccounts/Query"),
					Properties: &armoperationalinsights.LinkedStorageAccountsProperties{
						DataSourceType: to.Ptr(armoperationalinsights.DataSourceTypeQuery),
						StorageAccountIDs: []*string{
							to.Ptr("/subscriptions/00000000-0000-0000-0000-00000000000/resourceGroups/mms-eus/providers/Microsoft.Storage/storageAccounts/testStorageA"),
							to.Ptr("/subscriptions/00000000-0000-0000-0000-00000000000/resourceGroups/mms-eus/providers/Microsoft.Storage/storageAccounts/testStorageC")},
					},
				},
				{
					Name: to.Ptr("Alerts"),
					Type: to.Ptr("Microsoft.OperationalInsights/workspaces/linkedStorageAccounts"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourcegroups/mms-eus/providers/microsoft.operationalinsights/workspaces/testLinkStorageAccountsWS/linkedStorageAccounts/Alerts"),
					Properties: &armoperationalinsights.LinkedStorageAccountsProperties{
						DataSourceType: to.Ptr(armoperationalinsights.DataSourceTypeAlerts),
						StorageAccountIDs: []*string{
							to.Ptr("/subscriptions/00000000-0000-0000-0000-00000000000/resourceGroups/mms-eus/providers/Microsoft.Storage/storageAccounts/testStorageA"),
							to.Ptr("/subscriptions/00000000-0000-0000-0000-00000000000/resourceGroups/mms-eus/providers/Microsoft.Storage/storageAccounts/testStorageC")},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.LinkedStorageAccountsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.LinkedStorageAccountsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2020-08-01/examples/LinkedStorageAccountsListByWorkspace.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestManagementGroups_List(t *testing.T) {
	// From example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2020-08-01/examples/WorkspacesListManagementGroups.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WorkspacesListManagementGroups"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armoperationalinsights.NewManagementGroupsClient("00000000-0000-0000-0000-00000000000", cred, &options)
	pager := client.List("rg1",
		"TestLinkWS",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2020-08-01/examples/WorkspacesListManagementGroups.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armoperationalinsights.WorkspaceListManagementGroupsResult{
			Value: []*armoperationalinsights.ManagementGroup{},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.WorkspaceListManagementGroupsResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.WorkspaceListManagementGroupsResult)
			t.Fatalf("Mock response is not equal to example response for example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2020-08-01/examples/WorkspacesListManagementGroups.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOperationStatuses_Get(t *testing.T) {
	// From example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2020-08-01/examples/OperationStatusesGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get specific operation status"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armoperationalinsights.NewOperationStatusesClient("613192d7-503f-477a-9cfe-4efc3ee2bd60", cred, &options)
	res, err := client.Get(ctx,
		"West US",
		"713192d7-503f-477a-9cfe-4efc3ee2bd11",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2020-08-01/examples/OperationStatusesGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armoperationalinsights.OperationStatus{
			Name:      to.Ptr("713192d7-503f-477a-9cfe-4efc3ee2bd11"),
			EndTime:   to.Ptr("2017-01-01T16:13:13.933Z"),
			ID:        to.Ptr("/subscriptions/613192d7-503f-477a-9cfe-4efc3ee2bd60/locations/westus/operationStatuses/713192d7-503f-477a-9cfe-4efc3ee2bd11"),
			StartTime: to.Ptr("2017-01-01T13:13:13.933Z"),
			Status:    to.Ptr("Succeeded"),
		}
		if !reflect.DeepEqual(exampleRes, res.OperationStatus) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.OperationStatus)
			t.Fatalf("Mock response is not equal to example response for example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2020-08-01/examples/OperationStatusesGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSharedKeys_GetSharedKeys(t *testing.T) {
	// From example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2020-08-01/examples/WorkspacesGetSharedKeys.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SharedKeysList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armoperationalinsights.NewSharedKeysClient("00000000-0000-0000-0000-00000000000", cred, &options)
	res, err := client.GetSharedKeys(ctx,
		"rg1",
		"TestLinkWS",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2020-08-01/examples/WorkspacesGetSharedKeys.json: %v", err)
	}
	// Response check
	{
		exampleRes := armoperationalinsights.SharedKeys{
			PrimarySharedKey:   to.Ptr("<primarySharedKey>"),
			SecondarySharedKey: to.Ptr("<secondarySharedKey>"),
		}
		if !reflect.DeepEqual(exampleRes, res.SharedKeys) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SharedKeys)
			t.Fatalf("Mock response is not equal to example response for example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2020-08-01/examples/WorkspacesGetSharedKeys.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSharedKeys_Regenerate(t *testing.T) {
	// From example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2020-08-01/examples/WorkspacesRegenerateSharedKeys.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RegenerateSharedKeys"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armoperationalinsights.NewSharedKeysClient("00000000-0000-0000-0000-00000000000", cred, &options)
	res, err := client.Regenerate(ctx,
		"rg1",
		"workspace1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2020-08-01/examples/WorkspacesRegenerateSharedKeys.json: %v", err)
	}
	// Response check
	{
		exampleRes := armoperationalinsights.SharedKeys{
			PrimarySharedKey:   to.Ptr("<primarySharedKey>"),
			SecondarySharedKey: to.Ptr("<secondarySharedKey>"),
		}
		if !reflect.DeepEqual(exampleRes, res.SharedKeys) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SharedKeys)
			t.Fatalf("Mock response is not equal to example response for example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2020-08-01/examples/WorkspacesRegenerateSharedKeys.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestUsages_List(t *testing.T) {
	// From example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2020-08-01/examples/WorkspacesListUsages.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"UsagesList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armoperationalinsights.NewUsagesClient("00000000-0000-0000-0000-00000000000", cred, &options)
	pager := client.List("rg1",
		"TestLinkWS",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2020-08-01/examples/WorkspacesListUsages.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armoperationalinsights.WorkspaceListUsagesResult{
			Value: []*armoperationalinsights.UsageMetric{
				{
					Name: &armoperationalinsights.MetricName{
						LocalizedValue: to.Ptr("Data Analyzed"),
						Value:          to.Ptr("DataAnalyzed"),
					},
					CurrentValue:  to.Ptr[float64](0),
					Limit:         to.Ptr[float64](524288000),
					NextResetTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-10-03T00:00:00Z"); return t }()),
					QuotaPeriod:   to.Ptr("P1D"),
					Unit:          to.Ptr("Bytes"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.WorkspaceListUsagesResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.WorkspaceListUsagesResult)
			t.Fatalf("Mock response is not equal to example response for example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2020-08-01/examples/WorkspacesListUsages.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestStorageInsightConfigs_CreateOrUpdate(t *testing.T) {
	// From example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2020-08-01/examples/StorageInsightsCreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"StorageInsightsCreate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armoperationalinsights.NewStorageInsightConfigsClient("00000000-0000-0000-0000-00000000000", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"OIAutoRest5123",
		"aztest5048",
		"AzTestSI1110",
		armoperationalinsights.StorageInsight{
			Properties: &armoperationalinsights.StorageInsightProperties{
				Containers: []*string{
					to.Ptr("wad-iis-logfiles")},
				StorageAccount: &armoperationalinsights.StorageAccount{
					ID:  to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourcegroups/OIAutoRest6987/providers/microsoft.storage/storageaccounts/AzTestFakeSA9945"),
					Key: to.Ptr("1234"),
				},
				Tables: []*string{
					to.Ptr("WADWindowsEventLogsTable"),
					to.Ptr("LinuxSyslogVer2v0")},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2020-08-01/examples/StorageInsightsCreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armoperationalinsights.StorageInsight{
			Name: to.Ptr("AzTestSI1110"),
			Type: to.Ptr("Microsoft.OperationalInsights/workspaces/storageinsightconfigs"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourcegroups/oiautorest6987/providers/microsoft.operationalinsights/workspaces/aztest5048/storageinsightconfigs/AzTestSI1110"),
			Properties: &armoperationalinsights.StorageInsightProperties{
				Containers: []*string{
					to.Ptr("wad-iis-logfiles")},
				Status: &armoperationalinsights.StorageInsightStatus{
					State: to.Ptr(armoperationalinsights.StorageInsightStateOK),
				},
				StorageAccount: &armoperationalinsights.StorageAccount{
					ID:  to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourcegroups/OIAutoRest6987/providers/microsoft.storage/storageaccounts/AzTestFakeSA9945"),
					Key: to.Ptr("Storage Key"),
				},
				Tables: []*string{
					to.Ptr("WADWindowsEventLogsTable"),
					to.Ptr("LinuxSyslogVer2v0")},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.StorageInsight) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.StorageInsight)
			t.Fatalf("Mock response is not equal to example response for example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2020-08-01/examples/StorageInsightsCreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestStorageInsightConfigs_Get(t *testing.T) {
	// From example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2020-08-01/examples/StorageInsightsGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"StorageInsightsGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armoperationalinsights.NewStorageInsightConfigsClient("00000000-0000-0000-0000-00000000000", cred, &options)
	res, err := client.Get(ctx,
		"OIAutoRest5123",
		"aztest5048",
		"AzTestSI1110",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2020-08-01/examples/StorageInsightsGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armoperationalinsights.StorageInsight{
			Name: to.Ptr("AzTestSI1110"),
			Type: to.Ptr("Microsoft.OperationalInsights/workspaces/storageinsightconfigs"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourcegroups/oiautorest6987/providers/microsoft.operationalinsights/workspaces/aztest5048/storageinsightconfigs/AzTestSI1110"),
			Properties: &armoperationalinsights.StorageInsightProperties{
				Containers: []*string{
					to.Ptr("wad-iis-logfiles")},
				Status: &armoperationalinsights.StorageInsightStatus{
					State: to.Ptr(armoperationalinsights.StorageInsightStateOK),
				},
				StorageAccount: &armoperationalinsights.StorageAccount{
					ID:  to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000005/resourcegroups/OIAutoRest6987/providers/microsoft.storage/storageaccounts/AzTestFakeSA9945"),
					Key: to.Ptr("Storage Account Key"),
				},
				Tables: []*string{
					to.Ptr("WADWindowsEventLogsTable"),
					to.Ptr("LinuxSyslogVer2v0")},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.StorageInsight) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.StorageInsight)
			t.Fatalf("Mock response is not equal to example response for example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2020-08-01/examples/StorageInsightsGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestStorageInsightConfigs_Delete(t *testing.T) {
	// From example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2020-08-01/examples/StorageInsightsDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"StorageInsightsDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armoperationalinsights.NewStorageInsightConfigsClient("00000000-0000-0000-0000-00000000000", cred, &options)
	_, err := client.Delete(ctx,
		"OIAutoRest5123",
		"aztest5048",
		"AzTestSI1110",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2020-08-01/examples/StorageInsightsDelete.json: %v", err)
	}
}

func TestStorageInsightConfigs_ListByWorkspace(t *testing.T) {
	// From example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2020-08-01/examples/StorageInsightsListByWorkspace.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"StorageInsightsList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armoperationalinsights.NewStorageInsightConfigsClient("00000000-0000-0000-0000-00000000000", cred, &options)
	pager := client.ListByWorkspace("OIAutoRest5123",
		"aztest5048",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2020-08-01/examples/StorageInsightsListByWorkspace.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armoperationalinsights.StorageInsightListResult{}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.StorageInsightListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.StorageInsightListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2020-08-01/examples/StorageInsightsListByWorkspace.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSavedSearches_Delete(t *testing.T) {
	// From example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2020-08-01/examples/WorkspacesDeleteSavedSearches.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SavedSearchesDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armoperationalinsights.NewSavedSearchesClient("00000000-0000-0000-0000-00000000000", cred, &options)
	_, err := client.Delete(ctx,
		"TestRG",
		"TestWS",
		"00000000-0000-0000-0000-00000000000",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2020-08-01/examples/WorkspacesDeleteSavedSearches.json: %v", err)
	}
}

func TestSavedSearches_CreateOrUpdate(t *testing.T) {
	// From example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2020-08-01/examples/WorkspacesSavedSearchesCreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SavedSearchCreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armoperationalinsights.NewSavedSearchesClient("00000000-0000-0000-0000-00000000000", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"TestRG",
		"TestWS",
		"00000000-0000-0000-0000-00000000000",
		armoperationalinsights.SavedSearch{
			Properties: &armoperationalinsights.SavedSearchProperties{
				Category:           to.Ptr("Saved Search Test Category"),
				DisplayName:        to.Ptr("Create or Update Saved Search Test"),
				FunctionAlias:      to.Ptr("heartbeat_func"),
				FunctionParameters: to.Ptr("a:int=1"),
				Query:              to.Ptr("Heartbeat | summarize Count() by Computer | take a"),
				Tags: []*armoperationalinsights.Tag{
					{
						Name:  to.Ptr("Group"),
						Value: to.Ptr("Computer"),
					}},
				Version: to.Ptr[int64](2),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2020-08-01/examples/WorkspacesSavedSearchesCreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armoperationalinsights.SavedSearch{
			ID:   to.Ptr("subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/mms-eus/providers/Microsoft.OperationalInsights/workspaces/AtlantisDemo/savedSearches/test-new-saved-search-id-2015"),
			Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A15%3A41.0709875Z'\""),
			Properties: &armoperationalinsights.SavedSearchProperties{
				Category:           to.Ptr("Saved Search Test Category"),
				DisplayName:        to.Ptr("Create or Update Saved Search Test"),
				FunctionAlias:      to.Ptr("heartbeat_func"),
				FunctionParameters: to.Ptr("a:int=1"),
				Query:              to.Ptr("Heartbeat | summarize Count() by Computer | take a"),
				Version:            to.Ptr[int64](2),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SavedSearch) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SavedSearch)
			t.Fatalf("Mock response is not equal to example response for example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2020-08-01/examples/WorkspacesSavedSearchesCreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSavedSearches_Get(t *testing.T) {
	// From example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2020-08-01/examples/WorkspacesSavedSearchesGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SavedSearchesGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armoperationalinsights.NewSavedSearchesClient("00000000-0000-0000-0000-00000000000", cred, &options)
	res, err := client.Get(ctx,
		"TestRG",
		"TestWS",
		"00000000-0000-0000-0000-00000000000",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2020-08-01/examples/WorkspacesSavedSearchesGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armoperationalinsights.SavedSearch{
			ID:   to.Ptr("subscriptions/00000000-0000-0000-0000-000000000005/resourceGroups/mms-eus/providers/Microsoft.OperationalInsights/workspaces/AtlantisDemo/savedSearches/test-new-saved-search-id-2015"),
			Etag: to.Ptr("W/\"datetime'2017-10-02T23%3A15%3A41.0709875Z'\""),
			Properties: &armoperationalinsights.SavedSearchProperties{
				Category:           to.Ptr(" Saved Search Test Category"),
				DisplayName:        to.Ptr("Create or Update Saved Search Test"),
				FunctionAlias:      to.Ptr("heartbeat_func"),
				FunctionParameters: to.Ptr("a:int=1"),
				Query:              to.Ptr("* | measure Count() by Computer | take a"),
				Version:            to.Ptr[int64](1),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SavedSearch) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SavedSearch)
			t.Fatalf("Mock response is not equal to example response for example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2020-08-01/examples/WorkspacesSavedSearchesGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSavedSearches_ListByWorkspace(t *testing.T) {
	// From example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2020-08-01/examples/SavedSearchesListByWorkspace.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SavedSearchesList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armoperationalinsights.NewSavedSearchesClient("00000000-0000-0000-0000-00000000000", cred, &options)
	res, err := client.ListByWorkspace(ctx,
		"TestRG",
		"TestWS",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2020-08-01/examples/SavedSearchesListByWorkspace.json: %v", err)
	}
	// Response check
	{
		exampleRes := armoperationalinsights.SavedSearchesListResult{}
		if !reflect.DeepEqual(exampleRes, res.SavedSearchesListResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SavedSearchesListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2020-08-01/examples/SavedSearchesListByWorkspace.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAvailableServiceTiers_ListByWorkspace(t *testing.T) {
	// From example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2020-08-01/examples/WorkspacesAvailableServiceTiers.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AvailableServiceTiers"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armoperationalinsights.NewAvailableServiceTiersClient("00000000-0000-0000-0000-00000000000", cred, &options)
	res, err := client.ListByWorkspace(ctx,
		"rg1",
		"workspace1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2020-08-01/examples/WorkspacesAvailableServiceTiers.json: %v", err)
	}
	// Response check
	{
		exampleRes := []*armoperationalinsights.AvailableServiceTier{
			{
				DefaultRetention: to.Ptr[int64](7),
				Enabled:          to.Ptr(true),
				MaximumRetention: to.Ptr[int64](30),
				MinimumRetention: to.Ptr[int64](7),
				ServiceTier:      to.Ptr(armoperationalinsights.SKUNameEnumPerNode),
			},
			{
				CapacityReservationLevel: to.Ptr[int64](200),
				DefaultRetention:         to.Ptr[int64](30),
				Enabled:                  to.Ptr(true),
				LastSKUUpdate:            to.Ptr("2020-02-04T08:55:03.871Z"),
				MaximumRetention:         to.Ptr[int64](300),
				MinimumRetention:         to.Ptr[int64](30),
				ServiceTier:              to.Ptr(armoperationalinsights.SKUNameEnumCapacityReservation),
			}}
		if !reflect.DeepEqual(exampleRes, res.AvailableServiceTierArray) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AvailableServiceTierArray)
			t.Fatalf("Mock response is not equal to example response for example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2020-08-01/examples/WorkspacesAvailableServiceTiers.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestGateways_Delete(t *testing.T) {
	// From example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2020-08-01/examples/WorkspacesGatewaysDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DeleteGateways"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armoperationalinsights.NewGatewaysClient("00000000-0000-0000-0000-00000000000", cred, &options)
	_, err := client.Delete(ctx,
		"OIAutoRest5123",
		"aztest5048",
		"00000000-0000-0000-0000-00000000000",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2020-08-01/examples/WorkspacesGatewaysDelete.json: %v", err)
	}
}

func TestSchema_Get(t *testing.T) {
	// From example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2020-08-01/examples/SavedSearchesGetSchema.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WorkspacesGetSchema"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armoperationalinsights.NewSchemaClient("00000000-0000-0000-0000-00000000000", cred, &options)
	res, err := client.Get(ctx,
		"mms-eus",
		"atlantisdemo",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2020-08-01/examples/SavedSearchesGetSchema.json: %v", err)
	}
	// Response check
	{
		exampleRes := armoperationalinsights.SearchGetSchemaResponse{
			Metadata: &armoperationalinsights.SearchMetadata{
				Schema: &armoperationalinsights.SearchMetadataSchema{
					Name:    to.Ptr("CloudOps"),
					Version: to.Ptr[int32](2),
				},
				RequestTime: to.Ptr[int64](28),
				ResultType:  to.Ptr("schema"),
			},
			Value: []*armoperationalinsights.SearchSchemaValue{
				{
					Name:        to.Ptr("TenantId"),
					Type:        to.Ptr("Guid"),
					DisplayName: to.Ptr("TenantId"),
					Facet:       to.Ptr(false),
					Indexed:     to.Ptr(true),
					OwnerType: []*string{
						to.Ptr("Alert"),
						to.Ptr("AzureActivity"),
						to.Ptr("AzureAudit"),
						to.Ptr("AzureMetrics"),
						to.Ptr("ComputerGroup"),
						to.Ptr("ETWEvent"),
						to.Ptr("Event"),
						to.Ptr("ExtraHopDBLogin"),
						to.Ptr("ExtraHopDBTransaction"),
						to.Ptr("ExtraHopDNSResponse"),
						to.Ptr("ExtraHopFTPResponse"),
						to.Ptr("ExtraHopHTTPTransaction"),
						to.Ptr("ExtraHopSMTPMessage"),
						to.Ptr("ExtraHopSYNScanDetect"),
						to.Ptr("ExtraHopTCPOpen"),
						to.Ptr("Heartbeat"),
						to.Ptr("Operation"),
						to.Ptr("Perf"),
						to.Ptr("ReservedAzureCommonFields"),
						to.Ptr("ReservedCommonFields"),
						to.Ptr("ServiceFabricOperationalEvent"),
						to.Ptr("ServiceFabricReliableActorEvent"),
						to.Ptr("ServiceFabricReliableServiceEvent"),
						to.Ptr("Syslog"),
						to.Ptr("Usage"),
						to.Ptr("W3CIISLog")},
					Stored: to.Ptr(false),
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.SearchGetSchemaResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SearchGetSchemaResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2020-08-01/examples/SavedSearchesGetSchema.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkspacePurge_Purge(t *testing.T) {
	// From example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2020-08-01/examples/WorkspacesPurge.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WorkspacePurge"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armoperationalinsights.NewWorkspacePurgeClient("00000000-0000-0000-0000-00000000000", cred, &options)
	_, err := client.Purge(ctx,
		"OIAutoRest5123",
		"aztest5048",
		armoperationalinsights.WorkspacePurgeBody{
			Filters: []*armoperationalinsights.WorkspacePurgeBodyFilters{
				{
					Column:   to.Ptr("TimeGenerated"),
					Operator: to.Ptr(">"),
					Value:    "2017-09-01T00:00:00",
				}},
			Table: to.Ptr("Heartbeat"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2020-08-01/examples/WorkspacesPurge.json: %v", err)
	}
}

func TestWorkspacePurge_GetPurgeStatus(t *testing.T) {
	// From example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2020-08-01/examples/WorkspacesPurgeOperation.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WorkspacePurgeOperation"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armoperationalinsights.NewWorkspacePurgeClient("00000000-0000-0000-0000-00000000000", cred, &options)
	res, err := client.GetPurgeStatus(ctx,
		"OIAutoRest5123",
		"aztest5048",
		"purge-970318e7-b859-4edb-8903-83b1b54d0b74",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2020-08-01/examples/WorkspacesPurgeOperation.json: %v", err)
	}
	// Response check
	{
		exampleRes := armoperationalinsights.WorkspacePurgeStatusResponse{
			Status: to.Ptr(armoperationalinsights.PurgeStateCompleted),
		}
		if !reflect.DeepEqual(exampleRes, res.WorkspacePurgeStatusResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.WorkspacePurgeStatusResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2020-08-01/examples/WorkspacesPurgeOperation.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestClusters_ListByResourceGroup(t *testing.T) {
	// From example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2021-06-01/examples/ClustersListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ClustersGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armoperationalinsights.NewClustersClient("00000000-0000-0000-0000-00000000000", cred, &options)
	pager := client.ListByResourceGroup("oiautorest6685",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2021-06-01/examples/ClustersListByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armoperationalinsights.ClusterListResult{
			Value: []*armoperationalinsights.Cluster{
				{
					Name:     to.Ptr("TestResourceLock"),
					Type:     to.Ptr("Microsoft.OperationalInsights/clusters"),
					ID:       to.Ptr("/subscriptions/594038b5-1093-476e-a366-482775671c11/resourcegroups/calbot-rg/providers/microsoft.operationalinsights/clusters/testresourcelock"),
					Location: to.Ptr("eastus"),
					Identity: &armoperationalinsights.Identity{
						Type:        to.Ptr(armoperationalinsights.IdentityTypeSystemAssigned),
						PrincipalID: to.Ptr("356d057d-cba5-44dd-8a30-b2e547bc416b"),
						TenantID:    to.Ptr("72f988bf-86f1-41af-91ab-2d7cd011db47"),
					},
					Properties: &armoperationalinsights.ClusterProperties{
						ClusterID: to.Ptr("5b02755b-5bf4-430c-9487-45502a2a7e62"),
						KeyVaultProperties: &armoperationalinsights.KeyVaultProperties{
							KeyName:     to.Ptr("aztest2170cert"),
							KeyVaultURI: to.Ptr("https://aztest2170.vault.azure.net"),
							KeyVersion:  to.Ptr("654ft6c4e63845cbb50fd6fg51540429"),
						},
						ProvisioningState: to.Ptr(armoperationalinsights.ClusterEntityStatusSucceeded),
					},
					SKU: &armoperationalinsights.ClusterSKU{
						Name:     to.Ptr(armoperationalinsights.ClusterSKUNameEnumCapacityReservation),
						Capacity: to.Ptr(armoperationalinsights.CapacityTenHundred),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ClusterListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ClusterListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2021-06-01/examples/ClustersListByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestClusters_List(t *testing.T) {
	// From example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2021-06-01/examples/ClustersSubscriptionList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ClustersSubscriptionList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armoperationalinsights.NewClustersClient("00000000-0000-0000-0000-00000000000", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2021-06-01/examples/ClustersSubscriptionList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armoperationalinsights.ClusterListResult{
			Value: []*armoperationalinsights.Cluster{
				{
					Name:     to.Ptr("TestResourceLock"),
					Type:     to.Ptr("Microsoft.OperationalInsights/clusters"),
					ID:       to.Ptr("/subscriptions/594038b5-1093-476e-a366-482775671c11/resourcegroups/calbot-rg/providers/microsoft.operationalinsights/clusters/testresourcelock"),
					Location: to.Ptr("eastus"),
					Identity: &armoperationalinsights.Identity{
						Type:        to.Ptr(armoperationalinsights.IdentityTypeSystemAssigned),
						PrincipalID: to.Ptr("356d057d-cba5-44dd-8a30-b2e547bc416b"),
						TenantID:    to.Ptr("72f988bf-86f1-41af-91ab-2d7cd011db47"),
					},
					Properties: &armoperationalinsights.ClusterProperties{
						ClusterID: to.Ptr("5b02755b-5bf4-430c-9487-45502a2a7e62"),
						KeyVaultProperties: &armoperationalinsights.KeyVaultProperties{
							KeyName:     to.Ptr("aztest2170cert"),
							KeyVaultURI: to.Ptr("https://aztest2170.vault.azure.net"),
							KeyVersion:  to.Ptr("654ft6c4e63845cbb50fd6fg51540429"),
						},
						ProvisioningState: to.Ptr(armoperationalinsights.ClusterEntityStatusSucceeded),
					},
					SKU: &armoperationalinsights.ClusterSKU{
						Name:     to.Ptr(armoperationalinsights.ClusterSKUNameEnumCapacityReservation),
						Capacity: to.Ptr(armoperationalinsights.CapacityTenHundred),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ClusterListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ClusterListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2021-06-01/examples/ClustersSubscriptionList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestClusters_CreateOrUpdate(t *testing.T) {
	// From example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2021-06-01/examples/ClustersCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ClustersCreate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armoperationalinsights.NewClustersClient("00000000-0000-0000-0000-00000000000", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"oiautorest6685",
		"oiautorest6685",
		armoperationalinsights.Cluster{
			Location: to.Ptr("australiasoutheast"),
			Tags: map[string]*string{
				"tag1": to.Ptr("val1"),
			},
			SKU: &armoperationalinsights.ClusterSKU{
				Name:     to.Ptr(armoperationalinsights.ClusterSKUNameEnumCapacityReservation),
				Capacity: to.Ptr(armoperationalinsights.CapacityTenHundred),
			},
		},
		&armoperationalinsights.ClustersClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2021-06-01/examples/ClustersCreate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2021-06-01/examples/ClustersCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armoperationalinsights.Cluster{
			Name:     to.Ptr("oiautorest6685"),
			Type:     to.Ptr("Microsoft.OperationalInsights/clusters"),
			ID:       to.Ptr("/subscriptions/594038b5-1093-476e-a366-482775671c11/resourcegroups/oiautorest6685/providers/microsoft.operationalinsights/clusters/oiautorest6685"),
			Location: to.Ptr("australiasoutheast"),
			Identity: &armoperationalinsights.Identity{
				Type:        to.Ptr(armoperationalinsights.IdentityTypeSystemAssigned),
				PrincipalID: to.Ptr("356d057d-cba5-44dd-8a30-b2e547bc416b"),
				TenantID:    to.Ptr("72f988bf-86f1-41af-91ab-2d7cd011db47"),
			},
			Properties: &armoperationalinsights.ClusterProperties{
				AssociatedWorkspaces: []*armoperationalinsights.AssociatedWorkspace{},
				BillingType:          to.Ptr(armoperationalinsights.BillingTypeCluster),
				CapacityReservationProperties: &armoperationalinsights.CapacityReservationProperties{
					LastSKUUpdate: to.Ptr("Thu, 01 Jan 1970 00:00:00 GMT"),
					MinCapacity:   to.Ptr[int64](500),
				},
				ClusterID:   to.Ptr("1c3f2afc-9ec1-4e74-bfe8-022b83bcd7b1"),
				CreatedDate: to.Ptr("Mon, 13 Jan 2020 14:40:33 GMT"),
				KeyVaultProperties: &armoperationalinsights.KeyVaultProperties{
					KeyName:     to.Ptr("aztest2170cert"),
					KeyVaultURI: to.Ptr("https://aztest2170.vault.azure.net"),
					KeyVersion:  to.Ptr("654ft6c4e63845cbb50fd6fg51540429"),
				},
				LastModifiedDate:  to.Ptr("Sun, 04 Jan 2020 17:10:56 GMT"),
				ProvisioningState: to.Ptr(armoperationalinsights.ClusterEntityStatusSucceeded),
			},
			SKU: &armoperationalinsights.ClusterSKU{
				Name:     to.Ptr(armoperationalinsights.ClusterSKUNameEnumCapacityReservation),
				Capacity: to.Ptr(armoperationalinsights.CapacityTenHundred),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Cluster) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Cluster)
			t.Fatalf("Mock response is not equal to example response for example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2021-06-01/examples/ClustersCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestClusters_Delete(t *testing.T) {
	// From example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2021-06-01/examples/ClustersDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ClustersDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armoperationalinsights.NewClustersClient("00000000-0000-0000-0000-00000000000", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"oiautorest6685",
		"oiautorest6685",
		&armoperationalinsights.ClustersClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2021-06-01/examples/ClustersDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2021-06-01/examples/ClustersDelete.json: %v", err)
	}
}

func TestClusters_Get(t *testing.T) {
	// From example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2021-06-01/examples/ClustersGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ClustersGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armoperationalinsights.NewClustersClient("00000000-0000-0000-0000-00000000000", cred, &options)
	res, err := client.Get(ctx,
		"oiautorest6685",
		"oiautorest6685",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2021-06-01/examples/ClustersGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armoperationalinsights.Cluster{}
		if !reflect.DeepEqual(exampleRes, res.Cluster) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Cluster)
			t.Fatalf("Mock response is not equal to example response for example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2021-06-01/examples/ClustersGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestClusters_Update(t *testing.T) {
	// From example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2021-06-01/examples/ClustersUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ClustersPatch"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armoperationalinsights.NewClustersClient("00000000-0000-0000-0000-00000000000", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"oiautorest6685",
		"oiautorest6685",
		armoperationalinsights.ClusterPatch{
			Identity: &armoperationalinsights.Identity{
				Type: to.Ptr(armoperationalinsights.IdentityTypeUserAssigned),
				UserAssignedIdentities: map[string]*armoperationalinsights.UserIdentityProperties{
					"/subscriptions/00000000-0000-0000-0000-00000000000/resourcegroups/oiautorest6685/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myidentity": {},
				},
			},
			Properties: &armoperationalinsights.ClusterPatchProperties{
				KeyVaultProperties: &armoperationalinsights.KeyVaultProperties{
					KeyName:     to.Ptr("aztest2170cert"),
					KeyRsaSize:  to.Ptr[int32](1024),
					KeyVaultURI: to.Ptr("https://aztest2170.vault.azure.net"),
					KeyVersion:  to.Ptr("654ft6c4e63845cbb50fd6fg51540429"),
				},
			},
			SKU: &armoperationalinsights.ClusterSKU{
				Name:     to.Ptr(armoperationalinsights.ClusterSKUNameEnumCapacityReservation),
				Capacity: to.Ptr(armoperationalinsights.CapacityTenHundred),
			},
			Tags: map[string]*string{
				"tag1": to.Ptr("val1"),
			},
		},
		&armoperationalinsights.ClustersClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2021-06-01/examples/ClustersUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2021-06-01/examples/ClustersUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armoperationalinsights.Cluster{
			Location: to.Ptr("australiasoutheast"),
			Tags: map[string]*string{
				"tag1": to.Ptr("val1"),
			},
			Identity: &armoperationalinsights.Identity{
				Type:     to.Ptr(armoperationalinsights.IdentityTypeUserAssigned),
				TenantID: to.Ptr("72f999bf-acf1-41af-91ab-2d7cd011db47"),
				UserAssignedIdentities: map[string]*armoperationalinsights.UserIdentityProperties{
					"/subscriptions/00000000-0000-0000-0000-00000000000/resourcegroups/oiautorest6685/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myidentity": {
						ClientID:    to.Ptr("eb3a943d-6b12-48a6-b585-ac2316e15ab2"),
						PrincipalID: to.Ptr("b31776d4-ee80-4860-9433-ec0101be1891"),
					},
				},
			},
			Properties: &armoperationalinsights.ClusterProperties{
				AssociatedWorkspaces: []*armoperationalinsights.AssociatedWorkspace{
					{
						AssociateDate: to.Ptr("Tue, 07 Jul 2020 07:35:51 GMT"),
						ResourceID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-00000000000/resourcegroups/testRG/providers/microsoft.operationalinsights/workspaces/testWs1"),
						WorkspaceID:   to.Ptr("942bdefd-e6c9-411c-ac69-70ffad564363"),
						WorkspaceName: to.Ptr("testWs1"),
					},
					{
						AssociateDate: to.Ptr("Mon, 13 Jan 2020 16:03:39 GMT"),
						ResourceID:    to.Ptr("/subscriptions/00000000-0000-0000-0000-00000000000/resourcegroups/testRG/providers/microsoft.operationalinsights/workspaces/testWs2"),
						WorkspaceID:   to.Ptr("c7edb8f8-67f7-41f2-bddb-aecf22507e3f"),
						WorkspaceName: to.Ptr("testWs2"),
					}},
				BillingType: to.Ptr(armoperationalinsights.BillingTypeCluster),
				CapacityReservationProperties: &armoperationalinsights.CapacityReservationProperties{
					LastSKUUpdate: to.Ptr("Thu, 01 Jan 1970 00:00:00 GMT"),
					MinCapacity:   to.Ptr[int64](500),
				},
				ClusterID:   to.Ptr("1c3f2afc-9ec1-4e74-bfe8-022b83bcd7b1"),
				CreatedDate: to.Ptr("Mon, 13 Jan 2020 14:40:33 GMT"),
				KeyVaultProperties: &armoperationalinsights.KeyVaultProperties{
					KeyName:     to.Ptr("aztest2170cert"),
					KeyVaultURI: to.Ptr("https://aztest2170.vault.azure.net"),
					KeyVersion:  to.Ptr("654ft6c4e63845cbb50fd6fg51540429"),
				},
				LastModifiedDate:  to.Ptr("Sun, 04 Jan 2020 17:10:56 GMT"),
				ProvisioningState: to.Ptr(armoperationalinsights.ClusterEntityStatusSucceeded),
			},
			SKU: &armoperationalinsights.ClusterSKU{
				Name:     to.Ptr(armoperationalinsights.ClusterSKUNameEnumCapacityReservation),
				Capacity: to.Ptr(armoperationalinsights.CapacityTenHundred),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Cluster) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Cluster)
			t.Fatalf("Mock response is not equal to example response for example specification/operationalinsights/resource-manager/Microsoft.OperationalInsights/stable/2021-06-01/examples/ClustersUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
