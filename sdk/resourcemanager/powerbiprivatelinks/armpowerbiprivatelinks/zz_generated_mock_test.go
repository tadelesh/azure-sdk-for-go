//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armpowerbiprivatelinks

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"golang.org/x/net/http2"
)

var (
	ctx            context.Context
	subscriptionId string
	cred           azcore.TokenCredential
	err            error
	con            *arm.Connection
	mockHost       string
)

func TestOperations_List(t *testing.T) {
	// From example Lists all of the available Power BI RP operations
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewOperationsClient(con)
	pager := client.List(&OperationsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
	}
}

func TestPrivateLinkServicesForPowerBI_ListBySubscriptionId(t *testing.T) {
	// From example List private link resources in a subscription
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateLinkServicesForPowerBIClient(con,
		"a0020869-4d28-422a-89f4-c2413130d73c")
	_, err := client.ListBySubscriptionID(ctx,
		&PrivateLinkServicesForPowerBIListBySubscriptionIDOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestPrivateLinkServiceResourceOperationResults_Get(t *testing.T) {
	// From example Result of operation on private link resources
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateLinkServiceResourceOperationResultsClient(con,
		"a0020869-4d28-422a-89f4-c2413130d73c",
		"9a062a88-e463-4697-bef2-fe039df73a02")
	poller, err := client.BeginGet(ctx,
		&PrivateLinkServiceResourceOperationResultsBeginGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.AsyncOperationDetail.ID == nil {
		t.Fatal("AsyncOperationDetail.ID should not be nil!")
	}
}

func TestPrivateLinkServices_ListByResourceGroup(t *testing.T) {
	// From example List private link resources in a resource group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateLinkServicesClient(con,
		"a0020869-4d28-422a-89f4-c2413130d73c",
		"resourceGroup")
	_, err := client.ListByResourceGroup(ctx,
		&PrivateLinkServicesListByResourceGroupOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestPowerBIResources_ListByResourceName(t *testing.T) {
	// From example List private link resources in a Azure resource
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPowerBIResourcesClient(con,
		"a0020869-4d28-422a-89f4-c2413130d73c",
		"resourceGroup",
		"azureResourceName")
	_, err := client.ListByResourceName(ctx,
		&PowerBIResourcesListByResourceNameOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestPowerBIResources_Create(t *testing.T) {
	// From example Creates or updates private link service resource
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPowerBIResourcesClient(con,
		"a0020869-4d28-422a-89f4-c2413130d73c",
		"resourceGroup",
		"azureResourceName")
	res, err := client.Create(ctx,
		TenantResource{
			Location: to.StringPtr("global"),
			Properties: &TenantProperties{
				TenantID: to.StringPtr("ac2bc297-8a3e-46f3-972d-87c2b4ae6e2f"),
			},
			Tags: map[string]*string{
				"tag1": to.StringPtr("value1"),
				"tag2": to.StringPtr("value2"),
			},
		},
		&PowerBIResourcesCreateOptions{ClientTenantID: to.StringPtr("ac2bc297-8a3e-46f3-972d-87c2b4ae6e2f")})
	if err != nil {
		t.Fatal(err)
	}
	if res.TenantResource.ID == nil {
		t.Fatal("TenantResource.ID should not be nil!")
	}
}

func TestPowerBIResources_Update(t *testing.T) {
	// From example Updates private link service resource
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPowerBIResourcesClient(con,
		"a0020869-4d28-422a-89f4-c2413130d73c",
		"resourceGroup",
		"azureResourceName")
	res, err := client.Update(ctx,
		TenantResource{
			Location: to.StringPtr("global"),
			Properties: &TenantProperties{
				TenantID: to.StringPtr("ac2bc297-8a3e-46f3-972d-87c2b4ae6e2f"),
			},
			Tags: map[string]*string{
				"tag1": to.StringPtr("value1"),
				"tag2": to.StringPtr("value2"),
			},
		},
		&PowerBIResourcesUpdateOptions{ClientTenantID: to.StringPtr("ac2bc297-8a3e-46f3-972d-87c2b4ae6e2f")})
	if err != nil {
		t.Fatal(err)
	}
	if res.TenantResource.ID == nil {
		t.Fatal("TenantResource.ID should not be nil!")
	}
}

func TestPowerBIResources_Delete(t *testing.T) {
	// From example Deletes private link service resource
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPowerBIResourcesClient(con,
		"a0020869-4d28-422a-89f4-c2413130d73c",
		"resourceGroup",
		"azureResourceName")
	_, err := client.Delete(ctx,
		&PowerBIResourcesDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestPrivateLinkResources_ListByResource(t *testing.T) {
	// From example Gets private link resources in a Azure resource
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateLinkResourcesClient(con,
		"a0020869-4d28-422a-89f4-c2413130d73c",
		"resourceGroup",
		"azureResourceName")
	pager := client.ListByResource(&PrivateLinkResourcesListByResourceOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("PrivateLinkResource.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("PrivateLinkResource.ID should not be nil!")
			}
		}
	}
}

func TestPrivateLinkResources_Get(t *testing.T) {
	// From example Gets a private link resource
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateLinkResourcesClient(con,
		"a0020869-4d28-422a-89f4-c2413130d73c",
		"resourceGroup",
		"azureResourceName")
	res, err := client.Get(ctx,
		"tenant",
		&PrivateLinkResourcesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.PrivateLinkResource.ID == nil {
		t.Fatal("PrivateLinkResource.ID should not be nil!")
	}
}

func TestPrivateEndpointConnections_ListByResource(t *testing.T) {
	// From example Gets private endpoint connections
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateEndpointConnectionsClient(con,
		"a0020869-4d28-422a-89f4-c2413130d73c",
		nil,
		nil,
		nil)
	pager := client.ListByResource("resourceGroup",
		"azureResourceName",
		&PrivateEndpointConnectionsListByResourceOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("PrivateEndpointConnection.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("PrivateEndpointConnection.ID should not be nil!")
			}
		}
	}
}

func TestPrivateEndpointConnections_Get(t *testing.T) {
	// From example Gets private endpoint connection
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateEndpointConnectionsClient(con,
		"a0020869-4d28-422a-89f4-c2413130d73c",
		"resourceGroup",
		"azureResourceName",
		"myPrivateEndpointName")
	res, err := client.Get(ctx,
		&PrivateEndpointConnectionsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.PrivateEndpointConnection.ID == nil {
		t.Fatal("PrivateEndpointConnection.ID should not be nil!")
	}
}

func TestPrivateEndpointConnections_Create(t *testing.T) {
	// From example Updates status of private endpoint connection
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateEndpointConnectionsClient(con,
		"a0020869-4d28-422a-89f4-c2413130d73c",
		"resourceGroup",
		"azureResourceName",
		"myPrivateEndpointName")
	res, err := client.Create(ctx,
		PrivateEndpointConnection{
			Properties: &PrivateEndpointConnectionProperties{
				PrivateEndpoint: &PrivateEndpoint{
					ID: to.StringPtr("/subscriptions/a0020869-4d28-422a-89f4-c2413130d73c/resourceGroups/resourceGroup/providers/Microsoft.Network/privateEndpoints/myPrivateEndpointName"),
				},
				PrivateLinkServiceConnectionState: &ConnectionState{
					Description:     to.StringPtr(""),
					ActionsRequired: to.StringPtr("None"),
					Status:          PersistedConnectionStatusPending.ToPtr(),
				},
			},
		},
		&PrivateEndpointConnectionsCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.PrivateEndpointConnection.ID == nil {
		t.Fatal("PrivateEndpointConnection.ID should not be nil!")
	}
}

func TestPrivateEndpointConnections_Delete(t *testing.T) {
	// From example Deletes private endpoint connection
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateEndpointConnectionsClient(con,
		"a0020869-4d28-422a-89f4-c2413130d73c",
		"resourceGroup",
		"azureResourceName",
		"myPrivateEndpointName")
	poller, err := client.BeginDelete(ctx,
		&PrivateEndpointConnectionsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	subscriptionId = getEnv("SUBSCRIPTION_ID", "00000000-0000-0000-0000-000000000000")
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}
	cred, err = azidentity.NewEnvironmentCredential(&azidentity.EnvironmentCredentialOptions{AuthorityHost: mockHost, HTTPClient: client})
	if err != nil {
		panic(err)
	}

	con = arm.NewConnection(mockHost, cred, &arm.ConnectionOptions{
		Logging: policy.LogOptions{
			IncludeBody: true,
		},
		HTTPClient: client,
	})
}

func tearDown() {

}
