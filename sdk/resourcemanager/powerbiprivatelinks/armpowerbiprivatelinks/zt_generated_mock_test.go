//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armpowerbiprivatelinks_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/powerbiprivatelinks/armpowerbiprivatelinks"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestOperations_List(t *testing.T) {
	// From example specification/powerbiprivatelinks/resource-manager/Microsoft.PowerBI/stable/2020-06-01/examples/Operations_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Lists all of the available Power BI RP operations"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpowerbiprivatelinks.NewOperationsClient(cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/powerbiprivatelinks/resource-manager/Microsoft.PowerBI/stable/2020-06-01/examples/Operations_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armpowerbiprivatelinks.OperationListResult{
			Value: []*armpowerbiprivatelinks.Operation{
				{
					Name: to.Ptr("Microsoft.PowerBI/privateLinkServicesForPowerBI/read"),
					Display: &armpowerbiprivatelinks.OperationDisplay{
						Description: to.Ptr("Gets all resources for the tenant private link service"),
						Operation:   to.Ptr("Gets all resources"),
						Provider:    to.Ptr("Microsoft Power BI"),
						Resource:    to.Ptr("Private link service resources"),
					},
				},
				{
					Name: to.Ptr("Microsoft.PowerBI/privateLinkServicesForPowerBI/operationResults/operationId/read"),
					Display: &armpowerbiprivatelinks.OperationDisplay{
						Description: to.Ptr("Gets operation result of Private Link Service Resources for Power BI."),
						Operation:   to.Ptr("Get Operation Result"),
						Provider:    to.Ptr("Microsoft Power BI"),
						Resource:    to.Ptr("Private link service resources"),
					},
				},
				{
					Name: to.Ptr("Microsoft.PowerBI/privateLinkServicesForPowerBI/azureResourceName/read"),
					Display: &armpowerbiprivatelinks.OperationDisplay{
						Description: to.Ptr("Gets resources for the tenant private link service by name"),
						Operation:   to.Ptr("Gets resource by name"),
						Provider:    to.Ptr("Microsoft Power BI"),
						Resource:    to.Ptr("Private link service resources"),
					},
				},
				{
					Name: to.Ptr("Microsoft.PowerBI/privateLinkServicesForPowerBI/azureResourceName/write"),
					Display: &armpowerbiprivatelinks.OperationDisplay{
						Description: to.Ptr("Creates or updates resource for the tenant private link service"),
						Operation:   to.Ptr("Creates or updates private link service"),
						Provider:    to.Ptr("Microsoft Power BI"),
						Resource:    to.Ptr("Private link service resources"),
					},
				},
				{
					Name: to.Ptr("Microsoft.PowerBI/privateLinkServicesForPowerBI/azureResourceName/delete"),
					Display: &armpowerbiprivatelinks.OperationDisplay{
						Description: to.Ptr("Deletes resource for the tenant private link service"),
						Operation:   to.Ptr("Deletes private link service"),
						Provider:    to.Ptr("Microsoft Power BI"),
						Resource:    to.Ptr("Private link service resources"),
					},
				},
				{
					Name: to.Ptr("Microsoft.PowerBI/privateLinkServicesForPowerBI/azureResourceName/privateLinkResources/read"),
					Display: &armpowerbiprivatelinks.OperationDisplay{
						Description: to.Ptr("Gets private link resources in a Azure resource"),
						Operation:   to.Ptr("Gets private link resources by name"),
						Provider:    to.Ptr("Microsoft Power BI"),
						Resource:    to.Ptr("Private link service resources"),
					},
				},
				{
					Name: to.Ptr("Microsoft.PowerBI/privateLinkServicesForPowerBI/azureResourceName/privateEndpointConnectionProxies/privateEndpointName.privateEndpointGuid/read"),
					Display: &armpowerbiprivatelinks.OperationDisplay{
						Description: to.Ptr("Gets private endpoint connection proxy for the tenant"),
						Operation:   to.Ptr("Gets private endpoint connection proxy"),
						Provider:    to.Ptr("Microsoft Power BI"),
						Resource:    to.Ptr("Private link service resources"),
					},
				},
				{
					Name: to.Ptr("Microsoft.PowerBI/privateLinkServicesForPowerBI/azureResourceName/privateEndpointConnectionProxies/privateEndpointName.privateEndpointGuid/write"),
					Display: &armpowerbiprivatelinks.OperationDisplay{
						Description: to.Ptr("Creates or updates private endpoint connection proxy for the tenant"),
						Operation:   to.Ptr("Creates or updates private endpoint connection proxy"),
						Provider:    to.Ptr("Microsoft Power BI"),
						Resource:    to.Ptr("Private link service resources"),
					},
				},
				{
					Name: to.Ptr("Microsoft.PowerBI/privateLinkServicesForPowerBI/azureResourceName/privateEndpointConnectionProxies/privateEndpointName.privateEndpointGuid/delete"),
					Display: &armpowerbiprivatelinks.OperationDisplay{
						Description: to.Ptr("Deletes private endpoint connection proxy for the tenant"),
						Operation:   to.Ptr("Deletes private endpoint connection proxy"),
						Provider:    to.Ptr("Microsoft Power BI"),
						Resource:    to.Ptr("Private link service resources"),
					},
				},
				{
					Name: to.Ptr("Microsoft.PowerBI/privateLinkServicesForPowerBI/azureResourceName/privateEndpointConnectionProxies/privateEndpointName.privateEndpointGuid/validate/action"),
					Display: &armpowerbiprivatelinks.OperationDisplay{
						Description: to.Ptr("Validates a private endpoint connection proxy before create or update"),
						Operation:   to.Ptr("Validates a private endpoint connection proxy"),
						Provider:    to.Ptr("Microsoft Power BI"),
						Resource:    to.Ptr("Private link service resources"),
					},
				},
				{
					Name: to.Ptr("Microsoft.PowerBI/privateLinkServicesForPowerBI/azureResourceName/privateEndpointConnections/privateEndpointName.privateEndpointGuid/read"),
					Display: &armpowerbiprivatelinks.OperationDisplay{
						Description: to.Ptr("Gets private endpoint connection for the tenant"),
						Operation:   to.Ptr("Gets private endpoint connection"),
						Provider:    to.Ptr("Microsoft Power BI"),
						Resource:    to.Ptr("Private link service resources"),
					},
				},
				{
					Name: to.Ptr("Microsoft.PowerBI/privateLinkServicesForPowerBI/azureResourceName/privateEndpointConnections/privateEndpointName.privateEndpointGuid/write"),
					Display: &armpowerbiprivatelinks.OperationDisplay{
						Description: to.Ptr("Creates or updates private endpoint connection for the tenant"),
						Operation:   to.Ptr("Creates or updates private endpoint connection"),
						Provider:    to.Ptr("Microsoft Power BI"),
						Resource:    to.Ptr("Private link service resources"),
					},
				},
				{
					Name: to.Ptr("Microsoft.PowerBI/privateLinkServicesForPowerBI/azureResourceName/privateEndpointConnections/privateEndpointName.privateEndpointGuid/delete"),
					Display: &armpowerbiprivatelinks.OperationDisplay{
						Description: to.Ptr("Deletes private endpoint connection for the tenant"),
						Operation:   to.Ptr("Deletes private endpoint connection"),
						Provider:    to.Ptr("Microsoft Power BI"),
						Resource:    to.Ptr("Private link service resources"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OperationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OperationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/powerbiprivatelinks/resource-manager/Microsoft.PowerBI/stable/2020-06-01/examples/Operations_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateLinkServiceResourceOperationResults_Get(t *testing.T) {
	// From example specification/powerbiprivatelinks/resource-manager/Microsoft.PowerBI/stable/2020-06-01/examples/PrivateLinkServiceResourceOperationResults_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Result of operation on private link resources"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpowerbiprivatelinks.NewPrivateLinkServiceResourceOperationResultsClient("a0020869-4d28-422a-89f4-c2413130d73c",
		"9a062a88-e463-4697-bef2-fe039df73a02", cred, &options)
	poller, err := client.BeginGet(ctx,
		&armpowerbiprivatelinks.PrivateLinkServiceResourceOperationResultsClientBeginGetOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/powerbiprivatelinks/resource-manager/Microsoft.PowerBI/stable/2020-06-01/examples/PrivateLinkServiceResourceOperationResults_Get.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/powerbiprivatelinks/resource-manager/Microsoft.PowerBI/stable/2020-06-01/examples/PrivateLinkServiceResourceOperationResults_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armpowerbiprivatelinks.AsyncOperationDetail{
			Name:      to.Ptr("9a062a88-e463-4697-bef2-fe039df73a02"),
			StartTime: to.Ptr("2017-01-06T18:58:24.7596323+00:00"),
			Status:    to.Ptr("InProgress"),
		}
		if !reflect.DeepEqual(exampleRes, res.AsyncOperationDetail) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AsyncOperationDetail)
			t.Fatalf("Mock response is not equal to example response for example specification/powerbiprivatelinks/resource-manager/Microsoft.PowerBI/stable/2020-06-01/examples/PrivateLinkServiceResourceOperationResults_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateLinkServices_ListByResourceGroup(t *testing.T) {
	// From example specification/powerbiprivatelinks/resource-manager/Microsoft.PowerBI/stable/2020-06-01/examples/PrivateLinkServices_ListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List private link resources in a resource group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpowerbiprivatelinks.NewPrivateLinkServicesClient("a0020869-4d28-422a-89f4-c2413130d73c",
		"resourceGroup", cred, &options)
	res, err := client.ListByResourceGroup(ctx,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/powerbiprivatelinks/resource-manager/Microsoft.PowerBI/stable/2020-06-01/examples/PrivateLinkServices_ListByResourceGroup.json: %v", err)
	}
	// Response check
	{
		exampleRes := []*armpowerbiprivatelinks.TenantResource{
			{
				Name:     to.Ptr("conection 1"),
				Location: to.Ptr("west us"),
				Properties: &armpowerbiprivatelinks.TenantProperties{
					PrivateEndpointConnections: []*armpowerbiprivatelinks.PrivateEndpointConnection{
						{
							Name: to.Ptr("myPrivateEndpointConnections"),
							Type: to.Ptr("string"),
							ID:   to.Ptr("1001"),
							Properties: &armpowerbiprivatelinks.PrivateEndpointConnectionProperties{
								PrivateEndpoint: &armpowerbiprivatelinks.PrivateEndpoint{
									ID: to.Ptr("myPrivateEndpoint"),
								},
								PrivateLinkServiceConnectionState: &armpowerbiprivatelinks.ConnectionState{
									Description:     to.Ptr("My private endpoint connection"),
									ActionsRequired: to.Ptr("None"),
									Status:          to.Ptr(armpowerbiprivatelinks.PersistedConnectionStatusPending),
								},
							},
						}},
					TenantID: to.Ptr("ac2bc297-8a3e-46f3-972d-87c2b4ae6e2f"),
				},
				Tags: map[string]*string{
					"tag1": to.Ptr("value1"),
					"tag2": to.Ptr("value2"),
				},
			}}
		if !reflect.DeepEqual(exampleRes, res.TenantResourceArray) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.TenantResourceArray)
			t.Fatalf("Mock response is not equal to example response for example specification/powerbiprivatelinks/resource-manager/Microsoft.PowerBI/stable/2020-06-01/examples/PrivateLinkServices_ListByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPowerBIResources_ListByResourceName(t *testing.T) {
	// From example specification/powerbiprivatelinks/resource-manager/Microsoft.PowerBI/stable/2020-06-01/examples/PowerBIResources_ListByResourceName.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List private link resources in a Azure resource"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpowerbiprivatelinks.NewPowerBIResourcesClient("a0020869-4d28-422a-89f4-c2413130d73c",
		"resourceGroup",
		"azureResourceName", cred, &options)
	res, err := client.ListByResourceName(ctx,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/powerbiprivatelinks/resource-manager/Microsoft.PowerBI/stable/2020-06-01/examples/PowerBIResources_ListByResourceName.json: %v", err)
	}
	// Response check
	{
		exampleRes := []*armpowerbiprivatelinks.TenantResource{
			{
				Name:     to.Ptr("conection 1"),
				Location: to.Ptr("west us"),
				Properties: &armpowerbiprivatelinks.TenantProperties{
					PrivateEndpointConnections: []*armpowerbiprivatelinks.PrivateEndpointConnection{
						{
							Name: to.Ptr("myPrivateEndpointConnection"),
							Type: to.Ptr("string"),
							ID:   to.Ptr("/subscriptions/a0020869-4d28-422a-89f4-c2413130d73c/resourceGroups/resourceGroup/providers/Microsoft.PowerBI/privateLinkServicesForPowerBI/azureResourceName/privateEndpointConnections/myPrivateEndpointConnection.58ffb8de-89ad-41eb-9f8f-de0a7db9d721"),
							Properties: &armpowerbiprivatelinks.PrivateEndpointConnectionProperties{
								PrivateEndpoint: &armpowerbiprivatelinks.PrivateEndpoint{
									ID: to.Ptr("/subscriptions/a0020869-4d28-422a-89f4-c2413130d73c/resourceGroups/resourceGroup/providers/Microsoft.Network/privateEndpoints/myPrivateEndpoint"),
								},
								PrivateLinkServiceConnectionState: &armpowerbiprivatelinks.ConnectionState{
									Description:     to.Ptr("My private endpoint connection"),
									ActionsRequired: to.Ptr("None"),
									Status:          to.Ptr(armpowerbiprivatelinks.PersistedConnectionStatusPending),
								},
							},
						}},
					TenantID: to.Ptr("ac2bc297-8a3e-46f3-972d-87c2b4ae6e2f"),
				},
				Tags: map[string]*string{
					"tag1": to.Ptr("value1"),
					"tag2": to.Ptr("value2"),
				},
			}}
		if !reflect.DeepEqual(exampleRes, res.TenantResourceArray) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.TenantResourceArray)
			t.Fatalf("Mock response is not equal to example response for example specification/powerbiprivatelinks/resource-manager/Microsoft.PowerBI/stable/2020-06-01/examples/PowerBIResources_ListByResourceName.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPowerBIResources_Create(t *testing.T) {
	// From example specification/powerbiprivatelinks/resource-manager/Microsoft.PowerBI/stable/2020-06-01/examples/PowerBIResources_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Creates or updates private link service resource"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpowerbiprivatelinks.NewPowerBIResourcesClient("a0020869-4d28-422a-89f4-c2413130d73c",
		"resourceGroup",
		"azureResourceName", cred, &options)
	res, err := client.Create(ctx,
		armpowerbiprivatelinks.TenantResource{
			Location: to.Ptr("global"),
			Properties: &armpowerbiprivatelinks.TenantProperties{
				TenantID: to.Ptr("ac2bc297-8a3e-46f3-972d-87c2b4ae6e2f"),
			},
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
		},
		&armpowerbiprivatelinks.PowerBIResourcesClientCreateOptions{ClientTenantID: to.Ptr("ac2bc297-8a3e-46f3-972d-87c2b4ae6e2f")})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/powerbiprivatelinks/resource-manager/Microsoft.PowerBI/stable/2020-06-01/examples/PowerBIResources_Create.json: %v", err)
	}
	// Response check
	{
		exampleRes := armpowerbiprivatelinks.TenantResource{
			Name:     to.Ptr("myPrivateLinkServiceResource"),
			Location: to.Ptr("global"),
			Properties: &armpowerbiprivatelinks.TenantProperties{
				TenantID: to.Ptr("ac2bc297-8a3e-46f3-972d-87c2b4ae6e2f"),
			},
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.TenantResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.TenantResource)
			t.Fatalf("Mock response is not equal to example response for example specification/powerbiprivatelinks/resource-manager/Microsoft.PowerBI/stable/2020-06-01/examples/PowerBIResources_Create.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPowerBIResources_Update(t *testing.T) {
	// From example specification/powerbiprivatelinks/resource-manager/Microsoft.PowerBI/stable/2020-06-01/examples/PowerBIResources_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Updates private link service resource"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpowerbiprivatelinks.NewPowerBIResourcesClient("a0020869-4d28-422a-89f4-c2413130d73c",
		"resourceGroup",
		"azureResourceName", cred, &options)
	res, err := client.Update(ctx,
		armpowerbiprivatelinks.TenantResource{
			Location: to.Ptr("global"),
			Properties: &armpowerbiprivatelinks.TenantProperties{
				TenantID: to.Ptr("ac2bc297-8a3e-46f3-972d-87c2b4ae6e2f"),
			},
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
		},
		&armpowerbiprivatelinks.PowerBIResourcesClientUpdateOptions{ClientTenantID: to.Ptr("ac2bc297-8a3e-46f3-972d-87c2b4ae6e2f")})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/powerbiprivatelinks/resource-manager/Microsoft.PowerBI/stable/2020-06-01/examples/PowerBIResources_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armpowerbiprivatelinks.TenantResource{
			Name:     to.Ptr("myPrivateLinkServiceResource"),
			Location: to.Ptr("global"),
			Properties: &armpowerbiprivatelinks.TenantProperties{
				TenantID: to.Ptr("ac2bc297-8a3e-46f3-972d-87c2b4ae6e2f"),
			},
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.TenantResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.TenantResource)
			t.Fatalf("Mock response is not equal to example response for example specification/powerbiprivatelinks/resource-manager/Microsoft.PowerBI/stable/2020-06-01/examples/PowerBIResources_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPowerBIResources_Delete(t *testing.T) {
	// From example specification/powerbiprivatelinks/resource-manager/Microsoft.PowerBI/stable/2020-06-01/examples/PowerBIResources_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Deletes private link service resource"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpowerbiprivatelinks.NewPowerBIResourcesClient("a0020869-4d28-422a-89f4-c2413130d73c",
		"resourceGroup",
		"azureResourceName", cred, &options)
	_, err := client.Delete(ctx,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/powerbiprivatelinks/resource-manager/Microsoft.PowerBI/stable/2020-06-01/examples/PowerBIResources_Delete.json: %v", err)
	}
}

func TestPrivateLinkResources_ListByResource(t *testing.T) {
	// From example specification/powerbiprivatelinks/resource-manager/Microsoft.PowerBI/stable/2020-06-01/examples/PrivateLinkResources_ListByResource.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets private link resources in a Azure resource"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpowerbiprivatelinks.NewPrivateLinkResourcesClient("a0020869-4d28-422a-89f4-c2413130d73c",
		"resourceGroup",
		"azureResourceName", cred, &options)
	pager := client.ListByResource(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/powerbiprivatelinks/resource-manager/Microsoft.PowerBI/stable/2020-06-01/examples/PrivateLinkResources_ListByResource.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armpowerbiprivatelinks.PrivateLinkResourcesListResult{
			Value: []*armpowerbiprivatelinks.PrivateLinkResource{
				{
					Name: to.Ptr("tenant"),
					Type: to.Ptr("Microsoft.PowerBI/{resourceType}/privateLinkResources"),
					ID:   to.Ptr("subscriptions/a0020869-4d28-422a-89f4-c2413130d73c/resourceGroups/resourceGroup/providers/Microsoft.PowerBI/privateLinkServicesForPowerBI/azureResourceName/privateLinkResources/tenant"),
					Properties: &armpowerbiprivatelinks.PrivateLinkResourceProperties{
						GroupID: to.Ptr("tenant"),
						RequiredMembers: []*string{
							to.Ptr("tenant"),
							to.Ptr("capacity:3df897a4f10b49e9bddb0e9cf062adba")},
						RequiredZoneNames: []*string{
							to.Ptr("privatelink.powerbi.com")},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PrivateLinkResourcesListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PrivateLinkResourcesListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/powerbiprivatelinks/resource-manager/Microsoft.PowerBI/stable/2020-06-01/examples/PrivateLinkResources_ListByResource.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateLinkResources_Get(t *testing.T) {
	// From example specification/powerbiprivatelinks/resource-manager/Microsoft.PowerBI/stable/2020-06-01/examples/PrivateLinkResources_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets a private link resource"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpowerbiprivatelinks.NewPrivateLinkResourcesClient("a0020869-4d28-422a-89f4-c2413130d73c",
		"resourceGroup",
		"azureResourceName", cred, &options)
	res, err := client.Get(ctx,
		"tenant",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/powerbiprivatelinks/resource-manager/Microsoft.PowerBI/stable/2020-06-01/examples/PrivateLinkResources_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armpowerbiprivatelinks.PrivateLinkResource{
			Name: to.Ptr("tenant"),
			Type: to.Ptr("Microsoft.PowerBI/{resourceType}/privateLinkResources"),
			ID:   to.Ptr("subscriptions/a0020869-4d28-422a-89f4-c2413130d73c/resourceGroups/resourceGroup/providers/Microsoft.PowerBI/privateLinkServicesForPowerBI/azureResourceName/privateLinkResources/tenant"),
			Properties: &armpowerbiprivatelinks.PrivateLinkResourceProperties{
				GroupID: to.Ptr("tenant"),
				RequiredMembers: []*string{
					to.Ptr("tenant"),
					to.Ptr("capacity:3df897a4f10b49e9bddb0e9cf062adba")},
				RequiredZoneNames: []*string{
					to.Ptr("privatelink.powerbi.com")},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateLinkResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateLinkResource)
			t.Fatalf("Mock response is not equal to example response for example specification/powerbiprivatelinks/resource-manager/Microsoft.PowerBI/stable/2020-06-01/examples/PrivateLinkResources_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnections_ListByResource(t *testing.T) {
	// From example specification/powerbiprivatelinks/resource-manager/Microsoft.PowerBI/stable/2020-06-01/examples/PrivateEndpointConnections_ListByResource.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets private endpoint connections"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpowerbiprivatelinks.NewPrivateEndpointConnectionsClient("a0020869-4d28-422a-89f4-c2413130d73c",
		"<resource-group-name>",
		"<azure-resource-name>",
		"<private-endpoint-name>", cred, &options)
	pager := client.ListByResource("resourceGroup",
		"azureResourceName",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/powerbiprivatelinks/resource-manager/Microsoft.PowerBI/stable/2020-06-01/examples/PrivateEndpointConnections_ListByResource.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armpowerbiprivatelinks.PrivateEndpointConnectionListResult{
			Value: []*armpowerbiprivatelinks.PrivateEndpointConnection{
				{
					Name: to.Ptr("myPrivateEndpointName.58ffb8de-89ad-41eb-9f8f-de0a7db9d721"),
					Type: to.Ptr("Microsoft.PowerBI/privateLinkServicesForPowerBI/privateEndpointConnections"),
					ID:   to.Ptr("/subscriptions/a0020869-4d28-422a-89f4-c2413130d73c/resourceGroups/resourceGroup/providers/Microsoft.PowerBI/privateLinkServicesForPowerBI/azureResourceName/privateEndpointConnections/myPrivateEndpointName.58ffb8de-89ad-41eb-9f8f-de0a7db9d721"),
					Properties: &armpowerbiprivatelinks.PrivateEndpointConnectionProperties{
						PrivateEndpoint: &armpowerbiprivatelinks.PrivateEndpoint{
							ID: to.Ptr("/subscriptions/a0020869-4d28-422a-89f4-c2413130d73c/resourceGroups/resourceGroup/providers/Microsoft.PowerBI/privateLinkServicesForPowerBI/azureResourceName/privateEndpointConnections/myPrivateEndpointName"),
						},
						PrivateLinkServiceConnectionState: &armpowerbiprivatelinks.ConnectionState{
							Description:     to.Ptr("Test"),
							ActionsRequired: to.Ptr("None"),
							Status:          to.Ptr(armpowerbiprivatelinks.PersistedConnectionStatusPending),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PrivateEndpointConnectionListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PrivateEndpointConnectionListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/powerbiprivatelinks/resource-manager/Microsoft.PowerBI/stable/2020-06-01/examples/PrivateEndpointConnections_ListByResource.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnections_Get(t *testing.T) {
	// From example specification/powerbiprivatelinks/resource-manager/Microsoft.PowerBI/stable/2020-06-01/examples/PrivateEndpointConnections_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets private endpoint connection"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpowerbiprivatelinks.NewPrivateEndpointConnectionsClient("a0020869-4d28-422a-89f4-c2413130d73c",
		"resourceGroup",
		"azureResourceName",
		"myPrivateEndpointName", cred, &options)
	res, err := client.Get(ctx,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/powerbiprivatelinks/resource-manager/Microsoft.PowerBI/stable/2020-06-01/examples/PrivateEndpointConnections_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armpowerbiprivatelinks.PrivateEndpointConnection{
			Name: to.Ptr("myPrivateEndpointName.58ffb8de-89ad-41eb-9f8f-de0a7db9d721"),
			Type: to.Ptr("Microsoft.PowerBI/privateLinkServicesForPowerBI/privateEndpointConnections"),
			ID:   to.Ptr("/subscriptions/a0020869-4d28-422a-89f4-c2413130d73c/resourceGroups/resourceGroup/providers/Microsoft.PowerBI/privateLinkServicesForPowerBI/azureResourceName/privateEndpointConnections/myPrivateEndpointName.58ffb8de-89ad-41eb-9f8f-de0a7db9d721"),
			Properties: &armpowerbiprivatelinks.PrivateEndpointConnectionProperties{
				PrivateEndpoint: &armpowerbiprivatelinks.PrivateEndpoint{
					ID: to.Ptr("/subscriptions/a0020869-4d28-422a-89f4-c2413130d73c/resourceGroups/resourceGroup/providers/Microsoft.Network/privateEndpoints/myPrivateEndpointName"),
				},
				PrivateLinkServiceConnectionState: &armpowerbiprivatelinks.ConnectionState{
					Description:     to.Ptr("please approve"),
					ActionsRequired: to.Ptr("None"),
					Status:          to.Ptr(armpowerbiprivatelinks.PersistedConnectionStatusPending),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateEndpointConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/powerbiprivatelinks/resource-manager/Microsoft.PowerBI/stable/2020-06-01/examples/PrivateEndpointConnections_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnections_Create(t *testing.T) {
	// From example specification/powerbiprivatelinks/resource-manager/Microsoft.PowerBI/stable/2020-06-01/examples/PrivateEndpointConnections_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Updates status of private endpoint connection"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpowerbiprivatelinks.NewPrivateEndpointConnectionsClient("a0020869-4d28-422a-89f4-c2413130d73c",
		"resourceGroup",
		"azureResourceName",
		"myPrivateEndpointName", cred, &options)
	res, err := client.Create(ctx,
		armpowerbiprivatelinks.PrivateEndpointConnection{
			Properties: &armpowerbiprivatelinks.PrivateEndpointConnectionProperties{
				PrivateEndpoint: &armpowerbiprivatelinks.PrivateEndpoint{
					ID: to.Ptr("/subscriptions/a0020869-4d28-422a-89f4-c2413130d73c/resourceGroups/resourceGroup/providers/Microsoft.Network/privateEndpoints/myPrivateEndpointName"),
				},
				PrivateLinkServiceConnectionState: &armpowerbiprivatelinks.ConnectionState{
					Description:     to.Ptr(""),
					ActionsRequired: to.Ptr("None"),
					Status:          to.Ptr(armpowerbiprivatelinks.PersistedConnectionStatus("Approved ")),
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/powerbiprivatelinks/resource-manager/Microsoft.PowerBI/stable/2020-06-01/examples/PrivateEndpointConnections_Create.json: %v", err)
	}
	// Response check
	{
		exampleRes := armpowerbiprivatelinks.PrivateEndpointConnection{
			Name: to.Ptr("myPrivateEndpointName.58ffb8de-89ad-41eb-9f8f-de0a7db9d721"),
			Type: to.Ptr("Microsoft.PowerBI/privateLinkServicesForPowerBI/privateEndpointConnections"),
			ID:   to.Ptr("/subscriptions/a0020869-4d28-422a-89f4-c2413130d73c/resourceGroups/resourceGroup/providers/Microsoft.PowerBI/privateLinkServicesForPowerBI/azureResourceName/privateEndpointConnections/myPrivateEndpointName.58ffb8de-89ad-41eb-9f8f-de0a7db9d721"),
			Properties: &armpowerbiprivatelinks.PrivateEndpointConnectionProperties{
				PrivateEndpoint: &armpowerbiprivatelinks.PrivateEndpoint{
					ID: to.Ptr("/subscriptions/a0020869-4d28-422a-89f4-c2413130d73c/resourceGroups/resourceGroup/providers/Microsoft.Network/privateEndpoints/myPrivateEndpointName"),
				},
				PrivateLinkServiceConnectionState: &armpowerbiprivatelinks.ConnectionState{
					Description:     to.Ptr(""),
					ActionsRequired: to.Ptr("None"),
					Status:          to.Ptr(armpowerbiprivatelinks.PersistedConnectionStatus("Approved ")),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateEndpointConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/powerbiprivatelinks/resource-manager/Microsoft.PowerBI/stable/2020-06-01/examples/PrivateEndpointConnections_Create.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnections_Delete(t *testing.T) {
	// From example specification/powerbiprivatelinks/resource-manager/Microsoft.PowerBI/stable/2020-06-01/examples/PrivateEndpointConnections_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Deletes private endpoint connection"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armpowerbiprivatelinks.NewPrivateEndpointConnectionsClient("a0020869-4d28-422a-89f4-c2413130d73c",
		"resourceGroup",
		"azureResourceName",
		"myPrivateEndpointName", cred, &options)
	poller, err := client.BeginDelete(ctx,
		&armpowerbiprivatelinks.PrivateEndpointConnectionsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/powerbiprivatelinks/resource-manager/Microsoft.PowerBI/stable/2020-06-01/examples/PrivateEndpointConnections_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/powerbiprivatelinks/resource-manager/Microsoft.PowerBI/stable/2020-06-01/examples/PrivateEndpointConnections_Delete.json: %v", err)
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
