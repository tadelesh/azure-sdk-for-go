//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armvisualstudio_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/visualstudio/armvisualstudio"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestOperations_List(t *testing.T) {
	// From example specification/visualstudio/resource-manager/Microsoft.VisualStudio/preview/2014-04-01-preview/examples/GetOperations.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a list of operations for this resource provider"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armvisualstudio.NewOperationsClient(cred, &options)
	res, err := client.List(ctx,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/visualstudio/resource-manager/Microsoft.VisualStudio/preview/2014-04-01-preview/examples/GetOperations.json: %v", err)
	}
	// Response check
	{
		exampleRes := armvisualstudio.OperationListResult{
			Value: []*armvisualstudio.Operation{
				{
					Name: to.Ptr("Microsoft.VisualStudio/Account/Write"),
					Display: &armvisualstudio.OperationProperties{
						Description: to.Ptr("Set Account"),
						Operation:   to.Ptr("Creates or updates the Account"),
						Provider:    to.Ptr("Visual Studio"),
						Resource:    to.Ptr("Account"),
					},
				},
				{
					Name: to.Ptr("Microsoft.VisualStudio/Account/Delete"),
					Display: &armvisualstudio.OperationProperties{
						Description: to.Ptr("Delete Account"),
						Operation:   to.Ptr("Deletes the Account"),
						Provider:    to.Ptr("Visual Studio"),
						Resource:    to.Ptr("Account"),
					},
				},
				{
					Name: to.Ptr("Microsoft.VisualStudio/Account/Read"),
					Display: &armvisualstudio.OperationProperties{
						Description: to.Ptr("Read Account"),
						Operation:   to.Ptr("Reads the Account"),
						Provider:    to.Ptr("Visual Studio"),
						Resource:    to.Ptr("Account"),
					},
				},
				{
					Name: to.Ptr("Microsoft.VisualStudio/Project/Write"),
					Display: &armvisualstudio.OperationProperties{
						Description: to.Ptr("Set Project"),
						Operation:   to.Ptr("Creates or updates the Project"),
						Provider:    to.Ptr("Visual Studio"),
						Resource:    to.Ptr("Project"),
					},
				},
				{
					Name: to.Ptr("Microsoft.VisualStudio/Project/Delete"),
					Display: &armvisualstudio.OperationProperties{
						Description: to.Ptr("Delete Project"),
						Operation:   to.Ptr("Deletes the Project"),
						Provider:    to.Ptr("Visual Studio"),
						Resource:    to.Ptr("Project"),
					},
				},
				{
					Name: to.Ptr("Microsoft.VisualStudio/Project/Read"),
					Display: &armvisualstudio.OperationProperties{
						Description: to.Ptr("Read Project"),
						Operation:   to.Ptr("Reads the Project"),
						Provider:    to.Ptr("Visual Studio"),
						Resource:    to.Ptr("Project"),
					},
				},
				{
					Name: to.Ptr("Microsoft.VisualStudio/Extension/Write"),
					Display: &armvisualstudio.OperationProperties{
						Description: to.Ptr("Set Extension"),
						Operation:   to.Ptr("Creates or updates the Extension"),
						Provider:    to.Ptr("Visual Studio"),
						Resource:    to.Ptr("Extension"),
					},
				},
				{
					Name: to.Ptr("Microsoft.VisualStudio/Extension/Delete"),
					Display: &armvisualstudio.OperationProperties{
						Description: to.Ptr("Delete Extension"),
						Operation:   to.Ptr("Deletes the Extension"),
						Provider:    to.Ptr("Visual Studio"),
						Resource:    to.Ptr("Extension"),
					},
				},
				{
					Name: to.Ptr("Microsoft.VisualStudio/Extension/Read"),
					Display: &armvisualstudio.OperationProperties{
						Description: to.Ptr("Read Extension"),
						Operation:   to.Ptr("Reads the Extension"),
						Provider:    to.Ptr("Visual Studio"),
						Resource:    to.Ptr("Extension"),
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.OperationListResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.OperationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/visualstudio/resource-manager/Microsoft.VisualStudio/preview/2014-04-01-preview/examples/GetOperations.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAccounts_CheckNameAvailability(t *testing.T) {
	// From example specification/visualstudio/resource-manager/Microsoft.VisualStudio/preview/2014-04-01-preview/examples/CheckNameAvailability.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Check availability of an account name"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armvisualstudio.NewAccountsClient("0de7f055-dbea-498d-8e9e-da287eedca90", cred, &options)
	res, err := client.CheckNameAvailability(ctx,
		armvisualstudio.CheckNameAvailabilityParameter{
			ResourceName: to.Ptr("ExampleName"),
			ResourceType: to.Ptr("Account"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/visualstudio/resource-manager/Microsoft.VisualStudio/preview/2014-04-01-preview/examples/CheckNameAvailability.json: %v", err)
	}
	// Response check
	{
		exampleRes := armvisualstudio.CheckNameAvailabilityResult{
			NameAvailable: to.Ptr(true),
		}
		if !reflect.DeepEqual(exampleRes, res.CheckNameAvailabilityResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CheckNameAvailabilityResult)
			t.Fatalf("Mock response is not equal to example response for example specification/visualstudio/resource-manager/Microsoft.VisualStudio/preview/2014-04-01-preview/examples/CheckNameAvailability.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAccounts_ListByResourceGroup(t *testing.T) {
	// From example specification/visualstudio/resource-manager/Microsoft.VisualStudio/preview/2014-04-01-preview/examples/GetResources_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a list of account resources in the resource group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armvisualstudio.NewAccountsClient("0de7f055-dbea-498d-8e9e-da287eedca90", cred, &options)
	res, err := client.ListByResourceGroup(ctx,
		"VS-Example-Group",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/visualstudio/resource-manager/Microsoft.VisualStudio/preview/2014-04-01-preview/examples/GetResources_List.json: %v", err)
	}
	// Response check
	{
		exampleRes := armvisualstudio.AccountResourceListResult{
			Value: []*armvisualstudio.AccountResource{
				{
					Name:     to.Ptr("VS-Example-Group"),
					Type:     to.Ptr("Microsoft.VisualStudio/account"),
					ID:       to.Ptr("/subscriptions/0de7f055-dbea-498d-8e9e-da287eedca90/resourceGroups/VS-Example-Group/providers/Microsoft.VisualStudio/account/Example"),
					Location: to.Ptr("Central US"),
					Tags:     map[string]*string{},
					Properties: map[string]*string{
						"AccountURL": to.Ptr(""),
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.AccountResourceListResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AccountResourceListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/visualstudio/resource-manager/Microsoft.VisualStudio/preview/2014-04-01-preview/examples/GetResources_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAccounts_CreateOrUpdate(t *testing.T) {
	// From example specification/visualstudio/resource-manager/Microsoft.VisualStudio/preview/2014-04-01-preview/examples/CreateResource.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create an account resource"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armvisualstudio.NewAccountsClient("0de7f055-dbea-498d-8e9e-da287eedca90", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"VS-Example-Group",
		"Example",
		armvisualstudio.AccountResourceRequest{
			AccountName:   to.Ptr("Example"),
			Location:      to.Ptr("Central US"),
			OperationType: to.Ptr(armvisualstudio.AccountResourceRequestOperationTypeCreate),
			Properties:    map[string]*string{},
			Tags:          map[string]*string{},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/visualstudio/resource-manager/Microsoft.VisualStudio/preview/2014-04-01-preview/examples/CreateResource.json: %v", err)
	}
	// Response check
	{
		exampleRes := armvisualstudio.AccountResource{
			Name:     to.Ptr("VS-Example-Group"),
			Type:     to.Ptr("Microsoft.VisualStudio/account"),
			ID:       to.Ptr("/subscriptions/0de7f055-dbea-498d-8e9e-da287eedca90/resourceGroups/VS-Example-Group/providers/Microsoft.VisualStudio/account/Example"),
			Location: to.Ptr("Central US"),
			Tags:     map[string]*string{},
			Properties: map[string]*string{
				"AccountURL": to.Ptr(""),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AccountResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AccountResource)
			t.Fatalf("Mock response is not equal to example response for example specification/visualstudio/resource-manager/Microsoft.VisualStudio/preview/2014-04-01-preview/examples/CreateResource.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAccounts_Delete(t *testing.T) {
	// From example specification/visualstudio/resource-manager/Microsoft.VisualStudio/preview/2014-04-01-preview/examples/DeleteResource.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete an account resource"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armvisualstudio.NewAccountsClient("0de7f055-dbea-498d-8e9e-da287eedca90", cred, &options)
	_, err := client.Delete(ctx,
		"VS-Example-Group",
		"Example",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/visualstudio/resource-manager/Microsoft.VisualStudio/preview/2014-04-01-preview/examples/DeleteResource.json: %v", err)
	}
}

func TestAccounts_Get(t *testing.T) {
	// From example specification/visualstudio/resource-manager/Microsoft.VisualStudio/preview/2014-04-01-preview/examples/GetResource.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get an account resource"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armvisualstudio.NewAccountsClient("0de7f055-dbea-498d-8e9e-da287eedca90", cred, &options)
	res, err := client.Get(ctx,
		"VS-Example-Group",
		"Example",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/visualstudio/resource-manager/Microsoft.VisualStudio/preview/2014-04-01-preview/examples/GetResource.json: %v", err)
	}
	// Response check
	{
		exampleRes := armvisualstudio.AccountResource{
			Name:     to.Ptr("VS-Example-Group"),
			Type:     to.Ptr("Microsoft.VisualStudio/account"),
			ID:       to.Ptr("/subscriptions/0de7f055-dbea-498d-8e9e-da287eedca90/resourceGroups/VS-Example-Group/providers/Microsoft.VisualStudio/account/Example"),
			Location: to.Ptr("Central US"),
			Tags:     map[string]*string{},
			Properties: map[string]*string{
				"AccountURL": to.Ptr(""),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AccountResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AccountResource)
			t.Fatalf("Mock response is not equal to example response for example specification/visualstudio/resource-manager/Microsoft.VisualStudio/preview/2014-04-01-preview/examples/GetResource.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAccounts_Update(t *testing.T) {
	// From example specification/visualstudio/resource-manager/Microsoft.VisualStudio/preview/2014-04-01-preview/examples/UpdateTags.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create an account resource"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armvisualstudio.NewAccountsClient("0de7f055-dbea-498d-8e9e-da287eedca90", cred, &options)
	res, err := client.Update(ctx,
		"VS-Example-Group",
		"Example",
		armvisualstudio.AccountTagRequest{
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/visualstudio/resource-manager/Microsoft.VisualStudio/preview/2014-04-01-preview/examples/UpdateTags.json: %v", err)
	}
	// Response check
	{
		exampleRes := armvisualstudio.AccountResource{
			Name:     to.Ptr("VS-Example-Group"),
			Type:     to.Ptr("Microsoft.VisualStudio/account"),
			ID:       to.Ptr("/subscriptions/0de7f055-dbea-498d-8e9e-da287eedca90/resourceGroups/VS-Example-Group/providers/Microsoft.VisualStudio/account/Example"),
			Location: to.Ptr("Central US"),
			Tags:     map[string]*string{},
			Properties: map[string]*string{
				"AccountURL": to.Ptr(""),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AccountResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AccountResource)
			t.Fatalf("Mock response is not equal to example response for example specification/visualstudio/resource-manager/Microsoft.VisualStudio/preview/2014-04-01-preview/examples/UpdateTags.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestExtensions_ListByAccount(t *testing.T) {
	// From example specification/visualstudio/resource-manager/Microsoft.VisualStudio/preview/2014-04-01-preview/examples/GetExtensionResources_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a list of extension resources within the resource group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armvisualstudio.NewExtensionsClient("0de7f055-dbea-498d-8e9e-da287eedca90", cred, &options)
	res, err := client.ListByAccount(ctx,
		"VS-Example-Group",
		"ExampleAccount",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/visualstudio/resource-manager/Microsoft.VisualStudio/preview/2014-04-01-preview/examples/GetExtensionResources_List.json: %v", err)
	}
	// Response check
	{
		exampleRes := armvisualstudio.ExtensionResourceListResult{
			Value: []*armvisualstudio.ExtensionResource{
				{
					Name:     to.Ptr("ms.example"),
					Type:     to.Ptr("Microsoft.VisualStudio/account/extension"),
					ID:       to.Ptr("/subscriptions/0de7f055-dbea-498d-8e9e-da287eedca90/resourceGroups/VS-Example-Group/providers/Microsoft.VisualStudio/account/ExampleAccount/extension/ms.example"),
					Location: to.Ptr("Central US"),
					Tags:     map[string]*string{},
					Plan: &armvisualstudio.ExtensionResourcePlan{
						Name:          to.Ptr("ExamplePlan"),
						Product:       to.Ptr("ExampleExtensionName"),
						PromotionCode: to.Ptr(""),
						Publisher:     to.Ptr("ExampleExtensionPublisher"),
						Version:       to.Ptr("1.0"),
					},
					Properties: map[string]*string{},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.ExtensionResourceListResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ExtensionResourceListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/visualstudio/resource-manager/Microsoft.VisualStudio/preview/2014-04-01-preview/examples/GetExtensionResources_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestExtensions_Create(t *testing.T) {
	// From example specification/visualstudio/resource-manager/Microsoft.VisualStudio/preview/2014-04-01-preview/examples/CreateExtensionResource.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create an extension resource"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armvisualstudio.NewExtensionsClient("0de7f055-dbea-498d-8e9e-da287eedca90", cred, &options)
	res, err := client.Create(ctx,
		"VS-Example-Group",
		"ExampleAccount",
		"ms.example",
		armvisualstudio.ExtensionResourceRequest{
			Location: to.Ptr("Central US"),
			Plan: &armvisualstudio.ExtensionResourcePlan{
				Name:          to.Ptr("ExamplePlan"),
				Product:       to.Ptr("ExampleExtensionName"),
				PromotionCode: to.Ptr(""),
				Publisher:     to.Ptr("ExampleExtensionPublisher"),
				Version:       to.Ptr("1.0"),
			},
			Properties: map[string]*string{},
			Tags:       map[string]*string{},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/visualstudio/resource-manager/Microsoft.VisualStudio/preview/2014-04-01-preview/examples/CreateExtensionResource.json: %v", err)
	}
	// Response check
	{
		exampleRes := armvisualstudio.ExtensionResource{
			Name:     to.Ptr("ms.example"),
			Type:     to.Ptr("Microsoft.VisualStudio/account/extension"),
			ID:       to.Ptr("/subscriptions/0de7f055-dbea-498d-8e9e-da287eedca90/resourceGroups/VS-Example-Group/providers/Microsoft.VisualStudio/account/ExampleAccount/extension/ms.example"),
			Location: to.Ptr("Central US"),
			Tags:     map[string]*string{},
			Plan: &armvisualstudio.ExtensionResourcePlan{
				Name:          to.Ptr("ExamplePlan"),
				Product:       to.Ptr("ExampleExtensionName"),
				PromotionCode: to.Ptr(""),
				Publisher:     to.Ptr("ExampleExtensionPublisher"),
				Version:       to.Ptr("1.0"),
			},
			Properties: map[string]*string{},
		}
		if !reflect.DeepEqual(exampleRes, res.ExtensionResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ExtensionResource)
			t.Fatalf("Mock response is not equal to example response for example specification/visualstudio/resource-manager/Microsoft.VisualStudio/preview/2014-04-01-preview/examples/CreateExtensionResource.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestExtensions_Delete(t *testing.T) {
	// From example specification/visualstudio/resource-manager/Microsoft.VisualStudio/preview/2014-04-01-preview/examples/DeleteExtensionResource.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete an extension resource"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armvisualstudio.NewExtensionsClient("0de7f055-dbea-498d-8e9e-da287eedca90", cred, &options)
	_, err := client.Delete(ctx,
		"VS-Example-Group",
		"Example",
		"ms.example",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/visualstudio/resource-manager/Microsoft.VisualStudio/preview/2014-04-01-preview/examples/DeleteExtensionResource.json: %v", err)
	}
}

func TestExtensions_Get(t *testing.T) {
	// From example specification/visualstudio/resource-manager/Microsoft.VisualStudio/preview/2014-04-01-preview/examples/GetExtensionResource.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get an extension resource"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armvisualstudio.NewExtensionsClient("0de7f055-dbea-498d-8e9e-da287eedca90", cred, &options)
	res, err := client.Get(ctx,
		"VS-Example-Group",
		"ExampleAccount",
		"ms.example",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/visualstudio/resource-manager/Microsoft.VisualStudio/preview/2014-04-01-preview/examples/GetExtensionResource.json: %v", err)
	}
	// Response check
	{
		exampleRes := armvisualstudio.ExtensionResource{
			Name:     to.Ptr("ms.example"),
			Type:     to.Ptr("Microsoft.VisualStudio/account/extension"),
			ID:       to.Ptr("/subscriptions/0de7f055-dbea-498d-8e9e-da287eedca90/resourceGroups/VS-Example-Group/providers/Microsoft.VisualStudio/account/ExampleAccount/extension/ms.example"),
			Location: to.Ptr("Central US"),
			Tags:     map[string]*string{},
			Plan: &armvisualstudio.ExtensionResourcePlan{
				Name:          to.Ptr("ExamplePlan"),
				Product:       to.Ptr("ExampleExtensionName"),
				PromotionCode: to.Ptr(""),
				Publisher:     to.Ptr("ExampleExtensionPublisher"),
				Version:       to.Ptr("1.0"),
			},
			Properties: map[string]*string{},
		}
		if !reflect.DeepEqual(exampleRes, res.ExtensionResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ExtensionResource)
			t.Fatalf("Mock response is not equal to example response for example specification/visualstudio/resource-manager/Microsoft.VisualStudio/preview/2014-04-01-preview/examples/GetExtensionResource.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestExtensions_Update(t *testing.T) {
	// From example specification/visualstudio/resource-manager/Microsoft.VisualStudio/preview/2014-04-01-preview/examples/UpdateExtensionResource.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update an extension resource"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armvisualstudio.NewExtensionsClient("0de7f055-dbea-498d-8e9e-da287eedca90", cred, &options)
	res, err := client.Update(ctx,
		"VS-Example-Group",
		"ExampleAccount",
		"Example",
		armvisualstudio.ExtensionResourceRequest{
			Location: to.Ptr("Central US"),
			Plan: &armvisualstudio.ExtensionResourcePlan{
				Name:          to.Ptr("ExamplePlan"),
				Product:       to.Ptr("ExampleExtensionName"),
				PromotionCode: to.Ptr(""),
				Publisher:     to.Ptr("ExampleExtensionPublisher"),
				Version:       to.Ptr("1.0"),
			},
			Properties: map[string]*string{},
			Tags:       map[string]*string{},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/visualstudio/resource-manager/Microsoft.VisualStudio/preview/2014-04-01-preview/examples/UpdateExtensionResource.json: %v", err)
	}
	// Response check
	{
		exampleRes := armvisualstudio.ExtensionResource{
			Name:     to.Ptr("ms.example"),
			Type:     to.Ptr("Microsoft.VisualStudio/account/extension"),
			ID:       to.Ptr("/subscriptions/0de7f055-dbea-498d-8e9e-da287eedca90/resourceGroups/VS-Example-Group/providers/Microsoft.VisualStudio/account/ExampleAccount/extension/ms.example"),
			Location: to.Ptr("Central US"),
			Tags:     map[string]*string{},
			Plan: &armvisualstudio.ExtensionResourcePlan{
				Name:          to.Ptr("ExamplePlan"),
				Product:       to.Ptr("ExampleExtensionName"),
				PromotionCode: to.Ptr(""),
				Publisher:     to.Ptr("ExampleExtensionPublisher"),
				Version:       to.Ptr("1.0"),
			},
			Properties: map[string]*string{},
		}
		if !reflect.DeepEqual(exampleRes, res.ExtensionResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ExtensionResource)
			t.Fatalf("Mock response is not equal to example response for example specification/visualstudio/resource-manager/Microsoft.VisualStudio/preview/2014-04-01-preview/examples/UpdateExtensionResource.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestProjects_ListByResourceGroup(t *testing.T) {
	// From example specification/visualstudio/resource-manager/Microsoft.VisualStudio/preview/2014-04-01-preview/examples/GetProjectResources_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a list of project resources in the Team Services account"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armvisualstudio.NewProjectsClient("0de7f055-dbea-498d-8e9e-da287eedca90", cred, &options)
	res, err := client.ListByResourceGroup(ctx,
		"VS-Example-Group",
		"ExampleAccount",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/visualstudio/resource-manager/Microsoft.VisualStudio/preview/2014-04-01-preview/examples/GetProjectResources_List.json: %v", err)
	}
	// Response check
	{
		exampleRes := armvisualstudio.ProjectResourceListResult{
			Value: []*armvisualstudio.ProjectResource{
				{
					Name:     to.Ptr("ExampleProject"),
					Type:     to.Ptr("Microsoft.VisualStudio/account/project"),
					ID:       to.Ptr("/subscriptions/0de7f055-dbea-498d-8e9e-da287eedca90/resourceGroups/VS-Example-Group/providers/Microsoft.VisualStudio/account/ExampleAccount/project/ExampleProject"),
					Location: to.Ptr("Central US"),
					Tags:     map[string]*string{},
					Properties: map[string]*string{
						"AzureResourceName":   to.Ptr("ExampleProject"),
						"TfsUniqueIdentifier": to.Ptr("vstfs:///Classification/TeamProject/d921d601-0600-4e45-8600-3914ffc8811a"),
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.ProjectResourceListResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ProjectResourceListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/visualstudio/resource-manager/Microsoft.VisualStudio/preview/2014-04-01-preview/examples/GetProjectResources_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestProjects_Create(t *testing.T) {
	// From example specification/visualstudio/resource-manager/Microsoft.VisualStudio/preview/2014-04-01-preview/examples/CreateProjectResource.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a project resource"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armvisualstudio.NewProjectsClient("0de7f055-dbea-498d-8e9e-da287eedca90", cred, &options)
	poller, err := client.BeginCreate(ctx,
		"VS-Example-Group",
		"ExampleAccount",
		"ExampleProject",
		armvisualstudio.ProjectResource{
			Name:     to.Ptr("ExampleProject"),
			Type:     to.Ptr("Microsoft.VisualStudio/account/project"),
			ID:       to.Ptr("/subscriptions/0de7f055-dbea-498d-8e9e-da287eedca90/resourceGroups/VS-Example-Group/providers/Microsoft.VisualStudio/account/ExampleAccount/project/ExampleProject"),
			Location: to.Ptr("Central US"),
			Tags:     map[string]*string{},
			Properties: map[string]*string{
				"ProcessTemplateId":    to.Ptr("6B724908-EF14-45CF-84F8-768B5384DA45"),
				"VersionControlOption": to.Ptr("Git"),
			},
		},
		&armvisualstudio.ProjectsClientBeginCreateOptions{Validating: nil,
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/visualstudio/resource-manager/Microsoft.VisualStudio/preview/2014-04-01-preview/examples/CreateProjectResource.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/visualstudio/resource-manager/Microsoft.VisualStudio/preview/2014-04-01-preview/examples/CreateProjectResource.json: %v", err)
	}
	// Response check
	{
		exampleRes := armvisualstudio.ProjectResource{
			Name:     to.Ptr("ExampleProject"),
			Type:     to.Ptr("microsoft.visualstudio/account/project"),
			ID:       to.Ptr("/subscriptions/0de7f055-dbea-498d-8e9e-da287eedca90/resourceGroups/VS-Example-Group/providers/microsoft.visualstudio/account/ExampleAccount/project/ExampleProject"),
			Location: to.Ptr("North Central US"),
			Tags:     map[string]*string{},
			Properties: map[string]*string{
				"AzureResourceName":   to.Ptr("ExampleProject"),
				"TfsUniqueIdentifier": to.Ptr("vstfs:///Classification/TeamProject/7a4e6ba5-35bf-4667-86a4-9b598a88fa25"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ProjectResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ProjectResource)
			t.Fatalf("Mock response is not equal to example response for example specification/visualstudio/resource-manager/Microsoft.VisualStudio/preview/2014-04-01-preview/examples/CreateProjectResource.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestProjects_Get(t *testing.T) {
	// From example specification/visualstudio/resource-manager/Microsoft.VisualStudio/preview/2014-04-01-preview/examples/GetProjectResource.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a project resource"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armvisualstudio.NewProjectsClient("0de7f055-dbea-498d-8e9e-da287eedca90", cred, &options)
	res, err := client.Get(ctx,
		"VS-Example-Group",
		"ExampleAccount",
		"ExampleProject",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/visualstudio/resource-manager/Microsoft.VisualStudio/preview/2014-04-01-preview/examples/GetProjectResource.json: %v", err)
	}
	// Response check
	{
		exampleRes := armvisualstudio.ProjectResource{
			Name:     to.Ptr("ExampleProject"),
			Type:     to.Ptr("microsoft.visualstudio/account/project"),
			ID:       to.Ptr("/subscriptions/0de7f055-dbea-498d-8e9e-da287eedca90/resourceGroups/VS-Example-Group/providers/microsoft.visualstudio/account/ExampleAccount/project/ExampleProject"),
			Location: to.Ptr("North Central US"),
			Tags:     map[string]*string{},
			Properties: map[string]*string{
				"AzureResourceName":   to.Ptr("ExampleProject"),
				"TfsUniqueIdentifier": to.Ptr("vstfs:///Classification/TeamProject/7a4e6ba5-35bf-4667-86a4-9b598a88fa25"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ProjectResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ProjectResource)
			t.Fatalf("Mock response is not equal to example response for example specification/visualstudio/resource-manager/Microsoft.VisualStudio/preview/2014-04-01-preview/examples/GetProjectResource.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestProjects_Update(t *testing.T) {
	// From example specification/visualstudio/resource-manager/Microsoft.VisualStudio/preview/2014-04-01-preview/examples/UpdateProjectResource.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a project resource"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armvisualstudio.NewProjectsClient("0de7f055-dbea-498d-8e9e-da287eedca90", cred, &options)
	res, err := client.Update(ctx,
		"VS-Example-Group",
		"ExampleAccount",
		"ExampleProject",
		armvisualstudio.ProjectResource{
			Name:       to.Ptr("ms.example"),
			Type:       to.Ptr("Microsoft.VisualStudio/account/extension"),
			ID:         to.Ptr("/subscriptions/0de7f055-dbea-498d-8e9e-da287eedca90/resourceGroups/VS-Example-Group/providers/microsoft.visualstudio/account/ExampleAccount/project/ExampleProject"),
			Location:   to.Ptr("Central US"),
			Tags:       map[string]*string{},
			Properties: map[string]*string{},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/visualstudio/resource-manager/Microsoft.VisualStudio/preview/2014-04-01-preview/examples/UpdateProjectResource.json: %v", err)
	}
	// Response check
	{
		exampleRes := armvisualstudio.ProjectResource{
			Name:     to.Ptr("ExampleProject"),
			Type:     to.Ptr("microsoft.visualstudio/account/project"),
			ID:       to.Ptr("/subscriptions/0de7f055-dbea-498d-8e9e-da287eedca90/resourceGroups/VS-Example-Group/providers/microsoft.visualstudio/account/ExampleAccount/project/ExampleProject"),
			Location: to.Ptr("North Central US"),
			Tags:     map[string]*string{},
			Properties: map[string]*string{
				"AzureResourceName":   to.Ptr("ExampleProject"),
				"TfsUniqueIdentifier": to.Ptr("vstfs:///Classification/TeamProject/7a4e6ba5-35bf-4667-86a4-9b598a88fa25"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ProjectResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ProjectResource)
			t.Fatalf("Mock response is not equal to example response for example specification/visualstudio/resource-manager/Microsoft.VisualStudio/preview/2014-04-01-preview/examples/UpdateProjectResource.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestProjects_GetJobStatus(t *testing.T) {
	// From example specification/visualstudio/resource-manager/Microsoft.VisualStudio/preview/2014-04-01-preview/examples/GetProjectJobStatus.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get the status of the project creation job"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armvisualstudio.NewProjectsClient("0de7f055-dbea-498d-8e9e-da287eedca90", cred, &options)
	res, err := client.GetJobStatus(ctx,
		"VS-Example-Group",
		"ExampleAccount",
		"ExampleProject",
		"ExampleProject",
		"put",
		&armvisualstudio.ProjectsClientGetJobStatusOptions{JobID: to.Ptr("126167d2-d710-4b5d-80a8-a1d58717142d")})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/visualstudio/resource-manager/Microsoft.VisualStudio/preview/2014-04-01-preview/examples/GetProjectJobStatus.json: %v", err)
	}
	// Response check
	{
		exampleRes := armvisualstudio.ProjectResource{
			Name:     to.Ptr("ExampleProject"),
			Type:     to.Ptr("microsoft.visualstudio/account/project"),
			ID:       to.Ptr("/subscriptions/0de7f055-dbea-498d-8e9e-da287eedca90/resourceGroups/VS-Example-Group/providers/microsoft.visualstudio/account/ExampleAccount/project/ExampleProject"),
			Location: to.Ptr("North Central US"),
			Tags:     map[string]*string{},
			Properties: map[string]*string{
				"AzureResourceName":   to.Ptr("ExampleProject"),
				"TfsUniqueIdentifier": to.Ptr("vstfs:///Classification/TeamProject/7a4e6ba5-35bf-4667-86a4-9b598a88fa25"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ProjectResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ProjectResource)
			t.Fatalf("Mock response is not equal to example response for example specification/visualstudio/resource-manager/Microsoft.VisualStudio/preview/2014-04-01-preview/examples/GetProjectJobStatus.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
