//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armhybridconnectivity_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"
	"time"

	"encoding/json"
	"reflect"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/hybridconnectivity/armhybridconnectivity"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestOperations_List(t *testing.T) {
	// From example specification/hybridconnectivity/resource-manager/Microsoft.HybridConnectivity/preview/2021-10-06-preview/examples/OperationsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"HybridConnectivityOperationsList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhybridconnectivity.NewOperationsClient(cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/hybridconnectivity/resource-manager/Microsoft.HybridConnectivity/preview/2021-10-06-preview/examples/OperationsList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armhybridconnectivity.OperationListResult{
			Value: []*armhybridconnectivity.Operation{
				{
					Name: to.Ptr("Microsoft.HybridConnectivity/operations/read"),
					Display: &armhybridconnectivity.OperationDisplay{
						Description: to.Ptr("Get the list of Operations"),
						Operation:   to.Ptr("Get operations"),
						Provider:    to.Ptr("Microsoft.HybridConnectivity"),
						Resource:    to.Ptr("Operations"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.HybridConnectivity/endpoints/read"),
					Display: &armhybridconnectivity.OperationDisplay{
						Description: to.Ptr("Get or list of endpoints to the target resource."),
						Operation:   to.Ptr("Get/List endpoints"),
						Provider:    to.Ptr("Microsoft.HybridConnectivity"),
						Resource:    to.Ptr("endpoints"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.HybridConnectivity/endpoints/write"),
					Display: &armhybridconnectivity.OperationDisplay{
						Description: to.Ptr("Create or update the endpoint to the target resource."),
						Operation:   to.Ptr("Create/Update endpoint"),
						Provider:    to.Ptr("Microsoft.HybridConnectivity"),
						Resource:    to.Ptr("endpoints"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.HybridConnectivity/endpoints/delete"),
					Display: &armhybridconnectivity.OperationDisplay{
						Description: to.Ptr("Deletes the endpoint access to the target resource."),
						Operation:   to.Ptr("Delete endpoint"),
						Provider:    to.Ptr("Microsoft.HybridConnectivity"),
						Resource:    to.Ptr("endpoints"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.HybridConnectivity/endpoints/listCredentials/action"),
					Display: &armhybridconnectivity.OperationDisplay{
						Description: to.Ptr("List the endpoint access credentials to the resource."),
						Operation:   to.Ptr("List credentials for endpoint access"),
						Provider:    to.Ptr("Microsoft.HybridConnectivity"),
						Resource:    to.Ptr("endpoints"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.HybridConnectivity/register/action"),
					Display: &armhybridconnectivity.OperationDisplay{
						Description: to.Ptr("Register the subscription for Microsoft.HybridConnectivity"),
						Operation:   to.Ptr("Register the Microsoft.HybridConnectivity"),
						Provider:    to.Ptr("Microsoft.HybridConnectivity"),
						Resource:    to.Ptr("Microsoft.HybridConnectivity"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.HybridConnectivity/unregister/action"),
					Display: &armhybridconnectivity.OperationDisplay{
						Description: to.Ptr("Unregister the subscription for Microsoft.HybridConnectivity"),
						Operation:   to.Ptr("Unregister the Microsoft.HybridConnectivity"),
						Provider:    to.Ptr("Microsoft.HybridConnectivity"),
						Resource:    to.Ptr("Microsoft.HybridConnectivity"),
					},
					IsDataAction: to.Ptr(false),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OperationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OperationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/hybridconnectivity/resource-manager/Microsoft.HybridConnectivity/preview/2021-10-06-preview/examples/OperationsList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestEndpoints_List(t *testing.T) {
	// From example specification/hybridconnectivity/resource-manager/Microsoft.HybridConnectivity/preview/2021-10-06-preview/examples/EndpointsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"HybridConnectivityEndpointsGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhybridconnectivity.NewEndpointsClient(cred, &options)
	pager := client.List("subscriptions/f5bcc1d9-23af-4ae9-aca1-041d0f593a63/resourceGroups/hybridRG/providers/Microsoft.HybridCompute/machines/testMachine",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/hybridconnectivity/resource-manager/Microsoft.HybridConnectivity/preview/2021-10-06-preview/examples/EndpointsList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armhybridconnectivity.EndpointsList{
			Value: []*armhybridconnectivity.EndpointResource{
				{
					Name: to.Ptr("default"),
					Type: to.Ptr("Microsoft.HybridConnectivity/endpoints"),
					ID:   to.Ptr("/subscriptions/f5bcc1d9-23af-4ae9-aca1-041d0f593a63/resourceGroups/hybridRG/providers/Microsoft.HybridCompute/machines/testMachine/providers/Microsoft.HybridConnectivity/endpoints/default"),
					Properties: &armhybridconnectivity.EndpointProperties{
						Type: to.Ptr(armhybridconnectivity.TypeDefault),
					},
				},
				{
					Name: to.Ptr("custom"),
					Type: to.Ptr("Microsoft.HybridConnectivity/endpoints"),
					ID:   to.Ptr("/subscriptions/f5bcc1d9-23af-4ae9-aca1-041d0f593a63/resourceGroups/hybridRG/providers/Microsoft.HybridCompute/machines/testMachine/providers/Microsoft.HybridConnectivity/endpoints/custom"),
					Properties: &armhybridconnectivity.EndpointProperties{
						Type:       to.Ptr(armhybridconnectivity.TypeCustom),
						ResourceID: to.Ptr("/subscriptions/f5bcc1d9-23af-4ae9-aca1-041d0f593a63/resourceGroups/hybridRG/providers/Microsoft.Relay/namespaces/custom-relay-namespace"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.EndpointsList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.EndpointsList)
			t.Fatalf("Mock response is not equal to example response for example specification/hybridconnectivity/resource-manager/Microsoft.HybridConnectivity/preview/2021-10-06-preview/examples/EndpointsList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestEndpoints_Get(t *testing.T) {
	// From example specification/hybridconnectivity/resource-manager/Microsoft.HybridConnectivity/preview/2021-10-06-preview/examples/EndpointsGetCustom.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"HybridConnectivityEndpointsGetCustom"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhybridconnectivity.NewEndpointsClient(cred, &options)
	res, err := client.Get(ctx,
		"subscriptions/f5bcc1d9-23af-4ae9-aca1-041d0f593a63/resourceGroups/hybridRG/providers/Microsoft.HybridCompute/machines/testMachine",
		"custom",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hybridconnectivity/resource-manager/Microsoft.HybridConnectivity/preview/2021-10-06-preview/examples/EndpointsGetCustom.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhybridconnectivity.EndpointResource{
			Name: to.Ptr("custom"),
			Type: to.Ptr("Microsoft.HybridConnectivity/endpoints"),
			ID:   to.Ptr("/subscriptions/f5bcc1d9-23af-4ae9-aca1-041d0f593a63/resourceGroups/hybridRG/providers/Microsoft.HybridCompute/machines/testMachine/providers/Microsoft.HybridConnectivity/endpoints/custom"),
			Properties: &armhybridconnectivity.EndpointProperties{
				Type:       to.Ptr(armhybridconnectivity.TypeCustom),
				ResourceID: to.Ptr("/subscriptions/f5bcc1d9-23af-4ae9-aca1-041d0f593a63/resourceGroups/hybridRG/providers/Microsoft.Relay/namespaces/custom-relay-namespace"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.EndpointResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.EndpointResource)
			t.Fatalf("Mock response is not equal to example response for example specification/hybridconnectivity/resource-manager/Microsoft.HybridConnectivity/preview/2021-10-06-preview/examples/EndpointsGetCustom.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/hybridconnectivity/resource-manager/Microsoft.HybridConnectivity/preview/2021-10-06-preview/examples/EndpointsGetDefault.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"HybridConnectivityEndpointsGetDefault"},
	})
	client = armhybridconnectivity.NewEndpointsClient(cred, &options)
	res, err = client.Get(ctx,
		"subscriptions/f5bcc1d9-23af-4ae9-aca1-041d0f593a63/resourceGroups/hybridRG/providers/Microsoft.HybridCompute/machines/testMachine",
		"default",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hybridconnectivity/resource-manager/Microsoft.HybridConnectivity/preview/2021-10-06-preview/examples/EndpointsGetDefault.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhybridconnectivity.EndpointResource{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.HybridConnectivity/endpoints"),
			ID:   to.Ptr("/subscriptions/f5bcc1d9-23af-4ae9-aca1-041d0f593a63/resourceGroups/hybridRG/providers/Microsoft.HybridCompute/machines/testMachine/providers/Microsoft.HybridConnectivity/endpoints/default"),
			Properties: &armhybridconnectivity.EndpointProperties{
				Type: to.Ptr(armhybridconnectivity.TypeDefault),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.EndpointResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.EndpointResource)
			t.Fatalf("Mock response is not equal to example response for example specification/hybridconnectivity/resource-manager/Microsoft.HybridConnectivity/preview/2021-10-06-preview/examples/EndpointsGetDefault.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestEndpoints_CreateOrUpdate(t *testing.T) {
	// From example specification/hybridconnectivity/resource-manager/Microsoft.HybridConnectivity/preview/2021-10-06-preview/examples/EndpointsPutCustom.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"HybridConnectivityEndpointsPutCustom"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhybridconnectivity.NewEndpointsClient(cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"subscriptions/f5bcc1d9-23af-4ae9-aca1-041d0f593a63/resourceGroups/hybridRG/providers/Microsoft.HybridCompute/machines/testMachine",
		"custom",
		armhybridconnectivity.EndpointResource{
			Properties: &armhybridconnectivity.EndpointProperties{
				Type:       to.Ptr(armhybridconnectivity.TypeCustom),
				ResourceID: to.Ptr("/subscriptions/f5bcc1d9-23af-4ae9-aca1-041d0f593a63/resourceGroups/hybridRG/providers/Microsoft.Relay/namespaces/custom-relay-namespace"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hybridconnectivity/resource-manager/Microsoft.HybridConnectivity/preview/2021-10-06-preview/examples/EndpointsPutCustom.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhybridconnectivity.EndpointResource{
			Name: to.Ptr("custom"),
			Type: to.Ptr("Microsoft.HybridConnectivity/endpoints"),
			ID:   to.Ptr("/subscriptions/f5bcc1d9-23af-4ae9-aca1-041d0f593a63/resourceGroups/hybridRG/providers/Microsoft.HybridCompute/machines/testMachine/providers/Microsoft.HybridConnectivity/endpoints/custom"),
			Properties: &armhybridconnectivity.EndpointProperties{
				Type:              to.Ptr(armhybridconnectivity.TypeCustom),
				ProvisioningState: to.Ptr("Succeeded"),
				ResourceID:        to.Ptr("/subscriptions/f5bcc1d9-23af-4ae9-aca1-041d0f593a63/resourceGroups/hybridRG/providers/Microsoft.Relay/namespaces/custom-relay-namespace"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.EndpointResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.EndpointResource)
			t.Fatalf("Mock response is not equal to example response for example specification/hybridconnectivity/resource-manager/Microsoft.HybridConnectivity/preview/2021-10-06-preview/examples/EndpointsPutCustom.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/hybridconnectivity/resource-manager/Microsoft.HybridConnectivity/preview/2021-10-06-preview/examples/EndpointsPutDefault.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"HybridConnectivityEndpointsPutDefault"},
	})
	client = armhybridconnectivity.NewEndpointsClient(cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"subscriptions/f5bcc1d9-23af-4ae9-aca1-041d0f593a63/resourceGroups/hybridRG/providers/Microsoft.HybridCompute/machines/testMachine",
		"default",
		armhybridconnectivity.EndpointResource{
			Properties: &armhybridconnectivity.EndpointProperties{
				Type: to.Ptr(armhybridconnectivity.TypeDefault),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hybridconnectivity/resource-manager/Microsoft.HybridConnectivity/preview/2021-10-06-preview/examples/EndpointsPutDefault.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhybridconnectivity.EndpointResource{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.HybridConnectivity/endpoints"),
			ID:   to.Ptr("/subscriptions/f5bcc1d9-23af-4ae9-aca1-041d0f593a63/resourceGroups/hybridRG/providers/Microsoft.HybridCompute/machines/testMachine/providers/Microsoft.HybridConnectivity/endpoints/default"),
			Properties: &armhybridconnectivity.EndpointProperties{
				Type:              to.Ptr(armhybridconnectivity.TypeDefault),
				ProvisioningState: to.Ptr("Succeeded"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.EndpointResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.EndpointResource)
			t.Fatalf("Mock response is not equal to example response for example specification/hybridconnectivity/resource-manager/Microsoft.HybridConnectivity/preview/2021-10-06-preview/examples/EndpointsPutDefault.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestEndpoints_Update(t *testing.T) {
	// From example specification/hybridconnectivity/resource-manager/Microsoft.HybridConnectivity/preview/2021-10-06-preview/examples/EndpointsPatchDefault.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"HybridConnectivityEndpointsPatchDefault"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhybridconnectivity.NewEndpointsClient(cred, &options)
	res, err := client.Update(ctx,
		"subscriptions/f5bcc1d9-23af-4ae9-aca1-041d0f593a63/resourceGroups/hybridRG/providers/Microsoft.HybridCompute/machines/testMachine",
		"default",
		armhybridconnectivity.EndpointResource{
			Properties: &armhybridconnectivity.EndpointProperties{
				Type: to.Ptr(armhybridconnectivity.TypeDefault),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hybridconnectivity/resource-manager/Microsoft.HybridConnectivity/preview/2021-10-06-preview/examples/EndpointsPatchDefault.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhybridconnectivity.EndpointResource{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.HybridConnectivity/endpoints"),
			ID:   to.Ptr("/subscriptions/f5bcc1d9-23af-4ae9-aca1-041d0f593a63/resourceGroups/hybridRG/providers/Microsoft.HybridCompute/machines/testMachine/providers/Microsoft.HybridConnectivity/endpoints/default"),
			Properties: &armhybridconnectivity.EndpointProperties{
				Type:              to.Ptr(armhybridconnectivity.TypeDefault),
				ProvisioningState: to.Ptr("Succeeded"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.EndpointResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.EndpointResource)
			t.Fatalf("Mock response is not equal to example response for example specification/hybridconnectivity/resource-manager/Microsoft.HybridConnectivity/preview/2021-10-06-preview/examples/EndpointsPatchDefault.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestEndpoints_Delete(t *testing.T) {
	// From example specification/hybridconnectivity/resource-manager/Microsoft.HybridConnectivity/preview/2021-10-06-preview/examples/EndpointsDeleteDefault.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"HybridConnectivityEndpointsDeleteDefault"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhybridconnectivity.NewEndpointsClient(cred, &options)
	_, err := client.Delete(ctx,
		"subscriptions/f5bcc1d9-23af-4ae9-aca1-041d0f593a63/resourceGroups/hybridRG/providers/Microsoft.HybridCompute/machines/testMachine",
		"default",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hybridconnectivity/resource-manager/Microsoft.HybridConnectivity/preview/2021-10-06-preview/examples/EndpointsDeleteDefault.json: %v", err)
	}
}

func TestEndpoints_ListCredentials(t *testing.T) {
	// From example specification/hybridconnectivity/resource-manager/Microsoft.HybridConnectivity/preview/2021-10-06-preview/examples/EndpointsPostListCredentials.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"HybridConnectivityEndpointsPostListCredentials"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhybridconnectivity.NewEndpointsClient(cred, &options)
	res, err := client.ListCredentials(ctx,
		"subscriptions/f5bcc1d9-23af-4ae9-aca1-041d0f593a63/resourceGroups/hybridRG/providers/Microsoft.HybridCompute/machines/testMachine",
		"default",
		&armhybridconnectivity.EndpointsClientListCredentialsOptions{Expiresin: to.Ptr[int64](10800)})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hybridconnectivity/resource-manager/Microsoft.HybridConnectivity/preview/2021-10-06-preview/examples/EndpointsPostListCredentials.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhybridconnectivity.EndpointAccessResource{
			Relay: &armhybridconnectivity.RelayNamespaceAccessProperties{
				AccessKey:            to.Ptr("SharedAccessSignature sr=http%3A%2F%2Fazgnrelay-eastus-l1.servicebus.windows.net%2Fmicrosoft.kubernetes%2Fconnectedclusters%2Fa0e1fd7d1d974ddf6b11a952d67679c9f12c006eee16861857a8268da4eb1498%2F1619989456957411072%2F&sig=WxDwPF6AmmODaMHNnBGDSm773UG%2B%2Be"),
				ExpiresOn:            to.Ptr[int64](1620000256),
				HybridConnectionName: to.Ptr("microsoft.kubernetes/connectedclusters/a0e1fd7d1d974ddf6b11a952d67679c9f12c006eee16861857a8268da4eb1498/1619989456957411072"),
				NamespaceName:        to.Ptr("azgnrelay-eastus-l1"),
				NamespaceNameSuffix:  to.Ptr("servicebus.windows.net"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.EndpointAccessResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.EndpointAccessResource)
			t.Fatalf("Mock response is not equal to example response for example specification/hybridconnectivity/resource-manager/Microsoft.HybridConnectivity/preview/2021-10-06-preview/examples/EndpointsPostListCredentials.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
