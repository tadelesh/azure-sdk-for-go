//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armdeviceupdate_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/deviceupdate/armdeviceupdate"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestDeviceUpdate_CheckNameAvailability(t *testing.T) {
	// From example specification/deviceupdate/resource-manager/Microsoft.DeviceUpdate/preview/2020-03-01-preview/examples/CheckNameAvailability_AlreadyExists.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CheckNameAvailability_AlreadyExists"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdeviceupdate.NewClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.CheckNameAvailability(ctx,
		armdeviceupdate.CheckNameAvailabilityRequest{
			Name: to.Ptr("contoso"),
			Type: to.Ptr("Microsoft.DeviceUpdate/accounts"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/deviceupdate/resource-manager/Microsoft.DeviceUpdate/preview/2020-03-01-preview/examples/CheckNameAvailability_AlreadyExists.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdeviceupdate.CheckNameAvailabilityResponse{
			Message:       to.Ptr("Resource name already exists"),
			NameAvailable: to.Ptr(false),
			Reason:        to.Ptr(armdeviceupdate.CheckNameAvailabilityReasonAlreadyExists),
		}
		if !reflect.DeepEqual(exampleRes, res.CheckNameAvailabilityResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CheckNameAvailabilityResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/deviceupdate/resource-manager/Microsoft.DeviceUpdate/preview/2020-03-01-preview/examples/CheckNameAvailability_AlreadyExists.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/deviceupdate/resource-manager/Microsoft.DeviceUpdate/preview/2020-03-01-preview/examples/CheckNameAvailability_Available.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CheckNameAvailability_Available"},
	})
	client = armdeviceupdate.NewClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err = client.CheckNameAvailability(ctx,
		armdeviceupdate.CheckNameAvailabilityRequest{
			Name: to.Ptr("contoso"),
			Type: to.Ptr("Microsoft.DeviceUpdate/accounts"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/deviceupdate/resource-manager/Microsoft.DeviceUpdate/preview/2020-03-01-preview/examples/CheckNameAvailability_Available.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdeviceupdate.CheckNameAvailabilityResponse{
			NameAvailable: to.Ptr(true),
		}
		if !reflect.DeepEqual(exampleRes, res.CheckNameAvailabilityResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CheckNameAvailabilityResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/deviceupdate/resource-manager/Microsoft.DeviceUpdate/preview/2020-03-01-preview/examples/CheckNameAvailability_Available.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAccounts_ListBySubscription(t *testing.T) {
	// From example specification/deviceupdate/resource-manager/Microsoft.DeviceUpdate/preview/2020-03-01-preview/examples/Accounts/Accounts_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get list of Accounts"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdeviceupdate.NewAccountsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.ListBySubscription(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/deviceupdate/resource-manager/Microsoft.DeviceUpdate/preview/2020-03-01-preview/examples/Accounts/Accounts_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdeviceupdate.AccountList{
			Value: []*armdeviceupdate.Account{
				{
					Name:     to.Ptr("contoso"),
					Type:     to.Ptr("Microsoft.DeviceUpdate/accounts"),
					ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/test-rg/providers/Microsoft.DeviceUpdate/accounts/contoso"),
					Location: to.Ptr("westus2"),
					Properties: &armdeviceupdate.AccountProperties{
						HostName: to.Ptr("contoso.api.adu.microsoft.com"),
						PrivateEndpointConnections: []*armdeviceupdate.PrivateEndpointConnection{
							{
								Name: to.Ptr("peexample01"),
								Type: to.Ptr("Microsoft.DeviceUpdate/accounts/privateEndpointConnections"),
								ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/test-rg/providers/Microsoft.DeviceUpdate/accounts/contoso/privateEndpointConnections/peexample01"),
								Properties: &armdeviceupdate.PrivateEndpointConnectionProperties{
									GroupIDs: []*string{
										to.Ptr("groupId")},
									PrivateEndpoint: &armdeviceupdate.PrivateEndpoint{
										ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/test-rg/providers/Microsoft.Network/privateEndpoints/peexample01"),
									},
									PrivateLinkServiceConnectionState: &armdeviceupdate.PrivateLinkServiceConnectionState{
										Description:     to.Ptr("Auto-Approved"),
										ActionsRequired: to.Ptr("None"),
										Status:          to.Ptr(armdeviceupdate.PrivateEndpointServiceConnectionStatusApproved),
									},
									ProvisioningState: to.Ptr(armdeviceupdate.PrivateEndpointConnectionProvisioningStateSucceeded),
								},
							}},
						ProvisioningState: to.Ptr(armdeviceupdate.ProvisioningStateSucceeded),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AccountList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AccountList)
			t.Fatalf("Mock response is not equal to example response for example specification/deviceupdate/resource-manager/Microsoft.DeviceUpdate/preview/2020-03-01-preview/examples/Accounts/Accounts_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAccounts_ListByResourceGroup(t *testing.T) {
	// From example specification/deviceupdate/resource-manager/Microsoft.DeviceUpdate/preview/2020-03-01-preview/examples/Accounts/Accounts_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets list of Accounts"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdeviceupdate.NewAccountsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.ListByResourceGroup("test-rg",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/deviceupdate/resource-manager/Microsoft.DeviceUpdate/preview/2020-03-01-preview/examples/Accounts/Accounts_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdeviceupdate.AccountList{
			Value: []*armdeviceupdate.Account{
				{
					Name:     to.Ptr("contoso"),
					Type:     to.Ptr("Microsoft.DeviceUpdate/accounts"),
					ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/test-rg/providers/Microsoft.DeviceUpdate/accounts/contoso"),
					Location: to.Ptr("westus2"),
					Properties: &armdeviceupdate.AccountProperties{
						HostName: to.Ptr("contoso.api.adu.microsoft.com"),
						PrivateEndpointConnections: []*armdeviceupdate.PrivateEndpointConnection{
							{
								Name: to.Ptr("peexample01"),
								Type: to.Ptr("Microsoft.DeviceUpdate/accounts/privateEndpointConnections"),
								ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/test-rg/providers/Microsoft.DeviceUpdate/accounts/contoso/privateEndpointConnections/peexample01"),
								Properties: &armdeviceupdate.PrivateEndpointConnectionProperties{
									GroupIDs: []*string{
										to.Ptr("groupId")},
									PrivateEndpoint: &armdeviceupdate.PrivateEndpoint{
										ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/test-rg/providers/Microsoft.Network/privateEndpoints/peexample01"),
									},
									PrivateLinkServiceConnectionState: &armdeviceupdate.PrivateLinkServiceConnectionState{
										Description:     to.Ptr("Auto-Approved"),
										ActionsRequired: to.Ptr("None"),
										Status:          to.Ptr(armdeviceupdate.PrivateEndpointServiceConnectionStatusApproved),
									},
									ProvisioningState: to.Ptr(armdeviceupdate.PrivateEndpointConnectionProvisioningStateSucceeded),
								},
							}},
						ProvisioningState: to.Ptr(armdeviceupdate.ProvisioningStateSucceeded),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AccountList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AccountList)
			t.Fatalf("Mock response is not equal to example response for example specification/deviceupdate/resource-manager/Microsoft.DeviceUpdate/preview/2020-03-01-preview/examples/Accounts/Accounts_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAccounts_Get(t *testing.T) {
	// From example specification/deviceupdate/resource-manager/Microsoft.DeviceUpdate/preview/2020-03-01-preview/examples/Accounts/Accounts_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets Account details"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdeviceupdate.NewAccountsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		"test-rg",
		"contoso",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/deviceupdate/resource-manager/Microsoft.DeviceUpdate/preview/2020-03-01-preview/examples/Accounts/Accounts_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdeviceupdate.Account{
			Name:     to.Ptr("contoso"),
			Type:     to.Ptr("Microsoft.DeviceUpdate/accounts"),
			ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/test-rg/providers/Microsoft.DeviceUpdate/accounts/contoso"),
			Location: to.Ptr("westus2"),
			Properties: &armdeviceupdate.AccountProperties{
				HostName: to.Ptr("contoso.api.adu.microsoft.com"),
				PrivateEndpointConnections: []*armdeviceupdate.PrivateEndpointConnection{
					{
						Name: to.Ptr("peexample01"),
						Type: to.Ptr("Microsoft.DeviceUpdate/accounts/privateEndpointConnections"),
						ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/test-rg/providers/Microsoft.DeviceUpdate/accounts/contoso/privateEndpointConnections/peexample01"),
						Properties: &armdeviceupdate.PrivateEndpointConnectionProperties{
							GroupIDs: []*string{
								to.Ptr("groupId")},
							PrivateEndpoint: &armdeviceupdate.PrivateEndpoint{
								ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/test-rg/providers/Microsoft.Network/privateEndpoints/peexample01"),
							},
							PrivateLinkServiceConnectionState: &armdeviceupdate.PrivateLinkServiceConnectionState{
								Description:     to.Ptr("Auto-Approved"),
								ActionsRequired: to.Ptr("None"),
								Status:          to.Ptr(armdeviceupdate.PrivateEndpointServiceConnectionStatusApproved),
							},
							ProvisioningState: to.Ptr(armdeviceupdate.PrivateEndpointConnectionProvisioningStateSucceeded),
						},
					}},
				ProvisioningState: to.Ptr(armdeviceupdate.ProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Account) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Account)
			t.Fatalf("Mock response is not equal to example response for example specification/deviceupdate/resource-manager/Microsoft.DeviceUpdate/preview/2020-03-01-preview/examples/Accounts/Accounts_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAccounts_Head(t *testing.T) {
	// From example specification/deviceupdate/resource-manager/Microsoft.DeviceUpdate/preview/2020-03-01-preview/examples/Accounts/Accounts_Head.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Checks whether account exists"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdeviceupdate.NewAccountsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	_, err := client.Head(ctx,
		"test-rg",
		"contoso",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/deviceupdate/resource-manager/Microsoft.DeviceUpdate/preview/2020-03-01-preview/examples/Accounts/Accounts_Head.json: %v", err)
	}
}

func TestAccounts_Create(t *testing.T) {
	// From example specification/deviceupdate/resource-manager/Microsoft.DeviceUpdate/preview/2020-03-01-preview/examples/Accounts/Accounts_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Creates or updates Account"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdeviceupdate.NewAccountsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginCreate(ctx,
		"test-rg",
		"contoso",
		armdeviceupdate.Account{
			Location:   to.Ptr("westus2"),
			Properties: &armdeviceupdate.AccountProperties{},
		},
		&armdeviceupdate.AccountsClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/deviceupdate/resource-manager/Microsoft.DeviceUpdate/preview/2020-03-01-preview/examples/Accounts/Accounts_Create.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/deviceupdate/resource-manager/Microsoft.DeviceUpdate/preview/2020-03-01-preview/examples/Accounts/Accounts_Create.json: %v", err)
	}
}

func TestAccounts_Delete(t *testing.T) {
	// From example specification/deviceupdate/resource-manager/Microsoft.DeviceUpdate/preview/2020-03-01-preview/examples/Accounts/Accounts_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Deletes an account"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdeviceupdate.NewAccountsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"test-rg",
		"contoso",
		&armdeviceupdate.AccountsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/deviceupdate/resource-manager/Microsoft.DeviceUpdate/preview/2020-03-01-preview/examples/Accounts/Accounts_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/deviceupdate/resource-manager/Microsoft.DeviceUpdate/preview/2020-03-01-preview/examples/Accounts/Accounts_Delete.json: %v", err)
	}
}

func TestAccounts_Update(t *testing.T) {
	// From example specification/deviceupdate/resource-manager/Microsoft.DeviceUpdate/preview/2020-03-01-preview/examples/Accounts/Accounts_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Updates Account"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdeviceupdate.NewAccountsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"test-rg",
		"contoso",
		armdeviceupdate.AccountUpdate{
			Tags: map[string]*string{
				"tagKey": to.Ptr("tagValue"),
			},
		},
		&armdeviceupdate.AccountsClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/deviceupdate/resource-manager/Microsoft.DeviceUpdate/preview/2020-03-01-preview/examples/Accounts/Accounts_Update.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/deviceupdate/resource-manager/Microsoft.DeviceUpdate/preview/2020-03-01-preview/examples/Accounts/Accounts_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdeviceupdate.Account{
			Name:     to.Ptr("contoso"),
			Type:     to.Ptr("Microsoft.DeviceUpdate/accounts"),
			ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/test-rg/providers/Microsoft.DeviceUpdate/accounts/contoso"),
			Location: to.Ptr("westus2"),
			Tags: map[string]*string{
				"tagKey": to.Ptr("tagValue"),
			},
			Properties: &armdeviceupdate.AccountProperties{
				HostName: to.Ptr("contoso.api.adu.microsoft.com"),
				PrivateEndpointConnections: []*armdeviceupdate.PrivateEndpointConnection{
					{
						Name: to.Ptr("peexample01"),
						Type: to.Ptr("Microsoft.DeviceUpdate/accounts/privateEndpointConnections"),
						ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/test-rg/providers/Microsoft.DeviceUpdate/accounts/contoso/privateEndpointConnections/peexample01"),
						Properties: &armdeviceupdate.PrivateEndpointConnectionProperties{
							GroupIDs: []*string{
								to.Ptr("groupId")},
							PrivateEndpoint: &armdeviceupdate.PrivateEndpoint{
								ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/test-rg/providers/Microsoft.Network/privateEndpoints/peexample01"),
							},
							PrivateLinkServiceConnectionState: &armdeviceupdate.PrivateLinkServiceConnectionState{
								Description:     to.Ptr("Auto-Approved"),
								ActionsRequired: to.Ptr("None"),
								Status:          to.Ptr(armdeviceupdate.PrivateEndpointServiceConnectionStatusApproved),
							},
							ProvisioningState: to.Ptr(armdeviceupdate.PrivateEndpointConnectionProvisioningStateSucceeded),
						},
					}},
				ProvisioningState: to.Ptr(armdeviceupdate.ProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Account) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Account)
			t.Fatalf("Mock response is not equal to example response for example specification/deviceupdate/resource-manager/Microsoft.DeviceUpdate/preview/2020-03-01-preview/examples/Accounts/Accounts_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestInstances_ListByAccount(t *testing.T) {
	// From example specification/deviceupdate/resource-manager/Microsoft.DeviceUpdate/preview/2020-03-01-preview/examples/Instances/Instances_ListByAccount.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets list of Instances by Account"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdeviceupdate.NewInstancesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.ListByAccount("test-rg",
		"contoso",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/deviceupdate/resource-manager/Microsoft.DeviceUpdate/preview/2020-03-01-preview/examples/Instances/Instances_ListByAccount.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdeviceupdate.InstanceList{
			Value: []*armdeviceupdate.Instance{
				{
					Name:     to.Ptr("blue"),
					Type:     to.Ptr("Microsoft.DeviceUpdate/accounts/instances"),
					ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/test-rg/providers/Microsoft.DeviceUpdate/accounts/contoso/instances/blue"),
					Location: to.Ptr("westus2"),
					Properties: &armdeviceupdate.InstanceProperties{
						AccountName: to.Ptr("contoso"),
						DiagnosticStorageProperties: &armdeviceupdate.DiagnosticStorageProperties{
							AuthenticationType: to.Ptr(armdeviceupdate.AuthenticationTypeKeyBased),
							ResourceID:         to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/adu-resource-group/providers/Microsoft.Storage/storageAccounts/testAccount"),
						},
						EnableDiagnostics: to.Ptr(false),
						IotHubs: []*armdeviceupdate.IotHubSettings{
							{
								ResourceID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/test-rg/providers/Microsoft.Devices/IotHubs/blue-contoso-hub"),
							}},
						ProvisioningState: to.Ptr(armdeviceupdate.ProvisioningStateSucceeded),
					},
				},
				{
					Name:     to.Ptr("red"),
					Type:     to.Ptr("Microsoft.DeviceUpdate/accounts/instances"),
					ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/test-rg/providers/Microsoft.DeviceUpdate/accounts/contoso/instances/red"),
					Location: to.Ptr("westus2"),
					Properties: &armdeviceupdate.InstanceProperties{
						AccountName: to.Ptr("contoso"),
						DiagnosticStorageProperties: &armdeviceupdate.DiagnosticStorageProperties{
							AuthenticationType: to.Ptr(armdeviceupdate.AuthenticationTypeKeyBased),
							ResourceID:         to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/adu-resource-group/providers/Microsoft.Storage/storageAccounts/testAccount"),
						},
						EnableDiagnostics: to.Ptr(false),
						IotHubs: []*armdeviceupdate.IotHubSettings{
							{
								ResourceID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/test-rg/providers/Microsoft.Devices/IotHubs/red-contoso-hub"),
							}},
						ProvisioningState: to.Ptr(armdeviceupdate.ProvisioningStateSucceeded),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.InstanceList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.InstanceList)
			t.Fatalf("Mock response is not equal to example response for example specification/deviceupdate/resource-manager/Microsoft.DeviceUpdate/preview/2020-03-01-preview/examples/Instances/Instances_ListByAccount.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestInstances_Get(t *testing.T) {
	// From example specification/deviceupdate/resource-manager/Microsoft.DeviceUpdate/preview/2020-03-01-preview/examples/Instances/Instances_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets list of Instances"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdeviceupdate.NewInstancesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		"test-rg",
		"contoso",
		"blue",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/deviceupdate/resource-manager/Microsoft.DeviceUpdate/preview/2020-03-01-preview/examples/Instances/Instances_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdeviceupdate.Instance{
			Name:     to.Ptr("blue"),
			Type:     to.Ptr("Microsoft.DeviceUpdate/accounts/instances"),
			ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/test-rg/providers/Microsoft.DeviceUpdate/accounts/contoso/instances/blue"),
			Location: to.Ptr("westus2"),
			Properties: &armdeviceupdate.InstanceProperties{
				AccountName: to.Ptr("contoso"),
				DiagnosticStorageProperties: &armdeviceupdate.DiagnosticStorageProperties{
					AuthenticationType: to.Ptr(armdeviceupdate.AuthenticationTypeKeyBased),
					ResourceID:         to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/adu-resource-group/providers/Microsoft.Storage/storageAccounts/testAccount"),
				},
				EnableDiagnostics: to.Ptr(false),
				IotHubs: []*armdeviceupdate.IotHubSettings{
					{
						ResourceID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/test-rg/providers/Microsoft.Devices/IotHubs/blue-contoso-hub"),
					}},
				ProvisioningState: to.Ptr(armdeviceupdate.ProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Instance) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Instance)
			t.Fatalf("Mock response is not equal to example response for example specification/deviceupdate/resource-manager/Microsoft.DeviceUpdate/preview/2020-03-01-preview/examples/Instances/Instances_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestInstances_Head(t *testing.T) {
	// From example specification/deviceupdate/resource-manager/Microsoft.DeviceUpdate/preview/2020-03-01-preview/examples/Instances/Instances_Head.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Checks whether instance exists."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdeviceupdate.NewInstancesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	_, err := client.Head(ctx,
		"test-rg",
		"contoso",
		"blue",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/deviceupdate/resource-manager/Microsoft.DeviceUpdate/preview/2020-03-01-preview/examples/Instances/Instances_Head.json: %v", err)
	}
}

func TestInstances_Create(t *testing.T) {
	// From example specification/deviceupdate/resource-manager/Microsoft.DeviceUpdate/preview/2020-03-01-preview/examples/Instances/Instances_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Creates or updates Instance"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdeviceupdate.NewInstancesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginCreate(ctx,
		"test-rg",
		"contoso",
		"blue",
		armdeviceupdate.Instance{
			Location: to.Ptr("westus2"),
			Properties: &armdeviceupdate.InstanceProperties{
				DiagnosticStorageProperties: &armdeviceupdate.DiagnosticStorageProperties{
					AuthenticationType: to.Ptr(armdeviceupdate.AuthenticationTypeKeyBased),
					ConnectionString:   to.Ptr("string"),
					ResourceID:         to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/adu-resource-group/providers/Microsoft.Storage/storageAccounts/testAccount"),
				},
				EnableDiagnostics: to.Ptr(false),
				IotHubs: []*armdeviceupdate.IotHubSettings{
					{
						EventHubConnectionString: to.Ptr("string"),
						IoTHubConnectionString:   to.Ptr("string"),
						ResourceID:               to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/test-rg/providers/Microsoft.Devices/IotHubs/blue-contoso-hub"),
					}},
			},
		},
		&armdeviceupdate.InstancesClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/deviceupdate/resource-manager/Microsoft.DeviceUpdate/preview/2020-03-01-preview/examples/Instances/Instances_Create.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/deviceupdate/resource-manager/Microsoft.DeviceUpdate/preview/2020-03-01-preview/examples/Instances/Instances_Create.json: %v", err)
	}
}

func TestInstances_Delete(t *testing.T) {
	// From example specification/deviceupdate/resource-manager/Microsoft.DeviceUpdate/preview/2020-03-01-preview/examples/Instances/Instances_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Deletes instance"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdeviceupdate.NewInstancesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"test-rg",
		"contoso",
		"blue",
		&armdeviceupdate.InstancesClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/deviceupdate/resource-manager/Microsoft.DeviceUpdate/preview/2020-03-01-preview/examples/Instances/Instances_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/deviceupdate/resource-manager/Microsoft.DeviceUpdate/preview/2020-03-01-preview/examples/Instances/Instances_Delete.json: %v", err)
	}
}

func TestInstances_Update(t *testing.T) {
	// From example specification/deviceupdate/resource-manager/Microsoft.DeviceUpdate/preview/2020-03-01-preview/examples/Instances/Instances_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Updates Instance"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdeviceupdate.NewInstancesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Update(ctx,
		"test-rg",
		"contoso",
		"blue",
		armdeviceupdate.TagUpdate{
			Tags: map[string]*string{
				"tagKey": to.Ptr("tagValue"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/deviceupdate/resource-manager/Microsoft.DeviceUpdate/preview/2020-03-01-preview/examples/Instances/Instances_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdeviceupdate.Instance{
			Name:     to.Ptr("blue"),
			Type:     to.Ptr("Microsoft.DeviceUpdate/accounts/instances"),
			ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/test-rg/providers/Microsoft.DeviceUpdate/accounts/contoso/instances/blue"),
			Location: to.Ptr("westus2"),
			Tags: map[string]*string{
				"tagKey": to.Ptr("tagValue"),
			},
			Properties: &armdeviceupdate.InstanceProperties{
				AccountName: to.Ptr("contoso"),
				DiagnosticStorageProperties: &armdeviceupdate.DiagnosticStorageProperties{
					AuthenticationType: to.Ptr(armdeviceupdate.AuthenticationTypeKeyBased),
					ResourceID:         to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/adu-resource-group/providers/Microsoft.Storage/storageAccounts/testAccount"),
				},
				EnableDiagnostics: to.Ptr(false),
				IotHubs: []*armdeviceupdate.IotHubSettings{
					{
						ResourceID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/test-rg/providers/Microsoft.Devices/IotHubs/blue-contoso-hub"),
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Instance) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Instance)
			t.Fatalf("Mock response is not equal to example response for example specification/deviceupdate/resource-manager/Microsoft.DeviceUpdate/preview/2020-03-01-preview/examples/Instances/Instances_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnections_ListByAccount(t *testing.T) {
	// From example specification/deviceupdate/resource-manager/Microsoft.DeviceUpdate/preview/2020-03-01-preview/examples/PrivateEndpointConnections/PrivateEndpointConnection_ListByAccount.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateEndpointConnectionList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdeviceupdate.NewPrivateEndpointConnectionsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.ListByAccount("test-rg",
		"contoso",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/deviceupdate/resource-manager/Microsoft.DeviceUpdate/preview/2020-03-01-preview/examples/PrivateEndpointConnections/PrivateEndpointConnection_ListByAccount.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdeviceupdate.PrivateEndpointConnectionListResult{
			Value: []*armdeviceupdate.PrivateEndpointConnection{
				{
					Name: to.Ptr("peexample01"),
					Type: to.Ptr("Microsoft.DeviceUpdate/accounts/privateEndpointConnections"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/test-rg/providers/Microsoft.DeviceUpdate/accounts/contoso/privateEndpointConnections/peexample01"),
					Properties: &armdeviceupdate.PrivateEndpointConnectionProperties{
						GroupIDs: []*string{
							to.Ptr("groupId")},
						PrivateEndpoint: &armdeviceupdate.PrivateEndpoint{
							ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/test-rg/providers/Microsoft.Network/privateEndpoints/peexample01"),
						},
						PrivateLinkServiceConnectionState: &armdeviceupdate.PrivateLinkServiceConnectionState{
							Description:     to.Ptr("Auto-Approved"),
							ActionsRequired: to.Ptr("None"),
							Status:          to.Ptr(armdeviceupdate.PrivateEndpointServiceConnectionStatusApproved),
						},
						ProvisioningState: to.Ptr(armdeviceupdate.PrivateEndpointConnectionProvisioningStateSucceeded),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PrivateEndpointConnectionListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PrivateEndpointConnectionListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/deviceupdate/resource-manager/Microsoft.DeviceUpdate/preview/2020-03-01-preview/examples/PrivateEndpointConnections/PrivateEndpointConnection_ListByAccount.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnections_Get(t *testing.T) {
	// From example specification/deviceupdate/resource-manager/Microsoft.DeviceUpdate/preview/2020-03-01-preview/examples/PrivateEndpointConnections/PrivateEndpointConnection_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateEndpointConnectionGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdeviceupdate.NewPrivateEndpointConnectionsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		"test-rg",
		"contoso",
		"peexample01",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/deviceupdate/resource-manager/Microsoft.DeviceUpdate/preview/2020-03-01-preview/examples/PrivateEndpointConnections/PrivateEndpointConnection_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdeviceupdate.PrivateEndpointConnection{
			Name: to.Ptr("peexample01"),
			Type: to.Ptr("Microsoft.DeviceUpdate/accounts/privateEndpointConnections"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/test-rg/providers/Microsoft.DeviceUpdate/accounts/contoso/privateEndpointConnections/peexample01"),
			Properties: &armdeviceupdate.PrivateEndpointConnectionProperties{
				GroupIDs: []*string{
					to.Ptr("groupId")},
				PrivateEndpoint: &armdeviceupdate.PrivateEndpoint{
					ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/test-rg/providers/Microsoft.Network/privateEndpoints/peexample01"),
				},
				PrivateLinkServiceConnectionState: &armdeviceupdate.PrivateLinkServiceConnectionState{
					Description:     to.Ptr("Auto-Approved"),
					ActionsRequired: to.Ptr("None"),
					Status:          to.Ptr(armdeviceupdate.PrivateEndpointServiceConnectionStatusApproved),
				},
				ProvisioningState: to.Ptr(armdeviceupdate.PrivateEndpointConnectionProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateEndpointConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/deviceupdate/resource-manager/Microsoft.DeviceUpdate/preview/2020-03-01-preview/examples/PrivateEndpointConnections/PrivateEndpointConnection_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnections_CreateOrUpdate(t *testing.T) {
	// From example specification/deviceupdate/resource-manager/Microsoft.DeviceUpdate/preview/2020-03-01-preview/examples/PrivateEndpointConnections/PrivateEndpointConnection_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateEndpointConnectionCreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdeviceupdate.NewPrivateEndpointConnectionsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"test-rg",
		"contoso",
		"peexample01",
		armdeviceupdate.PrivateEndpointConnection{
			Properties: &armdeviceupdate.PrivateEndpointConnectionProperties{
				PrivateLinkServiceConnectionState: &armdeviceupdate.PrivateLinkServiceConnectionState{
					Description: to.Ptr("Auto-Approved"),
					Status:      to.Ptr(armdeviceupdate.PrivateEndpointServiceConnectionStatusApproved),
				},
			},
		},
		&armdeviceupdate.PrivateEndpointConnectionsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/deviceupdate/resource-manager/Microsoft.DeviceUpdate/preview/2020-03-01-preview/examples/PrivateEndpointConnections/PrivateEndpointConnection_CreateOrUpdate.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/deviceupdate/resource-manager/Microsoft.DeviceUpdate/preview/2020-03-01-preview/examples/PrivateEndpointConnections/PrivateEndpointConnection_CreateOrUpdate.json: %v", err)
	}
}

func TestPrivateEndpointConnections_Delete(t *testing.T) {
	// From example specification/deviceupdate/resource-manager/Microsoft.DeviceUpdate/preview/2020-03-01-preview/examples/PrivateEndpointConnections/PrivateEndpointConnection_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateEndpointConnectionDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdeviceupdate.NewPrivateEndpointConnectionsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"test-rg",
		"contoso",
		"peexample01",
		&armdeviceupdate.PrivateEndpointConnectionsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/deviceupdate/resource-manager/Microsoft.DeviceUpdate/preview/2020-03-01-preview/examples/PrivateEndpointConnections/PrivateEndpointConnection_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/deviceupdate/resource-manager/Microsoft.DeviceUpdate/preview/2020-03-01-preview/examples/PrivateEndpointConnections/PrivateEndpointConnection_Delete.json: %v", err)
	}
}

func TestPrivateLinkResources_ListByAccount(t *testing.T) {
	// From example specification/deviceupdate/resource-manager/Microsoft.DeviceUpdate/preview/2020-03-01-preview/examples/PrivateLinkResources/PrivateLinkResources_ListByAccount.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateLinkResourcesList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdeviceupdate.NewPrivateLinkResourcesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.ListByAccount("test-rg",
		"contoso",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/deviceupdate/resource-manager/Microsoft.DeviceUpdate/preview/2020-03-01-preview/examples/PrivateLinkResources/PrivateLinkResources_ListByAccount.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdeviceupdate.PrivateLinkResourceListResult{
			Value: []*armdeviceupdate.GroupInformation{
				{
					Name: to.Ptr("adu"),
					Type: to.Ptr("Microsoft.DeviceUpdate/accounts/privateLinkResources"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/test-rg/providers/Microsoft.DeviceUpdate/accounts/contoso/privateLinkResources/adu"),
					Properties: &armdeviceupdate.GroupInformationProperties{
						GroupID: to.Ptr("adu"),
						RequiredMembers: []*string{
							to.Ptr("adu")},
						RequiredZoneNames: []*string{
							to.Ptr("privatelink.adu.microsoft.com")},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PrivateLinkResourceListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PrivateLinkResourceListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/deviceupdate/resource-manager/Microsoft.DeviceUpdate/preview/2020-03-01-preview/examples/PrivateLinkResources/PrivateLinkResources_ListByAccount.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateLinkResources_Get(t *testing.T) {
	// From example specification/deviceupdate/resource-manager/Microsoft.DeviceUpdate/preview/2020-03-01-preview/examples/PrivateLinkResources/PrivateLinkResources_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateLinkResourcesGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdeviceupdate.NewPrivateLinkResourcesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		"test-rg",
		"contoso",
		"adu",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/deviceupdate/resource-manager/Microsoft.DeviceUpdate/preview/2020-03-01-preview/examples/PrivateLinkResources/PrivateLinkResources_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdeviceupdate.GroupInformation{
			Name: to.Ptr("adu"),
			Type: to.Ptr("Microsoft.DeviceUpdate/accounts/privateLinkResources"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/test-rg/providers/Microsoft.DeviceUpdate/accounts/contoso/privateLinkResources/adu"),
			Properties: &armdeviceupdate.GroupInformationProperties{
				GroupID: to.Ptr("adu"),
				RequiredMembers: []*string{
					to.Ptr("adu")},
				RequiredZoneNames: []*string{
					to.Ptr("privatelink.adu.microsoft.com")},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.GroupInformation) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.GroupInformation)
			t.Fatalf("Mock response is not equal to example response for example specification/deviceupdate/resource-manager/Microsoft.DeviceUpdate/preview/2020-03-01-preview/examples/PrivateLinkResources/PrivateLinkResources_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnectionProxies_ListByAccount(t *testing.T) {
	// From example specification/deviceupdate/resource-manager/Microsoft.DeviceUpdate/preview/2020-03-01-preview/examples/PrivateEndpointConnectionProxies/PrivateEndpointConnectionProxy_ListByAccount.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateEndpointConnectionProxyList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdeviceupdate.NewPrivateEndpointConnectionProxiesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.ListByAccount("test-rg",
		"contoso",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/deviceupdate/resource-manager/Microsoft.DeviceUpdate/preview/2020-03-01-preview/examples/PrivateEndpointConnectionProxies/PrivateEndpointConnectionProxy_ListByAccount.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdeviceupdate.PrivateEndpointConnectionProxyListResult{
			Value: []*armdeviceupdate.PrivateEndpointConnectionProxy{
				{
					RemotePrivateEndpoint: &armdeviceupdate.RemotePrivateEndpoint{
						ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/test-rg/providers/Microsoft.Network/privateEndpoints/{privateEndpointConnectionProxyId}"),
						ManualPrivateLinkServiceConnections: []*armdeviceupdate.PrivateLinkServiceConnection{
							{
								Name: to.Ptr("{plsConnectionName}"),
								GroupIDs: []*string{
									to.Ptr("DeviceUpdate")},
								RequestMessage: to.Ptr("Please approve my connection, thanks."),
							}},
						PrivateLinkServiceProxies: []*armdeviceupdate.PrivateLinkServiceProxy{
							{
								GroupConnectivityInformation: []*armdeviceupdate.GroupConnectivityInformation{
									{
										GroupID:    to.Ptr("DeviceUpdate"),
										MemberName: to.Ptr("adu"),
									}},
								ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/test-rg/providers/Microsoft.Network/privateEndpoints/{privateEndpointConnectionProxyId}/privateLinkServiceProxies/{privateEndpointConnectionProxyId}"),
							}},
					},
					Name: to.Ptr("peexample01"),
					Type: to.Ptr("Microsoft.DeviceUpdate/accounts/privateEndpointConnectionProxies"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/test-rg/providers/Microsoft.DeviceUpdate/accounts/contoso/privateEndpointConnectionProxies/peexample01"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PrivateEndpointConnectionProxyListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PrivateEndpointConnectionProxyListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/deviceupdate/resource-manager/Microsoft.DeviceUpdate/preview/2020-03-01-preview/examples/PrivateEndpointConnectionProxies/PrivateEndpointConnectionProxy_ListByAccount.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnectionProxies_Validate(t *testing.T) {
	// From example specification/deviceupdate/resource-manager/Microsoft.DeviceUpdate/preview/2020-03-01-preview/examples/PrivateEndpointConnectionProxies/PrivateEndpointConnectionProxy_Validate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateEndpointConnectionProxyValidate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdeviceupdate.NewPrivateEndpointConnectionProxiesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	_, err := client.Validate(ctx,
		"test-rg",
		"contoso",
		"peexample01",
		armdeviceupdate.PrivateEndpointConnectionProxy{
			RemotePrivateEndpoint: &armdeviceupdate.RemotePrivateEndpoint{
				ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/test-rg/providers/Microsoft.Network/privateEndpoints/{privateEndpointConnectionProxyId}"),
				ManualPrivateLinkServiceConnections: []*armdeviceupdate.PrivateLinkServiceConnection{
					{
						Name: to.Ptr("{privateEndpointConnectionProxyId}"),
						GroupIDs: []*string{
							to.Ptr("DeviceUpdate")},
						RequestMessage: to.Ptr("Please approve my connection, thanks."),
					}},
				PrivateLinkServiceProxies: []*armdeviceupdate.PrivateLinkServiceProxy{
					{
						GroupConnectivityInformation: []*armdeviceupdate.GroupConnectivityInformation{},
						ID:                           to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/test-rg/providers/Microsoft.Network/privateEndpoints/{privateEndpointConnectionProxyId}/privateLinkServiceProxies/{privateEndpointConnectionProxyId}"),
					}},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/deviceupdate/resource-manager/Microsoft.DeviceUpdate/preview/2020-03-01-preview/examples/PrivateEndpointConnectionProxies/PrivateEndpointConnectionProxy_Validate.json: %v", err)
	}
}

func TestPrivateEndpointConnectionProxies_Get(t *testing.T) {
	// From example specification/deviceupdate/resource-manager/Microsoft.DeviceUpdate/preview/2020-03-01-preview/examples/PrivateEndpointConnectionProxies/PrivateEndpointConnectionProxy_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateEndpointConnectionProxyGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdeviceupdate.NewPrivateEndpointConnectionProxiesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		"test-rg",
		"contoso",
		"peexample01",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/deviceupdate/resource-manager/Microsoft.DeviceUpdate/preview/2020-03-01-preview/examples/PrivateEndpointConnectionProxies/PrivateEndpointConnectionProxy_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdeviceupdate.PrivateEndpointConnectionProxy{
			RemotePrivateEndpoint: &armdeviceupdate.RemotePrivateEndpoint{
				ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/test-rg/providers/Microsoft.Network/privateEndpoints/{privateEndpointConnectionProxyId}"),
				ManualPrivateLinkServiceConnections: []*armdeviceupdate.PrivateLinkServiceConnection{
					{
						Name: to.Ptr("{plsConnectionName}"),
						GroupIDs: []*string{
							to.Ptr("DeviceUpdate")},
						RequestMessage: to.Ptr("Please approve my connection, thanks."),
					}},
				PrivateLinkServiceProxies: []*armdeviceupdate.PrivateLinkServiceProxy{
					{
						GroupConnectivityInformation: []*armdeviceupdate.GroupConnectivityInformation{
							{
								GroupID:    to.Ptr("DeviceUpdate"),
								MemberName: to.Ptr("adu"),
							}},
						ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/test-rg/providers/Microsoft.Network/privateEndpoints/{privateEndpointConnectionProxyId}/privateLinkServiceProxies/{privateEndpointConnectionProxyId}"),
					}},
			},
			Name: to.Ptr("peexample01"),
			Type: to.Ptr("Microsoft.DeviceUpdate/accounts/privateEndpointConnectionProxies"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/test-rg/providers/Microsoft.DeviceUpdate/accounts/contoso/privateEndpointConnectionProxies/peexample01"),
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnectionProxy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateEndpointConnectionProxy)
			t.Fatalf("Mock response is not equal to example response for example specification/deviceupdate/resource-manager/Microsoft.DeviceUpdate/preview/2020-03-01-preview/examples/PrivateEndpointConnectionProxies/PrivateEndpointConnectionProxy_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnectionProxies_CreateOrUpdate(t *testing.T) {
	// From example specification/deviceupdate/resource-manager/Microsoft.DeviceUpdate/preview/2020-03-01-preview/examples/PrivateEndpointConnectionProxies/PrivateEndpointConnectionProxy_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateEndpointConnectionProxyCreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdeviceupdate.NewPrivateEndpointConnectionProxiesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"test-rg",
		"contoso",
		"peexample01",
		armdeviceupdate.PrivateEndpointConnectionProxy{
			RemotePrivateEndpoint: &armdeviceupdate.RemotePrivateEndpoint{
				ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/test-rg/providers/Microsoft.Network/privateEndpoints/{privateEndpointConnectionProxyId}"),
				ManualPrivateLinkServiceConnections: []*armdeviceupdate.PrivateLinkServiceConnection{
					{
						Name: to.Ptr("{privateEndpointConnectionProxyId}"),
						GroupIDs: []*string{
							to.Ptr("DeviceUpdate")},
						RequestMessage: to.Ptr("Please approve my connection, thanks."),
					}},
				PrivateLinkServiceProxies: []*armdeviceupdate.PrivateLinkServiceProxy{
					{
						GroupConnectivityInformation: []*armdeviceupdate.GroupConnectivityInformation{},
						ID:                           to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/test-rg/providers/Microsoft.Network/privateEndpoints/{privateEndpointConnectionProxyId}/privateLinkServiceProxies/{privateEndpointConnectionProxyId}"),
					}},
			},
		},
		&armdeviceupdate.PrivateEndpointConnectionProxiesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/deviceupdate/resource-manager/Microsoft.DeviceUpdate/preview/2020-03-01-preview/examples/PrivateEndpointConnectionProxies/PrivateEndpointConnectionProxy_CreateOrUpdate.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/deviceupdate/resource-manager/Microsoft.DeviceUpdate/preview/2020-03-01-preview/examples/PrivateEndpointConnectionProxies/PrivateEndpointConnectionProxy_CreateOrUpdate.json: %v", err)
	}
}

func TestPrivateEndpointConnectionProxies_Delete(t *testing.T) {
	// From example specification/deviceupdate/resource-manager/Microsoft.DeviceUpdate/preview/2020-03-01-preview/examples/PrivateEndpointConnectionProxies/PrivateEndpointConnectionProxy_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateEndpointConnectionProxyDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdeviceupdate.NewPrivateEndpointConnectionProxiesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"test-rg",
		"contoso",
		"peexample01",
		&armdeviceupdate.PrivateEndpointConnectionProxiesClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/deviceupdate/resource-manager/Microsoft.DeviceUpdate/preview/2020-03-01-preview/examples/PrivateEndpointConnectionProxies/PrivateEndpointConnectionProxy_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/deviceupdate/resource-manager/Microsoft.DeviceUpdate/preview/2020-03-01-preview/examples/PrivateEndpointConnectionProxies/PrivateEndpointConnectionProxy_Delete.json: %v", err)
	}
}

func TestOperations_List(t *testing.T) {
	// From example specification/deviceupdate/resource-manager/Microsoft.DeviceUpdate/preview/2020-03-01-preview/examples/Operations_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets list of Operations"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdeviceupdate.NewOperationsClient(cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/deviceupdate/resource-manager/Microsoft.DeviceUpdate/preview/2020-03-01-preview/examples/Operations_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdeviceupdate.OperationListResult{
			Value: []*armdeviceupdate.Operation{
				{
					Name: to.Ptr("Microsoft.DeviceUpdate/accounts/read"),
					Display: &armdeviceupdate.OperationDisplay{
						Description: to.Ptr("Returns the list of Device Update Accounts"),
						Operation:   to.Ptr("Get/List Accounts"),
						Provider:    to.Ptr("Microsoft.DeviceUpdate"),
						Resource:    to.Ptr("Device Update Account"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("Microsoft.DeviceUpdate/accounts/write"),
					Display: &armdeviceupdate.OperationDisplay{
						Description: to.Ptr("Creates or updates a Device Update Account"),
						Operation:   to.Ptr("Create/Update Account"),
						Provider:    to.Ptr("Microsoft.DeviceUpdate"),
						Resource:    to.Ptr("Device Update Account"),
					},
					IsDataAction: to.Ptr(false),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OperationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OperationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/deviceupdate/resource-manager/Microsoft.DeviceUpdate/preview/2020-03-01-preview/examples/Operations_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
