//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armconsumption_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/consumption/armconsumption"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestUsageDetails_List(t *testing.T) {
	// From example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/UsageDetailsListByBillingAccount.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"BillingAccountUsageDetailsList-Legacy"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armconsumption.NewUsageDetailsClient(cred, &options)
	pager := client.List("providers/Microsoft.Billing/BillingAccounts/1234",
		&armconsumption.UsageDetailsClientListOptions{Expand: nil,
			Filter:    nil,
			Skiptoken: nil,
			Top:       nil,
			Metric:    nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/UsageDetailsListByBillingAccount.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armconsumption.UsageDetailsListResult{
			Value: []armconsumption.UsageDetailClassification{
				&armconsumption.LegacyUsageDetail{
					Name: to.Ptr("usageDetails_Id1"),
					Type: to.Ptr("Microsoft.Consumption/usageDetails"),
					ID:   to.Ptr("/providers/Microsoft.Billing/BillingAccounts/1234/providers/Microsoft.Billing/billingPeriods/201903/providers/Microsoft.Consumption/usageDetails/usageDetails_Id1"),
					Tags: map[string]*string{
						"dev": to.Ptr("tools"),
						"env": to.Ptr("newcrp"),
					},
					Kind: to.Ptr(armconsumption.UsageDetailsKindLegacy),
					Properties: &armconsumption.LegacyUsageDetailProperties{
						AccountName:            to.Ptr("Account Name 1"),
						BenefitID:              to.Ptr("00000000-0000-0000-0000-000000000000"),
						BenefitName:            to.Ptr("Reservation_purchase_03-09-2018_10-59"),
						BillingAccountID:       to.Ptr("xxxxxxxx"),
						BillingAccountName:     to.Ptr("Account Name 1"),
						BillingCurrency:        to.Ptr("CAD"),
						BillingPeriodEndDate:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-03-31T00:00:00.0000000Z"); return t }()),
						BillingPeriodStartDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-03-01T00:00:00.0000000Z"); return t }()),
						BillingProfileID:       to.Ptr("xxxxxxxx"),
						BillingProfileName:     to.Ptr("Account Name 1"),
						ChargeType:             to.Ptr("Usage"),
						ConsumedService:        to.Ptr("Microsoft.Storage"),
						Cost:                   to.Ptr[float64](0.000295194820065),
						CostCenter:             to.Ptr("DEV"),
						Date:                   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-03-30T00:00:00.0000000Z"); return t }()),
						EffectivePrice:         to.Ptr[float64](0.000402776395232),
						InvoiceSection:         to.Ptr("Invoice Section 1"),
						IsAzureCreditEligible:  to.Ptr(false),
						MeterID:                to.Ptr("00000000-0000-0000-0000-000000000000"),
						OfferID:                to.Ptr("Offer Id 1"),
						PartNumber:             to.Ptr("Part Number 1"),
						Product:                to.Ptr("Product Name 1"),
						Quantity:               to.Ptr[float64](0.7329),
						ResourceGroup:          to.Ptr("Resource Group 1"),
						ResourceID:             to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/Resource Group 1/providers/Microsoft.Storage/storageAccounts/Resource Name 1"),
						ResourceLocation:       to.Ptr("USEast"),
						ResourceName:           to.Ptr("Resource Name 1"),
						SubscriptionID:         to.Ptr("00000000-0000-0000-0000-000000000000"),
						SubscriptionName:       to.Ptr("Subscription Name 1"),
						UnitPrice:              to.Ptr[float64](4.38),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.UsageDetailsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.UsageDetailsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/UsageDetailsListByBillingAccount.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/UsageDetailsListByMCABillingAccount.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"BillingAccountUsageDetailsList-Modern"},
	})
	client = armconsumption.NewUsageDetailsClient(cred, &options)
	pager = client.List("providers/Microsoft.Billing/BillingAccounts/1234:56789",
		&armconsumption.UsageDetailsClientListOptions{Expand: nil,
			Filter:    nil,
			Skiptoken: nil,
			Top:       nil,
			Metric:    nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/UsageDetailsListByMCABillingAccount.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armconsumption.UsageDetailsListResult{
			Value: []armconsumption.UsageDetailClassification{
				&armconsumption.ModernUsageDetail{
					Name: to.Ptr("usageDetails_Id1"),
					Type: to.Ptr("Microsoft.Consumption/usageDetails"),
					ID:   to.Ptr("/providers/Microsoft.Billing/BillingAccounts/1234:56789/providers/Microsoft.Consumption/usageDetails/usageDetails_Id1"),
					Tags: map[string]*string{
						"dev": to.Ptr("tools"),
						"env": to.Ptr("newcrp"),
					},
					Kind: to.Ptr(armconsumption.UsageDetailsKindModern),
					Properties: &armconsumption.ModernUsageDetailProperties{
						AdditionalInfo:               to.Ptr("{  \"UsageType\": \"ComputeHR\",  \"ImageType\": \"Windows Client BYOL\",  \"ServiceType\": \"Standard_D1\",  \"VMName\": null,  \"VMProperties\": null,  \"VCPUs\": 1,  \"CPUs\": 0}"),
						BenefitID:                    to.Ptr("00000000-0000-0000-0000-000000000000"),
						BenefitName:                  to.Ptr("Reservation_purchase_03-09-2018_10-59"),
						BillingAccountID:             to.Ptr("1234:56789"),
						BillingAccountName:           to.Ptr("Account Name 1"),
						BillingCurrencyCode:          to.Ptr("USD"),
						BillingPeriodEndDate:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-10-31T00:00:00.0000000Z"); return t }()),
						BillingPeriodStartDate:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-10-01T00:00:00.0000000Z"); return t }()),
						BillingProfileID:             to.Ptr("2468"),
						BillingProfileName:           to.Ptr("Account Name 1"),
						ChargeType:                   to.Ptr("Usage"),
						ConsumedService:              to.Ptr("Microsoft.Storage"),
						CostCenter:                   to.Ptr("DEV"),
						CostInBillingCurrency:        to.Ptr[float64](1.84763819095477),
						CostInPricingCurrency:        to.Ptr[float64](1.84763819095477),
						CostInUSD:                    to.Ptr[float64](1.84763819095477),
						CustomerName:                 to.Ptr("Modern Azure Customer 1"),
						CustomerTenantID:             to.Ptr("00000000-0000-0000-0000-000000000000"),
						Date:                         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-10-30T00:00:00.0000000Z"); return t }()),
						ExchangeRate:                 to.Ptr("1"),
						ExchangeRateDate:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-10-01T00:00:00Z"); return t }()),
						ExchangeRatePricingToBilling: to.Ptr[float64](0.077),
						Frequency:                    to.Ptr("UsageBased"),
						InstanceName:                 to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/Resource Group 1/providers/Microsoft.Storage/storageAccounts/Resource Name 1"),
						InvoiceID:                    to.Ptr(""),
						InvoiceSectionID:             to.Ptr("98765"),
						InvoiceSectionName:           to.Ptr("Invoice Section 1"),
						IsAzureCreditEligible:        to.Ptr(false),
						MarketPrice:                  to.Ptr[float64](0.077),
						MeterID:                      to.Ptr("00000000-0000-0000-0000-000000000000"),
						PartnerEarnedCreditApplied:   to.Ptr("0"),
						PartnerEarnedCreditRate:      to.Ptr[float64](0.077),
						PartnerName:                  to.Ptr("Partner Name 1"),
						PartnerTenantID:              to.Ptr("00000000-0000-0000-0000-000000000000"),
						PaygCostInBillingCurrency:    to.Ptr[float64](1.848),
						PaygCostInUSD:                to.Ptr[float64](1.848),
						PreviousInvoiceID:            to.Ptr(""),
						PricingCurrencyCode:          to.Ptr("USD"),
						Product:                      to.Ptr("Virtual Machines D Series - D1 - US East"),
						ProductIdentifier:            to.Ptr("DZH318Z0BQ4B00FV"),
						ProductOrderID:               to.Ptr("a3db7880-70eb-4b4c-6a79-1425a058df5a"),
						ProductOrderName:             to.Ptr("Azure plan"),
						PublisherID:                  to.Ptr(""),
						PublisherName:                to.Ptr("Microsoft"),
						PublisherType:                to.Ptr("Microsoft"),
						Quantity:                     to.Ptr[float64](0.7329),
						ResellerMpnID:                to.Ptr(""),
						ResellerName:                 to.Ptr("Reseller Name 1"),
						ReservationID:                to.Ptr(""),
						ReservationName:              to.Ptr(""),
						ResourceGroup:                to.Ptr("Resource Group 1"),
						ResourceLocation:             to.Ptr("USEast"),
						ResourceLocationNormalized:   to.Ptr("US East"),
						ServiceInfo1:                 to.Ptr(""),
						ServiceInfo2:                 to.Ptr("Windows Client BYOL"),
						ServicePeriodEndDate:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-12-01T00:00:00Z"); return t }()),
						ServicePeriodStartDate:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-10-01T00:00:00Z"); return t }()),
						SubscriptionGUID:             to.Ptr("00000000-0000-0000-0000-000000000000"),
						SubscriptionName:             to.Ptr("Subscription Name 1"),
						Term:                         to.Ptr(""),
						UnitPrice:                    to.Ptr[float64](4.38),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.UsageDetailsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.UsageDetailsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/UsageDetailsListByMCABillingAccount.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/UsageDetailsListForBillingPeriodByBillingAccount.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"BillingAccountUsageDetailsListForBillingPeriod-Legacy"},
	})
	client = armconsumption.NewUsageDetailsClient(cred, &options)
	pager = client.List("providers/Microsoft.Billing/BillingAccounts/1234",
		&armconsumption.UsageDetailsClientListOptions{Expand: nil,
			Filter:    nil,
			Skiptoken: nil,
			Top:       nil,
			Metric:    nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/UsageDetailsListForBillingPeriodByBillingAccount.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armconsumption.UsageDetailsListResult{
			Value: []armconsumption.UsageDetailClassification{
				&armconsumption.LegacyUsageDetail{
					Name: to.Ptr("usageDetails_Id1"),
					Type: to.Ptr("Microsoft.Consumption/usageDetails"),
					ID:   to.Ptr("/providers/Microsoft.Billing/BillingAccounts/1234/providers/Microsoft.Billing/billingPeriods/201903/providers/Microsoft.Consumption/usageDetails/usageDetails_Id1"),
					Tags: map[string]*string{
						"dev": to.Ptr("tools"),
						"env": to.Ptr("newcrp"),
					},
					Kind: to.Ptr(armconsumption.UsageDetailsKindLegacy),
					Properties: &armconsumption.LegacyUsageDetailProperties{
						AccountName:            to.Ptr("Account Name 1"),
						BenefitID:              to.Ptr("00000000-0000-0000-0000-000000000000"),
						BenefitName:            to.Ptr("Reservation_purchase_03-09-2018_10-59"),
						BillingAccountID:       to.Ptr("xxxxxxxx"),
						BillingAccountName:     to.Ptr("Account Name 1"),
						BillingCurrency:        to.Ptr("CAD"),
						BillingPeriodEndDate:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-03-31T00:00:00.0000000Z"); return t }()),
						BillingPeriodStartDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-03-01T00:00:00.0000000Z"); return t }()),
						BillingProfileID:       to.Ptr("xxxxxxxx"),
						BillingProfileName:     to.Ptr("Account Name 1"),
						ChargeType:             to.Ptr("Usage"),
						ConsumedService:        to.Ptr("Microsoft.Storage"),
						Cost:                   to.Ptr[float64](0.000342194841184),
						CostCenter:             to.Ptr("DEV"),
						Date:                   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-03-30T00:00:00.0000000Z"); return t }()),
						EffectivePrice:         to.Ptr[float64](0.010534556373432),
						InvoiceSection:         to.Ptr("Invoice Section 1"),
						IsAzureCreditEligible:  to.Ptr(false),
						MeterID:                to.Ptr("00000000-0000-0000-0000-000000000000"),
						OfferID:                to.Ptr("Offer Id 1"),
						PartNumber:             to.Ptr("Part Number 1"),
						Product:                to.Ptr("Product Name 1"),
						Quantity:               to.Ptr[float64](0.8234),
						ResourceGroup:          to.Ptr("Resource Group 1"),
						ResourceID:             to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/Resource Group 1/providers/Microsoft.Storage/storageAccounts/Resource Name 1"),
						ResourceLocation:       to.Ptr("USEast"),
						ResourceName:           to.Ptr("Resource Name 1"),
						SubscriptionID:         to.Ptr("00000000-0000-0000-0000-000000000000"),
						SubscriptionName:       to.Ptr("Subscription Name 1"),
						UnitPrice:              to.Ptr[float64](3.74),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.UsageDetailsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.UsageDetailsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/UsageDetailsListForBillingPeriodByBillingAccount.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/UsageDetailsListByMCABillingProfile.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"BillingProfileUsageDetailsList-Modern"},
	})
	client = armconsumption.NewUsageDetailsClient(cred, &options)
	pager = client.List("providers/Microsoft.Billing/BillingAccounts/1234:56789/billingProfiles/2468",
		&armconsumption.UsageDetailsClientListOptions{Expand: nil,
			Filter:    nil,
			Skiptoken: nil,
			Top:       nil,
			Metric:    nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/UsageDetailsListByMCABillingProfile.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armconsumption.UsageDetailsListResult{
			Value: []armconsumption.UsageDetailClassification{
				&armconsumption.ModernUsageDetail{
					Name: to.Ptr("usageDetails_Id1"),
					Type: to.Ptr("Microsoft.Consumption/usageDetails"),
					ID:   to.Ptr("/providers/Microsoft.Billing/BillingAccounts/1234:56789/billingProfiles/2468/providers/Microsoft.Consumption/usageDetails/usageDetails_Id1"),
					Tags: map[string]*string{
						"dev": to.Ptr("tools"),
						"env": to.Ptr("newcrp"),
					},
					Kind: to.Ptr(armconsumption.UsageDetailsKindModern),
					Properties: &armconsumption.ModernUsageDetailProperties{
						AdditionalInfo:               to.Ptr("{  \"UsageType\": \"ComputeHR\",  \"ImageType\": \"Windows Client BYOL\",  \"ServiceType\": \"Standard_D1\",  \"VMName\": null,  \"VMProperties\": null,  \"VCPUs\": 1,  \"CPUs\": 0}"),
						BenefitID:                    to.Ptr("00000000-0000-0000-0000-000000000000"),
						BenefitName:                  to.Ptr("Reservation_purchase_03-09-2018_10-59"),
						BillingAccountID:             to.Ptr("1234:56789"),
						BillingAccountName:           to.Ptr("Account Name 1"),
						BillingCurrencyCode:          to.Ptr("USD"),
						BillingPeriodEndDate:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-10-31T00:00:00.0000000Z"); return t }()),
						BillingPeriodStartDate:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-10-01T00:00:00.0000000Z"); return t }()),
						BillingProfileID:             to.Ptr("2468"),
						BillingProfileName:           to.Ptr("Account Name 1"),
						ChargeType:                   to.Ptr("Usage"),
						ConsumedService:              to.Ptr("Microsoft.Storage"),
						CostCenter:                   to.Ptr("DEV"),
						CostInBillingCurrency:        to.Ptr[float64](1.84763819095477),
						CostInPricingCurrency:        to.Ptr[float64](1.84763819095477),
						CostInUSD:                    to.Ptr[float64](1.84763819095477),
						CustomerName:                 to.Ptr("Modern Azure Customer 1"),
						CustomerTenantID:             to.Ptr("00000000-0000-0000-0000-000000000000"),
						Date:                         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-10-30T00:00:00.0000000Z"); return t }()),
						ExchangeRate:                 to.Ptr("1"),
						ExchangeRateDate:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-10-01T00:00:00Z"); return t }()),
						ExchangeRatePricingToBilling: to.Ptr[float64](0.077),
						Frequency:                    to.Ptr("UsageBased"),
						InstanceName:                 to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/Resource Group 1/providers/Microsoft.Storage/storageAccounts/Resource Name 1"),
						InvoiceID:                    to.Ptr(""),
						InvoiceSectionID:             to.Ptr("98765"),
						InvoiceSectionName:           to.Ptr("Invoice Section 1"),
						IsAzureCreditEligible:        to.Ptr(false),
						MarketPrice:                  to.Ptr[float64](0.077),
						MeterID:                      to.Ptr("00000000-0000-0000-0000-000000000000"),
						PartnerEarnedCreditApplied:   to.Ptr("0"),
						PartnerEarnedCreditRate:      to.Ptr[float64](0.077),
						PartnerName:                  to.Ptr("Partner Name 1"),
						PartnerTenantID:              to.Ptr("00000000-0000-0000-0000-000000000000"),
						PaygCostInBillingCurrency:    to.Ptr[float64](1.848),
						PaygCostInUSD:                to.Ptr[float64](1.848),
						PreviousInvoiceID:            to.Ptr(""),
						PricingCurrencyCode:          to.Ptr("USD"),
						Product:                      to.Ptr("Virtual Machines D Series - D1 - US East"),
						ProductIdentifier:            to.Ptr("DZH318Z0BQ4B00FV"),
						ProductOrderID:               to.Ptr("a3db7880-70eb-4b4c-6a79-1425a058df5a"),
						ProductOrderName:             to.Ptr("Azure plan"),
						PublisherID:                  to.Ptr(""),
						PublisherName:                to.Ptr("Microsoft"),
						PublisherType:                to.Ptr("Microsoft"),
						Quantity:                     to.Ptr[float64](0.7329),
						ResellerMpnID:                to.Ptr(""),
						ResellerName:                 to.Ptr("Reseller Name 1"),
						ReservationID:                to.Ptr(""),
						ReservationName:              to.Ptr(""),
						ResourceGroup:                to.Ptr("Resource Group 1"),
						ResourceLocation:             to.Ptr("USEast"),
						ResourceLocationNormalized:   to.Ptr("US East"),
						ServiceInfo1:                 to.Ptr(""),
						ServiceInfo2:                 to.Ptr("Windows Client BYOL"),
						ServicePeriodEndDate:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-12-01T00:00:00Z"); return t }()),
						ServicePeriodStartDate:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-10-01T00:00:00Z"); return t }()),
						SubscriptionGUID:             to.Ptr("00000000-0000-0000-0000-000000000000"),
						SubscriptionName:             to.Ptr("Subscription Name 1"),
						Term:                         to.Ptr(""),
						UnitPrice:                    to.Ptr[float64](4.38),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.UsageDetailsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.UsageDetailsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/UsageDetailsListByMCABillingProfile.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/UsageDetailsListByMCACustomer.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CustomerUsageDetailsList-Modern"},
	})
	client = armconsumption.NewUsageDetailsClient(cred, &options)
	pager = client.List("providers/Microsoft.Billing/BillingAccounts/1234:56789/customers/00000000-0000-0000-0000-000000000000",
		&armconsumption.UsageDetailsClientListOptions{Expand: nil,
			Filter:    nil,
			Skiptoken: nil,
			Top:       nil,
			Metric:    nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/UsageDetailsListByMCACustomer.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armconsumption.UsageDetailsListResult{
			Value: []armconsumption.UsageDetailClassification{
				&armconsumption.ModernUsageDetail{
					Name: to.Ptr("usageDetails_Id1"),
					Type: to.Ptr("Microsoft.Consumption/usageDetails"),
					ID:   to.Ptr("/providers/Microsoft.Billing/BillingAccounts/1234:56789/customers/00000000-0000-0000-0000-000000000000/providers/Microsoft.Consumption/usageDetails/usageDetails_Id1"),
					Tags: map[string]*string{
						"dev": to.Ptr("tools"),
						"env": to.Ptr("newcrp"),
					},
					Kind: to.Ptr(armconsumption.UsageDetailsKindModern),
					Properties: &armconsumption.ModernUsageDetailProperties{
						AdditionalInfo:               to.Ptr("{  \"UsageType\": \"ComputeHR\",  \"ImageType\": \"Windows Client BYOL\",  \"ServiceType\": \"Standard_D1\",  \"VMName\": null,  \"VMProperties\": null,  \"VCPUs\": 1,  \"CPUs\": 0}"),
						BenefitID:                    to.Ptr("00000000-0000-0000-0000-000000000000"),
						BenefitName:                  to.Ptr("Reservation_purchase_03-09-2018_10-59"),
						BillingAccountID:             to.Ptr("1234:56789"),
						BillingAccountName:           to.Ptr("Account Name 1"),
						BillingCurrencyCode:          to.Ptr("USD"),
						BillingPeriodEndDate:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-10-31T00:00:00.0000000Z"); return t }()),
						BillingPeriodStartDate:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-10-01T00:00:00.0000000Z"); return t }()),
						BillingProfileID:             to.Ptr("2468"),
						BillingProfileName:           to.Ptr("Account Name 1"),
						ChargeType:                   to.Ptr("Usage"),
						ConsumedService:              to.Ptr("Microsoft.Storage"),
						CostCenter:                   to.Ptr("DEV"),
						CostInBillingCurrency:        to.Ptr[float64](1.84763819095477),
						CostInPricingCurrency:        to.Ptr[float64](1.84763819095477),
						CostInUSD:                    to.Ptr[float64](1.84763819095477),
						CustomerName:                 to.Ptr("Modern Azure Customer 1"),
						CustomerTenantID:             to.Ptr("00000000-0000-0000-0000-000000000000"),
						Date:                         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-10-30T00:00:00.0000000Z"); return t }()),
						ExchangeRate:                 to.Ptr("1"),
						ExchangeRateDate:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-10-01T00:00:00Z"); return t }()),
						ExchangeRatePricingToBilling: to.Ptr[float64](0.077),
						Frequency:                    to.Ptr("UsageBased"),
						InstanceName:                 to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/Resource Group 1/providers/Microsoft.Storage/storageAccounts/Resource Name 1"),
						InvoiceID:                    to.Ptr(""),
						InvoiceSectionID:             to.Ptr("98765"),
						InvoiceSectionName:           to.Ptr("Invoice Section 1"),
						IsAzureCreditEligible:        to.Ptr(false),
						MarketPrice:                  to.Ptr[float64](0.077),
						MeterID:                      to.Ptr("00000000-0000-0000-0000-000000000000"),
						PartnerEarnedCreditApplied:   to.Ptr("0"),
						PartnerEarnedCreditRate:      to.Ptr[float64](0.077),
						PartnerName:                  to.Ptr("Partner Name 1"),
						PartnerTenantID:              to.Ptr("00000000-0000-0000-0000-000000000000"),
						PaygCostInBillingCurrency:    to.Ptr[float64](1.848),
						PaygCostInUSD:                to.Ptr[float64](1.848),
						PreviousInvoiceID:            to.Ptr(""),
						PricingCurrencyCode:          to.Ptr("USD"),
						Product:                      to.Ptr("Virtual Machines D Series - D1 - US East"),
						ProductIdentifier:            to.Ptr("DZH318Z0BQ4B00FV"),
						ProductOrderID:               to.Ptr("a3db7880-70eb-4b4c-6a79-1425a058df5a"),
						ProductOrderName:             to.Ptr("Azure plan"),
						PublisherID:                  to.Ptr(""),
						PublisherName:                to.Ptr("Microsoft"),
						PublisherType:                to.Ptr("Microsoft"),
						Quantity:                     to.Ptr[float64](0.7329),
						ResellerMpnID:                to.Ptr(""),
						ResellerName:                 to.Ptr("Reseller Name 1"),
						ReservationID:                to.Ptr(""),
						ReservationName:              to.Ptr(""),
						ResourceGroup:                to.Ptr("Resource Group 1"),
						ResourceLocation:             to.Ptr("USEast"),
						ResourceLocationNormalized:   to.Ptr("US East"),
						ServiceInfo1:                 to.Ptr(""),
						ServiceInfo2:                 to.Ptr("Windows Client BYOL"),
						ServicePeriodEndDate:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-12-01T00:00:00Z"); return t }()),
						ServicePeriodStartDate:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-10-01T00:00:00Z"); return t }()),
						SubscriptionGUID:             to.Ptr("00000000-0000-0000-0000-000000000000"),
						SubscriptionName:             to.Ptr("Subscription Name 1"),
						Term:                         to.Ptr(""),
						UnitPrice:                    to.Ptr[float64](4.38),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.UsageDetailsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.UsageDetailsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/UsageDetailsListByMCACustomer.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/UsageDetailsListByDepartment.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DepartmentUsageDetailsList-Legacy"},
	})
	client = armconsumption.NewUsageDetailsClient(cred, &options)
	pager = client.List("providers/Microsoft.Billing/Departments/1234",
		&armconsumption.UsageDetailsClientListOptions{Expand: nil,
			Filter:    nil,
			Skiptoken: nil,
			Top:       nil,
			Metric:    nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/UsageDetailsListByDepartment.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armconsumption.UsageDetailsListResult{
			Value: []armconsumption.UsageDetailClassification{
				&armconsumption.LegacyUsageDetail{
					Name: to.Ptr("usageDetails_Id1"),
					Type: to.Ptr("Microsoft.Consumption/usageDetails"),
					ID:   to.Ptr("/providers/Microsoft.Billing/Departments/1234/providers/Microsoft.Billing/billingPeriods/201903/providers/Microsoft.Consumption/usageDetails/usageDetails_Id1"),
					Tags: map[string]*string{
						"dev": to.Ptr("tools"),
						"env": to.Ptr("newcrp"),
					},
					Kind: to.Ptr(armconsumption.UsageDetailsKindLegacy),
					Properties: &armconsumption.LegacyUsageDetailProperties{
						AccountName:            to.Ptr("Account Name 1"),
						BenefitID:              to.Ptr("00000000-0000-0000-0000-000000000000"),
						BenefitName:            to.Ptr("Reservation_purchase_03-09-2018_10-59"),
						BillingAccountID:       to.Ptr("xxxxxxxx"),
						BillingAccountName:     to.Ptr("Account Name 1"),
						BillingCurrency:        to.Ptr("CAD"),
						BillingPeriodEndDate:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-03-31T00:00:00.0000000Z"); return t }()),
						BillingPeriodStartDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-03-01T00:00:00.0000000Z"); return t }()),
						BillingProfileID:       to.Ptr("xxxxxxxx"),
						BillingProfileName:     to.Ptr("Account Name 1"),
						ChargeType:             to.Ptr("Usage"),
						ConsumedService:        to.Ptr("Microsoft.Storage"),
						Cost:                   to.Ptr[float64](0.000295194820065),
						CostCenter:             to.Ptr("DEV"),
						Date:                   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-03-30T00:00:00.0000000Z"); return t }()),
						EffectivePrice:         to.Ptr[float64](0.000402776395232),
						InvoiceSection:         to.Ptr("Invoice Section 1"),
						IsAzureCreditEligible:  to.Ptr(false),
						MeterID:                to.Ptr("00000000-0000-0000-0000-000000000000"),
						OfferID:                to.Ptr("Offer Id 1"),
						PartNumber:             to.Ptr("Part Number 1"),
						Product:                to.Ptr("Product Name 1"),
						Quantity:               to.Ptr[float64](0.7329),
						ResourceGroup:          to.Ptr("Resource Group 1"),
						ResourceID:             to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/Resource Group 1/providers/Microsoft.Storage/storageAccounts/Resource Name 1"),
						ResourceLocation:       to.Ptr("USEast"),
						ResourceName:           to.Ptr("Resource Name 1"),
						SubscriptionID:         to.Ptr("00000000-0000-0000-0000-000000000000"),
						SubscriptionName:       to.Ptr("Subscription Name 1"),
						UnitPrice:              to.Ptr[float64](4.38),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.UsageDetailsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.UsageDetailsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/UsageDetailsListByDepartment.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/UsageDetailsListForBillingPeriodByDepartment.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DepartmentUsageDetailsListForBillingPeriod-Legacy"},
	})
	client = armconsumption.NewUsageDetailsClient(cred, &options)
	pager = client.List("providers/Microsoft.Billing/Departments/1234",
		&armconsumption.UsageDetailsClientListOptions{Expand: nil,
			Filter:    nil,
			Skiptoken: nil,
			Top:       nil,
			Metric:    nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/UsageDetailsListForBillingPeriodByDepartment.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armconsumption.UsageDetailsListResult{
			Value: []armconsumption.UsageDetailClassification{
				&armconsumption.LegacyUsageDetail{
					Name: to.Ptr("usageDetails_Id1"),
					Type: to.Ptr("Microsoft.Consumption/usageDetails"),
					ID:   to.Ptr("/providers/Microsoft.Billing/Departments/1234/providers/Microsoft.Billing/billingPeriods/201903/providers/Microsoft.Consumption/usageDetails/usageDetails_Id1"),
					Tags: map[string]*string{
						"dev": to.Ptr("tools"),
						"env": to.Ptr("newcrp"),
					},
					Kind: to.Ptr(armconsumption.UsageDetailsKindLegacy),
					Properties: &armconsumption.LegacyUsageDetailProperties{
						AccountName:            to.Ptr("Account Name 1"),
						BenefitID:              to.Ptr("00000000-0000-0000-0000-000000000000"),
						BenefitName:            to.Ptr("Reservation_purchase_03-09-2018_10-59"),
						BillingAccountID:       to.Ptr("xxxxxxxx"),
						BillingAccountName:     to.Ptr("Account Name 1"),
						BillingCurrency:        to.Ptr("CAD"),
						BillingPeriodEndDate:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-03-31T00:00:00.0000000Z"); return t }()),
						BillingPeriodStartDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-03-01T00:00:00.0000000Z"); return t }()),
						BillingProfileID:       to.Ptr("xxxxxxxx"),
						BillingProfileName:     to.Ptr("Account Name 1"),
						ChargeType:             to.Ptr("Usage"),
						ConsumedService:        to.Ptr("Microsoft.Storage"),
						Cost:                   to.Ptr[float64](0.000342194841184),
						CostCenter:             to.Ptr("DEV"),
						Date:                   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-03-30T00:00:00.0000000Z"); return t }()),
						EffectivePrice:         to.Ptr[float64](0.010534556373432),
						InvoiceSection:         to.Ptr("Invoice Section 1"),
						IsAzureCreditEligible:  to.Ptr(false),
						MeterID:                to.Ptr("00000000-0000-0000-0000-000000000000"),
						OfferID:                to.Ptr("Offer Id 1"),
						PartNumber:             to.Ptr("Part Number 1"),
						Product:                to.Ptr("Product Name 1"),
						Quantity:               to.Ptr[float64](0.8234),
						ResourceGroup:          to.Ptr("Resource Group 1"),
						ResourceID:             to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/Resource Group 1/providers/Microsoft.Storage/storageAccounts/Resource Name 1"),
						ResourceLocation:       to.Ptr("USEast"),
						ResourceName:           to.Ptr("Resource Name 1"),
						SubscriptionID:         to.Ptr("00000000-0000-0000-0000-000000000000"),
						SubscriptionName:       to.Ptr("Subscription Name 1"),
						UnitPrice:              to.Ptr[float64](3.74),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.UsageDetailsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.UsageDetailsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/UsageDetailsListForBillingPeriodByDepartment.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/UsageDetailsListByEnrollmentAccount.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"EnrollmentAccountUsageDetailsList-Legacy"},
	})
	client = armconsumption.NewUsageDetailsClient(cred, &options)
	pager = client.List("providers/Microsoft.Billing/EnrollmentAccounts/1234",
		&armconsumption.UsageDetailsClientListOptions{Expand: nil,
			Filter:    nil,
			Skiptoken: nil,
			Top:       nil,
			Metric:    nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/UsageDetailsListByEnrollmentAccount.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armconsumption.UsageDetailsListResult{
			Value: []armconsumption.UsageDetailClassification{
				&armconsumption.LegacyUsageDetail{
					Name: to.Ptr("usageDetails_Id1"),
					Type: to.Ptr("Microsoft.Consumption/usageDetails"),
					ID:   to.Ptr("/providers/Microsoft.Billing/EnrollmentAccounts/1234/providers/Microsoft.Billing/billingPeriods/201903/providers/Microsoft.Consumption/usageDetails/usageDetails_Id1"),
					Tags: map[string]*string{
						"dev": to.Ptr("tools"),
						"env": to.Ptr("newcrp"),
					},
					Kind: to.Ptr(armconsumption.UsageDetailsKindLegacy),
					Properties: &armconsumption.LegacyUsageDetailProperties{
						AccountName:            to.Ptr("Account Name 1"),
						BenefitID:              to.Ptr("00000000-0000-0000-0000-000000000000"),
						BenefitName:            to.Ptr("Reservation_purchase_03-09-2018_10-59"),
						BillingAccountID:       to.Ptr("xxxxxxxx"),
						BillingAccountName:     to.Ptr("Account Name 1"),
						BillingCurrency:        to.Ptr("CAD"),
						BillingPeriodEndDate:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-03-31T00:00:00.0000000Z"); return t }()),
						BillingPeriodStartDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-03-01T00:00:00.0000000Z"); return t }()),
						BillingProfileID:       to.Ptr("xxxxxxxx"),
						BillingProfileName:     to.Ptr("Account Name 1"),
						ChargeType:             to.Ptr("Usage"),
						ConsumedService:        to.Ptr("Microsoft.Storage"),
						Cost:                   to.Ptr[float64](0.000295194820065),
						CostCenter:             to.Ptr("DEV"),
						Date:                   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-03-30T00:00:00.0000000Z"); return t }()),
						EffectivePrice:         to.Ptr[float64](0.000402776395232),
						InvoiceSection:         to.Ptr("Invoice Section 1"),
						IsAzureCreditEligible:  to.Ptr(false),
						MeterID:                to.Ptr("00000000-0000-0000-0000-000000000000"),
						OfferID:                to.Ptr("Offer Id 1"),
						PartNumber:             to.Ptr("Part Number 1"),
						Product:                to.Ptr("Product Name 1"),
						Quantity:               to.Ptr[float64](0.7329),
						ResourceGroup:          to.Ptr("Resource Group 1"),
						ResourceID:             to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/Resource Group 1/providers/Microsoft.Storage/storageAccounts/Resource Name 1"),
						ResourceLocation:       to.Ptr("USEast"),
						ResourceName:           to.Ptr("Resource Name 1"),
						SubscriptionID:         to.Ptr("00000000-0000-0000-0000-000000000000"),
						SubscriptionName:       to.Ptr("Subscription Name 1"),
						UnitPrice:              to.Ptr[float64](4.38),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.UsageDetailsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.UsageDetailsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/UsageDetailsListByEnrollmentAccount.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/UsageDetailsListForBillingPeriodByEnrollmentAccount.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"EnrollmentAccountUsageDetailsListForBillingPeriod-Legacy"},
	})
	client = armconsumption.NewUsageDetailsClient(cred, &options)
	pager = client.List("providers/Microsoft.Billing/EnrollmentAccounts/1234",
		&armconsumption.UsageDetailsClientListOptions{Expand: nil,
			Filter:    nil,
			Skiptoken: nil,
			Top:       nil,
			Metric:    nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/UsageDetailsListForBillingPeriodByEnrollmentAccount.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armconsumption.UsageDetailsListResult{
			Value: []armconsumption.UsageDetailClassification{
				&armconsumption.LegacyUsageDetail{
					Name: to.Ptr("usageDetails_Id1"),
					Type: to.Ptr("Microsoft.Consumption/usageDetails"),
					ID:   to.Ptr("/providers/Microsoft.Billing/EnrollmentAccounts/1234/providers/Microsoft.Billing/billingPeriods/201903/providers/Microsoft.Consumption/usageDetails/usageDetails_Id1"),
					Tags: map[string]*string{
						"dev": to.Ptr("tools"),
						"env": to.Ptr("newcrp"),
					},
					Kind: to.Ptr(armconsumption.UsageDetailsKindLegacy),
					Properties: &armconsumption.LegacyUsageDetailProperties{
						AccountName:            to.Ptr("Account Name 1"),
						BenefitID:              to.Ptr("00000000-0000-0000-0000-000000000000"),
						BenefitName:            to.Ptr("Reservation_purchase_03-09-2018_10-59"),
						BillingAccountID:       to.Ptr("xxxxxxxx"),
						BillingAccountName:     to.Ptr("Account Name 1"),
						BillingCurrency:        to.Ptr("CAD"),
						BillingPeriodEndDate:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-03-31T00:00:00.0000000Z"); return t }()),
						BillingPeriodStartDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-03-01T00:00:00.0000000Z"); return t }()),
						BillingProfileID:       to.Ptr("xxxxxxxx"),
						BillingProfileName:     to.Ptr("Account Name 1"),
						ChargeType:             to.Ptr("Usage"),
						ConsumedService:        to.Ptr("Microsoft.Storage"),
						Cost:                   to.Ptr[float64](0.000342194841184),
						CostCenter:             to.Ptr("DEV"),
						Date:                   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-03-30T00:00:00.0000000Z"); return t }()),
						EffectivePrice:         to.Ptr[float64](0.010534556373432),
						InvoiceSection:         to.Ptr("Invoice Section 1"),
						IsAzureCreditEligible:  to.Ptr(false),
						MeterID:                to.Ptr("00000000-0000-0000-0000-000000000000"),
						OfferID:                to.Ptr("Offer Id 1"),
						PartNumber:             to.Ptr("Part Number 1"),
						Product:                to.Ptr("Product Name 1"),
						Quantity:               to.Ptr[float64](0.8234),
						ResourceGroup:          to.Ptr("Resource Group 1"),
						ResourceID:             to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/Resource Group 1/providers/Microsoft.Storage/storageAccounts/Resource Name 1"),
						ResourceLocation:       to.Ptr("USEast"),
						ResourceName:           to.Ptr("Resource Name 1"),
						SubscriptionID:         to.Ptr("00000000-0000-0000-0000-000000000000"),
						SubscriptionName:       to.Ptr("Subscription Name 1"),
						UnitPrice:              to.Ptr[float64](3.74),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.UsageDetailsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.UsageDetailsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/UsageDetailsListForBillingPeriodByEnrollmentAccount.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/UsageDetailsListByMCAInvoiceSection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"InvoiceSectionUsageDetailsList-Modern"},
	})
	client = armconsumption.NewUsageDetailsClient(cred, &options)
	pager = client.List("providers/Microsoft.Billing/BillingAccounts/1234:56789/invoiceSections/98765",
		&armconsumption.UsageDetailsClientListOptions{Expand: nil,
			Filter:    nil,
			Skiptoken: nil,
			Top:       nil,
			Metric:    nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/UsageDetailsListByMCAInvoiceSection.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armconsumption.UsageDetailsListResult{
			Value: []armconsumption.UsageDetailClassification{
				&armconsumption.ModernUsageDetail{
					Name: to.Ptr("usageDetails_Id1"),
					Type: to.Ptr("Microsoft.Consumption/usageDetails"),
					ID:   to.Ptr("/providers/Microsoft.Billing/BillingAccounts/1234:56789/invoiceSections/98765/providers/Microsoft.Consumption/usageDetails/usageDetails_Id1"),
					Tags: map[string]*string{
						"dev": to.Ptr("tools"),
						"env": to.Ptr("newcrp"),
					},
					Kind: to.Ptr(armconsumption.UsageDetailsKindModern),
					Properties: &armconsumption.ModernUsageDetailProperties{
						AdditionalInfo:               to.Ptr("{  \"UsageType\": \"ComputeHR\",  \"ImageType\": \"Windows Client BYOL\",  \"ServiceType\": \"Standard_D1\",  \"VMName\": null,  \"VMProperties\": null,  \"VCPUs\": 1,  \"CPUs\": 0}"),
						BenefitID:                    to.Ptr("00000000-0000-0000-0000-000000000000"),
						BenefitName:                  to.Ptr("Reservation_purchase_03-09-2018_10-59"),
						BillingAccountID:             to.Ptr("1234:56789"),
						BillingAccountName:           to.Ptr("Account Name 1"),
						BillingCurrencyCode:          to.Ptr("USD"),
						BillingPeriodEndDate:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-10-31T00:00:00.0000000Z"); return t }()),
						BillingPeriodStartDate:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-10-01T00:00:00.0000000Z"); return t }()),
						BillingProfileID:             to.Ptr("2468"),
						BillingProfileName:           to.Ptr("Account Name 1"),
						ChargeType:                   to.Ptr("Usage"),
						ConsumedService:              to.Ptr("Microsoft.Storage"),
						CostCenter:                   to.Ptr("DEV"),
						CostInBillingCurrency:        to.Ptr[float64](1.84763819095477),
						CostInPricingCurrency:        to.Ptr[float64](1.84763819095477),
						CostInUSD:                    to.Ptr[float64](1.84763819095477),
						CustomerName:                 to.Ptr("Modern Azure Customer 1"),
						CustomerTenantID:             to.Ptr("00000000-0000-0000-0000-000000000000"),
						Date:                         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-10-30T00:00:00.0000000Z"); return t }()),
						ExchangeRate:                 to.Ptr("1"),
						ExchangeRateDate:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-10-01T00:00:00Z"); return t }()),
						ExchangeRatePricingToBilling: to.Ptr[float64](0.077),
						Frequency:                    to.Ptr("UsageBased"),
						InstanceName:                 to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/Resource Group 1/providers/Microsoft.Storage/storageAccounts/Resource Name 1"),
						InvoiceID:                    to.Ptr(""),
						InvoiceSectionID:             to.Ptr("98765"),
						InvoiceSectionName:           to.Ptr("Invoice Section 1"),
						IsAzureCreditEligible:        to.Ptr(false),
						MarketPrice:                  to.Ptr[float64](0.077),
						MeterID:                      to.Ptr("00000000-0000-0000-0000-000000000000"),
						PartnerEarnedCreditApplied:   to.Ptr("0"),
						PartnerEarnedCreditRate:      to.Ptr[float64](0.077),
						PartnerName:                  to.Ptr("Partner Name 1"),
						PartnerTenantID:              to.Ptr("00000000-0000-0000-0000-000000000000"),
						PaygCostInBillingCurrency:    to.Ptr[float64](1.848),
						PaygCostInUSD:                to.Ptr[float64](1.848),
						PreviousInvoiceID:            to.Ptr(""),
						PricingCurrencyCode:          to.Ptr("USD"),
						Product:                      to.Ptr("Virtual Machines D Series - D1 - US East"),
						ProductIdentifier:            to.Ptr("DZH318Z0BQ4B00FV"),
						ProductOrderID:               to.Ptr("a3db7880-70eb-4b4c-6a79-1425a058df5a"),
						ProductOrderName:             to.Ptr("Azure plan"),
						PublisherID:                  to.Ptr(""),
						PublisherName:                to.Ptr("Microsoft"),
						PublisherType:                to.Ptr("Microsoft"),
						Quantity:                     to.Ptr[float64](0.7329),
						ResellerMpnID:                to.Ptr(""),
						ResellerName:                 to.Ptr("Reseller Name 1"),
						ReservationID:                to.Ptr(""),
						ReservationName:              to.Ptr(""),
						ResourceGroup:                to.Ptr("Resource Group 1"),
						ResourceLocation:             to.Ptr("USEast"),
						ResourceLocationNormalized:   to.Ptr("US East"),
						ServiceInfo1:                 to.Ptr(""),
						ServiceInfo2:                 to.Ptr("Windows Client BYOL"),
						ServicePeriodEndDate:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-12-01T00:00:00Z"); return t }()),
						ServicePeriodStartDate:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-10-01T00:00:00Z"); return t }()),
						SubscriptionGUID:             to.Ptr("00000000-0000-0000-0000-000000000000"),
						SubscriptionName:             to.Ptr("Subscription Name 1"),
						Term:                         to.Ptr(""),
						UnitPrice:                    to.Ptr[float64](4.38),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.UsageDetailsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.UsageDetailsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/UsageDetailsListByMCAInvoiceSection.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/UsageDetailsListByManagementGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ManagementGroupUsageDetailsList-Legacy"},
	})
	client = armconsumption.NewUsageDetailsClient(cred, &options)
	pager = client.List("subscriptions/00000000-0000-0000-0000-000000000000",
		&armconsumption.UsageDetailsClientListOptions{Expand: nil,
			Filter:    nil,
			Skiptoken: nil,
			Top:       nil,
			Metric:    nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/UsageDetailsListByManagementGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armconsumption.UsageDetailsListResult{
			Value: []armconsumption.UsageDetailClassification{
				&armconsumption.LegacyUsageDetail{
					Name: to.Ptr("usageDetails_Id1"),
					Type: to.Ptr("Microsoft.Consumption/usageDetails"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Billing/billingPeriods/201903/providers/Microsoft.Consumption/usageDetails/usageDetails_Id1"),
					Tags: map[string]*string{
						"dev": to.Ptr("tools"),
						"env": to.Ptr("newcrp"),
					},
					Kind: to.Ptr(armconsumption.UsageDetailsKindLegacy),
					Properties: &armconsumption.LegacyUsageDetailProperties{
						AccountName:            to.Ptr("Account Name 1"),
						BenefitID:              to.Ptr("00000000-0000-0000-0000-000000000000"),
						BenefitName:            to.Ptr("Reservation_purchase_03-09-2018_10-59"),
						BillingAccountID:       to.Ptr("xxxxxxxx"),
						BillingAccountName:     to.Ptr("Account Name 1"),
						BillingCurrency:        to.Ptr("CAD"),
						BillingPeriodEndDate:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-03-31T00:00:00.0000000Z"); return t }()),
						BillingPeriodStartDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-03-01T00:00:00.0000000Z"); return t }()),
						BillingProfileID:       to.Ptr("xxxxxxxx"),
						BillingProfileName:     to.Ptr("Account Name 1"),
						ChargeType:             to.Ptr("Usage"),
						ConsumedService:        to.Ptr("Microsoft.Storage"),
						Cost:                   to.Ptr[float64](0.000342194841184),
						CostCenter:             to.Ptr("DEV"),
						Date:                   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-03-30T00:00:00.0000000Z"); return t }()),
						EffectivePrice:         to.Ptr[float64](0.010534556373432),
						InvoiceSection:         to.Ptr("Invoice Section 1"),
						IsAzureCreditEligible:  to.Ptr(false),
						MeterID:                to.Ptr("00000000-0000-0000-0000-000000000000"),
						OfferID:                to.Ptr("Offer Id 1"),
						PartNumber:             to.Ptr("Part Number 1"),
						Product:                to.Ptr("Product Name 1"),
						Quantity:               to.Ptr[float64](0.8234),
						ResourceGroup:          to.Ptr("Resource Group 1"),
						ResourceID:             to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/Resource Group 1/providers/Microsoft.Storage/storageAccounts/Resource Name 1"),
						ResourceLocation:       to.Ptr("USEast"),
						ResourceName:           to.Ptr("Resource Name 1"),
						SubscriptionID:         to.Ptr("00000000-0000-0000-0000-000000000000"),
						SubscriptionName:       to.Ptr("Subscription Name 1"),
						UnitPrice:              to.Ptr[float64](3.74),
					},
				},
				&armconsumption.LegacyUsageDetail{
					Name: to.Ptr("usageDetails_Id2"),
					Type: to.Ptr("Microsoft.Consumption/usageDetails"),
					ID:   to.Ptr("/scope/providers/Microsoft.Billing/billingPeriods/20180801/providers/Microsoft.Consumption/usageDetails/usageDetails_Id2"),
					Tags: map[string]*string{
						"dev": to.Ptr("tools"),
						"env": to.Ptr("newcrp"),
					},
					Kind: to.Ptr(armconsumption.UsageDetailsKindLegacy),
					Properties: &armconsumption.LegacyUsageDetailProperties{
						AccountName:            to.Ptr("Account Name 1"),
						BenefitID:              to.Ptr("00000000-0000-0000-0000-000000000000"),
						BenefitName:            to.Ptr("Reservation_purchase_03-09-2018_10-59"),
						BillingAccountID:       to.Ptr("xxxxxxxx"),
						BillingAccountName:     to.Ptr("Account Name 2"),
						BillingCurrency:        to.Ptr("CAD"),
						BillingPeriodEndDate:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-03-31T00:00:00.0000000Z"); return t }()),
						BillingPeriodStartDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-03-01T00:00:00.0000000Z"); return t }()),
						BillingProfileID:       to.Ptr("xxxxxxxx"),
						BillingProfileName:     to.Ptr("Account Name 2"),
						ChargeType:             to.Ptr("Usage"),
						ConsumedService:        to.Ptr("Microsoft.Storage"),
						Cost:                   to.Ptr[float64](0.000295194820065),
						CostCenter:             to.Ptr("DEV"),
						Date:                   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-03-30T00:00:00.0000000Z"); return t }()),
						EffectivePrice:         to.Ptr[float64](0.000402776395232),
						InvoiceSection:         to.Ptr("Invoice Section 2"),
						IsAzureCreditEligible:  to.Ptr(false),
						MeterID:                to.Ptr("11111111-1111-1111-1111-111111111111"),
						OfferID:                to.Ptr("Offer Id 2"),
						PartNumber:             to.Ptr("Part Number 2"),
						Product:                to.Ptr("Product Name 2"),
						Quantity:               to.Ptr[float64](0.7329),
						ResourceGroup:          to.Ptr("Resource Group 2"),
						ResourceID:             to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/Resource Group 2/providers/Microsoft.Storage/storageAccounts/Resource Name 2"),
						ResourceLocation:       to.Ptr("USEast"),
						ResourceName:           to.Ptr("Resource Name 2"),
						SubscriptionID:         to.Ptr("00000000-0000-0000-0000-000000000000"),
						SubscriptionName:       to.Ptr("Subscription Name 1"),
						UnitPrice:              to.Ptr[float64](4.38),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.UsageDetailsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.UsageDetailsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/UsageDetailsListByManagementGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/UsageDetailsListForBillingPeriodByManagementGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ManagementGroupUsageDetailsListForBillingPeriod-Legacy"},
	})
	client = armconsumption.NewUsageDetailsClient(cred, &options)
	pager = client.List("subscriptions/00000000-0000-0000-0000-000000000000",
		&armconsumption.UsageDetailsClientListOptions{Expand: nil,
			Filter:    nil,
			Skiptoken: nil,
			Top:       nil,
			Metric:    nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/UsageDetailsListForBillingPeriodByManagementGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armconsumption.UsageDetailsListResult{
			Value: []armconsumption.UsageDetailClassification{
				&armconsumption.LegacyUsageDetail{
					Name: to.Ptr("usageDetails_Id1"),
					Type: to.Ptr("Microsoft.Consumption/usageDetails"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Billing/billingPeriods/201903/providers/Microsoft.Consumption/usageDetails/usageDetails_Id1"),
					Tags: map[string]*string{
						"dev": to.Ptr("tools"),
						"env": to.Ptr("newcrp"),
					},
					Kind: to.Ptr(armconsumption.UsageDetailsKindLegacy),
					Properties: &armconsumption.LegacyUsageDetailProperties{
						AccountName:            to.Ptr("Account Name 1"),
						BenefitID:              to.Ptr("00000000-0000-0000-0000-000000000000"),
						BenefitName:            to.Ptr("Reservation_purchase_03-09-2018_10-59"),
						BillingAccountID:       to.Ptr("xxxxxxxx"),
						BillingAccountName:     to.Ptr("Account Name 1"),
						BillingCurrency:        to.Ptr("CAD"),
						BillingPeriodEndDate:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-03-31T00:00:00.0000000Z"); return t }()),
						BillingPeriodStartDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-03-01T00:00:00.0000000Z"); return t }()),
						BillingProfileID:       to.Ptr("xxxxxxxx"),
						BillingProfileName:     to.Ptr("Account Name 1"),
						ChargeType:             to.Ptr("Usage"),
						ConsumedService:        to.Ptr("Microsoft.Storage"),
						Cost:                   to.Ptr[float64](0.000342194841184),
						CostCenter:             to.Ptr("DEV"),
						Date:                   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-03-30T00:00:00.0000000Z"); return t }()),
						EffectivePrice:         to.Ptr[float64](0.010534556373432),
						InvoiceSection:         to.Ptr("Invoice Section 1"),
						IsAzureCreditEligible:  to.Ptr(false),
						MeterID:                to.Ptr("00000000-0000-0000-0000-000000000000"),
						OfferID:                to.Ptr("Offer Id 1"),
						PartNumber:             to.Ptr("Part Number 1"),
						Product:                to.Ptr("Product Name 1"),
						Quantity:               to.Ptr[float64](0.8234),
						ResourceGroup:          to.Ptr("Resource Group 1"),
						ResourceID:             to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/Resource Group 1/providers/Microsoft.Storage/storageAccounts/Resource Name 1"),
						ResourceLocation:       to.Ptr("USEast"),
						ResourceName:           to.Ptr("Resource Name 1"),
						SubscriptionID:         to.Ptr("00000000-0000-0000-0000-000000000000"),
						SubscriptionName:       to.Ptr("Subscription Name 1"),
						UnitPrice:              to.Ptr[float64](3.74),
					},
				},
				&armconsumption.LegacyUsageDetail{
					Name: to.Ptr("usageDetails_Id2"),
					Type: to.Ptr("Microsoft.Consumption/usageDetails"),
					ID:   to.Ptr("/scope/providers/Microsoft.Billing/billingPeriods/billingPeriodName/providers/Microsoft.Consumption/usageDetails/usageDetails_Id2"),
					Tags: map[string]*string{
						"dev": to.Ptr("tools"),
						"env": to.Ptr("newcrp"),
					},
					Kind: to.Ptr(armconsumption.UsageDetailsKindLegacy),
					Properties: &armconsumption.LegacyUsageDetailProperties{
						AccountName:            to.Ptr("Account Name 2"),
						BenefitID:              to.Ptr("00000000-0000-0000-0000-000000000000"),
						BenefitName:            to.Ptr("Reservation_purchase_03-09-2018_10-59"),
						BillingAccountID:       to.Ptr("xxxxxxxx"),
						BillingAccountName:     to.Ptr("Account Name 2"),
						BillingCurrency:        to.Ptr("CAD"),
						BillingPeriodEndDate:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-03-31T00:00:00.0000000Z"); return t }()),
						BillingPeriodStartDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-03-01T00:00:00.0000000Z"); return t }()),
						BillingProfileID:       to.Ptr("xxxxxxxx"),
						BillingProfileName:     to.Ptr("Account Name 2"),
						ChargeType:             to.Ptr("UnusedReservation"),
						ConsumedService:        to.Ptr("Microsoft.Storage"),
						Cost:                   to.Ptr[float64](0.000821821271948),
						CostCenter:             to.Ptr("DEV"),
						Date:                   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-03-30T00:00:00.0000000Z"); return t }()),
						EffectivePrice:         to.Ptr[float64](0.073488920944598),
						InvoiceSection:         to.Ptr("Invoice Section 2"),
						IsAzureCreditEligible:  to.Ptr(false),
						MeterID:                to.Ptr("11111111-1111-1111-1111-111111111111"),
						OfferID:                to.Ptr("Offer Id 2"),
						PartNumber:             to.Ptr("Part Number 2"),
						Product:                to.Ptr("Product Name 2"),
						Quantity:               to.Ptr[float64](0.4759),
						ResourceGroup:          to.Ptr("Resource Group 2"),
						ResourceID:             to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/Resource Group 2/providers/Microsoft.Storage/storageAccounts/Resource Name 2"),
						ResourceLocation:       to.Ptr("USEast"),
						ResourceName:           to.Ptr("Resource Name 2"),
						SubscriptionID:         to.Ptr("00000000-0000-0000-0000-000000000000"),
						SubscriptionName:       to.Ptr("Subscription Name 2"),
						UnitPrice:              to.Ptr[float64](5.74),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.UsageDetailsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.UsageDetailsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/UsageDetailsListForBillingPeriodByManagementGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/UsageDetailsExpand.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"UsageDetailsExpand-Legacy"},
	})
	client = armconsumption.NewUsageDetailsClient(cred, &options)
	pager = client.List("subscriptions/00000000-0000-0000-0000-000000000000",
		&armconsumption.UsageDetailsClientListOptions{Expand: to.Ptr("meterDetails,additionalInfo"),
			Filter:    to.Ptr("tags eq 'dev:tools'"),
			Skiptoken: nil,
			Top:       to.Ptr[int32](1),
			Metric:    nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/UsageDetailsExpand.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armconsumption.UsageDetailsListResult{
			Value: []armconsumption.UsageDetailClassification{
				&armconsumption.LegacyUsageDetail{
					Name: to.Ptr("usageDetails_Id1"),
					Type: to.Ptr("Microsoft.Consumption/usageDetails"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Billing/billingPeriods/201903/providers/Microsoft.Consumption/usageDetails/usageDetails_Id1"),
					Tags: map[string]*string{
						"dev": to.Ptr("tools"),
						"env": to.Ptr("newcrp"),
					},
					Kind: to.Ptr(armconsumption.UsageDetailsKindLegacy),
					Properties: &armconsumption.LegacyUsageDetailProperties{
						AccountName:            to.Ptr("Account Name 1"),
						AdditionalInfo:         to.Ptr("{\"MyType\":\"\",\"ServiceType\":\"\",\"VMName\":\"\",\"UsageType\":\"MyUsage\"}"),
						BenefitID:              to.Ptr("00000000-0000-0000-0000-000000000000"),
						BenefitName:            to.Ptr("Reservation_purchase_03-09-2018_10-59"),
						BillingAccountID:       to.Ptr("xxxxxxxx"),
						BillingAccountName:     to.Ptr("Account Name 1"),
						BillingCurrency:        to.Ptr("CAD"),
						BillingPeriodEndDate:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-03-31T00:00:00.0000000Z"); return t }()),
						BillingPeriodStartDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-03-01T00:00:00.0000000Z"); return t }()),
						BillingProfileID:       to.Ptr("xxxxxxxx"),
						BillingProfileName:     to.Ptr("Account Name 1"),
						ChargeType:             to.Ptr("Usage"),
						ConsumedService:        to.Ptr("Microsoft.Storage"),
						Cost:                   to.Ptr[float64](0.000342194841184),
						CostCenter:             to.Ptr("DEV"),
						Date:                   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-03-30T00:00:00.0000000Z"); return t }()),
						EffectivePrice:         to.Ptr[float64](0.010464556322455),
						Frequency:              to.Ptr("UsageBased"),
						InvoiceSection:         to.Ptr("Invoice Section 1"),
						IsAzureCreditEligible:  to.Ptr(false),
						MeterDetails: &armconsumption.MeterDetailsResponse{
							MeterCategory:    to.Ptr("Networking"),
							MeterName:        to.Ptr("Data Transfer Out (GB)"),
							MeterSubCategory: to.Ptr("ExpressRoute"),
							ServiceFamily:    to.Ptr("Compute"),
							UnitOfMeasure:    to.Ptr("GB"),
						},
						MeterID:          to.Ptr("00000000-0000-0000-0000-000000000000"),
						OfferID:          to.Ptr("Offer Id 1"),
						PartNumber:       to.Ptr("Part Number 1"),
						Product:          to.Ptr("Product Name 1"),
						Quantity:         to.Ptr[float64](0.8234),
						ResourceGroup:    to.Ptr("Resource Group 1"),
						ResourceID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/Resource Group 1/providers/Microsoft.Storage/storageAccounts/Resource Name 1"),
						ResourceLocation: to.Ptr("USEast"),
						ResourceName:     to.Ptr("Resource Name 1"),
						SubscriptionID:   to.Ptr("00000000-0000-0000-0000-000000000000"),
						SubscriptionName: to.Ptr("Subscription Name 1"),
						UnitPrice:        to.Ptr[float64](3.54),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.UsageDetailsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.UsageDetailsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/UsageDetailsExpand.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/UsageDetailsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"UsageDetailsList-Legacy"},
	})
	client = armconsumption.NewUsageDetailsClient(cred, &options)
	pager = client.List("subscriptions/00000000-0000-0000-0000-000000000000",
		&armconsumption.UsageDetailsClientListOptions{Expand: nil,
			Filter:    nil,
			Skiptoken: nil,
			Top:       nil,
			Metric:    nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/UsageDetailsList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armconsumption.UsageDetailsListResult{
			Value: []armconsumption.UsageDetailClassification{
				&armconsumption.LegacyUsageDetail{
					Name: to.Ptr("usageDetails_Id1"),
					Type: to.Ptr("Microsoft.Consumption/usageDetails"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Billing/billingPeriods/201903/providers/Microsoft.Consumption/usageDetails/usageDetails_Id1"),
					Tags: map[string]*string{
						"dev": to.Ptr("tools"),
						"env": to.Ptr("newcrp"),
					},
					Kind: to.Ptr(armconsumption.UsageDetailsKindLegacy),
					Properties: &armconsumption.LegacyUsageDetailProperties{
						AccountName:            to.Ptr("AccountName"),
						BenefitID:              to.Ptr("00000000-0000-0000-0000-000000000000"),
						BenefitName:            to.Ptr("Reservation_purchase_03-09-2018_10-59"),
						BillingAccountID:       to.Ptr("xxxxxxxx"),
						BillingAccountName:     to.Ptr("Customer Name 1"),
						BillingCurrency:        to.Ptr("CAD"),
						BillingPeriodEndDate:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-04-30T00:00:00.0000000Z"); return t }()),
						BillingPeriodStartDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-04-01T00:00:00.0000000Z"); return t }()),
						BillingProfileID:       to.Ptr("xxxxxxxx"),
						BillingProfileName:     to.Ptr("Customer Name 1"),
						ChargeType:             to.Ptr("Usage"),
						ConsumedService:        to.Ptr("Microsoft.ClassicStorage"),
						Cost:                   to.Ptr[float64](0.000001980949998),
						CostCenter:             to.Ptr("BAS"),
						Date:                   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-04-09T00:00:00.0000000Z"); return t }()),
						EffectivePrice:         to.Ptr[float64](0.054693034210767),
						Frequency:              to.Ptr("UsageBased"),
						InvoiceSection:         to.Ptr("Invoice Section 1"),
						IsAzureCreditEligible:  to.Ptr(false),
						MeterID:                to.Ptr("00000000-0000-0000-0000-000000000000"),
						OfferID:                to.Ptr("Offer Id 1"),
						PartNumber:             to.Ptr("Part Number 1"),
						Product:                to.Ptr("Product1"),
						Quantity:               to.Ptr[float64](0.000036),
						ResourceGroup:          to.Ptr("Resource-Group-westus"),
						ResourceID:             to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/Resource-Group-westus/providers/Microsoft.ClassicStorage/storageAccounts/ResourceName1"),
						ResourceLocation:       to.Ptr("uswest"),
						ResourceName:           to.Ptr("ResourceName1"),
						SubscriptionID:         to.Ptr("00000000-0000-0000-0000-000000000000"),
						SubscriptionName:       to.Ptr("SubscriptionName 1"),
						UnitPrice:              to.Ptr[float64](5.47),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.UsageDetailsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.UsageDetailsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/UsageDetailsList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/UsageDetailsListByMetricActualCost.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"UsageDetailsListByMetricActualCost-Legacy"},
	})
	client = armconsumption.NewUsageDetailsClient(cred, &options)
	pager = client.List("subscriptions/00000000-0000-0000-0000-000000000000",
		&armconsumption.UsageDetailsClientListOptions{Expand: nil,
			Filter:    nil,
			Skiptoken: nil,
			Top:       nil,
			Metric:    to.Ptr(armconsumption.MetrictypeActualCostMetricType),
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/UsageDetailsListByMetricActualCost.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armconsumption.UsageDetailsListResult{
			Value: []armconsumption.UsageDetailClassification{
				&armconsumption.LegacyUsageDetail{
					Name: to.Ptr("usageDetails_Id1"),
					Type: to.Ptr("Microsoft.Consumption/usageDetails"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Billing/billingPeriods/201903/providers/Microsoft.Consumption/usageDetails/usageDetails_Id1"),
					Tags: map[string]*string{
						"dev": to.Ptr("tools"),
						"env": to.Ptr("newcrp"),
					},
					Kind: to.Ptr(armconsumption.UsageDetailsKindLegacy),
					Properties: &armconsumption.LegacyUsageDetailProperties{
						AccountName:            to.Ptr("AccountName"),
						BenefitID:              to.Ptr("00000000-0000-0000-0000-000000000000"),
						BenefitName:            to.Ptr("Reservation_purchase_03-09-2018_10-59"),
						BillingAccountID:       to.Ptr("xxxxxxxx"),
						BillingAccountName:     to.Ptr("Customer Name 1"),
						BillingCurrency:        to.Ptr("CAD"),
						BillingPeriodEndDate:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-04-30T00:00:00.0000000Z"); return t }()),
						BillingPeriodStartDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-04-01T00:00:00.0000000Z"); return t }()),
						BillingProfileID:       to.Ptr("xxxxxxxx"),
						BillingProfileName:     to.Ptr("Customer Name 1"),
						ChargeType:             to.Ptr("Usage"),
						ConsumedService:        to.Ptr("Microsoft.ClassicStorage"),
						Cost:                   to.Ptr[float64](0.000001968949998),
						CostCenter:             to.Ptr("BAS"),
						Date:                   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-04-09T00:00:00.0000000Z"); return t }()),
						EffectivePrice:         to.Ptr[float64](0.054693055510767),
						InvoiceSection:         to.Ptr("Invoice Section 1"),
						IsAzureCreditEligible:  to.Ptr(false),
						MeterID:                to.Ptr("00000000-0000-0000-0000-000000000000"),
						OfferID:                to.Ptr("Offer Id 1"),
						PartNumber:             to.Ptr("Part Number 1"),
						Product:                to.Ptr("Product1"),
						Quantity:               to.Ptr[float64](0.000036),
						ResourceGroup:          to.Ptr("Resource-Group-westus"),
						ResourceID:             to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/Resource-Group-westus/providers/Microsoft.ClassicStorage/storageAccounts/ResourceName1"),
						ResourceLocation:       to.Ptr("uswest"),
						ResourceName:           to.Ptr("ResourceName1"),
						SubscriptionID:         to.Ptr("00000000-0000-0000-0000-000000000000"),
						SubscriptionName:       to.Ptr("SubscriptionName 1"),
						UnitPrice:              to.Ptr[float64](5.47),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.UsageDetailsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.UsageDetailsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/UsageDetailsListByMetricActualCost.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/UsageDetailsListByMetricAmortizedCost.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"UsageDetailsListByMetricAmortizedCost-Legacy"},
	})
	client = armconsumption.NewUsageDetailsClient(cred, &options)
	pager = client.List("subscriptions/00000000-0000-0000-0000-000000000000",
		&armconsumption.UsageDetailsClientListOptions{Expand: nil,
			Filter:    nil,
			Skiptoken: nil,
			Top:       nil,
			Metric:    to.Ptr(armconsumption.MetrictypeAmortizedCostMetricType),
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/UsageDetailsListByMetricAmortizedCost.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armconsumption.UsageDetailsListResult{
			Value: []armconsumption.UsageDetailClassification{
				&armconsumption.LegacyUsageDetail{
					Name: to.Ptr("usageDetails_Id1"),
					Type: to.Ptr("Microsoft.Consumption/usageDetails"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Billing/billingPeriods/201903/providers/Microsoft.Consumption/usageDetails/usageDetails_Id1"),
					Tags: map[string]*string{
						"dev": to.Ptr("tools"),
						"env": to.Ptr("newcrp"),
					},
					Kind: to.Ptr(armconsumption.UsageDetailsKindLegacy),
					Properties: &armconsumption.LegacyUsageDetailProperties{
						AccountName:            to.Ptr("AccountName"),
						BenefitID:              to.Ptr("00000000-0000-0000-0000-000000000000"),
						BenefitName:            to.Ptr("Reservation_purchase_03-09-2018_10-59"),
						BillingAccountID:       to.Ptr("xxxxxxxx"),
						BillingAccountName:     to.Ptr("Customer Name 1"),
						BillingCurrency:        to.Ptr("CAD"),
						BillingPeriodEndDate:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-04-30T00:00:00.0000000Z"); return t }()),
						BillingPeriodStartDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-04-01T00:00:00.0000000Z"); return t }()),
						BillingProfileID:       to.Ptr("xxxxxxxx"),
						BillingProfileName:     to.Ptr("Customer Name 1"),
						ChargeType:             to.Ptr("Usage"),
						ConsumedService:        to.Ptr("Microsoft.ClassicStorage"),
						Cost:                   to.Ptr[float64](0.000001968949998),
						CostCenter:             to.Ptr("BAS"),
						Date:                   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-04-09T00:00:00.0000000Z"); return t }()),
						EffectivePrice:         to.Ptr[float64](0.054693055510767),
						Frequency:              to.Ptr("UsageBased"),
						InvoiceSection:         to.Ptr("Invoice Section 1"),
						IsAzureCreditEligible:  to.Ptr(false),
						MeterID:                to.Ptr("00000000-0000-0000-0000-000000000000"),
						OfferID:                to.Ptr("Offer Id 1"),
						PartNumber:             to.Ptr("Part Number 1"),
						Product:                to.Ptr("Product1"),
						Quantity:               to.Ptr[float64](0.000036),
						ResourceGroup:          to.Ptr("Resource-Group-westus"),
						ResourceID:             to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/Resource-Group-westus/providers/Microsoft.ClassicStorage/storageAccounts/ResourceName1"),
						ResourceLocation:       to.Ptr("uswest"),
						ResourceName:           to.Ptr("ResourceName1"),
						SubscriptionID:         to.Ptr("00000000-0000-0000-0000-000000000000"),
						SubscriptionName:       to.Ptr("SubscriptionName 1"),
						UnitPrice:              to.Ptr[float64](5.47),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.UsageDetailsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.UsageDetailsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/UsageDetailsListByMetricAmortizedCost.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/UsageDetailsListByMetricUsage.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"UsageDetailsListByMetricUsage-Legacy"},
	})
	client = armconsumption.NewUsageDetailsClient(cred, &options)
	pager = client.List("subscriptions/00000000-0000-0000-0000-000000000000",
		&armconsumption.UsageDetailsClientListOptions{Expand: nil,
			Filter:    nil,
			Skiptoken: nil,
			Top:       nil,
			Metric:    to.Ptr(armconsumption.MetrictypeUsageMetricType),
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/UsageDetailsListByMetricUsage.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armconsumption.UsageDetailsListResult{
			Value: []armconsumption.UsageDetailClassification{
				&armconsumption.LegacyUsageDetail{
					Name: to.Ptr("usageDetails_Id1"),
					Type: to.Ptr("Microsoft.Consumption/usageDetails"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Billing/billingPeriods/201903/providers/Microsoft.Consumption/usageDetails/usageDetails_Id1"),
					Tags: map[string]*string{
						"dev": to.Ptr("tools"),
						"env": to.Ptr("newcrp"),
					},
					Kind: to.Ptr(armconsumption.UsageDetailsKindLegacy),
					Properties: &armconsumption.LegacyUsageDetailProperties{
						AccountName:            to.Ptr("AccountName"),
						BenefitID:              to.Ptr("00000000-0000-0000-0000-000000000000"),
						BenefitName:            to.Ptr("Reservation_purchase_03-09-2018_10-59"),
						BillingAccountID:       to.Ptr("xxxxxxxx"),
						BillingAccountName:     to.Ptr("Customer Name 1"),
						BillingCurrency:        to.Ptr("CAD"),
						BillingPeriodEndDate:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-04-30T00:00:00.0000000Z"); return t }()),
						BillingPeriodStartDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-04-01T00:00:00.0000000Z"); return t }()),
						BillingProfileID:       to.Ptr("xxxxxxxx"),
						BillingProfileName:     to.Ptr("Customer Name 1"),
						ChargeType:             to.Ptr("Usage"),
						ConsumedService:        to.Ptr("Microsoft.ClassicStorage"),
						Cost:                   to.Ptr[float64](0.000001968949998),
						CostCenter:             to.Ptr("BAS"),
						Date:                   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-04-09T00:00:00.0000000Z"); return t }()),
						EffectivePrice:         to.Ptr[float64](0.054693055510767),
						InvoiceSection:         to.Ptr("Invoice Section 1"),
						IsAzureCreditEligible:  to.Ptr(false),
						MeterID:                to.Ptr("00000000-0000-0000-0000-000000000000"),
						OfferID:                to.Ptr("Offer Id 1"),
						PartNumber:             to.Ptr("Part Number 1"),
						Product:                to.Ptr("Product1"),
						Quantity:               to.Ptr[float64](0.000036),
						ResourceGroup:          to.Ptr("Resource-Group-westus"),
						ResourceID:             to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/Resource-Group-westus/providers/Microsoft.ClassicStorage/storageAccounts/ResourceName1"),
						ResourceLocation:       to.Ptr("uswest"),
						ResourceName:           to.Ptr("ResourceName1"),
						SubscriptionID:         to.Ptr("00000000-0000-0000-0000-000000000000"),
						SubscriptionName:       to.Ptr("SubscriptionName 1"),
						UnitPrice:              to.Ptr[float64](5.47),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.UsageDetailsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.UsageDetailsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/UsageDetailsListByMetricUsage.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/UsageDetailsListFilterByTag.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"UsageDetailsListFilterByTag-Legacy"},
	})
	client = armconsumption.NewUsageDetailsClient(cred, &options)
	pager = client.List("subscriptions/00000000-0000-0000-0000-000000000000",
		&armconsumption.UsageDetailsClientListOptions{Expand: nil,
			Filter:    to.Ptr("tags eq 'dev:tools'"),
			Skiptoken: nil,
			Top:       nil,
			Metric:    nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/UsageDetailsListFilterByTag.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armconsumption.UsageDetailsListResult{
			Value: []armconsumption.UsageDetailClassification{
				&armconsumption.LegacyUsageDetail{
					Name: to.Ptr("usageDetails_Id1"),
					Type: to.Ptr("Microsoft.Consumption/usageDetails"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Billing/billingPeriods/201903/providers/Microsoft.Consumption/usageDetails/usageDetails_Id1"),
					Tags: map[string]*string{
						"dev": to.Ptr("tools"),
					},
					Kind: to.Ptr(armconsumption.UsageDetailsKindLegacy),
					Properties: &armconsumption.LegacyUsageDetailProperties{
						AccountName:            to.Ptr("Account Name 1"),
						BenefitID:              to.Ptr("00000000-0000-0000-0000-000000000000"),
						BenefitName:            to.Ptr("Reservation_purchase_03-09-2018_10-59"),
						BillingAccountID:       to.Ptr("xxxxxxxx"),
						BillingAccountName:     to.Ptr("Account Name 1"),
						BillingCurrency:        to.Ptr("CAD"),
						BillingPeriodEndDate:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-03-31T00:00:00.0000000Z"); return t }()),
						BillingPeriodStartDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-03-01T00:00:00.0000000Z"); return t }()),
						BillingProfileID:       to.Ptr("xxxxxxxx"),
						BillingProfileName:     to.Ptr("Account Name 1"),
						ChargeType:             to.Ptr("Usage"),
						ConsumedService:        to.Ptr("Microsoft.Storage"),
						Cost:                   to.Ptr[float64](0.000342194841184),
						CostCenter:             to.Ptr("DEV"),
						Date:                   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-03-30T00:00:00.0000000Z"); return t }()),
						EffectivePrice:         to.Ptr[float64](0.010534556373432),
						InvoiceSection:         to.Ptr("Invoice Section 1"),
						IsAzureCreditEligible:  to.Ptr(false),
						MeterID:                to.Ptr("00000000-0000-0000-0000-000000000000"),
						OfferID:                to.Ptr("Offer Id 1"),
						PartNumber:             to.Ptr("Part Number 1"),
						Product:                to.Ptr("Product Name 1"),
						Quantity:               to.Ptr[float64](0.8234),
						ResourceGroup:          to.Ptr("Resource Group 1"),
						ResourceID:             to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/Resource Group 1/providers/Microsoft.Storage/storageAccounts/Resource Name 1"),
						ResourceLocation:       to.Ptr("USEast"),
						ResourceName:           to.Ptr("Resource Name 1"),
						SubscriptionID:         to.Ptr("00000000-0000-0000-0000-000000000000"),
						SubscriptionName:       to.Ptr("Subscription Name 1"),
						UnitPrice:              to.Ptr[float64](3.74),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.UsageDetailsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.UsageDetailsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/UsageDetailsListFilterByTag.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/UsageDetailsListForBillingPeriod.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"UsageDetailsListForBillingPeriod-Legacy"},
	})
	client = armconsumption.NewUsageDetailsClient(cred, &options)
	pager = client.List("subscriptions/00000000-0000-0000-0000-000000000000",
		&armconsumption.UsageDetailsClientListOptions{Expand: nil,
			Filter:    nil,
			Skiptoken: nil,
			Top:       nil,
			Metric:    nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/UsageDetailsListForBillingPeriod.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armconsumption.UsageDetailsListResult{
			Value: []armconsumption.UsageDetailClassification{
				&armconsumption.LegacyUsageDetail{
					Name: to.Ptr("usageDetails_Id1"),
					Type: to.Ptr("Microsoft.Consumption/usageDetails"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Billing/billingPeriods/201903/providers/Microsoft.Consumption/usageDetails/usageDetails_Id1"),
					Tags: map[string]*string{
						"dev": to.Ptr("tools"),
						"env": to.Ptr("newcrp"),
					},
					Kind: to.Ptr(armconsumption.UsageDetailsKindLegacy),
					Properties: &armconsumption.LegacyUsageDetailProperties{
						AccountName:            to.Ptr("Account Name 1"),
						BenefitID:              to.Ptr("00000000-0000-0000-0000-000000000000"),
						BenefitName:            to.Ptr("Reservation_purchase_03-09-2018_10-59"),
						BillingAccountID:       to.Ptr("xxxxxxxx"),
						BillingAccountName:     to.Ptr("Account Name 1"),
						BillingCurrency:        to.Ptr("CAD"),
						BillingPeriodEndDate:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-03-31T00:00:00.0000000Z"); return t }()),
						BillingPeriodStartDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-03-01T00:00:00.0000000Z"); return t }()),
						BillingProfileID:       to.Ptr("xxxxxxxx"),
						BillingProfileName:     to.Ptr("Account Name 1"),
						ChargeType:             to.Ptr("Usage"),
						ConsumedService:        to.Ptr("Microsoft.Storage"),
						Cost:                   to.Ptr[float64](0.000342194841184),
						CostCenter:             to.Ptr("DEV"),
						Date:                   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-03-30T00:00:00.0000000Z"); return t }()),
						EffectivePrice:         to.Ptr[float64](0.010534556373432),
						InvoiceSection:         to.Ptr("Invoice Section 1"),
						IsAzureCreditEligible:  to.Ptr(false),
						MeterID:                to.Ptr("00000000-0000-0000-0000-000000000000"),
						OfferID:                to.Ptr("Offer Id 1"),
						PartNumber:             to.Ptr("Part Number 1"),
						Product:                to.Ptr("Product Name 1"),
						Quantity:               to.Ptr[float64](0.8234),
						ResourceGroup:          to.Ptr("Resource Group 1"),
						ResourceID:             to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/Resource Group 1/providers/Microsoft.Storage/storageAccounts/Resource Name 1"),
						ResourceLocation:       to.Ptr("USEast"),
						ResourceName:           to.Ptr("Resource Name 1"),
						SubscriptionID:         to.Ptr("00000000-0000-0000-0000-000000000000"),
						SubscriptionName:       to.Ptr("Subscription Name 1"),
						UnitPrice:              to.Ptr[float64](3.74),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.UsageDetailsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.UsageDetailsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/UsageDetailsListForBillingPeriod.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestMarketplaces_List(t *testing.T) {
	// From example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/MarketplacesByBillingAccountList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"BillingAccountMarketplacesList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armconsumption.NewMarketplacesClient(cred, &options)
	pager := client.List("providers/Microsoft.Billing/billingAccounts/123456",
		&armconsumption.MarketplacesClientListOptions{Filter: nil,
			Top:       nil,
			Skiptoken: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/MarketplacesByBillingAccountList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armconsumption.MarketplacesListResult{
			Value: []*armconsumption.Marketplace{
				{
					Name: to.Ptr("marketplaceId1"),
					Type: to.Ptr("Microsoft.Consumption/marketPlaces"),
					ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/123456/providers/Microsoft.Billing/billingPeriods/201702/providers/Microsoft.Consumption/marketplaces/marketplaceId1"),
					Tags: map[string]*string{
						"dev": to.Ptr("tools"),
						"env": to.Ptr("newcrp"),
					},
					Properties: &armconsumption.MarketplaceProperties{
						AccountName:          to.Ptr("Account1"),
						AdditionalProperties: to.Ptr("additionalProperties"),
						BillingPeriodID:      to.Ptr("/providers/Microsoft.Billing/billingAccounts/123456/providers/Microsoft.Billing/billingPeriods/201702"),
						ConsumedQuantity:     to.Ptr[float64](0.00328),
						CostCenter:           to.Ptr("Center1"),
						Currency:             to.Ptr("USD"),
						DepartmentName:       to.Ptr("Department1"),
						InstanceID:           to.Ptr("/subscriptions/subid/resourceGroups/Default-Web-eastasia/providers/Microsoft.Web/sites/shared1"),
						InstanceName:         to.Ptr("shared1"),
						IsEstimated:          to.Ptr(false),
						IsRecurringCharge:    to.Ptr(false),
						OfferName:            to.Ptr("offer1"),
						OrderNumber:          to.Ptr("00000000-0000-0000-0000-000000000000"),
						PlanName:             to.Ptr("plan1"),
						PretaxCost:           to.Ptr[float64](0.67),
						PublisherName:        to.Ptr("xyz"),
						ResourceGroup:        to.Ptr("TEST"),
						ResourceRate:         to.Ptr[float64](0.24),
						SubscriptionGUID:     to.Ptr("00000000-0000-0000-0000-000000000000"),
						SubscriptionName:     to.Ptr("azure subscription"),
						UnitOfMeasure:        to.Ptr("10 Hours"),
						UsageEnd:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-13T23:59:59Z"); return t }()),
						UsageStart:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-13T00:00:00Z"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.MarketplacesListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.MarketplacesListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/MarketplacesByBillingAccountList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/MarketplacesByBillingAccountListForBillingPeriod.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"BillingAccountMarketplacesListForBillingPeriod"},
	})
	client = armconsumption.NewMarketplacesClient(cred, &options)
	pager = client.List("providers/Microsoft.Billing/billingAccounts/123456",
		&armconsumption.MarketplacesClientListOptions{Filter: nil,
			Top:       nil,
			Skiptoken: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/MarketplacesByBillingAccountListForBillingPeriod.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armconsumption.MarketplacesListResult{
			Value: []*armconsumption.Marketplace{
				{
					Name: to.Ptr("marketplacesId1"),
					Type: to.Ptr("Microsoft.Consumption/marketPlaces"),
					ID:   to.Ptr("providers/Microsoft.Billing/billingAccounts/123456/providers/Microsoft.Billing/billingPeriods/201702/providers/Microsoft.Consumption/marketplaces/marketplaceId1"),
					Tags: map[string]*string{
						"dev": to.Ptr("tools"),
						"env": to.Ptr("newcrp"),
					},
					Properties: &armconsumption.MarketplaceProperties{
						AccountName:          to.Ptr("Account1"),
						AdditionalProperties: to.Ptr("additionalProperties"),
						BillingPeriodID:      to.Ptr("/providers/Microsoft.Billing/billingAccounts/123456/providers/Microsoft.Billing/billingPeriods/201702"),
						ConsumedQuantity:     to.Ptr[float64](0.00328),
						CostCenter:           to.Ptr("Center1"),
						Currency:             to.Ptr("USD"),
						DepartmentName:       to.Ptr("Department1"),
						InstanceID:           to.Ptr("/subscriptions/subid/resourceGroups/Default-Web-eastasia/providers/Microsoft.Web/sites/shared1"),
						InstanceName:         to.Ptr("shared1"),
						IsEstimated:          to.Ptr(false),
						IsRecurringCharge:    to.Ptr(false),
						MeterID:              to.Ptr("00000000-0000-0000-0000-000000000000"),
						OfferName:            to.Ptr("offer1"),
						OrderNumber:          to.Ptr("00000000-0000-0000-0000-000000000000"),
						PlanName:             to.Ptr("plan2"),
						PretaxCost:           to.Ptr[float64](0.67),
						PublisherName:        to.Ptr("xyz"),
						ResourceGroup:        to.Ptr("TEST"),
						ResourceRate:         to.Ptr[float64](0.24),
						SubscriptionGUID:     to.Ptr("00000000-0000-0000-0000-000000000000"),
						SubscriptionName:     to.Ptr("azure subscription"),
						UnitOfMeasure:        to.Ptr("10 Hours"),
						UsageEnd:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-13T23:59:59Z"); return t }()),
						UsageStart:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-13T00:00:00Z"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.MarketplacesListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.MarketplacesListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/MarketplacesByBillingAccountListForBillingPeriod.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/MarketplacesByDepartmentList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DepartmentMarketplacesList"},
	})
	client = armconsumption.NewMarketplacesClient(cred, &options)
	pager = client.List("providers/Microsoft.Billing/departments/123456",
		&armconsumption.MarketplacesClientListOptions{Filter: nil,
			Top:       nil,
			Skiptoken: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/MarketplacesByDepartmentList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armconsumption.MarketplacesListResult{
			Value: []*armconsumption.Marketplace{
				{
					Name: to.Ptr("marketplacesId1"),
					Type: to.Ptr("Microsoft.Consumption/marketPlaces"),
					ID:   to.Ptr("/providers/Microsoft.Billing/departments/123456/providers/Microsoft.Billing/billingPeriods/201702/providers/Microsoft.Consumption/marketplaces/marketplaceId1"),
					Tags: map[string]*string{
						"dev": to.Ptr("tools"),
						"env": to.Ptr("newcrp"),
					},
					Properties: &armconsumption.MarketplaceProperties{
						AccountName:          to.Ptr("Account1"),
						AdditionalProperties: to.Ptr("additionalProperties"),
						BillingPeriodID:      to.Ptr("/providers/Microsoft.Billing/departments/123456/providers/Microsoft.Billing/billingPeriods/201702"),
						ConsumedQuantity:     to.Ptr[float64](0.00328),
						CostCenter:           to.Ptr("Center1"),
						Currency:             to.Ptr("USD"),
						DepartmentName:       to.Ptr("Department1"),
						InstanceID:           to.Ptr("/subscriptions/subid/resourceGroups/Default-Web-eastasia/providers/Microsoft.Web/sites/shared1"),
						InstanceName:         to.Ptr("shared1"),
						IsEstimated:          to.Ptr(false),
						IsRecurringCharge:    to.Ptr(false),
						MeterID:              to.Ptr("00000000-0000-0000-0000-000000000000"),
						OfferName:            to.Ptr("offer1"),
						OrderNumber:          to.Ptr("00000000-0000-0000-0000-000000000000"),
						PlanName:             to.Ptr("plan2"),
						PretaxCost:           to.Ptr[float64](0.67),
						PublisherName:        to.Ptr("xyz"),
						ResourceGroup:        to.Ptr("TEST"),
						ResourceRate:         to.Ptr[float64](0.24),
						SubscriptionGUID:     to.Ptr("00000000-0000-0000-0000-000000000000"),
						SubscriptionName:     to.Ptr("azure subscription"),
						UnitOfMeasure:        to.Ptr("10 Hours"),
						UsageEnd:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-13T23:59:59Z"); return t }()),
						UsageStart:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-13T00:00:00Z"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.MarketplacesListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.MarketplacesListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/MarketplacesByDepartmentList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/MarketplacesByDepartment_ListByBillingPeriod.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DepartmentMarketplacesListForBillingPeriod"},
	})
	client = armconsumption.NewMarketplacesClient(cred, &options)
	pager = client.List("providers/Microsoft.Billing/departments/123456",
		&armconsumption.MarketplacesClientListOptions{Filter: nil,
			Top:       nil,
			Skiptoken: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/MarketplacesByDepartment_ListByBillingPeriod.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armconsumption.MarketplacesListResult{
			Value: []*armconsumption.Marketplace{
				{
					Name: to.Ptr("marketplacesId1"),
					Type: to.Ptr("Microsoft.Consumption/marketPlaces"),
					ID:   to.Ptr("/providers/Microsoft.Billing/departments/123456/providers/Microsoft.Billing/billingPeriods/201702/providers/Microsoft.Consumption/marketplaces/marketplaceId1"),
					Tags: map[string]*string{
						"dev": to.Ptr("tools"),
						"env": to.Ptr("newcrp"),
					},
					Properties: &armconsumption.MarketplaceProperties{
						AccountName:          to.Ptr("Account1"),
						AdditionalProperties: to.Ptr("additionalProperties"),
						BillingPeriodID:      to.Ptr("/providers/Microsoft.Billing/departments/123456/providers/Microsoft.Billing/billingPeriods/201702"),
						ConsumedQuantity:     to.Ptr[float64](0.00328),
						CostCenter:           to.Ptr("Center1"),
						Currency:             to.Ptr("USD"),
						DepartmentName:       to.Ptr("Department1"),
						InstanceID:           to.Ptr("/subscriptions/subid/resourceGroups/Default-Web-eastasia/providers/Microsoft.Web/sites/shared1"),
						InstanceName:         to.Ptr("shared1"),
						IsEstimated:          to.Ptr(false),
						IsRecurringCharge:    to.Ptr(false),
						MeterID:              to.Ptr("00000000-0000-0000-0000-000000000000"),
						OfferName:            to.Ptr("offer1"),
						OrderNumber:          to.Ptr("00000000-0000-0000-0000-000000000000"),
						PlanName:             to.Ptr("plan2"),
						PretaxCost:           to.Ptr[float64](0.67),
						PublisherName:        to.Ptr("xyz"),
						ResourceGroup:        to.Ptr("TEST"),
						ResourceRate:         to.Ptr[float64](0.24),
						SubscriptionGUID:     to.Ptr("00000000-0000-0000-0000-000000000000"),
						SubscriptionName:     to.Ptr("azure subscription"),
						UnitOfMeasure:        to.Ptr("10 Hours"),
						UsageEnd:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-13T23:59:59Z"); return t }()),
						UsageStart:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-13T00:00:00Z"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.MarketplacesListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.MarketplacesListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/MarketplacesByDepartment_ListByBillingPeriod.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/MarketplacesByEnrollmentAccountList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"EnrollmentAccountMarketplacesList"},
	})
	client = armconsumption.NewMarketplacesClient(cred, &options)
	pager = client.List("providers/Microsoft.Billing/enrollmentAccounts/123456",
		&armconsumption.MarketplacesClientListOptions{Filter: nil,
			Top:       nil,
			Skiptoken: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/MarketplacesByEnrollmentAccountList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armconsumption.MarketplacesListResult{
			Value: []*armconsumption.Marketplace{
				{
					Name: to.Ptr("marketplacesId1"),
					Type: to.Ptr("Microsoft.Consumption/marketPlaces"),
					ID:   to.Ptr("/providers/Microsoft.Billing/enrollmentAccounts/123456/providers/Microsoft.Billing/billingPeriods/201702/providers/Microsoft.Consumption/marketplaces/marketplaceId1"),
					Tags: map[string]*string{
						"dev": to.Ptr("tools"),
						"env": to.Ptr("newcrp"),
					},
					Properties: &armconsumption.MarketplaceProperties{
						AccountName:          to.Ptr("Account1"),
						AdditionalProperties: to.Ptr("additionalProperties"),
						BillingPeriodID:      to.Ptr("/providers/Microsoft.Billing/enrollmentAccounts/123456/providers/Microsoft.Billing/billingPeriods/201702"),
						ConsumedQuantity:     to.Ptr[float64](0.00328),
						CostCenter:           to.Ptr("Center1"),
						Currency:             to.Ptr("USD"),
						DepartmentName:       to.Ptr("Department1"),
						InstanceID:           to.Ptr("/subscriptions/subid/resourceGroups/Default-Web-eastasia/providers/Microsoft.Web/sites/shared1"),
						InstanceName:         to.Ptr("shared1"),
						IsEstimated:          to.Ptr(false),
						IsRecurringCharge:    to.Ptr(false),
						MeterID:              to.Ptr("00000000-0000-0000-0000-000000000000"),
						OfferName:            to.Ptr("offer1"),
						OrderNumber:          to.Ptr("00000000-0000-0000-0000-000000000000"),
						PlanName:             to.Ptr("plan2"),
						PretaxCost:           to.Ptr[float64](0.67),
						PublisherName:        to.Ptr("xyz"),
						ResourceGroup:        to.Ptr("TEST"),
						ResourceRate:         to.Ptr[float64](0.24),
						SubscriptionGUID:     to.Ptr("00000000-0000-0000-0000-000000000000"),
						SubscriptionName:     to.Ptr("azure subscription"),
						UnitOfMeasure:        to.Ptr("10 Hours"),
						UsageEnd:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-13T23:59:59Z"); return t }()),
						UsageStart:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-13T00:00:00Z"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.MarketplacesListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.MarketplacesListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/MarketplacesByEnrollmentAccountList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/MarketplacesByEnrollmentAccounts_ListByBillingPeriod.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"EnrollmentAccountMarketplacesListForBillingPeriod"},
	})
	client = armconsumption.NewMarketplacesClient(cred, &options)
	pager = client.List("providers/Microsoft.Billing/enrollmentAccounts/123456",
		&armconsumption.MarketplacesClientListOptions{Filter: nil,
			Top:       nil,
			Skiptoken: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/MarketplacesByEnrollmentAccounts_ListByBillingPeriod.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armconsumption.MarketplacesListResult{
			Value: []*armconsumption.Marketplace{
				{
					Name: to.Ptr("marketplacesId1"),
					Type: to.Ptr("Microsoft.Consumption/marketPlaces"),
					ID:   to.Ptr("/providers/Microsoft.Billing/enrollmentAccounts/123456/providers/Microsoft.Billing/billingPeriods/201702/providers/Microsoft.Consumption/marketplaces/marketplaceId1"),
					Tags: map[string]*string{
						"dev": to.Ptr("tools"),
						"env": to.Ptr("newcrp"),
					},
					Properties: &armconsumption.MarketplaceProperties{
						AccountName:          to.Ptr("Account1"),
						AdditionalProperties: to.Ptr("additionalProperties"),
						BillingPeriodID:      to.Ptr("/providers/Microsoft.Billing/enrollmentAccounts/123456/providers/Microsoft.Billing/billingPeriods/201702"),
						ConsumedQuantity:     to.Ptr[float64](0.00328),
						CostCenter:           to.Ptr("Center1"),
						Currency:             to.Ptr("USD"),
						DepartmentName:       to.Ptr("Department1"),
						InstanceID:           to.Ptr("/subscriptions/subid/resourceGroups/Default-Web-eastasia/providers/Microsoft.Web/sites/shared1"),
						InstanceName:         to.Ptr("shared1"),
						IsEstimated:          to.Ptr(false),
						IsRecurringCharge:    to.Ptr(false),
						MeterID:              to.Ptr("00000000-0000-0000-0000-000000000000"),
						OfferName:            to.Ptr("offer1"),
						OrderNumber:          to.Ptr("00000000-0000-0000-0000-000000000000"),
						PlanName:             to.Ptr("plan2"),
						PretaxCost:           to.Ptr[float64](0.67),
						PublisherName:        to.Ptr("xyz"),
						ResourceGroup:        to.Ptr("TEST"),
						ResourceRate:         to.Ptr[float64](0.24),
						SubscriptionGUID:     to.Ptr("00000000-0000-0000-0000-000000000000"),
						SubscriptionName:     to.Ptr("azure subscription"),
						UnitOfMeasure:        to.Ptr("10 Hours"),
						UsageEnd:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-13T23:59:59Z"); return t }()),
						UsageStart:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-13T00:00:00Z"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.MarketplacesListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.MarketplacesListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/MarketplacesByEnrollmentAccounts_ListByBillingPeriod.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/MarketplacesByManagementGroupList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ManagementGroupMarketplacesList"},
	})
	client = armconsumption.NewMarketplacesClient(cred, &options)
	pager = client.List("subscriptions/00000000-0000-0000-0000-000000000000",
		&armconsumption.MarketplacesClientListOptions{Filter: nil,
			Top:       nil,
			Skiptoken: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/MarketplacesByManagementGroupList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armconsumption.MarketplacesListResult{
			Value: []*armconsumption.Marketplace{
				{
					Name: to.Ptr("marketplacesId1"),
					Type: to.Ptr("Microsoft.Consumption/marketPlaces"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Billing/billingPeriods/201810/providers/Microsoft.Consumption/marketplaces/marketplaceId1"),
					Tags: map[string]*string{
						"dev": to.Ptr("tools"),
						"env": to.Ptr("newcrp"),
					},
					Properties: &armconsumption.MarketplaceProperties{
						AccountName:          to.Ptr("Account1"),
						AdditionalProperties: to.Ptr("additionalProperties"),
						BillingPeriodID:      to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Billing/billingPeriods/201810"),
						ConsumedQuantity:     to.Ptr[float64](0.00328),
						CostCenter:           to.Ptr("Center1"),
						Currency:             to.Ptr("USD"),
						DepartmentName:       to.Ptr("Department1"),
						InstanceID:           to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/Default-Web-eastasia/providers/Microsoft.Web/sites/shared1"),
						InstanceName:         to.Ptr("shared1"),
						IsEstimated:          to.Ptr(false),
						IsRecurringCharge:    to.Ptr(false),
						MeterID:              to.Ptr("00000000-0000-0000-0000-000000000000"),
						OfferName:            to.Ptr("offer1"),
						OrderNumber:          to.Ptr("00000000-0000-0000-0000-000000000000"),
						PlanName:             to.Ptr("plan2"),
						PretaxCost:           to.Ptr[float64](0.67),
						PublisherName:        to.Ptr("xyz"),
						ResourceGroup:        to.Ptr("TEST"),
						ResourceRate:         to.Ptr[float64](0.24),
						SubscriptionGUID:     to.Ptr("00000000-0000-0000-0000-000000000000"),
						SubscriptionName:     to.Ptr("azure subscription"),
						UnitOfMeasure:        to.Ptr("10 Hours"),
						UsageEnd:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-10-13T23:59:59Z"); return t }()),
						UsageStart:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-10-13T00:00:00Z"); return t }()),
					},
				},
				{
					Name: to.Ptr("marketplacesId2"),
					Type: to.Ptr("Microsoft.Consumption/marketPlaces"),
					ID:   to.Ptr("/subscriptions/11111111-1111-1111-1111-111111111111/providers/Microsoft.Billing/billingPeriods/201810/providers/Microsoft.Consumption/marketplaces/marketplaceId2"),
					Tags: map[string]*string{
						"dev": to.Ptr("tools"),
						"env": to.Ptr("newcrp"),
					},
					Properties: &armconsumption.MarketplaceProperties{
						AccountName:          to.Ptr("Account2"),
						AdditionalProperties: to.Ptr("additionalProperties"),
						BillingPeriodID:      to.Ptr("/subscriptions/11111111-1111-1111-1111-111111111111/providers/Microsoft.Billing/billingPeriods/201810"),
						ConsumedQuantity:     to.Ptr[float64](0.00328),
						CostCenter:           to.Ptr("Center2"),
						Currency:             to.Ptr("USD"),
						DepartmentName:       to.Ptr("Department2"),
						InstanceID:           to.Ptr("/subscriptions/11111111-1111-1111-1111-111111111111/resourceGroups/Default-Web-eastasia/providers/Microsoft.Web/sites/shared2"),
						InstanceName:         to.Ptr("shared2"),
						IsEstimated:          to.Ptr(false),
						IsRecurringCharge:    to.Ptr(false),
						MeterID:              to.Ptr("11111111-1111-1111-1111-111111111111"),
						OfferName:            to.Ptr("offer1"),
						OrderNumber:          to.Ptr("11111111-1111-1111-1111-111111111111"),
						PlanName:             to.Ptr("plan2"),
						PretaxCost:           to.Ptr[float64](0.67),
						PublisherName:        to.Ptr("xyz"),
						ResourceGroup:        to.Ptr("TEST"),
						ResourceRate:         to.Ptr[float64](0.24),
						SubscriptionGUID:     to.Ptr("11111111-1111-1111-1111-111111111111"),
						SubscriptionName:     to.Ptr("azure subscription"),
						UnitOfMeasure:        to.Ptr("10 Hours"),
						UsageEnd:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-10-13T23:59:59Z"); return t }()),
						UsageStart:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-10-13T00:00:00Z"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.MarketplacesListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.MarketplacesListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/MarketplacesByManagementGroupList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/MarketplacesByManagementGroup_ListForBillingPeriod.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ManagementGroupMarketplacesListForBillingPeriod"},
	})
	client = armconsumption.NewMarketplacesClient(cred, &options)
	pager = client.List("subscriptions/00000000-0000-0000-0000-000000000000",
		&armconsumption.MarketplacesClientListOptions{Filter: nil,
			Top:       nil,
			Skiptoken: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/MarketplacesByManagementGroup_ListForBillingPeriod.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armconsumption.MarketplacesListResult{
			Value: []*armconsumption.Marketplace{
				{
					Name: to.Ptr("marketplacesId1"),
					Type: to.Ptr("Microsoft.Consumption/marketPlaces"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Billing/billingPeriods/201808/providers/Microsoft.Consumption/marketplaces/marketplaceId1"),
					Tags: map[string]*string{
						"dev": to.Ptr("tools"),
						"env": to.Ptr("newcrp"),
					},
					Properties: &armconsumption.MarketplaceProperties{
						AccountName:          to.Ptr("Account1"),
						AdditionalProperties: to.Ptr("additionalProperties"),
						BillingPeriodID:      to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Billing/billingPeriods/201808"),
						ConsumedQuantity:     to.Ptr[float64](0.00328),
						CostCenter:           to.Ptr("Center1"),
						Currency:             to.Ptr("USD"),
						DepartmentName:       to.Ptr("Department1"),
						InstanceID:           to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/Default-Web-eastasia/providers/Microsoft.Web/sites/shared1"),
						InstanceName:         to.Ptr("shared1"),
						IsEstimated:          to.Ptr(false),
						IsRecurringCharge:    to.Ptr(false),
						MeterID:              to.Ptr("00000000-0000-0000-0000-000000000000"),
						OfferName:            to.Ptr("offer1"),
						OrderNumber:          to.Ptr("00000000-0000-0000-0000-000000000000"),
						PlanName:             to.Ptr("plan2"),
						PretaxCost:           to.Ptr[float64](0.67),
						PublisherName:        to.Ptr("xyz"),
						ResourceGroup:        to.Ptr("TEST"),
						ResourceRate:         to.Ptr[float64](0.24),
						SubscriptionGUID:     to.Ptr("00000000-0000-0000-0000-000000000000"),
						SubscriptionName:     to.Ptr("azure subscription"),
						UnitOfMeasure:        to.Ptr("10 Hours"),
						UsageEnd:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-13T23:59:59Z"); return t }()),
						UsageStart:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-13T00:00:00Z"); return t }()),
					},
				},
				{
					Name: to.Ptr("marketplacesId2"),
					Type: to.Ptr("Microsoft.Consumption/marketPlaces"),
					ID:   to.Ptr("/subscriptions/11111111-1111-1111-1111-111111111111/providers/Microsoft.Billing/billingPeriods/201808/providers/Microsoft.Consumption/marketplaces/marketplaceId2"),
					Tags: map[string]*string{
						"dev": to.Ptr("tools"),
						"env": to.Ptr("newcrp"),
					},
					Properties: &armconsumption.MarketplaceProperties{
						AccountName:          to.Ptr("Account2"),
						AdditionalProperties: to.Ptr("additionalProperties"),
						BillingPeriodID:      to.Ptr("/subscriptions/11111111-1111-1111-1111-111111111111/providers/Microsoft.Billing/billingPeriods/201810"),
						ConsumedQuantity:     to.Ptr[float64](0.00328),
						CostCenter:           to.Ptr("Center2"),
						Currency:             to.Ptr("USD"),
						DepartmentName:       to.Ptr("Department2"),
						InstanceID:           to.Ptr("/subscriptions/11111111-1111-1111-1111-111111111111/resourceGroups/Default-Web-eastasia/providers/Microsoft.Web/sites/shared2"),
						InstanceName:         to.Ptr("shared2"),
						IsEstimated:          to.Ptr(false),
						IsRecurringCharge:    to.Ptr(false),
						MeterID:              to.Ptr("11111111-1111-1111-1111-111111111111"),
						OfferName:            to.Ptr("offer1"),
						OrderNumber:          to.Ptr("11111111-1111-1111-1111-111111111111"),
						PlanName:             to.Ptr("plan2"),
						PretaxCost:           to.Ptr[float64](0.67),
						PublisherName:        to.Ptr("xyz"),
						ResourceGroup:        to.Ptr("TEST"),
						ResourceRate:         to.Ptr[float64](0.24),
						SubscriptionGUID:     to.Ptr("11111111-1111-1111-1111-111111111111"),
						SubscriptionName:     to.Ptr("azure subscription"),
						UnitOfMeasure:        to.Ptr("10 Hours"),
						UsageEnd:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-13T23:59:59Z"); return t }()),
						UsageStart:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-13T00:00:00Z"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.MarketplacesListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.MarketplacesListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/MarketplacesByManagementGroup_ListForBillingPeriod.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/MarketplacesList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SubscriptionMarketplacesList"},
	})
	client = armconsumption.NewMarketplacesClient(cred, &options)
	pager = client.List("subscriptions/00000000-0000-0000-0000-000000000000",
		&armconsumption.MarketplacesClientListOptions{Filter: nil,
			Top:       nil,
			Skiptoken: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/MarketplacesList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armconsumption.MarketplacesListResult{
			Value: []*armconsumption.Marketplace{
				{
					Name: to.Ptr("marketplaceId1"),
					Type: to.Ptr("Microsoft.Consumption/marketPlaces"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Billing/billingPeriods/201702/providers/Microsoft.Consumption/marketPlaces/marketplaceId1"),
					Tags: map[string]*string{
						"dev": to.Ptr("tools"),
						"env": to.Ptr("newcrp"),
					},
					Properties: &armconsumption.MarketplaceProperties{
						AccountName:          to.Ptr("Account1"),
						AdditionalProperties: to.Ptr("additionalProperties"),
						BillingPeriodID:      to.Ptr("/subscriptions/subid/providers/Microsoft.Billing/billingPeriods/201702"),
						ConsumedQuantity:     to.Ptr[float64](0.00328),
						CostCenter:           to.Ptr("Center1"),
						Currency:             to.Ptr("USD"),
						DepartmentName:       to.Ptr("Department1"),
						InstanceID:           to.Ptr("/subscriptions/subid/resourceGroups/Default-Web-eastasia/providers/Microsoft.Web/sites/shared1"),
						InstanceName:         to.Ptr("shared1"),
						IsEstimated:          to.Ptr(false),
						IsRecurringCharge:    to.Ptr(false),
						OfferName:            to.Ptr("offer1"),
						OrderNumber:          to.Ptr("00000000-0000-0000-0000-000000000000"),
						PlanName:             to.Ptr("plan1"),
						PretaxCost:           to.Ptr[float64](0.67),
						PublisherName:        to.Ptr("xyz"),
						ResourceGroup:        to.Ptr("TEST"),
						ResourceRate:         to.Ptr[float64](0.24),
						SubscriptionGUID:     to.Ptr("00000000-0000-0000-0000-000000000000"),
						SubscriptionName:     to.Ptr("azure subscription"),
						UnitOfMeasure:        to.Ptr("10 Hours"),
						UsageEnd:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-13T23:59:59Z"); return t }()),
						UsageStart:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-13T00:00:00Z"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.MarketplacesListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.MarketplacesListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/MarketplacesList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/MarketplacesListForBillingPeriod.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SubscriptionMarketplacesListForBillingPeriod"},
	})
	client = armconsumption.NewMarketplacesClient(cred, &options)
	pager = client.List("subscriptions/00000000-0000-0000-0000-000000000000",
		&armconsumption.MarketplacesClientListOptions{Filter: nil,
			Top:       nil,
			Skiptoken: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/MarketplacesListForBillingPeriod.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armconsumption.MarketplacesListResult{
			Value: []*armconsumption.Marketplace{
				{
					Name: to.Ptr("marketplacesId1"),
					Type: to.Ptr("Microsoft.Consumption/marketPlaces"),
					ID:   to.Ptr("/subscriptions/subid/providers/Microsoft.Billing/billingPeriods/201702/providers/Microsoft.Consumption/marketPlaces/marketplacesId1"),
					Tags: map[string]*string{
						"dev": to.Ptr("tools"),
						"env": to.Ptr("newcrp"),
					},
					Properties: &armconsumption.MarketplaceProperties{
						AccountName:          to.Ptr("Account1"),
						AdditionalProperties: to.Ptr("additionalProperties"),
						BillingPeriodID:      to.Ptr("/subscriptions/subid/providers/Microsoft.Billing/billingPeriods/201702"),
						ConsumedQuantity:     to.Ptr[float64](0.00328),
						CostCenter:           to.Ptr("Center1"),
						Currency:             to.Ptr("USD"),
						DepartmentName:       to.Ptr("Department1"),
						InstanceID:           to.Ptr("/subscriptions/subid/resourceGroups/Default-Web-eastasia/providers/Microsoft.Web/sites/shared1"),
						InstanceName:         to.Ptr("shared1"),
						IsEstimated:          to.Ptr(false),
						IsRecurringCharge:    to.Ptr(false),
						MeterID:              to.Ptr("00000000-0000-0000-0000-000000000000"),
						OfferName:            to.Ptr("offer1"),
						OrderNumber:          to.Ptr("00000000-0000-0000-0000-000000000000"),
						PlanName:             to.Ptr("plan2"),
						PretaxCost:           to.Ptr[float64](0.67),
						PublisherName:        to.Ptr("xyz"),
						ResourceGroup:        to.Ptr("TEST"),
						ResourceRate:         to.Ptr[float64](0.24),
						SubscriptionGUID:     to.Ptr("00000000-0000-0000-0000-000000000000"),
						SubscriptionName:     to.Ptr("azure subscription"),
						UnitOfMeasure:        to.Ptr("10 Hours"),
						UsageEnd:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-13T23:59:59Z"); return t }()),
						UsageStart:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-13T00:00:00Z"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.MarketplacesListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.MarketplacesListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/MarketplacesListForBillingPeriod.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBudgets_List(t *testing.T) {
	// From example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/BudgetsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"BudgetsList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armconsumption.NewBudgetsClient(cred, &options)
	pager := client.List("subscriptions/00000000-0000-0000-0000-000000000000",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/BudgetsList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armconsumption.BudgetsListResult{
			Value: []*armconsumption.Budget{
				{
					Name: to.Ptr("TestBudget"),
					Type: to.Ptr("Microsoft.Consumption/budgets"),
					ETag: to.Ptr("\"1d34d012214157f\""),
					ID:   to.Ptr("subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MYDEVTESTRG/providers/Microsoft.Consumption/budgets/TestBudget"),
					Properties: &armconsumption.BudgetProperties{
						Amount:   to.Ptr[float64](100.65),
						Category: to.Ptr(armconsumption.CategoryTypeCost),
						CurrentSpend: &armconsumption.CurrentSpend{
							Amount: to.Ptr[float64](80.89),
							Unit:   to.Ptr("USD"),
						},
						Filter: &armconsumption.BudgetFilter{
							And: []*armconsumption.BudgetFilterProperties{
								{
									Dimensions: &armconsumption.BudgetComparisonExpression{
										Name:     to.Ptr("ResourceId"),
										Operator: to.Ptr(armconsumption.BudgetOperatorTypeIn),
										Values: []*string{
											to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MYDEVTESTRG/providers/Microsoft.Compute/virtualMachines/MSVM2"),
											to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MYDEVTESTRG/providers/Microsoft.Compute/virtualMachines/platformcloudplatformGeneric1")},
									},
								},
								{
									Tags: &armconsumption.BudgetComparisonExpression{
										Name:     to.Ptr("category"),
										Operator: to.Ptr(armconsumption.BudgetOperatorTypeIn),
										Values: []*string{
											to.Ptr("Dev"),
											to.Ptr("Prod")},
									},
								},
								{
									Tags: &armconsumption.BudgetComparisonExpression{
										Name:     to.Ptr("department"),
										Operator: to.Ptr(armconsumption.BudgetOperatorTypeIn),
										Values: []*string{
											to.Ptr("engineering"),
											to.Ptr("sales")},
									},
								}},
						},
						Notifications: map[string]*armconsumption.Notification{
							"Actual_GreaterThanOrEqualTo_90_Percent": {
								ContactEmails: []*string{
									to.Ptr("johndoe@contoso.com"),
									to.Ptr("janesmith@contoso.com")},
								ContactGroups: []*string{
									to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MYDEVTESTRG/providers/microsoft.insights/actionGroups/SampleActionGroup")},
								ContactRoles: []*string{
									to.Ptr("Contributor"),
									to.Ptr("Reader")},
								Enabled:   to.Ptr(true),
								Operator:  to.Ptr(armconsumption.OperatorTypeGreaterThanOrEqualTo),
								Threshold: to.Ptr[float64](90),
							},
							"Actual_GreaterThan_80_Percent": {
								ContactEmails: []*string{
									to.Ptr("johndoe@contoso.com"),
									to.Ptr("janesmith@contoso.com")},
								ContactRoles: []*string{
									to.Ptr("Contributor"),
									to.Ptr("Reader")},
								Enabled:   to.Ptr(true),
								Operator:  to.Ptr(armconsumption.OperatorTypeGreaterThan),
								Threshold: to.Ptr[float64](80),
							},
							"thresholdType": {},
						},
						TimeGrain: to.Ptr(armconsumption.TimeGrainTypeMonthly),
						TimePeriod: &armconsumption.BudgetTimePeriod{
							EndDate:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-10-31T00:00:00Z"); return t }()),
							StartDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-10-01T00:00:00Z"); return t }()),
						},
					},
				},
				{
					Name: to.Ptr("TestBudget"),
					Type: to.Ptr("Microsoft.Consumption/budgets"),
					ETag: to.Ptr("\"1d34d012214157f\""),
					ID:   to.Ptr("subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Consumption/budgets/TestBudget"),
					Properties: &armconsumption.BudgetProperties{
						Amount:   to.Ptr[float64](600.65),
						Category: to.Ptr(armconsumption.CategoryTypeCost),
						CurrentSpend: &armconsumption.CurrentSpend{
							Amount: to.Ptr[float64](120.89),
							Unit:   to.Ptr("USD"),
						},
						Filter: &armconsumption.BudgetFilter{
							And: []*armconsumption.BudgetFilterProperties{
								{
									Dimensions: &armconsumption.BudgetComparisonExpression{
										Name:     to.Ptr("ResourceId"),
										Operator: to.Ptr(armconsumption.BudgetOperatorTypeIn),
										Values: []*string{
											to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MYDEVTESTRG/providers/Microsoft.Compute/virtualMachines/MSVM2"),
											to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MYDEVTESTRG/providers/Microsoft.Compute/virtualMachines/platformcloudplatformGeneric1")},
									},
								},
								{
									Tags: &armconsumption.BudgetComparisonExpression{
										Name:     to.Ptr("category"),
										Operator: to.Ptr(armconsumption.BudgetOperatorTypeIn),
										Values: []*string{
											to.Ptr("Dev"),
											to.Ptr("Prod")},
									},
								},
								{
									Tags: &armconsumption.BudgetComparisonExpression{
										Name:     to.Ptr("department"),
										Operator: to.Ptr(armconsumption.BudgetOperatorTypeIn),
										Values: []*string{
											to.Ptr("engineering"),
											to.Ptr("sales")},
									},
								}},
						},
						Notifications: map[string]*armconsumption.Notification{
							"Actual_GreaterThanOrEqualTo_60_Percent": {
								ContactEmails: []*string{
									to.Ptr("johndoe@contoso.com"),
									to.Ptr("janesmith@contoso.com")},
								ContactGroups: []*string{
									to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MYDEVTESTRG/providers/microsoft.insights/actionGroups/SampleActionGroup")},
								ContactRoles: []*string{
									to.Ptr("Contributor"),
									to.Ptr("Reader")},
								Enabled:       to.Ptr(true),
								Operator:      to.Ptr(armconsumption.OperatorTypeGreaterThanOrEqualTo),
								Threshold:     to.Ptr[float64](60),
								ThresholdType: to.Ptr(armconsumption.ThresholdTypeActual),
							},
							"Actual_GreaterThan_40_Percent": {
								ContactEmails: []*string{
									to.Ptr("johndoe@contoso.com"),
									to.Ptr("janesmith@contoso.com")},
								ContactRoles: []*string{
									to.Ptr("Contributor"),
									to.Ptr("Reader")},
								Enabled:   to.Ptr(true),
								Operator:  to.Ptr(armconsumption.OperatorTypeGreaterThan),
								Threshold: to.Ptr[float64](40),
							},
						},
						TimeGrain: to.Ptr(armconsumption.TimeGrainTypeMonthly),
						TimePeriod: &armconsumption.BudgetTimePeriod{
							EndDate:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-10-31T00:00:00Z"); return t }()),
							StartDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-10-01T00:00:00Z"); return t }()),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.BudgetsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.BudgetsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/BudgetsList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBudgets_Get(t *testing.T) {
	// From example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/Budget.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Budget"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armconsumption.NewBudgetsClient(cred, &options)
	res, err := client.Get(ctx,
		"subscriptions/00000000-0000-0000-0000-000000000000",
		"TestBudget",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/Budget.json: %v", err)
	}
	// Response check
	{
		exampleRes := armconsumption.Budget{
			Name: to.Ptr("TestBudget"),
			Type: to.Ptr("Microsoft.Consumption/budgets"),
			ETag: to.Ptr("\"1d34d012214157f\""),
			ID:   to.Ptr("subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MYDEVTESTRG/providers/Microsoft.Consumption/budgets/TestBudget"),
			Properties: &armconsumption.BudgetProperties{
				Amount:   to.Ptr[float64](100.65),
				Category: to.Ptr(armconsumption.CategoryTypeCost),
				CurrentSpend: &armconsumption.CurrentSpend{
					Amount: to.Ptr[float64](80.89),
					Unit:   to.Ptr("USD"),
				},
				Filter: &armconsumption.BudgetFilter{
					And: []*armconsumption.BudgetFilterProperties{
						{
							Dimensions: &armconsumption.BudgetComparisonExpression{
								Name:     to.Ptr("ResourceId"),
								Operator: to.Ptr(armconsumption.BudgetOperatorTypeIn),
								Values: []*string{
									to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MYDEVTESTRG/providers/Microsoft.Compute/virtualMachines/MSVM2"),
									to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MYDEVTESTRG/providers/Microsoft.Compute/virtualMachines/platformcloudplatformGeneric1")},
							},
						},
						{
							Tags: &armconsumption.BudgetComparisonExpression{
								Name:     to.Ptr("category"),
								Operator: to.Ptr(armconsumption.BudgetOperatorTypeIn),
								Values: []*string{
									to.Ptr("Dev"),
									to.Ptr("Prod")},
							},
						},
						{
							Tags: &armconsumption.BudgetComparisonExpression{
								Name:     to.Ptr("department"),
								Operator: to.Ptr(armconsumption.BudgetOperatorTypeIn),
								Values: []*string{
									to.Ptr("engineering"),
									to.Ptr("sales")},
							},
						}},
				},
				Notifications: map[string]*armconsumption.Notification{
					"Actual_GreaterThan_80_Percent": {
						ContactEmails: []*string{
							to.Ptr("johndoe@contoso.com"),
							to.Ptr("janesmith@contoso.com")},
						ContactGroups: []*string{
							to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MYDEVTESTRG/providers/microsoft.insights/actionGroups/SampleActionGroup")},
						ContactRoles: []*string{
							to.Ptr("Contributor"),
							to.Ptr("Reader")},
						Enabled:       to.Ptr(true),
						Operator:      to.Ptr(armconsumption.OperatorTypeGreaterThan),
						Threshold:     to.Ptr[float64](80),
						ThresholdType: to.Ptr(armconsumption.ThresholdTypeActual),
					},
				},
				TimeGrain: to.Ptr(armconsumption.TimeGrainTypeMonthly),
				TimePeriod: &armconsumption.BudgetTimePeriod{
					EndDate:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-10-31T00:00:00Z"); return t }()),
					StartDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-10-01T00:00:00Z"); return t }()),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Budget) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Budget)
			t.Fatalf("Mock response is not equal to example response for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/Budget.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBudgets_CreateOrUpdate(t *testing.T) {
	// From example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/CreateOrUpdateBudget.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CreateOrUpdateBudget"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armconsumption.NewBudgetsClient(cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"subscriptions/00000000-0000-0000-0000-000000000000",
		"TestBudget",
		armconsumption.Budget{
			ETag: to.Ptr("\"1d34d016a593709\""),
			Properties: &armconsumption.BudgetProperties{
				Amount:   to.Ptr[float64](100.65),
				Category: to.Ptr(armconsumption.CategoryTypeCost),
				Filter: &armconsumption.BudgetFilter{
					And: []*armconsumption.BudgetFilterProperties{
						{
							Dimensions: &armconsumption.BudgetComparisonExpression{
								Name:     to.Ptr("ResourceId"),
								Operator: to.Ptr(armconsumption.BudgetOperatorTypeIn),
								Values: []*string{
									to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MYDEVTESTRG/providers/Microsoft.Compute/virtualMachines/MSVM2"),
									to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MYDEVTESTRG/providers/Microsoft.Compute/virtualMachines/platformcloudplatformGeneric1")},
							},
						},
						{
							Tags: &armconsumption.BudgetComparisonExpression{
								Name:     to.Ptr("category"),
								Operator: to.Ptr(armconsumption.BudgetOperatorTypeIn),
								Values: []*string{
									to.Ptr("Dev"),
									to.Ptr("Prod")},
							},
						},
						{
							Tags: &armconsumption.BudgetComparisonExpression{
								Name:     to.Ptr("department"),
								Operator: to.Ptr(armconsumption.BudgetOperatorTypeIn),
								Values: []*string{
									to.Ptr("engineering"),
									to.Ptr("sales")},
							},
						}},
				},
				Notifications: map[string]*armconsumption.Notification{
					"Actual_GreaterThan_80_Percent": {
						ContactEmails: []*string{
							to.Ptr("johndoe@contoso.com"),
							to.Ptr("janesmith@contoso.com")},
						ContactGroups: []*string{
							to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MYDEVTESTRG/providers/microsoft.insights/actionGroups/SampleActionGroup")},
						ContactRoles: []*string{
							to.Ptr("Contributor"),
							to.Ptr("Reader")},
						Enabled:       to.Ptr(true),
						Locale:        to.Ptr(armconsumption.CultureCodeEnUs),
						Operator:      to.Ptr(armconsumption.OperatorTypeGreaterThan),
						Threshold:     to.Ptr[float64](80),
						ThresholdType: to.Ptr(armconsumption.ThresholdTypeActual),
					},
				},
				TimeGrain: to.Ptr(armconsumption.TimeGrainTypeMonthly),
				TimePeriod: &armconsumption.BudgetTimePeriod{
					EndDate:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-10-31T00:00:00Z"); return t }()),
					StartDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-10-01T00:00:00Z"); return t }()),
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/CreateOrUpdateBudget.json: %v", err)
	}
	// Response check
	{
		exampleRes := armconsumption.Budget{
			Name: to.Ptr("TestBudget"),
			Type: to.Ptr("Microsoft.Consumption/budgets"),
			ETag: to.Ptr("\"1d34d012214157f\""),
			ID:   to.Ptr("subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Consumption/budgets/TestBudget"),
			Properties: &armconsumption.BudgetProperties{
				Amount:   to.Ptr[float64](100.65),
				Category: to.Ptr(armconsumption.CategoryTypeCost),
				CurrentSpend: &armconsumption.CurrentSpend{
					Amount: to.Ptr[float64](80.89),
					Unit:   to.Ptr("USD"),
				},
				Filter: &armconsumption.BudgetFilter{
					And: []*armconsumption.BudgetFilterProperties{
						{
							Dimensions: &armconsumption.BudgetComparisonExpression{
								Name:     to.Ptr("ResourceId"),
								Operator: to.Ptr(armconsumption.BudgetOperatorTypeIn),
								Values: []*string{
									to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MYDEVTESTRG/providers/Microsoft.Compute/virtualMachines/MSVM2"),
									to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MYDEVTESTRG/providers/Microsoft.Compute/virtualMachines/platformcloudplatformGeneric1")},
							},
						},
						{
							Tags: &armconsumption.BudgetComparisonExpression{
								Name:     to.Ptr("category"),
								Operator: to.Ptr(armconsumption.BudgetOperatorTypeIn),
								Values: []*string{
									to.Ptr("Dev"),
									to.Ptr("Prod")},
							},
						},
						{
							Tags: &armconsumption.BudgetComparisonExpression{
								Name:     to.Ptr("department"),
								Operator: to.Ptr(armconsumption.BudgetOperatorTypeIn),
								Values: []*string{
									to.Ptr("engineering"),
									to.Ptr("sales")},
							},
						}},
				},
				Notifications: map[string]*armconsumption.Notification{
					"Actual_GreaterThan_80_Percent": {
						ContactEmails: []*string{
							to.Ptr("johndoe@contoso.com"),
							to.Ptr("janesmith@contoso.com")},
						ContactGroups: []*string{
							to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MYDEVTESTRG/providers/microsoft.insights/actionGroups/SampleActionGroup")},
						ContactRoles: []*string{
							to.Ptr("Contributor"),
							to.Ptr("Reader")},
						Enabled:       to.Ptr(true),
						Locale:        to.Ptr(armconsumption.CultureCodeEnUs),
						Operator:      to.Ptr(armconsumption.OperatorTypeGreaterThan),
						Threshold:     to.Ptr[float64](80),
						ThresholdType: to.Ptr(armconsumption.ThresholdTypeActual),
					},
				},
				TimeGrain: to.Ptr(armconsumption.TimeGrainTypeMonthly),
				TimePeriod: &armconsumption.BudgetTimePeriod{
					EndDate:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-10-31T00:00:00Z"); return t }()),
					StartDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-10-01T00:00:00Z"); return t }()),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Budget) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Budget)
			t.Fatalf("Mock response is not equal to example response for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/CreateOrUpdateBudget.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBudgets_Delete(t *testing.T) {
	// From example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/DeleteBudget.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DeleteBudget"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armconsumption.NewBudgetsClient(cred, &options)
	_, err := client.Delete(ctx,
		"subscriptions/00000000-0000-0000-0000-000000000000",
		"TestBudget",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/DeleteBudget.json: %v", err)
	}
}

func TestTags_Get(t *testing.T) {
	// From example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/Tags.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Tags_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armconsumption.NewTagsClient(cred, &options)
	res, err := client.Get(ctx,
		"providers/Microsoft.CostManagement/billingAccounts/1234",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/Tags.json: %v", err)
	}
	// Response check
	{
		exampleRes := armconsumption.TagsResult{
			Name: to.Ptr("tags1"),
			Type: to.Ptr("Microsoft.Consumption/tags"),
			ETag: to.Ptr("\"1d34d012214157f\""),
			ID:   to.Ptr("providers/Microsoft.CostManagement/billingAccounts/{billingaccount-id}/providers/Microsoft.Consumption/tags/tags1"),
			Properties: &armconsumption.TagProperties{
				PreviousLink: to.Ptr("https://management.azure.com/providers/Microsoft.Billing/billingAccounts/{billingaccount-id}/providers/Microsoft.Consumption/tags/?$expand=properties/tags/value&api-version=2021-10-01&startDate=2020-12-01&endDate=2020-12-31&$top=1000&$skiptoken=AQAAAA%3D%3D"),
				Tags: []*armconsumption.Tag{
					{
						Key: to.Ptr("Department"),
					},
					{
						Key: to.Ptr("CostCenter"),
					},
					{
						Key: to.Ptr("Portal"),
					},
					{
						Key: to.Ptr("OrgName"),
					},
					{
						Key: to.Ptr("Namespace"),
					},
					{
						Key: to.Ptr("resourceType"),
					},
					{
						Key: to.Ptr("Subsystem"),
					},
					{
						Key: to.Ptr("Environment"),
					},
					{
						Key: to.Ptr("clusterName"),
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.TagsResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.TagsResult)
			t.Fatalf("Mock response is not equal to example response for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/Tags.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCharges_List(t *testing.T) {
	// From example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/ChargesForBillingPeriodByDepartment.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ChangesForBillingPeriodByDepartment-Legacy"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armconsumption.NewChargesClient(cred, &options)
	res, err := client.List(ctx,
		"providers/Microsoft.Billing/BillingAccounts/1234/departments/42425",
		&armconsumption.ChargesClientListOptions{StartDate: nil,
			EndDate: nil,
			Filter:  nil,
			Apply:   nil,
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/ChargesForBillingPeriodByDepartment.json: %v", err)
	}
	// Response check
	{
		exampleRes := armconsumption.ChargesListResult{
			Value: []armconsumption.ChargeSummaryClassification{
				&armconsumption.LegacyChargeSummary{
					Name: to.Ptr("chargeSummaryId1"),
					Type: to.Ptr("Microsoft.Consumption/charges"),
					ID:   to.Ptr("/providers/Microsoft.Billing/BillingAccounts/1234/departments/42425/providers/Microsoft.Consumption/charges/chargeSummaryId1"),
					Kind: to.Ptr(armconsumption.ChargeSummaryKindLegacy),
					Properties: &armconsumption.LegacyChargeSummaryProperties{
						AzureCharges:            to.Ptr[float64](5000),
						BillingPeriodID:         to.Ptr("/providers/Microsoft.Billing/BillingAccounts/1234/providers/Microsoft.Billing/billingPeriods/201804"),
						ChargesBilledSeparately: to.Ptr[float64](60.9),
						Currency:                to.Ptr("USD"),
						MarketplaceCharges:      to.Ptr[float64](100),
						UsageEnd:                to.Ptr("2018-04-30"),
						UsageStart:              to.Ptr("2018-04-01"),
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.ChargesListResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ChargesListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/ChargesForBillingPeriodByDepartment.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/ChargesForBillingPeriodByEnrollmentAccount.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ChangesForBillingPeriodByEnrollmentAccount-Legacy"},
	})
	client = armconsumption.NewChargesClient(cred, &options)
	res, err = client.List(ctx,
		"providers/Microsoft.Billing/BillingAccounts/1234/enrollmentAccounts/42425",
		&armconsumption.ChargesClientListOptions{StartDate: nil,
			EndDate: nil,
			Filter:  nil,
			Apply:   nil,
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/ChargesForBillingPeriodByEnrollmentAccount.json: %v", err)
	}
	// Response check
	{
		exampleRes := armconsumption.ChargesListResult{
			Value: []armconsumption.ChargeSummaryClassification{
				&armconsumption.LegacyChargeSummary{
					Name: to.Ptr("chargeSummaryId1"),
					Type: to.Ptr("Microsoft.Consumption/charges"),
					ID:   to.Ptr("/providers/Microsoft.Billing/BillingAccounts/1234/enrollmentAccounts/42425/providers/Microsoft.Consumption/charges/chargeSummaryId1"),
					Kind: to.Ptr(armconsumption.ChargeSummaryKindLegacy),
					Properties: &armconsumption.LegacyChargeSummaryProperties{
						AzureCharges:            to.Ptr[float64](5000),
						BillingPeriodID:         to.Ptr("/providers/Microsoft.Billing/BillingAccounts/1234/providers/Microsoft.Billing/billingPeriods/201804"),
						ChargesBilledSeparately: to.Ptr[float64](60.9),
						Currency:                to.Ptr("USD"),
						MarketplaceCharges:      to.Ptr[float64](100),
						UsageEnd:                to.Ptr("2018-04-30"),
						UsageStart:              to.Ptr("2018-04-01"),
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.ChargesListResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ChargesListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/ChargesForBillingPeriodByEnrollmentAccount.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/ChargesListByModernBillingAccount.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ChargesListByBillingAccount-Modern"},
	})
	client = armconsumption.NewChargesClient(cred, &options)
	res, err = client.List(ctx,
		"providers/Microsoft.Billing/billingAccounts/1234:56789",
		&armconsumption.ChargesClientListOptions{StartDate: to.Ptr("2019-09-01"),
			EndDate: to.Ptr("2019-10-31"),
			Filter:  nil,
			Apply:   nil,
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/ChargesListByModernBillingAccount.json: %v", err)
	}
	// Response check
	{
		exampleRes := armconsumption.ChargesListResult{
			Value: []armconsumption.ChargeSummaryClassification{
				&armconsumption.ModernChargeSummary{
					Name: to.Ptr("chargeSummaryId1"),
					Type: to.Ptr("Microsoft.Consumption/charges"),
					ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/1234:56789/providers/Microsoft.Consumption/charges/chargeSummaryId1"),
					Kind: to.Ptr(armconsumption.ChargeSummaryKindModern),
					Properties: &armconsumption.ModernChargeSummaryProperties{
						AzureCharges: &armconsumption.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float64](0),
						},
						BillingAccountID: to.Ptr("/providers/Microsoft.Billing/billingAccounts/1234:56789"),
						BillingPeriodID:  to.Ptr("/providers/Microsoft.Billing/billingAccounts/1234:56789/providers/Microsoft.Billing/billingPeriods/201910"),
						ChargesBilledSeparately: &armconsumption.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float64](265.09),
						},
						IsInvoiced: to.Ptr(false),
						MarketplaceCharges: &armconsumption.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float64](0),
						},
						UsageEnd:   to.Ptr("2019-10-31"),
						UsageStart: to.Ptr("2021-10-01"),
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.ChargesListResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ChargesListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/ChargesListByModernBillingAccount.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/ChargesListByModernBillingAccountGroupByBillingProfileId.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ChargesListByBillingAccountGroupByBillingProfileId-Modern"},
	})
	client = armconsumption.NewChargesClient(cred, &options)
	res, err = client.List(ctx,
		"providers/Microsoft.Billing/billingAccounts/1234:56789",
		&armconsumption.ChargesClientListOptions{StartDate: to.Ptr("2019-09-01"),
			EndDate: to.Ptr("2019-09-30"),
			Filter:  nil,
			Apply:   to.Ptr("groupby((properties/billingProfileId))"),
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/ChargesListByModernBillingAccountGroupByBillingProfileId.json: %v", err)
	}
	// Response check
	{
		exampleRes := armconsumption.ChargesListResult{
			Value: []armconsumption.ChargeSummaryClassification{
				&armconsumption.ModernChargeSummary{
					Name: to.Ptr("chargeSummaryId1"),
					Type: to.Ptr("Microsoft.Consumption/charges"),
					ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/1234:56789/providers/Microsoft.Consumption/charges/chargeSummaryId1"),
					Kind: to.Ptr(armconsumption.ChargeSummaryKindModern),
					Properties: &armconsumption.ModernChargeSummaryProperties{
						AzureCharges: &armconsumption.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float64](5000),
						},
						BillingAccountID: to.Ptr("/providers/Microsoft.Billing/billingAccounts/1234:56789"),
						BillingPeriodID:  to.Ptr("/providers/Microsoft.Billing/billingAccounts/1234:56789/billingProfiles/123456/providers/Microsoft.Billing/billingPeriods/201909"),
						BillingProfileID: to.Ptr("/providers/Microsoft.Billing/billingAccounts/1234:56789/billingProfiles/123456"),
						ChargesBilledSeparately: &armconsumption.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float64](60.9),
						},
						IsInvoiced: to.Ptr(false),
						MarketplaceCharges: &armconsumption.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float64](100),
						},
						UsageEnd:   to.Ptr("2019-09-30"),
						UsageStart: to.Ptr("2019-09-01"),
					},
				},
				&armconsumption.ModernChargeSummary{
					Name: to.Ptr("chargeSummaryId2"),
					Type: to.Ptr("Microsoft.Consumption/charges"),
					ID:   to.Ptr("/providers/Microsoft.Billing/BillingAccounts/1234:56789/billingProfiles/42425/providers/Microsoft.Consumption/charges/chargeSummaryId2"),
					Kind: to.Ptr(armconsumption.ChargeSummaryKindModern),
					Properties: &armconsumption.ModernChargeSummaryProperties{
						AzureCharges: &armconsumption.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float64](5000),
						},
						BillingAccountID: to.Ptr("/providers/Microsoft.Billing/billingAccounts/1234:56789"),
						BillingPeriodID:  to.Ptr("/providers/Microsoft.Billing/billingAccounts/1234:56789/providers/Microsoft.Billing/billingPeriods/201909"),
						BillingProfileID: to.Ptr("/providers/Microsoft.Billing/billingAccounts/1234:56789/billingProfiles/42425"),
						ChargesBilledSeparately: &armconsumption.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float64](60.9),
						},
						MarketplaceCharges: &armconsumption.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float64](100),
						},
						UsageEnd:   to.Ptr("2019-09-30"),
						UsageStart: to.Ptr("2019-09-01"),
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.ChargesListResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ChargesListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/ChargesListByModernBillingAccountGroupByBillingProfileId.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/ChargesListByModernBillingAccountGroupByCustomerId.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ChargesListByBillingAccountGroupByCustomerId-Modern"},
	})
	client = armconsumption.NewChargesClient(cred, &options)
	res, err = client.List(ctx,
		"providers/Microsoft.Billing/billingAccounts/1234:56789",
		&armconsumption.ChargesClientListOptions{StartDate: to.Ptr("2019-09-01"),
			EndDate: to.Ptr("2019-09-30"),
			Filter:  nil,
			Apply:   to.Ptr("groupby((properties/customerId))"),
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/ChargesListByModernBillingAccountGroupByCustomerId.json: %v", err)
	}
	// Response check
	{
		exampleRes := armconsumption.ChargesListResult{
			Value: []armconsumption.ChargeSummaryClassification{
				&armconsumption.ModernChargeSummary{
					Name: to.Ptr("chargeSummaryId1"),
					Type: to.Ptr("Microsoft.Consumption/charges"),
					ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/1234:56789/customers/67890/providers/Microsoft.Consumption/charges/chargeSummaryId1"),
					Kind: to.Ptr(armconsumption.ChargeSummaryKindModern),
					Properties: &armconsumption.ModernChargeSummaryProperties{
						AzureCharges: &armconsumption.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float64](5000),
						},
						BillingAccountID: to.Ptr("/providers/Microsoft.Billing/billingAccounts/1234:56789"),
						BillingPeriodID:  to.Ptr("/providers/Microsoft.Billing/billingAccounts/1234:56789/providers/Microsoft.Billing/billingPeriods/201909"),
						BillingProfileID: to.Ptr("/providers/Microsoft.Billing/billingAccounts/1234:56789/billingProfiles/42425"),
						ChargesBilledSeparately: &armconsumption.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float64](60.9),
						},
						CustomerID:       to.Ptr("/providers/Microsoft.Billing/billingAccounts/1234:56789/customers/67890"),
						InvoiceSectionID: to.Ptr("/providers/Microsoft.Billing/billingAccounts/1234:56789/invoiceSections/67890"),
						IsInvoiced:       to.Ptr(false),
						MarketplaceCharges: &armconsumption.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float64](100),
						},
						UsageEnd:   to.Ptr("2019-09-30"),
						UsageStart: to.Ptr("2019-09-01"),
					},
				},
				&armconsumption.ModernChargeSummary{
					Name: to.Ptr("chargeSummaryId2"),
					Type: to.Ptr("Microsoft.Consumption/charges"),
					ID:   to.Ptr("/providers/Microsoft.Billing/BillingAccounts/1234:56789/customers/123456/providers/Microsoft.Consumption/charges/chargeSummaryId2"),
					Kind: to.Ptr(armconsumption.ChargeSummaryKindModern),
					Properties: &armconsumption.ModernChargeSummaryProperties{
						AzureCharges: &armconsumption.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float64](5000),
						},
						BillingAccountID: to.Ptr("/providers/Microsoft.Billing/billingAccounts/1234:56789"),
						BillingPeriodID:  to.Ptr("/providers/Microsoft.Billing/billingAccounts/1234:56789/providers/Microsoft.Billing/billingPeriods/201909"),
						BillingProfileID: to.Ptr("/providers/Microsoft.Billing/billingAccounts/1234:56789/billingProfiles/42425"),
						ChargesBilledSeparately: &armconsumption.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float64](60.9),
						},
						CustomerID:       to.Ptr("/providers/Microsoft.Billing/billingAccounts/1234:56789/customers/123456"),
						InvoiceSectionID: to.Ptr("/providers/Microsoft.Billing/billingAccounts/1234:56789/invoiceSections/67890"),
						IsInvoiced:       to.Ptr(false),
						MarketplaceCharges: &armconsumption.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float64](100),
						},
						UsageEnd:   to.Ptr("2019-09-30"),
						UsageStart: to.Ptr("2019-09-01"),
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.ChargesListResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ChargesListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/ChargesListByModernBillingAccountGroupByCustomerId.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/ChargesListByModernBillingAccountGroupByInvoiceSectionId.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ChargesListByBillingAccountGroupByInvoiceSectionId-Modern"},
	})
	client = armconsumption.NewChargesClient(cred, &options)
	res, err = client.List(ctx,
		"providers/Microsoft.Billing/billingAccounts/1234:56789/billingProfiles/42425",
		&armconsumption.ChargesClientListOptions{StartDate: to.Ptr("2019-09-01"),
			EndDate: to.Ptr("2019-09-30"),
			Filter:  nil,
			Apply:   to.Ptr("groupby((properties/invoiceSectionId))"),
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/ChargesListByModernBillingAccountGroupByInvoiceSectionId.json: %v", err)
	}
	// Response check
	{
		exampleRes := armconsumption.ChargesListResult{
			Value: []armconsumption.ChargeSummaryClassification{
				&armconsumption.ModernChargeSummary{
					Name: to.Ptr("chargeSummaryId1"),
					Type: to.Ptr("Microsoft.Consumption/charges"),
					ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/1234:56789/billingProfiles/42425/invoiceSections/4567/providers/Microsoft.Consumption/charges/chargeSummaryId1"),
					Kind: to.Ptr(armconsumption.ChargeSummaryKindModern),
					Properties: &armconsumption.ModernChargeSummaryProperties{
						AzureCharges: &armconsumption.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float64](5000),
						},
						BillingAccountID: to.Ptr("/providers/Microsoft.Billing/billingAccounts/1234:56789"),
						BillingPeriodID:  to.Ptr("/providers/Microsoft.Billing/billingAccounts/1234:56789/providers/Microsoft.Billing/billingPeriods/201909"),
						BillingProfileID: to.Ptr("/providers/Microsoft.Billing/billingAccounts/1234:56789/billingProfiles/42425"),
						ChargesBilledSeparately: &armconsumption.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float64](60.9),
						},
						InvoiceSectionID: to.Ptr("/providers/Microsoft.Billing/billingAccounts/1234:56789/invoiceSections/4567"),
						IsInvoiced:       to.Ptr(false),
						MarketplaceCharges: &armconsumption.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float64](100),
						},
						UsageEnd:   to.Ptr("2019-09-30"),
						UsageStart: to.Ptr("2019-09-01"),
					},
				},
				&armconsumption.ModernChargeSummary{
					Name: to.Ptr("chargeSummaryId2"),
					Type: to.Ptr("Microsoft.Consumption/charges"),
					ID:   to.Ptr("/providers/Microsoft.Billing/BillingAccounts/1234:56789//billingProfiles/42425/invoiceSections/67890/providers/Microsoft.Consumption/charges/chargeSummaryId2"),
					Kind: to.Ptr(armconsumption.ChargeSummaryKindModern),
					Properties: &armconsumption.ModernChargeSummaryProperties{
						AzureCharges: &armconsumption.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float64](5000),
						},
						BillingAccountID: to.Ptr("/providers/Microsoft.Billing/billingAccounts/1234:56789"),
						BillingPeriodID:  to.Ptr("/providers/Microsoft.Billing/billingAccounts/1234:56789/providers/Microsoft.Billing/billingPeriods/201909"),
						BillingProfileID: to.Ptr("/providers/Microsoft.Billing/billingAccounts/1234:56789/billingProfiles/42425"),
						ChargesBilledSeparately: &armconsumption.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float64](60.9),
						},
						InvoiceSectionID: to.Ptr("/providers/Microsoft.Billing/billingAccounts/1234:56789/invoiceSections/67890"),
						IsInvoiced:       to.Ptr(false),
						MarketplaceCharges: &armconsumption.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float64](100),
						},
						UsageEnd:   to.Ptr("2019-09-30"),
						UsageStart: to.Ptr("2019-09-01"),
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.ChargesListResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ChargesListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/ChargesListByModernBillingAccountGroupByInvoiceSectionId.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/ChargesListByModernBillingProfile.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ChargesListByBillingProfile-Modern"},
	})
	client = armconsumption.NewChargesClient(cred, &options)
	res, err = client.List(ctx,
		"providers/Microsoft.Billing/BillingAccounts/1234:56789/billingProfiles/2460",
		&armconsumption.ChargesClientListOptions{StartDate: nil,
			EndDate: nil,
			Filter:  nil,
			Apply:   nil,
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/ChargesListByModernBillingProfile.json: %v", err)
	}
	// Response check
	{
		exampleRes := armconsumption.ChargesListResult{
			Value: []armconsumption.ChargeSummaryClassification{
				&armconsumption.ModernChargeSummary{
					Name: to.Ptr("chargeSummaryId1"),
					Type: to.Ptr("Microsoft.Consumption/charges"),
					ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/1234:56789/billingProfiles/2460/providers/Microsoft.Consumption/charges/chargeSummaryId1"),
					Kind: to.Ptr(armconsumption.ChargeSummaryKindModern),
					Properties: &armconsumption.ModernChargeSummaryProperties{
						AzureCharges: &armconsumption.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float64](0),
						},
						BillingAccountID: to.Ptr("/providers/Microsoft.Billing/billingAccounts/1234:56789"),
						BillingPeriodID:  to.Ptr("/providers/Microsoft.Billing/billingAccounts/1234:56789/providers/Microsoft.Billing/billingPeriods/201910"),
						BillingProfileID: to.Ptr("/providers/Microsoft.Billing/billingAccounts/1234:56789/billingProfiles/2460"),
						ChargesBilledSeparately: &armconsumption.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float64](265.09),
						},
						IsInvoiced: to.Ptr(false),
						MarketplaceCharges: &armconsumption.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float64](0),
						},
						UsageEnd:   to.Ptr("2019-10-31"),
						UsageStart: to.Ptr("2021-10-01"),
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.ChargesListResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ChargesListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/ChargesListByModernBillingProfile.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/ChargesListByModernBillingProfileGroupByInvoiceSectionId.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ChargesListByBillingProfileGroupByInvoiceSectionId-Modern"},
	})
	client = armconsumption.NewChargesClient(cred, &options)
	res, err = client.List(ctx,
		"providers/Microsoft.Billing/billingAccounts/1234:56789/billingProfiles/42425",
		&armconsumption.ChargesClientListOptions{StartDate: to.Ptr("2019-09-01"),
			EndDate: to.Ptr("2019-09-30"),
			Filter:  nil,
			Apply:   to.Ptr("groupby((properties/invoiceSectionId))"),
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/ChargesListByModernBillingProfileGroupByInvoiceSectionId.json: %v", err)
	}
	// Response check
	{
		exampleRes := armconsumption.ChargesListResult{
			Value: []armconsumption.ChargeSummaryClassification{
				&armconsumption.ModernChargeSummary{
					Name: to.Ptr("chargeSummaryId1"),
					Type: to.Ptr("Microsoft.Consumption/charges"),
					ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/1234:56789/billingProfiles/42425/invoiceSections/4567/providers/Microsoft.Consumption/charges/chargeSummaryId1"),
					Kind: to.Ptr(armconsumption.ChargeSummaryKindModern),
					Properties: &armconsumption.ModernChargeSummaryProperties{
						AzureCharges: &armconsumption.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float64](5000),
						},
						BillingAccountID: to.Ptr("/providers/Microsoft.Billing/billingAccounts/1234:56789"),
						BillingPeriodID:  to.Ptr("/providers/Microsoft.Billing/billingAccounts/1234:56789/providers/Microsoft.Billing/billingPeriods/201909"),
						BillingProfileID: to.Ptr("/providers/Microsoft.Billing/billingAccounts/1234:56789/billingProfiles/42425"),
						ChargesBilledSeparately: &armconsumption.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float64](60.9),
						},
						InvoiceSectionID: to.Ptr("/providers/Microsoft.Billing/billingAccounts/1234:56789/invoiceSections/4567"),
						IsInvoiced:       to.Ptr(false),
						MarketplaceCharges: &armconsumption.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float64](100),
						},
						UsageEnd:   to.Ptr("2019-09-30"),
						UsageStart: to.Ptr("2019-09-01"),
					},
				},
				&armconsumption.ModernChargeSummary{
					Name: to.Ptr("chargeSummaryId2"),
					Type: to.Ptr("Microsoft.Consumption/charges"),
					ID:   to.Ptr("/providers/Microsoft.Billing/BillingAccounts/1234:56789//billingProfiles/42425/invoiceSections/67890/providers/Microsoft.Consumption/charges/chargeSummaryId2"),
					Kind: to.Ptr(armconsumption.ChargeSummaryKindModern),
					Properties: &armconsumption.ModernChargeSummaryProperties{
						AzureCharges: &armconsumption.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float64](5000),
						},
						BillingAccountID: to.Ptr("/providers/Microsoft.Billing/billingAccounts/1234:56789"),
						BillingPeriodID:  to.Ptr("/providers/Microsoft.Billing/billingAccounts/1234:56789/providers/Microsoft.Billing/billingPeriods/201909"),
						BillingProfileID: to.Ptr("/providers/Microsoft.Billing/billingAccounts/1234:56789/billingProfiles/42425"),
						ChargesBilledSeparately: &armconsumption.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float64](60.9),
						},
						InvoiceSectionID: to.Ptr("/providers/Microsoft.Billing/billingAccounts/1234:56789/invoiceSections/67890"),
						IsInvoiced:       to.Ptr(false),
						MarketplaceCharges: &armconsumption.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float64](100),
						},
						UsageEnd:   to.Ptr("2019-09-30"),
						UsageStart: to.Ptr("2019-09-01"),
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.ChargesListResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ChargesListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/ChargesListByModernBillingProfileGroupByInvoiceSectionId.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/ChargesListByModernBillingProfileInvoiceSection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ChargesListByBillingProfileInvoiceSection-Modern"},
	})
	client = armconsumption.NewChargesClient(cred, &options)
	res, err = client.List(ctx,
		"providers/Microsoft.Billing/billingAccounts/1234:56789/billingProfiles/42425/invoiceSections/67890",
		&armconsumption.ChargesClientListOptions{StartDate: to.Ptr("2019-09-01"),
			EndDate: to.Ptr("2019-10-31"),
			Filter:  nil,
			Apply:   nil,
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/ChargesListByModernBillingProfileInvoiceSection.json: %v", err)
	}
	// Response check
	{
		exampleRes := armconsumption.ChargesListResult{
			Value: []armconsumption.ChargeSummaryClassification{
				&armconsumption.ModernChargeSummary{
					Name: to.Ptr("chargeSummaryId1"),
					Type: to.Ptr("Microsoft.Consumption/charges"),
					ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/1234:56789/billingProfiles/42425/invoiceSections/67890/providers/Microsoft.Consumption/charges/chargeSummaryId1"),
					Kind: to.Ptr(armconsumption.ChargeSummaryKindModern),
					Properties: &armconsumption.ModernChargeSummaryProperties{
						AzureCharges: &armconsumption.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float64](5000),
						},
						BillingAccountID: to.Ptr("/providers/Microsoft.Billing/billingAccounts/1234:56789"),
						BillingPeriodID:  to.Ptr("/providers/Microsoft.Billing/billingAccounts/1234:56789/providers/Microsoft.Billing/billingPeriods/201909"),
						BillingProfileID: to.Ptr("/providers/Microsoft.Billing/billingAccounts/1234:56789/billingProfiles/42425"),
						ChargesBilledSeparately: &armconsumption.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float64](60.9),
						},
						InvoiceSectionID: to.Ptr("/providers/Microsoft.Billing/billingAccounts/1234:56789/billingProfiles/42425/invoiceSections/4567"),
						IsInvoiced:       to.Ptr(false),
						MarketplaceCharges: &armconsumption.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float64](100),
						},
						UsageEnd:   to.Ptr("2019-09-30"),
						UsageStart: to.Ptr("2019-09-01"),
					},
				},
				&armconsumption.ModernChargeSummary{
					Name: to.Ptr("chargeSummaryId2"),
					Type: to.Ptr("Microsoft.Consumption/charges"),
					ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/1234:56789/billingProfiles/42425/invoiceSections/67890/providers/Microsoft.Consumption/charges/chargeSummaryId2"),
					Kind: to.Ptr(armconsumption.ChargeSummaryKindModern),
					Properties: &armconsumption.ModernChargeSummaryProperties{
						AzureCharges: &armconsumption.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float64](5000),
						},
						BillingAccountID: to.Ptr("/providers/Microsoft.Billing/billingAccounts/1234:56789"),
						BillingPeriodID:  to.Ptr("/providers/Microsoft.Billing/billingAccounts/1234:56789/providers/Microsoft.Billing/billingPeriods/201910"),
						BillingProfileID: to.Ptr("/providers/Microsoft.Billing/billingAccounts/1234:56789/billingProfiles/42425"),
						ChargesBilledSeparately: &armconsumption.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float64](60.9),
						},
						InvoiceSectionID: to.Ptr("/providers/Microsoft.Billing/billingAccounts/1234:56789/billingProfiles/42425/invoiceSections/4567"),
						IsInvoiced:       to.Ptr(false),
						MarketplaceCharges: &armconsumption.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float64](100),
						},
						UsageEnd:   to.Ptr("2019-10-31"),
						UsageStart: to.Ptr("2021-10-01"),
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.ChargesListResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ChargesListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/ChargesListByModernBillingProfileInvoiceSection.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/ChargesListByModernCustomer.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ChargesListByCustomer-Modern"},
	})
	client = armconsumption.NewChargesClient(cred, &options)
	res, err = client.List(ctx,
		"providers/Microsoft.Billing/BillingAccounts/1234:56789/customers/67890",
		&armconsumption.ChargesClientListOptions{StartDate: nil,
			EndDate: nil,
			Filter:  nil,
			Apply:   nil,
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/ChargesListByModernCustomer.json: %v", err)
	}
	// Response check
	{
		exampleRes := armconsumption.ChargesListResult{
			Value: []armconsumption.ChargeSummaryClassification{
				&armconsumption.ModernChargeSummary{
					Name: to.Ptr("chargeSummaryId1"),
					Type: to.Ptr("Microsoft.Consumption/charges"),
					ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/1234:56789/customers/67890/providers/Microsoft.Consumption/charges/chargeSummaryId1"),
					Kind: to.Ptr(armconsumption.ChargeSummaryKindModern),
					Properties: &armconsumption.ModernChargeSummaryProperties{
						AzureCharges: &armconsumption.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float64](0),
						},
						BillingAccountID: to.Ptr("/providers/Microsoft.Billing/billingAccounts/1234:56789"),
						BillingPeriodID:  to.Ptr("/providers/Microsoft.Billing/billingAccounts/1234:56789/providers/Microsoft.Billing/billingPeriods/201910"),
						ChargesBilledSeparately: &armconsumption.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float64](265.09),
						},
						IsInvoiced: to.Ptr(false),
						MarketplaceCharges: &armconsumption.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float64](0),
						},
						UsageEnd:   to.Ptr("2019-10-31"),
						UsageStart: to.Ptr("2021-10-01"),
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.ChargesListResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ChargesListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/ChargesListByModernCustomer.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/ChargesListForDepartmentFilterByStartEndDate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ChargesListByDepartment-Legacy"},
	})
	client = armconsumption.NewChargesClient(cred, &options)
	res, err = client.List(ctx,
		"providers/Microsoft.Billing/BillingAccounts/1234/departments/42425",
		&armconsumption.ChargesClientListOptions{StartDate: nil,
			EndDate: nil,
			Filter:  to.Ptr("usageStart eq '2018-04-01' AND usageEnd eq '2018-05-30'"),
			Apply:   nil,
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/ChargesListForDepartmentFilterByStartEndDate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armconsumption.ChargesListResult{
			Value: []armconsumption.ChargeSummaryClassification{
				&armconsumption.LegacyChargeSummary{
					Name: to.Ptr("chargeSummaryId1"),
					Type: to.Ptr("Microsoft.Consumption/charges"),
					ID:   to.Ptr("/providers/Microsoft.Billing/BillingAccounts/1234/departments/42425/providers/Microsoft.Consumption/charges/chargeSummaryId1"),
					Kind: to.Ptr(armconsumption.ChargeSummaryKindLegacy),
					Properties: &armconsumption.LegacyChargeSummaryProperties{
						AzureCharges:            to.Ptr[float64](5000),
						BillingPeriodID:         to.Ptr("/providers/Microsoft.Billing/BillingAccounts/1234/providers/Microsoft.Billing/billingPeriods/201804"),
						ChargesBilledSeparately: to.Ptr[float64](60.9),
						Currency:                to.Ptr("USD"),
						MarketplaceCharges:      to.Ptr[float64](100),
						UsageEnd:                to.Ptr("2018-04-30"),
						UsageStart:              to.Ptr("2018-04-01"),
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.ChargesListResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ChargesListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/ChargesListForDepartmentFilterByStartEndDate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/ChargesListByModernInvoiceSectionId.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ChargesListByInvoiceSectionId-Modern"},
	})
	client = armconsumption.NewChargesClient(cred, &options)
	res, err = client.List(ctx,
		"providers/Microsoft.Billing/BillingAccounts/1234:56789/invoiceSections/97531",
		&armconsumption.ChargesClientListOptions{StartDate: nil,
			EndDate: nil,
			Filter:  nil,
			Apply:   nil,
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/ChargesListByModernInvoiceSectionId.json: %v", err)
	}
	// Response check
	{
		exampleRes := armconsumption.ChargesListResult{
			Value: []armconsumption.ChargeSummaryClassification{
				&armconsumption.ModernChargeSummary{
					Name: to.Ptr("chargeSummaryId1"),
					Type: to.Ptr("Microsoft.Consumption/charges"),
					ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/1234:56789/billingProfiles/2460/invoiceSections/97531/providers/Microsoft.Consumption/charges/chargeSummaryId1"),
					Kind: to.Ptr(armconsumption.ChargeSummaryKindModern),
					Properties: &armconsumption.ModernChargeSummaryProperties{
						AzureCharges: &armconsumption.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float64](12),
						},
						BillingAccountID: to.Ptr("/providers/Microsoft.Billing/billingAccounts/1234:56789"),
						BillingPeriodID:  to.Ptr("/providers/Microsoft.Billing/billingAccounts/1234:56789/providers/Microsoft.Billing/billingPeriods/201910"),
						BillingProfileID: to.Ptr("/providers/Microsoft.Billing/billingAccounts/1234:56789/billingProfiles/2460"),
						ChargesBilledSeparately: &armconsumption.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float64](0),
						},
						InvoiceSectionID: to.Ptr("/providers/Microsoft.Billing/billingAccounts/1234:56789/billingProfiles/2460/invoiceSections/97531"),
						IsInvoiced:       to.Ptr(false),
						MarketplaceCharges: &armconsumption.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float64](0),
						},
						UsageEnd:   to.Ptr("2019-10-31"),
						UsageStart: to.Ptr("2021-10-01"),
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.ChargesListResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ChargesListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/ChargesListByModernInvoiceSectionId.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/ChargesListForEnrollmentAccountFilterByStartEndDate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ChargesListForEnrollmentAccount-Legacy"},
	})
	client = armconsumption.NewChargesClient(cred, &options)
	res, err = client.List(ctx,
		"providers/Microsoft.Billing/BillingAccounts/1234/enrollmentAccounts/42425",
		&armconsumption.ChargesClientListOptions{StartDate: nil,
			EndDate: nil,
			Filter:  nil,
			Apply:   nil,
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/ChargesListForEnrollmentAccountFilterByStartEndDate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armconsumption.ChargesListResult{
			Value: []armconsumption.ChargeSummaryClassification{
				&armconsumption.LegacyChargeSummary{
					Name: to.Ptr("chargeSummaryId1"),
					Type: to.Ptr("Microsoft.Consumption/charges"),
					ID:   to.Ptr("/providers/Microsoft.Billing/BillingAccounts/1234/enrollmentAccounts/42425/providers/Microsoft.Consumption/charges/chargeSummaryId1"),
					Kind: to.Ptr(armconsumption.ChargeSummaryKindLegacy),
					Properties: &armconsumption.LegacyChargeSummaryProperties{
						AzureCharges:            to.Ptr[float64](5000),
						BillingPeriodID:         to.Ptr("/providers/Microsoft.Billing/BillingAccounts/1234/providers/Microsoft.Billing/billingPeriods/201804"),
						ChargesBilledSeparately: to.Ptr[float64](60.9),
						Currency:                to.Ptr("USD"),
						MarketplaceCharges:      to.Ptr[float64](100),
						UsageEnd:                to.Ptr("2018-04-30"),
						UsageStart:              to.Ptr("2018-04-01"),
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.ChargesListResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ChargesListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/ChargesListForEnrollmentAccountFilterByStartEndDate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBalances_GetByBillingAccount(t *testing.T) {
	// From example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/BalancesByBillingAccount.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Balances"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armconsumption.NewBalancesClient(cred, &options)
	res, err := client.GetByBillingAccount(ctx,
		"123456",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/BalancesByBillingAccount.json: %v", err)
	}
	// Response check
	{
		exampleRes := armconsumption.Balance{
			Name: to.Ptr("balanceId1"),
			Type: to.Ptr("Microsoft.Consumption/balances"),
			ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/123456/providers/Microsoft.Billing/billingPeriods/201702/providers/Microsoft.Consumption/balances/balanceId1"),
			Properties: &armconsumption.BalanceProperties{
				AdjustmentDetails: []*armconsumption.BalancePropertiesAdjustmentDetailsItem{
					{
						Name:  to.Ptr("Promo Credit"),
						Value: to.Ptr[float64](1.1),
					},
					{
						Name:  to.Ptr("SIE Credit"),
						Value: to.Ptr[float64](1),
					}},
				Adjustments:                    to.Ptr[float64](0),
				AzureMarketplaceServiceCharges: to.Ptr[float64](609.82),
				BeginningBalance:               to.Ptr[float64](3396469.19),
				BillingFrequency:               to.Ptr(armconsumption.BillingFrequencyMonth),
				ChargesBilledSeparately:        to.Ptr[float64](0),
				Currency:                       to.Ptr("USD  "),
				EndingBalance:                  to.Ptr[float64](2922371.02),
				NewPurchases:                   to.Ptr[float64](0),
				NewPurchasesDetails: []*armconsumption.BalancePropertiesNewPurchasesDetailsItem{
					{
						Name:  to.Ptr("Promo Purchase"),
						Value: to.Ptr[float64](1),
					}},
				PriceHidden:    to.Ptr(false),
				ServiceOverage: to.Ptr[float64](0),
				TotalOverage:   to.Ptr[float64](0),
				TotalUsage:     to.Ptr[float64](474098.17),
				Utilized:       to.Ptr[float64](474098.17),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Balance) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Balance)
			t.Fatalf("Mock response is not equal to example response for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/BalancesByBillingAccount.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBalances_GetForBillingPeriodByBillingAccount(t *testing.T) {
	// From example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/BalancesByBillingAccountForBillingPeriod.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Balances"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armconsumption.NewBalancesClient(cred, &options)
	res, err := client.GetForBillingPeriodByBillingAccount(ctx,
		"123456",
		"201702",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/BalancesByBillingAccountForBillingPeriod.json: %v", err)
	}
	// Response check
	{
		exampleRes := armconsumption.Balance{
			Name: to.Ptr("balanceId1"),
			Type: to.Ptr("Microsoft.Consumption/balances"),
			ID:   to.Ptr("providers/Microsoft.Billing/billingAccounts/123456/providers/Microsoft.Billing/billingPeriods/201702/providers/Microsoft.Consumption/balances/balanceId1"),
			Properties: &armconsumption.BalanceProperties{
				AdjustmentDetails: []*armconsumption.BalancePropertiesAdjustmentDetailsItem{
					{
						Name:  to.Ptr("Promo Credit"),
						Value: to.Ptr[float64](1.1),
					},
					{
						Name:  to.Ptr("SIE Credit"),
						Value: to.Ptr[float64](1),
					}},
				Adjustments:                    to.Ptr[float64](0),
				AzureMarketplaceServiceCharges: to.Ptr[float64](609.82),
				BeginningBalance:               to.Ptr[float64](3396469.19),
				BillingFrequency:               to.Ptr(armconsumption.BillingFrequencyMonth),
				ChargesBilledSeparately:        to.Ptr[float64](0),
				Currency:                       to.Ptr("USD  "),
				EndingBalance:                  to.Ptr[float64](2922371.02),
				NewPurchases:                   to.Ptr[float64](0),
				NewPurchasesDetails: []*armconsumption.BalancePropertiesNewPurchasesDetailsItem{
					{
						Name:  to.Ptr("Promo Purchase"),
						Value: to.Ptr[float64](1),
					}},
				PriceHidden:    to.Ptr(false),
				ServiceOverage: to.Ptr[float64](0),
				TotalOverage:   to.Ptr[float64](0),
				TotalUsage:     to.Ptr[float64](474098.17),
				Utilized:       to.Ptr[float64](474098.17),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Balance) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Balance)
			t.Fatalf("Mock response is not equal to example response for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/BalancesByBillingAccountForBillingPeriod.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReservationsSummaries_ListByReservationOrder(t *testing.T) {
	// From example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/ReservationSummariesDaily.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ReservationSummariesDaily"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armconsumption.NewReservationsSummariesClient(cred, &options)
	pager := client.ListByReservationOrder("00000000-0000-0000-0000-000000000000",
		armconsumption.DatagrainDailyGrain,
		&armconsumption.ReservationsSummariesClientListByReservationOrderOptions{Filter: to.Ptr("properties/usageDate ge 2017-10-01 AND properties/usageDate le 2017-11-20")})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/ReservationSummariesDaily.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armconsumption.ReservationSummariesListResult{
			Value: []*armconsumption.ReservationSummary{
				{
					Name: to.Ptr("00000000-0000-0000-0000-000000000000_00000000-0000-0000-0000-000000000000_20171001"),
					Type: to.Ptr("Microsoft.Consumption/reservationSummaries"),
					ID:   to.Ptr("providers/Microsoft.Capacity/reservationOrders/00000000-0000-0000-0000-000000000000/reservations/00000000-0000-0000-0000-000000000000/providers/Microsoft.Consumption/reservationSummaries/20171001"),
					Tags: map[string]*string{
						"dev": to.Ptr("tools"),
						"env": to.Ptr("newcrp"),
					},
					Properties: &armconsumption.ReservationSummaryProperties{
						AvgUtilizationPercentage: to.Ptr[float64](0),
						Kind:                     to.Ptr("Reservation"),
						MaxUtilizationPercentage: to.Ptr[float64](0),
						MinUtilizationPercentage: to.Ptr[float64](0),
						PurchasedQuantity:        to.Ptr[float64](0),
						RemainingQuantity:        to.Ptr[float64](0),
						ReservationID:            to.Ptr("00000000-0000-0000-0000-000000000000"),
						ReservationOrderID:       to.Ptr("00000000-0000-0000-0000-000000000000"),
						ReservedHours:            to.Ptr[float64](0),
						SKUName:                  to.Ptr("Standard_D8s_v3"),
						TotalReservedQuantity:    to.Ptr[float64](155),
						UsageDate:                to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-10-01T00:00:00Z"); return t }()),
						UsedHours:                to.Ptr[float64](0),
						UsedQuantity:             to.Ptr[float64](0),
						UtilizedPercentage:       to.Ptr[float64](0),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ReservationSummariesListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ReservationSummariesListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/ReservationSummariesDaily.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/ReservationSummariesMonthly.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ReservationSummariesMonthly"},
	})
	client = armconsumption.NewReservationsSummariesClient(cred, &options)
	pager = client.ListByReservationOrder("00000000-0000-0000-0000-000000000000",
		armconsumption.DatagrainMonthlyGrain,
		&armconsumption.ReservationsSummariesClientListByReservationOrderOptions{Filter: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/ReservationSummariesMonthly.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armconsumption.ReservationSummariesListResult{
			Value: []*armconsumption.ReservationSummary{
				{
					Name: to.Ptr("00000000-0000-0000-0000-000000000000_00000000-0000-0000-0000-000000000000_20171001"),
					Type: to.Ptr("Microsoft.Consumption/reservationSummaries"),
					ID:   to.Ptr("providers/Microsoft.Capacity/reservationOrders/00000000-0000-0000-0000-000000000000/reservations/00000000-0000-0000-0000-000000000000/providers/Microsoft.Consumption/reservationSummaries/20171001"),
					Tags: map[string]*string{
						"dev": to.Ptr("tools"),
						"env": to.Ptr("newcrp"),
					},
					Properties: &armconsumption.ReservationSummaryProperties{
						AvgUtilizationPercentage: to.Ptr[float64](0),
						Kind:                     to.Ptr("Reservation"),
						MaxUtilizationPercentage: to.Ptr[float64](0),
						MinUtilizationPercentage: to.Ptr[float64](0),
						PurchasedQuantity:        to.Ptr[float64](0),
						RemainingQuantity:        to.Ptr[float64](0),
						ReservationID:            to.Ptr("00000000-0000-0000-0000-000000000000"),
						ReservationOrderID:       to.Ptr("00000000-0000-0000-0000-000000000000"),
						ReservedHours:            to.Ptr[float64](0),
						SKUName:                  to.Ptr("Standard_D8s_v3"),
						TotalReservedQuantity:    to.Ptr[float64](155),
						UsageDate:                to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-10-01T00:00:00Z"); return t }()),
						UsedHours:                to.Ptr[float64](0),
						UsedQuantity:             to.Ptr[float64](0),
						UtilizedPercentage:       to.Ptr[float64](0),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ReservationSummariesListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ReservationSummariesListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/ReservationSummariesMonthly.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReservationsSummaries_ListByReservationOrderAndReservation(t *testing.T) {
	// From example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/ReservationSummariesDailyWithReservationId.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ReservationSummariesDailyWithReservationId"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armconsumption.NewReservationsSummariesClient(cred, &options)
	pager := client.ListByReservationOrderAndReservation("00000000-0000-0000-0000-000000000000",
		"00000000-0000-0000-0000-000000000000",
		armconsumption.DatagrainDailyGrain,
		&armconsumption.ReservationsSummariesClientListByReservationOrderAndReservationOptions{Filter: to.Ptr("properties/usageDate ge 2017-10-01 AND properties/usageDate le 2017-11-20")})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/ReservationSummariesDailyWithReservationId.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armconsumption.ReservationSummariesListResult{
			Value: []*armconsumption.ReservationSummary{
				{
					Name: to.Ptr("00000000-0000-0000-0000-000000000000_00000000-0000-0000-0000-000000000000_20171001"),
					Type: to.Ptr("Microsoft.Consumption/reservationSummaries"),
					ID:   to.Ptr("providers/Microsoft.Capacity/reservationOrders/00000000-0000-0000-0000-000000000000/reservations/00000000-0000-0000-0000-000000000000/providers/Microsoft.Consumption/reservationSummaries/20171001"),
					Tags: map[string]*string{
						"dev": to.Ptr("tools"),
						"env": to.Ptr("newcrp"),
					},
					Properties: &armconsumption.ReservationSummaryProperties{
						AvgUtilizationPercentage: to.Ptr[float64](0),
						Kind:                     to.Ptr("Reservation"),
						MaxUtilizationPercentage: to.Ptr[float64](0),
						MinUtilizationPercentage: to.Ptr[float64](0),
						PurchasedQuantity:        to.Ptr[float64](0),
						RemainingQuantity:        to.Ptr[float64](0),
						ReservationID:            to.Ptr("00000000-0000-0000-0000-000000000000"),
						ReservationOrderID:       to.Ptr("00000000-0000-0000-0000-000000000000"),
						ReservedHours:            to.Ptr[float64](0),
						SKUName:                  to.Ptr("Standard_D8s_v3"),
						TotalReservedQuantity:    to.Ptr[float64](155),
						UsageDate:                to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-10-01T00:00:00Z"); return t }()),
						UsedHours:                to.Ptr[float64](0),
						UsedQuantity:             to.Ptr[float64](0),
						UtilizedPercentage:       to.Ptr[float64](0),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ReservationSummariesListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ReservationSummariesListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/ReservationSummariesDailyWithReservationId.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/ReservationSummariesMonthlyWithReservationId.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ReservationSummariesMonthlyWithReservationId"},
	})
	client = armconsumption.NewReservationsSummariesClient(cred, &options)
	pager = client.ListByReservationOrderAndReservation("00000000-0000-0000-0000-000000000000",
		"00000000-0000-0000-0000-000000000000",
		armconsumption.DatagrainMonthlyGrain,
		&armconsumption.ReservationsSummariesClientListByReservationOrderAndReservationOptions{Filter: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/ReservationSummariesMonthlyWithReservationId.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armconsumption.ReservationSummariesListResult{
			Value: []*armconsumption.ReservationSummary{
				{
					Name: to.Ptr("00000000-0000-0000-0000-000000000000_00000000-0000-0000-0000-000000000000_20171001"),
					Type: to.Ptr("Microsoft.Consumption/reservationSummaries"),
					ID:   to.Ptr("providers/Microsoft.Capacity/reservationOrders/00000000-0000-0000-0000-000000000000/reservations/00000000-0000-0000-0000-000000000000/providers/Microsoft.Consumption/reservationSummaries/20171001"),
					Tags: map[string]*string{
						"dev": to.Ptr("tools"),
						"env": to.Ptr("newcrp"),
					},
					Properties: &armconsumption.ReservationSummaryProperties{
						AvgUtilizationPercentage: to.Ptr[float64](0),
						Kind:                     to.Ptr("Reservation"),
						MaxUtilizationPercentage: to.Ptr[float64](0),
						MinUtilizationPercentage: to.Ptr[float64](0),
						PurchasedQuantity:        to.Ptr[float64](0),
						RemainingQuantity:        to.Ptr[float64](0),
						ReservationID:            to.Ptr("00000000-0000-0000-0000-000000000000"),
						ReservationOrderID:       to.Ptr("00000000-0000-0000-0000-000000000000"),
						ReservedHours:            to.Ptr[float64](0),
						SKUName:                  to.Ptr("Standard_D8s_v3"),
						TotalReservedQuantity:    to.Ptr[float64](155),
						UsageDate:                to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-10-01T00:00:00Z"); return t }()),
						UsedHours:                to.Ptr[float64](0),
						UsedQuantity:             to.Ptr[float64](0),
						UtilizedPercentage:       to.Ptr[float64](0),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ReservationSummariesListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ReservationSummariesListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/ReservationSummariesMonthlyWithReservationId.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReservationsSummaries_List(t *testing.T) {
	// From example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/ReservationSummariesDailyWithBillingAccountId.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ReservationSummariesDailyWithBillingAccountId"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armconsumption.NewReservationsSummariesClient(cred, &options)
	pager := client.List("providers/Microsoft.Billing/billingAccounts/12345",
		armconsumption.DatagrainDailyGrain,
		&armconsumption.ReservationsSummariesClientListOptions{StartDate: nil,
			EndDate:            nil,
			Filter:             to.Ptr("properties/usageDate ge 2017-10-01 AND properties/usageDate le 2017-11-20"),
			ReservationID:      nil,
			ReservationOrderID: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/ReservationSummariesDailyWithBillingAccountId.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armconsumption.ReservationSummariesListResult{
			Value: []*armconsumption.ReservationSummary{
				{
					Name: to.Ptr("reservationSummaries_Id1"),
					Type: to.Ptr("Microsoft.Consumption/reservationSummaries"),
					ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/12345/providers/Microsoft.Consumption/reservationSummaries/reservationSummaries_Id1"),
					Properties: &armconsumption.ReservationSummaryProperties{
						AvgUtilizationPercentage: to.Ptr[float64](0),
						MaxUtilizationPercentage: to.Ptr[float64](0),
						MinUtilizationPercentage: to.Ptr[float64](0),
						ReservationID:            to.Ptr("00000000-0000-0000-0000-000000000000"),
						ReservationOrderID:       to.Ptr("00000000-0000-0000-0000-000000000000"),
						ReservedHours:            to.Ptr[float64](720),
						SKUName:                  to.Ptr("Standard_B1s"),
						UsageDate:                to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-09-01T00:00:00-07:00"); return t }()),
						UsedHours:                to.Ptr[float64](0),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ReservationSummariesListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ReservationSummariesListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/ReservationSummariesDailyWithBillingAccountId.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/ReservationSummariesDailyWithBillingProfileId.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ReservationSummariesDailyWithBillingProfileId"},
	})
	client = armconsumption.NewReservationsSummariesClient(cred, &options)
	pager = client.List("providers/Microsoft.Billing/billingAccounts/12345:2468/billingProfiles/13579",
		armconsumption.DatagrainDailyGrain,
		&armconsumption.ReservationsSummariesClientListOptions{StartDate: to.Ptr("2017-10-01"),
			EndDate:            to.Ptr("2017-11-20"),
			Filter:             nil,
			ReservationID:      nil,
			ReservationOrderID: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/ReservationSummariesDailyWithBillingProfileId.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armconsumption.ReservationSummariesListResult{
			Value: []*armconsumption.ReservationSummary{
				{
					Name: to.Ptr("reservationSummaries_Id1"),
					Type: to.Ptr("Microsoft.Consumption/reservationSummaries"),
					ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/12345:2468/billingProfiles/13579/providers/Microsoft.Consumption/reservationSummaries/reservationSummaries_Id1"),
					Properties: &armconsumption.ReservationSummaryProperties{
						AvgUtilizationPercentage: to.Ptr[float64](0),
						MaxUtilizationPercentage: to.Ptr[float64](0),
						MinUtilizationPercentage: to.Ptr[float64](0),
						ReservationID:            to.Ptr("00000000-0000-0000-0000-000000000000"),
						ReservationOrderID:       to.Ptr("00000000-0000-0000-0000-000000000000"),
						ReservedHours:            to.Ptr[float64](720),
						SKUName:                  to.Ptr("Standard_B1s"),
						UsageDate:                to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-09-01T00:00:00-07:00"); return t }()),
						UsedHours:                to.Ptr[float64](0),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ReservationSummariesListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ReservationSummariesListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/ReservationSummariesDailyWithBillingProfileId.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/ReservationSummariesMonthlyWithBillingAccountId.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ReservationSummariesMonthlyWithBillingAccountId"},
	})
	client = armconsumption.NewReservationsSummariesClient(cred, &options)
	pager = client.List("providers/Microsoft.Billing/billingAccounts/12345",
		armconsumption.DatagrainMonthlyGrain,
		&armconsumption.ReservationsSummariesClientListOptions{StartDate: nil,
			EndDate:            nil,
			Filter:             nil,
			ReservationID:      nil,
			ReservationOrderID: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/ReservationSummariesMonthlyWithBillingAccountId.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armconsumption.ReservationSummariesListResult{
			Value: []*armconsumption.ReservationSummary{
				{
					Name: to.Ptr("reservationSummaries_Id1"),
					Type: to.Ptr("Microsoft.Consumption/reservationSummaries"),
					ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/12345/providers/Microsoft.Consumption/reservationSummaries/reservationSummaries_Id1"),
					Properties: &armconsumption.ReservationSummaryProperties{
						AvgUtilizationPercentage: to.Ptr[float64](0),
						MaxUtilizationPercentage: to.Ptr[float64](0),
						MinUtilizationPercentage: to.Ptr[float64](0),
						ReservationID:            to.Ptr("00000000-0000-0000-0000-000000000000"),
						ReservationOrderID:       to.Ptr("00000000-0000-0000-0000-000000000000"),
						ReservedHours:            to.Ptr[float64](720),
						SKUName:                  to.Ptr("Standard_B1s"),
						UsageDate:                to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-09-01T00:00:00-07:00"); return t }()),
						UsedHours:                to.Ptr[float64](0),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ReservationSummariesListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ReservationSummariesListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/ReservationSummariesMonthlyWithBillingAccountId.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/ReservationSummariesMonthlyWithBillingProfileId.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ReservationSummariesMonthlyWithBillingProfileId"},
	})
	client = armconsumption.NewReservationsSummariesClient(cred, &options)
	pager = client.List("providers/Microsoft.Billing/billingAccounts/12345:2468/billingProfiles/13579",
		armconsumption.DatagrainMonthlyGrain,
		&armconsumption.ReservationsSummariesClientListOptions{StartDate: nil,
			EndDate:            nil,
			Filter:             nil,
			ReservationID:      nil,
			ReservationOrderID: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/ReservationSummariesMonthlyWithBillingProfileId.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armconsumption.ReservationSummariesListResult{
			Value: []*armconsumption.ReservationSummary{
				{
					Name: to.Ptr("reservationSummaries_Id1"),
					Type: to.Ptr("Microsoft.Consumption/reservationSummaries"),
					ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/12345:2468/billingProfiles/13579/providers/Microsoft.Consumption/reservationSummaries/reservationSummaries_Id1"),
					Properties: &armconsumption.ReservationSummaryProperties{
						AvgUtilizationPercentage: to.Ptr[float64](0),
						MaxUtilizationPercentage: to.Ptr[float64](0),
						MinUtilizationPercentage: to.Ptr[float64](0),
						ReservationID:            to.Ptr("00000000-0000-0000-0000-000000000000"),
						ReservationOrderID:       to.Ptr("00000000-0000-0000-0000-000000000000"),
						ReservedHours:            to.Ptr[float64](720),
						SKUName:                  to.Ptr("Standard_B1s"),
						UsageDate:                to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-09-01T00:00:00-07:00"); return t }()),
						UsedHours:                to.Ptr[float64](0),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ReservationSummariesListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ReservationSummariesListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/ReservationSummariesMonthlyWithBillingProfileId.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/ReservationSummariesMonthlyWithBillingProfileIdReservationId.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ReservationSummariesMonthlyWithBillingProfileIdReservationId"},
	})
	client = armconsumption.NewReservationsSummariesClient(cred, &options)
	pager = client.List("providers/Microsoft.Billing/billingAccounts/12345:2468/billingProfiles/13579",
		armconsumption.DatagrainMonthlyGrain,
		&armconsumption.ReservationsSummariesClientListOptions{StartDate: nil,
			EndDate:            nil,
			Filter:             nil,
			ReservationID:      to.Ptr("1c6b6358-709f-484c-85f1-72e862a0cf3b"),
			ReservationOrderID: to.Ptr("9f39ba10-794f-4dcb-8f4b-8d0cb47c27dc"),
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/ReservationSummariesMonthlyWithBillingProfileIdReservationId.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armconsumption.ReservationSummariesListResult{
			Value: []*armconsumption.ReservationSummary{
				{
					Name: to.Ptr("reservationSummaries_Id1"),
					Type: to.Ptr("Microsoft.Consumption/reservationSummaries"),
					ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/12345:2468/billingProfiles/13579/providers/Microsoft.Consumption/reservationSummaries/reservationSummaries_Id1"),
					Properties: &armconsumption.ReservationSummaryProperties{
						AvgUtilizationPercentage: to.Ptr[float64](0),
						MaxUtilizationPercentage: to.Ptr[float64](0),
						MinUtilizationPercentage: to.Ptr[float64](0),
						ReservationID:            to.Ptr("1c6b6358-709f-484c-85f1-72e862a0cf3b"),
						ReservationOrderID:       to.Ptr("9f39ba10-794f-4dcb-8f4b-8d0cb47c27dc"),
						ReservedHours:            to.Ptr[float64](720),
						SKUName:                  to.Ptr("Standard_B1s"),
						UsageDate:                to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-09-01T00:00:00-07:00"); return t }()),
						UsedHours:                to.Ptr[float64](0),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ReservationSummariesListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ReservationSummariesListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/ReservationSummariesMonthlyWithBillingProfileIdReservationId.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReservationsDetails_ListByReservationOrder(t *testing.T) {
	// From example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/ReservationDetails.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ReservationDetails"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armconsumption.NewReservationsDetailsClient(cred, &options)
	pager := client.ListByReservationOrder("00000000-0000-0000-0000-000000000000",
		"properties/usageDate ge 2017-10-01 AND properties/usageDate le 2017-12-05",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/ReservationDetails.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armconsumption.ReservationDetailsListResult{
			Value: []*armconsumption.ReservationDetail{
				{
					Name: to.Ptr("00000000-0000-0000-0000-000000000000_00000000-0000-0000-0000-000000000000_20171129"),
					Type: to.Ptr("Microsoft.Consumption/reservationDetails"),
					ID:   to.Ptr("providers/Microsoft.Capacity/reservationOrders/00000000-0000-0000-0000-000000000000/reservations/00000000-0000-0000-0000-000000000000/providers/Microsoft.Consumption/reservationDetails/20171129"),
					Tags: map[string]*string{
						"dev": to.Ptr("tools"),
						"env": to.Ptr("newcrp"),
					},
					Properties: &armconsumption.ReservationDetailProperties{
						InstanceFlexibilityGroup: to.Ptr("DSv2 Series"),
						InstanceFlexibilityRatio: to.Ptr("0.25"),
						InstanceID:               to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/wvn-sql/providers/microsoft.compute/virtualmachines/abc-sql2014sp33"),
						ReservationID:            to.Ptr("00000000-0000-0000-0000-000000000000"),
						ReservationOrderID:       to.Ptr("00000000-0000-0000-0000-000000000000"),
						ReservedHours:            to.Ptr[float64](24),
						SKUName:                  to.Ptr("Standard_D2_v2"),
						TotalReservedQuantity:    to.Ptr[float64](1),
						UsageDate:                to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-29T00:00:00Z"); return t }()),
						UsedHours:                to.Ptr[float64](24),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ReservationDetailsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ReservationDetailsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/ReservationDetails.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReservationsDetails_ListByReservationOrderAndReservation(t *testing.T) {
	// From example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/ReservationDetailsWithReservationId.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ReservationDetailsWithReservationId"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armconsumption.NewReservationsDetailsClient(cred, &options)
	pager := client.ListByReservationOrderAndReservation("00000000-0000-0000-0000-000000000000",
		"00000000-0000-0000-0000-000000000000",
		"properties/usageDate ge 2017-10-01 AND properties/usageDate le 2017-12-05",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/ReservationDetailsWithReservationId.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armconsumption.ReservationDetailsListResult{
			Value: []*armconsumption.ReservationDetail{
				{
					Name: to.Ptr("00000000-0000-0000-0000-000000000000_00000000-0000-0000-0000-000000000000_20171129"),
					Type: to.Ptr("Microsoft.Consumption/reservationDetails"),
					ID:   to.Ptr("providers/Microsoft.Capacity/reservationOrders/00000000-0000-0000-0000-000000000000/reservations/00000000-0000-0000-0000-000000000000/providers/Microsoft.Consumption/reservationDetails/20171129"),
					Tags: map[string]*string{
						"dev": to.Ptr("tools"),
						"env": to.Ptr("newcrp"),
					},
					Properties: &armconsumption.ReservationDetailProperties{
						InstanceFlexibilityGroup: to.Ptr("D2v2 Series"),
						InstanceFlexibilityRatio: to.Ptr("1"),
						InstanceID:               to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/wvn-sql/providers/microsoft.compute/virtualmachines/wvn-sql2014sp33"),
						Kind:                     to.Ptr("Reservation"),
						ReservationID:            to.Ptr("00000000-0000-0000-0000-000000000000"),
						ReservationOrderID:       to.Ptr("00000000-0000-0000-0000-000000000000"),
						ReservedHours:            to.Ptr[float64](24),
						SKUName:                  to.Ptr("Standard_D2_v2"),
						TotalReservedQuantity:    to.Ptr[float64](1),
						UsageDate:                to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-29T00:00:00Z"); return t }()),
						UsedHours:                to.Ptr[float64](24),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ReservationDetailsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ReservationDetailsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/ReservationDetailsWithReservationId.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReservationsDetails_List(t *testing.T) {
	// From example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/ReservationDetailsByBillingAccountId.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ReservationDetailsByBillingAccountId"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armconsumption.NewReservationsDetailsClient(cred, &options)
	pager := client.List("providers/Microsoft.Billing/billingAccounts/12345",
		&armconsumption.ReservationsDetailsClientListOptions{StartDate: nil,
			EndDate:            nil,
			Filter:             to.Ptr("properties/usageDate ge 2017-10-01 AND properties/usageDate le 2017-12-05"),
			ReservationID:      nil,
			ReservationOrderID: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/ReservationDetailsByBillingAccountId.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armconsumption.ReservationDetailsListResult{
			Value: []*armconsumption.ReservationDetail{
				{
					Name: to.Ptr("reservationDetails_Id1"),
					Type: to.Ptr("Microsoft.Consumption/reservationDetails"),
					ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/12345/providers/Microsoft.Consumption/reservationDetails/reservationDetails_Id1"),
					Properties: &armconsumption.ReservationDetailProperties{
						InstanceFlexibilityGroup: to.Ptr("DSv3 Series"),
						InstanceFlexibilityRatio: to.Ptr("1"),
						InstanceID:               to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/sqlh1/providers/microsoft.compute/virtualmachines/sqlh1"),
						ReservationID:            to.Ptr("00000000-0000-0000-0000-000000000000"),
						ReservationOrderID:       to.Ptr("00000000-0000-0000-0000-000000000000"),
						ReservedHours:            to.Ptr[float64](48),
						SKUName:                  to.Ptr("Standard_D2s_v3"),
						TotalReservedQuantity:    to.Ptr[float64](0),
						UsageDate:                to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-30T00:00:00-08:00"); return t }()),
						UsedHours:                to.Ptr[float64](0.6),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ReservationDetailsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ReservationDetailsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/ReservationDetailsByBillingAccountId.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/ReservationDetailsByBillingProfileId.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ReservationDetailsByBillingProfileId"},
	})
	client = armconsumption.NewReservationsDetailsClient(cred, &options)
	pager = client.List("providers/Microsoft.Billing/billingAccounts/12345:2468/billingProfiles/13579",
		&armconsumption.ReservationsDetailsClientListOptions{StartDate: to.Ptr("2019-09-01"),
			EndDate:            to.Ptr("2019-10-31"),
			Filter:             nil,
			ReservationID:      nil,
			ReservationOrderID: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/ReservationDetailsByBillingProfileId.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armconsumption.ReservationDetailsListResult{
			Value: []*armconsumption.ReservationDetail{
				{
					Name: to.Ptr("reservationDetails_Id1"),
					Type: to.Ptr("Microsoft.Consumption/reservationDetails"),
					ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/12345:2468/billingProfiles/13579/providers/Microsoft.Consumption/reservationDetails/reservationDetails_Id1"),
					Properties: &armconsumption.ReservationDetailProperties{
						InstanceFlexibilityGroup: to.Ptr("DSv3 Series"),
						InstanceFlexibilityRatio: to.Ptr("1"),
						InstanceID:               to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/sqlh1/providers/microsoft.compute/virtualmachines/sqlh1"),
						ReservationID:            to.Ptr("00000000-0000-0000-0000-000000000000"),
						ReservationOrderID:       to.Ptr("00000000-0000-0000-0000-000000000000"),
						ReservedHours:            to.Ptr[float64](48),
						SKUName:                  to.Ptr("Standard_D2s_v3"),
						TotalReservedQuantity:    to.Ptr[float64](0),
						UsageDate:                to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-09-30T00:00:00-08:00"); return t }()),
						UsedHours:                to.Ptr[float64](0.6),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ReservationDetailsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ReservationDetailsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/ReservationDetailsByBillingProfileId.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/ReservationDetailsByBillingProfileIdReservationId.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ReservationDetailsByBillingProfileIdReservationId"},
	})
	client = armconsumption.NewReservationsDetailsClient(cred, &options)
	pager = client.List("providers/Microsoft.Billing/billingAccounts/12345:2468/billingProfiles/13579",
		&armconsumption.ReservationsDetailsClientListOptions{StartDate: to.Ptr("2019-09-01"),
			EndDate:            to.Ptr("2019-10-31"),
			Filter:             nil,
			ReservationID:      to.Ptr("1c6b6358-709f-484c-85f1-72e862a0cf3b"),
			ReservationOrderID: to.Ptr("9f39ba10-794f-4dcb-8f4b-8d0cb47c27dc"),
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/ReservationDetailsByBillingProfileIdReservationId.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armconsumption.ReservationDetailsListResult{
			Value: []*armconsumption.ReservationDetail{
				{
					Name: to.Ptr("reservationDetails_Id1"),
					Type: to.Ptr("Microsoft.Consumption/reservationDetails"),
					ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/12345:2468/billingProfiles/13579/providers/Microsoft.Consumption/reservationDetails/reservationDetails_Id1"),
					Properties: &armconsumption.ReservationDetailProperties{
						InstanceFlexibilityGroup: to.Ptr("DSv3 Series"),
						InstanceFlexibilityRatio: to.Ptr("1"),
						InstanceID:               to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/sqlh1/providers/microsoft.compute/virtualmachines/sqlh1"),
						ReservationID:            to.Ptr("1c6b6358-709f-484c-85f1-72e862a0cf3b"),
						ReservationOrderID:       to.Ptr("9f39ba10-794f-4dcb-8f4b-8d0cb47c27dc"),
						ReservedHours:            to.Ptr[float64](48),
						SKUName:                  to.Ptr("Standard_D2s_v3"),
						TotalReservedQuantity:    to.Ptr[float64](0),
						UsageDate:                to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-09-30T00:00:00-08:00"); return t }()),
						UsedHours:                to.Ptr[float64](0.6),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ReservationDetailsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ReservationDetailsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/ReservationDetailsByBillingProfileIdReservationId.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReservationRecommendations_List(t *testing.T) {
	// From example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/ReservationRecommendationsByBillingAccount.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ReservationRecommendationsByBillingAccount-Legacy"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armconsumption.NewReservationRecommendationsClient(cred, &options)
	pager := client.List("providers/Microsoft.Billing/billingAccounts/123456",
		&armconsumption.ReservationRecommendationsClientListOptions{Filter: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/ReservationRecommendationsByBillingAccount.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armconsumption.ReservationRecommendationsListResult{
			Value: []armconsumption.ReservationRecommendationClassification{
				&armconsumption.LegacyReservationRecommendation{
					Name:     to.Ptr("00000000-0000-0000-0000-000000000000"),
					Type:     to.Ptr("Microsoft.Consumption/reservationRecommendations"),
					ID:       to.Ptr("billingAccount/123456/providers/Microsoft.Consumption/reservationRecommendations/00000000-0000-0000-0000-000000000000"),
					Location: to.Ptr("westus"),
					SKU:      to.Ptr("Standard_DS1_v2"),
					Kind:     to.Ptr(armconsumption.ReservationRecommendationKindLegacy),
					Properties: &armconsumption.LegacySharedScopeReservationRecommendationProperties{
						CostWithNoReservedInstances:   to.Ptr[float64](12.0785105),
						FirstUsageDate:                to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-07-07T00:00:00-07:00"); return t }()),
						InstanceFlexibilityGroup:      to.Ptr("DSv2 Series"),
						InstanceFlexibilityRatio:      to.Ptr[float32](1),
						LookBackPeriod:                to.Ptr("Last7Days"),
						MeterID:                       to.Ptr("00000000-0000-0000-0000-000000000000"),
						NetSavings:                    to.Ptr[float64](0.588546019225182),
						NormalizedSize:                to.Ptr("Standard_DS1_v2"),
						RecommendedQuantity:           to.Ptr[float64](1),
						RecommendedQuantityNormalized: to.Ptr[float32](1),
						Scope:                         to.Ptr("Shared"),
						SKUProperties: []*armconsumption.SKUProperty{
							{
								Name:  to.Ptr("Cores"),
								Value: to.Ptr("1"),
							},
							{
								Name:  to.Ptr("Ram"),
								Value: to.Ptr("1"),
							}},
						Term:                           to.Ptr("P1Y"),
						TotalCostWithReservedInstances: to.Ptr[float64](11.4899644807748),
					},
				},
				&armconsumption.LegacyReservationRecommendation{
					Name:     to.Ptr("00000000-0000-0000-0000-000000000000"),
					Type:     to.Ptr("Microsoft.Consumption/reservationRecommendations"),
					ID:       to.Ptr("billingAccount/123456/providers/Microsoft.Consumption/reservationRecommendations/00000000-0000-0000-0000-000000000000"),
					Location: to.Ptr("westus"),
					SKU:      to.Ptr("Standard_DS1_v2"),
					Kind:     to.Ptr(armconsumption.ReservationRecommendationKindLegacy),
					Properties: &armconsumption.LegacySharedScopeReservationRecommendationProperties{
						CostWithNoReservedInstances:   to.Ptr[float64](10.0785105),
						FirstUsageDate:                to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-07-07T00:00:00-07:00"); return t }()),
						InstanceFlexibilityGroup:      to.Ptr("DSv2 Series"),
						InstanceFlexibilityRatio:      to.Ptr[float32](1),
						LookBackPeriod:                to.Ptr("Last7Days"),
						MeterID:                       to.Ptr("00000000-0000-0000-0000-000000000000"),
						NetSavings:                    to.Ptr[float64](0.68),
						NormalizedSize:                to.Ptr("Standard_DS1"),
						RecommendedQuantity:           to.Ptr[float64](1),
						RecommendedQuantityNormalized: to.Ptr[float32](1.2),
						Scope:                         to.Ptr("Shared"),
						SKUProperties: []*armconsumption.SKUProperty{
							{
								Name:  to.Ptr("SkuDisplayName"),
								Value: to.Ptr("B"),
							},
							{
								Name:  to.Ptr("CPU"),
								Value: to.Ptr("1"),
							}},
						Term:                           to.Ptr("P1Y"),
						TotalCostWithReservedInstances: to.Ptr[float64](13.48),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ReservationRecommendationsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ReservationRecommendationsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/ReservationRecommendationsByBillingAccount.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/ReservationRecommendationsByBillingProfile.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ReservationRecommendationsByBillingProfile-Modern"},
	})
	client = armconsumption.NewReservationRecommendationsClient(cred, &options)
	pager = client.List("providers/Microsoft.Billing/billingAccounts/123456/billingProfiles/6420",
		&armconsumption.ReservationRecommendationsClientListOptions{Filter: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/ReservationRecommendationsByBillingProfile.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armconsumption.ReservationRecommendationsListResult{
			Value: []armconsumption.ReservationRecommendationClassification{
				&armconsumption.ModernReservationRecommendation{
					Name:     to.Ptr("00000000-0000-0000-0000-000000000000"),
					Type:     to.Ptr("Microsoft.Consumption/reservationRecommendations"),
					ID:       to.Ptr("/providers/Microsoft.Billing/billingAccounts/123456/billingProfiles/6420/providers/Microsoft.Consumption/reservationRecommendations/00000000-0000-0000-0000-000000000000"),
					Location: to.Ptr("westus"),
					SKU:      to.Ptr("Standard_DS1_v2"),
					Kind:     to.Ptr(armconsumption.ReservationRecommendationKindModern),
					Properties: &armconsumption.ModernReservationRecommendationProperties{
						CostWithNoReservedInstances: &armconsumption.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float64](1.4749000882),
						},
						FirstUsageDate:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-07-07T00:00:00-07:00"); return t }()),
						InstanceFlexibilityGroup: to.Ptr("DSv2 Series"),
						InstanceFlexibilityRatio: to.Ptr[float32](1),
						LookBackPeriod:           to.Ptr[int32](7),
						MeterID:                  to.Ptr("00000000-0000-0000-0000-000000000000"),
						NetSavings: &armconsumption.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float64](0.39824251795372),
						},
						NormalizedSize:                to.Ptr("Standard_DS1_v2"),
						RecommendedQuantity:           to.Ptr[float64](1),
						RecommendedQuantityNormalized: to.Ptr[float32](1),
						Scope:                         to.Ptr("Shared"),
						SKUProperties: []*armconsumption.SKUProperty{
							{
								Name:  to.Ptr("Cores"),
								Value: to.Ptr("1"),
							},
							{
								Name:  to.Ptr("Ram"),
								Value: to.Ptr("1"),
							}},
						Term: to.Ptr("P1Y"),
						TotalCostWithReservedInstances: &armconsumption.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float64](1.07665757024628),
						},
					},
				},
				&armconsumption.ModernReservationRecommendation{
					Name:     to.Ptr("00000000-0000-0000-0000-000000000000"),
					Type:     to.Ptr("Microsoft.Consumption/reservationRecommendations"),
					ID:       to.Ptr("/providers/Microsoft.Billing/billingAccounts/123456/billingProfiles/6420/providers/Microsoft.Consumption/reservationRecommendations/00000000-0000-0000-0000-000000000000"),
					Location: to.Ptr("westus"),
					SKU:      to.Ptr("Standard_DS1_v2"),
					Kind:     to.Ptr(armconsumption.ReservationRecommendationKindModern),
					Properties: &armconsumption.ModernReservationRecommendationProperties{
						CostWithNoReservedInstances: &armconsumption.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float64](1.4896),
						},
						FirstUsageDate:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-07-07T00:00:00-07:00"); return t }()),
						InstanceFlexibilityGroup: to.Ptr("DSv2 Series"),
						InstanceFlexibilityRatio: to.Ptr[float32](1),
						LookBackPeriod:           to.Ptr[int32](7),
						MeterID:                  to.Ptr("00000000-0000-0000-0000-000000000000"),
						NetSavings: &armconsumption.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float64](0.40694246575372),
						},
						NormalizedSize:                to.Ptr("Standard_DS1"),
						RecommendedQuantity:           to.Ptr[float64](1),
						RecommendedQuantityNormalized: to.Ptr[float32](1.2),
						Scope:                         to.Ptr("Shared"),
						SKUProperties: []*armconsumption.SKUProperty{
							{
								Name:  to.Ptr("SkuDisplayName"),
								Value: to.Ptr("B"),
							},
							{
								Name:  to.Ptr("CPU"),
								Value: to.Ptr("1"),
							}},
						Term: to.Ptr("P1Y"),
						TotalCostWithReservedInstances: &armconsumption.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float64](1.08265753424628),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ReservationRecommendationsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ReservationRecommendationsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/ReservationRecommendationsByBillingProfile.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/ReservationRecommendationsByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ReservationRecommendationsByResourceGroup-Legacy"},
	})
	client = armconsumption.NewReservationRecommendationsClient(cred, &options)
	pager = client.List("subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/testGroup",
		&armconsumption.ReservationRecommendationsClientListOptions{Filter: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/ReservationRecommendationsByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armconsumption.ReservationRecommendationsListResult{
			Value: []armconsumption.ReservationRecommendationClassification{
				&armconsumption.LegacyReservationRecommendation{
					Name:     to.Ptr("reservationRecommendations1"),
					Type:     to.Ptr("Microsoft.Consumption/reservationRecommendations"),
					ID:       to.Ptr("subscriptions/00000000-0000-0000-0000-000000000000/resourceGrouups/testGroup/providers/Microsoft.Consumption/reservationRecommendations/reservationRecommendations1"),
					Location: to.Ptr("northeurope"),
					SKU:      to.Ptr("Standard_DS1_v2"),
					Kind:     to.Ptr(armconsumption.ReservationRecommendationKindLegacy),
					Properties: &armconsumption.LegacySingleScopeReservationRecommendationProperties{
						CostWithNoReservedInstances:    to.Ptr[float64](0),
						FirstUsageDate:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-06T00:00:00Z"); return t }()),
						LookBackPeriod:                 to.Ptr("Last7Days"),
						MeterID:                        to.Ptr("00000000-0000-0000-0000-000000000000"),
						NetSavings:                     to.Ptr[float64](4.634521202630137),
						RecommendedQuantity:            to.Ptr[float64](1),
						Scope:                          to.Ptr("Single"),
						Term:                           to.Ptr("P1Y"),
						TotalCostWithReservedInstances: to.Ptr[float64](0),
						SubscriptionID:                 to.Ptr("00000000-0000-0000-0000-000000000000"),
					},
				},
				&armconsumption.LegacyReservationRecommendation{
					Name:     to.Ptr("reservationRecommendations2"),
					Type:     to.Ptr("Microsoft.Consumption/reservationRecommendations"),
					ID:       to.Ptr("subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/testGroup/providers/Microsoft.Consumption/reservationRecommendations/reservationRecommendations2"),
					Location: to.Ptr("northeurope"),
					SKU:      to.Ptr("Standard_DS1_v2"),
					Kind:     to.Ptr(armconsumption.ReservationRecommendationKindLegacy),
					Properties: &armconsumption.LegacySingleScopeReservationRecommendationProperties{
						CostWithNoReservedInstances:    to.Ptr[float64](0),
						FirstUsageDate:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-06T00:00:00Z"); return t }()),
						LookBackPeriod:                 to.Ptr("Last7Days"),
						MeterID:                        to.Ptr("00000000-0000-0000-0000-000000000000"),
						NetSavings:                     to.Ptr[float64](7.289315723178081),
						RecommendedQuantity:            to.Ptr[float64](1),
						Scope:                          to.Ptr("Single"),
						Term:                           to.Ptr("P3Y"),
						TotalCostWithReservedInstances: to.Ptr[float64](0),
						SubscriptionID:                 to.Ptr("00000000-0000-0000-0000-000000000000"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ReservationRecommendationsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ReservationRecommendationsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/ReservationRecommendationsByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/ReservationRecommendationsBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ReservationRecommendationsBySubscription-Legacy"},
	})
	client = armconsumption.NewReservationRecommendationsClient(cred, &options)
	pager = client.List("subscriptions/00000000-0000-0000-0000-000000000000",
		&armconsumption.ReservationRecommendationsClientListOptions{Filter: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/ReservationRecommendationsBySubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armconsumption.ReservationRecommendationsListResult{
			Value: []armconsumption.ReservationRecommendationClassification{
				&armconsumption.LegacyReservationRecommendation{
					Name:     to.Ptr("reservationRecommendations1"),
					Type:     to.Ptr("Microsoft.Consumption/reservationRecommendations"),
					ID:       to.Ptr("subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Consumption/reservationRecommendations/reservationRecommendations1"),
					Location: to.Ptr("northeurope"),
					SKU:      to.Ptr("Standard_DS1_v2"),
					Kind:     to.Ptr(armconsumption.ReservationRecommendationKindLegacy),
					Properties: &armconsumption.LegacySingleScopeReservationRecommendationProperties{
						CostWithNoReservedInstances:    to.Ptr[float64](0),
						FirstUsageDate:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-06T00:00:00Z"); return t }()),
						LookBackPeriod:                 to.Ptr("Last7Days"),
						MeterID:                        to.Ptr("00000000-0000-0000-0000-000000000000"),
						NetSavings:                     to.Ptr[float64](4.634521202630137),
						RecommendedQuantity:            to.Ptr[float64](1),
						Scope:                          to.Ptr("Single"),
						Term:                           to.Ptr("P1Y"),
						TotalCostWithReservedInstances: to.Ptr[float64](0),
						SubscriptionID:                 to.Ptr("00000000-0000-0000-0000-000000000000"),
					},
				},
				&armconsumption.LegacyReservationRecommendation{
					Name:     to.Ptr("reservationRecommendations2"),
					Type:     to.Ptr("Microsoft.Consumption/reservationRecommendations"),
					ID:       to.Ptr("subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Consumption/reservationRecommendations/reservationRecommendations2"),
					Location: to.Ptr("northeurope"),
					SKU:      to.Ptr("Standard_DS1_v2"),
					Kind:     to.Ptr(armconsumption.ReservationRecommendationKindLegacy),
					Properties: &armconsumption.LegacySingleScopeReservationRecommendationProperties{
						CostWithNoReservedInstances:    to.Ptr[float64](0),
						FirstUsageDate:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-06T00:00:00Z"); return t }()),
						LookBackPeriod:                 to.Ptr("Last7Days"),
						MeterID:                        to.Ptr("00000000-0000-0000-0000-000000000000"),
						NetSavings:                     to.Ptr[float64](7.289315723178081),
						RecommendedQuantity:            to.Ptr[float64](1),
						Scope:                          to.Ptr("Single"),
						Term:                           to.Ptr("P3Y"),
						TotalCostWithReservedInstances: to.Ptr[float64](0),
						SubscriptionID:                 to.Ptr("00000000-0000-0000-0000-000000000000"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ReservationRecommendationsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ReservationRecommendationsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/ReservationRecommendationsBySubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/ReservationRecommendationsFilterBySubscriptionForScopeLookBackPeriod.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ReservationRecommendationsFilterBySubscriptionForScopeLookBackPeriod-Legacy"},
	})
	client = armconsumption.NewReservationRecommendationsClient(cred, &options)
	pager = client.List("subscriptions/00000000-0000-0000-0000-000000000000",
		&armconsumption.ReservationRecommendationsClientListOptions{Filter: to.Ptr("properties/scope eq 'Single' AND properties/lookBackPeriod eq 'Last7Days'")})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/ReservationRecommendationsFilterBySubscriptionForScopeLookBackPeriod.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armconsumption.ReservationRecommendationsListResult{
			Value: []armconsumption.ReservationRecommendationClassification{
				&armconsumption.LegacyReservationRecommendation{
					Name:     to.Ptr("reservationRecommendations1"),
					Type:     to.Ptr("Microsoft.Consumption/reservationRecommendations"),
					ID:       to.Ptr("subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Consumption/reservationRecommendations/reservationRecommendations1"),
					Location: to.Ptr("northeurope"),
					SKU:      to.Ptr("Standard_DS1_v2"),
					Kind:     to.Ptr(armconsumption.ReservationRecommendationKindLegacy),
					Properties: &armconsumption.LegacySingleScopeReservationRecommendationProperties{
						CostWithNoReservedInstances: to.Ptr[float64](0),
						FirstUsageDate:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-06T00:00:00Z"); return t }()),
						LookBackPeriod:              to.Ptr("Last7Days"),
						MeterID:                     to.Ptr("00000000-0000-0000-0000-000000000000"),
						NetSavings:                  to.Ptr[float64](4.634521202630137),
						RecommendedQuantity:         to.Ptr[float64](1),
						Scope:                       to.Ptr("Single"),
						SKUProperties: []*armconsumption.SKUProperty{
							{
								Name:  to.Ptr("Cores"),
								Value: to.Ptr("1"),
							},
							{
								Name:  to.Ptr("Ram"),
								Value: to.Ptr("1"),
							}},
						Term:                           to.Ptr("P1Y"),
						TotalCostWithReservedInstances: to.Ptr[float64](0),
						SubscriptionID:                 to.Ptr("00000000-0000-0000-0000-000000000000"),
					},
				},
				&armconsumption.LegacyReservationRecommendation{
					Name:     to.Ptr("reservationRecommendations2"),
					Type:     to.Ptr("Microsoft.Consumption/reservationRecommendations"),
					ID:       to.Ptr("subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Consumption/reservationRecommendations/reservationRecommendations2"),
					Location: to.Ptr("northeurope"),
					SKU:      to.Ptr("Standard_DS1_v2"),
					Kind:     to.Ptr(armconsumption.ReservationRecommendationKindLegacy),
					Properties: &armconsumption.LegacySingleScopeReservationRecommendationProperties{
						CostWithNoReservedInstances: to.Ptr[float64](0),
						FirstUsageDate:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-06T00:00:00Z"); return t }()),
						LookBackPeriod:              to.Ptr("Last7Days"),
						MeterID:                     to.Ptr("00000000-0000-0000-0000-000000000000"),
						NetSavings:                  to.Ptr[float64](7.289315723178081),
						RecommendedQuantity:         to.Ptr[float64](1),
						Scope:                       to.Ptr("Single"),
						SKUProperties: []*armconsumption.SKUProperty{
							{
								Name:  to.Ptr("SkuDisplayName"),
								Value: to.Ptr("B"),
							},
							{
								Name:  to.Ptr("CPU"),
								Value: to.Ptr("1"),
							}},
						Term:                           to.Ptr("P3Y"),
						TotalCostWithReservedInstances: to.Ptr[float64](0),
						SubscriptionID:                 to.Ptr("00000000-0000-0000-0000-000000000000"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ReservationRecommendationsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ReservationRecommendationsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/ReservationRecommendationsFilterBySubscriptionForScopeLookBackPeriod.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReservationRecommendationDetails_Get(t *testing.T) {
	// From example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/ReservationRecommendationDetailsByBillingAccount.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ReservationRecommendationsByBillingAccount-Legacy"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armconsumption.NewReservationRecommendationDetailsClient(cred, &options)
	res, err := client.Get(ctx,
		"Shared",
		"eastus",
		armconsumption.TermP1Y,
		armconsumption.LookBackPeriodLast60Days,
		"Standard_DS14_v2",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/ReservationRecommendationDetailsByBillingAccount.json: %v", err)
	}
	// Response check
	{
		exampleRes := armconsumption.ReservationRecommendationDetailsModel{
			Name: to.Ptr("reservationRecommendationDetails"),
			Type: to.Ptr("Microsoft.Consumption/ReservationRecommendationDetails"),
			ID:   to.Ptr("providers/Microsoft.Billing/billingAccounts/00000000/providers/microsoft.consumption/reservationrecommendationdetails"),
			Properties: &armconsumption.ReservationRecommendationDetailsProperties{
				Currency: to.Ptr("USD"),
				Resource: &armconsumption.ReservationRecommendationDetailsResourceProperties{
					AppliedScopes: []*string{
						to.Ptr("00000000-0000-0000-0000-00000000"),
						to.Ptr("00000000-0000-0000-0000-00000000")},
					OnDemandRate:    to.Ptr[float32](1.482),
					Product:         to.Ptr("Standard_DS14_v2"),
					Region:          to.Ptr("eastus"),
					ReservationRate: to.Ptr[float32](0.70570776255707),
					ResourceType:    to.Ptr("virtualmachines"),
				},
				Savings: &armconsumption.ReservationRecommendationDetailsSavingsProperties{
					CalculatedSavings: []*armconsumption.ReservationRecommendationDetailsCalculatedSavingsProperties{
						{
							OnDemandCost:         to.Ptr[float32](529550.326618951),
							OverageCost:          to.Ptr[float32](63253.5935111345),
							Quantity:             to.Ptr[float32](220),
							ReservationCost:      to.Ptr[float32](223102.452054792),
							Savings:              to.Ptr[float32](243194.281053024),
							TotalReservationCost: to.Ptr[float32](286356.045565927),
						},
						{
							OnDemandCost:         to.Ptr[float32](529550.32661895),
							OverageCost:          to.Ptr[float32](149335.025050147),
							Quantity:             to.Ptr[float32](179),
							ReservationCost:      to.Ptr[float32](181524.267808217),
							Savings:              to.Ptr[float32](198691.033760586),
							TotalReservationCost: to.Ptr[float32](330859.292858364),
						},
						{
							OnDemandCost:         to.Ptr[float32](529550.32661895),
							OverageCost:          to.Ptr[float32](195942.319606957),
							Quantity:             to.Ptr[float32](157),
							ReservationCost:      to.Ptr[float32](159214.022602738),
							Savings:              to.Ptr[float32](174393.984409255),
							TotalReservationCost: to.Ptr[float32](355156.342209695),
						},
						{
							OnDemandCost:         to.Ptr[float32](529550.32661895),
							OverageCost:          to.Ptr[float32](30975.2311896299),
							Quantity:             to.Ptr[float32](241),
							ReservationCost:      to.Ptr[float32](244398.595205477),
							Savings:              to.Ptr[float32](254176.500223843),
							TotalReservationCost: to.Ptr[float32](275373.826395107),
						}},
					LookBackPeriod:       to.Ptr[int32](60),
					RecommendedQuantity:  to.Ptr[float32](253),
					ReservationOrderTerm: to.Ptr("P1Y"),
					SavingsType:          to.Ptr("instance"),
					UnitOfMeasure:        to.Ptr("hour"),
				},
				Scope: to.Ptr("Shared"),
				Usage: &armconsumption.ReservationRecommendationDetailsUsageProperties{
					FirstConsumptionDate: to.Ptr("2019-11-27T00:00:00"),
					LastConsumptionDate:  to.Ptr("2020-01-25T21:00:00"),
					LookBackUnitType:     to.Ptr("virtualMachine quantity"),
					UsageData: []*float32{
						to.Ptr[float32](275.95003899999995),
						to.Ptr[float32](275.916705),
						to.Ptr[float32](276),
						to.Ptr[float32](276),
						to.Ptr[float32](275.916725),
						to.Ptr[float32](275.916705),
						to.Ptr[float32](275.98335299999997),
						to.Ptr[float32](276),
						to.Ptr[float32](276),
						to.Ptr[float32](276),
						to.Ptr[float32](276),
						to.Ptr[float32](276),
						to.Ptr[float32](275.98335299999997),
						to.Ptr[float32](276),
						to.Ptr[float32](276),
						to.Ptr[float32](276),
						to.Ptr[float32](276),
						to.Ptr[float32](275.933352)},
					UsageGrain: to.Ptr("hourly"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ReservationRecommendationDetailsModel) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ReservationRecommendationDetailsModel)
			t.Fatalf("Mock response is not equal to example response for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/ReservationRecommendationDetailsByBillingAccount.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/ReservationRecommendationDetailsByBillingProfile.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ReservationRecommendationsByBillingProfile-Modern"},
	})
	client = armconsumption.NewReservationRecommendationDetailsClient(cred, &options)
	res, err = client.Get(ctx,
		"Shared",
		"australiaeast",
		armconsumption.TermP1Y,
		armconsumption.LookBackPeriodLast07Days,
		"Standard_B2s",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/ReservationRecommendationDetailsByBillingProfile.json: %v", err)
	}
	// Response check
	{
		exampleRes := armconsumption.ReservationRecommendationDetailsModel{
			Name: to.Ptr("reservationRecommendationDetails"),
			Type: to.Ptr("Microsoft.Consumption/ReservationRecommendationDetails"),
			ID:   to.Ptr("providers/Microsoft.Billing/billingAccounts/00000000-0000-0000-0000-00000000:00000000-0000-0000-0000-00000000/billingProfiles/00000000-0000-0000-0000-00000000/providers/microsoft.consumption/reservationrecommendationdetails"),
			Properties: &armconsumption.ReservationRecommendationDetailsProperties{
				Currency: to.Ptr("AUD"),
				Resource: &armconsumption.ReservationRecommendationDetailsResourceProperties{
					AppliedScopes: []*string{
						to.Ptr("00000000-0000-0000-0000-00000000")},
					OnDemandRate:    to.Ptr[float32](0.0725),
					Product:         to.Ptr("Standard_B2s"),
					Region:          to.Ptr("australiaeast"),
					ReservationRate: to.Ptr[float32](0.04414166531788041),
					ResourceType:    to.Ptr("virtualmachines"),
				},
				Savings: &armconsumption.ReservationRecommendationDetailsSavingsProperties{
					CalculatedSavings: []*armconsumption.ReservationRecommendationDetailsCalculatedSavingsProperties{
						{
							OnDemandCost:         to.Ptr[float32](632.8844720496894),
							OverageCost:          to.Ptr[float32](0),
							Quantity:             to.Ptr[float32](1),
							ReservationCost:      to.Ptr[float32](387.74038815226174),
							Savings:              to.Ptr[float32](245.1440838974277),
							TotalReservationCost: to.Ptr[float32](387.74038815226174),
						}},
					LookBackPeriod:       to.Ptr[int32](7),
					RecommendedQuantity:  to.Ptr[float32](1),
					ReservationOrderTerm: to.Ptr("P1Y"),
					SavingsType:          to.Ptr("instance"),
					UnitOfMeasure:        to.Ptr("hour"),
				},
				Scope: to.Ptr("Shared"),
				Usage: &armconsumption.ReservationRecommendationDetailsUsageProperties{
					FirstConsumptionDate: to.Ptr("2020-01-19T00:00:00"),
					LastConsumptionDate:  to.Ptr("2020-01-25T17:00:00"),
					LookBackUnitType:     to.Ptr("virtualMachine quantity"),
					UsageData: []*float32{
						to.Ptr[float32](1),
						to.Ptr[float32](1),
						to.Ptr[float32](1),
						to.Ptr[float32](1),
						to.Ptr[float32](1),
						to.Ptr[float32](1),
						to.Ptr[float32](1),
						to.Ptr[float32](1),
						to.Ptr[float32](1),
						to.Ptr[float32](0)},
					UsageGrain: to.Ptr("hourly"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ReservationRecommendationDetailsModel) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ReservationRecommendationDetailsModel)
			t.Fatalf("Mock response is not equal to example response for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/ReservationRecommendationDetailsByBillingProfile.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/ReservationRecommendationDetailsByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ReservationRecommendationsByResourceGroup-Legacy"},
	})
	client = armconsumption.NewReservationRecommendationDetailsClient(cred, &options)
	res, err = client.Get(ctx,
		"Single",
		"westus",
		armconsumption.TermP3Y,
		armconsumption.LookBackPeriodLast30Days,
		"Standard_DS13_v2",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/ReservationRecommendationDetailsByResourceGroup.json: %v", err)
	}
	// Response check
	{
		exampleRes := armconsumption.ReservationRecommendationDetailsModel{
			Name: to.Ptr("reservationRecommendationDetails"),
			Type: to.Ptr("Microsoft.Consumption/ReservationRecommendationDetails"),
			ID:   to.Ptr("subscriptions/00000000-0000-0000-0000-00000000/resourceGroups/testGroup/providers/microsoft.consumption/reservationrecommendationdetails"),
			Properties: &armconsumption.ReservationRecommendationDetailsProperties{
				Currency: to.Ptr("USD"),
				Resource: &armconsumption.ReservationRecommendationDetailsResourceProperties{
					AppliedScopes: []*string{
						to.Ptr("00000000-0000-0000-0000-00000000"),
						to.Ptr("testGroup")},
					OnDemandRate:    to.Ptr[float32](0.519),
					Product:         to.Ptr("Standard_DS13_v2"),
					Region:          to.Ptr("westus"),
					ReservationRate: to.Ptr[float32](0.302549467275493),
					ResourceType:    to.Ptr("virtualmachines"),
				},
				ResourceGroup: to.Ptr("testGroup"),
				Savings: &armconsumption.ReservationRecommendationDetailsSavingsProperties{
					CalculatedSavings: []*armconsumption.ReservationRecommendationDetailsCalculatedSavingsProperties{
						{
							OnDemandCost:         to.Ptr[float32](368.4813602070006),
							OverageCost:          to.Ptr[float32](0),
							Quantity:             to.Ptr[float32](2),
							ReservationCost:      to.Ptr[float32](429.01514459665),
							Savings:              to.Ptr[float32](-60.5337843896494),
							TotalReservationCost: to.Ptr[float32](429.01514459665),
						},
						{
							OnDemandCost:         to.Ptr[float32](368.481360207),
							OverageCost:          to.Ptr[float32](1.557),
							Quantity:             to.Ptr[float32](1),
							ReservationCost:      to.Ptr[float32](214.507572298325),
							Savings:              to.Ptr[float32](152.416787908675),
							TotalReservationCost: to.Ptr[float32](216.064572298325),
						}},
					LookBackPeriod:       to.Ptr[int32](30),
					RecommendedQuantity:  to.Ptr[float32](1),
					ReservationOrderTerm: to.Ptr("P3Y"),
					SavingsType:          to.Ptr("instance"),
					UnitOfMeasure:        to.Ptr("hour"),
				},
				Scope: to.Ptr("Single"),
				Usage: &armconsumption.ReservationRecommendationDetailsUsageProperties{
					FirstConsumptionDate: to.Ptr("2020-02-03T00:00:00"),
					LastConsumptionDate:  to.Ptr("2020-03-03T13:00:00"),
					LookBackUnitType:     to.Ptr("virtualMachine quantity"),
					UsageData: []*float32{
						to.Ptr[float32](1),
						to.Ptr[float32](1),
						to.Ptr[float32](1),
						to.Ptr[float32](1),
						to.Ptr[float32](1),
						to.Ptr[float32](1)},
					UsageGrain: to.Ptr("hourly"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ReservationRecommendationDetailsModel) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ReservationRecommendationDetailsModel)
			t.Fatalf("Mock response is not equal to example response for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/ReservationRecommendationDetailsByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/ReservationRecommendationDetailsBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ReservationRecommendationsBySubscription-Legacy"},
	})
	client = armconsumption.NewReservationRecommendationDetailsClient(cred, &options)
	res, err = client.Get(ctx,
		"Single",
		"westus",
		armconsumption.TermP3Y,
		armconsumption.LookBackPeriodLast30Days,
		"Standard_DS13_v2",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/ReservationRecommendationDetailsBySubscription.json: %v", err)
	}
	// Response check
	{
		exampleRes := armconsumption.ReservationRecommendationDetailsModel{
			Name: to.Ptr("reservationRecommendationDetails"),
			Type: to.Ptr("Microsoft.Consumption/ReservationRecommendationDetails"),
			ID:   to.Ptr("subscriptions/00000000-0000-0000-0000-00000000/providers/microsoft.consumption/reservationrecommendationdetails"),
			Properties: &armconsumption.ReservationRecommendationDetailsProperties{
				Currency: to.Ptr("USD"),
				Resource: &armconsumption.ReservationRecommendationDetailsResourceProperties{
					AppliedScopes: []*string{
						to.Ptr("00000000-0000-0000-0000-00000000")},
					OnDemandRate:    to.Ptr[float32](0.519),
					Product:         to.Ptr("Standard_DS13_v2"),
					Region:          to.Ptr("westus"),
					ReservationRate: to.Ptr[float32](0.302549467275493),
					ResourceType:    to.Ptr("virtualmachines"),
				},
				Savings: &armconsumption.ReservationRecommendationDetailsSavingsProperties{
					CalculatedSavings: []*armconsumption.ReservationRecommendationDetailsCalculatedSavingsProperties{
						{
							OnDemandCost:         to.Ptr[float32](368.4813602070006),
							OverageCost:          to.Ptr[float32](0),
							Quantity:             to.Ptr[float32](2),
							ReservationCost:      to.Ptr[float32](429.01514459665),
							Savings:              to.Ptr[float32](-60.5337843896494),
							TotalReservationCost: to.Ptr[float32](429.01514459665),
						},
						{
							OnDemandCost:         to.Ptr[float32](368.481360207),
							OverageCost:          to.Ptr[float32](1.557),
							Quantity:             to.Ptr[float32](1),
							ReservationCost:      to.Ptr[float32](214.507572298325),
							Savings:              to.Ptr[float32](152.416787908675),
							TotalReservationCost: to.Ptr[float32](216.064572298325),
						}},
					LookBackPeriod:       to.Ptr[int32](30),
					RecommendedQuantity:  to.Ptr[float32](1),
					ReservationOrderTerm: to.Ptr("P3Y"),
					SavingsType:          to.Ptr("instance"),
					UnitOfMeasure:        to.Ptr("hour"),
				},
				Scope: to.Ptr("Single"),
				Usage: &armconsumption.ReservationRecommendationDetailsUsageProperties{
					FirstConsumptionDate: to.Ptr("2020-02-03T00:00:00"),
					LastConsumptionDate:  to.Ptr("2020-03-03T13:00:00"),
					LookBackUnitType:     to.Ptr("virtualMachine quantity"),
					UsageData: []*float32{
						to.Ptr[float32](1),
						to.Ptr[float32](1),
						to.Ptr[float32](1),
						to.Ptr[float32](1),
						to.Ptr[float32](1),
						to.Ptr[float32](1)},
					UsageGrain: to.Ptr("hourly"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ReservationRecommendationDetailsModel) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ReservationRecommendationDetailsModel)
			t.Fatalf("Mock response is not equal to example response for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/ReservationRecommendationDetailsBySubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReservationTransactions_List(t *testing.T) {
	// From example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/ReservationTransactionsListByEnrollmentNumber.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ReservationTransactionsByEnrollmentNumber"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armconsumption.NewReservationTransactionsClient(cred, &options)
	pager := client.List("123456",
		&armconsumption.ReservationTransactionsClientListOptions{Filter: to.Ptr("properties/eventDate+ge+2020-05-20+AND+properties/eventDate+le+2020-05-30")})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/ReservationTransactionsListByEnrollmentNumber.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armconsumption.ReservationTransactionsListResult{
			Value: []*armconsumption.ReservationTransaction{
				{
					Name: to.Ptr("201909091919"),
					Type: to.Ptr("Microsoft.Consumption/reservationTransactions"),
					ID:   to.Ptr("/billingAccounts/123456/providers/Microsoft.Consumption/reservationtransactions/201909091919"),
					Tags: []*string{},
					Properties: &armconsumption.LegacyReservationTransactionProperties{
						Description:                to.Ptr("Standard_DS1_v2 westus 1 Year"),
						AccountName:                to.Ptr("Microsoft Infrastructure"),
						AccountOwnerEmail:          to.Ptr("admin@microsoft.com"),
						Amount:                     to.Ptr[float64](-21),
						ArmSKUName:                 to.Ptr("Standard_DS1_v2"),
						BillingFrequency:           to.Ptr("recurring"),
						BillingMonth:               to.Ptr[int32](20190901),
						CostCenter:                 to.Ptr(""),
						Currency:                   to.Ptr("USD"),
						CurrentEnrollment:          to.Ptr("123456"),
						DepartmentName:             to.Ptr("Unassigned"),
						EventDate:                  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-09-09T19:19:04Z"); return t }()),
						EventType:                  to.Ptr("Refund"),
						MonetaryCommitment:         to.Ptr[float64](523123.9),
						Overage:                    to.Ptr[float64](23234.49),
						PurchasingEnrollment:       to.Ptr("123456"),
						PurchasingSubscriptionGUID: to.Ptr("a838a8c3-a408-49e1-ac90-42cb95bff9b2"),
						PurchasingSubscriptionName: to.Ptr("Infrastructure Subscription"),
						Quantity:                   to.Ptr[float64](1),
						Region:                     to.Ptr("westus"),
						ReservationOrderID:         to.Ptr("00000000-0000-0000-0000-000000000000"),
						ReservationOrderName:       to.Ptr("Transaction-DS1_v2"),
						Term:                       to.Ptr("P1Y"),
					},
				},
				{
					Name: to.Ptr("201909091919"),
					Type: to.Ptr("Microsoft.Consumption/reservationTransactions"),
					ID:   to.Ptr("/billingAccounts/123456/providers/Microsoft.Consumption/reservationtransactions/201909091919"),
					Tags: []*string{},
					Properties: &armconsumption.LegacyReservationTransactionProperties{
						Description:                to.Ptr("Standard_DS1_v2 westus 1 Year"),
						AccountName:                to.Ptr("Microsoft Infrastructure"),
						AccountOwnerEmail:          to.Ptr("admin@microsoft.com"),
						Amount:                     to.Ptr[float64](21),
						ArmSKUName:                 to.Ptr("Standard_DS1_v2"),
						BillingFrequency:           to.Ptr("recurring"),
						BillingMonth:               to.Ptr[int32](20190901),
						CostCenter:                 to.Ptr(""),
						Currency:                   to.Ptr("USD"),
						CurrentEnrollment:          to.Ptr("123456"),
						DepartmentName:             to.Ptr("Unassigned"),
						EventDate:                  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-09-09T19:19:04Z"); return t }()),
						EventType:                  to.Ptr("Purchase"),
						MonetaryCommitment:         to.Ptr[float64](523123.9),
						Overage:                    to.Ptr[float64](23234.49),
						PurchasingEnrollment:       to.Ptr("123456"),
						PurchasingSubscriptionGUID: to.Ptr("a838a8c3-a408-49e1-ac90-42cb95bff9b2"),
						PurchasingSubscriptionName: to.Ptr("Infrastructure Subscription"),
						Quantity:                   to.Ptr[float64](1),
						Region:                     to.Ptr("westus"),
						ReservationOrderID:         to.Ptr("00000000-0000-0000-0000-000000000000"),
						ReservationOrderName:       to.Ptr("Transaction-DS1_v2"),
						Term:                       to.Ptr("P1Y"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ReservationTransactionsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ReservationTransactionsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/ReservationTransactionsListByEnrollmentNumber.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReservationTransactions_ListByBillingProfile(t *testing.T) {
	// From example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/ReservationTransactionsListByBillingProfileId.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ReservationTransactionsByBillingProfileId"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armconsumption.NewReservationTransactionsClient(cred, &options)
	pager := client.ListByBillingProfile("fcebaabc-fced-4284-a83d-79f83dee183c:45796ba8-988f-45ad-bea9-7b71fc6c7513_2018-09-30",
		"Z76D-SGAF-BG7-TGB",
		&armconsumption.ReservationTransactionsClientListByBillingProfileOptions{Filter: to.Ptr("properties/eventDate+ge+2020-05-20+AND+properties/eventDate+le+2020-05-30")})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/ReservationTransactionsListByBillingProfileId.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armconsumption.ModernReservationTransactionsListResult{
			Value: []*armconsumption.ModernReservationTransaction{
				{
					Name: to.Ptr("a838a8c3-a408-49e1-ac90-42cb95bff9b2"),
					Type: to.Ptr("Microsoft.Consumption/reservationTransactions"),
					ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/fcebaabc-fced-4284-a83d-79f83dee183c:45796ba8-988f-45ad-bea9-7b71fc6c7513_2018-09-30/billingProfiles/Z76D-SGAF-BG7-TGB/providers/Microsoft.Consumption/reservationTransactions"),
					Properties: &armconsumption.ModernReservationTransactionProperties{
						Description:                to.Ptr("Reserved VM Instance, Standard_B1ls, US East, 3 Years"),
						Amount:                     to.Ptr[float64](1.44),
						ArmSKUName:                 to.Ptr("Standard_B1ls"),
						BillingFrequency:           to.Ptr("Recurring"),
						BillingProfileID:           to.Ptr("/providers/Microsoft.Billing/billingAccounts/fcebaabc-fced-4284-a83d-79f83dee183c:45796ba8-988f-45ad-bea9-7b71fc6c7513_2018-09-30/billingProfiles/Z76D-SGAF-BG7-TGB"),
						BillingProfileName:         to.Ptr("IT Department*"),
						Currency:                   to.Ptr("USD"),
						EventDate:                  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-25T21:21:38Z"); return t }()),
						EventType:                  to.Ptr("Purchase"),
						Invoice:                    to.Ptr("T000456437"),
						InvoiceID:                  to.Ptr("/providers/Microsoft.Billing/billingAccounts/fcebaabc-fced-4284-a83d-79f83dee183c:45796ba8-988f-45ad-bea9-7b71fc6c7513_2018-09-30/billingProfiles/Z76D-SGAF-BG7-TGB/invoices/T000456437"),
						InvoiceSectionID:           to.Ptr("/providers/Microsoft.Billing/billingAccounts/fcebaabc-fced-4284-a83d-79f83dee183c:45796ba8-988f-45ad-bea9-7b71fc6c7513_2018-09-30/invoiceSections/QBTB-EYAK-PJA-TGB"),
						InvoiceSectionName:         to.Ptr("IT Department"),
						PurchasingSubscriptionGUID: to.Ptr("d924ad15-4a3d-4047-971d-c8b1b300a97b"),
						PurchasingSubscriptionName: to.Ptr("contoso"),
						Quantity:                   to.Ptr[float64](1),
						Region:                     to.Ptr("eastus"),
						ReservationOrderID:         to.Ptr("a838a8c3-a408-49e1-ac90-42cb95bff9b2"),
						ReservationOrderName:       to.Ptr("VM_RI_03-25-2020_14-18"),
						Term:                       to.Ptr("P3Y"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ModernReservationTransactionsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ModernReservationTransactionsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/ReservationTransactionsListByBillingProfileId.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPriceSheet_Get(t *testing.T) {
	// From example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/PriceSheet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PriceSheet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armconsumption.NewPriceSheetClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		&armconsumption.PriceSheetClientGetOptions{Expand: nil,
			Skiptoken: nil,
			Top:       nil,
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/PriceSheet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armconsumption.PriceSheetResult{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Consumption/pricesheets"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Billing/billingPeriods/201702/providers/Microsoft.Consumption/pricesheets/default"),
			Properties: &armconsumption.PriceSheetModel{
				Pricesheets: []*armconsumption.PriceSheetProperties{
					{
						BillingPeriodID:  to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Billing/billingPeriods/201702"),
						CurrencyCode:     to.Ptr("EUR"),
						IncludedQuantity: to.Ptr[float64](100),
						MeterID:          to.Ptr("00000000-0000-0000-0000-000000000000"),
						OfferID:          to.Ptr("OfferId 1"),
						PartNumber:       to.Ptr("XX-11110"),
						UnitOfMeasure:    to.Ptr("100 Hours"),
						UnitPrice:        to.Ptr[float64](0.00328),
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PriceSheetResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PriceSheetResult)
			t.Fatalf("Mock response is not equal to example response for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/PriceSheet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPriceSheet_GetByBillingPeriod(t *testing.T) {
	// From example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/PriceSheetExpand.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PriceSheetExpand"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armconsumption.NewPriceSheetClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.GetByBillingPeriod(ctx,
		"201801",
		&armconsumption.PriceSheetClientGetByBillingPeriodOptions{Expand: to.Ptr("meterDetails"),
			Skiptoken: nil,
			Top:       nil,
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/PriceSheetExpand.json: %v", err)
	}
	// Response check
	{
		exampleRes := armconsumption.PriceSheetResult{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Consumption/pricesheets"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Billing/billingPeriods/201702/providers/Microsoft.Consumption/pricesheets/default"),
			Properties: &armconsumption.PriceSheetModel{
				Pricesheets: []*armconsumption.PriceSheetProperties{
					{
						BillingPeriodID:  to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Billing/billingPeriods/201702"),
						CurrencyCode:     to.Ptr("EUR"),
						IncludedQuantity: to.Ptr[float64](100),
						MeterDetails: &armconsumption.MeterDetails{
							MeterCategory:         to.Ptr("Networking"),
							MeterLocation:         to.Ptr("Zone 2"),
							MeterName:             to.Ptr("Data Transfer Out (GB)"),
							PretaxStandardRate:    to.Ptr[float64](0.138),
							TotalIncludedQuantity: to.Ptr[float64](0),
							Unit:                  to.Ptr("GB"),
						},
						MeterID:       to.Ptr("00000000-0000-0000-0000-000000000000"),
						OfferID:       to.Ptr("OfferId 1"),
						PartNumber:    to.Ptr("XX-11110"),
						UnitOfMeasure: to.Ptr("100 Hours"),
						UnitPrice:     to.Ptr[float64](0.00328),
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PriceSheetResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PriceSheetResult)
			t.Fatalf("Mock response is not equal to example response for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/PriceSheetExpand.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/PriceSheetForBillingPeriod.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PriceSheetForBillingPeriod"},
	})
	client = armconsumption.NewPriceSheetClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err = client.GetByBillingPeriod(ctx,
		"201801",
		&armconsumption.PriceSheetClientGetByBillingPeriodOptions{Expand: nil,
			Skiptoken: nil,
			Top:       nil,
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/PriceSheetForBillingPeriod.json: %v", err)
	}
	// Response check
	{
		exampleRes := armconsumption.PriceSheetResult{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Consumption/pricesheets"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Billing/billingPeriods/201702/providers/Microsoft.Consumption/pricesheets/default"),
			Properties: &armconsumption.PriceSheetModel{
				Pricesheets: []*armconsumption.PriceSheetProperties{
					{
						BillingPeriodID:  to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Billing/billingPeriods/201702"),
						CurrencyCode:     to.Ptr("EUR"),
						IncludedQuantity: to.Ptr[float64](100),
						MeterID:          to.Ptr("00000000-0000-0000-0000-000000000000"),
						OfferID:          to.Ptr("OfferId 1"),
						PartNumber:       to.Ptr("XX-11110"),
						UnitOfMeasure:    to.Ptr("100 Hours"),
						UnitPrice:        to.Ptr[float64](0.00328),
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PriceSheetResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PriceSheetResult)
			t.Fatalf("Mock response is not equal to example response for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/PriceSheetForBillingPeriod.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOperations_List(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAggregatedCost_GetByManagementGroup(t *testing.T) {
	// From example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/AggregatedCostByManagementGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AggregatedCostByManagementGroup"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armconsumption.NewAggregatedCostClient(cred, &options)
	res, err := client.GetByManagementGroup(ctx,
		"managementGroupForTest",
		&armconsumption.AggregatedCostClientGetByManagementGroupOptions{Filter: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/AggregatedCostByManagementGroup.json: %v", err)
	}
	// Response check
	{
		exampleRes := armconsumption.ManagementGroupAggregatedCostResult{
			Name: to.Ptr("aggregatedcostId1"),
			Type: to.Ptr("Microsoft.Consumption/aggregatedcost"),
			ID:   to.Ptr("/providers/Microsoft.Management/managementGroups/managementGroupForTest/providers/Microsoft.Consumption/aggregatedcostId1"),
			Properties: &armconsumption.ManagementGroupAggregatedCostProperties{
				AzureCharges:            to.Ptr[float64](250.9876),
				ChargesBilledSeparately: to.Ptr[float64](120.345),
				Children: []*armconsumption.ManagementGroupAggregatedCostResult{
					{
						Name: to.Ptr("aggregatedcostId2"),
						Type: to.Ptr("Microsoft.Consumption/aggregatedcost"),
						ID:   to.Ptr("/providers/Microsoft.Management/managementGroups/managementGroupChildForTest/providers/Microsoft.Consumption/aggregatedcostId2"),
						Properties: &armconsumption.ManagementGroupAggregatedCostProperties{
							AzureCharges:            to.Ptr[float64](150),
							ChargesBilledSeparately: to.Ptr[float64](30.345),
							Children:                []*armconsumption.ManagementGroupAggregatedCostResult{},
							Currency:                to.Ptr("USD"),
							ExcludedSubscriptions:   []*string{},
							IncludedSubscriptions: []*string{
								to.Ptr("c349567d-c83a-48c9-ab0e-578c69dc97a4")},
							MarketplaceCharges: to.Ptr[float64](50.786),
							UsageEnd:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-10-31T00:00:00.0000000Z"); return t }()),
							UsageStart:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-10-01T00:00:00.0000000Z"); return t }()),
						},
					}},
				Currency:              to.Ptr("USD"),
				ExcludedSubscriptions: []*string{},
				IncludedSubscriptions: []*string{
					to.Ptr("1caaa5a3-2b66-438e-8ab4-bce37d518c5d")},
				MarketplaceCharges: to.Ptr[float64](150.786),
				UsageEnd:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-10-31T00:00:00.0000000Z"); return t }()),
				UsageStart:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-10-01T00:00:00.0000000Z"); return t }()),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ManagementGroupAggregatedCostResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ManagementGroupAggregatedCostResult)
			t.Fatalf("Mock response is not equal to example response for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/AggregatedCostByManagementGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/AggregatedCostByManagementGroupFilterByDate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AggregatedCostByManagementGroupFilterByDate"},
	})
	client = armconsumption.NewAggregatedCostClient(cred, &options)
	res, err = client.GetByManagementGroup(ctx,
		"managementGroupForTest",
		&armconsumption.AggregatedCostClientGetByManagementGroupOptions{Filter: to.Ptr("usageStart ge '2018-08-15' and properties/usageStart le '2018-08-31'")})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/AggregatedCostByManagementGroupFilterByDate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armconsumption.ManagementGroupAggregatedCostResult{
			Name: to.Ptr("aggregatedcostId1"),
			Type: to.Ptr("Microsoft.Consumption/aggregatedcost"),
			ID:   to.Ptr("/providers/Microsoft.Management/managementGroups/managementGroupForTest/providers/Microsoft.Consumption/aggregatedcostId1"),
			Properties: &armconsumption.ManagementGroupAggregatedCostProperties{
				AzureCharges:            to.Ptr[float64](150.9876),
				ChargesBilledSeparately: to.Ptr[float64](90.345),
				Children: []*armconsumption.ManagementGroupAggregatedCostResult{
					{
						Name: to.Ptr("aggregatedcostId2"),
						Type: to.Ptr("Microsoft.Consumption/aggregatedcost"),
						ID:   to.Ptr("/providers/Microsoft.Management/managementGroups/managementGroupChildForTest/providers/Microsoft.Consumption/aggregatedcostId2"),
						Properties: &armconsumption.ManagementGroupAggregatedCostProperties{
							AzureCharges:            to.Ptr[float64](50),
							ChargesBilledSeparately: to.Ptr[float64](30.345),
							Children:                []*armconsumption.ManagementGroupAggregatedCostResult{},
							Currency:                to.Ptr("USD"),
							ExcludedSubscriptions:   []*string{},
							IncludedSubscriptions: []*string{
								to.Ptr("c349567d-c83a-48c9-ab0e-578c69dc97a4")},
							MarketplaceCharges: to.Ptr[float64](10.786),
							UsageEnd:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-31T00:00:00.0000000Z"); return t }()),
							UsageStart:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-15T00:00:00.0000000Z"); return t }()),
						},
					}},
				Currency:              to.Ptr("USD"),
				ExcludedSubscriptions: []*string{},
				IncludedSubscriptions: []*string{
					to.Ptr("1caaa5a3-2b66-438e-8ab4-bce37d518c5d")},
				MarketplaceCharges: to.Ptr[float64](80.786),
				UsageEnd:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-31T00:00:00.0000000Z"); return t }()),
				UsageStart:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-15T00:00:00.0000000Z"); return t }()),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ManagementGroupAggregatedCostResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ManagementGroupAggregatedCostResult)
			t.Fatalf("Mock response is not equal to example response for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/AggregatedCostByManagementGroupFilterByDate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAggregatedCost_GetForBillingPeriodByManagementGroup(t *testing.T) {
	// From example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/AggregatedCostForBillingPeriodByManagementGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AggregatedCostListForBillingPeriodByManagementGroup"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armconsumption.NewAggregatedCostClient(cred, &options)
	res, err := client.GetForBillingPeriodByManagementGroup(ctx,
		"managementGroupForTest",
		"201807",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/AggregatedCostForBillingPeriodByManagementGroup.json: %v", err)
	}
	// Response check
	{
		exampleRes := armconsumption.ManagementGroupAggregatedCostResult{
			Name: to.Ptr("aggregatedcostId1"),
			Type: to.Ptr("Microsoft.Consumption/aggregatedcost"),
			ID:   to.Ptr("/providers/Microsoft.Management/managementGroups/managementGroupForTest/providers/Microsoft.Consumption/aggregatedcostId1"),
			Properties: &armconsumption.ManagementGroupAggregatedCostProperties{
				AzureCharges:            to.Ptr[float64](250.9876),
				ChargesBilledSeparately: to.Ptr[float64](120.345),
				Children: []*armconsumption.ManagementGroupAggregatedCostResult{
					{
						Name: to.Ptr("aggregatedcostId2"),
						Type: to.Ptr("Microsoft.Consumption/aggregatedcost"),
						ID:   to.Ptr("/providers/Microsoft.Management/managementGroups/managementGroupChildForTest/providers/Microsoft.Consumption/aggregatedcostId2"),
						Properties: &armconsumption.ManagementGroupAggregatedCostProperties{
							AzureCharges:            to.Ptr[float64](150),
							ChargesBilledSeparately: to.Ptr[float64](30.345),
							Children:                []*armconsumption.ManagementGroupAggregatedCostResult{},
							Currency:                to.Ptr("USD"),
							MarketplaceCharges:      to.Ptr[float64](50.786),
							UsageEnd:                to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-07-31T00:00:00.0000000Z"); return t }()),
							UsageStart:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-07-01T00:00:00.0000000Z"); return t }()),
						},
					}},
				Currency:           to.Ptr("USD"),
				MarketplaceCharges: to.Ptr[float64](150.786),
				UsageEnd:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-07-31T00:00:00.0000000Z"); return t }()),
				UsageStart:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-07-01T00:00:00.0000000Z"); return t }()),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ManagementGroupAggregatedCostResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ManagementGroupAggregatedCostResult)
			t.Fatalf("Mock response is not equal to example response for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/AggregatedCostForBillingPeriodByManagementGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestEvents_ListByBillingProfile(t *testing.T) {
	// From example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/EventsListByBillingProfile.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"EventsListByBillingProfile"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armconsumption.NewEventsClient(cred, &options)
	pager := client.ListByBillingProfile("1234:5678",
		"4268",
		"2019-09-01",
		"2019-10-31",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/EventsListByBillingProfile.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armconsumption.Events{
			Value: []*armconsumption.EventSummary{
				{
					Name: to.Ptr("event1"),
					Type: to.Ptr("Microsoft.Consumption/events"),
					ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/1234:5678/billingProfiles/4268/providers/Microsoft.Consumption/events/event1"),
					Properties: &armconsumption.EventProperties{
						Description: to.Ptr("Settled invoice #312033"),
						Adjustments: &armconsumption.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float64](0),
						},
						AdjustmentsInBillingCurrency: &armconsumption.AmountWithExchangeRate{
							ExchangeRate:      to.Ptr[float64](5000),
							ExchangeRateMonth: to.Ptr[int32](1),
						},
						BillingCurrency: to.Ptr("USD"),
						Charges: &armconsumption.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float64](500),
						},
						ChargesInBillingCurrency: &armconsumption.AmountWithExchangeRate{
							ExchangeRate:      to.Ptr[float64](5000),
							ExchangeRateMonth: to.Ptr[int32](1),
						},
						ClosedBalance: &armconsumption.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float64](500),
						},
						ClosedBalanceInBillingCurrency: &armconsumption.AmountWithExchangeRate{
							ExchangeRate:      to.Ptr[float64](5000),
							ExchangeRateMonth: to.Ptr[int32](1),
						},
						CreditCurrency: to.Ptr("USD"),
						CreditExpired: &armconsumption.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float64](0),
						},
						CreditExpiredInBillingCurrency: &armconsumption.AmountWithExchangeRate{
							ExchangeRate:      to.Ptr[float64](5000),
							ExchangeRateMonth: to.Ptr[int32](1),
						},
						EventType:     to.Ptr(armconsumption.EventTypeSettledCharges),
						InvoiceNumber: to.Ptr("3301"),
						NewCredit: &armconsumption.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float64](0),
						},
						NewCreditInBillingCurrency: &armconsumption.AmountWithExchangeRate{
							ExchangeRate:      to.Ptr[float64](5000),
							ExchangeRateMonth: to.Ptr[int32](1),
						},
						Reseller: &armconsumption.Reseller{
							ResellerDescription: to.Ptr("Reseller information"),
							ResellerID:          to.Ptr("/providers/Microsoft.Billing/billingAccounts/1234:5678/billingProfiles/2468/providers/Microsoft.Consumption/reseller/reseller1"),
						},
						TransactionDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-07-01T00:00:00Z"); return t }()),
					},
				},
				{
					Name: to.Ptr("event2"),
					Type: to.Ptr("Microsoft.Consumption/events"),
					ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/1234:5678/billingProfiles/4268/providers/Microsoft.Consumption/events/event2"),
					Properties: &armconsumption.EventProperties{
						Description: to.Ptr("New credits added"),
						Adjustments: &armconsumption.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float64](0),
						},
						AdjustmentsInBillingCurrency: &armconsumption.AmountWithExchangeRate{
							ExchangeRate:      to.Ptr[float64](5000),
							ExchangeRateMonth: to.Ptr[int32](1),
						},
						BillingCurrency: to.Ptr("USD"),
						CanceledCredit: &armconsumption.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float64](5000),
						},
						Charges: &armconsumption.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float64](0),
						},
						ChargesInBillingCurrency: &armconsumption.AmountWithExchangeRate{
							ExchangeRate:      to.Ptr[float64](5000),
							ExchangeRateMonth: to.Ptr[int32](1),
						},
						ClosedBalance: &armconsumption.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float64](900),
						},
						ClosedBalanceInBillingCurrency: &armconsumption.AmountWithExchangeRate{
							ExchangeRate:      to.Ptr[float64](5000),
							ExchangeRateMonth: to.Ptr[int32](1),
						},
						CreditCurrency: to.Ptr("USD"),
						CreditExpired: &armconsumption.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float64](0),
						},
						CreditExpiredInBillingCurrency: &armconsumption.AmountWithExchangeRate{
							ExchangeRate:      to.Ptr[float64](5000),
							ExchangeRateMonth: to.Ptr[int32](1),
						},
						EventType:     to.Ptr(armconsumption.EventTypeNewCredit),
						InvoiceNumber: to.Ptr("3302"),
						NewCredit: &armconsumption.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float64](400),
						},
						NewCreditInBillingCurrency: &armconsumption.AmountWithExchangeRate{
							ExchangeRate:      to.Ptr[float64](5000),
							ExchangeRateMonth: to.Ptr[int32](1),
						},
						Reseller: &armconsumption.Reseller{
							ResellerDescription: to.Ptr("Reseller information"),
							ResellerID:          to.Ptr("/providers/Microsoft.Billing/billingAccounts/1234:5678/billingProfiles/2468/providers/Microsoft.Consumption/reseller/reseller1"),
						},
						TransactionDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-08-01T00:00:00Z"); return t }()),
					},
				},
				{
					Name: to.Ptr("event3"),
					Type: to.Ptr("Microsoft.Consumption/events"),
					ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/1234:5678/billingProfiles/4268/providers/Microsoft.Consumption/events/event3"),
					Properties: &armconsumption.EventProperties{
						Description: to.Ptr("Credits Expired"),
						Adjustments: &armconsumption.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float64](0),
						},
						AdjustmentsInBillingCurrency: &armconsumption.AmountWithExchangeRate{
							ExchangeRate:      to.Ptr[float64](5000),
							ExchangeRateMonth: to.Ptr[int32](1),
						},
						BillingCurrency: to.Ptr("USD"),
						CanceledCredit: &armconsumption.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float64](5000),
						},
						Charges: &armconsumption.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float64](0),
						},
						ChargesInBillingCurrency: &armconsumption.AmountWithExchangeRate{
							ExchangeRate:      to.Ptr[float64](5000),
							ExchangeRateMonth: to.Ptr[int32](1),
						},
						ClosedBalance: &armconsumption.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float64](600),
						},
						ClosedBalanceInBillingCurrency: &armconsumption.AmountWithExchangeRate{
							ExchangeRate:      to.Ptr[float64](5000),
							ExchangeRateMonth: to.Ptr[int32](1),
						},
						CreditCurrency: to.Ptr("USD"),
						CreditExpired: &armconsumption.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float64](300),
						},
						CreditExpiredInBillingCurrency: &armconsumption.AmountWithExchangeRate{
							ExchangeRate:      to.Ptr[float64](5000),
							ExchangeRateMonth: to.Ptr[int32](1),
						},
						EventType:     to.Ptr(armconsumption.EventType("ExpiredCredit")),
						InvoiceNumber: to.Ptr(""),
						NewCredit: &armconsumption.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float64](0),
						},
						NewCreditInBillingCurrency: &armconsumption.AmountWithExchangeRate{
							ExchangeRate:      to.Ptr[float64](5000),
							ExchangeRateMonth: to.Ptr[int32](1),
						},
						Reseller: &armconsumption.Reseller{
							ResellerDescription: to.Ptr("Reseller information"),
							ResellerID:          to.Ptr("/providers/Microsoft.Billing/billingAccounts/1234:5678/billingProfiles/2468/providers/Microsoft.Consumption/reseller/reseller1"),
						},
						TransactionDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-09-01T00:00:00Z"); return t }()),
					},
				},
				{
					Name: to.Ptr("event4"),
					Type: to.Ptr("Microsoft.Consumption/events"),
					ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/1234:5678/billingProfiles/4268/providers/Microsoft.Consumption/events/event4"),
					Properties: &armconsumption.EventProperties{
						Description: to.Ptr("Settled invoice #212033"),
						Adjustments: &armconsumption.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float64](-200),
						},
						AdjustmentsInBillingCurrency: &armconsumption.AmountWithExchangeRate{
							ExchangeRate:      to.Ptr[float64](5000),
							ExchangeRateMonth: to.Ptr[int32](1),
						},
						BillingCurrency: to.Ptr("USD"),
						CanceledCredit: &armconsumption.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float64](5000),
						},
						Charges: &armconsumption.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float64](300),
						},
						ChargesInBillingCurrency: &armconsumption.AmountWithExchangeRate{
							ExchangeRate:      to.Ptr[float64](5000),
							ExchangeRateMonth: to.Ptr[int32](1),
						},
						ClosedBalance: &armconsumption.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float64](700),
						},
						ClosedBalanceInBillingCurrency: &armconsumption.AmountWithExchangeRate{
							ExchangeRate:      to.Ptr[float64](5000),
							ExchangeRateMonth: to.Ptr[int32](1),
						},
						CreditCurrency: to.Ptr("USD"),
						CreditExpired: &armconsumption.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float64](100),
						},
						CreditExpiredInBillingCurrency: &armconsumption.AmountWithExchangeRate{
							ExchangeRate:      to.Ptr[float64](5000),
							ExchangeRateMonth: to.Ptr[int32](1),
						},
						EventType:     to.Ptr(armconsumption.EventTypeSettledCharges),
						InvoiceNumber: to.Ptr("3303"),
						NewCredit: &armconsumption.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float64](300),
						},
						NewCreditInBillingCurrency: &armconsumption.AmountWithExchangeRate{
							ExchangeRate:      to.Ptr[float64](5000),
							ExchangeRateMonth: to.Ptr[int32](1),
						},
						Reseller: &armconsumption.Reseller{
							ResellerDescription: to.Ptr("Reseller information"),
							ResellerID:          to.Ptr("/providers/Microsoft.Billing/billingAccounts/1234:5678/billingProfiles/2468/providers/Microsoft.Consumption/reseller/reseller1"),
						},
						TransactionDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-10-01T00:00:00Z"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.Events) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.Events)
			t.Fatalf("Mock response is not equal to example response for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/EventsListByBillingProfile.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestEvents_ListByBillingAccount(t *testing.T) {
	// From example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/EventsGetByBillingAccount.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"EventsGetByBillingAccount"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armconsumption.NewEventsClient(cred, &options)
	pager := client.ListByBillingAccount("1234:5678",
		&armconsumption.EventsClientListByBillingAccountOptions{Filter: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/EventsGetByBillingAccount.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armconsumption.Events{
			Value: []*armconsumption.EventSummary{
				{
					Name: to.Ptr("eventId1"),
					Type: to.Ptr("Microsoft.Consumption/events"),
					ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/1234:56789/providers/Microsoft.Consumption/events/eventId1"),
					Properties: &armconsumption.EventProperties{
						Description:               to.Ptr("New MACC Added"),
						BillingProfileDisplayName: to.Ptr("Contoso Operations Billing"),
						BillingProfileID:          to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/X3TD-KVTT-BG7-TGB"),
						Charges: &armconsumption.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float64](500),
						},
						ClosedBalance: &armconsumption.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float64](500),
						},
						EventType:     to.Ptr(armconsumption.EventTypeNewCredit),
						InvoiceNumber: to.Ptr("3304"),
						LotID:         to.Ptr("/providers/Microsoft.Billing/billingAccounts/1234:5678/Microsoft.Consumption/lots/G202001083926600XXXXX"),
						LotSource:     to.Ptr("ConsumptionCommitment"),
						NewCredit: &armconsumption.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float64](500),
						},
						TransactionDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-07-01T00:00:00Z"); return t }()),
					},
				},
				{
					Name: to.Ptr("eventId2"),
					Type: to.Ptr("Microsoft.Consumption/events"),
					ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/1234:56789/providers/Microsoft.Consumption/events/eventId2"),
					Properties: &armconsumption.EventProperties{
						Description:               to.Ptr("Balance after invoice 3304"),
						BillingProfileDisplayName: to.Ptr("Contoso Operations Billing"),
						BillingProfileID:          to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/X3TD-KVTT-BG7-TGB"),
						Charges: &armconsumption.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float64](500),
						},
						ClosedBalance: &armconsumption.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float64](500),
						},
						EventType:       to.Ptr(armconsumption.EventTypeSettledCharges),
						InvoiceNumber:   to.Ptr("3304"),
						LotID:           to.Ptr("/providers/Microsoft.Billing/billingAccounts/1234:5678/Microsoft.Consumption/lots/7004bc39-974d-482e-8e45-caf91dba0870"),
						LotSource:       to.Ptr("AzurePrepayment"),
						TransactionDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-07-01T00:00:00Z"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.Events) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.Events)
			t.Fatalf("Mock response is not equal to example response for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/EventsGetByBillingAccount.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/EventsGetByBillingAccountWithFilters.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"EventsGetByBillingAccountWithFilters"},
	})
	client = armconsumption.NewEventsClient(cred, &options)
	pager = client.ListByBillingAccount("1234:5678",
		&armconsumption.EventsClientListByBillingAccountOptions{Filter: to.Ptr("lotid eq 'G202001083926600XXXXX' AND lotsource eq 'consumptioncommitment'")})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/EventsGetByBillingAccountWithFilters.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armconsumption.Events{
			Value: []*armconsumption.EventSummary{
				{
					Name: to.Ptr("eventId1"),
					Type: to.Ptr("Microsoft.Consumption/events"),
					ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/1234:56789/providers/Microsoft.Consumption/events/eventId1"),
					Properties: &armconsumption.EventProperties{
						Description:               to.Ptr("MACC Canceled"),
						BillingProfileDisplayName: to.Ptr("Contoso Operations Billing"),
						BillingProfileID:          to.Ptr("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/X3TD-KVTT-BG7-TGB"),
						CanceledCredit: &armconsumption.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float64](200),
						},
						ClosedBalance: &armconsumption.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float64](500),
						},
						EventType:       to.Ptr(armconsumption.EventType("CanceledCredit")),
						InvoiceNumber:   to.Ptr("3304"),
						LotID:           to.Ptr("/providers/Microsoft.Billing/billingAccounts/1234:5678/Microsoft.Consumption/lots/G202001083926600XXXXX"),
						LotSource:       to.Ptr("ConsumptionCommitment"),
						TransactionDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-07-01T00:00:00Z"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.Events) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.Events)
			t.Fatalf("Mock response is not equal to example response for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/EventsGetByBillingAccountWithFilters.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLots_ListByBillingProfile(t *testing.T) {
	// From example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/LotsListByBillingProfile.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"LotsListByBillingProfile"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armconsumption.NewLotsClient(cred, &options)
	pager := client.ListByBillingProfile("1234:5678",
		"2468",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/LotsListByBillingProfile.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armconsumption.Lots{
			Value: []*armconsumption.LotSummary{
				{
					Name: to.Ptr("lot1"),
					Type: to.Ptr("Microsoft.Consumption/lots"),
					ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/1234:5678/billingProfiles/2468/providers/Microsoft.Consumption/lots/lot1"),
					Properties: &armconsumption.LotProperties{
						BillingCurrency: to.Ptr("USD"),
						ClosedBalance: &armconsumption.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float64](60.9),
						},
						ClosedBalanceInBillingCurrency: &armconsumption.AmountWithExchangeRate{
							ExchangeRate:      to.Ptr[float64](5000),
							ExchangeRateMonth: to.Ptr[int32](1),
						},
						CreditCurrency: to.Ptr("USD"),
						ExpirationDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-10-01T00:00:00Z"); return t }()),
						OriginalAmount: &armconsumption.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float64](5000),
						},
						OriginalAmountInBillingCurrency: &armconsumption.AmountWithExchangeRate{
							ExchangeRate:      to.Ptr[float64](5000),
							ExchangeRateMonth: to.Ptr[int32](1),
						},
						PoNumber: to.Ptr("3524"),
						Reseller: &armconsumption.Reseller{
							ResellerDescription: to.Ptr("Reseller information."),
							ResellerID:          to.Ptr("/providers/Microsoft.Billing/billingAccounts/1234:5678/billingProfiles/2468/providers/Microsoft.Consumption/reseller/reseller1"),
						},
						Source:    to.Ptr(armconsumption.LotSourcePurchasedCredit),
						StartDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-10-01T00:00:00Z"); return t }()),
					},
				},
				{
					Name: to.Ptr("lot2"),
					Type: to.Ptr("Microsoft.Consumption/lots"),
					ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/1234:5678/billingProfiles/2468/providers/Microsoft.Consumption/lots/lot2"),
					Properties: &armconsumption.LotProperties{
						BillingCurrency: to.Ptr("USD"),
						ClosedBalance: &armconsumption.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float64](80.9),
						},
						ClosedBalanceInBillingCurrency: &armconsumption.AmountWithExchangeRate{
							ExchangeRate:      to.Ptr[float64](5000),
							ExchangeRateMonth: to.Ptr[int32](1),
						},
						CreditCurrency: to.Ptr("USD"),
						ExpirationDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-12-31T00:00:00Z"); return t }()),
						OriginalAmount: &armconsumption.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float64](6000),
						},
						OriginalAmountInBillingCurrency: &armconsumption.AmountWithExchangeRate{
							ExchangeRate:      to.Ptr[float64](5000),
							ExchangeRateMonth: to.Ptr[int32](1),
						},
						PoNumber: to.Ptr("31224"),
						Reseller: &armconsumption.Reseller{
							ResellerDescription: to.Ptr("Reseller information."),
							ResellerID:          to.Ptr("/providers/Microsoft.Billing/billingAccounts/1234:5678/billingProfiles/2468/providers/Microsoft.Consumption/reseller/reseller2"),
						},
						Source:    to.Ptr(armconsumption.LotSourcePurchasedCredit),
						StartDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-10-01T00:00:00Z"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.Lots) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.Lots)
			t.Fatalf("Mock response is not equal to example response for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/LotsListByBillingProfile.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLots_ListByBillingAccount(t *testing.T) {
	// From example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/LotsListByBillingAccount.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"LotsListByBillingAccount"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armconsumption.NewLotsClient(cred, &options)
	pager := client.ListByBillingAccount("1234:5678",
		&armconsumption.LotsClientListByBillingAccountOptions{Filter: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/LotsListByBillingAccount.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armconsumption.Lots{
			Value: []*armconsumption.LotSummary{
				{
					Name: to.Ptr("lot1"),
					Type: to.Ptr("Microsoft.Consumption/lots"),
					ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/1234:5678/billingProfiles/2468/providers/Microsoft.Consumption/lots/lot1"),
					Properties: &armconsumption.LotProperties{
						ClosedBalance: &armconsumption.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float64](60.9),
						},
						ExpirationDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-11-01T00:00:00Z"); return t }()),
						OriginalAmount: &armconsumption.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float64](5000),
						},
						PurchasedDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-09-01T00:00:00Z"); return t }()),
						Source:        to.Ptr(armconsumption.LotSourceConsumptionCommitment),
						StartDate:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-10-01T00:00:00Z"); return t }()),
						Status:        to.Ptr(armconsumption.StatusActive),
					},
				},
				{
					Name: to.Ptr("lot2"),
					Type: to.Ptr("Microsoft.Consumption/lots"),
					ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/1234:5678/billingProfiles/2468/providers/Microsoft.Consumption/lots/lot2"),
					Properties: &armconsumption.LotProperties{
						ClosedBalance: &armconsumption.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float64](80.9),
						},
						ExpirationDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-12-31T00:00:00Z"); return t }()),
						OriginalAmount: &armconsumption.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float64](6000),
						},
						PurchasedDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-09-01T00:00:00Z"); return t }()),
						Source:        to.Ptr(armconsumption.LotSourceConsumptionCommitment),
						StartDate:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-11-01T00:00:00Z"); return t }()),
						Status:        to.Ptr(armconsumption.StatusExpired),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.Lots) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.Lots)
			t.Fatalf("Mock response is not equal to example response for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/LotsListByBillingAccount.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/LotsListByBillingAccountWithFilters.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"LotsListByBillingAccountWithStatusFilter"},
	})
	client = armconsumption.NewLotsClient(cred, &options)
	pager = client.ListByBillingAccount("1234:5678",
		&armconsumption.LotsClientListByBillingAccountOptions{Filter: to.Ptr("status eq 'active' AND source eq 'consumptioncommitment'")})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/LotsListByBillingAccountWithFilters.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armconsumption.Lots{
			Value: []*armconsumption.LotSummary{
				{
					Name: to.Ptr("lot1"),
					Type: to.Ptr("Microsoft.Consumption/lots"),
					ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/1234:5678/billingProfiles/2468/providers/Microsoft.Consumption/lots/lot1"),
					Properties: &armconsumption.LotProperties{
						ClosedBalance: &armconsumption.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float64](60.9),
						},
						ExpirationDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-11-01T00:00:00Z"); return t }()),
						OriginalAmount: &armconsumption.Amount{
							Currency: to.Ptr("USD"),
							Value:    to.Ptr[float64](5000),
						},
						PurchasedDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-09-01T00:00:00Z"); return t }()),
						Source:        to.Ptr(armconsumption.LotSourceConsumptionCommitment),
						StartDate:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-10-01T00:00:00Z"); return t }()),
						Status:        to.Ptr(armconsumption.StatusActive),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.Lots) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.Lots)
			t.Fatalf("Mock response is not equal to example response for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/LotsListByBillingAccountWithFilters.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCredits_Get(t *testing.T) {
	// From example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/CreditSummaryByBillingProfile.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CreditSummaryByBillingProfile"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armconsumption.NewCreditsClient(cred, &options)
	res, err := client.Get(ctx,
		"1234:5678",
		"2468",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/CreditSummaryByBillingProfile.json: %v", err)
	}
	// Response check
	{
		exampleRes := armconsumption.CreditSummary{
			Name: to.Ptr("balanceSummary1"),
			Type: to.Ptr("Microsoft.Consumption/credits/balanceSummary"),
			ID:   to.Ptr("/providers/Microsoft.Billing/billingAccounts/1234:5678/billingProfiles/2468/providers/Microsoft.Consumption/credits/balanceSummary1"),
			Properties: &armconsumption.CreditSummaryProperties{
				BalanceSummary: &armconsumption.CreditBalanceSummary{
					CurrentBalance: &armconsumption.Amount{
						Currency: to.Ptr("USD"),
						Value:    to.Ptr[float64](100),
					},
					EstimatedBalance: &armconsumption.Amount{
						Currency: to.Ptr("USD"),
						Value:    to.Ptr[float64](600),
					},
				},
				BillingCurrency: to.Ptr("USD"),
				CreditCurrency:  to.Ptr("USD"),
				ExpiredCredit: &armconsumption.Amount{
					Currency: to.Ptr("USD"),
					Value:    to.Ptr[float64](0),
				},
				PendingCreditAdjustments: &armconsumption.Amount{
					Currency: to.Ptr("USD"),
					Value:    to.Ptr[float64](500),
				},
				PendingEligibleCharges: &armconsumption.Amount{
					Currency: to.Ptr("USD"),
					Value:    to.Ptr[float64](0),
				},
				Reseller: &armconsumption.Reseller{
					ResellerDescription: to.Ptr("Reseller information."),
					ResellerID:          to.Ptr("/providers/Microsoft.Billing/billingAccounts/1234:5678/billingProfiles/2468/providers/Microsoft.Consumption/reseller/reseller1"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.CreditSummary) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CreditSummary)
			t.Fatalf("Mock response is not equal to example response for example specification/consumption/resource-manager/Microsoft.Consumption/stable/2021-10-01/examples/CreditSummaryByBillingProfile.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
