//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armconsumption

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"golang.org/x/net/http2"
)

var (
	ctx            context.Context
	subscriptionId string
	cred           azcore.TokenCredential
	err            error
	con            *arm.Connection
	mockHost       string
)

func TestUsageDetails_List(t *testing.T) {
	// From example BillingAccountUsageDetailsList-Legacy
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewUsageDetailsClient(con)
	pager := client.List("providers/Microsoft.Billing/BillingAccounts/1234",
		&UsageDetailsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("UsageDetail.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("UsageDetail.ID should not be nil!")
			}
		}
	}

	// From example BillingAccountUsageDetailsList-Modern
	pager = client.List("providers/Microsoft.Billing/BillingAccounts/1234:56789",
		&UsageDetailsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("UsageDetail.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("UsageDetail.ID should not be nil!")
			}
		}
	}

	// From example BillingAccountUsageDetailsListForBillingPeriod-Legacy
	pager = client.List("providers/Microsoft.Billing/BillingAccounts/1234",
		&UsageDetailsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("UsageDetail.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("UsageDetail.ID should not be nil!")
			}
		}
	}

	// From example BillingProfileUsageDetailsList-Modern
	pager = client.List("providers/Microsoft.Billing/BillingAccounts/1234:56789/billingProfiles/2468",
		&UsageDetailsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("UsageDetail.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("UsageDetail.ID should not be nil!")
			}
		}
	}

	// From example CustomerUsageDetailsList-Modern
	pager = client.List("providers/Microsoft.Billing/BillingAccounts/1234:56789/customers/00000000-0000-0000-0000-000000000000",
		&UsageDetailsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("UsageDetail.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("UsageDetail.ID should not be nil!")
			}
		}
	}

	// From example DepartmentUsageDetailsList-Legacy
	pager = client.List("providers/Microsoft.Billing/Departments/1234",
		&UsageDetailsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("UsageDetail.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("UsageDetail.ID should not be nil!")
			}
		}
	}

	// From example DepartmentUsageDetailsListForBillingPeriod-Legacy
	pager = client.List("providers/Microsoft.Billing/Departments/1234",
		&UsageDetailsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("UsageDetail.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("UsageDetail.ID should not be nil!")
			}
		}
	}

	// From example EnrollmentAccountUsageDetailsList-Legacy
	pager = client.List("providers/Microsoft.Billing/EnrollmentAccounts/1234",
		&UsageDetailsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("UsageDetail.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("UsageDetail.ID should not be nil!")
			}
		}
	}

	// From example EnrollmentAccountUsageDetailsListForBillingPeriod-Legacy
	pager = client.List("providers/Microsoft.Billing/EnrollmentAccounts/1234",
		&UsageDetailsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("UsageDetail.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("UsageDetail.ID should not be nil!")
			}
		}
	}

	// From example InvoiceSectionUsageDetailsList-Modern
	pager = client.List("providers/Microsoft.Billing/BillingAccounts/1234:56789/invoiceSections/98765",
		&UsageDetailsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("UsageDetail.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("UsageDetail.ID should not be nil!")
			}
		}
	}

	// From example ManagementGroupUsageDetailsList-Legacy
	pager = client.List("subscriptions/00000000-0000-0000-0000-000000000000",
		&UsageDetailsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("UsageDetail.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("UsageDetail.ID should not be nil!")
			}
		}
	}

	// From example ManagementGroupUsageDetailsListForBillingPeriod-Legacy
	pager = client.List("subscriptions/00000000-0000-0000-0000-000000000000",
		&UsageDetailsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("UsageDetail.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("UsageDetail.ID should not be nil!")
			}
		}
	}

	// From example UsageDetailsExpand-Legacy
	pager = client.List("subscriptions/00000000-0000-0000-0000-000000000000",
		&UsageDetailsListOptions{Expand: to.StringPtr("meterDetails,additionalInfo"),
			Filter: to.StringPtr("tags eq 'dev:tools'"),
			Top:    to.Int32Ptr(1),
		})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("UsageDetail.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("UsageDetail.ID should not be nil!")
			}
		}
	}

	// From example UsageDetailsList-Legacy
	pager = client.List("subscriptions/00000000-0000-0000-0000-000000000000",
		&UsageDetailsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("UsageDetail.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("UsageDetail.ID should not be nil!")
			}
		}
	}

	// From example UsageDetailsListByMetricActualCost-Legacy
	pager = client.List("subscriptions/00000000-0000-0000-0000-000000000000",
		&UsageDetailsListOptions{Metric: MetrictypeActualCostMetricType.ToPtr()})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("UsageDetail.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("UsageDetail.ID should not be nil!")
			}
		}
	}

	// From example UsageDetailsListByMetricAmortizedCost-Legacy
	pager = client.List("subscriptions/00000000-0000-0000-0000-000000000000",
		&UsageDetailsListOptions{Metric: MetrictypeAmortizedCostMetricType.ToPtr()})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("UsageDetail.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("UsageDetail.ID should not be nil!")
			}
		}
	}

	// From example UsageDetailsListByMetricUsage-Legacy
	pager = client.List("subscriptions/00000000-0000-0000-0000-000000000000",
		&UsageDetailsListOptions{Metric: MetrictypeUsageMetricType.ToPtr()})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("UsageDetail.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("UsageDetail.ID should not be nil!")
			}
		}
	}

	// From example UsageDetailsListFilterByTag-Legacy
	pager = client.List("subscriptions/00000000-0000-0000-0000-000000000000",
		&UsageDetailsListOptions{Filter: to.StringPtr("tags eq 'dev:tools'")})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("UsageDetail.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("UsageDetail.ID should not be nil!")
			}
		}
	}

	// From example UsageDetailsListForBillingPeriod-Legacy
	pager = client.List("subscriptions/00000000-0000-0000-0000-000000000000",
		&UsageDetailsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("UsageDetail.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("UsageDetail.ID should not be nil!")
			}
		}
	}
}

func TestMarketplaces_List(t *testing.T) {
	// From example BillingAccountMarketplacesList
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewMarketplacesClient(con)
	pager := client.List("providers/Microsoft.Billing/billingAccounts/123456",
		&MarketplacesListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Marketplace.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Marketplace.ID should not be nil!")
			}
		}
	}

	// From example BillingAccountMarketplacesListForBillingPeriod
	pager = client.List("providers/Microsoft.Billing/billingAccounts/123456",
		&MarketplacesListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Marketplace.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Marketplace.ID should not be nil!")
			}
		}
	}

	// From example DepartmentMarketplacesList
	pager = client.List("providers/Microsoft.Billing/departments/123456",
		&MarketplacesListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Marketplace.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Marketplace.ID should not be nil!")
			}
		}
	}

	// From example DepartmentMarketplacesListForBillingPeriod
	pager = client.List("providers/Microsoft.Billing/departments/123456",
		&MarketplacesListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Marketplace.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Marketplace.ID should not be nil!")
			}
		}
	}

	// From example EnrollmentAccountMarketplacesList
	pager = client.List("providers/Microsoft.Billing/enrollmentAccounts/123456",
		&MarketplacesListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Marketplace.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Marketplace.ID should not be nil!")
			}
		}
	}

	// From example EnrollmentAccountMarketplacesListForBillingPeriod
	pager = client.List("providers/Microsoft.Billing/enrollmentAccounts/123456",
		&MarketplacesListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Marketplace.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Marketplace.ID should not be nil!")
			}
		}
	}

	// From example ManagementGroupMarketplacesList
	pager = client.List("subscriptions/00000000-0000-0000-0000-000000000000",
		&MarketplacesListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Marketplace.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Marketplace.ID should not be nil!")
			}
		}
	}

	// From example ManagementGroupMarketplacesListForBillingPeriod
	pager = client.List("subscriptions/00000000-0000-0000-0000-000000000000",
		&MarketplacesListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Marketplace.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Marketplace.ID should not be nil!")
			}
		}
	}

	// From example SubscriptionMarketplacesList
	pager = client.List("subscriptions/00000000-0000-0000-0000-000000000000",
		&MarketplacesListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Marketplace.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Marketplace.ID should not be nil!")
			}
		}
	}

	// From example SubscriptionMarketplacesListForBillingPeriod
	pager = client.List("subscriptions/00000000-0000-0000-0000-000000000000",
		&MarketplacesListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Marketplace.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Marketplace.ID should not be nil!")
			}
		}
	}
}

func TestBudgets_List(t *testing.T) {
	// From example BudgetsList
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewBudgetsClient(con)
	pager := client.List("subscriptions/00000000-0000-0000-0000-000000000000",
		&BudgetsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Budget.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Budget.ID should not be nil!")
			}
		}
	}
}

func TestBudgets_Get(t *testing.T) {
	// From example Budget
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewBudgetsClient(con)
	res, err := client.Get(ctx,
		"subscriptions/00000000-0000-0000-0000-000000000000",
		"TestBudget",
		&BudgetsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Budget.ID == nil {
		t.Fatal("Budget.ID should not be nil!")
	}
}

func TestBudgets_CreateOrUpdate(t *testing.T) {
	// From example CreateOrUpdateBudget
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewBudgetsClient(con)
	res, err := client.CreateOrUpdate(ctx,
		"subscriptions/00000000-0000-0000-0000-000000000000",
		"TestBudget",
		Budget{
			ProxyResource: ProxyResource{
				ETag: to.StringPtr("\"1d34d016a593709\""),
			},
			Properties: &BudgetProperties{
				Amount:   to.Float64Ptr(100.65),
				Category: CategoryTypeCost.ToPtr(),
				Filter: &BudgetFilter{
					And: []*BudgetFilterProperties{
						{
							Dimensions: &BudgetComparisonExpression{
								Name:     to.StringPtr("ResourceId"),
								Operator: BudgetOperatorTypeIn.ToPtr(),
								Values: []*string{
									to.StringPtr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MYDEVTESTRG/providers/Microsoft.Compute/virtualMachines/MSVM2"),
									to.StringPtr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MYDEVTESTRG/providers/Microsoft.Compute/virtualMachines/platformcloudplatformGeneric1")},
							},
						},
						{
							Tags: &BudgetComparisonExpression{
								Name:     to.StringPtr("category"),
								Operator: BudgetOperatorTypeIn.ToPtr(),
								Values: []*string{
									to.StringPtr("Dev"),
									to.StringPtr("Prod")},
							},
						},
						{
							Tags: &BudgetComparisonExpression{
								Name:     to.StringPtr("department"),
								Operator: BudgetOperatorTypeIn.ToPtr(),
								Values: []*string{
									to.StringPtr("engineering"),
									to.StringPtr("sales")},
							},
						}},
				},
				Notifications: map[string]*Notification{
					"Actual_GreaterThan_80_Percent": &Notification{
						ContactEmails: []*string{
							to.StringPtr("johndoe@contoso.com"),
							to.StringPtr("janesmith@contoso.com")},
						ContactGroups: []*string{
							to.StringPtr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MYDEVTESTRG/providers/microsoft.insights/actionGroups/SampleActionGroup")},
						ContactRoles: []*string{
							to.StringPtr("Contributor"),
							to.StringPtr("Reader")},
						Enabled:       to.BoolPtr(true),
						Operator:      OperatorTypeGreaterThan.ToPtr(),
						Threshold:     to.Float64Ptr(80),
						ThresholdType: ThresholdTypeActual.ToPtr(),
					},
				},
				TimeGrain: TimeGrainTypeMonthly.ToPtr(),
				TimePeriod: &BudgetTimePeriod{
					EndDate:   to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-10-31T00:00:00Z"); return t }()),
					StartDate: to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-10-01T00:00:00Z"); return t }()),
				},
			},
		},
		&BudgetsCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Budget.ID == nil {
		t.Fatal("Budget.ID should not be nil!")
	}
}

func TestBudgets_Delete(t *testing.T) {
	// From example DeleteBudget
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewBudgetsClient(con)
	_, err := client.Delete(ctx,
		"subscriptions/00000000-0000-0000-0000-000000000000",
		"TestBudget",
		&BudgetsDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestTags_Get(t *testing.T) {
	// From example Tags_Get
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewTagsClient(con)
	res, err := client.Get(ctx,
		"providers/Microsoft.CostManagement/billingAccounts/1234",
		&TagsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.TagsResult.ID == nil {
		t.Fatal("TagsResult.ID should not be nil!")
	}
}

func TestCharges_List(t *testing.T) {
	// From example ChangesForBillingPeriodByDepartment-Legacy
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewChargesClient(con)
	_, err := client.List(ctx,
		"providers/Microsoft.Billing/BillingAccounts/1234/departments/42425",
		&ChargesListOptions{})
	if err != nil {
		t.Fatal(err)
	}

	// From example ChangesForBillingPeriodByEnrollmentAccount-Legacy
	_, err = client.List(ctx,
		"providers/Microsoft.Billing/BillingAccounts/1234/enrollmentAccounts/42425",
		&ChargesListOptions{})
	if err != nil {
		t.Fatal(err)
	}

	// From example ChargesListByBillingAccount-Modern
	_, err = client.List(ctx,
		"providers/Microsoft.Billing/billingAccounts/1234:56789",
		&ChargesListOptions{StartDate: to.StringPtr("2019-09-01"),
			EndDate: to.StringPtr("2019-10-31"),
		})
	if err != nil {
		t.Fatal(err)
	}

	// From example ChargesListByBillingAccountGroupByBillingProfileId-Modern
	_, err = client.List(ctx,
		"providers/Microsoft.Billing/billingAccounts/1234:56789",
		&ChargesListOptions{StartDate: to.StringPtr("2019-09-01"),
			EndDate: to.StringPtr("2019-09-30"),
			Apply:   to.StringPtr("groupby((properties/billingProfileId))"),
		})
	if err != nil {
		t.Fatal(err)
	}

	// From example ChargesListByBillingAccountGroupByCustomerId-Modern
	_, err = client.List(ctx,
		"providers/Microsoft.Billing/billingAccounts/1234:56789",
		&ChargesListOptions{StartDate: to.StringPtr("2019-09-01"),
			EndDate: to.StringPtr("2019-09-30"),
			Apply:   to.StringPtr("groupby((properties/customerId))"),
		})
	if err != nil {
		t.Fatal(err)
	}

	// From example ChargesListByBillingAccountGroupByInvoiceSectionId-Modern
	_, err = client.List(ctx,
		"providers/Microsoft.Billing/billingAccounts/1234:56789/billingProfiles/42425",
		&ChargesListOptions{StartDate: to.StringPtr("2019-09-01"),
			EndDate: to.StringPtr("2019-09-30"),
			Apply:   to.StringPtr("groupby((properties/invoiceSectionId))"),
		})
	if err != nil {
		t.Fatal(err)
	}

	// From example ChargesListByBillingProfile-Modern
	_, err = client.List(ctx,
		"providers/Microsoft.Billing/BillingAccounts/1234:56789/billingProfiles/2460",
		&ChargesListOptions{})
	if err != nil {
		t.Fatal(err)
	}

	// From example ChargesListByBillingProfileGroupByInvoiceSectionId-Modern
	_, err = client.List(ctx,
		"providers/Microsoft.Billing/billingAccounts/1234:56789/billingProfiles/42425",
		&ChargesListOptions{StartDate: to.StringPtr("2019-09-01"),
			EndDate: to.StringPtr("2019-09-30"),
			Apply:   to.StringPtr("groupby((properties/invoiceSectionId))"),
		})
	if err != nil {
		t.Fatal(err)
	}

	// From example ChargesListByBillingProfileInvoiceSection-Modern
	_, err = client.List(ctx,
		"providers/Microsoft.Billing/billingAccounts/1234:56789/billingProfiles/42425/invoiceSections/67890",
		&ChargesListOptions{StartDate: to.StringPtr("2019-09-01"),
			EndDate: to.StringPtr("2019-10-31"),
		})
	if err != nil {
		t.Fatal(err)
	}

	// From example ChargesListByCustomer-Modern
	_, err = client.List(ctx,
		"providers/Microsoft.Billing/BillingAccounts/1234:56789/customers/67890",
		&ChargesListOptions{})
	if err != nil {
		t.Fatal(err)
	}

	// From example ChargesListByDepartment-Legacy
	_, err = client.List(ctx,
		"providers/Microsoft.Billing/BillingAccounts/1234/departments/42425",
		&ChargesListOptions{Filter: to.StringPtr("usageStart eq '2018-04-01' AND usageEnd eq '2018-05-30'")})
	if err != nil {
		t.Fatal(err)
	}

	// From example ChargesListByInvoiceSectionId-Modern
	_, err = client.List(ctx,
		"providers/Microsoft.Billing/BillingAccounts/1234:56789/invoiceSections/97531",
		&ChargesListOptions{})
	if err != nil {
		t.Fatal(err)
	}

	// From example ChargesListForEnrollmentAccount-Legacy
	_, err = client.List(ctx,
		"providers/Microsoft.Billing/BillingAccounts/1234/enrollmentAccounts/42425",
		&ChargesListOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestBalances_GetByBillingAccount(t *testing.T) {
	// From example Balances
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewBalancesClient(con)
	res, err := client.GetByBillingAccount(ctx,
		"123456",
		&BalancesGetByBillingAccountOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Balance.ID == nil {
		t.Fatal("Balance.ID should not be nil!")
	}
}

func TestBalances_GetForBillingPeriodByBillingAccount(t *testing.T) {
	// From example Balances
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewBalancesClient(con)
	res, err := client.GetForBillingPeriodByBillingAccount(ctx,
		"123456",
		"201702",
		&BalancesGetForBillingPeriodByBillingAccountOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Balance.ID == nil {
		t.Fatal("Balance.ID should not be nil!")
	}
}

func TestReservationsSummaries_ListByReservationOrder(t *testing.T) {
	// From example ReservationSummariesDaily
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewReservationsSummariesClient(con)
	pager := client.ListByReservationOrder("00000000-0000-0000-0000-000000000000",
		DatagrainDailyGrain,
		&ReservationsSummariesListByReservationOrderOptions{Filter: to.StringPtr("properties/usageDate ge 2017-10-01 AND properties/usageDate le 2017-11-20")})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ReservationSummary.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ReservationSummary.ID should not be nil!")
			}
		}
	}

	// From example ReservationSummariesMonthly
	pager = client.ListByReservationOrder("00000000-0000-0000-0000-000000000000",
		DatagrainMonthlyGrain,
		&ReservationsSummariesListByReservationOrderOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ReservationSummary.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ReservationSummary.ID should not be nil!")
			}
		}
	}
}

func TestReservationsSummaries_ListByReservationOrderAndReservation(t *testing.T) {
	// From example ReservationSummariesDailyWithReservationId
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewReservationsSummariesClient(con)
	pager := client.ListByReservationOrderAndReservation("00000000-0000-0000-0000-000000000000",
		"00000000-0000-0000-0000-000000000000",
		DatagrainDailyGrain,
		&ReservationsSummariesListByReservationOrderAndReservationOptions{Filter: to.StringPtr("properties/usageDate ge 2017-10-01 AND properties/usageDate le 2017-11-20")})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ReservationSummary.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ReservationSummary.ID should not be nil!")
			}
		}
	}

	// From example ReservationSummariesMonthlyWithReservationId
	pager = client.ListByReservationOrderAndReservation("00000000-0000-0000-0000-000000000000",
		"00000000-0000-0000-0000-000000000000",
		DatagrainMonthlyGrain,
		&ReservationsSummariesListByReservationOrderAndReservationOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ReservationSummary.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ReservationSummary.ID should not be nil!")
			}
		}
	}
}

func TestReservationsSummaries_List(t *testing.T) {
	// From example ReservationSummariesDailyWithBillingAccountId
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewReservationsSummariesClient(con)
	pager := client.List("providers/Microsoft.Billing/billingAccounts/12345",
		DatagrainDailyGrain,
		&ReservationsSummariesListOptions{Filter: to.StringPtr("properties/usageDate ge 2017-10-01 AND properties/usageDate le 2017-11-20")})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ReservationSummary.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ReservationSummary.ID should not be nil!")
			}
		}
	}

	// From example ReservationSummariesDailyWithBillingProfileId
	pager = client.List("providers/Microsoft.Billing/billingAccounts/12345:2468/billingProfiles/13579",
		DatagrainDailyGrain,
		&ReservationsSummariesListOptions{StartDate: to.StringPtr("2017-10-01"),
			EndDate: to.StringPtr("2017-11-20"),
		})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ReservationSummary.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ReservationSummary.ID should not be nil!")
			}
		}
	}

	// From example ReservationSummariesMonthlyWithBillingAccountId
	pager = client.List("providers/Microsoft.Billing/billingAccounts/12345",
		DatagrainMonthlyGrain,
		&ReservationsSummariesListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ReservationSummary.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ReservationSummary.ID should not be nil!")
			}
		}
	}

	// From example ReservationSummariesMonthlyWithBillingProfileId
	pager = client.List("providers/Microsoft.Billing/billingAccounts/12345:2468/billingProfiles/13579",
		DatagrainMonthlyGrain,
		&ReservationsSummariesListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ReservationSummary.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ReservationSummary.ID should not be nil!")
			}
		}
	}

	// From example ReservationSummariesMonthlyWithBillingProfileIdReservationId
	pager = client.List("providers/Microsoft.Billing/billingAccounts/12345:2468/billingProfiles/13579",
		DatagrainMonthlyGrain,
		&ReservationsSummariesListOptions{ReservationID: to.StringPtr("1c6b6358-709f-484c-85f1-72e862a0cf3b"),
			ReservationOrderID: to.StringPtr("9f39ba10-794f-4dcb-8f4b-8d0cb47c27dc"),
		})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ReservationSummary.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ReservationSummary.ID should not be nil!")
			}
		}
	}
}

func TestReservationsDetails_ListByReservationOrder(t *testing.T) {
	// From example ReservationDetails
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewReservationsDetailsClient(con)
	pager := client.ListByReservationOrder("00000000-0000-0000-0000-000000000000",
		"properties/usageDate ge 2017-10-01 AND properties/usageDate le 2017-12-05",
		&ReservationsDetailsListByReservationOrderOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ReservationDetail.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ReservationDetail.ID should not be nil!")
			}
		}
	}
}

func TestReservationsDetails_ListByReservationOrderAndReservation(t *testing.T) {
	// From example ReservationDetailsWithReservationId
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewReservationsDetailsClient(con)
	pager := client.ListByReservationOrderAndReservation("00000000-0000-0000-0000-000000000000",
		"00000000-0000-0000-0000-000000000000",
		"properties/usageDate ge 2017-10-01 AND properties/usageDate le 2017-12-05",
		&ReservationsDetailsListByReservationOrderAndReservationOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ReservationDetail.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ReservationDetail.ID should not be nil!")
			}
		}
	}
}

func TestReservationsDetails_List(t *testing.T) {
	// From example ReservationDetailsByBillingAccountId
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewReservationsDetailsClient(con)
	pager := client.List("providers/Microsoft.Billing/billingAccounts/12345",
		&ReservationsDetailsListOptions{Filter: to.StringPtr("properties/usageDate ge 2017-10-01 AND properties/usageDate le 2017-12-05")})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ReservationDetail.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ReservationDetail.ID should not be nil!")
			}
		}
	}

	// From example ReservationDetailsByBillingProfileId
	pager = client.List("providers/Microsoft.Billing/billingAccounts/12345:2468/billingProfiles/13579",
		&ReservationsDetailsListOptions{StartDate: to.StringPtr("2019-09-01"),
			EndDate: to.StringPtr("2019-10-31"),
		})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ReservationDetail.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ReservationDetail.ID should not be nil!")
			}
		}
	}

	// From example ReservationDetailsByBillingProfileIdReservationId
	pager = client.List("providers/Microsoft.Billing/billingAccounts/12345:2468/billingProfiles/13579",
		&ReservationsDetailsListOptions{StartDate: to.StringPtr("2019-09-01"),
			EndDate:            to.StringPtr("2019-10-31"),
			ReservationID:      to.StringPtr("1c6b6358-709f-484c-85f1-72e862a0cf3b"),
			ReservationOrderID: to.StringPtr("9f39ba10-794f-4dcb-8f4b-8d0cb47c27dc"),
		})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ReservationDetail.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ReservationDetail.ID should not be nil!")
			}
		}
	}
}

func TestReservationRecommendations_List(t *testing.T) {
	// From example ReservationRecommendationsByBillingAccount-Legacy
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewReservationRecommendationsClient(con)
	pager := client.List("providers/Microsoft.Billing/billingAccounts/123456",
		&ReservationRecommendationsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ReservationRecommendation.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ReservationRecommendation.ID should not be nil!")
			}
		}
	}

	// From example ReservationRecommendationsByBillingProfile-Modern
	pager = client.List("providers/Microsoft.Billing/billingAccounts/123456/billingProfiles/6420",
		&ReservationRecommendationsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ReservationRecommendation.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ReservationRecommendation.ID should not be nil!")
			}
		}
	}

	// From example ReservationRecommendationsByResourceGroup-Legacy
	pager = client.List("subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/testGroup",
		&ReservationRecommendationsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ReservationRecommendation.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ReservationRecommendation.ID should not be nil!")
			}
		}
	}

	// From example ReservationRecommendationsBySubscription-Legacy
	pager = client.List("subscriptions/00000000-0000-0000-0000-000000000000",
		&ReservationRecommendationsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ReservationRecommendation.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ReservationRecommendation.ID should not be nil!")
			}
		}
	}

	// From example ReservationRecommendationsFilterBySubscriptionForScopeLookBackPeriod-Legacy
	pager = client.List("subscriptions/00000000-0000-0000-0000-000000000000",
		&ReservationRecommendationsListOptions{Filter: to.StringPtr("properties/scope eq 'Single' AND properties/lookBackPeriod eq 'Last7Days'")})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ReservationRecommendation.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ReservationRecommendation.ID should not be nil!")
			}
		}
	}
}

func TestReservationRecommendationDetails_Get(t *testing.T) {
	// From example ReservationRecommendationsByBillingAccount-Legacy
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewReservationRecommendationDetailsClient(con)
	res, err := client.Get(ctx,
		"Shared",
		ScopeShared,
		"eastus",
		TermP1Y,
		LookBackPeriodLast60Days,
		"Standard_DS14_v2",
		&ReservationRecommendationDetailsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ReservationRecommendationDetailsModel.ID == nil {
		t.Fatal("ReservationRecommendationDetailsModel.ID should not be nil!")
	}

	// From example ReservationRecommendationsByBillingProfile-Modern
	res, err = client.Get(ctx,
		"Shared",
		ScopeShared,
		"australiaeast",
		TermP1Y,
		LookBackPeriodLast07Days,
		"Standard_B2s",
		&ReservationRecommendationDetailsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ReservationRecommendationDetailsModel.ID == nil {
		t.Fatal("ReservationRecommendationDetailsModel.ID should not be nil!")
	}

	// From example ReservationRecommendationsByResourceGroup-Legacy
	res, err = client.Get(ctx,
		"Single",
		ScopeSingle,
		"westus",
		TermP3Y,
		LookBackPeriodLast30Days,
		"Standard_DS13_v2",
		&ReservationRecommendationDetailsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ReservationRecommendationDetailsModel.ID == nil {
		t.Fatal("ReservationRecommendationDetailsModel.ID should not be nil!")
	}

	// From example ReservationRecommendationsBySubscription-Legacy
	res, err = client.Get(ctx,
		"Single",
		ScopeSingle,
		"westus",
		TermP3Y,
		LookBackPeriodLast30Days,
		"Standard_DS13_v2",
		&ReservationRecommendationDetailsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ReservationRecommendationDetailsModel.ID == nil {
		t.Fatal("ReservationRecommendationDetailsModel.ID should not be nil!")
	}
}

func TestReservationTransactions_List(t *testing.T) {
	// From example ReservationTransactionsByEnrollmentNumber
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewReservationTransactionsClient(con)
	pager := client.List("123456",
		&ReservationTransactionsListOptions{Filter: to.StringPtr("properties/eventDate+ge+2020-05-20+AND+properties/eventDate+le+2020-05-30")})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ReservationTransaction.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ReservationTransaction.ID should not be nil!")
			}
		}
	}
}

func TestReservationTransactions_ListByBillingProfile(t *testing.T) {
	// From example ReservationTransactionsByBillingProfileId
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewReservationTransactionsClient(con)
	pager := client.ListByBillingProfile("fcebaabc-fced-4284-a83d-79f83dee183c:45796ba8-988f-45ad-bea9-7b71fc6c7513_2018-09-30",
		"Z76D-SGAF-BG7-TGB",
		&ReservationTransactionsListByBillingProfileOptions{Filter: to.StringPtr("properties/eventDate+ge+2020-05-20+AND+properties/eventDate+le+2020-05-30")})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ModernReservationTransaction.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ModernReservationTransaction.ID should not be nil!")
			}
		}
	}
}

func TestPriceSheet_Get(t *testing.T) {
	// From example PriceSheet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPriceSheetClient(con,
		"00000000-0000-0000-0000-000000000000")
	res, err := client.Get(ctx,
		&PriceSheetGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.PriceSheetResult.ID == nil {
		t.Fatal("PriceSheetResult.ID should not be nil!")
	}
}

func TestPriceSheet_GetByBillingPeriod(t *testing.T) {
	// From example PriceSheetExpand
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPriceSheetClient(con,
		"00000000-0000-0000-0000-000000000000")
	res, err := client.GetByBillingPeriod(ctx,
		"201801",
		&PriceSheetGetByBillingPeriodOptions{Expand: to.StringPtr("meterDetails")})
	if err != nil {
		t.Fatal(err)
	}
	if res.PriceSheetResult.ID == nil {
		t.Fatal("PriceSheetResult.ID should not be nil!")
	}

	// From example PriceSheetForBillingPeriod
	res, err = client.GetByBillingPeriod(ctx,
		"201801",
		&PriceSheetGetByBillingPeriodOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.PriceSheetResult.ID == nil {
		t.Fatal("PriceSheetResult.ID should not be nil!")
	}
}

func TestForecasts_List(t *testing.T) {
	// From example ForecastsList
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewForecastsClient(con,
		"00000000-0000-0000-0000-000000000000")
	_, err := client.List(ctx,
		&ForecastsListOptions{})
	if err != nil {
		t.Fatal(err)
	}

	// From example ForecastsListFilterByDates
	_, err = client.List(ctx,
		&ForecastsListOptions{Filter: to.StringPtr("properties/usagedate ge '2018-04-01' AND properties/usagedate le '2018-04-02'")})
	if err != nil {
		t.Fatal(err)
	}

	// From example ForecastsListFilterByGrain
	_, err = client.List(ctx,
		&ForecastsListOptions{Filter: to.StringPtr("properties/Grain eq 'Monthly'")})
	if err != nil {
		t.Fatal(err)
	}
}

func TestOperations_List(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAggregatedCost_GetByManagementGroup(t *testing.T) {
	// From example AggregatedCostByManagementGroup
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAggregatedCostClient(con)
	res, err := client.GetByManagementGroup(ctx,
		"managementGroupForTest",
		&AggregatedCostGetByManagementGroupOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ManagementGroupAggregatedCostResult.ID == nil {
		t.Fatal("ManagementGroupAggregatedCostResult.ID should not be nil!")
	}

	// From example AggregatedCostByManagementGroupFilterByDate
	res, err = client.GetByManagementGroup(ctx,
		"managementGroupForTest",
		&AggregatedCostGetByManagementGroupOptions{Filter: to.StringPtr("usageStart ge '2018-08-15' and properties/usageStart le '2018-08-31'")})
	if err != nil {
		t.Fatal(err)
	}
	if res.ManagementGroupAggregatedCostResult.ID == nil {
		t.Fatal("ManagementGroupAggregatedCostResult.ID should not be nil!")
	}
}

func TestAggregatedCost_GetForBillingPeriodByManagementGroup(t *testing.T) {
	// From example AggregatedCostListForBillingPeriodByManagementGroup
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAggregatedCostClient(con)
	res, err := client.GetForBillingPeriodByManagementGroup(ctx,
		"managementGroupForTest",
		"201807",
		&AggregatedCostGetForBillingPeriodByManagementGroupOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ManagementGroupAggregatedCostResult.ID == nil {
		t.Fatal("ManagementGroupAggregatedCostResult.ID should not be nil!")
	}
}

func TestEvents_ListByBillingProfile(t *testing.T) {
	// From example EventsListByBillingProfile
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewEventsClient(con)
	pager := client.ListByBillingProfile("1234:5678",
		"4268",
		"2019-09-01",
		"2019-10-31",
		&EventsListByBillingProfileOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("EventSummary.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("EventSummary.ID should not be nil!")
			}
		}
	}
}

func TestEvents_ListByBillingAccount(t *testing.T) {
	// From example EventsGetByBillingAccount
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewEventsClient(con)
	pager := client.ListByBillingAccount("1234:5678",
		&EventsListByBillingAccountOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("EventSummary.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("EventSummary.ID should not be nil!")
			}
		}
	}

	// From example EventsGetByBillingAccountWithFilters
	pager = client.ListByBillingAccount("1234:5678",
		&EventsListByBillingAccountOptions{Filter: to.StringPtr("lotid eq 'G202001083926600XXXXX' AND lotsource eq 'consumptioncommitment'")})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("EventSummary.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("EventSummary.ID should not be nil!")
			}
		}
	}
}

func TestLots_ListByBillingProfile(t *testing.T) {
	// From example LotsListByBillingProfile
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLotsClient(con)
	pager := client.ListByBillingProfile("1234:5678",
		"2468",
		&LotsListByBillingProfileOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("LotSummary.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("LotSummary.ID should not be nil!")
			}
		}
	}
}

func TestLots_ListByBillingAccount(t *testing.T) {
	// From example LotsListByBillingAccount
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLotsClient(con)
	pager := client.ListByBillingAccount("1234:5678",
		&LotsListByBillingAccountOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("LotSummary.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("LotSummary.ID should not be nil!")
			}
		}
	}

	// From example LotsListByBillingAccountWithStatusFilter
	pager = client.ListByBillingAccount("1234:5678",
		&LotsListByBillingAccountOptions{Filter: to.StringPtr("status eq 'active' AND source eq 'consumptioncommitment'")})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("LotSummary.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("LotSummary.ID should not be nil!")
			}
		}
	}
}

func TestCredits_Get(t *testing.T) {
	// From example CreditSummaryByBillingProfile
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewCreditsClient(con)
	res, err := client.Get(ctx,
		"1234:5678",
		"2468",
		&CreditsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.CreditSummary.ID == nil {
		t.Fatal("CreditSummary.ID should not be nil!")
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	subscriptionId = getEnv("SUBSCRIPTION_ID", "00000000-0000-0000-0000-000000000000")
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}
	cred, err = azidentity.NewEnvironmentCredential(&azidentity.EnvironmentCredentialOptions{AuthorityHost: mockHost, HTTPClient: client})
	if err != nil {
		panic(err)
	}

	con = arm.NewConnection(mockHost, cred, &arm.ConnectionOptions{
		Logging: policy.LogOptions{
			IncludeBody: true,
		},
		HTTPClient: client,
	})
}

func tearDown() {

}
