//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armsynapse

const (
	module  = "armsynapse"
	version = "v0.1.0"
)

type AzureADOnlyAuthenticationName string

const (
	AzureADOnlyAuthenticationNameDefault AzureADOnlyAuthenticationName = "default"
)

// PossibleAzureADOnlyAuthenticationNameValues returns the possible values for the AzureADOnlyAuthenticationName const type.
func PossibleAzureADOnlyAuthenticationNameValues() []AzureADOnlyAuthenticationName {
	return []AzureADOnlyAuthenticationName{
		AzureADOnlyAuthenticationNameDefault,
	}
}

// ToPtr returns a *AzureADOnlyAuthenticationName pointing to the current value.
func (c AzureADOnlyAuthenticationName) ToPtr() *AzureADOnlyAuthenticationName {
	return &c
}

type BlobAuditingPolicyName string

const (
	BlobAuditingPolicyNameDefault BlobAuditingPolicyName = "default"
)

// PossibleBlobAuditingPolicyNameValues returns the possible values for the BlobAuditingPolicyName const type.
func PossibleBlobAuditingPolicyNameValues() []BlobAuditingPolicyName {
	return []BlobAuditingPolicyName{
		BlobAuditingPolicyNameDefault,
	}
}

// ToPtr returns a *BlobAuditingPolicyName pointing to the current value.
func (c BlobAuditingPolicyName) ToPtr() *BlobAuditingPolicyName {
	return &c
}

// BlobAuditingPolicyState - Specifies the state of the policy. If state is Enabled, storageEndpoint or isAzureMonitorTargetEnabled are required.
type BlobAuditingPolicyState string

const (
	BlobAuditingPolicyStateEnabled  BlobAuditingPolicyState = "Enabled"
	BlobAuditingPolicyStateDisabled BlobAuditingPolicyState = "Disabled"
)

// PossibleBlobAuditingPolicyStateValues returns the possible values for the BlobAuditingPolicyState const type.
func PossibleBlobAuditingPolicyStateValues() []BlobAuditingPolicyState {
	return []BlobAuditingPolicyState{
		BlobAuditingPolicyStateEnabled,
		BlobAuditingPolicyStateDisabled,
	}
}

// ToPtr returns a *BlobAuditingPolicyState pointing to the current value.
func (c BlobAuditingPolicyState) ToPtr() *BlobAuditingPolicyState {
	return &c
}

// ColumnDataType - The column data type.
type ColumnDataType string

const (
	ColumnDataTypeBigint           ColumnDataType = "bigint"
	ColumnDataTypeBinary           ColumnDataType = "binary"
	ColumnDataTypeBit              ColumnDataType = "bit"
	ColumnDataTypeChar             ColumnDataType = "char"
	ColumnDataTypeDate             ColumnDataType = "date"
	ColumnDataTypeDatetime         ColumnDataType = "datetime"
	ColumnDataTypeDatetime2        ColumnDataType = "datetime2"
	ColumnDataTypeDatetimeoffset   ColumnDataType = "datetimeoffset"
	ColumnDataTypeDecimal          ColumnDataType = "decimal"
	ColumnDataTypeFloat            ColumnDataType = "float"
	ColumnDataTypeGeography        ColumnDataType = "geography"
	ColumnDataTypeGeometry         ColumnDataType = "geometry"
	ColumnDataTypeHierarchyid      ColumnDataType = "hierarchyid"
	ColumnDataTypeImage            ColumnDataType = "image"
	ColumnDataTypeInt              ColumnDataType = "int"
	ColumnDataTypeMoney            ColumnDataType = "money"
	ColumnDataTypeNchar            ColumnDataType = "nchar"
	ColumnDataTypeNtext            ColumnDataType = "ntext"
	ColumnDataTypeNumeric          ColumnDataType = "numeric"
	ColumnDataTypeNvarchar         ColumnDataType = "nvarchar"
	ColumnDataTypeReal             ColumnDataType = "real"
	ColumnDataTypeSQLVariant       ColumnDataType = "sql_variant"
	ColumnDataTypeSmalldatetime    ColumnDataType = "smalldatetime"
	ColumnDataTypeSmallint         ColumnDataType = "smallint"
	ColumnDataTypeSmallmoney       ColumnDataType = "smallmoney"
	ColumnDataTypeSysname          ColumnDataType = "sysname"
	ColumnDataTypeText             ColumnDataType = "text"
	ColumnDataTypeTime             ColumnDataType = "time"
	ColumnDataTypeTimestamp        ColumnDataType = "timestamp"
	ColumnDataTypeTinyint          ColumnDataType = "tinyint"
	ColumnDataTypeUniqueidentifier ColumnDataType = "uniqueidentifier"
	ColumnDataTypeVarbinary        ColumnDataType = "varbinary"
	ColumnDataTypeVarchar          ColumnDataType = "varchar"
	ColumnDataTypeXML              ColumnDataType = "xml"
)

// PossibleColumnDataTypeValues returns the possible values for the ColumnDataType const type.
func PossibleColumnDataTypeValues() []ColumnDataType {
	return []ColumnDataType{
		ColumnDataTypeBigint,
		ColumnDataTypeBinary,
		ColumnDataTypeBit,
		ColumnDataTypeChar,
		ColumnDataTypeDate,
		ColumnDataTypeDatetime,
		ColumnDataTypeDatetime2,
		ColumnDataTypeDatetimeoffset,
		ColumnDataTypeDecimal,
		ColumnDataTypeFloat,
		ColumnDataTypeGeography,
		ColumnDataTypeGeometry,
		ColumnDataTypeHierarchyid,
		ColumnDataTypeImage,
		ColumnDataTypeInt,
		ColumnDataTypeMoney,
		ColumnDataTypeNchar,
		ColumnDataTypeNtext,
		ColumnDataTypeNumeric,
		ColumnDataTypeNvarchar,
		ColumnDataTypeReal,
		ColumnDataTypeSQLVariant,
		ColumnDataTypeSmalldatetime,
		ColumnDataTypeSmallint,
		ColumnDataTypeSmallmoney,
		ColumnDataTypeSysname,
		ColumnDataTypeText,
		ColumnDataTypeTime,
		ColumnDataTypeTimestamp,
		ColumnDataTypeTinyint,
		ColumnDataTypeUniqueidentifier,
		ColumnDataTypeVarbinary,
		ColumnDataTypeVarchar,
		ColumnDataTypeXML,
	}
}

// ToPtr returns a *ColumnDataType pointing to the current value.
func (c ColumnDataType) ToPtr() *ColumnDataType {
	return &c
}

// ConfigurationType - The type of the spark config properties file.
type ConfigurationType string

const (
	ConfigurationTypeArtifact ConfigurationType = "Artifact"
	ConfigurationTypeFile     ConfigurationType = "File"
)

// PossibleConfigurationTypeValues returns the possible values for the ConfigurationType const type.
func PossibleConfigurationTypeValues() []ConfigurationType {
	return []ConfigurationType{
		ConfigurationTypeArtifact,
		ConfigurationTypeFile,
	}
}

// ToPtr returns a *ConfigurationType pointing to the current value.
func (c ConfigurationType) ToPtr() *ConfigurationType {
	return &c
}

type ConnectionPolicyName string

const (
	ConnectionPolicyNameDefault ConnectionPolicyName = "default"
)

// PossibleConnectionPolicyNameValues returns the possible values for the ConnectionPolicyName const type.
func PossibleConnectionPolicyNameValues() []ConnectionPolicyName {
	return []ConnectionPolicyName{
		ConnectionPolicyNameDefault,
	}
}

// ToPtr returns a *ConnectionPolicyName pointing to the current value.
func (c ConnectionPolicyName) ToPtr() *ConnectionPolicyName {
	return &c
}

// DataFlowComputeType - Compute type of the cluster which will execute data flow job.
type DataFlowComputeType string

const (
	DataFlowComputeTypeComputeOptimized DataFlowComputeType = "ComputeOptimized"
	DataFlowComputeTypeGeneral          DataFlowComputeType = "General"
	DataFlowComputeTypeMemoryOptimized  DataFlowComputeType = "MemoryOptimized"
)

// PossibleDataFlowComputeTypeValues returns the possible values for the DataFlowComputeType const type.
func PossibleDataFlowComputeTypeValues() []DataFlowComputeType {
	return []DataFlowComputeType{
		DataFlowComputeTypeComputeOptimized,
		DataFlowComputeTypeGeneral,
		DataFlowComputeTypeMemoryOptimized,
	}
}

// ToPtr returns a *DataFlowComputeType pointing to the current value.
func (c DataFlowComputeType) ToPtr() *DataFlowComputeType {
	return &c
}

// DataMaskingFunction - The masking function that is used for the data masking rule.
type DataMaskingFunction string

const (
	DataMaskingFunctionDefault DataMaskingFunction = "Default"
	DataMaskingFunctionCCN     DataMaskingFunction = "CCN"
	DataMaskingFunctionEmail   DataMaskingFunction = "Email"
	DataMaskingFunctionNumber  DataMaskingFunction = "Number"
	DataMaskingFunctionSSN     DataMaskingFunction = "SSN"
	DataMaskingFunctionText    DataMaskingFunction = "Text"
)

// PossibleDataMaskingFunctionValues returns the possible values for the DataMaskingFunction const type.
func PossibleDataMaskingFunctionValues() []DataMaskingFunction {
	return []DataMaskingFunction{
		DataMaskingFunctionDefault,
		DataMaskingFunctionCCN,
		DataMaskingFunctionEmail,
		DataMaskingFunctionNumber,
		DataMaskingFunctionSSN,
		DataMaskingFunctionText,
	}
}

// ToPtr returns a *DataMaskingFunction pointing to the current value.
func (c DataMaskingFunction) ToPtr() *DataMaskingFunction {
	return &c
}

// DataMaskingRuleState - The rule state. Used to delete a rule. To delete an existing rule, specify the schemaName, tableName, columnName, maskingFunction,
// and specify ruleState as disabled. However, if the rule doesn't
// already exist, the rule will be created with ruleState set to enabled, regardless of the provided value of ruleState.
type DataMaskingRuleState string

const (
	DataMaskingRuleStateDisabled DataMaskingRuleState = "Disabled"
	DataMaskingRuleStateEnabled  DataMaskingRuleState = "Enabled"
)

// PossibleDataMaskingRuleStateValues returns the possible values for the DataMaskingRuleState const type.
func PossibleDataMaskingRuleStateValues() []DataMaskingRuleState {
	return []DataMaskingRuleState{
		DataMaskingRuleStateDisabled,
		DataMaskingRuleStateEnabled,
	}
}

// ToPtr returns a *DataMaskingRuleState pointing to the current value.
func (c DataMaskingRuleState) ToPtr() *DataMaskingRuleState {
	return &c
}

// DataMaskingState - The state of the data masking policy.
type DataMaskingState string

const (
	DataMaskingStateDisabled DataMaskingState = "Disabled"
	DataMaskingStateEnabled  DataMaskingState = "Enabled"
)

// PossibleDataMaskingStateValues returns the possible values for the DataMaskingState const type.
func PossibleDataMaskingStateValues() []DataMaskingState {
	return []DataMaskingState{
		DataMaskingStateDisabled,
		DataMaskingStateEnabled,
	}
}

// ToPtr returns a *DataMaskingState pointing to the current value.
func (c DataMaskingState) ToPtr() *DataMaskingState {
	return &c
}

type DataWarehouseUserActivityName string

const (
	DataWarehouseUserActivityNameCurrent DataWarehouseUserActivityName = "current"
)

// PossibleDataWarehouseUserActivityNameValues returns the possible values for the DataWarehouseUserActivityName const type.
func PossibleDataWarehouseUserActivityNameValues() []DataWarehouseUserActivityName {
	return []DataWarehouseUserActivityName{
		DataWarehouseUserActivityNameCurrent,
	}
}

// ToPtr returns a *DataWarehouseUserActivityName pointing to the current value.
func (c DataWarehouseUserActivityName) ToPtr() *DataWarehouseUserActivityName {
	return &c
}

// DayOfWeek - Day of maintenance window.
type DayOfWeek string

const (
	DayOfWeekFriday    DayOfWeek = "Friday"
	DayOfWeekMonday    DayOfWeek = "Monday"
	DayOfWeekSaturday  DayOfWeek = "Saturday"
	DayOfWeekSunday    DayOfWeek = "Sunday"
	DayOfWeekThursday  DayOfWeek = "Thursday"
	DayOfWeekTuesday   DayOfWeek = "Tuesday"
	DayOfWeekWednesday DayOfWeek = "Wednesday"
)

// PossibleDayOfWeekValues returns the possible values for the DayOfWeek const type.
func PossibleDayOfWeekValues() []DayOfWeek {
	return []DayOfWeek{
		DayOfWeekFriday,
		DayOfWeekMonday,
		DayOfWeekSaturday,
		DayOfWeekSunday,
		DayOfWeekThursday,
		DayOfWeekTuesday,
		DayOfWeekWednesday,
	}
}

// ToPtr returns a *DayOfWeek pointing to the current value.
func (c DayOfWeek) ToPtr() *DayOfWeek {
	return &c
}

type EncryptionProtectorName string

const (
	EncryptionProtectorNameCurrent EncryptionProtectorName = "current"
)

// PossibleEncryptionProtectorNameValues returns the possible values for the EncryptionProtectorName const type.
func PossibleEncryptionProtectorNameValues() []EncryptionProtectorName {
	return []EncryptionProtectorName{
		EncryptionProtectorNameCurrent,
	}
}

// ToPtr returns a *EncryptionProtectorName pointing to the current value.
func (c EncryptionProtectorName) ToPtr() *EncryptionProtectorName {
	return &c
}

type Enum10 string

const (
	Enum10Default Enum10 = "default"
)

// PossibleEnum10Values returns the possible values for the Enum10 const type.
func PossibleEnum10Values() []Enum10 {
	return []Enum10{
		Enum10Default,
	}
}

// ToPtr returns a *Enum10 pointing to the current value.
func (c Enum10) ToPtr() *Enum10 {
	return &c
}

type GeoBackupPolicyName string

const (
	GeoBackupPolicyNameDefault GeoBackupPolicyName = "Default"
)

// PossibleGeoBackupPolicyNameValues returns the possible values for the GeoBackupPolicyName const type.
func PossibleGeoBackupPolicyNameValues() []GeoBackupPolicyName {
	return []GeoBackupPolicyName{
		GeoBackupPolicyNameDefault,
	}
}

// ToPtr returns a *GeoBackupPolicyName pointing to the current value.
func (c GeoBackupPolicyName) ToPtr() *GeoBackupPolicyName {
	return &c
}

// GeoBackupPolicyState - The state of the geo backup policy.
type GeoBackupPolicyState string

const (
	GeoBackupPolicyStateDisabled GeoBackupPolicyState = "Disabled"
	GeoBackupPolicyStateEnabled  GeoBackupPolicyState = "Enabled"
)

// PossibleGeoBackupPolicyStateValues returns the possible values for the GeoBackupPolicyState const type.
func PossibleGeoBackupPolicyStateValues() []GeoBackupPolicyState {
	return []GeoBackupPolicyState{
		GeoBackupPolicyStateDisabled,
		GeoBackupPolicyStateEnabled,
	}
}

// ToPtr returns a *GeoBackupPolicyState pointing to the current value.
func (c GeoBackupPolicyState) ToPtr() *GeoBackupPolicyState {
	return &c
}

// IntegrationRuntimeAuthKeyName - The name of the authentication key to regenerate.
type IntegrationRuntimeAuthKeyName string

const (
	IntegrationRuntimeAuthKeyNameAuthKey1 IntegrationRuntimeAuthKeyName = "authKey1"
	IntegrationRuntimeAuthKeyNameAuthKey2 IntegrationRuntimeAuthKeyName = "authKey2"
)

// PossibleIntegrationRuntimeAuthKeyNameValues returns the possible values for the IntegrationRuntimeAuthKeyName const type.
func PossibleIntegrationRuntimeAuthKeyNameValues() []IntegrationRuntimeAuthKeyName {
	return []IntegrationRuntimeAuthKeyName{
		IntegrationRuntimeAuthKeyNameAuthKey1,
		IntegrationRuntimeAuthKeyNameAuthKey2,
	}
}

// ToPtr returns a *IntegrationRuntimeAuthKeyName pointing to the current value.
func (c IntegrationRuntimeAuthKeyName) ToPtr() *IntegrationRuntimeAuthKeyName {
	return &c
}

// IntegrationRuntimeAutoUpdate - The state of integration runtime auto update.
type IntegrationRuntimeAutoUpdate string

const (
	IntegrationRuntimeAutoUpdateOff IntegrationRuntimeAutoUpdate = "Off"
	IntegrationRuntimeAutoUpdateOn  IntegrationRuntimeAutoUpdate = "On"
)

// PossibleIntegrationRuntimeAutoUpdateValues returns the possible values for the IntegrationRuntimeAutoUpdate const type.
func PossibleIntegrationRuntimeAutoUpdateValues() []IntegrationRuntimeAutoUpdate {
	return []IntegrationRuntimeAutoUpdate{
		IntegrationRuntimeAutoUpdateOff,
		IntegrationRuntimeAutoUpdateOn,
	}
}

// ToPtr returns a *IntegrationRuntimeAutoUpdate pointing to the current value.
func (c IntegrationRuntimeAutoUpdate) ToPtr() *IntegrationRuntimeAutoUpdate {
	return &c
}

// IntegrationRuntimeEdition - The edition for the SSIS Integration Runtime
type IntegrationRuntimeEdition string

const (
	IntegrationRuntimeEditionEnterprise IntegrationRuntimeEdition = "Enterprise"
	IntegrationRuntimeEditionStandard   IntegrationRuntimeEdition = "Standard"
)

// PossibleIntegrationRuntimeEditionValues returns the possible values for the IntegrationRuntimeEdition const type.
func PossibleIntegrationRuntimeEditionValues() []IntegrationRuntimeEdition {
	return []IntegrationRuntimeEdition{
		IntegrationRuntimeEditionEnterprise,
		IntegrationRuntimeEditionStandard,
	}
}

// ToPtr returns a *IntegrationRuntimeEdition pointing to the current value.
func (c IntegrationRuntimeEdition) ToPtr() *IntegrationRuntimeEdition {
	return &c
}

// IntegrationRuntimeEntityReferenceType - The type of this referenced entity.
type IntegrationRuntimeEntityReferenceType string

const (
	IntegrationRuntimeEntityReferenceTypeIntegrationRuntimeReference IntegrationRuntimeEntityReferenceType = "IntegrationRuntimeReference"
	IntegrationRuntimeEntityReferenceTypeLinkedServiceReference      IntegrationRuntimeEntityReferenceType = "LinkedServiceReference"
)

// PossibleIntegrationRuntimeEntityReferenceTypeValues returns the possible values for the IntegrationRuntimeEntityReferenceType const type.
func PossibleIntegrationRuntimeEntityReferenceTypeValues() []IntegrationRuntimeEntityReferenceType {
	return []IntegrationRuntimeEntityReferenceType{
		IntegrationRuntimeEntityReferenceTypeIntegrationRuntimeReference,
		IntegrationRuntimeEntityReferenceTypeLinkedServiceReference,
	}
}

// ToPtr returns a *IntegrationRuntimeEntityReferenceType pointing to the current value.
func (c IntegrationRuntimeEntityReferenceType) ToPtr() *IntegrationRuntimeEntityReferenceType {
	return &c
}

// IntegrationRuntimeInternalChannelEncryptionMode - It is used to set the encryption mode for node-node communication channel (when more than 2 self-hosted
// integration runtime nodes exist).
type IntegrationRuntimeInternalChannelEncryptionMode string

const (
	IntegrationRuntimeInternalChannelEncryptionModeNotEncrypted IntegrationRuntimeInternalChannelEncryptionMode = "NotEncrypted"
	IntegrationRuntimeInternalChannelEncryptionModeNotSet       IntegrationRuntimeInternalChannelEncryptionMode = "NotSet"
	IntegrationRuntimeInternalChannelEncryptionModeSSLEncrypted IntegrationRuntimeInternalChannelEncryptionMode = "SslEncrypted"
)

// PossibleIntegrationRuntimeInternalChannelEncryptionModeValues returns the possible values for the IntegrationRuntimeInternalChannelEncryptionMode const type.
func PossibleIntegrationRuntimeInternalChannelEncryptionModeValues() []IntegrationRuntimeInternalChannelEncryptionMode {
	return []IntegrationRuntimeInternalChannelEncryptionMode{
		IntegrationRuntimeInternalChannelEncryptionModeNotEncrypted,
		IntegrationRuntimeInternalChannelEncryptionModeNotSet,
		IntegrationRuntimeInternalChannelEncryptionModeSSLEncrypted,
	}
}

// ToPtr returns a *IntegrationRuntimeInternalChannelEncryptionMode pointing to the current value.
func (c IntegrationRuntimeInternalChannelEncryptionMode) ToPtr() *IntegrationRuntimeInternalChannelEncryptionMode {
	return &c
}

// IntegrationRuntimeLicenseType - License type for bringing your own license scenario.
type IntegrationRuntimeLicenseType string

const (
	IntegrationRuntimeLicenseTypeBasePrice       IntegrationRuntimeLicenseType = "BasePrice"
	IntegrationRuntimeLicenseTypeLicenseIncluded IntegrationRuntimeLicenseType = "LicenseIncluded"
)

// PossibleIntegrationRuntimeLicenseTypeValues returns the possible values for the IntegrationRuntimeLicenseType const type.
func PossibleIntegrationRuntimeLicenseTypeValues() []IntegrationRuntimeLicenseType {
	return []IntegrationRuntimeLicenseType{
		IntegrationRuntimeLicenseTypeBasePrice,
		IntegrationRuntimeLicenseTypeLicenseIncluded,
	}
}

// ToPtr returns a *IntegrationRuntimeLicenseType pointing to the current value.
func (c IntegrationRuntimeLicenseType) ToPtr() *IntegrationRuntimeLicenseType {
	return &c
}

// IntegrationRuntimeSsisCatalogPricingTier - The pricing tier for the catalog database. The valid values could be found in https://azure.microsoft.com/en-us/pricing/details/sql-database/
type IntegrationRuntimeSsisCatalogPricingTier string

const (
	IntegrationRuntimeSsisCatalogPricingTierBasic     IntegrationRuntimeSsisCatalogPricingTier = "Basic"
	IntegrationRuntimeSsisCatalogPricingTierPremium   IntegrationRuntimeSsisCatalogPricingTier = "Premium"
	IntegrationRuntimeSsisCatalogPricingTierPremiumRS IntegrationRuntimeSsisCatalogPricingTier = "PremiumRS"
	IntegrationRuntimeSsisCatalogPricingTierStandard  IntegrationRuntimeSsisCatalogPricingTier = "Standard"
)

// PossibleIntegrationRuntimeSsisCatalogPricingTierValues returns the possible values for the IntegrationRuntimeSsisCatalogPricingTier const type.
func PossibleIntegrationRuntimeSsisCatalogPricingTierValues() []IntegrationRuntimeSsisCatalogPricingTier {
	return []IntegrationRuntimeSsisCatalogPricingTier{
		IntegrationRuntimeSsisCatalogPricingTierBasic,
		IntegrationRuntimeSsisCatalogPricingTierPremium,
		IntegrationRuntimeSsisCatalogPricingTierPremiumRS,
		IntegrationRuntimeSsisCatalogPricingTierStandard,
	}
}

// ToPtr returns a *IntegrationRuntimeSsisCatalogPricingTier pointing to the current value.
func (c IntegrationRuntimeSsisCatalogPricingTier) ToPtr() *IntegrationRuntimeSsisCatalogPricingTier {
	return &c
}

// IntegrationRuntimeState - The state of integration runtime.
type IntegrationRuntimeState string

const (
	IntegrationRuntimeStateAccessDenied     IntegrationRuntimeState = "AccessDenied"
	IntegrationRuntimeStateInitial          IntegrationRuntimeState = "Initial"
	IntegrationRuntimeStateLimited          IntegrationRuntimeState = "Limited"
	IntegrationRuntimeStateNeedRegistration IntegrationRuntimeState = "NeedRegistration"
	IntegrationRuntimeStateOffline          IntegrationRuntimeState = "Offline"
	IntegrationRuntimeStateOnline           IntegrationRuntimeState = "Online"
	IntegrationRuntimeStateStarted          IntegrationRuntimeState = "Started"
	IntegrationRuntimeStateStarting         IntegrationRuntimeState = "Starting"
	IntegrationRuntimeStateStopped          IntegrationRuntimeState = "Stopped"
	IntegrationRuntimeStateStopping         IntegrationRuntimeState = "Stopping"
)

// PossibleIntegrationRuntimeStateValues returns the possible values for the IntegrationRuntimeState const type.
func PossibleIntegrationRuntimeStateValues() []IntegrationRuntimeState {
	return []IntegrationRuntimeState{
		IntegrationRuntimeStateAccessDenied,
		IntegrationRuntimeStateInitial,
		IntegrationRuntimeStateLimited,
		IntegrationRuntimeStateNeedRegistration,
		IntegrationRuntimeStateOffline,
		IntegrationRuntimeStateOnline,
		IntegrationRuntimeStateStarted,
		IntegrationRuntimeStateStarting,
		IntegrationRuntimeStateStopped,
		IntegrationRuntimeStateStopping,
	}
}

// ToPtr returns a *IntegrationRuntimeState pointing to the current value.
func (c IntegrationRuntimeState) ToPtr() *IntegrationRuntimeState {
	return &c
}

// IntegrationRuntimeType - The type of integration runtime.
type IntegrationRuntimeType string

const (
	IntegrationRuntimeTypeManaged    IntegrationRuntimeType = "Managed"
	IntegrationRuntimeTypeSelfHosted IntegrationRuntimeType = "SelfHosted"
)

// PossibleIntegrationRuntimeTypeValues returns the possible values for the IntegrationRuntimeType const type.
func PossibleIntegrationRuntimeTypeValues() []IntegrationRuntimeType {
	return []IntegrationRuntimeType{
		IntegrationRuntimeTypeManaged,
		IntegrationRuntimeTypeSelfHosted,
	}
}

// ToPtr returns a *IntegrationRuntimeType pointing to the current value.
func (c IntegrationRuntimeType) ToPtr() *IntegrationRuntimeType {
	return &c
}

// IntegrationRuntimeUpdateResult - The result of the last integration runtime node update.
type IntegrationRuntimeUpdateResult string

const (
	IntegrationRuntimeUpdateResultFail    IntegrationRuntimeUpdateResult = "Fail"
	IntegrationRuntimeUpdateResultNone    IntegrationRuntimeUpdateResult = "None"
	IntegrationRuntimeUpdateResultSucceed IntegrationRuntimeUpdateResult = "Succeed"
)

// PossibleIntegrationRuntimeUpdateResultValues returns the possible values for the IntegrationRuntimeUpdateResult const type.
func PossibleIntegrationRuntimeUpdateResultValues() []IntegrationRuntimeUpdateResult {
	return []IntegrationRuntimeUpdateResult{
		IntegrationRuntimeUpdateResultFail,
		IntegrationRuntimeUpdateResultNone,
		IntegrationRuntimeUpdateResultSucceed,
	}
}

// ToPtr returns a *IntegrationRuntimeUpdateResult pointing to the current value.
func (c IntegrationRuntimeUpdateResult) ToPtr() *IntegrationRuntimeUpdateResult {
	return &c
}

// ManagedIdentitySQLControlSettingsModelPropertiesGrantSQLControlToManagedIdentityActualState - Actual state
type ManagedIdentitySQLControlSettingsModelPropertiesGrantSQLControlToManagedIdentityActualState string

const (
	ManagedIdentitySQLControlSettingsModelPropertiesGrantSQLControlToManagedIdentityActualStateDisabled  ManagedIdentitySQLControlSettingsModelPropertiesGrantSQLControlToManagedIdentityActualState = "Disabled"
	ManagedIdentitySQLControlSettingsModelPropertiesGrantSQLControlToManagedIdentityActualStateDisabling ManagedIdentitySQLControlSettingsModelPropertiesGrantSQLControlToManagedIdentityActualState = "Disabling"
	ManagedIdentitySQLControlSettingsModelPropertiesGrantSQLControlToManagedIdentityActualStateEnabled   ManagedIdentitySQLControlSettingsModelPropertiesGrantSQLControlToManagedIdentityActualState = "Enabled"
	ManagedIdentitySQLControlSettingsModelPropertiesGrantSQLControlToManagedIdentityActualStateEnabling  ManagedIdentitySQLControlSettingsModelPropertiesGrantSQLControlToManagedIdentityActualState = "Enabling"
	ManagedIdentitySQLControlSettingsModelPropertiesGrantSQLControlToManagedIdentityActualStateUnknown   ManagedIdentitySQLControlSettingsModelPropertiesGrantSQLControlToManagedIdentityActualState = "Unknown"
)

// PossibleManagedIdentitySQLControlSettingsModelPropertiesGrantSQLControlToManagedIdentityActualStateValues returns the possible values for the ManagedIdentitySQLControlSettingsModelPropertiesGrantSQLControlToManagedIdentityActualState const type.
func PossibleManagedIdentitySQLControlSettingsModelPropertiesGrantSQLControlToManagedIdentityActualStateValues() []ManagedIdentitySQLControlSettingsModelPropertiesGrantSQLControlToManagedIdentityActualState {
	return []ManagedIdentitySQLControlSettingsModelPropertiesGrantSQLControlToManagedIdentityActualState{
		ManagedIdentitySQLControlSettingsModelPropertiesGrantSQLControlToManagedIdentityActualStateDisabled,
		ManagedIdentitySQLControlSettingsModelPropertiesGrantSQLControlToManagedIdentityActualStateDisabling,
		ManagedIdentitySQLControlSettingsModelPropertiesGrantSQLControlToManagedIdentityActualStateEnabled,
		ManagedIdentitySQLControlSettingsModelPropertiesGrantSQLControlToManagedIdentityActualStateEnabling,
		ManagedIdentitySQLControlSettingsModelPropertiesGrantSQLControlToManagedIdentityActualStateUnknown,
	}
}

// ToPtr returns a *ManagedIdentitySQLControlSettingsModelPropertiesGrantSQLControlToManagedIdentityActualState pointing to the current value.
func (c ManagedIdentitySQLControlSettingsModelPropertiesGrantSQLControlToManagedIdentityActualState) ToPtr() *ManagedIdentitySQLControlSettingsModelPropertiesGrantSQLControlToManagedIdentityActualState {
	return &c
}

// ManagedIdentitySQLControlSettingsModelPropertiesGrantSQLControlToManagedIdentityDesiredState - Desired state
type ManagedIdentitySQLControlSettingsModelPropertiesGrantSQLControlToManagedIdentityDesiredState string

const (
	ManagedIdentitySQLControlSettingsModelPropertiesGrantSQLControlToManagedIdentityDesiredStateDisabled ManagedIdentitySQLControlSettingsModelPropertiesGrantSQLControlToManagedIdentityDesiredState = "Disabled"
	ManagedIdentitySQLControlSettingsModelPropertiesGrantSQLControlToManagedIdentityDesiredStateEnabled  ManagedIdentitySQLControlSettingsModelPropertiesGrantSQLControlToManagedIdentityDesiredState = "Enabled"
)

// PossibleManagedIdentitySQLControlSettingsModelPropertiesGrantSQLControlToManagedIdentityDesiredStateValues returns the possible values for the ManagedIdentitySQLControlSettingsModelPropertiesGrantSQLControlToManagedIdentityDesiredState const type.
func PossibleManagedIdentitySQLControlSettingsModelPropertiesGrantSQLControlToManagedIdentityDesiredStateValues() []ManagedIdentitySQLControlSettingsModelPropertiesGrantSQLControlToManagedIdentityDesiredState {
	return []ManagedIdentitySQLControlSettingsModelPropertiesGrantSQLControlToManagedIdentityDesiredState{
		ManagedIdentitySQLControlSettingsModelPropertiesGrantSQLControlToManagedIdentityDesiredStateDisabled,
		ManagedIdentitySQLControlSettingsModelPropertiesGrantSQLControlToManagedIdentityDesiredStateEnabled,
	}
}

// ToPtr returns a *ManagedIdentitySQLControlSettingsModelPropertiesGrantSQLControlToManagedIdentityDesiredState pointing to the current value.
func (c ManagedIdentitySQLControlSettingsModelPropertiesGrantSQLControlToManagedIdentityDesiredState) ToPtr() *ManagedIdentitySQLControlSettingsModelPropertiesGrantSQLControlToManagedIdentityDesiredState {
	return &c
}

// ManagedIntegrationRuntimeNodeStatus - The managed integration runtime node status.
type ManagedIntegrationRuntimeNodeStatus string

const (
	ManagedIntegrationRuntimeNodeStatusAvailable   ManagedIntegrationRuntimeNodeStatus = "Available"
	ManagedIntegrationRuntimeNodeStatusRecycling   ManagedIntegrationRuntimeNodeStatus = "Recycling"
	ManagedIntegrationRuntimeNodeStatusStarting    ManagedIntegrationRuntimeNodeStatus = "Starting"
	ManagedIntegrationRuntimeNodeStatusUnavailable ManagedIntegrationRuntimeNodeStatus = "Unavailable"
)

// PossibleManagedIntegrationRuntimeNodeStatusValues returns the possible values for the ManagedIntegrationRuntimeNodeStatus const type.
func PossibleManagedIntegrationRuntimeNodeStatusValues() []ManagedIntegrationRuntimeNodeStatus {
	return []ManagedIntegrationRuntimeNodeStatus{
		ManagedIntegrationRuntimeNodeStatusAvailable,
		ManagedIntegrationRuntimeNodeStatusRecycling,
		ManagedIntegrationRuntimeNodeStatusStarting,
		ManagedIntegrationRuntimeNodeStatusUnavailable,
	}
}

// ToPtr returns a *ManagedIntegrationRuntimeNodeStatus pointing to the current value.
func (c ManagedIntegrationRuntimeNodeStatus) ToPtr() *ManagedIntegrationRuntimeNodeStatus {
	return &c
}

// ManagementOperationState - The operation state.
type ManagementOperationState string

const (
	ManagementOperationStateCancelInProgress ManagementOperationState = "CancelInProgress"
	ManagementOperationStateCancelled        ManagementOperationState = "Cancelled"
	ManagementOperationStateFailed           ManagementOperationState = "Failed"
	ManagementOperationStateInProgress       ManagementOperationState = "InProgress"
	ManagementOperationStatePending          ManagementOperationState = "Pending"
	ManagementOperationStateSucceeded        ManagementOperationState = "Succeeded"
)

// PossibleManagementOperationStateValues returns the possible values for the ManagementOperationState const type.
func PossibleManagementOperationStateValues() []ManagementOperationState {
	return []ManagementOperationState{
		ManagementOperationStateCancelInProgress,
		ManagementOperationStateCancelled,
		ManagementOperationStateFailed,
		ManagementOperationStateInProgress,
		ManagementOperationStatePending,
		ManagementOperationStateSucceeded,
	}
}

// ToPtr returns a *ManagementOperationState pointing to the current value.
func (c ManagementOperationState) ToPtr() *ManagementOperationState {
	return &c
}

// NodeSize - The level of compute power that each node in the Big Data pool has.
type NodeSize string

const (
	NodeSizeLarge    NodeSize = "Large"
	NodeSizeMedium   NodeSize = "Medium"
	NodeSizeNone     NodeSize = "None"
	NodeSizeSmall    NodeSize = "Small"
	NodeSizeXLarge   NodeSize = "XLarge"
	NodeSizeXXLarge  NodeSize = "XXLarge"
	NodeSizeXXXLarge NodeSize = "XXXLarge"
)

// PossibleNodeSizeValues returns the possible values for the NodeSize const type.
func PossibleNodeSizeValues() []NodeSize {
	return []NodeSize{
		NodeSizeLarge,
		NodeSizeMedium,
		NodeSizeNone,
		NodeSizeSmall,
		NodeSizeXLarge,
		NodeSizeXXLarge,
		NodeSizeXXXLarge,
	}
}

// ToPtr returns a *NodeSize pointing to the current value.
func (c NodeSize) ToPtr() *NodeSize {
	return &c
}

// NodeSizeFamily - The kind of nodes that the Big Data pool provides.
type NodeSizeFamily string

const (
	NodeSizeFamilyHardwareAcceleratedFPGA NodeSizeFamily = "HardwareAcceleratedFPGA"
	NodeSizeFamilyHardwareAcceleratedGPU  NodeSizeFamily = "HardwareAcceleratedGPU"
	NodeSizeFamilyMemoryOptimized         NodeSizeFamily = "MemoryOptimized"
	NodeSizeFamilyNone                    NodeSizeFamily = "None"
)

// PossibleNodeSizeFamilyValues returns the possible values for the NodeSizeFamily const type.
func PossibleNodeSizeFamilyValues() []NodeSizeFamily {
	return []NodeSizeFamily{
		NodeSizeFamilyHardwareAcceleratedFPGA,
		NodeSizeFamilyHardwareAcceleratedGPU,
		NodeSizeFamilyMemoryOptimized,
		NodeSizeFamilyNone,
	}
}

// ToPtr returns a *NodeSizeFamily pointing to the current value.
func (c NodeSizeFamily) ToPtr() *NodeSizeFamily {
	return &c
}

// OperationStatus - Operation status
type OperationStatus string

const (
	OperationStatusCanceled   OperationStatus = "Canceled"
	OperationStatusFailed     OperationStatus = "Failed"
	OperationStatusInProgress OperationStatus = "InProgress"
	OperationStatusSucceeded  OperationStatus = "Succeeded"
)

// PossibleOperationStatusValues returns the possible values for the OperationStatus const type.
func PossibleOperationStatusValues() []OperationStatus {
	return []OperationStatus{
		OperationStatusCanceled,
		OperationStatusFailed,
		OperationStatusInProgress,
		OperationStatusSucceeded,
	}
}

// ToPtr returns a *OperationStatus pointing to the current value.
func (c OperationStatus) ToPtr() *OperationStatus {
	return &c
}

// ProvisioningState - Resource provisioning state
type ProvisioningState string

const (
	ProvisioningStateDeleteError  ProvisioningState = "DeleteError"
	ProvisioningStateDeleting     ProvisioningState = "Deleting"
	ProvisioningStateFailed       ProvisioningState = "Failed"
	ProvisioningStateProvisioning ProvisioningState = "Provisioning"
	ProvisioningStateSucceeded    ProvisioningState = "Succeeded"
)

// PossibleProvisioningStateValues returns the possible values for the ProvisioningState const type.
func PossibleProvisioningStateValues() []ProvisioningState {
	return []ProvisioningState{
		ProvisioningStateDeleteError,
		ProvisioningStateDeleting,
		ProvisioningStateFailed,
		ProvisioningStateProvisioning,
		ProvisioningStateSucceeded,
	}
}

// ToPtr returns a *ProvisioningState pointing to the current value.
func (c ProvisioningState) ToPtr() *ProvisioningState {
	return &c
}

// QueryAggregationFunction - The function that is used to aggregate each query's metrics.
type QueryAggregationFunction string

const (
	QueryAggregationFunctionMin QueryAggregationFunction = "min"
	QueryAggregationFunctionMax QueryAggregationFunction = "max"
	QueryAggregationFunctionAvg QueryAggregationFunction = "avg"
	QueryAggregationFunctionSum QueryAggregationFunction = "sum"
)

// PossibleQueryAggregationFunctionValues returns the possible values for the QueryAggregationFunction const type.
func PossibleQueryAggregationFunctionValues() []QueryAggregationFunction {
	return []QueryAggregationFunction{
		QueryAggregationFunctionMin,
		QueryAggregationFunctionMax,
		QueryAggregationFunctionAvg,
		QueryAggregationFunctionSum,
	}
}

// ToPtr returns a *QueryAggregationFunction pointing to the current value.
func (c QueryAggregationFunction) ToPtr() *QueryAggregationFunction {
	return &c
}

// QueryExecutionType - The execution type that is used to filter the query instances that are returned.
type QueryExecutionType string

const (
	QueryExecutionTypeAny       QueryExecutionType = "any"
	QueryExecutionTypeRegular   QueryExecutionType = "regular"
	QueryExecutionTypeIrregular QueryExecutionType = "irregular"
	QueryExecutionTypeAborted   QueryExecutionType = "aborted"
	QueryExecutionTypeException QueryExecutionType = "exception"
)

// PossibleQueryExecutionTypeValues returns the possible values for the QueryExecutionType const type.
func PossibleQueryExecutionTypeValues() []QueryExecutionType {
	return []QueryExecutionType{
		QueryExecutionTypeAny,
		QueryExecutionTypeRegular,
		QueryExecutionTypeIrregular,
		QueryExecutionTypeAborted,
		QueryExecutionTypeException,
	}
}

// ToPtr returns a *QueryExecutionType pointing to the current value.
func (c QueryExecutionType) ToPtr() *QueryExecutionType {
	return &c
}

// QueryMetricUnit - The unit of measurement
type QueryMetricUnit string

const (
	QueryMetricUnitPercentage   QueryMetricUnit = "percentage"
	QueryMetricUnitKB           QueryMetricUnit = "KB"
	QueryMetricUnitMicroseconds QueryMetricUnit = "microseconds"
)

// PossibleQueryMetricUnitValues returns the possible values for the QueryMetricUnit const type.
func PossibleQueryMetricUnitValues() []QueryMetricUnit {
	return []QueryMetricUnit{
		QueryMetricUnitPercentage,
		QueryMetricUnitKB,
		QueryMetricUnitMicroseconds,
	}
}

// ToPtr returns a *QueryMetricUnit pointing to the current value.
func (c QueryMetricUnit) ToPtr() *QueryMetricUnit {
	return &c
}

// QueryObservedMetricType - The type of metric to use for ordering the top metrics.
type QueryObservedMetricType string

const (
	QueryObservedMetricTypeCPU            QueryObservedMetricType = "cpu"
	QueryObservedMetricTypeIo             QueryObservedMetricType = "io"
	QueryObservedMetricTypeLogio          QueryObservedMetricType = "logio"
	QueryObservedMetricTypeDuration       QueryObservedMetricType = "duration"
	QueryObservedMetricTypeExecutionCount QueryObservedMetricType = "executionCount"
)

// PossibleQueryObservedMetricTypeValues returns the possible values for the QueryObservedMetricType const type.
func PossibleQueryObservedMetricTypeValues() []QueryObservedMetricType {
	return []QueryObservedMetricType{
		QueryObservedMetricTypeCPU,
		QueryObservedMetricTypeIo,
		QueryObservedMetricTypeLogio,
		QueryObservedMetricTypeDuration,
		QueryObservedMetricTypeExecutionCount,
	}
}

// ToPtr returns a *QueryObservedMetricType pointing to the current value.
func (c QueryObservedMetricType) ToPtr() *QueryObservedMetricType {
	return &c
}

type RecommendedSensitivityLabelUpdateKind string

const (
	RecommendedSensitivityLabelUpdateKindEnable  RecommendedSensitivityLabelUpdateKind = "enable"
	RecommendedSensitivityLabelUpdateKindDisable RecommendedSensitivityLabelUpdateKind = "disable"
)

// PossibleRecommendedSensitivityLabelUpdateKindValues returns the possible values for the RecommendedSensitivityLabelUpdateKind const type.
func PossibleRecommendedSensitivityLabelUpdateKindValues() []RecommendedSensitivityLabelUpdateKind {
	return []RecommendedSensitivityLabelUpdateKind{
		RecommendedSensitivityLabelUpdateKindEnable,
		RecommendedSensitivityLabelUpdateKindDisable,
	}
}

// ToPtr returns a *RecommendedSensitivityLabelUpdateKind pointing to the current value.
func (c RecommendedSensitivityLabelUpdateKind) ToPtr() *RecommendedSensitivityLabelUpdateKind {
	return &c
}

// ReplicationRole - The role of the Sql pool in the replication link.
type ReplicationRole string

const (
	ReplicationRolePrimary              ReplicationRole = "Primary"
	ReplicationRoleSecondary            ReplicationRole = "Secondary"
	ReplicationRoleNonReadableSecondary ReplicationRole = "NonReadableSecondary"
	ReplicationRoleSource               ReplicationRole = "Source"
	ReplicationRoleCopy                 ReplicationRole = "Copy"
)

// PossibleReplicationRoleValues returns the possible values for the ReplicationRole const type.
func PossibleReplicationRoleValues() []ReplicationRole {
	return []ReplicationRole{
		ReplicationRolePrimary,
		ReplicationRoleSecondary,
		ReplicationRoleNonReadableSecondary,
		ReplicationRoleSource,
		ReplicationRoleCopy,
	}
}

// ToPtr returns a *ReplicationRole pointing to the current value.
func (c ReplicationRole) ToPtr() *ReplicationRole {
	return &c
}

// ReplicationState - The replication state for the replication link.
type ReplicationState string

const (
	ReplicationStateCATCHUP   ReplicationState = "CATCH_UP"
	ReplicationStatePENDING   ReplicationState = "PENDING"
	ReplicationStateSEEDING   ReplicationState = "SEEDING"
	ReplicationStateSUSPENDED ReplicationState = "SUSPENDED"
)

// PossibleReplicationStateValues returns the possible values for the ReplicationState const type.
func PossibleReplicationStateValues() []ReplicationState {
	return []ReplicationState{
		ReplicationStateCATCHUP,
		ReplicationStatePENDING,
		ReplicationStateSEEDING,
		ReplicationStateSUSPENDED,
	}
}

// ToPtr returns a *ReplicationState pointing to the current value.
func (c ReplicationState) ToPtr() *ReplicationState {
	return &c
}

// ResourceIdentityType - The type of managed identity for the workspace
type ResourceIdentityType string

const (
	ResourceIdentityTypeNone                       ResourceIdentityType = "None"
	ResourceIdentityTypeSystemAssigned             ResourceIdentityType = "SystemAssigned"
	ResourceIdentityTypeSystemAssignedUserAssigned ResourceIdentityType = "SystemAssigned,UserAssigned"
)

// PossibleResourceIdentityTypeValues returns the possible values for the ResourceIdentityType const type.
func PossibleResourceIdentityTypeValues() []ResourceIdentityType {
	return []ResourceIdentityType{
		ResourceIdentityTypeNone,
		ResourceIdentityTypeSystemAssigned,
		ResourceIdentityTypeSystemAssignedUserAssigned,
	}
}

// ToPtr returns a *ResourceIdentityType pointing to the current value.
func (c ResourceIdentityType) ToPtr() *ResourceIdentityType {
	return &c
}

// RestorePointType - The type of restore point
type RestorePointType string

const (
	RestorePointTypeCONTINUOUS RestorePointType = "CONTINUOUS"
	RestorePointTypeDISCRETE   RestorePointType = "DISCRETE"
)

// PossibleRestorePointTypeValues returns the possible values for the RestorePointType const type.
func PossibleRestorePointTypeValues() []RestorePointType {
	return []RestorePointType{
		RestorePointTypeCONTINUOUS,
		RestorePointTypeDISCRETE,
	}
}

// ToPtr returns a *RestorePointType pointing to the current value.
func (c RestorePointType) ToPtr() *RestorePointType {
	return &c
}

type SecurityAlertPolicyName string

const (
	SecurityAlertPolicyNameDefault SecurityAlertPolicyName = "default"
)

// PossibleSecurityAlertPolicyNameValues returns the possible values for the SecurityAlertPolicyName const type.
func PossibleSecurityAlertPolicyNameValues() []SecurityAlertPolicyName {
	return []SecurityAlertPolicyName{
		SecurityAlertPolicyNameDefault,
	}
}

// ToPtr returns a *SecurityAlertPolicyName pointing to the current value.
func (c SecurityAlertPolicyName) ToPtr() *SecurityAlertPolicyName {
	return &c
}

type SecurityAlertPolicyNameAutoGenerated string

const (
	SecurityAlertPolicyNameAutoGeneratedDefault SecurityAlertPolicyNameAutoGenerated = "Default"
)

// PossibleSecurityAlertPolicyNameAutoGeneratedValues returns the possible values for the SecurityAlertPolicyNameAutoGenerated const type.
func PossibleSecurityAlertPolicyNameAutoGeneratedValues() []SecurityAlertPolicyNameAutoGenerated {
	return []SecurityAlertPolicyNameAutoGenerated{
		SecurityAlertPolicyNameAutoGeneratedDefault,
	}
}

// ToPtr returns a *SecurityAlertPolicyNameAutoGenerated pointing to the current value.
func (c SecurityAlertPolicyNameAutoGenerated) ToPtr() *SecurityAlertPolicyNameAutoGenerated {
	return &c
}

// SecurityAlertPolicyState - Specifies the state of the policy, whether it is enabled or disabled or a policy has not been applied yet on the specific
// Sql pool.
type SecurityAlertPolicyState string

const (
	SecurityAlertPolicyStateNew      SecurityAlertPolicyState = "New"
	SecurityAlertPolicyStateEnabled  SecurityAlertPolicyState = "Enabled"
	SecurityAlertPolicyStateDisabled SecurityAlertPolicyState = "Disabled"
)

// PossibleSecurityAlertPolicyStateValues returns the possible values for the SecurityAlertPolicyState const type.
func PossibleSecurityAlertPolicyStateValues() []SecurityAlertPolicyState {
	return []SecurityAlertPolicyState{
		SecurityAlertPolicyStateNew,
		SecurityAlertPolicyStateEnabled,
		SecurityAlertPolicyStateDisabled,
	}
}

// ToPtr returns a *SecurityAlertPolicyState pointing to the current value.
func (c SecurityAlertPolicyState) ToPtr() *SecurityAlertPolicyState {
	return &c
}

// SelfHostedIntegrationRuntimeNodeStatus - Status of the integration runtime node.
type SelfHostedIntegrationRuntimeNodeStatus string

const (
	SelfHostedIntegrationRuntimeNodeStatusInitializeFailed SelfHostedIntegrationRuntimeNodeStatus = "InitializeFailed"
	SelfHostedIntegrationRuntimeNodeStatusInitializing     SelfHostedIntegrationRuntimeNodeStatus = "Initializing"
	SelfHostedIntegrationRuntimeNodeStatusLimited          SelfHostedIntegrationRuntimeNodeStatus = "Limited"
	SelfHostedIntegrationRuntimeNodeStatusNeedRegistration SelfHostedIntegrationRuntimeNodeStatus = "NeedRegistration"
	SelfHostedIntegrationRuntimeNodeStatusOffline          SelfHostedIntegrationRuntimeNodeStatus = "Offline"
	SelfHostedIntegrationRuntimeNodeStatusOnline           SelfHostedIntegrationRuntimeNodeStatus = "Online"
	SelfHostedIntegrationRuntimeNodeStatusUpgrading        SelfHostedIntegrationRuntimeNodeStatus = "Upgrading"
)

// PossibleSelfHostedIntegrationRuntimeNodeStatusValues returns the possible values for the SelfHostedIntegrationRuntimeNodeStatus const type.
func PossibleSelfHostedIntegrationRuntimeNodeStatusValues() []SelfHostedIntegrationRuntimeNodeStatus {
	return []SelfHostedIntegrationRuntimeNodeStatus{
		SelfHostedIntegrationRuntimeNodeStatusInitializeFailed,
		SelfHostedIntegrationRuntimeNodeStatusInitializing,
		SelfHostedIntegrationRuntimeNodeStatusLimited,
		SelfHostedIntegrationRuntimeNodeStatusNeedRegistration,
		SelfHostedIntegrationRuntimeNodeStatusOffline,
		SelfHostedIntegrationRuntimeNodeStatusOnline,
		SelfHostedIntegrationRuntimeNodeStatusUpgrading,
	}
}

// ToPtr returns a *SelfHostedIntegrationRuntimeNodeStatus pointing to the current value.
func (c SelfHostedIntegrationRuntimeNodeStatus) ToPtr() *SelfHostedIntegrationRuntimeNodeStatus {
	return &c
}

type SensitivityLabelRank string

const (
	SensitivityLabelRankNone     SensitivityLabelRank = "None"
	SensitivityLabelRankLow      SensitivityLabelRank = "Low"
	SensitivityLabelRankMedium   SensitivityLabelRank = "Medium"
	SensitivityLabelRankHigh     SensitivityLabelRank = "High"
	SensitivityLabelRankCritical SensitivityLabelRank = "Critical"
)

// PossibleSensitivityLabelRankValues returns the possible values for the SensitivityLabelRank const type.
func PossibleSensitivityLabelRankValues() []SensitivityLabelRank {
	return []SensitivityLabelRank{
		SensitivityLabelRankNone,
		SensitivityLabelRankLow,
		SensitivityLabelRankMedium,
		SensitivityLabelRankHigh,
		SensitivityLabelRankCritical,
	}
}

// ToPtr returns a *SensitivityLabelRank pointing to the current value.
func (c SensitivityLabelRank) ToPtr() *SensitivityLabelRank {
	return &c
}

type SensitivityLabelSource string

const (
	SensitivityLabelSourceCurrent     SensitivityLabelSource = "current"
	SensitivityLabelSourceRecommended SensitivityLabelSource = "recommended"
)

// PossibleSensitivityLabelSourceValues returns the possible values for the SensitivityLabelSource const type.
func PossibleSensitivityLabelSourceValues() []SensitivityLabelSource {
	return []SensitivityLabelSource{
		SensitivityLabelSourceCurrent,
		SensitivityLabelSourceRecommended,
	}
}

// ToPtr returns a *SensitivityLabelSource pointing to the current value.
func (c SensitivityLabelSource) ToPtr() *SensitivityLabelSource {
	return &c
}

type SensitivityLabelUpdateKind string

const (
	SensitivityLabelUpdateKindSet    SensitivityLabelUpdateKind = "set"
	SensitivityLabelUpdateKindRemove SensitivityLabelUpdateKind = "remove"
)

// PossibleSensitivityLabelUpdateKindValues returns the possible values for the SensitivityLabelUpdateKind const type.
func PossibleSensitivityLabelUpdateKindValues() []SensitivityLabelUpdateKind {
	return []SensitivityLabelUpdateKind{
		SensitivityLabelUpdateKindSet,
		SensitivityLabelUpdateKindRemove,
	}
}

// ToPtr returns a *SensitivityLabelUpdateKind pointing to the current value.
func (c SensitivityLabelUpdateKind) ToPtr() *SensitivityLabelUpdateKind {
	return &c
}

// ServerKeyType - The encryption protector type like 'ServiceManaged', 'AzureKeyVault'.
type ServerKeyType string

const (
	ServerKeyTypeAzureKeyVault  ServerKeyType = "AzureKeyVault"
	ServerKeyTypeServiceManaged ServerKeyType = "ServiceManaged"
)

// PossibleServerKeyTypeValues returns the possible values for the ServerKeyType const type.
func PossibleServerKeyTypeValues() []ServerKeyType {
	return []ServerKeyType{
		ServerKeyTypeAzureKeyVault,
		ServerKeyTypeServiceManaged,
	}
}

// ToPtr returns a *ServerKeyType pointing to the current value.
func (c ServerKeyType) ToPtr() *ServerKeyType {
	return &c
}

// SsisObjectMetadataType - The type of SSIS object metadata.
type SsisObjectMetadataType string

const (
	SsisObjectMetadataTypeEnvironment SsisObjectMetadataType = "Environment"
	SsisObjectMetadataTypeFolder      SsisObjectMetadataType = "Folder"
	SsisObjectMetadataTypePackage     SsisObjectMetadataType = "Package"
	SsisObjectMetadataTypeProject     SsisObjectMetadataType = "Project"
)

// PossibleSsisObjectMetadataTypeValues returns the possible values for the SsisObjectMetadataType const type.
func PossibleSsisObjectMetadataTypeValues() []SsisObjectMetadataType {
	return []SsisObjectMetadataType{
		SsisObjectMetadataTypeEnvironment,
		SsisObjectMetadataTypeFolder,
		SsisObjectMetadataTypePackage,
		SsisObjectMetadataTypeProject,
	}
}

// ToPtr returns a *SsisObjectMetadataType pointing to the current value.
func (c SsisObjectMetadataType) ToPtr() *SsisObjectMetadataType {
	return &c
}

// StateValue - property configuration state
type StateValue string

const (
	StateValueConsistent   StateValue = "Consistent"
	StateValueInConsistent StateValue = "InConsistent"
	StateValueUpdating     StateValue = "Updating"
)

// PossibleStateValueValues returns the possible values for the StateValue const type.
func PossibleStateValueValues() []StateValue {
	return []StateValue{
		StateValueConsistent,
		StateValueInConsistent,
		StateValueUpdating,
	}
}

// ToPtr returns a *StateValue pointing to the current value.
func (c StateValue) ToPtr() *StateValue {
	return &c
}

// StorageAccountType - The storage account type used to store backups for this sql pool.
type StorageAccountType string

const (
	StorageAccountTypeGRS StorageAccountType = "GRS"
	StorageAccountTypeLRS StorageAccountType = "LRS"
	StorageAccountTypeZRS StorageAccountType = "ZRS"
)

// PossibleStorageAccountTypeValues returns the possible values for the StorageAccountType const type.
func PossibleStorageAccountTypeValues() []StorageAccountType {
	return []StorageAccountType{
		StorageAccountTypeGRS,
		StorageAccountTypeLRS,
		StorageAccountTypeZRS,
	}
}

// ToPtr returns a *StorageAccountType pointing to the current value.
func (c StorageAccountType) ToPtr() *StorageAccountType {
	return &c
}

type TransparentDataEncryptionName string

const (
	TransparentDataEncryptionNameCurrent TransparentDataEncryptionName = "current"
)

// PossibleTransparentDataEncryptionNameValues returns the possible values for the TransparentDataEncryptionName const type.
func PossibleTransparentDataEncryptionNameValues() []TransparentDataEncryptionName {
	return []TransparentDataEncryptionName{
		TransparentDataEncryptionNameCurrent,
	}
}

// ToPtr returns a *TransparentDataEncryptionName pointing to the current value.
func (c TransparentDataEncryptionName) ToPtr() *TransparentDataEncryptionName {
	return &c
}

// TransparentDataEncryptionStatus - The status of the database transparent data encryption.
type TransparentDataEncryptionStatus string

const (
	TransparentDataEncryptionStatusEnabled  TransparentDataEncryptionStatus = "Enabled"
	TransparentDataEncryptionStatusDisabled TransparentDataEncryptionStatus = "Disabled"
)

// PossibleTransparentDataEncryptionStatusValues returns the possible values for the TransparentDataEncryptionStatus const type.
func PossibleTransparentDataEncryptionStatusValues() []TransparentDataEncryptionStatus {
	return []TransparentDataEncryptionStatus{
		TransparentDataEncryptionStatusEnabled,
		TransparentDataEncryptionStatusDisabled,
	}
}

// ToPtr returns a *TransparentDataEncryptionStatus pointing to the current value.
func (c TransparentDataEncryptionStatus) ToPtr() *TransparentDataEncryptionStatus {
	return &c
}

type VulnerabilityAssessmentName string

const (
	VulnerabilityAssessmentNameDefault VulnerabilityAssessmentName = "default"
)

// PossibleVulnerabilityAssessmentNameValues returns the possible values for the VulnerabilityAssessmentName const type.
func PossibleVulnerabilityAssessmentNameValues() []VulnerabilityAssessmentName {
	return []VulnerabilityAssessmentName{
		VulnerabilityAssessmentNameDefault,
	}
}

// ToPtr returns a *VulnerabilityAssessmentName pointing to the current value.
func (c VulnerabilityAssessmentName) ToPtr() *VulnerabilityAssessmentName {
	return &c
}

type VulnerabilityAssessmentPolicyBaselineName string

const (
	VulnerabilityAssessmentPolicyBaselineNameMaster  VulnerabilityAssessmentPolicyBaselineName = "master"
	VulnerabilityAssessmentPolicyBaselineNameDefault VulnerabilityAssessmentPolicyBaselineName = "default"
)

// PossibleVulnerabilityAssessmentPolicyBaselineNameValues returns the possible values for the VulnerabilityAssessmentPolicyBaselineName const type.
func PossibleVulnerabilityAssessmentPolicyBaselineNameValues() []VulnerabilityAssessmentPolicyBaselineName {
	return []VulnerabilityAssessmentPolicyBaselineName{
		VulnerabilityAssessmentPolicyBaselineNameMaster,
		VulnerabilityAssessmentPolicyBaselineNameDefault,
	}
}

// ToPtr returns a *VulnerabilityAssessmentPolicyBaselineName pointing to the current value.
func (c VulnerabilityAssessmentPolicyBaselineName) ToPtr() *VulnerabilityAssessmentPolicyBaselineName {
	return &c
}

// VulnerabilityAssessmentScanState - The scan status.
type VulnerabilityAssessmentScanState string

const (
	VulnerabilityAssessmentScanStateFailed      VulnerabilityAssessmentScanState = "Failed"
	VulnerabilityAssessmentScanStateFailedToRun VulnerabilityAssessmentScanState = "FailedToRun"
	VulnerabilityAssessmentScanStateInProgress  VulnerabilityAssessmentScanState = "InProgress"
	VulnerabilityAssessmentScanStatePassed      VulnerabilityAssessmentScanState = "Passed"
)

// PossibleVulnerabilityAssessmentScanStateValues returns the possible values for the VulnerabilityAssessmentScanState const type.
func PossibleVulnerabilityAssessmentScanStateValues() []VulnerabilityAssessmentScanState {
	return []VulnerabilityAssessmentScanState{
		VulnerabilityAssessmentScanStateFailed,
		VulnerabilityAssessmentScanStateFailedToRun,
		VulnerabilityAssessmentScanStateInProgress,
		VulnerabilityAssessmentScanStatePassed,
	}
}

// ToPtr returns a *VulnerabilityAssessmentScanState pointing to the current value.
func (c VulnerabilityAssessmentScanState) ToPtr() *VulnerabilityAssessmentScanState {
	return &c
}

// VulnerabilityAssessmentScanTriggerType - The scan trigger type.
type VulnerabilityAssessmentScanTriggerType string

const (
	VulnerabilityAssessmentScanTriggerTypeOnDemand  VulnerabilityAssessmentScanTriggerType = "OnDemand"
	VulnerabilityAssessmentScanTriggerTypeRecurring VulnerabilityAssessmentScanTriggerType = "Recurring"
)

// PossibleVulnerabilityAssessmentScanTriggerTypeValues returns the possible values for the VulnerabilityAssessmentScanTriggerType const type.
func PossibleVulnerabilityAssessmentScanTriggerTypeValues() []VulnerabilityAssessmentScanTriggerType {
	return []VulnerabilityAssessmentScanTriggerType{
		VulnerabilityAssessmentScanTriggerTypeOnDemand,
		VulnerabilityAssessmentScanTriggerTypeRecurring,
	}
}

// ToPtr returns a *VulnerabilityAssessmentScanTriggerType pointing to the current value.
func (c VulnerabilityAssessmentScanTriggerType) ToPtr() *VulnerabilityAssessmentScanTriggerType {
	return &c
}

// WorkspacePublicNetworkAccess - Enable or Disable public network access to workspace
type WorkspacePublicNetworkAccess string

const (
	WorkspacePublicNetworkAccessDisabled WorkspacePublicNetworkAccess = "Disabled"
	WorkspacePublicNetworkAccessEnabled  WorkspacePublicNetworkAccess = "Enabled"
)

// PossibleWorkspacePublicNetworkAccessValues returns the possible values for the WorkspacePublicNetworkAccess const type.
func PossibleWorkspacePublicNetworkAccessValues() []WorkspacePublicNetworkAccess {
	return []WorkspacePublicNetworkAccess{
		WorkspacePublicNetworkAccessDisabled,
		WorkspacePublicNetworkAccessEnabled,
	}
}

// ToPtr returns a *WorkspacePublicNetworkAccess pointing to the current value.
func (c WorkspacePublicNetworkAccess) ToPtr() *WorkspacePublicNetworkAccess {
	return &c
}
