//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armsynapse

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"golang.org/x/net/http2"
)

var (
	ctx            context.Context
	subscriptionId string
	cred           azcore.TokenCredential
	err            error
	con            *arm.Connection
	mockHost       string
)

func TestAzureADOnlyAuthentications_Get(t *testing.T) {
	// From example Get Azure Active Directory Only Authentication property
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAzureADOnlyAuthenticationsClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"workspace-6852",
		"workspace-2080",
		AzureADOnlyAuthenticationNameDefault,
		&AzureADOnlyAuthenticationsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.AzureADOnlyAuthentication.ID == nil {
		t.Fatal("AzureADOnlyAuthentication.ID should not be nil!")
	}
}

func TestAzureADOnlyAuthentications_Create(t *testing.T) {
	// From example Create or Update Azure Active Directory Only Authentication property
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAzureADOnlyAuthenticationsClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginCreate(ctx,
		"workspace-6852",
		"workspace-2080",
		AzureADOnlyAuthenticationNameDefault,
		nil,
		&AzureADOnlyAuthenticationsBeginCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.AzureADOnlyAuthentication.ID == nil {
		t.Fatal("AzureADOnlyAuthentication.ID should not be nil!")
	}
}

func TestAzureADOnlyAuthentications_List(t *testing.T) {
	// From example Get a list of Azure Active Directory Only Authentication property
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAzureADOnlyAuthenticationsClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.List("workspace-6852",
		"workspace-2080",
		&AzureADOnlyAuthenticationsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("AzureADOnlyAuthentication.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("AzureADOnlyAuthentication.ID should not be nil!")
			}
		}
	}
}

func TestOperations_CheckNameAvailability(t *testing.T) {
	// From example Check for a workspace name that already exists
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewOperationsClient(con,
		"00000000-1111-2222-3333-444444444444")
	_, err := client.CheckNameAvailability(ctx,
		CheckNameAvailabilityRequest{
			Name: to.StringPtr("workspace1"),
			Type: to.StringPtr("Microsoft.Synapse/workspaces"),
		},
		&OperationsCheckNameAvailabilityOptions{})
	if err != nil {
		t.Fatal(err)
	}

	// From example Check for a workspace name that is available
	_, err = client.CheckNameAvailability(ctx,
		CheckNameAvailabilityRequest{
			Name: to.StringPtr("workspace1"),
			Type: to.StringPtr("Microsoft.ProjectArcadia/workspaces"),
		},
		&OperationsCheckNameAvailabilityOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestOperations_List(t *testing.T) {
	// From example Get available operations
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewOperationsClient(con,
		nil)
	_, err := client.List(ctx,
		&OperationsListOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestOperations_GetLocationHeaderResult(t *testing.T) {
	// From example Get location header result
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewOperationsClient(con,
		"00000000-1111-2222-3333-444444444444")
	_, err := client.GetLocationHeaderResult(ctx,
		"resourceGroup1",
		"workspace1",
		"01234567-89ab-4def-0123-456789abcdef",
		&OperationsGetLocationHeaderResultOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestOperations_GetAzureAsyncHeaderResult(t *testing.T) {
	// From example Get azure async operation header result
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewOperationsClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.GetAzureAsyncHeaderResult(ctx,
		"resourceGroup1",
		"workspace1",
		"01234567-89ab-4def-0123-456789abcdef",
		&OperationsGetAzureAsyncHeaderResultOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.OperationResource.ID == nil {
		t.Fatal("OperationResource.ID should not be nil!")
	}
}

func TestIpFirewallRules_ListByWorkspace(t *testing.T) {
	// From example List IP firewall rules in a workspace
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIPFirewallRulesClient(con,
		"01234567-89ab-4def-0123-456789abcdef")
	pager := client.ListByWorkspace("ExampleResourceGroup",
		"ExampleWorkspace",
		&IPFirewallRulesListByWorkspaceOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("IPFirewallRuleInfo.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("IPFirewallRuleInfo.ID should not be nil!")
			}
		}
	}
}

func TestIpFirewallRules_CreateOrUpdate(t *testing.T) {
	// From example Create an IP firewall rule
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIPFirewallRulesClient(con,
		"01234567-89ab-4def-0123-456789abcdef")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"ExampleResourceGroup",
		"ExampleWorkspace",
		"ExampleIpFirewallRule",
		IPFirewallRuleInfo{
			Properties: &IPFirewallRuleProperties{
				EndIPAddress:   to.StringPtr("10.0.0.254"),
				StartIPAddress: to.StringPtr("10.0.0.0"),
			},
		},
		&IPFirewallRulesBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.IPFirewallRuleInfo.ID == nil {
		t.Fatal("IPFirewallRuleInfo.ID should not be nil!")
	}
}

func TestIpFirewallRules_Delete(t *testing.T) {
	// From example Delete an IP firewall rule from a workspace
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIPFirewallRulesClient(con,
		"01234567-89ab-4def-0123-456789abcdef")
	poller, err := client.BeginDelete(ctx,
		"ExampleResourceGroup",
		"ExampleWorkspace",
		"ExampleIpFirewallRule",
		&IPFirewallRulesBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestIpFirewallRules_Get(t *testing.T) {
	// From example Create an IP firewall rule
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIPFirewallRulesClient(con,
		"01234567-89ab-4def-0123-456789abcdef")
	res, err := client.Get(ctx,
		"ExampleResourceGroup",
		"ExampleWorkspace",
		"ExampleIpFirewallRule",
		&IPFirewallRulesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.IPFirewallRuleInfo.ID == nil {
		t.Fatal("IPFirewallRuleInfo.ID should not be nil!")
	}
}

func TestIpFirewallRules_ReplaceAll(t *testing.T) {
	// From example Replace all IP firewall rules in a workspace
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIPFirewallRulesClient(con,
		"01234567-89ab-4def-0123-456789abcdef")
	poller, err := client.BeginReplaceAll(ctx,
		"ExampleResourceGroup",
		"ExampleWorkspace",
		ReplaceAllIPFirewallRulesRequest{
			IPFirewallRules: map[string]*IPFirewallRuleProperties{
				"AnotherExampleFirewallRule": &IPFirewallRuleProperties{
					EndIPAddress:   to.StringPtr("10.0.1.254"),
					StartIPAddress: to.StringPtr("10.0.1.0"),
				},
				"ExampleFirewallRule": &IPFirewallRuleProperties{
					EndIPAddress:   to.StringPtr("10.0.0.254"),
					StartIPAddress: to.StringPtr("10.0.0.0"),
				},
			},
		},
		&IPFirewallRulesBeginReplaceAllOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestKeys_ListByWorkspace(t *testing.T) {
	// From example List keys in workspace
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewKeysClient(con,
		"01234567-89ab-4def-0123-456789abcdef")
	pager := client.ListByWorkspace("ExampleResourceGroup",
		"ExampleWorkspace",
		&KeysListByWorkspaceOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Key.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Key.ID should not be nil!")
			}
		}
	}
}

func TestKeys_Get(t *testing.T) {
	// From example Get a workspace key
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewKeysClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"ExampleResourceGroup",
		"ExampleWorkspace",
		"somekey",
		&KeysGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Key.ID == nil {
		t.Fatal("Key.ID should not be nil!")
	}
}

func TestKeys_CreateOrUpdate(t *testing.T) {
	// From example Create or update a workspace key
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewKeysClient(con,
		"01234567-89ab-4def-0123-456789abcdef")
	res, err := client.CreateOrUpdate(ctx,
		"ExampleResourceGroup",
		"ExampleWorkspace",
		"somekey",
		Key{
			Properties: &KeyProperties{
				IsActiveCMK: to.BoolPtr(true),
				KeyVaultURL: to.StringPtr("https://vault.azure.net/keys/somesecret"),
			},
		},
		&KeysCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Key.ID == nil {
		t.Fatal("Key.ID should not be nil!")
	}
}

func TestKeys_Delete(t *testing.T) {
	// From example Delete a workspace key
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewKeysClient(con,
		"01234567-89ab-4def-0123-456789abcdef")
	res, err := client.Delete(ctx,
		"ExampleResourceGroup",
		"ExampleWorkspace",
		"somekey",
		&KeysDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Key.ID == nil {
		t.Fatal("Key.ID should not be nil!")
	}
}

func TestPrivateEndpointConnections_Get(t *testing.T) {
	// From example Get private endpoint connection
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateEndpointConnectionsClient(con,
		"01234567-89ab-4def-0123-456789abcdef")
	res, err := client.Get(ctx,
		"ExampleResourceGroup",
		"ExampleWorkspace",
		"ExamplePrivateEndpointConnection",
		&PrivateEndpointConnectionsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.PrivateEndpointConnection.ID == nil {
		t.Fatal("PrivateEndpointConnection.ID should not be nil!")
	}
}

func TestPrivateEndpointConnections_Create(t *testing.T) {
	// From example Approve private endpoint connection
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateEndpointConnectionsClient(con,
		"01234567-89ab-4def-0123-456789abcdef")
	poller, err := client.BeginCreate(ctx,
		"ExampleResourceGroup",
		"ExampleWorkspace",
		"ExamplePrivateEndpointConnection",
		PrivateEndpointConnection{
			Properties: &PrivateEndpointConnectionProperties{
				PrivateLinkServiceConnectionState: &PrivateLinkServiceConnectionState{
					Description: to.StringPtr("Approved by abc@example.com"),
					Status:      to.StringPtr("Approved"),
				},
			},
		},
		&PrivateEndpointConnectionsBeginCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.PrivateEndpointConnection.ID == nil {
		t.Fatal("PrivateEndpointConnection.ID should not be nil!")
	}
}

func TestPrivateEndpointConnections_Delete(t *testing.T) {
	// From example Delete private endpoint connection
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateEndpointConnectionsClient(con,
		"01234567-89ab-4def-0123-456789abcdef")
	poller, err := client.BeginDelete(ctx,
		"ExampleResourceGroup",
		"ExampleWorkspace",
		"ExamplePrivateEndpointConnection",
		&PrivateEndpointConnectionsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.OperationResource.ID == nil {
		t.Fatal("OperationResource.ID should not be nil!")
	}
}

func TestPrivateEndpointConnections_List(t *testing.T) {
	// From example List private endpoint connections in workspace
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateEndpointConnectionsClient(con,
		"01234567-89ab-4def-0123-456789abcdef")
	pager := client.List("ExampleResourceGroup",
		"ExampleWorkspace",
		&PrivateEndpointConnectionsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("PrivateEndpointConnection.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("PrivateEndpointConnection.ID should not be nil!")
			}
		}
	}
}

func TestPrivateLinkResources_List(t *testing.T) {
	// From example Get private link resources for workspace
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateLinkResourcesClient(con,
		"01234567-89ab-4def-0123-456789abcdef")
	pager := client.List("ExampleResourceGroup",
		"ExampleWorkspace",
		&PrivateLinkResourcesListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("PrivateLinkResource.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("PrivateLinkResource.ID should not be nil!")
			}
		}
	}
}

func TestPrivateLinkResources_Get(t *testing.T) {
	// From example Get private link resources for workspace
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateLinkResourcesClient(con,
		"01234567-89ab-4def-0123-456789abcdef")
	res, err := client.Get(ctx,
		"ExampleResourceGroup",
		"ExampleWorkspace",
		"sql",
		&PrivateLinkResourcesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.PrivateLinkResource.ID == nil {
		t.Fatal("PrivateLinkResource.ID should not be nil!")
	}
}

func TestPrivateLinkHubPrivateLinkResources_List(t *testing.T) {
	// From example Get private link resources for private link hub
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateLinkHubPrivateLinkResourcesClient(con,
		"01234567-89ab-4def-0123-456789abcdef")
	pager := client.List("ExampleResourceGroup",
		"ExamplePrivateLinkHub",
		&PrivateLinkHubPrivateLinkResourcesListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("PrivateLinkResource.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("PrivateLinkResource.ID should not be nil!")
			}
		}
	}
}

func TestPrivateLinkHubPrivateLinkResources_Get(t *testing.T) {
	// From example Get private link resources for private link hub
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateLinkHubPrivateLinkResourcesClient(con,
		"01234567-89ab-4def-0123-456789abcdef")
	res, err := client.Get(ctx,
		"ExampleResourceGroup",
		"ExamplePrivateLinkHub",
		"sql",
		&PrivateLinkHubPrivateLinkResourcesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.PrivateLinkResource.ID == nil {
		t.Fatal("PrivateLinkResource.ID should not be nil!")
	}
}

func TestPrivateLinkHubs_ListByResourceGroup(t *testing.T) {
	// From example List privateLinkHubs in resource group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateLinkHubsClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListByResourceGroup("resourceGroup1",
		&PrivateLinkHubsListByResourceGroupOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("PrivateLinkHub.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("PrivateLinkHub.ID should not be nil!")
			}
		}
	}
}

func TestPrivateLinkHubs_Get(t *testing.T) {
	// From example Get a privateLinkHub
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateLinkHubsClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"resourceGroup1",
		"privateLinkHub1",
		&PrivateLinkHubsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.PrivateLinkHub.ID == nil {
		t.Fatal("PrivateLinkHub.ID should not be nil!")
	}
}

func TestPrivateLinkHubs_Update(t *testing.T) {
	// From example Update a privateLinkHub
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateLinkHubsClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Update(ctx,
		"resourceGroup1",
		"privateLinkHub1",
		PrivateLinkHubPatchInfo{
			Tags: map[string]*string{
				"key": to.StringPtr("value"),
			},
		},
		&PrivateLinkHubsUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.PrivateLinkHub.ID == nil {
		t.Fatal("PrivateLinkHub.ID should not be nil!")
	}
}

func TestPrivateLinkHubs_CreateOrUpdate(t *testing.T) {
	// From example Create or update a privateLinkHub
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateLinkHubsClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.CreateOrUpdate(ctx,
		"resourceGroup1",
		"privateLinkHub1",
		PrivateLinkHub{
			TrackedResource: TrackedResource{
				Location: to.StringPtr("East US"),
				Tags: map[string]*string{
					"key": to.StringPtr("value"),
				},
			},
			Properties: &PrivateLinkHubProperties{},
		},
		&PrivateLinkHubsCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.PrivateLinkHub.ID == nil {
		t.Fatal("PrivateLinkHub.ID should not be nil!")
	}
}

func TestPrivateLinkHubs_Delete(t *testing.T) {
	// From example Delete a privateLinkHub
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateLinkHubsClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginDelete(ctx,
		"resourceGroup1",
		"privateLinkHub1",
		&PrivateLinkHubsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestPrivateLinkHubs_List(t *testing.T) {
	// From example List privateLinkHubs in subscription
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateLinkHubsClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.List(&PrivateLinkHubsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("PrivateLinkHub.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("PrivateLinkHub.ID should not be nil!")
			}
		}
	}
}

func TestPrivateEndpointConnectionsPrivateLinkHub_List(t *testing.T) {
	// From example Get a privateLinkHub
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateEndpointConnectionsPrivateLinkHubClient(con,
		"48b08652-d7a1-4d52-b13f-5a2471dce57b")
	pager := client.List("gh-res-grp",
		"pe0",
		&PrivateEndpointConnectionsPrivateLinkHubListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("PrivateEndpointConnectionForPrivateLinkHub.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("PrivateEndpointConnectionForPrivateLinkHub.ID should not be nil!")
			}
		}
	}
}

func TestPrivateEndpointConnectionsPrivateLinkHub_Get(t *testing.T) {
	// From example Get a privateLinkHub
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateEndpointConnectionsPrivateLinkHubClient(con,
		"48b08652-d7a1-4d52-b13f-5a2471dce57b")
	res, err := client.Get(ctx,
		"gh-res-grp",
		"pe0",
		"pe0-f3ed30f5-338c-4855-a542-24a403694ad2",
		&PrivateEndpointConnectionsPrivateLinkHubGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.PrivateEndpointConnectionForPrivateLinkHub.ID == nil {
		t.Fatal("PrivateEndpointConnectionForPrivateLinkHub.ID should not be nil!")
	}
}

func TestSqlPools_Get(t *testing.T) {
	// From example Get a SQL Analytics pool
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSQLPoolsClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"sqlcrudtest-6852",
		"sqlcrudtest-2080",
		"sqlcrudtest-9187",
		&SQLPoolsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.SQLPool.ID == nil {
		t.Fatal("SQLPool.ID should not be nil!")
	}
}

func TestSqlPools_Update(t *testing.T) {
	// From example Update a SQL Analytics pool
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSQLPoolsClient(con,
		"01234567-89ab-4def-0123-456789abcdef")
	res, err := client.Update(ctx,
		"ExampleResourceGroup",
		"ExampleWorkspace",
		"ExampleSqlPool",
		SQLPoolPatchInfo{
			Location: to.StringPtr("West US 2"),
			Properties: &SQLPoolResourceProperties{
				Collation:             to.StringPtr(""),
				CreateMode:            to.StringPtr(""),
				CreationDate:          to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "1970-01-01T00:00:00.000Z"); return t }()),
				MaxSizeBytes:          to.Int64Ptr(0),
				RecoverableDatabaseID: to.StringPtr(""),
				RestorePointInTime:    to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "1970-01-01T00:00:00.000Z"); return t }()),
				SourceDatabaseID:      to.StringPtr(""),
			},
			SKU: &SKU{
				Name: to.StringPtr(""),
				Tier: to.StringPtr(""),
			},
			Tags: map[string]*string{},
		},
		&SQLPoolsUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.SQLPool.ID == nil {
		t.Fatal("SQLPool.ID should not be nil!")
	}
}

func TestSqlPools_Create(t *testing.T) {
	// From example Create a SQL Analytics pool
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSQLPoolsClient(con,
		"01234567-89ab-4def-0123-456789abcdef")
	poller, err := client.BeginCreate(ctx,
		"ExampleResourceGroup",
		"ExampleWorkspace",
		"ExampleSqlPool",
		SQLPool{
			TrackedResource: TrackedResource{
				Location: to.StringPtr("Southeast Asia"),
				Tags:     map[string]*string{},
			},
			Properties: &SQLPoolResourceProperties{
				Collation:             to.StringPtr(""),
				CreateMode:            to.StringPtr(""),
				MaxSizeBytes:          to.Int64Ptr(0),
				RecoverableDatabaseID: to.StringPtr(""),
				SourceDatabaseID:      to.StringPtr(""),
				StorageAccountType:    StorageAccountTypeLRS.ToPtr(),
			},
			SKU: &SKU{
				Name: to.StringPtr(""),
				Tier: to.StringPtr(""),
			},
		},
		&SQLPoolsBeginCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.SQLPool.ID == nil {
		t.Fatal("SQLPool.ID should not be nil!")
	}
}

func TestSqlPools_Delete(t *testing.T) {
	// From example Delete a SQL Analytics pool
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSQLPoolsClient(con,
		"01234567-89ab-4def-0123-456789abcdef")
	poller, err := client.BeginDelete(ctx,
		"ExampleResourceGroup",
		"ExampleWorkspace",
		"ExampleSqlPool",
		&SQLPoolsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestSqlPools_ListByWorkspace(t *testing.T) {
	// From example List SQL Analytics pools in a workspace
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSQLPoolsClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListByWorkspace("sqlcrudtest-6845",
		"sqlcrudtest-7177",
		&SQLPoolsListByWorkspaceOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("SQLPool.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("SQLPool.ID should not be nil!")
			}
		}
	}

	// From example List SQL Analytics pools in a workspace with filter
	pager = client.ListByWorkspace("sqlcrudtest-6845",
		"sqlcrudtest-7177",
		&SQLPoolsListByWorkspaceOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("SQLPool.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("SQLPool.ID should not be nil!")
			}
		}
	}
}

func TestSqlPools_Pause(t *testing.T) {
	// From example Pause a SQL Analytics pool
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSQLPoolsClient(con,
		"01234567-89ab-4def-0123-456789abcdef")
	poller, err := client.BeginPause(ctx,
		"Default-SQL-SouthEastAsia",
		"testsvr",
		"testdwdb",
		&SQLPoolsBeginPauseOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestSqlPools_Resume(t *testing.T) {
	// From example Resume a SQL Analytics pool
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSQLPoolsClient(con,
		"01234567-89ab-4def-0123-456789abcdef")
	poller, err := client.BeginResume(ctx,
		"sqlcrudtest-6852",
		"sqlcrudtest-2080",
		"sqlcrudtest-9187",
		&SQLPoolsBeginResumeOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestSqlPools_Rename(t *testing.T) {
	// From example Rename a SQL Analytics pool
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSQLPoolsClient(con,
		"00000000-1111-2222-3333-444444444444")
	_, err := client.Rename(ctx,
		"Default-SQL-SouthEastAsia",
		"testsvr",
		"testdb",
		ResourceMoveDefinition{
			ID: to.StringPtr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Synapse/workspaces/testsvr/sqlPools/newtestdb"),
		},
		&SQLPoolsRenameOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestSqlPoolMetadataSyncConfigs_Get(t *testing.T) {
	// From example Get metadata sync config for a SQL Analytics pool
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSQLPoolMetadataSyncConfigsClient(con,
		"01234567-89ab-4def-0123-456789abcdef")
	res, err := client.Get(ctx,
		"ExampleResourceGroup",
		"ExampleWorkspace",
		"ExampleSqlPool",
		&SQLPoolMetadataSyncConfigsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.MetadataSyncConfig.ID == nil {
		t.Fatal("MetadataSyncConfig.ID should not be nil!")
	}
}

func TestSqlPoolMetadataSyncConfigs_Create(t *testing.T) {
	// From example Set metadata sync config for a SQL Analytics pool
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSQLPoolMetadataSyncConfigsClient(con,
		"01234567-89ab-4def-0123-456789abcdef")
	res, err := client.Create(ctx,
		"ExampleResourceGroup",
		"ExampleWorkspace",
		"ExampleSqlPool",
		MetadataSyncConfig{
			Properties: &MetadataSyncConfigProperties{
				Enabled: to.BoolPtr(true),
			},
		},
		&SQLPoolMetadataSyncConfigsCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.MetadataSyncConfig.ID == nil {
		t.Fatal("MetadataSyncConfig.ID should not be nil!")
	}
}

func TestSqlPoolOperationResults_GetLocationHeaderResult(t *testing.T) {
	// From example Get the result of an operation on a SQL Analytics pool
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSQLPoolOperationResultsClient(con,
		"01234567-89ab-4def-0123-456789abcdef")
	_, err := client.GetLocationHeaderResult(ctx,
		"ExampleResourceGroup",
		"ExampleWorkspace",
		"ExampleSqlPool",
		"fedcba98-7654-4210-fedc-ba9876543210",
		&SQLPoolOperationResultsGetLocationHeaderResultOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestSqlPoolGeoBackupPolicies_List(t *testing.T) {
	// From example Get Sql pool geo backup policy
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSQLPoolGeoBackupPoliciesClient(con,
		"00000000-1111-2222-3333-444444444444")
	_, err := client.List(ctx,
		"sqlcrudtest-4799",
		"sqlcrudtest-5961",
		"testdw",
		&SQLPoolGeoBackupPoliciesListOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestSqlPoolGeoBackupPolicies_CreateOrUpdate(t *testing.T) {
	// From example Create geo backup policy
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSQLPoolGeoBackupPoliciesClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.CreateOrUpdate(ctx,
		"testrg",
		"testws",
		"testdw",
		GeoBackupPolicyNameDefault,
		GeoBackupPolicy{
			Properties: &GeoBackupPolicyProperties{
				State: GeoBackupPolicyStateEnabled.ToPtr(),
			},
		},
		&SQLPoolGeoBackupPoliciesCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.GeoBackupPolicy.ID == nil {
		t.Fatal("GeoBackupPolicy.ID should not be nil!")
	}
}

func TestSqlPoolGeoBackupPolicies_Get(t *testing.T) {
	// From example Get Sql pool geo backup policy
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSQLPoolGeoBackupPoliciesClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"sqlcrudtest-4799",
		"sqlcrudtest-5961",
		"testdw",
		GeoBackupPolicyNameDefault,
		&SQLPoolGeoBackupPoliciesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.GeoBackupPolicy.ID == nil {
		t.Fatal("GeoBackupPolicy.ID should not be nil!")
	}
}

func TestSqlPoolDataWarehouseUserActivities_Get(t *testing.T) {
	// From example Get a SQL Analytics pool user activity
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSQLPoolDataWarehouseUserActivitiesClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"Default-SQL-SouthEastAsia",
		"testsvr",
		"testdb",
		DataWarehouseUserActivityNameCurrent,
		&SQLPoolDataWarehouseUserActivitiesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DataWarehouseUserActivities.ID == nil {
		t.Fatal("DataWarehouseUserActivities.ID should not be nil!")
	}
}

func TestSqlPoolRestorePoints_List(t *testing.T) {
	// From example Get a list of restore points of a SQL Analytics pool
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSQLPoolRestorePointsClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.List("Default-SQL-SouthEastAsia",
		"testserver",
		"testDatabase",
		&SQLPoolRestorePointsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("RestorePoint.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("RestorePoint.ID should not be nil!")
			}
		}
	}
}

func TestSqlPoolRestorePoints_Create(t *testing.T) {
	// From example Creates Sql pool restore point.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSQLPoolRestorePointsClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginCreate(ctx,
		"Default-SQL-SouthEastAsia",
		"testserver",
		"testDatabase",
		CreateSQLPoolRestorePointDefinition{
			RestorePointLabel: to.StringPtr("mylabel"),
		},
		&SQLPoolRestorePointsBeginCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.RestorePoint.ID == nil {
		t.Fatal("RestorePoint.ID should not be nil!")
	}
}

func TestSqlPoolRestorePoints_Get(t *testing.T) {
	// From example Gets a Sql pool restore point.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSQLPoolRestorePointsClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"Default-SQL-SouthEastAsia",
		"testws",
		"testpool",
		"131546477590000000",
		&SQLPoolRestorePointsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.RestorePoint.ID == nil {
		t.Fatal("RestorePoint.ID should not be nil!")
	}
}

func TestSqlPoolRestorePoints_Delete(t *testing.T) {
	// From example Deletes a restore point.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSQLPoolRestorePointsClient(con,
		"00000000-1111-2222-3333-444444444444")
	_, err := client.Delete(ctx,
		"Default-SQL-SouthEastAsia",
		"testws",
		"testpool",
		"131546477590000000",
		&SQLPoolRestorePointsDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestSqlPoolReplicationLinks_List(t *testing.T) {
	// From example Lists a Sql Analytic pool's replication links
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSQLPoolReplicationLinksClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.List("sqlcrudtest-4799",
		"sqlcrudtest-6440",
		"testdb",
		&SQLPoolReplicationLinksListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ReplicationLink.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ReplicationLink.ID should not be nil!")
			}
		}
	}
}

func TestSqlPoolReplicationLinks_GetByName(t *testing.T) {
	// From example Lists a Sql Analytic pool's replication links
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSQLPoolReplicationLinksClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.GetByName(ctx,
		"sqlcrudtest-4799",
		"sqlcrudtest-6440",
		"testdb",
		"5b301b68-03f6-4b26-b0f4-73ebb8634238",
		&SQLPoolReplicationLinksGetByNameOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ReplicationLink.ID == nil {
		t.Fatal("ReplicationLink.ID should not be nil!")
	}
}

func TestSqlPoolMaintenanceWindows_Get(t *testing.T) {
	// From example Gets maintenance window settings for a selected SQL Analytics pool.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSQLPoolMaintenanceWindowsClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"samplerg",
		"testworkspace",
		"testsp",
		"current",
		&SQLPoolMaintenanceWindowsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.MaintenanceWindows.ID == nil {
		t.Fatal("MaintenanceWindows.ID should not be nil!")
	}
}

func TestSqlPoolMaintenanceWindows_CreateOrUpdate(t *testing.T) {
	// From example Sets maintenance window settings for a selected SQL Analytics Pool.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSQLPoolMaintenanceWindowsClient(con,
		"00000000-1111-2222-3333-444444444444")
	_, err := client.CreateOrUpdate(ctx,
		"samplerg",
		"testworkspace",
		"testsp",
		"current",
		MaintenanceWindows{
			Properties: &MaintenanceWindowsProperties{
				TimeRanges: []*MaintenanceWindowTimeRange{
					{
						DayOfWeek: DayOfWeekSaturday.ToPtr(),
						Duration:  to.StringPtr("PT60M"),
						StartTime: to.StringPtr("00:00:00"),
					}},
			},
		},
		&SQLPoolMaintenanceWindowsCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestSqlPoolMaintenanceWindowOptions_Get(t *testing.T) {
	// From example Get list of transparent data encryption configurations of a SQL Analytics pool
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSQLPoolMaintenanceWindowOptionsClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"samplerg",
		"testworkspace",
		"testsp",
		"current",
		&SQLPoolMaintenanceWindowOptionsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.MaintenanceWindowOptions.ID == nil {
		t.Fatal("MaintenanceWindowOptions.ID should not be nil!")
	}
}

func TestSqlPoolTransparentDataEncryptions_Get(t *testing.T) {
	// From example Get transparent data encryption configuration of a SQL Analytics pool
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSQLPoolTransparentDataEncryptionsClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"sqlcrudtest-6852",
		"sqlcrudtest-2080",
		"sqlcrudtest-9187",
		TransparentDataEncryptionNameCurrent,
		&SQLPoolTransparentDataEncryptionsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.TransparentDataEncryption.ID == nil {
		t.Fatal("TransparentDataEncryption.ID should not be nil!")
	}
}

func TestSqlPoolTransparentDataEncryptions_CreateOrUpdate(t *testing.T) {
	// From example Create or update a Sql pool's transparent data encryption configuration
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSQLPoolTransparentDataEncryptionsClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.CreateOrUpdate(ctx,
		"sqlcrudtest-6852",
		"sqlcrudtest-2080",
		"sqlcrudtest-9187",
		TransparentDataEncryptionNameCurrent,
		TransparentDataEncryption{
			Properties: &TransparentDataEncryptionProperties{
				Status: TransparentDataEncryptionStatusEnabled.ToPtr(),
			},
		},
		&SQLPoolTransparentDataEncryptionsCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.TransparentDataEncryption.ID == nil {
		t.Fatal("TransparentDataEncryption.ID should not be nil!")
	}
}

func TestSqlPoolTransparentDataEncryptions_List(t *testing.T) {
	// From example Get list of transparent data encryption configurations of a SQL Analytics pool
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSQLPoolTransparentDataEncryptionsClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.List("sqlcrudtest-6852",
		"sqlcrudtest-2080",
		"sqlcrudtest-9187",
		&SQLPoolTransparentDataEncryptionsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("TransparentDataEncryption.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("TransparentDataEncryption.ID should not be nil!")
			}
		}
	}
}

func TestSqlPoolBlobAuditingPolicies_Get(t *testing.T) {
	// From example Get blob auditing policy of a SQL Analytics pool
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSQLPoolBlobAuditingPoliciesClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"blobauditingtest-6852",
		"blobauditingtest-2080",
		"testdb",
		Enum10Default,
		&SQLPoolBlobAuditingPoliciesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.SQLPoolBlobAuditingPolicy.ID == nil {
		t.Fatal("SQLPoolBlobAuditingPolicy.ID should not be nil!")
	}
}

func TestSqlPoolBlobAuditingPolicies_CreateOrUpdate(t *testing.T) {
	// From example Create or update a database's blob auditing policy with all parameters
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSQLPoolBlobAuditingPoliciesClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.CreateOrUpdate(ctx,
		"blobauditingtest-4799",
		"blobauditingtest-6440",
		"testdb",
		Enum10Default,
		SQLPoolBlobAuditingPolicy{
			Properties: &SQLPoolBlobAuditingPolicyProperties{
				AuditActionsAndGroups: []*string{
					to.StringPtr("DATABASE_LOGOUT_GROUP"),
					to.StringPtr("DATABASE_ROLE_MEMBER_CHANGE_GROUP"),
					to.StringPtr("UPDATE on database::TestDatabaseName by public")},
				IsAzureMonitorTargetEnabled:  to.BoolPtr(true),
				IsStorageSecondaryKeyInUse:   to.BoolPtr(false),
				RetentionDays:                to.Int32Ptr(6),
				State:                        BlobAuditingPolicyStateEnabled.ToPtr(),
				StorageAccountAccessKey:      to.StringPtr("sdlfkjabc+sdlfkjsdlkfsjdfLDKFTERLKFDFKLjsdfksjdflsdkfD2342309432849328476458/3RSD=="),
				StorageAccountSubscriptionID: to.StringPtr("00000000-1234-0000-5678-000000000000"),
				StorageEndpoint:              to.StringPtr("https://mystorage.blob.core.windows.net"),
			},
		},
		&SQLPoolBlobAuditingPoliciesCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.SQLPoolBlobAuditingPolicy.ID == nil {
		t.Fatal("SQLPoolBlobAuditingPolicy.ID should not be nil!")
	}

	// From example Create or update a database's blob auditing policy with minimal parameters
	res, err = client.CreateOrUpdate(ctx,
		"blobauditingtest-4799",
		"blobauditingtest-6440",
		"testdb",
		Enum10Default,
		SQLPoolBlobAuditingPolicy{
			Properties: &SQLPoolBlobAuditingPolicyProperties{
				State:                   BlobAuditingPolicyStateEnabled.ToPtr(),
				StorageAccountAccessKey: to.StringPtr("sdlfkjabc+sdlfkjsdlkfsjdfLDKFTERLKFDFKLjsdfksjdflsdkfD2342309432849328476458/3RSD=="),
				StorageEndpoint:         to.StringPtr("https://mystorage.blob.core.windows.net"),
			},
		},
		&SQLPoolBlobAuditingPoliciesCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.SQLPoolBlobAuditingPolicy.ID == nil {
		t.Fatal("SQLPoolBlobAuditingPolicy.ID should not be nil!")
	}
}

func TestSqlPoolBlobAuditingPolicies_ListBySqlPool(t *testing.T) {
	// From example List audit settings of a database
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSQLPoolBlobAuditingPoliciesClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListBySQLPool("blobauditingtest-6852",
		"blobauditingtest-2080",
		"testdb",
		&SQLPoolBlobAuditingPoliciesListBySQLPoolOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("SQLPoolBlobAuditingPolicy.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("SQLPoolBlobAuditingPolicy.ID should not be nil!")
			}
		}
	}
}

func TestSqlPoolOperations_List(t *testing.T) {
	// From example List the Sql Analytics pool management operations
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSQLPoolOperationsClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.List("sqlcrudtest-7398",
		"sqlcrudtest-4645",
		"testdb",
		&SQLPoolOperationsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("SQLPoolOperation.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("SQLPoolOperation.ID should not be nil!")
			}
		}
	}
}

func TestSqlPoolUsages_List(t *testing.T) {
	// From example List the usages of a SQL Analytics pool
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSQLPoolUsagesClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.List("sqlcrudtest-6730",
		"sqlcrudtest-9007",
		"3481",
		&SQLPoolUsagesListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
	}
}

func TestSqlPoolSensitivityLabels_ListCurrent(t *testing.T) {
	// From example Gets the current sensitivity labels of a given SQL Analytics pool
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSQLPoolSensitivityLabelsClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListCurrent("myRG",
		"myServer",
		"myDatabase",
		&SQLPoolSensitivityLabelsListCurrentOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("SensitivityLabel.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("SensitivityLabel.ID should not be nil!")
			}
		}
	}
}

func TestSqlPoolSensitivityLabels_Update(t *testing.T) {
	// From example Update sensitivity labels of a given database using an operations batch.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSQLPoolSensitivityLabelsClient(con,
		"00000000-1111-2222-3333-444444444444")
	_, err := client.Update(ctx,
		"myRG",
		"myWorkspace",
		"mySqlPool",
		SensitivityLabelUpdateList{
			Operations: []*SensitivityLabelUpdate{
				{
					Properties: &SensitivityLabelUpdateProperties{
						Schema: to.StringPtr("dbo"),
						Column: to.StringPtr("column1"),
						Op:     SensitivityLabelUpdateKindSet.ToPtr(),
						SensitivityLabel: &SensitivityLabel{
							Properties: &SensitivityLabelProperties{
								InformationType:   to.StringPtr("Financial"),
								InformationTypeID: to.StringPtr("1D3652D6-422C-4115-82F1-65DAEBC665C8"),
								LabelID:           to.StringPtr("3A477B16-9423-432B-AA97-6069B481CEC3"),
								LabelName:         to.StringPtr("Highly Confidential"),
								Rank:              SensitivityLabelRankLow.ToPtr(),
							},
						},
						Table: to.StringPtr("table1"),
					},
				},
				{
					Properties: &SensitivityLabelUpdateProperties{
						Schema: to.StringPtr("dbo"),
						Column: to.StringPtr("column2"),
						Op:     SensitivityLabelUpdateKindSet.ToPtr(),
						SensitivityLabel: &SensitivityLabel{
							Properties: &SensitivityLabelProperties{
								InformationType:   to.StringPtr("PhoneNumber"),
								InformationTypeID: to.StringPtr("d22fa6e9-5ee4-3bde-4c2b-a409604c4646"),
								LabelID:           to.StringPtr("bf91e08c-f4f0-478a-b016-25164b2a65ff"),
								LabelName:         to.StringPtr("PII"),
								Rank:              SensitivityLabelRankCritical.ToPtr(),
							},
						},
						Table: to.StringPtr("table2"),
					},
				},
				{
					Properties: &SensitivityLabelUpdateProperties{
						Schema: to.StringPtr("dbo"),
						Column: to.StringPtr("Column3"),
						Op:     SensitivityLabelUpdateKindRemove.ToPtr(),
						Table:  to.StringPtr("Table1"),
					},
				}},
		},
		&SQLPoolSensitivityLabelsUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestSqlPoolSensitivityLabels_ListRecommended(t *testing.T) {
	// From example Gets the recommended sensitivity labels of a given SQL Analytics pool
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSQLPoolSensitivityLabelsClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListRecommended("myRG",
		"myServer",
		"myDatabase",
		&SQLPoolSensitivityLabelsListRecommendedOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("SensitivityLabel.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("SensitivityLabel.ID should not be nil!")
			}
		}
	}
}

func TestSqlPoolSensitivityLabels_CreateOrUpdate(t *testing.T) {
	// From example Updates the sensitivity label of a given column with all parameters
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSQLPoolSensitivityLabelsClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.CreateOrUpdate(ctx,
		"myRG",
		"myServer",
		"myDatabase",
		"dbo",
		"myTable",
		"myColumn",
		SensitivityLabel{
			Properties: &SensitivityLabelProperties{
				InformationType:   to.StringPtr("PhoneNumber"),
				InformationTypeID: to.StringPtr("d22fa6e9-5ee4-3bde-4c2b-a409604c4646"),
				LabelID:           to.StringPtr("bf91e08c-f4f0-478a-b016-25164b2a65ff"),
				LabelName:         to.StringPtr("PII"),
			},
		},
		&SQLPoolSensitivityLabelsCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.SensitivityLabel.ID == nil {
		t.Fatal("SensitivityLabel.ID should not be nil!")
	}
}

func TestSqlPoolSensitivityLabels_Delete(t *testing.T) {
	// From example Deletes the sensitivity label of a given column
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSQLPoolSensitivityLabelsClient(con,
		"00000000-1111-2222-3333-444444444444")
	_, err := client.Delete(ctx,
		"myRG",
		"myServer",
		"myDatabase",
		"dbo",
		"myTable",
		"myColumn",
		&SQLPoolSensitivityLabelsDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestSqlPoolSensitivityLabels_Get(t *testing.T) {
	// From example Gets the sensitivity label of a given column
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSQLPoolSensitivityLabelsClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"myRG",
		"myServer",
		"myDatabase",
		"dbo",
		"myTable",
		"myColumn",
		SensitivityLabelSourceCurrent,
		&SQLPoolSensitivityLabelsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.SensitivityLabel.ID == nil {
		t.Fatal("SensitivityLabel.ID should not be nil!")
	}
}

func TestSqlPoolSensitivityLabels_EnableRecommendation(t *testing.T) {
	// From example Enables sensitivity recommendations on a given column
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSQLPoolSensitivityLabelsClient(con,
		"00000000-1111-2222-3333-444444444444")
	_, err := client.EnableRecommendation(ctx,
		"myRG",
		"myServer",
		"myDatabase",
		"dbo",
		"myTable",
		"myColumn",
		&SQLPoolSensitivityLabelsEnableRecommendationOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestSqlPoolSensitivityLabels_DisableRecommendation(t *testing.T) {
	// From example Disables sensitivity recommendations on a given column
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSQLPoolSensitivityLabelsClient(con,
		"00000000-1111-2222-3333-444444444444")
	_, err := client.DisableRecommendation(ctx,
		"myRG",
		"myServer",
		"myDatabase",
		"dbo",
		"myTable",
		"myColumn",
		&SQLPoolSensitivityLabelsDisableRecommendationOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestSqlPoolRecommendedSensitivityLabels_Update(t *testing.T) {
	// From example Update recommended sensitivity labels of a given SQL Pool using an operations batch.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSQLPoolRecommendedSensitivityLabelsClient(con,
		"00000000-1111-2222-3333-444444444444")
	_, err := client.Update(ctx,
		"myRG",
		"myWorkspace",
		"mySqlPool",
		RecommendedSensitivityLabelUpdateList{
			Operations: []*RecommendedSensitivityLabelUpdate{
				{
					Properties: &RecommendedSensitivityLabelUpdateProperties{
						Schema: to.StringPtr("dbo"),
						Column: to.StringPtr("column1"),
						Op:     RecommendedSensitivityLabelUpdateKindEnable.ToPtr(),
						Table:  to.StringPtr("table1"),
					},
				},
				{
					Properties: &RecommendedSensitivityLabelUpdateProperties{
						Schema: to.StringPtr("dbo"),
						Column: to.StringPtr("column2"),
						Op:     RecommendedSensitivityLabelUpdateKindEnable.ToPtr(),
						Table:  to.StringPtr("table2"),
					},
				},
				{
					Properties: &RecommendedSensitivityLabelUpdateProperties{
						Schema: to.StringPtr("dbo"),
						Column: to.StringPtr("column3"),
						Op:     RecommendedSensitivityLabelUpdateKindDisable.ToPtr(),
						Table:  to.StringPtr("table1"),
					},
				}},
		},
		&SQLPoolRecommendedSensitivityLabelsUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestSqlPoolSchemas_List(t *testing.T) {
	// From example List the schema in a SQL Analytics pool
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSQLPoolSchemasClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.List("myRG",
		"serverName",
		"myDatabase",
		&SQLPoolSchemasListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("SQLPoolSchema.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("SQLPoolSchema.ID should not be nil!")
			}
		}
	}
}

func TestSqlPoolSchemas_Get(t *testing.T) {
	// From example Get database schema
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSQLPoolSchemasClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"myRG",
		"serverName",
		"myDatabase",
		"dbo",
		&SQLPoolSchemasGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.SQLPoolSchema.ID == nil {
		t.Fatal("SQLPoolSchema.ID should not be nil!")
	}
}

func TestSqlPoolTables_ListBySchema(t *testing.T) {
	// From example List the tables of a given schema in a SQL Analytics pool
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSQLPoolTablesClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListBySchema("myRG",
		"serverName",
		"myDatabase",
		"dbo",
		&SQLPoolTablesListBySchemaOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("SQLPoolTable.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("SQLPoolTable.ID should not be nil!")
			}
		}
	}
}

func TestSqlPoolTables_Get(t *testing.T) {
	// From example Get database table
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSQLPoolTablesClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"myRG",
		"serverName",
		"myDatabase",
		"dbo",
		"table1",
		&SQLPoolTablesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.SQLPoolTable.ID == nil {
		t.Fatal("SQLPoolTable.ID should not be nil!")
	}
}

func TestSqlPoolTableColumns_ListByTableName(t *testing.T) {
	// From example List the columns in a table of a given schema in a SQL Analytics pool
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSQLPoolTableColumnsClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListByTableName("myRG",
		"serverName",
		"myDatabase",
		"dbo",
		"table1",
		&SQLPoolTableColumnsListByTableNameOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("SQLPoolColumn.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("SQLPoolColumn.ID should not be nil!")
			}
		}
	}
}

func TestSqlPoolConnectionPolicies_Get(t *testing.T) {
	// From example Get a connection policy of a SQL Analytics pool
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSQLPoolConnectionPoliciesClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"blobauditingtest-6852",
		"blobauditingtest-2080",
		"testdb",
		ConnectionPolicyNameDefault,
		&SQLPoolConnectionPoliciesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.SQLPoolConnectionPolicy.ID == nil {
		t.Fatal("SQLPoolConnectionPolicy.ID should not be nil!")
	}
}

func TestSqlPoolVulnerabilityAssessments_List(t *testing.T) {
	// From example Get a vulnerability assessment of a SQL Analytics pool
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSQLPoolVulnerabilityAssessmentsClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.List("vulnerabilityaseessmenttest-4799",
		"vulnerabilityaseessmenttest-6440",
		"testdb",
		&SQLPoolVulnerabilityAssessmentsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("SQLPoolVulnerabilityAssessment.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("SQLPoolVulnerabilityAssessment.ID should not be nil!")
			}
		}
	}
}

func TestSqlPoolVulnerabilityAssessments_Get(t *testing.T) {
	// From example Get a Sql pool's vulnerability assessment
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSQLPoolVulnerabilityAssessmentsClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"vulnerabilityaseessmenttest-4799",
		"vulnerabilityaseessmenttest-6440",
		"testdb",
		VulnerabilityAssessmentNameDefault,
		&SQLPoolVulnerabilityAssessmentsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.SQLPoolVulnerabilityAssessment.ID == nil {
		t.Fatal("SQLPoolVulnerabilityAssessment.ID should not be nil!")
	}
}

func TestSqlPoolVulnerabilityAssessments_CreateOrUpdate(t *testing.T) {
	// From example Create a database's vulnerability assessment with all parameters
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSQLPoolVulnerabilityAssessmentsClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.CreateOrUpdate(ctx,
		"vulnerabilityaseessmenttest-4799",
		"vulnerabilityaseessmenttest-6440",
		"testdb",
		VulnerabilityAssessmentNameDefault,
		SQLPoolVulnerabilityAssessment{
			Properties: &SQLPoolVulnerabilityAssessmentProperties{
				RecurringScans: &VulnerabilityAssessmentRecurringScansProperties{
					EmailSubscriptionAdmins: to.BoolPtr(true),
					Emails: []*string{
						to.StringPtr("email1@mail.com"),
						to.StringPtr("email2@mail.com")},
					IsEnabled: to.BoolPtr(true),
				},
				StorageAccountAccessKey: to.StringPtr("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"),
				StorageContainerPath:    to.StringPtr("https://myStorage.blob.core.windows.net/vulnerability-assessment/"),
				StorageContainerSasKey:  to.StringPtr("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"),
			},
		},
		&SQLPoolVulnerabilityAssessmentsCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.SQLPoolVulnerabilityAssessment.ID == nil {
		t.Fatal("SQLPoolVulnerabilityAssessment.ID should not be nil!")
	}

	// From example Create a database's vulnerability assessment with minimal parameters, when storageAccountAccessKey is specified
	res, err = client.CreateOrUpdate(ctx,
		"vulnerabilityaseessmenttest-4799",
		"vulnerabilityaseessmenttest-6440",
		"testdb",
		VulnerabilityAssessmentNameDefault,
		SQLPoolVulnerabilityAssessment{
			Properties: &SQLPoolVulnerabilityAssessmentProperties{
				StorageAccountAccessKey: to.StringPtr("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"),
				StorageContainerPath:    to.StringPtr("https://myStorage.blob.core.windows.net/vulnerability-assessment/"),
			},
		},
		&SQLPoolVulnerabilityAssessmentsCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.SQLPoolVulnerabilityAssessment.ID == nil {
		t.Fatal("SQLPoolVulnerabilityAssessment.ID should not be nil!")
	}

	// From example Create a database's vulnerability assessment with minimal parameters, when storageContainerSasKey is specified
	res, err = client.CreateOrUpdate(ctx,
		"vulnerabilityaseessmenttest-4799",
		"vulnerabilityaseessmenttest-6440",
		"testdb",
		VulnerabilityAssessmentNameDefault,
		SQLPoolVulnerabilityAssessment{
			Properties: &SQLPoolVulnerabilityAssessmentProperties{
				StorageContainerPath:   to.StringPtr("https://myStorage.blob.core.windows.net/vulnerability-assessment/"),
				StorageContainerSasKey: to.StringPtr("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"),
			},
		},
		&SQLPoolVulnerabilityAssessmentsCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.SQLPoolVulnerabilityAssessment.ID == nil {
		t.Fatal("SQLPoolVulnerabilityAssessment.ID should not be nil!")
	}
}

func TestSqlPoolVulnerabilityAssessments_Delete(t *testing.T) {
	// From example Remove a database's vulnerability assessment
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSQLPoolVulnerabilityAssessmentsClient(con,
		"00000000-1111-2222-3333-444444444444")
	_, err := client.Delete(ctx,
		"vulnerabilityaseessmenttest-4799",
		"vulnerabilityaseessmenttest-6440",
		"testdb",
		VulnerabilityAssessmentNameDefault,
		&SQLPoolVulnerabilityAssessmentsDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestSqlPoolVulnerabilityAssessmentScans_List(t *testing.T) {
	// From example Get a vulnerability scan record of a SQL Analytics pool
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSQLPoolVulnerabilityAssessmentScansClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.List("vulnerabilityassessmenttest-4711",
		"vulnerabilityassessmenttest-6411",
		"testdb",
		VulnerabilityAssessmentNameDefault,
		&SQLPoolVulnerabilityAssessmentScansListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("VulnerabilityAssessmentScanRecord.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("VulnerabilityAssessmentScanRecord.ID should not be nil!")
			}
		}
	}
}

func TestSqlPoolVulnerabilityAssessmentScans_InitiateScan(t *testing.T) {
	// From example Executes a Sql pool's vulnerability assessment scan.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSQLPoolVulnerabilityAssessmentScansClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginInitiateScan(ctx,
		"vulnerabilityassessmenttest-4711",
		"vulnerabilityassessmenttest-6411",
		"testdb",
		VulnerabilityAssessmentNameDefault,
		"scan01",
		&SQLPoolVulnerabilityAssessmentScansBeginInitiateScanOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestSqlPoolVulnerabilityAssessmentScans_Export(t *testing.T) {
	// From example Export a database's vulnerability assessment scan results.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSQLPoolVulnerabilityAssessmentScansClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Export(ctx,
		"vulnerabilityassessmenttest-4799",
		"vulnerabilityassessmenttest-6440",
		"testdb",
		VulnerabilityAssessmentNameDefault,
		"scan001",
		&SQLPoolVulnerabilityAssessmentScansExportOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.SQLPoolVulnerabilityAssessmentScansExport.ID == nil {
		t.Fatal("SQLPoolVulnerabilityAssessmentScansExport.ID should not be nil!")
	}
}

func TestSqlPoolVulnerabilityAssessmentScans_Get(t *testing.T) {
	// From example Gets a database vulnerability assessment scan record by scan ID
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSQLPoolVulnerabilityAssessmentScansClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"vulnerabilityassessmenttest-4711",
		"vulnerabilityassessmenttest-6411",
		"testdb",
		VulnerabilityAssessmentNameDefault,
		"scan001",
		&SQLPoolVulnerabilityAssessmentScansGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.VulnerabilityAssessmentScanRecord.ID == nil {
		t.Fatal("VulnerabilityAssessmentScanRecord.ID should not be nil!")
	}
}

func TestSqlPoolSecurityAlertPolicies_List(t *testing.T) {
	// From example Get a security alert of a SQL Analytics pool
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSQLPoolSecurityAlertPoliciesClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.List("securityalert-6852",
		"securityalert-2080",
		"testdb",
		&SQLPoolSecurityAlertPoliciesListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("SQLPoolSecurityAlertPolicy.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("SQLPoolSecurityAlertPolicy.ID should not be nil!")
			}
		}
	}
}

func TestSqlPoolSecurityAlertPolicies_Get(t *testing.T) {
	// From example Get a security alert of a SQL Analytics pool
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSQLPoolSecurityAlertPoliciesClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"securityalert-6852",
		"securityalert-2080",
		"testdb",
		SecurityAlertPolicyNameDefault,
		&SQLPoolSecurityAlertPoliciesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.SQLPoolSecurityAlertPolicy.ID == nil {
		t.Fatal("SQLPoolSecurityAlertPolicy.ID should not be nil!")
	}
}

func TestSqlPoolSecurityAlertPolicies_CreateOrUpdate(t *testing.T) {
	// From example Update a Sql pool's threat detection policy with all parameters
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSQLPoolSecurityAlertPoliciesClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.CreateOrUpdate(ctx,
		"securityalert-4799",
		"securityalert-6440",
		"testdb",
		SecurityAlertPolicyNameDefault,
		SQLPoolSecurityAlertPolicy{
			Properties: &SecurityAlertPolicyProperties{
				DisabledAlerts: []*string{
					to.StringPtr("Sql_Injection"),
					to.StringPtr("Usage_Anomaly")},
				EmailAccountAdmins: to.BoolPtr(true),
				EmailAddresses: []*string{
					to.StringPtr("test@microsoft.com"),
					to.StringPtr("user@microsoft.com")},
				RetentionDays:           to.Int32Ptr(6),
				State:                   SecurityAlertPolicyStateEnabled.ToPtr(),
				StorageAccountAccessKey: to.StringPtr("sdlfkjabc+sdlfkjsdlkfsjdfLDKFTERLKFDFKLjsdfksjdflsdkfD2342309432849328476458/3RSD=="),
				StorageEndpoint:         to.StringPtr("https://mystorage.blob.core.windows.net"),
			},
		},
		&SQLPoolSecurityAlertPoliciesCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.SQLPoolSecurityAlertPolicy.ID == nil {
		t.Fatal("SQLPoolSecurityAlertPolicy.ID should not be nil!")
	}

	// From example Update a Sql pool's threat detection policy with minimal parameters
	res, err = client.CreateOrUpdate(ctx,
		"securityalert-4799",
		"securityalert-6440",
		"testdb",
		SecurityAlertPolicyNameDefault,
		SQLPoolSecurityAlertPolicy{
			Properties: &SecurityAlertPolicyProperties{
				State: SecurityAlertPolicyStateEnabled.ToPtr(),
			},
		},
		&SQLPoolSecurityAlertPoliciesCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.SQLPoolSecurityAlertPolicy.ID == nil {
		t.Fatal("SQLPoolSecurityAlertPolicy.ID should not be nil!")
	}
}

func TestSqlPoolVulnerabilityAssessmentRuleBaselines_CreateOrUpdate(t *testing.T) {
	// From example Creates or updates a database's vulnerability assessment rule baseline.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSQLPoolVulnerabilityAssessmentRuleBaselinesClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.CreateOrUpdate(ctx,
		"vulnerabilityaseessmenttest-4799",
		"vulnerabilityaseessmenttest-6440",
		"testdb",
		VulnerabilityAssessmentNameDefault,
		"VA1001",
		VulnerabilityAssessmentPolicyBaselineNameDefault,
		SQLPoolVulnerabilityAssessmentRuleBaseline{
			Properties: &SQLPoolVulnerabilityAssessmentRuleBaselineProperties{
				BaselineResults: []*SQLPoolVulnerabilityAssessmentRuleBaselineItem{
					{
						Result: []*string{
							to.StringPtr("userA"),
							to.StringPtr("SELECT")},
					},
					{
						Result: []*string{
							to.StringPtr("userB"),
							to.StringPtr("SELECT")},
					},
					{
						Result: []*string{
							to.StringPtr("userC"),
							to.StringPtr("SELECT"),
							to.StringPtr("tableId_4")},
					}},
			},
		},
		&SQLPoolVulnerabilityAssessmentRuleBaselinesCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.SQLPoolVulnerabilityAssessmentRuleBaseline.ID == nil {
		t.Fatal("SQLPoolVulnerabilityAssessmentRuleBaseline.ID should not be nil!")
	}
}

func TestSqlPoolVulnerabilityAssessmentRuleBaselines_Delete(t *testing.T) {
	// From example Removes a database's vulnerability assessment rule baseline.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSQLPoolVulnerabilityAssessmentRuleBaselinesClient(con,
		"00000000-1111-2222-3333-444444444444")
	_, err := client.Delete(ctx,
		"vulnerabilityaseessmenttest-4799",
		"vulnerabilityaseessmenttest-6440",
		"testdb",
		VulnerabilityAssessmentNameDefault,
		"VA1001",
		VulnerabilityAssessmentPolicyBaselineNameDefault,
		&SQLPoolVulnerabilityAssessmentRuleBaselinesDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestSqlPoolVulnerabilityAssessmentRuleBaselines_Get(t *testing.T) {
	// From example Gets a Sql pool's vulnerability assessment rule baseline.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSQLPoolVulnerabilityAssessmentRuleBaselinesClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"vulnerabilityaseessmenttest-4711",
		"vulnerabilityaseessmenttest-6411",
		"testdb",
		VulnerabilityAssessmentNameDefault,
		"VA1001",
		VulnerabilityAssessmentPolicyBaselineNameMaster,
		&SQLPoolVulnerabilityAssessmentRuleBaselinesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.SQLPoolVulnerabilityAssessmentRuleBaseline.ID == nil {
		t.Fatal("SQLPoolVulnerabilityAssessmentRuleBaseline.ID should not be nil!")
	}
}

func TestExtendedSqlPoolBlobAuditingPolicies_Get(t *testing.T) {
	// From example Get an extended database's blob auditing policy
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewExtendedSQLPoolBlobAuditingPoliciesClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"blobauditingtest-6852",
		"blobauditingtest-2080",
		"testdb",
		Enum10Default,
		&ExtendedSQLPoolBlobAuditingPoliciesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ExtendedSQLPoolBlobAuditingPolicy.ID == nil {
		t.Fatal("ExtendedSQLPoolBlobAuditingPolicy.ID should not be nil!")
	}
}

func TestExtendedSqlPoolBlobAuditingPolicies_CreateOrUpdate(t *testing.T) {
	// From example Create or update an extended SQL pool's azure monitor auditing policy with minimal parameters
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewExtendedSQLPoolBlobAuditingPoliciesClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.CreateOrUpdate(ctx,
		"blobauditingtest-4799",
		"blobauditingtest-6440",
		"testdb",
		Enum10Default,
		ExtendedSQLPoolBlobAuditingPolicy{
			Properties: &ExtendedSQLPoolBlobAuditingPolicyProperties{
				IsAzureMonitorTargetEnabled: to.BoolPtr(true),
				State:                       BlobAuditingPolicyStateEnabled.ToPtr(),
			},
		},
		&ExtendedSQLPoolBlobAuditingPoliciesCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ExtendedSQLPoolBlobAuditingPolicy.ID == nil {
		t.Fatal("ExtendedSQLPoolBlobAuditingPolicy.ID should not be nil!")
	}

	// From example Create or update an extended Sql pool's blob auditing policy with all parameters
	res, err = client.CreateOrUpdate(ctx,
		"blobauditingtest-4799",
		"blobauditingtest-6440",
		"testdb",
		Enum10Default,
		ExtendedSQLPoolBlobAuditingPolicy{
			Properties: &ExtendedSQLPoolBlobAuditingPolicyProperties{
				AuditActionsAndGroups: []*string{
					to.StringPtr("DATABASE_LOGOUT_GROUP"),
					to.StringPtr("DATABASE_ROLE_MEMBER_CHANGE_GROUP"),
					to.StringPtr("UPDATE on database::TestDatabaseName by public")},
				IsAzureMonitorTargetEnabled:  to.BoolPtr(true),
				IsStorageSecondaryKeyInUse:   to.BoolPtr(false),
				PredicateExpression:          to.StringPtr("statement = 'select 1'"),
				RetentionDays:                to.Int32Ptr(6),
				State:                        BlobAuditingPolicyStateEnabled.ToPtr(),
				StorageAccountAccessKey:      to.StringPtr("sdlfkjabc+sdlfkjsdlkfsjdfLDKFTERLKFDFKLjsdfksjdflsdkfD2342309432849328476458/3RSD=="),
				StorageAccountSubscriptionID: to.StringPtr("00000000-1234-0000-5678-000000000000"),
				StorageEndpoint:              to.StringPtr("https://mystorage.blob.core.windows.net"),
			},
		},
		&ExtendedSQLPoolBlobAuditingPoliciesCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ExtendedSQLPoolBlobAuditingPolicy.ID == nil {
		t.Fatal("ExtendedSQLPoolBlobAuditingPolicy.ID should not be nil!")
	}

	// From example Create or update an extended Sql pool's blob auditing policy with minimal parameters
	res, err = client.CreateOrUpdate(ctx,
		"blobauditingtest-4799",
		"blobauditingtest-6440",
		"testdb",
		Enum10Default,
		ExtendedSQLPoolBlobAuditingPolicy{
			Properties: &ExtendedSQLPoolBlobAuditingPolicyProperties{
				State:                   BlobAuditingPolicyStateEnabled.ToPtr(),
				StorageAccountAccessKey: to.StringPtr("sdlfkjabc+sdlfkjsdlkfsjdfLDKFTERLKFDFKLjsdfksjdflsdkfD2342309432849328476458/3RSD=="),
				StorageEndpoint:         to.StringPtr("https://mystorage.blob.core.windows.net"),
			},
		},
		&ExtendedSQLPoolBlobAuditingPoliciesCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ExtendedSQLPoolBlobAuditingPolicy.ID == nil {
		t.Fatal("ExtendedSQLPoolBlobAuditingPolicy.ID should not be nil!")
	}
}

func TestExtendedSqlPoolBlobAuditingPolicies_ListBySqlPool(t *testing.T) {
	// From example List extended auditing settings of a database
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewExtendedSQLPoolBlobAuditingPoliciesClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListBySQLPool("blobauditingtest-6852",
		"blobauditingtest-2080",
		"testdb",
		&ExtendedSQLPoolBlobAuditingPoliciesListBySQLPoolOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ExtendedSQLPoolBlobAuditingPolicy.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ExtendedSQLPoolBlobAuditingPolicy.ID should not be nil!")
			}
		}
	}
}

func TestDataMaskingPolicies_CreateOrUpdate(t *testing.T) {
	// From example Create or update data masking policy max
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDataMaskingPoliciesClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.CreateOrUpdate(ctx,
		"sqlcrudtest-6852",
		"sqlcrudtest-2080",
		"sqlcrudtest-331",
		DataMaskingPolicy{
			Properties: &DataMaskingPolicyProperties{
				DataMaskingState: DataMaskingStateEnabled.ToPtr(),
				ExemptPrincipals: to.StringPtr("testuser;"),
			},
		},
		&DataMaskingPoliciesCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DataMaskingPolicy.ID == nil {
		t.Fatal("DataMaskingPolicy.ID should not be nil!")
	}

	// From example Create or update data masking policy min
	res, err = client.CreateOrUpdate(ctx,
		"sqlcrudtest-6852",
		"sqlcrudtest-2080",
		"sqlcrudtest-331",
		DataMaskingPolicy{
			Properties: &DataMaskingPolicyProperties{
				DataMaskingState: DataMaskingStateEnabled.ToPtr(),
			},
		},
		&DataMaskingPoliciesCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DataMaskingPolicy.ID == nil {
		t.Fatal("DataMaskingPolicy.ID should not be nil!")
	}
}

func TestDataMaskingPolicies_Get(t *testing.T) {
	// From example Get data masking policy
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDataMaskingPoliciesClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"sqlcrudtest-6852",
		"sqlcrudtest-2080",
		"sqlcrudtest-331",
		&DataMaskingPoliciesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DataMaskingPolicy.ID == nil {
		t.Fatal("DataMaskingPolicy.ID should not be nil!")
	}
}

func TestDataMaskingRules_CreateOrUpdate(t *testing.T) {
	// From example Create/Update data masking rule for default max
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDataMaskingRulesClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.CreateOrUpdate(ctx,
		"sqlcrudtest-6852",
		"sqlcrudtest-2080",
		"sqlcrudtest-331",
		"rule1",
		DataMaskingRule{
			Properties: &DataMaskingRuleProperties{
				AliasName:       to.StringPtr("nickname"),
				ColumnName:      to.StringPtr("test1"),
				MaskingFunction: DataMaskingFunctionDefault.ToPtr(),
				RuleState:       DataMaskingRuleStateEnabled.ToPtr(),
				SchemaName:      to.StringPtr("dbo"),
				TableName:       to.StringPtr("Table_1"),
			},
		},
		&DataMaskingRulesCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DataMaskingRule.ID == nil {
		t.Fatal("DataMaskingRule.ID should not be nil!")
	}

	// From example Create/Update data masking rule for default min
	res, err = client.CreateOrUpdate(ctx,
		"sqlcrudtest-6852",
		"sqlcrudtest-2080",
		"sqlcrudtest-331",
		"rule1",
		DataMaskingRule{
			Properties: &DataMaskingRuleProperties{
				ColumnName:      to.StringPtr("test1"),
				MaskingFunction: DataMaskingFunctionDefault.ToPtr(),
				SchemaName:      to.StringPtr("dbo"),
				TableName:       to.StringPtr("Table_1"),
			},
		},
		&DataMaskingRulesCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DataMaskingRule.ID == nil {
		t.Fatal("DataMaskingRule.ID should not be nil!")
	}

	// From example Create/Update data masking rule for numbers
	res, err = client.CreateOrUpdate(ctx,
		"sqlcrudtest-6852",
		"sqlcrudtest-2080",
		"sqlcrudtest-331",
		"rule1",
		DataMaskingRule{
			Properties: &DataMaskingRuleProperties{
				ColumnName:      to.StringPtr("test1"),
				MaskingFunction: DataMaskingFunctionNumber.ToPtr(),
				NumberFrom:      to.StringPtr("0"),
				NumberTo:        to.StringPtr("2"),
				SchemaName:      to.StringPtr("dbo"),
				TableName:       to.StringPtr("Table_1"),
			},
		},
		&DataMaskingRulesCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DataMaskingRule.ID == nil {
		t.Fatal("DataMaskingRule.ID should not be nil!")
	}

	// From example Create/Update data masking rule for text
	res, err = client.CreateOrUpdate(ctx,
		"sqlcrudtest-6852",
		"sqlcrudtest-2080",
		"sqlcrudtest-331",
		"rule1",
		DataMaskingRule{
			Properties: &DataMaskingRuleProperties{
				ColumnName:        to.StringPtr("test1"),
				MaskingFunction:   DataMaskingFunctionText.ToPtr(),
				PrefixSize:        to.StringPtr("1"),
				ReplacementString: to.StringPtr("asdf"),
				SchemaName:        to.StringPtr("dbo"),
				SuffixSize:        to.StringPtr("0"),
				TableName:         to.StringPtr("Table_1"),
			},
		},
		&DataMaskingRulesCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DataMaskingRule.ID == nil {
		t.Fatal("DataMaskingRule.ID should not be nil!")
	}
}

func TestDataMaskingRules_Get(t *testing.T) {
	// From example Get data masking rule
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDataMaskingRulesClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"sqlcrudtest-6852",
		"sqlcrudtest-2080",
		"sqlcrudtest-331",
		"rule1",
		&DataMaskingRulesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.DataMaskingRule.ID == nil {
		t.Fatal("DataMaskingRule.ID should not be nil!")
	}
}

func TestDataMaskingRules_ListBySqlPool(t *testing.T) {
	// From example List data masking rules
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDataMaskingRulesClient(con,
		"00000000-1111-2222-3333-444444444444")
	_, err := client.ListBySQLPool(ctx,
		"sqlcrudtest-6852",
		"sqlcrudtest-2080",
		"sqlcrudtest-331",
		&DataMaskingRulesListBySQLPoolOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestSqlPoolColumns_Get(t *testing.T) {
	// From example Get database column
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSQLPoolColumnsClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"myRG",
		"serverName",
		"myDatabase",
		"dbo",
		"table1",
		"column1",
		&SQLPoolColumnsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.SQLPoolColumn.ID == nil {
		t.Fatal("SQLPoolColumn.ID should not be nil!")
	}
}

func TestSqlPoolWorkloadGroup_Get(t *testing.T) {
	// From example Get a a workload group of a SQL Analytics pool
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSQLPoolWorkloadGroupClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"sqlcrudtest-6852",
		"sqlcrudtest-2080",
		"sqlcrudtest-9187",
		"smallrc",
		&SQLPoolWorkloadGroupGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.WorkloadGroup.ID == nil {
		t.Fatal("WorkloadGroup.ID should not be nil!")
	}
}

func TestSqlPoolWorkloadGroup_CreateOrUpdate(t *testing.T) {
	// From example Create a workload group with all properties specified.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSQLPoolWorkloadGroupClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"sqlcrudtest-6852",
		"sqlcrudtest-2080",
		"sqlcrudtest-9187",
		"smallrc",
		WorkloadGroup{
			Properties: &WorkloadGroupProperties{
				Importance:                   to.StringPtr("normal"),
				MaxResourcePercent:           to.Int32Ptr(100),
				MaxResourcePercentPerRequest: to.Float64Ptr(3),
				MinResourcePercent:           to.Int32Ptr(0),
				MinResourcePercentPerRequest: to.Float64Ptr(3),
				QueryExecutionTimeout:        to.Int32Ptr(0),
			},
		},
		&SQLPoolWorkloadGroupBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.WorkloadGroup.ID == nil {
		t.Fatal("WorkloadGroup.ID should not be nil!")
	}

	// From example Create a workload group with the required properties specified.
	poller, err = client.BeginCreateOrUpdate(ctx,
		"sqlcrudtest-6852",
		"sqlcrudtest-2080",
		"sqlcrudtest-9187",
		"smallrc",
		WorkloadGroup{
			Properties: &WorkloadGroupProperties{
				MaxResourcePercent:           to.Int32Ptr(100),
				MinResourcePercent:           to.Int32Ptr(0),
				MinResourcePercentPerRequest: to.Float64Ptr(3),
			},
		},
		&SQLPoolWorkloadGroupBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.WorkloadGroup.ID == nil {
		t.Fatal("WorkloadGroup.ID should not be nil!")
	}
}

func TestSqlPoolWorkloadGroup_Delete(t *testing.T) {
	// From example Delete a workload group of a SQL Analytics pool
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSQLPoolWorkloadGroupClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginDelete(ctx,
		"sqlcrudtest-6852",
		"sqlcrudtest-2080",
		"sqlcrudtest-9187",
		"wlm_workloadgroup",
		&SQLPoolWorkloadGroupBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestSqlPoolWorkloadGroup_List(t *testing.T) {
	// From example Get the list of workload groups of a SQL Analytics pool
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSQLPoolWorkloadGroupClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.List("sqlcrudtest-6852",
		"sqlcrudtest-2080",
		"sqlcrudtest-9187",
		&SQLPoolWorkloadGroupListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("WorkloadGroup.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("WorkloadGroup.ID should not be nil!")
			}
		}
	}
}

func TestSqlPoolWorkloadClassifier_Get(t *testing.T) {
	// From example Get a workload classifier for SQL Analytics pool's workload group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSQLPoolWorkloadClassifierClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"sqlcrudtest-6852",
		"sqlcrudtest-2080",
		"sqlcrudtest-9187",
		"wlm_workloadgroup",
		"wlm_classifier",
		&SQLPoolWorkloadClassifierGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.WorkloadClassifier.ID == nil {
		t.Fatal("WorkloadClassifier.ID should not be nil!")
	}
}

func TestSqlPoolWorkloadClassifier_CreateOrUpdate(t *testing.T) {
	// From example Create a workload classifier with all properties specified.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSQLPoolWorkloadClassifierClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"sqlcrudtest-6852",
		"sqlcrudtest-2080",
		"sqlcrudtest-9187",
		"wlm_workloadgroup",
		"wlm_workloadclassifier",
		WorkloadClassifier{
			Properties: &WorkloadClassifierProperties{
				Context:    to.StringPtr("test_context"),
				EndTime:    to.StringPtr("14:00"),
				Importance: to.StringPtr("high"),
				Label:      to.StringPtr("test_label"),
				MemberName: to.StringPtr("dbo"),
				StartTime:  to.StringPtr("12:00"),
			},
		},
		&SQLPoolWorkloadClassifierBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.WorkloadClassifier.ID == nil {
		t.Fatal("WorkloadClassifier.ID should not be nil!")
	}

	// From example Create a workload classifier with the required properties specified.
	poller, err = client.BeginCreateOrUpdate(ctx,
		"sqlcrudtest-6852",
		"sqlcrudtest-2080",
		"sqlcrudtest-9187",
		"wlm_workloadgroup",
		"wlm_workloadclassifier",
		WorkloadClassifier{
			Properties: &WorkloadClassifierProperties{
				MemberName: to.StringPtr("dbo"),
			},
		},
		&SQLPoolWorkloadClassifierBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.WorkloadClassifier.ID == nil {
		t.Fatal("WorkloadClassifier.ID should not be nil!")
	}
}

func TestSqlPoolWorkloadClassifier_Delete(t *testing.T) {
	// From example Delete a workload classifier of a SQL Analytics pool's workload group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSQLPoolWorkloadClassifierClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginDelete(ctx,
		"sqlcrudtest-6852",
		"sqlcrudtest-2080",
		"sqlcrudtest-9187",
		"wlm_workloadgroup",
		"wlm_workloadclassifier",
		&SQLPoolWorkloadClassifierBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestSqlPoolWorkloadClassifier_List(t *testing.T) {
	// From example Get the list of workload classifiers of a SQL Analytics pool's workload group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSQLPoolWorkloadClassifierClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.List("sqlcrudtest-6852",
		"sqlcrudtest-2080",
		"sqlcrudtest-9187",
		"wlm_workloadgroup",
		&SQLPoolWorkloadClassifierListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("WorkloadClassifier.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("WorkloadClassifier.ID should not be nil!")
			}
		}
	}
}

func TestWorkspaceManagedSqlServerBlobAuditingPolicies_Get(t *testing.T) {
	// From example Get blob auditing setting of workspace managed sql Server
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkspaceManagedSQLServerBlobAuditingPoliciesClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"wsg-7398",
		"testWorkspace",
		BlobAuditingPolicyNameDefault,
		&WorkspaceManagedSQLServerBlobAuditingPoliciesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ServerBlobAuditingPolicy.ID == nil {
		t.Fatal("ServerBlobAuditingPolicy.ID should not be nil!")
	}
}

func TestWorkspaceManagedSqlServerBlobAuditingPolicies_CreateOrUpdate(t *testing.T) {
	// From example Create or update blob auditing policy of workspace SQL Server with all parameters
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkspaceManagedSQLServerBlobAuditingPoliciesClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"wsg-7398",
		"testWorkspace",
		BlobAuditingPolicyNameDefault,
		ServerBlobAuditingPolicy{
			Properties: &ServerBlobAuditingPolicyProperties{
				AuditActionsAndGroups: []*string{
					to.StringPtr("SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP"),
					to.StringPtr("FAILED_DATABASE_AUTHENTICATION_GROUP"),
					to.StringPtr("BATCH_COMPLETED_GROUP")},
				IsAzureMonitorTargetEnabled:  to.BoolPtr(true),
				IsStorageSecondaryKeyInUse:   to.BoolPtr(false),
				QueueDelayMs:                 to.Int32Ptr(4000),
				RetentionDays:                to.Int32Ptr(6),
				State:                        BlobAuditingPolicyStateEnabled.ToPtr(),
				StorageAccountAccessKey:      to.StringPtr("sdlfkjabc+sdlfkjsdlkfsjdfLDKFTERLKFDFKLjsdfksjdflsdkfD2342309432849328476458/3RSD=="),
				StorageAccountSubscriptionID: to.StringPtr("00000000-1234-0000-5678-000000000000"),
				StorageEndpoint:              to.StringPtr("https://mystorage.blob.core.windows.net"),
			},
		},
		&WorkspaceManagedSQLServerBlobAuditingPoliciesBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ServerBlobAuditingPolicy.ID == nil {
		t.Fatal("ServerBlobAuditingPolicy.ID should not be nil!")
	}

	// From example Create or update blob auditing policy of workspace managed Sql Server with minimal parameters
	poller, err = client.BeginCreateOrUpdate(ctx,
		"wsg-7398",
		"testWorkspace",
		BlobAuditingPolicyNameDefault,
		ServerBlobAuditingPolicy{
			Properties: &ServerBlobAuditingPolicyProperties{
				State:                   BlobAuditingPolicyStateEnabled.ToPtr(),
				StorageAccountAccessKey: to.StringPtr("sdlfkjabc+sdlfkjsdlkfsjdfLDKFTERLKFDFKLjsdfksjdflsdkfD2342309432849328476458/3RSD=="),
				StorageEndpoint:         to.StringPtr("https://mystorage.blob.core.windows.net"),
			},
		},
		&WorkspaceManagedSQLServerBlobAuditingPoliciesBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ServerBlobAuditingPolicy.ID == nil {
		t.Fatal("ServerBlobAuditingPolicy.ID should not be nil!")
	}
}

func TestWorkspaceManagedSqlServerBlobAuditingPolicies_ListByWorkspace(t *testing.T) {
	// From example Get blob auditing policy of workspace manged sql Server
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkspaceManagedSQLServerBlobAuditingPoliciesClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListByWorkspace("wsg-7398",
		"testWorkspace",
		&WorkspaceManagedSQLServerBlobAuditingPoliciesListByWorkspaceOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ServerBlobAuditingPolicy.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ServerBlobAuditingPolicy.ID should not be nil!")
			}
		}
	}
}

func TestWorkspaceManagedSqlServerExtendedBlobAuditingPolicies_Get(t *testing.T) {
	// From example Get workspace managed sql servers' extended blob auditing settings
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkspaceManagedSQLServerExtendedBlobAuditingPoliciesClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"wsg-7398",
		"testWorkspace",
		BlobAuditingPolicyNameDefault,
		&WorkspaceManagedSQLServerExtendedBlobAuditingPoliciesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ExtendedServerBlobAuditingPolicy.ID == nil {
		t.Fatal("ExtendedServerBlobAuditingPolicy.ID should not be nil!")
	}
}

func TestWorkspaceManagedSqlServerExtendedBlobAuditingPolicies_CreateOrUpdate(t *testing.T) {
	// From example Create or update workspace managed sql server's extended blob auditing policy of with all parameters
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkspaceManagedSQLServerExtendedBlobAuditingPoliciesClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"wsg-7398",
		"testWorkspace",
		BlobAuditingPolicyNameDefault,
		ExtendedServerBlobAuditingPolicy{
			Properties: &ExtendedServerBlobAuditingPolicyProperties{
				AuditActionsAndGroups: []*string{
					to.StringPtr("SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP"),
					to.StringPtr("FAILED_DATABASE_AUTHENTICATION_GROUP"),
					to.StringPtr("BATCH_COMPLETED_GROUP")},
				IsAzureMonitorTargetEnabled:  to.BoolPtr(true),
				IsStorageSecondaryKeyInUse:   to.BoolPtr(false),
				PredicateExpression:          to.StringPtr("object_name = 'SensitiveData'"),
				RetentionDays:                to.Int32Ptr(6),
				State:                        BlobAuditingPolicyStateEnabled.ToPtr(),
				StorageAccountAccessKey:      to.StringPtr("sdlfkjabc+sdlfkjsdlkfsjdfLDKFTERLKFDFKLjsdfksjdflsdkfD2342309432849328476458/3RSD=="),
				StorageAccountSubscriptionID: to.StringPtr("00000000-1234-0000-5678-000000000000"),
				StorageEndpoint:              to.StringPtr("https://mystorage.blob.core.windows.net"),
			},
		},
		&WorkspaceManagedSQLServerExtendedBlobAuditingPoliciesBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ExtendedServerBlobAuditingPolicy.ID == nil {
		t.Fatal("ExtendedServerBlobAuditingPolicy.ID should not be nil!")
	}

	// From example Create or update workspace managed sql server's extended blob auditing policy of with minimal parameters
	poller, err = client.BeginCreateOrUpdate(ctx,
		"wsg-7398",
		"testWorkspace",
		BlobAuditingPolicyNameDefault,
		ExtendedServerBlobAuditingPolicy{
			Properties: &ExtendedServerBlobAuditingPolicyProperties{
				State:                   BlobAuditingPolicyStateEnabled.ToPtr(),
				StorageAccountAccessKey: to.StringPtr("sdlfkjabc+sdlfkjsdlkfsjdfLDKFTERLKFDFKLjsdfksjdflsdkfD2342309432849328476458/3RSD=="),
				StorageEndpoint:         to.StringPtr("https://mystorage.blob.core.windows.net"),
			},
		},
		&WorkspaceManagedSQLServerExtendedBlobAuditingPoliciesBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ExtendedServerBlobAuditingPolicy.ID == nil {
		t.Fatal("ExtendedServerBlobAuditingPolicy.ID should not be nil!")
	}
}

func TestWorkspaceManagedSqlServerExtendedBlobAuditingPolicies_ListByWorkspace(t *testing.T) {
	// From example Get workspace managed sql server's extended blob auditing settings
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkspaceManagedSQLServerExtendedBlobAuditingPoliciesClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListByWorkspace("wsg-7398",
		"testWorkspace",
		&WorkspaceManagedSQLServerExtendedBlobAuditingPoliciesListByWorkspaceOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ExtendedServerBlobAuditingPolicy.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ExtendedServerBlobAuditingPolicy.ID should not be nil!")
			}
		}
	}
}

func TestWorkspaceManagedSqlServerSecurityAlertPolicy_Get(t *testing.T) {
	// From example Get workspace managed sql Server's security alert policy
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkspaceManagedSQLServerSecurityAlertPolicyClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"wsg-7398",
		"testWorkspace",
		SecurityAlertPolicyNameAutoGeneratedDefault,
		&WorkspaceManagedSQLServerSecurityAlertPolicyGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ServerSecurityAlertPolicy.ID == nil {
		t.Fatal("ServerSecurityAlertPolicy.ID should not be nil!")
	}
}

func TestWorkspaceManagedSqlServerSecurityAlertPolicy_CreateOrUpdate(t *testing.T) {
	// From example Update a workspace managed sql server's threat detection policy with all parameters
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkspaceManagedSQLServerSecurityAlertPolicyClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"wsg-7398",
		"testWorkspace",
		SecurityAlertPolicyNameAutoGeneratedDefault,
		ServerSecurityAlertPolicy{
			Properties: &ServerSecurityAlertPolicyProperties{
				DisabledAlerts: []*string{
					to.StringPtr("Access_Anomaly"),
					to.StringPtr("Usage_Anomaly")},
				EmailAccountAdmins: to.BoolPtr(true),
				EmailAddresses: []*string{
					to.StringPtr("testSecurityAlert@microsoft.com")},
				RetentionDays:           to.Int32Ptr(5),
				State:                   SecurityAlertPolicyStateEnabled.ToPtr(),
				StorageAccountAccessKey: to.StringPtr("sdlfkjabc+sdlfkjsdlkfsjdfLDKFTERLKFDFKLjsdfksjdflsdkfD2342309432849328476458/3RSD=="),
				StorageEndpoint:         to.StringPtr("https://mystorage.blob.core.windows.net"),
			},
		},
		&WorkspaceManagedSQLServerSecurityAlertPolicyBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ServerSecurityAlertPolicy.ID == nil {
		t.Fatal("ServerSecurityAlertPolicy.ID should not be nil!")
	}

	// From example Update a workspace managed sql server's threat detection policy with minimal parameters
	poller, err = client.BeginCreateOrUpdate(ctx,
		"wsg-7398",
		"testWorkspace",
		SecurityAlertPolicyNameAutoGeneratedDefault,
		ServerSecurityAlertPolicy{
			Properties: &ServerSecurityAlertPolicyProperties{
				EmailAccountAdmins:      to.BoolPtr(true),
				State:                   SecurityAlertPolicyStateDisabled.ToPtr(),
				StorageAccountAccessKey: to.StringPtr("sdlfkjabc+sdlfkjsdlkfsjdfLDKFTERLKFDFKLjsdfksjdflsdkfD2342309432849328476458/3RSD=="),
				StorageEndpoint:         to.StringPtr("https://mystorage.blob.core.windows.net"),
			},
		},
		&WorkspaceManagedSQLServerSecurityAlertPolicyBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ServerSecurityAlertPolicy.ID == nil {
		t.Fatal("ServerSecurityAlertPolicy.ID should not be nil!")
	}
}

func TestWorkspaceManagedSqlServerSecurityAlertPolicy_List(t *testing.T) {
	// From example Get workspace managed sql server's security alert policy
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkspaceManagedSQLServerSecurityAlertPolicyClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.List("wsg-7398",
		"testWorkspace",
		&WorkspaceManagedSQLServerSecurityAlertPolicyListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ServerSecurityAlertPolicy.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ServerSecurityAlertPolicy.ID should not be nil!")
			}
		}
	}
}

func TestWorkspaceManagedSqlServerVulnerabilityAssessments_Get(t *testing.T) {
	// From example Get workspace managed sql Server's vulnerability assessment
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkspaceManagedSQLServerVulnerabilityAssessmentsClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"wsg-7398",
		"testWorkspace",
		VulnerabilityAssessmentNameDefault,
		&WorkspaceManagedSQLServerVulnerabilityAssessmentsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ServerVulnerabilityAssessment.ID == nil {
		t.Fatal("ServerVulnerabilityAssessment.ID should not be nil!")
	}
}

func TestWorkspaceManagedSqlServerVulnerabilityAssessments_CreateOrUpdate(t *testing.T) {
	// From example Create or Update a workspace managed sql server's vulnerability assessment with all parameters
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkspaceManagedSQLServerVulnerabilityAssessmentsClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.CreateOrUpdate(ctx,
		"wsg-7398",
		"testWorkspace",
		VulnerabilityAssessmentNameDefault,
		ServerVulnerabilityAssessment{
			Properties: &ServerVulnerabilityAssessmentProperties{
				RecurringScans: &VulnerabilityAssessmentRecurringScansProperties{
					EmailSubscriptionAdmins: to.BoolPtr(true),
					Emails: []*string{
						to.StringPtr("email1@mail.com"),
						to.StringPtr("email2@mail.com")},
					IsEnabled: to.BoolPtr(true),
				},
				StorageAccountAccessKey: to.StringPtr("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"),
				StorageContainerPath:    to.StringPtr("https://myStorage.blob.core.windows.net/vulnerability-assessment/"),
				StorageContainerSasKey:  to.StringPtr("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"),
			},
		},
		&WorkspaceManagedSQLServerVulnerabilityAssessmentsCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ServerVulnerabilityAssessment.ID == nil {
		t.Fatal("ServerVulnerabilityAssessment.ID should not be nil!")
	}

	// From example Create or Update a workspace managed sql server's vulnerability assessment with minimal parameters, when storageAccountAccessKey is specified
	res, err = client.CreateOrUpdate(ctx,
		"wsg-7398",
		"testWorkspace",
		VulnerabilityAssessmentNameDefault,
		ServerVulnerabilityAssessment{
			Properties: &ServerVulnerabilityAssessmentProperties{
				StorageAccountAccessKey: to.StringPtr("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"),
				StorageContainerPath:    to.StringPtr("https://myStorage.blob.core.windows.net/vulnerability-assessment/"),
			},
		},
		&WorkspaceManagedSQLServerVulnerabilityAssessmentsCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ServerVulnerabilityAssessment.ID == nil {
		t.Fatal("ServerVulnerabilityAssessment.ID should not be nil!")
	}

	// From example Create or Update a workspace managed sql server's vulnerability assessment with minimal parameters, when storageContainerSasKey is specified
	res, err = client.CreateOrUpdate(ctx,
		"wsg-7398",
		"testWorkspace",
		VulnerabilityAssessmentNameDefault,
		ServerVulnerabilityAssessment{
			Properties: &ServerVulnerabilityAssessmentProperties{
				StorageContainerPath:   to.StringPtr("https://myStorage.blob.core.windows.net/vulnerability-assessment/"),
				StorageContainerSasKey: to.StringPtr("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"),
			},
		},
		&WorkspaceManagedSQLServerVulnerabilityAssessmentsCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ServerVulnerabilityAssessment.ID == nil {
		t.Fatal("ServerVulnerabilityAssessment.ID should not be nil!")
	}
}

func TestWorkspaceManagedSqlServerVulnerabilityAssessments_Delete(t *testing.T) {
	// From example Remove workspace managed sql Server's vulnerability assessment
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkspaceManagedSQLServerVulnerabilityAssessmentsClient(con,
		"00000000-1111-2222-3333-444444444444")
	_, err := client.Delete(ctx,
		"wsg-7398",
		"testWorkspace",
		VulnerabilityAssessmentNameDefault,
		&WorkspaceManagedSQLServerVulnerabilityAssessmentsDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestWorkspaceManagedSqlServerVulnerabilityAssessments_List(t *testing.T) {
	// From example Get workspace managed sql Server's vulnerability assessment policies
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkspaceManagedSQLServerVulnerabilityAssessmentsClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.List("wsg-7398",
		"testWorkspace",
		&WorkspaceManagedSQLServerVulnerabilityAssessmentsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ServerVulnerabilityAssessment.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ServerVulnerabilityAssessment.ID should not be nil!")
			}
		}
	}
}

func TestWorkspaceManagedSqlServerEncryptionProtector_Get(t *testing.T) {
	// From example Get workspace managed sql Server's encryption protector
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkspaceManagedSQLServerEncryptionProtectorClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"wsg-7398",
		"testWorkspace",
		EncryptionProtectorNameCurrent,
		&WorkspaceManagedSQLServerEncryptionProtectorGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.EncryptionProtector.ID == nil {
		t.Fatal("EncryptionProtector.ID should not be nil!")
	}
}

func TestWorkspaceManagedSqlServerEncryptionProtector_CreateOrUpdate(t *testing.T) {
	// From example Update the encryption protector to key vault
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkspaceManagedSQLServerEncryptionProtectorClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"wsg-7398",
		"testWorkspace",
		EncryptionProtectorNameCurrent,
		EncryptionProtector{
			Properties: &EncryptionProtectorProperties{
				ServerKeyName: to.StringPtr("someVault_someKey_01234567890123456789012345678901"),
				ServerKeyType: ServerKeyTypeAzureKeyVault.ToPtr(),
			},
		},
		&WorkspaceManagedSQLServerEncryptionProtectorBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.EncryptionProtector.ID == nil {
		t.Fatal("EncryptionProtector.ID should not be nil!")
	}

	// From example Update the encryption protector to service managed
	poller, err = client.BeginCreateOrUpdate(ctx,
		"wsg-7398",
		"testWorkspace",
		EncryptionProtectorNameCurrent,
		EncryptionProtector{
			Properties: &EncryptionProtectorProperties{
				ServerKeyName: to.StringPtr("ServiceManaged"),
				ServerKeyType: ServerKeyTypeServiceManaged.ToPtr(),
			},
		},
		&WorkspaceManagedSQLServerEncryptionProtectorBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.EncryptionProtector.ID == nil {
		t.Fatal("EncryptionProtector.ID should not be nil!")
	}
}

func TestWorkspaceManagedSqlServerEncryptionProtector_List(t *testing.T) {
	// From example Get workspace managed sql Server's encryption protectors
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkspaceManagedSQLServerEncryptionProtectorClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.List("wsg-7398",
		"testWorkspace",
		&WorkspaceManagedSQLServerEncryptionProtectorListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("EncryptionProtector.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("EncryptionProtector.ID should not be nil!")
			}
		}
	}
}

func TestWorkspaceManagedSqlServerEncryptionProtector_Revalidate(t *testing.T) {
	// From example Revalidates the encryption protector
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkspaceManagedSQLServerEncryptionProtectorClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginRevalidate(ctx,
		"wsg-7398",
		"testWorkspace",
		EncryptionProtectorNameCurrent,
		&WorkspaceManagedSQLServerEncryptionProtectorBeginRevalidateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestWorkspaceManagedSqlServerUsages_List(t *testing.T) {
	// From example List usages metric for the workspace managed sql server
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkspaceManagedSQLServerUsagesClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.List("wsg-7398",
		"testWorkspace",
		&WorkspaceManagedSQLServerUsagesListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
	}
}

func TestWorkspaceManagedSqlServerRecoverableSqlPools_List(t *testing.T) {
	// From example List recoverable sql pools for the server
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkspaceManagedSQLServerRecoverableSQLPoolsClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.List("wsg-7398",
		"testWorkspace",
		&WorkspaceManagedSQLServerRecoverableSQLPoolsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("RecoverableSQLPool.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("RecoverableSQLPool.ID should not be nil!")
			}
		}
	}
}

func TestWorkspaceManagedSqlServerRecoverableSqlPools_Get(t *testing.T) {
	// From example Get recoverable sql pools for the server
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkspaceManagedSQLServerRecoverableSQLPoolsClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"wsg-7398",
		"testWorkspace",
		"recoverableSqlpools-1235",
		&WorkspaceManagedSQLServerRecoverableSQLPoolsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.RecoverableSQLPool.ID == nil {
		t.Fatal("RecoverableSQLPool.ID should not be nil!")
	}
}

func TestWorkspaces_ListByResourceGroup(t *testing.T) {
	// From example List workspaces in resource group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkspacesClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListByResourceGroup("resourceGroup1",
		&WorkspacesListByResourceGroupOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Workspace.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Workspace.ID should not be nil!")
			}
		}
	}
}

func TestWorkspaces_Get(t *testing.T) {
	// From example Get a workspace
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkspacesClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"resourceGroup1",
		"workspace1",
		&WorkspacesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Workspace.ID == nil {
		t.Fatal("Workspace.ID should not be nil!")
	}
}

func TestWorkspaces_Update(t *testing.T) {
	// From example Update a workspace
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkspacesClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginUpdate(ctx,
		"resourceGroup1",
		"workspace1",
		WorkspacePatchInfo{
			Identity: &ManagedIdentity{
				Type: ResourceIdentityTypeSystemAssigned.ToPtr(),
			},
			Properties: &WorkspacePatchProperties{
				Encryption: &EncryptionDetails{
					Cmk: &CustomerManagedKeyDetails{
						Key: &WorkspaceKeyDetails{
							Name:        to.StringPtr("default"),
							KeyVaultURL: to.StringPtr("https://vault.azure.net/keys/key1"),
						},
					},
				},
				ManagedVirtualNetworkSettings: &ManagedVirtualNetworkSettings{
					AllowedAADTenantIDsForLinking: []*string{
						to.StringPtr("740239CE-A25B-485B-86A0-262F29F6EBDB")},
					LinkedAccessCheckOnTargetResource: to.BoolPtr(false),
					PreventDataExfiltration:           to.BoolPtr(false),
				},
				PublicNetworkAccess: WorkspacePublicNetworkAccessEnabled.ToPtr(),
				PurviewConfiguration: &PurviewConfiguration{
					PurviewResourceID: to.StringPtr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/resourceGroup1/providers/Microsoft.ProjectPurview/accounts/accountname1"),
				},
				SQLAdministratorLoginPassword: to.StringPtr("password"),
				WorkspaceRepositoryConfiguration: &WorkspaceRepositoryConfiguration{
					Type:                to.StringPtr("FactoryGitHubConfiguration"),
					AccountName:         to.StringPtr("adifferentacount"),
					CollaborationBranch: to.StringPtr("master"),
					HostName:            to.StringPtr(""),
					ProjectName:         to.StringPtr("myproject"),
					RepositoryName:      to.StringPtr("myrepository"),
					RootFolder:          to.StringPtr("/"),
				},
			},
			Tags: map[string]*string{
				"key": to.StringPtr("value"),
			},
		},
		&WorkspacesBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Workspace.ID == nil {
		t.Fatal("Workspace.ID should not be nil!")
	}
}

func TestWorkspaces_CreateOrUpdate(t *testing.T) {
	// From example Create or update a workspace
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkspacesClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"resourceGroup1",
		"workspace1",
		Workspace{
			TrackedResource: TrackedResource{
				Location: to.StringPtr("East US"),
				Tags: map[string]*string{
					"key": to.StringPtr("value"),
				},
			},
			Identity: &ManagedIdentity{
				Type: ResourceIdentityTypeSystemAssignedUserAssigned.ToPtr(),
				UserAssignedIdentities: map[string]*UserAssignedManagedIdentity{
					"/subscriptions/00000000-1111-2222-3333-444444444444/resourcegroups/resourceGroup1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/uami1": &UserAssignedManagedIdentity{},
				},
			},
			Properties: &WorkspaceProperties{
				CspWorkspaceAdminProperties: &CspWorkspaceAdminProperties{
					InitialWorkspaceAdminObjectID: to.StringPtr("6c20646f-8050-49ec-b3b1-80a0e58e454d"),
				},
				DefaultDataLakeStorage: &DataLakeStorageAccountDetails{
					AccountURL: to.StringPtr("https://accountname.dfs.core.windows.net"),
					Filesystem: to.StringPtr("default"),
				},
				Encryption: &EncryptionDetails{
					Cmk: &CustomerManagedKeyDetails{
						KekIdentity: &KekIdentityProperties{
							UseSystemAssignedIdentity: false,
							UserAssignedIdentity:      to.StringPtr("/subscriptions/b64d7b94-73e7-4d36-94b2-7764ea3fd74a/resourcegroups/SynapseCI/providers/Microsoft.ManagedIdentity/userAssignedIdentities/uami1"),
						},
						Key: &WorkspaceKeyDetails{
							Name:        to.StringPtr("default"),
							KeyVaultURL: to.StringPtr("https://vault.azure.net/keys/key1"),
						},
					},
				},
				ManagedResourceGroupName: to.StringPtr("workspaceManagedResourceGroupUnique"),
				ManagedVirtualNetwork:    to.StringPtr("default"),
				ManagedVirtualNetworkSettings: &ManagedVirtualNetworkSettings{
					AllowedAADTenantIDsForLinking: []*string{
						to.StringPtr("740239CE-A25B-485B-86A0-262F29F6EBDB")},
					LinkedAccessCheckOnTargetResource: to.BoolPtr(false),
					PreventDataExfiltration:           to.BoolPtr(false),
				},
				PublicNetworkAccess: WorkspacePublicNetworkAccessEnabled.ToPtr(),
				PurviewConfiguration: &PurviewConfiguration{
					PurviewResourceID: to.StringPtr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/resourceGroup1/providers/Microsoft.ProjectPurview/accounts/accountname1"),
				},
				SQLAdministratorLogin:         to.StringPtr("login"),
				SQLAdministratorLoginPassword: to.StringPtr("password"),
				WorkspaceRepositoryConfiguration: &WorkspaceRepositoryConfiguration{
					Type:                to.StringPtr("FactoryGitHubConfiguration"),
					AccountName:         to.StringPtr("mygithubaccount"),
					CollaborationBranch: to.StringPtr("master"),
					HostName:            to.StringPtr(""),
					ProjectName:         to.StringPtr("myproject"),
					RepositoryName:      to.StringPtr("myrepository"),
					RootFolder:          to.StringPtr("/"),
				},
			},
		},
		&WorkspacesBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.Workspace.ID == nil {
		t.Fatal("Workspace.ID should not be nil!")
	}
}

func TestWorkspaces_Delete(t *testing.T) {
	// From example Delete a workspace
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkspacesClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginDelete(ctx,
		"resourceGroup1",
		"workspace1",
		&WorkspacesBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestWorkspaces_List(t *testing.T) {
	// From example List workspaces in subscription
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkspacesClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.List(&WorkspacesListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Workspace.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Workspace.ID should not be nil!")
			}
		}
	}
}

func TestWorkspaceAadAdmins_Get(t *testing.T) {
	// From example Get workspace active directory admin
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkspaceAADAdminsClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"resourceGroup1",
		"workspace1",
		&WorkspaceAADAdminsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.WorkspaceAADAdminInfo.ID == nil {
		t.Fatal("WorkspaceAADAdminInfo.ID should not be nil!")
	}
}

func TestWorkspaceAadAdmins_CreateOrUpdate(t *testing.T) {
	// From example Create or update workspace active directory admin
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkspaceAADAdminsClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"resourceGroup1",
		"workspace1",
		WorkspaceAADAdminInfo{
			Properties: &AADAdminProperties{
				AdministratorType: to.StringPtr("ActiveDirectory"),
				Login:             to.StringPtr("bob@contoso.com"),
				Sid:               to.StringPtr("c6b82b90-a647-49cb-8a62-0d2d3cb7ac7c"),
				TenantID:          to.StringPtr("c6b82b90-a647-49cb-8a62-0d2d3cb7ac7c"),
			},
		},
		&WorkspaceAADAdminsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.WorkspaceAADAdminInfo.ID == nil {
		t.Fatal("WorkspaceAADAdminInfo.ID should not be nil!")
	}
}

func TestWorkspaceAadAdmins_Delete(t *testing.T) {
	// From example Delete workspace active directory admin
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkspaceAADAdminsClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginDelete(ctx,
		"resourceGroup1",
		"workspace1",
		&WorkspaceAADAdminsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestWorkspaceSqlAadAdmins_Get(t *testing.T) {
	// From example Get workspace active directory admin
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkspaceSQLAADAdminsClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"resourceGroup1",
		"workspace1",
		&WorkspaceSQLAADAdminsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.WorkspaceAADAdminInfo.ID == nil {
		t.Fatal("WorkspaceAADAdminInfo.ID should not be nil!")
	}
}

func TestWorkspaceSqlAadAdmins_CreateOrUpdate(t *testing.T) {
	// From example Create or update workspace active directory admin
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkspaceSQLAADAdminsClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"resourceGroup1",
		"workspace1",
		WorkspaceAADAdminInfo{
			Properties: &AADAdminProperties{
				AdministratorType: to.StringPtr("ActiveDirectory"),
				Login:             to.StringPtr("bob@contoso.com"),
				Sid:               to.StringPtr("c6b82b90-a647-49cb-8a62-0d2d3cb7ac7c"),
				TenantID:          to.StringPtr("c6b82b90-a647-49cb-8a62-0d2d3cb7ac7c"),
			},
		},
		&WorkspaceSQLAADAdminsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.WorkspaceAADAdminInfo.ID == nil {
		t.Fatal("WorkspaceAADAdminInfo.ID should not be nil!")
	}
}

func TestWorkspaceSqlAadAdmins_Delete(t *testing.T) {
	// From example Delete workspace active directory admin
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkspaceSQLAADAdminsClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginDelete(ctx,
		"resourceGroup1",
		"workspace1",
		&WorkspaceSQLAADAdminsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestWorkspaceManagedIdentitySqlControlSettings_Get(t *testing.T) {
	// From example Get managed identity sql control settings
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkspaceManagedIdentitySQLControlSettingsClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"resourceGroup1",
		"workspace1",
		&WorkspaceManagedIdentitySQLControlSettingsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ManagedIdentitySQLControlSettingsModel.ID == nil {
		t.Fatal("ManagedIdentitySQLControlSettingsModel.ID should not be nil!")
	}
}

func TestWorkspaceManagedIdentitySqlControlSettings_CreateOrUpdate(t *testing.T) {
	// From example Create or update managed identity sql control settings
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewWorkspaceManagedIdentitySQLControlSettingsClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"resourceGroup1",
		"workspace1",
		ManagedIdentitySQLControlSettingsModel{
			Properties: &ManagedIdentitySQLControlSettingsModelProperties{
				GrantSQLControlToManagedIdentity: &ManagedIdentitySQLControlSettingsModelPropertiesGrantSQLControlToManagedIdentity{
					DesiredState: ManagedIdentitySQLControlSettingsModelPropertiesGrantSQLControlToManagedIdentityDesiredStateEnabled.ToPtr(),
				},
			},
		},
		&WorkspaceManagedIdentitySQLControlSettingsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ManagedIdentitySQLControlSettingsModel.ID == nil {
		t.Fatal("ManagedIdentitySQLControlSettingsModel.ID should not be nil!")
	}
}

func TestRestorableDroppedSqlPools_Get(t *testing.T) {
	// From example Get a restorable dropped Sql pool
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRestorableDroppedSQLPoolsClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"restorabledroppeddatabasetest-1257",
		"restorabledroppeddatabasetest-2389",
		"restorabledroppeddatabasetest-7654,131403269876900000",
		&RestorableDroppedSQLPoolsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.RestorableDroppedSQLPool.ID == nil {
		t.Fatal("RestorableDroppedSQLPool.ID should not be nil!")
	}
}

func TestRestorableDroppedSqlPools_ListByWorkspace(t *testing.T) {
	// From example Get list of restorable dropped Sql pools
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRestorableDroppedSQLPoolsClient(con,
		"00000000-1111-2222-3333-444444444444")
	_, err := client.ListByWorkspace(ctx,
		"restorabledroppeddatabasetest-1349",
		"restorabledroppeddatabasetest-1840",
		&RestorableDroppedSQLPoolsListByWorkspaceOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestBigDataPools_Get(t *testing.T) {
	// From example Get a Big Data pool
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewBigDataPoolsClient(con,
		"01234567-89ab-4def-0123-456789abcdef")
	res, err := client.Get(ctx,
		"ExampleResourceGroup",
		"ExampleWorkspace",
		"ExamplePool",
		&BigDataPoolsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.BigDataPoolResourceInfo.ID == nil {
		t.Fatal("BigDataPoolResourceInfo.ID should not be nil!")
	}
}

func TestBigDataPools_Update(t *testing.T) {
	// From example Update a Big Data pool
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewBigDataPoolsClient(con,
		"01234567-89ab-4def-0123-456789abcdef")
	res, err := client.Update(ctx,
		"ExampleResourceGroup",
		"ExampleWorkspace",
		"ExamplePool",
		BigDataPoolPatchInfo{
			Tags: map[string]*string{
				"key": to.StringPtr("value"),
			},
		},
		&BigDataPoolsUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.BigDataPoolResourceInfo.ID == nil {
		t.Fatal("BigDataPoolResourceInfo.ID should not be nil!")
	}
}

func TestBigDataPools_CreateOrUpdate(t *testing.T) {
	// From example Create or update a Big Data pool
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewBigDataPoolsClient(con,
		"01234567-89ab-4def-0123-456789abcdef")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"ExampleResourceGroup",
		"ExampleWorkspace",
		"ExamplePool",
		BigDataPoolResourceInfo{
			TrackedResource: TrackedResource{
				Location: to.StringPtr("West US 2"),
				Tags: map[string]*string{
					"key": to.StringPtr("value"),
				},
			},
			Properties: &BigDataPoolResourceProperties{
				AutoPause: &AutoPauseProperties{
					DelayInMinutes: to.Int32Ptr(15),
					Enabled:        to.BoolPtr(true),
				},
				AutoScale: &AutoScaleProperties{
					Enabled:      to.BoolPtr(true),
					MaxNodeCount: to.Int32Ptr(50),
					MinNodeCount: to.Int32Ptr(3),
				},
				DefaultSparkLogFolder: to.StringPtr("/logs"),
				LibraryRequirements: &LibraryRequirements{
					Content:  to.StringPtr(""),
					Filename: to.StringPtr("requirements.txt"),
				},
				NodeCount:         to.Int32Ptr(4),
				NodeSize:          NodeSizeMedium.ToPtr(),
				NodeSizeFamily:    NodeSizeFamilyMemoryOptimized.ToPtr(),
				SparkEventsFolder: to.StringPtr("/events"),
				SparkVersion:      to.StringPtr("2.4"),
			},
		},
		&BigDataPoolsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.BigDataPoolResourceInfo.ID == nil {
		t.Fatal("BigDataPoolResourceInfo.ID should not be nil!")
	}
}

func TestBigDataPools_Delete(t *testing.T) {
	// From example Delete a Big Data pool
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewBigDataPoolsClient(con,
		"01234567-89ab-4def-0123-456789abcdef")
	poller, err := client.BeginDelete(ctx,
		"ExampleResourceGroup",
		"ExampleWorkspace",
		"ExamplePool",
		&BigDataPoolsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestBigDataPools_ListByWorkspace(t *testing.T) {
	// From example List Big Data pools in a workspace
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewBigDataPoolsClient(con,
		"01234567-89ab-4def-0123-456789abcdef")
	pager := client.ListByWorkspace("ExampleResourceGroup",
		"ExampleWorkspace",
		&BigDataPoolsListByWorkspaceOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("BigDataPoolResourceInfo.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("BigDataPoolResourceInfo.ID should not be nil!")
			}
		}
	}
}

func TestLibrary_Get(t *testing.T) {
	// From example Get Library by name
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLibraryClient(con,
		"12345678-1234-1234-1234-12345678abc")
	res, err := client.Get(ctx,
		"exampleResourceGroup",
		"exampleLibraryName.jar",
		"exampleWorkspace",
		&LibraryGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.LibraryResource.ID == nil {
		t.Fatal("LibraryResource.ID should not be nil!")
	}
}

func TestLibraries_ListByWorkspace(t *testing.T) {
	// From example List libraries in a workspace
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewLibrariesClient(con,
		"12345678-1234-1234-1234-12345678abc")
	pager := client.ListByWorkspace("exampleResourceGroup",
		"exampleWorkspace",
		&LibrariesListByWorkspaceOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("LibraryResource.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("LibraryResource.ID should not be nil!")
			}
		}
	}
}

func TestIntegrationRuntimes_Update(t *testing.T) {
	// From example Update integration runtime
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIntegrationRuntimesClient(con,
		"12345678-1234-1234-1234-12345678abc")
	res, err := client.Update(ctx,
		"exampleResourceGroup",
		"exampleWorkspace",
		"exampleIntegrationRuntime",
		UpdateIntegrationRuntimeRequest{
			AutoUpdate:        IntegrationRuntimeAutoUpdateOff.ToPtr(),
			UpdateDelayOffset: to.StringPtr("\"PT3H\""),
		},
		&IntegrationRuntimesUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.IntegrationRuntimeResource.ID == nil {
		t.Fatal("IntegrationRuntimeResource.ID should not be nil!")
	}
}

func TestIntegrationRuntimes_Get(t *testing.T) {
	// From example Get integration runtime
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIntegrationRuntimesClient(con,
		"12345678-1234-1234-1234-12345678abc")
	res, err := client.Get(ctx,
		"exampleResourceGroup",
		"exampleWorkspace",
		"exampleIntegrationRuntime",
		&IntegrationRuntimesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.IntegrationRuntimeResource.ID == nil {
		t.Fatal("IntegrationRuntimeResource.ID should not be nil!")
	}
}

func TestIntegrationRuntimes_Create(t *testing.T) {
	// From example Create integration runtime
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIntegrationRuntimesClient(con,
		"12345678-1234-1234-1234-12345678abc")
	poller, err := client.BeginCreate(ctx,
		"exampleResourceGroup",
		"exampleWorkspace",
		"exampleIntegrationRuntime",
		IntegrationRuntimeResource{
			Properties: &SelfHostedIntegrationRuntime{
				IntegrationRuntime: IntegrationRuntime{
					IntegrationRuntime: map[string]map[string]interface{}{
						"type": map[string]interface{}{
							"0": "S",
							"1": "e",
							"2": "l",
							"3": "f",
							"4": "H",
							"5": "o",
							"6": "s",
							"7": "t",
							"8": "e",
							"9": "d",
						},
						"description": map[string]interface{}{
							"0":  "A",
							"1":  " ",
							"2":  "s",
							"3":  "e",
							"4":  "l",
							"5":  "f",
							"6":  "h",
							"7":  "o",
							"8":  "s",
							"9":  "t",
							"10": "e",
							"11": "d",
							"12": " ",
							"13": "i",
							"14": "n",
							"15": "t",
							"16": "e",
							"17": "g",
							"18": "r",
							"19": "a",
							"20": "t",
							"21": "i",
							"22": "o",
							"23": "n",
							"24": " ",
							"25": "r",
							"26": "u",
							"27": "n",
							"28": "t",
							"29": "i",
							"30": "m",
							"31": "e",
						},
					},
					Type:        IntegrationRuntimeTypeSelfHosted.ToPtr(),
					Description: to.StringPtr("A selfhosted integration runtime"),
				},
			},
		},
		&IntegrationRuntimesBeginCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.IntegrationRuntimeResource.ID == nil {
		t.Fatal("IntegrationRuntimeResource.ID should not be nil!")
	}
}

func TestIntegrationRuntimes_Delete(t *testing.T) {
	// From example Delete integration runtime
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIntegrationRuntimesClient(con,
		"12345678-1234-1234-1234-12345678abc")
	poller, err := client.BeginDelete(ctx,
		"exampleResourceGroup",
		"exampleWorkspace",
		"exampleIntegrationRuntime",
		&IntegrationRuntimesBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestIntegrationRuntimes_Upgrade(t *testing.T) {
	// From example Upgrade integration runtime
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIntegrationRuntimesClient(con,
		"12345678-1234-1234-1234-12345678abc")
	_, err := client.Upgrade(ctx,
		"exampleResourceGroup",
		"exampleWorkspace",
		"exampleIntegrationRuntime",
		&IntegrationRuntimesUpgradeOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestIntegrationRuntimes_ListByWorkspace(t *testing.T) {
	// From example List integration runtimes
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIntegrationRuntimesClient(con,
		"12345678-1234-1234-1234-12345678abc")
	pager := client.ListByWorkspace("exampleResourceGroup",
		"exampleWorkspace",
		&IntegrationRuntimesListByWorkspaceOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("IntegrationRuntimeResource.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("IntegrationRuntimeResource.ID should not be nil!")
			}
		}
	}
}

func TestIntegrationRuntimes_Start(t *testing.T) {
	// From example Start integration runtime
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIntegrationRuntimesClient(con,
		"12345678-1234-1234-1234-12345678abc")
	poller, err := client.BeginStart(ctx,
		"exampleResourceGroup",
		"exampleWorkspace",
		"exampleManagedIntegrationRuntime",
		&IntegrationRuntimesBeginStartOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestIntegrationRuntimes_Stop(t *testing.T) {
	// From example Stop integration runtime
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIntegrationRuntimesClient(con,
		"12345678-1234-1234-1234-12345678abc")
	poller, err := client.BeginStop(ctx,
		"exampleResourceGroup",
		"exampleWorkspace",
		"exampleManagedIntegrationRuntime",
		&IntegrationRuntimesBeginStopOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestIntegrationRuntimes_ListOutboundNetworkDependenciesEndpoints(t *testing.T) {
	// From example Get outbound network dependency endpoints
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIntegrationRuntimesClient(con,
		"ade9c2b6-c160-4305-9bb9-80342f6c1ae2")
	_, err := client.ListOutboundNetworkDependenciesEndpoints(ctx,
		"exampleResourceGroup",
		"exampleWorkspace",
		"exampleIntegrationRuntime",
		&IntegrationRuntimesListOutboundNetworkDependenciesEndpointsOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestIntegrationRuntimes_EnableInteractiveQuery(t *testing.T) {
	// From example Stop integration runtime
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIntegrationRuntimesClient(con,
		"12345678-1234-1234-1234-12345678abc")
	poller, err := client.BeginEnableInteractiveQuery(ctx,
		"exampleResourceGroup",
		"exampleWorkspace",
		"exampleManagedIntegrationRuntime",
		&IntegrationRuntimesBeginEnableInteractiveQueryOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestIntegrationRuntimes_DisableInteractiveQuery(t *testing.T) {
	// From example Stop integration runtime
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIntegrationRuntimesClient(con,
		"12345678-1234-1234-1234-12345678abc")
	poller, err := client.BeginDisableInteractiveQuery(ctx,
		"exampleResourceGroup",
		"exampleWorkspace",
		"exampleManagedIntegrationRuntime",
		&IntegrationRuntimesBeginDisableInteractiveQueryOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestIntegrationRuntimeNodeIpAddress_Get(t *testing.T) {
	// From example Get integration runtime node IP address
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIntegrationRuntimeNodeIPAddressClient(con,
		"12345678-1234-1234-1234-12345678abc")
	_, err := client.Get(ctx,
		"exampleResourceGroup",
		"exampleWorkspace",
		"exampleIntegrationRuntime",
		"Node_1",
		&IntegrationRuntimeNodeIPAddressGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestIntegrationRuntimeObjectMetadata_List(t *testing.T) {
	// From example Get integration runtime object metadata
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIntegrationRuntimeObjectMetadataClient(con,
		"12345678-1234-1234-1234-12345678abc")
	_, err := client.List(ctx,
		"exampleResourceGroup",
		"exampleWorkspace",
		"testactivityv2",
		&IntegrationRuntimeObjectMetadataListOptions{GetMetadataRequest: &GetSsisObjectMetadataRequest{
			MetadataPath: to.StringPtr("ssisFolders"),
		},
		})
	if err != nil {
		t.Fatal(err)
	}
}

func TestIntegrationRuntimeObjectMetadata_Refresh(t *testing.T) {
	// From example Refresh object metadata
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIntegrationRuntimeObjectMetadataClient(con,
		"12345678-1234-1234-1234-12345678abc")
	poller, err := client.BeginRefresh(ctx,
		"exampleResourceGroup",
		"exampleWorkspace",
		"testactivityv2",
		&IntegrationRuntimeObjectMetadataBeginRefreshOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestIntegrationRuntimeNodes_Get(t *testing.T) {
	// From example Get integration runtime node
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIntegrationRuntimeNodesClient(con,
		"12345678-1234-1234-1234-12345678abc")
	_, err := client.Get(ctx,
		"exampleResourceGroup",
		"exampleWorkspace",
		"exampleIntegrationRuntime",
		"Node_1",
		&IntegrationRuntimeNodesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestIntegrationRuntimeNodes_Update(t *testing.T) {
	// From example Update integration runtime node
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIntegrationRuntimeNodesClient(con,
		"12345678-1234-1234-1234-12345678abc")
	_, err := client.Update(ctx,
		"exampleResourceGroup",
		"exampleWorkspace",
		"exampleIntegrationRuntime",
		"Node_1",
		UpdateIntegrationRuntimeNodeRequest{
			ConcurrentJobsLimit: to.Int32Ptr(2),
		},
		&IntegrationRuntimeNodesUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestIntegrationRuntimeNodes_Delete(t *testing.T) {
	// From example Delete integration runtime node
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIntegrationRuntimeNodesClient(con,
		"12345678-1234-1234-1234-12345678abc")
	_, err := client.Delete(ctx,
		"exampleResourceGroup",
		"exampleWorkspace",
		"exampleIntegrationRuntime",
		"Node_1",
		&IntegrationRuntimeNodesDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestIntegrationRuntimeCredentials_Sync(t *testing.T) {
	// From example Sync credentials
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIntegrationRuntimeCredentialsClient(con,
		"12345678-1234-1234-1234-12345678abc")
	_, err := client.Sync(ctx,
		"exampleResourceGroup",
		"exampleWorkspace",
		"exampleIntegrationRuntime",
		&IntegrationRuntimeCredentialsSyncOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestIntegrationRuntimeConnectionInfos_Get(t *testing.T) {
	// From example Get connection info
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIntegrationRuntimeConnectionInfosClient(con,
		"12345678-1234-1234-1234-12345678abc")
	_, err := client.Get(ctx,
		"exampleResourceGroup",
		"exampleWorkspace",
		"exampleIntegrationRuntime",
		&IntegrationRuntimeConnectionInfosGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestIntegrationRuntimeAuthKeys_Regenerate(t *testing.T) {
	// From example Regenerate auth key
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIntegrationRuntimeAuthKeysClient(con,
		"12345678-1234-1234-1234-12345678abc")
	_, err := client.Regenerate(ctx,
		"exampleResourceGroup",
		"exampleWorkspace",
		"exampleIntegrationRuntime",
		IntegrationRuntimeRegenerateKeyParameters{
			KeyName: IntegrationRuntimeAuthKeyNameAuthKey2.ToPtr(),
		},
		&IntegrationRuntimeAuthKeysRegenerateOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestIntegrationRuntimeAuthKeys_List(t *testing.T) {
	// From example List auth keys
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIntegrationRuntimeAuthKeysClient(con,
		"12345678-1234-1234-1234-12345678abc")
	_, err := client.List(ctx,
		"exampleResourceGroup",
		"exampleWorkspace",
		"exampleIntegrationRuntime",
		&IntegrationRuntimeAuthKeysListOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestIntegrationRuntimeMonitoringData_List(t *testing.T) {
	// From example Get monitoring data
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIntegrationRuntimeMonitoringDataClient(con,
		"12345678-1234-1234-1234-12345678abc")
	_, err := client.List(ctx,
		"exampleResourceGroup",
		"exampleWorkspace",
		"exampleIntegrationRuntime",
		&IntegrationRuntimeMonitoringDataListOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestIntegrationRuntimeStatus_Get(t *testing.T) {
	// From example Get status
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewIntegrationRuntimeStatusClient(con,
		"12345678-1234-1234-1234-12345678abc")
	_, err := client.Get(ctx,
		"exampleResourceGroup",
		"exampleWorkspace",
		"exampleIntegrationRuntime",
		&IntegrationRuntimeStatusGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestSparkConfiguration_Get(t *testing.T) {
	// From example Get SparkConfiguration by name
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSparkConfigurationClient(con,
		"12345678-1234-1234-1234-12345678abc")
	res, err := client.Get(ctx,
		"exampleResourceGroup",
		"exampleSparkConfigurationName",
		"exampleWorkspace",
		&SparkConfigurationGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.SparkConfigurationResource.ID == nil {
		t.Fatal("SparkConfigurationResource.ID should not be nil!")
	}
}

func TestSparkConfigurations_ListByWorkspace(t *testing.T) {
	// From example List sparkConfigurations in a workspace
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSparkConfigurationsClient(con,
		"12345678-1234-1234-1234-12345678abc")
	pager := client.ListByWorkspace("exampleResourceGroup",
		"exampleWorkspace",
		&SparkConfigurationsListByWorkspaceOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("SparkConfigurationResource.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("SparkConfigurationResource.ID should not be nil!")
			}
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	subscriptionId = getEnv("SUBSCRIPTION_ID", "00000000-0000-0000-0000-000000000000")
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}
	cred, err = azidentity.NewEnvironmentCredential(&azidentity.EnvironmentCredentialOptions{AuthorityHost: mockHost, HTTPClient: client})
	if err != nil {
		panic(err)
	}

	con = arm.NewConnection(mockHost, cred, &arm.ConnectionOptions{
		Logging: policy.LogOptions{
			IncludeBody: true,
		},
		HTTPClient: client,
	})
}

func tearDown() {

}
