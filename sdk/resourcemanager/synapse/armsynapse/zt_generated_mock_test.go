//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armsynapse_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/synapse/armsynapse"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestAzureADOnlyAuthentications_Get(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetAzureADOnlyAuthentication.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Azure Active Directory Only Authentication property"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewAzureADOnlyAuthenticationsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"workspace-6852",
		"workspace-2080",
		armsynapse.AzureADOnlyAuthenticationNameDefault,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetAzureADOnlyAuthentication.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.AzureADOnlyAuthentication{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Synapse/workspaces/azureADOnlyAuthentications"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-6852/providers/Microsoft.Synapse/workspaces/workspace-2080/azureADOnlyAuthentications/default"),
			Properties: &armsynapse.AzureADOnlyAuthenticationProperties{
				AzureADOnlyAuthentication: to.Ptr(true),
				CreationDate:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-10T00:56:19.2Z"); return t }()),
				State:                     to.Ptr(armsynapse.StateValueConsistent),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AzureADOnlyAuthentication) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AzureADOnlyAuthentication)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetAzureADOnlyAuthentication.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAzureADOnlyAuthentications_Create(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/CreateOrUpdateAzureADOnlyAuthentication.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or Update Azure Active Directory Only Authentication property"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewAzureADOnlyAuthenticationsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginCreate(ctx,
		"workspace-6852",
		"workspace-2080",
		armsynapse.AzureADOnlyAuthenticationNameDefault,
		armsynapse.AzureADOnlyAuthentication{
			Properties: &armsynapse.AzureADOnlyAuthenticationProperties{
				AzureADOnlyAuthentication: to.Ptr(true),
			},
		},
		&armsynapse.AzureADOnlyAuthenticationsClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/CreateOrUpdateAzureADOnlyAuthentication.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/CreateOrUpdateAzureADOnlyAuthentication.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.AzureADOnlyAuthentication{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Synapse/workspaces/azureADOnlyAuthentications"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-6852/providers/Microsoft.Synapse/workspaces/workspace-2080/azureADOnlyAuthentications/default"),
			Properties: &armsynapse.AzureADOnlyAuthenticationProperties{
				AzureADOnlyAuthentication: to.Ptr(true),
				CreationDate:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-10T00:56:19.2Z"); return t }()),
				State:                     to.Ptr(armsynapse.StateValueConsistent),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AzureADOnlyAuthentication) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AzureADOnlyAuthentication)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/CreateOrUpdateAzureADOnlyAuthentication.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAzureADOnlyAuthentications_List(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ListAzureADOnlyAuthentication.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a list of Azure Active Directory Only Authentication property"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewAzureADOnlyAuthenticationsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.List("workspace-6852",
		"workspace-2080",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ListAzureADOnlyAuthentication.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsynapse.AzureADOnlyAuthenticationListResult{
			Value: []*armsynapse.AzureADOnlyAuthentication{
				{
					Name: to.Ptr("default"),
					Type: to.Ptr("Microsoft.Synapse/workspaces/azureADOnlyAuthentications"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/workspace-6852/providers/Microsoft.Synapse/workspaces/workspace-2080/azureADOnlyAuthentications/default"),
					Properties: &armsynapse.AzureADOnlyAuthenticationProperties{
						AzureADOnlyAuthentication: to.Ptr(true),
						CreationDate:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-10T00:56:19.2Z"); return t }()),
						State:                     to.Ptr(armsynapse.StateValueConsistent),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AzureADOnlyAuthenticationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AzureADOnlyAuthenticationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ListAzureADOnlyAuthentication.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOperations_CheckNameAvailability(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/CheckNameAvailabilityWorkspaceAlreadyExists.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Check for a workspace name that already exists"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewOperationsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.CheckNameAvailability(ctx,
		armsynapse.CheckNameAvailabilityRequest{
			Name: to.Ptr("workspace1"),
			Type: to.Ptr("Microsoft.Synapse/workspaces"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/CheckNameAvailabilityWorkspaceAlreadyExists.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.CheckNameAvailabilityResponse{
			Name:      to.Ptr("workspace1"),
			Available: to.Ptr(false),
			Message:   to.Ptr("Specified workspace name is already used"),
			Reason:    to.Ptr("AlreadyExists"),
		}
		if !reflect.DeepEqual(exampleRes, res.CheckNameAvailabilityResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CheckNameAvailabilityResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/CheckNameAvailabilityWorkspaceAlreadyExists.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/CheckNameAvailabilityWorkspaceAvailable.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Check for a workspace name that is available"},
	})
	client = armsynapse.NewOperationsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err = client.CheckNameAvailability(ctx,
		armsynapse.CheckNameAvailabilityRequest{
			Name: to.Ptr("workspace1"),
			Type: to.Ptr("Microsoft.ProjectArcadia/workspaces"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/CheckNameAvailabilityWorkspaceAvailable.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.CheckNameAvailabilityResponse{
			Name:      to.Ptr("workspace1"),
			Available: to.Ptr(true),
		}
		if !reflect.DeepEqual(exampleRes, res.CheckNameAvailabilityResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CheckNameAvailabilityResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/CheckNameAvailabilityWorkspaceAvailable.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOperations_List(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetAvailableOperations.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get available operations"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewOperationsClient("<subscription-id>", cred, &options)
	res, err := client.List(ctx,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetAvailableOperations.json: %v", err)
	}
	// Response check
	{
		exampleRes := []*armsynapse.AvailableRpOperation{
			{
				Name: to.Ptr("Microsoft.Synapse/workspaces/integrationRuntimes/read"),
				Display: &armsynapse.AvailableRpOperationDisplayInfo{
					Description: to.Ptr("Get any Integration Runtime."),
					Operation:   to.Ptr("Get Integration Runtime Operation result."),
					Provider:    to.Ptr("Analytics 365 Resource Provider."),
					Resource:    to.Ptr("Integration Runtimes."),
				},
				IsDataAction: to.Ptr("false"),
				Origin:       to.Ptr("user, system"),
			},
			{
				Name: to.Ptr("Microsoft.Synapse/workspaces/managedIdentitySqlControlSettings/write"),
				Display: &armsynapse.AvailableRpOperationDisplayInfo{
					Description: to.Ptr("Update Managed Identity SQL Control Settings on the workspace"),
					Operation:   to.Ptr("Update Managed Identity SQL Control Settings"),
					Provider:    to.Ptr("Analytics 365 Resource Provider."),
					Resource:    to.Ptr("Managed Identity SQL Control Settings"),
				},
				IsDataAction: to.Ptr("false"),
				Origin:       to.Ptr("user"),
			},
			{
				Name: to.Ptr("Microsoft.Synapse/workspaces/managedIdentitySqlControlSettings/read"),
				Display: &armsynapse.AvailableRpOperationDisplayInfo{
					Description: to.Ptr("Get Managed Identity SQL Control Settings"),
					Operation:   to.Ptr("Get Managed Identity SQL Control Settings"),
					Provider:    to.Ptr("Analytics 365 Resource Provider."),
					Resource:    to.Ptr("Managed Identity SQL Control Settings"),
				},
				IsDataAction: to.Ptr("false"),
				Origin:       to.Ptr("user"),
			},
			{
				Name: to.Ptr("Microsoft.Synapse/operations/read"),
				Display: &armsynapse.AvailableRpOperationDisplayInfo{
					Description: to.Ptr("Read Available Operations from the Analytics 365 Resource Provider."),
					Operation:   to.Ptr("Read Available Operations."),
					Provider:    to.Ptr("Analytics 365 Resource Provider."),
					Resource:    to.Ptr("Available Operations"),
				},
				IsDataAction: to.Ptr("false"),
				Origin:       to.Ptr("user, system"),
			},
			{
				Name: to.Ptr("Microsoft.Synapse/workspaces/integrationRuntimes/nodes/read"),
				Display: &armsynapse.AvailableRpOperationDisplayInfo{
					Description: to.Ptr("Get any Integration Runtime Node."),
					Operation:   to.Ptr("Get Integration Runtime Node."),
					Provider:    to.Ptr("Analytics 365 Resource Provider."),
					Resource:    to.Ptr("Integration Runtimes."),
				},
				IsDataAction: to.Ptr("false"),
				Origin:       to.Ptr("user, system"),
			},
			{
				Name: to.Ptr("Microsoft.Synapse/workspaces/integrationRuntimes/nodes/delete"),
				Display: &armsynapse.AvailableRpOperationDisplayInfo{
					Description: to.Ptr("Delete any Integration Runtime Node."),
					Operation:   to.Ptr("Delete Integration Runtime Node."),
					Provider:    to.Ptr("Analytics 365 Resource Provider."),
					Resource:    to.Ptr("Integration Runtimes."),
				},
				IsDataAction: to.Ptr("false"),
				Origin:       to.Ptr("user, system"),
			},
			{
				Name: to.Ptr("Microsoft.Synapse/workspaces/integrationRuntimes/nodes/write"),
				Display: &armsynapse.AvailableRpOperationDisplayInfo{
					Description: to.Ptr("Patch any Integration Runtime Node."),
					Operation:   to.Ptr("Patch Integration Runtime Node."),
					Provider:    to.Ptr("Analytics 365 Resource Provider."),
					Resource:    to.Ptr("Integration Runtimes."),
				},
				IsDataAction: to.Ptr("false"),
				Origin:       to.Ptr("user, system"),
			},
			{
				Name: to.Ptr("Microsoft.Synapse/workspaces/integrationRuntimes/nodes/ipAddress/action"),
				Display: &armsynapse.AvailableRpOperationDisplayInfo{
					Description: to.Ptr("Get Integration Runtime Ip Address"),
					Operation:   to.Ptr("Get Integration Runtime Ip Address"),
					Provider:    to.Ptr("Analytics 365 Resource Provider."),
					Resource:    to.Ptr("Integration Runtimes."),
				},
				IsDataAction: to.Ptr("false"),
				Origin:       to.Ptr("user, system"),
			},
			{
				Name: to.Ptr("Microsoft.Synapse/workspaces/integrationruntimes/write"),
				Display: &armsynapse.AvailableRpOperationDisplayInfo{
					Description: to.Ptr("Create or Update any Integration Runtimes."),
					Operation:   to.Ptr("Create or Update Integration Runtimes."),
					Provider:    to.Ptr("Analytics 365 Resource Provider."),
					Resource:    to.Ptr("Integration Runtimes."),
				},
				IsDataAction: to.Ptr("false"),
				Origin:       to.Ptr("user"),
			},
			{
				Name: to.Ptr("Microsoft.Synapse/workspaces/integrationRuntimes/delete"),
				Display: &armsynapse.AvailableRpOperationDisplayInfo{
					Description: to.Ptr("Delete any Integration Runtime"),
					Operation:   to.Ptr("Delete Integration Runtimes"),
					Provider:    to.Ptr("Analytics 365 Resource Provider."),
					Resource:    to.Ptr("Integration Runtimes."),
				},
				IsDataAction: to.Ptr("false"),
				Origin:       to.Ptr("user, system"),
			},
			{
				Name: to.Ptr("Microsoft.Synapse/workspaces/integrationRuntimes/getStatus/action"),
				Display: &armsynapse.AvailableRpOperationDisplayInfo{
					Description: to.Ptr("Get any Integration Runtime's Status"),
					Operation:   to.Ptr("Get an Integration Runtime Status"),
					Provider:    to.Ptr("Analytics 365 Resource Provider."),
					Resource:    to.Ptr("Integration Runtimes."),
				},
				IsDataAction: to.Ptr("false"),
				Origin:       to.Ptr("user, system"),
			},
			{
				Name: to.Ptr("Microsoft.Synapse/workspaces/integrationRuntimes/start/action"),
				Display: &armsynapse.AvailableRpOperationDisplayInfo{
					Description: to.Ptr("Start any Integration Runtime"),
					Operation:   to.Ptr("Start an Integration Runtime"),
					Provider:    to.Ptr("Analytics 365 Resource Provider."),
					Resource:    to.Ptr("Integration Runtimes."),
				},
				IsDataAction: to.Ptr("false"),
				Origin:       to.Ptr("user, system"),
			},
			{
				Name: to.Ptr("Microsoft.Synapse/workspaces/integrationRuntimes/stop/action"),
				Display: &armsynapse.AvailableRpOperationDisplayInfo{
					Description: to.Ptr("Stop any Integration Runtime"),
					Operation:   to.Ptr("Stop an Integration Runtime"),
					Provider:    to.Ptr("Analytics 365 Resource Provider."),
					Resource:    to.Ptr("Integration Runtimes."),
				},
				IsDataAction: to.Ptr("false"),
				Origin:       to.Ptr("user, system"),
			},
			{
				Name: to.Ptr("Microsoft.Synapse/workspaces/integrationRuntimes/getConnectionInfo/action"),
				Display: &armsynapse.AvailableRpOperationDisplayInfo{
					Description: to.Ptr("Get Connection Info of any Integration Runtime"),
					Operation:   to.Ptr("Get Connection Info of an Integration Runtime"),
					Provider:    to.Ptr("Analytics 365 Resource Provider."),
					Resource:    to.Ptr("Integration Runtimes."),
				},
				IsDataAction: to.Ptr("false"),
				Origin:       to.Ptr("user, system"),
			},
			{
				Name: to.Ptr("Microsoft.Synapse/workspaces/integrationRuntimes/regenerateAuthKey/action"),
				Display: &armsynapse.AvailableRpOperationDisplayInfo{
					Description: to.Ptr("Regenerate auth key of any Integration Runtime"),
					Operation:   to.Ptr("Regenerate auth key of an Integration Runtime"),
					Provider:    to.Ptr("Analytics 365 Resource Provider."),
					Resource:    to.Ptr("Integration Runtimes."),
				},
				IsDataAction: to.Ptr("false"),
				Origin:       to.Ptr("user, system"),
			},
			{
				Name: to.Ptr("Microsoft.Synapse/workspaces/integrationRuntimes/listAuthKeys/action"),
				Display: &armsynapse.AvailableRpOperationDisplayInfo{
					Description: to.Ptr("List Auth Keys of any Integration Runtime"),
					Operation:   to.Ptr("List Auth Keys of an Integration Runtime"),
					Provider:    to.Ptr("Analytics 365 Resource Provider."),
					Resource:    to.Ptr("Integration Runtimes."),
				},
				IsDataAction: to.Ptr("false"),
				Origin:       to.Ptr("user, system"),
			},
			{
				Name: to.Ptr("Microsoft.Synapse/workspaces/integrationRuntimes/removeNode/action"),
				Display: &armsynapse.AvailableRpOperationDisplayInfo{
					Description: to.Ptr("Remove any Integration Runtime node"),
					Operation:   to.Ptr("Remove an Integration Runtime node"),
					Provider:    to.Ptr("Analytics 365 Resource Provider."),
					Resource:    to.Ptr("Integration Runtimes."),
				},
				IsDataAction: to.Ptr("false"),
				Origin:       to.Ptr("user, system"),
			},
			{
				Name: to.Ptr("Microsoft.Synapse/workspaces/integrationRuntimes/monitoringData/action"),
				Display: &armsynapse.AvailableRpOperationDisplayInfo{
					Description: to.Ptr("Get any Integration Runtime's monitoring data"),
					Operation:   to.Ptr("Get an Integration Runtime's monitoring data"),
					Provider:    to.Ptr("Analytics 365 Resource Provider."),
					Resource:    to.Ptr("Integration Runtimes."),
				},
				IsDataAction: to.Ptr("false"),
				Origin:       to.Ptr("user, system"),
			},
			{
				Name: to.Ptr("Microsoft.Synapse/workspaces/integrationRuntimes/syncCredentials/action"),
				Display: &armsynapse.AvailableRpOperationDisplayInfo{
					Description: to.Ptr("Sync credential on any Integration Runtime"),
					Operation:   to.Ptr("Sync credential on an Integration Runtime"),
					Provider:    to.Ptr("Analytics 365 Resource Provider."),
					Resource:    to.Ptr("Integration Runtimes."),
				},
				IsDataAction: to.Ptr("false"),
				Origin:       to.Ptr("user, system"),
			},
			{
				Name: to.Ptr("Microsoft.Synapse/workspaces/integrationRuntimes/upgrade/action"),
				Display: &armsynapse.AvailableRpOperationDisplayInfo{
					Description: to.Ptr("Upgrade any Integration Runtime"),
					Operation:   to.Ptr("Upgrade an Integration Runtime"),
					Provider:    to.Ptr("Analytics 365 Resource Provider."),
					Resource:    to.Ptr("Integration Runtimes."),
				},
				IsDataAction: to.Ptr("false"),
				Origin:       to.Ptr("user, system"),
			},
			{
				Name: to.Ptr("Microsoft.Synapse/workspaces/integrationRuntimes/removeLinks/action"),
				Display: &armsynapse.AvailableRpOperationDisplayInfo{
					Description: to.Ptr("Remove any Integration Runtime link"),
					Operation:   to.Ptr("Remove an Integration Runtime link"),
					Provider:    to.Ptr("Analytics 365 Resource Provider."),
					Resource:    to.Ptr("Integration Runtimes."),
				},
				IsDataAction: to.Ptr("false"),
				Origin:       to.Ptr("user, system"),
			},
			{
				Name: to.Ptr("Microsoft.Synapse/workspaces/integrationRuntimes/enableInteractiveQuery/action"),
				Display: &armsynapse.AvailableRpOperationDisplayInfo{
					Description: to.Ptr("Enable Interactive query on any Integration Runtime"),
					Operation:   to.Ptr("Enable Interactive query on an Integration Runtime"),
					Provider:    to.Ptr("Analytics 365 Resource Provider."),
					Resource:    to.Ptr("Integration Runtimes."),
				},
				IsDataAction: to.Ptr("false"),
				Origin:       to.Ptr("user, system"),
			},
			{
				Name: to.Ptr("Microsoft.Synapse/workspaces/integrationRuntimes/disableInteractiveQuery/action"),
				Display: &armsynapse.AvailableRpOperationDisplayInfo{
					Description: to.Ptr("Disable Interactive query on any Integration Runtime"),
					Operation:   to.Ptr("Disable Interactive query on an Integration Runtime"),
					Provider:    to.Ptr("Analytics 365 Resource Provider."),
					Resource:    to.Ptr("Integration Runtimes."),
				},
				IsDataAction: to.Ptr("false"),
				Origin:       to.Ptr("user, system"),
			},
			{
				Name: to.Ptr("Microsoft.Synapse/workspaces/integrationRuntimes/refreshObjectMetadata/action"),
				Display: &armsynapse.AvailableRpOperationDisplayInfo{
					Description: to.Ptr("Refresh Object metadata on any Intergration Runtime"),
					Operation:   to.Ptr("Refresh Object metadata on an Intergration Runtime"),
					Provider:    to.Ptr("Analytics 365 Resource Provider."),
					Resource:    to.Ptr("Integration Runtimes."),
				},
				IsDataAction: to.Ptr("false"),
				Origin:       to.Ptr("user, system"),
			},
			{
				Name: to.Ptr("Microsoft.Synapse/workspaces/integrationRuntimes/getObjectMetadata/action"),
				Display: &armsynapse.AvailableRpOperationDisplayInfo{
					Description: to.Ptr("Get Object metadata on any Intergration Runtime"),
					Operation:   to.Ptr("Get Object metadata on an Intergration Runtime"),
					Provider:    to.Ptr("Analytics 365 Resource Provider."),
					Resource:    to.Ptr("Integration Runtimes."),
				},
				IsDataAction: to.Ptr("false"),
				Origin:       to.Ptr("user, system"),
			},
			{
				Name: to.Ptr("Microsoft.Synapse/workspaces/firewallRules/write"),
				Display: &armsynapse.AvailableRpOperationDisplayInfo{
					Description: to.Ptr("Create or update any IP Firewall Rule."),
					Operation:   to.Ptr("Create or update IP Firewall Rule."),
					Provider:    to.Ptr("Analytics 365 Resource Provider."),
					Resource:    to.Ptr("IP Firewall Rule."),
				},
				IsDataAction: to.Ptr("false"),
				Origin:       to.Ptr("user"),
			},
			{
				Name: to.Ptr("Microsoft.Synapse/workspaces/firewallRules/read"),
				Display: &armsynapse.AvailableRpOperationDisplayInfo{
					Description: to.Ptr("Read IP Firewall Rule"),
					Operation:   to.Ptr("Read IP Firewall Rule"),
					Provider:    to.Ptr("Analytics 365 Resource Provider."),
					Resource:    to.Ptr("IP Firewall Rule."),
				},
				IsDataAction: to.Ptr("false"),
				Origin:       to.Ptr("user"),
			},
			{
				Name: to.Ptr("Microsoft.Synapse/workspaces/firewallRules/delete"),
				Display: &armsynapse.AvailableRpOperationDisplayInfo{
					Description: to.Ptr("Delete any IP Firewall Rule."),
					Operation:   to.Ptr("Delete IP Firewall Rule"),
					Provider:    to.Ptr("Analytics 365 Resource Provider."),
					Resource:    to.Ptr("IP Firewall Rule."),
				},
				IsDataAction: to.Ptr("false"),
				Origin:       to.Ptr("user"),
			},
			{
				Name: to.Ptr("Microsoft.Synapse/workspaces/replaceAllIpFirewallRules/action"),
				Display: &armsynapse.AvailableRpOperationDisplayInfo{
					Description: to.Ptr("Replaces all Ip Firewall Rules for the Workspace."),
					Operation:   to.Ptr("Replace all Ip Firewall Rules for the Workspace."),
					Provider:    to.Ptr("Analytics 365 Resource Provider."),
					Resource:    to.Ptr("Workspaces"),
				},
				IsDataAction: to.Ptr("false"),
				Origin:       to.Ptr("user"),
			},
			{
				Name: to.Ptr("Microsoft.Synapse/workspaces/sqlPools/write"),
				Display: &armsynapse.AvailableRpOperationDisplayInfo{
					Description: to.Ptr("Create or Update any SQL Analytics pools."),
					Operation:   to.Ptr("Create or Update SQL Analytics pools."),
					Provider:    to.Ptr("Analytics 365 Resource Provider."),
					Resource:    to.Ptr("SQL Analytics pools"),
				},
				IsDataAction: to.Ptr("false"),
				Origin:       to.Ptr("user"),
			},
			{
				Name: to.Ptr("Microsoft.Synapse/workspaces/sqlPools/read"),
				Display: &armsynapse.AvailableRpOperationDisplayInfo{
					Description: to.Ptr("Read any SQL Analytics pools."),
					Operation:   to.Ptr("Read SQL Analytics pools."),
					Provider:    to.Ptr("Analytics 365 Resource Provider."),
					Resource:    to.Ptr("SQL Analytics pools"),
				},
				IsDataAction: to.Ptr("false"),
				Origin:       to.Ptr("user, system"),
			},
			{
				Name: to.Ptr("Microsoft.Synapse/workspaces/sqlPools/dataWarehouseQueries/read"),
				Display: &armsynapse.AvailableRpOperationDisplayInfo{
					Description: to.Ptr("Read any SQL Analytics pool Queries."),
					Operation:   to.Ptr("Read SQL Analytics pool Queries."),
					Provider:    to.Ptr("Analytics 365 Resource Provider."),
					Resource:    to.Ptr("SQL Analytics pool Queries"),
				},
				IsDataAction: to.Ptr("false"),
				Origin:       to.Ptr("user, system"),
			},
			{
				Name: to.Ptr("Microsoft.Synapse/workspaces/sqlPools/geoBackupPolicies/read"),
				Display: &armsynapse.AvailableRpOperationDisplayInfo{
					Description: to.Ptr("Read any SQL Analytics pool Geo Backup Policies."),
					Operation:   to.Ptr("Read SQL Analytics pool Geo Backup Policies."),
					Provider:    to.Ptr("Analytics 365 Resource Provider."),
					Resource:    to.Ptr("SQL Analytics pool Geo Backup Policies"),
				},
				IsDataAction: to.Ptr("false"),
				Origin:       to.Ptr("user, system"),
			},
			{
				Name: to.Ptr("Microsoft.Synapse/workspaces/sqlPools/dataWarehouseUserActivities/read"),
				Display: &armsynapse.AvailableRpOperationDisplayInfo{
					Description: to.Ptr("Read any SQL Analytics pool User Activities."),
					Operation:   to.Ptr("Read SQL Analytics pool User Activities."),
					Provider:    to.Ptr("Analytics 365 Resource Provider."),
					Resource:    to.Ptr("SQL Analytics pool User Activities"),
				},
				IsDataAction: to.Ptr("false"),
				Origin:       to.Ptr("user, system"),
			},
			{
				Name: to.Ptr("Microsoft.Synapse/workspaces/sqlPools/restorePoints/read"),
				Display: &armsynapse.AvailableRpOperationDisplayInfo{
					Description: to.Ptr("Read any SQL Analytics pool Restore Points."),
					Operation:   to.Ptr("Read SQL Analytics pool Restore Points."),
					Provider:    to.Ptr("Analytics 365 Resource Provider."),
					Resource:    to.Ptr("SQL Analytics pool Restore Points"),
				},
				IsDataAction: to.Ptr("false"),
				Origin:       to.Ptr("user, system"),
			},
			{
				Name: to.Ptr("Microsoft.Synapse/workspaces/sqlPools/dataWarehouseQueries/dataWarehouseQuerySteps/read"),
				Display: &armsynapse.AvailableRpOperationDisplayInfo{
					Description: to.Ptr("Read any SQL Analytics pool Query Steps."),
					Operation:   to.Ptr("Read SQL Analytics pool Query Steps."),
					Provider:    to.Ptr("Analytics 365 Resource Provider."),
					Resource:    to.Ptr("SQL Analytics pool Query Steps"),
				},
				IsDataAction: to.Ptr("false"),
				Origin:       to.Ptr("user, system"),
			},
			{
				Name: to.Ptr("Microsoft.Synapse/workspaces/sqlPools/maintenanceWindows/read"),
				Display: &armsynapse.AvailableRpOperationDisplayInfo{
					Description: to.Ptr("Read any SQL Analytics pool Maintenance Windows."),
					Operation:   to.Ptr("Read SQL Analytics pool Maintenance Windows."),
					Provider:    to.Ptr("Analytics 365 Resource Provider."),
					Resource:    to.Ptr("SQL Analytics pool Maintenance Windows"),
				},
				IsDataAction: to.Ptr("false"),
				Origin:       to.Ptr("user, system"),
			},
			{
				Name: to.Ptr("Microsoft.Synapse/workspaces/sqlPools/maintenanceWindowOptions/read"),
				Display: &armsynapse.AvailableRpOperationDisplayInfo{
					Description: to.Ptr("Read any SQL Analytics pool Maintenance Window Options."),
					Operation:   to.Ptr("Read SQL Analytics pool Maintenance Window Options."),
					Provider:    to.Ptr("Analytics 365 Resource Provider."),
					Resource:    to.Ptr("SQL Analytics pool Maintenance Window Options"),
				},
				IsDataAction: to.Ptr("false"),
				Origin:       to.Ptr("user, system"),
			},
			{
				Name: to.Ptr("Microsoft.Synapse/workspaces/sqlPools/replicationLinks/read"),
				Display: &armsynapse.AvailableRpOperationDisplayInfo{
					Description: to.Ptr("Read any SQL Analytics pool Replication Links."),
					Operation:   to.Ptr("Read SQL Analytics pool Replication Links."),
					Provider:    to.Ptr("Analytics 365 Resource Provider."),
					Resource:    to.Ptr("SQL Analytics pool Replication Links"),
				},
				IsDataAction: to.Ptr("false"),
				Origin:       to.Ptr("user, system"),
			},
			{
				Name: to.Ptr("Microsoft.Synapse/workspaces/sqlPools/transparentDataEncryption/read"),
				Display: &armsynapse.AvailableRpOperationDisplayInfo{
					Description: to.Ptr("Read any SQL Analytics pool Transparent Data Encryption Configuration."),
					Operation:   to.Ptr("Read SQL Analytics pool Transparent Data Encryption Configuration."),
					Provider:    to.Ptr("Analytics 365 Resource Provider."),
					Resource:    to.Ptr("SQL Analytics pool Transparent Data Encryption Configuration"),
				},
				IsDataAction: to.Ptr("false"),
				Origin:       to.Ptr("user, system"),
			},
			{
				Name: to.Ptr("Microsoft.Synapse/workspaces/sqlPools/transparentDataEncryption/operationResults/read"),
				Display: &armsynapse.AvailableRpOperationDisplayInfo{
					Description: to.Ptr("Read any SQL Analytics pool Transparent Data Encryption Configuration Operation Results."),
					Operation:   to.Ptr("Read SQL Analytics pool Transparent Data Encryption Configuration Operation Results."),
					Provider:    to.Ptr("Analytics 365 Resource Provider."),
					Resource:    to.Ptr("SQL Analytics pool Transparent Data Encryption Configuration Operation Results"),
				},
				IsDataAction: to.Ptr("false"),
				Origin:       to.Ptr("user, system"),
			},
			{
				Name: to.Ptr("Microsoft.Synapse/workspaces/sqlPools/auditingSettings/read"),
				Display: &armsynapse.AvailableRpOperationDisplayInfo{
					Description: to.Ptr("Read any SQL Analytics pool Auditing Settings."),
					Operation:   to.Ptr("Read SQL Analytics pool Auditing Settings."),
					Provider:    to.Ptr("Analytics 365 Resource Provider."),
					Resource:    to.Ptr("SQL Analytics pool Auditing Settings"),
				},
				IsDataAction: to.Ptr("false"),
				Origin:       to.Ptr("user, system"),
			},
			{
				Name: to.Ptr("Microsoft.Synapse/workspaces/sqlPools/operations/read"),
				Display: &armsynapse.AvailableRpOperationDisplayInfo{
					Description: to.Ptr("Read any SQL Analytics pool Operations."),
					Operation:   to.Ptr("Read SQL Analytics pool Operations."),
					Provider:    to.Ptr("Analytics 365 Resource Provider."),
					Resource:    to.Ptr("SQL Analytics pool Operations"),
				},
				IsDataAction: to.Ptr("false"),
				Origin:       to.Ptr("user, system"),
			},
			{
				Name: to.Ptr("Microsoft.Synapse/workspaces/sqlPools/usages/read"),
				Display: &armsynapse.AvailableRpOperationDisplayInfo{
					Description: to.Ptr("Read any SQL Analytics pool Usages."),
					Operation:   to.Ptr("Read SQL Analytics pool Usages."),
					Provider:    to.Ptr("Analytics 365 Resource Provider."),
					Resource:    to.Ptr("SQL Analytics pool Usages"),
				},
				IsDataAction: to.Ptr("false"),
				Origin:       to.Ptr("user, system"),
			},
			{
				Name: to.Ptr("Microsoft.Synapse/workspaces/sqlPools/currentSensitivityLabels/read"),
				Display: &armsynapse.AvailableRpOperationDisplayInfo{
					Description: to.Ptr("Read any SQL Analytics pool Current Sensitivity Labels."),
					Operation:   to.Ptr("Read SQL Analytics pool Current Sensitivity Labels."),
					Provider:    to.Ptr("Analytics 365 Resource Provider."),
					Resource:    to.Ptr("SQL Analytics pool Current Sensitivity Labels"),
				},
				IsDataAction: to.Ptr("false"),
				Origin:       to.Ptr("user, system"),
			},
			{
				Name: to.Ptr("Microsoft.Synapse/workspaces/sqlPools/recommendedSensitivityLabels/read"),
				Display: &armsynapse.AvailableRpOperationDisplayInfo{
					Description: to.Ptr("Read any SQL Analytics pool Recommended Sensitivity Labels."),
					Operation:   to.Ptr("Read SQL Analytics pool Recommended Sensitivity Labels."),
					Provider:    to.Ptr("Analytics 365 Resource Provider."),
					Resource:    to.Ptr("SQL Analytics pool Recommended Sensitivity Labels"),
				},
				IsDataAction: to.Ptr("false"),
				Origin:       to.Ptr("user, system"),
			},
			{
				Name: to.Ptr("Microsoft.Synapse/workspaces/sqlPools/schemas/read"),
				Display: &armsynapse.AvailableRpOperationDisplayInfo{
					Description: to.Ptr("Read any SQL Analytics pool Schemas."),
					Operation:   to.Ptr("Read SQL Analytics pool Schemas."),
					Provider:    to.Ptr("Analytics 365 Resource Provider."),
					Resource:    to.Ptr("SQL Analytics pool Schemas"),
				},
				IsDataAction: to.Ptr("false"),
				Origin:       to.Ptr("user, system"),
			},
			{
				Name: to.Ptr("Microsoft.Synapse/workspaces/sqlPools/schemas/tables/read"),
				Display: &armsynapse.AvailableRpOperationDisplayInfo{
					Description: to.Ptr("Read any SQL Analytics pool Schema Tables."),
					Operation:   to.Ptr("Read SQL Analytics pool Schema Tables."),
					Provider:    to.Ptr("Analytics 365 Resource Provider."),
					Resource:    to.Ptr("SQL Analytics pool Schema Tables"),
				},
				IsDataAction: to.Ptr("false"),
				Origin:       to.Ptr("user, system"),
			},
			{
				Name: to.Ptr("Microsoft.Synapse/workspaces/sqlPools/schemas/tables/columns/read"),
				Display: &armsynapse.AvailableRpOperationDisplayInfo{
					Description: to.Ptr("Read any SQL Analytics pool Schema Table Columns."),
					Operation:   to.Ptr("Read SQL Analytics pool Schema Table Columns."),
					Provider:    to.Ptr("Analytics 365 Resource Provider."),
					Resource:    to.Ptr("SQL Analytics pool Schema Table Columns"),
				},
				IsDataAction: to.Ptr("false"),
				Origin:       to.Ptr("user, system"),
			},
			{
				Name: to.Ptr("Microsoft.Synapse/workspaces/sqlPools/connectionPolicies/read"),
				Display: &armsynapse.AvailableRpOperationDisplayInfo{
					Description: to.Ptr("Read any SQL Analytics pool Connection Policies."),
					Operation:   to.Ptr("Read SQL Analytics pool Connection Policies."),
					Provider:    to.Ptr("Analytics 365 Resource Provider."),
					Resource:    to.Ptr("SQL Analytics pool Connection Policies"),
				},
				IsDataAction: to.Ptr("false"),
				Origin:       to.Ptr("user, system"),
			},
			{
				Name: to.Ptr("Microsoft.Synapse/workspaces/sqlPools/vulnerabilityAssessments/read"),
				Display: &armsynapse.AvailableRpOperationDisplayInfo{
					Description: to.Ptr("Read any SQL Analytics pool Vulnerability Assessment."),
					Operation:   to.Ptr("Read SQL Analytics pool Vulnerability Assessment."),
					Provider:    to.Ptr("Analytics 365 Resource Provider."),
					Resource:    to.Ptr("SQL Analytics pool Vulnerability Assessment"),
				},
				IsDataAction: to.Ptr("false"),
				Origin:       to.Ptr("user, system"),
			},
			{
				Name: to.Ptr("Microsoft.Synapse/workspaces/sqlPools/vulnerabilityAssessments/scans/read"),
				Display: &armsynapse.AvailableRpOperationDisplayInfo{
					Description: to.Ptr("Read any SQL Analytics pool Vulnerability Assessment Scan Records."),
					Operation:   to.Ptr("Read SQL Analytics pool Vulnerability Assessment Scan Records."),
					Provider:    to.Ptr("Analytics 365 Resource Provider."),
					Resource:    to.Ptr("SQL Analytics pool Vulnerability Assessment Scan Records"),
				},
				IsDataAction: to.Ptr("false"),
				Origin:       to.Ptr("user, system"),
			},
			{
				Name: to.Ptr("Microsoft.Synapse/workspaces/sqlPools/securityAlertPolicies/read"),
				Display: &armsynapse.AvailableRpOperationDisplayInfo{
					Description: to.Ptr("Read any Sql Analytics pool Threat Detection Policies."),
					Operation:   to.Ptr("Read Sql Analytics pool Threat Detection Policies."),
					Provider:    to.Ptr("Analytics 365 Resource Provider."),
					Resource:    to.Ptr("SQL Analytics pool Security Alert Policies"),
				},
				IsDataAction: to.Ptr("false"),
				Origin:       to.Ptr("user, system"),
			},
			{
				Name: to.Ptr("Microsoft.Synapse/workspaces/sqlPools/delete"),
				Display: &armsynapse.AvailableRpOperationDisplayInfo{
					Description: to.Ptr("Delete any SQL Analytics pools."),
					Operation:   to.Ptr("Delete SQL Analytics pools."),
					Provider:    to.Ptr("Analytics 365 Resource Provider."),
					Resource:    to.Ptr("SQL Analytics pools"),
				},
				IsDataAction: to.Ptr("false"),
				Origin:       to.Ptr("user, system"),
			},
			{
				Name: to.Ptr("Microsoft.Synapse/workspaces/sqlPools/pause/action"),
				Display: &armsynapse.AvailableRpOperationDisplayInfo{
					Description: to.Ptr("Pause any SQL Analytics pools."),
					Operation:   to.Ptr("Pause SQL Analytics pools."),
					Provider:    to.Ptr("Analytics 365 Resource Provider."),
					Resource:    to.Ptr("SQL Analytics pools"),
				},
				IsDataAction: to.Ptr("false"),
				Origin:       to.Ptr("user, system"),
			},
			{
				Name: to.Ptr("Microsoft.Synapse/workspaces/sqlPools/resume/action"),
				Display: &armsynapse.AvailableRpOperationDisplayInfo{
					Description: to.Ptr("Resume any SQL Analytics pools."),
					Operation:   to.Ptr("Resume SQL Analytics pools."),
					Provider:    to.Ptr("Analytics 365 Resource Provider."),
					Resource:    to.Ptr("SQL Analytics pools"),
				},
				IsDataAction: to.Ptr("false"),
				Origin:       to.Ptr("user, system"),
			},
			{
				Name: to.Ptr("Microsoft.Synapse/workspaces/sqlPools/restorePoints/action"),
				Display: &armsynapse.AvailableRpOperationDisplayInfo{
					Description: to.Ptr("Create a SQL Analytics pool Restore Point."),
					Operation:   to.Ptr("Create SQL Analytics pool Restore Point."),
					Provider:    to.Ptr("Analytics 365 Resource Provider."),
					Resource:    to.Ptr("SQL Analytics pool Restore Points"),
				},
				IsDataAction: to.Ptr("false"),
				Origin:       to.Ptr("user, system"),
			},
			{
				Name: to.Ptr("Microsoft.Synapse/workspaces/sqlPools/move/action"),
				Display: &armsynapse.AvailableRpOperationDisplayInfo{
					Description: to.Ptr("Rename any SQL Analytics pools."),
					Operation:   to.Ptr("Rename SQL Analytics pools."),
					Provider:    to.Ptr("Analytics 365 Resource Provider."),
					Resource:    to.Ptr("SQL Analytics pools"),
				},
				IsDataAction: to.Ptr("false"),
				Origin:       to.Ptr("user, system"),
			},
			{
				Name: to.Ptr("Microsoft.Synapse/workspaces/sqlPools/schemas/tables/columns/sensitivityLabels/enable/action"),
				Display: &armsynapse.AvailableRpOperationDisplayInfo{
					Description: to.Ptr("Enable any SQL Analytics pool Sensitivity Labels."),
					Operation:   to.Ptr("Enable SQL Analytics pool Sensitivity Labels."),
					Provider:    to.Ptr("Analytics 365 Resource Provider."),
					Resource:    to.Ptr("SQL Analytics pool Sensitivity Labels"),
				},
				IsDataAction: to.Ptr("false"),
				Origin:       to.Ptr("user, system"),
			},
			{
				Name: to.Ptr("Microsoft.Synapse/workspaces/sqlPools/schemas/tables/columns/sensitivityLabels/disable/action"),
				Display: &armsynapse.AvailableRpOperationDisplayInfo{
					Description: to.Ptr("Disable any SQL Analytics pool Sensitivity Labels."),
					Operation:   to.Ptr("Disable SQL Analytics pool Sensitivity Labels."),
					Provider:    to.Ptr("Analytics 365 Resource Provider."),
					Resource:    to.Ptr("SQL Analytics pool Sensitivity Labels"),
				},
				IsDataAction: to.Ptr("false"),
				Origin:       to.Ptr("user, system"),
			},
			{
				Name: to.Ptr("Microsoft.Synapse/workspaces/sqlPools/vulnerabilityAssessments/scans/initiateScan/action"),
				Display: &armsynapse.AvailableRpOperationDisplayInfo{
					Description: to.Ptr("Initiate any SQL Analytics pool Vulnerability Assessment Scan Records."),
					Operation:   to.Ptr("Initiate SQL Analytics pool Vulnerability Assessment Scan Records."),
					Provider:    to.Ptr("Analytics 365 Resource Provider."),
					Resource:    to.Ptr("SQL Analytics pool Vulnerability Assessment Scan Records"),
				},
				IsDataAction: to.Ptr("false"),
				Origin:       to.Ptr("user, system"),
			},
			{
				Name: to.Ptr("Microsoft.Synapse/workspaces/sqlPools/vulnerabilityAssessments/scans/export/action"),
				Display: &armsynapse.AvailableRpOperationDisplayInfo{
					Description: to.Ptr("Export any SQL Analytics pool Vulnerability Assessment Scan Records."),
					Operation:   to.Ptr("Export SQL Analytics pool Vulnerability Assessment Scan Records."),
					Provider:    to.Ptr("Analytics 365 Resource Provider."),
					Resource:    to.Ptr("SQL Analytics pool Vulnerability Assessment Scan Records"),
				},
				IsDataAction: to.Ptr("false"),
				Origin:       to.Ptr("user, system"),
			},
			{
				Name: to.Ptr("Microsoft.Synapse/workspaces/sqlPools/maintenanceWindows/write"),
				Display: &armsynapse.AvailableRpOperationDisplayInfo{
					Description: to.Ptr("Read any SQL Analytics pool Maintenance Windows."),
					Operation:   to.Ptr("Create or Update SQL Analytics pool Maintenance Windows."),
					Provider:    to.Ptr("Analytics 365 Resource Provider."),
					Resource:    to.Ptr("SQL Analytics pool Maintenance Windows"),
				},
				IsDataAction: to.Ptr("false"),
				Origin:       to.Ptr("user, system"),
			},
			{
				Name: to.Ptr("Microsoft.Synapse/workspaces/sqlPools/auditingSettings/write"),
				Display: &armsynapse.AvailableRpOperationDisplayInfo{
					Description: to.Ptr("Create or Update any SQL Analytics pool Auditing Settings."),
					Operation:   to.Ptr("Create or Update SQL Analytics pool Auditing Settings."),
					Provider:    to.Ptr("Analytics 365 Resource Provider."),
					Resource:    to.Ptr("SQL Analytics pool Auditing Settings"),
				},
				IsDataAction: to.Ptr("false"),
				Origin:       to.Ptr("user, system"),
			},
			{
				Name: to.Ptr("Microsoft.Synapse/workspaces/sqlPools/schemas/tables/columns/sensitivityLabels/write"),
				Display: &armsynapse.AvailableRpOperationDisplayInfo{
					Description: to.Ptr("Create or Update any SQL Analytics pool Sensitivity Labels."),
					Operation:   to.Ptr("Create or update SQL Analytics pool Sensitivity Labels."),
					Provider:    to.Ptr("Analytics 365 Resource Provider."),
					Resource:    to.Ptr("SQL Analytics pool Sensitivity Labels"),
				},
				IsDataAction: to.Ptr("false"),
				Origin:       to.Ptr("user, system"),
			},
			{
				Name: to.Ptr("Microsoft.Synapse/workspaces/sqlPools/transparentDataEncryption/write"),
				Display: &armsynapse.AvailableRpOperationDisplayInfo{
					Description: to.Ptr("Create or Update any SQL Analytics pool Transparent Data Encryption Configuration."),
					Operation:   to.Ptr("Create or Update SQL Analytics pool Transparent Data Encryption Configuration."),
					Provider:    to.Ptr("Analytics 365 Resource Provider."),
					Resource:    to.Ptr("SQL Analytics pool Transparent Data Encryption Configuration"),
				},
				IsDataAction: to.Ptr("false"),
				Origin:       to.Ptr("user, system"),
			},
			{
				Name: to.Ptr("Microsoft.Synapse/workspaces/sqlPools/securityAlertPolicies/write"),
				Display: &armsynapse.AvailableRpOperationDisplayInfo{
					Description: to.Ptr("Create or Update any SQL Analytics pool Threat Detection Policies."),
					Operation:   to.Ptr("Create or Update SQL Analytics pool Threat Detection Policies."),
					Provider:    to.Ptr("Analytics 365 Resource Provider."),
					Resource:    to.Ptr("SQL Analytics pool Security Alert Policies"),
				},
				IsDataAction: to.Ptr("false"),
				Origin:       to.Ptr("user, system"),
			},
			{
				Name: to.Ptr("Microsoft.Synapse/workspaces/sqlPools/vulnerabilityAssessments/rules/baselines/write"),
				Display: &armsynapse.AvailableRpOperationDisplayInfo{
					Description: to.Ptr("Create or Update any SQL Analytics pool Vulnerability Assessment Rule Baseline."),
					Operation:   to.Ptr("Create or Update SQL Analytics pool Vulnerability Assessment Rule Baseline."),
					Provider:    to.Ptr("Analytics 365 Resource Provider."),
					Resource:    to.Ptr("SQL Analytics pool Vulnerability Assessment Rule Baseline"),
				},
				IsDataAction: to.Ptr("false"),
				Origin:       to.Ptr("user, system"),
			},
			{
				Name: to.Ptr("Microsoft.Synapse/workspaces/sqlPools/schemas/tables/columns/sensitivityLabels/delete"),
				Display: &armsynapse.AvailableRpOperationDisplayInfo{
					Description: to.Ptr("Delete any SQL Analytics pool Sensitivity Labels."),
					Operation:   to.Ptr("Delete SQL Analytics pool Sensitivity Labels.2"),
					Provider:    to.Ptr("Analytics 365 Resource Provider."),
					Resource:    to.Ptr("SQL Analytics pool Sensitivity Labels"),
				},
				IsDataAction: to.Ptr("false"),
				Origin:       to.Ptr("user, system"),
			},
			{
				Name: to.Ptr("Microsoft.Synapse/workspaces/sqlPools/vulnerabilityAssessments/delete"),
				Display: &armsynapse.AvailableRpOperationDisplayInfo{
					Description: to.Ptr("Delete any SQL Analytics pool Vulnerability Assessment."),
					Operation:   to.Ptr("Delete SQL Analytics pool Vulnerability Assessment."),
					Provider:    to.Ptr("Analytics 365 Resource Provider."),
					Resource:    to.Ptr("SQL Analytics pool Vulnerability Assessment"),
				},
				IsDataAction: to.Ptr("false"),
				Origin:       to.Ptr("user, system"),
			},
			{
				Name: to.Ptr("Microsoft.Synapse/workspaces/sqlPools/vulnerabilityAssessments/rules/baselines/delete"),
				Display: &armsynapse.AvailableRpOperationDisplayInfo{
					Description: to.Ptr("Delete any SQL Analytics pool Vulnerability Assessment Rule Baseline."),
					Operation:   to.Ptr("Delete SQL Analytics pool Vulnerability Assessment Rule Baseline."),
					Provider:    to.Ptr("Analytics 365 Resource Provider."),
					Resource:    to.Ptr("SQL Analytics pool Vulnerability Assessment Rule Baseline"),
				},
				IsDataAction: to.Ptr("false"),
				Origin:       to.Ptr("user, system"),
			},
			{
				Name: to.Ptr("Microsoft.Synapse/workspaces/operationStatus/read"),
				Display: &armsynapse.AvailableRpOperationDisplayInfo{
					Description: to.Ptr("Read any Async Operation Status."),
					Operation:   to.Ptr("Read Async Operation Status."),
					Provider:    to.Ptr("Analytics 365 Resource Provider."),
					Resource:    to.Ptr("Async Operation Status."),
				},
				IsDataAction: to.Ptr("false"),
				Origin:       to.Ptr("user, system"),
			},
			{
				Name: to.Ptr("Microsoft.Synapse/workspaces/operationResults/read"),
				Display: &armsynapse.AvailableRpOperationDisplayInfo{
					Description: to.Ptr("Read any Async Operation Result."),
					Operation:   to.Ptr("Read Async Operation Result."),
					Provider:    to.Ptr("Analytics 365 Resource Provider."),
					Resource:    to.Ptr("Async Operation Result"),
				},
				IsDataAction: to.Ptr("false"),
				Origin:       to.Ptr("user, system"),
			},
			{
				Name: to.Ptr("Microsoft.Synapse/workspaces/sqlPools/operationResults/read"),
				Display: &armsynapse.AvailableRpOperationDisplayInfo{
					Description: to.Ptr("Read any Async Operation Result."),
					Operation:   to.Ptr("Read Async Operation Result."),
					Provider:    to.Ptr("Analytics 365 Resource Provider."),
					Resource:    to.Ptr("Async Operation Result"),
				},
				IsDataAction: to.Ptr("false"),
				Origin:       to.Ptr("user, system"),
			},
			{
				Name: to.Ptr("Microsoft.Synapse/checkNameAvailability/action"),
				Display: &armsynapse.AvailableRpOperationDisplayInfo{
					Description: to.Ptr("Checks Workspace name availability."),
					Operation:   to.Ptr("Checks Workspace name availability."),
					Provider:    to.Ptr("Analytics 365 Resource Provider."),
					Resource:    to.Ptr("Check Name Availability"),
				},
				IsDataAction: to.Ptr("false"),
				Origin:       to.Ptr("user"),
			},
			{
				Name: to.Ptr("Microsoft.Synapse/workspaces/bigDataPools/write"),
				Display: &armsynapse.AvailableRpOperationDisplayInfo{
					Description: to.Ptr("Create or Update any Spark pools."),
					Operation:   to.Ptr("Create or Update Spark pools."),
					Provider:    to.Ptr("Analytics 365 Resource Provider."),
					Resource:    to.Ptr("Spark pools"),
				},
				IsDataAction: to.Ptr("false"),
				Origin:       to.Ptr("user"),
			},
			{
				Name: to.Ptr("Microsoft.Synapse/workspaces/bigDataPools/read"),
				Display: &armsynapse.AvailableRpOperationDisplayInfo{
					Description: to.Ptr("Read any Spark pools."),
					Operation:   to.Ptr("Read Spark pools."),
					Provider:    to.Ptr("Analytics 365 Resource Provider."),
					Resource:    to.Ptr("Spark pools"),
				},
				IsDataAction: to.Ptr("false"),
				Origin:       to.Ptr("user, system"),
			},
			{
				Name: to.Ptr("Microsoft.Synapse/workspaces/bigDataPools/delete"),
				Display: &armsynapse.AvailableRpOperationDisplayInfo{
					Description: to.Ptr("Delete any Spark pools."),
					Operation:   to.Ptr("Delete Spark pools."),
					Provider:    to.Ptr("Analytics 365 Resource Provider."),
					Resource:    to.Ptr("Spark pools"),
				},
				IsDataAction: to.Ptr("false"),
				Origin:       to.Ptr("user, system"),
			},
			{
				Name: to.Ptr("Microsoft.Synapse/workspaces/sqlPools/metadataSync/read"),
				Display: &armsynapse.AvailableRpOperationDisplayInfo{
					Description: to.Ptr("Read SQL Analytics pool Metadata Sync Config"),
					Operation:   to.Ptr("Read SQL Analytics pool Metadata Sync Config"),
					Provider:    to.Ptr("Analytics 365 Resource Provider."),
					Resource:    to.Ptr("SQL Analytics pool Metadata Sync Config"),
				},
				IsDataAction: to.Ptr("false"),
				Origin:       to.Ptr("user, system"),
			},
			{
				Name: to.Ptr("Microsoft.Synapse/workspaces/sqlPools/metadataSync/write"),
				Display: &armsynapse.AvailableRpOperationDisplayInfo{
					Description: to.Ptr("Create or Update SQL Analytics pool Metadata Sync Config"),
					Operation:   to.Ptr("Create or Update SQL Analytics pool Metadata Sync Config"),
					Provider:    to.Ptr("Analytics 365 Resource Provider."),
					Resource:    to.Ptr("SQL Analytics pool Metadata Sync Config"),
				},
				IsDataAction: to.Ptr("false"),
				Origin:       to.Ptr("user, system"),
			},
			{
				Name: to.Ptr("Microsoft.Synapse/register/action"),
				Display: &armsynapse.AvailableRpOperationDisplayInfo{
					Description: to.Ptr("Registers the Analytics 365 Resource Provider and enables the creation of Workspaces."),
					Operation:   to.Ptr("Registers the Analytics 365 Resource Provider."),
					Provider:    to.Ptr("Analytics 365 Resource Provider."),
					Resource:    to.Ptr("Analytics 365 Resource Provider."),
				},
				IsDataAction: to.Ptr("false"),
				Origin:       to.Ptr("user, system"),
			},
			{
				Name: to.Ptr("Microsoft.Synapse/workspaces/administrators/write"),
				Display: &armsynapse.AvailableRpOperationDisplayInfo{
					Description: to.Ptr("Set Active Directory Administrator on the Workspace"),
					Operation:   to.Ptr("Set Active Directory Administrator"),
					Provider:    to.Ptr("Analytics 365 Resource Provider."),
					Resource:    to.Ptr("Administrators"),
				},
				IsDataAction: to.Ptr("false"),
				Origin:       to.Ptr("user"),
			},
			{
				Name: to.Ptr("Microsoft.Synapse/workspaces/administrators/read"),
				Display: &armsynapse.AvailableRpOperationDisplayInfo{
					Description: to.Ptr("Get Workspace Active Directory Administrator"),
					Operation:   to.Ptr("Get Workspace Active Directory Administrator"),
					Provider:    to.Ptr("Analytics 365 Resource Provider."),
					Resource:    to.Ptr("Administrators"),
				},
				IsDataAction: to.Ptr("false"),
				Origin:       to.Ptr("user, system"),
			},
			{
				Name: to.Ptr("Microsoft.Synapse/workspaces/administrators/delete"),
				Display: &armsynapse.AvailableRpOperationDisplayInfo{
					Description: to.Ptr("Delete Workspace Active Directory Administrator"),
					Operation:   to.Ptr("Delete Workspace Active Directory Administrator"),
					Provider:    to.Ptr("Analytics 365 Resource Provider."),
					Resource:    to.Ptr("Administrators"),
				},
				IsDataAction: to.Ptr("false"),
				Origin:       to.Ptr("user, system"),
			},
			{
				Name: to.Ptr("Microsoft.Synapse/workspaces/write"),
				Display: &armsynapse.AvailableRpOperationDisplayInfo{
					Description: to.Ptr("Create or Update any Workspaces."),
					Operation:   to.Ptr("Create or Update Workspaces."),
					Provider:    to.Ptr("Analytics 365 Resource Provider."),
					Resource:    to.Ptr("Workspaces"),
				},
				IsDataAction: to.Ptr("false"),
				Origin:       to.Ptr("user"),
			},
			{
				Name: to.Ptr("Microsoft.Synapse/workspaces/read"),
				Display: &armsynapse.AvailableRpOperationDisplayInfo{
					Description: to.Ptr("Read any Workspaces."),
					Operation:   to.Ptr("Read Workspaces."),
					Provider:    to.Ptr("Analytics 365 Resource Provider."),
					Resource:    to.Ptr("Workspaces"),
				},
				IsDataAction: to.Ptr("false"),
				Origin:       to.Ptr("user, system"),
			},
			{
				Name: to.Ptr("Microsoft.Synapse/workspaces/delete"),
				Display: &armsynapse.AvailableRpOperationDisplayInfo{
					Description: to.Ptr("Delete any Workspaces."),
					Operation:   to.Ptr("Delete Workspaces."),
					Provider:    to.Ptr("Analytics 365 Resource Provider."),
					Resource:    to.Ptr("Workspaces"),
				},
				IsDataAction: to.Ptr("false"),
				Origin:       to.Ptr("user, system"),
			},
			{
				Name: to.Ptr("Microsoft.Synapse/workspaces/privateEndpointConnectionProxies/validate/action"),
				Display: &armsynapse.AvailableRpOperationDisplayInfo{
					Description: to.Ptr("Validates Private Endpoint Connection Proxy"),
					Operation:   to.Ptr("Validates Private Endpoint Connection Proxy"),
					Provider:    to.Ptr("Analytics 365 Resource Provider."),
					Resource:    to.Ptr("Validate Private Endpoint Connection Proxy"),
				},
				IsDataAction: to.Ptr("false"),
				Origin:       to.Ptr("system"),
			},
			{
				Name: to.Ptr("Microsoft.Synapse/workspaces/privateEndpointConnectionProxies/write"),
				Display: &armsynapse.AvailableRpOperationDisplayInfo{
					Description: to.Ptr("Create or Update Private Endpoint Connection Proxy"),
					Operation:   to.Ptr("Create or Update Private Endpoint Connection Proxy"),
					Provider:    to.Ptr("Analytics 365 Resource Provider."),
					Resource:    to.Ptr("Private Endpoint Connection Proxy"),
				},
				IsDataAction: to.Ptr("false"),
				Origin:       to.Ptr("system"),
			},
			{
				Name: to.Ptr("Microsoft.Synapse/workspaces/privateEndpointConnectionProxies/read"),
				Display: &armsynapse.AvailableRpOperationDisplayInfo{
					Description: to.Ptr("Read any Private Endpoint Connection Proxy"),
					Operation:   to.Ptr("Read Private Endpoint Connection Proxies"),
					Provider:    to.Ptr("Analytics 365 Resource Provider."),
					Resource:    to.Ptr("Private Endpoint Connection Proxy"),
				},
				IsDataAction: to.Ptr("false"),
				Origin:       to.Ptr("system"),
			},
			{
				Name: to.Ptr("Microsoft.Synapse/workspaces/privateLinkResources/read"),
				Display: &armsynapse.AvailableRpOperationDisplayInfo{
					Description: to.Ptr("Get a list of Private Link Resources"),
					Operation:   to.Ptr("Get Private Link Resources"),
					Provider:    to.Ptr("Analytics 365 Resource Provider."),
					Resource:    to.Ptr("Private Link Resources"),
				},
				IsDataAction: to.Ptr("false"),
				Origin:       to.Ptr("user"),
			},
			{
				Name: to.Ptr("Microsoft.Synapse/workspaces/serverKeys/write"),
				Display: &armsynapse.AvailableRpOperationDisplayInfo{
					Description: to.Ptr("Creates or updates a server key"),
					Operation:   to.Ptr("Creates or updates a server key"),
					Provider:    to.Ptr("Analytics 365 Resource Provider."),
					Resource:    to.Ptr("SQL Server Key"),
				},
				IsDataAction: to.Ptr("false"),
				Origin:       to.Ptr("user, system"),
			},
			{
				Name: to.Ptr("Microsoft.Synapse/workspaces/serverKeys/delete"),
				Display: &armsynapse.AvailableRpOperationDisplayInfo{
					Description: to.Ptr("Deletes the server key with the given name."),
					Operation:   to.Ptr("Deletes the server key with the given name."),
					Provider:    to.Ptr("Analytics 365 Resource Provider."),
					Resource:    to.Ptr("SQL Server Key"),
				},
				IsDataAction: to.Ptr("false"),
				Origin:       to.Ptr("user, system"),
			},
			{
				Name: to.Ptr("Microsoft.Synapse/workspaces/extendedAuditingSettings/write"),
				Display: &armsynapse.AvailableRpOperationDisplayInfo{
					Description: to.Ptr("Create or Update SQL server extended auditing settings."),
					Operation:   to.Ptr("Create or Update SQL server extended auditing settings."),
					Provider:    to.Ptr("Analytics 365 Resource Provider."),
					Resource:    to.Ptr("SQL Server Extended Auditing Settings"),
				},
				IsDataAction: to.Ptr("false"),
				Origin:       to.Ptr("user, system"),
			},
			{
				Name: to.Ptr("Microsoft.Synapse/workspaces/extendedAuditingSettings/read"),
				Display: &armsynapse.AvailableRpOperationDisplayInfo{
					Description: to.Ptr("Read SQL server extended auditing settings."),
					Operation:   to.Ptr("Read SQL server extended auditing settings."),
					Provider:    to.Ptr("Analytics 365 Resource Provider."),
					Resource:    to.Ptr("SQL Server Extended Auditing Settings"),
				},
				IsDataAction: to.Ptr("false"),
				Origin:       to.Ptr("user, system"),
			},
			{
				Name: to.Ptr("Microsoft.Synapse/workspaces/auditingSettings/write"),
				Display: &armsynapse.AvailableRpOperationDisplayInfo{
					Description: to.Ptr("Create or Update SQL server auditing settings."),
					Operation:   to.Ptr("Create or Update SQL server auditing settings."),
					Provider:    to.Ptr("Analytics 365 Resource Provider."),
					Resource:    to.Ptr("SQL Server Auditing Settings"),
				},
				IsDataAction: to.Ptr("false"),
				Origin:       to.Ptr("user, system"),
			},
			{
				Name: to.Ptr("Microsoft.Synapse/workspaces/auditingSettings/read"),
				Display: &armsynapse.AvailableRpOperationDisplayInfo{
					Description: to.Ptr("Read SQL server auditing settings."),
					Operation:   to.Ptr("Read SQL server auditing settings."),
					Provider:    to.Ptr("Analytics 365 Resource Provider."),
					Resource:    to.Ptr("SQL Server Auditing Settings"),
				},
				IsDataAction: to.Ptr("false"),
				Origin:       to.Ptr("user, system"),
			},
			{
				Name: to.Ptr("Microsoft.Synapse/workspaces/securityAlertPolicies/write"),
				Display: &armsynapse.AvailableRpOperationDisplayInfo{
					Description: to.Ptr("Create or Update SQL server security alert policies."),
					Operation:   to.Ptr("Create or Update SQL server security alert policies."),
					Provider:    to.Ptr("Analytics 365 Resource Provider."),
					Resource:    to.Ptr("SQL Server Security Alert Policy"),
				},
				IsDataAction: to.Ptr("false"),
				Origin:       to.Ptr("user, system"),
			},
			{
				Name: to.Ptr("Microsoft.Synapse/workspaces/securityAlertPolicies/read"),
				Display: &armsynapse.AvailableRpOperationDisplayInfo{
					Description: to.Ptr("Read SQL server security alert policies."),
					Operation:   to.Ptr("Read SQL server security alert policies."),
					Provider:    to.Ptr("Analytics 365 Resource Provider."),
					Resource:    to.Ptr("SQL Server Security Alert Policy"),
				},
				IsDataAction: to.Ptr("false"),
				Origin:       to.Ptr("user, system"),
			},
			{
				Name: to.Ptr("Microsoft.Synapse/workspaces/vulnerabilityAssessments/write"),
				Display: &armsynapse.AvailableRpOperationDisplayInfo{
					Description: to.Ptr("Create or Update SQL server vulnerability assement report."),
					Operation:   to.Ptr("Create or Update SQL server vulnerability assement report."),
					Provider:    to.Ptr("Analytics 365 Resource Provider."),
					Resource:    to.Ptr("SQL Server Vulnerability Assesment"),
				},
				IsDataAction: to.Ptr("false"),
				Origin:       to.Ptr("user, system"),
			},
			{
				Name: to.Ptr("Microsoft.Synapse/workspaces/vulnerabilityAssessments/read"),
				Display: &armsynapse.AvailableRpOperationDisplayInfo{
					Description: to.Ptr("Read SQL server vulnerability assement report."),
					Operation:   to.Ptr("Read SQL server vulnerability assement report."),
					Provider:    to.Ptr("Analytics 365 Resource Provider."),
					Resource:    to.Ptr("SQL Server Vulnerability Assesment"),
				},
				IsDataAction: to.Ptr("false"),
				Origin:       to.Ptr("user, system"),
			},
			{
				Name: to.Ptr("Microsoft.Synapse/workspaces/vulnerabilityAssessments/delete"),
				Display: &armsynapse.AvailableRpOperationDisplayInfo{
					Description: to.Ptr("Delete SQL server vulnerability assement report."),
					Operation:   to.Ptr("Delete SQL server vulnerability assement report."),
					Provider:    to.Ptr("Analytics 365 Resource Provider."),
					Resource:    to.Ptr("SQL Server Vulnerability Assesment"),
				},
				IsDataAction: to.Ptr("false"),
				Origin:       to.Ptr("user, system"),
			},
			{
				Name: to.Ptr("Microsoft.Synapse/workspaces/encryptionProtector/write"),
				Display: &armsynapse.AvailableRpOperationDisplayInfo{
					Description: to.Ptr("Update the properties for the specified Server Encryption Protector."),
					Operation:   to.Ptr("Update the properties for the specified Server Encryption Protector."),
					Provider:    to.Ptr("Analytics 365 Resource Provider."),
					Resource:    to.Ptr("SQL Server Encryption Protector"),
				},
				IsDataAction: to.Ptr("false"),
				Origin:       to.Ptr("user, system"),
			},
			{
				Name: to.Ptr("Microsoft.Synapse/workspaces/encryptionProtector/read"),
				Display: &armsynapse.AvailableRpOperationDisplayInfo{
					Description: to.Ptr("Returns a list of server encryption protectors or gets the properties for the specified server encryption protector."),
					Operation:   to.Ptr("Returns a list of server encryption protectors or gets the properties for the specified server encryption protector."),
					Provider:    to.Ptr("Analytics 365 Resource Provider."),
					Resource:    to.Ptr("SQL Server Encryption Protector"),
				},
				IsDataAction: to.Ptr("false"),
				Origin:       to.Ptr("user, system"),
			},
			{
				Name: to.Ptr("Microsoft.Synapse/workspaces/encryptionProtector/revalidate/action"),
				Display: &armsynapse.AvailableRpOperationDisplayInfo{
					Description: to.Ptr("Revalidates an existing encryption protector."),
					Operation:   to.Ptr("Revalidates an existing encryption protector."),
					Provider:    to.Ptr("Analytics 365 Resource Provider."),
					Resource:    to.Ptr("SQL Server Encryption Protector"),
				},
				IsDataAction: to.Ptr("false"),
				Origin:       to.Ptr("user, system"),
			},
			{
				Name: to.Ptr("Microsoft.Synapse/workspaces/providers/Microsoft.Insights/metricDefinitions/read"),
				Display: &armsynapse.AvailableRpOperationDisplayInfo{
					Description: to.Ptr("Gets the available metrics for workspace"),
					Operation:   to.Ptr("Read workspace metric definitions"),
					Provider:    to.Ptr("Microsoft Azure Synapse Analytics"),
					Resource:    to.Ptr("Workspace"),
				},
				Origin: to.Ptr("system"),
				Properties: &armsynapse.OperationMetaPropertyInfo{
					ServiceSpecification: &armsynapse.OperationMetaServiceSpecification{
						MetricSpecifications: []*armsynapse.OperationMetaMetricSpecification{
							{
								Name:            to.Ptr("PipelineFailedRuns"),
								AggregationType: to.Ptr("Total"),
								Dimensions: []*armsynapse.OperationMetaMetricDimensionSpecification{
									{
										Name:                   to.Ptr("FailureType"),
										DisplayName:            to.Ptr("Failure Type"),
										ToBeExportedForShoebox: to.Ptr(true),
									},
									{
										Name:                   to.Ptr("Name"),
										DisplayName:            to.Ptr("Pipeline"),
										ToBeExportedForShoebox: to.Ptr(true),
									}},
								DisplayName:        to.Ptr("Failed pipeline runs"),
								SourceMdmAccount:   to.Ptr("MicrosoftDataFactoryProdShoebox"),
								SourceMdmNamespace: to.Ptr("ADFMetrics"),
								Unit:               to.Ptr("Count"),
							},
							{
								Name:            to.Ptr("PipelineSucceededRuns"),
								AggregationType: to.Ptr("Total"),
								Dimensions: []*armsynapse.OperationMetaMetricDimensionSpecification{
									{
										Name:                   to.Ptr("FailureType"),
										DisplayName:            to.Ptr("Failure Type"),
										ToBeExportedForShoebox: to.Ptr(true),
									},
									{
										Name:                   to.Ptr("Name"),
										DisplayName:            to.Ptr("Pipeline"),
										ToBeExportedForShoebox: to.Ptr(true),
									}},
								DisplayName:        to.Ptr("Succeeded pipeline runs"),
								SourceMdmAccount:   to.Ptr("MicrosoftDataFactoryProdShoebox"),
								SourceMdmNamespace: to.Ptr("ADFMetrics"),
								Unit:               to.Ptr("Count"),
							},
							{
								Name:            to.Ptr("PipelineCancelledRuns"),
								AggregationType: to.Ptr("Total"),
								Dimensions: []*armsynapse.OperationMetaMetricDimensionSpecification{
									{
										Name:                   to.Ptr("FailureType"),
										DisplayName:            to.Ptr("Failure Type"),
										ToBeExportedForShoebox: to.Ptr(true),
									},
									{
										Name:                   to.Ptr("Name"),
										DisplayName:            to.Ptr("Pipeline"),
										ToBeExportedForShoebox: to.Ptr(true),
									}},
								DisplayName:        to.Ptr("Cancelled pipeline runs"),
								SourceMdmAccount:   to.Ptr("MicrosoftDataFactoryProdShoebox"),
								SourceMdmNamespace: to.Ptr("ADFMetrics"),
								Unit:               to.Ptr("Count"),
							},
							{
								Name:            to.Ptr("ActivityFailedRuns"),
								AggregationType: to.Ptr("Total"),
								Dimensions: []*armsynapse.OperationMetaMetricDimensionSpecification{
									{
										Name:                   to.Ptr("ActivityType"),
										DisplayName:            to.Ptr("Activity Type"),
										ToBeExportedForShoebox: to.Ptr(true),
									},
									{
										Name:                   to.Ptr("PipelineName"),
										DisplayName:            to.Ptr("Pipeline"),
										ToBeExportedForShoebox: to.Ptr(true),
									},
									{
										Name:                   to.Ptr("FailureType"),
										DisplayName:            to.Ptr("Failure Type"),
										ToBeExportedForShoebox: to.Ptr(true),
									},
									{
										Name:                   to.Ptr("Name"),
										DisplayName:            to.Ptr("Activity"),
										ToBeExportedForShoebox: to.Ptr(true),
									}},
								DisplayName:        to.Ptr("Failed activity runs"),
								SourceMdmAccount:   to.Ptr("MicrosoftDataFactoryProdShoebox"),
								SourceMdmNamespace: to.Ptr("ADFMetrics"),
								Unit:               to.Ptr("Count"),
							},
							{
								Name:            to.Ptr("ActivitySucceededRuns"),
								AggregationType: to.Ptr("Total"),
								Dimensions: []*armsynapse.OperationMetaMetricDimensionSpecification{
									{
										Name:                   to.Ptr("ActivityType"),
										DisplayName:            to.Ptr("Activity Type"),
										ToBeExportedForShoebox: to.Ptr(true),
									},
									{
										Name:                   to.Ptr("PipelineName"),
										DisplayName:            to.Ptr("Pipeline"),
										ToBeExportedForShoebox: to.Ptr(true),
									},
									{
										Name:                   to.Ptr("FailureType"),
										DisplayName:            to.Ptr("Failure Type"),
										ToBeExportedForShoebox: to.Ptr(true),
									},
									{
										Name:                   to.Ptr("Name"),
										DisplayName:            to.Ptr("Activity"),
										ToBeExportedForShoebox: to.Ptr(true),
									}},
								DisplayName:        to.Ptr("Succeeded activity runs"),
								SourceMdmAccount:   to.Ptr("MicrosoftDataFactoryProdShoebox"),
								SourceMdmNamespace: to.Ptr("ADFMetrics"),
								Unit:               to.Ptr("Count"),
							},
							{
								Name:            to.Ptr("ActivityCancelledRuns"),
								AggregationType: to.Ptr("Total"),
								Dimensions: []*armsynapse.OperationMetaMetricDimensionSpecification{
									{
										Name:                   to.Ptr("ActivityType"),
										DisplayName:            to.Ptr("Activity Type"),
										ToBeExportedForShoebox: to.Ptr(true),
									},
									{
										Name:                   to.Ptr("PipelineName"),
										DisplayName:            to.Ptr("Pipeline"),
										ToBeExportedForShoebox: to.Ptr(true),
									},
									{
										Name:                   to.Ptr("FailureType"),
										DisplayName:            to.Ptr("Failure Type"),
										ToBeExportedForShoebox: to.Ptr(true),
									},
									{
										Name:                   to.Ptr("Name"),
										DisplayName:            to.Ptr("Activity"),
										ToBeExportedForShoebox: to.Ptr(true),
									}},
								DisplayName:        to.Ptr("Cancelled activity runs"),
								SourceMdmAccount:   to.Ptr("MicrosoftDataFactoryProdShoebox"),
								SourceMdmNamespace: to.Ptr("ADFMetrics"),
								Unit:               to.Ptr("Count"),
							},
							{
								Name:            to.Ptr("TriggerFailedRuns"),
								AggregationType: to.Ptr("Total"),
								Dimensions: []*armsynapse.OperationMetaMetricDimensionSpecification{
									{
										Name:                   to.Ptr("Name"),
										DisplayName:            to.Ptr("Trigger"),
										ToBeExportedForShoebox: to.Ptr(true),
									},
									{
										Name:                   to.Ptr("FailureType"),
										DisplayName:            to.Ptr("Failure Type"),
										ToBeExportedForShoebox: to.Ptr(true),
									}},
								DisplayName:        to.Ptr("Failed trigger runs"),
								SourceMdmAccount:   to.Ptr("MicrosoftDataFactoryProdShoebox"),
								SourceMdmNamespace: to.Ptr("ADFMetrics"),
								Unit:               to.Ptr("Count"),
							},
							{
								Name:            to.Ptr("TriggerSucceededRuns"),
								AggregationType: to.Ptr("Total"),
								Dimensions: []*armsynapse.OperationMetaMetricDimensionSpecification{
									{
										Name:                   to.Ptr("Name"),
										DisplayName:            to.Ptr("Trigger"),
										ToBeExportedForShoebox: to.Ptr(true),
									},
									{
										Name:                   to.Ptr("FailureType"),
										DisplayName:            to.Ptr("Failure Type"),
										ToBeExportedForShoebox: to.Ptr(true),
									}},
								DisplayName:        to.Ptr("Succeeded trigger runs"),
								SourceMdmAccount:   to.Ptr("MicrosoftDataFactoryProdShoebox"),
								SourceMdmNamespace: to.Ptr("ADFMetrics"),
								Unit:               to.Ptr("Count"),
							},
							{
								Name:            to.Ptr("TriggerCancelledRuns"),
								AggregationType: to.Ptr("Total"),
								Dimensions: []*armsynapse.OperationMetaMetricDimensionSpecification{
									{
										Name:                   to.Ptr("Name"),
										DisplayName:            to.Ptr("Trigger"),
										ToBeExportedForShoebox: to.Ptr(true),
									},
									{
										Name:                   to.Ptr("FailureType"),
										DisplayName:            to.Ptr("Failure Type"),
										ToBeExportedForShoebox: to.Ptr(true),
									}},
								DisplayName:        to.Ptr("Cancelled trigger runs"),
								SourceMdmAccount:   to.Ptr("MicrosoftDataFactoryProdShoebox"),
								SourceMdmNamespace: to.Ptr("ADFMetrics"),
								Unit:               to.Ptr("Count"),
							}},
					},
				},
			},
			{
				Name: to.Ptr("Microsoft.Synapse/workspaces/providers/Microsoft.Insights/diagnosticSettings/read"),
				Display: &armsynapse.AvailableRpOperationDisplayInfo{
					Description: to.Ptr("Gets the diagnostic setting for the resource"),
					Operation:   to.Ptr("Read diagnostic setting"),
					Provider:    to.Ptr("Microsoft Azure Synapse Analytics"),
					Resource:    to.Ptr("Workspace"),
				},
				Origin: to.Ptr("system"),
			},
			{
				Name: to.Ptr("Microsoft.Synapse/workspaces/providers/Microsoft.Insights/diagnosticSettings/write"),
				Display: &armsynapse.AvailableRpOperationDisplayInfo{
					Description: to.Ptr("Creates or updates the diagnostic setting for the resource"),
					Operation:   to.Ptr("Write diagnostic setting"),
					Provider:    to.Ptr("Microsoft Azure Synapse Analytics"),
					Resource:    to.Ptr("Workspace"),
				},
				Origin: to.Ptr("system"),
			},
			{
				Name: to.Ptr("Microsoft.Synapse/workspaces/providers/Microsoft.Insights/logDefinitions/read"),
				Display: &armsynapse.AvailableRpOperationDisplayInfo{
					Description: to.Ptr("Gets the available logs for workspace"),
					Operation:   to.Ptr("Read workspace log definitions"),
					Provider:    to.Ptr("Microsoft Azure Synapse Analytics"),
					Resource:    to.Ptr("The log definition of workspace"),
				},
				Origin: to.Ptr("system"),
				Properties: &armsynapse.OperationMetaPropertyInfo{
					ServiceSpecification: &armsynapse.OperationMetaServiceSpecification{
						LogSpecifications: []*armsynapse.OperationMetaLogSpecification{
							{
								Name:         to.Ptr("ActivityRuns"),
								BlobDuration: to.Ptr("PT1H"),
								DisplayName:  to.Ptr("Activity runs"),
							},
							{
								Name:         to.Ptr("PipelineRuns"),
								BlobDuration: to.Ptr("PT1H"),
								DisplayName:  to.Ptr("Pipeline runs"),
							},
							{
								Name:         to.Ptr("TriggerRuns"),
								BlobDuration: to.Ptr("PT1H"),
								DisplayName:  to.Ptr("Trigger runs"),
							}},
					},
				},
			},
			{
				Name: to.Ptr("Microsoft.Synapse/workspaces/recoverableSqlPools/read"),
				Display: &armsynapse.AvailableRpOperationDisplayInfo{
					Description: to.Ptr("Gets recoverable SQL Analytics Pools, which are the resources representing geo backups of SQL Analytics Pools."),
					Operation:   to.Ptr("Gets recoverable SQL Analytics Pools."),
					Provider:    to.Ptr("Analytics 365 Resource Provider."),
					Resource:    to.Ptr("Recoverable Sql Analytics Pools"),
				},
				IsDataAction: to.Ptr("false"),
				Origin:       to.Ptr("user, system"),
			},
			{
				Name: to.Ptr("Microsoft.Synapse/workspaces/sqlUsages/read"),
				Display: &armsynapse.AvailableRpOperationDisplayInfo{
					Description: to.Ptr("Gets usage limits available for SQL Analytics Pools."),
					Operation:   to.Ptr("Gets usage limits available for SQL Analytics Pools."),
					Provider:    to.Ptr("Analytics 365 Resource Provider."),
					Resource:    to.Ptr("SQL Analytics pool Usages"),
				},
				IsDataAction: to.Ptr("false"),
				Origin:       to.Ptr("user, system"),
			}}
		if !reflect.DeepEqual(exampleRes, res.AvailableRpOperationArray) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AvailableRpOperationArray)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetAvailableOperations.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOperations_GetLocationHeaderResult(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetLocationHeader.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get location header result"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewOperationsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	_, err := client.GetLocationHeaderResult(ctx,
		"resourceGroup1",
		"workspace1",
		"01234567-89ab-4def-0123-456789abcdef",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetLocationHeader.json: %v", err)
	}
}

func TestOperations_GetAzureAsyncHeaderResult(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetAzureAsyncOperationHeader.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get azure async operation header result"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewOperationsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.GetAzureAsyncHeaderResult(ctx,
		"resourceGroup1",
		"workspace1",
		"01234567-89ab-4def-0123-456789abcdef",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetAzureAsyncOperationHeader.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.OperationResource{
			Status: to.Ptr(armsynapse.OperationStatusInProgress),
		}
		if !reflect.DeepEqual(exampleRes, res.OperationResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.OperationResource)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetAzureAsyncOperationHeader.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIPFirewallRules_ListByWorkspace(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ListIpFirewallRules.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List IP firewall rules in a workspace"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewIPFirewallRulesClient("01234567-89ab-4def-0123-456789abcdef", cred, &options)
	pager := client.ListByWorkspace("ExampleResourceGroup",
		"ExampleWorkspace",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ListIpFirewallRules.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsynapse.IPFirewallRuleInfoListResult{
			Value: []*armsynapse.IPFirewallRuleInfo{},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.IPFirewallRuleInfoListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.IPFirewallRuleInfoListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ListIpFirewallRules.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIPFirewallRules_CreateOrUpdate(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/CreateIpFirewallRule.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create an IP firewall rule"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewIPFirewallRulesClient("01234567-89ab-4def-0123-456789abcdef", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"ExampleResourceGroup",
		"ExampleWorkspace",
		"ExampleIpFirewallRule",
		armsynapse.IPFirewallRuleInfo{
			Properties: &armsynapse.IPFirewallRuleProperties{
				EndIPAddress:   to.Ptr("10.0.0.254"),
				StartIPAddress: to.Ptr("10.0.0.0"),
			},
		},
		&armsynapse.IPFirewallRulesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/CreateIpFirewallRule.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/CreateIpFirewallRule.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.IPFirewallRuleInfo{
			Name: to.Ptr("ExampleIpFirewallRule"),
			Type: to.Ptr("Microsoft.Synapse/workspaces/firewallRules"),
			ID:   to.Ptr("/subscriptions/01234567-89ab-4def-0123-456789abcdef/resourceGroups/ExampleResourceGroup/providers/Microsoft.Synapse/workspaces/ExampleWorkspace/firewallRules/ExampleIpFirewallRule"),
			Properties: &armsynapse.IPFirewallRuleProperties{
				EndIPAddress:      to.Ptr("10.0.0.254"),
				ProvisioningState: to.Ptr(armsynapse.ProvisioningStateSucceeded),
				StartIPAddress:    to.Ptr("10.0.0.0"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.IPFirewallRuleInfo) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.IPFirewallRuleInfo)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/CreateIpFirewallRule.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIPFirewallRules_Delete(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/DeleteIpFirewallRule.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete an IP firewall rule from a workspace"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewIPFirewallRulesClient("01234567-89ab-4def-0123-456789abcdef", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"ExampleResourceGroup",
		"ExampleWorkspace",
		"ExampleIpFirewallRule",
		&armsynapse.IPFirewallRulesClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/DeleteIpFirewallRule.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/DeleteIpFirewallRule.json: %v", err)
	}
	// Response check
	{
		exampleRes := map[string]interface{}{
			"name":     "ExampleIpFirewallRule",
			"type":     "Microsoft.Synapse/workspaces/firewallRules",
			"id":       "/subscriptions/01234567-89ab-4def-0123-456789abcdef/resourceGroups/ExampleResourceGroup/providers/Microsoft.Synapse/workspaces/ExampleWorkspace/firewallRules/ExampleIpFirewallRule",
			"location": "West US 2",
			"properties": map[string]interface{}{
				"endIpAddress":      "10.0.0.254",
				"provisioningState": "Deleting",
				"startIpAddress":    "10.0.0.0",
			},
			"tags": map[string]interface{}{},
		}
		if !reflect.DeepEqual(exampleRes, res.Interface) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Interface)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/DeleteIpFirewallRule.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIPFirewallRules_Get(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetIpFirewallRule.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create an IP firewall rule"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewIPFirewallRulesClient("01234567-89ab-4def-0123-456789abcdef", cred, &options)
	res, err := client.Get(ctx,
		"ExampleResourceGroup",
		"ExampleWorkspace",
		"ExampleIpFirewallRule",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetIpFirewallRule.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.IPFirewallRuleInfo{
			Name: to.Ptr("ExampleIpFirewallRule"),
			Type: to.Ptr("Microsoft.Synapse/workspaces/firewallRules"),
			ID:   to.Ptr("/subscriptions/01234567-89ab-4def-0123-456789abcdef/resourceGroups/ExampleResourceGroup/providers/Microsoft.Synapse/workspaces/ExampleWorkspace/firewallRules/ExampleIpFirewallRule"),
			Properties: &armsynapse.IPFirewallRuleProperties{
				EndIPAddress:      to.Ptr("10.0.0.254"),
				ProvisioningState: to.Ptr(armsynapse.ProvisioningStateSucceeded),
				StartIPAddress:    to.Ptr("10.0.0.0"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.IPFirewallRuleInfo) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.IPFirewallRuleInfo)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetIpFirewallRule.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIPFirewallRules_ReplaceAll(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ReplaceAllIpFirewallRules.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Replace all IP firewall rules in a workspace"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewIPFirewallRulesClient("01234567-89ab-4def-0123-456789abcdef", cred, &options)
	poller, err := client.BeginReplaceAll(ctx,
		"ExampleResourceGroup",
		"ExampleWorkspace",
		armsynapse.ReplaceAllIPFirewallRulesRequest{
			IPFirewallRules: map[string]*armsynapse.IPFirewallRuleProperties{
				"AnotherExampleFirewallRule": {
					EndIPAddress:   to.Ptr("10.0.1.254"),
					StartIPAddress: to.Ptr("10.0.1.0"),
				},
				"ExampleFirewallRule": {
					EndIPAddress:   to.Ptr("10.0.0.254"),
					StartIPAddress: to.Ptr("10.0.0.0"),
				},
			},
		},
		&armsynapse.IPFirewallRulesClientBeginReplaceAllOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ReplaceAllIpFirewallRules.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ReplaceAllIpFirewallRules.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.ReplaceAllFirewallRulesOperationResponse{
			OperationID: to.Ptr("00000000-1111-4444-2222-333333333333"),
		}
		if !reflect.DeepEqual(exampleRes, res.ReplaceAllFirewallRulesOperationResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ReplaceAllFirewallRulesOperationResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ReplaceAllIpFirewallRules.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestKeys_ListByWorkspace(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ListKeysInWorkspace.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List keys in workspace"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewKeysClient("01234567-89ab-4def-0123-456789abcdef", cred, &options)
	pager := client.ListByWorkspace("ExampleResourceGroup",
		"ExampleWorkspace",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ListKeysInWorkspace.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsynapse.KeyInfoListResult{
			Value: []*armsynapse.Key{
				{
					Name: to.Ptr("key1"),
					Type: to.Ptr("Microsoft.Synapse/workspaces/keys"),
					ID:   to.Ptr("/subscriptions/01234567-89ab-4def-0123-456789abcdef/resourceGroups/ExampleResourceGroup/providers/Microsoft.Synapse/workspaces/ExampleWorkspace/keys/key1"),
					Properties: &armsynapse.KeyProperties{
						IsActiveCMK: to.Ptr(false),
						KeyVaultURL: to.Ptr("https://vault.azure.net/keys/somesecret1"),
					},
				},
				{
					Name: to.Ptr("key2"),
					Type: to.Ptr("Microsoft.Synapse/workspaces/keys"),
					ID:   to.Ptr("/subscriptions/01234567-89ab-4def-0123-456789abcdef/resourceGroups/ExampleResourceGroup/providers/Microsoft.Synapse/workspaces/ExampleWorkspace/keys/key2"),
					Properties: &armsynapse.KeyProperties{
						IsActiveCMK: to.Ptr(true),
						KeyVaultURL: to.Ptr("https://vault.azure.net/keys/somesecret2"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.KeyInfoListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.KeyInfoListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ListKeysInWorkspace.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestKeys_Get(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetKey.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a workspace key"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewKeysClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"ExampleResourceGroup",
		"ExampleWorkspace",
		"somekey",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetKey.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.Key{
			Name: to.Ptr("somekey"),
			Type: to.Ptr("Microsoft.Synapse/workspaces/keys"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/ExampleResourceGroup/providers/Microsoft.Synapse/workspaces/ExampleWorkspace/keys/somekey"),
			Properties: &armsynapse.KeyProperties{
				IsActiveCMK: to.Ptr(true),
				KeyVaultURL: to.Ptr("https://vault.azure.net/keys/key1"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Key) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Key)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetKey.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestKeys_CreateOrUpdate(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/CreateOrUpdateKey.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a workspace key"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewKeysClient("01234567-89ab-4def-0123-456789abcdef", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"ExampleResourceGroup",
		"ExampleWorkspace",
		"somekey",
		armsynapse.Key{
			Properties: &armsynapse.KeyProperties{
				IsActiveCMK: to.Ptr(true),
				KeyVaultURL: to.Ptr("https://vault.azure.net/keys/somesecret"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/CreateOrUpdateKey.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.Key{
			Name: to.Ptr("somekey"),
			Type: to.Ptr("Microsoft.Synapse/workspaces/keys"),
			ID:   to.Ptr("/subscriptions/01234567-89ab-4def-0123-456789abcdef/resourceGroups/ExampleResourceGroup/providers/Microsoft.Synapse/workspaces/ExampleWorkspace/keys/somekey"),
			Properties: &armsynapse.KeyProperties{
				IsActiveCMK: to.Ptr(true),
				KeyVaultURL: to.Ptr("https://vault.azure.net/keys/somesecret"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Key) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Key)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/CreateOrUpdateKey.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestKeys_Delete(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/DeleteKey.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a workspace key"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewKeysClient("01234567-89ab-4def-0123-456789abcdef", cred, &options)
	res, err := client.Delete(ctx,
		"ExampleResourceGroup",
		"ExampleWorkspace",
		"somekey",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/DeleteKey.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.Key{
			Name: to.Ptr("somekey"),
			Type: to.Ptr("Microsoft.Synapse/workspaces/keys"),
			ID:   to.Ptr("/subscriptions/01234567-89ab-4def-0123-456789abcdef/resourceGroups/ExampleResourceGroup/providers/Microsoft.Synapse/workspaces/ExampleWorkspace/keys/somekey"),
			Properties: &armsynapse.KeyProperties{
				IsActiveCMK: to.Ptr(true),
				KeyVaultURL: to.Ptr("https://vault.azure.net/keys/key1"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Key) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Key)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/DeleteKey.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnections_Get(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetPrivateEndpointConnection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get private endpoint connection"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewPrivateEndpointConnectionsClient("01234567-89ab-4def-0123-456789abcdef", cred, &options)
	res, err := client.Get(ctx,
		"ExampleResourceGroup",
		"ExampleWorkspace",
		"ExamplePrivateEndpointConnection",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetPrivateEndpointConnection.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.PrivateEndpointConnection{
			Name: to.Ptr("sql"),
			Type: to.Ptr("Microsoft.Synapse/workspaces/privateEndpointConnections"),
			ID:   to.Ptr("/subscriptions/01234567-89ab-4def-0123-456789abcdef/resourceGroups/ExampleResourceGroup/providers/Microsoft.Synapse/workspaces/ExampleWorkspace/privateEndpointConnections/ExamplePrivateEndpointConnection"),
			Properties: &armsynapse.PrivateEndpointConnectionProperties{
				PrivateEndpoint: &armsynapse.PrivateEndpoint{
					ID: to.Ptr("/subscriptions/01234567-89ab-4def-0123-456789abcdef/resourceGroups/ExampleResourceGroup/providers/Microsoft.Network/privateEndpoints/ExamplePrivateEndpoint"),
				},
				PrivateLinkServiceConnectionState: &armsynapse.PrivateLinkServiceConnectionState{
					Description:     to.Ptr("Auto-approved"),
					ActionsRequired: to.Ptr("None"),
					Status:          to.Ptr("Approved"),
				},
				ProvisioningState: to.Ptr("Succeeded"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateEndpointConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetPrivateEndpointConnection.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnections_Create(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ApprovePrivateEndpointConnection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Approve private endpoint connection"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewPrivateEndpointConnectionsClient("01234567-89ab-4def-0123-456789abcdef", cred, &options)
	poller, err := client.BeginCreate(ctx,
		"ExampleResourceGroup",
		"ExampleWorkspace",
		"ExamplePrivateEndpointConnection",
		armsynapse.PrivateEndpointConnection{
			Properties: &armsynapse.PrivateEndpointConnectionProperties{
				PrivateLinkServiceConnectionState: &armsynapse.PrivateLinkServiceConnectionState{
					Description: to.Ptr("Approved by abc@example.com"),
					Status:      to.Ptr("Approved"),
				},
			},
		},
		&armsynapse.PrivateEndpointConnectionsClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ApprovePrivateEndpointConnection.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ApprovePrivateEndpointConnection.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.PrivateEndpointConnection{
			Name: to.Ptr("sql"),
			Type: to.Ptr("Microsoft.Synapse/workspaces/privateEndpointConnections"),
			ID:   to.Ptr("/subscriptions/01234567-89ab-4def-0123-456789abcdef/resourceGroups/ExampleResourceGroup/providers/Microsoft.Synapse/workspaces/ExampleWorkspace/privateEndpointConnections/ExamplePrivateEndpointConnection"),
			Properties: &armsynapse.PrivateEndpointConnectionProperties{
				PrivateEndpoint: &armsynapse.PrivateEndpoint{
					ID: to.Ptr("/subscriptions/01234567-89ab-4def-0123-456789abcdef/resourceGroups/ExampleResourceGroup/providers/Microsoft.Network/privateEndpoints/ExamplePrivateEndpoint"),
				},
				PrivateLinkServiceConnectionState: &armsynapse.PrivateLinkServiceConnectionState{
					Description:     to.Ptr("Auto-approved"),
					ActionsRequired: to.Ptr("None"),
					Status:          to.Ptr("Approved"),
				},
				ProvisioningState: to.Ptr("Succeeded"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateEndpointConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ApprovePrivateEndpointConnection.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnections_Delete(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/DeletePrivateEndpointConnection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete private endpoint connection"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewPrivateEndpointConnectionsClient("01234567-89ab-4def-0123-456789abcdef", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"ExampleResourceGroup",
		"ExampleWorkspace",
		"ExamplePrivateEndpointConnection",
		&armsynapse.PrivateEndpointConnectionsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/DeletePrivateEndpointConnection.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/DeletePrivateEndpointConnection.json: %v", err)
	}
}

func TestPrivateEndpointConnections_List(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ListPrivateEndpointConnections.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List private endpoint connections in workspace"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewPrivateEndpointConnectionsClient("01234567-89ab-4def-0123-456789abcdef", cred, &options)
	pager := client.List("ExampleResourceGroup",
		"ExampleWorkspace",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ListPrivateEndpointConnections.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsynapse.PrivateEndpointConnectionList{
			Value: []*armsynapse.PrivateEndpointConnection{
				{
					Name: to.Ptr("sql"),
					Type: to.Ptr("Microsoft.Synapse/workspaces/privateEndpointConnections"),
					ID:   to.Ptr("/subscriptions/01234567-89ab-4def-0123-456789abcdef/resourceGroups/ExampleResourceGroup/providers/Microsoft.Synapse/workspaces/ExampleWorkspace/privateEndpointConnections/ExamplePrivateEndpointConnection"),
					Properties: &armsynapse.PrivateEndpointConnectionProperties{
						PrivateEndpoint: &armsynapse.PrivateEndpoint{
							ID: to.Ptr("/subscriptions/01234567-89ab-4def-0123-456789abcdef/resourceGroups/ExampleResourceGroup/providers/Microsoft.Network/privateEndpoints/ExamplePrivateEndpoint"),
						},
						PrivateLinkServiceConnectionState: &armsynapse.PrivateLinkServiceConnectionState{
							Description:     to.Ptr("Auto-approved"),
							ActionsRequired: to.Ptr("None"),
							Status:          to.Ptr("Approved"),
						},
						ProvisioningState: to.Ptr("Succeeded"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PrivateEndpointConnectionList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PrivateEndpointConnectionList)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ListPrivateEndpointConnections.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateLinkResources_List(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ListPrivateLinkResources.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get private link resources for workspace"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewPrivateLinkResourcesClient("01234567-89ab-4def-0123-456789abcdef", cred, &options)
	pager := client.List("ExampleResourceGroup",
		"ExampleWorkspace",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ListPrivateLinkResources.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsynapse.PrivateLinkResourceListResult{
			Value: []*armsynapse.PrivateLinkResource{
				{
					Name: to.Ptr("sql"),
					Type: to.Ptr("Microsoft.Synapse/workspaces/privateLinkResources"),
					ID:   to.Ptr("/subscriptions/01234567-89ab-4def-0123-456789abcdef/resourceGroups/ExampleResourceGroup/providers/Microsoft.Synapse/workspaces/ExampleWorkspace/privateLinkResources/sql"),
					Properties: &armsynapse.PrivateLinkResourceProperties{
						GroupID: to.Ptr("sql"),
						RequiredMembers: []*string{
							to.Ptr("sql")},
						RequiredZoneNames: []*string{
							to.Ptr("privatelink.sql.azuresynapse.net")},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PrivateLinkResourceListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PrivateLinkResourceListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ListPrivateLinkResources.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateLinkResources_Get(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetPrivateLinkResource.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get private link resources for workspace"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewPrivateLinkResourcesClient("01234567-89ab-4def-0123-456789abcdef", cred, &options)
	res, err := client.Get(ctx,
		"ExampleResourceGroup",
		"ExampleWorkspace",
		"sql",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetPrivateLinkResource.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.PrivateLinkResource{
			Name: to.Ptr("sql"),
			Type: to.Ptr("Microsoft.Synapse/workspaces/privateLinkResources"),
			ID:   to.Ptr("/subscriptions/01234567-89ab-4def-0123-456789abcdef/resourceGroups/ExampleResourceGroup/providers/Microsoft.Synapse/workspaces/ExampleWorkspace/privateLinkResources/sql"),
			Properties: &armsynapse.PrivateLinkResourceProperties{
				GroupID: to.Ptr("sql"),
				RequiredMembers: []*string{
					to.Ptr("sql")},
				RequiredZoneNames: []*string{
					to.Ptr("privatelink.sql.azuresynapse.net")},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateLinkResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateLinkResource)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetPrivateLinkResource.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateLinkHubPrivateLinkResources_List(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ListPrivateLinkHubPrivateLinkResources.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get private link resources for private link hub"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewPrivateLinkHubPrivateLinkResourcesClient("01234567-89ab-4def-0123-456789abcdef", cred, &options)
	pager := client.List("ExampleResourceGroup",
		"ExamplePrivateLinkHub",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ListPrivateLinkHubPrivateLinkResources.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsynapse.PrivateLinkResourceListResult{
			Value: []*armsynapse.PrivateLinkResource{
				{
					Name: to.Ptr("sql"),
					Type: to.Ptr("Microsoft.Synapse/privateLinkHubs/privateLinkResources"),
					ID:   to.Ptr("/subscriptions/01234567-89ab-4def-0123-456789abcdef/resourceGroups/ExampleResourceGroup/providers/Microsoft.Synapse/privateLinkHubs/ExamplePrivateLinkHub/privateLinkResources/sql"),
					Properties: &armsynapse.PrivateLinkResourceProperties{
						GroupID: to.Ptr("sql"),
						RequiredMembers: []*string{
							to.Ptr("sql")},
						RequiredZoneNames: []*string{
							to.Ptr("privatelink.sql.azuresynapse.net")},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PrivateLinkResourceListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PrivateLinkResourceListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ListPrivateLinkHubPrivateLinkResources.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateLinkHubPrivateLinkResources_Get(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetPrivateLinkHubPrivateLinkResource.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get private link resources for private link hub"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewPrivateLinkHubPrivateLinkResourcesClient("01234567-89ab-4def-0123-456789abcdef", cred, &options)
	res, err := client.Get(ctx,
		"ExampleResourceGroup",
		"ExamplePrivateLinkHub",
		"sql",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetPrivateLinkHubPrivateLinkResource.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.PrivateLinkResource{
			Name: to.Ptr("sql"),
			Type: to.Ptr("Microsoft.Synapse/privateLinkHubs/privateLinkResources"),
			ID:   to.Ptr("/subscriptions/01234567-89ab-4def-0123-456789abcdef/resourceGroups/ExampleResourceGroup/providers/Microsoft.Synapse/privateLinkHubs/ExamplePrivateLinkHub/privateLinkResources/sql"),
			Properties: &armsynapse.PrivateLinkResourceProperties{
				GroupID: to.Ptr("sql"),
				RequiredMembers: []*string{
					to.Ptr("sql")},
				RequiredZoneNames: []*string{
					to.Ptr("privatelink.sql.azuresynapse.net")},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateLinkResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateLinkResource)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetPrivateLinkHubPrivateLinkResource.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateLinkHubs_ListByResourceGroup(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ListPrivateLinkHubsInResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List privateLinkHubs in resource group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewPrivateLinkHubsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByResourceGroup("resourceGroup1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ListPrivateLinkHubsInResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsynapse.PrivateLinkHubInfoListResult{
			Value: []*armsynapse.PrivateLinkHub{
				{
					Name:     to.Ptr("privateLinkHub1"),
					Type:     to.Ptr("Microsoft.Synapse/privateLinkHubs"),
					ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/resourceGroup1/providers/Microsoft.Synapse/privateLinkHubs/privateLinkHub1"),
					Location: to.Ptr("East US"),
					Tags: map[string]*string{
						"key": to.Ptr("value"),
					},
					Properties: &armsynapse.PrivateLinkHubProperties{
						ProvisioningState: to.Ptr("Succeeded"),
					},
				},
				{
					Name:     to.Ptr("privateLinkHub2"),
					Type:     to.Ptr("Microsoft.Synapse/privateLinkHubs"),
					ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/resourceGroup1/providers/Microsoft.Synapse/privateLinkHubs/privateLinkHub2"),
					Location: to.Ptr("East US"),
					Tags: map[string]*string{
						"key": to.Ptr("value"),
					},
					Properties: &armsynapse.PrivateLinkHubProperties{
						ProvisioningState: to.Ptr("Succeeded"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PrivateLinkHubInfoListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PrivateLinkHubInfoListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ListPrivateLinkHubsInResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateLinkHubs_Get(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetPrivateLinkHub.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a privateLinkHub"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewPrivateLinkHubsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"resourceGroup1",
		"privateLinkHub1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetPrivateLinkHub.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.PrivateLinkHub{
			Name:     to.Ptr("privateLinkHub1"),
			Type:     to.Ptr("Microsoft.Synapse/privateLinkHubs"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/resourceGroup1/providers/Microsoft.Synapse/privateLinkHubs/privateLinkHub1"),
			Location: to.Ptr("East US"),
			Tags: map[string]*string{
				"key": to.Ptr("value"),
			},
			Properties: &armsynapse.PrivateLinkHubProperties{
				ProvisioningState: to.Ptr("Succeeded"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateLinkHub) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateLinkHub)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetPrivateLinkHub.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateLinkHubs_Update(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/UpdatePrivateLinkHub.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a privateLinkHub"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewPrivateLinkHubsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Update(ctx,
		"resourceGroup1",
		"privateLinkHub1",
		armsynapse.PrivateLinkHubPatchInfo{
			Tags: map[string]*string{
				"key": to.Ptr("value"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/UpdatePrivateLinkHub.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.PrivateLinkHub{
			Name:     to.Ptr("privateLinkHub1"),
			Type:     to.Ptr("Microsoft.Synapse/privateLinkHubs"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/resourceGroup1/providers/Microsoft.Synapse/privateLinkHubs/privateLinkHub1"),
			Location: to.Ptr("East US"),
			Tags: map[string]*string{
				"key": to.Ptr("value"),
			},
			Properties: &armsynapse.PrivateLinkHubProperties{
				ProvisioningState: to.Ptr("Succeeded"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateLinkHub) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateLinkHub)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/UpdatePrivateLinkHub.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateLinkHubs_CreateOrUpdate(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/CreateOrUpdatePrivateLinkHub.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a privateLinkHub"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewPrivateLinkHubsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"resourceGroup1",
		"privateLinkHub1",
		armsynapse.PrivateLinkHub{
			Location: to.Ptr("East US"),
			Tags: map[string]*string{
				"key": to.Ptr("value"),
			},
			Properties: &armsynapse.PrivateLinkHubProperties{},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/CreateOrUpdatePrivateLinkHub.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.PrivateLinkHub{
			Name:     to.Ptr("privateLinkHub1"),
			Type:     to.Ptr("Microsoft.Synapse/privateLinkHubs"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/resourceGroup1/providers/Microsoft.Synapse/privateLinkHubs/privateLinkHub1"),
			Location: to.Ptr("East US"),
			Tags: map[string]*string{
				"key": to.Ptr("value"),
			},
			Properties: &armsynapse.PrivateLinkHubProperties{
				ProvisioningState: to.Ptr("Succeeded"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateLinkHub) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateLinkHub)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/CreateOrUpdatePrivateLinkHub.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateLinkHubs_Delete(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/DeletePrivateLinkHub.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a privateLinkHub"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewPrivateLinkHubsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"resourceGroup1",
		"privateLinkHub1",
		&armsynapse.PrivateLinkHubsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/DeletePrivateLinkHub.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/DeletePrivateLinkHub.json: %v", err)
	}
}

func TestPrivateLinkHubs_List(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ListPrivateLinkHubsInSubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List privateLinkHubs in subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewPrivateLinkHubsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ListPrivateLinkHubsInSubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsynapse.PrivateLinkHubInfoListResult{
			Value: []*armsynapse.PrivateLinkHub{
				{
					Name:     to.Ptr("privateLinkHub1"),
					Type:     to.Ptr("Microsoft.Synapse/privateLinkHubs"),
					ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/resourceGroup1/providers/Microsoft.Synapse/privateLinkHubs/privateLinkHub1"),
					Location: to.Ptr("East US"),
					Tags: map[string]*string{
						"key": to.Ptr("value"),
					},
					Properties: &armsynapse.PrivateLinkHubProperties{
						ProvisioningState: to.Ptr("Succeeded"),
					},
				},
				{
					Name:     to.Ptr("privateLinkHub2"),
					Type:     to.Ptr("Microsoft.Synapse/privateLinkHubs"),
					ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/resourceGroup1/providers/Microsoft.Synapse/privateLinkHubs/privateLinkHub2"),
					Location: to.Ptr("East US"),
					Tags: map[string]*string{
						"key": to.Ptr("value"),
					},
					Properties: &armsynapse.PrivateLinkHubProperties{
						ProvisioningState: to.Ptr("Succeeded"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PrivateLinkHubInfoListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PrivateLinkHubInfoListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ListPrivateLinkHubsInSubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnectionsPrivateLinkHub_List(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/PrivateEndpointConnectionsPrivateLinkHub_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a privateLinkHub"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewPrivateEndpointConnectionsPrivateLinkHubClient("48b08652-d7a1-4d52-b13f-5a2471dce57b", cred, &options)
	pager := client.List("gh-res-grp",
		"pe0",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/PrivateEndpointConnectionsPrivateLinkHub_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsynapse.PrivateEndpointConnectionForPrivateLinkHubResourceCollectionResponse{
			Value: []*armsynapse.PrivateEndpointConnectionForPrivateLinkHub{
				{
					ID: to.Ptr("/subscriptions/48b08652-d7a1-4d52-b13f-5a2471dce57b/resourceGroups/gh-res-grp/providers/Microsoft.Synapse/privateLinkHubs/plh900/privateEndpointConnections/pe0-f3ed30f5-338c-4855-a542-24a403694ad2"),
					Properties: &armsynapse.PrivateEndpointConnectionProperties{
						PrivateEndpoint: &armsynapse.PrivateEndpoint{
							ID: to.Ptr("/subscriptions/48b08652-d7a1-4d52-b13f-5a2471dce57b/resourceGroups/gh-res-grp/providers/Microsoft.Network/privateEndpoints/pe0"),
						},
						PrivateLinkServiceConnectionState: &armsynapse.PrivateLinkServiceConnectionState{
							Status: to.Ptr("Approved"),
						},
						ProvisioningState: to.Ptr("Succeeded"),
					},
					Name: to.Ptr("pe0-f3ed30f5-338c-4855-a542-24a403694ad2"),
					Type: to.Ptr("Microsoft.Synapse/privateLinkHubs/privateEndpointConnections"),
				},
				{
					ID: to.Ptr("/subscriptions/48b08652-d7a1-4d52-b13f-5a2471dce57b/resourceGroups/gh-res-grp/providers/Microsoft.Synapse/privateLinkHubs/plh900/privateEndpointConnections/pe-xbox-3e425dc3-edd9-434c-9bca-3ac6cecbc7e4"),
					Properties: &armsynapse.PrivateEndpointConnectionProperties{
						PrivateEndpoint: &armsynapse.PrivateEndpoint{
							ID: to.Ptr("/subscriptions/48b08652-d7a1-4d52-b13f-5a2471dce57b/resourceGroups/gh-res-grp/providers/Microsoft.Network/privateEndpoints/pe-xbox"),
						},
						PrivateLinkServiceConnectionState: &armsynapse.PrivateLinkServiceConnectionState{
							Status: to.Ptr("Approved"),
						},
						ProvisioningState: to.Ptr("Succeeded"),
					},
					Name: to.Ptr("pe-xbox-3e425dc3-edd9-434c-9bca-3ac6cecbc7e4"),
					Type: to.Ptr("Microsoft.Synapse/privateLinkHubs/privateEndpointConnections"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PrivateEndpointConnectionForPrivateLinkHubResourceCollectionResponse) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PrivateEndpointConnectionForPrivateLinkHubResourceCollectionResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/PrivateEndpointConnectionsPrivateLinkHub_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnectionsPrivateLinkHub_Get(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/PrivateEndpointConnectionsPrivateLinkHub_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a privateLinkHub"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewPrivateEndpointConnectionsPrivateLinkHubClient("48b08652-d7a1-4d52-b13f-5a2471dce57b", cred, &options)
	res, err := client.Get(ctx,
		"gh-res-grp",
		"pe0",
		"pe0-f3ed30f5-338c-4855-a542-24a403694ad2",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/PrivateEndpointConnectionsPrivateLinkHub_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.PrivateEndpointConnectionForPrivateLinkHub{
			ID: to.Ptr("/subscriptions/48b08652-d7a1-4d52-b13f-5a2471dce57b/resourceGroups/gh-res-grp/providers/Microsoft.Synapse/privateLinkHubs/plh900/privateEndpointConnections/pe0-f3ed30f5-338c-4855-a542-24a403694ad2"),
			Properties: &armsynapse.PrivateEndpointConnectionProperties{
				PrivateEndpoint: &armsynapse.PrivateEndpoint{
					ID: to.Ptr("/subscriptions/48b08652-d7a1-4d52-b13f-5a2471dce57b/resourceGroups/gh-res-grp/providers/Microsoft.Network/privateEndpoints/pe0"),
				},
				PrivateLinkServiceConnectionState: &armsynapse.PrivateLinkServiceConnectionState{
					Status: to.Ptr("Approved"),
				},
				ProvisioningState: to.Ptr("Succeeded"),
			},
			Name: to.Ptr("pe0-f3ed30f5-338c-4855-a542-24a403694ad2"),
			Type: to.Ptr("Microsoft.Synapse/privateLinkHubs/privateEndpointConnections"),
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnectionForPrivateLinkHub) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateEndpointConnectionForPrivateLinkHub)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/PrivateEndpointConnectionsPrivateLinkHub_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSQLPools_Get(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetSqlPool.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a SQL Analytics pool"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewSQLPoolsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"sqlcrudtest-6852",
		"sqlcrudtest-2080",
		"sqlcrudtest-9187",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetSqlPool.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.SQLPool{
			Name:     to.Ptr("sqlcrudtest-9187"),
			Type:     to.Ptr("Microsoft.Synapse/workspaces/sqlPools"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-6852/providers/Microsoft.Synapse/workspaces/sqlcrudtest-2080/sqlPools/sqlcrudtest-9187"),
			Location: to.Ptr("Japan East"),
			Tags: map[string]*string{
				"tagKey1": to.Ptr("TagValue1"),
			},
			Properties: &armsynapse.SQLPoolResourceProperties{
				Collation:          to.Ptr("SQL_Latin1_General_CP1_CI_AS"),
				CreationDate:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-10T00:56:19.2Z"); return t }()),
				MaxSizeBytes:       to.Ptr[int64](268435456000),
				ProvisioningState:  to.Ptr("Succeeded"),
				RestorePointInTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "0001-01-01T00:00:00Z"); return t }()),
				Status:             to.Ptr("Online"),
				StorageAccountType: to.Ptr(armsynapse.StorageAccountTypeGRS),
			},
			SKU: &armsynapse.SKU{
				Name: to.Ptr("DW100c"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SQLPool) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SQLPool)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetSqlPool.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSQLPools_Update(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/UpdateSqlPool.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a SQL Analytics pool"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewSQLPoolsClient("01234567-89ab-4def-0123-456789abcdef", cred, &options)
	res, err := client.Update(ctx,
		"ExampleResourceGroup",
		"ExampleWorkspace",
		"ExampleSqlPool",
		armsynapse.SQLPoolPatchInfo{
			Location: to.Ptr("West US 2"),
			Properties: &armsynapse.SQLPoolResourceProperties{
				Collation:          to.Ptr(""),
				MaxSizeBytes:       to.Ptr[int64](0),
				RestorePointInTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "1970-01-01T00:00:00.000Z"); return t }()),
			},
			SKU: &armsynapse.SKU{
				Name: to.Ptr(""),
				Tier: to.Ptr(""),
			},
			Tags: map[string]*string{},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/UpdateSqlPool.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.SQLPool{
			Name:     to.Ptr("ExampleSqlPool"),
			Type:     to.Ptr("Microsoft.Synapse/workspaces/sqlPools"),
			ID:       to.Ptr("/subscriptions/01234567-89ab-4def-0123-456789abcdef/resourceGroups/ExampleResourceGroup/providers/Microsoft.Synapse/workspaces/ExampleWorkspaces/sqlPools/ExampleSqlPool"),
			Location: to.Ptr("West US 2"),
			Tags:     map[string]*string{},
			Properties: &armsynapse.SQLPoolResourceProperties{
				Collation:             to.Ptr(""),
				CreationDate:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "1970-01-01T00:00:00.000Z"); return t }()),
				MaxSizeBytes:          to.Ptr[int64](0),
				ProvisioningState:     to.Ptr("Succeeded"),
				RecoverableDatabaseID: to.Ptr(""),
				RestorePointInTime:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "1970-01-01T00:00:00.000Z"); return t }()),
				Status:                to.Ptr("Paused"),
				StorageAccountType:    to.Ptr(armsynapse.StorageAccountTypeGRS),
			},
			SKU: &armsynapse.SKU{
				Name: to.Ptr(""),
				Tier: to.Ptr(""),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SQLPool) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SQLPool)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/UpdateSqlPool.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSQLPools_Create(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/CreateSqlPool.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a SQL Analytics pool"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewSQLPoolsClient("01234567-89ab-4def-0123-456789abcdef", cred, &options)
	poller, err := client.BeginCreate(ctx,
		"ExampleResourceGroup",
		"ExampleWorkspace",
		"ExampleSqlPool",
		armsynapse.SQLPool{
			Location: to.Ptr("Southeast Asia"),
			Tags:     map[string]*string{},
			Properties: &armsynapse.SQLPoolResourceProperties{
				Collation:             to.Ptr(""),
				CreateMode:            to.Ptr(armsynapse.CreateMode("")),
				MaxSizeBytes:          to.Ptr[int64](0),
				RecoverableDatabaseID: to.Ptr(""),
				SourceDatabaseID:      to.Ptr(""),
				StorageAccountType:    to.Ptr(armsynapse.StorageAccountTypeLRS),
			},
			SKU: &armsynapse.SKU{
				Name: to.Ptr(""),
				Tier: to.Ptr(""),
			},
		},
		&armsynapse.SQLPoolsClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/CreateSqlPool.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/CreateSqlPool.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.SQLPool{
			Name:     to.Ptr("ExampleSqlPool"),
			Type:     to.Ptr("Microsoft.Synapse/workspaces/sqlPools"),
			ID:       to.Ptr("/subscriptions/01234567-89ab-4def-0123-456789abcdef/resourceGroups/ExampleResourceGroup/providers/Microsoft.Synapse/workspaces/ExampleWorkspaces/sqlPools/ExampleSqlPool"),
			Location: to.Ptr("Southeast Asia"),
			Tags:     map[string]*string{},
			Properties: &armsynapse.SQLPoolResourceProperties{
				Collation:             to.Ptr(""),
				CreationDate:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "1970-01-01T00:00:00.000Z"); return t }()),
				MaxSizeBytes:          to.Ptr[int64](0),
				ProvisioningState:     to.Ptr("Succeeded"),
				RecoverableDatabaseID: to.Ptr(""),
				RestorePointInTime:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "1970-01-01T00:00:00.000Z"); return t }()),
				Status:                to.Ptr("Paused"),
				StorageAccountType:    to.Ptr(armsynapse.StorageAccountTypeLRS),
			},
			SKU: &armsynapse.SKU{
				Name: to.Ptr(""),
				Tier: to.Ptr(""),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SQLPool) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SQLPool)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/CreateSqlPool.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSQLPools_Delete(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/DeleteSqlPool.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a SQL Analytics pool"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewSQLPoolsClient("01234567-89ab-4def-0123-456789abcdef", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"ExampleResourceGroup",
		"ExampleWorkspace",
		"ExampleSqlPool",
		&armsynapse.SQLPoolsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/DeleteSqlPool.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/DeleteSqlPool.json: %v", err)
	}
	// Response check
	{
		exampleRes := map[string]interface{}{
			"name":     "ExampleSqlPool",
			"type":     "Microsoft.Synapse/workspaces/sqlPools",
			"id":       "/subscriptions/01234567-89ab-4def-0123-456789abcdef/resourceGroups/ExampleResourceGroup/providers/Microsoft.Synapse/workspaces/ExampleWorkspace/sqlPools/ExampleSqlPool",
			"location": "West US 2",
			"properties": map[string]interface{}{
				"provisioningState": "Deleting",
				"status":            "Paused",
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Interface) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Interface)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/DeleteSqlPool.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSQLPools_ListByWorkspace(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ListSqlPoolsInWorkspace.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List SQL Analytics pools in a workspace"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewSQLPoolsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByWorkspace("sqlcrudtest-6845",
		"sqlcrudtest-7177",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ListSqlPoolsInWorkspace.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsynapse.SQLPoolInfoListResult{
			Value: []*armsynapse.SQLPool{
				{
					Name:     to.Ptr("master"),
					Type:     to.Ptr("Microsoft.Synapse/workspaces/sqlPools"),
					ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-6845/providers/Microsoft.Synapse/workspaces/sqlcrudtest-7177/sqlPools/master"),
					Location: to.Ptr("Japan East"),
					Properties: &armsynapse.SQLPoolResourceProperties{
						Collation:          to.Ptr("SQL_Latin1_General_CP1_CI_AS"),
						CreationDate:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-10T00:59:33.483Z"); return t }()),
						MaxSizeBytes:       to.Ptr[int64](32212254720),
						ProvisioningState:  to.Ptr("Succeeded"),
						RestorePointInTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "0001-01-01T00:00:00Z"); return t }()),
						Status:             to.Ptr("Online"),
						StorageAccountType: to.Ptr(armsynapse.StorageAccountTypeGRS),
					},
					SKU: &armsynapse.SKU{
						Name: to.Ptr("GP_Gen5_2"),
					},
				},
				{
					Name:     to.Ptr("sqlcrudtest-1142"),
					Type:     to.Ptr("Microsoft.Synapse/workspaces/sqlPools"),
					ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-6845/providers/Microsoft.Synapse/workspaces/sqlcrudtest-7177/sqlPools/sqlcrudtest-1142"),
					Location: to.Ptr("Japan East"),
					Properties: &armsynapse.SQLPoolResourceProperties{
						Collation:          to.Ptr("SQL_Latin1_General_CP1_CI_AS"),
						CreationDate:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-10T01:03:34.04Z"); return t }()),
						MaxSizeBytes:       to.Ptr[int64](268435456000),
						ProvisioningState:  to.Ptr("Succeeded"),
						RestorePointInTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "0001-01-01T00:00:00Z"); return t }()),
						Status:             to.Ptr("Online"),
						StorageAccountType: to.Ptr(armsynapse.StorageAccountTypeGRS),
					},
					SKU: &armsynapse.SKU{
						Name: to.Ptr("DW100c"),
					},
				},
				{
					Name:     to.Ptr("sqlcrudtest-2788"),
					Type:     to.Ptr("Microsoft.Synapse/workspaces/sqlPools"),
					ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-6845/providers/Microsoft.Synapse/workspaces/sqlcrudtest-7177/sqlPools/sqlcrudtest-2788"),
					Location: to.Ptr("Japan East"),
					Properties: &armsynapse.SQLPoolResourceProperties{
						Collation:          to.Ptr("SQL_Latin1_General_CP1_CI_AS"),
						CreationDate:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-10T01:00:21.067Z"); return t }()),
						MaxSizeBytes:       to.Ptr[int64](268435456000),
						ProvisioningState:  to.Ptr("Succeeded"),
						RestorePointInTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "0001-01-01T00:00:00Z"); return t }()),
						Status:             to.Ptr("Online"),
						StorageAccountType: to.Ptr(armsynapse.StorageAccountTypeGRS),
					},
					SKU: &armsynapse.SKU{
						Name: to.Ptr("DW100c"),
					},
				},
				{
					Name:     to.Ptr("sqlcrudtest-6877"),
					Type:     to.Ptr("Microsoft.Synapse/workspaces/sqlPools"),
					ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-6845/providers/Microsoft.Synapse/workspaces/sqlcrudtest-7177/sqlPools/sqlcrudtest-6877"),
					Location: to.Ptr("Southeast Asia"),
					Properties: &armsynapse.SQLPoolResourceProperties{
						Collation:          to.Ptr("SQL_Latin1_General_CP1_CI_AS"),
						CreationDate:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-10T01:02:28.853Z"); return t }()),
						MaxSizeBytes:       to.Ptr[int64](268435456000),
						ProvisioningState:  to.Ptr("Succeeded"),
						RestorePointInTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "0001-01-01T00:00:00Z"); return t }()),
						Status:             to.Ptr("Online"),
						StorageAccountType: to.Ptr(armsynapse.StorageAccountTypeLRS),
					},
					SKU: &armsynapse.SKU{
						Name: to.Ptr("DW100c"),
					},
				},
				{
					Name:     to.Ptr("sqlcrudtest-9888"),
					Type:     to.Ptr("Microsoft.Synapse/workspaces/sqlPools"),
					ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-6845/providers/Microsoft.Synapse/workspaces/sqlcrudtest-7177/sqlPools/sqlcrudtest-9888"),
					Location: to.Ptr("Japan East"),
					Properties: &armsynapse.SQLPoolResourceProperties{
						Collation:          to.Ptr("SQL_Latin1_General_CP1_CI_AS"),
						CreationDate:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-10T01:01:25.347Z"); return t }()),
						MaxSizeBytes:       to.Ptr[int64](268435456000),
						ProvisioningState:  to.Ptr("Succeeded"),
						RestorePointInTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "0001-01-01T00:00:00Z"); return t }()),
						Status:             to.Ptr("Online"),
						StorageAccountType: to.Ptr(armsynapse.StorageAccountTypeGRS),
					},
					SKU: &armsynapse.SKU{
						Name: to.Ptr("DW100c"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SQLPoolInfoListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SQLPoolInfoListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ListSqlPoolsInWorkspace.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ListSqlPoolsInWorkspaceWithFilter.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List SQL Analytics pools in a workspace with filter"},
	})
	client = armsynapse.NewSQLPoolsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager = client.ListByWorkspace("sqlcrudtest-6845",
		"sqlcrudtest-7177",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ListSqlPoolsInWorkspaceWithFilter.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsynapse.SQLPoolInfoListResult{
			Value: []*armsynapse.SQLPool{
				{
					Name:     to.Ptr("master"),
					Type:     to.Ptr("Microsoft.Synapse/workspaces/sqlPools"),
					ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-6845/providers/Microsoft.Synapse/workspaces/sqlcrudtest-7177/sqlPools/master"),
					Location: to.Ptr("Japan East"),
					Properties: &armsynapse.SQLPoolResourceProperties{
						Collation:          to.Ptr("SQL_Latin1_General_CP1_CI_AS"),
						CreationDate:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-10T00:59:33.483Z"); return t }()),
						MaxSizeBytes:       to.Ptr[int64](32212254720),
						ProvisioningState:  to.Ptr("Succeeded"),
						RestorePointInTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "0001-01-01T00:00:00Z"); return t }()),
						Status:             to.Ptr("Online"),
						StorageAccountType: to.Ptr(armsynapse.StorageAccountTypeGRS),
					},
					SKU: &armsynapse.SKU{
						Name: to.Ptr("GP_Gen5_2"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SQLPoolInfoListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SQLPoolInfoListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ListSqlPoolsInWorkspaceWithFilter.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSQLPools_Pause(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/PauseSqlPool.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Pause a SQL Analytics pool"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewSQLPoolsClient("01234567-89ab-4def-0123-456789abcdef", cred, &options)
	poller, err := client.BeginPause(ctx,
		"Default-SQL-SouthEastAsia",
		"testsvr",
		"testdwdb",
		&armsynapse.SQLPoolsClientBeginPauseOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/PauseSqlPool.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/PauseSqlPool.json: %v", err)
	}
	// Response check
	{
		exampleRes := map[string]interface{}{
			"name":     "testdwdb",
			"type":     "Microsoft.Synapse/workspaces/sqlPools",
			"id":       "/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Synapse/workspaces/testsvr/sqlPools/testdwdb",
			"location": "Japan East",
			"properties": map[string]interface{}{
				"collation":          "SQL_Latin1_General_CP1_CI_AS",
				"creationDate":       "2017-02-10T00:56:19.2Z",
				"maxSizeBytes":       float64(268435456000),
				"provisioningState":  "Succeeded",
				"restorePointInTime": "0001-01-01T00:00:00Z",
				"status":             "Online",
			},
			"sku": map[string]interface{}{
				"name": "DW100c",
			},
			"tags": map[string]interface{}{
				"tagKey1": "TagValue1",
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Interface) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Interface)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/PauseSqlPool.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSQLPools_Resume(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ResumeSqlPool.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Resume a SQL Analytics pool"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewSQLPoolsClient("01234567-89ab-4def-0123-456789abcdef", cred, &options)
	poller, err := client.BeginResume(ctx,
		"sqlcrudtest-6852",
		"sqlcrudtest-2080",
		"sqlcrudtest-9187",
		&armsynapse.SQLPoolsClientBeginResumeOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ResumeSqlPool.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ResumeSqlPool.json: %v", err)
	}
	// Response check
	{
		exampleRes := map[string]interface{}{
			"name":     "sqlcrudtest-9187",
			"type":     "Microsoft.Synapse/workspaces/sqlPools",
			"id":       "/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-6852/providers/Microsoft.Synapse/workspaces/sqlcrudtest-2080/sqlPools/sqlcrudtest-9187",
			"location": "Japan East",
			"properties": map[string]interface{}{
				"collation":          "SQL_Latin1_General_CP1_CI_AS",
				"creationDate":       "2017-02-10T00:56:19.2Z",
				"maxSizeBytes":       float64(268435456000),
				"provisioningState":  "Succeeded",
				"restorePointInTime": "0001-01-01T00:00:00Z",
				"status":             "Online",
			},
			"sku": map[string]interface{}{
				"name": "DW100c",
			},
			"tags": map[string]interface{}{
				"tagKey1": "TagValue1",
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Interface) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Interface)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ResumeSqlPool.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSQLPools_Rename(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/RenameSqlPool.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Rename a SQL Analytics pool"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewSQLPoolsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	_, err := client.Rename(ctx,
		"Default-SQL-SouthEastAsia",
		"testsvr",
		"testdb",
		armsynapse.ResourceMoveDefinition{
			ID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Synapse/workspaces/testsvr/sqlPools/newtestdb"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/RenameSqlPool.json: %v", err)
	}
}

func TestSQLPoolMetadataSyncConfigs_Get(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetSqlPoolMetadataSyncConfig.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get metadata sync config for a SQL Analytics pool"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewSQLPoolMetadataSyncConfigsClient("01234567-89ab-4def-0123-456789abcdef", cred, &options)
	res, err := client.Get(ctx,
		"ExampleResourceGroup",
		"ExampleWorkspace",
		"ExampleSqlPool",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetSqlPoolMetadataSyncConfig.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.MetadataSyncConfig{
			Name: to.Ptr("config"),
			Type: to.Ptr("Microsoft.Synapse/workspaces/bigDataPools/metadataSync/config"),
			ID:   to.Ptr("/subscriptions/01234567-89ab-4def-0123-456789abcdef/resourceGroups/ExampleResourceGroup/providers/Microsoft.Synapse/workspaces/ExampleWorkspace/bigDataPools/ExamplePool/metadataSync/config"),
			Properties: &armsynapse.MetadataSyncConfigProperties{
				Enabled: to.Ptr(true),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.MetadataSyncConfig) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.MetadataSyncConfig)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetSqlPoolMetadataSyncConfig.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSQLPoolMetadataSyncConfigs_Create(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/CreateSqlPoolMetadataSyncConfig.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Set metadata sync config for a SQL Analytics pool"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewSQLPoolMetadataSyncConfigsClient("01234567-89ab-4def-0123-456789abcdef", cred, &options)
	res, err := client.Create(ctx,
		"ExampleResourceGroup",
		"ExampleWorkspace",
		"ExampleSqlPool",
		armsynapse.MetadataSyncConfig{
			Properties: &armsynapse.MetadataSyncConfigProperties{
				Enabled: to.Ptr(true),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/CreateSqlPoolMetadataSyncConfig.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.MetadataSyncConfig{
			Name: to.Ptr("config"),
			Type: to.Ptr("Microsoft.Synapse/workspaces/bigDataPools/metadataSync/config"),
			ID:   to.Ptr("/subscriptions/01234567-89ab-4def-0123-456789abcdef/resourceGroups/ExampleResourceGroup/providers/Microsoft.Synapse/workspaces/ExampleWorkspace/bigDataPools/ExamplePool/metadataSync/config"),
			Properties: &armsynapse.MetadataSyncConfigProperties{
				Enabled: to.Ptr(true),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.MetadataSyncConfig) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.MetadataSyncConfig)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/CreateSqlPoolMetadataSyncConfig.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSQLPoolOperationResults_GetLocationHeaderResult(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetLocationHeaderResultWithSqlPool.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get the result of an operation on a SQL Analytics pool"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewSQLPoolOperationResultsClient("01234567-89ab-4def-0123-456789abcdef", cred, &options)
	res, err := client.GetLocationHeaderResult(ctx,
		"ExampleResourceGroup",
		"ExampleWorkspace",
		"ExampleSqlPool",
		"fedcba98-7654-4210-fedc-ba9876543210",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetLocationHeaderResultWithSqlPool.json: %v", err)
	}
	// Response check
	{
		exampleRes := map[string]interface{}{}
		if !reflect.DeepEqual(exampleRes, res.Interface) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Interface)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetLocationHeaderResultWithSqlPool.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSQLPoolGeoBackupPolicies_List(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/SqlPoolGeoBackupPolicies_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Sql pool geo backup policy"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewSQLPoolGeoBackupPoliciesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.List("sqlcrudtest-4799",
		"sqlcrudtest-5961",
		"testdw",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/SqlPoolGeoBackupPolicies_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsynapse.GeoBackupPolicyListResult{
			Value: []*armsynapse.GeoBackupPolicy{
				{
					Name:     to.Ptr("Default"),
					Type:     to.Ptr("Microsoft.Synapse/workspaces/sqlPools/geoBackupPolicies"),
					ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-4799/providers/Microsoft.Synapse/workspaces/sqlcrudtest-5961/sqlPools/testdw/geoBackupPolicies/Default"),
					Location: to.Ptr("Central US"),
					Properties: &armsynapse.GeoBackupPolicyProperties{
						State:       to.Ptr(armsynapse.GeoBackupPolicyStateEnabled),
						StorageType: to.Ptr("Premium"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.GeoBackupPolicyListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.GeoBackupPolicyListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/SqlPoolGeoBackupPolicies_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSQLPoolGeoBackupPolicies_CreateOrUpdate(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/CreateOrUpdateGeoBackupPolicies.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create geo backup policy"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewSQLPoolGeoBackupPoliciesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"testrg",
		"testws",
		"testdw",
		armsynapse.GeoBackupPolicyNameDefault,
		armsynapse.GeoBackupPolicy{
			Properties: &armsynapse.GeoBackupPolicyProperties{
				State: to.Ptr(armsynapse.GeoBackupPolicyStateEnabled),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/CreateOrUpdateGeoBackupPolicies.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.GeoBackupPolicy{
			Name: to.Ptr("Default"),
			Type: to.Ptr("Microsoft.Synapse/workspaces/sqlpools/geoBackupPolicies"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/testrg/providers/Microsoft.Synapse/workspaces/testws/databases/testdw/geoBackupPolicies/Default"),
			Properties: &armsynapse.GeoBackupPolicyProperties{
				State: to.Ptr(armsynapse.GeoBackupPolicyStateEnabled),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.GeoBackupPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.GeoBackupPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/CreateOrUpdateGeoBackupPolicies.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSQLPoolGeoBackupPolicies_Get(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetSqlPoolGeoBackupPolicy.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Sql pool geo backup policy"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewSQLPoolGeoBackupPoliciesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"sqlcrudtest-4799",
		"sqlcrudtest-5961",
		"testdw",
		armsynapse.GeoBackupPolicyNameDefault,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetSqlPoolGeoBackupPolicy.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.GeoBackupPolicy{
			Name:     to.Ptr("Default"),
			Type:     to.Ptr("Microsoft.Synapse/workspaces/sqlPools/geoBackupPolicies"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-4799/providers/Microsoft.Synapse/workspaces/sqlcrudtest-5961/sqlPools/testdw/geoBackupPolicies/Default"),
			Location: to.Ptr("Central US"),
			Properties: &armsynapse.GeoBackupPolicyProperties{
				State:       to.Ptr(armsynapse.GeoBackupPolicyStateEnabled),
				StorageType: to.Ptr("Premium"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.GeoBackupPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.GeoBackupPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetSqlPoolGeoBackupPolicy.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSQLPoolDataWarehouseUserActivities_Get(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetSqlPoolUserActivity.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a SQL Analytics pool user activity"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewSQLPoolDataWarehouseUserActivitiesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"Default-SQL-SouthEastAsia",
		"testsvr",
		"testdb",
		armsynapse.DataWarehouseUserActivityNameCurrent,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetSqlPoolUserActivity.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.DataWarehouseUserActivities{
			Name: to.Ptr("current"),
			Type: to.Ptr("Microsoft.Synapse/workspaces/sqlPools/dataWarehouseUserActivities"),
			ID:   to.Ptr("subscriptions/326affc3-21f4-4471-a545-e37430b70113/resourceGroups/Default-SQL-Onebox/providers/Microsoft.Synapse/workspaces/testsvr/sqlPools/dwdb01/dataWarehouseUserActivities/current"),
			Properties: &armsynapse.DataWarehouseUserActivitiesProperties{
				ActiveQueriesCount: to.Ptr[int32](0),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DataWarehouseUserActivities) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DataWarehouseUserActivities)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetSqlPoolUserActivity.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSQLPoolRestorePoints_List(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ListSqlPoolRestorePoints.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a list of restore points of a SQL Analytics pool"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewSQLPoolRestorePointsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.List("Default-SQL-SouthEastAsia",
		"testserver",
		"testDatabase",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ListSqlPoolRestorePoints.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsynapse.RestorePointListResult{
			Value: []*armsynapse.RestorePoint{
				{
					Name:     to.Ptr("131546477590000000"),
					Type:     to.Ptr("Microsoft.Synapse/workspaces/sqlPools/restorePoints"),
					ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/providers/Microsoft.Synapse/workspaces/testserver/sqlPools/testDatabase/restorePoints/131546477590000000"),
					Location: to.Ptr("japaneast"),
					Properties: &armsynapse.RestorePointProperties{
						RestorePointCreationDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-10T08:00:00.000Z"); return t }()),
						RestorePointLabel:        to.Ptr("mylabel1"),
						RestorePointType:         to.Ptr(armsynapse.RestorePointTypeDISCRETE),
					},
				},
				{
					Name:     to.Ptr("131553636140000000"),
					Type:     to.Ptr("Microsoft.Synapse/workspaces/sqlPools/restorePoints"),
					ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/providers/Microsoft.Synapse/workspaces/testserver/sqlPools/testDatabase/restorePoints/131553636140000000"),
					Location: to.Ptr("japaneast"),
					Properties: &armsynapse.RestorePointProperties{
						RestorePointCreationDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-17T03:40:14Z"); return t }()),
						RestorePointLabel:        to.Ptr("mylabel2"),
						RestorePointType:         to.Ptr(armsynapse.RestorePointTypeDISCRETE),
					},
				},
				{
					Name:     to.Ptr("131553619750000000"),
					Type:     to.Ptr("Microsoft.Synapse/workspaces/sqlPools/restorePoints"),
					ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/providers/Microsoft.Synapse/workspaces/testserver/sqlPools/testDatabase/restorePoints/131553619750000000"),
					Location: to.Ptr("japaneast"),
					Properties: &armsynapse.RestorePointProperties{
						RestorePointCreationDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-17T03:12:55Z"); return t }()),
						RestorePointType:         to.Ptr(armsynapse.RestorePointTypeDISCRETE),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.RestorePointListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.RestorePointListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ListSqlPoolRestorePoints.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSQLPoolRestorePoints_Create(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/CreateSqlPoolRestorePoints.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Creates Sql pool restore point."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewSQLPoolRestorePointsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginCreate(ctx,
		"Default-SQL-SouthEastAsia",
		"testserver",
		"testDatabase",
		armsynapse.CreateSQLPoolRestorePointDefinition{
			RestorePointLabel: to.Ptr("mylabel"),
		},
		&armsynapse.SQLPoolRestorePointsClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/CreateSqlPoolRestorePoints.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/CreateSqlPoolRestorePoints.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.RestorePoint{
			Name:     to.Ptr("131546477590000000"),
			Type:     to.Ptr("Microsoft.Synapse/workspaces/sqlPools/restorePoints"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/providers/Microsoft.Synapse/workspaces/testserver/sqlPools/testDatabase/restorePoints/131546477590000000"),
			Location: to.Ptr("japaneast"),
			Properties: &armsynapse.RestorePointProperties{
				RestorePointCreationDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-10T08:00:00.000Z"); return t }()),
				RestorePointLabel:        to.Ptr("mylabel"),
				RestorePointType:         to.Ptr(armsynapse.RestorePointTypeDISCRETE),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RestorePoint) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RestorePoint)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/CreateSqlPoolRestorePoints.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSQLPoolRestorePoints_Get(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/SqlPoolRestorePointsGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets a Sql pool restore point."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewSQLPoolRestorePointsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"Default-SQL-SouthEastAsia",
		"testws",
		"testpool",
		"131546477590000000",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/SqlPoolRestorePointsGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.RestorePoint{
			Name:     to.Ptr("131546477590000000"),
			Type:     to.Ptr("Microsoft.Synapse/workspaces/sqlPools/restorePoints"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/providers/Microsoft.Synapse/workspaces/testws/sqlPools/testpool/restorePoints/131546477590000000"),
			Location: to.Ptr("japaneast"),
			Properties: &armsynapse.RestorePointProperties{
				RestorePointCreationDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-10T08:00:00.000Z"); return t }()),
				RestorePointLabel:        to.Ptr("mylabel"),
				RestorePointType:         to.Ptr(armsynapse.RestorePointTypeDISCRETE),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RestorePoint) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RestorePoint)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/SqlPoolRestorePointsGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSQLPoolRestorePoints_Delete(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/SqlPoolRestorePointsDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Deletes a restore point."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewSQLPoolRestorePointsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	_, err := client.Delete(ctx,
		"Default-SQL-SouthEastAsia",
		"testws",
		"testpool",
		"131546477590000000",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/SqlPoolRestorePointsDelete.json: %v", err)
	}
}

func TestSQLPoolReplicationLinks_List(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ListSqlPoolReplicationLinks.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Lists a Sql Analytic pool's replication links"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewSQLPoolReplicationLinksClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.List("sqlcrudtest-4799",
		"sqlcrudtest-6440",
		"testdb",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ListSqlPoolReplicationLinks.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsynapse.ReplicationLinkListResult{
			Value: []*armsynapse.ReplicationLink{
				{
					Name:     to.Ptr("5b301b68-03f6-4b26-b0f4-73ebb8634238"),
					Type:     to.Ptr("Microsoft.Synapse/workspaces/sqlPools/replicationLinks"),
					ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-4799/providers/Microsoft.Synapse/workspaces/sqlcrudtest-6440/sqlPools/testdb/replicationLinks/5b301b68-03f6-4b26-b0f4-73ebb8634238"),
					Location: to.Ptr("Japan East"),
					Properties: &armsynapse.ReplicationLinkProperties{
						IsTerminationAllowed: to.Ptr(true),
						PartnerDatabase:      to.Ptr("testdb"),
						PartnerLocation:      to.Ptr("Japan East"),
						PartnerRole:          to.Ptr(armsynapse.ReplicationRolePrimary),
						PartnerServer:        to.Ptr("sqlcrudtest-5961"),
						PercentComplete:      to.Ptr[int32](100),
						ReplicationMode:      to.Ptr("ASYNC"),
						ReplicationState:     to.Ptr(armsynapse.ReplicationStateCATCHUP),
						Role:                 to.Ptr(armsynapse.ReplicationRoleSecondary),
						StartTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-10T01:44:27.117Z"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ReplicationLinkListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ReplicationLinkListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ListSqlPoolReplicationLinks.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSQLPoolReplicationLinks_GetByName(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/SqlPoolReplicationLinks_GetByName.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Lists a Sql Analytic pool's replication links"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewSQLPoolReplicationLinksClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.GetByName(ctx,
		"sqlcrudtest-4799",
		"sqlcrudtest-6440",
		"testdb",
		"5b301b68-03f6-4b26-b0f4-73ebb8634238",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/SqlPoolReplicationLinks_GetByName.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.ReplicationLink{
			Name:     to.Ptr("5b301b68-03f6-4b26-b0f4-73ebb8634238"),
			Type:     to.Ptr("Microsoft.Synapse/workspaces/sqlPools/replicationLinks"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-4799/providers/Microsoft.Synapse/workspaces/sqlcrudtest-6440/sqlPools/testdb/replicationLinks/5b301b68-03f6-4b26-b0f4-73ebb8634238"),
			Location: to.Ptr("Japan East"),
			Properties: &armsynapse.ReplicationLinkProperties{
				IsTerminationAllowed: to.Ptr(true),
				PartnerDatabase:      to.Ptr("testdb"),
				PartnerLocation:      to.Ptr("Japan East"),
				PartnerRole:          to.Ptr(armsynapse.ReplicationRolePrimary),
				PartnerServer:        to.Ptr("sqlcrudtest-5961"),
				PercentComplete:      to.Ptr[int32](100),
				ReplicationMode:      to.Ptr("ASYNC"),
				ReplicationState:     to.Ptr(armsynapse.ReplicationStateCATCHUP),
				Role:                 to.Ptr(armsynapse.ReplicationRoleSecondary),
				StartTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-10T01:44:27.117Z"); return t }()),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ReplicationLink) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ReplicationLink)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/SqlPoolReplicationLinks_GetByName.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSQLPoolMaintenanceWindows_Get(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetMaintenanceWindows.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets maintenance window settings for a selected SQL Analytics pool."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewSQLPoolMaintenanceWindowsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"samplerg",
		"testworkspace",
		"testsp",
		"current",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetMaintenanceWindows.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.MaintenanceWindows{
			Name: to.Ptr("current"),
			Type: to.Ptr("Microsoft.Synapse/workspaces/sqlPools/maintenancewindows"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/samplerg/providers/Microsoft.Synapse/workspaces/testworkspace/sqlPools/testsp/maintenancewindows/current"),
			Properties: &armsynapse.MaintenanceWindowsProperties{
				TimeRanges: []*armsynapse.MaintenanceWindowTimeRange{
					{
						DayOfWeek: to.Ptr(armsynapse.DayOfWeekSaturday),
						Duration:  to.Ptr("PT60M"),
						StartTime: to.Ptr("00:00:00"),
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.MaintenanceWindows) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.MaintenanceWindows)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetMaintenanceWindows.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSQLPoolMaintenanceWindows_CreateOrUpdate(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/CreateOrUpdateMaintenanceWindows.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Sets maintenance window settings for a selected SQL Analytics Pool."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewSQLPoolMaintenanceWindowsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	_, err := client.CreateOrUpdate(ctx,
		"samplerg",
		"testworkspace",
		"testsp",
		"current",
		armsynapse.MaintenanceWindows{
			Properties: &armsynapse.MaintenanceWindowsProperties{
				TimeRanges: []*armsynapse.MaintenanceWindowTimeRange{
					{
						DayOfWeek: to.Ptr(armsynapse.DayOfWeekSaturday),
						Duration:  to.Ptr("PT60M"),
						StartTime: to.Ptr("00:00:00"),
					}},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/CreateOrUpdateMaintenanceWindows.json: %v", err)
	}
}

func TestSQLPoolMaintenanceWindowOptions_Get(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetMaintenanceWindowOptions.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get list of transparent data encryption configurations of a SQL Analytics pool"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewSQLPoolMaintenanceWindowOptionsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"samplerg",
		"testworkspace",
		"testsp",
		"current",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetMaintenanceWindowOptions.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.MaintenanceWindowOptions{
			Name: to.Ptr("current"),
			Type: to.Ptr("Microsoft.Synapse/workspaces/sqlPools/maintenanceWindowOptions"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/samplerg/providers/Microsoft.Synapse/workspaces/testworkspace/sqlPools/testsp/maintenanceWindowOptions/current"),
			Properties: &armsynapse.MaintenanceWindowOptionsProperties{
				AllowMultipleMaintenanceWindowsPerCycle: to.Ptr(true),
				DefaultDurationInMinutes:                to.Ptr[int32](120),
				IsEnabled:                               to.Ptr(true),
				MaintenanceWindowCycles: []*armsynapse.MaintenanceWindowTimeRange{
					{
						DayOfWeek: to.Ptr(armsynapse.DayOfWeekSaturday),
						Duration:  to.Ptr("PT60M"),
						StartTime: to.Ptr("00:00:00"),
					}},
				MinCycles:                to.Ptr[int32](2),
				MinDurationInMinutes:     to.Ptr[int32](60),
				TimeGranularityInMinutes: to.Ptr[int32](5),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.MaintenanceWindowOptions) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.MaintenanceWindowOptions)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetMaintenanceWindowOptions.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSQLPoolTransparentDataEncryptions_Get(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetSqlPoolTransparentDataEncryption.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get transparent data encryption configuration of a SQL Analytics pool"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewSQLPoolTransparentDataEncryptionsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"sqlcrudtest-6852",
		"sqlcrudtest-2080",
		"sqlcrudtest-9187",
		armsynapse.TransparentDataEncryptionNameCurrent,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetSqlPoolTransparentDataEncryption.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.TransparentDataEncryption{
			Name:     to.Ptr("current"),
			Type:     to.Ptr("Microsoft.Synapse/workspaces/sqlPools/transparentDataEncryption"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-6852/providers/Microsoft.Synapse/workspaces/sqlcrudtest-2080/sqlPools/sqlcrudtest-9187/transparentDataEncryption/current"),
			Location: to.Ptr("North Europe"),
			Properties: &armsynapse.TransparentDataEncryptionProperties{
				Status: to.Ptr(armsynapse.TransparentDataEncryptionStatusEnabled),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.TransparentDataEncryption) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.TransparentDataEncryption)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetSqlPoolTransparentDataEncryption.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSQLPoolTransparentDataEncryptions_CreateOrUpdate(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/CreateOrUpdateSqlPoolTransparentDataEncryption.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a Sql pool's transparent data encryption configuration"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewSQLPoolTransparentDataEncryptionsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"sqlcrudtest-6852",
		"sqlcrudtest-2080",
		"sqlcrudtest-9187",
		armsynapse.TransparentDataEncryptionNameCurrent,
		armsynapse.TransparentDataEncryption{
			Properties: &armsynapse.TransparentDataEncryptionProperties{
				Status: to.Ptr(armsynapse.TransparentDataEncryptionStatusEnabled),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/CreateOrUpdateSqlPoolTransparentDataEncryption.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.TransparentDataEncryption{
			Name:     to.Ptr("current"),
			Type:     to.Ptr("Microsoft.Synapse/workspaces/sqlPools/transparentDataEncryption"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-6852/providers/Microsoft.Synapse/workspaces/sqlcrudtest-2080/sqlPools/sqlcrudtest-9187/transparentDataEncryption/current"),
			Location: to.Ptr("North Europe"),
			Properties: &armsynapse.TransparentDataEncryptionProperties{
				Status: to.Ptr(armsynapse.TransparentDataEncryptionStatusEnabled),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.TransparentDataEncryption) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.TransparentDataEncryption)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/CreateOrUpdateSqlPoolTransparentDataEncryption.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSQLPoolTransparentDataEncryptions_List(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetSqlPoolTransparentDataEncryptionList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get list of transparent data encryption configurations of a SQL Analytics pool"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewSQLPoolTransparentDataEncryptionsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.List("sqlcrudtest-6852",
		"sqlcrudtest-2080",
		"sqlcrudtest-9187",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetSqlPoolTransparentDataEncryptionList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsynapse.TransparentDataEncryptionListResult{
			Value: []*armsynapse.TransparentDataEncryption{
				{
					Name:     to.Ptr("current"),
					Type:     to.Ptr("Microsoft.Synapse/workspaces/sqlPools/transparentDataEncryption"),
					ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-6852/providers/Microsoft.Synapse/workspaces/sqlcrudtest-2080/sqlPools/sqlcrudtest-9187/transparentDataEncryption/current"),
					Location: to.Ptr("North Europe"),
					Properties: &armsynapse.TransparentDataEncryptionProperties{
						Status: to.Ptr(armsynapse.TransparentDataEncryptionStatusEnabled),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.TransparentDataEncryptionListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.TransparentDataEncryptionListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetSqlPoolTransparentDataEncryptionList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSQLPoolBlobAuditingPolicies_Get(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetSqlPoolBlobAuditing.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get blob auditing policy of a SQL Analytics pool"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewSQLPoolBlobAuditingPoliciesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"blobauditingtest-6852",
		"blobauditingtest-2080",
		"testdb",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetSqlPoolBlobAuditing.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.SQLPoolBlobAuditingPolicy{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Synapse/workspaces/sqlPools/auditingSettings"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/blobauditingtest-6852/providers/Microsoft.Synapse/workspaces/blobauditingtest-2080/sqlPools/testdb"),
			Kind: to.Ptr("V12"),
			Properties: &armsynapse.SQLPoolBlobAuditingPolicyProperties{
				AuditActionsAndGroups:        []*string{},
				IsAzureMonitorTargetEnabled:  to.Ptr(false),
				IsStorageSecondaryKeyInUse:   to.Ptr(false),
				RetentionDays:                to.Ptr[int32](0),
				State:                        to.Ptr(armsynapse.BlobAuditingPolicyStateDisabled),
				StorageAccountSubscriptionID: to.Ptr("00000000-0000-0000-0000-000000000000"),
				StorageEndpoint:              to.Ptr(""),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SQLPoolBlobAuditingPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SQLPoolBlobAuditingPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetSqlPoolBlobAuditing.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSQLPoolBlobAuditingPolicies_CreateOrUpdate(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/CreateOrUpdateSqlPoolBlobAuditingWithAllParameters.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a database's blob auditing policy with all parameters"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewSQLPoolBlobAuditingPoliciesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"blobauditingtest-4799",
		"blobauditingtest-6440",
		"testdb",
		armsynapse.SQLPoolBlobAuditingPolicy{
			Properties: &armsynapse.SQLPoolBlobAuditingPolicyProperties{
				AuditActionsAndGroups: []*string{
					to.Ptr("DATABASE_LOGOUT_GROUP"),
					to.Ptr("DATABASE_ROLE_MEMBER_CHANGE_GROUP"),
					to.Ptr("UPDATE on database::TestDatabaseName by public")},
				IsAzureMonitorTargetEnabled:  to.Ptr(true),
				IsStorageSecondaryKeyInUse:   to.Ptr(false),
				RetentionDays:                to.Ptr[int32](6),
				State:                        to.Ptr(armsynapse.BlobAuditingPolicyStateEnabled),
				StorageAccountAccessKey:      to.Ptr("sdlfkjabc+sdlfkjsdlkfsjdfLDKFTERLKFDFKLjsdfksjdflsdkfD2342309432849328476458/3RSD=="),
				StorageAccountSubscriptionID: to.Ptr("00000000-1234-0000-5678-000000000000"),
				StorageEndpoint:              to.Ptr("https://mystorage.blob.core.windows.net"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/CreateOrUpdateSqlPoolBlobAuditingWithAllParameters.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.SQLPoolBlobAuditingPolicy{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Synapse/workspaces/sqlPools/auditingSettings"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/blobauditingtest-4799/providers/Microsoft.Synapse/workspaces/blobauditingtest-6440/sqlPools/testdb"),
			Kind: to.Ptr("V12"),
			Properties: &armsynapse.SQLPoolBlobAuditingPolicyProperties{
				AuditActionsAndGroups: []*string{
					to.Ptr("DATABASE_LOGOUT_GROUP"),
					to.Ptr("DATABASE_ROLE_MEMBER_CHANGE_GROUP"),
					to.Ptr("UPDATE on database::TestDatabaseName by public")},
				IsAzureMonitorTargetEnabled:  to.Ptr(true),
				IsStorageSecondaryKeyInUse:   to.Ptr(false),
				RetentionDays:                to.Ptr[int32](0),
				State:                        to.Ptr(armsynapse.BlobAuditingPolicyStateEnabled),
				StorageAccountSubscriptionID: to.Ptr("00000000-1234-0000-5678-000000000000"),
				StorageEndpoint:              to.Ptr("https://mystorage.blob.core.windows.net"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SQLPoolBlobAuditingPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SQLPoolBlobAuditingPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/CreateOrUpdateSqlPoolBlobAuditingWithAllParameters.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/CreateOrUpdateSqlPoolBlobAuditingWithMinParameters.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a database's blob auditing policy with minimal parameters"},
	})
	client = armsynapse.NewSQLPoolBlobAuditingPoliciesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"blobauditingtest-4799",
		"blobauditingtest-6440",
		"testdb",
		armsynapse.SQLPoolBlobAuditingPolicy{
			Properties: &armsynapse.SQLPoolBlobAuditingPolicyProperties{
				State:                   to.Ptr(armsynapse.BlobAuditingPolicyStateEnabled),
				StorageAccountAccessKey: to.Ptr("sdlfkjabc+sdlfkjsdlkfsjdfLDKFTERLKFDFKLjsdfksjdflsdkfD2342309432849328476458/3RSD=="),
				StorageEndpoint:         to.Ptr("https://mystorage.blob.core.windows.net"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/CreateOrUpdateSqlPoolBlobAuditingWithMinParameters.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.SQLPoolBlobAuditingPolicy{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Synapse/workspaces/sqlPools/auditingSettings"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/blobauditingtest-4799/providers/Microsoft.Synapse/workspaces/blobauditingtest-6440/sqlPools/testdb"),
			Kind: to.Ptr("V12"),
			Properties: &armsynapse.SQLPoolBlobAuditingPolicyProperties{
				AuditActionsAndGroups: []*string{
					to.Ptr("SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP"),
					to.Ptr("FAILED_DATABASE_AUTHENTICATION_GROUP"),
					to.Ptr("BATCH_COMPLETED_GROUP")},
				IsAzureMonitorTargetEnabled:  to.Ptr(false),
				IsStorageSecondaryKeyInUse:   to.Ptr(false),
				RetentionDays:                to.Ptr[int32](0),
				State:                        to.Ptr(armsynapse.BlobAuditingPolicyStateEnabled),
				StorageAccountSubscriptionID: to.Ptr("00000000-0000-0000-0000-000000000000"),
				StorageEndpoint:              to.Ptr("https://mystorage.blob.core.windows.net"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SQLPoolBlobAuditingPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SQLPoolBlobAuditingPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/CreateOrUpdateSqlPoolBlobAuditingWithMinParameters.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSQLPoolOperations_List(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ListSqlPoolOperations.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List the Sql Analytics pool management operations"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewSQLPoolOperationsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.List("sqlcrudtest-7398",
		"sqlcrudtest-4645",
		"testdb",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ListSqlPoolOperations.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsynapse.SQLPoolBlobAuditingPolicySQLPoolOperationListResult{
			Value: []*armsynapse.SQLPoolOperation{
				{
					Name: to.Ptr("11111111-1111-1111-1111-111111111111"),
					Type: to.Ptr("Microsoft.Synapse/workspaces/sqlPools/operations"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-7398/providers/Microsoft.Synapse/workspaces/sqlcrudtest-4645/sqlPools/testdb/operations/11111111-1111-1111-1111-111111111111"),
					Properties: &armsynapse.SQLPoolOperationProperties{
						Description:             to.Ptr("UpdateLogicalDatabase on 'testdb', target ServiceLevelObjective S3"),
						DatabaseName:            to.Ptr("testdb"),
						EstimatedCompletionTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-06-01T13:10:10Z"); return t }()),
						IsCancellable:           to.Ptr(false),
						Operation:               to.Ptr("UpdateLogicalDatabase"),
						OperationFriendlyName:   to.Ptr("ALTER DATABASE"),
						PercentComplete:         to.Ptr[int32](100),
						ServerName:              to.Ptr("sqlcrudtest-4645"),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-06-01T09:10:08.10Z"); return t }()),
						State:                   to.Ptr(armsynapse.ManagementOperationStateSucceeded),
					},
				},
				{
					Name: to.Ptr("55555555-5555-5555-5555-555555555555"),
					Type: to.Ptr("Microsoft.Synapse/workspaces/sqlPools/operations"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-7398/providers/Microsoft.Synapse/workspaces/sqlcrudtest-4645/sqlPools/testdb/operations/55555555-5555-5555-5555-555555555555"),
					Properties: &armsynapse.SQLPoolOperationProperties{
						Description:             to.Ptr("UpdateLogicalDatabase on 'testdb', target ServiceLevelObjective S3"),
						DatabaseName:            to.Ptr("testdb"),
						EstimatedCompletionTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-06-01T13:10:10Z"); return t }()),
						IsCancellable:           to.Ptr(true),
						Operation:               to.Ptr("UpdateLogicalDatabase"),
						OperationFriendlyName:   to.Ptr("ALTER DATABASE"),
						PercentComplete:         to.Ptr[int32](19),
						ServerName:              to.Ptr("sqlcrudtest-4645"),
						StartTime:               to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-06-01T10:10:08.10Z"); return t }()),
						State:                   to.Ptr(armsynapse.ManagementOperationStateInProgress),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SQLPoolBlobAuditingPolicySQLPoolOperationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SQLPoolBlobAuditingPolicySQLPoolOperationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ListSqlPoolOperations.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSQLPoolUsages_List(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/SqlPoolUsageMetricsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List the usages of a SQL Analytics pool"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewSQLPoolUsagesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.List("sqlcrudtest-6730",
		"sqlcrudtest-9007",
		"3481",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/SqlPoolUsageMetricsList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsynapse.SQLPoolUsageListResult{
			Value: []*armsynapse.SQLPoolUsage{
				{
					Name:         to.Ptr("database_size"),
					CurrentValue: to.Ptr[float64](4194304),
					DisplayName:  to.Ptr("Database Size"),
					Limit:        to.Ptr[float64](268435456000),
					ResourceName: to.Ptr("3481"),
					Unit:         to.Ptr("Bytes"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SQLPoolUsageListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SQLPoolUsageListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/SqlPoolUsageMetricsList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSQLPoolSensitivityLabels_ListCurrent(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ListSqlPoolsSensitivityLabelsWithSourceCurrent.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets the current sensitivity labels of a given SQL Analytics pool"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewSQLPoolSensitivityLabelsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListCurrent("myRG",
		"myServer",
		"myDatabase",
		&armsynapse.SQLPoolSensitivityLabelsClientListCurrentOptions{Filter: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ListSqlPoolsSensitivityLabelsWithSourceCurrent.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsynapse.SensitivityLabelListResult{
			Value: []*armsynapse.SensitivityLabel{
				{
					Name: to.Ptr("current"),
					Type: to.Ptr("Microsoft.Synapse/workspaces/sqlPools/schemas/tables/columns/sensitivityLabels"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/myRG/providers/Microsoft.Synapse/workspaces/myServer/sqlPools/myDatabase/schemas/dbo/tables/myTable/columns/myColumn3/sensitivityLabels/current"),
					Properties: &armsynapse.SensitivityLabelProperties{
						InformationType:   to.Ptr("Financial"),
						InformationTypeID: to.Ptr("d22fa6e9-5ee4-3bde-4c2b-a409604c4646"),
						LabelID:           to.Ptr("05e6eaa1-075a-4fb4-a732-a92215a2444a"),
						LabelName:         to.Ptr("Sensitive"),
					},
				},
				{
					Name: to.Ptr("current"),
					Type: to.Ptr("Microsoft.Synapse/workspaces/sqlPools/schemas/tables/columns/sensitivityLabels"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/myRG/providers/Microsoft.Synapse/workspaces/myServer/sqlPools/myDatabase/schemas/dbo/tables/myTable/columns/myColumn4/sensitivityLabels/current"),
					Properties: &armsynapse.SensitivityLabelProperties{
						InformationType:   to.Ptr("Email"),
						InformationTypeID: to.Ptr("d22fa6e9-5ee4-3bde-4c2b-a409604c4646"),
						LabelID:           to.Ptr("bf91e08c-f4f0-478a-b016-25164b2a65ff"),
						LabelName:         to.Ptr("PII"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SensitivityLabelListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SensitivityLabelListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ListSqlPoolsSensitivityLabelsWithSourceCurrent.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSQLPoolSensitivityLabels_Update(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/SensitivityLabelsCurrentUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update sensitivity labels of a given database using an operations batch."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewSQLPoolSensitivityLabelsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	_, err := client.Update(ctx,
		"myRG",
		"myWorkspace",
		"mySqlPool",
		armsynapse.SensitivityLabelUpdateList{
			Operations: []*armsynapse.SensitivityLabelUpdate{
				{
					Properties: &armsynapse.SensitivityLabelUpdateProperties{
						Schema: to.Ptr("dbo"),
						Column: to.Ptr("column1"),
						Op:     to.Ptr(armsynapse.SensitivityLabelUpdateKindSet),
						SensitivityLabel: &armsynapse.SensitivityLabel{
							Properties: &armsynapse.SensitivityLabelProperties{
								InformationType:   to.Ptr("Financial"),
								InformationTypeID: to.Ptr("1D3652D6-422C-4115-82F1-65DAEBC665C8"),
								LabelID:           to.Ptr("3A477B16-9423-432B-AA97-6069B481CEC3"),
								LabelName:         to.Ptr("Highly Confidential"),
								Rank:              to.Ptr(armsynapse.SensitivityLabelRankLow),
							},
						},
						Table: to.Ptr("table1"),
					},
				},
				{
					Properties: &armsynapse.SensitivityLabelUpdateProperties{
						Schema: to.Ptr("dbo"),
						Column: to.Ptr("column2"),
						Op:     to.Ptr(armsynapse.SensitivityLabelUpdateKindSet),
						SensitivityLabel: &armsynapse.SensitivityLabel{
							Properties: &armsynapse.SensitivityLabelProperties{
								InformationType:   to.Ptr("PhoneNumber"),
								InformationTypeID: to.Ptr("d22fa6e9-5ee4-3bde-4c2b-a409604c4646"),
								LabelID:           to.Ptr("bf91e08c-f4f0-478a-b016-25164b2a65ff"),
								LabelName:         to.Ptr("PII"),
								Rank:              to.Ptr(armsynapse.SensitivityLabelRankCritical),
							},
						},
						Table: to.Ptr("table2"),
					},
				},
				{
					Properties: &armsynapse.SensitivityLabelUpdateProperties{
						Schema: to.Ptr("dbo"),
						Column: to.Ptr("Column3"),
						Op:     to.Ptr(armsynapse.SensitivityLabelUpdateKindRemove),
						Table:  to.Ptr("Table1"),
					},
				}},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/SensitivityLabelsCurrentUpdate.json: %v", err)
	}
}

func TestSQLPoolSensitivityLabels_ListRecommended(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ListSqlPoolSensitivityLabelsWithSourceRecommended.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets the recommended sensitivity labels of a given SQL Analytics pool"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewSQLPoolSensitivityLabelsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListRecommended("myRG",
		"myServer",
		"myDatabase",
		&armsynapse.SQLPoolSensitivityLabelsClientListRecommendedOptions{IncludeDisabledRecommendations: nil,
			SkipToken: nil,
			Filter:    nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ListSqlPoolSensitivityLabelsWithSourceRecommended.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsynapse.SensitivityLabelListResult{
			Value: []*armsynapse.SensitivityLabel{
				{
					Name: to.Ptr("recommended"),
					Type: to.Ptr("Microsoft.Synapse/workspaces/sqlPools/schemas/tables/columns/sensitivityLabels"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/myRG/providers/Microsoft.Synapse/workspaces/myServer/sqlPools/myDatabase/schemas/dbo/tables/myTable/columns/myColumn/sensitivityLabels/recommended"),
					Properties: &armsynapse.SensitivityLabelProperties{
						InformationType:   to.Ptr("Financial"),
						InformationTypeID: to.Ptr("d22fa6e9-5ee4-3bde-4c2b-a409604c4646"),
						LabelID:           to.Ptr("05e6eaa1-075a-4fb4-a732-a92215a2444a"),
						LabelName:         to.Ptr("Sensitive"),
					},
				},
				{
					Name: to.Ptr("recommended"),
					Type: to.Ptr("Microsoft.Synapse/workspaces/sqlPools/schemas/tables/columns/sensitivityLabels"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/myRG/providers/Microsoft.Synapse/workspaces/myServer/sqlPools/myDatabase/schemas/dbo/tables/myTable/columns/myColumn2/sensitivityLabels/recommended"),
					Properties: &armsynapse.SensitivityLabelProperties{
						InformationType:   to.Ptr("Email"),
						InformationTypeID: to.Ptr("d22fa6e9-5ee4-3bde-4c2b-a409604c4646"),
						LabelID:           to.Ptr("bf91e08c-f4f0-478a-b016-25164b2a65ff"),
						LabelName:         to.Ptr("PII"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SensitivityLabelListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SensitivityLabelListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ListSqlPoolSensitivityLabelsWithSourceRecommended.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSQLPoolSensitivityLabels_CreateOrUpdate(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/CreateOrUpdateSqlPoolColumnSensitivityLabelWithAllParameters.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Updates the sensitivity label of a given column with all parameters"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewSQLPoolSensitivityLabelsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"myRG",
		"myServer",
		"myDatabase",
		"dbo",
		"myTable",
		"myColumn",
		armsynapse.SensitivityLabel{
			Properties: &armsynapse.SensitivityLabelProperties{
				InformationType:   to.Ptr("PhoneNumber"),
				InformationTypeID: to.Ptr("d22fa6e9-5ee4-3bde-4c2b-a409604c4646"),
				LabelID:           to.Ptr("bf91e08c-f4f0-478a-b016-25164b2a65ff"),
				LabelName:         to.Ptr("PII"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/CreateOrUpdateSqlPoolColumnSensitivityLabelWithAllParameters.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.SensitivityLabel{
			Name: to.Ptr("current"),
			Type: to.Ptr("Microsoft.Synapse/workspaces/sqlPools/schemas/tables/columns/sensitivityLabels"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/myRG/providers/Microsoft.Synapse/workspaces/myServer/sqlPools/myDatabase/schemas/dbo/tables/myTable/columns/myColumn/sensitivityLabels/current"),
			Properties: &armsynapse.SensitivityLabelProperties{
				InformationType:   to.Ptr("PhoneNumber"),
				InformationTypeID: to.Ptr("d22fa6e9-5ee4-3bde-4c2b-a409604c4646"),
				LabelID:           to.Ptr("bf91e08c-f4f0-478a-b016-25164b2a65ff"),
				LabelName:         to.Ptr("PII"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SensitivityLabel) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SensitivityLabel)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/CreateOrUpdateSqlPoolColumnSensitivityLabelWithAllParameters.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSQLPoolSensitivityLabels_Delete(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/DeleteSqlPoolColumnSensitivityLabel.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Deletes the sensitivity label of a given column"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewSQLPoolSensitivityLabelsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	_, err := client.Delete(ctx,
		"myRG",
		"myServer",
		"myDatabase",
		"dbo",
		"myTable",
		"myColumn",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/DeleteSqlPoolColumnSensitivityLabel.json: %v", err)
	}
}

func TestSQLPoolSensitivityLabels_Get(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetSqlPoolColumnSensitivityLabelGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets the sensitivity label of a given column"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewSQLPoolSensitivityLabelsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"myRG",
		"myServer",
		"myDatabase",
		"dbo",
		"myTable",
		"myColumn",
		armsynapse.SensitivityLabelSourceCurrent,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetSqlPoolColumnSensitivityLabelGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.SensitivityLabel{
			Name: to.Ptr("current"),
			Type: to.Ptr("Microsoft.Synapse/workspaces/sqlPools/schemas/tables/columns/sensitivityLabels"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/myRG/providers/Microsoft.Synapse/workspaces/myServer/sqlPools/myDatabase/schemas/dbo/tables/myTable/columns/myColumn/sensitivityLabels/current"),
			Properties: &armsynapse.SensitivityLabelProperties{
				InformationType:   to.Ptr("PhoneNumber"),
				InformationTypeID: to.Ptr("d22fa6e9-5ee4-3bde-4c2b-a409604c4646"),
				LabelID:           to.Ptr("bf91e08c-f4f0-478a-b016-25164b2a65ff"),
				LabelName:         to.Ptr("PII"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SensitivityLabel) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SensitivityLabel)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetSqlPoolColumnSensitivityLabelGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSQLPoolSensitivityLabels_EnableRecommendation(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/RecommendedColumnSensitivityLabelEnable.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Enables sensitivity recommendations on a given column"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewSQLPoolSensitivityLabelsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	_, err := client.EnableRecommendation(ctx,
		"myRG",
		"myServer",
		"myDatabase",
		"dbo",
		"myTable",
		"myColumn",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/RecommendedColumnSensitivityLabelEnable.json: %v", err)
	}
}

func TestSQLPoolSensitivityLabels_DisableRecommendation(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/RecommendedColumnSensitivityLabelDisable.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Disables sensitivity recommendations on a given column"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewSQLPoolSensitivityLabelsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	_, err := client.DisableRecommendation(ctx,
		"myRG",
		"myServer",
		"myDatabase",
		"dbo",
		"myTable",
		"myColumn",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/RecommendedColumnSensitivityLabelDisable.json: %v", err)
	}
}

func TestSQLPoolRecommendedSensitivityLabels_Update(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/SensitivityLabelsRecommendedUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update recommended sensitivity labels of a given SQL Pool using an operations batch."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewSQLPoolRecommendedSensitivityLabelsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	_, err := client.Update(ctx,
		"myRG",
		"myWorkspace",
		"mySqlPool",
		armsynapse.RecommendedSensitivityLabelUpdateList{
			Operations: []*armsynapse.RecommendedSensitivityLabelUpdate{
				{
					Properties: &armsynapse.RecommendedSensitivityLabelUpdateProperties{
						Schema: to.Ptr("dbo"),
						Column: to.Ptr("column1"),
						Op:     to.Ptr(armsynapse.RecommendedSensitivityLabelUpdateKindEnable),
						Table:  to.Ptr("table1"),
					},
				},
				{
					Properties: &armsynapse.RecommendedSensitivityLabelUpdateProperties{
						Schema: to.Ptr("dbo"),
						Column: to.Ptr("column2"),
						Op:     to.Ptr(armsynapse.RecommendedSensitivityLabelUpdateKindEnable),
						Table:  to.Ptr("table2"),
					},
				},
				{
					Properties: &armsynapse.RecommendedSensitivityLabelUpdateProperties{
						Schema: to.Ptr("dbo"),
						Column: to.Ptr("column3"),
						Op:     to.Ptr(armsynapse.RecommendedSensitivityLabelUpdateKindDisable),
						Table:  to.Ptr("table1"),
					},
				}},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/SensitivityLabelsRecommendedUpdate.json: %v", err)
	}
}

func TestSQLPoolSchemas_List(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ListSqlPoolSchema.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List the schema in a SQL Analytics pool"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewSQLPoolSchemasClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.List("myRG",
		"serverName",
		"myDatabase",
		&armsynapse.SQLPoolSchemasClientListOptions{Filter: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ListSqlPoolSchema.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsynapse.SQLPoolSchemaListResult{
			Value: []*armsynapse.SQLPoolSchema{
				{
					Name: to.Ptr("dbo"),
					Type: to.Ptr("Microsoft.Synapse/workspaces/sqlPools/schemas"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/myRG/providers/Microsoft.Synapse/workspaces/serverName/sqlPools/myDatabase/schemas/dbo"),
				},
				{
					Name: to.Ptr("schema2"),
					Type: to.Ptr("Microsoft.Synapse/workspaces/sqlPools/schemas"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/myRG/providers/Microsoft.Synapse/workspaces/serverName/sqlPools/myDatabase/schemas/schema2"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SQLPoolSchemaListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SQLPoolSchemaListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ListSqlPoolSchema.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSQLPoolSchemas_Get(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/SqlPoolSchemaGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get database schema"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewSQLPoolSchemasClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"myRG",
		"serverName",
		"myDatabase",
		"dbo",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/SqlPoolSchemaGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.SQLPoolSchema{
			Name: to.Ptr("dbo"),
			Type: to.Ptr("Microsoft.Synapse/workspaces/sqlPools/schemas"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/myRG/providers/Microsoft.Synapse/workspaces/serverName/sqlPools/myDatabase/schemas/dbo"),
		}
		if !reflect.DeepEqual(exampleRes, res.SQLPoolSchema) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SQLPoolSchema)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/SqlPoolSchemaGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSQLPoolTables_ListBySchema(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ListSqlPoolTables.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List the tables of a given schema in a SQL Analytics pool"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewSQLPoolTablesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListBySchema("myRG",
		"serverName",
		"myDatabase",
		"dbo",
		&armsynapse.SQLPoolTablesClientListBySchemaOptions{Filter: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ListSqlPoolTables.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsynapse.SQLPoolTableListResult{
			Value: []*armsynapse.SQLPoolTable{
				{
					Name: to.Ptr("table1"),
					Type: to.Ptr("Microsoft.Synapse/workspaces/sqlPools/schemas/tables"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/myRG/providers/Microsoft.Synapse/workspaces/serverName/sqlPools/myDatabase/schemas/dbo/tables/table1"),
				},
				{
					Name: to.Ptr("table2"),
					Type: to.Ptr("Microsoft.Synapse/workspaces/sqlPools/schemas/tables"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/myRG/providers/Microsoft.Synapse/workspaces/serverName/sqlPools/myDatabase/schemas/dbo/tables/table2"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SQLPoolTableListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SQLPoolTableListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ListSqlPoolTables.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSQLPoolTables_Get(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/SqlPoolTableGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get database table"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewSQLPoolTablesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"myRG",
		"serverName",
		"myDatabase",
		"dbo",
		"table1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/SqlPoolTableGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.SQLPoolTable{
			Name: to.Ptr("table1"),
			Type: to.Ptr("Microsoft.Synapse/workspaces/sqlPools/schemas/tables"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/myRG/providers/Microsoft.Synapse/workspaces/serverName/sqlPools/myDatabase/schemas/dbo/tables/table1"),
		}
		if !reflect.DeepEqual(exampleRes, res.SQLPoolTable) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SQLPoolTable)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/SqlPoolTableGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSQLPoolTableColumns_ListByTableName(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ListSqlPoolColumns.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List the columns in a table of a given schema in a SQL Analytics pool"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewSQLPoolTableColumnsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByTableName("myRG",
		"serverName",
		"myDatabase",
		"dbo",
		"table1",
		&armsynapse.SQLPoolTableColumnsClientListByTableNameOptions{Filter: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ListSqlPoolColumns.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsynapse.SQLPoolColumnListResult{
			Value: []*armsynapse.SQLPoolColumn{
				{
					Name: to.Ptr("col1"),
					Type: to.Ptr("Microsoft.Synapse/workspaces/sqlPools/schemas/tables/columns"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/myRG/providers/Microsoft.Synapse/workspaces/serverName/sqlPools/myDatabase/schemas/dbo/tables/table1/columns/col1"),
					Properties: &armsynapse.SQLPoolColumnProperties{
						ColumnType: to.Ptr(armsynapse.ColumnDataTypeNvarchar),
					},
				},
				{
					Name: to.Ptr("col2"),
					Type: to.Ptr("Microsoft.Synapse/workspaces/sqlPools/schemas/tables/columns"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/myRG/providers/Microsoft.Synapse/workspaces/serverName/sqlPools/myDatabase/schemas/dbo/tables/table1/columns/col2"),
					Properties: &armsynapse.SQLPoolColumnProperties{
						ColumnType: to.Ptr(armsynapse.ColumnDataTypeBit),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SQLPoolColumnListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SQLPoolColumnListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ListSqlPoolColumns.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSQLPoolConnectionPolicies_Get(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetSqlPoolConnectionPolicy.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a connection policy of a SQL Analytics pool"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewSQLPoolConnectionPoliciesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"blobauditingtest-6852",
		"blobauditingtest-2080",
		"testdb",
		armsynapse.ConnectionPolicyNameDefault,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetSqlPoolConnectionPolicy.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.SQLPoolConnectionPolicy{
			Name:     to.Ptr("default"),
			Type:     to.Ptr("Microsoft.Synapse/workspaces/sqlPools/connectionPolicies"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/blobauditingtest-6852/providers/Microsoft.Synapse/workspaces/blobauditingtest-2080/sqlPools/testdb/connectionPolicies/default"),
			Location: to.Ptr("West US"),
			Properties: &armsynapse.SQLPoolConnectionPolicyProperties{
				ProxyDNSName:          to.Ptr("blobauditingtest-2080.database.secure.windows.net"),
				ProxyPort:             to.Ptr("1433"),
				RedirectionState:      to.Ptr("Disabled"),
				SecurityEnabledAccess: to.Ptr("Optional"),
				State:                 to.Ptr("New"),
				UseServerDefault:      to.Ptr("Enabled"),
				Visibility:            to.Ptr("Visible"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SQLPoolConnectionPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SQLPoolConnectionPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetSqlPoolConnectionPolicy.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSQLPoolVulnerabilityAssessments_List(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ListSqlPoolVulnerabilityAssessments.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a vulnerability assessment of a SQL Analytics pool"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewSQLPoolVulnerabilityAssessmentsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.List("vulnerabilityaseessmenttest-4799",
		"vulnerabilityaseessmenttest-6440",
		"testdb",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ListSqlPoolVulnerabilityAssessments.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsynapse.SQLPoolVulnerabilityAssessmentListResult{
			Value: []*armsynapse.SQLPoolVulnerabilityAssessment{
				{
					Name: to.Ptr("default"),
					Type: to.Ptr("Microsoft.Synapse/workspaces/sqlPools/vulnerabilityAssessments"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/vulnerabilityaseessmenttest-4799/providers/Microsoft.Synapse/workspaces/vulnerabilityaseessmenttest-6440/sqlPools/testdb/vulnerabilityAssessments/default"),
					Properties: &armsynapse.SQLPoolVulnerabilityAssessmentProperties{
						RecurringScans: &armsynapse.VulnerabilityAssessmentRecurringScansProperties{
							EmailSubscriptionAdmins: to.Ptr(true),
							Emails: []*string{
								to.Ptr("email1@mail.com"),
								to.Ptr("email2@mail.com")},
							IsEnabled: to.Ptr(true),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SQLPoolVulnerabilityAssessmentListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SQLPoolVulnerabilityAssessmentListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ListSqlPoolVulnerabilityAssessments.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSQLPoolVulnerabilityAssessments_Get(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetSqlPoolVulnerabilityAssessment.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a Sql pool's vulnerability assessment"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewSQLPoolVulnerabilityAssessmentsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"vulnerabilityaseessmenttest-4799",
		"vulnerabilityaseessmenttest-6440",
		"testdb",
		armsynapse.VulnerabilityAssessmentNameDefault,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetSqlPoolVulnerabilityAssessment.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.SQLPoolVulnerabilityAssessment{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Synapse/workspaces/sqlPools/vulnerabilityAssessments"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/vulnerabilityaseessmenttest-4799/providers/Microsoft.Synapse/workspaces/vulnerabilityaseessmenttest-6440/sqlPools/testdb/vulnerabilityAssessments/default"),
			Properties: &armsynapse.SQLPoolVulnerabilityAssessmentProperties{
				RecurringScans: &armsynapse.VulnerabilityAssessmentRecurringScansProperties{
					EmailSubscriptionAdmins: to.Ptr(true),
					Emails: []*string{
						to.Ptr("email1@mail.com"),
						to.Ptr("email2@mail.com")},
					IsEnabled: to.Ptr(true),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SQLPoolVulnerabilityAssessment) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SQLPoolVulnerabilityAssessment)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetSqlPoolVulnerabilityAssessment.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSQLPoolVulnerabilityAssessments_CreateOrUpdate(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/CreateOrUpdateSqlPoolVulnerabilityAssessmentWithAllParameters.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a database's vulnerability assessment with all parameters"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewSQLPoolVulnerabilityAssessmentsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"vulnerabilityaseessmenttest-4799",
		"vulnerabilityaseessmenttest-6440",
		"testdb",
		armsynapse.VulnerabilityAssessmentNameDefault,
		armsynapse.SQLPoolVulnerabilityAssessment{
			Properties: &armsynapse.SQLPoolVulnerabilityAssessmentProperties{
				RecurringScans: &armsynapse.VulnerabilityAssessmentRecurringScansProperties{
					EmailSubscriptionAdmins: to.Ptr(true),
					Emails: []*string{
						to.Ptr("email1@mail.com"),
						to.Ptr("email2@mail.com")},
					IsEnabled: to.Ptr(true),
				},
				StorageAccountAccessKey: to.Ptr("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"),
				StorageContainerPath:    to.Ptr("https://myStorage.blob.core.windows.net/vulnerability-assessment/"),
				StorageContainerSasKey:  to.Ptr("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/CreateOrUpdateSqlPoolVulnerabilityAssessmentWithAllParameters.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.SQLPoolVulnerabilityAssessment{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Synapse/workspaces/sqlPools/vulnerabilityAssessments"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/vulnerabilityaseessmenttest-4799/providers/Microsoft.Synapse/workspaces/vulnerabilityaseessmenttest-6440/sqlPools/testdb/vulnerabilityAssessments/default"),
			Properties: &armsynapse.SQLPoolVulnerabilityAssessmentProperties{
				RecurringScans: &armsynapse.VulnerabilityAssessmentRecurringScansProperties{
					EmailSubscriptionAdmins: to.Ptr(true),
					Emails: []*string{
						to.Ptr("email1@mail.com"),
						to.Ptr("email2@mail.com")},
					IsEnabled: to.Ptr(true),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SQLPoolVulnerabilityAssessment) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SQLPoolVulnerabilityAssessment)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/CreateOrUpdateSqlPoolVulnerabilityAssessmentWithAllParameters.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/CreateOrUpdateVulnerabilityAssessmentWithStorageAccessKeyAndMinParameters.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a database's vulnerability assessment with minimal parameters, when storageAccountAccessKey is specified"},
	})
	client = armsynapse.NewSQLPoolVulnerabilityAssessmentsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"vulnerabilityaseessmenttest-4799",
		"vulnerabilityaseessmenttest-6440",
		"testdb",
		armsynapse.VulnerabilityAssessmentNameDefault,
		armsynapse.SQLPoolVulnerabilityAssessment{
			Properties: &armsynapse.SQLPoolVulnerabilityAssessmentProperties{
				StorageAccountAccessKey: to.Ptr("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"),
				StorageContainerPath:    to.Ptr("https://myStorage.blob.core.windows.net/vulnerability-assessment/"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/CreateOrUpdateVulnerabilityAssessmentWithStorageAccessKeyAndMinParameters.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.SQLPoolVulnerabilityAssessment{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Synapse/workspaces/sqlPools/vulnerabilityAssessments"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/vulnerabilityaseessmenttest-4799/Microsoft.Synapse/workspaces/vulnerabilityaseessmenttest-6440/sqlPools/testdb/vulnerabilityAssessments/default"),
			Properties: &armsynapse.SQLPoolVulnerabilityAssessmentProperties{
				RecurringScans: &armsynapse.VulnerabilityAssessmentRecurringScansProperties{
					EmailSubscriptionAdmins: to.Ptr(false),
					Emails:                  []*string{},
					IsEnabled:               to.Ptr(true),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SQLPoolVulnerabilityAssessment) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SQLPoolVulnerabilityAssessment)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/CreateOrUpdateVulnerabilityAssessmentWithStorageAccessKeyAndMinParameters.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/CreateOrUpdateSqlPoolVulnerabilityAssessmentWithContainerSasKeyAndMinParameters.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a database's vulnerability assessment with minimal parameters, when storageContainerSasKey is specified"},
	})
	client = armsynapse.NewSQLPoolVulnerabilityAssessmentsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"vulnerabilityaseessmenttest-4799",
		"vulnerabilityaseessmenttest-6440",
		"testdb",
		armsynapse.VulnerabilityAssessmentNameDefault,
		armsynapse.SQLPoolVulnerabilityAssessment{
			Properties: &armsynapse.SQLPoolVulnerabilityAssessmentProperties{
				StorageContainerPath:   to.Ptr("https://myStorage.blob.core.windows.net/vulnerability-assessment/"),
				StorageContainerSasKey: to.Ptr("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/CreateOrUpdateSqlPoolVulnerabilityAssessmentWithContainerSasKeyAndMinParameters.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.SQLPoolVulnerabilityAssessment{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Synapse/workspaces/sqlPools/vulnerabilityAssessments"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/vulnerabilityaseessmenttest-4799/providers/Microsoft.Synapse/workspaces/vulnerabilityaseessmenttest-6440/sqlPools/testdb/vulnerabilityAssessments/default"),
			Properties: &armsynapse.SQLPoolVulnerabilityAssessmentProperties{
				RecurringScans: &armsynapse.VulnerabilityAssessmentRecurringScansProperties{
					EmailSubscriptionAdmins: to.Ptr(false),
					Emails:                  []*string{},
					IsEnabled:               to.Ptr(true),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SQLPoolVulnerabilityAssessment) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SQLPoolVulnerabilityAssessment)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/CreateOrUpdateSqlPoolVulnerabilityAssessmentWithContainerSasKeyAndMinParameters.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSQLPoolVulnerabilityAssessments_Delete(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/DeleteSqlPoolVulnerabilityAssessment.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Remove a database's vulnerability assessment"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewSQLPoolVulnerabilityAssessmentsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	_, err := client.Delete(ctx,
		"vulnerabilityaseessmenttest-4799",
		"vulnerabilityaseessmenttest-6440",
		"testdb",
		armsynapse.VulnerabilityAssessmentNameDefault,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/DeleteSqlPoolVulnerabilityAssessment.json: %v", err)
	}
}

func TestSQLPoolVulnerabilityAssessmentScans_List(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ListSqlPoolVulnerabilityAssessmentScanRecords.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a vulnerability scan record of a SQL Analytics pool"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewSQLPoolVulnerabilityAssessmentScansClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.List("vulnerabilityassessmenttest-4711",
		"vulnerabilityassessmenttest-6411",
		"testdb",
		armsynapse.VulnerabilityAssessmentNameDefault,
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ListSqlPoolVulnerabilityAssessmentScanRecords.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsynapse.VulnerabilityAssessmentScanRecordListResult{
			Value: []*armsynapse.VulnerabilityAssessmentScanRecord{
				{
					Name: to.Ptr("scan001"),
					Type: to.Ptr("Microsoft.Synapse/workspaces/sqlPools/vulnerabilityAssessments/scans"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/vulnerabilityassessmenttest-4799/providers/Microsoft.Synapse/workspaces/vulnerabilityassessmenttest-6440/sqlPools/testdb/vulnerabilityAssessments/default/scans/scan001"),
					Properties: &armsynapse.VulnerabilityAssessmentScanRecordProperties{
						EndTime:                      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-12-12T17:47:06Z"); return t }()),
						Errors:                       []*armsynapse.VulnerabilityAssessmentScanError{},
						NumberOfFailedSecurityChecks: to.Ptr[int32](9),
						ScanID:                       to.Ptr("scan001"),
						StartTime:                    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-12-12T17:45:06Z"); return t }()),
						State:                        to.Ptr(armsynapse.VulnerabilityAssessmentScanStatePassed),
						TriggerType:                  to.Ptr(armsynapse.VulnerabilityAssessmentScanTriggerTypeOnDemand),
					},
				},
				{
					Name: to.Ptr("scan002"),
					Type: to.Ptr("Microsoft.Synapse/workspaces/sqlPools/vulnerabilityAssessments/scans"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/vulnerabilityassessmenttest-4799/providers/Microsoft.Synapse/workspaces/vulnerabilityassessmenttest-6440/sqlPools/testdb/vulnerabilityAssessments/default/scans/scan002"),
					Properties: &armsynapse.VulnerabilityAssessmentScanRecordProperties{
						EndTime:                      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-12-12T17:47:06Z"); return t }()),
						Errors:                       []*armsynapse.VulnerabilityAssessmentScanError{},
						NumberOfFailedSecurityChecks: to.Ptr[int32](9),
						ScanID:                       to.Ptr("scan002"),
						StartTime:                    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-12-12T17:45:06Z"); return t }()),
						State:                        to.Ptr(armsynapse.VulnerabilityAssessmentScanStateFailed),
						TriggerType:                  to.Ptr(armsynapse.VulnerabilityAssessmentScanTriggerTypeRecurring),
					},
				},
				{
					Name: to.Ptr("scan003"),
					Type: to.Ptr("Microsoft.Synapse/workspaces/sqlPools/vulnerabilityAssessments/scans"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/vulnerabilityassessmenttest-4799/providers/Microsoft.Synapse/workspaces/vulnerabilityassessmenttest-6440/sqlPools/testdb/vulnerabilityAssessments/default/scans/scan003"),
					Properties: &armsynapse.VulnerabilityAssessmentScanRecordProperties{
						EndTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-12-12T17:47:06Z"); return t }()),
						Errors: []*armsynapse.VulnerabilityAssessmentScanError{
							{
								Code:    to.Ptr("StorageNotFound"),
								Message: to.Ptr("Storage not found"),
							}},
						NumberOfFailedSecurityChecks: to.Ptr[int32](0),
						ScanID:                       to.Ptr("scan003"),
						StartTime:                    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-12-12T17:45:06Z"); return t }()),
						State:                        to.Ptr(armsynapse.VulnerabilityAssessmentScanStateFailedToRun),
						TriggerType:                  to.Ptr(armsynapse.VulnerabilityAssessmentScanTriggerTypeRecurring),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.VulnerabilityAssessmentScanRecordListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.VulnerabilityAssessmentScanRecordListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ListSqlPoolVulnerabilityAssessmentScanRecords.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSQLPoolVulnerabilityAssessmentScans_InitiateScan(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ExecuteSqlPoolVulnerabilityAssessmentScans.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Executes a Sql pool's vulnerability assessment scan."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewSQLPoolVulnerabilityAssessmentScansClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginInitiateScan(ctx,
		"vulnerabilityassessmenttest-4711",
		"vulnerabilityassessmenttest-6411",
		"testdb",
		armsynapse.VulnerabilityAssessmentNameDefault,
		"scan01",
		&armsynapse.SQLPoolVulnerabilityAssessmentScansClientBeginInitiateScanOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ExecuteSqlPoolVulnerabilityAssessmentScans.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ExecuteSqlPoolVulnerabilityAssessmentScans.json: %v", err)
	}
}

func TestSQLPoolVulnerabilityAssessmentScans_Export(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ExportSqlPoolVulnerabilityAssessmentScan.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Export a database's vulnerability assessment scan results."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewSQLPoolVulnerabilityAssessmentScansClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Export(ctx,
		"vulnerabilityassessmenttest-4799",
		"vulnerabilityassessmenttest-6440",
		"testdb",
		armsynapse.VulnerabilityAssessmentNameDefault,
		"scan001",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ExportSqlPoolVulnerabilityAssessmentScan.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.SQLPoolVulnerabilityAssessmentScansExport{
			Name: to.Ptr("scan001"),
			Type: to.Ptr("Microsoft.Synapse/workspaces/sqlPools/vulnerabilityAssessments/scans/export"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/vulnerabilityassessmenttest-4799/providers/Microsoft.Synapse/workspaces/vulnerabilityassessmenttest-6440/sqlPools/testdb/vulnerabilityAssessments/default/scans/scan001/export"),
			Properties: &armsynapse.SQLPoolVulnerabilityAssessmentScanExportProperties{
				ExportedReportLocation: to.Ptr("https://myaccount.blob.core.windows.net/vulnerabilityAssessment/vulnerabilityassessmenttest-6440/testdb/scan001.xlsx"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SQLPoolVulnerabilityAssessmentScansExport) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SQLPoolVulnerabilityAssessmentScansExport)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ExportSqlPoolVulnerabilityAssessmentScan.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSQLPoolVulnerabilityAssessmentScans_Get(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/SqlPoolVulnerabilityAssessmentScanRecordsGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets a database vulnerability assessment scan record by scan ID"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewSQLPoolVulnerabilityAssessmentScansClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"vulnerabilityassessmenttest-4711",
		"vulnerabilityassessmenttest-6411",
		"testdb",
		armsynapse.VulnerabilityAssessmentNameDefault,
		"scan001",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/SqlPoolVulnerabilityAssessmentScanRecordsGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.VulnerabilityAssessmentScanRecord{
			Name: to.Ptr("scan001"),
			Type: to.Ptr("Microsoft.Synapse/workspaces/sqlPools/vulnerabilityAssessments/scans"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/vulnerabilityassessmenttest-4799/providers/Microsoft.Synapse/workspaces/vulnerabilityassessmenttest-6440/sqlPools/testdb/vulnerabilityAssessments/default/scans/scan001"),
			Properties: &armsynapse.VulnerabilityAssessmentScanRecordProperties{
				EndTime:                      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-12-12T17:47:06Z"); return t }()),
				Errors:                       []*armsynapse.VulnerabilityAssessmentScanError{},
				NumberOfFailedSecurityChecks: to.Ptr[int32](9),
				ScanID:                       to.Ptr("scan001"),
				StartTime:                    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-12-12T17:45:06Z"); return t }()),
				State:                        to.Ptr(armsynapse.VulnerabilityAssessmentScanStatePassed),
				StorageContainerPath:         to.Ptr("https://myaccount.blob.core.windows.net/vulnerability-assessment"),
				TriggerType:                  to.Ptr(armsynapse.VulnerabilityAssessmentScanTriggerTypeOnDemand),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.VulnerabilityAssessmentScanRecord) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VulnerabilityAssessmentScanRecord)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/SqlPoolVulnerabilityAssessmentScanRecordsGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSQLPoolSecurityAlertPolicies_List(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/SqlPoolSecurityAlertPolicies_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a security alert of a SQL Analytics pool"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewSQLPoolSecurityAlertPoliciesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.List("securityalert-6852",
		"securityalert-2080",
		"testdb",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/SqlPoolSecurityAlertPolicies_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsynapse.ListSQLPoolSecurityAlertPolicies{
			Value: []*armsynapse.SQLPoolSecurityAlertPolicy{
				{
					Name: to.Ptr("default"),
					Type: to.Ptr("Microsoft.Synapse/workspaces/sqlPools/securityAlertPolicies"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/securityalert-6852/providers/Microsoft.Synapse/workspaces/securityalert-2080/sqlPools/testdb"),
					Properties: &armsynapse.SecurityAlertPolicyProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-10-08T00:00:00Z"); return t }()),
						DisabledAlerts: []*string{
							to.Ptr("Usage_Anomaly")},
						EmailAccountAdmins: to.Ptr(true),
						EmailAddresses: []*string{
							to.Ptr("test@microsoft.com"),
							to.Ptr("user@microsoft.com")},
						RetentionDays:           to.Ptr[int32](0),
						State:                   to.Ptr(armsynapse.SecurityAlertPolicyStateEnabled),
						StorageAccountAccessKey: to.Ptr(""),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ListSQLPoolSecurityAlertPolicies) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ListSQLPoolSecurityAlertPolicies)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/SqlPoolSecurityAlertPolicies_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSQLPoolSecurityAlertPolicies_Get(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetSqlPoolSecurityAlert.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a security alert of a SQL Analytics pool"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewSQLPoolSecurityAlertPoliciesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"securityalert-6852",
		"securityalert-2080",
		"testdb",
		armsynapse.SecurityAlertPolicyNameDefault,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetSqlPoolSecurityAlert.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.SQLPoolSecurityAlertPolicy{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Synapse/workspaces/sqlPools/securityAlertPolicies"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/securityalert-6852/providers/Microsoft.Synapse/workspaces/securityalert-2080/sqlPools/testdb"),
			Properties: &armsynapse.SecurityAlertPolicyProperties{
				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-10-08T00:00:00Z"); return t }()),
				DisabledAlerts: []*string{
					to.Ptr("Usage_Anomaly")},
				EmailAccountAdmins: to.Ptr(true),
				EmailAddresses: []*string{
					to.Ptr("test@microsoft.com"),
					to.Ptr("user@microsoft.com")},
				RetentionDays:           to.Ptr[int32](0),
				State:                   to.Ptr(armsynapse.SecurityAlertPolicyStateEnabled),
				StorageAccountAccessKey: to.Ptr(""),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SQLPoolSecurityAlertPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SQLPoolSecurityAlertPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetSqlPoolSecurityAlert.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSQLPoolSecurityAlertPolicies_CreateOrUpdate(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/CreateOrUpdateSqlPoolSecurityAlertWithAllParameters.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a Sql pool's threat detection policy with all parameters"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewSQLPoolSecurityAlertPoliciesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"securityalert-4799",
		"securityalert-6440",
		"testdb",
		armsynapse.SecurityAlertPolicyNameDefault,
		armsynapse.SQLPoolSecurityAlertPolicy{
			Properties: &armsynapse.SecurityAlertPolicyProperties{
				DisabledAlerts: []*string{
					to.Ptr("Sql_Injection"),
					to.Ptr("Usage_Anomaly")},
				EmailAccountAdmins: to.Ptr(true),
				EmailAddresses: []*string{
					to.Ptr("test@microsoft.com"),
					to.Ptr("user@microsoft.com")},
				RetentionDays:           to.Ptr[int32](6),
				State:                   to.Ptr(armsynapse.SecurityAlertPolicyStateEnabled),
				StorageAccountAccessKey: to.Ptr("sdlfkjabc+sdlfkjsdlkfsjdfLDKFTERLKFDFKLjsdfksjdflsdkfD2342309432849328476458/3RSD=="),
				StorageEndpoint:         to.Ptr("https://mystorage.blob.core.windows.net"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/CreateOrUpdateSqlPoolSecurityAlertWithAllParameters.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.SQLPoolSecurityAlertPolicy{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Synapse/workspaces/sqlPools/securityAlertPolicies"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/securityalert-4799/providers/Microsoft.Synapse/workspaces/securityalert-6440/sqlPools/testdb"),
			Properties: &armsynapse.SecurityAlertPolicyProperties{
				DisabledAlerts: []*string{
					to.Ptr("Sql_Injection"),
					to.Ptr("Usage_Anomaly")},
				EmailAccountAdmins: to.Ptr(true),
				EmailAddresses: []*string{
					to.Ptr("test@microsoft.com"),
					to.Ptr("user@microsoft.com")},
				RetentionDays:           to.Ptr[int32](6),
				State:                   to.Ptr(armsynapse.SecurityAlertPolicyStateEnabled),
				StorageAccountAccessKey: to.Ptr(""),
				StorageEndpoint:         to.Ptr("https://mystorage.blob.core.windows.net"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SQLPoolSecurityAlertPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SQLPoolSecurityAlertPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/CreateOrUpdateSqlPoolSecurityAlertWithAllParameters.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/CreateOrUpdateSqlPoolSecurityAlertWithMinParameters.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a Sql pool's threat detection policy with minimal parameters"},
	})
	client = armsynapse.NewSQLPoolSecurityAlertPoliciesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"securityalert-4799",
		"securityalert-6440",
		"testdb",
		armsynapse.SecurityAlertPolicyNameDefault,
		armsynapse.SQLPoolSecurityAlertPolicy{
			Properties: &armsynapse.SecurityAlertPolicyProperties{
				State: to.Ptr(armsynapse.SecurityAlertPolicyStateEnabled),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/CreateOrUpdateSqlPoolSecurityAlertWithMinParameters.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.SQLPoolSecurityAlertPolicy{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Synapse/workspaces/sqlPools/securityAlertPolicies"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/securityalert-4799/providers/Microsoft.Synapse/workspaces/securityalert-6440/sqlPools/testdb"),
			Properties: &armsynapse.SecurityAlertPolicyProperties{
				DisabledAlerts:          []*string{},
				EmailAccountAdmins:      to.Ptr(true),
				EmailAddresses:          []*string{},
				RetentionDays:           to.Ptr[int32](0),
				State:                   to.Ptr(armsynapse.SecurityAlertPolicyStateEnabled),
				StorageAccountAccessKey: to.Ptr(""),
				StorageEndpoint:         to.Ptr(""),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SQLPoolSecurityAlertPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SQLPoolSecurityAlertPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/CreateOrUpdateSqlPoolSecurityAlertWithMinParameters.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSQLPoolVulnerabilityAssessmentRuleBaselines_CreateOrUpdate(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/CreateOrUpdateSqlPoolVulnerabilityAssessmentRuleBaseline.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Creates or updates a database's vulnerability assessment rule baseline."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewSQLPoolVulnerabilityAssessmentRuleBaselinesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"vulnerabilityaseessmenttest-4799",
		"vulnerabilityaseessmenttest-6440",
		"testdb",
		armsynapse.VulnerabilityAssessmentNameDefault,
		"VA1001",
		armsynapse.VulnerabilityAssessmentPolicyBaselineNameDefault,
		armsynapse.SQLPoolVulnerabilityAssessmentRuleBaseline{
			Properties: &armsynapse.SQLPoolVulnerabilityAssessmentRuleBaselineProperties{
				BaselineResults: []*armsynapse.SQLPoolVulnerabilityAssessmentRuleBaselineItem{
					{
						Result: []*string{
							to.Ptr("userA"),
							to.Ptr("SELECT")},
					},
					{
						Result: []*string{
							to.Ptr("userB"),
							to.Ptr("SELECT")},
					},
					{
						Result: []*string{
							to.Ptr("userC"),
							to.Ptr("SELECT"),
							to.Ptr("tableId_4")},
					}},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/CreateOrUpdateSqlPoolVulnerabilityAssessmentRuleBaseline.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.SQLPoolVulnerabilityAssessmentRuleBaseline{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Synapse/workspaces/sqlPools/vulnerabilityAssessments/rules/baselines"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/vulnerabilityaseessmenttest-4799/providers/Microsoft.Synapse/workspaces/vulnerabilityaseessmenttest-6440/sqlPools/testdb/vulnerabilityAssessments/default/rules/VA1001/baselines/default"),
			Properties: &armsynapse.SQLPoolVulnerabilityAssessmentRuleBaselineProperties{
				BaselineResults: []*armsynapse.SQLPoolVulnerabilityAssessmentRuleBaselineItem{
					{
						Result: []*string{
							to.Ptr("userA"),
							to.Ptr("SELECT")},
					},
					{
						Result: []*string{
							to.Ptr("userB"),
							to.Ptr("SELECT")},
					},
					{
						Result: []*string{
							to.Ptr("userC"),
							to.Ptr("SELECT"),
							to.Ptr("tableId_4")},
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SQLPoolVulnerabilityAssessmentRuleBaseline) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SQLPoolVulnerabilityAssessmentRuleBaseline)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/CreateOrUpdateSqlPoolVulnerabilityAssessmentRuleBaseline.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSQLPoolVulnerabilityAssessmentRuleBaselines_Delete(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/DeleteSqlPoolVulnerabilityAssessmentRuleBaseline.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Removes a database's vulnerability assessment rule baseline."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewSQLPoolVulnerabilityAssessmentRuleBaselinesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	_, err := client.Delete(ctx,
		"vulnerabilityaseessmenttest-4799",
		"vulnerabilityaseessmenttest-6440",
		"testdb",
		armsynapse.VulnerabilityAssessmentNameDefault,
		"VA1001",
		armsynapse.VulnerabilityAssessmentPolicyBaselineNameDefault,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/DeleteSqlPoolVulnerabilityAssessmentRuleBaseline.json: %v", err)
	}
}

func TestSQLPoolVulnerabilityAssessmentRuleBaselines_Get(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/SqlPoolVulnerabilityAssessmentRuleBaselineGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets a Sql pool's vulnerability assessment rule baseline."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewSQLPoolVulnerabilityAssessmentRuleBaselinesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"vulnerabilityaseessmenttest-4711",
		"vulnerabilityaseessmenttest-6411",
		"testdb",
		armsynapse.VulnerabilityAssessmentNameDefault,
		"VA1001",
		armsynapse.VulnerabilityAssessmentPolicyBaselineNameMaster,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/SqlPoolVulnerabilityAssessmentRuleBaselineGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.SQLPoolVulnerabilityAssessmentRuleBaseline{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Synapse/workspaces/sqlPools/vulnerabilityAssessments/rules/baselines"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/vulnerabilityaseessmenttest-4799/providers/Microsoft.Synapse/workspaces/vulnerabilityaseessmenttest-6440/sqlPools/testdb/vulnerabilityAssessments/default/rules/VA1001/baselines/default"),
			Properties: &armsynapse.SQLPoolVulnerabilityAssessmentRuleBaselineProperties{
				BaselineResults: []*armsynapse.SQLPoolVulnerabilityAssessmentRuleBaselineItem{
					{
						Result: []*string{
							to.Ptr("userA"),
							to.Ptr("SELECT")},
					},
					{
						Result: []*string{
							to.Ptr("userB"),
							to.Ptr("SELECT")},
					},
					{
						Result: []*string{
							to.Ptr("userC"),
							to.Ptr("SELECT"),
							to.Ptr("tableId_4")},
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SQLPoolVulnerabilityAssessmentRuleBaseline) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SQLPoolVulnerabilityAssessmentRuleBaseline)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/SqlPoolVulnerabilityAssessmentRuleBaselineGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestExtendedSQLPoolBlobAuditingPolicies_Get(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ExtendedSqlPoolBlobAuditingGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get an extended database's blob auditing policy"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewExtendedSQLPoolBlobAuditingPoliciesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"blobauditingtest-6852",
		"blobauditingtest-2080",
		"testdb",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ExtendedSqlPoolBlobAuditingGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.ExtendedSQLPoolBlobAuditingPolicy{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Synapse/workspaces/sqlPools/extendedAuditingSettings"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/blobauditingtest-6852/providers/Microsoft.Synapse/workspaces/blobauditingtest-2080/sqlPools/testdb"),
			Properties: &armsynapse.ExtendedSQLPoolBlobAuditingPolicyProperties{
				AuditActionsAndGroups:        []*string{},
				IsAzureMonitorTargetEnabled:  to.Ptr(false),
				IsStorageSecondaryKeyInUse:   to.Ptr(false),
				PredicateExpression:          to.Ptr("statement = 'select 1'"),
				RetentionDays:                to.Ptr[int32](0),
				State:                        to.Ptr(armsynapse.BlobAuditingPolicyStateDisabled),
				StorageAccountSubscriptionID: to.Ptr("00000000-0000-0000-0000-000000000000"),
				StorageEndpoint:              to.Ptr(""),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ExtendedSQLPoolBlobAuditingPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ExtendedSQLPoolBlobAuditingPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ExtendedSqlPoolBlobAuditingGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestExtendedSQLPoolBlobAuditingPolicies_CreateOrUpdate(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ExtendedSqlPoolAzureMonitorAuditingCreateMin.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update an extended SQL pool's azure monitor auditing policy with minimal parameters"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewExtendedSQLPoolBlobAuditingPoliciesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"blobauditingtest-4799",
		"blobauditingtest-6440",
		"testdb",
		armsynapse.ExtendedSQLPoolBlobAuditingPolicy{
			Properties: &armsynapse.ExtendedSQLPoolBlobAuditingPolicyProperties{
				IsAzureMonitorTargetEnabled: to.Ptr(true),
				State:                       to.Ptr(armsynapse.BlobAuditingPolicyStateEnabled),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ExtendedSqlPoolAzureMonitorAuditingCreateMin.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.ExtendedSQLPoolBlobAuditingPolicy{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Synapse/workspaces/sqlPools/extendedAuditingSettings"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/blobauditingtest-4799/providers/Microsoft.Synapse/workspaces/blobauditingtest-6440/sqlPools/testdb"),
			Properties: &armsynapse.ExtendedSQLPoolBlobAuditingPolicyProperties{
				AuditActionsAndGroups: []*string{
					to.Ptr("SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP"),
					to.Ptr("FAILED_DATABASE_AUTHENTICATION_GROUP"),
					to.Ptr("BATCH_COMPLETED_GROUP")},
				IsAzureMonitorTargetEnabled:  to.Ptr(true),
				IsStorageSecondaryKeyInUse:   to.Ptr(false),
				RetentionDays:                to.Ptr[int32](0),
				State:                        to.Ptr(armsynapse.BlobAuditingPolicyStateEnabled),
				StorageAccountSubscriptionID: to.Ptr("00000000-0000-0000-0000-000000000000"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ExtendedSQLPoolBlobAuditingPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ExtendedSQLPoolBlobAuditingPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ExtendedSqlPoolAzureMonitorAuditingCreateMin.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ExtendedSqlPoolBlobAuditingCreateMax.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update an extended Sql pool's blob auditing policy with all parameters"},
	})
	client = armsynapse.NewExtendedSQLPoolBlobAuditingPoliciesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"blobauditingtest-4799",
		"blobauditingtest-6440",
		"testdb",
		armsynapse.ExtendedSQLPoolBlobAuditingPolicy{
			Properties: &armsynapse.ExtendedSQLPoolBlobAuditingPolicyProperties{
				AuditActionsAndGroups: []*string{
					to.Ptr("DATABASE_LOGOUT_GROUP"),
					to.Ptr("DATABASE_ROLE_MEMBER_CHANGE_GROUP"),
					to.Ptr("UPDATE on database::TestDatabaseName by public")},
				IsAzureMonitorTargetEnabled:  to.Ptr(true),
				IsStorageSecondaryKeyInUse:   to.Ptr(false),
				PredicateExpression:          to.Ptr("statement = 'select 1'"),
				RetentionDays:                to.Ptr[int32](6),
				State:                        to.Ptr(armsynapse.BlobAuditingPolicyStateEnabled),
				StorageAccountAccessKey:      to.Ptr("sdlfkjabc+sdlfkjsdlkfsjdfLDKFTERLKFDFKLjsdfksjdflsdkfD2342309432849328476458/3RSD=="),
				StorageAccountSubscriptionID: to.Ptr("00000000-1234-0000-5678-000000000000"),
				StorageEndpoint:              to.Ptr("https://mystorage.blob.core.windows.net"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ExtendedSqlPoolBlobAuditingCreateMax.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.ExtendedSQLPoolBlobAuditingPolicy{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Synapse/workspaces/sqlPools/extendedAuditingSettings"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/blobauditingtest-4799/providers/Microsoft.Synapse/workspaces/blobauditingtest-6440/sqlPools/testdb"),
			Properties: &armsynapse.ExtendedSQLPoolBlobAuditingPolicyProperties{
				AuditActionsAndGroups: []*string{
					to.Ptr("DATABASE_LOGOUT_GROUP"),
					to.Ptr("DATABASE_ROLE_MEMBER_CHANGE_GROUP"),
					to.Ptr("UPDATE on database::TestDatabaseName by public")},
				IsAzureMonitorTargetEnabled:  to.Ptr(true),
				IsStorageSecondaryKeyInUse:   to.Ptr(false),
				PredicateExpression:          to.Ptr("statement = 'select 1'"),
				RetentionDays:                to.Ptr[int32](0),
				State:                        to.Ptr(armsynapse.BlobAuditingPolicyStateEnabled),
				StorageAccountSubscriptionID: to.Ptr("00000000-1234-0000-5678-000000000000"),
				StorageEndpoint:              to.Ptr("https://mystorage.blob.core.windows.net"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ExtendedSQLPoolBlobAuditingPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ExtendedSQLPoolBlobAuditingPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ExtendedSqlPoolBlobAuditingCreateMax.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ExtendedSqlPoolBlobAuditingCreateMin.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update an extended Sql pool's blob auditing policy with minimal parameters"},
	})
	client = armsynapse.NewExtendedSQLPoolBlobAuditingPoliciesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"blobauditingtest-4799",
		"blobauditingtest-6440",
		"testdb",
		armsynapse.ExtendedSQLPoolBlobAuditingPolicy{
			Properties: &armsynapse.ExtendedSQLPoolBlobAuditingPolicyProperties{
				State:                   to.Ptr(armsynapse.BlobAuditingPolicyStateEnabled),
				StorageAccountAccessKey: to.Ptr("sdlfkjabc+sdlfkjsdlkfsjdfLDKFTERLKFDFKLjsdfksjdflsdkfD2342309432849328476458/3RSD=="),
				StorageEndpoint:         to.Ptr("https://mystorage.blob.core.windows.net"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ExtendedSqlPoolBlobAuditingCreateMin.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.ExtendedSQLPoolBlobAuditingPolicy{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Synapse/workspaces/sqlPools/extendedAuditingSettings"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/blobauditingtest-4799/providers/Microsoft.Synapse/workspaces/blobauditingtest-6440/sqlPools/testdb"),
			Properties: &armsynapse.ExtendedSQLPoolBlobAuditingPolicyProperties{
				AuditActionsAndGroups: []*string{
					to.Ptr("SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP"),
					to.Ptr("FAILED_DATABASE_AUTHENTICATION_GROUP"),
					to.Ptr("BATCH_COMPLETED_GROUP")},
				IsAzureMonitorTargetEnabled:  to.Ptr(false),
				IsStorageSecondaryKeyInUse:   to.Ptr(false),
				RetentionDays:                to.Ptr[int32](0),
				State:                        to.Ptr(armsynapse.BlobAuditingPolicyStateEnabled),
				StorageAccountSubscriptionID: to.Ptr("00000000-0000-0000-0000-000000000000"),
				StorageEndpoint:              to.Ptr("https://mystorage.blob.core.windows.net"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ExtendedSQLPoolBlobAuditingPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ExtendedSQLPoolBlobAuditingPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ExtendedSqlPoolBlobAuditingCreateMin.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDataMaskingPolicies_CreateOrUpdate(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/DataMaskingPolicyCreateOrUpdateMax.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update data masking policy max"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewDataMaskingPoliciesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"sqlcrudtest-6852",
		"sqlcrudtest-2080",
		"sqlcrudtest-331",
		armsynapse.DataMaskingPolicy{
			Properties: &armsynapse.DataMaskingPolicyProperties{
				DataMaskingState: to.Ptr(armsynapse.DataMaskingStateEnabled),
				ExemptPrincipals: to.Ptr("testuser;"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/DataMaskingPolicyCreateOrUpdateMax.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.DataMaskingPolicy{
			Name:      to.Ptr("Default"),
			Type:      to.Ptr("Microsoft.Synapse/workspaces/sqlPools/dataMaskingPolicies"),
			ID:        to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-6852/providers/Microsoft.Synapse/workspaces/sqlcrudtest-2080/sqlPools/sqlcrudtest-331/dataMaskingPolicies/Default"),
			Location:  to.Ptr("Central US"),
			ManagedBy: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-6852/providers/Microsoft.Synapse/workspaces/sqlcrudtest-2080/sqlPools/sqlcrudtest-331"),
			Properties: &armsynapse.DataMaskingPolicyProperties{
				ApplicationPrincipals: to.Ptr(""),
				DataMaskingState:      to.Ptr(armsynapse.DataMaskingStateEnabled),
				ExemptPrincipals:      to.Ptr("testuser;"),
				MaskingLevel:          to.Ptr(""),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DataMaskingPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DataMaskingPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/DataMaskingPolicyCreateOrUpdateMax.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/DataMaskingPolicyCreateOrUpdateMin.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update data masking policy min"},
	})
	client = armsynapse.NewDataMaskingPoliciesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"sqlcrudtest-6852",
		"sqlcrudtest-2080",
		"sqlcrudtest-331",
		armsynapse.DataMaskingPolicy{
			Properties: &armsynapse.DataMaskingPolicyProperties{
				DataMaskingState: to.Ptr(armsynapse.DataMaskingStateEnabled),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/DataMaskingPolicyCreateOrUpdateMin.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.DataMaskingPolicy{
			Name:      to.Ptr("Default"),
			Type:      to.Ptr("Microsoft.Synapse/workspaces/sqlPools/dataMaskingPolicies"),
			ID:        to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-6852/providers/Microsoft.Synapse/workspaces/sqlcrudtest-2080/sqlPools/sqlcrudtest-331/dataMaskingPolicies/Default"),
			Location:  to.Ptr("Central US"),
			ManagedBy: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-6852/providers/Microsoft.Synapse/workspaces/sqlcrudtest-2080/sqlPools/sqlcrudtest-331"),
			Properties: &armsynapse.DataMaskingPolicyProperties{
				ApplicationPrincipals: to.Ptr(""),
				DataMaskingState:      to.Ptr(armsynapse.DataMaskingStateEnabled),
				ExemptPrincipals:      to.Ptr(""),
				MaskingLevel:          to.Ptr(""),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DataMaskingPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DataMaskingPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/DataMaskingPolicyCreateOrUpdateMin.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDataMaskingPolicies_Get(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/DataMaskingPolicyGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get data masking policy"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewDataMaskingPoliciesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"sqlcrudtest-6852",
		"sqlcrudtest-2080",
		"sqlcrudtest-331",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/DataMaskingPolicyGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.DataMaskingPolicy{
			Name:      to.Ptr("Default"),
			Type:      to.Ptr("Microsoft.Synapse/workspaces/sqlPools/dataMaskingPolicies"),
			ID:        to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-6852/providers/Microsoft.Synapse/workspaces/sqlcrudtest-2080/sqlPools/sqlcrudtest-331/dataMaskingPolicies/Default"),
			Location:  to.Ptr("Central US"),
			ManagedBy: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-6852/providers/Microsoft.Synapse/workspaces/sqlcrudtest-2080/sqlPools/sqlcrudtest-331"),
			Properties: &armsynapse.DataMaskingPolicyProperties{
				ApplicationPrincipals: to.Ptr(""),
				DataMaskingState:      to.Ptr(armsynapse.DataMaskingStateEnabled),
				ExemptPrincipals:      to.Ptr(""),
				MaskingLevel:          to.Ptr(""),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DataMaskingPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DataMaskingPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/DataMaskingPolicyGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDataMaskingRules_CreateOrUpdate(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/DataMaskingRuleCreateOrUpdateDefaultMax.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create/Update data masking rule for default max"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewDataMaskingRulesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"sqlcrudtest-6852",
		"sqlcrudtest-2080",
		"sqlcrudtest-331",
		"rule1",
		armsynapse.DataMaskingRule{
			Properties: &armsynapse.DataMaskingRuleProperties{
				AliasName:       to.Ptr("nickname"),
				ColumnName:      to.Ptr("test1"),
				MaskingFunction: to.Ptr(armsynapse.DataMaskingFunctionDefault),
				RuleState:       to.Ptr(armsynapse.DataMaskingRuleStateEnabled),
				SchemaName:      to.Ptr("dbo"),
				TableName:       to.Ptr("Table_1"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/DataMaskingRuleCreateOrUpdateDefaultMax.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.DataMaskingRule{
			Type:     to.Ptr("Microsoft.Synapse/workspaces/sqlPools/dataMaskingPolicies/rules"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-6852/providers/Microsoft.Synapse/workspaces/sqlcrudtest-6852/sqlPools/sqlcrudtest-331/dataMaskingPolicies/Default/rules/"),
			Location: to.Ptr("Central US"),
			Properties: &armsynapse.DataMaskingRuleProperties{
				AliasName:       to.Ptr("nickname"),
				ColumnName:      to.Ptr("test1"),
				ID:              to.Ptr("dbo_Table_1_test1"),
				MaskingFunction: to.Ptr(armsynapse.DataMaskingFunctionDefault),
				RuleState:       to.Ptr(armsynapse.DataMaskingRuleStateEnabled),
				SchemaName:      to.Ptr("dbo"),
				TableName:       to.Ptr("Table_1"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DataMaskingRule) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DataMaskingRule)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/DataMaskingRuleCreateOrUpdateDefaultMax.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/DataMaskingRuleCreateOrUpdateDefaultMin.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create/Update data masking rule for default min"},
	})
	client = armsynapse.NewDataMaskingRulesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"sqlcrudtest-6852",
		"sqlcrudtest-2080",
		"sqlcrudtest-331",
		"rule1",
		armsynapse.DataMaskingRule{
			Properties: &armsynapse.DataMaskingRuleProperties{
				ColumnName:      to.Ptr("test1"),
				MaskingFunction: to.Ptr(armsynapse.DataMaskingFunctionDefault),
				SchemaName:      to.Ptr("dbo"),
				TableName:       to.Ptr("Table_1"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/DataMaskingRuleCreateOrUpdateDefaultMin.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.DataMaskingRule{
			Type:     to.Ptr("Microsoft.Synapse/workspaces/sqlPools/dataMaskingPolicies/rules"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-6852/providers/Microsoft.Synapse/workspaces/sqlcrudtest-6852/sqlPools/sqlcrudtest-331/dataMaskingPolicies/Default/rules/"),
			Location: to.Ptr("Central US"),
			Properties: &armsynapse.DataMaskingRuleProperties{
				ColumnName:      to.Ptr("test1"),
				ID:              to.Ptr("dbo_Table_1_test1"),
				MaskingFunction: to.Ptr(armsynapse.DataMaskingFunctionDefault),
				RuleState:       to.Ptr(armsynapse.DataMaskingRuleStateEnabled),
				SchemaName:      to.Ptr("dbo"),
				TableName:       to.Ptr("Table_1"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DataMaskingRule) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DataMaskingRule)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/DataMaskingRuleCreateOrUpdateDefaultMin.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/DataMaskingRuleCreateOrUpdateNumber.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create/Update data masking rule for numbers"},
	})
	client = armsynapse.NewDataMaskingRulesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"sqlcrudtest-6852",
		"sqlcrudtest-2080",
		"sqlcrudtest-331",
		"rule1",
		armsynapse.DataMaskingRule{
			Properties: &armsynapse.DataMaskingRuleProperties{
				ColumnName:      to.Ptr("test1"),
				MaskingFunction: to.Ptr(armsynapse.DataMaskingFunctionNumber),
				NumberFrom:      to.Ptr("0"),
				NumberTo:        to.Ptr("2"),
				SchemaName:      to.Ptr("dbo"),
				TableName:       to.Ptr("Table_1"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/DataMaskingRuleCreateOrUpdateNumber.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.DataMaskingRule{
			Type:     to.Ptr("Microsoft.Synapse/workspaces/sqlPools/dataMaskingPolicies/rules"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-6852/providers/Microsoft.Synapse/workspaces/sqlcrudtest-6852/sqlPools/sqlcrudtest-331/dataMaskingPolicies/Default/rules/"),
			Location: to.Ptr("Central US"),
			Properties: &armsynapse.DataMaskingRuleProperties{
				ColumnName:      to.Ptr("test1"),
				ID:              to.Ptr("dbo_Table_1_test1"),
				MaskingFunction: to.Ptr(armsynapse.DataMaskingFunctionNumber),
				NumberFrom:      to.Ptr("0"),
				NumberTo:        to.Ptr("2"),
				RuleState:       to.Ptr(armsynapse.DataMaskingRuleStateEnabled),
				SchemaName:      to.Ptr("dbo"),
				TableName:       to.Ptr("Table_1"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DataMaskingRule) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DataMaskingRule)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/DataMaskingRuleCreateOrUpdateNumber.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/DataMaskingRuleCreateOrUpdateText.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create/Update data masking rule for text"},
	})
	client = armsynapse.NewDataMaskingRulesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"sqlcrudtest-6852",
		"sqlcrudtest-2080",
		"sqlcrudtest-331",
		"rule1",
		armsynapse.DataMaskingRule{
			Properties: &armsynapse.DataMaskingRuleProperties{
				ColumnName:        to.Ptr("test1"),
				MaskingFunction:   to.Ptr(armsynapse.DataMaskingFunctionText),
				PrefixSize:        to.Ptr("1"),
				ReplacementString: to.Ptr("asdf"),
				SchemaName:        to.Ptr("dbo"),
				SuffixSize:        to.Ptr("0"),
				TableName:         to.Ptr("Table_1"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/DataMaskingRuleCreateOrUpdateText.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.DataMaskingRule{
			Type:     to.Ptr("Microsoft.Synapse/workspaces/sqlPools/dataMaskingPolicies/rules"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-6852/providers/Microsoft.Synapse/workspaces/sqlcrudtest-6852/sqlPools/sqlcrudtest-331/dataMaskingPolicies/Default/rules/"),
			Location: to.Ptr("Central US"),
			Properties: &armsynapse.DataMaskingRuleProperties{
				ColumnName:        to.Ptr("test1"),
				ID:                to.Ptr("dbo_Table_1_test1"),
				MaskingFunction:   to.Ptr(armsynapse.DataMaskingFunctionText),
				PrefixSize:        to.Ptr("1"),
				ReplacementString: to.Ptr("asdf"),
				RuleState:         to.Ptr(armsynapse.DataMaskingRuleStateEnabled),
				SchemaName:        to.Ptr("dbo"),
				SuffixSize:        to.Ptr("0"),
				TableName:         to.Ptr("Table_1"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DataMaskingRule) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DataMaskingRule)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/DataMaskingRuleCreateOrUpdateText.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDataMaskingRules_Get(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/DataMaskingRuleGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get data masking rule"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewDataMaskingRulesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"sqlcrudtest-6852",
		"sqlcrudtest-2080",
		"sqlcrudtest-331",
		"rule1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/DataMaskingRuleGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.DataMaskingRule{
			Name:     to.Ptr("rule1"),
			Type:     to.Ptr("Microsoft.Synapse/workspaces/sqlPools/dataMaskingPolicies/rules"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-6852/providers/Microsoft.Synapse/workspaces/sqlcrudtest-6852/sqlPools/sqlcrudtest-331/dataMaskingPolicies/Default/rules/"),
			Location: to.Ptr("Central US"),
			Properties: &armsynapse.DataMaskingRuleProperties{
				ColumnName:        to.Ptr("test1"),
				ID:                to.Ptr("dbo_Table_1_test1"),
				MaskingFunction:   to.Ptr(armsynapse.DataMaskingFunctionText),
				PrefixSize:        to.Ptr("1"),
				ReplacementString: to.Ptr("asdf"),
				RuleState:         to.Ptr(armsynapse.DataMaskingRuleStateEnabled),
				SchemaName:        to.Ptr("dbo"),
				SuffixSize:        to.Ptr("0"),
				TableName:         to.Ptr("Table_1"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DataMaskingRule) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DataMaskingRule)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/DataMaskingRuleGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSQLPoolColumns_Get(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/SqlPoolColumnGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get database column"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewSQLPoolColumnsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"myRG",
		"serverName",
		"myDatabase",
		"dbo",
		"table1",
		"column1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/SqlPoolColumnGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.SQLPoolColumn{
			Name: to.Ptr("column1"),
			Type: to.Ptr("Microsoft.Synapse/workspaces/sqlPools/schemas/tables/columns"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/myRG/providers/Microsoft.Synapse/workspaces/serverName/sqlPools/myDatabase/schemas/dbo/tables/table1/columns/column1"),
			Properties: &armsynapse.SQLPoolColumnProperties{
				ColumnType: to.Ptr(armsynapse.ColumnDataTypeBit),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SQLPoolColumn) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SQLPoolColumn)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/SqlPoolColumnGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSQLPoolWorkloadGroup_Get(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetSqlPoolWorkloadGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a a workload group of a SQL Analytics pool"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewSQLPoolWorkloadGroupClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"sqlcrudtest-6852",
		"sqlcrudtest-2080",
		"sqlcrudtest-9187",
		"smallrc",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetSqlPoolWorkloadGroup.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.WorkloadGroup{
			Name: to.Ptr("smallrc"),
			Type: to.Ptr("Microsoft.Synapse/workspaces/sqlPools/workloadGroups"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-6852/providers/Microsoft.Synapse/workspaces/sqlcrudtest-2080/sqlPools/sqlcrudtest-9187/workloadGroups/smallrc"),
			Properties: &armsynapse.WorkloadGroupProperties{
				Importance:                   to.Ptr("normal"),
				MaxResourcePercent:           to.Ptr[int32](100),
				MaxResourcePercentPerRequest: to.Ptr[float64](3),
				MinResourcePercent:           to.Ptr[int32](0),
				MinResourcePercentPerRequest: to.Ptr[float64](3),
				QueryExecutionTimeout:        to.Ptr[int32](0),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.WorkloadGroup) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.WorkloadGroup)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetSqlPoolWorkloadGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSQLPoolWorkloadGroup_CreateOrUpdate(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/CreateOrUpdateSqlPoolWorkloadGroupMax.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a workload group with all properties specified."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewSQLPoolWorkloadGroupClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"sqlcrudtest-6852",
		"sqlcrudtest-2080",
		"sqlcrudtest-9187",
		"smallrc",
		armsynapse.WorkloadGroup{
			Properties: &armsynapse.WorkloadGroupProperties{
				Importance:                   to.Ptr("normal"),
				MaxResourcePercent:           to.Ptr[int32](100),
				MaxResourcePercentPerRequest: to.Ptr[float64](3),
				MinResourcePercent:           to.Ptr[int32](0),
				MinResourcePercentPerRequest: to.Ptr[float64](3),
				QueryExecutionTimeout:        to.Ptr[int32](0),
			},
		},
		&armsynapse.SQLPoolWorkloadGroupClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/CreateOrUpdateSqlPoolWorkloadGroupMax.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/CreateOrUpdateSqlPoolWorkloadGroupMax.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.WorkloadGroup{
			Name: to.Ptr("smallrc"),
			Type: to.Ptr("Microsoft.Synapse/workspaces/sqlPools/workloadGroups"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-6852/providers/Microsoft.Synapse/workspaces/sqlcrudtest-2080/sqlPools/workloadGroups/smallrc"),
			Properties: &armsynapse.WorkloadGroupProperties{
				Importance:                   to.Ptr("normal"),
				MaxResourcePercent:           to.Ptr[int32](100),
				MaxResourcePercentPerRequest: to.Ptr[float64](3),
				MinResourcePercent:           to.Ptr[int32](0),
				MinResourcePercentPerRequest: to.Ptr[float64](3),
				QueryExecutionTimeout:        to.Ptr[int32](0),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.WorkloadGroup) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.WorkloadGroup)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/CreateOrUpdateSqlPoolWorkloadGroupMax.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/CreateOrUpdateSqlPoolWorkloadGroupMin.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a workload group with the required properties specified."},
	})
	client = armsynapse.NewSQLPoolWorkloadGroupClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"sqlcrudtest-6852",
		"sqlcrudtest-2080",
		"sqlcrudtest-9187",
		"smallrc",
		armsynapse.WorkloadGroup{
			Properties: &armsynapse.WorkloadGroupProperties{
				MaxResourcePercent:           to.Ptr[int32](100),
				MinResourcePercent:           to.Ptr[int32](0),
				MinResourcePercentPerRequest: to.Ptr[float64](3),
			},
		},
		&armsynapse.SQLPoolWorkloadGroupClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/CreateOrUpdateSqlPoolWorkloadGroupMin.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/CreateOrUpdateSqlPoolWorkloadGroupMin.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.WorkloadGroup{
			Name: to.Ptr("smallrc"),
			Type: to.Ptr("Microsoft.Synapse/workspaces/sqlPools/workloadGroups"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-6852/providers/Microsoft.Synapse/workspaces/sqlcrudtest-2080/sqlPools/workloadGroups/smallrc"),
			Properties: &armsynapse.WorkloadGroupProperties{
				Importance:                   to.Ptr("normal"),
				MaxResourcePercent:           to.Ptr[int32](100),
				MaxResourcePercentPerRequest: to.Ptr[float64](3),
				MinResourcePercent:           to.Ptr[int32](0),
				MinResourcePercentPerRequest: to.Ptr[float64](3),
				QueryExecutionTimeout:        to.Ptr[int32](0),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.WorkloadGroup) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.WorkloadGroup)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/CreateOrUpdateSqlPoolWorkloadGroupMin.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSQLPoolWorkloadGroup_Delete(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/DeleteSqlPoolWorkloadGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a workload group of a SQL Analytics pool"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewSQLPoolWorkloadGroupClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"sqlcrudtest-6852",
		"sqlcrudtest-2080",
		"sqlcrudtest-9187",
		"wlm_workloadgroup",
		&armsynapse.SQLPoolWorkloadGroupClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/DeleteSqlPoolWorkloadGroup.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/DeleteSqlPoolWorkloadGroup.json: %v", err)
	}
}

func TestSQLPoolWorkloadGroup_List(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetSqlPoolWorkloadGroupList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get the list of workload groups of a SQL Analytics pool"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewSQLPoolWorkloadGroupClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.List("sqlcrudtest-6852",
		"sqlcrudtest-2080",
		"sqlcrudtest-9187",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetSqlPoolWorkloadGroupList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsynapse.WorkloadGroupListResult{
			Value: []*armsynapse.WorkloadGroup{
				{
					Name: to.Ptr("smallrc"),
					Type: to.Ptr("Microsoft.Synapse/workspaces/sqlPools/workloadGroups"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-6852/providers/Microsoft.Synapse/workspaces/sqlcrudtest-2080/sqlPools/sqlcrudtest-9187/workloadGroups/smallrc"),
					Properties: &armsynapse.WorkloadGroupProperties{
						Importance:                   to.Ptr("normal"),
						MaxResourcePercent:           to.Ptr[int32](100),
						MaxResourcePercentPerRequest: to.Ptr[float64](5),
						MinResourcePercent:           to.Ptr[int32](0),
						MinResourcePercentPerRequest: to.Ptr[float64](5),
						QueryExecutionTimeout:        to.Ptr[int32](0),
					},
				},
				{
					Name: to.Ptr("mediumrc"),
					Type: to.Ptr("Microsoft.Synapse/workspaces/sqlPools/workloadGroups"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-6852/providers/Microsoft.Synapse/workspaces/sqlcrudtest-2080/sqlPools/sqlcrudtest-9187/workloadGroups/mediumrc"),
					Properties: &armsynapse.WorkloadGroupProperties{
						Importance:                   to.Ptr("normal"),
						MaxResourcePercent:           to.Ptr[int32](100),
						MaxResourcePercentPerRequest: to.Ptr[float64](10),
						MinResourcePercent:           to.Ptr[int32](0),
						MinResourcePercentPerRequest: to.Ptr[float64](10),
						QueryExecutionTimeout:        to.Ptr[int32](0),
					},
				},
				{
					Name: to.Ptr("largerc"),
					Type: to.Ptr("Microsoft.Synapse/workspaces/sqlPools/workloadGroups"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-6852/providers/Microsoft.Synapse/workspaces/sqlcrudtest-2080/sqlPools/sqlcrudtest-9187/workloadGroups/largerc"),
					Properties: &armsynapse.WorkloadGroupProperties{
						Importance:                   to.Ptr("high"),
						MaxResourcePercent:           to.Ptr[int32](100),
						MaxResourcePercentPerRequest: to.Ptr[float64](20),
						MinResourcePercent:           to.Ptr[int32](0),
						MinResourcePercentPerRequest: to.Ptr[float64](20),
						QueryExecutionTimeout:        to.Ptr[int32](0),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.WorkloadGroupListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.WorkloadGroupListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetSqlPoolWorkloadGroupList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSQLPoolWorkloadClassifier_Get(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetSqlPoolWorkloadGroupWorkloadClassifier.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a workload classifier for SQL Analytics pool's workload group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewSQLPoolWorkloadClassifierClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"sqlcrudtest-6852",
		"sqlcrudtest-2080",
		"sqlcrudtest-9187",
		"wlm_workloadgroup",
		"wlm_classifier",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetSqlPoolWorkloadGroupWorkloadClassifier.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.WorkloadClassifier{
			Name: to.Ptr("wlm_classifier"),
			Type: to.Ptr("Microsoft.Synapse/workspaces/sqlPools/workloadGroups/workloadClassifiers"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-6852/providers/Microsoft.Synapse/workspaces/sqlcrudtest-2080/sqlPools/sqlcrudtest-9187/workloadGroups/wlm_workloadgroup/workloadClassifiers/wlm_classifier"),
			Properties: &armsynapse.WorkloadClassifierProperties{
				Context:    to.Ptr("test_context"),
				EndTime:    to.Ptr("14:00"),
				Importance: to.Ptr("high"),
				Label:      to.Ptr("test_label"),
				MemberName: to.Ptr("dbo"),
				StartTime:  to.Ptr("12:00"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.WorkloadClassifier) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.WorkloadClassifier)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetSqlPoolWorkloadGroupWorkloadClassifier.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSQLPoolWorkloadClassifier_CreateOrUpdate(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/CreateOrUpdateSqlPoolWorkloadClassifierMax.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a workload classifier with all properties specified."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewSQLPoolWorkloadClassifierClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"sqlcrudtest-6852",
		"sqlcrudtest-2080",
		"sqlcrudtest-9187",
		"wlm_workloadgroup",
		"wlm_workloadclassifier",
		armsynapse.WorkloadClassifier{
			Properties: &armsynapse.WorkloadClassifierProperties{
				Context:    to.Ptr("test_context"),
				EndTime:    to.Ptr("14:00"),
				Importance: to.Ptr("high"),
				Label:      to.Ptr("test_label"),
				MemberName: to.Ptr("dbo"),
				StartTime:  to.Ptr("12:00"),
			},
		},
		&armsynapse.SQLPoolWorkloadClassifierClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/CreateOrUpdateSqlPoolWorkloadClassifierMax.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/CreateOrUpdateSqlPoolWorkloadClassifierMax.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.WorkloadClassifier{
			Name: to.Ptr("wlm_workloadclassifier"),
			Type: to.Ptr("Microsoft.Synapse/workspaces/sqlPools/workloadGroups/workloadClassifiers"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-6852/providers/Microsoft.Synapse/workspaces/sqlcrudtest-2080/sqlPools/sqlcrudtest-9187/workloadGroups/wlm_workloadgroup/workloadClassifiers/wlm_workloadclassifier"),
			Properties: &armsynapse.WorkloadClassifierProperties{
				Context:    to.Ptr("test_context"),
				EndTime:    to.Ptr("14:00"),
				Importance: to.Ptr("high"),
				Label:      to.Ptr("test_label"),
				MemberName: to.Ptr("dbo"),
				StartTime:  to.Ptr("12:00"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.WorkloadClassifier) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.WorkloadClassifier)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/CreateOrUpdateSqlPoolWorkloadClassifierMax.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/CreateOrUpdateSqlPoolWorkloadClassifierMin.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a workload classifier with the required properties specified."},
	})
	client = armsynapse.NewSQLPoolWorkloadClassifierClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"sqlcrudtest-6852",
		"sqlcrudtest-2080",
		"sqlcrudtest-9187",
		"wlm_workloadgroup",
		"wlm_workloadclassifier",
		armsynapse.WorkloadClassifier{
			Properties: &armsynapse.WorkloadClassifierProperties{
				MemberName: to.Ptr("dbo"),
			},
		},
		&armsynapse.SQLPoolWorkloadClassifierClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/CreateOrUpdateSqlPoolWorkloadClassifierMin.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/CreateOrUpdateSqlPoolWorkloadClassifierMin.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.WorkloadClassifier{
			Name: to.Ptr("wlm_workloadclassifier"),
			Type: to.Ptr("Microsoft.Synapse/workspaces/sqlPools/workloadGroups/workloadClassifiers"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-6852/providers/Microsoft.Synapse/workspaces/sqlcrudtest-2080/sqlPools/sqlcrudtest-9187/workloadGroups/wlm_workloadgroup/workloadClassifiers/wlm_workloadclassifier"),
			Properties: &armsynapse.WorkloadClassifierProperties{
				Context:    to.Ptr(""),
				EndTime:    to.Ptr(""),
				Importance: to.Ptr(""),
				Label:      to.Ptr(""),
				MemberName: to.Ptr("dbo"),
				StartTime:  to.Ptr(""),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.WorkloadClassifier) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.WorkloadClassifier)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/CreateOrUpdateSqlPoolWorkloadClassifierMin.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSQLPoolWorkloadClassifier_Delete(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/DeleteSqlPoolWorkloadGroupWorkloadClassifer.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a workload classifier of a SQL Analytics pool's workload group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewSQLPoolWorkloadClassifierClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"sqlcrudtest-6852",
		"sqlcrudtest-2080",
		"sqlcrudtest-9187",
		"wlm_workloadgroup",
		"wlm_workloadclassifier",
		&armsynapse.SQLPoolWorkloadClassifierClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/DeleteSqlPoolWorkloadGroupWorkloadClassifer.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/DeleteSqlPoolWorkloadGroupWorkloadClassifer.json: %v", err)
	}
}

func TestSQLPoolWorkloadClassifier_List(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetSqlPoolWorkloadGroupWorkloadClassifierList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get the list of workload classifiers of a SQL Analytics pool's workload group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewSQLPoolWorkloadClassifierClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.List("sqlcrudtest-6852",
		"sqlcrudtest-2080",
		"sqlcrudtest-9187",
		"wlm_workloadgroup",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetSqlPoolWorkloadGroupWorkloadClassifierList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsynapse.WorkloadClassifierListResult{
			Value: []*armsynapse.WorkloadClassifier{
				{
					Name: to.Ptr("classifier3"),
					Type: to.Ptr("Microsoft.Synapse/workspaces/sqlPools/workloadGroups/workloadClassifiers"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-6852/providers/Microsoft.Synapse/workspaces/sqlcrudtest-2080/sqlPools/sqlcrudtest-9187/workloadGroups/wlm_workloadgroup/workloadClassifiers/classifier3"),
					Properties: &armsynapse.WorkloadClassifierProperties{
						Context:    to.Ptr(""),
						EndTime:    to.Ptr(""),
						Importance: to.Ptr("high"),
						Label:      to.Ptr(""),
						MemberName: to.Ptr("dbo"),
						StartTime:  to.Ptr(""),
					},
				},
				{
					Name: to.Ptr("classifier1"),
					Type: to.Ptr("Microsoft.Synapse/workspaces/sqlPools/workloadGroups/workloadClassifiers"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-6852/providers/Microsoft.Synapse/workspaces/sqlcrudtest-2080/sqlPools/sqlcrudtest-9187/workloadGroups/wlm_workloadgroup/workloadClassifiers/classifier1"),
					Properties: &armsynapse.WorkloadClassifierProperties{
						Context:    to.Ptr("test_context"),
						EndTime:    to.Ptr("14:00"),
						Importance: to.Ptr("high"),
						Label:      to.Ptr("test_label"),
						MemberName: to.Ptr("dbo"),
						StartTime:  to.Ptr("12:00"),
					},
				},
				{
					Name: to.Ptr("classifier2"),
					Type: to.Ptr("Microsoft.Synapse/workspaces/sqlPools/workloadGroups/workloadClassifiers"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/sqlcrudtest-6852/providers/Microsoft.Synapse/workspaces/sqlcrudtest-2080/sqlPools/sqlcrudtest-9187/workloadGroups/wlm_workloadgroup/workloadClassifiers/classifier2"),
					Properties: &armsynapse.WorkloadClassifierProperties{
						Context:    to.Ptr(""),
						EndTime:    to.Ptr("17:00"),
						Importance: to.Ptr("high"),
						Label:      to.Ptr(""),
						MemberName: to.Ptr("dbo"),
						StartTime:  to.Ptr("11:00"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.WorkloadClassifierListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.WorkloadClassifierListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetSqlPoolWorkloadGroupWorkloadClassifierList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkspaceManagedSQLServerBlobAuditingPolicies_Get(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetWorkspaceManagedSqlServerBlobAuditingSettings.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get blob auditing setting of workspace managed sql Server"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewWorkspaceManagedSQLServerBlobAuditingPoliciesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"wsg-7398",
		"testWorkspace",
		armsynapse.BlobAuditingPolicyNameDefault,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetWorkspaceManagedSqlServerBlobAuditingSettings.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.ServerBlobAuditingPolicy{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Synapse/workspaces/auditingSettings"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/wsg-7398/providers/Microsoft.Synapse/workspaces/testWorkspace/auditingSettings/default"),
			Properties: &armsynapse.ServerBlobAuditingPolicyProperties{
				AuditActionsAndGroups:        []*string{},
				IsAzureMonitorTargetEnabled:  to.Ptr(false),
				IsStorageSecondaryKeyInUse:   to.Ptr(false),
				RetentionDays:                to.Ptr[int32](0),
				State:                        to.Ptr(armsynapse.BlobAuditingPolicyStateDisabled),
				StorageAccountSubscriptionID: to.Ptr("00000000-0000-0000-0000-000000000000"),
				StorageEndpoint:              to.Ptr(""),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServerBlobAuditingPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServerBlobAuditingPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetWorkspaceManagedSqlServerBlobAuditingSettings.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkspaceManagedSQLServerBlobAuditingPolicies_CreateOrUpdate(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/CreateWorkspaceManagedSqlServerBlobAuditingSettingsWithAllParameters.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update blob auditing policy of workspace SQL Server with all parameters"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewWorkspaceManagedSQLServerBlobAuditingPoliciesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"wsg-7398",
		"testWorkspace",
		armsynapse.BlobAuditingPolicyNameDefault,
		armsynapse.ServerBlobAuditingPolicy{
			Properties: &armsynapse.ServerBlobAuditingPolicyProperties{
				AuditActionsAndGroups: []*string{
					to.Ptr("SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP"),
					to.Ptr("FAILED_DATABASE_AUTHENTICATION_GROUP"),
					to.Ptr("BATCH_COMPLETED_GROUP")},
				IsAzureMonitorTargetEnabled:  to.Ptr(true),
				IsStorageSecondaryKeyInUse:   to.Ptr(false),
				QueueDelayMs:                 to.Ptr[int32](4000),
				RetentionDays:                to.Ptr[int32](6),
				State:                        to.Ptr(armsynapse.BlobAuditingPolicyStateEnabled),
				StorageAccountAccessKey:      to.Ptr("sdlfkjabc+sdlfkjsdlkfsjdfLDKFTERLKFDFKLjsdfksjdflsdkfD2342309432849328476458/3RSD=="),
				StorageAccountSubscriptionID: to.Ptr("00000000-1234-0000-5678-000000000000"),
				StorageEndpoint:              to.Ptr("https://mystorage.blob.core.windows.net"),
			},
		},
		&armsynapse.WorkspaceManagedSQLServerBlobAuditingPoliciesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/CreateWorkspaceManagedSqlServerBlobAuditingSettingsWithAllParameters.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/CreateWorkspaceManagedSqlServerBlobAuditingSettingsWithAllParameters.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.ServerBlobAuditingPolicy{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Synapse/workspaces/auditingSettings"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/wsg-7398/providers/Microsoft.Synapse/workspaces/testWorkspace/auditingSettings/default"),
			Properties: &armsynapse.ServerBlobAuditingPolicyProperties{
				AuditActionsAndGroups: []*string{
					to.Ptr("SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP"),
					to.Ptr("FAILED_DATABASE_AUTHENTICATION_GROUP"),
					to.Ptr("BATCH_COMPLETED_GROUP")},
				IsAzureMonitorTargetEnabled:  to.Ptr(true),
				IsStorageSecondaryKeyInUse:   to.Ptr(false),
				QueueDelayMs:                 to.Ptr[int32](4000),
				RetentionDays:                to.Ptr[int32](6),
				State:                        to.Ptr(armsynapse.BlobAuditingPolicyStateEnabled),
				StorageAccountSubscriptionID: to.Ptr("00000000-1234-0000-5678-000000000000"),
				StorageEndpoint:              to.Ptr("https://mystorage.blob.core.windows.net"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServerBlobAuditingPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServerBlobAuditingPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/CreateWorkspaceManagedSqlServerBlobAuditingSettingsWithAllParameters.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/CreateWorkspaceManagedSqlServerBlobAuditingSettingsWithMinParameters.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update blob auditing policy of workspace managed Sql Server with minimal parameters"},
	})
	client = armsynapse.NewWorkspaceManagedSQLServerBlobAuditingPoliciesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"wsg-7398",
		"testWorkspace",
		armsynapse.BlobAuditingPolicyNameDefault,
		armsynapse.ServerBlobAuditingPolicy{
			Properties: &armsynapse.ServerBlobAuditingPolicyProperties{
				State:                   to.Ptr(armsynapse.BlobAuditingPolicyStateEnabled),
				StorageAccountAccessKey: to.Ptr("sdlfkjabc+sdlfkjsdlkfsjdfLDKFTERLKFDFKLjsdfksjdflsdkfD2342309432849328476458/3RSD=="),
				StorageEndpoint:         to.Ptr("https://mystorage.blob.core.windows.net"),
			},
		},
		&armsynapse.WorkspaceManagedSQLServerBlobAuditingPoliciesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/CreateWorkspaceManagedSqlServerBlobAuditingSettingsWithMinParameters.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/CreateWorkspaceManagedSqlServerBlobAuditingSettingsWithMinParameters.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.ServerBlobAuditingPolicy{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Synapse/workspaces/auditingSettings"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/wsg-7398/providers/Microsoft.Synapse/workspaces/testWorkspace/auditingSettings/default"),
			Properties: &armsynapse.ServerBlobAuditingPolicyProperties{
				AuditActionsAndGroups: []*string{
					to.Ptr("SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP"),
					to.Ptr("FAILED_DATABASE_AUTHENTICATION_GROUP"),
					to.Ptr("BATCH_COMPLETED_GROUP")},
				IsStorageSecondaryKeyInUse:   to.Ptr(false),
				RetentionDays:                to.Ptr[int32](6),
				State:                        to.Ptr(armsynapse.BlobAuditingPolicyStateEnabled),
				StorageAccountSubscriptionID: to.Ptr("00000000-1234-0000-5678-000000000000"),
				StorageEndpoint:              to.Ptr("https://mystorage.blob.core.windows.net"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServerBlobAuditingPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServerBlobAuditingPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/CreateWorkspaceManagedSqlServerBlobAuditingSettingsWithMinParameters.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkspaceManagedSQLServerBlobAuditingPolicies_ListByWorkspace(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ListWorkspaceManagedSqlServerBlobAuditingSettings.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get blob auditing policy of workspace manged sql Server"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewWorkspaceManagedSQLServerBlobAuditingPoliciesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByWorkspace("wsg-7398",
		"testWorkspace",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ListWorkspaceManagedSqlServerBlobAuditingSettings.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsynapse.ServerBlobAuditingPolicyListResult{
			Value: []*armsynapse.ServerBlobAuditingPolicy{
				{
					Name: to.Ptr("default"),
					Type: to.Ptr("Microsoft.Synapse/workspaces/auditingSettings"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/wsg-7398/providers/Microsoft.Synapse/workspaces/testWorkspace/auditingSettings/default"),
					Properties: &armsynapse.ServerBlobAuditingPolicyProperties{
						AuditActionsAndGroups:        []*string{},
						IsAzureMonitorTargetEnabled:  to.Ptr(false),
						IsStorageSecondaryKeyInUse:   to.Ptr(false),
						RetentionDays:                to.Ptr[int32](0),
						State:                        to.Ptr(armsynapse.BlobAuditingPolicyStateDisabled),
						StorageAccountSubscriptionID: to.Ptr("00000000-0000-0000-0000-000000000000"),
						StorageEndpoint:              to.Ptr(""),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ServerBlobAuditingPolicyListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ServerBlobAuditingPolicyListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ListWorkspaceManagedSqlServerBlobAuditingSettings.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkspaceManagedSQLServerExtendedBlobAuditingPolicies_Get(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetWorkspaceManagedSqlExtendedServerBlobAuditingSettings.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get workspace managed sql servers' extended blob auditing settings"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewWorkspaceManagedSQLServerExtendedBlobAuditingPoliciesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"wsg-7398",
		"testWorkspace",
		armsynapse.BlobAuditingPolicyNameDefault,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetWorkspaceManagedSqlExtendedServerBlobAuditingSettings.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.ExtendedServerBlobAuditingPolicy{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Synapse/workspaces/extendedAuditingSettings"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/wsg-7398/providers/Microsoft.Synapse/workspaces/testWorkspace/extendedAuditingSettings/default"),
			Properties: &armsynapse.ExtendedServerBlobAuditingPolicyProperties{
				AuditActionsAndGroups:        []*string{},
				IsAzureMonitorTargetEnabled:  to.Ptr(false),
				IsStorageSecondaryKeyInUse:   to.Ptr(false),
				PredicateExpression:          to.Ptr("object_name = 'SensitiveData'"),
				RetentionDays:                to.Ptr[int32](0),
				State:                        to.Ptr(armsynapse.BlobAuditingPolicyStateDisabled),
				StorageAccountSubscriptionID: to.Ptr("00000000-0000-0000-0000-000000000000"),
				StorageEndpoint:              to.Ptr(""),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ExtendedServerBlobAuditingPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ExtendedServerBlobAuditingPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetWorkspaceManagedSqlExtendedServerBlobAuditingSettings.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkspaceManagedSQLServerExtendedBlobAuditingPolicies_CreateOrUpdate(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/CreateWorkspaceManagedSqlServerExtendedBlobAuditingSettingsWithAllParameters.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update workspace managed sql server's extended blob auditing policy of with all parameters"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewWorkspaceManagedSQLServerExtendedBlobAuditingPoliciesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"wsg-7398",
		"testWorkspace",
		armsynapse.BlobAuditingPolicyNameDefault,
		armsynapse.ExtendedServerBlobAuditingPolicy{
			Properties: &armsynapse.ExtendedServerBlobAuditingPolicyProperties{
				AuditActionsAndGroups: []*string{
					to.Ptr("SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP"),
					to.Ptr("FAILED_DATABASE_AUTHENTICATION_GROUP"),
					to.Ptr("BATCH_COMPLETED_GROUP")},
				IsAzureMonitorTargetEnabled:  to.Ptr(true),
				IsStorageSecondaryKeyInUse:   to.Ptr(false),
				PredicateExpression:          to.Ptr("object_name = 'SensitiveData'"),
				RetentionDays:                to.Ptr[int32](6),
				State:                        to.Ptr(armsynapse.BlobAuditingPolicyStateEnabled),
				StorageAccountAccessKey:      to.Ptr("sdlfkjabc+sdlfkjsdlkfsjdfLDKFTERLKFDFKLjsdfksjdflsdkfD2342309432849328476458/3RSD=="),
				StorageAccountSubscriptionID: to.Ptr("00000000-1234-0000-5678-000000000000"),
				StorageEndpoint:              to.Ptr("https://mystorage.blob.core.windows.net"),
			},
		},
		&armsynapse.WorkspaceManagedSQLServerExtendedBlobAuditingPoliciesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/CreateWorkspaceManagedSqlServerExtendedBlobAuditingSettingsWithAllParameters.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/CreateWorkspaceManagedSqlServerExtendedBlobAuditingSettingsWithAllParameters.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.ExtendedServerBlobAuditingPolicy{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Synapse/workspaces/extendedAuditingSettings"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/wsg-7398/providers/Microsoft.Synapse/workspaces/testWorkspace/extendedAuditingSettings/default"),
			Properties: &armsynapse.ExtendedServerBlobAuditingPolicyProperties{
				AuditActionsAndGroups: []*string{
					to.Ptr("SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP"),
					to.Ptr("FAILED_DATABASE_AUTHENTICATION_GROUP"),
					to.Ptr("BATCH_COMPLETED_GROUP")},
				IsAzureMonitorTargetEnabled:  to.Ptr(true),
				IsStorageSecondaryKeyInUse:   to.Ptr(false),
				PredicateExpression:          to.Ptr("object_name = 'SensitiveData'"),
				RetentionDays:                to.Ptr[int32](6),
				State:                        to.Ptr(armsynapse.BlobAuditingPolicyStateEnabled),
				StorageAccountSubscriptionID: to.Ptr("00000000-1234-0000-5678-000000000000"),
				StorageEndpoint:              to.Ptr("https://mystorage.blob.core.windows.net"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ExtendedServerBlobAuditingPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ExtendedServerBlobAuditingPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/CreateWorkspaceManagedSqlServerExtendedBlobAuditingSettingsWithAllParameters.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/CreateWorkspaceManagedSqlServerExetendedBlobAuditingSettingsWithMinParameters.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update workspace managed sql server's extended blob auditing policy of with minimal parameters"},
	})
	client = armsynapse.NewWorkspaceManagedSQLServerExtendedBlobAuditingPoliciesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"wsg-7398",
		"testWorkspace",
		armsynapse.BlobAuditingPolicyNameDefault,
		armsynapse.ExtendedServerBlobAuditingPolicy{
			Properties: &armsynapse.ExtendedServerBlobAuditingPolicyProperties{
				State:                   to.Ptr(armsynapse.BlobAuditingPolicyStateEnabled),
				StorageAccountAccessKey: to.Ptr("sdlfkjabc+sdlfkjsdlkfsjdfLDKFTERLKFDFKLjsdfksjdflsdkfD2342309432849328476458/3RSD=="),
				StorageEndpoint:         to.Ptr("https://mystorage.blob.core.windows.net"),
			},
		},
		&armsynapse.WorkspaceManagedSQLServerExtendedBlobAuditingPoliciesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/CreateWorkspaceManagedSqlServerExetendedBlobAuditingSettingsWithMinParameters.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/CreateWorkspaceManagedSqlServerExetendedBlobAuditingSettingsWithMinParameters.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.ExtendedServerBlobAuditingPolicy{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Synapse/workspaces/extendedAuditingSettings"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/wsg-7398/providers/Microsoft.Synapse/workspaces/testWorkspace/extendedAuditingSettings/default"),
			Properties: &armsynapse.ExtendedServerBlobAuditingPolicyProperties{
				AuditActionsAndGroups: []*string{
					to.Ptr("SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP"),
					to.Ptr("FAILED_DATABASE_AUTHENTICATION_GROUP"),
					to.Ptr("BATCH_COMPLETED_GROUP")},
				IsAzureMonitorTargetEnabled:  to.Ptr(false),
				IsStorageSecondaryKeyInUse:   to.Ptr(false),
				RetentionDays:                to.Ptr[int32](6),
				State:                        to.Ptr(armsynapse.BlobAuditingPolicyStateEnabled),
				StorageAccountSubscriptionID: to.Ptr("00000000-1234-0000-5678-000000000000"),
				StorageEndpoint:              to.Ptr("https://mystorage.blob.core.windows.net"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ExtendedServerBlobAuditingPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ExtendedServerBlobAuditingPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/CreateWorkspaceManagedSqlServerExetendedBlobAuditingSettingsWithMinParameters.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkspaceManagedSQLServerExtendedBlobAuditingPolicies_ListByWorkspace(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ListWorkspaceManagedSqlServerExtendedBlobAuditingSettings.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get workspace managed sql server's extended blob auditing settings"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewWorkspaceManagedSQLServerExtendedBlobAuditingPoliciesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByWorkspace("wsg-7398",
		"testWorkspace",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ListWorkspaceManagedSqlServerExtendedBlobAuditingSettings.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsynapse.ExtendedServerBlobAuditingPolicyListResult{
			Value: []*armsynapse.ExtendedServerBlobAuditingPolicy{
				{
					Name: to.Ptr("default"),
					Type: to.Ptr("Microsoft.Synapse/workspaces/extendedAuditingSettings"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/wsg-7398/providers/Microsoft.Synapse/workspaces/testWorkspace/extendedAuditingSettings/default"),
					Properties: &armsynapse.ExtendedServerBlobAuditingPolicyProperties{
						AuditActionsAndGroups:        []*string{},
						IsAzureMonitorTargetEnabled:  to.Ptr(false),
						IsStorageSecondaryKeyInUse:   to.Ptr(false),
						PredicateExpression:          to.Ptr("object_name = 'SensitiveData'"),
						RetentionDays:                to.Ptr[int32](0),
						State:                        to.Ptr(armsynapse.BlobAuditingPolicyStateDisabled),
						StorageAccountSubscriptionID: to.Ptr("00000000-0000-0000-0000-000000000000"),
						StorageEndpoint:              to.Ptr(""),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ExtendedServerBlobAuditingPolicyListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ExtendedServerBlobAuditingPolicyListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ListWorkspaceManagedSqlServerExtendedBlobAuditingSettings.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkspaceManagedSQLServerSecurityAlertPolicy_Get(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetWorkspaceManagedSqlServerSecurityAlertPolicy.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get workspace managed sql Server's security alert policy"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewWorkspaceManagedSQLServerSecurityAlertPolicyClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"wsg-7398",
		"testWorkspace",
		armsynapse.SecurityAlertPolicyNameAutoGeneratedDefault,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetWorkspaceManagedSqlServerSecurityAlertPolicy.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.ServerSecurityAlertPolicy{
			Name: to.Ptr("Default"),
			Type: to.Ptr("Microsoft.Synapse/workspaces/securityAlertPolicies"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/wsg-7398/providers/Microsoft.Synapse/workspaces/testWorkspace/securityAlertPolicies/Default"),
			Properties: &armsynapse.ServerSecurityAlertPolicyProperties{
				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-10-23T04:52:49.52Z"); return t }()),
				DisabledAlerts: []*string{
					to.Ptr("Access_Anomaly")},
				EmailAccountAdmins: to.Ptr(true),
				EmailAddresses: []*string{
					to.Ptr("test@microsoft.com;user@microsoft.com")},
				RetentionDays:           to.Ptr[int32](0),
				State:                   to.Ptr(armsynapse.SecurityAlertPolicyStateDisabled),
				StorageAccountAccessKey: to.Ptr(""),
				StorageEndpoint:         to.Ptr("https://mystorage.blob.core.windows.net"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServerSecurityAlertPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServerSecurityAlertPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetWorkspaceManagedSqlServerSecurityAlertPolicy.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkspaceManagedSQLServerSecurityAlertPolicy_CreateOrUpdate(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/WorkspaceManagedSqlServerSecurityAlertWithAllParameters.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a workspace managed sql server's threat detection policy with all parameters"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewWorkspaceManagedSQLServerSecurityAlertPolicyClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"wsg-7398",
		"testWorkspace",
		armsynapse.SecurityAlertPolicyNameAutoGeneratedDefault,
		armsynapse.ServerSecurityAlertPolicy{
			Properties: &armsynapse.ServerSecurityAlertPolicyProperties{
				DisabledAlerts: []*string{
					to.Ptr("Access_Anomaly"),
					to.Ptr("Usage_Anomaly")},
				EmailAccountAdmins: to.Ptr(true),
				EmailAddresses: []*string{
					to.Ptr("testSecurityAlert@microsoft.com")},
				RetentionDays:           to.Ptr[int32](5),
				State:                   to.Ptr(armsynapse.SecurityAlertPolicyStateEnabled),
				StorageAccountAccessKey: to.Ptr("sdlfkjabc+sdlfkjsdlkfsjdfLDKFTERLKFDFKLjsdfksjdflsdkfD2342309432849328476458/3RSD=="),
				StorageEndpoint:         to.Ptr("https://mystorage.blob.core.windows.net"),
			},
		},
		&armsynapse.WorkspaceManagedSQLServerSecurityAlertPolicyClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/WorkspaceManagedSqlServerSecurityAlertWithAllParameters.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/WorkspaceManagedSqlServerSecurityAlertWithAllParameters.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.ServerSecurityAlertPolicy{
			Name: to.Ptr("Default"),
			Type: to.Ptr("Microsoft.Synapse/workspaces/securityAlertPolicies"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/wsg-7398/providers/Microsoft.Synapse/workspaces/testWorkspace/securityAlertPolicies/Default"),
			Properties: &armsynapse.ServerSecurityAlertPolicyProperties{
				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-10-23T04:52:49.52Z"); return t }()),
				DisabledAlerts: []*string{
					to.Ptr("Access_Anomaly"),
					to.Ptr("Usage_Anomaly")},
				EmailAccountAdmins: to.Ptr(true),
				EmailAddresses: []*string{
					to.Ptr("testSecurityAlert@microsoft.com")},
				RetentionDays:           to.Ptr[int32](5),
				State:                   to.Ptr(armsynapse.SecurityAlertPolicyStateEnabled),
				StorageAccountAccessKey: to.Ptr(""),
				StorageEndpoint:         to.Ptr("https://mystorage.blob.core.windows.net"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServerSecurityAlertPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServerSecurityAlertPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/WorkspaceManagedSqlServerSecurityAlertWithAllParameters.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/WorkspaceManagedSqlServerSecurityAlertCreateWithMinParameters.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a workspace managed sql server's threat detection policy with minimal parameters"},
	})
	client = armsynapse.NewWorkspaceManagedSQLServerSecurityAlertPolicyClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"wsg-7398",
		"testWorkspace",
		armsynapse.SecurityAlertPolicyNameAutoGeneratedDefault,
		armsynapse.ServerSecurityAlertPolicy{
			Properties: &armsynapse.ServerSecurityAlertPolicyProperties{
				EmailAccountAdmins:      to.Ptr(true),
				State:                   to.Ptr(armsynapse.SecurityAlertPolicyStateDisabled),
				StorageAccountAccessKey: to.Ptr("sdlfkjabc+sdlfkjsdlkfsjdfLDKFTERLKFDFKLjsdfksjdflsdkfD2342309432849328476458/3RSD=="),
				StorageEndpoint:         to.Ptr("https://mystorage.blob.core.windows.net"),
			},
		},
		&armsynapse.WorkspaceManagedSQLServerSecurityAlertPolicyClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/WorkspaceManagedSqlServerSecurityAlertCreateWithMinParameters.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/WorkspaceManagedSqlServerSecurityAlertCreateWithMinParameters.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.ServerSecurityAlertPolicy{
			Name: to.Ptr("Default"),
			Type: to.Ptr("Microsoft.Synapse/workspaces/securityAlertPolicies"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/wsg-7398/providers/Microsoft.Synapse/workspaces/testWorkspace/securityAlertPolicies/Default"),
			Properties: &armsynapse.ServerSecurityAlertPolicyProperties{
				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-10-23T04:52:49.52Z"); return t }()),
				DisabledAlerts: []*string{
					to.Ptr("")},
				EmailAccountAdmins: to.Ptr(true),
				EmailAddresses: []*string{
					to.Ptr("")},
				RetentionDays:           to.Ptr[int32](0),
				State:                   to.Ptr(armsynapse.SecurityAlertPolicyStateEnabled),
				StorageAccountAccessKey: to.Ptr(""),
				StorageEndpoint:         to.Ptr("https://mystorage.blob.core.windows.net"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServerSecurityAlertPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServerSecurityAlertPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/WorkspaceManagedSqlServerSecurityAlertCreateWithMinParameters.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkspaceManagedSQLServerSecurityAlertPolicy_List(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ListWorkspaceManagedSqlServerSecurityAlertPolicies.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get workspace managed sql server's security alert policy"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewWorkspaceManagedSQLServerSecurityAlertPolicyClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.List("wsg-7398",
		"testWorkspace",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ListWorkspaceManagedSqlServerSecurityAlertPolicies.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsynapse.ServerSecurityAlertPolicyListResult{
			Value: []*armsynapse.ServerSecurityAlertPolicy{
				{
					Name: to.Ptr("Default"),
					Type: to.Ptr("Microsoft.Synapse/workspaces/securityAlertPolicies"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/wsg-7398/providers/Microsoft.Synapse/workspaces/testWorkspace/securityAlertPolicies"),
					Properties: &armsynapse.ServerSecurityAlertPolicyProperties{
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-10-23T04:52:49.52Z"); return t }()),
						DisabledAlerts: []*string{
							to.Ptr("Access_Anomaly")},
						EmailAccountAdmins: to.Ptr(true),
						EmailAddresses: []*string{
							to.Ptr("test@microsoft.com;user@microsoft.com")},
						RetentionDays:           to.Ptr[int32](0),
						State:                   to.Ptr(armsynapse.SecurityAlertPolicyStateDisabled),
						StorageAccountAccessKey: to.Ptr(""),
						StorageEndpoint:         to.Ptr("https://mystorage.blob.core.windows.net"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ServerSecurityAlertPolicyListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ServerSecurityAlertPolicyListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ListWorkspaceManagedSqlServerSecurityAlertPolicies.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkspaceManagedSQLServerVulnerabilityAssessments_Get(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetWorkspaceManagedSqlServerVulnerabilityAssessment.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get workspace managed sql Server's vulnerability assessment"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewWorkspaceManagedSQLServerVulnerabilityAssessmentsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"wsg-7398",
		"testWorkspace",
		armsynapse.VulnerabilityAssessmentNameDefault,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetWorkspaceManagedSqlServerVulnerabilityAssessment.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.ServerVulnerabilityAssessment{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Synapse/workspaces/vulnerabilityAssessments"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/wsg-7398/providers/Microsoft.Synapse/workspaces/testWorkspace/vulnerabilityAssessments/default"),
			Properties: &armsynapse.ServerVulnerabilityAssessmentProperties{
				RecurringScans: &armsynapse.VulnerabilityAssessmentRecurringScansProperties{
					EmailSubscriptionAdmins: to.Ptr(true),
					Emails: []*string{
						to.Ptr("email1@mail.com"),
						to.Ptr("email2@mail.com")},
					IsEnabled: to.Ptr(true),
				},
				StorageContainerPath: to.Ptr("https://myStorage.blob.core.windows.net/vulnerability-assessment/"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServerVulnerabilityAssessment) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServerVulnerabilityAssessment)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetWorkspaceManagedSqlServerVulnerabilityAssessment.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkspaceManagedSQLServerVulnerabilityAssessments_CreateOrUpdate(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/PutWorkspaceManagedSqlServerVulnerabilityAssessmentWithAllParameters.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or Update a workspace managed sql server's vulnerability assessment with all parameters"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewWorkspaceManagedSQLServerVulnerabilityAssessmentsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"wsg-7398",
		"testWorkspace",
		armsynapse.VulnerabilityAssessmentNameDefault,
		armsynapse.ServerVulnerabilityAssessment{
			Properties: &armsynapse.ServerVulnerabilityAssessmentProperties{
				RecurringScans: &armsynapse.VulnerabilityAssessmentRecurringScansProperties{
					EmailSubscriptionAdmins: to.Ptr(true),
					Emails: []*string{
						to.Ptr("email1@mail.com"),
						to.Ptr("email2@mail.com")},
					IsEnabled: to.Ptr(true),
				},
				StorageAccountAccessKey: to.Ptr("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"),
				StorageContainerPath:    to.Ptr("https://myStorage.blob.core.windows.net/vulnerability-assessment/"),
				StorageContainerSasKey:  to.Ptr("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/PutWorkspaceManagedSqlServerVulnerabilityAssessmentWithAllParameters.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.ServerVulnerabilityAssessment{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Synapse/workspaces/vulnerabilityAssessments"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/wsg-7398/providers/Microsoft.Synapse/workspaces/testWorkspace/vulnerabilityAssessments/default"),
			Properties: &armsynapse.ServerVulnerabilityAssessmentProperties{
				RecurringScans: &armsynapse.VulnerabilityAssessmentRecurringScansProperties{
					EmailSubscriptionAdmins: to.Ptr(true),
					Emails: []*string{
						to.Ptr("email1@mail.com"),
						to.Ptr("email2@mail.com")},
					IsEnabled: to.Ptr(true),
				},
				StorageContainerPath: to.Ptr("https://myStorage.blob.core.windows.net/vulnerability-assessment/"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServerVulnerabilityAssessment) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServerVulnerabilityAssessment)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/PutWorkspaceManagedSqlServerVulnerabilityAssessmentWithAllParameters.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/PutWorkspaceMangedSqlServerVulnerabilityAssessmentCreateStorageAccessKeyMin.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or Update a workspace managed sql server's vulnerability assessment with minimal parameters, when storageAccountAccessKey is specified"},
	})
	client = armsynapse.NewWorkspaceManagedSQLServerVulnerabilityAssessmentsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"wsg-7398",
		"testWorkspace",
		armsynapse.VulnerabilityAssessmentNameDefault,
		armsynapse.ServerVulnerabilityAssessment{
			Properties: &armsynapse.ServerVulnerabilityAssessmentProperties{
				StorageAccountAccessKey: to.Ptr("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"),
				StorageContainerPath:    to.Ptr("https://myStorage.blob.core.windows.net/vulnerability-assessment/"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/PutWorkspaceMangedSqlServerVulnerabilityAssessmentCreateStorageAccessKeyMin.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.ServerVulnerabilityAssessment{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Synapse/workspaces/vulnerabilityAssessments"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/wsg-7398/providers/Microsoft.Synapse/workspaces/testWorkspace/vulnerabilityAssessments/default"),
			Properties: &armsynapse.ServerVulnerabilityAssessmentProperties{
				RecurringScans: &armsynapse.VulnerabilityAssessmentRecurringScansProperties{
					EmailSubscriptionAdmins: to.Ptr(false),
					Emails:                  []*string{},
					IsEnabled:               to.Ptr(true),
				},
				StorageContainerPath: to.Ptr("https://myStorage.blob.core.windows.net/vulnerability-assessment/"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServerVulnerabilityAssessment) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServerVulnerabilityAssessment)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/PutWorkspaceMangedSqlServerVulnerabilityAssessmentCreateStorageAccessKeyMin.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/PutWorkspaceMangedSqlServerVulnerabilityAssessmentCreateContainerSasKeyMin.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or Update a workspace managed sql server's vulnerability assessment with minimal parameters, when storageContainerSasKey is specified"},
	})
	client = armsynapse.NewWorkspaceManagedSQLServerVulnerabilityAssessmentsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"wsg-7398",
		"testWorkspace",
		armsynapse.VulnerabilityAssessmentNameDefault,
		armsynapse.ServerVulnerabilityAssessment{
			Properties: &armsynapse.ServerVulnerabilityAssessmentProperties{
				StorageContainerPath:   to.Ptr("https://myStorage.blob.core.windows.net/vulnerability-assessment/"),
				StorageContainerSasKey: to.Ptr("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/PutWorkspaceMangedSqlServerVulnerabilityAssessmentCreateContainerSasKeyMin.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.ServerVulnerabilityAssessment{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Synapse/workspaces/vulnerabilityAssessments"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/wsg-7398/providers/Microsoft.Synapse/workspaces/testWorkspace/vulnerabilityAssessments/default"),
			Properties: &armsynapse.ServerVulnerabilityAssessmentProperties{
				RecurringScans: &armsynapse.VulnerabilityAssessmentRecurringScansProperties{
					EmailSubscriptionAdmins: to.Ptr(false),
					Emails:                  []*string{},
					IsEnabled:               to.Ptr(true),
				},
				StorageContainerPath: to.Ptr("https://myStorage.blob.core.windows.net/vulnerability-assessment/"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServerVulnerabilityAssessment) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServerVulnerabilityAssessment)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/PutWorkspaceMangedSqlServerVulnerabilityAssessmentCreateContainerSasKeyMin.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkspaceManagedSQLServerVulnerabilityAssessments_Delete(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/DeleteWorkspaceManagedSqlServerVulnerabilityAssessment.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Remove workspace managed sql Server's vulnerability assessment"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewWorkspaceManagedSQLServerVulnerabilityAssessmentsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	_, err := client.Delete(ctx,
		"wsg-7398",
		"testWorkspace",
		armsynapse.VulnerabilityAssessmentNameDefault,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/DeleteWorkspaceManagedSqlServerVulnerabilityAssessment.json: %v", err)
	}
}

func TestWorkspaceManagedSQLServerVulnerabilityAssessments_List(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ListWorkspaceManagedSqlServerVulnerabilityAssessmentPolicies.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get workspace managed sql Server's vulnerability assessment policies"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewWorkspaceManagedSQLServerVulnerabilityAssessmentsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.List("wsg-7398",
		"testWorkspace",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ListWorkspaceManagedSqlServerVulnerabilityAssessmentPolicies.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsynapse.ServerVulnerabilityAssessmentListResult{
			Value: []*armsynapse.ServerVulnerabilityAssessment{
				{
					Name: to.Ptr("default"),
					Type: to.Ptr("Microsoft.Synapse/workspaces/vulnerabilityAssessments"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/wsg-7398/providers/Microsoft.Synapse/workspaces/testWorkspace/vulnerabilityAssessments/default"),
					Properties: &armsynapse.ServerVulnerabilityAssessmentProperties{
						RecurringScans: &armsynapse.VulnerabilityAssessmentRecurringScansProperties{
							EmailSubscriptionAdmins: to.Ptr(true),
							Emails: []*string{
								to.Ptr("email1@mail.com"),
								to.Ptr("email2@mail.com")},
							IsEnabled: to.Ptr(true),
						},
						StorageContainerPath: to.Ptr("https://myStorage.blob.core.windows.net/vulnerability-assessment/"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ServerVulnerabilityAssessmentListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ServerVulnerabilityAssessmentListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ListWorkspaceManagedSqlServerVulnerabilityAssessmentPolicies.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkspaceManagedSQLServerEncryptionProtector_Get(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetWorkspaceManagedSqlServerEncryptionProtector.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get workspace managed sql Server's encryption protector"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewWorkspaceManagedSQLServerEncryptionProtectorClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"wsg-7398",
		"testWorkspace",
		armsynapse.EncryptionProtectorNameCurrent,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetWorkspaceManagedSqlServerEncryptionProtector.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.EncryptionProtector{
			Name:     to.Ptr("current"),
			Type:     to.Ptr("Microsoft.Synapse/workspaces/encryptionProtector"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/wsg-7398/providers/Microsoft.Synapse/workspaces/testWorkspace/encryptionProtector/current"),
			Kind:     to.Ptr("azurekeyvault"),
			Location: to.Ptr("Japan East"),
			Properties: &armsynapse.EncryptionProtectorProperties{
				ServerKeyName: to.Ptr("someVault_someKey_01234567890123456789012345678901"),
				ServerKeyType: to.Ptr(armsynapse.ServerKeyTypeAzureKeyVault),
				URI:           to.Ptr("https://someVault.vault.azure.net/keys/someKey/01234567890123456789012345678901"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.EncryptionProtector) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.EncryptionProtector)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetWorkspaceManagedSqlServerEncryptionProtector.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkspaceManagedSQLServerEncryptionProtector_CreateOrUpdate(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/WorkspaceManagedSqlServerEncryptionProtectorCreateOrUpdateKeyVault.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update the encryption protector to key vault"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewWorkspaceManagedSQLServerEncryptionProtectorClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"wsg-7398",
		"testWorkspace",
		armsynapse.EncryptionProtectorNameCurrent,
		armsynapse.EncryptionProtector{
			Properties: &armsynapse.EncryptionProtectorProperties{
				ServerKeyName: to.Ptr("someVault_someKey_01234567890123456789012345678901"),
				ServerKeyType: to.Ptr(armsynapse.ServerKeyTypeAzureKeyVault),
			},
		},
		&armsynapse.WorkspaceManagedSQLServerEncryptionProtectorClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/WorkspaceManagedSqlServerEncryptionProtectorCreateOrUpdateKeyVault.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/WorkspaceManagedSqlServerEncryptionProtectorCreateOrUpdateKeyVault.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.EncryptionProtector{
			Name:     to.Ptr("current"),
			Type:     to.Ptr("Microsoft.Synapse/workspaces/encryptionProtector"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/wsg-7398/providers/Microsoft.Synapse/workspaces/testWorkspace/encryptionProtector/current"),
			Kind:     to.Ptr("azurekeyvault"),
			Location: to.Ptr("West US"),
			Properties: &armsynapse.EncryptionProtectorProperties{
				ServerKeyName: to.Ptr("someVault_someKey_01234567890123456789012345678901"),
				ServerKeyType: to.Ptr(armsynapse.ServerKeyTypeAzureKeyVault),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.EncryptionProtector) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.EncryptionProtector)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/WorkspaceManagedSqlServerEncryptionProtectorCreateOrUpdateKeyVault.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/WorkspaceManagedSqlServerEncryptionProtectorCreateOrUpdateServiceManaged.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update the encryption protector to service managed"},
	})
	client = armsynapse.NewWorkspaceManagedSQLServerEncryptionProtectorClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"wsg-7398",
		"testWorkspace",
		armsynapse.EncryptionProtectorNameCurrent,
		armsynapse.EncryptionProtector{
			Properties: &armsynapse.EncryptionProtectorProperties{
				ServerKeyName: to.Ptr("ServiceManaged"),
				ServerKeyType: to.Ptr(armsynapse.ServerKeyTypeServiceManaged),
			},
		},
		&armsynapse.WorkspaceManagedSQLServerEncryptionProtectorClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/WorkspaceManagedSqlServerEncryptionProtectorCreateOrUpdateServiceManaged.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/WorkspaceManagedSqlServerEncryptionProtectorCreateOrUpdateServiceManaged.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.EncryptionProtector{
			Name:     to.Ptr("current"),
			Type:     to.Ptr("Microsoft.Synapse/workspaces/encryptionProtector"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/wsg-7398/providers/Microsoft.Synapse/workspaces/testWorkspace/encryptionProtector/current"),
			Kind:     to.Ptr("servicemanaged"),
			Location: to.Ptr("West US"),
			Properties: &armsynapse.EncryptionProtectorProperties{
				ServerKeyName: to.Ptr("ServiceManaged"),
				ServerKeyType: to.Ptr(armsynapse.ServerKeyTypeServiceManaged),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.EncryptionProtector) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.EncryptionProtector)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/WorkspaceManagedSqlServerEncryptionProtectorCreateOrUpdateServiceManaged.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkspaceManagedSQLServerEncryptionProtector_List(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetWorkspaceManagedSqlServerEncryptionProtectorList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get workspace managed sql Server's encryption protectors"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewWorkspaceManagedSQLServerEncryptionProtectorClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.List("wsg-7398",
		"testWorkspace",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetWorkspaceManagedSqlServerEncryptionProtectorList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsynapse.EncryptionProtectorListResult{
			Value: []*armsynapse.EncryptionProtector{
				{
					Name:     to.Ptr("current"),
					Type:     to.Ptr("Microsoft.Synapse/workspaces/encryptionProtector"),
					ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/wsg-7398/providers/Microsoft.Synapse/workspaces/testWorkspace/encryptionProtector/current"),
					Kind:     to.Ptr("azurekeyvault"),
					Location: to.Ptr("Japan East"),
					Properties: &armsynapse.EncryptionProtectorProperties{
						ServerKeyName: to.Ptr("someVault_someKey_01234567890123456789012345678901"),
						ServerKeyType: to.Ptr(armsynapse.ServerKeyTypeAzureKeyVault),
						URI:           to.Ptr("https://someVault.vault.azure.net/keys/someKey/01234567890123456789012345678901"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.EncryptionProtectorListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.EncryptionProtectorListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetWorkspaceManagedSqlServerEncryptionProtectorList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkspaceManagedSQLServerEncryptionProtector_Revalidate(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/WorkspaceManagedSqlServerEncryptionProtectorRevalidate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Revalidates the encryption protector"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewWorkspaceManagedSQLServerEncryptionProtectorClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginRevalidate(ctx,
		"wsg-7398",
		"testWorkspace",
		armsynapse.EncryptionProtectorNameCurrent,
		&armsynapse.WorkspaceManagedSQLServerEncryptionProtectorClientBeginRevalidateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/WorkspaceManagedSqlServerEncryptionProtectorRevalidate.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/WorkspaceManagedSqlServerEncryptionProtectorRevalidate.json: %v", err)
	}
}

func TestWorkspaceManagedSQLServerUsages_List(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ListWorkspaceManagedSqlServerUsages.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List usages metric for the workspace managed sql server"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewWorkspaceManagedSQLServerUsagesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.List("wsg-7398",
		"testWorkspace",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ListWorkspaceManagedSqlServerUsages.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsynapse.ServerUsageListResult{
			Value: []*armsynapse.ServerUsage{
				{
					Name:         to.Ptr("server_dtu_quota"),
					CurrentValue: to.Ptr[float64](0),
					DisplayName:  to.Ptr("Database Throughput Unit Quota"),
					Limit:        to.Ptr[float64](45000),
					ResourceName: to.Ptr("testWorkspace"),
					Unit:         to.Ptr("DTUs"),
				},
				{
					Name:         to.Ptr("server_dtu_quota_current"),
					CurrentValue: to.Ptr[float64](0),
					DisplayName:  to.Ptr("Database Throughput Unit Quota"),
					Limit:        to.Ptr[float64](45000),
					ResourceName: to.Ptr("testWorkspace"),
					Unit:         to.Ptr("DTUs"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ServerUsageListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ServerUsageListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ListWorkspaceManagedSqlServerUsages.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkspaceManagedSQLServerRecoverableSQLPools_List(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ListWorkspaceManagedSqlServerRecoverableSqlPool.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List recoverable sql pools for the server"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewWorkspaceManagedSQLServerRecoverableSQLPoolsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.List("wsg-7398",
		"testWorkspace",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ListWorkspaceManagedSqlServerRecoverableSqlPool.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsynapse.RecoverableSQLPoolListResult{
			Value: []*armsynapse.RecoverableSQLPool{
				{
					Name: to.Ptr("recoverableSqlpools-1235"),
					Type: to.Ptr("Microsoft.Synapse/workspaces/recoverableSqlpools"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/wsg-7398/providers/Microsoft.Synapse/workspaces/testWorkspace/recoverableSqlpools/recoverableSqlpools-1235"),
					Properties: &armsynapse.RecoverableSQLPoolProperties{
						Edition:                 to.Ptr("Standard"),
						LastAvailableBackupDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-05-26T01:06:29.78Z"); return t }()),
						ServiceLevelObjective:   to.Ptr("S0"),
					},
				},
				{
					Name: to.Ptr("recoverableSqlpools-9231"),
					Type: to.Ptr("Microsoft.Synapse/workspaces/recoverableSqlpools"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/wsg-7398/providers/Microsoft.Synapse/workspaces/testWorkspace/recoverableSqlpools/recoverableSqlpools-9231"),
					Properties: &armsynapse.RecoverableSQLPoolProperties{
						Edition:                 to.Ptr("Premium"),
						LastAvailableBackupDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-05-26T03:20:31.78Z"); return t }()),
						ServiceLevelObjective:   to.Ptr("P1"),
					},
				},
				{
					Name: to.Ptr("recoverableSqlpools-0342"),
					Type: to.Ptr("Microsoft.Synapse/workspaces/recoverableSqlpools"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/wsg-7398/providers/Microsoft.Synapse/workspaces/testWorkspace/recoverableSqlpools/recoverableSqlpools-0342"),
					Properties: &armsynapse.RecoverableSQLPoolProperties{
						Edition:                 to.Ptr("Basic"),
						LastAvailableBackupDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-05-24T02:06:18.78Z"); return t }()),
						ServiceLevelObjective:   to.Ptr("Basic"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.RecoverableSQLPoolListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.RecoverableSQLPoolListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ListWorkspaceManagedSqlServerRecoverableSqlPool.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkspaceManagedSQLServerRecoverableSQLPools_Get(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetWorkspaceManagedSqlServerRecoverableSqlPool.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get recoverable sql pools for the server"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewWorkspaceManagedSQLServerRecoverableSQLPoolsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"wsg-7398",
		"testWorkspace",
		"recoverableSqlpools-1235",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetWorkspaceManagedSqlServerRecoverableSqlPool.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.RecoverableSQLPool{
			Name: to.Ptr("recoverableSqlpools-1235"),
			Type: to.Ptr("Microsoft.Synapse/workspaces/recoverableSqlpools"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/wsg-7398/providers/Microsoft.Synapse/workspaces/testWorkspace/recoverableSqlpools/recoverableSqlpools-1235"),
			Properties: &armsynapse.RecoverableSQLPoolProperties{
				Edition:                 to.Ptr("Standard"),
				LastAvailableBackupDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-05-26T01:06:29.78Z"); return t }()),
				ServiceLevelObjective:   to.Ptr("S0"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RecoverableSQLPool) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RecoverableSQLPool)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetWorkspaceManagedSqlServerRecoverableSqlPool.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkspaces_ListByResourceGroup(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ListWorkspacesInResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List workspaces in resource group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewWorkspacesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByResourceGroup("resourceGroup1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ListWorkspacesInResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsynapse.WorkspaceInfoListResult{
			Value: []*armsynapse.Workspace{
				{
					Name:     to.Ptr("workspace1"),
					Type:     to.Ptr("Microsoft.Synapse/workspaces"),
					ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/resourceGroup1/providers/Microsoft.Synapse/workspaces/workspace1"),
					Location: to.Ptr("East US"),
					Tags: map[string]*string{
						"key": to.Ptr("value"),
					},
					Properties: &armsynapse.WorkspaceProperties{
						ConnectivityEndpoints: map[string]*string{
							"dev": to.Ptr("workspace1.dev.projectarcadia.net"),
							"sql": to.Ptr("workspace1.sql.projectarcadia.net"),
						},
						DefaultDataLakeStorage: &armsynapse.DataLakeStorageAccountDetails{
							AccountURL: to.Ptr("https://accountname.dfs.core.windows.net"),
							Filesystem: to.Ptr("default"),
						},
						ManagedResourceGroupName:      to.Ptr("resourceGroup2"),
						ProvisioningState:             to.Ptr("Succeeded"),
						SQLAdministratorLogin:         to.Ptr("login"),
						SQLAdministratorLoginPassword: to.Ptr("password"),
					},
				},
				{
					Name:     to.Ptr("workspace2"),
					Type:     to.Ptr("Microsoft.Synapse/workspaces"),
					ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/resourceGroup1/providers/Microsoft.Synapse/workspaces/workspace2"),
					Location: to.Ptr("East US"),
					Tags: map[string]*string{
						"key": to.Ptr("value"),
					},
					Properties: &armsynapse.WorkspaceProperties{
						ConnectivityEndpoints: map[string]*string{
							"dev": to.Ptr("workspace2.dev.projectarcadia.net"),
							"sql": to.Ptr("workspace2.sql.projectarcadia.net"),
						},
						DefaultDataLakeStorage: &armsynapse.DataLakeStorageAccountDetails{
							AccountURL: to.Ptr("https://accountname.dfs.core.windows.net"),
							Filesystem: to.Ptr("default"),
						},
						ManagedResourceGroupName:      to.Ptr("resourceGroup2"),
						ProvisioningState:             to.Ptr("Succeeded"),
						SQLAdministratorLogin:         to.Ptr("login"),
						SQLAdministratorLoginPassword: to.Ptr("password"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.WorkspaceInfoListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.WorkspaceInfoListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ListWorkspacesInResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkspaces_Get(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetWorkspace.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a workspace"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewWorkspacesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"resourceGroup1",
		"workspace1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetWorkspace.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.Workspace{
			Name:     to.Ptr("workspace1"),
			Type:     to.Ptr("Microsoft.Synapse/workspaces"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/resourceGroup1/providers/Microsoft.Synapse/workspaces/workspace1"),
			Location: to.Ptr("East US"),
			Tags: map[string]*string{
				"key": to.Ptr("value"),
			},
			Properties: &armsynapse.WorkspaceProperties{
				ConnectivityEndpoints: map[string]*string{
					"dev": to.Ptr("workspace1.dev.projectarcadia.net"),
					"sql": to.Ptr("workspace1.sql.projectarcadia.net"),
				},
				CspWorkspaceAdminProperties: &armsynapse.CspWorkspaceAdminProperties{
					InitialWorkspaceAdminObjectID: to.Ptr("6c20646f-8050-49ec-b3b1-80a0e58e454d"),
				},
				DefaultDataLakeStorage: &armsynapse.DataLakeStorageAccountDetails{
					AccountURL: to.Ptr("https://accountname.dfs.core.windows.net"),
					Filesystem: to.Ptr("default"),
				},
				ExtraProperties: map[string]interface{}{
					"IsScopeEnabled": "false",
					"WorkspaceType":  "Normal",
				},
				ManagedResourceGroupName: to.Ptr("resourceGroup2"),
				ManagedVirtualNetworkSettings: &armsynapse.ManagedVirtualNetworkSettings{
					AllowedAADTenantIDsForLinking: []*string{
						to.Ptr("740239CE-A25B-485B-86A0-262F29F6EBDB")},
					LinkedAccessCheckOnTargetResource: to.Ptr(false),
					PreventDataExfiltration:           to.Ptr(false),
				},
				PrivateEndpointConnections: []*armsynapse.PrivateEndpointConnection{
					{
						Name: to.Ptr("sql"),
						Type: to.Ptr("Microsoft.Synapse/workspaces/privateEndpointConnections"),
						ID:   to.Ptr("/subscriptions/01234567-89ab-4def-0123-456789abcdef/resourceGroups/ExampleResourceGroup/providers/Microsoft.Synapse/workspaces/ExampleWorkspace/privateEndpointConnections/ExamplePrivateEndpointConnection"),
						Properties: &armsynapse.PrivateEndpointConnectionProperties{
							PrivateEndpoint: &armsynapse.PrivateEndpoint{
								ID: to.Ptr("/subscriptions/01234567-89ab-4def-0123-456789abcdef/resourceGroups/ExampleResourceGroup/providers/Microsoft.Network/privateEndpoints/ExamplePrivateEndpoint"),
							},
							PrivateLinkServiceConnectionState: &armsynapse.PrivateLinkServiceConnectionState{
								Description:     to.Ptr("Auto-approved"),
								ActionsRequired: to.Ptr("None"),
								Status:          to.Ptr("Approved"),
							},
							ProvisioningState: to.Ptr("Succeeded"),
						},
					}},
				ProvisioningState: to.Ptr("Succeeded"),
				PurviewConfiguration: &armsynapse.PurviewConfiguration{
					PurviewResourceID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/resourceGroup1/providers/Microsoft.ProjectPurview/accounts/accountname1"),
				},
				SQLAdministratorLogin: to.Ptr("login"),
				WorkspaceRepositoryConfiguration: &armsynapse.WorkspaceRepositoryConfiguration{
					Type:                to.Ptr("FactoryGitHubConfiguration"),
					AccountName:         to.Ptr("myGithubAccount"),
					CollaborationBranch: to.Ptr("master"),
					HostName:            to.Ptr(""),
					ProjectName:         to.Ptr("myProject"),
					RepositoryName:      to.Ptr("myRepository"),
					RootFolder:          to.Ptr("/"),
				},
				WorkspaceUID: to.Ptr("999b999q-b888-4b44-bacd-2c222cc2222d"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Workspace) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Workspace)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetWorkspace.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkspaces_Update(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/UpdateWorkspace.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a workspace"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewWorkspacesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"resourceGroup1",
		"workspace1",
		armsynapse.WorkspacePatchInfo{
			Identity: &armsynapse.ManagedIdentity{
				Type: to.Ptr(armsynapse.ResourceIdentityTypeSystemAssigned),
			},
			Properties: &armsynapse.WorkspacePatchProperties{
				Encryption: &armsynapse.EncryptionDetails{
					Cmk: &armsynapse.CustomerManagedKeyDetails{
						Key: &armsynapse.WorkspaceKeyDetails{
							Name:        to.Ptr("default"),
							KeyVaultURL: to.Ptr("https://vault.azure.net/keys/key1"),
						},
					},
				},
				ManagedVirtualNetworkSettings: &armsynapse.ManagedVirtualNetworkSettings{
					AllowedAADTenantIDsForLinking: []*string{
						to.Ptr("740239CE-A25B-485B-86A0-262F29F6EBDB")},
					LinkedAccessCheckOnTargetResource: to.Ptr(false),
					PreventDataExfiltration:           to.Ptr(false),
				},
				PublicNetworkAccess: to.Ptr(armsynapse.WorkspacePublicNetworkAccessEnabled),
				PurviewConfiguration: &armsynapse.PurviewConfiguration{
					PurviewResourceID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/resourceGroup1/providers/Microsoft.ProjectPurview/accounts/accountname1"),
				},
				SQLAdministratorLoginPassword: to.Ptr("password"),
				WorkspaceRepositoryConfiguration: &armsynapse.WorkspaceRepositoryConfiguration{
					Type:                to.Ptr("FactoryGitHubConfiguration"),
					AccountName:         to.Ptr("adifferentacount"),
					CollaborationBranch: to.Ptr("master"),
					HostName:            to.Ptr(""),
					ProjectName:         to.Ptr("myproject"),
					RepositoryName:      to.Ptr("myrepository"),
					RootFolder:          to.Ptr("/"),
				},
			},
			Tags: map[string]*string{
				"key": to.Ptr("value"),
			},
		},
		&armsynapse.WorkspacesClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/UpdateWorkspace.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/UpdateWorkspace.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.Workspace{
			Name:     to.Ptr("workspace1"),
			Type:     to.Ptr("Microsoft.Synapse/workspaces"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/resourceGroup1/providers/Microsoft.Synapse/workspaces/workspace1"),
			Location: to.Ptr("East US"),
			Tags: map[string]*string{
				"key": to.Ptr("value"),
			},
			Properties: &armsynapse.WorkspaceProperties{
				ConnectivityEndpoints: map[string]*string{
					"dev": to.Ptr("workspace1.dev.projectarcadia.net"),
					"sql": to.Ptr("workspace1.sql.projectarcadia.net"),
				},
				DefaultDataLakeStorage: &armsynapse.DataLakeStorageAccountDetails{
					AccountURL: to.Ptr("https://accountname.dfs.core.windows.net"),
					Filesystem: to.Ptr("default"),
				},
				Encryption: &armsynapse.EncryptionDetails{
					Cmk: &armsynapse.CustomerManagedKeyDetails{
						Key: &armsynapse.WorkspaceKeyDetails{
							Name:        to.Ptr("default"),
							KeyVaultURL: to.Ptr("https://vault.azure.net/keys/key1"),
						},
						Status: to.Ptr("Consistent"),
					},
					DoubleEncryptionEnabled: to.Ptr(true),
				},
				ManagedResourceGroupName: to.Ptr("resourceGroup2"),
				ManagedVirtualNetworkSettings: &armsynapse.ManagedVirtualNetworkSettings{
					AllowedAADTenantIDsForLinking: []*string{
						to.Ptr("740239CE-A25B-485B-86A0-262F29F6EBDB")},
					LinkedAccessCheckOnTargetResource: to.Ptr(false),
					PreventDataExfiltration:           to.Ptr(false),
				},
				ProvisioningState:   to.Ptr("Succeeded"),
				PublicNetworkAccess: to.Ptr(armsynapse.WorkspacePublicNetworkAccessEnabled),
				PurviewConfiguration: &armsynapse.PurviewConfiguration{
					PurviewResourceID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/resourceGroup1/providers/Microsoft.ProjectPurview/accounts/accountname1"),
				},
				SQLAdministratorLogin: to.Ptr("login"),
				WorkspaceUID:          to.Ptr("999b999q-b888-4b44-bacd-2c222cc2222d"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Workspace) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Workspace)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/UpdateWorkspace.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkspaces_CreateOrUpdate(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/CreateOrUpdateWorkspace.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a workspace"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewWorkspacesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"resourceGroup1",
		"workspace1",
		armsynapse.Workspace{
			Location: to.Ptr("East US"),
			Tags: map[string]*string{
				"key": to.Ptr("value"),
			},
			Identity: &armsynapse.ManagedIdentity{
				Type: to.Ptr(armsynapse.ResourceIdentityTypeSystemAssignedUserAssigned),
				UserAssignedIdentities: map[string]*armsynapse.UserAssignedManagedIdentity{
					"/subscriptions/00000000-1111-2222-3333-444444444444/resourcegroups/resourceGroup1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/uami1": {},
				},
			},
			Properties: &armsynapse.WorkspaceProperties{
				CspWorkspaceAdminProperties: &armsynapse.CspWorkspaceAdminProperties{
					InitialWorkspaceAdminObjectID: to.Ptr("6c20646f-8050-49ec-b3b1-80a0e58e454d"),
				},
				DefaultDataLakeStorage: &armsynapse.DataLakeStorageAccountDetails{
					AccountURL: to.Ptr("https://accountname.dfs.core.windows.net"),
					Filesystem: to.Ptr("default"),
				},
				Encryption: &armsynapse.EncryptionDetails{
					Cmk: &armsynapse.CustomerManagedKeyDetails{
						KekIdentity: &armsynapse.KekIdentityProperties{
							UseSystemAssignedIdentity: false,
							UserAssignedIdentity:      to.Ptr("/subscriptions/b64d7b94-73e7-4d36-94b2-7764ea3fd74a/resourcegroups/SynapseCI/providers/Microsoft.ManagedIdentity/userAssignedIdentities/uami1"),
						},
						Key: &armsynapse.WorkspaceKeyDetails{
							Name:        to.Ptr("default"),
							KeyVaultURL: to.Ptr("https://vault.azure.net/keys/key1"),
						},
					},
				},
				ManagedResourceGroupName: to.Ptr("workspaceManagedResourceGroupUnique"),
				ManagedVirtualNetwork:    to.Ptr("default"),
				ManagedVirtualNetworkSettings: &armsynapse.ManagedVirtualNetworkSettings{
					AllowedAADTenantIDsForLinking: []*string{
						to.Ptr("740239CE-A25B-485B-86A0-262F29F6EBDB")},
					LinkedAccessCheckOnTargetResource: to.Ptr(false),
					PreventDataExfiltration:           to.Ptr(false),
				},
				PublicNetworkAccess: to.Ptr(armsynapse.WorkspacePublicNetworkAccessEnabled),
				PurviewConfiguration: &armsynapse.PurviewConfiguration{
					PurviewResourceID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/resourceGroup1/providers/Microsoft.ProjectPurview/accounts/accountname1"),
				},
				SQLAdministratorLogin:         to.Ptr("login"),
				SQLAdministratorLoginPassword: to.Ptr("password"),
				WorkspaceRepositoryConfiguration: &armsynapse.WorkspaceRepositoryConfiguration{
					Type:                to.Ptr("FactoryGitHubConfiguration"),
					AccountName:         to.Ptr("mygithubaccount"),
					CollaborationBranch: to.Ptr("master"),
					HostName:            to.Ptr(""),
					ProjectName:         to.Ptr("myproject"),
					RepositoryName:      to.Ptr("myrepository"),
					RootFolder:          to.Ptr("/"),
				},
			},
		},
		&armsynapse.WorkspacesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/CreateOrUpdateWorkspace.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/CreateOrUpdateWorkspace.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.Workspace{
			Name:     to.Ptr("workspace1"),
			Type:     to.Ptr("Microsoft.Synapse/workspaces"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/resourceGroup1/providers/Microsoft.Synapse/workspaces/workspace1"),
			Location: to.Ptr("East US"),
			Tags: map[string]*string{
				"key": to.Ptr("value"),
			},
			Identity: &armsynapse.ManagedIdentity{
				Type:        to.Ptr(armsynapse.ResourceIdentityTypeSystemAssignedUserAssigned),
				PrincipalID: to.Ptr("f4b0f1c2-xxxx-43db-xxxx-ccd99e1afd22"),
				TenantID:    to.Ptr("72f988bf-xxxx-41af-xxxx-2d7cd011db47"),
				UserAssignedIdentities: map[string]*armsynapse.UserAssignedManagedIdentity{
					"/subscriptions/00000000-1111-2222-3333-444444444444/resourcegroups/resourceGroup1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/uami1": {
						ClientID:    to.Ptr("ffffffff-8888-4444-8888-333333333333"),
						PrincipalID: to.Ptr("eeeeeeee-9999-4444-8888-333333333333"),
					},
				},
			},
			Properties: &armsynapse.WorkspaceProperties{
				ConnectivityEndpoints: map[string]*string{
					"dev": to.Ptr("workspace1.dev.projectarcadia.net"),
					"sql": to.Ptr("workspace1.sql.projectarcadia.net"),
				},
				DefaultDataLakeStorage: &armsynapse.DataLakeStorageAccountDetails{
					AccountURL: to.Ptr("https://accountname.dfs.core.windows.net"),
					Filesystem: to.Ptr("default"),
				},
				Encryption: &armsynapse.EncryptionDetails{
					Cmk: &armsynapse.CustomerManagedKeyDetails{
						KekIdentity: &armsynapse.KekIdentityProperties{
							UseSystemAssignedIdentity: false,
							UserAssignedIdentity:      to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourcegroups/resourceGroup1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/uami1"),
						},
						Key: &armsynapse.WorkspaceKeyDetails{
							Name:        to.Ptr("default"),
							KeyVaultURL: to.Ptr("https://vault.azure.net/keys/key1"),
						},
						Status: to.Ptr("Consistent"),
					},
					DoubleEncryptionEnabled: to.Ptr(true),
				},
				ManagedResourceGroupName: to.Ptr("workspaceManagedResourceGroupUnique"),
				ManagedVirtualNetwork:    to.Ptr("default"),
				ManagedVirtualNetworkSettings: &armsynapse.ManagedVirtualNetworkSettings{
					AllowedAADTenantIDsForLinking: []*string{
						to.Ptr("740239CE-A25B-485B-86A0-262F29F6EBDB")},
					LinkedAccessCheckOnTargetResource: to.Ptr(false),
					PreventDataExfiltration:           to.Ptr(false),
				},
				PrivateEndpointConnections: []*armsynapse.PrivateEndpointConnection{
					{
						Name: to.Ptr("sql"),
						Type: to.Ptr("Microsoft.Synapse/workspaces/privateEndpointConnections"),
						ID:   to.Ptr("/subscriptions/01234567-89ab-4def-0123-456789abcdef/resourceGroups/ExampleResourceGroup/providers/Microsoft.Synapse/workspaces/ExampleWorkspace/privateEndpointConnections/ExamplePrivateEndpointConnection"),
						Properties: &armsynapse.PrivateEndpointConnectionProperties{
							PrivateEndpoint: &armsynapse.PrivateEndpoint{
								ID: to.Ptr("/subscriptions/01234567-89ab-4def-0123-456789abcdef/resourceGroups/ExampleResourceGroup/providers/Microsoft.Network/privateEndpoints/ExamplePrivateEndpoint"),
							},
							PrivateLinkServiceConnectionState: &armsynapse.PrivateLinkServiceConnectionState{
								Description:     to.Ptr("Auto-approved"),
								ActionsRequired: to.Ptr("None"),
								Status:          to.Ptr("Approved"),
							},
							ProvisioningState: to.Ptr("Succeeded"),
						},
					}},
				ProvisioningState:   to.Ptr("Succeeded"),
				PublicNetworkAccess: to.Ptr(armsynapse.WorkspacePublicNetworkAccessEnabled),
				PurviewConfiguration: &armsynapse.PurviewConfiguration{
					PurviewResourceID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/resourceGroup1/providers/Microsoft.ProjectPurview/accounts/accountname1"),
				},
				SQLAdministratorLogin: to.Ptr("login"),
				WorkspaceUID:          to.Ptr("999b999q-b888-4b44-bacd-2c222cc2222d"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Workspace) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Workspace)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/CreateOrUpdateWorkspace.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkspaces_Delete(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/DeleteWorkspace.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a workspace"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewWorkspacesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"resourceGroup1",
		"workspace1",
		&armsynapse.WorkspacesClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/DeleteWorkspace.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/DeleteWorkspace.json: %v", err)
	}
	// Response check
	{
		exampleRes := map[string]interface{}{
			"name":     "workspace1",
			"type":     "Microsoft.Synapse/workspaces",
			"id":       "/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/resourceGroup1/providers/Microsoft.Synapse/workspaces/workspace1",
			"location": "East US",
			"properties": map[string]interface{}{
				"connectivityEndpoints": map[string]interface{}{
					"dev": "workspace1.dev.projectarcadia.net",
					"sql": "workspace1.sql.projectarcadia.net",
				},
				"defaultDataLakeStorage": map[string]interface{}{
					"accountUrl": "https://accountname.dfs.core.windows.net",
					"filesystem": "default",
				},
				"managedResourceGroupName": "resourceGroup2",
				"provisioningState":        "Deleting",
				"sqlAdministratorLogin":    "login",
			},
			"tags": map[string]interface{}{
				"key": "value",
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Interface) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Interface)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/DeleteWorkspace.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkspaces_List(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ListWorkspacesInSubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List workspaces in subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewWorkspacesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ListWorkspacesInSubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsynapse.WorkspaceInfoListResult{
			Value: []*armsynapse.Workspace{
				{
					Name:     to.Ptr("workspace1"),
					Type:     to.Ptr("Microsoft.Synapse/workspaces"),
					ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/resourceGroup1/providers/Microsoft.Synapse/workspaces/workspace1"),
					Location: to.Ptr("East US"),
					Tags: map[string]*string{
						"key": to.Ptr("value"),
					},
					Properties: &armsynapse.WorkspaceProperties{
						ConnectivityEndpoints: map[string]*string{
							"dev": to.Ptr("workspace1.dev.projectarcadia.net"),
							"sql": to.Ptr("workspace1.sql.projectarcadia.net"),
						},
						DefaultDataLakeStorage: &armsynapse.DataLakeStorageAccountDetails{
							AccountURL: to.Ptr("https://accountname.dfs.core.windows.net"),
							Filesystem: to.Ptr("default"),
						},
						ManagedResourceGroupName: to.Ptr("resourceGroup2"),
						ProvisioningState:        to.Ptr("Succeeded"),
						SQLAdministratorLogin:    to.Ptr("login"),
						WorkspaceUID:             to.Ptr("999b999q-b888-4b44-bacd-2c222cc2222d"),
					},
				},
				{
					Name:     to.Ptr("workspace2"),
					Type:     to.Ptr("Microsoft.Synapse/workspaces"),
					ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/resourceGroup1/providers/Microsoft.Synapse/workspaces/workspace2"),
					Location: to.Ptr("East US"),
					Tags: map[string]*string{
						"key": to.Ptr("value"),
					},
					Properties: &armsynapse.WorkspaceProperties{
						ConnectivityEndpoints: map[string]*string{
							"dev": to.Ptr("workspace2.dev.projectarcadia.net"),
							"sql": to.Ptr("workspace2.sql.projectarcadia.net"),
						},
						DefaultDataLakeStorage: &armsynapse.DataLakeStorageAccountDetails{
							AccountURL: to.Ptr("https://accountname.dfs.core.windows.net"),
							Filesystem: to.Ptr("default"),
						},
						ManagedResourceGroupName: to.Ptr("resourceGroup2"),
						ProvisioningState:        to.Ptr("Succeeded"),
						SQLAdministratorLogin:    to.Ptr("login"),
						WorkspaceUID:             to.Ptr("999b999q-b888-4b44-bacd-2c222cc2222d"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.WorkspaceInfoListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.WorkspaceInfoListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ListWorkspacesInSubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkspaceAADAdmins_Get(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetWorkspaceAadAdmin.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get workspace active directory admin"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewWorkspaceAADAdminsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"resourceGroup1",
		"workspace1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetWorkspaceAadAdmin.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.WorkspaceAADAdminInfo{
			Name: to.Ptr("activeDirectory"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/resourceGroup1/providers/Microsoft.Synapse/workspaces/workspace1/administrators/activeDirectory"),
			Properties: &armsynapse.AADAdminProperties{
				AdministratorType: to.Ptr("ActiveDirectory"),
				Login:             to.Ptr("bob@contoso.com"),
				Sid:               to.Ptr("c6b82b90-a647-49cb-8a62-0d2d3cb7ac7c"),
				TenantID:          to.Ptr("c6b82b90-a647-49cb-8a62-0d2d3cb7ac7c"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.WorkspaceAADAdminInfo) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.WorkspaceAADAdminInfo)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetWorkspaceAadAdmin.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkspaceAADAdmins_CreateOrUpdate(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/CreateOrUpdateWorkspaceAadAdmin.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update workspace active directory admin"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewWorkspaceAADAdminsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"resourceGroup1",
		"workspace1",
		armsynapse.WorkspaceAADAdminInfo{
			Properties: &armsynapse.AADAdminProperties{
				AdministratorType: to.Ptr("ActiveDirectory"),
				Login:             to.Ptr("bob@contoso.com"),
				Sid:               to.Ptr("c6b82b90-a647-49cb-8a62-0d2d3cb7ac7c"),
				TenantID:          to.Ptr("c6b82b90-a647-49cb-8a62-0d2d3cb7ac7c"),
			},
		},
		&armsynapse.WorkspaceAADAdminsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/CreateOrUpdateWorkspaceAadAdmin.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/CreateOrUpdateWorkspaceAadAdmin.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.WorkspaceAADAdminInfo{
			Name: to.Ptr("activeDirectory"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/resourceGroup1/providers/Microsoft.Synapse/workspaces/workspace1/administrators/activeDirectory"),
			Properties: &armsynapse.AADAdminProperties{
				AdministratorType: to.Ptr("ActiveDirectory"),
				Login:             to.Ptr("bob@contoso.com"),
				Sid:               to.Ptr("c6b82b90-a647-49cb-8a62-0d2d3cb7ac7c"),
				TenantID:          to.Ptr("c6b82b90-a647-49cb-8a62-0d2d3cb7ac7c"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.WorkspaceAADAdminInfo) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.WorkspaceAADAdminInfo)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/CreateOrUpdateWorkspaceAadAdmin.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkspaceAADAdmins_Delete(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/DeleteWorkspaceAadAdmin.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete workspace active directory admin"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewWorkspaceAADAdminsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"resourceGroup1",
		"workspace1",
		&armsynapse.WorkspaceAADAdminsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/DeleteWorkspaceAadAdmin.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/DeleteWorkspaceAadAdmin.json: %v", err)
	}
}

func TestWorkspaceSQLAADAdmins_Get(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetWorkspaceAadAdmin.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get workspace active directory admin"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewWorkspaceSQLAADAdminsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"resourceGroup1",
		"workspace1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetWorkspaceAadAdmin.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.WorkspaceAADAdminInfo{
			Name: to.Ptr("activeDirectory"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/resourceGroup1/providers/Microsoft.Synapse/workspaces/workspace1/administrators/activeDirectory"),
			Properties: &armsynapse.AADAdminProperties{
				AdministratorType: to.Ptr("ActiveDirectory"),
				Login:             to.Ptr("bob@contoso.com"),
				Sid:               to.Ptr("c6b82b90-a647-49cb-8a62-0d2d3cb7ac7c"),
				TenantID:          to.Ptr("c6b82b90-a647-49cb-8a62-0d2d3cb7ac7c"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.WorkspaceAADAdminInfo) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.WorkspaceAADAdminInfo)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetWorkspaceAadAdmin.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkspaceSQLAADAdmins_CreateOrUpdate(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/CreateOrUpdateWorkspaceAadAdmin.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update workspace active directory admin"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewWorkspaceSQLAADAdminsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"resourceGroup1",
		"workspace1",
		armsynapse.WorkspaceAADAdminInfo{
			Properties: &armsynapse.AADAdminProperties{
				AdministratorType: to.Ptr("ActiveDirectory"),
				Login:             to.Ptr("bob@contoso.com"),
				Sid:               to.Ptr("c6b82b90-a647-49cb-8a62-0d2d3cb7ac7c"),
				TenantID:          to.Ptr("c6b82b90-a647-49cb-8a62-0d2d3cb7ac7c"),
			},
		},
		&armsynapse.WorkspaceSQLAADAdminsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/CreateOrUpdateWorkspaceAadAdmin.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/CreateOrUpdateWorkspaceAadAdmin.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.WorkspaceAADAdminInfo{
			Name: to.Ptr("activeDirectory"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/resourceGroup1/providers/Microsoft.Synapse/workspaces/workspace1/administrators/activeDirectory"),
			Properties: &armsynapse.AADAdminProperties{
				AdministratorType: to.Ptr("ActiveDirectory"),
				Login:             to.Ptr("bob@contoso.com"),
				Sid:               to.Ptr("c6b82b90-a647-49cb-8a62-0d2d3cb7ac7c"),
				TenantID:          to.Ptr("c6b82b90-a647-49cb-8a62-0d2d3cb7ac7c"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.WorkspaceAADAdminInfo) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.WorkspaceAADAdminInfo)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/CreateOrUpdateWorkspaceAadAdmin.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkspaceSQLAADAdmins_Delete(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/DeleteWorkspaceAadAdmin.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete workspace active directory admin"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewWorkspaceSQLAADAdminsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"resourceGroup1",
		"workspace1",
		&armsynapse.WorkspaceSQLAADAdminsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/DeleteWorkspaceAadAdmin.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/DeleteWorkspaceAadAdmin.json: %v", err)
	}
}

func TestWorkspaceManagedIdentitySQLControlSettings_Get(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetManagedIdentitySqlControlSettings.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get managed identity sql control settings"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewWorkspaceManagedIdentitySQLControlSettingsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"resourceGroup1",
		"workspace1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetManagedIdentitySqlControlSettings.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.ManagedIdentitySQLControlSettingsModel{
			Name: to.Ptr("default"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/resourceGroup1/providers/Microsoft.Synapse/workspaces/workspace1/managedIdentitySqlControlSettings/default"),
			Properties: &armsynapse.ManagedIdentitySQLControlSettingsModelProperties{
				GrantSQLControlToManagedIdentity: &armsynapse.ManagedIdentitySQLControlSettingsModelPropertiesGrantSQLControlToManagedIdentity{
					ActualState:  to.Ptr(armsynapse.ManagedIdentitySQLControlSettingsModelPropertiesGrantSQLControlToManagedIdentityActualStateEnabled),
					DesiredState: to.Ptr(armsynapse.ManagedIdentitySQLControlSettingsModelPropertiesGrantSQLControlToManagedIdentityDesiredStateEnabled),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ManagedIdentitySQLControlSettingsModel) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ManagedIdentitySQLControlSettingsModel)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetManagedIdentitySqlControlSettings.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkspaceManagedIdentitySQLControlSettings_CreateOrUpdate(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/CreateOrUpdateManagedIdentitySqlControlSettings.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update managed identity sql control settings"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewWorkspaceManagedIdentitySQLControlSettingsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"resourceGroup1",
		"workspace1",
		armsynapse.ManagedIdentitySQLControlSettingsModel{
			Properties: &armsynapse.ManagedIdentitySQLControlSettingsModelProperties{
				GrantSQLControlToManagedIdentity: &armsynapse.ManagedIdentitySQLControlSettingsModelPropertiesGrantSQLControlToManagedIdentity{
					DesiredState: to.Ptr(armsynapse.ManagedIdentitySQLControlSettingsModelPropertiesGrantSQLControlToManagedIdentityDesiredStateEnabled),
				},
			},
		},
		&armsynapse.WorkspaceManagedIdentitySQLControlSettingsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/CreateOrUpdateManagedIdentitySqlControlSettings.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/CreateOrUpdateManagedIdentitySqlControlSettings.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.ManagedIdentitySQLControlSettingsModel{
			Name: to.Ptr("default"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/resourceGroup1/providers/Microsoft.Synapse/workspaces/workspace1/managedIdentitySqlControlSettings/default"),
			Properties: &armsynapse.ManagedIdentitySQLControlSettingsModelProperties{
				GrantSQLControlToManagedIdentity: &armsynapse.ManagedIdentitySQLControlSettingsModelPropertiesGrantSQLControlToManagedIdentity{
					ActualState:  to.Ptr(armsynapse.ManagedIdentitySQLControlSettingsModelPropertiesGrantSQLControlToManagedIdentityActualStateEnabling),
					DesiredState: to.Ptr(armsynapse.ManagedIdentitySQLControlSettingsModelPropertiesGrantSQLControlToManagedIdentityDesiredStateEnabled),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ManagedIdentitySQLControlSettingsModel) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ManagedIdentitySQLControlSettingsModel)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/CreateOrUpdateManagedIdentitySqlControlSettings.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRestorableDroppedSQLPools_Get(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/RestorableDroppedSqlPoolGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a restorable dropped Sql pool"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewRestorableDroppedSQLPoolsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"restorabledroppeddatabasetest-1257",
		"restorabledroppeddatabasetest-2389",
		"restorabledroppeddatabasetest-7654,131403269876900000",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/RestorableDroppedSqlPoolGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.RestorableDroppedSQLPool{
			Name:     to.Ptr("restorabledroppeddatabasetest-7654,131403269876900000"),
			Type:     to.Ptr("Microsoft.Synapse/workspaces/restorableDroppedSqlPools"),
			ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/restorabledroppeddatabasetest-1257/providers/Microsoft.Synapse/workspaces/restorabledroppeddatabasetest-2389/restorableDroppedSqlPools/restorabledroppeddatabasetest-7654,131403269876900000"),
			Location: to.Ptr("Japan East"),
			Properties: &armsynapse.RestorableDroppedSQLPoolProperties{
				CreationDate:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-10T00:56:19.2Z"); return t }()),
				DatabaseName:          to.Ptr("restorabledroppeddatabasetest-7654"),
				DeletionDate:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-05-27T02:49:47.69Z"); return t }()),
				EarliestRestoreDate:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-05-20T02:49:47.69Z"); return t }()),
				Edition:               to.Ptr("Datawarehouse"),
				MaxSizeBytes:          to.Ptr("2147483648"),
				ServiceLevelObjective: to.Ptr("DW100c"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RestorableDroppedSQLPool) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RestorableDroppedSQLPool)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/RestorableDroppedSqlPoolGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRestorableDroppedSQLPools_ListByWorkspace(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/RestorableDroppedSqlpoolList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get list of restorable dropped Sql pools"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewRestorableDroppedSQLPoolsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByWorkspace("restorabledroppeddatabasetest-1349",
		"restorabledroppeddatabasetest-1840",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/RestorableDroppedSqlpoolList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsynapse.RestorableDroppedSQLPoolListResult{
			Value: []*armsynapse.RestorableDroppedSQLPool{
				{
					Name:     to.Ptr("restorabledroppeddatabasetest-1345,131403269876900000"),
					Type:     to.Ptr("Microsoft.Synapse/workspaces/restorableDroppedSqlPools"),
					ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/restorabledroppeddatabasetest-1349/providers/Microsoft.Synapse/workspaces/restorabledroppeddatabasetest-1840/restorableDroppedSqlPools/restorabledroppeddatabasetest-1345,131403269876900000"),
					Location: to.Ptr("Japan East"),
					Properties: &armsynapse.RestorableDroppedSQLPoolProperties{
						CreationDate:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-10T00:56:19.2Z"); return t }()),
						DatabaseName:          to.Ptr("restorabledroppeddatabasetest-1345"),
						DeletionDate:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-05-27T02:49:47.69Z"); return t }()),
						EarliestRestoreDate:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-05-20T02:49:47.69Z"); return t }()),
						Edition:               to.Ptr("Basic"),
						MaxSizeBytes:          to.Ptr("2147483648"),
						ServiceLevelObjective: to.Ptr("Basic"),
					},
				},
				{
					Name:     to.Ptr("restorabledroppeddatabasetest-2764,131403249684030000"),
					Type:     to.Ptr("Microsoft.Synapse/workspaces/restorableDroppedSqlPools"),
					ID:       to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/restorabledroppeddatabasetest-1349/providers/Microsoft.Synapse/workspaces/restorabledroppeddatabasetest-1840/restorableDroppedSqlPools/restorabledroppeddatabasetest-2764,131403249684030000"),
					Location: to.Ptr("Japan East"),
					Properties: &armsynapse.RestorableDroppedSQLPoolProperties{
						CreationDate:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-05-10T00:56:19.2Z"); return t }()),
						DatabaseName:          to.Ptr("restorabledroppeddatabasetest-2764"),
						DeletionDate:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-05-27T02:16:08.403Z"); return t }()),
						EarliestRestoreDate:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-21T02:49:47.69Z"); return t }()),
						Edition:               to.Ptr("Standard"),
						MaxSizeBytes:          to.Ptr("268435456000"),
						ServiceLevelObjective: to.Ptr("S0"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.RestorableDroppedSQLPoolListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.RestorableDroppedSQLPoolListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/RestorableDroppedSqlpoolList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBigDataPools_Get(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/GetBigDataPool.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a Big Data pool"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewBigDataPoolsClient("01234567-89ab-4def-0123-456789abcdef", cred, &options)
	res, err := client.Get(ctx,
		"ExampleResourceGroup",
		"ExampleWorkspace",
		"ExamplePool",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/GetBigDataPool.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.BigDataPoolResourceInfo{
			Name:     to.Ptr("ExamplePool"),
			Type:     to.Ptr("Microsoft.Synapse/workspaces/bigDataPools"),
			ID:       to.Ptr("/subscriptions/01234567-89ab-4def-0123-456789abcdef/resourceGroups/ExampleResourceGroup/providers/Microsoft.Synapse/workspaces/ExampleWorkspace/bigDataPools/ExamplePool"),
			Location: to.Ptr("West US 2"),
			Tags:     map[string]*string{},
			Properties: &armsynapse.BigDataPoolResourceProperties{
				AutoPause: &armsynapse.AutoPauseProperties{
					DelayInMinutes: to.Ptr[int32](15),
					Enabled:        to.Ptr(true),
				},
				AutoScale: &armsynapse.AutoScaleProperties{
					Enabled:      to.Ptr(true),
					MaxNodeCount: to.Ptr[int32](50),
					MinNodeCount: to.Ptr[int32](3),
				},
				CreationDate:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "1970-01-01T00:00:00Z"); return t }()),
				DefaultSparkLogFolder: to.Ptr("/logs"),
				LibraryRequirements: &armsynapse.LibraryRequirements{
					Content:  to.Ptr(""),
					Filename: to.Ptr("requirements.txt"),
					Time:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "1970-01-01T00:00:00Z"); return t }()),
				},
				NodeCount:         to.Ptr[int32](4),
				NodeSize:          to.Ptr(armsynapse.NodeSizeMedium),
				NodeSizeFamily:    to.Ptr(armsynapse.NodeSizeFamilyMemoryOptimized),
				ProvisioningState: to.Ptr("Succeeded"),
				SparkEventsFolder: to.Ptr("/events"),
				SparkVersion:      to.Ptr("2.4"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.BigDataPoolResourceInfo) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.BigDataPoolResourceInfo)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/GetBigDataPool.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBigDataPools_Update(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/UpdateBigDataPool.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a Big Data pool"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewBigDataPoolsClient("01234567-89ab-4def-0123-456789abcdef", cred, &options)
	res, err := client.Update(ctx,
		"ExampleResourceGroup",
		"ExampleWorkspace",
		"ExamplePool",
		armsynapse.BigDataPoolPatchInfo{
			Tags: map[string]*string{
				"key": to.Ptr("value"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/UpdateBigDataPool.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.BigDataPoolResourceInfo{
			Name:     to.Ptr("ExamplePool"),
			Type:     to.Ptr("Microsoft.Synapse/workspaces/bigDataPools"),
			ID:       to.Ptr("/subscriptions/01234567-89ab-4def-0123-456789abcdef/resourceGroups/ExampleResourceGroup/providers/Microsoft.Synapse/workspaces/ExampleWorkspace/bigDataPools/ExamplePool"),
			Location: to.Ptr("West US 2"),
			Tags: map[string]*string{
				"key": to.Ptr("value"),
			},
			Properties: &armsynapse.BigDataPoolResourceProperties{
				AutoPause: &armsynapse.AutoPauseProperties{
					DelayInMinutes: to.Ptr[int32](15),
					Enabled:        to.Ptr(true),
				},
				AutoScale: &armsynapse.AutoScaleProperties{
					Enabled:      to.Ptr(true),
					MaxNodeCount: to.Ptr[int32](50),
					MinNodeCount: to.Ptr[int32](3),
				},
				CreationDate:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "1970-01-01T00:00:00Z"); return t }()),
				DefaultSparkLogFolder: to.Ptr("/logs"),
				LibraryRequirements: &armsynapse.LibraryRequirements{
					Content:  to.Ptr(""),
					Filename: to.Ptr("requirements.txt"),
					Time:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "1970-01-01T00:00:00Z"); return t }()),
				},
				NodeCount:         to.Ptr[int32](4),
				NodeSize:          to.Ptr(armsynapse.NodeSizeMedium),
				NodeSizeFamily:    to.Ptr(armsynapse.NodeSizeFamilyMemoryOptimized),
				ProvisioningState: to.Ptr("Succeeded"),
				SparkEventsFolder: to.Ptr("/events"),
				SparkVersion:      to.Ptr("2.4"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.BigDataPoolResourceInfo) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.BigDataPoolResourceInfo)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/UpdateBigDataPool.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBigDataPools_CreateOrUpdate(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/CreateOrUpdateBigDataPool.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a Big Data pool"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewBigDataPoolsClient("01234567-89ab-4def-0123-456789abcdef", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"ExampleResourceGroup",
		"ExampleWorkspace",
		"ExamplePool",
		armsynapse.BigDataPoolResourceInfo{
			Location: to.Ptr("West US 2"),
			Tags: map[string]*string{
				"key": to.Ptr("value"),
			},
			Properties: &armsynapse.BigDataPoolResourceProperties{
				AutoPause: &armsynapse.AutoPauseProperties{
					DelayInMinutes: to.Ptr[int32](15),
					Enabled:        to.Ptr(true),
				},
				AutoScale: &armsynapse.AutoScaleProperties{
					Enabled:      to.Ptr(true),
					MaxNodeCount: to.Ptr[int32](50),
					MinNodeCount: to.Ptr[int32](3),
				},
				DefaultSparkLogFolder: to.Ptr("/logs"),
				LibraryRequirements: &armsynapse.LibraryRequirements{
					Content:  to.Ptr(""),
					Filename: to.Ptr("requirements.txt"),
				},
				NodeCount:         to.Ptr[int32](4),
				NodeSize:          to.Ptr(armsynapse.NodeSizeMedium),
				NodeSizeFamily:    to.Ptr(armsynapse.NodeSizeFamilyMemoryOptimized),
				SparkEventsFolder: to.Ptr("/events"),
				SparkVersion:      to.Ptr("2.4"),
			},
		},
		&armsynapse.BigDataPoolsClientBeginCreateOrUpdateOptions{Force: nil,
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/CreateOrUpdateBigDataPool.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/CreateOrUpdateBigDataPool.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.BigDataPoolResourceInfo{
			Name:     to.Ptr("ExamplePool"),
			Type:     to.Ptr("Microsoft.Synapse/workspaces/bigDataPools"),
			ID:       to.Ptr("/subscriptions/01234567-89ab-4def-0123-456789abcdef/resourceGroups/ExampleResourceGroup/providers/Microsoft.Synapse/workspaces/ExampleWorkspace/bigDataPools/ExamplePool"),
			Location: to.Ptr("West US 2"),
			Tags: map[string]*string{
				"key": to.Ptr("value"),
			},
			Properties: &armsynapse.BigDataPoolResourceProperties{
				AutoPause: &armsynapse.AutoPauseProperties{
					DelayInMinutes: to.Ptr[int32](15),
					Enabled:        to.Ptr(true),
				},
				AutoScale: &armsynapse.AutoScaleProperties{
					Enabled:      to.Ptr(true),
					MaxNodeCount: to.Ptr[int32](50),
					MinNodeCount: to.Ptr[int32](3),
				},
				CreationDate:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "1970-01-01T00:00:00Z"); return t }()),
				DefaultSparkLogFolder:  to.Ptr("/logs"),
				LastSucceededTimestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "1970-01-01T10:00:00Z"); return t }()),
				LibraryRequirements: &armsynapse.LibraryRequirements{
					Content:  to.Ptr(""),
					Filename: to.Ptr("requirements.txt"),
					Time:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "1970-01-01T00:00:00Z"); return t }()),
				},
				NodeCount:         to.Ptr[int32](4),
				NodeSize:          to.Ptr(armsynapse.NodeSizeMedium),
				NodeSizeFamily:    to.Ptr(armsynapse.NodeSizeFamilyMemoryOptimized),
				ProvisioningState: to.Ptr("Succeeded"),
				SparkEventsFolder: to.Ptr("/events"),
				SparkVersion:      to.Ptr("2.4"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.BigDataPoolResourceInfo) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.BigDataPoolResourceInfo)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/CreateOrUpdateBigDataPool.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBigDataPools_Delete(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/DeleteBigDataPool.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a Big Data pool"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewBigDataPoolsClient("01234567-89ab-4def-0123-456789abcdef", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"ExampleResourceGroup",
		"ExampleWorkspace",
		"ExamplePool",
		&armsynapse.BigDataPoolsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/DeleteBigDataPool.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/DeleteBigDataPool.json: %v", err)
	}
	// Response check
	{
		exampleRes := map[string]interface{}{
			"name":     "ExamplePool",
			"type":     "Microsoft.Synapse/workspaces/bigDataPools",
			"id":       "/subscriptions/01234567-89ab-4def-0123-456789abcdef/resourceGroups/ExampleResourceGroup/providers/Microsoft.Synapse/workspaces/ExampleWorkspace/bigDataPools/ExamplePool",
			"location": "West US 2",
			"properties": map[string]interface{}{
				"autoPause": map[string]interface{}{
					"delayInMinutes": float64(15),
					"enabled":        true,
				},
				"autoScale": map[string]interface{}{
					"enabled":      true,
					"maxNodeCount": float64(50),
					"minNodeCount": float64(3),
				},
				"creationDate":          "1970-01-01T00:00:00Z",
				"defaultSparkLogFolder": "/logs",
				"libraryRequirements": map[string]interface{}{
					"content":  "",
					"filename": "requirements.txt",
					"time":     "1970-01-01T00:00:00Z",
				},
				"nodeCount":         float64(4),
				"nodeSize":          "Medium",
				"nodeSizeFamily":    "MemoryOptimized",
				"provisioningState": "Deleting",
				"sparkEventsFolder": "/events",
				"sparkVersion":      "2.4",
			},
			"tags": map[string]interface{}{},
		}
		if !reflect.DeepEqual(exampleRes, res.Interface) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Interface)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/DeleteBigDataPool.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBigDataPools_ListByWorkspace(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/ListBigDataPoolsInWorkspace.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Big Data pools in a workspace"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewBigDataPoolsClient("01234567-89ab-4def-0123-456789abcdef", cred, &options)
	pager := client.ListByWorkspace("ExampleResourceGroup",
		"ExampleWorkspace",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/ListBigDataPoolsInWorkspace.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsynapse.BigDataPoolResourceInfoListResult{
			Value: []*armsynapse.BigDataPoolResourceInfo{
				{
					Name:     to.Ptr("ExamplePool"),
					Type:     to.Ptr("Microsoft.Synapse/workspaces/bigDataPools"),
					ID:       to.Ptr("/subscriptions/01234567-89ab-4def-0123-456789abcdef/resourceGroups/ExampleResourceGroup/providers/Microsoft.Synapse/workspaces/ExampleWorkspace/bigDataPools/ExamplePool"),
					Location: to.Ptr("West US 2"),
					Tags:     map[string]*string{},
					Properties: &armsynapse.BigDataPoolResourceProperties{
						AutoPause: &armsynapse.AutoPauseProperties{
							DelayInMinutes: to.Ptr[int32](15),
							Enabled:        to.Ptr(true),
						},
						AutoScale: &armsynapse.AutoScaleProperties{
							Enabled:      to.Ptr(true),
							MaxNodeCount: to.Ptr[int32](50),
							MinNodeCount: to.Ptr[int32](3),
						},
						CreationDate:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "1970-01-01T00:00:00Z"); return t }()),
						DefaultSparkLogFolder: to.Ptr("/logs"),
						LibraryRequirements: &armsynapse.LibraryRequirements{
							Content:  to.Ptr(""),
							Filename: to.Ptr("requirements.txt"),
							Time:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "1970-01-01T00:00:00Z"); return t }()),
						},
						NodeCount:         to.Ptr[int32](4),
						NodeSize:          to.Ptr(armsynapse.NodeSizeMedium),
						NodeSizeFamily:    to.Ptr(armsynapse.NodeSizeFamilyMemoryOptimized),
						ProvisioningState: to.Ptr("Succeeded"),
						SparkEventsFolder: to.Ptr("/events"),
						SparkVersion:      to.Ptr("2.4"),
					},
				},
				{
					Name:     to.Ptr("ExamplePool2"),
					Type:     to.Ptr("Microsoft.Synapse/workspaces/bigDataPools"),
					ID:       to.Ptr("/subscriptions/01234567-89ab-4def-0123-456789abcdef/resourceGroups/ExampleResourceGroup/providers/Microsoft.Synapse/workspaces/ExampleWorkspace/bigDataPools/ExamplePool2"),
					Location: to.Ptr("West US 2"),
					Tags:     map[string]*string{},
					Properties: &armsynapse.BigDataPoolResourceProperties{
						AutoPause: &armsynapse.AutoPauseProperties{
							DelayInMinutes: to.Ptr[int32](15),
							Enabled:        to.Ptr(true),
						},
						AutoScale: &armsynapse.AutoScaleProperties{
							Enabled:      to.Ptr(true),
							MaxNodeCount: to.Ptr[int32](50),
							MinNodeCount: to.Ptr[int32](3),
						},
						CreationDate:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "1970-01-01T00:00:00Z"); return t }()),
						DefaultSparkLogFolder: to.Ptr("/logs"),
						LibraryRequirements: &armsynapse.LibraryRequirements{
							Content:  to.Ptr(""),
							Filename: to.Ptr("requirements.txt"),
							Time:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "1970-01-01T00:00:00Z"); return t }()),
						},
						NodeCount:         to.Ptr[int32](4),
						NodeSize:          to.Ptr(armsynapse.NodeSizeMedium),
						NodeSizeFamily:    to.Ptr(armsynapse.NodeSizeFamilyMemoryOptimized),
						ProvisioningState: to.Ptr("Succeeded"),
						SparkEventsFolder: to.Ptr("/events"),
						SparkVersion:      to.Ptr("2.4"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.BigDataPoolResourceInfoListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.BigDataPoolResourceInfoListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/ListBigDataPoolsInWorkspace.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLibrary_Get(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/Library_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Library by name"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewLibraryClient("12345678-1234-1234-1234-12345678abc", cred, &options)
	res, err := client.Get(ctx,
		"exampleResourceGroup",
		"exampleLibraryName.jar",
		"exampleWorkspace",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/Library_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.LibraryResource{
			Name: to.Ptr("exampleLibraryName.jar"),
			Type: to.Ptr("Microsoft.Synapse/workspaces/libraries"),
			ID:   to.Ptr("/subscriptions/12345678-1234-1234-1234-12345678abc/resourceGroups/exampleResourceGroup/providers/Microsoft.Synapse/workspaces/exampleWorkspace/libraries/exampleLibraryName.jar"),
			Etag: to.Ptr("1500474f-0000-0200-0000-5cbe090d0000"),
			Properties: &armsynapse.LibraryInfo{
				Name:               to.Ptr("exampleLibraryName.jar"),
				Type:               to.Ptr("jar"),
				Path:               to.Ptr("exampleWorkspace/libraries/exampleLibraryName.jar"),
				ContainerName:      to.Ptr("exampleContainer"),
				CreatorID:          to.Ptr("2222222e-222d-222f-2222-22a2f222d2f2"),
				ProvisioningStatus: to.Ptr("Succeeded"),
				UploadedTimestamp:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-10-23T07:59:29.1573546+00:00"); return t }()),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.LibraryResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.LibraryResource)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/Library_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLibraries_ListByWorkspace(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/Libraries_ListByWorkspace.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List libraries in a workspace"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewLibrariesClient("12345678-1234-1234-1234-12345678abc", cred, &options)
	pager := client.ListByWorkspace("exampleResourceGroup",
		"exampleWorkspace",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/Libraries_ListByWorkspace.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsynapse.LibraryListResponse{
			Value: []*armsynapse.LibraryResource{
				{
					Name: to.Ptr("exampleLibraryName1.jar"),
					Type: to.Ptr("Microsoft.Synapse/workspaces/libraries"),
					ID:   to.Ptr("/subscriptions/12345678-1234-1234-1234-12345678abc/resourceGroups/exampleResourceGroup/providers/Microsoft.Synapse/workspaces/exampleWorkspace/libraries/exampleLibraryName1.jar"),
					Etag: to.Ptr("1500474f-0000-0200-0000-5cbe090d0000"),
					Properties: &armsynapse.LibraryInfo{
						Name:               to.Ptr("exampleLibraryName1.jar"),
						Type:               to.Ptr("jar"),
						Path:               to.Ptr("exampleWorkspace/libraries/exampleLibraryName1.jar"),
						ContainerName:      to.Ptr("exampleContainer"),
						CreatorID:          to.Ptr("2222222e-222d-222f-2222-22a2f222d2f2"),
						ProvisioningStatus: to.Ptr("Succeeded"),
						UploadedTimestamp:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-10-23T07:59:29.1573546+00:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("exampleLibraryName2.jar"),
					Type: to.Ptr("Microsoft.Synapse/workspaces/libraries"),
					ID:   to.Ptr("/subscriptions/12345678-1234-1234-1234-12345678abc/resourceGroups/exampleResourceGroup/providers/Microsoft.Synapse/workspaces/exampleWorkspace/libraries/exampleLibraryName2.jar"),
					Etag: to.Ptr("1500474f-0000-0200-0000-5cbe090d0000"),
					Properties: &armsynapse.LibraryInfo{
						Name:               to.Ptr("exampleLibraryName2.jar"),
						Type:               to.Ptr("jar"),
						Path:               to.Ptr("exampleWorkspace/libraries/exampleLibraryName2.jar"),
						ContainerName:      to.Ptr("exampleContainer"),
						CreatorID:          to.Ptr("2222222e-222d-222f-2222-22a2f222d2f2"),
						ProvisioningStatus: to.Ptr("Succeeded"),
						UploadedTimestamp:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-10-23T07:59:29.1573546+00:00"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.LibraryListResponse) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.LibraryListResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/Libraries_ListByWorkspace.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIntegrationRuntimes_Update(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/IntegrationRuntimes_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update integration runtime"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewIntegrationRuntimesClient("12345678-1234-1234-1234-12345678abc", cred, &options)
	res, err := client.Update(ctx,
		"exampleResourceGroup",
		"exampleWorkspace",
		"exampleIntegrationRuntime",
		armsynapse.UpdateIntegrationRuntimeRequest{
			AutoUpdate:        to.Ptr(armsynapse.IntegrationRuntimeAutoUpdateOff),
			UpdateDelayOffset: to.Ptr("\"PT3H\""),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/IntegrationRuntimes_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.IntegrationRuntimeResource{
			Name: to.Ptr("exampleIntegrationRuntime"),
			Type: to.Ptr("Microsoft.Synapse/workspaces/integrationruntimes"),
			ID:   to.Ptr("/subscriptions/12345678-1234-1234-1234-12345678abc/resourceGroups/exampleResourceGroup/providers/Microsoft.Synapse/workspaces/exampleWorkspaceName/integrationruntimes/exampleIntegrationRuntime"),
			Etag: to.Ptr("0400f1a1-0000-0000-0000-5b2188640000"),
			Properties: &armsynapse.SelfHostedIntegrationRuntime{
				Type:        to.Ptr(armsynapse.IntegrationRuntimeTypeSelfHosted),
				Description: to.Ptr("A selfhosted integration runtime"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.IntegrationRuntimeResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.IntegrationRuntimeResource)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/IntegrationRuntimes_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIntegrationRuntimes_Get(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/IntegrationRuntimes_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get integration runtime"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewIntegrationRuntimesClient("12345678-1234-1234-1234-12345678abc", cred, &options)
	res, err := client.Get(ctx,
		"exampleResourceGroup",
		"exampleWorkspace",
		"exampleIntegrationRuntime",
		&armsynapse.IntegrationRuntimesClientGetOptions{IfNoneMatch: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/IntegrationRuntimes_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.IntegrationRuntimeResource{
			Name: to.Ptr("exampleIntegrationRuntime"),
			Type: to.Ptr("Microsoft.Synapse/workspaces/integrationruntimes"),
			ID:   to.Ptr("/subscriptions/12345678-1234-1234-1234-12345678abc/resourceGroups/exampleResourceGroup/providers/Microsoft.Synapse/workspaces/exampleWorkspaceName/integrationruntimes/exampleIntegrationRuntime"),
			Etag: to.Ptr("15003c4f-0000-0200-0000-5cbe090b0000"),
			Properties: &armsynapse.SelfHostedIntegrationRuntime{
				Type:        to.Ptr(armsynapse.IntegrationRuntimeTypeSelfHosted),
				Description: to.Ptr("A selfhosted integration runtime"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.IntegrationRuntimeResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.IntegrationRuntimeResource)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/IntegrationRuntimes_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIntegrationRuntimes_Create(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/IntegrationRuntimes_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create integration runtime"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewIntegrationRuntimesClient("12345678-1234-1234-1234-12345678abc", cred, &options)
	poller, err := client.BeginCreate(ctx,
		"exampleResourceGroup",
		"exampleWorkspace",
		"exampleIntegrationRuntime",
		armsynapse.IntegrationRuntimeResource{
			Properties: &armsynapse.SelfHostedIntegrationRuntime{
				Type:        to.Ptr(armsynapse.IntegrationRuntimeTypeSelfHosted),
				Description: to.Ptr("A selfhosted integration runtime"),
			},
		},
		&armsynapse.IntegrationRuntimesClientBeginCreateOptions{IfMatch: nil,
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/IntegrationRuntimes_Create.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/IntegrationRuntimes_Create.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.IntegrationRuntimeResource{
			Name: to.Ptr("exampleIntegrationRuntime"),
			Type: to.Ptr("Microsoft.Synapse/workspaces/integrationruntimes"),
			ID:   to.Ptr("/subscriptions/12345678-1234-1234-1234-12345678abc/resourceGroups/exampleResourceGroup/providers/Microsoft.Synapse/workspaces/exampleWorkspaceName/integrationruntimes/exampleIntegrationRuntime"),
			Etag: to.Ptr("000046c4-0000-0000-0000-5b2198bf0000"),
			Properties: &armsynapse.SelfHostedIntegrationRuntime{
				Type:        to.Ptr(armsynapse.IntegrationRuntimeTypeSelfHosted),
				Description: to.Ptr("A selfhosted integration runtime"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.IntegrationRuntimeResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.IntegrationRuntimeResource)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/IntegrationRuntimes_Create.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIntegrationRuntimes_Delete(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/IntegrationRuntimes_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete integration runtime"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewIntegrationRuntimesClient("12345678-1234-1234-1234-12345678abc", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"exampleResourceGroup",
		"exampleWorkspace",
		"exampleIntegrationRuntime",
		&armsynapse.IntegrationRuntimesClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/IntegrationRuntimes_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/IntegrationRuntimes_Delete.json: %v", err)
	}
}

func TestIntegrationRuntimes_Upgrade(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/IntegrationRuntimes_Upgrade.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Upgrade integration runtime"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewIntegrationRuntimesClient("12345678-1234-1234-1234-12345678abc", cred, &options)
	_, err := client.Upgrade(ctx,
		"exampleResourceGroup",
		"exampleWorkspace",
		"exampleIntegrationRuntime",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/IntegrationRuntimes_Upgrade.json: %v", err)
	}
}

func TestIntegrationRuntimes_ListByWorkspace(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/IntegrationRuntimes_ListByWorkspace.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List integration runtimes"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewIntegrationRuntimesClient("12345678-1234-1234-1234-12345678abc", cred, &options)
	pager := client.ListByWorkspace("exampleResourceGroup",
		"exampleWorkspace",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/IntegrationRuntimes_ListByWorkspace.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsynapse.IntegrationRuntimeListResponse{
			Value: []*armsynapse.IntegrationRuntimeResource{
				{
					Name: to.Ptr("exampleIntegrationRuntime"),
					Type: to.Ptr("Microsoft.Synapse/workspaces/integrationruntimes"),
					ID:   to.Ptr("/subscriptions/12345678-1234-1234-1234-12345678abc/resourceGroups/exampleResourceGroup/providers/Microsoft.Synapse/workspaces/exampleWorkspaceName/integrationruntimes/exampleIntegrationRuntime"),
					Etag: to.Ptr("0400f1a1-0000-0000-0000-5b2188640000"),
					Properties: &armsynapse.SelfHostedIntegrationRuntime{
						Type:        to.Ptr(armsynapse.IntegrationRuntimeTypeSelfHosted),
						Description: to.Ptr("A selfhosted integration runtime"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.IntegrationRuntimeListResponse) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.IntegrationRuntimeListResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/IntegrationRuntimes_ListByWorkspace.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIntegrationRuntimes_Start(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/IntegrationRuntimes_Start.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Start integration runtime"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewIntegrationRuntimesClient("12345678-1234-1234-1234-12345678abc", cred, &options)
	poller, err := client.BeginStart(ctx,
		"exampleResourceGroup",
		"exampleWorkspace",
		"exampleManagedIntegrationRuntime",
		&armsynapse.IntegrationRuntimesClientBeginStartOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/IntegrationRuntimes_Start.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/IntegrationRuntimes_Start.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.IntegrationRuntimeStatusResponse{
			Name: to.Ptr("exampleManagedIntegrationRuntime"),
			Properties: &armsynapse.ManagedIntegrationRuntimeStatus{
				Type:            to.Ptr(armsynapse.IntegrationRuntimeTypeManaged),
				DataFactoryName: to.Ptr("exampleWorkspaceName"),
				State:           to.Ptr(armsynapse.IntegrationRuntimeStateStarted),
				TypeProperties: &armsynapse.ManagedIntegrationRuntimeStatusTypeProperties{
					CreateTime:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-13T21:11:01.8695494Z"); return t }()),
					Nodes:       []*armsynapse.ManagedIntegrationRuntimeNode{},
					OtherErrors: []*armsynapse.ManagedIntegrationRuntimeError{},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.IntegrationRuntimeStatusResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.IntegrationRuntimeStatusResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/IntegrationRuntimes_Start.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIntegrationRuntimes_Stop(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/IntegrationRuntimes_Stop.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Stop integration runtime"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewIntegrationRuntimesClient("12345678-1234-1234-1234-12345678abc", cred, &options)
	poller, err := client.BeginStop(ctx,
		"exampleResourceGroup",
		"exampleWorkspace",
		"exampleManagedIntegrationRuntime",
		&armsynapse.IntegrationRuntimesClientBeginStopOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/IntegrationRuntimes_Stop.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/IntegrationRuntimes_Stop.json: %v", err)
	}
}

func TestIntegrationRuntimes_ListOutboundNetworkDependenciesEndpoints(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/IntegrationRuntimes_ListOutboundNetworkDependenciesEndpoints.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get outbound network dependency endpoints"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewIntegrationRuntimesClient("ade9c2b6-c160-4305-9bb9-80342f6c1ae2", cred, &options)
	res, err := client.ListOutboundNetworkDependenciesEndpoints(ctx,
		"exampleResourceGroup",
		"exampleWorkspace",
		"exampleIntegrationRuntime",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/IntegrationRuntimes_ListOutboundNetworkDependenciesEndpoints.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.IntegrationRuntimeOutboundNetworkDependenciesEndpointsResponse{
			Value: []*armsynapse.IntegrationRuntimeOutboundNetworkDependenciesCategoryEndpoint{
				{
					Category: to.Ptr("Azure Data Factory (Management)"),
					Endpoints: []*armsynapse.IntegrationRuntimeOutboundNetworkDependenciesEndpoint{
						{
							DomainName: to.Ptr("wu.frontend.int.clouddatahub-int.net"),
							EndpointDetails: []*armsynapse.IntegrationRuntimeOutboundNetworkDependenciesEndpointDetails{
								{
									Port: to.Ptr[int32](443),
								}},
						}},
				},
				{
					Category: to.Ptr("Azure Storage (Management)"),
					Endpoints: []*armsynapse.IntegrationRuntimeOutboundNetworkDependenciesEndpoint{
						{
							DomainName: to.Ptr("*.blob.core.windows.net"),
							EndpointDetails: []*armsynapse.IntegrationRuntimeOutboundNetworkDependenciesEndpointDetails{
								{
									Port: to.Ptr[int32](443),
								}},
						},
						{
							DomainName: to.Ptr("*.table.core.windows.net"),
							EndpointDetails: []*armsynapse.IntegrationRuntimeOutboundNetworkDependenciesEndpointDetails{
								{
									Port: to.Ptr[int32](443),
								}},
						}},
				},
				{
					Category: to.Ptr("Event Hub (Logging)"),
					Endpoints: []*armsynapse.IntegrationRuntimeOutboundNetworkDependenciesEndpoint{
						{
							DomainName: to.Ptr("*.servicebus.windows.net"),
							EndpointDetails: []*armsynapse.IntegrationRuntimeOutboundNetworkDependenciesEndpointDetails{
								{
									Port: to.Ptr[int32](443),
								}},
						}},
				},
				{
					Category: to.Ptr("Microsoft Logging service (Internal Use)"),
					Endpoints: []*armsynapse.IntegrationRuntimeOutboundNetworkDependenciesEndpoint{
						{
							DomainName: to.Ptr("gcs.prod.monitoring.core.windows.net"),
							EndpointDetails: []*armsynapse.IntegrationRuntimeOutboundNetworkDependenciesEndpointDetails{
								{
									Port: to.Ptr[int32](443),
								}},
						},
						{
							DomainName: to.Ptr("prod.warmpath.msftcloudes.com"),
							EndpointDetails: []*armsynapse.IntegrationRuntimeOutboundNetworkDependenciesEndpointDetails{
								{
									Port: to.Ptr[int32](443),
								}},
						},
						{
							DomainName: to.Ptr("azurewatsonanalysis-prod.core.windows.net"),
							EndpointDetails: []*armsynapse.IntegrationRuntimeOutboundNetworkDependenciesEndpointDetails{
								{
									Port: to.Ptr[int32](443),
								}},
						}},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.IntegrationRuntimeOutboundNetworkDependenciesEndpointsResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.IntegrationRuntimeOutboundNetworkDependenciesEndpointsResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/IntegrationRuntimes_ListOutboundNetworkDependenciesEndpoints.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIntegrationRuntimes_EnableInteractiveQuery(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/IntegrationRuntimes_EnableInteractiveQuery.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Stop integration runtime"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewIntegrationRuntimesClient("12345678-1234-1234-1234-12345678abc", cred, &options)
	poller, err := client.BeginEnableInteractiveQuery(ctx,
		"exampleResourceGroup",
		"exampleWorkspace",
		"exampleManagedIntegrationRuntime",
		&armsynapse.IntegrationRuntimesClientBeginEnableInteractiveQueryOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/IntegrationRuntimes_EnableInteractiveQuery.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/IntegrationRuntimes_EnableInteractiveQuery.json: %v", err)
	}
}

func TestIntegrationRuntimes_DisableInteractiveQuery(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/IntegrationRuntimes_DisableInteractiveQuery.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Stop integration runtime"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewIntegrationRuntimesClient("12345678-1234-1234-1234-12345678abc", cred, &options)
	poller, err := client.BeginDisableInteractiveQuery(ctx,
		"exampleResourceGroup",
		"exampleWorkspace",
		"exampleManagedIntegrationRuntime",
		&armsynapse.IntegrationRuntimesClientBeginDisableInteractiveQueryOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/IntegrationRuntimes_DisableInteractiveQuery.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/IntegrationRuntimes_DisableInteractiveQuery.json: %v", err)
	}
}

func TestIntegrationRuntimeNodeIPAddress_Get(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/IntegrationRuntimeNodes_GetIpAddress.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get integration runtime node IP address"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewIntegrationRuntimeNodeIPAddressClient("12345678-1234-1234-1234-12345678abc", cred, &options)
	res, err := client.Get(ctx,
		"exampleResourceGroup",
		"exampleWorkspace",
		"exampleIntegrationRuntime",
		"Node_1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/IntegrationRuntimeNodes_GetIpAddress.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.IntegrationRuntimeNodeIPAddress{
			IPAddress: to.Ptr("**********"),
		}
		if !reflect.DeepEqual(exampleRes, res.IntegrationRuntimeNodeIPAddress) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.IntegrationRuntimeNodeIPAddress)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/IntegrationRuntimeNodes_GetIpAddress.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIntegrationRuntimeObjectMetadata_List(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/IntegrationRuntimeObjectMetadata_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get integration runtime object metadata"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewIntegrationRuntimeObjectMetadataClient("12345678-1234-1234-1234-12345678abc", cred, &options)
	res, err := client.List(ctx,
		"exampleResourceGroup",
		"exampleWorkspace",
		"testactivityv2",
		&armsynapse.IntegrationRuntimeObjectMetadataClientListOptions{GetMetadataRequest: &armsynapse.GetSsisObjectMetadataRequest{
			MetadataPath: to.Ptr("ssisFolders"),
		},
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/IntegrationRuntimeObjectMetadata_List.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.SsisObjectMetadataListResponse{
			Value: []armsynapse.SsisObjectMetadataClassification{
				&armsynapse.SsisObjectMetadata{
					Name:        to.Ptr("TestFolder"),
					Description: to.Ptr(""),
					ID:          to.Ptr[int64](1),
				},
				&armsynapse.SsisObjectMetadata{
					Name:        to.Ptr("EnvironmentFolder"),
					Description: to.Ptr(""),
					ID:          to.Ptr[int64](2),
				},
				&armsynapse.SsisObjectMetadata{
					Name:        to.Ptr("ActivityTest"),
					Description: to.Ptr(""),
					ID:          to.Ptr[int64](3),
				},
				&armsynapse.SsisObjectMetadata{
					Name:        to.Ptr("这是文件夹"),
					Description: to.Ptr(""),
					ID:          to.Ptr[int64](4),
				},
				&armsynapse.SsisObjectMetadata{
					Name: to.Ptr("1"),
					ID:   to.Ptr[int64](5),
				},
				&armsynapse.SsisObjectMetadata{
					Name: to.Ptr("2"),
					ID:   to.Ptr[int64](6),
				},
				&armsynapse.SsisObjectMetadata{
					Name: to.Ptr("3"),
					ID:   to.Ptr[int64](7),
				},
				&armsynapse.SsisObjectMetadata{
					Name: to.Ptr("4"),
					ID:   to.Ptr[int64](8),
				},
				&armsynapse.SsisObjectMetadata{
					Name: to.Ptr("5"),
					ID:   to.Ptr[int64](9),
				},
				&armsynapse.SsisObjectMetadata{
					Name: to.Ptr("6"),
					ID:   to.Ptr[int64](10),
				},
				&armsynapse.SsisObjectMetadata{
					Name: to.Ptr("7"),
					ID:   to.Ptr[int64](11),
				},
				&armsynapse.SsisObjectMetadata{
					Name: to.Ptr("8"),
					ID:   to.Ptr[int64](12),
				},
				&armsynapse.SsisObjectMetadata{
					Name: to.Ptr("9"),
					ID:   to.Ptr[int64](13),
				},
				&armsynapse.SsisObjectMetadata{
					Name: to.Ptr("10"),
					ID:   to.Ptr[int64](14),
				},
				&armsynapse.SsisObjectMetadata{
					Name: to.Ptr("11"),
					ID:   to.Ptr[int64](15),
				},
				&armsynapse.SsisObjectMetadata{
					Name: to.Ptr("12"),
					ID:   to.Ptr[int64](16),
				},
				&armsynapse.SsisObjectMetadata{
					Name: to.Ptr("13"),
					ID:   to.Ptr[int64](17),
				},
				&armsynapse.SsisObjectMetadata{
					Name: to.Ptr("14"),
					ID:   to.Ptr[int64](18),
				},
				&armsynapse.SsisObjectMetadata{
					Name: to.Ptr("15"),
					ID:   to.Ptr[int64](19),
				},
				&armsynapse.SsisObjectMetadata{
					Name: to.Ptr("16"),
					ID:   to.Ptr[int64](20),
				},
				&armsynapse.SsisObjectMetadata{
					Name: to.Ptr("17"),
					ID:   to.Ptr[int64](21),
				},
				&armsynapse.SsisObjectMetadata{
					Name: to.Ptr("18"),
					ID:   to.Ptr[int64](22),
				},
				&armsynapse.SsisObjectMetadata{
					Name: to.Ptr("19"),
					ID:   to.Ptr[int64](23),
				},
				&armsynapse.SsisObjectMetadata{
					Name: to.Ptr("20"),
					ID:   to.Ptr[int64](24),
				},
				&armsynapse.SsisObjectMetadata{
					Name: to.Ptr("21"),
					ID:   to.Ptr[int64](25),
				},
				&armsynapse.SsisObjectMetadata{
					Name: to.Ptr("22"),
					ID:   to.Ptr[int64](26),
				},
				&armsynapse.SsisObjectMetadata{
					Name: to.Ptr("23"),
					ID:   to.Ptr[int64](27),
				},
				&armsynapse.SsisObjectMetadata{
					Name: to.Ptr("24"),
					ID:   to.Ptr[int64](28),
				},
				&armsynapse.SsisObjectMetadata{
					Name: to.Ptr("25"),
					ID:   to.Ptr[int64](29),
				},
				&armsynapse.SsisObjectMetadata{
					Name: to.Ptr("26"),
					ID:   to.Ptr[int64](30),
				},
				&armsynapse.SsisObjectMetadata{
					Name: to.Ptr("27"),
					ID:   to.Ptr[int64](31),
				},
				&armsynapse.SsisObjectMetadata{
					Name: to.Ptr("28"),
					ID:   to.Ptr[int64](32),
				},
				&armsynapse.SsisObjectMetadata{
					Name: to.Ptr("29"),
					ID:   to.Ptr[int64](33),
				},
				&armsynapse.SsisObjectMetadata{
					Name: to.Ptr("30"),
					ID:   to.Ptr[int64](34),
				},
				&armsynapse.SsisObjectMetadata{
					Name: to.Ptr("31"),
					ID:   to.Ptr[int64](35),
				},
				&armsynapse.SsisObjectMetadata{
					Name: to.Ptr("32"),
					ID:   to.Ptr[int64](36),
				},
				&armsynapse.SsisObjectMetadata{
					Name: to.Ptr("33"),
					ID:   to.Ptr[int64](37),
				},
				&armsynapse.SsisObjectMetadata{
					Name: to.Ptr("34"),
					ID:   to.Ptr[int64](38),
				},
				&armsynapse.SsisObjectMetadata{
					Name: to.Ptr("35"),
					ID:   to.Ptr[int64](39),
				},
				&armsynapse.SsisObjectMetadata{
					Name: to.Ptr("36"),
					ID:   to.Ptr[int64](40),
				},
				&armsynapse.SsisObjectMetadata{
					Name: to.Ptr("37"),
					ID:   to.Ptr[int64](41),
				},
				&armsynapse.SsisObjectMetadata{
					Name: to.Ptr("38"),
					ID:   to.Ptr[int64](42),
				},
				&armsynapse.SsisObjectMetadata{
					Name: to.Ptr("39"),
					ID:   to.Ptr[int64](43),
				},
				&armsynapse.SsisObjectMetadata{
					Name: to.Ptr("40"),
					ID:   to.Ptr[int64](44),
				},
				&armsynapse.SsisObjectMetadata{
					Name: to.Ptr("41"),
					ID:   to.Ptr[int64](45),
				},
				&armsynapse.SsisObjectMetadata{
					Name: to.Ptr("42"),
					ID:   to.Ptr[int64](46),
				},
				&armsynapse.SsisObjectMetadata{
					Name: to.Ptr("43"),
					ID:   to.Ptr[int64](47),
				},
				&armsynapse.SsisObjectMetadata{
					Name: to.Ptr("44"),
					ID:   to.Ptr[int64](48),
				},
				&armsynapse.SsisObjectMetadata{
					Name: to.Ptr("45"),
					ID:   to.Ptr[int64](49),
				},
				&armsynapse.SsisObjectMetadata{
					Name: to.Ptr("46"),
					ID:   to.Ptr[int64](50),
				},
				&armsynapse.SsisObjectMetadata{
					Name: to.Ptr("47"),
					ID:   to.Ptr[int64](51),
				},
				&armsynapse.SsisObjectMetadata{
					Name: to.Ptr("48"),
					ID:   to.Ptr[int64](52),
				},
				&armsynapse.SsisObjectMetadata{
					Name: to.Ptr("49"),
					ID:   to.Ptr[int64](53),
				},
				&armsynapse.SsisObjectMetadata{
					Name: to.Ptr("50"),
					ID:   to.Ptr[int64](54),
				},
				&armsynapse.SsisObjectMetadata{
					Name: to.Ptr("51"),
					ID:   to.Ptr[int64](55),
				},
				&armsynapse.SsisObjectMetadata{
					Name: to.Ptr("52"),
					ID:   to.Ptr[int64](56),
				},
				&armsynapse.SsisObjectMetadata{
					Name: to.Ptr("53"),
					ID:   to.Ptr[int64](57),
				},
				&armsynapse.SsisObjectMetadata{
					Name: to.Ptr("54"),
					ID:   to.Ptr[int64](58),
				},
				&armsynapse.SsisObjectMetadata{
					Name: to.Ptr("55"),
					ID:   to.Ptr[int64](59),
				},
				&armsynapse.SsisObjectMetadata{
					Name: to.Ptr("56"),
					ID:   to.Ptr[int64](60),
				},
				&armsynapse.SsisObjectMetadata{
					Name: to.Ptr("57"),
					ID:   to.Ptr[int64](61),
				},
				&armsynapse.SsisObjectMetadata{
					Name: to.Ptr("58"),
					ID:   to.Ptr[int64](62),
				},
				&armsynapse.SsisObjectMetadata{
					Name: to.Ptr("59"),
					ID:   to.Ptr[int64](63),
				},
				&armsynapse.SsisObjectMetadata{
					Name: to.Ptr("60"),
					ID:   to.Ptr[int64](64),
				},
				&armsynapse.SsisObjectMetadata{
					Name: to.Ptr("61"),
					ID:   to.Ptr[int64](65),
				},
				&armsynapse.SsisObjectMetadata{
					Name: to.Ptr("62"),
					ID:   to.Ptr[int64](66),
				},
				&armsynapse.SsisObjectMetadata{
					Name: to.Ptr("63"),
					ID:   to.Ptr[int64](67),
				},
				&armsynapse.SsisObjectMetadata{
					Name: to.Ptr("64"),
					ID:   to.Ptr[int64](68),
				},
				&armsynapse.SsisObjectMetadata{
					Name: to.Ptr("65"),
					ID:   to.Ptr[int64](69),
				},
				&armsynapse.SsisObjectMetadata{
					Name: to.Ptr("66"),
					ID:   to.Ptr[int64](70),
				},
				&armsynapse.SsisObjectMetadata{
					Name: to.Ptr("67"),
					ID:   to.Ptr[int64](71),
				},
				&armsynapse.SsisObjectMetadata{
					Name: to.Ptr("68"),
					ID:   to.Ptr[int64](72),
				},
				&armsynapse.SsisObjectMetadata{
					Name: to.Ptr("69"),
					ID:   to.Ptr[int64](73),
				},
				&armsynapse.SsisObjectMetadata{
					Name: to.Ptr("70"),
					ID:   to.Ptr[int64](74),
				},
				&armsynapse.SsisObjectMetadata{
					Name: to.Ptr("71"),
					ID:   to.Ptr[int64](75),
				},
				&armsynapse.SsisObjectMetadata{
					Name: to.Ptr("72"),
					ID:   to.Ptr[int64](76),
				},
				&armsynapse.SsisObjectMetadata{
					Name: to.Ptr("73"),
					ID:   to.Ptr[int64](77),
				},
				&armsynapse.SsisObjectMetadata{
					Name: to.Ptr("74"),
					ID:   to.Ptr[int64](78),
				},
				&armsynapse.SsisObjectMetadata{
					Name: to.Ptr("75"),
					ID:   to.Ptr[int64](79),
				},
				&armsynapse.SsisObjectMetadata{
					Name: to.Ptr("76"),
					ID:   to.Ptr[int64](80),
				},
				&armsynapse.SsisObjectMetadata{
					Name: to.Ptr("77"),
					ID:   to.Ptr[int64](81),
				},
				&armsynapse.SsisObjectMetadata{
					Name: to.Ptr("78"),
					ID:   to.Ptr[int64](82),
				},
				&armsynapse.SsisObjectMetadata{
					Name: to.Ptr("79"),
					ID:   to.Ptr[int64](83),
				},
				&armsynapse.SsisObjectMetadata{
					Name: to.Ptr("80"),
					ID:   to.Ptr[int64](84),
				},
				&armsynapse.SsisObjectMetadata{
					Name: to.Ptr("81"),
					ID:   to.Ptr[int64](85),
				},
				&armsynapse.SsisObjectMetadata{
					Name: to.Ptr("82"),
					ID:   to.Ptr[int64](86),
				},
				&armsynapse.SsisObjectMetadata{
					Name: to.Ptr("83"),
					ID:   to.Ptr[int64](87),
				},
				&armsynapse.SsisObjectMetadata{
					Name: to.Ptr("84"),
					ID:   to.Ptr[int64](88),
				},
				&armsynapse.SsisObjectMetadata{
					Name: to.Ptr("85"),
					ID:   to.Ptr[int64](89),
				},
				&armsynapse.SsisObjectMetadata{
					Name: to.Ptr("86"),
					ID:   to.Ptr[int64](90),
				},
				&armsynapse.SsisObjectMetadata{
					Name: to.Ptr("87"),
					ID:   to.Ptr[int64](91),
				},
				&armsynapse.SsisObjectMetadata{
					Name: to.Ptr("88"),
					ID:   to.Ptr[int64](92),
				},
				&armsynapse.SsisObjectMetadata{
					Name: to.Ptr("89"),
					ID:   to.Ptr[int64](93),
				},
				&armsynapse.SsisObjectMetadata{
					Name: to.Ptr("90"),
					ID:   to.Ptr[int64](94),
				},
				&armsynapse.SsisObjectMetadata{
					Name: to.Ptr("91"),
					ID:   to.Ptr[int64](95),
				},
				&armsynapse.SsisObjectMetadata{
					Name: to.Ptr("92"),
					ID:   to.Ptr[int64](96),
				},
				&armsynapse.SsisObjectMetadata{
					Name: to.Ptr("93"),
					ID:   to.Ptr[int64](97),
				},
				&armsynapse.SsisObjectMetadata{
					Name: to.Ptr("94"),
					ID:   to.Ptr[int64](98),
				},
				&armsynapse.SsisObjectMetadata{
					Name: to.Ptr("95"),
					ID:   to.Ptr[int64](99),
				},
				&armsynapse.SsisObjectMetadata{
					Name: to.Ptr("96"),
					ID:   to.Ptr[int64](100),
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.SsisObjectMetadataListResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SsisObjectMetadataListResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/IntegrationRuntimeObjectMetadata_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIntegrationRuntimeObjectMetadata_Refresh(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/IntegrationRuntimeObjectMetadata_Refresh.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Refresh object metadata"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewIntegrationRuntimeObjectMetadataClient("12345678-1234-1234-1234-12345678abc", cred, &options)
	poller, err := client.BeginRefresh(ctx,
		"exampleResourceGroup",
		"exampleWorkspace",
		"testactivityv2",
		&armsynapse.IntegrationRuntimeObjectMetadataClientBeginRefreshOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/IntegrationRuntimeObjectMetadata_Refresh.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/IntegrationRuntimeObjectMetadata_Refresh.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.SsisObjectMetadataStatusResponse{
			Name:   to.Ptr("ca63c855b72d44959653ffcc6eb0b96c"),
			Status: to.Ptr("Succeeded"),
		}
		if !reflect.DeepEqual(exampleRes, res.SsisObjectMetadataStatusResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SsisObjectMetadataStatusResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/IntegrationRuntimeObjectMetadata_Refresh.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIntegrationRuntimeNodes_Get(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/IntegrationRuntimeNodes_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get integration runtime node"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewIntegrationRuntimeNodesClient("12345678-1234-1234-1234-12345678abc", cred, &options)
	res, err := client.Get(ctx,
		"exampleResourceGroup",
		"exampleWorkspace",
		"exampleIntegrationRuntime",
		"Node_1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/IntegrationRuntimeNodes_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.SelfHostedIntegrationRuntimeNode{
			Capabilities: map[string]*string{
				"connectedToResourceManager": to.Ptr("True"),
				"credentialInSync":           to.Ptr("True"),
				"httpsPortEnabled":           to.Ptr("True"),
				"nodeEnabled":                to.Ptr("True"),
				"serviceBusConnected":        to.Ptr("True"),
			},
			HostServiceURI:     to.Ptr("https://yanzhang-dt.fareast.corp.microsoft.com:8050/HostServiceRemote.svc/"),
			IsActiveDispatcher: to.Ptr(true),
			LastConnectTime:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-17T06:30:46.6262976Z"); return t }()),
			LastStartTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-17T03:45:30.8499851Z"); return t }()),
			LastUpdateResult:   to.Ptr(armsynapse.IntegrationRuntimeUpdateResultNone),
			MachineName:        to.Ptr("YANZHANG-DT"),
			MaxConcurrentJobs:  to.Ptr[int32](20),
			NodeName:           to.Ptr("Node_1"),
			RegisterTime:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-17T03:44:55.8012825Z"); return t }()),
			Status:             to.Ptr(armsynapse.SelfHostedIntegrationRuntimeNodeStatusOnline),
			Version:            to.Ptr("3.8.6743.6"),
			VersionStatus:      to.Ptr("UpToDate"),
		}
		if !reflect.DeepEqual(exampleRes, res.SelfHostedIntegrationRuntimeNode) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SelfHostedIntegrationRuntimeNode)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/IntegrationRuntimeNodes_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIntegrationRuntimeNodes_Update(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/IntegrationRuntimeNodes_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update integration runtime node"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewIntegrationRuntimeNodesClient("12345678-1234-1234-1234-12345678abc", cred, &options)
	res, err := client.Update(ctx,
		"exampleResourceGroup",
		"exampleWorkspace",
		"exampleIntegrationRuntime",
		"Node_1",
		armsynapse.UpdateIntegrationRuntimeNodeRequest{
			ConcurrentJobsLimit: to.Ptr[int32](2),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/IntegrationRuntimeNodes_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.SelfHostedIntegrationRuntimeNode{
			Capabilities: map[string]*string{
				"connectedToResourceManager": to.Ptr("True"),
				"credentialInSync":           to.Ptr("True"),
				"httpsPortEnabled":           to.Ptr("True"),
				"nodeEnabled":                to.Ptr("True"),
				"serviceBusConnected":        to.Ptr("True"),
			},
			ConcurrentJobsLimit: to.Ptr[int32](2),
			HostServiceURI:      to.Ptr("https://yanzhang-dt.fareast.corp.microsoft.com:8050/HostServiceRemote.svc/"),
			IsActiveDispatcher:  to.Ptr(true),
			LastConnectTime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-14T15:00:35.7544322Z"); return t }()),
			LastStartTime:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-14T14:52:59.8933313Z"); return t }()),
			LastUpdateResult:    to.Ptr(armsynapse.IntegrationRuntimeUpdateResultNone),
			MachineName:         to.Ptr("YANZHANG-DT"),
			MaxConcurrentJobs:   to.Ptr[int32](56),
			NodeName:            to.Ptr("Node_1"),
			RegisterTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-14T14:51:44.9237069Z"); return t }()),
			Status:              to.Ptr(armsynapse.SelfHostedIntegrationRuntimeNodeStatusOnline),
			Version:             to.Ptr("3.8.6730.2"),
			VersionStatus:       to.Ptr("UpToDate"),
		}
		if !reflect.DeepEqual(exampleRes, res.SelfHostedIntegrationRuntimeNode) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SelfHostedIntegrationRuntimeNode)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/IntegrationRuntimeNodes_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIntegrationRuntimeNodes_Delete(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/IntegrationRuntimeNodes_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete integration runtime node"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewIntegrationRuntimeNodesClient("12345678-1234-1234-1234-12345678abc", cred, &options)
	_, err := client.Delete(ctx,
		"exampleResourceGroup",
		"exampleWorkspace",
		"exampleIntegrationRuntime",
		"Node_1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/IntegrationRuntimeNodes_Delete.json: %v", err)
	}
}

func TestIntegrationRuntimeCredentials_Sync(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/IntegrationRuntimes_SyncCredentials.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Sync credentials"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewIntegrationRuntimeCredentialsClient("12345678-1234-1234-1234-12345678abc", cred, &options)
	_, err := client.Sync(ctx,
		"exampleResourceGroup",
		"exampleWorkspace",
		"exampleIntegrationRuntime",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/IntegrationRuntimes_SyncCredentials.json: %v", err)
	}
}

func TestIntegrationRuntimeConnectionInfos_Get(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/IntegrationRuntimes_GetConnectionInfo.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get connection info"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewIntegrationRuntimeConnectionInfosClient("12345678-1234-1234-1234-12345678abc", cred, &options)
	res, err := client.Get(ctx,
		"exampleResourceGroup",
		"exampleWorkspace",
		"exampleIntegrationRuntime",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/IntegrationRuntimes_GetConnectionInfo.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.IntegrationRuntimeConnectionInfo{
			HostServiceURI:         to.Ptr("https://yanzhang-dt.fareast.corp.microsoft.com:8050/HostServiceRemote.svc/"),
			IdentityCertThumbprint: to.Ptr("**********"),
			IsIdentityCertExprired: to.Ptr(false),
			PublicKey:              to.Ptr("**********"),
			ServiceToken:           to.Ptr("**********"),
			Version:                to.Ptr("3.8.6730.2"),
		}
		if !reflect.DeepEqual(exampleRes, res.IntegrationRuntimeConnectionInfo) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.IntegrationRuntimeConnectionInfo)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/IntegrationRuntimes_GetConnectionInfo.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIntegrationRuntimeAuthKeys_Regenerate(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/IntegrationRuntimes_RegenerateAuthKey.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Regenerate auth key"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewIntegrationRuntimeAuthKeysClient("12345678-1234-1234-1234-12345678abc", cred, &options)
	res, err := client.Regenerate(ctx,
		"exampleResourceGroup",
		"exampleWorkspace",
		"exampleIntegrationRuntime",
		armsynapse.IntegrationRuntimeRegenerateKeyParameters{
			KeyName: to.Ptr(armsynapse.IntegrationRuntimeAuthKeyNameAuthKey2),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/IntegrationRuntimes_RegenerateAuthKey.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.IntegrationRuntimeAuthKeys{
			AuthKey2: to.Ptr("**********"),
		}
		if !reflect.DeepEqual(exampleRes, res.IntegrationRuntimeAuthKeys) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.IntegrationRuntimeAuthKeys)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/IntegrationRuntimes_RegenerateAuthKey.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIntegrationRuntimeAuthKeys_List(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/IntegrationRuntimes_ListAuthKeys.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List auth keys"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewIntegrationRuntimeAuthKeysClient("12345678-1234-1234-1234-12345678abc", cred, &options)
	res, err := client.List(ctx,
		"exampleResourceGroup",
		"exampleWorkspace",
		"exampleIntegrationRuntime",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/IntegrationRuntimes_ListAuthKeys.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.IntegrationRuntimeAuthKeys{
			AuthKey1: to.Ptr("**********"),
			AuthKey2: to.Ptr("**********"),
		}
		if !reflect.DeepEqual(exampleRes, res.IntegrationRuntimeAuthKeys) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.IntegrationRuntimeAuthKeys)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/IntegrationRuntimes_ListAuthKeys.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIntegrationRuntimeMonitoringData_List(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/IntegrationRuntimeMonitoringData_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get monitoring data"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewIntegrationRuntimeMonitoringDataClient("12345678-1234-1234-1234-12345678abc", cred, &options)
	res, err := client.List(ctx,
		"exampleResourceGroup",
		"exampleWorkspace",
		"exampleIntegrationRuntime",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/IntegrationRuntimeMonitoringData_List.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.IntegrationRuntimeMonitoringData{
			Name: to.Ptr("exampleIntegrationRuntime"),
			Nodes: []*armsynapse.IntegrationRuntimeNodeMonitoringData{
				{
					AvailableMemoryInMB:   to.Ptr[int32](16740),
					ConcurrentJobsLimit:   to.Ptr[int32](28),
					ConcurrentJobsRunning: to.Ptr[int32](0),
					CPUUtilization:        to.Ptr[int32](15),
					NodeName:              to.Ptr("Node_1"),
					ReceivedBytes:         to.Ptr[float32](6.731423377990723),
					SentBytes:             to.Ptr[float32](2.647491693496704),
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.IntegrationRuntimeMonitoringData) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.IntegrationRuntimeMonitoringData)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/IntegrationRuntimeMonitoringData_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIntegrationRuntimeStatus_Get(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/IntegrationRuntimes_GetStatus.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get status"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewIntegrationRuntimeStatusClient("12345678-1234-1234-1234-12345678abc", cred, &options)
	res, err := client.Get(ctx,
		"exampleResourceGroup",
		"exampleWorkspace",
		"exampleIntegrationRuntime",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/IntegrationRuntimes_GetStatus.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.IntegrationRuntimeStatusResponse{
			Name: to.Ptr("exampleIntegrationRuntime"),
			Properties: &armsynapse.SelfHostedIntegrationRuntimeStatus{
				Type:  to.Ptr(armsynapse.IntegrationRuntimeTypeSelfHosted),
				State: to.Ptr(armsynapse.IntegrationRuntimeStateOnline),
				TypeProperties: &armsynapse.SelfHostedIntegrationRuntimeStatusTypeProperties{
					AutoUpdate: to.Ptr(armsynapse.IntegrationRuntimeAutoUpdateOff),
					Capabilities: map[string]*string{
						"connectedToResourceManager": to.Ptr("True"),
						"credentialInSync":           to.Ptr("True"),
						"httpsPortEnabled":           to.Ptr("True"),
						"nodeEnabled":                to.Ptr("True"),
						"serviceBusConnected":        to.Ptr("True"),
					},
					CreateTime:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-14T09:17:45.1839685Z"); return t }()),
					LatestVersion:       to.Ptr("3.7.6711.1"),
					LocalTimeZoneOffset: to.Ptr("PT8H"),
					Nodes: []*armsynapse.SelfHostedIntegrationRuntimeNode{
						{
							Capabilities: map[string]*string{
								"connectedToResourceManager": to.Ptr("True"),
								"credentialInSync":           to.Ptr("True"),
								"httpsPortEnabled":           to.Ptr("True"),
								"nodeEnabled":                to.Ptr("True"),
								"serviceBusConnected":        to.Ptr("True"),
							},
							HostServiceURI:     to.Ptr("https://yanzhang-dt.fareast.corp.microsoft.com:8050/HostServiceRemote.svc/"),
							IsActiveDispatcher: to.Ptr(true),
							LastConnectTime:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-14T14:52:59.8933313Z"); return t }()),
							LastStartTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-14T14:52:59.8933313Z"); return t }()),
							LastUpdateResult:   to.Ptr(armsynapse.IntegrationRuntimeUpdateResultNone),
							MachineName:        to.Ptr("YANZHANG-DT"),
							MaxConcurrentJobs:  to.Ptr[int32](56),
							NodeName:           to.Ptr("Node_1"),
							RegisterTime:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-14T14:51:44.9237069Z"); return t }()),
							Status:             to.Ptr(armsynapse.SelfHostedIntegrationRuntimeNodeStatusOnline),
							Version:            to.Ptr("3.8.6730.2"),
							VersionStatus:      to.Ptr("UpToDate"),
						}},
					ServiceUrls: []*string{
						to.Ptr("wu.frontend.int.clouddatahub-int.net"),
						to.Ptr("*.servicebus.windows.net")},
					TaskQueueID:       to.Ptr("1a6296ab-423c-4346-9bcc-85a78c2c0582"),
					UpdateDelayOffset: to.Ptr("PT3H"),
					Version:           to.Ptr("3.8.6730.2"),
					VersionStatus:     to.Ptr("UpToDate"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.IntegrationRuntimeStatusResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.IntegrationRuntimeStatusResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/IntegrationRuntimes_GetStatus.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSparkConfiguration_Get(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/SparkConfiguration_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get SparkConfiguration by name"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewSparkConfigurationClient("12345678-1234-1234-1234-12345678abc", cred, &options)
	res, err := client.Get(ctx,
		"exampleResourceGroup",
		"exampleSparkConfigurationName",
		"exampleWorkspace",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/SparkConfiguration_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.SparkConfigurationResource{
			Name: to.Ptr("exampleSparkConfigurationName"),
			Type: to.Ptr("Microsoft.Synapse/workspaces/sparkconfigurations"),
			ID:   to.Ptr("/subscriptions/12345678-1234-1234-1234-12345678abc/resourceGroups/exampleResourceGroup/providers/Microsoft.Synapse/workspaces/exampleWorkspace/sparkconfigurations/exampleSparkConfigurationName"),
			Etag: to.Ptr("1500474f-0000-0200-0000-5cbe090d0000"),
			Properties: &armsynapse.SparkConfigurationInfo{
				Description: to.Ptr("test sparkconfiguration description"),
				Annotations: []*string{
					to.Ptr("testAnnotation1"),
					to.Ptr("testAnnotation2")},
				Configs: map[string]*string{
					"prop1": to.Ptr("true"),
					"prop2": to.Ptr("true"),
					"prop3": to.Ptr("123"),
				},
				Created:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "1970-01-01T00:00:00Z"); return t }()),
				CreatedBy: to.Ptr("test@microsoft.com"),
				Notes:     to.Ptr("testNotes"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SparkConfigurationResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SparkConfigurationResource)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/SparkConfiguration_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSparkConfigurations_ListByWorkspace(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/SparkConfigurations_ListByWorkspace.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List sparkConfigurations in a workspace"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewSparkConfigurationsClient("12345678-1234-1234-1234-12345678abc", cred, &options)
	pager := client.ListByWorkspace("exampleResourceGroup",
		"exampleWorkspace",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/SparkConfigurations_ListByWorkspace.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsynapse.SparkConfigurationListResponse{
			Value: []*armsynapse.SparkConfigurationResource{
				{
					Name: to.Ptr("exampleSparkConfigurationName1"),
					Type: to.Ptr("Microsoft.Synapse/workspaces/sparkconfigurations"),
					ID:   to.Ptr("/subscriptions/12345678-1234-1234-1234-12345678abc/resourceGroups/exampleResourceGroup/providers/Microsoft.Synapse/workspaces/exampleWorkspace/sparkconfigurations/exampleSparkConfigurationName"),
					Etag: to.Ptr("1500474f-0000-0200-0000-5cbe090d0000"),
					Properties: &armsynapse.SparkConfigurationInfo{
						Description: to.Ptr("test sparkconfiguration description1"),
						Annotations: []*string{
							to.Ptr("testAnnotation1"),
							to.Ptr("testAnnotation2")},
						Configs: map[string]*string{
							"prop1": to.Ptr("true"),
							"prop2": to.Ptr("true"),
							"prop3": to.Ptr("123"),
						},
						Created:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "1970-01-01T00:00:00Z"); return t }()),
						CreatedBy: to.Ptr("test@microsoft.com"),
						Notes:     to.Ptr("testNotes"),
					},
				},
				{
					Name: to.Ptr("exampleSparkConfigurationName2"),
					Type: to.Ptr("Microsoft.Synapse/workspaces/sparkconfigurations"),
					ID:   to.Ptr("/subscriptions/12345678-1234-1234-1234-12345678abc/resourceGroups/exampleResourceGroup/providers/Microsoft.Synapse/workspaces/exampleWorkspace/sparkconfigurations/exampleSparkConfigurationName2"),
					Etag: to.Ptr("1500474f-0000-0200-0000-5cbe090d0000"),
					Properties: &armsynapse.SparkConfigurationInfo{
						Description: to.Ptr("test sparkconfiguration description2"),
						Annotations: []*string{
							to.Ptr("testAnnotation1"),
							to.Ptr("testAnnotation2")},
						Configs: map[string]*string{
							"prop1": to.Ptr("true"),
							"prop2": to.Ptr("true"),
							"prop3": to.Ptr("123"),
						},
						Created:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "1970-01-01T00:00:00Z"); return t }()),
						CreatedBy: to.Ptr("test@microsoft.com"),
						Notes:     to.Ptr("testNotes"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SparkConfigurationListResponse) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SparkConfigurationListResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/SparkConfigurations_ListByWorkspace.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestKustoOperations_List(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoOperationsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"KustoOperationsList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewKustoOperationsClient(cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoOperationsList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsynapse.OperationListResult{
			Value: []*armsynapse.Operation{
				{
					Name: to.Ptr("operationName"),
					Display: &armsynapse.OperationDisplay{
						Description: to.Ptr("operation description"),
						Operation:   to.Ptr("operationName"),
						Provider:    to.Ptr("providerName"),
						Resource:    to.Ptr("resourceName"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OperationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OperationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoOperationsList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestKustoPools_CheckNameAvailability(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolsCheckNameAvailability.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"KustoPoolsCheckNameAvailability"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewKustoPoolsClient("12345678-1234-1234-1234-123456789098", cred, &options)
	res, err := client.CheckNameAvailability(ctx,
		"westus",
		armsynapse.KustoPoolCheckNameRequest{
			Name: to.Ptr("kustoclusterrptest4"),
			Type: to.Ptr("Microsoft.Synapse/workspaces/kustoPools"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolsCheckNameAvailability.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.CheckNameResult{
			Name:          to.Ptr("kustoclusterrptest4"),
			Message:       to.Ptr("Name 'kustoclusterrptest4' is already taken. Please specify a different name"),
			NameAvailable: to.Ptr(false),
		}
		if !reflect.DeepEqual(exampleRes, res.CheckNameResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CheckNameResult)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolsCheckNameAvailability.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestKustoPools_ListByWorkspace(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolsListByWorkspace.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Kusto pools in a workspace"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewKustoPoolsClient("12345678-1234-1234-1234-123456789098", cred, &options)
	res, err := client.ListByWorkspace(ctx,
		"kustorptest",
		"kustorptest",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolsListByWorkspace.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.KustoPoolListResult{
			Value: []*armsynapse.KustoPool{
				{
					Name:     to.Ptr("KustoClusterRPTest4"),
					Type:     to.Ptr("Microsoft.Synapse/workspaces/kustopools"),
					ID:       to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.Synapse/workspaces/kustorptest/kustopools/KustoClusterRPTest4"),
					Location: to.Ptr("westus"),
					Etag:     to.Ptr("abcd123"),
					Properties: &armsynapse.KustoPoolProperties{
						ProvisioningState: to.Ptr(armsynapse.ResourceProvisioningStateSucceeded),
					},
					SKU: &armsynapse.AzureSKU{
						Name:     to.Ptr(armsynapse.SKUNameStorageOptimized),
						Capacity: to.Ptr[int32](2),
						Size:     to.Ptr(armsynapse.SKUSizeMedium),
					},
				},
				{
					Name:     to.Ptr("KustoClusterRPTest3"),
					Type:     to.Ptr("Microsoft.Synapse/workspaces/kustopools"),
					ID:       to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.Synapse/workspaces/kustorptest/kustopools/KustoClusterRPTest3"),
					Location: to.Ptr("westus"),
					Etag:     to.Ptr("abcd123"),
					Properties: &armsynapse.KustoPoolProperties{
						ProvisioningState: to.Ptr(armsynapse.ResourceProvisioningStateSucceeded),
					},
					SKU: &armsynapse.AzureSKU{
						Name:     to.Ptr(armsynapse.SKUNameComputeOptimized),
						Capacity: to.Ptr[int32](2),
						Size:     to.Ptr(armsynapse.SKUSizeSmall),
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.KustoPoolListResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.KustoPoolListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolsListByWorkspace.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestKustoPools_Get(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolsGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"kustoPoolsGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewKustoPoolsClient("12345678-1234-1234-1234-123456789098", cred, &options)
	res, err := client.Get(ctx,
		"synapseWorkspaceName",
		"kustoclusterrptest4",
		"kustorptest",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolsGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.KustoPool{
			Name:     to.Ptr("KustoClusterRPTest5"),
			Type:     to.Ptr("Microsoft.Synapse/workspaces/kustopools"),
			ID:       to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.Synapse/workspaces/synapseWorkspaceName/kustopools/KustoClusterRPTest5"),
			Location: to.Ptr("westus"),
			Etag:     to.Ptr("abcd123"),
			Properties: &armsynapse.KustoPoolProperties{
				ProvisioningState: to.Ptr(armsynapse.ResourceProvisioningStateSucceeded),
			},
			SKU: &armsynapse.AzureSKU{
				Name:     to.Ptr(armsynapse.SKUNameStorageOptimized),
				Capacity: to.Ptr[int32](2),
				Size:     to.Ptr(armsynapse.SKUSizeMedium),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.KustoPool) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.KustoPool)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolsGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestKustoPools_CreateOrUpdate(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolsCreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"kustoPoolsCreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewKustoPoolsClient("12345678-1234-1234-1234-123456789098", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"synapseWorkspaceName",
		"kustorptest",
		"kustoclusterrptest4",
		armsynapse.KustoPool{
			Location: to.Ptr("westus"),
			Properties: &armsynapse.KustoPoolProperties{
				EnablePurge:           to.Ptr(true),
				EnableStreamingIngest: to.Ptr(true),
				WorkspaceUID:          to.Ptr("11111111-2222-3333-444444444444"),
			},
			SKU: &armsynapse.AzureSKU{
				Name:     to.Ptr(armsynapse.SKUNameStorageOptimized),
				Capacity: to.Ptr[int32](2),
				Size:     to.Ptr(armsynapse.SKUSizeMedium),
			},
		},
		&armsynapse.KustoPoolsClientBeginCreateOrUpdateOptions{IfMatch: nil,
			IfNoneMatch: nil,
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolsCreateOrUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolsCreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.KustoPool{
			Name:     to.Ptr("KustoClusterRPTest4"),
			Type:     to.Ptr("Microsoft.Synapse/workspaces/kustopools"),
			ID:       to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.Synapse/workspaces/synapseWorkspaceName/kustopools/KustoClusterRPTest4"),
			Location: to.Ptr("westus"),
			Etag:     to.Ptr("abcd"),
			Properties: &armsynapse.KustoPoolProperties{
				EnablePurge:           to.Ptr(true),
				EnableStreamingIngest: to.Ptr(true),
				ProvisioningState:     to.Ptr(armsynapse.ResourceProvisioningStateSucceeded),
			},
			SKU: &armsynapse.AzureSKU{
				Name:     to.Ptr(armsynapse.SKUNameStorageOptimized),
				Capacity: to.Ptr[int32](2),
				Size:     to.Ptr(armsynapse.SKUSizeMedium),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.KustoPool) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.KustoPool)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolsCreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestKustoPools_Update(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolsUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"kustoPoolsUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewKustoPoolsClient("12345678-1234-1234-1234-123456789098", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"synapseWorkspaceName",
		"kustorptest",
		"kustoclusterrptest4",
		armsynapse.KustoPoolUpdate{
			Properties: &armsynapse.KustoPoolProperties{
				EnablePurge:           to.Ptr(true),
				EnableStreamingIngest: to.Ptr(true),
				WorkspaceUID:          to.Ptr("11111111-2222-3333-444444444444"),
			},
			SKU: &armsynapse.AzureSKU{
				Name:     to.Ptr(armsynapse.SKUNameStorageOptimized),
				Capacity: to.Ptr[int32](2),
				Size:     to.Ptr(armsynapse.SKUSizeMedium),
			},
		},
		&armsynapse.KustoPoolsClientBeginUpdateOptions{IfMatch: nil,
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolsUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolsUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.KustoPool{
			Name:     to.Ptr("KustoClusterRPTest4"),
			Type:     to.Ptr("Microsoft.Synapse/workspaces/kustopools"),
			ID:       to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.Synapse/workspaces/synapseWorkspaceName/kustopools/KustoClusterRPTest4"),
			Location: to.Ptr("westus"),
			Etag:     to.Ptr("abcd"),
			Properties: &armsynapse.KustoPoolProperties{
				EnablePurge:           to.Ptr(true),
				EnableStreamingIngest: to.Ptr(true),
				ProvisioningState:     to.Ptr(armsynapse.ResourceProvisioningStateSucceeded),
			},
			SKU: &armsynapse.AzureSKU{
				Name:     to.Ptr(armsynapse.SKUNameStorageOptimized),
				Capacity: to.Ptr[int32](2),
				Size:     to.Ptr(armsynapse.SKUSizeMedium),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.KustoPool) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.KustoPool)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolsUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestKustoPools_Delete(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolsDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"kustoPoolsDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewKustoPoolsClient("12345678-1234-1234-1234-123456789098", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"kustorptest",
		"kustorptest",
		"kustoclusterrptest4",
		&armsynapse.KustoPoolsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolsDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolsDelete.json: %v", err)
	}
}

func TestKustoPools_Stop(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolsStop.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"kustoPoolsStop"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewKustoPoolsClient("12345678-1234-1234-1234-123456789098", cred, &options)
	poller, err := client.BeginStop(ctx,
		"kustorptest",
		"kustoclusterrptest4",
		"kustorptest",
		&armsynapse.KustoPoolsClientBeginStopOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolsStop.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolsStop.json: %v", err)
	}
}

func TestKustoPools_Start(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolsStart.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"kustoPoolsStop"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewKustoPoolsClient("12345678-1234-1234-1234-123456789098", cred, &options)
	poller, err := client.BeginStart(ctx,
		"kustorptest",
		"kustoclusterrptest4",
		"kustorptest",
		&armsynapse.KustoPoolsClientBeginStartOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolsStart.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolsStart.json: %v", err)
	}
}

func TestKustoPools_ListLanguageExtensions(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolLanguageExtensionsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"KustoPoolListLanguageExtensions"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewKustoPoolsClient("12345678-1234-1234-1234-123456789098", cred, &options)
	pager := client.ListLanguageExtensions("kustorptest",
		"kustoclusterrptest4",
		"kustorptest",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolLanguageExtensionsList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsynapse.LanguageExtensionsList{
			Value: []*armsynapse.LanguageExtension{
				{
					LanguageExtensionName: to.Ptr(armsynapse.LanguageExtensionNamePYTHON),
				},
				{
					LanguageExtensionName: to.Ptr(armsynapse.LanguageExtensionNameR),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.LanguageExtensionsList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.LanguageExtensionsList)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolLanguageExtensionsList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestKustoPools_AddLanguageExtensions(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolLanguageExtensionsAdd.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"KustoPoolAddLanguageExtensions"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewKustoPoolsClient("12345678-1234-1234-1234-123456789098", cred, &options)
	poller, err := client.BeginAddLanguageExtensions(ctx,
		"kustorptest",
		"kustoclusterrptest4",
		"kustorptest",
		armsynapse.LanguageExtensionsList{
			Value: []*armsynapse.LanguageExtension{
				{
					LanguageExtensionName: to.Ptr(armsynapse.LanguageExtensionNamePYTHON),
				},
				{
					LanguageExtensionName: to.Ptr(armsynapse.LanguageExtensionNameR),
				}},
		},
		&armsynapse.KustoPoolsClientBeginAddLanguageExtensionsOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolLanguageExtensionsAdd.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolLanguageExtensionsAdd.json: %v", err)
	}
}

func TestKustoPools_RemoveLanguageExtensions(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolLanguageExtensionsRemove.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"KustoPoolRemoveLanguageExtensions"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewKustoPoolsClient("12345678-1234-1234-1234-123456789098", cred, &options)
	poller, err := client.BeginRemoveLanguageExtensions(ctx,
		"kustorptest",
		"kustoclusterrptest4",
		"kustorptest",
		armsynapse.LanguageExtensionsList{
			Value: []*armsynapse.LanguageExtension{
				{
					LanguageExtensionName: to.Ptr(armsynapse.LanguageExtensionNamePYTHON),
				},
				{
					LanguageExtensionName: to.Ptr(armsynapse.LanguageExtensionNameR),
				}},
		},
		&armsynapse.KustoPoolsClientBeginRemoveLanguageExtensionsOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolLanguageExtensionsRemove.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolLanguageExtensionsRemove.json: %v", err)
	}
}

func TestKustoPools_ListFollowerDatabases(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolFollowerDatabasesList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"KustoPoolListFollowerDatabases"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewKustoPoolsClient("12345678-1234-1234-1234-123456789098", cred, &options)
	pager := client.ListFollowerDatabases("kustorptest",
		"kustoclusterrptest4",
		"kustorptest",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolFollowerDatabasesList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsynapse.FollowerDatabaseListResult{
			Value: []*armsynapse.FollowerDatabaseDefinition{
				{
					AttachedDatabaseConfigurationName: to.Ptr("attachedDbConfiguration"),
					KustoPoolResourceID:               to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.Synapse/workspaces/kustorptest/kustoPools/follower1"),
					DatabaseName:                      to.Ptr("*"),
				},
				{
					AttachedDatabaseConfigurationName: to.Ptr("attachedDbConfiguration2"),
					KustoPoolResourceID:               to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.Synapse/workspaces/kustorptest/kustoPools/follower4"),
					DatabaseName:                      to.Ptr("db1"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.FollowerDatabaseListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.FollowerDatabaseListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolFollowerDatabasesList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestKustoPools_DetachFollowerDatabases(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolFollowerDatabasesDetach.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"KustoPoolDetachFollowerDatabases"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewKustoPoolsClient("12345678-1234-1234-1234-123456789098", cred, &options)
	poller, err := client.BeginDetachFollowerDatabases(ctx,
		"kustorptest",
		"kustoclusterrptest4",
		"kustorptest",
		armsynapse.FollowerDatabaseDefinition{
			AttachedDatabaseConfigurationName: to.Ptr("myAttachedDatabaseConfiguration"),
			KustoPoolResourceID:               to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.Synapse/workspaces/kustorptest/kustoPools/leader4"),
		},
		&armsynapse.KustoPoolsClientBeginDetachFollowerDatabasesOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolFollowerDatabasesDetach.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolFollowerDatabasesDetach.json: %v", err)
	}
}

func TestKustoPoolChildResource_CheckNameAvailability(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolAttachedDatabaseConfigurationCheckNameAvailability.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"KustoPoolAttachedDatabaseConfigurationCheckNameAvailability"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewKustoPoolChildResourceClient("12345678-1234-1234-1234-123456789098", cred, &options)
	res, err := client.CheckNameAvailability(ctx,
		"kustorptest",
		"kustoclusterrptest4",
		"kustorptest",
		armsynapse.DatabaseCheckNameRequest{
			Name: to.Ptr("adc1"),
			Type: to.Ptr(armsynapse.TypeMicrosoftSynapseWorkspacesKustoPoolsAttachedDatabaseConfigurations),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolAttachedDatabaseConfigurationCheckNameAvailability.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.CheckNameResult{
			Name:          to.Ptr("adc1"),
			Message:       to.Ptr("Name 'adc1' is already taken. Please specify a different name"),
			NameAvailable: to.Ptr(false),
		}
		if !reflect.DeepEqual(exampleRes, res.CheckNameResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CheckNameResult)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolAttachedDatabaseConfigurationCheckNameAvailability.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolDatabasesCheckNameAvailability.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"KustoPoolDatabasesCheckNameAvailability"},
	})
	client = armsynapse.NewKustoPoolChildResourceClient("12345678-1234-1234-1234-123456789098", cred, &options)
	res, err = client.CheckNameAvailability(ctx,
		"synapseWorkspaceName",
		"kustoclusterrptest4",
		"kustorptest",
		armsynapse.DatabaseCheckNameRequest{
			Name: to.Ptr("database1"),
			Type: to.Ptr(armsynapse.TypeMicrosoftSynapseWorkspacesKustoPoolsDatabases),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolDatabasesCheckNameAvailability.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.CheckNameResult{
			Name:          to.Ptr("database1"),
			Message:       to.Ptr("Name 'database1' is already taken. Please specify a different name"),
			NameAvailable: to.Ptr(false),
		}
		if !reflect.DeepEqual(exampleRes, res.CheckNameResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CheckNameResult)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolDatabasesCheckNameAvailability.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestKustoPoolAttachedDatabaseConfigurations_ListByKustoPool(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolAttachedDatabaseConfigurationsListByKustoPool.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"KustoPoolAttachedDatabaseConfigurationsListByKustoPool"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewKustoPoolAttachedDatabaseConfigurationsClient("12345678-1234-1234-1234-123456789098", cred, &options)
	pager := client.ListByKustoPool("kustorptest",
		"kustoclusterrptest4",
		"kustorptest",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolAttachedDatabaseConfigurationsListByKustoPool.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsynapse.AttachedDatabaseConfigurationListResult{
			Value: []*armsynapse.AttachedDatabaseConfiguration{
				{
					Name:     to.Ptr("KustoClusterRPTest4/KustoDatabase8"),
					Type:     to.Ptr("Microsoft.Synapse/Workspaces/KustoPools/AttachedDatabaseConfigurations"),
					ID:       to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.Synapse/Workspaces/kustorptest/KustoPools/kustoclusterrptest4/AttachedDatabaseConfigurations/KustoDatabase8"),
					Location: to.Ptr("westus"),
					Properties: &armsynapse.AttachedDatabaseConfigurationProperties{
						KustoPoolResourceID:               to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.Synapse/Workspaces/kustorptest/KustoPools/KustoClusterLeader"),
						DatabaseName:                      to.Ptr("db1"),
						DefaultPrincipalsModificationKind: to.Ptr(armsynapse.DefaultPrincipalsModificationKindUnion),
						ProvisioningState:                 to.Ptr(armsynapse.ResourceProvisioningStateSucceeded),
					},
				},
				{
					Name:     to.Ptr("KustoClusterRPTest4/KustoDatabase9"),
					Type:     to.Ptr("Microsoft.Synapse/Workspaces/KustoPools/AttachedDatabaseConfigurations"),
					ID:       to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.Synapse/Workspaces/kustorptest/KustoPools/kustoclusterrptest4/AttachedDatabaseConfigurations/KustoDatabase9"),
					Location: to.Ptr("westus"),
					Properties: &armsynapse.AttachedDatabaseConfigurationProperties{
						KustoPoolResourceID:               to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.Synapse/Workspaces/kustorptest/KustoPools/KustoClusterLeader"),
						DatabaseName:                      to.Ptr("db1"),
						DefaultPrincipalsModificationKind: to.Ptr(armsynapse.DefaultPrincipalsModificationKindUnion),
						ProvisioningState:                 to.Ptr(armsynapse.ResourceProvisioningStateSucceeded),
						TableLevelSharingProperties: &armsynapse.TableLevelSharingProperties{
							ExternalTablesToExclude: []*string{
								to.Ptr("ExternalTable2")},
							ExternalTablesToInclude: []*string{
								to.Ptr("ExternalTable1")},
							MaterializedViewsToExclude: []*string{
								to.Ptr("MaterializedViewTable2")},
							MaterializedViewsToInclude: []*string{
								to.Ptr("MaterializedViewTable1")},
							TablesToExclude: []*string{
								to.Ptr("Table2")},
							TablesToInclude: []*string{
								to.Ptr("Table1")},
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AttachedDatabaseConfigurationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AttachedDatabaseConfigurationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolAttachedDatabaseConfigurationsListByKustoPool.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestKustoPoolAttachedDatabaseConfigurations_Get(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolAttachedDatabaseConfigurationsGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"KustoPoolAttachedDatabaseConfigurationsGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewKustoPoolAttachedDatabaseConfigurationsClient("12345678-1234-1234-1234-123456789098", cred, &options)
	res, err := client.Get(ctx,
		"kustorptest",
		"kustoclusterrptest4",
		"attachedDatabaseConfigurations1",
		"kustorptest",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolAttachedDatabaseConfigurationsGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.AttachedDatabaseConfiguration{
			Name:     to.Ptr("KustoClusterRPTest4/attachedDatabaseConfigurations1"),
			Type:     to.Ptr("Microsoft.Synapse/Workspaces/KustoPools/AttachedDatabaseConfigurations"),
			ID:       to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.Synapse/Workspaces/kustorptest/KustoPools/kustoclusterrptest4/AttachedDatabaseConfigurations/attachedDatabaseConfigurations1"),
			Location: to.Ptr("westus"),
			Properties: &armsynapse.AttachedDatabaseConfigurationProperties{
				KustoPoolResourceID:               to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.Synapse/Workspaces/kustorptest/KustoPools/kustoclusterrptest4"),
				DatabaseName:                      to.Ptr("*"),
				DefaultPrincipalsModificationKind: to.Ptr(armsynapse.DefaultPrincipalsModificationKindUnion),
				ProvisioningState:                 to.Ptr(armsynapse.ResourceProvisioningStateSucceeded),
				TableLevelSharingProperties: &armsynapse.TableLevelSharingProperties{
					ExternalTablesToExclude: []*string{
						to.Ptr("ExternalTable2")},
					ExternalTablesToInclude: []*string{
						to.Ptr("ExternalTable1")},
					MaterializedViewsToExclude: []*string{
						to.Ptr("MaterializedViewTable2")},
					MaterializedViewsToInclude: []*string{
						to.Ptr("MaterializedViewTable1")},
					TablesToExclude: []*string{
						to.Ptr("Table2")},
					TablesToInclude: []*string{
						to.Ptr("Table1")},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AttachedDatabaseConfiguration) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AttachedDatabaseConfiguration)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolAttachedDatabaseConfigurationsGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestKustoPoolAttachedDatabaseConfigurations_CreateOrUpdate(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolAttachedDatabaseConfigurationsCreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"KustoPoolAttachedDatabaseConfigurationsCreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewKustoPoolAttachedDatabaseConfigurationsClient("12345678-1234-1234-1234-123456789098", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"kustorptest",
		"kustoclusterrptest4",
		"attachedDatabaseConfigurations1",
		"kustorptest",
		armsynapse.AttachedDatabaseConfiguration{
			Location: to.Ptr("westus"),
			Properties: &armsynapse.AttachedDatabaseConfigurationProperties{
				KustoPoolResourceID:               to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.Synapse/Workspaces/kustorptest/KustoPools/kustoclusterrptest4"),
				DatabaseName:                      to.Ptr("kustodatabase"),
				DefaultPrincipalsModificationKind: to.Ptr(armsynapse.DefaultPrincipalsModificationKindUnion),
				TableLevelSharingProperties: &armsynapse.TableLevelSharingProperties{
					ExternalTablesToExclude: []*string{
						to.Ptr("ExternalTable2")},
					ExternalTablesToInclude: []*string{
						to.Ptr("ExternalTable1")},
					MaterializedViewsToExclude: []*string{
						to.Ptr("MaterializedViewTable2")},
					MaterializedViewsToInclude: []*string{
						to.Ptr("MaterializedViewTable1")},
					TablesToExclude: []*string{
						to.Ptr("Table2")},
					TablesToInclude: []*string{
						to.Ptr("Table1")},
				},
			},
		},
		&armsynapse.KustoPoolAttachedDatabaseConfigurationsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolAttachedDatabaseConfigurationsCreateOrUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolAttachedDatabaseConfigurationsCreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.AttachedDatabaseConfiguration{
			Name:     to.Ptr("KustoClusterRPTest4/attachedDatabaseConfigurations1"),
			Type:     to.Ptr("Microsoft.Synapse/Workspaces/KustoPools/AttachedDatabaseConfigurations"),
			ID:       to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.Synapse/Workspaces/kustorptest/KustoPools/kustoclusterrptest4/attachedDatabaseConfigurations/attachedDatabaseConfigurations1"),
			Location: to.Ptr("westus"),
			Properties: &armsynapse.AttachedDatabaseConfigurationProperties{
				KustoPoolResourceID:               to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.Synapse/Workspaces/kustorptest/KustoPools/KustoClusterLeader"),
				DatabaseName:                      to.Ptr("db1"),
				DefaultPrincipalsModificationKind: to.Ptr(armsynapse.DefaultPrincipalsModificationKindUnion),
				ProvisioningState:                 to.Ptr(armsynapse.ResourceProvisioningStateSucceeded),
				TableLevelSharingProperties: &armsynapse.TableLevelSharingProperties{
					ExternalTablesToExclude: []*string{
						to.Ptr("ExternalTable2")},
					ExternalTablesToInclude: []*string{
						to.Ptr("ExternalTable1")},
					MaterializedViewsToExclude: []*string{
						to.Ptr("MaterializedViewTable2")},
					MaterializedViewsToInclude: []*string{
						to.Ptr("MaterializedViewTable1")},
					TablesToExclude: []*string{
						to.Ptr("Table2")},
					TablesToInclude: []*string{
						to.Ptr("Table1")},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AttachedDatabaseConfiguration) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AttachedDatabaseConfiguration)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolAttachedDatabaseConfigurationsCreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestKustoPoolAttachedDatabaseConfigurations_Delete(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolAttachedDatabaseConfigurationsDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"KustoPoolAttachedDatabaseConfigurationsDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewKustoPoolAttachedDatabaseConfigurationsClient("12345678-1234-1234-1234-123456789098", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"kustorptest",
		"kustoclusterrptest4",
		"attachedDatabaseConfigurations1",
		"kustorptest",
		&armsynapse.KustoPoolAttachedDatabaseConfigurationsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolAttachedDatabaseConfigurationsDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolAttachedDatabaseConfigurationsDelete.json: %v", err)
	}
}

func TestKustoPoolDatabases_ListByKustoPool(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoDatabasesListByKustoPool.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"KustoDatabasesListByKustoPool"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewKustoPoolDatabasesClient("12345678-1234-1234-1234-123456789098", cred, &options)
	pager := client.ListByKustoPool("kustorptest",
		"synapseWorkspaceName",
		"kustoclusterrptest4",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoDatabasesListByKustoPool.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsynapse.DatabaseListResult{
			Value: []armsynapse.DatabaseClassification{
				&armsynapse.ReadWriteDatabase{
					Name:     to.Ptr("KustoClusterRPTest4/KustoDatabase8"),
					Type:     to.Ptr("Microsoft.Synapse/workspaces/kustopools/Databases"),
					ID:       to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.Synapse/workspaces/kustorptest/kustopools/KustoClusterRPTest4/Databases/KustoDatabase8"),
					Kind:     to.Ptr(armsynapse.KindReadWrite),
					Location: to.Ptr("westus"),
					Properties: &armsynapse.ReadWriteDatabaseProperties{
						ProvisioningState: to.Ptr(armsynapse.ResourceProvisioningStateSucceeded),
						SoftDeletePeriod:  to.Ptr("P1D"),
					},
				},
				&armsynapse.ReadWriteDatabase{
					Name:     to.Ptr("KustoClusterRPTest4/KustoDatabase9"),
					Type:     to.Ptr("Microsoft.Synapse/workspaces/kustopools/Databases"),
					ID:       to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.Synapse/workspaces/kustorptest/kustopools/KustoClusterRPTest4/Databases/KustoDatabase9"),
					Kind:     to.Ptr(armsynapse.KindReadWrite),
					Location: to.Ptr("westus"),
					Properties: &armsynapse.ReadWriteDatabaseProperties{
						ProvisioningState: to.Ptr(armsynapse.ResourceProvisioningStateSucceeded),
						SoftDeletePeriod:  to.Ptr("P1D"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DatabaseListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DatabaseListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoDatabasesListByKustoPool.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestKustoPoolDatabases_Get(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolDatabasesGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"KustoPoolDatabasesGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewKustoPoolDatabasesClient("12345678-1234-1234-1234-123456789098", cred, &options)
	res, err := client.Get(ctx,
		"kustorptest",
		"synapseWorkspaceName",
		"kustoclusterrptest4",
		"KustoDatabase8",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolDatabasesGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.KustoPoolDatabasesClientGetResponse{
			&armsynapse.ReadWriteDatabase{
				Name:     to.Ptr("KustoClusterRPTest4/KustoDatabase8"),
				Type:     to.Ptr("Microsoft.Synapse/workspaces/kustopools/Databases"),
				ID:       to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/providers/Microsoft.Synapse/workspaces/synapseWorkspaceName/kustopools/KustoClusterRPTest4/Databases/KustoDatabase8"),
				Kind:     to.Ptr(armsynapse.KindReadWrite),
				Location: to.Ptr("westus"),
				Properties: &armsynapse.ReadWriteDatabaseProperties{
					ProvisioningState: to.Ptr(armsynapse.ResourceProvisioningStateSucceeded),
					SoftDeletePeriod:  to.Ptr("P1D"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolDatabasesGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestKustoPoolDatabases_CreateOrUpdate(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolDatabasesCreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"KustoPoolDatabasesCreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewKustoPoolDatabasesClient("12345678-1234-1234-1234-123456789098", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"kustorptest",
		"synapseWorkspaceName",
		"kustoclusterrptest4",
		"KustoDatabase8",
		&armsynapse.ReadWriteDatabase{
			Kind:     to.Ptr(armsynapse.KindReadWrite),
			Location: to.Ptr("westus"),
			Properties: &armsynapse.ReadWriteDatabaseProperties{
				SoftDeletePeriod: to.Ptr("P1D"),
			},
		},
		&armsynapse.KustoPoolDatabasesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolDatabasesCreateOrUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolDatabasesCreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.KustoPoolDatabasesClientCreateOrUpdateResponse{
			&armsynapse.ReadWriteDatabase{
				Name:     to.Ptr("KustoClusterRPTest4/KustoDatabase8"),
				Type:     to.Ptr("Microsoft.Synapse/workspaces/kustopools/Databases"),
				ID:       to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.Synapse/workspaces/synapseWorkspaceName/kustopools/KustoClusterRPTest4/Databases/KustoDatabase8"),
				Kind:     to.Ptr(armsynapse.KindReadWrite),
				Location: to.Ptr("westus"),
				Properties: &armsynapse.ReadWriteDatabaseProperties{
					ProvisioningState: to.Ptr(armsynapse.ResourceProvisioningStateSucceeded),
					SoftDeletePeriod:  to.Ptr("P1D"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolDatabasesCreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestKustoPoolDatabases_Update(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolDatabasesUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"KustoPoolDatabasesUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewKustoPoolDatabasesClient("12345678-1234-1234-1234-123456789098", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"kustorptest",
		"synapseWorkspaceName",
		"kustoclusterrptest4",
		"KustoDatabase8",
		&armsynapse.ReadWriteDatabase{
			Kind: to.Ptr(armsynapse.KindReadWrite),
			Properties: &armsynapse.ReadWriteDatabaseProperties{
				SoftDeletePeriod: to.Ptr("P1D"),
			},
		},
		&armsynapse.KustoPoolDatabasesClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolDatabasesUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolDatabasesUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.KustoPoolDatabasesClientUpdateResponse{
			&armsynapse.ReadWriteDatabase{
				Name:     to.Ptr("KustoClusterRPTest4/KustoDatabase8"),
				Type:     to.Ptr("Microsoft.Synapse/workspaces/kustopools/Databases"),
				ID:       to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.Synapse/workspaces/synapseWorkspaceName/kustopools/KustoClusterRPTest4/Databases/KustoDatabase8"),
				Kind:     to.Ptr(armsynapse.KindReadWrite),
				Location: to.Ptr("westus"),
				Properties: &armsynapse.ReadWriteDatabaseProperties{
					ProvisioningState: to.Ptr(armsynapse.ResourceProvisioningStateSucceeded),
					SoftDeletePeriod:  to.Ptr("P1D"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolDatabasesUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestKustoPoolDatabases_Delete(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolDatabasesDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"KustoPoolDatabasesDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewKustoPoolDatabasesClient("12345678-1234-1234-1234-123456789098", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"kustorptest",
		"synapseWorkspaceName",
		"kustoclusterrptest4",
		"KustoDatabase8",
		&armsynapse.KustoPoolDatabasesClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolDatabasesDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolDatabasesDelete.json: %v", err)
	}
}

func TestKustoPoolDataConnections_CheckNameAvailability(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolDataConnectionsCheckNameAvailability.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"KustoPoolDataConnectionsCheckNameAvailability"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewKustoPoolDataConnectionsClient("12345678-1234-1234-1234-123456789098", cred, &options)
	res, err := client.CheckNameAvailability(ctx,
		"kustorptest",
		"synapseWorkspaceName",
		"kustoclusterrptest4",
		"Kustodatabase8",
		armsynapse.DataConnectionCheckNameRequest{
			Name: to.Ptr("DataConnections8"),
			Type: to.Ptr("Microsoft.Synapse/workspaces/kustoPools/databases/dataConnections"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolDataConnectionsCheckNameAvailability.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.CheckNameResult{
			Name:          to.Ptr("DataConnections8"),
			Message:       to.Ptr("Name 'DataConnections8' is already taken. Please specify a different name."),
			NameAvailable: to.Ptr(false),
			Reason:        to.Ptr(armsynapse.ReasonAlreadyExists),
		}
		if !reflect.DeepEqual(exampleRes, res.CheckNameResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CheckNameResult)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolDataConnectionsCheckNameAvailability.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestKustoPoolDataConnections_DataConnectionValidation(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolDataConnectionValidation.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"KustoPoolDataConnectionValidation"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewKustoPoolDataConnectionsClient("12345678-1234-1234-1234-123456789098", cred, &options)
	poller, err := client.BeginDataConnectionValidation(ctx,
		"kustorptest",
		"kustorptest",
		"kustoclusterrptest4",
		"KustoDatabase8",
		armsynapse.DataConnectionValidation{
			DataConnectionName: to.Ptr("DataConnections8"),
			Properties: &armsynapse.EventHubDataConnection{
				Kind: to.Ptr(armsynapse.DataConnectionKindEventHub),
			},
		},
		&armsynapse.KustoPoolDataConnectionsClientBeginDataConnectionValidationOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolDataConnectionValidation.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolDataConnectionValidation.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.DataConnectionValidationListResult{
			Value: []*armsynapse.DataConnectionValidationResult{
				{
					ErrorMessage: to.Ptr("Event hub's namespace does not exist"),
				},
				{
					ErrorMessage: to.Ptr("Database does not exist"),
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.DataConnectionValidationListResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DataConnectionValidationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolDataConnectionValidation.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestKustoPoolDataConnections_ListByDatabase(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolDataConnectionsListByDatabase.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"KustoPoolDataConnectionsListByDatabase"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewKustoPoolDataConnectionsClient("12345678-1234-1234-1234-123456789098", cred, &options)
	pager := client.ListByDatabase("kustorptest",
		"synapseWorkspaceName",
		"kustoclusterrptest4",
		"KustoDatabase8",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolDataConnectionsListByDatabase.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsynapse.DataConnectionListResult{
			Value: []armsynapse.DataConnectionClassification{
				&armsynapse.EventHubDataConnection{
					Name:     to.Ptr("KustoClusterRPTest4/KustoDatabase8/KustoDataConnection8"),
					Type:     to.Ptr("Microsoft.Kusto/Clusters/Databases/DataConnections"),
					ID:       to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.Synapse/workspaces/synapseWorkspaceName/kustopools/KustoClusterRPTest4/Databases/KustoDatabase8/DataConnections/KustoDataConnection8"),
					Kind:     to.Ptr(armsynapse.DataConnectionKindEventHub),
					Location: to.Ptr("westus"),
					Properties: &armsynapse.EventHubConnectionProperties{
						ConsumerGroup:      to.Ptr("testConsumerGroup1"),
						EventHubResourceID: to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.EventHub/namespaces/eventhubTestns1/eventhubs/eventhubTest1"),
					},
				},
				&armsynapse.EventHubDataConnection{
					Name:     to.Ptr("KustoClusterRPTest4/KustoDatabase9/KustoDataConnection9"),
					Type:     to.Ptr("Microsoft.Kusto/Clusters/Databases/DataConnections"),
					ID:       to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.Synapse/workspaces/synapseWorkspaceName/kustopools/KustoClusterRPTest4/Databases/KustoDatabase9/DataConnections/KustoDataConnection9"),
					Kind:     to.Ptr(armsynapse.DataConnectionKindEventHub),
					Location: to.Ptr("westus"),
					Properties: &armsynapse.EventHubConnectionProperties{
						ConsumerGroup:      to.Ptr("testConsumerGroup2"),
						EventHubResourceID: to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.EventHub/namespaces/eventhubTestns2/eventhubs/eventhubTest2"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DataConnectionListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DataConnectionListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolDataConnectionsListByDatabase.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestKustoPoolDataConnections_Get(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolDataConnectionsGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"KustoPoolDataConnectionsGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewKustoPoolDataConnectionsClient("12345678-1234-1234-1234-123456789098", cred, &options)
	res, err := client.Get(ctx,
		"kustorptest",
		"synapseWorkspaceName",
		"kustoclusterrptest4",
		"KustoDatabase8",
		"DataConnections8",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolDataConnectionsGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.KustoPoolDataConnectionsClientGetResponse{
			&armsynapse.EventHubDataConnection{
				Name:     to.Ptr("KustoClusterRPTest4/KustoDatabase8/DataConnections8"),
				Type:     to.Ptr("Microsoft.Kusto/Clusters/Databases/DataConnections"),
				ID:       to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.Synapse/workspaces/synapseWorkspaceName/kustopools/KustoClusterRPTest4/Databases/KustoDatabase8/DataConnections/DataConnections8"),
				Kind:     to.Ptr(armsynapse.DataConnectionKindEventHub),
				Location: to.Ptr("westus"),
				Properties: &armsynapse.EventHubConnectionProperties{
					ConsumerGroup:      to.Ptr("testConsumerGroup1"),
					EventHubResourceID: to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.EventHub/namespaces/eventhubTestns1/eventhubs/eventhubTest1"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolDataConnectionsGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestKustoPoolDataConnections_CreateOrUpdate(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolDataConnectionsCreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"KustoPoolDataConnectionsCreateOrUpdate.json"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewKustoPoolDataConnectionsClient("12345678-1234-1234-1234-123456789098", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"kustorptest",
		"synapseWorkspaceName",
		"kustoclusterrptest4",
		"KustoDatabase8",
		"DataConnections8",
		&armsynapse.EventHubDataConnection{
			Kind:     to.Ptr(armsynapse.DataConnectionKindEventHub),
			Location: to.Ptr("westus"),
			Properties: &armsynapse.EventHubConnectionProperties{
				ConsumerGroup:      to.Ptr("testConsumerGroup1"),
				EventHubResourceID: to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.EventHub/namespaces/eventhubTestns1/eventhubs/eventhubTest1"),
			},
		},
		&armsynapse.KustoPoolDataConnectionsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolDataConnectionsCreateOrUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolDataConnectionsCreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.KustoPoolDataConnectionsClientCreateOrUpdateResponse{
			&armsynapse.EventHubDataConnection{
				Name:     to.Ptr("KustoClusterRPTest4/KustoDatabase8/DataConnections8"),
				Type:     to.Ptr("Microsoft.Kusto/Clusters/Databases/DataConnections"),
				ID:       to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.Synapse/workspaces/synapseWorkspaceName/kustopools/KustoClusterRPTest4/Databases/KustoDatabase8/DataConnections/DataConnections8"),
				Kind:     to.Ptr(armsynapse.DataConnectionKindEventHub),
				Location: to.Ptr("westus"),
				Properties: &armsynapse.EventHubConnectionProperties{
					ConsumerGroup:      to.Ptr("testConsumerGroup1"),
					EventHubResourceID: to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.EventHub/namespaces/eventhubTestns1/eventhubs/eventhubTest1"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolDataConnectionsCreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestKustoPoolDataConnections_Update(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolDataConnectionsUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"KustoPoolDataConnectionsUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewKustoPoolDataConnectionsClient("12345678-1234-1234-1234-123456789098", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"kustorptest",
		"synapseWorkspaceName",
		"kustoclusterrptest4",
		"KustoDatabase8",
		"DataConnections8",
		&armsynapse.EventHubDataConnection{
			Kind:     to.Ptr(armsynapse.DataConnectionKindEventHub),
			Location: to.Ptr("westus"),
			Properties: &armsynapse.EventHubConnectionProperties{
				ConsumerGroup:      to.Ptr("testConsumerGroup1"),
				EventHubResourceID: to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.EventHub/namespaces/eventhubTestns1/eventhubs/eventhubTest1"),
			},
		},
		&armsynapse.KustoPoolDataConnectionsClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolDataConnectionsUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolDataConnectionsUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.KustoPoolDataConnectionsClientUpdateResponse{
			&armsynapse.EventHubDataConnection{
				Name:     to.Ptr("KustoClusterRPTest4/KustoDatabase8/DataConnections8"),
				Type:     to.Ptr("Microsoft.Kusto/Clusters/Databases/DataConnections"),
				ID:       to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.Synapse/workspaces/synapseWorkspaceName/kustopools/KustoClusterRPTest4/Databases/KustoDatabase8/DataConnections/DataConnections8"),
				Kind:     to.Ptr(armsynapse.DataConnectionKindEventHub),
				Location: to.Ptr("westus"),
				Properties: &armsynapse.EventHubConnectionProperties{
					ConsumerGroup:      to.Ptr("testConsumerGroup1"),
					EventHubResourceID: to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.EventHub/namespaces/eventhubTestns1/eventhubs/eventhubTest1"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolDataConnectionsUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestKustoPoolDataConnections_Delete(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolDataConnectionsDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"KustoPoolDataConnectionsDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewKustoPoolDataConnectionsClient("12345678-1234-1234-1234-123456789098", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"kustorptest",
		"synapseWorkspaceName",
		"kustoclusterrptest4",
		"KustoDatabase8",
		"kustoeventhubconnection1",
		&armsynapse.KustoPoolDataConnectionsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolDataConnectionsDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolDataConnectionsDelete.json: %v", err)
	}
}

func TestKustoPoolPrincipalAssignments_CheckNameAvailability(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolPrincipalAssignmentsCheckNameAvailability.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"KustoPoolPrincipalAssignmentsCheckNameAvailability"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewKustoPoolPrincipalAssignmentsClient("12345678-1234-1234-1234-123456789098", cred, &options)
	res, err := client.CheckNameAvailability(ctx,
		"synapseWorkspaceName",
		"kustoclusterrptest4",
		"kustorptest",
		armsynapse.ClusterPrincipalAssignmentCheckNameRequest{
			Name: to.Ptr("kustoprincipal1"),
			Type: to.Ptr("Microsoft.Synapse/workspaces/kustoPools/principalAssignments"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolPrincipalAssignmentsCheckNameAvailability.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.CheckNameResult{
			Name:          to.Ptr("kustoprincipal1"),
			Message:       to.Ptr("Name 'kustoprincipal1' is already taken. Please specify a different name"),
			NameAvailable: to.Ptr(false),
		}
		if !reflect.DeepEqual(exampleRes, res.CheckNameResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CheckNameResult)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolPrincipalAssignmentsCheckNameAvailability.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestKustoPoolPrincipalAssignments_List(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolPrincipalAssignmentsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"KustoPoolPrincipalAssignmentsList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewKustoPoolPrincipalAssignmentsClient("12345678-1234-1234-1234-123456789098", cred, &options)
	pager := client.List("synapseWorkspaceName",
		"kustoclusterrptest4",
		"kustorptest",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolPrincipalAssignmentsList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsynapse.ClusterPrincipalAssignmentListResult{
			Value: []*armsynapse.ClusterPrincipalAssignment{
				{
					Name: to.Ptr("synapseWorkspaceName/kustoclusterrptest4/kustoprincipal1"),
					Type: to.Ptr("Microsoft.Synapse/Workspaces/KustoPools/PrincipalAssignments"),
					ID:   to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.Synapse/workspaces/synapseWorkspaceName/kustoPools/kustoclusterrptest4/PrincipalAssignments/kustoprincipal1"),
					Properties: &armsynapse.ClusterPrincipalProperties{
						PrincipalID:       to.Ptr("87654321-1234-1234-1234-123456789123"),
						PrincipalName:     to.Ptr("TestApp"),
						PrincipalType:     to.Ptr(armsynapse.PrincipalTypeApp),
						ProvisioningState: to.Ptr(armsynapse.ResourceProvisioningStateSucceeded),
						Role:              to.Ptr(armsynapse.ClusterPrincipalRole("Admin")),
						TenantID:          to.Ptr("12345678-1234-1234-1234-123456789123"),
						TenantName:        to.Ptr("tenantName"),
					},
				},
				{
					Name: to.Ptr("synapseWorkspaceName/kustoclusterrptest4/kustoprincipal2"),
					Type: to.Ptr("Microsoft.Synapse/Workspaces/KustoPools/PrincipalAssignments"),
					ID:   to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.Synapse/workspaces/synapseWorkspaceName/kustoPools/kustoclusterrptest4/PrincipalAssignments/kustoprincipal2"),
					Properties: &armsynapse.ClusterPrincipalProperties{
						PrincipalID:       to.Ptr("87654321-1234-1234-1234-123456789123"),
						PrincipalName:     to.Ptr("TestApp"),
						PrincipalType:     to.Ptr(armsynapse.PrincipalTypeApp),
						ProvisioningState: to.Ptr(armsynapse.ResourceProvisioningStateSucceeded),
						Role:              to.Ptr(armsynapse.ClusterPrincipalRole("Admin")),
						TenantID:          to.Ptr("12345678-1234-1234-1234-123456789123"),
						TenantName:        to.Ptr("tenantName"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ClusterPrincipalAssignmentListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ClusterPrincipalAssignmentListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolPrincipalAssignmentsList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestKustoPoolPrincipalAssignments_Get(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolPrincipalAssignmentsGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"KustoPoolPrincipalAssignmentsGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewKustoPoolPrincipalAssignmentsClient("12345678-1234-1234-1234-123456789098", cred, &options)
	res, err := client.Get(ctx,
		"synapseWorkspaceName",
		"kustoclusterrptest4",
		"kustoprincipal1",
		"kustorptest",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolPrincipalAssignmentsGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.ClusterPrincipalAssignment{
			Name: to.Ptr("synapseWorkspaceName/kustoclusterrptest4/kustoprincipal1"),
			Type: to.Ptr("Microsoft.Synapse/Workspaces/KustoPools/PrincipalAssignments"),
			ID:   to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.Synapse/workspaces/synapseWorkspaceName/kustoPools/kustoclusterrptest4/PrincipalAssignments/kustoprincipal1"),
			Properties: &armsynapse.ClusterPrincipalProperties{
				PrincipalID:       to.Ptr("87654321-1234-1234-1234-123456789123"),
				PrincipalName:     to.Ptr("TestApp"),
				PrincipalType:     to.Ptr(armsynapse.PrincipalTypeApp),
				ProvisioningState: to.Ptr(armsynapse.ResourceProvisioningStateSucceeded),
				Role:              to.Ptr(armsynapse.ClusterPrincipalRole("Admin")),
				TenantID:          to.Ptr("12345678-1234-1234-1234-123456789123"),
				TenantName:        to.Ptr("tenantName"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ClusterPrincipalAssignment) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ClusterPrincipalAssignment)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolPrincipalAssignmentsGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestKustoPoolPrincipalAssignments_CreateOrUpdate(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolPrincipalAssignmentsCreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"KustoPoolPrincipalAssignmentsCreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewKustoPoolPrincipalAssignmentsClient("12345678-1234-1234-1234-123456789098", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"synapseWorkspaceName",
		"kustoclusterrptest4",
		"kustoprincipal1",
		"kustorptest",
		armsynapse.ClusterPrincipalAssignment{
			Properties: &armsynapse.ClusterPrincipalProperties{
				PrincipalID:   to.Ptr("87654321-1234-1234-1234-123456789123"),
				PrincipalType: to.Ptr(armsynapse.PrincipalTypeApp),
				Role:          to.Ptr(armsynapse.ClusterPrincipalRoleAllDatabasesAdmin),
				TenantID:      to.Ptr("12345678-1234-1234-1234-123456789123"),
			},
		},
		&armsynapse.KustoPoolPrincipalAssignmentsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolPrincipalAssignmentsCreateOrUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolPrincipalAssignmentsCreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.ClusterPrincipalAssignment{
			Name: to.Ptr("synapseWorkspaceName/kustoclusterrptest4/kustoprincipal1"),
			Type: to.Ptr("Microsoft.Synapse/Workspaces/KustoPools/PrincipalAssignments"),
			ID:   to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.Synapse/workspaces/synapseWorkspaceName/kustoPools/kustoclusterrptest4/PrincipalAssignments/kustoprincipal1"),
			Properties: &armsynapse.ClusterPrincipalProperties{
				PrincipalID:       to.Ptr("87654321-1234-1234-1234-123456789123"),
				PrincipalName:     to.Ptr("TestApp"),
				PrincipalType:     to.Ptr(armsynapse.PrincipalTypeApp),
				ProvisioningState: to.Ptr(armsynapse.ResourceProvisioningStateSucceeded),
				Role:              to.Ptr(armsynapse.ClusterPrincipalRole("Admin")),
				TenantID:          to.Ptr("12345678-1234-1234-1234-123456789123"),
				TenantName:        to.Ptr("tenantName"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ClusterPrincipalAssignment) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ClusterPrincipalAssignment)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolPrincipalAssignmentsCreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestKustoPoolPrincipalAssignments_Delete(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolPrincipalAssignmentsDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"KustoPoolPrincipalAssignmentsDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewKustoPoolPrincipalAssignmentsClient("12345678-1234-1234-1234-123456789098", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"synapseWorkspaceName",
		"kustoclusterrptest4",
		"kustoprincipal1",
		"kustorptest",
		&armsynapse.KustoPoolPrincipalAssignmentsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolPrincipalAssignmentsDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolPrincipalAssignmentsDelete.json: %v", err)
	}
}

func TestKustoPoolDatabasePrincipalAssignments_CheckNameAvailability(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolDatabasePrincipalAssignmentsCheckNameAvailability.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"KustoPoolDatabasePrincipalAssignmentsCheckNameAvailability"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewKustoPoolDatabasePrincipalAssignmentsClient("12345678-1234-1234-1234-123456789098", cred, &options)
	res, err := client.CheckNameAvailability(ctx,
		"synapseWorkspaceName",
		"kustoclusterrptest4",
		"Kustodatabase8",
		"kustorptest",
		armsynapse.DatabasePrincipalAssignmentCheckNameRequest{
			Name: to.Ptr("kustoprincipal1"),
			Type: to.Ptr("Microsoft.Synapse/workspaces/kustoPools/databases/principalAssignments"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolDatabasePrincipalAssignmentsCheckNameAvailability.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.CheckNameResult{
			Name:          to.Ptr("kustoprincipal1"),
			Message:       to.Ptr("Name 'kustoprincipal1' is already taken. Please specify a different name"),
			NameAvailable: to.Ptr(false),
		}
		if !reflect.DeepEqual(exampleRes, res.CheckNameResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CheckNameResult)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolDatabasePrincipalAssignmentsCheckNameAvailability.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestKustoPoolDatabasePrincipalAssignments_List(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolDatabasePrincipalAssignmentsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"KustoPoolDatabasePrincipalAssignmentsList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewKustoPoolDatabasePrincipalAssignmentsClient("12345678-1234-1234-1234-123456789098", cred, &options)
	pager := client.List("synapseWorkspaceName",
		"kustoclusterrptest4",
		"Kustodatabase8",
		"kustorptest",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolDatabasePrincipalAssignmentsList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsynapse.DatabasePrincipalAssignmentListResult{
			Value: []*armsynapse.DatabasePrincipalAssignment{
				{
					Name: to.Ptr("synapseWorkspaceName/kustoclusterrptest4/Kustodatabase8/kustoprincipal1"),
					Type: to.Ptr("Microsoft.Synapse/Workspaces/KustoPools/Databases/PrincipalAssignments"),
					ID:   to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.Synapse/workspaces/synapseWorkspaceName/kustoPools/kustoclusterrptest4/Databases/Kustodatabase8/PrincipalAssignments/kustoprincipal1"),
					Properties: &armsynapse.DatabasePrincipalProperties{
						PrincipalID:       to.Ptr("87654321-1234-1234-1234-123456789123"),
						PrincipalName:     to.Ptr("TestApp"),
						PrincipalType:     to.Ptr(armsynapse.PrincipalTypeApp),
						ProvisioningState: to.Ptr(armsynapse.ResourceProvisioningStateSucceeded),
						Role:              to.Ptr(armsynapse.DatabasePrincipalRoleAdmin),
						TenantID:          to.Ptr("12345678-1234-1234-1234-123456789123"),
						TenantName:        to.Ptr("tenantName"),
					},
				},
				{
					Name: to.Ptr("synapseWorkspaceName/kustoclusterrptest4/Kustodatabase8/kustoprincipal2"),
					Type: to.Ptr("Microsoft.Synapse/Workspaces/KustoPools/Databases/PrincipalAssignments"),
					ID:   to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.Synapse/workspaces/synapseWorkspaceName/kustoPools/kustoclusterrptest4/Databases/Kustodatabase8/PrincipalAssignments/kustoprincipal2"),
					Properties: &armsynapse.DatabasePrincipalProperties{
						PrincipalID:       to.Ptr("87654321-1234-1234-1234-123456789123"),
						PrincipalName:     to.Ptr("TestApp"),
						PrincipalType:     to.Ptr(armsynapse.PrincipalTypeApp),
						ProvisioningState: to.Ptr(armsynapse.ResourceProvisioningStateSucceeded),
						Role:              to.Ptr(armsynapse.DatabasePrincipalRoleAdmin),
						TenantID:          to.Ptr("12345678-1234-1234-1234-123456789123"),
						TenantName:        to.Ptr("tenantName"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DatabasePrincipalAssignmentListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DatabasePrincipalAssignmentListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolDatabasePrincipalAssignmentsList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestKustoPoolDatabasePrincipalAssignments_Get(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolDatabasePrincipalAssignmentsGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"KustoPoolDatabasePrincipalAssignmentsGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewKustoPoolDatabasePrincipalAssignmentsClient("12345678-1234-1234-1234-123456789098", cred, &options)
	res, err := client.Get(ctx,
		"synapseWorkspaceName",
		"kustoclusterrptest4",
		"Kustodatabase8",
		"kustoprincipal1",
		"kustorptest",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolDatabasePrincipalAssignmentsGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.DatabasePrincipalAssignment{
			Name: to.Ptr("synapseWorkspaceName/kustoclusterrptest4/Kustodatabase8/kustoprincipal1"),
			Type: to.Ptr("Microsoft.Synapse/Workspaces/KustoPools/Databases/PrincipalAssignments"),
			ID:   to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.Synapse/workspaces/synapseWorkspaceName/kustoPools/kustoclusterrptest4/Databases/Kustodatabase8/PrincipalAssignments/kustoprincipal1"),
			Properties: &armsynapse.DatabasePrincipalProperties{
				PrincipalID:       to.Ptr("87654321-1234-1234-1234-123456789123"),
				PrincipalName:     to.Ptr("TestApp"),
				PrincipalType:     to.Ptr(armsynapse.PrincipalTypeApp),
				ProvisioningState: to.Ptr(armsynapse.ResourceProvisioningStateSucceeded),
				Role:              to.Ptr(armsynapse.DatabasePrincipalRoleAdmin),
				TenantID:          to.Ptr("12345678-1234-1234-1234-123456789123"),
				TenantName:        to.Ptr("tenantName"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DatabasePrincipalAssignment) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DatabasePrincipalAssignment)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolDatabasePrincipalAssignmentsGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestKustoPoolDatabasePrincipalAssignments_CreateOrUpdate(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolDatabasePrincipalAssignmentsCreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"KustoPoolDatabasePrincipalAssignmentsCreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewKustoPoolDatabasePrincipalAssignmentsClient("12345678-1234-1234-1234-123456789098", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"synapseWorkspaceName",
		"kustoclusterrptest4",
		"Kustodatabase8",
		"kustoprincipal1",
		"kustorptest",
		armsynapse.DatabasePrincipalAssignment{
			Properties: &armsynapse.DatabasePrincipalProperties{
				PrincipalID:   to.Ptr("87654321-1234-1234-1234-123456789123"),
				PrincipalType: to.Ptr(armsynapse.PrincipalTypeApp),
				Role:          to.Ptr(armsynapse.DatabasePrincipalRoleAdmin),
				TenantID:      to.Ptr("12345678-1234-1234-1234-123456789123"),
			},
		},
		&armsynapse.KustoPoolDatabasePrincipalAssignmentsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolDatabasePrincipalAssignmentsCreateOrUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolDatabasePrincipalAssignmentsCreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsynapse.DatabasePrincipalAssignment{
			Name: to.Ptr("synapseWorkspaceName/kustoclusterrptest4/Kustodatabase8/kustoprincipal1"),
			Type: to.Ptr("Microsoft.Synapse/Workspaces/KustoPools/Databases/PrincipalAssignments"),
			ID:   to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.Synapse/workspaces/synapseWorkspaceName/kustoPools/kustoclusterrptest4/Databases/Kustodatabase8/PrincipalAssignments/kustoprincipal1"),
			Properties: &armsynapse.DatabasePrincipalProperties{
				PrincipalID:       to.Ptr("87654321-1234-1234-1234-123456789123"),
				PrincipalName:     to.Ptr("TestApp"),
				PrincipalType:     to.Ptr(armsynapse.PrincipalTypeApp),
				ProvisioningState: to.Ptr(armsynapse.ResourceProvisioningStateSucceeded),
				Role:              to.Ptr(armsynapse.DatabasePrincipalRoleAdmin),
				TenantID:          to.Ptr("12345678-1234-1234-1234-123456789123"),
				TenantName:        to.Ptr("tenantName"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DatabasePrincipalAssignment) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DatabasePrincipalAssignment)
			t.Fatalf("Mock response is not equal to example response for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolDatabasePrincipalAssignmentsCreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestKustoPoolDatabasePrincipalAssignments_Delete(t *testing.T) {
	// From example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolDatabasePrincipalAssignmentsDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"KustoPoolDatabasePrincipalAssignmentsDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsynapse.NewKustoPoolDatabasePrincipalAssignmentsClient("12345678-1234-1234-1234-123456789098", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"synapseWorkspaceName",
		"kustoclusterrptest4",
		"Kustodatabase8",
		"kustoprincipal1",
		"kustorptest",
		&armsynapse.KustoPoolDatabasePrincipalAssignmentsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolDatabasePrincipalAssignmentsDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolDatabasePrincipalAssignmentsDelete.json: %v", err)
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
