//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armpowerbiembedded

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"reflect"
)

// WorkspaceCollectionsClientListByResourceGroupPager provides operations for iterating over paged responses.
type WorkspaceCollectionsClientListByResourceGroupPager struct {
	client    *WorkspaceCollectionsClient
	current   WorkspaceCollectionsClientListByResourceGroupResponse
	requester func(context.Context) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *WorkspaceCollectionsClientListByResourceGroupPager) More() bool {
	return reflect.ValueOf(p.current).IsZero()
}

// NextPage advances the pager to the next page.
func (p *WorkspaceCollectionsClientListByResourceGroupPager) NextPage(ctx context.Context) (WorkspaceCollectionsClientListByResourceGroupResponse, error) {
	var req *policy.Request
	var err error
	if !p.More() {
		return WorkspaceCollectionsClientListByResourceGroupResponse{}, errors.New("no more pages")
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return WorkspaceCollectionsClientListByResourceGroupResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return WorkspaceCollectionsClientListByResourceGroupResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return WorkspaceCollectionsClientListByResourceGroupResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		return WorkspaceCollectionsClientListByResourceGroupResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// WorkspaceCollectionsClientListBySubscriptionPager provides operations for iterating over paged responses.
type WorkspaceCollectionsClientListBySubscriptionPager struct {
	client    *WorkspaceCollectionsClient
	current   WorkspaceCollectionsClientListBySubscriptionResponse
	requester func(context.Context) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *WorkspaceCollectionsClientListBySubscriptionPager) More() bool {
	return reflect.ValueOf(p.current).IsZero()
}

// NextPage advances the pager to the next page.
func (p *WorkspaceCollectionsClientListBySubscriptionPager) NextPage(ctx context.Context) (WorkspaceCollectionsClientListBySubscriptionResponse, error) {
	var req *policy.Request
	var err error
	if !p.More() {
		return WorkspaceCollectionsClientListBySubscriptionResponse{}, errors.New("no more pages")
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return WorkspaceCollectionsClientListBySubscriptionResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return WorkspaceCollectionsClientListBySubscriptionResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return WorkspaceCollectionsClientListBySubscriptionResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listBySubscriptionHandleResponse(resp)
	if err != nil {
		return WorkspaceCollectionsClientListBySubscriptionResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// WorkspacesClientListPager provides operations for iterating over paged responses.
type WorkspacesClientListPager struct {
	client    *WorkspacesClient
	current   WorkspacesClientListResponse
	requester func(context.Context) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *WorkspacesClientListPager) More() bool {
	return reflect.ValueOf(p.current).IsZero()
}

// NextPage advances the pager to the next page.
func (p *WorkspacesClientListPager) NextPage(ctx context.Context) (WorkspacesClientListResponse, error) {
	var req *policy.Request
	var err error
	if !p.More() {
		return WorkspacesClientListResponse{}, errors.New("no more pages")
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return WorkspacesClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return WorkspacesClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return WorkspacesClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return WorkspacesClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}
