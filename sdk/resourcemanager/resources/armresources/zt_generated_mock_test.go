//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armresources_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/resources/armresources"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestOperations_List(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestDeployments_DeleteAtScope(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestDeployments_CheckExistenceAtScope(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestDeployments_CreateOrUpdateAtScope(t *testing.T) {
	// From example specification/resources/resource-manager/Microsoft.Resources/stable/2021-04-01/examples/PutDeploymentAtScope.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create deployment at a given scope."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armresources.NewDeploymentsClient("<subscription-id>", cred, &options)
	poller, err := client.BeginCreateOrUpdateAtScope(ctx,
		"providers/Microsoft.Management/managementGroups/my-management-group-id",
		"my-deployment",
		armresources.Deployment{
			Location: to.Ptr("eastus"),
			Properties: &armresources.DeploymentProperties{
				Mode:       to.Ptr(armresources.DeploymentModeIncremental),
				Parameters: map[string]interface{}{},
				TemplateLink: &armresources.TemplateLink{
					URI: to.Ptr("https://example.com/exampleTemplate.json"),
				},
			},
			Tags: map[string]*string{
				"tagKey1": to.Ptr("tag-value-1"),
				"tagKey2": to.Ptr("tag-value-2"),
			},
		},
		&armresources.DeploymentsClientBeginCreateOrUpdateAtScopeOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/resources/resource-manager/Microsoft.Resources/stable/2021-04-01/examples/PutDeploymentAtScope.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/resources/resource-manager/Microsoft.Resources/stable/2021-04-01/examples/PutDeploymentAtScope.json: %v", err)
	}
	// Response check
	{
		exampleRes := armresources.DeploymentExtended{
			Name:     to.Ptr("my-deployment"),
			Type:     to.Ptr("Microsoft.Resources/deployments"),
			ID:       to.Ptr("/providers/Microsoft.Management/managementGroups/my-management-group-id/providers/Microsoft.Resources/deployments/my-deployment"),
			Location: to.Ptr("eastus"),
			Properties: &armresources.DeploymentPropertiesExtended{
				CorrelationID: to.Ptr("00000000-0000-0000-0000-000000000000"),
				Dependencies: []*armresources.Dependency{
					{
						DependsOn: []*armresources.BasicDependency{
							{
								ID:           to.Ptr("/providers/Microsoft.Management/managementGroups/my-management-group-id/providers/Microsoft.Authorization/policyDefinitions/policy-definition-name"),
								ResourceName: to.Ptr("policy-definition-name"),
								ResourceType: to.Ptr("Microsoft.Authorization/policyDefinitions"),
							}},
						ID:           to.Ptr("/providers/Microsoft.Management/managementGroups/my-management-group-id/providers/Microsoft.Authorization/policyAssignments/location-lock"),
						ResourceName: to.Ptr("location-lock"),
						ResourceType: to.Ptr("Microsoft.Authorization/policyAssignments"),
					}},
				Duration:   to.Ptr("PT1.2970875S"),
				Mode:       to.Ptr(armresources.DeploymentModeIncremental),
				Parameters: map[string]interface{}{},
				Providers: []*armresources.Provider{
					{
						Namespace: to.Ptr("Microsoft.Authorization"),
						ResourceTypes: []*armresources.ProviderResourceType{
							{
								Locations: []*string{
									nil},
								ResourceType: to.Ptr("policyDefinitions"),
							},
							{
								Locations: []*string{
									nil},
								ResourceType: to.Ptr("policyAssignments"),
							}},
					},
					{
						Namespace: to.Ptr("Microsoft.Resources"),
						ResourceTypes: []*armresources.ProviderResourceType{
							{
								Locations: []*string{
									to.Ptr("eastus")},
								ResourceType: to.Ptr("deployments"),
							}},
					}},
				ProvisioningState: to.Ptr(armresources.ProvisioningStateSucceeded),
				Timestamp:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-04-24T22:52:38.7895563Z"); return t }()),
			},
			Tags: map[string]*string{
				"tagKey1": to.Ptr("tag-value-1"),
				"tagKey2": to.Ptr("tag-value-2"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DeploymentExtended) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DeploymentExtended)
			t.Fatalf("Mock response is not equal to example response for example specification/resources/resource-manager/Microsoft.Resources/stable/2021-04-01/examples/PutDeploymentAtScope.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDeployments_GetAtScope(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestDeployments_CancelAtScope(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestDeployments_ValidateAtScope(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestDeployments_ExportTemplateAtScope(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestDeployments_ListAtScope(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestDeployments_DeleteAtTenantScope(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestDeployments_CheckExistenceAtTenantScope(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestDeployments_CreateOrUpdateAtTenantScope(t *testing.T) {
	// From example specification/resources/resource-manager/Microsoft.Resources/stable/2021-04-01/examples/PutDeploymentAtTenant.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create deployment at tenant scope."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armresources.NewDeploymentsClient("<subscription-id>", cred, &options)
	poller, err := client.BeginCreateOrUpdateAtTenantScope(ctx,
		"tenant-dep01",
		armresources.ScopedDeployment{
			Location: to.Ptr("eastus"),
			Properties: &armresources.DeploymentProperties{
				Mode:       to.Ptr(armresources.DeploymentModeIncremental),
				Parameters: map[string]interface{}{},
				TemplateLink: &armresources.TemplateLink{
					URI: to.Ptr("https://example.com/exampleTemplate.json"),
				},
			},
			Tags: map[string]*string{
				"tagKey1": to.Ptr("tag-value-1"),
				"tagKey2": to.Ptr("tag-value-2"),
			},
		},
		&armresources.DeploymentsClientBeginCreateOrUpdateAtTenantScopeOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/resources/resource-manager/Microsoft.Resources/stable/2021-04-01/examples/PutDeploymentAtTenant.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/resources/resource-manager/Microsoft.Resources/stable/2021-04-01/examples/PutDeploymentAtTenant.json: %v", err)
	}
	// Response check
	{
		exampleRes := armresources.DeploymentExtended{
			Name:     to.Ptr("tenant-dep01"),
			Type:     to.Ptr("Microsoft.Resources/deployments"),
			ID:       to.Ptr("/providers/Microsoft.Resources/deployments/tenant-dep01"),
			Location: to.Ptr("eastus"),
			Properties: &armresources.DeploymentPropertiesExtended{
				CorrelationID: to.Ptr("00000000-0000-0000-0000-000000000000"),
				Dependencies: []*armresources.Dependency{
					{
						DependsOn: []*armresources.BasicDependency{
							{
								ID:           to.Ptr("/providers/Microsoft.Authorization/policyDefinitions/policy-definition-name"),
								ResourceName: to.Ptr("policy-definition-name"),
								ResourceType: to.Ptr("Microsoft.Authorization/policyDefinitions"),
							}},
						ID:           to.Ptr("/providers/Microsoft.Authorization/policyAssignments/location-lock"),
						ResourceName: to.Ptr("location-lock"),
						ResourceType: to.Ptr("Microsoft.Authorization/policyAssignments"),
					}},
				Duration:   to.Ptr("PT1.2970875S"),
				Mode:       to.Ptr(armresources.DeploymentModeIncremental),
				Parameters: map[string]interface{}{},
				Providers: []*armresources.Provider{
					{
						Namespace: to.Ptr("Microsoft.Authorization"),
						ResourceTypes: []*armresources.ProviderResourceType{
							{
								Locations: []*string{
									nil},
								ResourceType: to.Ptr("policyDefinitions"),
							},
							{
								Locations: []*string{
									nil},
								ResourceType: to.Ptr("policyAssignments"),
							}},
					},
					{
						Namespace: to.Ptr("Microsoft.Resources"),
						ResourceTypes: []*armresources.ProviderResourceType{
							{
								Locations: []*string{
									to.Ptr("eastus")},
								ResourceType: to.Ptr("deployments"),
							}},
					}},
				ProvisioningState: to.Ptr(armresources.ProvisioningStateSucceeded),
				Timestamp:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-04-24T22:52:38.7895563Z"); return t }()),
			},
			Tags: map[string]*string{
				"tagKey1": to.Ptr("tag-value-1"),
				"tagKey2": to.Ptr("tag-value-2"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DeploymentExtended) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DeploymentExtended)
			t.Fatalf("Mock response is not equal to example response for example specification/resources/resource-manager/Microsoft.Resources/stable/2021-04-01/examples/PutDeploymentAtTenant.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDeployments_GetAtTenantScope(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestDeployments_CancelAtTenantScope(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestDeployments_ValidateAtTenantScope(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestDeployments_WhatIfAtTenantScope(t *testing.T) {
	// From example specification/resources/resource-manager/Microsoft.Resources/stable/2021-04-01/examples/PostDeploymentWhatIfOnTenant.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Predict template changes at management group scope"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armresources.NewDeploymentsClient("<subscription-id>", cred, &options)
	poller, err := client.BeginWhatIfAtTenantScope(ctx,
		"exampleDeploymentName",
		armresources.ScopedDeploymentWhatIf{
			Location: to.Ptr("eastus"),
			Properties: &armresources.DeploymentWhatIfProperties{
				Mode:         to.Ptr(armresources.DeploymentModeIncremental),
				Parameters:   map[string]interface{}{},
				TemplateLink: &armresources.TemplateLink{},
			},
		},
		&armresources.DeploymentsClientBeginWhatIfAtTenantScopeOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/resources/resource-manager/Microsoft.Resources/stable/2021-04-01/examples/PostDeploymentWhatIfOnTenant.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/resources/resource-manager/Microsoft.Resources/stable/2021-04-01/examples/PostDeploymentWhatIfOnTenant.json: %v", err)
	}
	// Response check
	{
		exampleRes := armresources.WhatIfOperationResult{
			Properties: &armresources.WhatIfOperationProperties{
				Changes: []*armresources.WhatIfChange{
					{
						After: map[string]interface{}{
							"name":       "myManagementGroup",
							"type":       "Microsoft.Management/managementGroups",
							"apiVersion": "2019-11-01",
							"id":         "/providers/Microsoft.Management/managementGroups/myManagementGroup",
						},
						ChangeType: to.Ptr(armresources.ChangeTypeCreate),
						ResourceID: to.Ptr("/providers/Microsoft.Management/managementGroups/myManagementGroup"),
					}},
			},
			Status: to.Ptr("Succeeded"),
		}
		if !reflect.DeepEqual(exampleRes, res.WhatIfOperationResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.WhatIfOperationResult)
			t.Fatalf("Mock response is not equal to example response for example specification/resources/resource-manager/Microsoft.Resources/stable/2021-04-01/examples/PostDeploymentWhatIfOnTenant.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDeployments_ExportTemplateAtTenantScope(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestDeployments_ListAtTenantScope(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestDeployments_DeleteAtManagementGroupScope(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestDeployments_CheckExistenceAtManagementGroupScope(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestDeployments_CreateOrUpdateAtManagementGroupScope(t *testing.T) {
	// From example specification/resources/resource-manager/Microsoft.Resources/stable/2021-04-01/examples/PutDeploymentAtManagementGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create deployment at management group scope."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armresources.NewDeploymentsClient("<subscription-id>", cred, &options)
	poller, err := client.BeginCreateOrUpdateAtManagementGroupScope(ctx,
		"my-management-group-id",
		"my-deployment",
		armresources.ScopedDeployment{
			Location: to.Ptr("eastus"),
			Properties: &armresources.DeploymentProperties{
				Mode:       to.Ptr(armresources.DeploymentModeIncremental),
				Parameters: map[string]interface{}{},
				TemplateLink: &armresources.TemplateLink{
					URI: to.Ptr("https://example.com/exampleTemplate.json"),
				},
			},
		},
		&armresources.DeploymentsClientBeginCreateOrUpdateAtManagementGroupScopeOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/resources/resource-manager/Microsoft.Resources/stable/2021-04-01/examples/PutDeploymentAtManagementGroup.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/resources/resource-manager/Microsoft.Resources/stable/2021-04-01/examples/PutDeploymentAtManagementGroup.json: %v", err)
	}
	// Response check
	{
		exampleRes := armresources.DeploymentExtended{
			Name:     to.Ptr("my-deployment"),
			Type:     to.Ptr("Microsoft.Resources/deployments"),
			ID:       to.Ptr("/providers/Microsoft.Management/managementGroups/my-management-group-id/providers/Microsoft.Resources/deployments/my-deployment"),
			Location: to.Ptr("eastus"),
			Properties: &armresources.DeploymentPropertiesExtended{
				CorrelationID: to.Ptr("00000000-0000-0000-0000-000000000000"),
				Dependencies: []*armresources.Dependency{
					{
						DependsOn: []*armresources.BasicDependency{
							{
								ID:           to.Ptr("/providers/Microsoft.Management/managementGroups/my-management-group-id/providers/Microsoft.Authorization/policyDefinitions/policy-definition-name"),
								ResourceName: to.Ptr("policy-definition-name"),
								ResourceType: to.Ptr("Microsoft.Authorization/policyDefinitions"),
							}},
						ID:           to.Ptr("/providers/Microsoft.Management/managementGroups/my-management-group-id/providers/Microsoft.Authorization/policyAssignments/location-lock"),
						ResourceName: to.Ptr("location-lock"),
						ResourceType: to.Ptr("Microsoft.Authorization/policyAssignments"),
					}},
				Duration:   to.Ptr("PT1.2970875S"),
				Mode:       to.Ptr(armresources.DeploymentModeIncremental),
				Parameters: map[string]interface{}{},
				Providers: []*armresources.Provider{
					{
						Namespace: to.Ptr("Microsoft.Authorization"),
						ResourceTypes: []*armresources.ProviderResourceType{
							{
								Locations: []*string{
									nil},
								ResourceType: to.Ptr("policyDefinitions"),
							},
							{
								Locations: []*string{
									nil},
								ResourceType: to.Ptr("policyAssignments"),
							}},
					},
					{
						Namespace: to.Ptr("Microsoft.Resources"),
						ResourceTypes: []*armresources.ProviderResourceType{
							{
								Locations: []*string{
									to.Ptr("eastus")},
								ResourceType: to.Ptr("deployments"),
							}},
					}},
				ProvisioningState: to.Ptr(armresources.ProvisioningStateSucceeded),
				Timestamp:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-04-24T22:52:38.7895563Z"); return t }()),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DeploymentExtended) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DeploymentExtended)
			t.Fatalf("Mock response is not equal to example response for example specification/resources/resource-manager/Microsoft.Resources/stable/2021-04-01/examples/PutDeploymentAtManagementGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDeployments_GetAtManagementGroupScope(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestDeployments_CancelAtManagementGroupScope(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestDeployments_ValidateAtManagementGroupScope(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestDeployments_WhatIfAtManagementGroupScope(t *testing.T) {
	// From example specification/resources/resource-manager/Microsoft.Resources/stable/2021-04-01/examples/PostDeploymentWhatIfOnManagementGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Predict template changes at management group scope"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armresources.NewDeploymentsClient("<subscription-id>", cred, &options)
	poller, err := client.BeginWhatIfAtManagementGroupScope(ctx,
		"myManagementGruop",
		"exampleDeploymentName",
		armresources.ScopedDeploymentWhatIf{
			Location: to.Ptr("eastus"),
			Properties: &armresources.DeploymentWhatIfProperties{
				Mode:         to.Ptr(armresources.DeploymentModeIncremental),
				Parameters:   map[string]interface{}{},
				TemplateLink: &armresources.TemplateLink{},
			},
		},
		&armresources.DeploymentsClientBeginWhatIfAtManagementGroupScopeOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/resources/resource-manager/Microsoft.Resources/stable/2021-04-01/examples/PostDeploymentWhatIfOnManagementGroup.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/resources/resource-manager/Microsoft.Resources/stable/2021-04-01/examples/PostDeploymentWhatIfOnManagementGroup.json: %v", err)
	}
	// Response check
	{
		exampleRes := armresources.WhatIfOperationResult{
			Properties: &armresources.WhatIfOperationProperties{
				Changes: []*armresources.WhatIfChange{
					{
						After: map[string]interface{}{
							"before": map[string]interface{}{
								"name":       "myPolicyAssignment",
								"type":       "Microsoft.Authorization/policyAssignments",
								"apiVersion": "2019-06-01",
								"id":         "/providers/Microsoft.Management/managementGroups/myManagementGroup/providers/Microsoft.Authorization/policyAssignments/myPolicyAssignment",
								"location":   "westus2",
								"properties": map[string]interface{}{
									"enforcementMode":    "DoNotEnforce",
									"policyDefinitionId": "/providers/Microsoft.Management/managementGroups/myManagementGroup/providers/Microsoft.Authorization/policyAssignments/myPolicyDefinition",
									"scope":              "/subscriptions/00000000-0000-0000-0000-000000000001",
								},
							},
							"changeType": "Modify",
							"delta": []interface{}{
								map[string]interface{}{
									"path":               "properties.enforcementMode",
									"after":              "DoNotEnforce",
									"before":             "Default",
									"propertyChangeType": "Modify",
								},
							},
							"resourceId": "/providers/Microsoft.Management/managementGroups/myManagementGroup/providers/Microsoft.Authorization/policyAssignments/myPolicyAssignment",
						},
						Before: map[string]interface{}{
							"name":       "myPolicyAssignment",
							"type":       "Microsoft.Authorization/policyAssignments",
							"apiVersion": "2019-06-01",
							"id":         "/providers/Microsoft.Management/managementGroups/myManagementGroup/providers/Microsoft.Authorization/policyAssignments/myPolicyAssignment",
							"location":   "westus2",
							"properties": map[string]interface{}{
								"enforcementMode":    "Default",
								"policyDefinitionId": "/providers/Microsoft.Management/managementGroups/myManagementGroup/providers/Microsoft.Authorization/policyAssignments/myPolicyDefinition",
								"scope":              "/subscriptions/00000000-0000-0000-0000-000000000001",
							},
						},
						ChangeType: to.Ptr(armresources.ChangeTypeModify),
						ResourceID: to.Ptr("/providers/Microsoft.Management/managementGroups/myManagementGroup/providers/Microsoft.Authorization/policyAssignments/myPolicyAssignment"),
					},
					{
						After: map[string]interface{}{
							"name":       "myPolicyAssignment2",
							"type":       "Microsoft.Authorization/policyAssignments",
							"apiVersion": "2019-06-01",
							"id":         "/providers/Microsoft.Management/managementGroups/myManagementGroup/providers/Microsoft.Authorization/policyAssignments/myPolicyAssignment2",
							"location":   "westus2",
							"properties": map[string]interface{}{
								"enforcementMode":    "Default",
								"policyDefinitionId": "/providers/Microsoft.Management/managementGroups/myManagementGroup/providers/Microsoft.Authorization/policyAssignments/myPolicyDefinition",
								"scope":              "/subscriptions/00000000-0000-0000-0000-000000000002",
							},
						},
						ChangeType: to.Ptr(armresources.ChangeTypeCreate),
						ResourceID: to.Ptr("/providers/Microsoft.Management/managementGroups/myManagementGroup/providers/Microsoft.Authorization/policyAssignments/myPolicyAssignment2"),
					}},
			},
			Status: to.Ptr("Succeeded"),
		}
		if !reflect.DeepEqual(exampleRes, res.WhatIfOperationResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.WhatIfOperationResult)
			t.Fatalf("Mock response is not equal to example response for example specification/resources/resource-manager/Microsoft.Resources/stable/2021-04-01/examples/PostDeploymentWhatIfOnManagementGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDeployments_ExportTemplateAtManagementGroupScope(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestDeployments_ListAtManagementGroupScope(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestDeployments_DeleteAtSubscriptionScope(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestDeployments_CheckExistenceAtSubscriptionScope(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestDeployments_CreateOrUpdateAtSubscriptionScope(t *testing.T) {
	// From example specification/resources/resource-manager/Microsoft.Resources/stable/2021-04-01/examples/PutDeploymentSubscriptionTemplateSpecsWithId.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a deployment that will deploy a templateSpec with the given resourceId"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armresources.NewDeploymentsClient("00000000-0000-0000-0000-000000000001", cred, &options)
	poller, err := client.BeginCreateOrUpdateAtSubscriptionScope(ctx,
		"my-deployment",
		armresources.Deployment{
			Location: to.Ptr("eastus"),
			Properties: &armresources.DeploymentProperties{
				Mode:       to.Ptr(armresources.DeploymentModeIncremental),
				Parameters: map[string]interface{}{},
				TemplateLink: &armresources.TemplateLink{
					ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000001/resourceGroups/my-resource-group/providers/Microsoft.Resources/TemplateSpecs/TemplateSpec-Name/versions/v1"),
				},
			},
		},
		&armresources.DeploymentsClientBeginCreateOrUpdateAtSubscriptionScopeOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/resources/resource-manager/Microsoft.Resources/stable/2021-04-01/examples/PutDeploymentSubscriptionTemplateSpecsWithId.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/resources/resource-manager/Microsoft.Resources/stable/2021-04-01/examples/PutDeploymentSubscriptionTemplateSpecsWithId.json: %v", err)
	}
	// Response check
	{
		exampleRes := armresources.DeploymentExtended{
			Name:     to.Ptr("my-deployment"),
			Type:     to.Ptr("Microsoft.Resources/deployments"),
			ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000001/providers/Microsoft.Resources/deployments/my-deployment"),
			Location: to.Ptr("eastus"),
			Properties: &armresources.DeploymentPropertiesExtended{
				CorrelationID:     to.Ptr("00000000-0000-0000-0000-000000000000"),
				Dependencies:      []*armresources.Dependency{},
				Duration:          to.Ptr("PT1.2637681S"),
				Mode:              to.Ptr(armresources.DeploymentModeIncremental),
				OutputResources:   []*armresources.ResourceReference{},
				Parameters:        map[string]interface{}{},
				Providers:         []*armresources.Provider{},
				ProvisioningState: to.Ptr(armresources.ProvisioningStateSucceeded),
				TemplateHash:      to.Ptr("0000000000000000000"),
				TemplateLink: &armresources.TemplateLink{
					ContentVersion: to.Ptr("1.0.0.0"),
					ID:             to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000001/resourceGroups/my-resource-group/providers/Microsoft.Resources/TemplateSpecs/TemplateSpec-Name/versions/v1"),
				},
				Timestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-06-05T01:51:58.6288067Z"); return t }()),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DeploymentExtended) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DeploymentExtended)
			t.Fatalf("Mock response is not equal to example response for example specification/resources/resource-manager/Microsoft.Resources/stable/2021-04-01/examples/PutDeploymentSubscriptionTemplateSpecsWithId.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDeployments_GetAtSubscriptionScope(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestDeployments_CancelAtSubscriptionScope(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestDeployments_ValidateAtSubscriptionScope(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestDeployments_WhatIfAtSubscriptionScope(t *testing.T) {
	// From example specification/resources/resource-manager/Microsoft.Resources/stable/2021-04-01/examples/PostDeploymentWhatIfOnSubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Predict template changes at subscription scope"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armresources.NewDeploymentsClient("00000000-0000-0000-0000-000000000001", cred, &options)
	poller, err := client.BeginWhatIfAtSubscriptionScope(ctx,
		"my-deployment",
		armresources.DeploymentWhatIf{
			Location: to.Ptr("westus"),
			Properties: &armresources.DeploymentWhatIfProperties{
				Mode:         to.Ptr(armresources.DeploymentModeIncremental),
				Parameters:   map[string]interface{}{},
				TemplateLink: &armresources.TemplateLink{},
			},
		},
		&armresources.DeploymentsClientBeginWhatIfAtSubscriptionScopeOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/resources/resource-manager/Microsoft.Resources/stable/2021-04-01/examples/PostDeploymentWhatIfOnSubscription.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/resources/resource-manager/Microsoft.Resources/stable/2021-04-01/examples/PostDeploymentWhatIfOnSubscription.json: %v", err)
	}
	// Response check
	{
		exampleRes := armresources.WhatIfOperationResult{
			Properties: &armresources.WhatIfOperationProperties{
				Changes: []*armresources.WhatIfChange{
					{
						After: map[string]interface{}{
							"name":       "myExistingIdentity",
							"type":       "Microsoft.ManagedIdentity/userAssignedIdentities",
							"apiVersion": "2018-11-30",
							"id":         "/subscriptions/00000000-0000-0000-0000-000000000001/resourceGroups/my-resource-group/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myExistingIdentity",
							"location":   "westus2",
							"tags": map[string]interface{}{
								"myNewTag": "my tag value",
							},
						},
						Before: map[string]interface{}{
							"name":       "myExistingIdentity",
							"type":       "Microsoft.ManagedIdentity/userAssignedIdentities",
							"apiVersion": "2018-11-30",
							"id":         "/subscriptions/00000000-0000-0000-0000-000000000001/resourceGroups/my-resource-group/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myExistingIdentity",
							"location":   "westus2",
						},
						ChangeType: to.Ptr(armresources.ChangeTypeModify),
						Delta: []*armresources.WhatIfPropertyChange{
							{
								Path:               to.Ptr("tags.myNewTag"),
								After:              "my tag value",
								PropertyChangeType: to.Ptr(armresources.PropertyChangeTypeCreate),
							}},
						ResourceID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000001/resourceGroups/my-resource-group/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myExistingIdentity"),
					},
					{
						After: map[string]interface{}{
							"name":       "myNewIdentity",
							"type":       "Microsoft.ManagedIdentity/userAssignedIdentities",
							"apiVersion": "2018-11-30",
							"id":         "/subscriptions/00000000-0000-0000-0000-000000000001/resourceGroups/my-resource-group/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myNewIdentity",
							"location":   "eastus",
							"tags": map[string]interface{}{
								"myOtherNewTag": "another new tag value",
							},
						},
						ChangeType: to.Ptr(armresources.ChangeTypeCreate),
						ResourceID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000001/resourceGroups/my-resource-group/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myNewIdentity"),
					},
					{
						After: map[string]interface{}{
							"name":       "my-resource-group2",
							"type":       "Microsoft.Resources/resourceGroups",
							"apiVersion": "2019-03-01",
							"id":         "/subscriptions/00000000-0000-0000-0000-000000000001/resourceGroups/my-resource-group2",
							"location":   "{location3}",
						},
						ChangeType: to.Ptr(armresources.ChangeTypeCreate),
						ResourceID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000001/resourceGroups/my-resource-group2"),
					}},
			},
			Status: to.Ptr("succeeded"),
		}
		if !reflect.DeepEqual(exampleRes, res.WhatIfOperationResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.WhatIfOperationResult)
			t.Fatalf("Mock response is not equal to example response for example specification/resources/resource-manager/Microsoft.Resources/stable/2021-04-01/examples/PostDeploymentWhatIfOnSubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDeployments_ExportTemplateAtSubscriptionScope(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestDeployments_ListAtSubscriptionScope(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestDeployments_Delete(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestDeployments_CheckExistence(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestDeployments_CreateOrUpdate(t *testing.T) {
	// From example specification/resources/resource-manager/Microsoft.Resources/stable/2021-04-01/examples/PutDeploymentResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a deployment that will deploy a template with a uri and queryString"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armresources.NewDeploymentsClient("00000000-0000-0000-0000-000000000001", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"my-resource-group",
		"my-deployment",
		armresources.Deployment{
			Properties: &armresources.DeploymentProperties{
				Mode:       to.Ptr(armresources.DeploymentModeIncremental),
				Parameters: map[string]interface{}{},
				TemplateLink: &armresources.TemplateLink{
					QueryString: to.Ptr("sv=2019-02-02&st=2019-04-29T22%3A18%3A26Z&se=2019-04-30T02%3A23%3A26Z&sr=b&sp=rw&sip=168.1.5.60-168.1.5.70&spr=https&sig=xxxxxxxx0xxxxxxxxxxxxx%2bxxxxxxxxxxxxxxxxxxxx%3d"),
					URI:         to.Ptr("https://example.com/exampleTemplate.json"),
				},
			},
		},
		&armresources.DeploymentsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/resources/resource-manager/Microsoft.Resources/stable/2021-04-01/examples/PutDeploymentResourceGroup.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/resources/resource-manager/Microsoft.Resources/stable/2021-04-01/examples/PutDeploymentResourceGroup.json: %v", err)
	}
	// Response check
	{
		exampleRes := armresources.DeploymentExtended{
			Name: to.Ptr("my-deployment"),
			Type: to.Ptr("Microsoft.Resources/deployments"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000001/resourceGroups/my-resource-group/providers/Microsoft.Resources/deployments/my-deployment"),
			Properties: &armresources.DeploymentPropertiesExtended{
				CorrelationID: to.Ptr("00000000-0000-0000-0000-000000000000"),
				Dependencies:  []*armresources.Dependency{},
				Duration:      to.Ptr("PT22.8356799S"),
				Mode:          to.Ptr(armresources.DeploymentModeIncremental),
				OutputResources: []*armresources.ResourceReference{
					{
						ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000001/resourceGroups/my-resource-group/providers/Microsoft.Storage/storageAccounts/my-storage-account"),
					}},
				Parameters: map[string]interface{}{},
				Providers: []*armresources.Provider{
					{
						Namespace: to.Ptr("Microsoft.Storage"),
						ResourceTypes: []*armresources.ProviderResourceType{
							{
								Locations: []*string{
									to.Ptr("eastus")},
								ResourceType: to.Ptr("storageAccounts"),
							}},
					}},
				ProvisioningState: to.Ptr(armresources.ProvisioningStateSucceeded),
				TemplateHash:      to.Ptr("0000000000000000000"),
				TemplateLink: &armresources.TemplateLink{
					ContentVersion: to.Ptr("1.0.0.0"),
					ID:             to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000001/resourceGroups/my-resource-group/providers/Microsoft.Resources/TemplateSpecs/TemplateSpec-Name/versions/v1"),
				},
				Timestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-06-05T01:20:01.723776Z"); return t }()),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DeploymentExtended) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DeploymentExtended)
			t.Fatalf("Mock response is not equal to example response for example specification/resources/resource-manager/Microsoft.Resources/stable/2021-04-01/examples/PutDeploymentResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/resources/resource-manager/Microsoft.Resources/stable/2021-04-01/examples/PutDeploymentResourceGroupTemplateSpecsWithId.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a deployment that will deploy a templateSpec with the given resourceId"},
	})
	client = armresources.NewDeploymentsClient("00000000-0000-0000-0000-000000000001", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"my-resource-group",
		"my-deployment",
		armresources.Deployment{
			Properties: &armresources.DeploymentProperties{
				Mode:       to.Ptr(armresources.DeploymentModeIncremental),
				Parameters: map[string]interface{}{},
				TemplateLink: &armresources.TemplateLink{
					ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000001/resourceGroups/my-resource-group/providers/Microsoft.Resources/TemplateSpecs/TemplateSpec-Name/versions/v1"),
				},
			},
		},
		&armresources.DeploymentsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/resources/resource-manager/Microsoft.Resources/stable/2021-04-01/examples/PutDeploymentResourceGroupTemplateSpecsWithId.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/resources/resource-manager/Microsoft.Resources/stable/2021-04-01/examples/PutDeploymentResourceGroupTemplateSpecsWithId.json: %v", err)
	}
	// Response check
	{
		exampleRes := armresources.DeploymentExtended{
			Name: to.Ptr("my-deployment"),
			Type: to.Ptr("Microsoft.Resources/deployments"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000001/resourceGroups/my-resource-group/providers/Microsoft.Resources/deployments/my-deployment"),
			Properties: &armresources.DeploymentPropertiesExtended{
				CorrelationID: to.Ptr("00000000-0000-0000-0000-000000000000"),
				Dependencies:  []*armresources.Dependency{},
				Duration:      to.Ptr("PT22.8356799S"),
				Mode:          to.Ptr(armresources.DeploymentModeIncremental),
				OutputResources: []*armresources.ResourceReference{
					{
						ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000001/resourceGroups/my-resource-group/providers/Microsoft.Storage/storageAccounts/my-storage-account"),
					}},
				Parameters: map[string]interface{}{},
				Providers: []*armresources.Provider{
					{
						Namespace: to.Ptr("Microsoft.Storage"),
						ResourceTypes: []*armresources.ProviderResourceType{
							{
								Locations: []*string{
									to.Ptr("eastus")},
								ResourceType: to.Ptr("storageAccounts"),
							}},
					}},
				ProvisioningState: to.Ptr(armresources.ProvisioningStateSucceeded),
				TemplateHash:      to.Ptr("0000000000000000000"),
				TemplateLink: &armresources.TemplateLink{
					ContentVersion: to.Ptr("1.0.0.0"),
					ID:             to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000001/resourceGroups/my-resource-group/providers/Microsoft.Resources/TemplateSpecs/TemplateSpec-Name/versions/v1"),
				},
				Timestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-06-05T01:20:01.723776Z"); return t }()),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DeploymentExtended) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DeploymentExtended)
			t.Fatalf("Mock response is not equal to example response for example specification/resources/resource-manager/Microsoft.Resources/stable/2021-04-01/examples/PutDeploymentResourceGroupTemplateSpecsWithId.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/resources/resource-manager/Microsoft.Resources/stable/2021-04-01/examples/PutDeploymentWithOnErrorDeploymentSpecificDeployment.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a deployment that will redeploy another deployment on failure"},
	})
	client = armresources.NewDeploymentsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"my-resource-group",
		"my-deployment",
		armresources.Deployment{
			Properties: &armresources.DeploymentProperties{
				Mode: to.Ptr(armresources.DeploymentModeComplete),
				OnErrorDeployment: &armresources.OnErrorDeployment{
					Type:           to.Ptr(armresources.OnErrorDeploymentTypeSpecificDeployment),
					DeploymentName: to.Ptr("name-of-deployment-to-use"),
				},
				Parameters: map[string]interface{}{},
				TemplateLink: &armresources.TemplateLink{
					URI: to.Ptr("https://example.com/exampleTemplate.json"),
				},
			},
		},
		&armresources.DeploymentsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/resources/resource-manager/Microsoft.Resources/stable/2021-04-01/examples/PutDeploymentWithOnErrorDeploymentSpecificDeployment.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/resources/resource-manager/Microsoft.Resources/stable/2021-04-01/examples/PutDeploymentWithOnErrorDeploymentSpecificDeployment.json: %v", err)
	}
	// Response check
	{
		exampleRes := armresources.DeploymentExtended{
			Name: to.Ptr("my-deployment"),
			Type: to.Ptr("Microsoft.Resources/deployments"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/my-resource-group/providers/Microsoft.Resources/deployments/my-deployment"),
			Properties: &armresources.DeploymentPropertiesExtended{
				CorrelationID: to.Ptr("00000000-0000-0000-0000-000000000000"),
				Dependencies: []*armresources.Dependency{
					{
						DependsOn: []*armresources.BasicDependency{
							{
								ID:           to.Ptr("{resourceid}"),
								ResourceName: to.Ptr("VNet1"),
								ResourceType: to.Ptr("Microsoft.Network/virtualNetworks"),
							}},
						ID:           to.Ptr("{resourceid}"),
						ResourceName: to.Ptr("VNet1/Subnet1"),
						ResourceType: to.Ptr("Microsoft.Network/virtualNetworks/subnets"),
					},
					{
						DependsOn: []*armresources.BasicDependency{
							{
								ID:           to.Ptr("{resourceid}"),
								ResourceName: to.Ptr("VNet1"),
								ResourceType: to.Ptr("Microsoft.Network/virtualNetworks"),
							},
							{
								ID:           to.Ptr("{resourceid}"),
								ResourceName: to.Ptr("VNet1/Subnet1"),
								ResourceType: to.Ptr("Microsoft.Network/virtualNetworks/subnets"),
							}},
						ID:           to.Ptr("{resourceid}"),
						ResourceName: to.Ptr("VNet1/Subnet2"),
						ResourceType: to.Ptr("Microsoft.Network/virtualNetworks/subnets"),
					}},
				Duration: to.Ptr("PT0.8204881S"),
				Mode:     to.Ptr(armresources.DeploymentModeComplete),
				OnErrorDeployment: &armresources.OnErrorDeploymentExtended{
					Type:           to.Ptr(armresources.OnErrorDeploymentTypeSpecificDeployment),
					DeploymentName: to.Ptr("name-of-deployment-to-use"),
				},
				Parameters: map[string]interface{}{},
				Providers: []*armresources.Provider{
					{
						Namespace: to.Ptr("Microsoft.Network"),
						ResourceTypes: []*armresources.ProviderResourceType{
							{
								Locations: []*string{
									to.Ptr("centralus")},
								ResourceType: to.Ptr("virtualNetworks"),
							},
							{
								Locations: []*string{
									to.Ptr("centralus")},
								ResourceType: to.Ptr("virtualNetworks/subnets"),
							}},
					}},
				ProvisioningState: to.Ptr(armresources.ProvisioningStateSucceeded),
				TemplateLink: &armresources.TemplateLink{
					ContentVersion: to.Ptr("1.0.0.0"),
					URI:            to.Ptr("https://example.com/exampleTemplate.json"),
				},
				Timestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-03-01T00:00:00.0000000Z"); return t }()),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DeploymentExtended) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DeploymentExtended)
			t.Fatalf("Mock response is not equal to example response for example specification/resources/resource-manager/Microsoft.Resources/stable/2021-04-01/examples/PutDeploymentWithOnErrorDeploymentSpecificDeployment.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/resources/resource-manager/Microsoft.Resources/stable/2021-04-01/examples/PutDeploymentWithOnErrorDeploymentLastSuccessful.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a deployment that will redeploy the last successful deployment on failure"},
	})
	client = armresources.NewDeploymentsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"my-resource-group",
		"my-deployment",
		armresources.Deployment{
			Properties: &armresources.DeploymentProperties{
				Mode: to.Ptr(armresources.DeploymentModeComplete),
				OnErrorDeployment: &armresources.OnErrorDeployment{
					Type: to.Ptr(armresources.OnErrorDeploymentTypeLastSuccessful),
				},
				Parameters: map[string]interface{}{},
				TemplateLink: &armresources.TemplateLink{
					URI: to.Ptr("https://example.com/exampleTemplate.json"),
				},
			},
		},
		&armresources.DeploymentsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/resources/resource-manager/Microsoft.Resources/stable/2021-04-01/examples/PutDeploymentWithOnErrorDeploymentLastSuccessful.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/resources/resource-manager/Microsoft.Resources/stable/2021-04-01/examples/PutDeploymentWithOnErrorDeploymentLastSuccessful.json: %v", err)
	}
	// Response check
	{
		exampleRes := armresources.DeploymentExtended{
			Name: to.Ptr("my-deployment"),
			Type: to.Ptr("Microsoft.Resources/deployments"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/my-resource-group/providers/Microsoft.Resources/deployments/my-deployment"),
			Properties: &armresources.DeploymentPropertiesExtended{
				CorrelationID: to.Ptr("00000000-0000-0000-0000-000000000000"),
				Dependencies: []*armresources.Dependency{
					{
						DependsOn: []*armresources.BasicDependency{
							{
								ID:           to.Ptr("{resourceid}"),
								ResourceName: to.Ptr("VNet1"),
								ResourceType: to.Ptr("Microsoft.Network/virtualNetworks"),
							}},
						ID:           to.Ptr("{resourceid}"),
						ResourceName: to.Ptr("VNet1/Subnet1"),
						ResourceType: to.Ptr("Microsoft.Network/virtualNetworks/subnets"),
					},
					{
						DependsOn: []*armresources.BasicDependency{
							{
								ID:           to.Ptr("{resourceid}"),
								ResourceName: to.Ptr("VNet1"),
								ResourceType: to.Ptr("Microsoft.Network/virtualNetworks"),
							},
							{
								ID:           to.Ptr("{resourceid}"),
								ResourceName: to.Ptr("VNet1/Subnet1"),
								ResourceType: to.Ptr("Microsoft.Network/virtualNetworks/subnets"),
							}},
						ID:           to.Ptr("{resourceid}"),
						ResourceName: to.Ptr("VNet1/Subnet2"),
						ResourceType: to.Ptr("Microsoft.Network/virtualNetworks/subnets"),
					}},
				Duration: to.Ptr("PT0.8204881S"),
				Mode:     to.Ptr(armresources.DeploymentModeComplete),
				OnErrorDeployment: &armresources.OnErrorDeploymentExtended{
					Type:           to.Ptr(armresources.OnErrorDeploymentTypeLastSuccessful),
					DeploymentName: to.Ptr("{nameOfLastSuccesfulDeployment}"),
				},
				Parameters: map[string]interface{}{},
				Providers: []*armresources.Provider{
					{
						Namespace: to.Ptr("Microsoft.Network"),
						ResourceTypes: []*armresources.ProviderResourceType{
							{
								Locations: []*string{
									to.Ptr("centralus")},
								ResourceType: to.Ptr("virtualNetworks"),
							},
							{
								Locations: []*string{
									to.Ptr("centralus")},
								ResourceType: to.Ptr("virtualNetworks/subnets"),
							}},
					}},
				ProvisioningState: to.Ptr(armresources.ProvisioningStateSucceeded),
				TemplateLink: &armresources.TemplateLink{
					ContentVersion: to.Ptr("1.0.0.0"),
					URI:            to.Ptr("https://example.com/exampleTemplate.json"),
				},
				Timestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-03-01T00:00:00.0000000Z"); return t }()),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DeploymentExtended) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DeploymentExtended)
			t.Fatalf("Mock response is not equal to example response for example specification/resources/resource-manager/Microsoft.Resources/stable/2021-04-01/examples/PutDeploymentWithOnErrorDeploymentLastSuccessful.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDeployments_Get(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestDeployments_Cancel(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestDeployments_Validate(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestDeployments_WhatIf(t *testing.T) {
	// From example specification/resources/resource-manager/Microsoft.Resources/stable/2021-04-01/examples/PostDeploymentWhatIfOnResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Predict template changes at resource group scope"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armresources.NewDeploymentsClient("00000000-0000-0000-0000-000000000001", cred, &options)
	poller, err := client.BeginWhatIf(ctx,
		"my-resource-group",
		"my-deployment",
		armresources.DeploymentWhatIf{
			Properties: &armresources.DeploymentWhatIfProperties{
				Mode:         to.Ptr(armresources.DeploymentModeIncremental),
				Parameters:   map[string]interface{}{},
				TemplateLink: &armresources.TemplateLink{},
			},
		},
		&armresources.DeploymentsClientBeginWhatIfOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/resources/resource-manager/Microsoft.Resources/stable/2021-04-01/examples/PostDeploymentWhatIfOnResourceGroup.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/resources/resource-manager/Microsoft.Resources/stable/2021-04-01/examples/PostDeploymentWhatIfOnResourceGroup.json: %v", err)
	}
	// Response check
	{
		exampleRes := armresources.WhatIfOperationResult{
			Properties: &armresources.WhatIfOperationProperties{
				Changes: []*armresources.WhatIfChange{
					{
						After: map[string]interface{}{
							"name":       "myExistingIdentity",
							"type":       "Microsoft.ManagedIdentity/userAssignedIdentities",
							"apiVersion": "2018-11-30",
							"id":         "/subscriptions/00000000-0000-0000-0000-000000000001/resourceGroups/my-resource-group/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myExistingIdentity",
							"location":   "westus2",
							"tags": map[string]interface{}{
								"myNewTag": "my tag value",
							},
						},
						Before: map[string]interface{}{
							"name":       "myExistingIdentity",
							"type":       "Microsoft.ManagedIdentity/userAssignedIdentities",
							"apiVersion": "2018-11-30",
							"id":         "/subscriptions/00000000-0000-0000-0000-000000000001/resourceGroups/my-resource-group/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myExistingIdentity",
							"location":   "westus2",
						},
						ChangeType: to.Ptr(armresources.ChangeTypeModify),
						Delta: []*armresources.WhatIfPropertyChange{
							{
								Path:               to.Ptr("tags.myNewTag"),
								After:              "my tag value",
								PropertyChangeType: to.Ptr(armresources.PropertyChangeTypeCreate),
							}},
						ResourceID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000001/resourceGroups/my-resource-group/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myExistingIdentity"),
					},
					{
						After: map[string]interface{}{
							"name":       "myNewIdentity",
							"type":       "Microsoft.ManagedIdentity/userAssignedIdentities",
							"apiVersion": "2018-11-30",
							"id":         "/subscriptions/00000000-0000-0000-0000-000000000001/resourceGroups/my-resource-group/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myNewIdentity",
							"location":   "eastus",
							"tags": map[string]interface{}{
								"myOtherNewTag": "another new tag value",
							},
						},
						ChangeType: to.Ptr(armresources.ChangeTypeCreate),
						ResourceID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000001/resourceGroups/my-resource-group/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myNewIdentity"),
					}},
			},
			Status: to.Ptr("succeeded"),
		}
		if !reflect.DeepEqual(exampleRes, res.WhatIfOperationResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.WhatIfOperationResult)
			t.Fatalf("Mock response is not equal to example response for example specification/resources/resource-manager/Microsoft.Resources/stable/2021-04-01/examples/PostDeploymentWhatIfOnResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDeployments_ExportTemplate(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestDeployments_ListByResourceGroup(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestDeployments_CalculateTemplateHash(t *testing.T) {
	// From example specification/resources/resource-manager/Microsoft.Resources/stable/2021-04-01/examples/CalculateTemplateHash.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Calculate template hash"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armresources.NewDeploymentsClient("<subscription-id>", cred, &options)
	res, err := client.CalculateTemplateHash(ctx,
		map[string]interface{}{
			"$schema":        "http://schemas.management.azure.com/deploymentTemplate?api-version=2014-04-01-preview",
			"contentVersion": "1.0.0.0",
			"outputs": map[string]interface{}{
				"string": map[string]interface{}{
					"type":  "string",
					"value": "myvalue",
				},
			},
			"parameters": map[string]interface{}{
				"string": map[string]interface{}{
					"type": "string",
				},
			},
			"resources": []interface{}{},
			"variables": map[string]interface{}{
				"array": []interface{}{
					float64(1),
					float64(2),
					float64(3),
					float64(4),
				},
				"bool": true,
				"int":  float64(42),
				"object": map[string]interface{}{
					"object": map[string]interface{}{
						"location": "West US",
						"vmSize":   "Large",
					},
				},
				"string": "string",
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/resources/resource-manager/Microsoft.Resources/stable/2021-04-01/examples/CalculateTemplateHash.json: %v", err)
	}
	// Response check
	{
		exampleRes := armresources.TemplateHashResult{
			MinifiedTemplate: to.Ptr("{\"$SCHEMA\":\"HTTP://SCHEMAS.MANAGEMENT.AZURE.COM/DEPLOYMENTTEMPLATE?API-VERSION=2014-04-01-PREVIEW\",\"CONTENTVERSION\":\"1.0.0.0\",\"PARAMETERS\":{\"STRING\":{\"TYPE\":\"STRING\"}},\"VARIABLES\":{\"STRING\":\"STRING\",\"INT\":42,\"BOOL\":TRUE,\"ARRAY\":[1,2,3,4],\"OBJECT\":{\"OBJECT\":{\"VMSIZE\":\"LARGE\",\"LOCATION\":\"WEST US\"}}},\"RESOURCES\":[],\"OUTPUTS\":{\"STRING\":{\"TYPE\":\"STRING\",\"VALUE\":\"MYVALUE\"}}}"),
			TemplateHash:     to.Ptr("695440707931307747"),
		}
		if !reflect.DeepEqual(exampleRes, res.TemplateHashResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.TemplateHashResult)
			t.Fatalf("Mock response is not equal to example response for example specification/resources/resource-manager/Microsoft.Resources/stable/2021-04-01/examples/CalculateTemplateHash.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestProviders_Unregister(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestProviders_RegisterAtManagementGroupScope(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestProviders_ProviderPermissions(t *testing.T) {
	// From example specification/resources/resource-manager/Microsoft.Resources/stable/2021-04-01/examples/GetProviderPermissions.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get provider resource types."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armresources.NewProvidersClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.ProviderPermissions(ctx,
		"Microsoft.TestRP",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/resources/resource-manager/Microsoft.Resources/stable/2021-04-01/examples/GetProviderPermissions.json: %v", err)
	}
	// Response check
	{
		exampleRes := armresources.ProviderPermissionListResult{
			Value: []*armresources.ProviderPermission{
				{
					ApplicationID:                     to.Ptr("00000000-0000-0000-0000-000000000000"),
					ProviderAuthorizationConsentState: to.Ptr(armresources.ProviderAuthorizationConsentStateConsented),
					RoleDefinition: &armresources.RoleDefinition{
						Name:          to.Ptr("Contoso service role"),
						ID:            to.Ptr("00000000000000000000000000000000"),
						IsServiceRole: to.Ptr(true),
						Permissions: []*armresources.Permission{
							{
								Actions: []*string{
									to.Ptr("Microsoft.Contoso/*")},
								DataActions:    []*string{},
								NotActions:     []*string{},
								NotDataActions: []*string{},
							}},
						Scopes: []*string{
							to.Ptr("/")},
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.ProviderPermissionListResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ProviderPermissionListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/resources/resource-manager/Microsoft.Resources/stable/2021-04-01/examples/GetProviderPermissions.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestProviders_Register(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestProviders_List(t *testing.T) {
	// From example specification/resources/resource-manager/Microsoft.Resources/stable/2021-04-01/examples/GetProviders.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get providers."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armresources.NewProvidersClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.List(&armresources.ProvidersClientListOptions{Expand: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/resources/resource-manager/Microsoft.Resources/stable/2021-04-01/examples/GetProviders.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armresources.ProviderListResult{
			Value: []*armresources.Provider{
				{
					ID:                 to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.TestRP1"),
					Namespace:          to.Ptr("Microsoft.TestRP1"),
					RegistrationPolicy: to.Ptr("RegistrationRequired"),
					RegistrationState:  to.Ptr("Registering"),
					ResourceTypes: []*armresources.ProviderResourceType{
						{
							APIVersions: []*string{
								to.Ptr("2018-01-01"),
								to.Ptr("2015-05-01")},
							Capabilities: to.Ptr("CrossResourceGroupResourceMove, CrossSubscriptionResourceMove, SupportsTags, SupportsLocation"),
							LocationMappings: []*armresources.ProviderExtendedLocation{
								{
									Type: to.Ptr("EdgeZone"),
									ExtendedLocations: []*string{
										to.Ptr("LosAngeles"),
										to.Ptr("LosAngeles2")},
									Location: to.Ptr("West US"),
								}},
							Locations: []*string{
								to.Ptr("West US")},
							ResourceType: to.Ptr("TestResourceType"),
						},
						{
							APIVersions: []*string{
								to.Ptr("2018-01-01"),
								to.Ptr("2015-05-01")},
							Capabilities: to.Ptr("CrossResourceGroupResourceMove, CrossSubscriptionResourceMove, SupportsTags, SupportsLocation"),
							Locations: []*string{
								to.Ptr("West US")},
							ResourceType: to.Ptr("TestResourceTypeSibling"),
						}},
				},
				{
					ID:                 to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Resources"),
					Namespace:          to.Ptr("Microsoft.Resources"),
					RegistrationPolicy: to.Ptr("RegistrationFree"),
					RegistrationState:  to.Ptr("Registered"),
					ResourceTypes: []*armresources.ProviderResourceType{
						{
							Aliases: []*armresources.Alias{},
							APIVersions: []*string{
								to.Ptr("2016-09-01"),
								to.Ptr("2014-04-01-preview")},
							Capabilities: to.Ptr("CrossResourceGroupResourceMove, CrossSubscriptionResourceMove, SupportsTags, SupportsLocation"),
							Locations: []*string{
								to.Ptr("eastus"),
								to.Ptr("eastus2"),
								to.Ptr("westus")},
							ResourceType: to.Ptr("subscriptions"),
						},
						{
							Aliases: []*armresources.Alias{},
							APIVersions: []*string{
								to.Ptr("2016-09-01"),
								to.Ptr("2014-04-01-preview")},
							Capabilities: to.Ptr("CrossResourceGroupResourceMove, CrossSubscriptionResourceMove, SupportsTags, SupportsLocation"),
							Locations: []*string{
								to.Ptr("centralus"),
								to.Ptr("eastasia"),
								to.Ptr("southeastasia")},
							ResourceType: to.Ptr("resourceGroups"),
						},
						{
							Aliases: []*armresources.Alias{},
							APIVersions: []*string{
								to.Ptr("2016-09-01"),
								to.Ptr("2014-04-01-preview")},
							Capabilities: to.Ptr("CrossResourceGroupResourceMove, CrossSubscriptionResourceMove, SupportsTags, SupportsLocation"),
							Locations: []*string{
								to.Ptr("eastus"),
								to.Ptr("eastus2"),
								to.Ptr("westus")},
							ResourceType: to.Ptr("subscriptions/resourceGroups"),
						},
						{
							Aliases: []*armresources.Alias{},
							APIVersions: []*string{
								to.Ptr("2014-04-01-preview")},
							Capabilities: to.Ptr("CrossResourceGroupResourceMove, CrossSubscriptionResourceMove, SupportsTags, SupportsLocation"),
							Locations: []*string{
								to.Ptr("centralus"),
								to.Ptr("eastasia")},
							ResourceType: to.Ptr("bulkDelete"),
						},
						{
							Aliases: []*armresources.Alias{},
							APIVersions: []*string{
								to.Ptr("2017-08-01"),
								to.Ptr("2017-06-01")},
							Capabilities: to.Ptr("SupportsTags"),
							Locations:    []*string{},
							ResourceType: to.Ptr("deployments"),
						},
						{
							Aliases:      []*armresources.Alias{},
							APIVersions:  []*string{},
							Capabilities: to.Ptr("SupportsExtension"),
							Locations: []*string{
								to.Ptr("DevFabric")},
							ResourceType: to.Ptr("tags"),
						}},
				},
				{
					ID:                 to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.TestRP2"),
					Namespace:          to.Ptr("Microsoft.TestRP2"),
					RegistrationPolicy: to.Ptr("RegistrationRequired"),
					RegistrationState:  to.Ptr("NotRegistered"),
					ResourceTypes: []*armresources.ProviderResourceType{
						{
							APIVersions: []*string{
								to.Ptr("2018-01-01"),
								to.Ptr("2015-05-01")},
							Capabilities: to.Ptr("CrossResourceGroupResourceMove, CrossSubscriptionResourceMove, SupportsTags, SupportsLocation"),
							LocationMappings: []*armresources.ProviderExtendedLocation{
								{
									Type: to.Ptr("EdgeZone"),
									ExtendedLocations: []*string{
										to.Ptr("LosAngeles"),
										to.Ptr("LosAngeles2")},
									Location: to.Ptr("West US"),
								}},
							Locations: []*string{
								to.Ptr("West US")},
							ResourceType: to.Ptr("TestResourceType"),
						},
						{
							APIVersions: []*string{
								to.Ptr("2018-01-01"),
								to.Ptr("2015-05-01")},
							Capabilities: to.Ptr("CrossResourceGroupResourceMove, CrossSubscriptionResourceMove, SupportsTags, SupportsLocation"),
							Locations: []*string{
								to.Ptr("West US")},
							ResourceType: to.Ptr("TestResourceTypeSibling"),
						}},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ProviderListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ProviderListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/resources/resource-manager/Microsoft.Resources/stable/2021-04-01/examples/GetProviders.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestProviders_ListAtTenantScope(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestProviders_Get(t *testing.T) {
	// From example specification/resources/resource-manager/Microsoft.Resources/stable/2021-04-01/examples/GetProvider.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get provider."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armresources.NewProvidersClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		"Microsoft.TestRP1",
		&armresources.ProvidersClientGetOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/resources/resource-manager/Microsoft.Resources/stable/2021-04-01/examples/GetProvider.json: %v", err)
	}
	// Response check
	{
		exampleRes := armresources.Provider{
			ID:                 to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.TestRP1"),
			Namespace:          to.Ptr("Microsoft.TestRP1"),
			RegistrationPolicy: to.Ptr("RegistrationRequired"),
			RegistrationState:  to.Ptr("Registering"),
			ResourceTypes: []*armresources.ProviderResourceType{
				{
					APIVersions: []*string{
						to.Ptr("2018-01-01"),
						to.Ptr("2015-05-01")},
					Capabilities: to.Ptr("CrossResourceGroupResourceMove, CrossSubscriptionResourceMove, SupportsTags, SupportsLocation"),
					LocationMappings: []*armresources.ProviderExtendedLocation{
						{
							Type: to.Ptr("EdgeZone"),
							ExtendedLocations: []*string{
								to.Ptr("LosAngeles"),
								to.Ptr("LosAngeles2")},
							Location: to.Ptr("West US"),
						}},
					Locations: []*string{
						to.Ptr("West US")},
					ResourceType: to.Ptr("TestResourceType"),
				},
				{
					APIVersions: []*string{
						to.Ptr("2018-01-01"),
						to.Ptr("2015-05-01")},
					Capabilities: to.Ptr("CrossResourceGroupResourceMove, CrossSubscriptionResourceMove, SupportsTags, SupportsLocation"),
					Locations: []*string{
						to.Ptr("West US")},
					ResourceType: to.Ptr("TestResourceTypeSibling"),
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.Provider) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Provider)
			t.Fatalf("Mock response is not equal to example response for example specification/resources/resource-manager/Microsoft.Resources/stable/2021-04-01/examples/GetProvider.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestProviders_GetAtTenantScope(t *testing.T) {
	// From example specification/resources/resource-manager/Microsoft.Resources/stable/2021-04-01/examples/GetNamedProviderAtTenant.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a resource provider at tenant scope"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armresources.NewProvidersClient("<subscription-id>", cred, &options)
	res, err := client.GetAtTenantScope(ctx,
		"Microsoft.Storage",
		&armresources.ProvidersClientGetAtTenantScopeOptions{Expand: to.Ptr("resourceTypes/aliases")})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/resources/resource-manager/Microsoft.Resources/stable/2021-04-01/examples/GetNamedProviderAtTenant.json: %v", err)
	}
	// Response check
	{
		exampleRes := armresources.Provider{
			Namespace: to.Ptr("Microsoft.Storage"),
			ResourceTypes: []*armresources.ProviderResourceType{
				{
					Aliases: []*armresources.Alias{
						{
							Name:        to.Ptr("Microsoft.Storage/storageAccounts/accountType"),
							DefaultPath: to.Ptr("sku.name"),
							Paths: []*armresources.AliasPath{
								{
									Path: to.Ptr("properties.accountType"),
									APIVersions: []*string{
										to.Ptr("2015-06-15"),
										to.Ptr("2015-05-01-preview")},
								},
								{
									Path: to.Ptr("sku.name"),
									APIVersions: []*string{
										to.Ptr("2018-11-01"),
										to.Ptr("2018-11-09"),
										to.Ptr("2018-07-01"),
										to.Ptr("2018-03-01-Preview"),
										to.Ptr("2018-02-01"),
										to.Ptr("2017-10-01"),
										to.Ptr("2017-06-01"),
										to.Ptr("2016-12-01"),
										to.Ptr("2016-05-01"),
										to.Ptr("2016-01-01")},
								}},
						},
						{
							Name:        to.Ptr("Microsoft.Storage/storageAccounts/sku.name"),
							DefaultPath: to.Ptr("sku.name"),
							Paths: []*armresources.AliasPath{
								{
									Path: to.Ptr("properties.accountType"),
									APIVersions: []*string{
										to.Ptr("2015-06-15"),
										to.Ptr("2015-05-01-preview")},
								},
								{
									Path: to.Ptr("sku.name"),
									APIVersions: []*string{
										to.Ptr("2018-11-01"),
										to.Ptr("2018-11-09"),
										to.Ptr("2018-07-01"),
										to.Ptr("2018-03-01-Preview"),
										to.Ptr("2018-02-01"),
										to.Ptr("2017-10-01"),
										to.Ptr("2017-06-01"),
										to.Ptr("2016-12-01"),
										to.Ptr("2016-05-01"),
										to.Ptr("2016-01-01")},
								}},
						},
						{
							Name:        to.Ptr("Microsoft.Storage/storageAccounts/accessTier"),
							DefaultPath: to.Ptr("properties.accessTier"),
							Paths: []*armresources.AliasPath{
								{
									Path: to.Ptr("properties.accessTier"),
									APIVersions: []*string{
										to.Ptr("2018-11-01"),
										to.Ptr("2018-11-09"),
										to.Ptr("2018-07-01"),
										to.Ptr("2018-03-01-Preview"),
										to.Ptr("2018-02-01"),
										to.Ptr("2017-10-01"),
										to.Ptr("2017-06-01"),
										to.Ptr("2016-12-01"),
										to.Ptr("2016-05-01"),
										to.Ptr("2016-01-01"),
										to.Ptr("2015-06-15"),
										to.Ptr("2015-05-01-preview")},
								}},
						},
						{
							Name:        to.Ptr("Microsoft.Storage/storageAccounts/enableBlobEncryption"),
							DefaultPath: to.Ptr("properties.encryption.services.blob.enabled"),
							Paths: []*armresources.AliasPath{
								{
									Path: to.Ptr("properties.encryption.services.blob.enabled"),
									APIVersions: []*string{
										to.Ptr("2018-11-01"),
										to.Ptr("2018-11-09"),
										to.Ptr("2018-07-01"),
										to.Ptr("2018-03-01-Preview"),
										to.Ptr("2018-02-01"),
										to.Ptr("2017-10-01"),
										to.Ptr("2017-06-01"),
										to.Ptr("2016-12-01"),
										to.Ptr("2016-05-01"),
										to.Ptr("2016-01-01"),
										to.Ptr("2015-06-15"),
										to.Ptr("2015-05-01-preview")},
								}},
						},
						{
							Name:        to.Ptr("Microsoft.Storage/storageAccounts/enableFileEncryption"),
							DefaultPath: to.Ptr("properties.encryption.services.file.enabled"),
							Paths: []*armresources.AliasPath{
								{
									Path: to.Ptr("properties.encryption.services.file.enabled"),
									APIVersions: []*string{
										to.Ptr("2018-11-01"),
										to.Ptr("2018-11-09"),
										to.Ptr("2018-07-01"),
										to.Ptr("2018-03-01-Preview"),
										to.Ptr("2018-02-01"),
										to.Ptr("2017-10-01"),
										to.Ptr("2017-06-01"),
										to.Ptr("2016-12-01"),
										to.Ptr("2016-05-01"),
										to.Ptr("2016-01-01"),
										to.Ptr("2015-06-15"),
										to.Ptr("2015-05-01-preview")},
								}},
						},
						{
							Name: to.Ptr("Microsoft.Storage/storageAccounts/supportsHttpsTrafficOnly"),
							DefaultMetadata: &armresources.AliasPathMetadata{
								Type:       to.Ptr(armresources.AliasPathTokenTypeBoolean),
								Attributes: to.Ptr(armresources.AliasPathAttributesModifiable),
							},
							DefaultPath: to.Ptr("properties.supportsHttpsTrafficOnly"),
							Paths: []*armresources.AliasPath{
								{
									Path: to.Ptr("properties.supportsHttpsTrafficOnly"),
									APIVersions: []*string{
										to.Ptr("2018-11-09"),
										to.Ptr("2018-03-01-Preview"),
										to.Ptr("2016-05-01"),
										to.Ptr("2016-01-01"),
										to.Ptr("2015-06-15"),
										to.Ptr("2015-05-01-preview")},
									Metadata: &armresources.AliasPathMetadata{
										Type:       to.Ptr(armresources.AliasPathTokenTypeNotSpecified),
										Attributes: to.Ptr(armresources.AliasPathAttributesNone),
									},
								}},
						}},
					APIProfiles: []*armresources.APIProfile{
						{
							APIVersion:     to.Ptr("2017-10-01"),
							ProfileVersion: to.Ptr("2019-03-01-hybrid"),
						},
						{
							APIVersion:     to.Ptr("2016-01-01"),
							ProfileVersion: to.Ptr("2017-03-09-profile"),
						},
						{
							APIVersion:     to.Ptr("2016-01-01"),
							ProfileVersion: to.Ptr("2018-03-01-hybrid"),
						},
						{
							APIVersion:     to.Ptr("2017-10-01"),
							ProfileVersion: to.Ptr("2018-06-01-profile"),
						}},
					APIVersions: []*string{
						to.Ptr("2019-06-01"),
						to.Ptr("2019-04-01"),
						to.Ptr("2018-11-01"),
						to.Ptr("2018-07-01"),
						to.Ptr("2018-03-01-preview"),
						to.Ptr("2018-02-01"),
						to.Ptr("2017-10-01"),
						to.Ptr("2017-06-01"),
						to.Ptr("2016-12-01"),
						to.Ptr("2016-05-01"),
						to.Ptr("2016-01-01"),
						to.Ptr("2015-06-15"),
						to.Ptr("2015-05-01-preview")},
					Capabilities:      to.Ptr("SupportsTags, SupportsLocation"),
					DefaultAPIVersion: to.Ptr("2019-06-01"),
					Locations: []*string{
						to.Ptr("East US"),
						to.Ptr("East US 2"),
						to.Ptr("East US 2 (Stage)"),
						to.Ptr("West US"),
						to.Ptr("West Europe"),
						to.Ptr("East Asia"),
						to.Ptr("Southeast Asia"),
						to.Ptr("Japan East"),
						to.Ptr("Japan West"),
						to.Ptr("North Central US"),
						to.Ptr("South Central US"),
						to.Ptr("Central US"),
						to.Ptr("North Europe"),
						to.Ptr("Brazil South"),
						to.Ptr("Australia East"),
						to.Ptr("Australia Southeast"),
						to.Ptr("South India"),
						to.Ptr("Central India"),
						to.Ptr("West India"),
						to.Ptr("Canada East"),
						to.Ptr("Canada Central"),
						to.Ptr("West US 2"),
						to.Ptr("West Central US"),
						to.Ptr("UK South"),
						to.Ptr("UK West"),
						to.Ptr("Korea Central"),
						to.Ptr("Korea South"),
						to.Ptr("East US 2 EUAP"),
						to.Ptr("Central US EUAP"),
						to.Ptr("France Central"),
						to.Ptr("France South"),
						to.Ptr("Australia Central"),
						to.Ptr("Australia Central 2"),
						to.Ptr("South Africa West"),
						to.Ptr("South Africa North"),
						to.Ptr("UAE Central"),
						to.Ptr("UAE North"),
						to.Ptr("Switzerland North"),
						to.Ptr("Switzerland West"),
						to.Ptr("Germany West Central"),
						to.Ptr("Germany North"),
						to.Ptr("Norway East"),
						to.Ptr("Norway West"),
						to.Ptr("South Central US STG"),
						to.Ptr("Brazil Southeast")},
					ResourceType: to.Ptr("storageAccounts"),
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.Provider) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Provider)
			t.Fatalf("Mock response is not equal to example response for example specification/resources/resource-manager/Microsoft.Resources/stable/2021-04-01/examples/GetNamedProviderAtTenant.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestProviderResourceTypes_List(t *testing.T) {
	// From example specification/resources/resource-manager/Microsoft.Resources/stable/2021-04-01/examples/GetProviderResourceTypes.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get provider resource types."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armresources.NewProviderResourceTypesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.List(ctx,
		"Microsoft.TestRP",
		&armresources.ProviderResourceTypesClientListOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/resources/resource-manager/Microsoft.Resources/stable/2021-04-01/examples/GetProviderResourceTypes.json: %v", err)
	}
	// Response check
	{
		exampleRes := armresources.ProviderResourceTypeListResult{
			Value: []*armresources.ProviderResourceType{
				{
					APIVersions: []*string{
						to.Ptr("2018-01-01"),
						to.Ptr("2015-05-01")},
					Capabilities: to.Ptr("CrossResourceGroupResourceMove, CrossSubscriptionResourceMove, SupportsTags, SupportsLocation"),
					LocationMappings: []*armresources.ProviderExtendedLocation{
						{
							Type: to.Ptr("EdgeZone"),
							ExtendedLocations: []*string{
								to.Ptr("LosAngeles"),
								to.Ptr("LosAngeles2")},
							Location: to.Ptr("West US"),
						}},
					Locations: []*string{
						to.Ptr("West US")},
					ResourceType: to.Ptr("TestResourceType"),
				},
				{
					APIVersions: []*string{
						to.Ptr("2018-01-01"),
						to.Ptr("2015-05-01")},
					Capabilities: to.Ptr("CrossResourceGroupResourceMove, CrossSubscriptionResourceMove, SupportsTags, SupportsLocation"),
					Locations: []*string{
						to.Ptr("West US")},
					ResourceType: to.Ptr("TestResourceTypeSibling"),
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.ProviderResourceTypeListResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ProviderResourceTypeListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/resources/resource-manager/Microsoft.Resources/stable/2021-04-01/examples/GetProviderResourceTypes.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestResources_ListByResourceGroup(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestResources_MoveResources(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestResources_ValidateMoveResources(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestResources_List(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestResources_CheckExistence(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestResources_Delete(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestResources_CreateOrUpdate(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestResources_Update(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestResources_Get(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestResourceGroups_CheckExistence(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestResourceGroups_CreateOrUpdate(t *testing.T) {
	// From example specification/resources/resource-manager/Microsoft.Resources/stable/2021-04-01/examples/CreateResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a resource group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armresources.NewResourceGroupsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"my-resource-group",
		armresources.ResourceGroup{
			Location: to.Ptr("eastus"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/resources/resource-manager/Microsoft.Resources/stable/2021-04-01/examples/CreateResourceGroup.json: %v", err)
	}
	// Response check
	{
		exampleRes := armresources.ResourceGroup{
			Name:     to.Ptr("my-resource-group"),
			ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/my-resource-group"),
			Location: to.Ptr("eastus"),
			Properties: &armresources.ResourceGroupProperties{
				ProvisioningState: to.Ptr("Succeeded"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ResourceGroup) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ResourceGroup)
			t.Fatalf("Mock response is not equal to example response for example specification/resources/resource-manager/Microsoft.Resources/stable/2021-04-01/examples/CreateResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestResourceGroups_Delete(t *testing.T) {
	// From example specification/resources/resource-manager/Microsoft.Resources/stable/2021-04-01/examples/ForceDeleteVMsAndVMSSInResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Force delete all the Virtual Machines and Virtual Machine Scale Sets in a resource group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armresources.NewResourceGroupsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"my-resource-group",
		&armresources.ResourceGroupsClientBeginDeleteOptions{ForceDeletionTypes: to.Ptr("Microsoft.Compute/virtualMachines,Microsoft.Compute/virtualMachineScaleSets"),
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/resources/resource-manager/Microsoft.Resources/stable/2021-04-01/examples/ForceDeleteVMsAndVMSSInResourceGroup.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/resources/resource-manager/Microsoft.Resources/stable/2021-04-01/examples/ForceDeleteVMsAndVMSSInResourceGroup.json: %v", err)
	}

	// From example specification/resources/resource-manager/Microsoft.Resources/stable/2021-04-01/examples/ForceDeleteVMsInResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Force delete all the Virtual Machines in a resource group"},
	})
	client = armresources.NewResourceGroupsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err = client.BeginDelete(ctx,
		"my-resource-group",
		&armresources.ResourceGroupsClientBeginDeleteOptions{ForceDeletionTypes: to.Ptr("Microsoft.Compute/virtualMachines"),
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/resources/resource-manager/Microsoft.Resources/stable/2021-04-01/examples/ForceDeleteVMsInResourceGroup.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/resources/resource-manager/Microsoft.Resources/stable/2021-04-01/examples/ForceDeleteVMsInResourceGroup.json: %v", err)
	}
}

func TestResourceGroups_Get(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestResourceGroups_Update(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestResourceGroups_ExportTemplate(t *testing.T) {
	// From example specification/resources/resource-manager/Microsoft.Resources/stable/2021-04-01/examples/ExportResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Export a resource group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armresources.NewResourceGroupsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginExportTemplate(ctx,
		"my-resource-group",
		armresources.ExportTemplateRequest{
			Options: to.Ptr("IncludeParameterDefaultValue,IncludeComments"),
			Resources: []*string{
				to.Ptr("*")},
		},
		&armresources.ResourceGroupsClientBeginExportTemplateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/resources/resource-manager/Microsoft.Resources/stable/2021-04-01/examples/ExportResourceGroup.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/resources/resource-manager/Microsoft.Resources/stable/2021-04-01/examples/ExportResourceGroup.json: %v", err)
	}
	// Response check
	{
		exampleRes := armresources.ResourceGroupExportResult{
			Error: &armresources.ErrorResponse{
				Code:    to.Ptr("ExportTemplateCompletedWithErrors"),
				Message: to.Ptr("Export template operation completed with errors. Some resources were not exported. Please see details for more information."),
				Details: []*armresources.ErrorResponse{},
			},
			Template: map[string]interface{}{
				"$schema":        "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
				"contentVersion": "1.0.0.0",
				"parameters": map[string]interface{}{
					"myResourceType_myFirstResource_name": map[string]interface{}{
						"type":         "String",
						"defaultValue": "myFirstResource",
					},
					"myResourceType_myFirstResource_secret": map[string]interface{}{
						"type":         "SecureString",
						"defaultValue": nil,
					},
					"myResourceType_mySecondResource_name": map[string]interface{}{
						"type":         "String",
						"defaultValue": "mySecondResource",
					},
				},
				"resources": []interface{}{
					map[string]interface{}{
						"name":       "[parameters('myResourceType_myFirstResource_name')]",
						"type":       "My.RP/myResourceType",
						"apiVersion": "2019-01-01",
						"location":   "West US",
						"properties": map[string]interface{}{
							"secret": "[parameters('myResourceType_myFirstResource_secret')]",
						},
					},
					map[string]interface{}{
						"name":       "[parameters('myResourceType_mySecondResource_name')]",
						"type":       "My.RP/myResourceType",
						"apiVersion": "2019-01-01",
						"location":   "West US",
						"properties": map[string]interface{}{
							"customProperty": "hello!",
						},
					},
				},
				"variables": map[string]interface{}{},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ResourceGroupExportResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ResourceGroupExportResult)
			t.Fatalf("Mock response is not equal to example response for example specification/resources/resource-manager/Microsoft.Resources/stable/2021-04-01/examples/ExportResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/resources/resource-manager/Microsoft.Resources/stable/2021-04-01/examples/ExportResourceGroupWithFiltering.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Export a resource group with filtering"},
	})
	client = armresources.NewResourceGroupsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err = client.BeginExportTemplate(ctx,
		"my-resource-group",
		armresources.ExportTemplateRequest{
			Options: to.Ptr("SkipResourceNameParameterization"),
			Resources: []*string{
				to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/my-resource-group/providers/My.RP/myResourceType/myFirstResource")},
		},
		&armresources.ResourceGroupsClientBeginExportTemplateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/resources/resource-manager/Microsoft.Resources/stable/2021-04-01/examples/ExportResourceGroupWithFiltering.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/resources/resource-manager/Microsoft.Resources/stable/2021-04-01/examples/ExportResourceGroupWithFiltering.json: %v", err)
	}
	// Response check
	{
		exampleRes := armresources.ResourceGroupExportResult{
			Template: map[string]interface{}{
				"$schema":        "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
				"contentVersion": "1.0.0.0",
				"parameters": map[string]interface{}{
					"myResourceType_myFirstResource_secret": map[string]interface{}{
						"type":         "SecureString",
						"defaultValue": nil,
					},
				},
				"resources": []interface{}{
					map[string]interface{}{
						"name":       "myFirstResource",
						"type":       "My.RP/myResourceType",
						"apiVersion": "2019-01-01",
						"location":   "West US",
						"properties": map[string]interface{}{
							"secret": "[parameters('myResourceType_myFirstResource_secret')]",
						},
					},
				},
				"variables": map[string]interface{}{},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ResourceGroupExportResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ResourceGroupExportResult)
			t.Fatalf("Mock response is not equal to example response for example specification/resources/resource-manager/Microsoft.Resources/stable/2021-04-01/examples/ExportResourceGroupWithFiltering.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestResourceGroups_List(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestTags_DeleteValue(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestTags_CreateOrUpdateValue(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestTags_CreateOrUpdate(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestTags_Delete(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestTags_List(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestTags_CreateOrUpdateAtScope(t *testing.T) {
	// From example specification/resources/resource-manager/Microsoft.Resources/stable/2021-04-01/examples/PutTagsResource.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update tags on a resource"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armresources.NewTagsClient("<subscription-id>", cred, &options)
	res, err := client.CreateOrUpdateAtScope(ctx,
		"subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/my-resource-group/providers/myPRNameSpace/VM/myVm",
		armresources.TagsResource{
			Properties: &armresources.Tags{
				Tags: map[string]*string{
					"tagKey1": to.Ptr("tag-value-1"),
					"tagKey2": to.Ptr("tag-value-2"),
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/resources/resource-manager/Microsoft.Resources/stable/2021-04-01/examples/PutTagsResource.json: %v", err)
	}
	// Response check
	{
		exampleRes := armresources.TagsResource{
			Properties: &armresources.Tags{
				Tags: map[string]*string{
					"tagKey1": to.Ptr("tag-value-1"),
					"tagKey2": to.Ptr("tag-value-2"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.TagsResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.TagsResource)
			t.Fatalf("Mock response is not equal to example response for example specification/resources/resource-manager/Microsoft.Resources/stable/2021-04-01/examples/PutTagsResource.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/resources/resource-manager/Microsoft.Resources/stable/2021-04-01/examples/PutTagsSubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update tags on a subscription"},
	})
	client = armresources.NewTagsClient("<subscription-id>", cred, &options)
	res, err = client.CreateOrUpdateAtScope(ctx,
		"subscriptions/00000000-0000-0000-0000-000000000000",
		armresources.TagsResource{
			Properties: &armresources.Tags{
				Tags: map[string]*string{
					"tagKey1": to.Ptr("tag-value-1"),
					"tagKey2": to.Ptr("tag-value-2"),
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/resources/resource-manager/Microsoft.Resources/stable/2021-04-01/examples/PutTagsSubscription.json: %v", err)
	}
	// Response check
	{
		exampleRes := armresources.TagsResource{
			Properties: &armresources.Tags{
				Tags: map[string]*string{
					"tagKey1": to.Ptr("tag-value-1"),
					"tagKey2": to.Ptr("tag-value-2"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.TagsResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.TagsResource)
			t.Fatalf("Mock response is not equal to example response for example specification/resources/resource-manager/Microsoft.Resources/stable/2021-04-01/examples/PutTagsSubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTags_UpdateAtScope(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestTags_GetAtScope(t *testing.T) {
	// From example specification/resources/resource-manager/Microsoft.Resources/stable/2021-04-01/examples/GetTagsResource.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get tags on a resource"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armresources.NewTagsClient("<subscription-id>", cred, &options)
	res, err := client.GetAtScope(ctx,
		"subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/my-resource-group/providers/myPRNameSpace/VM/myVm",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/resources/resource-manager/Microsoft.Resources/stable/2021-04-01/examples/GetTagsResource.json: %v", err)
	}
	// Response check
	{
		exampleRes := armresources.TagsResource{
			Properties: &armresources.Tags{
				Tags: map[string]*string{
					"tagKey1": to.Ptr("tag-value-1"),
					"tagKey2": to.Ptr("tag-value-2"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.TagsResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.TagsResource)
			t.Fatalf("Mock response is not equal to example response for example specification/resources/resource-manager/Microsoft.Resources/stable/2021-04-01/examples/GetTagsResource.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/resources/resource-manager/Microsoft.Resources/stable/2021-04-01/examples/GetTagsSubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get tags on a subscription"},
	})
	client = armresources.NewTagsClient("<subscription-id>", cred, &options)
	res, err = client.GetAtScope(ctx,
		"subscriptions/00000000-0000-0000-0000-000000000000",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/resources/resource-manager/Microsoft.Resources/stable/2021-04-01/examples/GetTagsSubscription.json: %v", err)
	}
	// Response check
	{
		exampleRes := armresources.TagsResource{
			Properties: &armresources.Tags{
				Tags: map[string]*string{
					"tagKey1": to.Ptr("tag-value-1"),
					"tagKey2": to.Ptr("tag-value-2"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.TagsResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.TagsResource)
			t.Fatalf("Mock response is not equal to example response for example specification/resources/resource-manager/Microsoft.Resources/stable/2021-04-01/examples/GetTagsSubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTags_DeleteAtScope(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestDeploymentOperations_GetAtScope(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestDeploymentOperations_ListAtScope(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestDeploymentOperations_GetAtTenantScope(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestDeploymentOperations_ListAtTenantScope(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestDeploymentOperations_GetAtManagementGroupScope(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestDeploymentOperations_ListAtManagementGroupScope(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestDeploymentOperations_GetAtSubscriptionScope(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestDeploymentOperations_ListAtSubscriptionScope(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestDeploymentOperations_Get(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestDeploymentOperations_List(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
