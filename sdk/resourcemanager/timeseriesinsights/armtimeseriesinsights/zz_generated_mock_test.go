//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armtimeseriesinsights

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"golang.org/x/net/http2"
)

var (
	ctx            context.Context
	subscriptionId string
	cred           azcore.TokenCredential
	err            error
	con            *arm.Connection
	mockHost       string
)

func TestOperations_List(t *testing.T) {
	// From example List available operations for the Time Series Insights resource provider
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewOperationsClient(con)
	pager := client.List(&OperationsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
	}
}

func TestEnvironments_CreateOrUpdate(t *testing.T) {
	// From example EnvironmentsCreate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewEnvironmentsClient(con,
		"subid")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"env1",
		Gen1EnvironmentCreateOrUpdateParameters{
			EnvironmentCreateOrUpdateParameters: EnvironmentCreateOrUpdateParameters{
				CreateOrUpdateTrackedResourceProperties: CreateOrUpdateTrackedResourceProperties{
					Location: to.StringPtr("West US"),
				},
				Kind: EnvironmentKindGen1.ToPtr(),
				SKU: &SKU{
					Name:     SKUNameS1.ToPtr(),
					Capacity: to.Int32Ptr(1),
				},
			},
			Properties: &Gen1EnvironmentCreationProperties{
				DataRetentionTime: to.StringPtr("P31D"),
				PartitionKeyProperties: []*TimeSeriesIDProperty{
					{
						Name: to.StringPtr("DeviceId1"),
						Type: PropertyTypeString.ToPtr(),
					}},
			},
		},
		&EnvironmentsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.EnvironmentResource.ID == nil {
		t.Fatal("EnvironmentResource.ID should not be nil!")
	}
}

func TestEnvironments_Get(t *testing.T) {
	// From example EnvironmentsGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewEnvironmentsClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg1",
		"env1",
		&EnvironmentsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.EnvironmentResource.ID == nil {
		t.Fatal("EnvironmentResource.ID should not be nil!")
	}
}

func TestEnvironments_Update(t *testing.T) {
	// From example EnvironmentsUpdate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewEnvironmentsClient(con,
		"subid")
	poller, err := client.BeginUpdate(ctx,
		"rg1",
		"env1",
		EnvironmentUpdateParameters{
			Tags: map[string]*string{
				"someTag": to.StringPtr("someTagValue"),
			},
		},
		&EnvironmentsBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.EnvironmentResource.ID == nil {
		t.Fatal("EnvironmentResource.ID should not be nil!")
	}
}

func TestEnvironments_Delete(t *testing.T) {
	// From example EnvironmentsDelete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewEnvironmentsClient(con,
		"subid")
	_, err := client.Delete(ctx,
		"rg1",
		"env1",
		&EnvironmentsDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestEnvironments_ListByResourceGroup(t *testing.T) {
	// From example EnvironmentsByResourceGroup
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewEnvironmentsClient(con,
		"subid")
	_, err := client.ListByResourceGroup(ctx,
		"rg1",
		&EnvironmentsListByResourceGroupOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestEnvironments_ListBySubscription(t *testing.T) {
	// From example EnvironmentsBySubscription
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewEnvironmentsClient(con,
		"subid")
	_, err := client.ListBySubscription(ctx,
		&EnvironmentsListBySubscriptionOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestEventSources_CreateOrUpdate(t *testing.T) {
	// From example CreateEventHubEventSource
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewEventSourcesClient(con,
		"subid")
	res, err := client.CreateOrUpdate(ctx,
		"rg1",
		"env1",
		"es1",
		EventHubEventSourceCreateOrUpdateParameters{
			EventSourceCreateOrUpdateParameters: EventSourceCreateOrUpdateParameters{
				CreateOrUpdateTrackedResourceProperties: CreateOrUpdateTrackedResourceProperties{
					Location: to.StringPtr("West US"),
				},
				Kind: EventSourceKindMicrosoftEventHub.ToPtr(),
			},
			Properties: &EventHubEventSourceCreationProperties{
				EventHubEventSourceCommonProperties: EventHubEventSourceCommonProperties{
					AzureEventSourceProperties: AzureEventSourceProperties{
						EventSourceCommonProperties: EventSourceCommonProperties{
							IngressStartAt: &IngressStartAtProperties{
								Type: IngressStartAtTypeEarliestAvailable.ToPtr(),
							},
							LocalTimestamp: &LocalTimestamp{
								Format: LocalTimestampFormatEmbedded.ToPtr(),
								TimeZoneOffset: &LocalTimestampTimeZoneOffset{
									PropertyName: to.StringPtr("someEventPropertyName"),
								},
							},
							TimestampPropertyName: to.StringPtr("someTimestampProperty"),
						},
						EventSourceResourceID: to.StringPtr("somePathInArm"),
					},
					ConsumerGroupName:   to.StringPtr("cgn"),
					EventHubName:        to.StringPtr("ehn"),
					KeyName:             to.StringPtr("managementKey"),
					ServiceBusNamespace: to.StringPtr("sbn"),
				},
				SharedAccessKey: to.StringPtr("someSecretvalue"),
			},
		},
		&EventSourcesCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.EventSourceResource.ID == nil {
		t.Fatal("EventSourceResource.ID should not be nil!")
	}

	// From example EventSourcesCreateEventHubWithCustomEnquedTime
	res, err = client.CreateOrUpdate(ctx,
		"rg1",
		"env1",
		"es1",
		EventHubEventSourceCreateOrUpdateParameters{
			EventSourceCreateOrUpdateParameters: EventSourceCreateOrUpdateParameters{
				CreateOrUpdateTrackedResourceProperties: CreateOrUpdateTrackedResourceProperties{
					Location: to.StringPtr("West US"),
				},
				Kind: EventSourceKindMicrosoftEventHub.ToPtr(),
			},
			Properties: &EventHubEventSourceCreationProperties{
				EventHubEventSourceCommonProperties: EventHubEventSourceCommonProperties{
					AzureEventSourceProperties: AzureEventSourceProperties{
						EventSourceCommonProperties: EventSourceCommonProperties{
							IngressStartAt: &IngressStartAtProperties{
								Type: IngressStartAtTypeCustomEnqueuedTime.ToPtr(),
								Time: to.StringPtr("2017-04-01T19:20:33.2288820Z"),
							},
							TimestampPropertyName: to.StringPtr("someTimestampProperty"),
						},
						EventSourceResourceID: to.StringPtr("somePathInArm"),
					},
					ConsumerGroupName:   to.StringPtr("cgn"),
					EventHubName:        to.StringPtr("ehn"),
					KeyName:             to.StringPtr("managementKey"),
					ServiceBusNamespace: to.StringPtr("sbn"),
				},
				SharedAccessKey: to.StringPtr("someSecretvalue"),
			},
		},
		&EventSourcesCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.EventSourceResource.ID == nil {
		t.Fatal("EventSourceResource.ID should not be nil!")
	}
}

func TestEventSources_Get(t *testing.T) {
	// From example GetEventHubEventSource
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewEventSourcesClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg1",
		"env1",
		"es1",
		&EventSourcesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.EventSourceResource.ID == nil {
		t.Fatal("EventSourceResource.ID should not be nil!")
	}
}

func TestEventSources_Update(t *testing.T) {
	// From example UpdateEventSource
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewEventSourcesClient(con,
		"subid")
	res, err := client.Update(ctx,
		"rg1",
		"env1",
		"es1",
		EventSourceUpdateParameters{
			Tags: map[string]*string{
				"someKey": to.StringPtr("someValue"),
			},
		},
		&EventSourcesUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.EventSourceResource.ID == nil {
		t.Fatal("EventSourceResource.ID should not be nil!")
	}
}

func TestEventSources_Delete(t *testing.T) {
	// From example DeleteEventSource
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewEventSourcesClient(con,
		"subid")
	_, err := client.Delete(ctx,
		"rg1",
		"env1",
		"es1",
		&EventSourcesDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestEventSources_ListByEnvironment(t *testing.T) {
	// From example ListEventSourcesByEnvironment
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewEventSourcesClient(con,
		"subid")
	_, err := client.ListByEnvironment(ctx,
		"rg1",
		"env1",
		&EventSourcesListByEnvironmentOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestReferenceDataSets_CreateOrUpdate(t *testing.T) {
	// From example ReferenceDataSetsCreate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewReferenceDataSetsClient(con,
		"subid")
	res, err := client.CreateOrUpdate(ctx,
		"rg1",
		"env1",
		"rds1",
		ReferenceDataSetCreateOrUpdateParameters{
			CreateOrUpdateTrackedResourceProperties: CreateOrUpdateTrackedResourceProperties{
				Location: to.StringPtr("West US"),
			},
			Properties: &ReferenceDataSetCreationProperties{
				KeyProperties: []*ReferenceDataSetKeyProperty{
					{
						Name: to.StringPtr("DeviceId1"),
						Type: ReferenceDataKeyPropertyTypeString.ToPtr(),
					},
					{
						Name: to.StringPtr("DeviceFloor"),
						Type: ReferenceDataKeyPropertyTypeDouble.ToPtr(),
					}},
			},
		},
		&ReferenceDataSetsCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ReferenceDataSetResource.ID == nil {
		t.Fatal("ReferenceDataSetResource.ID should not be nil!")
	}
}

func TestReferenceDataSets_Get(t *testing.T) {
	// From example ReferenceDataSetsGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewReferenceDataSetsClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg1",
		"env1",
		"rds1",
		&ReferenceDataSetsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ReferenceDataSetResource.ID == nil {
		t.Fatal("ReferenceDataSetResource.ID should not be nil!")
	}
}

func TestReferenceDataSets_Update(t *testing.T) {
	// From example ReferenceDataSetsUpdate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewReferenceDataSetsClient(con,
		"subid")
	res, err := client.Update(ctx,
		"rg1",
		"env1",
		"rds1",
		ReferenceDataSetUpdateParameters{
			Tags: map[string]*string{
				"someKey": to.StringPtr("someValue"),
			},
		},
		&ReferenceDataSetsUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ReferenceDataSetResource.ID == nil {
		t.Fatal("ReferenceDataSetResource.ID should not be nil!")
	}
}

func TestReferenceDataSets_Delete(t *testing.T) {
	// From example ReferenceDataSetsDelete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewReferenceDataSetsClient(con,
		"subid")
	_, err := client.Delete(ctx,
		"rg1",
		"env1",
		"rds1",
		&ReferenceDataSetsDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestReferenceDataSets_ListByEnvironment(t *testing.T) {
	// From example ReferenceDataSetsListByEnvironment
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewReferenceDataSetsClient(con,
		"subid")
	_, err := client.ListByEnvironment(ctx,
		"rg1",
		"env1",
		&ReferenceDataSetsListByEnvironmentOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestAccessPolicies_CreateOrUpdate(t *testing.T) {
	// From example AccessPoliciesCreate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAccessPoliciesClient(con,
		"subid")
	res, err := client.CreateOrUpdate(ctx,
		"rg1",
		"env1",
		"ap1",
		AccessPolicyCreateOrUpdateParameters{
			Properties: &AccessPolicyResourceProperties{
				Description:       to.StringPtr("some description"),
				PrincipalObjectID: to.StringPtr("aGuid"),
				Roles: []*AccessPolicyRole{
					AccessPolicyRoleReader.ToPtr()},
			},
		},
		&AccessPoliciesCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.AccessPolicyResource.ID == nil {
		t.Fatal("AccessPolicyResource.ID should not be nil!")
	}
}

func TestAccessPolicies_Get(t *testing.T) {
	// From example AccessPoliciesGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAccessPoliciesClient(con,
		"subid")
	res, err := client.Get(ctx,
		"rg1",
		"env1",
		"ap1",
		&AccessPoliciesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.AccessPolicyResource.ID == nil {
		t.Fatal("AccessPolicyResource.ID should not be nil!")
	}
}

func TestAccessPolicies_Update(t *testing.T) {
	// From example AccessPoliciesUpdate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAccessPoliciesClient(con,
		"subid")
	res, err := client.Update(ctx,
		"rg1",
		"env1",
		"ap1",
		AccessPolicyUpdateParameters{
			Properties: &AccessPolicyMutableProperties{
				Roles: []*AccessPolicyRole{
					AccessPolicyRoleReader.ToPtr(),
					AccessPolicyRoleContributor.ToPtr()},
			},
		},
		&AccessPoliciesUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.AccessPolicyResource.ID == nil {
		t.Fatal("AccessPolicyResource.ID should not be nil!")
	}
}

func TestAccessPolicies_Delete(t *testing.T) {
	// From example AccessPoliciesDelete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAccessPoliciesClient(con,
		"subid")
	_, err := client.Delete(ctx,
		"rg1",
		"env1",
		"ap1",
		&AccessPoliciesDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestAccessPolicies_ListByEnvironment(t *testing.T) {
	// From example AccessPoliciesByEnvironment
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAccessPoliciesClient(con,
		"subid")
	_, err := client.ListByEnvironment(ctx,
		"rg1",
		"env1",
		&AccessPoliciesListByEnvironmentOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestPrivateEndpointConnections_CreateOrUpdate(t *testing.T) {
	// From example PrivateEndpointConnectionUpdate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateEndpointConnectionsClient(con,
		"mySubscriptionId")
	res, err := client.CreateOrUpdate(ctx,
		"myResourceGroup",
		"myEnvironment",
		"myPrivateEndpointConnectionName",
		PrivateEndpointConnection{
			Properties: &PrivateEndpointConnectionProperties{
				PrivateLinkServiceConnectionState: &PrivateLinkServiceConnectionState{
					Description: to.StringPtr("Rejected for some reason"),
					Status:      PrivateEndpointServiceConnectionStatusRejected.ToPtr(),
				},
			},
		},
		&PrivateEndpointConnectionsCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.PrivateEndpointConnection.ID == nil {
		t.Fatal("PrivateEndpointConnection.ID should not be nil!")
	}
}

func TestPrivateEndpointConnections_Get(t *testing.T) {
	// From example PrivateEndpointConnectionGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateEndpointConnectionsClient(con,
		"mySubscriptionId")
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myEnvironment",
		"myPrivateEndpointConnectionName",
		&PrivateEndpointConnectionsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.PrivateEndpointConnection.ID == nil {
		t.Fatal("PrivateEndpointConnection.ID should not be nil!")
	}
}

func TestPrivateEndpointConnections_Delete(t *testing.T) {
	// From example PrivateEndpointConnectionDelete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateEndpointConnectionsClient(con,
		"mySubscriptionId")
	_, err := client.Delete(ctx,
		"myResourceGroup",
		"myEnvironment",
		"myPrivateEndpointConnectionName",
		&PrivateEndpointConnectionsDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestPrivateEndpointConnections_ListByEnvironment(t *testing.T) {
	// From example ListPrivateEndpointConnectionsByService
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateEndpointConnectionsClient(con,
		"mySubscriptionId")
	_, err := client.ListByEnvironment(ctx,
		"myResourceGroup",
		"myEnvironment",
		&PrivateEndpointConnectionsListByEnvironmentOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestPrivateLinkResources_ListSupported(t *testing.T) {
	// From example ListSupportedPrivateLinkResources
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateLinkResourcesClient(con,
		"mySubscriptionId")
	_, err := client.ListSupported(ctx,
		"myResourceGroup",
		"myEnvironment",
		&PrivateLinkResourcesListSupportedOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	subscriptionId = getEnv("SUBSCRIPTION_ID", "00000000-0000-0000-0000-000000000000")
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}
	cred, err = azidentity.NewEnvironmentCredential(&azidentity.EnvironmentCredentialOptions{AuthorityHost: mockHost, HTTPClient: client})
	if err != nil {
		panic(err)
	}

	con = arm.NewConnection(mockHost, cred, &arm.ConnectionOptions{
		Logging: policy.LogOptions{
			IncludeBody: true,
		},
		HTTPClient: client,
	})
}

func tearDown() {

}
