//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armtimeseriesinsights_test

import (
	"context"
	"log"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/timeseriesinsights/armtimeseriesinsights"
)

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/timeseriesinsights/resource-manager/Microsoft.TimeSeriesInsights/preview/2021-03-31-preview/examples/EventSourcesCreateEventHub.json
func ExampleEventSourcesClient_CreateOrUpdate() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
		return
	}

	ctx := context.Background()
	client := armtimeseriesinsights.NewEventSourcesClient("<subscription-id>", cred, nil)
	res, err := client.CreateOrUpdate(ctx,
		"<resource-group-name>",
		"<environment-name>",
		"<event-source-name>",
		&armtimeseriesinsights.EventHubEventSourceCreateOrUpdateParameters{
			Location: to.Ptr("<location>"),
			Kind:     to.Ptr(armtimeseriesinsights.EventSourceKindMicrosoftEventHub),
			Properties: &armtimeseriesinsights.EventHubEventSourceCreationProperties{
				IngressStartAt: &armtimeseriesinsights.IngressStartAtProperties{
					Type: to.Ptr(armtimeseriesinsights.IngressStartAtTypeEarliestAvailable),
				},
				LocalTimestamp: &armtimeseriesinsights.LocalTimestamp{
					Format: to.Ptr(armtimeseriesinsights.LocalTimestampFormat("TimeSpan")),
					TimeZoneOffset: &armtimeseriesinsights.LocalTimestampTimeZoneOffset{
						PropertyName: to.Ptr("<property-name>"),
					},
				},
				TimestampPropertyName: to.Ptr("<timestamp-property-name>"),
				EventSourceResourceID: to.Ptr("<event-source-resource-id>"),
				ConsumerGroupName:     to.Ptr("<consumer-group-name>"),
				EventHubName:          to.Ptr("<event-hub-name>"),
				KeyName:               to.Ptr("<key-name>"),
				ServiceBusNamespace:   to.Ptr("<service-bus-namespace>"),
				SharedAccessKey:       to.Ptr("<shared-access-key>"),
			},
		},
		nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
		return
	}
	// TODO: use response item
	_ = res
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/timeseriesinsights/resource-manager/Microsoft.TimeSeriesInsights/preview/2021-03-31-preview/examples/EventSourcesGetEventHub.json
func ExampleEventSourcesClient_Get() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
		return
	}

	ctx := context.Background()
	client := armtimeseriesinsights.NewEventSourcesClient("<subscription-id>", cred, nil)
	res, err := client.Get(ctx,
		"<resource-group-name>",
		"<environment-name>",
		"<event-source-name>",
		nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
		return
	}
	// TODO: use response item
	_ = res
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/timeseriesinsights/resource-manager/Microsoft.TimeSeriesInsights/preview/2021-03-31-preview/examples/EventSourcesPatchTags.json
func ExampleEventSourcesClient_Update() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
		return
	}

	ctx := context.Background()
	client := armtimeseriesinsights.NewEventSourcesClient("<subscription-id>", cred, nil)
	res, err := client.Update(ctx,
		"<resource-group-name>",
		"<environment-name>",
		"<event-source-name>",
		&armtimeseriesinsights.EventSourceUpdateParameters{
			Tags: map[string]*string{
				"someKey": to.Ptr("someValue"),
			},
		},
		nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
		return
	}
	// TODO: use response item
	_ = res
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/timeseriesinsights/resource-manager/Microsoft.TimeSeriesInsights/preview/2021-03-31-preview/examples/EventSourcesDelete.json
func ExampleEventSourcesClient_Delete() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
		return
	}

	ctx := context.Background()
	client := armtimeseriesinsights.NewEventSourcesClient("<subscription-id>", cred, nil)
	_, err = client.Delete(ctx,
		"<resource-group-name>",
		"<environment-name>",
		"<event-source-name>",
		nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
		return
	}
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/timeseriesinsights/resource-manager/Microsoft.TimeSeriesInsights/preview/2021-03-31-preview/examples/EventSourcesListByEnvironment.json
func ExampleEventSourcesClient_ListByEnvironment() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
		return
	}

	ctx := context.Background()
	client := armtimeseriesinsights.NewEventSourcesClient("<subscription-id>", cred, nil)
	res, err := client.ListByEnvironment(ctx,
		"<resource-group-name>",
		"<environment-name>",
		nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
		return
	}
	// TODO: use response item
	_ = res
}
