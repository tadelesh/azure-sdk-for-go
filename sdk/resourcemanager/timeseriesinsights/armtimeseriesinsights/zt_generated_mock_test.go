//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armtimeseriesinsights_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/timeseriesinsights/armtimeseriesinsights"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestOperations_List(t *testing.T) {
	// From example specification/timeseriesinsights/resource-manager/Microsoft.TimeSeriesInsights/preview/2021-03-31-preview/examples/Operation_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List available operations for the Time Series Insights resource provider"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armtimeseriesinsights.NewOperationsClient(cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/timeseriesinsights/resource-manager/Microsoft.TimeSeriesInsights/preview/2021-03-31-preview/examples/Operation_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armtimeseriesinsights.OperationListResult{
			Value: []*armtimeseriesinsights.Operation{
				{
					Name: to.Ptr("Microsoft.TimeSeriesInsights/register/action"),
					Display: &armtimeseriesinsights.OperationDisplay{
						Description: to.Ptr("Registers the subscription for the Time Series Insights resource provider and enables the creation of Time Series Insights environments."),
						Operation:   to.Ptr("Registers the Time Series Insights Resource Provider"),
						Provider:    to.Ptr("Microsoft Time Series Insights"),
						Resource:    to.Ptr("Time Series Insights Resource Provider"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.TimeSeriesInsights/environments/providers/Microsoft.Insights/metricDefinitions/read"),
					Display: &armtimeseriesinsights.OperationDisplay{
						Description: to.Ptr("Gets the available metrics for environments"),
						Operation:   to.Ptr("Read environments metric definitions"),
						Provider:    to.Ptr("Microsoft Time Series Insights"),
						Resource:    to.Ptr("The metrics definition of environments"),
					},
					Origin: to.Ptr("system"),
					OperationProperties: &armtimeseriesinsights.OperationProperties{
						ServiceSpecification: &armtimeseriesinsights.ServiceSpecification{
							MetricSpecifications: []*armtimeseriesinsights.MetricSpecification{
								{
									Name:            to.Ptr("IngressReceivedMessages"),
									AggregationType: to.Ptr("Total"),
									Availabilities: []*armtimeseriesinsights.MetricAvailability{
										{
											BlobDuration: to.Ptr("PT1H"),
											TimeGrain:    to.Ptr("PT1M"),
										}},
									DisplayDescription: to.Ptr("Count of messages read from all Event hub or IoT hub event sources"),
									DisplayName:        to.Ptr("Ingress Received Messages"),
									Unit:               to.Ptr("Count"),
								},
								{
									Name:            to.Ptr("IngressReceivedInvalidMessages"),
									AggregationType: to.Ptr("Total"),
									Availabilities: []*armtimeseriesinsights.MetricAvailability{
										{
											BlobDuration: to.Ptr("PT1H"),
											TimeGrain:    to.Ptr("PT1M"),
										}},
									DisplayDescription: to.Ptr("Count of invalid messages read from all Event hub or IoT hub event sources"),
									DisplayName:        to.Ptr("Ingress Received Invalid Messages"),
									Unit:               to.Ptr("Count"),
								},
								{
									Name:            to.Ptr("IngressReceivedBytes"),
									AggregationType: to.Ptr("Total"),
									Availabilities: []*armtimeseriesinsights.MetricAvailability{
										{
											BlobDuration: to.Ptr("PT1H"),
											TimeGrain:    to.Ptr("PT1M"),
										}},
									DisplayDescription: to.Ptr("Count of bytes read from all event sources"),
									DisplayName:        to.Ptr("Ingress Received Bytes"),
									Unit:               to.Ptr("Bytes"),
								},
								{
									Name:            to.Ptr("IngressStoredBytes"),
									AggregationType: to.Ptr("Total"),
									Availabilities: []*armtimeseriesinsights.MetricAvailability{
										{
											BlobDuration: to.Ptr("PT1H"),
											TimeGrain:    to.Ptr("PT1M"),
										}},
									DisplayDescription: to.Ptr("Total size of events successfully processed and available for query"),
									DisplayName:        to.Ptr("Ingress Stored Bytes"),
									Unit:               to.Ptr("Bytes"),
								},
								{
									Name:            to.Ptr("IngressStoredEvents"),
									AggregationType: to.Ptr("Total"),
									Availabilities: []*armtimeseriesinsights.MetricAvailability{
										{
											BlobDuration: to.Ptr("PT1H"),
											TimeGrain:    to.Ptr("PT1M"),
										}},
									DisplayDescription: to.Ptr("Count of flattened events successfully processed and available for query"),
									DisplayName:        to.Ptr("Ingress Stored Events"),
									Unit:               to.Ptr("Count"),
								},
								{
									Name:            to.Ptr("IngressReceivedMessagesTimeLag"),
									AggregationType: to.Ptr("Maximum"),
									Availabilities: []*armtimeseriesinsights.MetricAvailability{
										{
											BlobDuration: to.Ptr("PT1H"),
											TimeGrain:    to.Ptr("PT1M"),
										}},
									DisplayDescription: to.Ptr("Difference between the time that the message is enqueued in the event source and the time it is processed in Ingress"),
									DisplayName:        to.Ptr("Ingress Received Messages Time Lag"),
									Unit:               to.Ptr("Seconds"),
								},
								{
									Name:            to.Ptr("IngressReceivedMessagesCountLag"),
									AggregationType: to.Ptr("Average"),
									Availabilities: []*armtimeseriesinsights.MetricAvailability{
										{
											BlobDuration: to.Ptr("PT1H"),
											TimeGrain:    to.Ptr("PT1M"),
										}},
									DisplayDescription: to.Ptr("Difference between the sequence number of last enqueued message in the event source partition and sequence number of messages being processed in Ingress"),
									DisplayName:        to.Ptr("Ingress Received Messages Count Lag"),
									Unit:               to.Ptr("Count"),
								},
								{
									Name:            to.Ptr("WarmStorageMaxProperties"),
									AggregationType: to.Ptr("Maximum"),
									Availabilities: []*armtimeseriesinsights.MetricAvailability{
										{
											BlobDuration: to.Ptr("PT1H"),
											TimeGrain:    to.Ptr("PT1M"),
										}},
									DisplayDescription: to.Ptr("Maximum number of properties used allowed by the environment for S1/S2 SKU and maximum number of properties allowed by Warm Store for PAYG SKU"),
									DisplayName:        to.Ptr("Warm Storage Max Properties"),
									Unit:               to.Ptr("Count"),
								},
								{
									Name:            to.Ptr("WarmStorageUsedProperties"),
									AggregationType: to.Ptr("Maximum"),
									Availabilities: []*armtimeseriesinsights.MetricAvailability{
										{
											BlobDuration: to.Ptr("PT1H"),
											TimeGrain:    to.Ptr("PT1M"),
										}},
									DisplayDescription: to.Ptr("Number of properties used by the environment for S1/S2 SKU and number of properties used by Warm Store for PAYG SKU"),
									DisplayName:        to.Ptr("Warm Storage Used Properties "),
									Unit:               to.Ptr("Count"),
								}},
						},
					},
				},
				{
					Name: to.Ptr("Microsoft.TimeSeriesInsights/environments/providers/Microsoft.Insights/diagnosticSettings/read"),
					Display: &armtimeseriesinsights.OperationDisplay{
						Description: to.Ptr("Gets the diagnostic setting for the resource"),
						Operation:   to.Ptr("Read diagnostic setting."),
						Provider:    to.Ptr("Microsoft Time Series Insights"),
						Resource:    to.Ptr("environments"),
					},
					Origin: to.Ptr("system"),
				},
				{
					Name: to.Ptr("Microsoft.TimeSeriesInsights/environments/providers/Microsoft.Insights/diagnosticSettings/write"),
					Display: &armtimeseriesinsights.OperationDisplay{
						Description: to.Ptr("Creates or updates the diagnostic setting for the resource"),
						Operation:   to.Ptr("Write diagnostic setting."),
						Provider:    to.Ptr("Microsoft Time Series Insights"),
						Resource:    to.Ptr("environments"),
					},
					Origin: to.Ptr("system"),
				},
				{
					Name: to.Ptr("Microsoft.TimeSeriesInsights/environments/providers/Microsoft.Insights/logDefinitions/read"),
					Display: &armtimeseriesinsights.OperationDisplay{
						Description: to.Ptr("Gets the available logs for environments"),
						Operation:   to.Ptr("Read environments log definitions"),
						Provider:    to.Ptr("Microsoft Time Series Insights"),
						Resource:    to.Ptr("environments"),
					},
					Origin: to.Ptr("system"),
					OperationProperties: &armtimeseriesinsights.OperationProperties{
						ServiceSpecification: &armtimeseriesinsights.ServiceSpecification{
							LogSpecifications: []*armtimeseriesinsights.LogSpecification{
								{
									Name:        to.Ptr("Ingress"),
									DisplayName: to.Ptr("Ingress"),
								},
								{
									Name:        to.Ptr("Management"),
									DisplayName: to.Ptr("Management"),
								}},
						},
					},
				},
				{
					Name: to.Ptr("Microsoft.TimeSeriesInsights/environments/eventsources/providers/Microsoft.Insights/logDefinitions/read"),
					Display: &armtimeseriesinsights.OperationDisplay{
						Description: to.Ptr("Gets the available logs for the event source"),
						Operation:   to.Ptr("Read event source log definitions"),
						Provider:    to.Ptr("Microsoft Time Series Insights"),
						Resource:    to.Ptr("Event Source"),
					},
					Origin: to.Ptr("system"),
					OperationProperties: &armtimeseriesinsights.OperationProperties{
						ServiceSpecification: &armtimeseriesinsights.ServiceSpecification{
							LogSpecifications: []*armtimeseriesinsights.LogSpecification{
								{
									Name:        to.Ptr("Ingress"),
									DisplayName: to.Ptr("Ingress"),
								},
								{
									Name:        to.Ptr("Management"),
									DisplayName: to.Ptr("Management"),
								}},
						},
					},
				},
				{
					Name: to.Ptr("Microsoft.TimeSeriesInsights/environments/eventsources/providers/Microsoft.Insights/metricDefinitions/read"),
					Display: &armtimeseriesinsights.OperationDisplay{
						Description: to.Ptr("Gets the available metrics for eventsources"),
						Operation:   to.Ptr("Read eventsources metric definitions"),
						Provider:    to.Ptr("Microsoft Time Series Insights"),
						Resource:    to.Ptr("The metrics definition of environments/eventsources"),
					},
					Origin: to.Ptr("system"),
					OperationProperties: &armtimeseriesinsights.OperationProperties{
						ServiceSpecification: &armtimeseriesinsights.ServiceSpecification{
							MetricSpecifications: []*armtimeseriesinsights.MetricSpecification{
								{
									Name:            to.Ptr("IngressReceivedMessages"),
									AggregationType: to.Ptr("Total"),
									Availabilities: []*armtimeseriesinsights.MetricAvailability{
										{
											BlobDuration: to.Ptr("PT1H"),
											TimeGrain:    to.Ptr("PT1M"),
										}},
									DisplayDescription: to.Ptr("Count of messages read from the event source"),
									DisplayName:        to.Ptr("Ingress Received Messages"),
									Unit:               to.Ptr("Count"),
								},
								{
									Name:            to.Ptr("IngressReceivedInvalidMessages"),
									AggregationType: to.Ptr("Total"),
									Availabilities: []*armtimeseriesinsights.MetricAvailability{
										{
											BlobDuration: to.Ptr("PT1H"),
											TimeGrain:    to.Ptr("PT1M"),
										}},
									DisplayDescription: to.Ptr("Count of invalid messages read from the event source"),
									DisplayName:        to.Ptr("Ingress Received Invalid Messages"),
									Unit:               to.Ptr("Count"),
								},
								{
									Name:            to.Ptr("IngressReceivedBytes"),
									AggregationType: to.Ptr("Total"),
									Availabilities: []*armtimeseriesinsights.MetricAvailability{
										{
											BlobDuration: to.Ptr("PT1H"),
											TimeGrain:    to.Ptr("PT1M"),
										}},
									DisplayDescription: to.Ptr("Count of bytes read from the event source"),
									DisplayName:        to.Ptr("Ingress Received Bytes"),
									Unit:               to.Ptr("Bytes"),
								},
								{
									Name:            to.Ptr("IngressStoredBytes"),
									AggregationType: to.Ptr("Total"),
									Availabilities: []*armtimeseriesinsights.MetricAvailability{
										{
											BlobDuration: to.Ptr("PT1H"),
											TimeGrain:    to.Ptr("PT1M"),
										}},
									DisplayDescription: to.Ptr("Total size of events successfully processed and available for query"),
									DisplayName:        to.Ptr("Ingress Stored Bytes"),
									Unit:               to.Ptr("Bytes"),
								},
								{
									Name:            to.Ptr("IngressStoredEvents"),
									AggregationType: to.Ptr("Total"),
									Availabilities: []*armtimeseriesinsights.MetricAvailability{
										{
											BlobDuration: to.Ptr("PT1H"),
											TimeGrain:    to.Ptr("PT1M"),
										}},
									DisplayDescription: to.Ptr("Count of flattened events successfully processed and available for query"),
									DisplayName:        to.Ptr("Ingress Stored Events"),
									Unit:               to.Ptr("Count"),
								},
								{
									Name:            to.Ptr("IngressReceivedMessagesTimeLag"),
									AggregationType: to.Ptr("Maximum"),
									Availabilities: []*armtimeseriesinsights.MetricAvailability{
										{
											BlobDuration: to.Ptr("PT1H"),
											TimeGrain:    to.Ptr("PT1M"),
										}},
									DisplayDescription: to.Ptr("Difference between the time that the message is enqueued in the event source and the time it is processed in Ingress"),
									DisplayName:        to.Ptr("Ingress Received Messages Time Lag"),
									Unit:               to.Ptr("Seconds"),
								},
								{
									Name:            to.Ptr("IngressReceivedMessagesCountLag"),
									AggregationType: to.Ptr("Average"),
									Availabilities: []*armtimeseriesinsights.MetricAvailability{
										{
											BlobDuration: to.Ptr("PT1H"),
											TimeGrain:    to.Ptr("PT1M"),
										}},
									DisplayDescription: to.Ptr("Difference between the sequence number of last enqueued message in the event source partition and sequence number of messages being processed in Ingress"),
									DisplayName:        to.Ptr("Ingress Received Messages Count Lag"),
									Unit:               to.Ptr("Count"),
								},
								{
									Name:            to.Ptr("WarmStorageMaxProperties"),
									AggregationType: to.Ptr("Maximum"),
									Availabilities: []*armtimeseriesinsights.MetricAvailability{
										{
											BlobDuration: to.Ptr("PT1H"),
											TimeGrain:    to.Ptr("PT1M"),
										}},
									DisplayDescription: to.Ptr("Maximum number of properties used allowed by the environment for S1/S2 SKU and maximum number of properties allowed by Warm Store for PAYG SKU"),
									DisplayName:        to.Ptr("Warm Storage Max Properties"),
									Unit:               to.Ptr("Count"),
								},
								{
									Name:            to.Ptr("WarmStorageUsedProperties"),
									AggregationType: to.Ptr("Maximum"),
									Availabilities: []*armtimeseriesinsights.MetricAvailability{
										{
											BlobDuration: to.Ptr("PT1H"),
											TimeGrain:    to.Ptr("PT1M"),
										}},
									DisplayDescription: to.Ptr("Number of properties used by the environment for S1/S2 SKU and number of properties used by Warm Store for PAYG SKU"),
									DisplayName:        to.Ptr("Warm Storage Used Properties "),
									Unit:               to.Ptr("Count"),
								}},
						},
					},
				},
				{
					Name: to.Ptr("Microsoft.TimeSeriesInsights/environments/eventsources/providers/Microsoft.Insights/diagnosticSettings/read"),
					Display: &armtimeseriesinsights.OperationDisplay{
						Description: to.Ptr("Gets the diagnostic setting for the resource"),
						Operation:   to.Ptr("Read diagnostic setting."),
						Provider:    to.Ptr("Microsoft Time Series Insights"),
						Resource:    to.Ptr("environments/eventsources"),
					},
					Origin: to.Ptr("system"),
				},
				{
					Name: to.Ptr("Microsoft.TimeSeriesInsights/environments/eventsources/providers/Microsoft.Insights/diagnosticSettings/write"),
					Display: &armtimeseriesinsights.OperationDisplay{
						Description: to.Ptr("Creates or updates the diagnostic setting for the resource"),
						Operation:   to.Ptr("Write diagnostic setting."),
						Provider:    to.Ptr("Microsoft Time Series Insights"),
						Resource:    to.Ptr("environments/eventsources"),
					},
					Origin: to.Ptr("system"),
				},
				{
					Name: to.Ptr("Microsoft.TimeSeriesInsights/environments/read"),
					Display: &armtimeseriesinsights.OperationDisplay{
						Description: to.Ptr("Get the properties of an environment."),
						Operation:   to.Ptr("Read Environment"),
						Provider:    to.Ptr("Microsoft Time Series Insights"),
						Resource:    to.Ptr("Environment"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.TimeSeriesInsights/environments/write"),
					Display: &armtimeseriesinsights.OperationDisplay{
						Description: to.Ptr("Creates a new environment, or updates an existing environment."),
						Operation:   to.Ptr("Create or Update Environment"),
						Provider:    to.Ptr("Microsoft Time Series Insights"),
						Resource:    to.Ptr("Environment"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.TimeSeriesInsights/environments/delete"),
					Display: &armtimeseriesinsights.OperationDisplay{
						Description: to.Ptr("Deletes the environment."),
						Operation:   to.Ptr("Delete Environment"),
						Provider:    to.Ptr("Microsoft Time Series Insights"),
						Resource:    to.Ptr("Environment"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.TimeSeriesInsights/environments/status/read"),
					Display: &armtimeseriesinsights.OperationDisplay{
						Description: to.Ptr("Get the status of the environment, state of its associated operations like ingress."),
						Operation:   to.Ptr("Read Environment status"),
						Provider:    to.Ptr("Microsoft Time Series Insights"),
						Resource:    to.Ptr("Environment"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.TimeSeriesInsights/environments/eventsources/read"),
					Display: &armtimeseriesinsights.OperationDisplay{
						Description: to.Ptr("Get the properties of an event source."),
						Operation:   to.Ptr("Read Event Source"),
						Provider:    to.Ptr("Microsoft Time Series Insights"),
						Resource:    to.Ptr("Event Source"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.TimeSeriesInsights/environments/eventsources/write"),
					Display: &armtimeseriesinsights.OperationDisplay{
						Description: to.Ptr("Creates a new event source for an environment, or updates an existing event source."),
						Operation:   to.Ptr("Create or Update Event Source"),
						Provider:    to.Ptr("Microsoft Time Series Insights"),
						Resource:    to.Ptr("Event Source"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.TimeSeriesInsights/environments/eventsources/delete"),
					Display: &armtimeseriesinsights.OperationDisplay{
						Description: to.Ptr("Deletes the event source."),
						Operation:   to.Ptr("Delete Event Source"),
						Provider:    to.Ptr("Microsoft Time Series Insights"),
						Resource:    to.Ptr("Event Source"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.TimeSeriesInsights/environments/referencedatasets/read"),
					Display: &armtimeseriesinsights.OperationDisplay{
						Description: to.Ptr("Get the properties of a reference data set."),
						Operation:   to.Ptr("Read Reference Data Set"),
						Provider:    to.Ptr("Microsoft Time Series Insights"),
						Resource:    to.Ptr("Reference Data Set"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.TimeSeriesInsights/environments/referencedatasets/write"),
					Display: &armtimeseriesinsights.OperationDisplay{
						Description: to.Ptr("Creates a new reference data set for an environment, or updates an existing reference data set."),
						Operation:   to.Ptr("Create or Update Reference Data Set"),
						Provider:    to.Ptr("Microsoft Time Series Insights"),
						Resource:    to.Ptr("Reference Data Set"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.TimeSeriesInsights/environments/referencedatasets/delete"),
					Display: &armtimeseriesinsights.OperationDisplay{
						Description: to.Ptr("Deletes the reference data set."),
						Operation:   to.Ptr("Delete Reference Data Set"),
						Provider:    to.Ptr("Microsoft Time Series Insights"),
						Resource:    to.Ptr("Reference Data Set"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.TimeSeriesInsights/environments/accesspolicies/read"),
					Display: &armtimeseriesinsights.OperationDisplay{
						Description: to.Ptr("Get the properties of an access policy."),
						Operation:   to.Ptr("Read Access Policy"),
						Provider:    to.Ptr("Microsoft Time Series Insights"),
						Resource:    to.Ptr("Access Policy"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.TimeSeriesInsights/environments/accesspolicies/write"),
					Display: &armtimeseriesinsights.OperationDisplay{
						Description: to.Ptr("Creates a new access policy for an environment, or updates an existing access policy."),
						Operation:   to.Ptr("Create or Update Access Policy"),
						Provider:    to.Ptr("Microsoft Time Series Insights"),
						Resource:    to.Ptr("Access Policy"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.TimeSeriesInsights/environments/accesspolicies/delete"),
					Display: &armtimeseriesinsights.OperationDisplay{
						Description: to.Ptr("Deletes the access policy."),
						Operation:   to.Ptr("Delete Access Policy"),
						Provider:    to.Ptr("Microsoft Time Series Insights"),
						Resource:    to.Ptr("Access Policy"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.TimeSeriesInsights/environments/privateEndpointConnectionProxies/read"),
					Display: &armtimeseriesinsights.OperationDisplay{
						Description: to.Ptr("Get the properties of a private endpoint connection proxy."),
						Operation:   to.Ptr("Read private endpoint connection proxy"),
						Provider:    to.Ptr("Microsoft Time Series Insights"),
						Resource:    to.Ptr("Private endpoint connection proxy"),
					},
					Origin: to.Ptr("system"),
				},
				{
					Name: to.Ptr("Microsoft.TimeSeriesInsights/environments/privateEndpointConnectionProxies/write"),
					Display: &armtimeseriesinsights.OperationDisplay{
						Description: to.Ptr("Creates a new private endpoint connection proxy for an environment, or updates an existing connection proxy."),
						Operation:   to.Ptr("Create or Update private endpoint connection proxy"),
						Provider:    to.Ptr("Microsoft Time Series Insights"),
						Resource:    to.Ptr("Private endpoint connection proxy"),
					},
					Origin: to.Ptr("system"),
				},
				{
					Name: to.Ptr("Microsoft.TimeSeriesInsights/environments/privateEndpointConnectionProxies/delete"),
					Display: &armtimeseriesinsights.OperationDisplay{
						Description: to.Ptr("Deletes the private endpoint connection proxy."),
						Operation:   to.Ptr("Delete the private endpoint connection proxy"),
						Provider:    to.Ptr("Microsoft Time Series Insights"),
						Resource:    to.Ptr("Private endpoint connection proxy"),
					},
					Origin: to.Ptr("system"),
				},
				{
					Name: to.Ptr("Microsoft.TimeSeriesInsights/environments/privateEndpointConnectionProxies/validate/action"),
					Display: &armtimeseriesinsights.OperationDisplay{
						Description: to.Ptr("Validate the private endpoint connection proxy object before creation."),
						Operation:   to.Ptr("Validate the private endpoint connection proxy."),
						Provider:    to.Ptr("Microsoft Time Series Insights"),
						Resource:    to.Ptr("Private endpoint connection proxy"),
					},
					Origin: to.Ptr("system"),
				},
				{
					Name: to.Ptr("Microsoft.TimeSeriesInsights/environments/privateEndpointConnectionProxies/operationresults/read"),
					Display: &armtimeseriesinsights.OperationDisplay{
						Description: to.Ptr("Validate the private endpoint connection proxy operation status."),
						Operation:   to.Ptr("Get private endpoint connection proxy operation status."),
						Provider:    to.Ptr("Microsoft Time Series Insights"),
						Resource:    to.Ptr("Private endpoint connection proxy"),
					},
					Origin: to.Ptr("system"),
				},
				{
					Name: to.Ptr("Microsoft.TimeSeriesInsights/environments/privateendpointConnections/read"),
					Display: &armtimeseriesinsights.OperationDisplay{
						Description: to.Ptr("Get the properties of a private endpoint connection."),
						Operation:   to.Ptr("Read private endpoint connection."),
						Provider:    to.Ptr("Microsoft Time Series Insights"),
						Resource:    to.Ptr("Private endpoint connection."),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.TimeSeriesInsights/environments/privateendpointConnections/write"),
					Display: &armtimeseriesinsights.OperationDisplay{
						Description: to.Ptr("Creates a new private endpoint connection for an environment, or updates an existing connection."),
						Operation:   to.Ptr("Create or Update private endpoint connection."),
						Provider:    to.Ptr("Microsoft Time Series Insights"),
						Resource:    to.Ptr("Private endpoint connection."),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.TimeSeriesInsights/environments/privateendpointConnections/delete"),
					Display: &armtimeseriesinsights.OperationDisplay{
						Description: to.Ptr("Deletes the private endpoint connection."),
						Operation:   to.Ptr("Delete the private endpoint connection"),
						Provider:    to.Ptr("Microsoft Time Series Insights"),
						Resource:    to.Ptr("Private endpoint connection"),
					},
					Origin: to.Ptr("user,system"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OperationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OperationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/timeseriesinsights/resource-manager/Microsoft.TimeSeriesInsights/preview/2021-03-31-preview/examples/Operation_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestEnvironments_CreateOrUpdate(t *testing.T) {
	// From example specification/timeseriesinsights/resource-manager/Microsoft.TimeSeriesInsights/preview/2021-03-31-preview/examples/EnvironmentsCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"EnvironmentsCreate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armtimeseriesinsights.NewEnvironmentsClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"env1",
		&armtimeseriesinsights.Gen1EnvironmentCreateOrUpdateParameters{
			Location: to.Ptr("West US"),
			Kind:     to.Ptr(armtimeseriesinsights.EnvironmentKindGen1),
			SKU: &armtimeseriesinsights.SKU{
				Name:     to.Ptr(armtimeseriesinsights.SKUNameS1),
				Capacity: to.Ptr[int32](1),
			},
			Properties: &armtimeseriesinsights.Gen1EnvironmentCreationProperties{
				DataRetentionTime: to.Ptr("P31D"),
				PartitionKeyProperties: []*armtimeseriesinsights.TimeSeriesIDProperty{
					{
						Name: to.Ptr("DeviceId1"),
						Type: to.Ptr(armtimeseriesinsights.PropertyTypeString),
					}},
			},
		},
		&armtimeseriesinsights.EnvironmentsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/timeseriesinsights/resource-manager/Microsoft.TimeSeriesInsights/preview/2021-03-31-preview/examples/EnvironmentsCreate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/timeseriesinsights/resource-manager/Microsoft.TimeSeriesInsights/preview/2021-03-31-preview/examples/EnvironmentsCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armtimeseriesinsights.EnvironmentsClientCreateOrUpdateResponse{
			&armtimeseriesinsights.Gen1EnvironmentResource{
				Name:     to.Ptr("env1"),
				Type:     to.Ptr("Microsoft.TimeSeriesInsights/Environments"),
				ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.TimeSeriesInsights/Environments/env1"),
				Location: to.Ptr("West US"),
				Tags:     map[string]*string{},
				Kind:     to.Ptr(armtimeseriesinsights.EnvironmentResourceKindGen1),
				SKU: &armtimeseriesinsights.SKU{
					Name:     to.Ptr(armtimeseriesinsights.SKUNameS1),
					Capacity: to.Ptr[int32](1),
				},
				Properties: &armtimeseriesinsights.Gen1EnvironmentResourceProperties{
					CreationTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-18T19:20:33.2288820Z"); return t }()),
					ProvisioningState: to.Ptr(armtimeseriesinsights.ProvisioningStateSucceeded),
					DataRetentionTime: to.Ptr("P31D"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/timeseriesinsights/resource-manager/Microsoft.TimeSeriesInsights/preview/2021-03-31-preview/examples/EnvironmentsCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestEnvironments_Get(t *testing.T) {
	// From example specification/timeseriesinsights/resource-manager/Microsoft.TimeSeriesInsights/preview/2021-03-31-preview/examples/EnvironmentsGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"EnvironmentsGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armtimeseriesinsights.NewEnvironmentsClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"env1",
		&armtimeseriesinsights.EnvironmentsClientGetOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/timeseriesinsights/resource-manager/Microsoft.TimeSeriesInsights/preview/2021-03-31-preview/examples/EnvironmentsGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armtimeseriesinsights.EnvironmentsClientGetResponse{
			&armtimeseriesinsights.Gen1EnvironmentResource{
				Name:     to.Ptr("env1"),
				Type:     to.Ptr("Microsoft.TimeSeriesInsights/Environments"),
				ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.TimeSeriesInsights/Environments/env1"),
				Location: to.Ptr("West US"),
				Tags:     map[string]*string{},
				Kind:     to.Ptr(armtimeseriesinsights.EnvironmentResourceKindGen1),
				SKU: &armtimeseriesinsights.SKU{
					Name:     to.Ptr(armtimeseriesinsights.SKUNameS1),
					Capacity: to.Ptr[int32](1),
				},
				Properties: &armtimeseriesinsights.Gen1EnvironmentResourceProperties{
					CreationTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-18T19:20:33.2288820Z"); return t }()),
					ProvisioningState: to.Ptr(armtimeseriesinsights.ProvisioningStateSucceeded),
					DataRetentionTime: to.Ptr("P31D"),
					PartitionKeyProperties: []*armtimeseriesinsights.TimeSeriesIDProperty{
						{
							Name: to.Ptr("DeviceId1"),
							Type: to.Ptr(armtimeseriesinsights.PropertyTypeString),
						}},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/timeseriesinsights/resource-manager/Microsoft.TimeSeriesInsights/preview/2021-03-31-preview/examples/EnvironmentsGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestEnvironments_Update(t *testing.T) {
	// From example specification/timeseriesinsights/resource-manager/Microsoft.TimeSeriesInsights/preview/2021-03-31-preview/examples/EnvironmentsPatchTags.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"EnvironmentsUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armtimeseriesinsights.NewEnvironmentsClient("subid", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"rg1",
		"env1",
		&armtimeseriesinsights.EnvironmentUpdateParameters{
			Tags: map[string]*string{
				"someTag": to.Ptr("someTagValue"),
			},
		},
		&armtimeseriesinsights.EnvironmentsClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/timeseriesinsights/resource-manager/Microsoft.TimeSeriesInsights/preview/2021-03-31-preview/examples/EnvironmentsPatchTags.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/timeseriesinsights/resource-manager/Microsoft.TimeSeriesInsights/preview/2021-03-31-preview/examples/EnvironmentsPatchTags.json: %v", err)
	}
	// Response check
	{
		exampleRes := armtimeseriesinsights.EnvironmentsClientUpdateResponse{
			&armtimeseriesinsights.Gen1EnvironmentResource{
				Name:     to.Ptr("env1"),
				Type:     to.Ptr("Microsoft.TimeSeriesInsights/Environments"),
				ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.TimeSeriesInsights/Environments/env1"),
				Location: to.Ptr("West US"),
				Tags: map[string]*string{
					"someTag": to.Ptr("someTagValue"),
				},
				Kind: to.Ptr(armtimeseriesinsights.EnvironmentResourceKindGen1),
				SKU: &armtimeseriesinsights.SKU{
					Name:     to.Ptr(armtimeseriesinsights.SKUNameS1),
					Capacity: to.Ptr[int32](10),
				},
				Properties: &armtimeseriesinsights.Gen1EnvironmentResourceProperties{
					CreationTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-18T19:20:33.2288820Z"); return t }()),
					ProvisioningState: to.Ptr(armtimeseriesinsights.ProvisioningStateSucceeded),
					DataRetentionTime: to.Ptr("P31D"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/timeseriesinsights/resource-manager/Microsoft.TimeSeriesInsights/preview/2021-03-31-preview/examples/EnvironmentsPatchTags.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestEnvironments_Delete(t *testing.T) {
	// From example specification/timeseriesinsights/resource-manager/Microsoft.TimeSeriesInsights/preview/2021-03-31-preview/examples/EnvironmentsDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"EnvironmentsDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armtimeseriesinsights.NewEnvironmentsClient("subid", cred, &options)
	_, err := client.Delete(ctx,
		"rg1",
		"env1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/timeseriesinsights/resource-manager/Microsoft.TimeSeriesInsights/preview/2021-03-31-preview/examples/EnvironmentsDelete.json: %v", err)
	}
}

func TestEnvironments_ListByResourceGroup(t *testing.T) {
	// From example specification/timeseriesinsights/resource-manager/Microsoft.TimeSeriesInsights/preview/2021-03-31-preview/examples/EnvironmentsListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"EnvironmentsByResourceGroup"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armtimeseriesinsights.NewEnvironmentsClient("subid", cred, &options)
	res, err := client.ListByResourceGroup(ctx,
		"rg1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/timeseriesinsights/resource-manager/Microsoft.TimeSeriesInsights/preview/2021-03-31-preview/examples/EnvironmentsListByResourceGroup.json: %v", err)
	}
	// Response check
	{
		exampleRes := armtimeseriesinsights.EnvironmentListResponse{
			Value: []armtimeseriesinsights.EnvironmentResourceClassification{
				&armtimeseriesinsights.Gen1EnvironmentResource{
					Name:     to.Ptr("env1"),
					Type:     to.Ptr("Microsoft.TimeSeriesInsights/Environments"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.TimeSeriesInsights/Environments/env1"),
					Location: to.Ptr("West US"),
					Tags:     map[string]*string{},
					Kind:     to.Ptr(armtimeseriesinsights.EnvironmentResourceKindGen1),
					SKU: &armtimeseriesinsights.SKU{
						Name:     to.Ptr(armtimeseriesinsights.SKUNameS1),
						Capacity: to.Ptr[int32](1),
					},
					Properties: &armtimeseriesinsights.Gen1EnvironmentResourceProperties{
						CreationTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-18T19:20:33.2288820Z"); return t }()),
						ProvisioningState: to.Ptr(armtimeseriesinsights.ProvisioningStateSucceeded),
						DataRetentionTime: to.Ptr("P31D"),
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.EnvironmentListResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.EnvironmentListResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/timeseriesinsights/resource-manager/Microsoft.TimeSeriesInsights/preview/2021-03-31-preview/examples/EnvironmentsListByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestEnvironments_ListBySubscription(t *testing.T) {
	// From example specification/timeseriesinsights/resource-manager/Microsoft.TimeSeriesInsights/preview/2021-03-31-preview/examples/EnvironmentsListBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"EnvironmentsBySubscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armtimeseriesinsights.NewEnvironmentsClient("subid", cred, &options)
	res, err := client.ListBySubscription(ctx,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/timeseriesinsights/resource-manager/Microsoft.TimeSeriesInsights/preview/2021-03-31-preview/examples/EnvironmentsListBySubscription.json: %v", err)
	}
	// Response check
	{
		exampleRes := armtimeseriesinsights.EnvironmentListResponse{
			Value: []armtimeseriesinsights.EnvironmentResourceClassification{
				&armtimeseriesinsights.Gen1EnvironmentResource{
					Name:     to.Ptr("env1"),
					Type:     to.Ptr("Microsoft.TimeSeriesInsights/Environments"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.TimeSeriesInsights/Environments/env1"),
					Location: to.Ptr("West US"),
					Tags:     map[string]*string{},
					Kind:     to.Ptr(armtimeseriesinsights.EnvironmentResourceKindGen1),
					SKU: &armtimeseriesinsights.SKU{
						Name:     to.Ptr(armtimeseriesinsights.SKUNameS1),
						Capacity: to.Ptr[int32](1),
					},
					Properties: &armtimeseriesinsights.Gen1EnvironmentResourceProperties{
						CreationTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-18T19:20:33.2288820Z"); return t }()),
						ProvisioningState: to.Ptr(armtimeseriesinsights.ProvisioningStateSucceeded),
						DataRetentionTime: to.Ptr("P31D"),
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.EnvironmentListResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.EnvironmentListResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/timeseriesinsights/resource-manager/Microsoft.TimeSeriesInsights/preview/2021-03-31-preview/examples/EnvironmentsListBySubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestEventSources_CreateOrUpdate(t *testing.T) {
	// From example specification/timeseriesinsights/resource-manager/Microsoft.TimeSeriesInsights/preview/2021-03-31-preview/examples/EventSourcesCreateEventHub.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CreateEventHubEventSource"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armtimeseriesinsights.NewEventSourcesClient("subid", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"rg1",
		"env1",
		"es1",
		&armtimeseriesinsights.EventHubEventSourceCreateOrUpdateParameters{
			Location: to.Ptr("West US"),
			Kind:     to.Ptr(armtimeseriesinsights.EventSourceKindMicrosoftEventHub),
			Properties: &armtimeseriesinsights.EventHubEventSourceCreationProperties{
				IngressStartAt: &armtimeseriesinsights.IngressStartAtProperties{
					Type: to.Ptr(armtimeseriesinsights.IngressStartAtTypeEarliestAvailable),
				},
				LocalTimestamp: &armtimeseriesinsights.LocalTimestamp{
					Format: to.Ptr(armtimeseriesinsights.LocalTimestampFormat("TimeSpan")),
					TimeZoneOffset: &armtimeseriesinsights.LocalTimestampTimeZoneOffset{
						PropertyName: to.Ptr("someEventPropertyName"),
					},
				},
				TimestampPropertyName: to.Ptr("someTimestampProperty"),
				EventSourceResourceID: to.Ptr("somePathInArm"),
				ConsumerGroupName:     to.Ptr("cgn"),
				EventHubName:          to.Ptr("ehn"),
				KeyName:               to.Ptr("managementKey"),
				ServiceBusNamespace:   to.Ptr("sbn"),
				SharedAccessKey:       to.Ptr("someSecretvalue"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/timeseriesinsights/resource-manager/Microsoft.TimeSeriesInsights/preview/2021-03-31-preview/examples/EventSourcesCreateEventHub.json: %v", err)
	}
	// Response check
	{
		exampleRes := armtimeseriesinsights.EventSourcesClientCreateOrUpdateResponse{
			&armtimeseriesinsights.EventHubEventSourceResource{
				Name:     to.Ptr("es1"),
				Type:     to.Ptr("Microsoft.TimeSeriesInsights/Environments/EventSources"),
				ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.TimeSeriesInsights/Environments/env1/eventSources/es1"),
				Location: to.Ptr("West US"),
				Tags:     map[string]*string{},
				Kind:     to.Ptr(armtimeseriesinsights.EventSourceResourceKindMicrosoftEventHub),
				Properties: &armtimeseriesinsights.EventHubEventSourceResourceProperties{
					CreationTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-18T19:20:33.2288820Z"); return t }()),
					ProvisioningState: to.Ptr(armtimeseriesinsights.ProvisioningStateSucceeded),
					IngressStartAt: &armtimeseriesinsights.IngressStartAtProperties{
						Type: to.Ptr(armtimeseriesinsights.IngressStartAtTypeEarliestAvailable),
					},
					LocalTimestamp: &armtimeseriesinsights.LocalTimestamp{
						Format: to.Ptr(armtimeseriesinsights.LocalTimestampFormat("TimeSpan")),
						TimeZoneOffset: &armtimeseriesinsights.LocalTimestampTimeZoneOffset{
							PropertyName: to.Ptr("someEventPropertyName"),
						},
					},
					EventSourceResourceID: to.Ptr("somePathInArm"),
					ConsumerGroupName:     to.Ptr("cgn"),
					EventHubName:          to.Ptr("ehn"),
					KeyName:               to.Ptr("managementKey"),
					ServiceBusNamespace:   to.Ptr("sbn"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/timeseriesinsights/resource-manager/Microsoft.TimeSeriesInsights/preview/2021-03-31-preview/examples/EventSourcesCreateEventHub.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/timeseriesinsights/resource-manager/Microsoft.TimeSeriesInsights/preview/2021-03-31-preview/examples/EventSourcesCreateEventHubWithCustomEnquedTime.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"EventSourcesCreateEventHubWithCustomEnquedTime"},
	})
	client = armtimeseriesinsights.NewEventSourcesClient("subid", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"rg1",
		"env1",
		"es1",
		&armtimeseriesinsights.EventHubEventSourceCreateOrUpdateParameters{
			Location: to.Ptr("West US"),
			Kind:     to.Ptr(armtimeseriesinsights.EventSourceKindMicrosoftEventHub),
			Properties: &armtimeseriesinsights.EventHubEventSourceCreationProperties{
				IngressStartAt: &armtimeseriesinsights.IngressStartAtProperties{
					Type: to.Ptr(armtimeseriesinsights.IngressStartAtTypeCustomEnqueuedTime),
					Time: to.Ptr("2017-04-01T19:20:33.2288820Z"),
				},
				TimestampPropertyName: to.Ptr("someTimestampProperty"),
				EventSourceResourceID: to.Ptr("somePathInArm"),
				ConsumerGroupName:     to.Ptr("cgn"),
				EventHubName:          to.Ptr("ehn"),
				KeyName:               to.Ptr("managementKey"),
				ServiceBusNamespace:   to.Ptr("sbn"),
				SharedAccessKey:       to.Ptr("someSecretvalue"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/timeseriesinsights/resource-manager/Microsoft.TimeSeriesInsights/preview/2021-03-31-preview/examples/EventSourcesCreateEventHubWithCustomEnquedTime.json: %v", err)
	}
	// Response check
	{
		exampleRes := armtimeseriesinsights.EventSourcesClientCreateOrUpdateResponse{
			&armtimeseriesinsights.EventHubEventSourceResource{
				Name:     to.Ptr("es1"),
				Type:     to.Ptr("Microsoft.TimeSeriesInsights/Environments/EventSources"),
				ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.TimeSeriesInsights/Environments/env1/eventSources/es1"),
				Location: to.Ptr("West US"),
				Tags:     map[string]*string{},
				Kind:     to.Ptr(armtimeseriesinsights.EventSourceResourceKindMicrosoftEventHub),
				Properties: &armtimeseriesinsights.EventHubEventSourceResourceProperties{
					CreationTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-18T19:20:33.2288820Z"); return t }()),
					ProvisioningState: to.Ptr(armtimeseriesinsights.ProvisioningStateSucceeded),
					IngressStartAt: &armtimeseriesinsights.IngressStartAtProperties{
						Type: to.Ptr(armtimeseriesinsights.IngressStartAtTypeCustomEnqueuedTime),
						Time: to.Ptr("2017-04-01T19:20:33.2288820Z"),
					},
					EventSourceResourceID: to.Ptr("somePathInArm"),
					ConsumerGroupName:     to.Ptr("cgn"),
					EventHubName:          to.Ptr("ehn"),
					KeyName:               to.Ptr("managementKey"),
					ServiceBusNamespace:   to.Ptr("sbn"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/timeseriesinsights/resource-manager/Microsoft.TimeSeriesInsights/preview/2021-03-31-preview/examples/EventSourcesCreateEventHubWithCustomEnquedTime.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestEventSources_Get(t *testing.T) {
	// From example specification/timeseriesinsights/resource-manager/Microsoft.TimeSeriesInsights/preview/2021-03-31-preview/examples/EventSourcesGetEventHub.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetEventHubEventSource"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armtimeseriesinsights.NewEventSourcesClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"env1",
		"es1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/timeseriesinsights/resource-manager/Microsoft.TimeSeriesInsights/preview/2021-03-31-preview/examples/EventSourcesGetEventHub.json: %v", err)
	}
	// Response check
	{
		exampleRes := armtimeseriesinsights.EventSourcesClientGetResponse{
			&armtimeseriesinsights.EventHubEventSourceResource{
				Name:     to.Ptr("es1"),
				Type:     to.Ptr("Microsoft.TimeSeriesInsights/Environments/EventSources"),
				ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.TimeSeriesInsights/Environments/env1/eventSources/es1"),
				Location: to.Ptr("West US"),
				Tags:     map[string]*string{},
				Kind:     to.Ptr(armtimeseriesinsights.EventSourceResourceKindMicrosoftEventHub),
				Properties: &armtimeseriesinsights.EventHubEventSourceResourceProperties{
					CreationTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-18T19:20:33.2288820Z"); return t }()),
					ProvisioningState: to.Ptr(armtimeseriesinsights.ProvisioningStateSucceeded),
					IngressStartAt: &armtimeseriesinsights.IngressStartAtProperties{
						Type: to.Ptr(armtimeseriesinsights.IngressStartAtTypeEarliestAvailable),
					},
					LocalTimestamp: &armtimeseriesinsights.LocalTimestamp{
						Format: to.Ptr(armtimeseriesinsights.LocalTimestampFormat("TimeSpan")),
						TimeZoneOffset: &armtimeseriesinsights.LocalTimestampTimeZoneOffset{
							PropertyName: to.Ptr("someEventPropertyName"),
						},
					},
					EventSourceResourceID: to.Ptr("somePathInArm"),
					ConsumerGroupName:     to.Ptr("cgn"),
					EventHubName:          to.Ptr("ehn"),
					KeyName:               to.Ptr("managementKey"),
					ServiceBusNamespace:   to.Ptr("sbn"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/timeseriesinsights/resource-manager/Microsoft.TimeSeriesInsights/preview/2021-03-31-preview/examples/EventSourcesGetEventHub.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestEventSources_Update(t *testing.T) {
	// From example specification/timeseriesinsights/resource-manager/Microsoft.TimeSeriesInsights/preview/2021-03-31-preview/examples/EventSourcesPatchTags.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"UpdateEventSource"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armtimeseriesinsights.NewEventSourcesClient("subid", cred, &options)
	res, err := client.Update(ctx,
		"rg1",
		"env1",
		"es1",
		&armtimeseriesinsights.EventSourceUpdateParameters{
			Tags: map[string]*string{
				"someKey": to.Ptr("someValue"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/timeseriesinsights/resource-manager/Microsoft.TimeSeriesInsights/preview/2021-03-31-preview/examples/EventSourcesPatchTags.json: %v", err)
	}
	// Response check
	{
		exampleRes := armtimeseriesinsights.EventSourcesClientUpdateResponse{
			&armtimeseriesinsights.EventHubEventSourceResource{
				Name:     to.Ptr("es1"),
				Type:     to.Ptr("Microsoft.TimeSeriesInsights/Environments/EventSources"),
				ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.TimeSeriesInsights/Environments/env1/eventSources/es1"),
				Location: to.Ptr("West US"),
				Tags: map[string]*string{
					"someKey": to.Ptr("someValue"),
				},
				Kind: to.Ptr(armtimeseriesinsights.EventSourceResourceKindMicrosoftEventHub),
				Properties: &armtimeseriesinsights.EventHubEventSourceResourceProperties{
					CreationTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-18T19:20:33.2288820Z"); return t }()),
					ProvisioningState: to.Ptr(armtimeseriesinsights.ProvisioningStateSucceeded),
					IngressStartAt: &armtimeseriesinsights.IngressStartAtProperties{
						Type: to.Ptr(armtimeseriesinsights.IngressStartAtTypeEarliestAvailable),
					},
					LocalTimestamp: &armtimeseriesinsights.LocalTimestamp{
						Format: to.Ptr(armtimeseriesinsights.LocalTimestampFormat("TimeSpan")),
						TimeZoneOffset: &armtimeseriesinsights.LocalTimestampTimeZoneOffset{
							PropertyName: to.Ptr("someEventPropertyName"),
						},
					},
					TimestampPropertyName: to.Ptr("someOtherTimestampProperty"),
					EventSourceResourceID: to.Ptr("somePathInArm"),
					ConsumerGroupName:     to.Ptr("cgn"),
					EventHubName:          to.Ptr("ehn"),
					KeyName:               to.Ptr("managementKey"),
					ServiceBusNamespace:   to.Ptr("sbn"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/timeseriesinsights/resource-manager/Microsoft.TimeSeriesInsights/preview/2021-03-31-preview/examples/EventSourcesPatchTags.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestEventSources_Delete(t *testing.T) {
	// From example specification/timeseriesinsights/resource-manager/Microsoft.TimeSeriesInsights/preview/2021-03-31-preview/examples/EventSourcesDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DeleteEventSource"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armtimeseriesinsights.NewEventSourcesClient("subid", cred, &options)
	_, err := client.Delete(ctx,
		"rg1",
		"env1",
		"es1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/timeseriesinsights/resource-manager/Microsoft.TimeSeriesInsights/preview/2021-03-31-preview/examples/EventSourcesDelete.json: %v", err)
	}
}

func TestEventSources_ListByEnvironment(t *testing.T) {
	// From example specification/timeseriesinsights/resource-manager/Microsoft.TimeSeriesInsights/preview/2021-03-31-preview/examples/EventSourcesListByEnvironment.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ListEventSourcesByEnvironment"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armtimeseriesinsights.NewEventSourcesClient("subid", cred, &options)
	res, err := client.ListByEnvironment(ctx,
		"rg1",
		"env1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/timeseriesinsights/resource-manager/Microsoft.TimeSeriesInsights/preview/2021-03-31-preview/examples/EventSourcesListByEnvironment.json: %v", err)
	}
	// Response check
	{
		exampleRes := armtimeseriesinsights.EventSourceListResponse{
			Value: []armtimeseriesinsights.EventSourceResourceClassification{
				&armtimeseriesinsights.EventHubEventSourceResource{
					Name:     to.Ptr("es1"),
					Type:     to.Ptr("Microsoft.TimeSeriesInsights/Environments/EventSources"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.TimeSeriesInsights/Environments/env1/eventSources/es1"),
					Location: to.Ptr("West US"),
					Tags:     map[string]*string{},
					Kind:     to.Ptr(armtimeseriesinsights.EventSourceResourceKindMicrosoftEventHub),
					Properties: &armtimeseriesinsights.EventHubEventSourceResourceProperties{
						CreationTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-18T19:20:33.2288820Z"); return t }()),
						ProvisioningState: to.Ptr(armtimeseriesinsights.ProvisioningStateSucceeded),
						IngressStartAt: &armtimeseriesinsights.IngressStartAtProperties{
							Type: to.Ptr(armtimeseriesinsights.IngressStartAtTypeEarliestAvailable),
						},
						LocalTimestamp: &armtimeseriesinsights.LocalTimestamp{
							Format: to.Ptr(armtimeseriesinsights.LocalTimestampFormat("TimeSpan")),
							TimeZoneOffset: &armtimeseriesinsights.LocalTimestampTimeZoneOffset{
								PropertyName: to.Ptr("someEventPropertyName"),
							},
						},
						EventSourceResourceID: to.Ptr("somePathInArm"),
						ConsumerGroupName:     to.Ptr("cgn"),
						EventHubName:          to.Ptr("ehn"),
						KeyName:               to.Ptr("managementKey"),
						ServiceBusNamespace:   to.Ptr("sbn"),
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.EventSourceListResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.EventSourceListResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/timeseriesinsights/resource-manager/Microsoft.TimeSeriesInsights/preview/2021-03-31-preview/examples/EventSourcesListByEnvironment.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReferenceDataSets_CreateOrUpdate(t *testing.T) {
	// From example specification/timeseriesinsights/resource-manager/Microsoft.TimeSeriesInsights/preview/2021-03-31-preview/examples/ReferenceDataSetsCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ReferenceDataSetsCreate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armtimeseriesinsights.NewReferenceDataSetsClient("subid", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"rg1",
		"env1",
		"rds1",
		armtimeseriesinsights.ReferenceDataSetCreateOrUpdateParameters{
			Location: to.Ptr("West US"),
			Properties: &armtimeseriesinsights.ReferenceDataSetCreationProperties{
				KeyProperties: []*armtimeseriesinsights.ReferenceDataSetKeyProperty{
					{
						Name: to.Ptr("DeviceId1"),
						Type: to.Ptr(armtimeseriesinsights.ReferenceDataKeyPropertyTypeString),
					},
					{
						Name: to.Ptr("DeviceFloor"),
						Type: to.Ptr(armtimeseriesinsights.ReferenceDataKeyPropertyTypeDouble),
					}},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/timeseriesinsights/resource-manager/Microsoft.TimeSeriesInsights/preview/2021-03-31-preview/examples/ReferenceDataSetsCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armtimeseriesinsights.ReferenceDataSetResource{
			Name:     to.Ptr("rds1"),
			Type:     to.Ptr("Microsoft.TimeSeriesInsights/Environments/ReferenceDataSets"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.TimeSeriesInsights/Environments/env1/referenceDataSets/rds1"),
			Location: to.Ptr("West US"),
			Tags:     map[string]*string{},
			Properties: &armtimeseriesinsights.ReferenceDataSetResourceProperties{
				KeyProperties: []*armtimeseriesinsights.ReferenceDataSetKeyProperty{
					{
						Name: to.Ptr("DeviceId1"),
						Type: to.Ptr(armtimeseriesinsights.ReferenceDataKeyPropertyTypeString),
					},
					{
						Name: to.Ptr("DeviceFloor"),
						Type: to.Ptr(armtimeseriesinsights.ReferenceDataKeyPropertyTypeDouble),
					}},
				CreationTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-18T19:20:33.2288820Z"); return t }()),
				ProvisioningState: to.Ptr(armtimeseriesinsights.ProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ReferenceDataSetResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ReferenceDataSetResource)
			t.Fatalf("Mock response is not equal to example response for example specification/timeseriesinsights/resource-manager/Microsoft.TimeSeriesInsights/preview/2021-03-31-preview/examples/ReferenceDataSetsCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReferenceDataSets_Get(t *testing.T) {
	// From example specification/timeseriesinsights/resource-manager/Microsoft.TimeSeriesInsights/preview/2021-03-31-preview/examples/ReferenceDataSetsGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ReferenceDataSetsGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armtimeseriesinsights.NewReferenceDataSetsClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"env1",
		"rds1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/timeseriesinsights/resource-manager/Microsoft.TimeSeriesInsights/preview/2021-03-31-preview/examples/ReferenceDataSetsGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armtimeseriesinsights.ReferenceDataSetResource{
			Name:     to.Ptr("rds1"),
			Type:     to.Ptr("Microsoft.TimeSeriesInsights/Environments/ReferenceDataSets"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.TimeSeriesInsights/Environments/env1/referenceDataSets/rds1"),
			Location: to.Ptr("West US"),
			Tags:     map[string]*string{},
			Properties: &armtimeseriesinsights.ReferenceDataSetResourceProperties{
				KeyProperties: []*armtimeseriesinsights.ReferenceDataSetKeyProperty{
					{
						Name: to.Ptr("DeviceId1"),
						Type: to.Ptr(armtimeseriesinsights.ReferenceDataKeyPropertyTypeString),
					},
					{
						Name: to.Ptr("DeviceFloor"),
						Type: to.Ptr(armtimeseriesinsights.ReferenceDataKeyPropertyTypeDouble),
					}},
				CreationTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-18T19:20:33.2288820Z"); return t }()),
				ProvisioningState: to.Ptr(armtimeseriesinsights.ProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ReferenceDataSetResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ReferenceDataSetResource)
			t.Fatalf("Mock response is not equal to example response for example specification/timeseriesinsights/resource-manager/Microsoft.TimeSeriesInsights/preview/2021-03-31-preview/examples/ReferenceDataSetsGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReferenceDataSets_Update(t *testing.T) {
	// From example specification/timeseriesinsights/resource-manager/Microsoft.TimeSeriesInsights/preview/2021-03-31-preview/examples/ReferenceDataSetsPatchTags.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ReferenceDataSetsUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armtimeseriesinsights.NewReferenceDataSetsClient("subid", cred, &options)
	res, err := client.Update(ctx,
		"rg1",
		"env1",
		"rds1",
		armtimeseriesinsights.ReferenceDataSetUpdateParameters{
			Tags: map[string]*string{
				"someKey": to.Ptr("someValue"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/timeseriesinsights/resource-manager/Microsoft.TimeSeriesInsights/preview/2021-03-31-preview/examples/ReferenceDataSetsPatchTags.json: %v", err)
	}
	// Response check
	{
		exampleRes := armtimeseriesinsights.ReferenceDataSetResource{
			Name:     to.Ptr("rds1"),
			Type:     to.Ptr("Microsoft.TimeSeriesInsights/Environments/ReferenceDataSets"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.TimeSeriesInsights/Environments/env1/referenceDataSets/rds1"),
			Location: to.Ptr("West US"),
			Tags: map[string]*string{
				"someKey": to.Ptr("someValue"),
			},
			Properties: &armtimeseriesinsights.ReferenceDataSetResourceProperties{
				KeyProperties: []*armtimeseriesinsights.ReferenceDataSetKeyProperty{
					{
						Name: to.Ptr("DeviceId1"),
						Type: to.Ptr(armtimeseriesinsights.ReferenceDataKeyPropertyTypeString),
					},
					{
						Name: to.Ptr("DeviceFloor"),
						Type: to.Ptr(armtimeseriesinsights.ReferenceDataKeyPropertyTypeDouble),
					}},
				CreationTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-18T19:20:33.2288820Z"); return t }()),
				ProvisioningState: to.Ptr(armtimeseriesinsights.ProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ReferenceDataSetResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ReferenceDataSetResource)
			t.Fatalf("Mock response is not equal to example response for example specification/timeseriesinsights/resource-manager/Microsoft.TimeSeriesInsights/preview/2021-03-31-preview/examples/ReferenceDataSetsPatchTags.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReferenceDataSets_Delete(t *testing.T) {
	// From example specification/timeseriesinsights/resource-manager/Microsoft.TimeSeriesInsights/preview/2021-03-31-preview/examples/ReferenceDataSetsDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ReferenceDataSetsDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armtimeseriesinsights.NewReferenceDataSetsClient("subid", cred, &options)
	_, err := client.Delete(ctx,
		"rg1",
		"env1",
		"rds1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/timeseriesinsights/resource-manager/Microsoft.TimeSeriesInsights/preview/2021-03-31-preview/examples/ReferenceDataSetsDelete.json: %v", err)
	}
}

func TestReferenceDataSets_ListByEnvironment(t *testing.T) {
	// From example specification/timeseriesinsights/resource-manager/Microsoft.TimeSeriesInsights/preview/2021-03-31-preview/examples/ReferenceDataSetsListByEnvironment.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ReferenceDataSetsListByEnvironment"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armtimeseriesinsights.NewReferenceDataSetsClient("subid", cred, &options)
	res, err := client.ListByEnvironment(ctx,
		"rg1",
		"env1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/timeseriesinsights/resource-manager/Microsoft.TimeSeriesInsights/preview/2021-03-31-preview/examples/ReferenceDataSetsListByEnvironment.json: %v", err)
	}
	// Response check
	{
		exampleRes := armtimeseriesinsights.ReferenceDataSetListResponse{
			Value: []*armtimeseriesinsights.ReferenceDataSetResource{
				{
					Name:     to.Ptr("rds1"),
					Type:     to.Ptr("Microsoft.TimeSeriesInsights/Environments/ReferenceDataSets"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.TimeSeriesInsights/Environments/env1/referenceDataSets/rds1"),
					Location: to.Ptr("West US"),
					Tags:     map[string]*string{},
					Properties: &armtimeseriesinsights.ReferenceDataSetResourceProperties{
						KeyProperties: []*armtimeseriesinsights.ReferenceDataSetKeyProperty{
							{
								Name: to.Ptr("DeviceId1"),
								Type: to.Ptr(armtimeseriesinsights.ReferenceDataKeyPropertyTypeString),
							},
							{
								Name: to.Ptr("DeviceFloor"),
								Type: to.Ptr(armtimeseriesinsights.ReferenceDataKeyPropertyTypeDouble),
							}},
						CreationTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-18T19:20:33.2288820Z"); return t }()),
						ProvisioningState: to.Ptr(armtimeseriesinsights.ProvisioningStateSucceeded),
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.ReferenceDataSetListResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ReferenceDataSetListResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/timeseriesinsights/resource-manager/Microsoft.TimeSeriesInsights/preview/2021-03-31-preview/examples/ReferenceDataSetsListByEnvironment.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAccessPolicies_CreateOrUpdate(t *testing.T) {
	// From example specification/timeseriesinsights/resource-manager/Microsoft.TimeSeriesInsights/preview/2021-03-31-preview/examples/AccessPoliciesCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AccessPoliciesCreate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armtimeseriesinsights.NewAccessPoliciesClient("subid", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"rg1",
		"env1",
		"ap1",
		armtimeseriesinsights.AccessPolicyCreateOrUpdateParameters{
			Properties: &armtimeseriesinsights.AccessPolicyResourceProperties{
				Description:       to.Ptr("some description"),
				PrincipalObjectID: to.Ptr("aGuid"),
				Roles: []*armtimeseriesinsights.AccessPolicyRole{
					to.Ptr(armtimeseriesinsights.AccessPolicyRoleReader)},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/timeseriesinsights/resource-manager/Microsoft.TimeSeriesInsights/preview/2021-03-31-preview/examples/AccessPoliciesCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armtimeseriesinsights.AccessPolicyResource{
			Name: to.Ptr("ap1"),
			Type: to.Ptr("Microsoft.TimeSeriesInsights/Environments/AccessPolicies"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.TimeSeriesInsights/Environments/env1/accessPolicies/ap1"),
			Properties: &armtimeseriesinsights.AccessPolicyResourceProperties{
				Description:       to.Ptr("some description"),
				PrincipalObjectID: to.Ptr("aGuid"),
				Roles: []*armtimeseriesinsights.AccessPolicyRole{
					to.Ptr(armtimeseriesinsights.AccessPolicyRoleReader)},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AccessPolicyResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AccessPolicyResource)
			t.Fatalf("Mock response is not equal to example response for example specification/timeseriesinsights/resource-manager/Microsoft.TimeSeriesInsights/preview/2021-03-31-preview/examples/AccessPoliciesCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAccessPolicies_Get(t *testing.T) {
	// From example specification/timeseriesinsights/resource-manager/Microsoft.TimeSeriesInsights/preview/2021-03-31-preview/examples/AccessPoliciesGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AccessPoliciesGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armtimeseriesinsights.NewAccessPoliciesClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"env1",
		"ap1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/timeseriesinsights/resource-manager/Microsoft.TimeSeriesInsights/preview/2021-03-31-preview/examples/AccessPoliciesGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armtimeseriesinsights.AccessPolicyResource{
			Name: to.Ptr("ap1"),
			Type: to.Ptr("Microsoft.TimeSeriesInsights/Environments/AccessPolicies"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.TimeSeriesInsights/Environments/env1/accessPolicies/ap1"),
			Properties: &armtimeseriesinsights.AccessPolicyResourceProperties{
				Description:       to.Ptr("some description"),
				PrincipalObjectID: to.Ptr("aGuid"),
				Roles: []*armtimeseriesinsights.AccessPolicyRole{
					to.Ptr(armtimeseriesinsights.AccessPolicyRoleReader)},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AccessPolicyResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AccessPolicyResource)
			t.Fatalf("Mock response is not equal to example response for example specification/timeseriesinsights/resource-manager/Microsoft.TimeSeriesInsights/preview/2021-03-31-preview/examples/AccessPoliciesGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAccessPolicies_Update(t *testing.T) {
	// From example specification/timeseriesinsights/resource-manager/Microsoft.TimeSeriesInsights/preview/2021-03-31-preview/examples/AccessPoliciesPatchRoles.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AccessPoliciesUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armtimeseriesinsights.NewAccessPoliciesClient("subid", cred, &options)
	res, err := client.Update(ctx,
		"rg1",
		"env1",
		"ap1",
		armtimeseriesinsights.AccessPolicyUpdateParameters{
			Properties: &armtimeseriesinsights.AccessPolicyMutableProperties{
				Roles: []*armtimeseriesinsights.AccessPolicyRole{
					to.Ptr(armtimeseriesinsights.AccessPolicyRoleReader),
					to.Ptr(armtimeseriesinsights.AccessPolicyRoleContributor)},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/timeseriesinsights/resource-manager/Microsoft.TimeSeriesInsights/preview/2021-03-31-preview/examples/AccessPoliciesPatchRoles.json: %v", err)
	}
	// Response check
	{
		exampleRes := armtimeseriesinsights.AccessPolicyResource{
			Name: to.Ptr("ap1"),
			Type: to.Ptr("Microsoft.TimeSeriesInsights/Environments/AccessPolicies"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.TimeSeriesInsights/Environments/env1/accessPolicies/ap1"),
			Properties: &armtimeseriesinsights.AccessPolicyResourceProperties{
				Description:       to.Ptr("some description"),
				PrincipalObjectID: to.Ptr("aGuid"),
				Roles: []*armtimeseriesinsights.AccessPolicyRole{
					to.Ptr(armtimeseriesinsights.AccessPolicyRoleReader)},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AccessPolicyResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AccessPolicyResource)
			t.Fatalf("Mock response is not equal to example response for example specification/timeseriesinsights/resource-manager/Microsoft.TimeSeriesInsights/preview/2021-03-31-preview/examples/AccessPoliciesPatchRoles.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAccessPolicies_Delete(t *testing.T) {
	// From example specification/timeseriesinsights/resource-manager/Microsoft.TimeSeriesInsights/preview/2021-03-31-preview/examples/AccessPoliciesDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AccessPoliciesDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armtimeseriesinsights.NewAccessPoliciesClient("subid", cred, &options)
	_, err := client.Delete(ctx,
		"rg1",
		"env1",
		"ap1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/timeseriesinsights/resource-manager/Microsoft.TimeSeriesInsights/preview/2021-03-31-preview/examples/AccessPoliciesDelete.json: %v", err)
	}
}

func TestAccessPolicies_ListByEnvironment(t *testing.T) {
	// From example specification/timeseriesinsights/resource-manager/Microsoft.TimeSeriesInsights/preview/2021-03-31-preview/examples/AccessPoliciesListByEnvironment.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AccessPoliciesByEnvironment"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armtimeseriesinsights.NewAccessPoliciesClient("subid", cred, &options)
	res, err := client.ListByEnvironment(ctx,
		"rg1",
		"env1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/timeseriesinsights/resource-manager/Microsoft.TimeSeriesInsights/preview/2021-03-31-preview/examples/AccessPoliciesListByEnvironment.json: %v", err)
	}
	// Response check
	{
		exampleRes := armtimeseriesinsights.AccessPolicyListResponse{
			Value: []*armtimeseriesinsights.AccessPolicyResource{
				{
					Name: to.Ptr("ap1"),
					Type: to.Ptr("Microsoft.TimeSeriesInsights/Environments/AccessPolicies"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.TimeSeriesInsights/Environments/env1/accessPolicies/ap1"),
					Properties: &armtimeseriesinsights.AccessPolicyResourceProperties{
						Description:       to.Ptr("some description"),
						PrincipalObjectID: to.Ptr("aGuid"),
						Roles: []*armtimeseriesinsights.AccessPolicyRole{
							to.Ptr(armtimeseriesinsights.AccessPolicyRoleReader)},
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.AccessPolicyListResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AccessPolicyListResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/timeseriesinsights/resource-manager/Microsoft.TimeSeriesInsights/preview/2021-03-31-preview/examples/AccessPoliciesListByEnvironment.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnections_CreateOrUpdate(t *testing.T) {
	// From example specification/timeseriesinsights/resource-manager/Microsoft.TimeSeriesInsights/preview/2021-03-31-preview/examples/PrivateEndpointConnectionUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateEndpointConnectionUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armtimeseriesinsights.NewPrivateEndpointConnectionsClient("mySubscriptionId", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"myResourceGroup",
		"myEnvironment",
		"myPrivateEndpointConnectionName",
		armtimeseriesinsights.PrivateEndpointConnection{
			Properties: &armtimeseriesinsights.PrivateEndpointConnectionProperties{
				PrivateLinkServiceConnectionState: &armtimeseriesinsights.PrivateLinkServiceConnectionState{
					Description: to.Ptr("Rejected for some reason"),
					Status:      to.Ptr(armtimeseriesinsights.PrivateEndpointServiceConnectionStatusRejected),
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/timeseriesinsights/resource-manager/Microsoft.TimeSeriesInsights/preview/2021-03-31-preview/examples/PrivateEndpointConnectionUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armtimeseriesinsights.PrivateEndpointConnection{
			Name: to.Ptr("myPrivateEndpointConnectionName"),
			Type: to.Ptr("Microsoft.TimeSeriesInsights/Environments/privateEndpointConnections"),
			ID:   to.Ptr("/subscriptions/mySubscriptionId/resourceGroups/myResourceGroup/providers/Microsoft.TimeSeriesInsights/Environments/myEnvironment/privateEndpointConnections/myPrivateEndpointConnectionName"),
			Properties: &armtimeseriesinsights.PrivateEndpointConnectionProperties{
				PrivateEndpoint: &armtimeseriesinsights.PrivateEndpoint{
					ID: to.Ptr("/subscriptions/mySubscriptionId/resourceGroups/myResourceGroup/providers/Microsoft.Network/privateEndpoints/testEndpoint"),
				},
				PrivateLinkServiceConnectionState: &armtimeseriesinsights.PrivateLinkServiceConnectionState{
					Description:     to.Ptr("Rejected for some reason"),
					ActionsRequired: to.Ptr("None"),
					Status:          to.Ptr(armtimeseriesinsights.PrivateEndpointServiceConnectionStatusRejected),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateEndpointConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/timeseriesinsights/resource-manager/Microsoft.TimeSeriesInsights/preview/2021-03-31-preview/examples/PrivateEndpointConnectionUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnections_Get(t *testing.T) {
	// From example specification/timeseriesinsights/resource-manager/Microsoft.TimeSeriesInsights/preview/2021-03-31-preview/examples/PrivateEndpointConnectionGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateEndpointConnectionGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armtimeseriesinsights.NewPrivateEndpointConnectionsClient("mySubscriptionId", cred, &options)
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myEnvironment",
		"myPrivateEndpointConnectionName",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/timeseriesinsights/resource-manager/Microsoft.TimeSeriesInsights/preview/2021-03-31-preview/examples/PrivateEndpointConnectionGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armtimeseriesinsights.PrivateEndpointConnection{
			Name: to.Ptr("myPrivateEndpointConnectionName"),
			Type: to.Ptr("Microsoft.TimeSeriesInsights/Environments/privateEndpointConnections"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.TimeSeriesInsights/Environments/env1/privateEndpointConnections/myPrivateEndpointConnectionName"),
			Properties: &armtimeseriesinsights.PrivateEndpointConnectionProperties{
				PrivateEndpoint: &armtimeseriesinsights.PrivateEndpoint{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/privateEndpoints/myPrivateEndpoint"),
				},
				PrivateLinkServiceConnectionState: &armtimeseriesinsights.PrivateLinkServiceConnectionState{
					Description: to.Ptr(""),
					Status:      to.Ptr(armtimeseriesinsights.PrivateEndpointServiceConnectionStatusApproved),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateEndpointConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/timeseriesinsights/resource-manager/Microsoft.TimeSeriesInsights/preview/2021-03-31-preview/examples/PrivateEndpointConnectionGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnections_Delete(t *testing.T) {
	// From example specification/timeseriesinsights/resource-manager/Microsoft.TimeSeriesInsights/preview/2021-03-31-preview/examples/PrivateEndpointConnectionDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateEndpointConnectionDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armtimeseriesinsights.NewPrivateEndpointConnectionsClient("mySubscriptionId", cred, &options)
	_, err := client.Delete(ctx,
		"myResourceGroup",
		"myEnvironment",
		"myPrivateEndpointConnectionName",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/timeseriesinsights/resource-manager/Microsoft.TimeSeriesInsights/preview/2021-03-31-preview/examples/PrivateEndpointConnectionDelete.json: %v", err)
	}
}

func TestPrivateEndpointConnections_ListByEnvironment(t *testing.T) {
	// From example specification/timeseriesinsights/resource-manager/Microsoft.TimeSeriesInsights/preview/2021-03-31-preview/examples/PrivateEndpointConnectionsListByEnvironment.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ListPrivateEndpointConnectionsByService"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armtimeseriesinsights.NewPrivateEndpointConnectionsClient("mySubscriptionId", cred, &options)
	res, err := client.ListByEnvironment(ctx,
		"myResourceGroup",
		"myEnvironment",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/timeseriesinsights/resource-manager/Microsoft.TimeSeriesInsights/preview/2021-03-31-preview/examples/PrivateEndpointConnectionsListByEnvironment.json: %v", err)
	}
	// Response check
	{
		exampleRes := armtimeseriesinsights.PrivateEndpointConnectionListResult{
			Value: []*armtimeseriesinsights.PrivateEndpointConnection{
				{
					Name: to.Ptr("testEndpoint.50bf4fbe-d7c1-4b48-a642-4f5892642546"),
					Type: to.Ptr("Microsoft.TimeSeriesInsights/Environments/privateEndpointConnections"),
					ID:   to.Ptr("/subscriptions/mySubscriptionId/resourceGroups/myResourceGroup/providers/Microsoft.TimeSeriesInsights/Environments/myEnvironment/privateEndpointConnections/myPrivateEndpointConnection"),
					Properties: &armtimeseriesinsights.PrivateEndpointConnectionProperties{
						PrivateEndpoint: &armtimeseriesinsights.PrivateEndpoint{
							ID: to.Ptr("/subscriptions/mySubscriptionId/resourceGroups/myResourceGroup/providers/Microsoft.Network/privateEndpoints/myPrivateEndpoint"),
						},
						PrivateLinkServiceConnectionState: &armtimeseriesinsights.PrivateLinkServiceConnectionState{
							Description: to.Ptr(""),
							Status:      to.Ptr(armtimeseriesinsights.PrivateEndpointServiceConnectionStatusApproved),
						},
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnectionListResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateEndpointConnectionListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/timeseriesinsights/resource-manager/Microsoft.TimeSeriesInsights/preview/2021-03-31-preview/examples/PrivateEndpointConnectionsListByEnvironment.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateLinkResources_ListSupported(t *testing.T) {
	// From example specification/timeseriesinsights/resource-manager/Microsoft.TimeSeriesInsights/preview/2021-03-31-preview/examples/PrivateLinkResourcesGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ListSupportedPrivateLinkResources"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armtimeseriesinsights.NewPrivateLinkResourcesClient("mySubscriptionId", cred, &options)
	pager := client.ListSupported("myResourceGroup",
		"myEnvironment",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/timeseriesinsights/resource-manager/Microsoft.TimeSeriesInsights/preview/2021-03-31-preview/examples/PrivateLinkResourcesGet.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armtimeseriesinsights.PrivateLinkResourceListResult{
			Value: []*armtimeseriesinsights.PrivateLinkResource{
				{
					Name: to.Ptr("myPrivateLinkResource"),
					Type: to.Ptr("Microsoft.TimeSeriesInsights/Environments/privateLinkResources"),
					ID:   to.Ptr("/subscriptions/mySubscriptionId/resourceGroups/myResourceGroup/providers/Microsoft.TimeSeriesInsights/Environments/myEnvironment/privateLinkResources/myPrivateLinkResource"),
					Properties: &armtimeseriesinsights.PrivateLinkResourceProperties{
						GroupID: to.Ptr("environment"),
						RequiredMembers: []*string{
							to.Ptr("environment"),
							to.Ptr("tsiPortal")},
						RequiredZoneNames: []*string{
							to.Ptr("privatelink.timeseries.azure.com")},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PrivateLinkResourceListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PrivateLinkResourceListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/timeseriesinsights/resource-manager/Microsoft.TimeSeriesInsights/preview/2021-03-31-preview/examples/PrivateLinkResourcesGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
