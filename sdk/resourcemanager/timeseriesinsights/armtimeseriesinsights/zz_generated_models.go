//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armtimeseriesinsights

import (
	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
)

// AccessPoliciesCreateOrUpdateOptions contains the optional parameters for the AccessPolicies.CreateOrUpdate method.
type AccessPoliciesCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// AccessPoliciesDeleteOptions contains the optional parameters for the AccessPolicies.Delete method.
type AccessPoliciesDeleteOptions struct {
	// placeholder for future optional parameters
}

// AccessPoliciesGetOptions contains the optional parameters for the AccessPolicies.Get method.
type AccessPoliciesGetOptions struct {
	// placeholder for future optional parameters
}

// AccessPoliciesListByEnvironmentOptions contains the optional parameters for the AccessPolicies.ListByEnvironment method.
type AccessPoliciesListByEnvironmentOptions struct {
	// placeholder for future optional parameters
}

// AccessPoliciesUpdateOptions contains the optional parameters for the AccessPolicies.Update method.
type AccessPoliciesUpdateOptions struct {
	// placeholder for future optional parameters
}

type AccessPolicyCreateOrUpdateParameters struct {
	// REQUIRED
	Properties *AccessPolicyResourceProperties `json:"properties,omitempty"`
}

// AccessPolicyListResponse - The response of the List access policies operation.
type AccessPolicyListResponse struct {
	// Result of the List access policies operation.
	Value []*AccessPolicyResource `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type AccessPolicyListResponse.
func (a AccessPolicyListResponse) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", a.Value)
	return json.Marshal(objectMap)
}

// AccessPolicyMutableProperties - An object that represents a set of mutable access policy resource properties.
type AccessPolicyMutableProperties struct {
	// An description of the access policy.
	Description *string `json:"description,omitempty"`

	// The list of roles the principal is assigned on the environment.
	Roles []*AccessPolicyRole `json:"roles,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type AccessPolicyMutableProperties.
func (a AccessPolicyMutableProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "description", a.Description)
	populate(objectMap, "roles", a.Roles)
	return json.Marshal(objectMap)
}

// AccessPolicyResource - An access policy is used to grant users and applications access to the environment. Roles are assigned to service principals in
// Azure Active Directory. These roles define the actions the principal can
// perform through the Time Series Insights data plane APIs.
type AccessPolicyResource struct {
	Resource
	Properties *AccessPolicyResourceProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type AccessPolicyResource.
func (a AccessPolicyResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	a.Resource.marshalInternal(objectMap)
	populate(objectMap, "properties", a.Properties)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type AccessPolicyResource.
func (a *AccessPolicyResource) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "properties":
			err = unpopulate(val, &a.Properties)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := a.Resource.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

type AccessPolicyResourceProperties struct {
	// An description of the access policy.
	Description *string `json:"description,omitempty"`

	// The objectId of the principal in Azure Active Directory.
	PrincipalObjectID *string `json:"principalObjectId,omitempty"`

	// The list of roles the principal is assigned on the environment.
	Roles []*AccessPolicyRole `json:"roles,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type AccessPolicyResourceProperties.
func (a AccessPolicyResourceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "description", a.Description)
	populate(objectMap, "principalObjectId", a.PrincipalObjectID)
	populate(objectMap, "roles", a.Roles)
	return json.Marshal(objectMap)
}

type AccessPolicyUpdateParameters struct {
	// An object that represents a set of mutable access policy resource properties.
	Properties *AccessPolicyMutableProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type AccessPolicyUpdateParameters.
func (a AccessPolicyUpdateParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "properties", a.Properties)
	return json.Marshal(objectMap)
}

// AzureEventSourceProperties - Properties of an event source that reads events from an event broker in Azure.
type AzureEventSourceProperties struct {
	EventSourceCommonProperties
	// REQUIRED; The resource id of the event source in Azure Resource Manager.
	EventSourceResourceID *string `json:"eventSourceResourceId,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type AzureEventSourceProperties.
func (a AzureEventSourceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	a.marshalInternal(objectMap)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type AzureEventSourceProperties.
func (a *AzureEventSourceProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	return a.unmarshalInternal(rawMsg)
}

func (a AzureEventSourceProperties) marshalInternal(objectMap map[string]interface{}) {
	a.EventSourceCommonProperties.marshalInternal(objectMap)
	populate(objectMap, "eventSourceResourceId", a.EventSourceResourceID)
}

func (a *AzureEventSourceProperties) unmarshalInternal(rawMsg map[string]json.RawMessage) error {
	for key, val := range rawMsg {
		var err error
		switch key {
		case "eventSourceResourceId":
			err = unpopulate(val, &a.EventSourceResourceID)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := a.EventSourceCommonProperties.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// CloudError - Contains information about an API error.
// Implements the error and azcore.HTTPResponse interfaces.
type CloudError struct {
	raw string
	// Describes a particular API error with an error code and a message.
	InnerError *CloudErrorBody `json:"error,omitempty"`
}

// Error implements the error interface for type CloudError.
// The contents of the error text are not contractual and subject to change.
func (e CloudError) Error() string {
	return e.raw
}

// CloudErrorBody - Describes a particular API error with an error code and a message.
type CloudErrorBody struct {
	// An error code that describes the error condition more precisely than an HTTP status code. Can be used to programmatically handle specific error cases.
	Code *string `json:"code,omitempty"`

	// Contains nested errors that are related to this error.
	Details []*CloudErrorBody `json:"details,omitempty"`

	// A message that describes the error in detail and provides debugging information.
	Message *string `json:"message,omitempty"`

	// The target of the particular error (for example, the name of the property in error).
	Target *string `json:"target,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type CloudErrorBody.
func (c CloudErrorBody) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "code", c.Code)
	populate(objectMap, "details", c.Details)
	populate(objectMap, "message", c.Message)
	populate(objectMap, "target", c.Target)
	return json.Marshal(objectMap)
}

// CreateOrUpdateTrackedResourceProperties - Properties required to create any resource tracked by Azure Resource Manager.
type CreateOrUpdateTrackedResourceProperties struct {
	// REQUIRED; The location of the resource.
	Location *string `json:"location,omitempty"`

	// Key-value pairs of additional properties for the resource.
	Tags map[string]*string `json:"tags,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type CreateOrUpdateTrackedResourceProperties.
func (c CreateOrUpdateTrackedResourceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	c.marshalInternal(objectMap)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type CreateOrUpdateTrackedResourceProperties.
func (c *CreateOrUpdateTrackedResourceProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	return c.unmarshalInternal(rawMsg)
}

func (c CreateOrUpdateTrackedResourceProperties) marshalInternal(objectMap map[string]interface{}) {
	populate(objectMap, "location", c.Location)
	populate(objectMap, "tags", c.Tags)
}

func (c *CreateOrUpdateTrackedResourceProperties) unmarshalInternal(rawMsg map[string]json.RawMessage) error {
	for key, val := range rawMsg {
		var err error
		switch key {
		case "location":
			err = unpopulate(val, &c.Location)
			delete(rawMsg, key)
		case "tags":
			err = unpopulate(val, &c.Tags)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// Dimension of blobs, possibly be blob type or access tier.
type Dimension struct {
	// Display name of dimension.
	DisplayName *string `json:"displayName,omitempty"`

	// Display name of dimension.
	Name *string `json:"name,omitempty"`
}

// EnvironmentCreateOrUpdateParametersClassification provides polymorphic access to related types.
// Call the interface's GetEnvironmentCreateOrUpdateParameters() method to access the common type.
// Use a type switch to determine the concrete type.  The possible types are:
// - *EnvironmentCreateOrUpdateParameters, *Gen1EnvironmentCreateOrUpdateParameters, *Gen2EnvironmentCreateOrUpdateParameters
type EnvironmentCreateOrUpdateParametersClassification interface {
	// GetEnvironmentCreateOrUpdateParameters returns the EnvironmentCreateOrUpdateParameters content of the underlying type.
	GetEnvironmentCreateOrUpdateParameters() *EnvironmentCreateOrUpdateParameters
}

// EnvironmentCreateOrUpdateParameters - Parameters supplied to the CreateOrUpdate Environment operation.
type EnvironmentCreateOrUpdateParameters struct {
	CreateOrUpdateTrackedResourceProperties
	// REQUIRED; The kind of the environment.
	Kind *EnvironmentKind `json:"kind,omitempty"`

	// REQUIRED; The sku determines the type of environment, either Gen1 (S1 or S2) or Gen2 (L1). For Gen1 environments the sku determines the capacity of the
	// environment, the ingress rate, and the billing rate.
	SKU *SKU `json:"sku,omitempty"`
}

// GetEnvironmentCreateOrUpdateParameters implements the EnvironmentCreateOrUpdateParametersClassification interface for type EnvironmentCreateOrUpdateParameters.
func (e *EnvironmentCreateOrUpdateParameters) GetEnvironmentCreateOrUpdateParameters() *EnvironmentCreateOrUpdateParameters {
	return e
}

// UnmarshalJSON implements the json.Unmarshaller interface for type EnvironmentCreateOrUpdateParameters.
func (e *EnvironmentCreateOrUpdateParameters) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	return e.unmarshalInternal(rawMsg)
}

func (e EnvironmentCreateOrUpdateParameters) marshalInternal(objectMap map[string]interface{}, discValue EnvironmentKind) {
	e.CreateOrUpdateTrackedResourceProperties.marshalInternal(objectMap)
	e.Kind = &discValue
	objectMap["kind"] = e.Kind
	populate(objectMap, "sku", e.SKU)
}

func (e *EnvironmentCreateOrUpdateParameters) unmarshalInternal(rawMsg map[string]json.RawMessage) error {
	for key, val := range rawMsg {
		var err error
		switch key {
		case "kind":
			err = unpopulate(val, &e.Kind)
			delete(rawMsg, key)
		case "sku":
			err = unpopulate(val, &e.SKU)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := e.CreateOrUpdateTrackedResourceProperties.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// EnvironmentListResponse - The response of the List Environments operation.
type EnvironmentListResponse struct {
	// Result of the List Environments operation.
	Value []EnvironmentResourceClassification `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type EnvironmentListResponse.
func (e EnvironmentListResponse) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", e.Value)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type EnvironmentListResponse.
func (e *EnvironmentListResponse) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "value":
			e.Value, err = unmarshalEnvironmentResourceClassificationArray(val)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// EnvironmentResourceClassification provides polymorphic access to related types.
// Call the interface's GetEnvironmentResource() method to access the common type.
// Use a type switch to determine the concrete type.  The possible types are:
// - *EnvironmentResource, *Gen1EnvironmentResource, *Gen2EnvironmentResource
type EnvironmentResourceClassification interface {
	// GetEnvironmentResource returns the EnvironmentResource content of the underlying type.
	GetEnvironmentResource() *EnvironmentResource
}

// EnvironmentResource - An environment is a set of time-series data available for query, and is the top level Azure Time Series Insights resource.
type EnvironmentResource struct {
	TrackedResource
	// REQUIRED; The kind of the environment.
	Kind *EnvironmentResourceKind `json:"kind,omitempty"`

	// REQUIRED; The sku determines the type of environment, either Gen1 (S1 or S2) or Gen2 (L1). For Gen1 environments the sku determines the capacity of the
	// environment, the ingress rate, and the billing rate.
	SKU *SKU `json:"sku,omitempty"`
}

// GetEnvironmentResource implements the EnvironmentResourceClassification interface for type EnvironmentResource.
func (e *EnvironmentResource) GetEnvironmentResource() *EnvironmentResource { return e }

// UnmarshalJSON implements the json.Unmarshaller interface for type EnvironmentResource.
func (e *EnvironmentResource) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	return e.unmarshalInternal(rawMsg)
}

func (e EnvironmentResource) marshalInternal(objectMap map[string]interface{}, discValue EnvironmentResourceKind) {
	e.TrackedResource.marshalInternal(objectMap)
	e.Kind = &discValue
	objectMap["kind"] = e.Kind
	populate(objectMap, "sku", e.SKU)
}

func (e *EnvironmentResource) unmarshalInternal(rawMsg map[string]json.RawMessage) error {
	for key, val := range rawMsg {
		var err error
		switch key {
		case "kind":
			err = unpopulate(val, &e.Kind)
			delete(rawMsg, key)
		case "sku":
			err = unpopulate(val, &e.SKU)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := e.TrackedResource.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// EnvironmentResourceProperties - Properties of the environment.
type EnvironmentResourceProperties struct {
	ResourceProperties
	// READ-ONLY; The fully qualified domain name used to access the environment data, e.g. to query the environment's events or upload reference data for the
	// environment.
	DataAccessFqdn *string `json:"dataAccessFqdn,omitempty" azure:"ro"`

	// READ-ONLY; An id used to access the environment data, e.g. to query the environment's events or upload reference data for the environment.
	DataAccessID *string `json:"dataAccessId,omitempty" azure:"ro"`

	// READ-ONLY; An object that represents the status of the environment, and its internal state in the Time Series Insights service.
	Status *EnvironmentStatus `json:"status,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type EnvironmentResourceProperties.
func (e EnvironmentResourceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	e.marshalInternal(objectMap)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type EnvironmentResourceProperties.
func (e *EnvironmentResourceProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	return e.unmarshalInternal(rawMsg)
}

func (e EnvironmentResourceProperties) marshalInternal(objectMap map[string]interface{}) {
	e.ResourceProperties.marshalInternal(objectMap)
	populate(objectMap, "dataAccessFqdn", e.DataAccessFqdn)
	populate(objectMap, "dataAccessId", e.DataAccessID)
	populate(objectMap, "status", e.Status)
}

func (e *EnvironmentResourceProperties) unmarshalInternal(rawMsg map[string]json.RawMessage) error {
	for key, val := range rawMsg {
		var err error
		switch key {
		case "dataAccessFqdn":
			err = unpopulate(val, &e.DataAccessFqdn)
			delete(rawMsg, key)
		case "dataAccessId":
			err = unpopulate(val, &e.DataAccessID)
			delete(rawMsg, key)
		case "status":
			err = unpopulate(val, &e.Status)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := e.ResourceProperties.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// EnvironmentStateDetails - An object that contains the details about an environment's state.
type EnvironmentStateDetails struct {
	// Contains the code that represents the reason of an environment being in a particular state. Can be used to programmatically handle specific cases.
	Code *string `json:"code,omitempty"`

	// A message that describes the state in detail.
	Message *string `json:"message,omitempty"`
}

// EnvironmentStatus - An object that represents the status of the environment, and its internal state in the Time Series Insights service.
type EnvironmentStatus struct {
	// READ-ONLY; An object that represents the status of ingress on an environment.
	Ingress *IngressEnvironmentStatus `json:"ingress,omitempty" azure:"ro"`

	// READ-ONLY; An object that represents the status of warm storage on an environment.
	WarmStorage *WarmStorageEnvironmentStatus `json:"warmStorage,omitempty" azure:"ro"`
}

// EnvironmentUpdateParametersClassification provides polymorphic access to related types.
// Call the interface's GetEnvironmentUpdateParameters() method to access the common type.
// Use a type switch to determine the concrete type.  The possible types are:
// - *EnvironmentUpdateParameters, *Gen1EnvironmentUpdateParameters, *Gen2EnvironmentUpdateParameters
type EnvironmentUpdateParametersClassification interface {
	// GetEnvironmentUpdateParameters returns the EnvironmentUpdateParameters content of the underlying type.
	GetEnvironmentUpdateParameters() *EnvironmentUpdateParameters
}

// EnvironmentUpdateParameters - Parameters supplied to the Update Environment operation.
type EnvironmentUpdateParameters struct {
	// REQUIRED; The kind of the environment.
	Kind *EnvironmentKind `json:"kind,omitempty"`

	// Key-value pairs of additional properties for the environment.
	Tags map[string]*string `json:"tags,omitempty"`
}

// GetEnvironmentUpdateParameters implements the EnvironmentUpdateParametersClassification interface for type EnvironmentUpdateParameters.
func (e *EnvironmentUpdateParameters) GetEnvironmentUpdateParameters() *EnvironmentUpdateParameters {
	return e
}

// UnmarshalJSON implements the json.Unmarshaller interface for type EnvironmentUpdateParameters.
func (e *EnvironmentUpdateParameters) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	return e.unmarshalInternal(rawMsg)
}

func (e EnvironmentUpdateParameters) marshalInternal(objectMap map[string]interface{}, discValue EnvironmentKind) {
	e.Kind = &discValue
	objectMap["kind"] = e.Kind
	populate(objectMap, "tags", e.Tags)
}

func (e *EnvironmentUpdateParameters) unmarshalInternal(rawMsg map[string]json.RawMessage) error {
	for key, val := range rawMsg {
		var err error
		switch key {
		case "kind":
			err = unpopulate(val, &e.Kind)
			delete(rawMsg, key)
		case "tags":
			err = unpopulate(val, &e.Tags)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// EnvironmentsBeginCreateOrUpdateOptions contains the optional parameters for the Environments.BeginCreateOrUpdate method.
type EnvironmentsBeginCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// EnvironmentsBeginUpdateOptions contains the optional parameters for the Environments.BeginUpdate method.
type EnvironmentsBeginUpdateOptions struct {
	// placeholder for future optional parameters
}

// EnvironmentsDeleteOptions contains the optional parameters for the Environments.Delete method.
type EnvironmentsDeleteOptions struct {
	// placeholder for future optional parameters
}

// EnvironmentsGetOptions contains the optional parameters for the Environments.Get method.
type EnvironmentsGetOptions struct {
	// Setting $expand=status will include the status of the internal services of the environment in the Time Series Insights service.
	Expand *string
}

// EnvironmentsListByResourceGroupOptions contains the optional parameters for the Environments.ListByResourceGroup method.
type EnvironmentsListByResourceGroupOptions struct {
	// placeholder for future optional parameters
}

// EnvironmentsListBySubscriptionOptions contains the optional parameters for the Environments.ListBySubscription method.
type EnvironmentsListBySubscriptionOptions struct {
	// placeholder for future optional parameters
}

// EventHubEventSourceCommonProperties - Properties of the EventHub event source.
type EventHubEventSourceCommonProperties struct {
	AzureEventSourceProperties
	// REQUIRED; The name of the event hub's consumer group that holds the partitions from which events will be read.
	ConsumerGroupName *string `json:"consumerGroupName,omitempty"`

	// REQUIRED; The name of the event hub.
	EventHubName *string `json:"eventHubName,omitempty"`

	// REQUIRED; The name of the SAS key that grants the Time Series Insights service access to the event hub. The shared access policies for this key must
	// grant 'Listen' permissions to the event hub.
	KeyName *string `json:"keyName,omitempty"`

	// REQUIRED; The name of the service bus that contains the event hub.
	ServiceBusNamespace *string `json:"serviceBusNamespace,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type EventHubEventSourceCommonProperties.
func (e EventHubEventSourceCommonProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	e.marshalInternal(objectMap)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type EventHubEventSourceCommonProperties.
func (e *EventHubEventSourceCommonProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	return e.unmarshalInternal(rawMsg)
}

func (e EventHubEventSourceCommonProperties) marshalInternal(objectMap map[string]interface{}) {
	e.AzureEventSourceProperties.marshalInternal(objectMap)
	populate(objectMap, "consumerGroupName", e.ConsumerGroupName)
	populate(objectMap, "eventHubName", e.EventHubName)
	populate(objectMap, "keyName", e.KeyName)
	populate(objectMap, "serviceBusNamespace", e.ServiceBusNamespace)
}

func (e *EventHubEventSourceCommonProperties) unmarshalInternal(rawMsg map[string]json.RawMessage) error {
	for key, val := range rawMsg {
		var err error
		switch key {
		case "consumerGroupName":
			err = unpopulate(val, &e.ConsumerGroupName)
			delete(rawMsg, key)
		case "eventHubName":
			err = unpopulate(val, &e.EventHubName)
			delete(rawMsg, key)
		case "keyName":
			err = unpopulate(val, &e.KeyName)
			delete(rawMsg, key)
		case "serviceBusNamespace":
			err = unpopulate(val, &e.ServiceBusNamespace)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := e.AzureEventSourceProperties.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// EventHubEventSourceCreateOrUpdateParameters - Parameters supplied to the Create or Update Event Source operation for an EventHub event source.
type EventHubEventSourceCreateOrUpdateParameters struct {
	EventSourceCreateOrUpdateParameters
	// REQUIRED; Properties of the EventHub event source that are required on create or update requests.
	Properties *EventHubEventSourceCreationProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type EventHubEventSourceCreateOrUpdateParameters.
func (e EventHubEventSourceCreateOrUpdateParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	e.EventSourceCreateOrUpdateParameters.marshalInternal(objectMap, EventSourceKindMicrosoftEventHub)
	populate(objectMap, "properties", e.Properties)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type EventHubEventSourceCreateOrUpdateParameters.
func (e *EventHubEventSourceCreateOrUpdateParameters) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "properties":
			err = unpopulate(val, &e.Properties)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := e.EventSourceCreateOrUpdateParameters.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// EventHubEventSourceCreationProperties - Properties of the EventHub event source that are required on create or update requests.
type EventHubEventSourceCreationProperties struct {
	EventHubEventSourceCommonProperties
	// REQUIRED; The value of the shared access key that grants the Time Series Insights service read access to the event hub. This property is not shown in
	// event source responses.
	SharedAccessKey *string `json:"sharedAccessKey,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type EventHubEventSourceCreationProperties.
func (e EventHubEventSourceCreationProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	e.EventHubEventSourceCommonProperties.marshalInternal(objectMap)
	populate(objectMap, "sharedAccessKey", e.SharedAccessKey)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type EventHubEventSourceCreationProperties.
func (e *EventHubEventSourceCreationProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "sharedAccessKey":
			err = unpopulate(val, &e.SharedAccessKey)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := e.EventHubEventSourceCommonProperties.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// EventHubEventSourceMutableProperties - An object that represents a set of mutable EventHub event source resource properties.
type EventHubEventSourceMutableProperties struct {
	EventSourceMutableProperties
	// The value of the shared access key that grants the Time Series Insights service read access to the event hub. This property is not shown in event source
	// responses.
	SharedAccessKey *string `json:"sharedAccessKey,omitempty"`
}

// EventHubEventSourceResource - An event source that receives its data from an Azure EventHub.
type EventHubEventSourceResource struct {
	EventSourceResource
	// REQUIRED; Properties of the EventHub event source resource.
	Properties *EventHubEventSourceResourceProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type EventHubEventSourceResource.
func (e EventHubEventSourceResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	e.EventSourceResource.marshalInternal(objectMap, EventSourceResourceKindMicrosoftEventHub)
	populate(objectMap, "properties", e.Properties)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type EventHubEventSourceResource.
func (e *EventHubEventSourceResource) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "properties":
			err = unpopulate(val, &e.Properties)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := e.EventSourceResource.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// EventHubEventSourceResourceProperties - Properties of the EventHub event source resource.
type EventHubEventSourceResourceProperties struct {
	EventHubEventSourceCommonProperties
}

// EventHubEventSourceUpdateParameters - Parameters supplied to the Update Event Source operation to update an EventHub event source.
type EventHubEventSourceUpdateParameters struct {
	EventSourceUpdateParameters
	// Properties of the EventHub event source.
	Properties *EventHubEventSourceMutableProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type EventHubEventSourceUpdateParameters.
func (e EventHubEventSourceUpdateParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	e.EventSourceUpdateParameters.marshalInternal(objectMap, EventSourceKindMicrosoftEventHub)
	populate(objectMap, "properties", e.Properties)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type EventHubEventSourceUpdateParameters.
func (e *EventHubEventSourceUpdateParameters) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "properties":
			err = unpopulate(val, &e.Properties)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := e.EventSourceUpdateParameters.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// EventSourceCommonProperties - Properties of the event source.
type EventSourceCommonProperties struct {
	ResourceProperties
	// An object that contains the details about the starting point in time to ingest events.
	IngressStartAt *IngressStartAtProperties `json:"ingressStartAt,omitempty"`

	// An object that represents the local timestamp property. It contains the format of local timestamp that needs to be used and the corresponding timezone
	// offset information. If a value isn't specified
	// for localTimestamp, or if null, then the local timestamp will not be ingressed with the events.
	LocalTimestamp *LocalTimestamp `json:"localTimestamp,omitempty"`

	// The event property that will be used as the event source's timestamp. If a value isn't specified for timestampPropertyName, or if null or empty-string
	// is specified, the event creation time will be
	// used.
	TimestampPropertyName *string `json:"timestampPropertyName,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type EventSourceCommonProperties.
func (e EventSourceCommonProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	e.marshalInternal(objectMap)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type EventSourceCommonProperties.
func (e *EventSourceCommonProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	return e.unmarshalInternal(rawMsg)
}

func (e EventSourceCommonProperties) marshalInternal(objectMap map[string]interface{}) {
	e.ResourceProperties.marshalInternal(objectMap)
	populate(objectMap, "ingressStartAt", e.IngressStartAt)
	populate(objectMap, "localTimestamp", e.LocalTimestamp)
	populate(objectMap, "timestampPropertyName", e.TimestampPropertyName)
}

func (e *EventSourceCommonProperties) unmarshalInternal(rawMsg map[string]json.RawMessage) error {
	for key, val := range rawMsg {
		var err error
		switch key {
		case "ingressStartAt":
			err = unpopulate(val, &e.IngressStartAt)
			delete(rawMsg, key)
		case "localTimestamp":
			err = unpopulate(val, &e.LocalTimestamp)
			delete(rawMsg, key)
		case "timestampPropertyName":
			err = unpopulate(val, &e.TimestampPropertyName)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := e.ResourceProperties.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// EventSourceCreateOrUpdateParametersClassification provides polymorphic access to related types.
// Call the interface's GetEventSourceCreateOrUpdateParameters() method to access the common type.
// Use a type switch to determine the concrete type.  The possible types are:
// - *EventHubEventSourceCreateOrUpdateParameters, *EventSourceCreateOrUpdateParameters, *IoTHubEventSourceCreateOrUpdateParameters
type EventSourceCreateOrUpdateParametersClassification interface {
	// GetEventSourceCreateOrUpdateParameters returns the EventSourceCreateOrUpdateParameters content of the underlying type.
	GetEventSourceCreateOrUpdateParameters() *EventSourceCreateOrUpdateParameters
}

// EventSourceCreateOrUpdateParameters - Parameters supplied to the Create or Update Event Source operation.
type EventSourceCreateOrUpdateParameters struct {
	CreateOrUpdateTrackedResourceProperties
	// REQUIRED; The kind of the event source.
	Kind *EventSourceKind `json:"kind,omitempty"`

	// An object that represents the local timestamp property. It contains the format of local timestamp that needs to be used and the corresponding timezone
	// offset information. If a value isn't specified
	// for localTimestamp, or if null, then the local timestamp will not be ingressed with the events.
	LocalTimestamp *LocalTimestamp `json:"localTimestamp,omitempty"`
}

// GetEventSourceCreateOrUpdateParameters implements the EventSourceCreateOrUpdateParametersClassification interface for type EventSourceCreateOrUpdateParameters.
func (e *EventSourceCreateOrUpdateParameters) GetEventSourceCreateOrUpdateParameters() *EventSourceCreateOrUpdateParameters {
	return e
}

// UnmarshalJSON implements the json.Unmarshaller interface for type EventSourceCreateOrUpdateParameters.
func (e *EventSourceCreateOrUpdateParameters) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	return e.unmarshalInternal(rawMsg)
}

func (e EventSourceCreateOrUpdateParameters) marshalInternal(objectMap map[string]interface{}, discValue EventSourceKind) {
	e.CreateOrUpdateTrackedResourceProperties.marshalInternal(objectMap)
	e.Kind = &discValue
	objectMap["kind"] = e.Kind
	populate(objectMap, "localTimestamp", e.LocalTimestamp)
}

func (e *EventSourceCreateOrUpdateParameters) unmarshalInternal(rawMsg map[string]json.RawMessage) error {
	for key, val := range rawMsg {
		var err error
		switch key {
		case "kind":
			err = unpopulate(val, &e.Kind)
			delete(rawMsg, key)
		case "localTimestamp":
			err = unpopulate(val, &e.LocalTimestamp)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := e.CreateOrUpdateTrackedResourceProperties.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// EventSourceListResponse - The response of the List EventSources operation.
type EventSourceListResponse struct {
	// Result of the List EventSources operation.
	Value []EventSourceResourceClassification `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type EventSourceListResponse.
func (e EventSourceListResponse) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", e.Value)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type EventSourceListResponse.
func (e *EventSourceListResponse) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "value":
			e.Value, err = unmarshalEventSourceResourceClassificationArray(val)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// EventSourceMutableProperties - An object that represents a set of mutable event source resource properties.
type EventSourceMutableProperties struct {
	// The event property that will be used as the event source's timestamp. If a value isn't specified for timestampPropertyName, or if null or empty-string
	// is specified, the event creation time will be
	// used.
	TimestampPropertyName *string `json:"timestampPropertyName,omitempty"`
}

// EventSourceResourceClassification provides polymorphic access to related types.
// Call the interface's GetEventSourceResource() method to access the common type.
// Use a type switch to determine the concrete type.  The possible types are:
// - *EventHubEventSourceResource, *EventSourceResource, *IoTHubEventSourceResource
type EventSourceResourceClassification interface {
	// GetEventSourceResource returns the EventSourceResource content of the underlying type.
	GetEventSourceResource() *EventSourceResource
}

// EventSourceResource - An environment receives data from one or more event sources. Each event source has associated connection info that allows the Time
// Series Insights ingress pipeline to connect to and pull data from the
// event source
type EventSourceResource struct {
	TrackedResource
	// REQUIRED; The kind of the event source.
	Kind *EventSourceResourceKind `json:"kind,omitempty"`
}

// GetEventSourceResource implements the EventSourceResourceClassification interface for type EventSourceResource.
func (e *EventSourceResource) GetEventSourceResource() *EventSourceResource { return e }

// UnmarshalJSON implements the json.Unmarshaller interface for type EventSourceResource.
func (e *EventSourceResource) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	return e.unmarshalInternal(rawMsg)
}

func (e EventSourceResource) marshalInternal(objectMap map[string]interface{}, discValue EventSourceResourceKind) {
	e.TrackedResource.marshalInternal(objectMap)
	e.Kind = &discValue
	objectMap["kind"] = e.Kind
}

func (e *EventSourceResource) unmarshalInternal(rawMsg map[string]json.RawMessage) error {
	for key, val := range rawMsg {
		var err error
		switch key {
		case "kind":
			err = unpopulate(val, &e.Kind)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := e.TrackedResource.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// EventSourceUpdateParametersClassification provides polymorphic access to related types.
// Call the interface's GetEventSourceUpdateParameters() method to access the common type.
// Use a type switch to determine the concrete type.  The possible types are:
// - *EventHubEventSourceUpdateParameters, *EventSourceUpdateParameters, *IoTHubEventSourceUpdateParameters
type EventSourceUpdateParametersClassification interface {
	// GetEventSourceUpdateParameters returns the EventSourceUpdateParameters content of the underlying type.
	GetEventSourceUpdateParameters() *EventSourceUpdateParameters
}

// EventSourceUpdateParameters - Parameters supplied to the Update Event Source operation.
type EventSourceUpdateParameters struct {
	// REQUIRED; The kind of the event source.
	Kind *EventSourceKind `json:"kind,omitempty"`

	// Key-value pairs of additional properties for the event source.
	Tags map[string]*string `json:"tags,omitempty"`
}

// GetEventSourceUpdateParameters implements the EventSourceUpdateParametersClassification interface for type EventSourceUpdateParameters.
func (e *EventSourceUpdateParameters) GetEventSourceUpdateParameters() *EventSourceUpdateParameters {
	return e
}

// UnmarshalJSON implements the json.Unmarshaller interface for type EventSourceUpdateParameters.
func (e *EventSourceUpdateParameters) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	return e.unmarshalInternal(rawMsg)
}

func (e EventSourceUpdateParameters) marshalInternal(objectMap map[string]interface{}, discValue EventSourceKind) {
	e.Kind = &discValue
	objectMap["kind"] = e.Kind
	populate(objectMap, "tags", e.Tags)
}

func (e *EventSourceUpdateParameters) unmarshalInternal(rawMsg map[string]json.RawMessage) error {
	for key, val := range rawMsg {
		var err error
		switch key {
		case "kind":
			err = unpopulate(val, &e.Kind)
			delete(rawMsg, key)
		case "tags":
			err = unpopulate(val, &e.Tags)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// EventSourcesCreateOrUpdateOptions contains the optional parameters for the EventSources.CreateOrUpdate method.
type EventSourcesCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// EventSourcesDeleteOptions contains the optional parameters for the EventSources.Delete method.
type EventSourcesDeleteOptions struct {
	// placeholder for future optional parameters
}

// EventSourcesGetOptions contains the optional parameters for the EventSources.Get method.
type EventSourcesGetOptions struct {
	// placeholder for future optional parameters
}

// EventSourcesListByEnvironmentOptions contains the optional parameters for the EventSources.ListByEnvironment method.
type EventSourcesListByEnvironmentOptions struct {
	// placeholder for future optional parameters
}

// EventSourcesUpdateOptions contains the optional parameters for the EventSources.Update method.
type EventSourcesUpdateOptions struct {
	// placeholder for future optional parameters
}

// Gen1EnvironmentCreateOrUpdateParameters - Parameters supplied to the Create or Update Environment operation for a Gen1 environment.
type Gen1EnvironmentCreateOrUpdateParameters struct {
	EnvironmentCreateOrUpdateParameters
	// REQUIRED; Properties used to create a Gen1 environment.
	Properties *Gen1EnvironmentCreationProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type Gen1EnvironmentCreateOrUpdateParameters.
func (g Gen1EnvironmentCreateOrUpdateParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	g.EnvironmentCreateOrUpdateParameters.marshalInternal(objectMap, EnvironmentKindGen1)
	populate(objectMap, "properties", g.Properties)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type Gen1EnvironmentCreateOrUpdateParameters.
func (g *Gen1EnvironmentCreateOrUpdateParameters) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "properties":
			err = unpopulate(val, &g.Properties)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := g.EnvironmentCreateOrUpdateParameters.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// Gen1EnvironmentCreationProperties - Properties used to create a Gen1 environment.
type Gen1EnvironmentCreationProperties struct {
	// REQUIRED; ISO8601 timespan specifying the minimum number of days the environment's events will be available for query.
	DataRetentionTime *string `json:"dataRetentionTime,omitempty"`

	// The list of event properties which will be used to partition data in the environment. Currently, only a single partition key property is supported.
	PartitionKeyProperties []*TimeSeriesIDProperty `json:"partitionKeyProperties,omitempty"`

	// The behavior the Time Series Insights service should take when the environment's capacity has been exceeded. If "PauseIngress" is specified, new events
	// will not be read from the event source. If
	// "PurgeOldData" is specified, new events will continue to be read and old events will be deleted from the environment. The default behavior is PurgeOldData.
	StorageLimitExceededBehavior *StorageLimitExceededBehavior `json:"storageLimitExceededBehavior,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type Gen1EnvironmentCreationProperties.
func (g Gen1EnvironmentCreationProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	g.marshalInternal(objectMap)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type Gen1EnvironmentCreationProperties.
func (g *Gen1EnvironmentCreationProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	return g.unmarshalInternal(rawMsg)
}

func (g Gen1EnvironmentCreationProperties) marshalInternal(objectMap map[string]interface{}) {
	populate(objectMap, "dataRetentionTime", g.DataRetentionTime)
	populate(objectMap, "partitionKeyProperties", g.PartitionKeyProperties)
	populate(objectMap, "storageLimitExceededBehavior", g.StorageLimitExceededBehavior)
}

func (g *Gen1EnvironmentCreationProperties) unmarshalInternal(rawMsg map[string]json.RawMessage) error {
	for key, val := range rawMsg {
		var err error
		switch key {
		case "dataRetentionTime":
			err = unpopulate(val, &g.DataRetentionTime)
			delete(rawMsg, key)
		case "partitionKeyProperties":
			err = unpopulate(val, &g.PartitionKeyProperties)
			delete(rawMsg, key)
		case "storageLimitExceededBehavior":
			err = unpopulate(val, &g.StorageLimitExceededBehavior)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// Gen1EnvironmentMutableProperties - An object that represents a set of mutable Gen1 environment resource properties.
type Gen1EnvironmentMutableProperties struct {
	// ISO8601 timespan specifying the minimum number of days the environment's events will be available for query.
	DataRetentionTime *string `json:"dataRetentionTime,omitempty"`

	// The behavior the Time Series Insights service should take when the environment's capacity has been exceeded. If "PauseIngress" is specified, new events
	// will not be read from the event source. If
	// "PurgeOldData" is specified, new events will continue to be read and old events will be deleted from the environment. The default behavior is PurgeOldData.
	StorageLimitExceededBehavior *StorageLimitExceededBehavior `json:"storageLimitExceededBehavior,omitempty"`
}

// Gen1EnvironmentResource - An environment is a set of time-series data available for query, and is the top level Azure Time Series Insights resource.
// Gen1 environments have data retention limits.
type Gen1EnvironmentResource struct {
	EnvironmentResource
	// REQUIRED; Properties of the Gen1 environment.
	Properties *Gen1EnvironmentResourceProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type Gen1EnvironmentResource.
func (g Gen1EnvironmentResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	g.EnvironmentResource.marshalInternal(objectMap, EnvironmentResourceKindGen1)
	populate(objectMap, "properties", g.Properties)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type Gen1EnvironmentResource.
func (g *Gen1EnvironmentResource) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "properties":
			err = unpopulate(val, &g.Properties)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := g.EnvironmentResource.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// Gen1EnvironmentResourceProperties - Properties of the Gen1 environment.
type Gen1EnvironmentResourceProperties struct {
	EnvironmentResourceProperties
	Gen1EnvironmentCreationProperties
}

// Gen1EnvironmentUpdateParameters - Parameters supplied to the Update Environment operation to update a Gen1 environment.
type Gen1EnvironmentUpdateParameters struct {
	EnvironmentUpdateParameters
	// Properties of the Gen1 environment.
	Properties *Gen1EnvironmentMutableProperties `json:"properties,omitempty"`

	// The sku of the environment.
	SKU *SKU `json:"sku,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type Gen1EnvironmentUpdateParameters.
func (g Gen1EnvironmentUpdateParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	g.EnvironmentUpdateParameters.marshalInternal(objectMap, EnvironmentKindGen1)
	populate(objectMap, "properties", g.Properties)
	populate(objectMap, "sku", g.SKU)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type Gen1EnvironmentUpdateParameters.
func (g *Gen1EnvironmentUpdateParameters) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "properties":
			err = unpopulate(val, &g.Properties)
			delete(rawMsg, key)
		case "sku":
			err = unpopulate(val, &g.SKU)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := g.EnvironmentUpdateParameters.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// Gen2EnvironmentCreateOrUpdateParameters - Parameters supplied to the Create or Update Environment operation for a Gen2 environment.
type Gen2EnvironmentCreateOrUpdateParameters struct {
	EnvironmentCreateOrUpdateParameters
	// REQUIRED; Properties used to create a Gen2 environment.
	Properties *Gen2EnvironmentCreationProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type Gen2EnvironmentCreateOrUpdateParameters.
func (g Gen2EnvironmentCreateOrUpdateParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	g.EnvironmentCreateOrUpdateParameters.marshalInternal(objectMap, EnvironmentKindGen2)
	populate(objectMap, "properties", g.Properties)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type Gen2EnvironmentCreateOrUpdateParameters.
func (g *Gen2EnvironmentCreateOrUpdateParameters) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "properties":
			err = unpopulate(val, &g.Properties)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := g.EnvironmentCreateOrUpdateParameters.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// Gen2EnvironmentCreationProperties - Properties used to create a Gen2 environment.
type Gen2EnvironmentCreationProperties struct {
	// REQUIRED; The storage configuration provides the connection details that allows the Time Series Insights service to connect to the customer storage account
	// that is used to store the environment's data.
	StorageConfiguration *Gen2StorageConfigurationInput `json:"storageConfiguration,omitempty"`

	// REQUIRED; The list of event properties which will be used to define the environment's time series id.
	TimeSeriesIDProperties []*TimeSeriesIDProperty `json:"timeSeriesIdProperties,omitempty"`

	// This value can be set to 'enabled' to avoid breaking changes on existing customer resources and templates. If set to 'disabled', traffic over public
	// interface is not allowed, and private endpoint
	// connections would be the exclusive access method.
	PublicNetworkAccess *PublicNetworkAccess `json:"publicNetworkAccess,omitempty"`

	// The warm store configuration provides the details to create a warm store cache that will retain a copy of the environment's data available for faster
	// query.
	WarmStoreConfiguration *WarmStoreConfigurationProperties `json:"warmStoreConfiguration,omitempty"`

	// READ-ONLY; The list of private endpoint connections to the environment.
	PrivateEndpointConnections []*PrivateEndpointConnection `json:"privateEndpointConnections,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type Gen2EnvironmentCreationProperties.
func (g Gen2EnvironmentCreationProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "privateEndpointConnections", g.PrivateEndpointConnections)
	populate(objectMap, "publicNetworkAccess", g.PublicNetworkAccess)
	populate(objectMap, "storageConfiguration", g.StorageConfiguration)
	populate(objectMap, "timeSeriesIdProperties", g.TimeSeriesIDProperties)
	populate(objectMap, "warmStoreConfiguration", g.WarmStoreConfiguration)
	return json.Marshal(objectMap)
}

// Gen2EnvironmentMutableProperties - An object that represents a set of mutable Gen2 environment resource properties.
type Gen2EnvironmentMutableProperties struct {
	// The storage configuration provides the connection details that allows the Time Series Insights service to connect to the customer storage account that
	// is used to store the environment's data.
	StorageConfiguration *Gen2StorageConfigurationMutableProperties `json:"storageConfiguration,omitempty"`

	// The warm store configuration provides the details to create a warm store cache that will retain a copy of the environment's data available for faster
	// query.
	WarmStoreConfiguration *WarmStoreConfigurationProperties `json:"warmStoreConfiguration,omitempty"`
}

// Gen2EnvironmentResource - An environment is a set of time-series data available for query, and is the top level Azure Time Series Insights resource.
// Gen2 environments do not have set data retention limits.
type Gen2EnvironmentResource struct {
	EnvironmentResource
	// REQUIRED; Properties of the Gen2 environment.
	Properties *Gen2EnvironmentResourceProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type Gen2EnvironmentResource.
func (g Gen2EnvironmentResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	g.EnvironmentResource.marshalInternal(objectMap, EnvironmentResourceKindGen2)
	populate(objectMap, "properties", g.Properties)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type Gen2EnvironmentResource.
func (g *Gen2EnvironmentResource) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "properties":
			err = unpopulate(val, &g.Properties)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := g.EnvironmentResource.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// Gen2EnvironmentResourceProperties - Properties of the Gen2 environment.
type Gen2EnvironmentResourceProperties struct {
	EnvironmentResourceProperties
	// REQUIRED; The storage configuration provides the connection details that allows the Time Series Insights service to connect to the customer storage account
	// that is used to store the environment's data.
	StorageConfiguration *Gen2StorageConfigurationOutput `json:"storageConfiguration,omitempty"`

	// REQUIRED; The list of event properties which will be used to define the environment's time series id.
	TimeSeriesIDProperties []*TimeSeriesIDProperty `json:"timeSeriesIdProperties,omitempty"`

	// The warm store configuration provides the details to create a warm store cache that will retain a copy of the environment's data available for faster
	// query.
	WarmStoreConfiguration *WarmStoreConfigurationProperties `json:"warmStoreConfiguration,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type Gen2EnvironmentResourceProperties.
func (g Gen2EnvironmentResourceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	g.EnvironmentResourceProperties.marshalInternal(objectMap)
	populate(objectMap, "storageConfiguration", g.StorageConfiguration)
	populate(objectMap, "timeSeriesIdProperties", g.TimeSeriesIDProperties)
	populate(objectMap, "warmStoreConfiguration", g.WarmStoreConfiguration)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type Gen2EnvironmentResourceProperties.
func (g *Gen2EnvironmentResourceProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "storageConfiguration":
			err = unpopulate(val, &g.StorageConfiguration)
			delete(rawMsg, key)
		case "timeSeriesIdProperties":
			err = unpopulate(val, &g.TimeSeriesIDProperties)
			delete(rawMsg, key)
		case "warmStoreConfiguration":
			err = unpopulate(val, &g.WarmStoreConfiguration)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := g.EnvironmentResourceProperties.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// Gen2EnvironmentUpdateParameters - Parameters supplied to the Update Environment operation to update a Gen2 environment.
type Gen2EnvironmentUpdateParameters struct {
	EnvironmentUpdateParameters
	// Properties of the Gen2 environment.
	Properties *Gen2EnvironmentMutableProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type Gen2EnvironmentUpdateParameters.
func (g Gen2EnvironmentUpdateParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	g.EnvironmentUpdateParameters.marshalInternal(objectMap, EnvironmentKindGen2)
	populate(objectMap, "properties", g.Properties)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type Gen2EnvironmentUpdateParameters.
func (g *Gen2EnvironmentUpdateParameters) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "properties":
			err = unpopulate(val, &g.Properties)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := g.EnvironmentUpdateParameters.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// Gen2StorageConfigurationInput - The storage configuration provides the connection details that allows the Time Series Insights service to connect to
// the customer storage account that is used to store the environment's data.
type Gen2StorageConfigurationInput struct {
	// REQUIRED; The name of the storage account that will hold the environment's Gen2 data.
	AccountName *string `json:"accountName,omitempty"`

	// REQUIRED; The value of the management key that grants the Time Series Insights service write access to the storage account. This property is not shown
	// in environment responses.
	ManagementKey *string `json:"managementKey,omitempty"`
}

// Gen2StorageConfigurationMutableProperties - The storage configuration provides the connection details that allows the Time Series Insights service to
// connect to the customer storage account that is used to store the environment's data.
type Gen2StorageConfigurationMutableProperties struct {
	// REQUIRED; The value of the management key that grants the Time Series Insights service write access to the storage account. This property is not shown
	// in environment responses.
	ManagementKey *string `json:"managementKey,omitempty"`
}

// Gen2StorageConfigurationOutput - The storage configuration provides the non-secret connection details about the customer storage account that is used
// to store the environment's data.
type Gen2StorageConfigurationOutput struct {
	// REQUIRED; The name of the storage account that will hold the environment's Gen2 data.
	AccountName *string `json:"accountName,omitempty"`
}

// IngressEnvironmentStatus - An object that represents the status of ingress on an environment.
type IngressEnvironmentStatus struct {
	// This string represents the state of ingress operations on an environment. It can be "Disabled", "Ready", "Running", "Paused" or "Unknown"
	State *IngressState `json:"state,omitempty"`

	// READ-ONLY; An object that contains the details about an environment's state.
	StateDetails *EnvironmentStateDetails `json:"stateDetails,omitempty" azure:"ro"`
}

// IngressStartAtProperties - An object that contains the details about the starting point in time to ingest events.
type IngressStartAtProperties struct {
	// ISO8601 UTC datetime with seconds precision (milliseconds are optional), specifying the date and time that will be the starting point for Events to be
	// consumed.
	Time *string `json:"time,omitempty"`

	// The type of the ingressStartAt, It can be "EarliestAvailable", "EventSourceCreationTime", "CustomEnqueuedTime".
	Type *IngressStartAtType `json:"type,omitempty"`
}

// IoTHubEventSourceCommonProperties - Properties of the IoTHub event source.
type IoTHubEventSourceCommonProperties struct {
	AzureEventSourceProperties
	// REQUIRED; The name of the iot hub's consumer group that holds the partitions from which events will be read.
	ConsumerGroupName *string `json:"consumerGroupName,omitempty"`

	// REQUIRED; The name of the iot hub.
	IotHubName *string `json:"iotHubName,omitempty"`

	// REQUIRED; The name of the Shared Access Policy key that grants the Time Series Insights service access to the iot hub. This shared access policy key
	// must grant 'service connect' permissions to the iot hub.
	KeyName *string `json:"keyName,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type IoTHubEventSourceCommonProperties.
func (i IoTHubEventSourceCommonProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	i.marshalInternal(objectMap)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type IoTHubEventSourceCommonProperties.
func (i *IoTHubEventSourceCommonProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	return i.unmarshalInternal(rawMsg)
}

func (i IoTHubEventSourceCommonProperties) marshalInternal(objectMap map[string]interface{}) {
	i.AzureEventSourceProperties.marshalInternal(objectMap)
	populate(objectMap, "consumerGroupName", i.ConsumerGroupName)
	populate(objectMap, "iotHubName", i.IotHubName)
	populate(objectMap, "keyName", i.KeyName)
}

func (i *IoTHubEventSourceCommonProperties) unmarshalInternal(rawMsg map[string]json.RawMessage) error {
	for key, val := range rawMsg {
		var err error
		switch key {
		case "consumerGroupName":
			err = unpopulate(val, &i.ConsumerGroupName)
			delete(rawMsg, key)
		case "iotHubName":
			err = unpopulate(val, &i.IotHubName)
			delete(rawMsg, key)
		case "keyName":
			err = unpopulate(val, &i.KeyName)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := i.AzureEventSourceProperties.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// IoTHubEventSourceCreateOrUpdateParameters - Parameters supplied to the Create or Update Event Source operation for an IoTHub event source.
type IoTHubEventSourceCreateOrUpdateParameters struct {
	EventSourceCreateOrUpdateParameters
	// REQUIRED; Properties of the IoTHub event source that are required on create or update requests.
	Properties *IoTHubEventSourceCreationProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type IoTHubEventSourceCreateOrUpdateParameters.
func (i IoTHubEventSourceCreateOrUpdateParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	i.EventSourceCreateOrUpdateParameters.marshalInternal(objectMap, EventSourceKindMicrosoftIoTHub)
	populate(objectMap, "properties", i.Properties)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type IoTHubEventSourceCreateOrUpdateParameters.
func (i *IoTHubEventSourceCreateOrUpdateParameters) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "properties":
			err = unpopulate(val, &i.Properties)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := i.EventSourceCreateOrUpdateParameters.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// IoTHubEventSourceCreationProperties - Properties of the IoTHub event source that are required on create or update requests.
type IoTHubEventSourceCreationProperties struct {
	IoTHubEventSourceCommonProperties
	// REQUIRED; The value of the Shared Access Policy key that grants the Time Series Insights service read access to the iot hub. This property is not shown
	// in event source responses.
	SharedAccessKey *string `json:"sharedAccessKey,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type IoTHubEventSourceCreationProperties.
func (i IoTHubEventSourceCreationProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	i.IoTHubEventSourceCommonProperties.marshalInternal(objectMap)
	populate(objectMap, "sharedAccessKey", i.SharedAccessKey)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type IoTHubEventSourceCreationProperties.
func (i *IoTHubEventSourceCreationProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "sharedAccessKey":
			err = unpopulate(val, &i.SharedAccessKey)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := i.IoTHubEventSourceCommonProperties.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// IoTHubEventSourceMutableProperties - An object that represents a set of mutable IoTHub event source resource properties.
type IoTHubEventSourceMutableProperties struct {
	EventSourceMutableProperties
	// The value of the shared access key that grants the Time Series Insights service read access to the iot hub. This property is not shown in event source
	// responses.
	SharedAccessKey *string `json:"sharedAccessKey,omitempty"`
}

// IoTHubEventSourceResource - An event source that receives its data from an Azure IoTHub.
type IoTHubEventSourceResource struct {
	EventSourceResource
	// REQUIRED; Properties of the IoTHub event source resource.
	Properties *IoTHubEventSourceResourceProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type IoTHubEventSourceResource.
func (i IoTHubEventSourceResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	i.EventSourceResource.marshalInternal(objectMap, EventSourceResourceKindMicrosoftIoTHub)
	populate(objectMap, "properties", i.Properties)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type IoTHubEventSourceResource.
func (i *IoTHubEventSourceResource) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "properties":
			err = unpopulate(val, &i.Properties)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := i.EventSourceResource.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// IoTHubEventSourceResourceProperties - Properties of the IoTHub event source resource.
type IoTHubEventSourceResourceProperties struct {
	IoTHubEventSourceCommonProperties
}

// IoTHubEventSourceUpdateParameters - Parameters supplied to the Update Event Source operation to update an IoTHub event source.
type IoTHubEventSourceUpdateParameters struct {
	EventSourceUpdateParameters
	// Properties of the IoTHub event source.
	Properties *IoTHubEventSourceMutableProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type IoTHubEventSourceUpdateParameters.
func (i IoTHubEventSourceUpdateParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	i.EventSourceUpdateParameters.marshalInternal(objectMap, EventSourceKindMicrosoftIoTHub)
	populate(objectMap, "properties", i.Properties)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type IoTHubEventSourceUpdateParameters.
func (i *IoTHubEventSourceUpdateParameters) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "properties":
			err = unpopulate(val, &i.Properties)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := i.EventSourceUpdateParameters.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// LocalTimestamp - An object that represents the local timestamp property. It contains the format of local timestamp that needs to be used and the corresponding
// timezone offset information. If a value isn't specified
// for localTimestamp, or if null, then the local timestamp will not be ingressed with the events.
type LocalTimestamp struct {
	// An enum that represents the format of the local timestamp property that needs to be set.
	Format *LocalTimestampFormat `json:"format,omitempty"`

	// An object that represents the offset information for the local timestamp format specified. Should not be specified for LocalTimestampFormat - Embedded.
	TimeZoneOffset *LocalTimestampTimeZoneOffset `json:"timeZoneOffset,omitempty"`
}

// LocalTimestampTimeZoneOffset - An object that represents the offset information for the local timestamp format specified. Should not be specified for
// LocalTimestampFormat - Embedded.
type LocalTimestampTimeZoneOffset struct {
	// The event property that will be contain the offset information to calculate the local timestamp. When the LocalTimestampFormat is Iana, the property
	// name will contain the name of the column which
	// contains IANA Timezone Name (eg: Americas/Los Angeles). When LocalTimestampFormat is Timespan, it contains the name of property which contains values
	// representing the offset (eg: P1D or 1.00:00:00)
	PropertyName *string `json:"propertyName,omitempty"`
}

// LogSpecification - The specification of an Azure Monitoring log.
type LogSpecification struct {
	// Log display name.
	DisplayName *string `json:"displayName,omitempty"`

	// Log name.
	Name *string `json:"name,omitempty"`
}

// MetricAvailability - Retention policy of a resource metric.
type MetricAvailability struct {
	BlobDuration *string `json:"blobDuration,omitempty"`
	TimeGrain    *string `json:"timeGrain,omitempty"`
}

// MetricSpecification - Metric specification of operation.
type MetricSpecification struct {
	// Aggregation type could be Average.
	AggregationType *string `json:"aggregationType,omitempty"`

	// Retention policies of a resource metric.
	Availabilities []*MetricAvailability `json:"availabilities,omitempty"`

	// The category this metric specification belong to, could be Capacity.
	Category *string `json:"category,omitempty"`

	// Dimensions of blobs, including blob type and access tier.
	Dimensions []*Dimension `json:"dimensions,omitempty"`

	// Display description of metric specification.
	DisplayDescription *string `json:"displayDescription,omitempty"`

	// Display name of metric specification.
	DisplayName *string `json:"displayName,omitempty"`

	// Name of metric specification.
	Name *string `json:"name,omitempty"`

	// Account Resource Id.
	ResourceIDDimensionNameOverride *string `json:"resourceIdDimensionNameOverride,omitempty"`

	// Unit could be Bytes or Count.
	Unit *string `json:"unit,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type MetricSpecification.
func (m MetricSpecification) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "aggregationType", m.AggregationType)
	populate(objectMap, "availabilities", m.Availabilities)
	populate(objectMap, "category", m.Category)
	populate(objectMap, "dimensions", m.Dimensions)
	populate(objectMap, "displayDescription", m.DisplayDescription)
	populate(objectMap, "displayName", m.DisplayName)
	populate(objectMap, "name", m.Name)
	populate(objectMap, "resourceIdDimensionNameOverride", m.ResourceIDDimensionNameOverride)
	populate(objectMap, "unit", m.Unit)
	return json.Marshal(objectMap)
}

// Operation - A Time Series Insights REST API operation
type Operation struct {
	// Properties of operation, include metric specifications.
	OperationProperties *OperationProperties `json:"properties,omitempty"`

	// The intended executor of the operation.
	Origin *string `json:"origin,omitempty"`

	// READ-ONLY; Contains the localized display information for this particular operation / action.
	Display *OperationDisplay `json:"display,omitempty" azure:"ro"`

	// READ-ONLY; The name of the operation being performed on this particular object.
	Name *string `json:"name,omitempty" azure:"ro"`
}

// OperationDisplay - Contains the localized display information for this particular operation / action.
type OperationDisplay struct {
	// READ-ONLY; The localized friendly description for the operation.
	Description *string `json:"description,omitempty" azure:"ro"`

	// READ-ONLY; The localized friendly name for the operation.
	Operation *string `json:"operation,omitempty" azure:"ro"`

	// READ-ONLY; The localized friendly form of the resource provider name.
	Provider *string `json:"provider,omitempty" azure:"ro"`

	// READ-ONLY; The localized friendly form of the resource type related to this action/operation.
	Resource *string `json:"resource,omitempty" azure:"ro"`
}

// OperationListResult - Result of the request to list Time Series Insights operations. It contains a list of operations and a URL link to get the next
// set of results.
type OperationListResult struct {
	// READ-ONLY; URL to get the next set of operation list results if there are any.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`

	// READ-ONLY; List of Time Series Insights operations supported by the Microsoft.TimeSeriesInsights resource provider.
	Value []*Operation `json:"value,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type OperationListResult.
func (o OperationListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", o.NextLink)
	populate(objectMap, "value", o.Value)
	return json.Marshal(objectMap)
}

// OperationProperties - Properties of operation, include metric specifications.
type OperationProperties struct {
	// One property of operation, include metric specifications.
	ServiceSpecification *ServiceSpecification `json:"serviceSpecification,omitempty"`
}

// OperationsListOptions contains the optional parameters for the Operations.List method.
type OperationsListOptions struct {
	// placeholder for future optional parameters
}

// PrivateEndpoint - The Private Endpoint resource.
type PrivateEndpoint struct {
	// READ-ONLY; The ARM identifier for Private Endpoint
	ID *string `json:"id,omitempty" azure:"ro"`
}

// PrivateEndpointConnection - The Private Endpoint Connection resource.
type PrivateEndpointConnection struct {
	Resource
	// Resource properties.
	Properties *PrivateEndpointConnectionProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type PrivateEndpointConnection.
func (p PrivateEndpointConnection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	p.Resource.marshalInternal(objectMap)
	populate(objectMap, "properties", p.Properties)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type PrivateEndpointConnection.
func (p *PrivateEndpointConnection) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "properties":
			err = unpopulate(val, &p.Properties)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := p.Resource.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// PrivateEndpointConnectionListResult - List of private endpoint connection associated with the specified storage account
type PrivateEndpointConnectionListResult struct {
	// Array of private endpoint connections
	Value []*PrivateEndpointConnection `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type PrivateEndpointConnectionListResult.
func (p PrivateEndpointConnectionListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", p.Value)
	return json.Marshal(objectMap)
}

// PrivateEndpointConnectionProperties - Properties of the PrivateEndpointConnectProperties.
type PrivateEndpointConnectionProperties struct {
	// REQUIRED; A collection of information about the state of the connection between service consumer and provider.
	PrivateLinkServiceConnectionState *PrivateLinkServiceConnectionState `json:"privateLinkServiceConnectionState,omitempty"`

	// The resource of private end point.
	PrivateEndpoint *PrivateEndpoint `json:"privateEndpoint,omitempty"`

	// READ-ONLY; The provisioning state of the private endpoint connection resource.
	ProvisioningState *PrivateEndpointConnectionProvisioningState `json:"provisioningState,omitempty" azure:"ro"`
}

// PrivateEndpointConnectionsCreateOrUpdateOptions contains the optional parameters for the PrivateEndpointConnections.CreateOrUpdate method.
type PrivateEndpointConnectionsCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// PrivateEndpointConnectionsDeleteOptions contains the optional parameters for the PrivateEndpointConnections.Delete method.
type PrivateEndpointConnectionsDeleteOptions struct {
	// placeholder for future optional parameters
}

// PrivateEndpointConnectionsGetOptions contains the optional parameters for the PrivateEndpointConnections.Get method.
type PrivateEndpointConnectionsGetOptions struct {
	// placeholder for future optional parameters
}

// PrivateEndpointConnectionsListByEnvironmentOptions contains the optional parameters for the PrivateEndpointConnections.ListByEnvironment method.
type PrivateEndpointConnectionsListByEnvironmentOptions struct {
	// placeholder for future optional parameters
}

// PrivateLinkResource - A private link resource
type PrivateLinkResource struct {
	Resource
	// Resource properties.
	Properties *PrivateLinkResourceProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type PrivateLinkResource.
func (p PrivateLinkResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	p.Resource.marshalInternal(objectMap)
	populate(objectMap, "properties", p.Properties)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type PrivateLinkResource.
func (p *PrivateLinkResource) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "properties":
			err = unpopulate(val, &p.Properties)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := p.Resource.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// PrivateLinkResourceListResult - A list of private link resources
type PrivateLinkResourceListResult struct {
	// Array of private link resources
	Value []*PrivateLinkResource `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type PrivateLinkResourceListResult.
func (p PrivateLinkResourceListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", p.Value)
	return json.Marshal(objectMap)
}

// PrivateLinkResourceProperties - Properties of a private link resource.
type PrivateLinkResourceProperties struct {
	// The private link resource Private link DNS zone name.
	RequiredZoneNames []*string `json:"requiredZoneNames,omitempty"`

	// READ-ONLY; The private link resource group id.
	GroupID *string `json:"groupId,omitempty" azure:"ro"`

	// READ-ONLY; The private link resource required member names.
	RequiredMembers []*string `json:"requiredMembers,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type PrivateLinkResourceProperties.
func (p PrivateLinkResourceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "groupId", p.GroupID)
	populate(objectMap, "requiredMembers", p.RequiredMembers)
	populate(objectMap, "requiredZoneNames", p.RequiredZoneNames)
	return json.Marshal(objectMap)
}

// PrivateLinkResourcesListSupportedOptions contains the optional parameters for the PrivateLinkResources.ListSupported method.
type PrivateLinkResourcesListSupportedOptions struct {
	// placeholder for future optional parameters
}

// PrivateLinkServiceConnectionState - A collection of information about the state of the connection between service consumer and provider.
type PrivateLinkServiceConnectionState struct {
	// A message indicating if changes on the service provider require any updates on the consumer.
	ActionsRequired *string `json:"actionsRequired,omitempty"`

	// The reason for approval/rejection of the connection.
	Description *string `json:"description,omitempty"`

	// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
	Status *PrivateEndpointServiceConnectionStatus `json:"status,omitempty"`
}

type ReferenceDataSetCreateOrUpdateParameters struct {
	CreateOrUpdateTrackedResourceProperties
	// REQUIRED; Properties used to create a reference data set.
	Properties *ReferenceDataSetCreationProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ReferenceDataSetCreateOrUpdateParameters.
func (r ReferenceDataSetCreateOrUpdateParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	r.CreateOrUpdateTrackedResourceProperties.marshalInternal(objectMap)
	populate(objectMap, "properties", r.Properties)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ReferenceDataSetCreateOrUpdateParameters.
func (r *ReferenceDataSetCreateOrUpdateParameters) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "properties":
			err = unpopulate(val, &r.Properties)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := r.CreateOrUpdateTrackedResourceProperties.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// ReferenceDataSetCreationProperties - Properties used to create a reference data set.
type ReferenceDataSetCreationProperties struct {
	// REQUIRED; The list of key properties for the reference data set.
	KeyProperties []*ReferenceDataSetKeyProperty `json:"keyProperties,omitempty"`

	// The reference data set key comparison behavior can be set using this property. By default, the value is 'Ordinal' - which means case sensitive key comparison
	// will be performed while joining reference
	// data with events or while adding new reference data. When 'OrdinalIgnoreCase' is set, case insensitive comparison will be used.
	DataStringComparisonBehavior *DataStringComparisonBehavior `json:"dataStringComparisonBehavior,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ReferenceDataSetCreationProperties.
func (r ReferenceDataSetCreationProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	r.marshalInternal(objectMap)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ReferenceDataSetCreationProperties.
func (r *ReferenceDataSetCreationProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	return r.unmarshalInternal(rawMsg)
}

func (r ReferenceDataSetCreationProperties) marshalInternal(objectMap map[string]interface{}) {
	populate(objectMap, "dataStringComparisonBehavior", r.DataStringComparisonBehavior)
	populate(objectMap, "keyProperties", r.KeyProperties)
}

func (r *ReferenceDataSetCreationProperties) unmarshalInternal(rawMsg map[string]json.RawMessage) error {
	for key, val := range rawMsg {
		var err error
		switch key {
		case "dataStringComparisonBehavior":
			err = unpopulate(val, &r.DataStringComparisonBehavior)
			delete(rawMsg, key)
		case "keyProperties":
			err = unpopulate(val, &r.KeyProperties)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// ReferenceDataSetKeyProperty - A key property for the reference data set. A reference data set can have multiple key properties.
type ReferenceDataSetKeyProperty struct {
	// The name of the key property.
	Name *string `json:"name,omitempty"`

	// The type of the key property.
	Type *ReferenceDataKeyPropertyType `json:"type,omitempty"`
}

// ReferenceDataSetListResponse - The response of the List Reference Data Sets operation.
type ReferenceDataSetListResponse struct {
	// Result of the List Reference Data Sets operation.
	Value []*ReferenceDataSetResource `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ReferenceDataSetListResponse.
func (r ReferenceDataSetListResponse) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", r.Value)
	return json.Marshal(objectMap)
}

// ReferenceDataSetResource - A reference data set provides metadata about the events in an environment. Metadata in the reference data set will be joined
// with events as they are read from event sources. The metadata that makes up
// the reference data set is uploaded or modified through the Time Series Insights data plane APIs.
type ReferenceDataSetResource struct {
	TrackedResource
	// Properties of the reference data set.
	Properties *ReferenceDataSetResourceProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ReferenceDataSetResource.
func (r ReferenceDataSetResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	r.TrackedResource.marshalInternal(objectMap)
	populate(objectMap, "properties", r.Properties)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ReferenceDataSetResource.
func (r *ReferenceDataSetResource) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "properties":
			err = unpopulate(val, &r.Properties)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := r.TrackedResource.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// ReferenceDataSetResourceProperties - Properties of the reference data set.
type ReferenceDataSetResourceProperties struct {
	ReferenceDataSetCreationProperties
	ResourceProperties
}

// ReferenceDataSetUpdateParameters - Parameters supplied to the Update Reference Data Set operation.
type ReferenceDataSetUpdateParameters struct {
	// Key-value pairs of additional properties for the reference data set.
	Tags map[string]*string `json:"tags,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ReferenceDataSetUpdateParameters.
func (r ReferenceDataSetUpdateParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "tags", r.Tags)
	return json.Marshal(objectMap)
}

// ReferenceDataSetsCreateOrUpdateOptions contains the optional parameters for the ReferenceDataSets.CreateOrUpdate method.
type ReferenceDataSetsCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// ReferenceDataSetsDeleteOptions contains the optional parameters for the ReferenceDataSets.Delete method.
type ReferenceDataSetsDeleteOptions struct {
	// placeholder for future optional parameters
}

// ReferenceDataSetsGetOptions contains the optional parameters for the ReferenceDataSets.Get method.
type ReferenceDataSetsGetOptions struct {
	// placeholder for future optional parameters
}

// ReferenceDataSetsListByEnvironmentOptions contains the optional parameters for the ReferenceDataSets.ListByEnvironment method.
type ReferenceDataSetsListByEnvironmentOptions struct {
	// placeholder for future optional parameters
}

// ReferenceDataSetsUpdateOptions contains the optional parameters for the ReferenceDataSets.Update method.
type ReferenceDataSetsUpdateOptions struct {
	// placeholder for future optional parameters
}

// Resource - Common fields that are returned in the response for all Azure Resource Manager resources
type Resource struct {
	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; The name of the resource
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string `json:"type,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type Resource.
func (r Resource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	r.marshalInternal(objectMap)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type Resource.
func (r *Resource) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	return r.unmarshalInternal(rawMsg)
}

func (r Resource) marshalInternal(objectMap map[string]interface{}) {
	populate(objectMap, "id", r.ID)
	populate(objectMap, "name", r.Name)
	populate(objectMap, "type", r.Type)
}

func (r *Resource) unmarshalInternal(rawMsg map[string]json.RawMessage) error {
	for key, val := range rawMsg {
		var err error
		switch key {
		case "id":
			err = unpopulate(val, &r.ID)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, &r.Name)
			delete(rawMsg, key)
		case "type":
			err = unpopulate(val, &r.Type)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// ResourceProperties - Properties that are common to all tracked resources.
type ResourceProperties struct {
	// READ-ONLY; The time the resource was created.
	CreationTime *time.Time `json:"creationTime,omitempty" azure:"ro"`

	// READ-ONLY; Provisioning state of the resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type ResourceProperties.
func (r ResourceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	r.marshalInternal(objectMap)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ResourceProperties.
func (r *ResourceProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	return r.unmarshalInternal(rawMsg)
}

func (r ResourceProperties) marshalInternal(objectMap map[string]interface{}) {
	populate(objectMap, "creationTime", (*timeRFC3339)(r.CreationTime))
	populate(objectMap, "provisioningState", r.ProvisioningState)
}

func (r *ResourceProperties) unmarshalInternal(rawMsg map[string]json.RawMessage) error {
	for key, val := range rawMsg {
		var err error
		switch key {
		case "creationTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			r.CreationTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "provisioningState":
			err = unpopulate(val, &r.ProvisioningState)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// SKU - The sku determines the type of environment, either Gen1 (S1 or S2) or Gen2 (L1). For Gen1 environments the sku determines the capacity of the environment,
// the ingress rate, and the billing rate.
type SKU struct {
	// REQUIRED; The capacity of the sku. For Gen1 environments, this value can be changed to support scale out of environments after they have been created.
	Capacity *int32 `json:"capacity,omitempty"`

	// REQUIRED; The name of this SKU.
	Name *SKUName `json:"name,omitempty"`
}

// ServiceSpecification - One property of operation, include metric specifications.
type ServiceSpecification struct {
	// A list of Azure Monitoring log definitions.
	LogSpecifications []*LogSpecification `json:"logSpecifications,omitempty"`

	// Metric specifications of operation.
	MetricSpecifications []*MetricSpecification `json:"metricSpecifications,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ServiceSpecification.
func (s ServiceSpecification) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "logSpecifications", s.LogSpecifications)
	populate(objectMap, "metricSpecifications", s.MetricSpecifications)
	return json.Marshal(objectMap)
}

// TimeSeriesIDProperty - The structure of the property that a time series id can have. An environment can have multiple such properties.
type TimeSeriesIDProperty struct {
	// The name of the property.
	Name *string `json:"name,omitempty"`

	// The type of the property.
	Type *PropertyType `json:"type,omitempty"`
}

// TrackedResource - Time Series Insights resource that is tracked by Azure Resource Manager.
type TrackedResource struct {
	Resource
	// REQUIRED; Resource location
	Location *string `json:"location,omitempty"`

	// Resource tags
	Tags map[string]*string `json:"tags,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type TrackedResource.
func (t TrackedResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	t.marshalInternal(objectMap)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type TrackedResource.
func (t *TrackedResource) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	return t.unmarshalInternal(rawMsg)
}

func (t TrackedResource) marshalInternal(objectMap map[string]interface{}) {
	t.Resource.marshalInternal(objectMap)
	populate(objectMap, "location", t.Location)
	populate(objectMap, "tags", t.Tags)
}

func (t *TrackedResource) unmarshalInternal(rawMsg map[string]json.RawMessage) error {
	for key, val := range rawMsg {
		var err error
		switch key {
		case "location":
			err = unpopulate(val, &t.Location)
			delete(rawMsg, key)
		case "tags":
			err = unpopulate(val, &t.Tags)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := t.Resource.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// WarmStorageEnvironmentStatus - An object that represents the status of warm storage on an environment.
type WarmStorageEnvironmentStatus struct {
	// READ-ONLY; An object that contains the status of warm storage properties usage.
	PropertiesUsage *WarmStoragePropertiesUsage `json:"propertiesUsage,omitempty" azure:"ro"`
}

// WarmStoragePropertiesUsage - An object that contains the status of warm storage properties usage.
type WarmStoragePropertiesUsage struct {
	// This string represents the state of warm storage properties usage. It can be "Ok", "Error", "Unknown".
	State *WarmStoragePropertiesState `json:"state,omitempty"`

	// READ-ONLY; An object that contains the details about warm storage properties usage state.
	StateDetails *WarmStoragePropertiesUsageStateDetails `json:"stateDetails,omitempty" azure:"ro"`
}

// WarmStoragePropertiesUsageStateDetails - An object that contains the details about warm storage properties usage state.
type WarmStoragePropertiesUsageStateDetails struct {
	// A value that represents the number of properties used by the environment for S1/S2 SKU and number of properties used by Warm Store for PAYG SKU
	CurrentCount *int32 `json:"currentCount,omitempty"`

	// A value that represents the maximum number of properties used allowed by the environment for S1/S2 SKU and maximum number of properties allowed by Warm
	// Store for PAYG SKU.
	MaxCount *int32 `json:"maxCount,omitempty"`
}

// WarmStoreConfigurationProperties - The warm store configuration provides the details to create a warm store cache that will retain a copy of the environment's
// data available for faster query.
type WarmStoreConfigurationProperties struct {
	// REQUIRED; ISO8601 timespan specifying the number of days the environment's events will be available for query from the warm store.
	DataRetention *string `json:"dataRetention,omitempty"`
}

func populate(m map[string]interface{}, k string, v interface{}) {
	if v == nil {
		return
	} else if azcore.IsNullValue(v) {
		m[k] = nil
	} else if !reflect.ValueOf(v).IsNil() {
		m[k] = v
	}
}

func unpopulate(data json.RawMessage, v interface{}) error {
	if data == nil {
		return nil
	}
	return json.Unmarshal(data, v)
}
