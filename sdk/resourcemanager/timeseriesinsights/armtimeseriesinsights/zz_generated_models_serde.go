//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armtimeseriesinsights

import (
	"encoding/json"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"reflect"
)

// MarshalJSON implements the json.Marshaller interface for type AccessPolicyListResponse.
func (a AccessPolicyListResponse) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", a.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type AccessPolicyMutableProperties.
func (a AccessPolicyMutableProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "description", a.Description)
	populate(objectMap, "roles", a.Roles)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type AccessPolicyResourceProperties.
func (a AccessPolicyResourceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "description", a.Description)
	populate(objectMap, "principalObjectId", a.PrincipalObjectID)
	populate(objectMap, "roles", a.Roles)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type AccessPolicyUpdateParameters.
func (a AccessPolicyUpdateParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "properties", a.Properties)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type AzureEventSourceProperties.
func (a AzureEventSourceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populateTimeRFC3339(objectMap, "creationTime", a.CreationTime)
	populate(objectMap, "eventSourceResourceId", a.EventSourceResourceID)
	populate(objectMap, "ingressStartAt", a.IngressStartAt)
	populate(objectMap, "localTimestamp", a.LocalTimestamp)
	populate(objectMap, "provisioningState", a.ProvisioningState)
	populate(objectMap, "timestampPropertyName", a.TimestampPropertyName)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type AzureEventSourceProperties.
func (a *AzureEventSourceProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "creationTime":
			err = unpopulateTimeRFC3339(val, &a.CreationTime)
			delete(rawMsg, key)
		case "eventSourceResourceId":
			err = unpopulate(val, &a.EventSourceResourceID)
			delete(rawMsg, key)
		case "ingressStartAt":
			err = unpopulate(val, &a.IngressStartAt)
			delete(rawMsg, key)
		case "localTimestamp":
			err = unpopulate(val, &a.LocalTimestamp)
			delete(rawMsg, key)
		case "provisioningState":
			err = unpopulate(val, &a.ProvisioningState)
			delete(rawMsg, key)
		case "timestampPropertyName":
			err = unpopulate(val, &a.TimestampPropertyName)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type CloudErrorBody.
func (c CloudErrorBody) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "code", c.Code)
	populate(objectMap, "details", c.Details)
	populate(objectMap, "message", c.Message)
	populate(objectMap, "target", c.Target)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type CreateOrUpdateTrackedResourceProperties.
func (c CreateOrUpdateTrackedResourceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "location", c.Location)
	populate(objectMap, "tags", c.Tags)
	return json.Marshal(objectMap)
}

// GetEnvironmentCreateOrUpdateParameters implements the EnvironmentCreateOrUpdateParametersClassification interface for type
// EnvironmentCreateOrUpdateParameters.
func (e *EnvironmentCreateOrUpdateParameters) GetEnvironmentCreateOrUpdateParameters() *EnvironmentCreateOrUpdateParameters {
	return e
}

// MarshalJSON implements the json.Marshaller interface for type EnvironmentCreateOrUpdateParameters.
func (e EnvironmentCreateOrUpdateParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	objectMap["kind"] = e.Kind
	populate(objectMap, "location", e.Location)
	populate(objectMap, "sku", e.SKU)
	populate(objectMap, "tags", e.Tags)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type EnvironmentListResponse.
func (e EnvironmentListResponse) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", e.Value)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type EnvironmentListResponse.
func (e *EnvironmentListResponse) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "value":
			e.Value, err = unmarshalEnvironmentResourceClassificationArray(val)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// GetEnvironmentResource implements the EnvironmentResourceClassification interface for type EnvironmentResource.
func (e *EnvironmentResource) GetEnvironmentResource() *EnvironmentResource { return e }

// MarshalJSON implements the json.Marshaller interface for type EnvironmentResource.
func (e EnvironmentResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", e.ID)
	objectMap["kind"] = e.Kind
	populate(objectMap, "location", e.Location)
	populate(objectMap, "name", e.Name)
	populate(objectMap, "sku", e.SKU)
	populate(objectMap, "tags", e.Tags)
	populate(objectMap, "type", e.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type EnvironmentResourceProperties.
func (e EnvironmentResourceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populateTimeRFC3339(objectMap, "creationTime", e.CreationTime)
	populate(objectMap, "dataAccessFqdn", e.DataAccessFqdn)
	populate(objectMap, "dataAccessId", e.DataAccessID)
	populate(objectMap, "provisioningState", e.ProvisioningState)
	populate(objectMap, "status", e.Status)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type EnvironmentResourceProperties.
func (e *EnvironmentResourceProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "creationTime":
			err = unpopulateTimeRFC3339(val, &e.CreationTime)
			delete(rawMsg, key)
		case "dataAccessFqdn":
			err = unpopulate(val, &e.DataAccessFqdn)
			delete(rawMsg, key)
		case "dataAccessId":
			err = unpopulate(val, &e.DataAccessID)
			delete(rawMsg, key)
		case "provisioningState":
			err = unpopulate(val, &e.ProvisioningState)
			delete(rawMsg, key)
		case "status":
			err = unpopulate(val, &e.Status)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// GetEnvironmentUpdateParameters implements the EnvironmentUpdateParametersClassification interface for type EnvironmentUpdateParameters.
func (e *EnvironmentUpdateParameters) GetEnvironmentUpdateParameters() *EnvironmentUpdateParameters {
	return e
}

// MarshalJSON implements the json.Marshaller interface for type EnvironmentUpdateParameters.
func (e EnvironmentUpdateParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	objectMap["kind"] = e.Kind
	populate(objectMap, "tags", e.Tags)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type EventHubEventSourceCommonProperties.
func (e EventHubEventSourceCommonProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "consumerGroupName", e.ConsumerGroupName)
	populateTimeRFC3339(objectMap, "creationTime", e.CreationTime)
	populate(objectMap, "eventHubName", e.EventHubName)
	populate(objectMap, "eventSourceResourceId", e.EventSourceResourceID)
	populate(objectMap, "ingressStartAt", e.IngressStartAt)
	populate(objectMap, "keyName", e.KeyName)
	populate(objectMap, "localTimestamp", e.LocalTimestamp)
	populate(objectMap, "provisioningState", e.ProvisioningState)
	populate(objectMap, "serviceBusNamespace", e.ServiceBusNamespace)
	populate(objectMap, "timestampPropertyName", e.TimestampPropertyName)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type EventHubEventSourceCommonProperties.
func (e *EventHubEventSourceCommonProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "consumerGroupName":
			err = unpopulate(val, &e.ConsumerGroupName)
			delete(rawMsg, key)
		case "creationTime":
			err = unpopulateTimeRFC3339(val, &e.CreationTime)
			delete(rawMsg, key)
		case "eventHubName":
			err = unpopulate(val, &e.EventHubName)
			delete(rawMsg, key)
		case "eventSourceResourceId":
			err = unpopulate(val, &e.EventSourceResourceID)
			delete(rawMsg, key)
		case "ingressStartAt":
			err = unpopulate(val, &e.IngressStartAt)
			delete(rawMsg, key)
		case "keyName":
			err = unpopulate(val, &e.KeyName)
			delete(rawMsg, key)
		case "localTimestamp":
			err = unpopulate(val, &e.LocalTimestamp)
			delete(rawMsg, key)
		case "provisioningState":
			err = unpopulate(val, &e.ProvisioningState)
			delete(rawMsg, key)
		case "serviceBusNamespace":
			err = unpopulate(val, &e.ServiceBusNamespace)
			delete(rawMsg, key)
		case "timestampPropertyName":
			err = unpopulate(val, &e.TimestampPropertyName)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// GetEventSourceCreateOrUpdateParameters implements the EventSourceCreateOrUpdateParametersClassification interface for type
// EventHubEventSourceCreateOrUpdateParameters.
func (e *EventHubEventSourceCreateOrUpdateParameters) GetEventSourceCreateOrUpdateParameters() *EventSourceCreateOrUpdateParameters {
	return &EventSourceCreateOrUpdateParameters{
		Kind:           e.Kind,
		LocalTimestamp: e.LocalTimestamp,
		Location:       e.Location,
		Tags:           e.Tags,
	}
}

// MarshalJSON implements the json.Marshaller interface for type EventHubEventSourceCreateOrUpdateParameters.
func (e EventHubEventSourceCreateOrUpdateParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	objectMap["kind"] = EventSourceKindMicrosoftEventHub
	populate(objectMap, "localTimestamp", e.LocalTimestamp)
	populate(objectMap, "location", e.Location)
	populate(objectMap, "properties", e.Properties)
	populate(objectMap, "tags", e.Tags)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type EventHubEventSourceCreateOrUpdateParameters.
func (e *EventHubEventSourceCreateOrUpdateParameters) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "kind":
			err = unpopulate(val, &e.Kind)
			delete(rawMsg, key)
		case "localTimestamp":
			err = unpopulate(val, &e.LocalTimestamp)
			delete(rawMsg, key)
		case "location":
			err = unpopulate(val, &e.Location)
			delete(rawMsg, key)
		case "properties":
			err = unpopulate(val, &e.Properties)
			delete(rawMsg, key)
		case "tags":
			err = unpopulate(val, &e.Tags)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type EventHubEventSourceCreationProperties.
func (e EventHubEventSourceCreationProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "consumerGroupName", e.ConsumerGroupName)
	populateTimeRFC3339(objectMap, "creationTime", e.CreationTime)
	populate(objectMap, "eventHubName", e.EventHubName)
	populate(objectMap, "eventSourceResourceId", e.EventSourceResourceID)
	populate(objectMap, "ingressStartAt", e.IngressStartAt)
	populate(objectMap, "keyName", e.KeyName)
	populate(objectMap, "localTimestamp", e.LocalTimestamp)
	populate(objectMap, "provisioningState", e.ProvisioningState)
	populate(objectMap, "serviceBusNamespace", e.ServiceBusNamespace)
	populate(objectMap, "sharedAccessKey", e.SharedAccessKey)
	populate(objectMap, "timestampPropertyName", e.TimestampPropertyName)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type EventHubEventSourceCreationProperties.
func (e *EventHubEventSourceCreationProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "consumerGroupName":
			err = unpopulate(val, &e.ConsumerGroupName)
			delete(rawMsg, key)
		case "creationTime":
			err = unpopulateTimeRFC3339(val, &e.CreationTime)
			delete(rawMsg, key)
		case "eventHubName":
			err = unpopulate(val, &e.EventHubName)
			delete(rawMsg, key)
		case "eventSourceResourceId":
			err = unpopulate(val, &e.EventSourceResourceID)
			delete(rawMsg, key)
		case "ingressStartAt":
			err = unpopulate(val, &e.IngressStartAt)
			delete(rawMsg, key)
		case "keyName":
			err = unpopulate(val, &e.KeyName)
			delete(rawMsg, key)
		case "localTimestamp":
			err = unpopulate(val, &e.LocalTimestamp)
			delete(rawMsg, key)
		case "provisioningState":
			err = unpopulate(val, &e.ProvisioningState)
			delete(rawMsg, key)
		case "serviceBusNamespace":
			err = unpopulate(val, &e.ServiceBusNamespace)
			delete(rawMsg, key)
		case "sharedAccessKey":
			err = unpopulate(val, &e.SharedAccessKey)
			delete(rawMsg, key)
		case "timestampPropertyName":
			err = unpopulate(val, &e.TimestampPropertyName)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// GetEventSourceResource implements the EventSourceResourceClassification interface for type EventHubEventSourceResource.
func (e *EventHubEventSourceResource) GetEventSourceResource() *EventSourceResource {
	return &EventSourceResource{
		Kind:     e.Kind,
		Location: e.Location,
		Tags:     e.Tags,
		ID:       e.ID,
		Name:     e.Name,
		Type:     e.Type,
	}
}

// MarshalJSON implements the json.Marshaller interface for type EventHubEventSourceResource.
func (e EventHubEventSourceResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", e.ID)
	objectMap["kind"] = EventSourceResourceKindMicrosoftEventHub
	populate(objectMap, "location", e.Location)
	populate(objectMap, "name", e.Name)
	populate(objectMap, "properties", e.Properties)
	populate(objectMap, "tags", e.Tags)
	populate(objectMap, "type", e.Type)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type EventHubEventSourceResource.
func (e *EventHubEventSourceResource) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "id":
			err = unpopulate(val, &e.ID)
			delete(rawMsg, key)
		case "kind":
			err = unpopulate(val, &e.Kind)
			delete(rawMsg, key)
		case "location":
			err = unpopulate(val, &e.Location)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, &e.Name)
			delete(rawMsg, key)
		case "properties":
			err = unpopulate(val, &e.Properties)
			delete(rawMsg, key)
		case "tags":
			err = unpopulate(val, &e.Tags)
			delete(rawMsg, key)
		case "type":
			err = unpopulate(val, &e.Type)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type EventHubEventSourceResourceProperties.
func (e EventHubEventSourceResourceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "consumerGroupName", e.ConsumerGroupName)
	populateTimeRFC3339(objectMap, "creationTime", e.CreationTime)
	populate(objectMap, "eventHubName", e.EventHubName)
	populate(objectMap, "eventSourceResourceId", e.EventSourceResourceID)
	populate(objectMap, "ingressStartAt", e.IngressStartAt)
	populate(objectMap, "keyName", e.KeyName)
	populate(objectMap, "localTimestamp", e.LocalTimestamp)
	populate(objectMap, "provisioningState", e.ProvisioningState)
	populate(objectMap, "serviceBusNamespace", e.ServiceBusNamespace)
	populate(objectMap, "timestampPropertyName", e.TimestampPropertyName)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type EventHubEventSourceResourceProperties.
func (e *EventHubEventSourceResourceProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "consumerGroupName":
			err = unpopulate(val, &e.ConsumerGroupName)
			delete(rawMsg, key)
		case "creationTime":
			err = unpopulateTimeRFC3339(val, &e.CreationTime)
			delete(rawMsg, key)
		case "eventHubName":
			err = unpopulate(val, &e.EventHubName)
			delete(rawMsg, key)
		case "eventSourceResourceId":
			err = unpopulate(val, &e.EventSourceResourceID)
			delete(rawMsg, key)
		case "ingressStartAt":
			err = unpopulate(val, &e.IngressStartAt)
			delete(rawMsg, key)
		case "keyName":
			err = unpopulate(val, &e.KeyName)
			delete(rawMsg, key)
		case "localTimestamp":
			err = unpopulate(val, &e.LocalTimestamp)
			delete(rawMsg, key)
		case "provisioningState":
			err = unpopulate(val, &e.ProvisioningState)
			delete(rawMsg, key)
		case "serviceBusNamespace":
			err = unpopulate(val, &e.ServiceBusNamespace)
			delete(rawMsg, key)
		case "timestampPropertyName":
			err = unpopulate(val, &e.TimestampPropertyName)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// GetEventSourceUpdateParameters implements the EventSourceUpdateParametersClassification interface for type EventHubEventSourceUpdateParameters.
func (e *EventHubEventSourceUpdateParameters) GetEventSourceUpdateParameters() *EventSourceUpdateParameters {
	return &EventSourceUpdateParameters{
		Kind: e.Kind,
		Tags: e.Tags,
	}
}

// MarshalJSON implements the json.Marshaller interface for type EventHubEventSourceUpdateParameters.
func (e EventHubEventSourceUpdateParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	objectMap["kind"] = EventSourceKindMicrosoftEventHub
	populate(objectMap, "properties", e.Properties)
	populate(objectMap, "tags", e.Tags)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type EventHubEventSourceUpdateParameters.
func (e *EventHubEventSourceUpdateParameters) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "kind":
			err = unpopulate(val, &e.Kind)
			delete(rawMsg, key)
		case "properties":
			err = unpopulate(val, &e.Properties)
			delete(rawMsg, key)
		case "tags":
			err = unpopulate(val, &e.Tags)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type EventSourceCommonProperties.
func (e EventSourceCommonProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populateTimeRFC3339(objectMap, "creationTime", e.CreationTime)
	populate(objectMap, "ingressStartAt", e.IngressStartAt)
	populate(objectMap, "localTimestamp", e.LocalTimestamp)
	populate(objectMap, "provisioningState", e.ProvisioningState)
	populate(objectMap, "timestampPropertyName", e.TimestampPropertyName)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type EventSourceCommonProperties.
func (e *EventSourceCommonProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "creationTime":
			err = unpopulateTimeRFC3339(val, &e.CreationTime)
			delete(rawMsg, key)
		case "ingressStartAt":
			err = unpopulate(val, &e.IngressStartAt)
			delete(rawMsg, key)
		case "localTimestamp":
			err = unpopulate(val, &e.LocalTimestamp)
			delete(rawMsg, key)
		case "provisioningState":
			err = unpopulate(val, &e.ProvisioningState)
			delete(rawMsg, key)
		case "timestampPropertyName":
			err = unpopulate(val, &e.TimestampPropertyName)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// GetEventSourceCreateOrUpdateParameters implements the EventSourceCreateOrUpdateParametersClassification interface for type
// EventSourceCreateOrUpdateParameters.
func (e *EventSourceCreateOrUpdateParameters) GetEventSourceCreateOrUpdateParameters() *EventSourceCreateOrUpdateParameters {
	return e
}

// MarshalJSON implements the json.Marshaller interface for type EventSourceCreateOrUpdateParameters.
func (e EventSourceCreateOrUpdateParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	objectMap["kind"] = e.Kind
	populate(objectMap, "localTimestamp", e.LocalTimestamp)
	populate(objectMap, "location", e.Location)
	populate(objectMap, "tags", e.Tags)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type EventSourceListResponse.
func (e EventSourceListResponse) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", e.Value)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type EventSourceListResponse.
func (e *EventSourceListResponse) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "value":
			e.Value, err = unmarshalEventSourceResourceClassificationArray(val)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// GetEventSourceResource implements the EventSourceResourceClassification interface for type EventSourceResource.
func (e *EventSourceResource) GetEventSourceResource() *EventSourceResource { return e }

// MarshalJSON implements the json.Marshaller interface for type EventSourceResource.
func (e EventSourceResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", e.ID)
	objectMap["kind"] = e.Kind
	populate(objectMap, "location", e.Location)
	populate(objectMap, "name", e.Name)
	populate(objectMap, "tags", e.Tags)
	populate(objectMap, "type", e.Type)
	return json.Marshal(objectMap)
}

// GetEventSourceUpdateParameters implements the EventSourceUpdateParametersClassification interface for type EventSourceUpdateParameters.
func (e *EventSourceUpdateParameters) GetEventSourceUpdateParameters() *EventSourceUpdateParameters {
	return e
}

// MarshalJSON implements the json.Marshaller interface for type EventSourceUpdateParameters.
func (e EventSourceUpdateParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	objectMap["kind"] = e.Kind
	populate(objectMap, "tags", e.Tags)
	return json.Marshal(objectMap)
}

// GetEnvironmentCreateOrUpdateParameters implements the EnvironmentCreateOrUpdateParametersClassification interface for type
// Gen1EnvironmentCreateOrUpdateParameters.
func (g *Gen1EnvironmentCreateOrUpdateParameters) GetEnvironmentCreateOrUpdateParameters() *EnvironmentCreateOrUpdateParameters {
	return &EnvironmentCreateOrUpdateParameters{
		Kind:     g.Kind,
		SKU:      g.SKU,
		Location: g.Location,
		Tags:     g.Tags,
	}
}

// MarshalJSON implements the json.Marshaller interface for type Gen1EnvironmentCreateOrUpdateParameters.
func (g Gen1EnvironmentCreateOrUpdateParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	objectMap["kind"] = EnvironmentKindGen1
	populate(objectMap, "location", g.Location)
	populate(objectMap, "properties", g.Properties)
	populate(objectMap, "sku", g.SKU)
	populate(objectMap, "tags", g.Tags)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type Gen1EnvironmentCreateOrUpdateParameters.
func (g *Gen1EnvironmentCreateOrUpdateParameters) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "kind":
			err = unpopulate(val, &g.Kind)
			delete(rawMsg, key)
		case "location":
			err = unpopulate(val, &g.Location)
			delete(rawMsg, key)
		case "properties":
			err = unpopulate(val, &g.Properties)
			delete(rawMsg, key)
		case "sku":
			err = unpopulate(val, &g.SKU)
			delete(rawMsg, key)
		case "tags":
			err = unpopulate(val, &g.Tags)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type Gen1EnvironmentCreationProperties.
func (g Gen1EnvironmentCreationProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "dataRetentionTime", g.DataRetentionTime)
	populate(objectMap, "partitionKeyProperties", g.PartitionKeyProperties)
	populate(objectMap, "storageLimitExceededBehavior", g.StorageLimitExceededBehavior)
	return json.Marshal(objectMap)
}

// GetEnvironmentResource implements the EnvironmentResourceClassification interface for type Gen1EnvironmentResource.
func (g *Gen1EnvironmentResource) GetEnvironmentResource() *EnvironmentResource {
	return &EnvironmentResource{
		SKU:      g.SKU,
		Kind:     g.Kind,
		Location: g.Location,
		Tags:     g.Tags,
		ID:       g.ID,
		Name:     g.Name,
		Type:     g.Type,
	}
}

// MarshalJSON implements the json.Marshaller interface for type Gen1EnvironmentResource.
func (g Gen1EnvironmentResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", g.ID)
	objectMap["kind"] = EnvironmentResourceKindGen1
	populate(objectMap, "location", g.Location)
	populate(objectMap, "name", g.Name)
	populate(objectMap, "properties", g.Properties)
	populate(objectMap, "sku", g.SKU)
	populate(objectMap, "tags", g.Tags)
	populate(objectMap, "type", g.Type)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type Gen1EnvironmentResource.
func (g *Gen1EnvironmentResource) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "id":
			err = unpopulate(val, &g.ID)
			delete(rawMsg, key)
		case "kind":
			err = unpopulate(val, &g.Kind)
			delete(rawMsg, key)
		case "location":
			err = unpopulate(val, &g.Location)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, &g.Name)
			delete(rawMsg, key)
		case "properties":
			err = unpopulate(val, &g.Properties)
			delete(rawMsg, key)
		case "sku":
			err = unpopulate(val, &g.SKU)
			delete(rawMsg, key)
		case "tags":
			err = unpopulate(val, &g.Tags)
			delete(rawMsg, key)
		case "type":
			err = unpopulate(val, &g.Type)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type Gen1EnvironmentResourceProperties.
func (g Gen1EnvironmentResourceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populateTimeRFC3339(objectMap, "creationTime", g.CreationTime)
	populate(objectMap, "dataAccessFqdn", g.DataAccessFqdn)
	populate(objectMap, "dataAccessId", g.DataAccessID)
	populate(objectMap, "dataRetentionTime", g.DataRetentionTime)
	populate(objectMap, "partitionKeyProperties", g.PartitionKeyProperties)
	populate(objectMap, "provisioningState", g.ProvisioningState)
	populate(objectMap, "status", g.Status)
	populate(objectMap, "storageLimitExceededBehavior", g.StorageLimitExceededBehavior)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type Gen1EnvironmentResourceProperties.
func (g *Gen1EnvironmentResourceProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "creationTime":
			err = unpopulateTimeRFC3339(val, &g.CreationTime)
			delete(rawMsg, key)
		case "dataAccessFqdn":
			err = unpopulate(val, &g.DataAccessFqdn)
			delete(rawMsg, key)
		case "dataAccessId":
			err = unpopulate(val, &g.DataAccessID)
			delete(rawMsg, key)
		case "dataRetentionTime":
			err = unpopulate(val, &g.DataRetentionTime)
			delete(rawMsg, key)
		case "partitionKeyProperties":
			err = unpopulate(val, &g.PartitionKeyProperties)
			delete(rawMsg, key)
		case "provisioningState":
			err = unpopulate(val, &g.ProvisioningState)
			delete(rawMsg, key)
		case "status":
			err = unpopulate(val, &g.Status)
			delete(rawMsg, key)
		case "storageLimitExceededBehavior":
			err = unpopulate(val, &g.StorageLimitExceededBehavior)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// GetEnvironmentUpdateParameters implements the EnvironmentUpdateParametersClassification interface for type Gen1EnvironmentUpdateParameters.
func (g *Gen1EnvironmentUpdateParameters) GetEnvironmentUpdateParameters() *EnvironmentUpdateParameters {
	return &EnvironmentUpdateParameters{
		Kind: g.Kind,
		Tags: g.Tags,
	}
}

// MarshalJSON implements the json.Marshaller interface for type Gen1EnvironmentUpdateParameters.
func (g Gen1EnvironmentUpdateParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	objectMap["kind"] = EnvironmentKindGen1
	populate(objectMap, "properties", g.Properties)
	populate(objectMap, "sku", g.SKU)
	populate(objectMap, "tags", g.Tags)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type Gen1EnvironmentUpdateParameters.
func (g *Gen1EnvironmentUpdateParameters) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "kind":
			err = unpopulate(val, &g.Kind)
			delete(rawMsg, key)
		case "properties":
			err = unpopulate(val, &g.Properties)
			delete(rawMsg, key)
		case "sku":
			err = unpopulate(val, &g.SKU)
			delete(rawMsg, key)
		case "tags":
			err = unpopulate(val, &g.Tags)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// GetEnvironmentCreateOrUpdateParameters implements the EnvironmentCreateOrUpdateParametersClassification interface for type
// Gen2EnvironmentCreateOrUpdateParameters.
func (g *Gen2EnvironmentCreateOrUpdateParameters) GetEnvironmentCreateOrUpdateParameters() *EnvironmentCreateOrUpdateParameters {
	return &EnvironmentCreateOrUpdateParameters{
		Kind:     g.Kind,
		SKU:      g.SKU,
		Location: g.Location,
		Tags:     g.Tags,
	}
}

// MarshalJSON implements the json.Marshaller interface for type Gen2EnvironmentCreateOrUpdateParameters.
func (g Gen2EnvironmentCreateOrUpdateParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	objectMap["kind"] = EnvironmentKindGen2
	populate(objectMap, "location", g.Location)
	populate(objectMap, "properties", g.Properties)
	populate(objectMap, "sku", g.SKU)
	populate(objectMap, "tags", g.Tags)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type Gen2EnvironmentCreateOrUpdateParameters.
func (g *Gen2EnvironmentCreateOrUpdateParameters) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "kind":
			err = unpopulate(val, &g.Kind)
			delete(rawMsg, key)
		case "location":
			err = unpopulate(val, &g.Location)
			delete(rawMsg, key)
		case "properties":
			err = unpopulate(val, &g.Properties)
			delete(rawMsg, key)
		case "sku":
			err = unpopulate(val, &g.SKU)
			delete(rawMsg, key)
		case "tags":
			err = unpopulate(val, &g.Tags)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type Gen2EnvironmentCreationProperties.
func (g Gen2EnvironmentCreationProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "privateEndpointConnections", g.PrivateEndpointConnections)
	populate(objectMap, "publicNetworkAccess", g.PublicNetworkAccess)
	populate(objectMap, "storageConfiguration", g.StorageConfiguration)
	populate(objectMap, "timeSeriesIdProperties", g.TimeSeriesIDProperties)
	populate(objectMap, "warmStoreConfiguration", g.WarmStoreConfiguration)
	return json.Marshal(objectMap)
}

// GetEnvironmentResource implements the EnvironmentResourceClassification interface for type Gen2EnvironmentResource.
func (g *Gen2EnvironmentResource) GetEnvironmentResource() *EnvironmentResource {
	return &EnvironmentResource{
		SKU:      g.SKU,
		Kind:     g.Kind,
		Location: g.Location,
		Tags:     g.Tags,
		ID:       g.ID,
		Name:     g.Name,
		Type:     g.Type,
	}
}

// MarshalJSON implements the json.Marshaller interface for type Gen2EnvironmentResource.
func (g Gen2EnvironmentResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", g.ID)
	objectMap["kind"] = EnvironmentResourceKindGen2
	populate(objectMap, "location", g.Location)
	populate(objectMap, "name", g.Name)
	populate(objectMap, "properties", g.Properties)
	populate(objectMap, "sku", g.SKU)
	populate(objectMap, "tags", g.Tags)
	populate(objectMap, "type", g.Type)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type Gen2EnvironmentResource.
func (g *Gen2EnvironmentResource) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "id":
			err = unpopulate(val, &g.ID)
			delete(rawMsg, key)
		case "kind":
			err = unpopulate(val, &g.Kind)
			delete(rawMsg, key)
		case "location":
			err = unpopulate(val, &g.Location)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, &g.Name)
			delete(rawMsg, key)
		case "properties":
			err = unpopulate(val, &g.Properties)
			delete(rawMsg, key)
		case "sku":
			err = unpopulate(val, &g.SKU)
			delete(rawMsg, key)
		case "tags":
			err = unpopulate(val, &g.Tags)
			delete(rawMsg, key)
		case "type":
			err = unpopulate(val, &g.Type)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type Gen2EnvironmentResourceProperties.
func (g Gen2EnvironmentResourceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populateTimeRFC3339(objectMap, "creationTime", g.CreationTime)
	populate(objectMap, "dataAccessFqdn", g.DataAccessFqdn)
	populate(objectMap, "dataAccessId", g.DataAccessID)
	populate(objectMap, "privateEndpointConnections", g.PrivateEndpointConnections)
	populate(objectMap, "provisioningState", g.ProvisioningState)
	populate(objectMap, "publicNetworkAccess", g.PublicNetworkAccess)
	populate(objectMap, "status", g.Status)
	populate(objectMap, "storageConfiguration", g.StorageConfiguration)
	populate(objectMap, "timeSeriesIdProperties", g.TimeSeriesIDProperties)
	populate(objectMap, "warmStoreConfiguration", g.WarmStoreConfiguration)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type Gen2EnvironmentResourceProperties.
func (g *Gen2EnvironmentResourceProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "creationTime":
			err = unpopulateTimeRFC3339(val, &g.CreationTime)
			delete(rawMsg, key)
		case "dataAccessFqdn":
			err = unpopulate(val, &g.DataAccessFqdn)
			delete(rawMsg, key)
		case "dataAccessId":
			err = unpopulate(val, &g.DataAccessID)
			delete(rawMsg, key)
		case "privateEndpointConnections":
			err = unpopulate(val, &g.PrivateEndpointConnections)
			delete(rawMsg, key)
		case "provisioningState":
			err = unpopulate(val, &g.ProvisioningState)
			delete(rawMsg, key)
		case "publicNetworkAccess":
			err = unpopulate(val, &g.PublicNetworkAccess)
			delete(rawMsg, key)
		case "status":
			err = unpopulate(val, &g.Status)
			delete(rawMsg, key)
		case "storageConfiguration":
			err = unpopulate(val, &g.StorageConfiguration)
			delete(rawMsg, key)
		case "timeSeriesIdProperties":
			err = unpopulate(val, &g.TimeSeriesIDProperties)
			delete(rawMsg, key)
		case "warmStoreConfiguration":
			err = unpopulate(val, &g.WarmStoreConfiguration)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// GetEnvironmentUpdateParameters implements the EnvironmentUpdateParametersClassification interface for type Gen2EnvironmentUpdateParameters.
func (g *Gen2EnvironmentUpdateParameters) GetEnvironmentUpdateParameters() *EnvironmentUpdateParameters {
	return &EnvironmentUpdateParameters{
		Kind: g.Kind,
		Tags: g.Tags,
	}
}

// MarshalJSON implements the json.Marshaller interface for type Gen2EnvironmentUpdateParameters.
func (g Gen2EnvironmentUpdateParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	objectMap["kind"] = EnvironmentKindGen2
	populate(objectMap, "properties", g.Properties)
	populate(objectMap, "tags", g.Tags)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type Gen2EnvironmentUpdateParameters.
func (g *Gen2EnvironmentUpdateParameters) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "kind":
			err = unpopulate(val, &g.Kind)
			delete(rawMsg, key)
		case "properties":
			err = unpopulate(val, &g.Properties)
			delete(rawMsg, key)
		case "tags":
			err = unpopulate(val, &g.Tags)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type IoTHubEventSourceCommonProperties.
func (i IoTHubEventSourceCommonProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "consumerGroupName", i.ConsumerGroupName)
	populateTimeRFC3339(objectMap, "creationTime", i.CreationTime)
	populate(objectMap, "eventSourceResourceId", i.EventSourceResourceID)
	populate(objectMap, "ingressStartAt", i.IngressStartAt)
	populate(objectMap, "iotHubName", i.IotHubName)
	populate(objectMap, "keyName", i.KeyName)
	populate(objectMap, "localTimestamp", i.LocalTimestamp)
	populate(objectMap, "provisioningState", i.ProvisioningState)
	populate(objectMap, "timestampPropertyName", i.TimestampPropertyName)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type IoTHubEventSourceCommonProperties.
func (i *IoTHubEventSourceCommonProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "consumerGroupName":
			err = unpopulate(val, &i.ConsumerGroupName)
			delete(rawMsg, key)
		case "creationTime":
			err = unpopulateTimeRFC3339(val, &i.CreationTime)
			delete(rawMsg, key)
		case "eventSourceResourceId":
			err = unpopulate(val, &i.EventSourceResourceID)
			delete(rawMsg, key)
		case "ingressStartAt":
			err = unpopulate(val, &i.IngressStartAt)
			delete(rawMsg, key)
		case "iotHubName":
			err = unpopulate(val, &i.IotHubName)
			delete(rawMsg, key)
		case "keyName":
			err = unpopulate(val, &i.KeyName)
			delete(rawMsg, key)
		case "localTimestamp":
			err = unpopulate(val, &i.LocalTimestamp)
			delete(rawMsg, key)
		case "provisioningState":
			err = unpopulate(val, &i.ProvisioningState)
			delete(rawMsg, key)
		case "timestampPropertyName":
			err = unpopulate(val, &i.TimestampPropertyName)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// GetEventSourceCreateOrUpdateParameters implements the EventSourceCreateOrUpdateParametersClassification interface for type
// IoTHubEventSourceCreateOrUpdateParameters.
func (i *IoTHubEventSourceCreateOrUpdateParameters) GetEventSourceCreateOrUpdateParameters() *EventSourceCreateOrUpdateParameters {
	return &EventSourceCreateOrUpdateParameters{
		Kind:           i.Kind,
		LocalTimestamp: i.LocalTimestamp,
		Location:       i.Location,
		Tags:           i.Tags,
	}
}

// MarshalJSON implements the json.Marshaller interface for type IoTHubEventSourceCreateOrUpdateParameters.
func (i IoTHubEventSourceCreateOrUpdateParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	objectMap["kind"] = EventSourceKindMicrosoftIoTHub
	populate(objectMap, "localTimestamp", i.LocalTimestamp)
	populate(objectMap, "location", i.Location)
	populate(objectMap, "properties", i.Properties)
	populate(objectMap, "tags", i.Tags)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type IoTHubEventSourceCreateOrUpdateParameters.
func (i *IoTHubEventSourceCreateOrUpdateParameters) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "kind":
			err = unpopulate(val, &i.Kind)
			delete(rawMsg, key)
		case "localTimestamp":
			err = unpopulate(val, &i.LocalTimestamp)
			delete(rawMsg, key)
		case "location":
			err = unpopulate(val, &i.Location)
			delete(rawMsg, key)
		case "properties":
			err = unpopulate(val, &i.Properties)
			delete(rawMsg, key)
		case "tags":
			err = unpopulate(val, &i.Tags)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type IoTHubEventSourceCreationProperties.
func (i IoTHubEventSourceCreationProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "consumerGroupName", i.ConsumerGroupName)
	populateTimeRFC3339(objectMap, "creationTime", i.CreationTime)
	populate(objectMap, "eventSourceResourceId", i.EventSourceResourceID)
	populate(objectMap, "ingressStartAt", i.IngressStartAt)
	populate(objectMap, "iotHubName", i.IotHubName)
	populate(objectMap, "keyName", i.KeyName)
	populate(objectMap, "localTimestamp", i.LocalTimestamp)
	populate(objectMap, "provisioningState", i.ProvisioningState)
	populate(objectMap, "sharedAccessKey", i.SharedAccessKey)
	populate(objectMap, "timestampPropertyName", i.TimestampPropertyName)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type IoTHubEventSourceCreationProperties.
func (i *IoTHubEventSourceCreationProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "consumerGroupName":
			err = unpopulate(val, &i.ConsumerGroupName)
			delete(rawMsg, key)
		case "creationTime":
			err = unpopulateTimeRFC3339(val, &i.CreationTime)
			delete(rawMsg, key)
		case "eventSourceResourceId":
			err = unpopulate(val, &i.EventSourceResourceID)
			delete(rawMsg, key)
		case "ingressStartAt":
			err = unpopulate(val, &i.IngressStartAt)
			delete(rawMsg, key)
		case "iotHubName":
			err = unpopulate(val, &i.IotHubName)
			delete(rawMsg, key)
		case "keyName":
			err = unpopulate(val, &i.KeyName)
			delete(rawMsg, key)
		case "localTimestamp":
			err = unpopulate(val, &i.LocalTimestamp)
			delete(rawMsg, key)
		case "provisioningState":
			err = unpopulate(val, &i.ProvisioningState)
			delete(rawMsg, key)
		case "sharedAccessKey":
			err = unpopulate(val, &i.SharedAccessKey)
			delete(rawMsg, key)
		case "timestampPropertyName":
			err = unpopulate(val, &i.TimestampPropertyName)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// GetEventSourceResource implements the EventSourceResourceClassification interface for type IoTHubEventSourceResource.
func (i *IoTHubEventSourceResource) GetEventSourceResource() *EventSourceResource {
	return &EventSourceResource{
		Kind:     i.Kind,
		Location: i.Location,
		Tags:     i.Tags,
		ID:       i.ID,
		Name:     i.Name,
		Type:     i.Type,
	}
}

// MarshalJSON implements the json.Marshaller interface for type IoTHubEventSourceResource.
func (i IoTHubEventSourceResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", i.ID)
	objectMap["kind"] = EventSourceResourceKindMicrosoftIoTHub
	populate(objectMap, "location", i.Location)
	populate(objectMap, "name", i.Name)
	populate(objectMap, "properties", i.Properties)
	populate(objectMap, "tags", i.Tags)
	populate(objectMap, "type", i.Type)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type IoTHubEventSourceResource.
func (i *IoTHubEventSourceResource) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "id":
			err = unpopulate(val, &i.ID)
			delete(rawMsg, key)
		case "kind":
			err = unpopulate(val, &i.Kind)
			delete(rawMsg, key)
		case "location":
			err = unpopulate(val, &i.Location)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, &i.Name)
			delete(rawMsg, key)
		case "properties":
			err = unpopulate(val, &i.Properties)
			delete(rawMsg, key)
		case "tags":
			err = unpopulate(val, &i.Tags)
			delete(rawMsg, key)
		case "type":
			err = unpopulate(val, &i.Type)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type IoTHubEventSourceResourceProperties.
func (i IoTHubEventSourceResourceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "consumerGroupName", i.ConsumerGroupName)
	populateTimeRFC3339(objectMap, "creationTime", i.CreationTime)
	populate(objectMap, "eventSourceResourceId", i.EventSourceResourceID)
	populate(objectMap, "ingressStartAt", i.IngressStartAt)
	populate(objectMap, "iotHubName", i.IotHubName)
	populate(objectMap, "keyName", i.KeyName)
	populate(objectMap, "localTimestamp", i.LocalTimestamp)
	populate(objectMap, "provisioningState", i.ProvisioningState)
	populate(objectMap, "timestampPropertyName", i.TimestampPropertyName)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type IoTHubEventSourceResourceProperties.
func (i *IoTHubEventSourceResourceProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "consumerGroupName":
			err = unpopulate(val, &i.ConsumerGroupName)
			delete(rawMsg, key)
		case "creationTime":
			err = unpopulateTimeRFC3339(val, &i.CreationTime)
			delete(rawMsg, key)
		case "eventSourceResourceId":
			err = unpopulate(val, &i.EventSourceResourceID)
			delete(rawMsg, key)
		case "ingressStartAt":
			err = unpopulate(val, &i.IngressStartAt)
			delete(rawMsg, key)
		case "iotHubName":
			err = unpopulate(val, &i.IotHubName)
			delete(rawMsg, key)
		case "keyName":
			err = unpopulate(val, &i.KeyName)
			delete(rawMsg, key)
		case "localTimestamp":
			err = unpopulate(val, &i.LocalTimestamp)
			delete(rawMsg, key)
		case "provisioningState":
			err = unpopulate(val, &i.ProvisioningState)
			delete(rawMsg, key)
		case "timestampPropertyName":
			err = unpopulate(val, &i.TimestampPropertyName)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// GetEventSourceUpdateParameters implements the EventSourceUpdateParametersClassification interface for type IoTHubEventSourceUpdateParameters.
func (i *IoTHubEventSourceUpdateParameters) GetEventSourceUpdateParameters() *EventSourceUpdateParameters {
	return &EventSourceUpdateParameters{
		Kind: i.Kind,
		Tags: i.Tags,
	}
}

// MarshalJSON implements the json.Marshaller interface for type IoTHubEventSourceUpdateParameters.
func (i IoTHubEventSourceUpdateParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	objectMap["kind"] = EventSourceKindMicrosoftIoTHub
	populate(objectMap, "properties", i.Properties)
	populate(objectMap, "tags", i.Tags)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type IoTHubEventSourceUpdateParameters.
func (i *IoTHubEventSourceUpdateParameters) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "kind":
			err = unpopulate(val, &i.Kind)
			delete(rawMsg, key)
		case "properties":
			err = unpopulate(val, &i.Properties)
			delete(rawMsg, key)
		case "tags":
			err = unpopulate(val, &i.Tags)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type MetricSpecification.
func (m MetricSpecification) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "aggregationType", m.AggregationType)
	populate(objectMap, "availabilities", m.Availabilities)
	populate(objectMap, "category", m.Category)
	populate(objectMap, "dimensions", m.Dimensions)
	populate(objectMap, "displayDescription", m.DisplayDescription)
	populate(objectMap, "displayName", m.DisplayName)
	populate(objectMap, "name", m.Name)
	populate(objectMap, "resourceIdDimensionNameOverride", m.ResourceIDDimensionNameOverride)
	populate(objectMap, "unit", m.Unit)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type OperationListResult.
func (o OperationListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", o.NextLink)
	populate(objectMap, "value", o.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type PrivateEndpointConnectionListResult.
func (p PrivateEndpointConnectionListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", p.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type PrivateEndpointConnectionProperties.
func (p PrivateEndpointConnectionProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "groupIds", p.GroupIDs)
	populate(objectMap, "privateEndpoint", p.PrivateEndpoint)
	populate(objectMap, "privateLinkServiceConnectionState", p.PrivateLinkServiceConnectionState)
	populate(objectMap, "provisioningState", p.ProvisioningState)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type PrivateLinkResourceListResult.
func (p PrivateLinkResourceListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", p.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type PrivateLinkResourceProperties.
func (p PrivateLinkResourceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "groupId", p.GroupID)
	populate(objectMap, "requiredMembers", p.RequiredMembers)
	populate(objectMap, "requiredZoneNames", p.RequiredZoneNames)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ReferenceDataSetCreateOrUpdateParameters.
func (r ReferenceDataSetCreateOrUpdateParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "location", r.Location)
	populate(objectMap, "properties", r.Properties)
	populate(objectMap, "tags", r.Tags)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ReferenceDataSetCreationProperties.
func (r ReferenceDataSetCreationProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "dataStringComparisonBehavior", r.DataStringComparisonBehavior)
	populate(objectMap, "keyProperties", r.KeyProperties)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ReferenceDataSetListResponse.
func (r ReferenceDataSetListResponse) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", r.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ReferenceDataSetResource.
func (r ReferenceDataSetResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", r.ID)
	populate(objectMap, "location", r.Location)
	populate(objectMap, "name", r.Name)
	populate(objectMap, "properties", r.Properties)
	populate(objectMap, "tags", r.Tags)
	populate(objectMap, "type", r.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ReferenceDataSetResourceProperties.
func (r ReferenceDataSetResourceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populateTimeRFC3339(objectMap, "creationTime", r.CreationTime)
	populate(objectMap, "dataStringComparisonBehavior", r.DataStringComparisonBehavior)
	populate(objectMap, "keyProperties", r.KeyProperties)
	populate(objectMap, "provisioningState", r.ProvisioningState)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ReferenceDataSetResourceProperties.
func (r *ReferenceDataSetResourceProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "creationTime":
			err = unpopulateTimeRFC3339(val, &r.CreationTime)
			delete(rawMsg, key)
		case "dataStringComparisonBehavior":
			err = unpopulate(val, &r.DataStringComparisonBehavior)
			delete(rawMsg, key)
		case "keyProperties":
			err = unpopulate(val, &r.KeyProperties)
			delete(rawMsg, key)
		case "provisioningState":
			err = unpopulate(val, &r.ProvisioningState)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type ReferenceDataSetUpdateParameters.
func (r ReferenceDataSetUpdateParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "tags", r.Tags)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ResourceProperties.
func (r ResourceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populateTimeRFC3339(objectMap, "creationTime", r.CreationTime)
	populate(objectMap, "provisioningState", r.ProvisioningState)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ResourceProperties.
func (r *ResourceProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "creationTime":
			err = unpopulateTimeRFC3339(val, &r.CreationTime)
			delete(rawMsg, key)
		case "provisioningState":
			err = unpopulate(val, &r.ProvisioningState)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type ServiceSpecification.
func (s ServiceSpecification) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "logSpecifications", s.LogSpecifications)
	populate(objectMap, "metricSpecifications", s.MetricSpecifications)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type TrackedResource.
func (t TrackedResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", t.ID)
	populate(objectMap, "location", t.Location)
	populate(objectMap, "name", t.Name)
	populate(objectMap, "tags", t.Tags)
	populate(objectMap, "type", t.Type)
	return json.Marshal(objectMap)
}

func populate(m map[string]interface{}, k string, v interface{}) {
	if v == nil {
		return
	} else if azcore.IsNullValue(v) {
		m[k] = nil
	} else if !reflect.ValueOf(v).IsNil() {
		m[k] = v
	}
}

func unpopulate(data json.RawMessage, v interface{}) error {
	if data == nil {
		return nil
	}
	return json.Unmarshal(data, v)
}
