//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armtimeseriesinsights

import "encoding/json"

func unmarshalEnvironmentCreateOrUpdateParametersClassification(rawMsg json.RawMessage) (EnvironmentCreateOrUpdateParametersClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var m map[string]interface{}
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b EnvironmentCreateOrUpdateParametersClassification
	switch m["kind"] {
	case string(EnvironmentKindGen1):
		b = &Gen1EnvironmentCreateOrUpdateParameters{}
	case string(EnvironmentKindGen2):
		b = &Gen2EnvironmentCreateOrUpdateParameters{}
	default:
		b = &EnvironmentCreateOrUpdateParameters{}
	}
	return b, json.Unmarshal(rawMsg, b)
}

func unmarshalEnvironmentCreateOrUpdateParametersClassificationArray(rawMsg json.RawMessage) ([]EnvironmentCreateOrUpdateParametersClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var rawMessages []json.RawMessage
	if err := json.Unmarshal(rawMsg, &rawMessages); err != nil {
		return nil, err
	}
	fArray := make([]EnvironmentCreateOrUpdateParametersClassification, len(rawMessages))
	for index, rawMessage := range rawMessages {
		f, err := unmarshalEnvironmentCreateOrUpdateParametersClassification(rawMessage)
		if err != nil {
			return nil, err
		}
		fArray[index] = f
	}
	return fArray, nil
}

func unmarshalEnvironmentResourceClassification(rawMsg json.RawMessage) (EnvironmentResourceClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var m map[string]interface{}
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b EnvironmentResourceClassification
	switch m["kind"] {
	case string(EnvironmentResourceKindGen1):
		b = &Gen1EnvironmentResource{}
	case string(EnvironmentResourceKindGen2):
		b = &Gen2EnvironmentResource{}
	default:
		b = &EnvironmentResource{}
	}
	return b, json.Unmarshal(rawMsg, b)
}

func unmarshalEnvironmentResourceClassificationArray(rawMsg json.RawMessage) ([]EnvironmentResourceClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var rawMessages []json.RawMessage
	if err := json.Unmarshal(rawMsg, &rawMessages); err != nil {
		return nil, err
	}
	fArray := make([]EnvironmentResourceClassification, len(rawMessages))
	for index, rawMessage := range rawMessages {
		f, err := unmarshalEnvironmentResourceClassification(rawMessage)
		if err != nil {
			return nil, err
		}
		fArray[index] = f
	}
	return fArray, nil
}

func unmarshalEnvironmentUpdateParametersClassification(rawMsg json.RawMessage) (EnvironmentUpdateParametersClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var m map[string]interface{}
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b EnvironmentUpdateParametersClassification
	switch m["kind"] {
	case string(EnvironmentKindGen1):
		b = &Gen1EnvironmentUpdateParameters{}
	case string(EnvironmentKindGen2):
		b = &Gen2EnvironmentUpdateParameters{}
	default:
		b = &EnvironmentUpdateParameters{}
	}
	return b, json.Unmarshal(rawMsg, b)
}

func unmarshalEnvironmentUpdateParametersClassificationArray(rawMsg json.RawMessage) ([]EnvironmentUpdateParametersClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var rawMessages []json.RawMessage
	if err := json.Unmarshal(rawMsg, &rawMessages); err != nil {
		return nil, err
	}
	fArray := make([]EnvironmentUpdateParametersClassification, len(rawMessages))
	for index, rawMessage := range rawMessages {
		f, err := unmarshalEnvironmentUpdateParametersClassification(rawMessage)
		if err != nil {
			return nil, err
		}
		fArray[index] = f
	}
	return fArray, nil
}

func unmarshalEventSourceCreateOrUpdateParametersClassification(rawMsg json.RawMessage) (EventSourceCreateOrUpdateParametersClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var m map[string]interface{}
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b EventSourceCreateOrUpdateParametersClassification
	switch m["kind"] {
	case string(EventSourceKindMicrosoftEventHub):
		b = &EventHubEventSourceCreateOrUpdateParameters{}
	case string(EventSourceKindMicrosoftIoTHub):
		b = &IoTHubEventSourceCreateOrUpdateParameters{}
	default:
		b = &EventSourceCreateOrUpdateParameters{}
	}
	return b, json.Unmarshal(rawMsg, b)
}

func unmarshalEventSourceCreateOrUpdateParametersClassificationArray(rawMsg json.RawMessage) ([]EventSourceCreateOrUpdateParametersClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var rawMessages []json.RawMessage
	if err := json.Unmarshal(rawMsg, &rawMessages); err != nil {
		return nil, err
	}
	fArray := make([]EventSourceCreateOrUpdateParametersClassification, len(rawMessages))
	for index, rawMessage := range rawMessages {
		f, err := unmarshalEventSourceCreateOrUpdateParametersClassification(rawMessage)
		if err != nil {
			return nil, err
		}
		fArray[index] = f
	}
	return fArray, nil
}

func unmarshalEventSourceResourceClassification(rawMsg json.RawMessage) (EventSourceResourceClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var m map[string]interface{}
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b EventSourceResourceClassification
	switch m["kind"] {
	case string(EventSourceResourceKindMicrosoftEventHub):
		b = &EventHubEventSourceResource{}
	case string(EventSourceResourceKindMicrosoftIoTHub):
		b = &IoTHubEventSourceResource{}
	default:
		b = &EventSourceResource{}
	}
	return b, json.Unmarshal(rawMsg, b)
}

func unmarshalEventSourceResourceClassificationArray(rawMsg json.RawMessage) ([]EventSourceResourceClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var rawMessages []json.RawMessage
	if err := json.Unmarshal(rawMsg, &rawMessages); err != nil {
		return nil, err
	}
	fArray := make([]EventSourceResourceClassification, len(rawMessages))
	for index, rawMessage := range rawMessages {
		f, err := unmarshalEventSourceResourceClassification(rawMessage)
		if err != nil {
			return nil, err
		}
		fArray[index] = f
	}
	return fArray, nil
}

func unmarshalEventSourceUpdateParametersClassification(rawMsg json.RawMessage) (EventSourceUpdateParametersClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var m map[string]interface{}
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b EventSourceUpdateParametersClassification
	switch m["kind"] {
	case string(EventSourceKindMicrosoftEventHub):
		b = &EventHubEventSourceUpdateParameters{}
	case string(EventSourceKindMicrosoftIoTHub):
		b = &IoTHubEventSourceUpdateParameters{}
	default:
		b = &EventSourceUpdateParameters{}
	}
	return b, json.Unmarshal(rawMsg, b)
}

func unmarshalEventSourceUpdateParametersClassificationArray(rawMsg json.RawMessage) ([]EventSourceUpdateParametersClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var rawMessages []json.RawMessage
	if err := json.Unmarshal(rawMsg, &rawMessages); err != nil {
		return nil, err
	}
	fArray := make([]EventSourceUpdateParametersClassification, len(rawMessages))
	for index, rawMessage := range rawMessages {
		f, err := unmarshalEventSourceUpdateParametersClassification(rawMessage)
		if err != nil {
			return nil, err
		}
		fArray[index] = f
	}
	return fArray, nil
}
