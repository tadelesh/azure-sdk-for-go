//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armservicemap

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
	"time"
)

// SummariesClient contains the methods for the Summaries group.
// Don't use this type directly, use NewSummariesClient() instead.
type SummariesClient struct {
	host string
	subscriptionID string
	pl runtime.Pipeline
}

// NewSummariesClient creates a new instance of SummariesClient with the specified values.
// subscriptionID - Azure subscription identifier.
// credential - used to authorize requests. Usually a credential from azidentity.
// options - pass nil to accept the default values.
func NewSummariesClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) *SummariesClient {
	if options == nil {
		options = &arm.ClientOptions{}
	}
	ep := options.Endpoint
	if len(ep) == 0 {
		ep = arm.AzurePublicCloud
	}
	client := &SummariesClient{
		subscriptionID: subscriptionID,
		host: string(ep),
		pl: armruntime.NewPipeline(moduleName, moduleVersion, credential, runtime.PipelineOptions{}, options),
	}
	return client
}

// GetMachines - Returns summary information about the machines in the workspace.
// If the operation fails it returns an *azcore.ResponseError type.
// resourceGroupName - Resource group name within the specified subscriptionId.
// workspaceName - OMS workspace containing the resources of interest.
// options - SummariesClientGetMachinesOptions contains the optional parameters for the SummariesClient.GetMachines method.
func (client *SummariesClient) GetMachines(ctx context.Context, resourceGroupName string, workspaceName string, options *SummariesClientGetMachinesOptions) (SummariesClientGetMachinesResponse, error) {
	req, err := client.getMachinesCreateRequest(ctx, resourceGroupName, workspaceName, options)
	if err != nil {
		return SummariesClientGetMachinesResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return SummariesClientGetMachinesResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return SummariesClientGetMachinesResponse{}, runtime.NewResponseError(resp)
	}
	return client.getMachinesHandleResponse(resp)
}

// getMachinesCreateRequest creates the GetMachines request.
func (client *SummariesClient) getMachinesCreateRequest(ctx context.Context, resourceGroupName string, workspaceName string, options *SummariesClientGetMachinesOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/features/serviceMap/summaries/machines"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if workspaceName == "" {
		return nil, errors.New("parameter workspaceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceName}", url.PathEscape(workspaceName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2015-11-01-preview")
	if options != nil && options.StartTime != nil {
		reqQP.Set("startTime", options.StartTime.Format(time.RFC3339Nano))
	}
	if options != nil && options.EndTime != nil {
		reqQP.Set("endTime", options.EndTime.Format(time.RFC3339Nano))
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getMachinesHandleResponse handles the GetMachines response.
func (client *SummariesClient) getMachinesHandleResponse(resp *http.Response) (SummariesClientGetMachinesResponse, error) {
	result := SummariesClientGetMachinesResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.MachinesSummary); err != nil {
		return SummariesClientGetMachinesResponse{}, err
	}
	return result, nil
}

