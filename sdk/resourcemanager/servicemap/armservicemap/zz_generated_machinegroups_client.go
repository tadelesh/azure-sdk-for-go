//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armservicemap

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
	"time"
)

// MachineGroupsClient contains the methods for the MachineGroups group.
// Don't use this type directly, use NewMachineGroupsClient() instead.
type MachineGroupsClient struct {
	host string
	subscriptionID string
	pl runtime.Pipeline
}

// NewMachineGroupsClient creates a new instance of MachineGroupsClient with the specified values.
// subscriptionID - Azure subscription identifier.
// credential - used to authorize requests. Usually a credential from azidentity.
// options - pass nil to accept the default values.
func NewMachineGroupsClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) *MachineGroupsClient {
	if options == nil {
		options = &arm.ClientOptions{}
	}
	ep := options.Endpoint
	if len(ep) == 0 {
		ep = arm.AzurePublicCloud
	}
	client := &MachineGroupsClient{
		subscriptionID: subscriptionID,
		host: string(ep),
		pl: armruntime.NewPipeline(moduleName, moduleVersion, credential, runtime.PipelineOptions{}, options),
	}
	return client
}

// Create - Creates a new machine group.
// If the operation fails it returns an *azcore.ResponseError type.
// resourceGroupName - Resource group name within the specified subscriptionId.
// workspaceName - OMS workspace containing the resources of interest.
// machineGroup - Machine Group resource to create.
// options - MachineGroupsClientCreateOptions contains the optional parameters for the MachineGroupsClient.Create method.
func (client *MachineGroupsClient) Create(ctx context.Context, resourceGroupName string, workspaceName string, machineGroup MachineGroup, options *MachineGroupsClientCreateOptions) (MachineGroupsClientCreateResponse, error) {
	req, err := client.createCreateRequest(ctx, resourceGroupName, workspaceName, machineGroup, options)
	if err != nil {
		return MachineGroupsClientCreateResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return MachineGroupsClientCreateResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusCreated) {
		return MachineGroupsClientCreateResponse{}, runtime.NewResponseError(resp)
	}
	return client.createHandleResponse(resp)
}

// createCreateRequest creates the Create request.
func (client *MachineGroupsClient) createCreateRequest(ctx context.Context, resourceGroupName string, workspaceName string, machineGroup MachineGroup, options *MachineGroupsClientCreateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/features/serviceMap/machineGroups"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if workspaceName == "" {
		return nil, errors.New("parameter workspaceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceName}", url.PathEscape(workspaceName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2015-11-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, machineGroup)
}

// createHandleResponse handles the Create response.
func (client *MachineGroupsClient) createHandleResponse(resp *http.Response) (MachineGroupsClientCreateResponse, error) {
	result := MachineGroupsClientCreateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.MachineGroup); err != nil {
		return MachineGroupsClientCreateResponse{}, err
	}
	return result, nil
}

// Delete - Deletes the specified Machine Group.
// If the operation fails it returns an *azcore.ResponseError type.
// resourceGroupName - Resource group name within the specified subscriptionId.
// workspaceName - OMS workspace containing the resources of interest.
// machineGroupName - Machine Group resource name.
// options - MachineGroupsClientDeleteOptions contains the optional parameters for the MachineGroupsClient.Delete method.
func (client *MachineGroupsClient) Delete(ctx context.Context, resourceGroupName string, workspaceName string, machineGroupName string, options *MachineGroupsClientDeleteOptions) (MachineGroupsClientDeleteResponse, error) {
	req, err := client.deleteCreateRequest(ctx, resourceGroupName, workspaceName, machineGroupName, options)
	if err != nil {
		return MachineGroupsClientDeleteResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return MachineGroupsClientDeleteResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusNoContent) {
		return MachineGroupsClientDeleteResponse{}, runtime.NewResponseError(resp)
	}
	return MachineGroupsClientDeleteResponse{}, nil
}

// deleteCreateRequest creates the Delete request.
func (client *MachineGroupsClient) deleteCreateRequest(ctx context.Context, resourceGroupName string, workspaceName string, machineGroupName string, options *MachineGroupsClientDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/features/serviceMap/machineGroups/{machineGroupName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if workspaceName == "" {
		return nil, errors.New("parameter workspaceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceName}", url.PathEscape(workspaceName))
	if machineGroupName == "" {
		return nil, errors.New("parameter machineGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{machineGroupName}", url.PathEscape(machineGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2015-11-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// Get - Returns the specified machine group as it existed during the specified time interval.
// If the operation fails it returns an *azcore.ResponseError type.
// resourceGroupName - Resource group name within the specified subscriptionId.
// workspaceName - OMS workspace containing the resources of interest.
// machineGroupName - Machine Group resource name.
// options - MachineGroupsClientGetOptions contains the optional parameters for the MachineGroupsClient.Get method.
func (client *MachineGroupsClient) Get(ctx context.Context, resourceGroupName string, workspaceName string, machineGroupName string, options *MachineGroupsClientGetOptions) (MachineGroupsClientGetResponse, error) {
	req, err := client.getCreateRequest(ctx, resourceGroupName, workspaceName, machineGroupName, options)
	if err != nil {
		return MachineGroupsClientGetResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return MachineGroupsClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return MachineGroupsClientGetResponse{}, runtime.NewResponseError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *MachineGroupsClient) getCreateRequest(ctx context.Context, resourceGroupName string, workspaceName string, machineGroupName string, options *MachineGroupsClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/features/serviceMap/machineGroups/{machineGroupName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if workspaceName == "" {
		return nil, errors.New("parameter workspaceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceName}", url.PathEscape(workspaceName))
	if machineGroupName == "" {
		return nil, errors.New("parameter machineGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{machineGroupName}", url.PathEscape(machineGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2015-11-01-preview")
	if options != nil && options.StartTime != nil {
		reqQP.Set("startTime", options.StartTime.Format(time.RFC3339Nano))
	}
	if options != nil && options.EndTime != nil {
		reqQP.Set("endTime", options.EndTime.Format(time.RFC3339Nano))
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *MachineGroupsClient) getHandleResponse(resp *http.Response) (MachineGroupsClientGetResponse, error) {
	result := MachineGroupsClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.MachineGroup); err != nil {
		return MachineGroupsClientGetResponse{}, err
	}
	return result, nil
}

// ListByWorkspace - Returns all machine groups during the specified time interval.
// If the operation fails it returns an *azcore.ResponseError type.
// resourceGroupName - Resource group name within the specified subscriptionId.
// workspaceName - OMS workspace containing the resources of interest.
// options - MachineGroupsClientListByWorkspaceOptions contains the optional parameters for the MachineGroupsClient.ListByWorkspace
// method.
func (client *MachineGroupsClient) ListByWorkspace(resourceGroupName string, workspaceName string, options *MachineGroupsClientListByWorkspaceOptions) (*runtime.Pager[MachineGroupsClientListByWorkspaceResponse]) {
	return runtime.NewPager(runtime.PageProcessor[MachineGroupsClientListByWorkspaceResponse]{
		More: func(page MachineGroupsClientListByWorkspaceResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *MachineGroupsClientListByWorkspaceResponse) (MachineGroupsClientListByWorkspaceResponse, error) {
			var req *policy.Request
			var err error
			if page == nil {
				req, err = client.listByWorkspaceCreateRequest(ctx, resourceGroupName, workspaceName, options)
			} else {
				req, err = runtime.NewRequest(ctx, http.MethodGet, *page.NextLink)
			}
			if err != nil {
				return MachineGroupsClientListByWorkspaceResponse{}, err
			}
			resp, err := client.pl.Do(req)
			if err != nil {
				return MachineGroupsClientListByWorkspaceResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return MachineGroupsClientListByWorkspaceResponse{}, runtime.NewResponseError(resp)
			}
			return client.listByWorkspaceHandleResponse(resp)
		},
	})
}

// listByWorkspaceCreateRequest creates the ListByWorkspace request.
func (client *MachineGroupsClient) listByWorkspaceCreateRequest(ctx context.Context, resourceGroupName string, workspaceName string, options *MachineGroupsClientListByWorkspaceOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/features/serviceMap/machineGroups"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if workspaceName == "" {
		return nil, errors.New("parameter workspaceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceName}", url.PathEscape(workspaceName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2015-11-01-preview")
	if options != nil && options.StartTime != nil {
		reqQP.Set("startTime", options.StartTime.Format(time.RFC3339Nano))
	}
	if options != nil && options.EndTime != nil {
		reqQP.Set("endTime", options.EndTime.Format(time.RFC3339Nano))
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listByWorkspaceHandleResponse handles the ListByWorkspace response.
func (client *MachineGroupsClient) listByWorkspaceHandleResponse(resp *http.Response) (MachineGroupsClientListByWorkspaceResponse, error) {
	result := MachineGroupsClientListByWorkspaceResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.MachineGroupCollection); err != nil {
		return MachineGroupsClientListByWorkspaceResponse{}, err
	}
	return result, nil
}

// Update - Updates a machine group.
// If the operation fails it returns an *azcore.ResponseError type.
// resourceGroupName - Resource group name within the specified subscriptionId.
// workspaceName - OMS workspace containing the resources of interest.
// machineGroupName - Machine Group resource name.
// machineGroup - Machine Group resource to update.
// options - MachineGroupsClientUpdateOptions contains the optional parameters for the MachineGroupsClient.Update method.
func (client *MachineGroupsClient) Update(ctx context.Context, resourceGroupName string, workspaceName string, machineGroupName string, machineGroup MachineGroup, options *MachineGroupsClientUpdateOptions) (MachineGroupsClientUpdateResponse, error) {
	req, err := client.updateCreateRequest(ctx, resourceGroupName, workspaceName, machineGroupName, machineGroup, options)
	if err != nil {
		return MachineGroupsClientUpdateResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return MachineGroupsClientUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return MachineGroupsClientUpdateResponse{}, runtime.NewResponseError(resp)
	}
	return client.updateHandleResponse(resp)
}

// updateCreateRequest creates the Update request.
func (client *MachineGroupsClient) updateCreateRequest(ctx context.Context, resourceGroupName string, workspaceName string, machineGroupName string, machineGroup MachineGroup, options *MachineGroupsClientUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/features/serviceMap/machineGroups/{machineGroupName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if workspaceName == "" {
		return nil, errors.New("parameter workspaceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceName}", url.PathEscape(workspaceName))
	if machineGroupName == "" {
		return nil, errors.New("parameter machineGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{machineGroupName}", url.PathEscape(machineGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2015-11-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, machineGroup)
}

// updateHandleResponse handles the Update response.
func (client *MachineGroupsClient) updateHandleResponse(resp *http.Response) (MachineGroupsClientUpdateResponse, error) {
	result := MachineGroupsClientUpdateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.MachineGroup); err != nil {
		return MachineGroupsClientUpdateResponse{}, err
	}
	return result, nil
}

