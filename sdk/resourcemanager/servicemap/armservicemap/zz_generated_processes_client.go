//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armservicemap

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
	"time"
)

// ProcessesClient contains the methods for the Processes group.
// Don't use this type directly, use NewProcessesClient() instead.
type ProcessesClient struct {
	host string
	subscriptionID string
	pl runtime.Pipeline
}

// NewProcessesClient creates a new instance of ProcessesClient with the specified values.
// subscriptionID - Azure subscription identifier.
// credential - used to authorize requests. Usually a credential from azidentity.
// options - pass nil to accept the default values.
func NewProcessesClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) *ProcessesClient {
	if options == nil {
		options = &arm.ClientOptions{}
	}
	ep := options.Endpoint
	if len(ep) == 0 {
		ep = arm.AzurePublicCloud
	}
	client := &ProcessesClient{
		subscriptionID: subscriptionID,
		host: string(ep),
		pl: armruntime.NewPipeline(moduleName, moduleVersion, credential, runtime.PipelineOptions{}, options),
	}
	return client
}

// Get - Returns the specified process.
// If the operation fails it returns an *azcore.ResponseError type.
// resourceGroupName - Resource group name within the specified subscriptionId.
// workspaceName - OMS workspace containing the resources of interest.
// machineName - Machine resource name.
// processName - Process resource name.
// options - ProcessesClientGetOptions contains the optional parameters for the ProcessesClient.Get method.
func (client *ProcessesClient) Get(ctx context.Context, resourceGroupName string, workspaceName string, machineName string, processName string, options *ProcessesClientGetOptions) (ProcessesClientGetResponse, error) {
	req, err := client.getCreateRequest(ctx, resourceGroupName, workspaceName, machineName, processName, options)
	if err != nil {
		return ProcessesClientGetResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ProcessesClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ProcessesClientGetResponse{}, runtime.NewResponseError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *ProcessesClient) getCreateRequest(ctx context.Context, resourceGroupName string, workspaceName string, machineName string, processName string, options *ProcessesClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/features/serviceMap/machines/{machineName}/processes/{processName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if workspaceName == "" {
		return nil, errors.New("parameter workspaceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceName}", url.PathEscape(workspaceName))
	if machineName == "" {
		return nil, errors.New("parameter machineName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{machineName}", url.PathEscape(machineName))
	if processName == "" {
		return nil, errors.New("parameter processName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{processName}", url.PathEscape(processName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2015-11-01-preview")
	if options != nil && options.Timestamp != nil {
		reqQP.Set("timestamp", options.Timestamp.Format(time.RFC3339Nano))
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *ProcessesClient) getHandleResponse(resp *http.Response) (ProcessesClientGetResponse, error) {
	result := ProcessesClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Process); err != nil {
		return ProcessesClientGetResponse{}, err
	}
	return result, nil
}

// GetLiveness - Obtains the liveness status of the process during the specified time interval.
// If the operation fails it returns an *azcore.ResponseError type.
// resourceGroupName - Resource group name within the specified subscriptionId.
// workspaceName - OMS workspace containing the resources of interest.
// machineName - Machine resource name.
// processName - Process resource name.
// options - ProcessesClientGetLivenessOptions contains the optional parameters for the ProcessesClient.GetLiveness method.
func (client *ProcessesClient) GetLiveness(ctx context.Context, resourceGroupName string, workspaceName string, machineName string, processName string, options *ProcessesClientGetLivenessOptions) (ProcessesClientGetLivenessResponse, error) {
	req, err := client.getLivenessCreateRequest(ctx, resourceGroupName, workspaceName, machineName, processName, options)
	if err != nil {
		return ProcessesClientGetLivenessResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ProcessesClientGetLivenessResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ProcessesClientGetLivenessResponse{}, runtime.NewResponseError(resp)
	}
	return client.getLivenessHandleResponse(resp)
}

// getLivenessCreateRequest creates the GetLiveness request.
func (client *ProcessesClient) getLivenessCreateRequest(ctx context.Context, resourceGroupName string, workspaceName string, machineName string, processName string, options *ProcessesClientGetLivenessOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/features/serviceMap/machines/{machineName}/processes/{processName}/liveness"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if workspaceName == "" {
		return nil, errors.New("parameter workspaceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceName}", url.PathEscape(workspaceName))
	if machineName == "" {
		return nil, errors.New("parameter machineName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{machineName}", url.PathEscape(machineName))
	if processName == "" {
		return nil, errors.New("parameter processName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{processName}", url.PathEscape(processName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2015-11-01-preview")
	if options != nil && options.StartTime != nil {
		reqQP.Set("startTime", options.StartTime.Format(time.RFC3339Nano))
	}
	if options != nil && options.EndTime != nil {
		reqQP.Set("endTime", options.EndTime.Format(time.RFC3339Nano))
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getLivenessHandleResponse handles the GetLiveness response.
func (client *ProcessesClient) getLivenessHandleResponse(resp *http.Response) (ProcessesClientGetLivenessResponse, error) {
	result := ProcessesClientGetLivenessResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Liveness); err != nil {
		return ProcessesClientGetLivenessResponse{}, err
	}
	return result, nil
}

// ListAcceptingPorts - Returns a collection of ports on which this process is accepting
// If the operation fails it returns an *azcore.ResponseError type.
// resourceGroupName - Resource group name within the specified subscriptionId.
// workspaceName - OMS workspace containing the resources of interest.
// machineName - Machine resource name.
// processName - Process resource name.
// options - ProcessesClientListAcceptingPortsOptions contains the optional parameters for the ProcessesClient.ListAcceptingPorts
// method.
func (client *ProcessesClient) ListAcceptingPorts(resourceGroupName string, workspaceName string, machineName string, processName string, options *ProcessesClientListAcceptingPortsOptions) (*runtime.Pager[ProcessesClientListAcceptingPortsResponse]) {
	return runtime.NewPager(runtime.PageProcessor[ProcessesClientListAcceptingPortsResponse]{
		More: func(page ProcessesClientListAcceptingPortsResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *ProcessesClientListAcceptingPortsResponse) (ProcessesClientListAcceptingPortsResponse, error) {
			var req *policy.Request
			var err error
			if page == nil {
				req, err = client.listAcceptingPortsCreateRequest(ctx, resourceGroupName, workspaceName, machineName, processName, options)
			} else {
				req, err = runtime.NewRequest(ctx, http.MethodGet, *page.NextLink)
			}
			if err != nil {
				return ProcessesClientListAcceptingPortsResponse{}, err
			}
			resp, err := client.pl.Do(req)
			if err != nil {
				return ProcessesClientListAcceptingPortsResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return ProcessesClientListAcceptingPortsResponse{}, runtime.NewResponseError(resp)
			}
			return client.listAcceptingPortsHandleResponse(resp)
		},
	})
}

// listAcceptingPortsCreateRequest creates the ListAcceptingPorts request.
func (client *ProcessesClient) listAcceptingPortsCreateRequest(ctx context.Context, resourceGroupName string, workspaceName string, machineName string, processName string, options *ProcessesClientListAcceptingPortsOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/features/serviceMap/machines/{machineName}/processes/{processName}/acceptingPorts"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if workspaceName == "" {
		return nil, errors.New("parameter workspaceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceName}", url.PathEscape(workspaceName))
	if machineName == "" {
		return nil, errors.New("parameter machineName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{machineName}", url.PathEscape(machineName))
	if processName == "" {
		return nil, errors.New("parameter processName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{processName}", url.PathEscape(processName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2015-11-01-preview")
	if options != nil && options.StartTime != nil {
		reqQP.Set("startTime", options.StartTime.Format(time.RFC3339Nano))
	}
	if options != nil && options.EndTime != nil {
		reqQP.Set("endTime", options.EndTime.Format(time.RFC3339Nano))
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listAcceptingPortsHandleResponse handles the ListAcceptingPorts response.
func (client *ProcessesClient) listAcceptingPortsHandleResponse(resp *http.Response) (ProcessesClientListAcceptingPortsResponse, error) {
	result := ProcessesClientListAcceptingPortsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.PortCollection); err != nil {
		return ProcessesClientListAcceptingPortsResponse{}, err
	}
	return result, nil
}

// ListConnections - Returns a collection of connections terminating or originating at the specified process
// If the operation fails it returns an *azcore.ResponseError type.
// resourceGroupName - Resource group name within the specified subscriptionId.
// workspaceName - OMS workspace containing the resources of interest.
// machineName - Machine resource name.
// processName - Process resource name.
// options - ProcessesClientListConnectionsOptions contains the optional parameters for the ProcessesClient.ListConnections
// method.
func (client *ProcessesClient) ListConnections(resourceGroupName string, workspaceName string, machineName string, processName string, options *ProcessesClientListConnectionsOptions) (*runtime.Pager[ProcessesClientListConnectionsResponse]) {
	return runtime.NewPager(runtime.PageProcessor[ProcessesClientListConnectionsResponse]{
		More: func(page ProcessesClientListConnectionsResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *ProcessesClientListConnectionsResponse) (ProcessesClientListConnectionsResponse, error) {
			var req *policy.Request
			var err error
			if page == nil {
				req, err = client.listConnectionsCreateRequest(ctx, resourceGroupName, workspaceName, machineName, processName, options)
			} else {
				req, err = runtime.NewRequest(ctx, http.MethodGet, *page.NextLink)
			}
			if err != nil {
				return ProcessesClientListConnectionsResponse{}, err
			}
			resp, err := client.pl.Do(req)
			if err != nil {
				return ProcessesClientListConnectionsResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return ProcessesClientListConnectionsResponse{}, runtime.NewResponseError(resp)
			}
			return client.listConnectionsHandleResponse(resp)
		},
	})
}

// listConnectionsCreateRequest creates the ListConnections request.
func (client *ProcessesClient) listConnectionsCreateRequest(ctx context.Context, resourceGroupName string, workspaceName string, machineName string, processName string, options *ProcessesClientListConnectionsOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/features/serviceMap/machines/{machineName}/processes/{processName}/connections"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if workspaceName == "" {
		return nil, errors.New("parameter workspaceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceName}", url.PathEscape(workspaceName))
	if machineName == "" {
		return nil, errors.New("parameter machineName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{machineName}", url.PathEscape(machineName))
	if processName == "" {
		return nil, errors.New("parameter processName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{processName}", url.PathEscape(processName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2015-11-01-preview")
	if options != nil && options.StartTime != nil {
		reqQP.Set("startTime", options.StartTime.Format(time.RFC3339Nano))
	}
	if options != nil && options.EndTime != nil {
		reqQP.Set("endTime", options.EndTime.Format(time.RFC3339Nano))
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listConnectionsHandleResponse handles the ListConnections response.
func (client *ProcessesClient) listConnectionsHandleResponse(resp *http.Response) (ProcessesClientListConnectionsResponse, error) {
	result := ProcessesClientListConnectionsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ConnectionCollection); err != nil {
		return ProcessesClientListConnectionsResponse{}, err
	}
	return result, nil
}

