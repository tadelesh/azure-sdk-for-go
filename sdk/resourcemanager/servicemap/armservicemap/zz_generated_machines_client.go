//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armservicemap

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strconv"
	"strings"
	"time"
)

// MachinesClient contains the methods for the Machines group.
// Don't use this type directly, use NewMachinesClient() instead.
type MachinesClient struct {
	host string
	subscriptionID string
	pl runtime.Pipeline
}

// NewMachinesClient creates a new instance of MachinesClient with the specified values.
// subscriptionID - Azure subscription identifier.
// credential - used to authorize requests. Usually a credential from azidentity.
// options - pass nil to accept the default values.
func NewMachinesClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) *MachinesClient {
	if options == nil {
		options = &arm.ClientOptions{}
	}
	ep := options.Endpoint
	if len(ep) == 0 {
		ep = arm.AzurePublicCloud
	}
	client := &MachinesClient{
		subscriptionID: subscriptionID,
		host: string(ep),
		pl: armruntime.NewPipeline(moduleName, moduleVersion, credential, runtime.PipelineOptions{}, options),
	}
	return client
}

// Get - Returns the specified machine.
// If the operation fails it returns an *azcore.ResponseError type.
// resourceGroupName - Resource group name within the specified subscriptionId.
// workspaceName - OMS workspace containing the resources of interest.
// machineName - Machine resource name.
// options - MachinesClientGetOptions contains the optional parameters for the MachinesClient.Get method.
func (client *MachinesClient) Get(ctx context.Context, resourceGroupName string, workspaceName string, machineName string, options *MachinesClientGetOptions) (MachinesClientGetResponse, error) {
	req, err := client.getCreateRequest(ctx, resourceGroupName, workspaceName, machineName, options)
	if err != nil {
		return MachinesClientGetResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return MachinesClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return MachinesClientGetResponse{}, runtime.NewResponseError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *MachinesClient) getCreateRequest(ctx context.Context, resourceGroupName string, workspaceName string, machineName string, options *MachinesClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/features/serviceMap/machines/{machineName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if workspaceName == "" {
		return nil, errors.New("parameter workspaceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceName}", url.PathEscape(workspaceName))
	if machineName == "" {
		return nil, errors.New("parameter machineName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{machineName}", url.PathEscape(machineName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2015-11-01-preview")
	if options != nil && options.Timestamp != nil {
		reqQP.Set("timestamp", options.Timestamp.Format(time.RFC3339Nano))
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *MachinesClient) getHandleResponse(resp *http.Response) (MachinesClientGetResponse, error) {
	result := MachinesClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Machine); err != nil {
		return MachinesClientGetResponse{}, err
	}
	return result, nil
}

// GetLiveness - Obtains the liveness status of the machine during the specified time interval.
// If the operation fails it returns an *azcore.ResponseError type.
// resourceGroupName - Resource group name within the specified subscriptionId.
// workspaceName - OMS workspace containing the resources of interest.
// machineName - Machine resource name.
// options - MachinesClientGetLivenessOptions contains the optional parameters for the MachinesClient.GetLiveness method.
func (client *MachinesClient) GetLiveness(ctx context.Context, resourceGroupName string, workspaceName string, machineName string, options *MachinesClientGetLivenessOptions) (MachinesClientGetLivenessResponse, error) {
	req, err := client.getLivenessCreateRequest(ctx, resourceGroupName, workspaceName, machineName, options)
	if err != nil {
		return MachinesClientGetLivenessResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return MachinesClientGetLivenessResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return MachinesClientGetLivenessResponse{}, runtime.NewResponseError(resp)
	}
	return client.getLivenessHandleResponse(resp)
}

// getLivenessCreateRequest creates the GetLiveness request.
func (client *MachinesClient) getLivenessCreateRequest(ctx context.Context, resourceGroupName string, workspaceName string, machineName string, options *MachinesClientGetLivenessOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/features/serviceMap/machines/{machineName}/liveness"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if workspaceName == "" {
		return nil, errors.New("parameter workspaceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceName}", url.PathEscape(workspaceName))
	if machineName == "" {
		return nil, errors.New("parameter machineName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{machineName}", url.PathEscape(machineName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2015-11-01-preview")
	if options != nil && options.StartTime != nil {
		reqQP.Set("startTime", options.StartTime.Format(time.RFC3339Nano))
	}
	if options != nil && options.EndTime != nil {
		reqQP.Set("endTime", options.EndTime.Format(time.RFC3339Nano))
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getLivenessHandleResponse handles the GetLiveness response.
func (client *MachinesClient) getLivenessHandleResponse(resp *http.Response) (MachinesClientGetLivenessResponse, error) {
	result := MachinesClientGetLivenessResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Liveness); err != nil {
		return MachinesClientGetLivenessResponse{}, err
	}
	return result, nil
}

// ListByWorkspace - Returns a collection of machines matching the specified conditions. The returned collection represents
// either machines that are active/live during the specified interval of time (live=true and
// startTime/endTime are specified) or that are known to have existed at or some time prior to the specified point in time
// (live=false and timestamp is specified).
// If the operation fails it returns an *azcore.ResponseError type.
// resourceGroupName - Resource group name within the specified subscriptionId.
// workspaceName - OMS workspace containing the resources of interest.
// options - MachinesClientListByWorkspaceOptions contains the optional parameters for the MachinesClient.ListByWorkspace
// method.
func (client *MachinesClient) ListByWorkspace(resourceGroupName string, workspaceName string, options *MachinesClientListByWorkspaceOptions) (*runtime.Pager[MachinesClientListByWorkspaceResponse]) {
	return runtime.NewPager(runtime.PageProcessor[MachinesClientListByWorkspaceResponse]{
		More: func(page MachinesClientListByWorkspaceResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *MachinesClientListByWorkspaceResponse) (MachinesClientListByWorkspaceResponse, error) {
			var req *policy.Request
			var err error
			if page == nil {
				req, err = client.listByWorkspaceCreateRequest(ctx, resourceGroupName, workspaceName, options)
			} else {
				req, err = runtime.NewRequest(ctx, http.MethodGet, *page.NextLink)
			}
			if err != nil {
				return MachinesClientListByWorkspaceResponse{}, err
			}
			resp, err := client.pl.Do(req)
			if err != nil {
				return MachinesClientListByWorkspaceResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return MachinesClientListByWorkspaceResponse{}, runtime.NewResponseError(resp)
			}
			return client.listByWorkspaceHandleResponse(resp)
		},
	})
}

// listByWorkspaceCreateRequest creates the ListByWorkspace request.
func (client *MachinesClient) listByWorkspaceCreateRequest(ctx context.Context, resourceGroupName string, workspaceName string, options *MachinesClientListByWorkspaceOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/features/serviceMap/machines"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if workspaceName == "" {
		return nil, errors.New("parameter workspaceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceName}", url.PathEscape(workspaceName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2015-11-01-preview")
	if options != nil && options.Live != nil {
		reqQP.Set("live", strconv.FormatBool(*options.Live))
	}
	if options != nil && options.StartTime != nil {
		reqQP.Set("startTime", options.StartTime.Format(time.RFC3339Nano))
	}
	if options != nil && options.EndTime != nil {
		reqQP.Set("endTime", options.EndTime.Format(time.RFC3339Nano))
	}
	if options != nil && options.Timestamp != nil {
		reqQP.Set("timestamp", options.Timestamp.Format(time.RFC3339Nano))
	}
	if options != nil && options.Top != nil {
		reqQP.Set("$top", strconv.FormatInt(int64(*options.Top), 10))
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listByWorkspaceHandleResponse handles the ListByWorkspace response.
func (client *MachinesClient) listByWorkspaceHandleResponse(resp *http.Response) (MachinesClientListByWorkspaceResponse, error) {
	result := MachinesClientListByWorkspaceResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.MachineCollection); err != nil {
		return MachinesClientListByWorkspaceResponse{}, err
	}
	return result, nil
}

// ListConnections - Returns a collection of connections terminating or originating at the specified machine
// If the operation fails it returns an *azcore.ResponseError type.
// resourceGroupName - Resource group name within the specified subscriptionId.
// workspaceName - OMS workspace containing the resources of interest.
// machineName - Machine resource name.
// options - MachinesClientListConnectionsOptions contains the optional parameters for the MachinesClient.ListConnections
// method.
func (client *MachinesClient) ListConnections(resourceGroupName string, workspaceName string, machineName string, options *MachinesClientListConnectionsOptions) (*runtime.Pager[MachinesClientListConnectionsResponse]) {
	return runtime.NewPager(runtime.PageProcessor[MachinesClientListConnectionsResponse]{
		More: func(page MachinesClientListConnectionsResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *MachinesClientListConnectionsResponse) (MachinesClientListConnectionsResponse, error) {
			var req *policy.Request
			var err error
			if page == nil {
				req, err = client.listConnectionsCreateRequest(ctx, resourceGroupName, workspaceName, machineName, options)
			} else {
				req, err = runtime.NewRequest(ctx, http.MethodGet, *page.NextLink)
			}
			if err != nil {
				return MachinesClientListConnectionsResponse{}, err
			}
			resp, err := client.pl.Do(req)
			if err != nil {
				return MachinesClientListConnectionsResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return MachinesClientListConnectionsResponse{}, runtime.NewResponseError(resp)
			}
			return client.listConnectionsHandleResponse(resp)
		},
	})
}

// listConnectionsCreateRequest creates the ListConnections request.
func (client *MachinesClient) listConnectionsCreateRequest(ctx context.Context, resourceGroupName string, workspaceName string, machineName string, options *MachinesClientListConnectionsOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/features/serviceMap/machines/{machineName}/connections"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if workspaceName == "" {
		return nil, errors.New("parameter workspaceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceName}", url.PathEscape(workspaceName))
	if machineName == "" {
		return nil, errors.New("parameter machineName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{machineName}", url.PathEscape(machineName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2015-11-01-preview")
	if options != nil && options.StartTime != nil {
		reqQP.Set("startTime", options.StartTime.Format(time.RFC3339Nano))
	}
	if options != nil && options.EndTime != nil {
		reqQP.Set("endTime", options.EndTime.Format(time.RFC3339Nano))
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listConnectionsHandleResponse handles the ListConnections response.
func (client *MachinesClient) listConnectionsHandleResponse(resp *http.Response) (MachinesClientListConnectionsResponse, error) {
	result := MachinesClientListConnectionsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ConnectionCollection); err != nil {
		return MachinesClientListConnectionsResponse{}, err
	}
	return result, nil
}

// ListMachineGroupMembership - Returns a collection of machine groups this machine belongs to during the specified time interval.
// If the operation fails it returns an *azcore.ResponseError type.
// resourceGroupName - Resource group name within the specified subscriptionId.
// workspaceName - OMS workspace containing the resources of interest.
// machineName - Machine resource name.
// options - MachinesClientListMachineGroupMembershipOptions contains the optional parameters for the MachinesClient.ListMachineGroupMembership
// method.
func (client *MachinesClient) ListMachineGroupMembership(resourceGroupName string, workspaceName string, machineName string, options *MachinesClientListMachineGroupMembershipOptions) (*runtime.Pager[MachinesClientListMachineGroupMembershipResponse]) {
	return runtime.NewPager(runtime.PageProcessor[MachinesClientListMachineGroupMembershipResponse]{
		More: func(page MachinesClientListMachineGroupMembershipResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *MachinesClientListMachineGroupMembershipResponse) (MachinesClientListMachineGroupMembershipResponse, error) {
			var req *policy.Request
			var err error
			if page == nil {
				req, err = client.listMachineGroupMembershipCreateRequest(ctx, resourceGroupName, workspaceName, machineName, options)
			} else {
				req, err = runtime.NewRequest(ctx, http.MethodGet, *page.NextLink)
			}
			if err != nil {
				return MachinesClientListMachineGroupMembershipResponse{}, err
			}
			resp, err := client.pl.Do(req)
			if err != nil {
				return MachinesClientListMachineGroupMembershipResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return MachinesClientListMachineGroupMembershipResponse{}, runtime.NewResponseError(resp)
			}
			return client.listMachineGroupMembershipHandleResponse(resp)
		},
	})
}

// listMachineGroupMembershipCreateRequest creates the ListMachineGroupMembership request.
func (client *MachinesClient) listMachineGroupMembershipCreateRequest(ctx context.Context, resourceGroupName string, workspaceName string, machineName string, options *MachinesClientListMachineGroupMembershipOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/features/serviceMap/machines/{machineName}/machineGroups"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if workspaceName == "" {
		return nil, errors.New("parameter workspaceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceName}", url.PathEscape(workspaceName))
	if machineName == "" {
		return nil, errors.New("parameter machineName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{machineName}", url.PathEscape(machineName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2015-11-01-preview")
	if options != nil && options.StartTime != nil {
		reqQP.Set("startTime", options.StartTime.Format(time.RFC3339Nano))
	}
	if options != nil && options.EndTime != nil {
		reqQP.Set("endTime", options.EndTime.Format(time.RFC3339Nano))
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listMachineGroupMembershipHandleResponse handles the ListMachineGroupMembership response.
func (client *MachinesClient) listMachineGroupMembershipHandleResponse(resp *http.Response) (MachinesClientListMachineGroupMembershipResponse, error) {
	result := MachinesClientListMachineGroupMembershipResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.MachineGroupCollection); err != nil {
		return MachinesClientListMachineGroupMembershipResponse{}, err
	}
	return result, nil
}

// ListPorts - Returns a collection of live ports on the specified machine during the specified time interval.
// If the operation fails it returns an *azcore.ResponseError type.
// resourceGroupName - Resource group name within the specified subscriptionId.
// workspaceName - OMS workspace containing the resources of interest.
// machineName - Machine resource name.
// options - MachinesClientListPortsOptions contains the optional parameters for the MachinesClient.ListPorts method.
func (client *MachinesClient) ListPorts(resourceGroupName string, workspaceName string, machineName string, options *MachinesClientListPortsOptions) (*runtime.Pager[MachinesClientListPortsResponse]) {
	return runtime.NewPager(runtime.PageProcessor[MachinesClientListPortsResponse]{
		More: func(page MachinesClientListPortsResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *MachinesClientListPortsResponse) (MachinesClientListPortsResponse, error) {
			var req *policy.Request
			var err error
			if page == nil {
				req, err = client.listPortsCreateRequest(ctx, resourceGroupName, workspaceName, machineName, options)
			} else {
				req, err = runtime.NewRequest(ctx, http.MethodGet, *page.NextLink)
			}
			if err != nil {
				return MachinesClientListPortsResponse{}, err
			}
			resp, err := client.pl.Do(req)
			if err != nil {
				return MachinesClientListPortsResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return MachinesClientListPortsResponse{}, runtime.NewResponseError(resp)
			}
			return client.listPortsHandleResponse(resp)
		},
	})
}

// listPortsCreateRequest creates the ListPorts request.
func (client *MachinesClient) listPortsCreateRequest(ctx context.Context, resourceGroupName string, workspaceName string, machineName string, options *MachinesClientListPortsOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/features/serviceMap/machines/{machineName}/ports"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if workspaceName == "" {
		return nil, errors.New("parameter workspaceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceName}", url.PathEscape(workspaceName))
	if machineName == "" {
		return nil, errors.New("parameter machineName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{machineName}", url.PathEscape(machineName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2015-11-01-preview")
	if options != nil && options.StartTime != nil {
		reqQP.Set("startTime", options.StartTime.Format(time.RFC3339Nano))
	}
	if options != nil && options.EndTime != nil {
		reqQP.Set("endTime", options.EndTime.Format(time.RFC3339Nano))
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listPortsHandleResponse handles the ListPorts response.
func (client *MachinesClient) listPortsHandleResponse(resp *http.Response) (MachinesClientListPortsResponse, error) {
	result := MachinesClientListPortsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.PortCollection); err != nil {
		return MachinesClientListPortsResponse{}, err
	}
	return result, nil
}

// ListProcesses - Returns a collection of processes on the specified machine matching the specified conditions. The returned
// collection represents either processes that are active/live during the specified interval of
// time (live=true and startTime/endTime are specified) or that are known to have existed at or some time prior to the specified
// point in time (live=false and timestamp is specified).
// If the operation fails it returns an *azcore.ResponseError type.
// resourceGroupName - Resource group name within the specified subscriptionId.
// workspaceName - OMS workspace containing the resources of interest.
// machineName - Machine resource name.
// options - MachinesClientListProcessesOptions contains the optional parameters for the MachinesClient.ListProcesses method.
func (client *MachinesClient) ListProcesses(resourceGroupName string, workspaceName string, machineName string, options *MachinesClientListProcessesOptions) (*runtime.Pager[MachinesClientListProcessesResponse]) {
	return runtime.NewPager(runtime.PageProcessor[MachinesClientListProcessesResponse]{
		More: func(page MachinesClientListProcessesResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *MachinesClientListProcessesResponse) (MachinesClientListProcessesResponse, error) {
			var req *policy.Request
			var err error
			if page == nil {
				req, err = client.listProcessesCreateRequest(ctx, resourceGroupName, workspaceName, machineName, options)
			} else {
				req, err = runtime.NewRequest(ctx, http.MethodGet, *page.NextLink)
			}
			if err != nil {
				return MachinesClientListProcessesResponse{}, err
			}
			resp, err := client.pl.Do(req)
			if err != nil {
				return MachinesClientListProcessesResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return MachinesClientListProcessesResponse{}, runtime.NewResponseError(resp)
			}
			return client.listProcessesHandleResponse(resp)
		},
	})
}

// listProcessesCreateRequest creates the ListProcesses request.
func (client *MachinesClient) listProcessesCreateRequest(ctx context.Context, resourceGroupName string, workspaceName string, machineName string, options *MachinesClientListProcessesOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/features/serviceMap/machines/{machineName}/processes"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if workspaceName == "" {
		return nil, errors.New("parameter workspaceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceName}", url.PathEscape(workspaceName))
	if machineName == "" {
		return nil, errors.New("parameter machineName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{machineName}", url.PathEscape(machineName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2015-11-01-preview")
	if options != nil && options.Live != nil {
		reqQP.Set("live", strconv.FormatBool(*options.Live))
	}
	if options != nil && options.StartTime != nil {
		reqQP.Set("startTime", options.StartTime.Format(time.RFC3339Nano))
	}
	if options != nil && options.EndTime != nil {
		reqQP.Set("endTime", options.EndTime.Format(time.RFC3339Nano))
	}
	if options != nil && options.Timestamp != nil {
		reqQP.Set("timestamp", options.Timestamp.Format(time.RFC3339Nano))
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listProcessesHandleResponse handles the ListProcesses response.
func (client *MachinesClient) listProcessesHandleResponse(resp *http.Response) (MachinesClientListProcessesResponse, error) {
	result := MachinesClientListProcessesResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ProcessCollection); err != nil {
		return MachinesClientListProcessesResponse{}, err
	}
	return result, nil
}

