//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armservicemap

import "encoding/json"

func unmarshalHostingConfigurationClassification(rawMsg json.RawMessage) (HostingConfigurationClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var m map[string]interface{}
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b HostingConfigurationClassification
	switch m["kind"] {
	case string(HostingConfigurationKindProviderAzure):
		b = &AzureHostingConfiguration{}
	default:
		b = &HostingConfiguration{}
	}
	return b, json.Unmarshal(rawMsg, b)
}

func unmarshalProcessHostingConfigurationClassification(rawMsg json.RawMessage) (ProcessHostingConfigurationClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var m map[string]interface{}
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b ProcessHostingConfigurationClassification
	switch m["kind"] {
	case string(ProcessHostingConfigurationKindProviderAzure):
		b = &AzureProcessHostingConfiguration{}
	default:
		b = &ProcessHostingConfiguration{}
	}
	return b, json.Unmarshal(rawMsg, b)
}

func unmarshalResourceReferenceClassification(rawMsg json.RawMessage) (ResourceReferenceClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var m map[string]interface{}
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b ResourceReferenceClassification
	switch m["kind"] {
	case string(ResourceReferenceKindRefClientgroup):
		b = &ClientGroupReference{}
	case string(ResourceReferenceKindRefMachine):
		b = &MachineReference{}
	case string(ResourceReferenceKindRefMachinewithhints):
		b = &MachineReferenceWithHints{}
	case string(ResourceReferenceKindRefPort):
		b = &PortReference{}
	case string(ResourceReferenceKindRefProcess):
		b = &ProcessReference{}
	default:
		b = &ResourceReference{}
	}
	return b, json.Unmarshal(rawMsg, b)
}

