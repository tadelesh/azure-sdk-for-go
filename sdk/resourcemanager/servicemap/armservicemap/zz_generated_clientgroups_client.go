//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armservicemap

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strconv"
	"strings"
	"time"
)

// ClientGroupsClient contains the methods for the ClientGroups group.
// Don't use this type directly, use NewClientGroupsClient() instead.
type ClientGroupsClient struct {
	host string
	subscriptionID string
	pl runtime.Pipeline
}

// NewClientGroupsClient creates a new instance of ClientGroupsClient with the specified values.
// subscriptionID - Azure subscription identifier.
// credential - used to authorize requests. Usually a credential from azidentity.
// options - pass nil to accept the default values.
func NewClientGroupsClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) *ClientGroupsClient {
	if options == nil {
		options = &arm.ClientOptions{}
	}
	ep := options.Endpoint
	if len(ep) == 0 {
		ep = arm.AzurePublicCloud
	}
	client := &ClientGroupsClient{
		subscriptionID: subscriptionID,
		host: string(ep),
		pl: armruntime.NewPipeline(moduleName, moduleVersion, credential, runtime.PipelineOptions{}, options),
	}
	return client
}

// Get - Retrieves the specified client group
// If the operation fails it returns an *azcore.ResponseError type.
// resourceGroupName - Resource group name within the specified subscriptionId.
// workspaceName - OMS workspace containing the resources of interest.
// clientGroupName - Client Group resource name.
// options - ClientGroupsClientGetOptions contains the optional parameters for the ClientGroupsClient.Get method.
func (client *ClientGroupsClient) Get(ctx context.Context, resourceGroupName string, workspaceName string, clientGroupName string, options *ClientGroupsClientGetOptions) (ClientGroupsClientGetResponse, error) {
	req, err := client.getCreateRequest(ctx, resourceGroupName, workspaceName, clientGroupName, options)
	if err != nil {
		return ClientGroupsClientGetResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ClientGroupsClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ClientGroupsClientGetResponse{}, runtime.NewResponseError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *ClientGroupsClient) getCreateRequest(ctx context.Context, resourceGroupName string, workspaceName string, clientGroupName string, options *ClientGroupsClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/features/serviceMap/clientGroups/{clientGroupName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if workspaceName == "" {
		return nil, errors.New("parameter workspaceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceName}", url.PathEscape(workspaceName))
	if clientGroupName == "" {
		return nil, errors.New("parameter clientGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{clientGroupName}", url.PathEscape(clientGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2015-11-01-preview")
	if options != nil && options.StartTime != nil {
		reqQP.Set("startTime", options.StartTime.Format(time.RFC3339Nano))
	}
	if options != nil && options.EndTime != nil {
		reqQP.Set("endTime", options.EndTime.Format(time.RFC3339Nano))
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *ClientGroupsClient) getHandleResponse(resp *http.Response) (ClientGroupsClientGetResponse, error) {
	result := ClientGroupsClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ClientGroup); err != nil {
		return ClientGroupsClientGetResponse{}, err
	}
	return result, nil
}

// GetMembersCount - Returns the approximate number of members in the client group.
// If the operation fails it returns an *azcore.ResponseError type.
// resourceGroupName - Resource group name within the specified subscriptionId.
// workspaceName - OMS workspace containing the resources of interest.
// clientGroupName - Client Group resource name.
// options - ClientGroupsClientGetMembersCountOptions contains the optional parameters for the ClientGroupsClient.GetMembersCount
// method.
func (client *ClientGroupsClient) GetMembersCount(ctx context.Context, resourceGroupName string, workspaceName string, clientGroupName string, options *ClientGroupsClientGetMembersCountOptions) (ClientGroupsClientGetMembersCountResponse, error) {
	req, err := client.getMembersCountCreateRequest(ctx, resourceGroupName, workspaceName, clientGroupName, options)
	if err != nil {
		return ClientGroupsClientGetMembersCountResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ClientGroupsClientGetMembersCountResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ClientGroupsClientGetMembersCountResponse{}, runtime.NewResponseError(resp)
	}
	return client.getMembersCountHandleResponse(resp)
}

// getMembersCountCreateRequest creates the GetMembersCount request.
func (client *ClientGroupsClient) getMembersCountCreateRequest(ctx context.Context, resourceGroupName string, workspaceName string, clientGroupName string, options *ClientGroupsClientGetMembersCountOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/features/serviceMap/clientGroups/{clientGroupName}/membersCount"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if workspaceName == "" {
		return nil, errors.New("parameter workspaceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceName}", url.PathEscape(workspaceName))
	if clientGroupName == "" {
		return nil, errors.New("parameter clientGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{clientGroupName}", url.PathEscape(clientGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2015-11-01-preview")
	if options != nil && options.StartTime != nil {
		reqQP.Set("startTime", options.StartTime.Format(time.RFC3339Nano))
	}
	if options != nil && options.EndTime != nil {
		reqQP.Set("endTime", options.EndTime.Format(time.RFC3339Nano))
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getMembersCountHandleResponse handles the GetMembersCount response.
func (client *ClientGroupsClient) getMembersCountHandleResponse(resp *http.Response) (ClientGroupsClientGetMembersCountResponse, error) {
	result := ClientGroupsClientGetMembersCountResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ClientGroupMembersCount); err != nil {
		return ClientGroupsClientGetMembersCountResponse{}, err
	}
	return result, nil
}

// ListMembers - Returns the members of the client group during the specified time interval.
// If the operation fails it returns an *azcore.ResponseError type.
// resourceGroupName - Resource group name within the specified subscriptionId.
// workspaceName - OMS workspace containing the resources of interest.
// clientGroupName - Client Group resource name.
// options - ClientGroupsClientListMembersOptions contains the optional parameters for the ClientGroupsClient.ListMembers
// method.
func (client *ClientGroupsClient) ListMembers(resourceGroupName string, workspaceName string, clientGroupName string, options *ClientGroupsClientListMembersOptions) (*runtime.Pager[ClientGroupsClientListMembersResponse]) {
	return runtime.NewPager(runtime.PageProcessor[ClientGroupsClientListMembersResponse]{
		More: func(page ClientGroupsClientListMembersResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *ClientGroupsClientListMembersResponse) (ClientGroupsClientListMembersResponse, error) {
			var req *policy.Request
			var err error
			if page == nil {
				req, err = client.listMembersCreateRequest(ctx, resourceGroupName, workspaceName, clientGroupName, options)
			} else {
				req, err = runtime.NewRequest(ctx, http.MethodGet, *page.NextLink)
			}
			if err != nil {
				return ClientGroupsClientListMembersResponse{}, err
			}
			resp, err := client.pl.Do(req)
			if err != nil {
				return ClientGroupsClientListMembersResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return ClientGroupsClientListMembersResponse{}, runtime.NewResponseError(resp)
			}
			return client.listMembersHandleResponse(resp)
		},
	})
}

// listMembersCreateRequest creates the ListMembers request.
func (client *ClientGroupsClient) listMembersCreateRequest(ctx context.Context, resourceGroupName string, workspaceName string, clientGroupName string, options *ClientGroupsClientListMembersOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/features/serviceMap/clientGroups/{clientGroupName}/members"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if workspaceName == "" {
		return nil, errors.New("parameter workspaceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceName}", url.PathEscape(workspaceName))
	if clientGroupName == "" {
		return nil, errors.New("parameter clientGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{clientGroupName}", url.PathEscape(clientGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2015-11-01-preview")
	if options != nil && options.StartTime != nil {
		reqQP.Set("startTime", options.StartTime.Format(time.RFC3339Nano))
	}
	if options != nil && options.EndTime != nil {
		reqQP.Set("endTime", options.EndTime.Format(time.RFC3339Nano))
	}
	if options != nil && options.Top != nil {
		reqQP.Set("$top", strconv.FormatInt(int64(*options.Top), 10))
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listMembersHandleResponse handles the ListMembers response.
func (client *ClientGroupsClient) listMembersHandleResponse(resp *http.Response) (ClientGroupsClientListMembersResponse, error) {
	result := ClientGroupsClientListMembersResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ClientGroupMembersCollection); err != nil {
		return ClientGroupsClientListMembersResponse{}, err
	}
	return result, nil
}

