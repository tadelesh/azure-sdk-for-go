//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armservicemap

const (
	moduleName = "armservicemap"
	moduleVersion = "v0.1.0"
)

// Accuracy - Specifies the accuracy of a computation.
type Accuracy string

const (
	AccuracyActual Accuracy = "actual"
	AccuracyEstimated Accuracy = "estimated"
)

// PossibleAccuracyValues returns the possible values for the Accuracy const type.
func PossibleAccuracyValues() []Accuracy {
	return []Accuracy{	
		AccuracyActual,
		AccuracyEstimated,
	}
}

// ToPtr returns a *Accuracy pointing to the current value.
func (c Accuracy) ToPtr() *Accuracy {
	return &c
}

// AzureCloudServiceRoleType - Used to specify type of an Azure Cloud Service role
type AzureCloudServiceRoleType string

const (
	AzureCloudServiceRoleTypeUnknown AzureCloudServiceRoleType = "unknown"
	AzureCloudServiceRoleTypeWorker AzureCloudServiceRoleType = "worker"
	AzureCloudServiceRoleTypeWeb AzureCloudServiceRoleType = "web"
)

// PossibleAzureCloudServiceRoleTypeValues returns the possible values for the AzureCloudServiceRoleType const type.
func PossibleAzureCloudServiceRoleTypeValues() []AzureCloudServiceRoleType {
	return []AzureCloudServiceRoleType{	
		AzureCloudServiceRoleTypeUnknown,
		AzureCloudServiceRoleTypeWorker,
		AzureCloudServiceRoleTypeWeb,
	}
}

// ToPtr returns a *AzureCloudServiceRoleType pointing to the current value.
func (c AzureCloudServiceRoleType) ToPtr() *AzureCloudServiceRoleType {
	return &c
}

// Bitness - Specifies the bitness of a machine or process.
type Bitness string

const (
	BitnessThirtyTwoBit Bitness = "32bit"
	BitnessSixtyFourBit Bitness = "64bit"
)

// PossibleBitnessValues returns the possible values for the Bitness const type.
func PossibleBitnessValues() []Bitness {
	return []Bitness{	
		BitnessThirtyTwoBit,
		BitnessSixtyFourBit,
	}
}

// ToPtr returns a *Bitness pointing to the current value.
func (c Bitness) ToPtr() *Bitness {
	return &c
}

// ConnectionFailureState - Connection failure state:
// * ok indicates no failures
// * failed indicates only failures
// * mixed indicates both failures and successes
type ConnectionFailureState string

const (
	ConnectionFailureStateOk ConnectionFailureState = "ok"
	ConnectionFailureStateFailed ConnectionFailureState = "failed"
	ConnectionFailureStateMixed ConnectionFailureState = "mixed"
)

// PossibleConnectionFailureStateValues returns the possible values for the ConnectionFailureState const type.
func PossibleConnectionFailureStateValues() []ConnectionFailureState {
	return []ConnectionFailureState{	
		ConnectionFailureStateOk,
		ConnectionFailureStateFailed,
		ConnectionFailureStateMixed,
	}
}

// ToPtr returns a *ConnectionFailureState pointing to the current value.
func (c ConnectionFailureState) ToPtr() *ConnectionFailureState {
	return &c
}

// CoreResourceKind - Additional resource type qualifier.
type CoreResourceKind string

const (
	CoreResourceKindClientGroup CoreResourceKind = "clientGroup"
	CoreResourceKindMachine CoreResourceKind = "machine"
	CoreResourceKindMachineGroup CoreResourceKind = "machineGroup"
	CoreResourceKindPort CoreResourceKind = "port"
	CoreResourceKindProcess CoreResourceKind = "process"
)

// PossibleCoreResourceKindValues returns the possible values for the CoreResourceKind const type.
func PossibleCoreResourceKindValues() []CoreResourceKind {
	return []CoreResourceKind{	
		CoreResourceKindClientGroup,
		CoreResourceKindMachine,
		CoreResourceKindMachineGroup,
		CoreResourceKindPort,
		CoreResourceKindProcess,
	}
}

// ToPtr returns a *CoreResourceKind pointing to the current value.
func (c CoreResourceKind) ToPtr() *CoreResourceKind {
	return &c
}

// HostingConfigurationKind - Additional hosting configuration type qualifier.
type HostingConfigurationKind string

const (
	HostingConfigurationKindProviderAzure HostingConfigurationKind = "provider:azure"
)

// PossibleHostingConfigurationKindValues returns the possible values for the HostingConfigurationKind const type.
func PossibleHostingConfigurationKindValues() []HostingConfigurationKind {
	return []HostingConfigurationKind{	
		HostingConfigurationKindProviderAzure,
	}
}

// ToPtr returns a *HostingConfigurationKind pointing to the current value.
func (c HostingConfigurationKind) ToPtr() *HostingConfigurationKind {
	return &c
}

// HostingConfigurationProvider - The hosting provider of the VM.
type HostingConfigurationProvider string

const (
	HostingConfigurationProviderAzure HostingConfigurationProvider = "azure"
)

// PossibleHostingConfigurationProviderValues returns the possible values for the HostingConfigurationProvider const type.
func PossibleHostingConfigurationProviderValues() []HostingConfigurationProvider {
	return []HostingConfigurationProvider{	
		HostingConfigurationProviderAzure,
	}
}

// ToPtr returns a *HostingConfigurationProvider pointing to the current value.
func (c HostingConfigurationProvider) ToPtr() *HostingConfigurationProvider {
	return &c
}

// HypervisorType - Specifies the hypervisor type of a machine.
type HypervisorType string

const (
	HypervisorTypeUnknown HypervisorType = "unknown"
	HypervisorTypeHyperv HypervisorType = "hyperv"
)

// PossibleHypervisorTypeValues returns the possible values for the HypervisorType const type.
func PossibleHypervisorTypeValues() []HypervisorType {
	return []HypervisorType{	
		HypervisorTypeUnknown,
		HypervisorTypeHyperv,
	}
}

// ToPtr returns a *HypervisorType pointing to the current value.
func (c HypervisorType) ToPtr() *HypervisorType {
	return &c
}

// MachineGroupType - Type of the machine group
type MachineGroupType string

const (
	MachineGroupTypeAzureCs MachineGroupType = "azure-cs"
	MachineGroupTypeAzureSf MachineGroupType = "azure-sf"
	MachineGroupTypeAzureVmss MachineGroupType = "azure-vmss"
	MachineGroupTypeUnknown MachineGroupType = "unknown"
	MachineGroupTypeUserStatic MachineGroupType = "user-static"
)

// PossibleMachineGroupTypeValues returns the possible values for the MachineGroupType const type.
func PossibleMachineGroupTypeValues() []MachineGroupType {
	return []MachineGroupType{	
		MachineGroupTypeAzureCs,
		MachineGroupTypeAzureSf,
		MachineGroupTypeAzureVmss,
		MachineGroupTypeUnknown,
		MachineGroupTypeUserStatic,
	}
}

// ToPtr returns a *MachineGroupType pointing to the current value.
func (c MachineGroupType) ToPtr() *MachineGroupType {
	return &c
}

// MachineRebootStatus - Specifies if the machine has been rebooted since the installation of the dependency agent.
type MachineRebootStatus string

const (
	MachineRebootStatusUnknown MachineRebootStatus = "unknown"
	MachineRebootStatusRebooted MachineRebootStatus = "rebooted"
	MachineRebootStatusNotRebooted MachineRebootStatus = "notRebooted"
)

// PossibleMachineRebootStatusValues returns the possible values for the MachineRebootStatus const type.
func PossibleMachineRebootStatusValues() []MachineRebootStatus {
	return []MachineRebootStatus{	
		MachineRebootStatusUnknown,
		MachineRebootStatusRebooted,
		MachineRebootStatusNotRebooted,
	}
}

// ToPtr returns a *MachineRebootStatus pointing to the current value.
func (c MachineRebootStatus) ToPtr() *MachineRebootStatus {
	return &c
}

// MapRequestKind - The type of map to create.
type MapRequestKind string

const (
	MapRequestKindMapMachineGroupDependency MapRequestKind = "map:machine-group-dependency"
	MapRequestKindMapMachineListDependency MapRequestKind = "map:machine-list-dependency"
	MapRequestKindMapSingleMachineDependency MapRequestKind = "map:single-machine-dependency"
)

// PossibleMapRequestKindValues returns the possible values for the MapRequestKind const type.
func PossibleMapRequestKindValues() []MapRequestKind {
	return []MapRequestKind{	
		MapRequestKindMapMachineGroupDependency,
		MapRequestKindMapMachineListDependency,
		MapRequestKindMapSingleMachineDependency,
	}
}

// ToPtr returns a *MapRequestKind pointing to the current value.
func (c MapRequestKind) ToPtr() *MapRequestKind {
	return &c
}

// MonitoringState - Used to specify if a resources is monitored or discovered.
type MonitoringState string

const (
	MonitoringStateMonitored MonitoringState = "monitored"
	MonitoringStateDiscovered MonitoringState = "discovered"
)

// PossibleMonitoringStateValues returns the possible values for the MonitoringState const type.
func PossibleMonitoringStateValues() []MonitoringState {
	return []MonitoringState{	
		MonitoringStateMonitored,
		MonitoringStateDiscovered,
	}
}

// ToPtr returns a *MonitoringState pointing to the current value.
func (c MonitoringState) ToPtr() *MonitoringState {
	return &c
}

// OperatingSystemFamily - Specifies the operating system family, e.g., Linux, Windows, etc.
type OperatingSystemFamily string

const (
	OperatingSystemFamilyUnknown OperatingSystemFamily = "unknown"
	OperatingSystemFamilyWindows OperatingSystemFamily = "windows"
	OperatingSystemFamilyLinux OperatingSystemFamily = "linux"
	OperatingSystemFamilySolaris OperatingSystemFamily = "solaris"
	OperatingSystemFamilyAix OperatingSystemFamily = "aix"
)

// PossibleOperatingSystemFamilyValues returns the possible values for the OperatingSystemFamily const type.
func PossibleOperatingSystemFamilyValues() []OperatingSystemFamily {
	return []OperatingSystemFamily{	
		OperatingSystemFamilyUnknown,
		OperatingSystemFamilyWindows,
		OperatingSystemFamilyLinux,
		OperatingSystemFamilySolaris,
		OperatingSystemFamilyAix,
	}
}

// ToPtr returns a *OperatingSystemFamily pointing to the current value.
func (c OperatingSystemFamily) ToPtr() *OperatingSystemFamily {
	return &c
}

// ProcessHostingConfigurationKind - Additional hosting configuration type qualifier.
type ProcessHostingConfigurationKind string

const (
	ProcessHostingConfigurationKindProviderAzure ProcessHostingConfigurationKind = "provider:azure"
)

// PossibleProcessHostingConfigurationKindValues returns the possible values for the ProcessHostingConfigurationKind const type.
func PossibleProcessHostingConfigurationKindValues() []ProcessHostingConfigurationKind {
	return []ProcessHostingConfigurationKind{	
		ProcessHostingConfigurationKindProviderAzure,
	}
}

// ToPtr returns a *ProcessHostingConfigurationKind pointing to the current value.
func (c ProcessHostingConfigurationKind) ToPtr() *ProcessHostingConfigurationKind {
	return &c
}

// ProcessHostingConfigurationProvider - The hosting provider of the VM.
type ProcessHostingConfigurationProvider string

const (
	ProcessHostingConfigurationProviderAzure ProcessHostingConfigurationProvider = "azure"
)

// PossibleProcessHostingConfigurationProviderValues returns the possible values for the ProcessHostingConfigurationProvider const type.
func PossibleProcessHostingConfigurationProviderValues() []ProcessHostingConfigurationProvider {
	return []ProcessHostingConfigurationProvider{	
		ProcessHostingConfigurationProviderAzure,
	}
}

// ToPtr returns a *ProcessHostingConfigurationProvider pointing to the current value.
func (c ProcessHostingConfigurationProvider) ToPtr() *ProcessHostingConfigurationProvider {
	return &c
}

// ProcessRole - The inferred role of this process based on its name, command line, etc.
type ProcessRole string

const (
	ProcessRoleAppServer ProcessRole = "appServer"
	ProcessRoleDatabaseServer ProcessRole = "databaseServer"
	ProcessRoleLdapServer ProcessRole = "ldapServer"
	ProcessRoleSmbServer ProcessRole = "smbServer"
	ProcessRoleWebServer ProcessRole = "webServer"
)

// PossibleProcessRoleValues returns the possible values for the ProcessRole const type.
func PossibleProcessRoleValues() []ProcessRole {
	return []ProcessRole{	
		ProcessRoleAppServer,
		ProcessRoleDatabaseServer,
		ProcessRoleLdapServer,
		ProcessRoleSmbServer,
		ProcessRoleWebServer,
	}
}

// ToPtr returns a *ProcessRole pointing to the current value.
func (c ProcessRole) ToPtr() *ProcessRole {
	return &c
}

// RelationshipKind - Additional resource type qualifier.
type RelationshipKind string

const (
	RelationshipKindRelAcceptor RelationshipKind = "rel:acceptor"
	RelationshipKindRelConnection RelationshipKind = "rel:connection"
)

// PossibleRelationshipKindValues returns the possible values for the RelationshipKind const type.
func PossibleRelationshipKindValues() []RelationshipKind {
	return []RelationshipKind{	
		RelationshipKindRelAcceptor,
		RelationshipKindRelConnection,
	}
}

// ToPtr returns a *RelationshipKind pointing to the current value.
func (c RelationshipKind) ToPtr() *RelationshipKind {
	return &c
}

// ResourceReferenceKind - Specifies the sub-class of the reference.
type ResourceReferenceKind string

const (
	ResourceReferenceKindRefClientgroup ResourceReferenceKind = "ref:clientgroup"
	ResourceReferenceKindRefMachine ResourceReferenceKind = "ref:machine"
	ResourceReferenceKindRefMachinewithhints ResourceReferenceKind = "ref:machinewithhints"
	ResourceReferenceKindRefOnmachine ResourceReferenceKind = "ref:onmachine"
	ResourceReferenceKindRefPort ResourceReferenceKind = "ref:port"
	ResourceReferenceKindRefProcess ResourceReferenceKind = "ref:process"
)

// PossibleResourceReferenceKindValues returns the possible values for the ResourceReferenceKind const type.
func PossibleResourceReferenceKindValues() []ResourceReferenceKind {
	return []ResourceReferenceKind{	
		ResourceReferenceKindRefClientgroup,
		ResourceReferenceKindRefMachine,
		ResourceReferenceKindRefMachinewithhints,
		ResourceReferenceKindRefOnmachine,
		ResourceReferenceKindRefPort,
		ResourceReferenceKindRefProcess,
	}
}

// ToPtr returns a *ResourceReferenceKind pointing to the current value.
func (c ResourceReferenceKind) ToPtr() *ResourceReferenceKind {
	return &c
}

// VirtualMachineType - Specifies the virtualization type of a machine.
type VirtualMachineType string

const (
	VirtualMachineTypeUnknown VirtualMachineType = "unknown"
	VirtualMachineTypeHyperv VirtualMachineType = "hyperv"
	VirtualMachineTypeLdom VirtualMachineType = "ldom"
	VirtualMachineTypeLpar VirtualMachineType = "lpar"
	VirtualMachineTypeVmware VirtualMachineType = "vmware"
	VirtualMachineTypeVirtualPc VirtualMachineType = "virtualPc"
	VirtualMachineTypeXen VirtualMachineType = "xen"
)

// PossibleVirtualMachineTypeValues returns the possible values for the VirtualMachineType const type.
func PossibleVirtualMachineTypeValues() []VirtualMachineType {
	return []VirtualMachineType{	
		VirtualMachineTypeUnknown,
		VirtualMachineTypeHyperv,
		VirtualMachineTypeLdom,
		VirtualMachineTypeLpar,
		VirtualMachineTypeVmware,
		VirtualMachineTypeVirtualPc,
		VirtualMachineTypeXen,
	}
}

// ToPtr returns a *VirtualMachineType pointing to the current value.
func (c VirtualMachineType) ToPtr() *VirtualMachineType {
	return &c
}

// VirtualizationState - Specifies if the machine is physical, virtual, hypervisor, or unknown.
type VirtualizationState string

const (
	VirtualizationStateUnknown VirtualizationState = "unknown"
	VirtualizationStatePhysical VirtualizationState = "physical"
	VirtualizationStateVirtual VirtualizationState = "virtual"
	VirtualizationStateHypervisor VirtualizationState = "hypervisor"
)

// PossibleVirtualizationStateValues returns the possible values for the VirtualizationState const type.
func PossibleVirtualizationStateValues() []VirtualizationState {
	return []VirtualizationState{	
		VirtualizationStateUnknown,
		VirtualizationStatePhysical,
		VirtualizationStateVirtual,
		VirtualizationStateHypervisor,
	}
}

// ToPtr returns a *VirtualizationState pointing to the current value.
func (c VirtualizationState) ToPtr() *VirtualizationState {
	return &c
}

