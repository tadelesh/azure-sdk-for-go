//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armservicemap

import "time"

// Acceptor - A process accepting on a port.
type Acceptor struct {
	// REQUIRED; Additional resource type qualifier.
	Kind *RelationshipKind `json:"kind,omitempty"`

	// Properties for an acceptor relationship.
	Properties *AcceptorProperties `json:"properties,omitempty"`

	// READ-ONLY; Resource identifier.
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; Resource name.
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; Resource type.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// AcceptorProperties - Properties for an acceptor relationship.
type AcceptorProperties struct {
	// REQUIRED; Accepting process.
	Destination *ProcessReference `json:"destination,omitempty"`

	// REQUIRED; Port being accepted.
	Source *PortReference `json:"source,omitempty"`

	// Relationship end time.
	EndTime *time.Time `json:"endTime,omitempty"`

	// Relationship start time.
	StartTime *time.Time `json:"startTime,omitempty"`
}

// AgentConfiguration - Describes the configuration of the Dependency Agent installed on a machine.
type AgentConfiguration struct {
	// REQUIRED; Health Service Agent unique identifier.
	AgentID *string `json:"agentId,omitempty"`

	// Machine clock granularity in milliseconds.
	ClockGranularity *int32 `json:"clockGranularity,omitempty"`

	// Dependency Agent unique identifier.
	DependencyAgentID *string `json:"dependencyAgentId,omitempty"`

	// Dependency Agent revision number.
	DependencyAgentRevision *string `json:"dependencyAgentRevision,omitempty"`

	// Dependency Agent version number.
	DependencyAgentVersion *string `json:"dependencyAgentVersion,omitempty"`

	// Specifies whether the machine has been rebooted since the Dependency Agent installation.
	RebootStatus *MachineRebootStatus `json:"rebootStatus,omitempty"`
}

// AzureCloudServiceConfiguration - Describes an Azure Cloud Service
type AzureCloudServiceConfiguration struct {
	// Cloud Service deployment identifier
	Deployment *string `json:"deployment,omitempty"`

	// Cloud Service instance identifier
	InstanceID *string `json:"instanceId,omitempty"`

	// Cloud Service name
	Name *string `json:"name,omitempty"`

	// Cloud Service role name
	RoleName *string `json:"roleName,omitempty"`

	// Used to specify type of an Azure Cloud Service role
	RoleType *AzureCloudServiceRoleType `json:"roleType,omitempty"`
}

// AzureHostingConfiguration - Provides information about how a machine is hosted in Azure
type AzureHostingConfiguration struct {
	// REQUIRED; Additional hosting configuration type qualifier.
	Kind *HostingConfigurationKind `json:"kind,omitempty"`

	// Contains information about machines hosted as an Azure Cloud Service
	CloudService *AzureCloudServiceConfiguration `json:"cloudService,omitempty"`

	// Fault domain of the VM.
	FaultDomain *string `json:"faultDomain,omitempty"`

	// Image of the machine.
	Image *ImageConfiguration `json:"image,omitempty"`

	// Geographical location of the VM.
	Location *string `json:"location,omitempty"`

	// Machine name according to the hosting provider.
	Name *string `json:"name,omitempty"`

	// The hosting provider of the VM.
	Provider *HostingConfigurationProvider `json:"provider,omitempty"`

	// Resource group name within the specified subscription.
	ResourceGroup *string `json:"resourceGroup,omitempty"`

	// Unique identifier of the resource.
	ResourceID *string `json:"resourceId,omitempty"`

	// Contains information about machines that belong an Azure Service Fabric Cluster
	ServiceFabricCluster *AzureServiceFabricClusterConfiguration `json:"serviceFabricCluster,omitempty"`

	// Size of the VM.
	Size *string `json:"size,omitempty"`

	// Subscription ID.
	SubscriptionID *string `json:"subscriptionId,omitempty"`

	// Update domain of the VM.
	UpdateDomain *string `json:"updateDomain,omitempty"`

	// Virtual Machine ID (unique identifier).
	VMID *string `json:"vmId,omitempty"`

	// Contains information about machines hosted as an Azure Virtual Machine Scale Set
	VMScaleSet *AzureVMScaleSetConfiguration `json:"vmScaleSet,omitempty"`
}

// AzureProcessHostingConfiguration - Describes the hosting configuration of a process when hosted on azure
type AzureProcessHostingConfiguration struct {
	// REQUIRED; Additional hosting configuration type qualifier.
	Kind *ProcessHostingConfigurationKind `json:"kind,omitempty"`

	// Contains information about the cloud service the process belongs to
	CloudService *AzureCloudServiceConfiguration `json:"cloudService,omitempty"`

	// The hosting provider of the VM.
	Provider *ProcessHostingConfigurationProvider `json:"provider,omitempty"`
}

// AzureServiceFabricClusterConfiguration - Describes an Azure Service Fabric Cluster
type AzureServiceFabricClusterConfiguration struct {
	// Service Fabric cluster identifier.
	ClusterID *string `json:"clusterId,omitempty"`

	// Service Fabric cluster name.
	Name *string `json:"name,omitempty"`
}

// AzureVMScaleSetConfiguration - Describes an Azure Virtual Machine Scale Set
type AzureVMScaleSetConfiguration struct {
	// Virtual Machine Scale Set deployment identifier
	Deployment *string `json:"deployment,omitempty"`

	// Virtual Machine Scale Set instance identifier
	InstanceID *string `json:"instanceId,omitempty"`

	// Virtual Machine Scale Set name
	Name *string `json:"name,omitempty"`

	// Unique identifier of the resource.
	ResourceID *string `json:"resourceId,omitempty"`
}

// ClientGroup - Represents a collection of clients of a resource. A client group can represent the clients of a port, process,
// or a machine.
type ClientGroup struct {
	// REQUIRED; Additional resource type qualifier.
	Kind *CoreResourceKind `json:"kind,omitempty"`

	// Resource ETAG.
	Etag *string `json:"etag,omitempty"`

	// Resource properties.
	Properties *ClientGroupProperties `json:"properties,omitempty"`

	// READ-ONLY; Resource identifier.
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; Resource name.
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; Resource type.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// ClientGroupMember - Represents a member of a client group
type ClientGroupMember struct {
	// Resource properties.
	Properties *ClientGroupMemberProperties `json:"properties,omitempty"`

	// READ-ONLY; Resource identifier.
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; Resource name.
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; Resource type.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// ClientGroupMemberProperties - Resource properties.
type ClientGroupMemberProperties struct {
	// IP address.
	IPAddress *string `json:"ipAddress,omitempty"`

	// Port into which this client connected
	Port *PortReference `json:"port,omitempty"`

	// Processes accepting on the above port that received connections from this client.
	Processes []*ProcessReference `json:"processes,omitempty"`
}

// ClientGroupMembersCollection - Collection of ClientGroupMember resources.
type ClientGroupMembersCollection struct {
	// The URL to the next set of resources.
	NextLink *string `json:"nextLink,omitempty"`

	// Collection of ClientGroupMember resources.
	Value []*ClientGroupMember `json:"value,omitempty"`
}

// ClientGroupMembersCount - Specifies the number of members in a client group.
type ClientGroupMembersCount struct {
	// REQUIRED; Accuracy of the reported count.
	Accuracy *Accuracy `json:"accuracy,omitempty"`

	// REQUIRED; Number of members in the client group. Use this value together with the value of accuracy. If accuracy is exact
// then the value represents the actual number of members in the cloud. When accuracy is
// estimated, the actual number of members is larger than the value of count.
	Count *int32 `json:"count,omitempty"`

	// REQUIRED; Membership interval start time.
	EndTime *time.Time `json:"endTime,omitempty"`

	// REQUIRED; Client Group URI.
	GroupID *string `json:"groupId,omitempty"`

	// REQUIRED; Membership interval start time.
	StartTime *time.Time `json:"startTime,omitempty"`
}

// ClientGroupProperties - Resource properties.
type ClientGroupProperties struct {
	// REQUIRED; Reference to the resource whose clients are represented by this group.
	ClientsOf ResourceReferenceClassification `json:"clientsOf,omitempty"`
}

// ClientGroupReference - Reference to a client group.
type ClientGroupReference struct {
	// REQUIRED; Resource URI.
	ID *string `json:"id,omitempty"`

	// REQUIRED; Specifies the sub-class of the reference.
	Kind *ResourceReferenceKind `json:"kind,omitempty"`

	// READ-ONLY; Resource name.
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; Resource type qualifier.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// ClientGroupsClientGetMembersCountOptions contains the optional parameters for the ClientGroupsClient.GetMembersCount method.
type ClientGroupsClientGetMembersCountOptions struct {
	// UTC date and time specifying the end time of an interval. When not specified the service uses DateTime.UtcNow
	EndTime *time.Time
	// UTC date and time specifying the start time of an interval. When not specified the service uses DateTime.UtcNow - 10m
	StartTime *time.Time
}

// ClientGroupsClientGetOptions contains the optional parameters for the ClientGroupsClient.Get method.
type ClientGroupsClientGetOptions struct {
	// UTC date and time specifying the end time of an interval. When not specified the service uses DateTime.UtcNow
	EndTime *time.Time
	// UTC date and time specifying the start time of an interval. When not specified the service uses DateTime.UtcNow - 10m
	StartTime *time.Time
}

// ClientGroupsClientListMembersOptions contains the optional parameters for the ClientGroupsClient.ListMembers method.
type ClientGroupsClientListMembersOptions struct {
	// UTC date and time specifying the end time of an interval. When not specified the service uses DateTime.UtcNow
	EndTime *time.Time
	// UTC date and time specifying the start time of an interval. When not specified the service uses DateTime.UtcNow - 10m
	StartTime *time.Time
	// Page size to use. When not specified, the default page size is 100 records.
	Top *int32
}

// Connection - A network connection.
type Connection struct {
	// REQUIRED; Additional resource type qualifier.
	Kind *RelationshipKind `json:"kind,omitempty"`

	// Properties for a connection resource.
	Properties *ConnectionProperties `json:"properties,omitempty"`

	// READ-ONLY; Resource identifier.
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; Resource name.
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; Resource type.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// ConnectionCollection - Collection of Connection resources.
type ConnectionCollection struct {
	// The URL to the next set of resources.
	NextLink *string `json:"nextLink,omitempty"`

	// Collection of Connection resources.
	Value []*Connection `json:"value,omitempty"`
}

// ConnectionProperties - Properties for a connection resource.
type ConnectionProperties struct {
	// REQUIRED; Destination resource of the relationship.
	Destination ResourceReferenceClassification `json:"destination,omitempty"`

	// REQUIRED; Source resource of the relationship.
	Source ResourceReferenceClassification `json:"source,omitempty"`

	// Relationship end time.
	EndTime *time.Time `json:"endTime,omitempty"`

	// Specifies whether there are only successful, failed or a mixture of both connections represented by this resource.
	FailureState *ConnectionFailureState `json:"failureState,omitempty"`

	// Reference to the server port via which this connection has been established.
	ServerPort *PortReference `json:"serverPort,omitempty"`

	// Relationship start time.
	StartTime *time.Time `json:"startTime,omitempty"`
}

// CoreResourceClassification provides polymorphic access to related types.
// Call the interface's GetCoreResource() method to access the common type.
// Use a type switch to determine the concrete type.  The possible types are:
// - *ClientGroup, *CoreResource, *Machine, *MachineGroup, *Port, *Process
type CoreResourceClassification interface {
	// GetCoreResource returns the CoreResource content of the underlying type.
	GetCoreResource() *CoreResource
}

// CoreResource - Marker resource for the core Service Map resources
type CoreResource struct {
	// REQUIRED; Additional resource type qualifier.
	Kind *CoreResourceKind `json:"kind,omitempty"`

	// Resource ETAG.
	Etag *string `json:"etag,omitempty"`

	// READ-ONLY; Resource identifier.
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; Resource name.
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; Resource type.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// Error details.
type Error struct {
	// REQUIRED; Error code identifying the specific error.
	Code *string `json:"code,omitempty"`

	// Error message in the caller's locale.
	Message *string `json:"message,omitempty"`
}

// ErrorResponse - An error response from the API.
type ErrorResponse struct {
	// REQUIRED; Error information.
	Error *Error `json:"error,omitempty"`
}

// HostingConfigurationClassification provides polymorphic access to related types.
// Call the interface's GetHostingConfiguration() method to access the common type.
// Use a type switch to determine the concrete type.  The possible types are:
// - *AzureHostingConfiguration, *HostingConfiguration
type HostingConfigurationClassification interface {
	// GetHostingConfiguration returns the HostingConfiguration content of the underlying type.
	GetHostingConfiguration() *HostingConfiguration
}

// HostingConfiguration - Describes the hosting configuration of a machine.
type HostingConfiguration struct {
	// REQUIRED; Additional hosting configuration type qualifier.
	Kind *HostingConfigurationKind `json:"kind,omitempty"`

	// The hosting provider of the VM.
	Provider *HostingConfigurationProvider `json:"provider,omitempty"`
}

// HypervisorConfiguration - Describes the hypervisor configuration of a machine.
type HypervisorConfiguration struct {
	// Specifies the virtualization technology used by the hypervisor (hyperv, vmware, etc.)
	HypervisorType *HypervisorType `json:"hypervisorType,omitempty"`

	// The unique identifier of the hypervisor machine as reported by the underlying virtualization system.
	NativeHostMachineID *string `json:"nativeHostMachineId,omitempty"`
}

// IPv4NetworkInterface - Describes an IPv4 network interface.
type IPv4NetworkInterface struct {
	// REQUIRED; IPv4 address.
	IPAddress *string `json:"ipAddress,omitempty"`

	// IPv4 subnet mask.
	SubnetMask *string `json:"subnetMask,omitempty"`
}

// IPv6NetworkInterface - Describes an IPv6 network interface.
type IPv6NetworkInterface struct {
	// REQUIRED; IPv6 address.
	IPAddress *string `json:"ipAddress,omitempty"`
}

// ImageConfiguration - Describes the VM image of a machine.
type ImageConfiguration struct {
	// Offering of the VM image.
	Offering *string `json:"offering,omitempty"`

	// Publisher of the VM image.
	Publisher *string `json:"publisher,omitempty"`

	// SKU of the VM image.
	SKU *string `json:"sku,omitempty"`

	// Version of the VM image.
	Version *string `json:"version,omitempty"`
}

// Liveness - Specifies the contents of a check liveness response.
type Liveness struct {
	// REQUIRED; Liveness interval end time.
	EndTime *time.Time `json:"endTime,omitempty"`

	// REQUIRED; true if the resource is live during [startTime, endTime], false otherwise
	Live *bool `json:"live,omitempty"`

	// REQUIRED; Liveness interval start time.
	StartTime *time.Time `json:"startTime,omitempty"`
}

// Machine - A machine resource represents a discovered computer system. It can be monitored, i.e., a Dependency Agent is
// running on it, or discovered, i.e., its existence was inferred by observing the data stream
// from monitored machines. As machines change, prior versions of the machine resource are preserved and available for access.
// A machine is live during an interval of time, if either its Dependency Agent
// has reported data during (parts) of that interval, or a Dependency agent running on other machines has reported activity
// associated with the machine.
type Machine struct {
	// REQUIRED; Additional resource type qualifier.
	Kind *CoreResourceKind `json:"kind,omitempty"`

	// Resource ETAG.
	Etag *string `json:"etag,omitempty"`

	// Resource properties.
	Properties *MachineProperties `json:"properties,omitempty"`

	// READ-ONLY; Resource identifier.
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; Resource name.
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; Resource type.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// MachineCollection - Collection of Machine resources.
type MachineCollection struct {
	// The URL to the next set of resources.
	NextLink *string `json:"nextLink,omitempty"`

	// Collection of Machine resources.
	Value []*Machine `json:"value,omitempty"`
}

// MachineCountsByOperatingSystem - Machines by operating system.
type MachineCountsByOperatingSystem struct {
	// REQUIRED; Number of live Linux machines.
	Linux *int32 `json:"linux,omitempty"`

	// REQUIRED; Number of live Windows machines.
	Windows *int32 `json:"windows,omitempty"`
}

// MachineGroup - A user-defined logical grouping of machines.
type MachineGroup struct {
	// REQUIRED; Additional resource type qualifier.
	Kind *CoreResourceKind `json:"kind,omitempty"`

	// Resource ETAG.
	Etag *string `json:"etag,omitempty"`

	// Resource properties.
	Properties *MachineGroupProperties `json:"properties,omitempty"`

	// READ-ONLY; Resource identifier.
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; Resource name.
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; Resource type.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// MachineGroupCollection - Collection of Machine Group resources.
type MachineGroupCollection struct {
	// The URL to the next set of resources.
	NextLink *string `json:"nextLink,omitempty"`

	// Collection of Machine Group resources.
	Value []*MachineGroup `json:"value,omitempty"`
}

// MachineGroupMapRequest - Specifies the computation of a machine group dependency map. A machine group dependency map includes
// all direct dependencies the machines in the group.
type MachineGroupMapRequest struct {
	// REQUIRED; The type of map to create.
	Kind *MapRequestKind `json:"kind,omitempty"`

	// REQUIRED; URI of machine group resource for which to generate the map.
	MachineGroupID *string `json:"machineGroupId,omitempty"`

	// Map interval end time.
	EndTime *time.Time `json:"endTime,omitempty"`

	// If true, only processes between specified machines will be included. Any connections in or out of those processes will
// be included.
	FilterProcesses *bool `json:"filterProcesses,omitempty"`

	// Map interval start time.
	StartTime *time.Time `json:"startTime,omitempty"`
}

// MachineGroupProperties - Resource properties.
type MachineGroupProperties struct {
	// REQUIRED; User defined name for the group
	DisplayName *string `json:"displayName,omitempty"`

	// Count of machines in this group. The value of count may be bigger than the number of machines in case of the group has
// been truncated due to exceeding the max number of machines a group can handle.
	Count *int32 `json:"count,omitempty"`

	// Type of the machine group
	GroupType *MachineGroupType `json:"groupType,omitempty"`

	// References of the machines in this group. The hints within each reference do not represent the current value of the corresponding
// fields. They are a snapshot created during the last time the machine
// group was updated.
	Machines []*MachineReferenceWithHints `json:"machines,omitempty"`
}

// MachineGroupsClientCreateOptions contains the optional parameters for the MachineGroupsClient.Create method.
type MachineGroupsClientCreateOptions struct {
	// placeholder for future optional parameters
}

// MachineGroupsClientDeleteOptions contains the optional parameters for the MachineGroupsClient.Delete method.
type MachineGroupsClientDeleteOptions struct {
	// placeholder for future optional parameters
}

// MachineGroupsClientGetOptions contains the optional parameters for the MachineGroupsClient.Get method.
type MachineGroupsClientGetOptions struct {
	// UTC date and time specifying the end time of an interval. When not specified the service uses DateTime.UtcNow
	EndTime *time.Time
	// UTC date and time specifying the start time of an interval. When not specified the service uses DateTime.UtcNow - 10m
	StartTime *time.Time
}

// MachineGroupsClientListByWorkspaceOptions contains the optional parameters for the MachineGroupsClient.ListByWorkspace
// method.
type MachineGroupsClientListByWorkspaceOptions struct {
	// UTC date and time specifying the end time of an interval. When not specified the service uses DateTime.UtcNow
	EndTime *time.Time
	// UTC date and time specifying the start time of an interval. When not specified the service uses DateTime.UtcNow - 10m
	StartTime *time.Time
}

// MachineGroupsClientUpdateOptions contains the optional parameters for the MachineGroupsClient.Update method.
type MachineGroupsClientUpdateOptions struct {
	// placeholder for future optional parameters
}

// MachineListMapRequest - Specifies the computation of a one hope dependency map for a list of machines. The resulting map
// includes all direct dependencies for the specified machines.
type MachineListMapRequest struct {
	// REQUIRED; The type of map to create.
	Kind *MapRequestKind `json:"kind,omitempty"`

	// REQUIRED; a list of URIs of machine resources for which to generate the map.
	MachineIDs []*string `json:"machineIds,omitempty"`

	// Map interval end time.
	EndTime *time.Time `json:"endTime,omitempty"`

	// If true, only processes between specified machines will be included. Any connections in or out of those processes will
// be included.
	FilterProcesses *bool `json:"filterProcesses,omitempty"`

	// Map interval start time.
	StartTime *time.Time `json:"startTime,omitempty"`
}

// MachineProperties - Resource properties.
type MachineProperties struct {
	// Dependency Agent configuration.
	Agent *AgentConfiguration `json:"agent,omitempty"`

	// UTC date and time when the machine last booted
	BootTime *time.Time `json:"bootTime,omitempty"`

	// Name of the machine, e.g., server
	ComputerName *string `json:"computerName,omitempty"`

	// Name to use for display purposes
	DisplayName *string `json:"displayName,omitempty"`

	// Fully-qualified name of the machine, e.g., server.company.com
	FullyQualifiedDomainName *string `json:"fullyQualifiedDomainName,omitempty"`

	// Hosting-related configuration. Present if hosting information is discovered for the VM.
	Hosting HostingConfigurationClassification `json:"hosting,omitempty"`

	// Hypervisor-related configuration. Present only when 'virtualizationState' is hypervisor.
	Hypervisor *HypervisorConfiguration `json:"hypervisor,omitempty"`

	// Specifies whether the machine is actively monitored or discovered.
	MonitoringState *MonitoringState `json:"monitoringState,omitempty"`

	// Network configuration (ips, gateways, dns, etc.)
	Networking *NetworkConfiguration `json:"networking,omitempty"`

	// Operating system information.
	OperatingSystem *OperatingSystemConfiguration `json:"operatingSystem,omitempty"`

	// Machine resources (memory, cpu, etc.).
	Resources *MachineResourcesConfiguration `json:"resources,omitempty"`

	// UTC date and time when this resource was updated in the system.
	Timestamp *time.Time `json:"timestamp,omitempty"`

	// Timezone of the machine.
	Timezone *Timezone `json:"timezone,omitempty"`

	// Virtualization-related configuration. Present only when virtualizationState is virtual.
	VirtualMachine *VirtualMachineConfiguration `json:"virtualMachine,omitempty"`

	// Specifies whether the machine is virtualized.
	VirtualizationState *VirtualizationState `json:"virtualizationState,omitempty"`
}

// MachineReference - Reference to a machine.
type MachineReference struct {
	// REQUIRED; Resource URI.
	ID *string `json:"id,omitempty"`

	// REQUIRED; Specifies the sub-class of the reference.
	Kind *ResourceReferenceKind `json:"kind,omitempty"`

	// READ-ONLY; Resource name.
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; Resource type qualifier.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// MachineReferenceWithHints - A machine reference with a hint of the machine's name and operating system.
type MachineReferenceWithHints struct {
	// REQUIRED; Resource URI.
	ID *string `json:"id,omitempty"`

	// REQUIRED; Specifies the sub-class of the reference.
	Kind *ResourceReferenceKind `json:"kind,omitempty"`

	// Machine reference with name and os hints.
	Properties *MachineReferenceWithHintsProperties `json:"properties,omitempty"`

	// READ-ONLY; Resource name.
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; Resource type qualifier.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// MachineReferenceWithHintsProperties - Machine reference with name and os hints.
type MachineReferenceWithHintsProperties struct {
	// READ-ONLY; Last known display name.
	DisplayNameHint *string `json:"displayNameHint,omitempty" azure:"ro"`

	// READ-ONLY; Last known operating system family.
	OSFamilyHint *OperatingSystemFamily `json:"osFamilyHint,omitempty" azure:"ro"`
}

// MachineResourcesConfiguration - Describes the resources of a machine.
type MachineResourcesConfiguration struct {
	// CPU speed in megahertz (Mhz).
	CPUSpeed *int32 `json:"cpuSpeed,omitempty"`

	// Describes the accuracy of the cpuSpeed field.
	CPUSpeedAccuracy *Accuracy `json:"cpuSpeedAccuracy,omitempty"`

	// Number of CPUs.
	Cpus *int32 `json:"cpus,omitempty"`

	// Physical memory in megabytes (MB).
	PhysicalMemory *int32 `json:"physicalMemory,omitempty"`
}

// MachinesClientGetLivenessOptions contains the optional parameters for the MachinesClient.GetLiveness method.
type MachinesClientGetLivenessOptions struct {
	// UTC date and time specifying the end time of an interval. When not specified the service uses DateTime.UtcNow
	EndTime *time.Time
	// UTC date and time specifying the start time of an interval. When not specified the service uses DateTime.UtcNow - 10m
	StartTime *time.Time
}

// MachinesClientGetOptions contains the optional parameters for the MachinesClient.Get method.
type MachinesClientGetOptions struct {
	// UTC date and time specifying a time instance relative to which to evaluate the machine resource. When not specified, the
// service uses DateTime.UtcNow.
	Timestamp *time.Time
}

// MachinesClientListByWorkspaceOptions contains the optional parameters for the MachinesClient.ListByWorkspace method.
type MachinesClientListByWorkspaceOptions struct {
	// UTC date and time specifying the end time of an interval. When not specified the service uses DateTime.UtcNow
	EndTime *time.Time
	// Specifies whether to return live resources (true) or inventory resources (false). Defaults to true. When retrieving live
// resources, the start time (startTime) and end time (endTime) of the desired
// interval should be included. When retrieving inventory resources, an optional timestamp (timestamp) parameter can be specified
// to return the version of each resource closest (not-after) that
// timestamp.
	Live *bool
	// UTC date and time specifying the start time of an interval. When not specified the service uses DateTime.UtcNow - 10m
	StartTime *time.Time
	// UTC date and time specifying a time instance relative to which to evaluate each machine resource. Only applies when live=false.
// When not specified, the service uses DateTime.UtcNow.
	Timestamp *time.Time
	// Page size to use. When not specified, the default page size is 100 records.
	Top *int32
}

// MachinesClientListConnectionsOptions contains the optional parameters for the MachinesClient.ListConnections method.
type MachinesClientListConnectionsOptions struct {
	// UTC date and time specifying the end time of an interval. When not specified the service uses DateTime.UtcNow
	EndTime *time.Time
	// UTC date and time specifying the start time of an interval. When not specified the service uses DateTime.UtcNow - 10m
	StartTime *time.Time
}

// MachinesClientListMachineGroupMembershipOptions contains the optional parameters for the MachinesClient.ListMachineGroupMembership
// method.
type MachinesClientListMachineGroupMembershipOptions struct {
	// UTC date and time specifying the end time of an interval. When not specified the service uses DateTime.UtcNow
	EndTime *time.Time
	// UTC date and time specifying the start time of an interval. When not specified the service uses DateTime.UtcNow - 10m
	StartTime *time.Time
}

// MachinesClientListPortsOptions contains the optional parameters for the MachinesClient.ListPorts method.
type MachinesClientListPortsOptions struct {
	// UTC date and time specifying the end time of an interval. When not specified the service uses DateTime.UtcNow
	EndTime *time.Time
	// UTC date and time specifying the start time of an interval. When not specified the service uses DateTime.UtcNow - 10m
	StartTime *time.Time
}

// MachinesClientListProcessesOptions contains the optional parameters for the MachinesClient.ListProcesses method.
type MachinesClientListProcessesOptions struct {
	// UTC date and time specifying the end time of an interval. When not specified the service uses DateTime.UtcNow
	EndTime *time.Time
	// Specifies whether to return live resources (true) or inventory resources (false). Defaults to true. When retrieving live
// resources, the start time (startTime) and end time (endTime) of the desired
// interval should be included. When retrieving inventory resources, an optional timestamp (timestamp) parameter can be specified
// to return the version of each resource closest (not-after) that
// timestamp.
	Live *bool
	// UTC date and time specifying the start time of an interval. When not specified the service uses DateTime.UtcNow - 10m
	StartTime *time.Time
	// UTC date and time specifying a time instance relative to which to evaluate all process resource. Only applies when live=false.
// When not specified, the service uses DateTime.UtcNow.
	Timestamp *time.Time
}

// MachinesSummary - A summary of the machines in the workspace.
type MachinesSummary struct {
	// Summarizes machines in the workspace.
	Properties *MachinesSummaryProperties `json:"properties,omitempty"`

	// READ-ONLY; Resource identifier.
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; Resource name.
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; Resource type.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// MachinesSummaryProperties - Summarizes machines in the workspace.
type MachinesSummaryProperties struct {
	// REQUIRED; Summary interval end time.
	EndTime *time.Time `json:"endTime,omitempty"`

	// REQUIRED; Number of live machines.
	Live *int32 `json:"live,omitempty"`

	// REQUIRED; Machine counts by operating system.
	OS *MachineCountsByOperatingSystem `json:"os,omitempty"`

	// REQUIRED; Summary interval start time.
	StartTime *time.Time `json:"startTime,omitempty"`

	// REQUIRED; Total number of machines.
	Total *int32 `json:"total,omitempty"`
}

// Map - A map of resources and relationships between them.
type Map struct {
	// REQUIRED; The edges (relationships) of a map.
	Edges *MapEdges `json:"edges,omitempty"`

	// REQUIRED; The nodes (entities) of a map.
	Nodes *MapNodes `json:"nodes,omitempty"`
}

// MapEdges - The edges (relationships) of a map.
type MapEdges struct {
	// Processes accepting on a port.
	Acceptors []*Acceptor `json:"acceptors,omitempty"`

	// Network connections.
	Connections []*Connection `json:"connections,omitempty"`
}

// MapNodes - The nodes (entities) of a map.
type MapNodes struct {
	// Client Group resources.
	ClientGroups []*ClientGroup `json:"clientGroups,omitempty"`

	// Machine resources.
	Machines []*Machine `json:"machines,omitempty"`

	// Port resources.
	Ports []*Port `json:"ports,omitempty"`

	// Process resources.
	Processes []*Process `json:"processes,omitempty"`
}

// MapRequestClassification provides polymorphic access to related types.
// Call the interface's GetMapRequest() method to access the common type.
// Use a type switch to determine the concrete type.  The possible types are:
// - *MachineGroupMapRequest, *MachineListMapRequest, *MapRequest, *MultipleMachinesMapRequest, *SingleMachineDependencyMapRequest
type MapRequestClassification interface {
	// GetMapRequest returns the MapRequest content of the underlying type.
	GetMapRequest() *MapRequest
}

// MapRequest - Specifies the contents of request to generate a map.
type MapRequest struct {
	// REQUIRED; The type of map to create.
	Kind *MapRequestKind `json:"kind,omitempty"`

	// Map interval end time.
	EndTime *time.Time `json:"endTime,omitempty"`

	// Map interval start time.
	StartTime *time.Time `json:"startTime,omitempty"`
}

// MapResponse - Specified the contents of a map response.
type MapResponse struct {
	// REQUIRED; Map interval end time.
	EndTime *time.Time `json:"endTime,omitempty"`

	// REQUIRED; The generated map.
	Map *Map `json:"map,omitempty"`

	// REQUIRED; Map interval start time.
	StartTime *time.Time `json:"startTime,omitempty"`
}

// MapsClientGenerateOptions contains the optional parameters for the MapsClient.Generate method.
type MapsClientGenerateOptions struct {
	// placeholder for future optional parameters
}

// MultipleMachinesMapRequestClassification provides polymorphic access to related types.
// Call the interface's GetMultipleMachinesMapRequest() method to access the common type.
// Use a type switch to determine the concrete type.  The possible types are:
// - *MachineGroupMapRequest, *MachineListMapRequest, *MultipleMachinesMapRequest
type MultipleMachinesMapRequestClassification interface {
	MapRequestClassification
	// GetMultipleMachinesMapRequest returns the MultipleMachinesMapRequest content of the underlying type.
	GetMultipleMachinesMapRequest() *MultipleMachinesMapRequest
}

// MultipleMachinesMapRequest - Provides a base class for describing map requests for a collection of machines
type MultipleMachinesMapRequest struct {
	// REQUIRED; The type of map to create.
	Kind *MapRequestKind `json:"kind,omitempty"`

	// Map interval end time.
	EndTime *time.Time `json:"endTime,omitempty"`

	// If true, only processes between specified machines will be included. Any connections in or out of those processes will
// be included.
	FilterProcesses *bool `json:"filterProcesses,omitempty"`

	// Map interval start time.
	StartTime *time.Time `json:"startTime,omitempty"`
}

// NetworkConfiguration - Describes the network configuration of a machine.
type NetworkConfiguration struct {
	// DNS names associated with the machine.
	DNSNames []*string `json:"dnsNames,omitempty"`

	// Default IPv4 gateways.
	DefaultIPv4Gateways []*string `json:"defaultIpv4Gateways,omitempty"`

	// IPv4 interfaces.
	IPv4Interfaces []*IPv4NetworkInterface `json:"ipv4Interfaces,omitempty"`

	// IPv6 interfaces.
	IPv6Interfaces []*IPv6NetworkInterface `json:"ipv6Interfaces,omitempty"`

	// MAC addresses of all active network interfaces.
	MacAddresses []*string `json:"macAddresses,omitempty"`
}

// OperatingSystemConfiguration - Describes the configuration of the operating system of a machine.
type OperatingSystemConfiguration struct {
	// REQUIRED; Operating system bitness (32-bit or 64-bit).
	Bitness *Bitness `json:"bitness,omitempty"`

	// REQUIRED; Windows, Linux, etc.
	Family *OperatingSystemFamily `json:"family,omitempty"`

	// REQUIRED; Operating system full name.
	FullName *string `json:"fullName,omitempty"`
}

// Port - A port resource represents a server port on a machine. The port may be actively monitored, i.e., a Dependency Agent
// is running on its machine, or discovered, i.e., its existence was inferred by
// observing the data stream from monitored machines. A port is live during an interval of time, if that port had associated
// activity during (parts) of that interval.
type Port struct {
	// REQUIRED; Additional resource type qualifier.
	Kind *CoreResourceKind `json:"kind,omitempty"`

	// Resource ETAG.
	Etag *string `json:"etag,omitempty"`

	// Resource properties.
	Properties *PortProperties `json:"properties,omitempty"`

	// READ-ONLY; Resource identifier.
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; Resource name.
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; Resource type.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// PortCollection - Collection of Port resources.
type PortCollection struct {
	// The URL to the next set of resources.
	NextLink *string `json:"nextLink,omitempty"`

	// Collection of Port resources.
	Value []*Port `json:"value,omitempty"`
}

// PortProperties - Resource properties.
type PortProperties struct {
	// Name to use for display purposes.
	DisplayName *string `json:"displayName,omitempty"`

	// IP address associated with the port. At present only IPv4 addresses are supported.
	IPAddress *string `json:"ipAddress,omitempty"`

	// Machine hosting this port.
	Machine ResourceReferenceClassification `json:"machine,omitempty"`

	// Specifies whether the port is actively monitored or discovered.
	MonitoringState *MonitoringState `json:"monitoringState,omitempty"`

	// Port number.
	PortNumber *int32 `json:"portNumber,omitempty"`
}

// PortReference - Reference to a port.
type PortReference struct {
	// REQUIRED; Resource URI.
	ID *string `json:"id,omitempty"`

	// REQUIRED; Specifies the sub-class of the reference.
	Kind *ResourceReferenceKind `json:"kind,omitempty"`

	// Resource properties.
	Properties *PortReferenceProperties `json:"properties,omitempty"`

	// READ-ONLY; Resource name.
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; Resource type qualifier.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// PortReferenceProperties - Resource properties.
type PortReferenceProperties struct {
	// Port number.
	PortNumber *int32 `json:"portNumber,omitempty"`

	// READ-ONLY; IP address of the port.
	IPAddress *string `json:"ipAddress,omitempty" azure:"ro"`

	// READ-ONLY; Machine hosting the port.
	Machine *MachineReference `json:"machine,omitempty" azure:"ro"`
}

// PortsClientGetLivenessOptions contains the optional parameters for the PortsClient.GetLiveness method.
type PortsClientGetLivenessOptions struct {
	// UTC date and time specifying the end time of an interval. When not specified the service uses DateTime.UtcNow
	EndTime *time.Time
	// UTC date and time specifying the start time of an interval. When not specified the service uses DateTime.UtcNow - 10m
	StartTime *time.Time
}

// PortsClientGetOptions contains the optional parameters for the PortsClient.Get method.
type PortsClientGetOptions struct {
	// UTC date and time specifying the end time of an interval. When not specified the service uses DateTime.UtcNow
	EndTime *time.Time
	// UTC date and time specifying the start time of an interval. When not specified the service uses DateTime.UtcNow - 10m
	StartTime *time.Time
}

// PortsClientListAcceptingProcessesOptions contains the optional parameters for the PortsClient.ListAcceptingProcesses method.
type PortsClientListAcceptingProcessesOptions struct {
	// UTC date and time specifying the end time of an interval. When not specified the service uses DateTime.UtcNow
	EndTime *time.Time
	// UTC date and time specifying the start time of an interval. When not specified the service uses DateTime.UtcNow - 10m
	StartTime *time.Time
}

// PortsClientListConnectionsOptions contains the optional parameters for the PortsClient.ListConnections method.
type PortsClientListConnectionsOptions struct {
	// UTC date and time specifying the end time of an interval. When not specified the service uses DateTime.UtcNow
	EndTime *time.Time
	// UTC date and time specifying the start time of an interval. When not specified the service uses DateTime.UtcNow - 10m
	StartTime *time.Time
}

// Process - A process resource represents a process running on a machine. The process may be actively monitored, i.e., a
// Dependency Agent is running on its machine, or discovered, i.e., its existence was inferred
// by observing the data stream from monitored machines. A process resource represents a pool of actual operating system resources
// that share command lines and metadata. As the process pool evolves over
// time, prior versions of the process resource are preserved and available for access. A process is live during an interval
// of time, if that process is executing during (parts) of that interval
type Process struct {
	// REQUIRED; Additional resource type qualifier.
	Kind *CoreResourceKind `json:"kind,omitempty"`

	// Resource ETAG.
	Etag *string `json:"etag,omitempty"`

	// Resource properties.
	Properties *ProcessProperties `json:"properties,omitempty"`

	// READ-ONLY; Resource identifier.
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; Resource name.
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; Resource type.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// ProcessCollection - Collection of Process resources.
type ProcessCollection struct {
	// The URL to the next set of resources.
	NextLink *string `json:"nextLink,omitempty"`

	// Collection of Process resources.
	Value []*Process `json:"value,omitempty"`
}

// ProcessDetails - Describes process metadata.
type ProcessDetails struct {
	// Process command line.
	CommandLine *string `json:"commandLine,omitempty"`

	// Name of company that created the process executable.
	CompanyName *string `json:"companyName,omitempty"`

	// Process description.
	Description *string `json:"description,omitempty"`

	// Process executable path.
	ExecutablePath *string `json:"executablePath,omitempty"`

	// File version.
	FileVersion *string `json:"fileVersion,omitempty"`

	// The Operating System Process Identifier (PID) of the first process in this process pool.
	FirstPid *int32 `json:"firstPid,omitempty"`

	// Internal process name.
	InternalName *string `json:"internalName,omitempty"`

	// A unique identifier for a process, generally resilient to process restart, computed by Service Map.
	PersistentKey *string `json:"persistentKey,omitempty"`

	// Represents the identity of the process pool assigned to the process by Dependency Agent.
	PoolID *int32 `json:"poolId,omitempty"`

	// Product name.
	ProductName *string `json:"productName,omitempty"`

	// Product version.
	ProductVersion *string `json:"productVersion,omitempty"`

	// Collection of services hosted by this Process (Windows only).
	Services []*ProcessHostedService `json:"services,omitempty"`

	// Process workingDirectory.
	WorkingDirectory *string `json:"workingDirectory,omitempty"`

	// Process zone name (Linux only).
	ZoneName *string `json:"zoneName,omitempty"`
}

// ProcessHostedService - A service hosted by a process.
type ProcessHostedService struct {
	// The service's display name.
	DisplayName *string `json:"displayName,omitempty"`

	// The name of the service.
	Name *string `json:"name,omitempty"`
}

// ProcessHostingConfigurationClassification provides polymorphic access to related types.
// Call the interface's GetProcessHostingConfiguration() method to access the common type.
// Use a type switch to determine the concrete type.  The possible types are:
// - *AzureProcessHostingConfiguration, *ProcessHostingConfiguration
type ProcessHostingConfigurationClassification interface {
	// GetProcessHostingConfiguration returns the ProcessHostingConfiguration content of the underlying type.
	GetProcessHostingConfiguration() *ProcessHostingConfiguration
}

// ProcessHostingConfiguration - Describes the hosting configuration of a process.
type ProcessHostingConfiguration struct {
	// REQUIRED; Additional hosting configuration type qualifier.
	Kind *ProcessHostingConfigurationKind `json:"kind,omitempty"`

	// The hosting provider of the VM.
	Provider *ProcessHostingConfigurationProvider `json:"provider,omitempty"`
}

// ProcessProperties - Resource properties.
type ProcessProperties struct {
	// Present only for a discovered process acting as a server. References the port on which the discovered process is accepting.
	AcceptorOf ResourceReferenceClassification `json:"acceptorOf,omitempty"`

	// Present only for a discovered process acting as a client of a monitored process/machine/port. References the monitored
// process/machine/port that this process is a client of.
	ClientOf ResourceReferenceClassification `json:"clientOf,omitempty"`

	// Process metadata (command line, product name, etc.).
	Details *ProcessDetails `json:"details,omitempty"`

	// Name to use for display purposes
	DisplayName *string `json:"displayName,omitempty"`

	// The name of the process executable
	ExecutableName *string `json:"executableName,omitempty"`

	// The name of the product or suite of the process. The group is determined by its executable name, command line, etc.
	Group *string `json:"group,omitempty"`

	// Information about the hosting environment
	Hosting ProcessHostingConfigurationClassification `json:"hosting,omitempty"`

	// Machine hosting this process.
	Machine ResourceReferenceClassification `json:"machine,omitempty"`

	// Specifies whether the process is actively monitored or discovered.
	MonitoringState *MonitoringState `json:"monitoringState,omitempty"`

	// The inferred role of this process based on its name, command line, etc.
	Role *ProcessRole `json:"role,omitempty"`

	// UTC date and time when the process started
	StartTime *time.Time `json:"startTime,omitempty"`

	// UTC date and time when this process resource was updated in the system
	Timestamp *time.Time `json:"timestamp,omitempty"`

	// Information about the account under which the process is executing.
	User *ProcessUser `json:"user,omitempty"`
}

// ProcessReference - Reference to a process.
type ProcessReference struct {
	// REQUIRED; Resource URI.
	ID *string `json:"id,omitempty"`

	// REQUIRED; Specifies the sub-class of the reference.
	Kind *ResourceReferenceKind `json:"kind,omitempty"`

	// Resource properties.
	Properties *ProcessReferenceProperties `json:"properties,omitempty"`

	// READ-ONLY; Resource name.
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; Resource type qualifier.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// ProcessReferenceProperties - Resource properties.
type ProcessReferenceProperties struct {
	// READ-ONLY; Machine hosting the process.
	Machine *MachineReference `json:"machine,omitempty" azure:"ro"`
}

// ProcessUser - Describes the user under which a process is running.
type ProcessUser struct {
	// Domain name for the user.
	UserDomain *string `json:"userDomain,omitempty"`

	// User name under which the process is running.
	UserName *string `json:"userName,omitempty"`
}

// ProcessesClientGetLivenessOptions contains the optional parameters for the ProcessesClient.GetLiveness method.
type ProcessesClientGetLivenessOptions struct {
	// UTC date and time specifying the end time of an interval. When not specified the service uses DateTime.UtcNow
	EndTime *time.Time
	// UTC date and time specifying the start time of an interval. When not specified the service uses DateTime.UtcNow - 10m
	StartTime *time.Time
}

// ProcessesClientGetOptions contains the optional parameters for the ProcessesClient.Get method.
type ProcessesClientGetOptions struct {
	// UTC date and time specifying a time instance relative to which to evaluate a resource. When not specified, the service
// uses DateTime.UtcNow.
	Timestamp *time.Time
}

// ProcessesClientListAcceptingPortsOptions contains the optional parameters for the ProcessesClient.ListAcceptingPorts method.
type ProcessesClientListAcceptingPortsOptions struct {
	// UTC date and time specifying the end time of an interval. When not specified the service uses DateTime.UtcNow
	EndTime *time.Time
	// UTC date and time specifying the start time of an interval. When not specified the service uses DateTime.UtcNow - 10m
	StartTime *time.Time
}

// ProcessesClientListConnectionsOptions contains the optional parameters for the ProcessesClient.ListConnections method.
type ProcessesClientListConnectionsOptions struct {
	// UTC date and time specifying the end time of an interval. When not specified the service uses DateTime.UtcNow
	EndTime *time.Time
	// UTC date and time specifying the start time of an interval. When not specified the service uses DateTime.UtcNow - 10m
	StartTime *time.Time
}

// RelationshipClassification provides polymorphic access to related types.
// Call the interface's GetRelationship() method to access the common type.
// Use a type switch to determine the concrete type.  The possible types are:
// - *Acceptor, *Connection, *Relationship
type RelationshipClassification interface {
	// GetRelationship returns the Relationship content of the underlying type.
	GetRelationship() *Relationship
}

// Relationship - A typed relationship between two entities.
type Relationship struct {
	// REQUIRED; Additional resource type qualifier.
	Kind *RelationshipKind `json:"kind,omitempty"`

	// READ-ONLY; Resource identifier.
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; Resource name.
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; Resource type.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// RelationshipProperties - Relationship properties.
type RelationshipProperties struct {
	// REQUIRED; Destination resource of the relationship.
	Destination ResourceReferenceClassification `json:"destination,omitempty"`

	// REQUIRED; Source resource of the relationship.
	Source ResourceReferenceClassification `json:"source,omitempty"`

	// Relationship end time.
	EndTime *time.Time `json:"endTime,omitempty"`

	// Relationship start time.
	StartTime *time.Time `json:"startTime,omitempty"`
}

// Resource model definition.
type Resource struct {
	// READ-ONLY; Resource identifier.
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; Resource name.
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; Resource type.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// ResourceReferenceClassification provides polymorphic access to related types.
// Call the interface's GetResourceReference() method to access the common type.
// Use a type switch to determine the concrete type.  The possible types are:
// - *ClientGroupReference, *MachineReference, *MachineReferenceWithHints, *PortReference, *ProcessReference, *ResourceReference
type ResourceReferenceClassification interface {
	// GetResourceReference returns the ResourceReference content of the underlying type.
	GetResourceReference() *ResourceReference
}

// ResourceReference - Represents a reference to another resource.
type ResourceReference struct {
	// REQUIRED; Resource URI.
	ID *string `json:"id,omitempty"`

	// REQUIRED; Specifies the sub-class of the reference.
	Kind *ResourceReferenceKind `json:"kind,omitempty"`

	// READ-ONLY; Resource name.
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; Resource type qualifier.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// SingleMachineDependencyMapRequest - Specifies the computation of a single server dependency map. A single server dependency
// map includes all direct dependencies of a given machine.
type SingleMachineDependencyMapRequest struct {
	// REQUIRED; The type of map to create.
	Kind *MapRequestKind `json:"kind,omitempty"`

	// REQUIRED; URI of machine resource for which to generate the map.
	MachineID *string `json:"machineId,omitempty"`

	// Map interval end time.
	EndTime *time.Time `json:"endTime,omitempty"`

	// Map interval start time.
	StartTime *time.Time `json:"startTime,omitempty"`
}

// SummariesClientGetMachinesOptions contains the optional parameters for the SummariesClient.GetMachines method.
type SummariesClientGetMachinesOptions struct {
	// UTC date and time specifying the end time of an interval. When not specified the service uses DateTime.UtcNow
	EndTime *time.Time
	// UTC date and time specifying the start time of an interval. When not specified the service uses DateTime.UtcNow - 10m
	StartTime *time.Time
}

// Summary - Base for all resource summaries.
type Summary struct {
	// READ-ONLY; Resource identifier.
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; Resource name.
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; Resource type.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// SummaryProperties - Base for all summaries.
type SummaryProperties struct {
	// REQUIRED; Summary interval end time.
	EndTime *time.Time `json:"endTime,omitempty"`

	// REQUIRED; Summary interval start time.
	StartTime *time.Time `json:"startTime,omitempty"`
}

// Timezone - Describes a timezone.
type Timezone struct {
	// Timezone full name.
	FullName *string `json:"fullName,omitempty"`
}

// VirtualMachineConfiguration - Describes the virtualization-related configuration of a machine.
type VirtualMachineConfiguration struct {
	// The unique identifier of the host of this virtual machine as reported by the underlying virtualization system.
	NativeHostMachineID *string `json:"nativeHostMachineId,omitempty"`

	// The unique identifier of the virtual machine as reported by the underlying virtualization system.
	NativeMachineID *string `json:"nativeMachineId,omitempty"`

	// The Name of the virtual machine.
	VirtualMachineName *string `json:"virtualMachineName,omitempty"`

	// Specifies the virtualization technology used by the machine (hyperv, vmware, etc.)
	VirtualMachineType *VirtualMachineType `json:"virtualMachineType,omitempty"`
}

