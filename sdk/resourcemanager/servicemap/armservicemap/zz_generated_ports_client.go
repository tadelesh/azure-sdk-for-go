//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armservicemap

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
	"time"
)

// PortsClient contains the methods for the Ports group.
// Don't use this type directly, use NewPortsClient() instead.
type PortsClient struct {
	host string
	subscriptionID string
	pl runtime.Pipeline
}

// NewPortsClient creates a new instance of PortsClient with the specified values.
// subscriptionID - Azure subscription identifier.
// credential - used to authorize requests. Usually a credential from azidentity.
// options - pass nil to accept the default values.
func NewPortsClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) *PortsClient {
	if options == nil {
		options = &arm.ClientOptions{}
	}
	ep := options.Endpoint
	if len(ep) == 0 {
		ep = arm.AzurePublicCloud
	}
	client := &PortsClient{
		subscriptionID: subscriptionID,
		host: string(ep),
		pl: armruntime.NewPipeline(moduleName, moduleVersion, credential, runtime.PipelineOptions{}, options),
	}
	return client
}

// Get - Returns the specified port. The port must be live during the specified time interval. If the port is not live during
// the interval, status 404 (Not Found) is returned.
// If the operation fails it returns an *azcore.ResponseError type.
// resourceGroupName - Resource group name within the specified subscriptionId.
// workspaceName - OMS workspace containing the resources of interest.
// machineName - Machine resource name.
// portName - Port resource name.
// options - PortsClientGetOptions contains the optional parameters for the PortsClient.Get method.
func (client *PortsClient) Get(ctx context.Context, resourceGroupName string, workspaceName string, machineName string, portName string, options *PortsClientGetOptions) (PortsClientGetResponse, error) {
	req, err := client.getCreateRequest(ctx, resourceGroupName, workspaceName, machineName, portName, options)
	if err != nil {
		return PortsClientGetResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return PortsClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return PortsClientGetResponse{}, runtime.NewResponseError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *PortsClient) getCreateRequest(ctx context.Context, resourceGroupName string, workspaceName string, machineName string, portName string, options *PortsClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/features/serviceMap/machines/{machineName}/ports/{portName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if workspaceName == "" {
		return nil, errors.New("parameter workspaceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceName}", url.PathEscape(workspaceName))
	if machineName == "" {
		return nil, errors.New("parameter machineName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{machineName}", url.PathEscape(machineName))
	if portName == "" {
		return nil, errors.New("parameter portName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{portName}", url.PathEscape(portName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2015-11-01-preview")
	if options != nil && options.StartTime != nil {
		reqQP.Set("startTime", options.StartTime.Format(time.RFC3339Nano))
	}
	if options != nil && options.EndTime != nil {
		reqQP.Set("endTime", options.EndTime.Format(time.RFC3339Nano))
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *PortsClient) getHandleResponse(resp *http.Response) (PortsClientGetResponse, error) {
	result := PortsClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Port); err != nil {
		return PortsClientGetResponse{}, err
	}
	return result, nil
}

// GetLiveness - Obtains the liveness status of the port during the specified time interval.
// If the operation fails it returns an *azcore.ResponseError type.
// resourceGroupName - Resource group name within the specified subscriptionId.
// workspaceName - OMS workspace containing the resources of interest.
// machineName - Machine resource name.
// portName - Port resource name.
// options - PortsClientGetLivenessOptions contains the optional parameters for the PortsClient.GetLiveness method.
func (client *PortsClient) GetLiveness(ctx context.Context, resourceGroupName string, workspaceName string, machineName string, portName string, options *PortsClientGetLivenessOptions) (PortsClientGetLivenessResponse, error) {
	req, err := client.getLivenessCreateRequest(ctx, resourceGroupName, workspaceName, machineName, portName, options)
	if err != nil {
		return PortsClientGetLivenessResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return PortsClientGetLivenessResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return PortsClientGetLivenessResponse{}, runtime.NewResponseError(resp)
	}
	return client.getLivenessHandleResponse(resp)
}

// getLivenessCreateRequest creates the GetLiveness request.
func (client *PortsClient) getLivenessCreateRequest(ctx context.Context, resourceGroupName string, workspaceName string, machineName string, portName string, options *PortsClientGetLivenessOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/features/serviceMap/machines/{machineName}/ports/{portName}/liveness"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if workspaceName == "" {
		return nil, errors.New("parameter workspaceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceName}", url.PathEscape(workspaceName))
	if machineName == "" {
		return nil, errors.New("parameter machineName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{machineName}", url.PathEscape(machineName))
	if portName == "" {
		return nil, errors.New("parameter portName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{portName}", url.PathEscape(portName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2015-11-01-preview")
	if options != nil && options.StartTime != nil {
		reqQP.Set("startTime", options.StartTime.Format(time.RFC3339Nano))
	}
	if options != nil && options.EndTime != nil {
		reqQP.Set("endTime", options.EndTime.Format(time.RFC3339Nano))
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getLivenessHandleResponse handles the GetLiveness response.
func (client *PortsClient) getLivenessHandleResponse(resp *http.Response) (PortsClientGetLivenessResponse, error) {
	result := PortsClientGetLivenessResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Liveness); err != nil {
		return PortsClientGetLivenessResponse{}, err
	}
	return result, nil
}

// ListAcceptingProcesses - Returns a collection of processes accepting on the specified port
// If the operation fails it returns an *azcore.ResponseError type.
// resourceGroupName - Resource group name within the specified subscriptionId.
// workspaceName - OMS workspace containing the resources of interest.
// machineName - Machine resource name.
// portName - Port resource name.
// options - PortsClientListAcceptingProcessesOptions contains the optional parameters for the PortsClient.ListAcceptingProcesses
// method.
func (client *PortsClient) ListAcceptingProcesses(resourceGroupName string, workspaceName string, machineName string, portName string, options *PortsClientListAcceptingProcessesOptions) (*runtime.Pager[PortsClientListAcceptingProcessesResponse]) {
	return runtime.NewPager(runtime.PageProcessor[PortsClientListAcceptingProcessesResponse]{
		More: func(page PortsClientListAcceptingProcessesResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *PortsClientListAcceptingProcessesResponse) (PortsClientListAcceptingProcessesResponse, error) {
			var req *policy.Request
			var err error
			if page == nil {
				req, err = client.listAcceptingProcessesCreateRequest(ctx, resourceGroupName, workspaceName, machineName, portName, options)
			} else {
				req, err = runtime.NewRequest(ctx, http.MethodGet, *page.NextLink)
			}
			if err != nil {
				return PortsClientListAcceptingProcessesResponse{}, err
			}
			resp, err := client.pl.Do(req)
			if err != nil {
				return PortsClientListAcceptingProcessesResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return PortsClientListAcceptingProcessesResponse{}, runtime.NewResponseError(resp)
			}
			return client.listAcceptingProcessesHandleResponse(resp)
		},
	})
}

// listAcceptingProcessesCreateRequest creates the ListAcceptingProcesses request.
func (client *PortsClient) listAcceptingProcessesCreateRequest(ctx context.Context, resourceGroupName string, workspaceName string, machineName string, portName string, options *PortsClientListAcceptingProcessesOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/features/serviceMap/machines/{machineName}/ports/{portName}/acceptingProcesses"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if workspaceName == "" {
		return nil, errors.New("parameter workspaceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceName}", url.PathEscape(workspaceName))
	if machineName == "" {
		return nil, errors.New("parameter machineName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{machineName}", url.PathEscape(machineName))
	if portName == "" {
		return nil, errors.New("parameter portName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{portName}", url.PathEscape(portName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2015-11-01-preview")
	if options != nil && options.StartTime != nil {
		reqQP.Set("startTime", options.StartTime.Format(time.RFC3339Nano))
	}
	if options != nil && options.EndTime != nil {
		reqQP.Set("endTime", options.EndTime.Format(time.RFC3339Nano))
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listAcceptingProcessesHandleResponse handles the ListAcceptingProcesses response.
func (client *PortsClient) listAcceptingProcessesHandleResponse(resp *http.Response) (PortsClientListAcceptingProcessesResponse, error) {
	result := PortsClientListAcceptingProcessesResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ProcessCollection); err != nil {
		return PortsClientListAcceptingProcessesResponse{}, err
	}
	return result, nil
}

// ListConnections - Returns a collection of connections established via the specified port.
// If the operation fails it returns an *azcore.ResponseError type.
// resourceGroupName - Resource group name within the specified subscriptionId.
// workspaceName - OMS workspace containing the resources of interest.
// machineName - Machine resource name.
// portName - Port resource name.
// options - PortsClientListConnectionsOptions contains the optional parameters for the PortsClient.ListConnections method.
func (client *PortsClient) ListConnections(resourceGroupName string, workspaceName string, machineName string, portName string, options *PortsClientListConnectionsOptions) (*runtime.Pager[PortsClientListConnectionsResponse]) {
	return runtime.NewPager(runtime.PageProcessor[PortsClientListConnectionsResponse]{
		More: func(page PortsClientListConnectionsResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *PortsClientListConnectionsResponse) (PortsClientListConnectionsResponse, error) {
			var req *policy.Request
			var err error
			if page == nil {
				req, err = client.listConnectionsCreateRequest(ctx, resourceGroupName, workspaceName, machineName, portName, options)
			} else {
				req, err = runtime.NewRequest(ctx, http.MethodGet, *page.NextLink)
			}
			if err != nil {
				return PortsClientListConnectionsResponse{}, err
			}
			resp, err := client.pl.Do(req)
			if err != nil {
				return PortsClientListConnectionsResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return PortsClientListConnectionsResponse{}, runtime.NewResponseError(resp)
			}
			return client.listConnectionsHandleResponse(resp)
		},
	})
}

// listConnectionsCreateRequest creates the ListConnections request.
func (client *PortsClient) listConnectionsCreateRequest(ctx context.Context, resourceGroupName string, workspaceName string, machineName string, portName string, options *PortsClientListConnectionsOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/features/serviceMap/machines/{machineName}/ports/{portName}/connections"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if workspaceName == "" {
		return nil, errors.New("parameter workspaceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceName}", url.PathEscape(workspaceName))
	if machineName == "" {
		return nil, errors.New("parameter machineName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{machineName}", url.PathEscape(machineName))
	if portName == "" {
		return nil, errors.New("parameter portName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{portName}", url.PathEscape(portName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2015-11-01-preview")
	if options != nil && options.StartTime != nil {
		reqQP.Set("startTime", options.StartTime.Format(time.RFC3339Nano))
	}
	if options != nil && options.EndTime != nil {
		reqQP.Set("endTime", options.EndTime.Format(time.RFC3339Nano))
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listConnectionsHandleResponse handles the ListConnections response.
func (client *PortsClient) listConnectionsHandleResponse(resp *http.Response) (PortsClientListConnectionsResponse, error) {
	result := PortsClientListConnectionsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ConnectionCollection); err != nil {
		return PortsClientListConnectionsResponse{}, err
	}
	return result, nil
}

