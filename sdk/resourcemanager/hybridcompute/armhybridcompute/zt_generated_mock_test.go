//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armhybridcompute_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/hybridcompute/armhybridcompute"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestMachines_CreateOrUpdate(t *testing.T) {
	// From example specification/hybridcompute/resource-manager/Microsoft.HybridCompute/preview/2021-12-10-preview/examples/Machines_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or Update a Machine"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhybridcompute.NewMachinesClient("{subscriptionId}", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"myResourceGroup",
		"myMachine",
		armhybridcompute.Machine{
			Location: to.Ptr("eastus2euap"),
			Identity: &armhybridcompute.Identity{
				Type: to.Ptr("SystemAssigned"),
			},
			Properties: &armhybridcompute.MachineProperties{
				ClientPublicKey: to.Ptr("string"),
				LocationData: &armhybridcompute.LocationData{
					Name: to.Ptr("Redmond"),
				},
				ParentClusterResourceID:    to.Ptr("{AzureStackHCIResourceId}"),
				PrivateLinkScopeResourceID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.HybridCompute/privateLinkScopes/privateLinkScopeName"),
				VMID:                       to.Ptr("b7a098cc-b0b8-46e8-a205-62f301a62a8f"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hybridcompute/resource-manager/Microsoft.HybridCompute/preview/2021-12-10-preview/examples/Machines_CreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhybridcompute.Machine{
			Name:     to.Ptr("myMachine"),
			Type:     to.Ptr("Microsoft.HybridCompute/machines"),
			ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.HybridCompute/machines/myMachine"),
			Location: to.Ptr("eastus2euap"),
			Identity: &armhybridcompute.Identity{
				Type:        to.Ptr("SystemAssigned"),
				PrincipalID: to.Ptr("string"),
				TenantID:    to.Ptr("string"),
			},
			Properties: &armhybridcompute.MachineProperties{
				ClientPublicKey: to.Ptr("string"),
				DetectedProperties: map[string]*string{
					"cloudprovider": to.Ptr("N/A"),
					"manufacturer":  to.Ptr("Microsoft Corporation"),
					"model":         to.Ptr("Virtual Machine"),
				},
				LocationData: &armhybridcompute.LocationData{
					Name:            to.Ptr("Redmond"),
					City:            to.Ptr("redmond"),
					CountryOrRegion: to.Ptr("usa"),
				},
				MssqlDiscovered: to.Ptr("false"),
				OSProfile: &armhybridcompute.OSProfile{
					LinuxConfiguration: &armhybridcompute.OSProfileLinuxConfiguration{
						PatchSettings: &armhybridcompute.PatchSettings{},
					},
					WindowsConfiguration: &armhybridcompute.OSProfileWindowsConfiguration{
						PatchSettings: &armhybridcompute.PatchSettings{},
					},
				},
				ParentClusterResourceID:    to.Ptr("{AzureStackHCIResourceId}"),
				PrivateLinkScopeResourceID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.HybridCompute/privateLinkScopes/privateLinkScopeName"),
				ProvisioningState:          to.Ptr("Succeeded"),
				VMID:                       to.Ptr("b7a098cc-b0b8-46e8-a205-62f301a62a8f"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Machine) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Machine)
			t.Fatalf("Mock response is not equal to example response for example specification/hybridcompute/resource-manager/Microsoft.HybridCompute/preview/2021-12-10-preview/examples/Machines_CreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestMachines_Update(t *testing.T) {
	// From example specification/hybridcompute/resource-manager/Microsoft.HybridCompute/preview/2021-12-10-preview/examples/Machines_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a Machine"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhybridcompute.NewMachinesClient("{subscription-id}", cred, &options)
	res, err := client.Update(ctx,
		"myResourceGroup",
		"myMachine",
		armhybridcompute.MachineUpdate{
			Identity: &armhybridcompute.Identity{
				Type: to.Ptr("SystemAssigned"),
			},
			Properties: &armhybridcompute.MachineUpdateProperties{
				LocationData: &armhybridcompute.LocationData{
					Name: to.Ptr("Redmond"),
				},
				OSProfile: &armhybridcompute.OSProfile{
					LinuxConfiguration: &armhybridcompute.OSProfileLinuxConfiguration{
						PatchSettings: &armhybridcompute.PatchSettings{
							AssessmentMode: to.Ptr("ImageDefault"),
							PatchMode:      to.Ptr("Manual"),
						},
					},
					WindowsConfiguration: &armhybridcompute.OSProfileWindowsConfiguration{
						PatchSettings: &armhybridcompute.PatchSettings{
							AssessmentMode: to.Ptr("ImageDefault"),
							PatchMode:      to.Ptr("Manual"),
						},
					},
				},
				ParentClusterResourceID:    to.Ptr("{AzureStackHCIResourceId}"),
				PrivateLinkScopeResourceID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.HybridCompute/privateLinkScopes/privateLinkScopeName"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hybridcompute/resource-manager/Microsoft.HybridCompute/preview/2021-12-10-preview/examples/Machines_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhybridcompute.Machine{
			Name:     to.Ptr("myMachine"),
			Type:     to.Ptr("Microsoft.HybridCompute/machines"),
			ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.HybridCompute/machines/myMachine"),
			Location: to.Ptr("eastus2euap"),
			Identity: &armhybridcompute.Identity{
				Type:        to.Ptr("SystemAssigned"),
				PrincipalID: to.Ptr("string"),
				TenantID:    to.Ptr("string"),
			},
			Properties: &armhybridcompute.MachineProperties{
				ClientPublicKey: to.Ptr("string"),
				LocationData: &armhybridcompute.LocationData{
					Name: to.Ptr("Redmond"),
				},
				OSProfile: &armhybridcompute.OSProfile{
					LinuxConfiguration: &armhybridcompute.OSProfileLinuxConfiguration{
						PatchSettings: &armhybridcompute.PatchSettings{
							AssessmentMode: to.Ptr("ImageDefault"),
							PatchMode:      to.Ptr("Manual"),
						},
					},
					WindowsConfiguration: &armhybridcompute.OSProfileWindowsConfiguration{
						PatchSettings: &armhybridcompute.PatchSettings{
							AssessmentMode: to.Ptr("ImageDefault"),
							PatchMode:      to.Ptr("Manual"),
						},
					},
				},
				ParentClusterResourceID:    to.Ptr("{AzureStackHCIResourceId}"),
				PrivateLinkScopeResourceID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.HybridCompute/privateLinkScopes/privateLinkScopeName"),
				ProvisioningState:          to.Ptr("Succeeded"),
				VMID:                       to.Ptr("b7a098cc-b0b8-46e8-a205-62f301a62a8f"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Machine) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Machine)
			t.Fatalf("Mock response is not equal to example response for example specification/hybridcompute/resource-manager/Microsoft.HybridCompute/preview/2021-12-10-preview/examples/Machines_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestMachines_Delete(t *testing.T) {
	// From example specification/hybridcompute/resource-manager/Microsoft.HybridCompute/preview/2021-12-10-preview/examples/Machines_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a Machine"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhybridcompute.NewMachinesClient("{subscriptionId}", cred, &options)
	_, err := client.Delete(ctx,
		"myResourceGroup",
		"myMachine",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hybridcompute/resource-manager/Microsoft.HybridCompute/preview/2021-12-10-preview/examples/Machines_Delete.json: %v", err)
	}
}

func TestMachines_Get(t *testing.T) {
	// From example specification/hybridcompute/resource-manager/Microsoft.HybridCompute/preview/2021-12-10-preview/examples/Machines_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Machine"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhybridcompute.NewMachinesClient("{subscriptionId}", cred, &options)
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myMachine",
		&armhybridcompute.MachinesClientGetOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hybridcompute/resource-manager/Microsoft.HybridCompute/preview/2021-12-10-preview/examples/Machines_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhybridcompute.Machine{
			Name:     to.Ptr("myMachine"),
			Type:     to.Ptr("Microsoft.HybridCompute/machines"),
			ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.HybridCompute/machines/myMachine"),
			Location: to.Ptr("eastus2euap"),
			Identity: &armhybridcompute.Identity{
				Type:        to.Ptr("SystemAssigned"),
				PrincipalID: to.Ptr("string"),
				TenantID:    to.Ptr("string"),
			},
			Properties: &armhybridcompute.MachineProperties{
				AgentConfiguration: &armhybridcompute.AgentConfiguration{
					IncomingConnectionsPorts: []*string{
						to.Ptr("22"),
						to.Ptr("23")},
					ProxyURL: to.Ptr("https://test.test"),
				},
				ClientPublicKey: to.Ptr("string"),
				DetectedProperties: map[string]*string{
					"cloudprovider": to.Ptr("N/A"),
					"manufacturer":  to.Ptr("Microsoft Corporation"),
					"model":         to.Ptr("Virtual Machine"),
				},
				LocationData: &armhybridcompute.LocationData{
					Name:            to.Ptr("Redmond"),
					City:            to.Ptr("redmond"),
					CountryOrRegion: to.Ptr("usa"),
				},
				MssqlDiscovered: to.Ptr("false"),
				OSProfile: &armhybridcompute.OSProfile{
					LinuxConfiguration: &armhybridcompute.OSProfileLinuxConfiguration{
						PatchSettings: &armhybridcompute.PatchSettings{},
					},
					WindowsConfiguration: &armhybridcompute.OSProfileWindowsConfiguration{
						PatchSettings: &armhybridcompute.PatchSettings{},
					},
				},
				ParentClusterResourceID:    to.Ptr("{AzureStackHCIResourceId}"),
				PrivateLinkScopeResourceID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.HybridCompute/privateLinkScopes/privateLinkScopeName"),
				ProvisioningState:          to.Ptr("Succeeded"),
				VMID:                       to.Ptr("b7a098cc-b0b8-46e8-a205-62f301a62a8f"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Machine) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Machine)
			t.Fatalf("Mock response is not equal to example response for example specification/hybridcompute/resource-manager/Microsoft.HybridCompute/preview/2021-12-10-preview/examples/Machines_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestMachines_ListByResourceGroup(t *testing.T) {
	// From example specification/hybridcompute/resource-manager/Microsoft.HybridCompute/preview/2021-12-10-preview/examples/Machines_ListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Machines by resource group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhybridcompute.NewMachinesClient("{subscription-id}", cred, &options)
	pager := client.ListByResourceGroup("myResourceGroup",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/hybridcompute/resource-manager/Microsoft.HybridCompute/preview/2021-12-10-preview/examples/Machines_ListByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armhybridcompute.MachineListResult{
			Value: []*armhybridcompute.Machine{
				{
					Name:     to.Ptr("myMachine"),
					Type:     to.Ptr("Microsoft.HybridCompute/machines"),
					ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.HybridCompute/machines/myMachine"),
					Location: to.Ptr("eastus2euap"),
					Identity: &armhybridcompute.Identity{
						Type:        to.Ptr("SystemAssigned"),
						PrincipalID: to.Ptr("f7a068cc-b0b8-46e8-a203-22f301a62a8f"),
						TenantID:    to.Ptr("c4098cc-91b8-46c2-a205-d82ab1a62a8f"),
					},
					Properties: &armhybridcompute.MachineProperties{
						AgentConfiguration: &armhybridcompute.AgentConfiguration{
							IncomingConnectionsPorts: []*string{
								to.Ptr("22"),
								to.Ptr("23")},
							ProxyURL: to.Ptr("https://test.test"),
						},
						ClientPublicKey: to.Ptr("string"),
						DetectedProperties: map[string]*string{
							"cloudprovider": to.Ptr("N/A"),
							"manufacturer":  to.Ptr("Microsoft Corporation"),
							"model":         to.Ptr("Virtual Machine"),
						},
						LocationData: &armhybridcompute.LocationData{
							Name: to.Ptr("Redmond"),
						},
						MssqlDiscovered: to.Ptr("false"),
						OSProfile: &armhybridcompute.OSProfile{
							LinuxConfiguration: &armhybridcompute.OSProfileLinuxConfiguration{
								PatchSettings: &armhybridcompute.PatchSettings{},
							},
							WindowsConfiguration: &armhybridcompute.OSProfileWindowsConfiguration{
								PatchSettings: &armhybridcompute.PatchSettings{},
							},
						},
						PrivateLinkScopeResourceID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.HybridCompute/privateLinkScopes/privateLinkScopeName"),
						ProvisioningState:          to.Ptr("Succeeded"),
						VMID:                       to.Ptr("b7a098cc-b0b8-46e8-a205-62f301a62a8f"),
					},
				},
				{
					Name:     to.Ptr("myMachine2"),
					Type:     to.Ptr("Microsoft.HybridCompute/machines"),
					ID:       to.Ptr("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.HybridCompute/machines/myMachine2"),
					Location: to.Ptr("westus2"),
					Identity: &armhybridcompute.Identity{
						Type:        to.Ptr("SystemAssigned"),
						PrincipalID: to.Ptr("e7a068cc-b0b8-46e8-a203-22f301a62a8f"),
						TenantID:    to.Ptr("c4098cc-91b8-46c2-a205-d82ab1a62a8f"),
					},
					Properties: &armhybridcompute.MachineProperties{
						AgentConfiguration: &armhybridcompute.AgentConfiguration{
							IncomingConnectionsPorts: []*string{
								to.Ptr("22"),
								to.Ptr("23")},
							ProxyURL: to.Ptr("https://test.test"),
						},
						ClientPublicKey: to.Ptr("string"),
						DetectedProperties: map[string]*string{
							"cloudprovider": to.Ptr("N/A"),
							"manufacturer":  to.Ptr("Microsoft Corporation"),
							"model":         to.Ptr("Surfacebook"),
						},
						LocationData: &armhybridcompute.LocationData{
							Name: to.Ptr("Redmond"),
						},
						MssqlDiscovered: to.Ptr("true"),
						OSProfile: &armhybridcompute.OSProfile{
							LinuxConfiguration: &armhybridcompute.OSProfileLinuxConfiguration{
								PatchSettings: &armhybridcompute.PatchSettings{},
							},
							WindowsConfiguration: &armhybridcompute.OSProfileWindowsConfiguration{
								PatchSettings: &armhybridcompute.PatchSettings{},
							},
						},
						ParentClusterResourceID:    to.Ptr("{AzureStackHCIResourceId}"),
						PrivateLinkScopeResourceID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.HybridCompute/privateLinkScopes/privateLinkScopeName"),
						ProvisioningState:          to.Ptr("Succeeded"),
						VMID:                       to.Ptr("a4a098cc-b0b8-46e8-a205-62f301a62a8f"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.MachineListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.MachineListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/hybridcompute/resource-manager/Microsoft.HybridCompute/preview/2021-12-10-preview/examples/Machines_ListByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestMachines_ListBySubscription(t *testing.T) {
	// From example specification/hybridcompute/resource-manager/Microsoft.HybridCompute/preview/2021-12-10-preview/examples/Machines_ListBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Machines by resource group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhybridcompute.NewMachinesClient("{subscription-id}", cred, &options)
	pager := client.ListBySubscription(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/hybridcompute/resource-manager/Microsoft.HybridCompute/preview/2021-12-10-preview/examples/Machines_ListBySubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armhybridcompute.MachineListResult{
			Value: []*armhybridcompute.Machine{
				{
					Name:     to.Ptr("myMachine"),
					Type:     to.Ptr("Microsoft.HybridCompute/machines"),
					ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.HybridCompute/machines/myMachine"),
					Location: to.Ptr("eastus2euap"),
					Identity: &armhybridcompute.Identity{
						Type:        to.Ptr("SystemAssigned"),
						PrincipalID: to.Ptr("string"),
						TenantID:    to.Ptr("string"),
					},
					Properties: &armhybridcompute.MachineProperties{
						AgentConfiguration: &armhybridcompute.AgentConfiguration{
							IncomingConnectionsPorts: []*string{
								to.Ptr("22"),
								to.Ptr("23")},
							ProxyURL: to.Ptr("https://test.test"),
						},
						ClientPublicKey: to.Ptr("string"),
						DetectedProperties: map[string]*string{
							"cloudprovider": to.Ptr("N/A"),
							"manufacturer":  to.Ptr("Microsoft Corporation"),
							"model":         to.Ptr("Virtual Machine"),
						},
						LocationData: &armhybridcompute.LocationData{
							Name: to.Ptr("Redmond"),
						},
						MssqlDiscovered: to.Ptr("false"),
						OSProfile: &armhybridcompute.OSProfile{
							LinuxConfiguration: &armhybridcompute.OSProfileLinuxConfiguration{
								PatchSettings: &armhybridcompute.PatchSettings{},
							},
							WindowsConfiguration: &armhybridcompute.OSProfileWindowsConfiguration{
								PatchSettings: &armhybridcompute.PatchSettings{},
							},
						},
						PrivateLinkScopeResourceID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.HybridCompute/privateLinkScopes/privateLinkScopeName"),
						ProvisioningState:          to.Ptr("Succeeded"),
						VMID:                       to.Ptr("b7a098cc-b0b8-46e8-a205-62f301a62a8f"),
					},
				},
				{
					Name:     to.Ptr("myMachine2"),
					Type:     to.Ptr("Microsoft.HybridCompute/machines"),
					ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup2/providers/Microsoft.HybridCompute/machines/myMachine2"),
					Location: to.Ptr("westus2"),
					Identity: &armhybridcompute.Identity{
						Type:        to.Ptr("SystemAssigned"),
						PrincipalID: to.Ptr("e7a068cc-b0b8-46e8-a203-22f301a62a8f"),
						TenantID:    to.Ptr("c4098cc-91b8-46c2-a205-d82ab1a62a8f"),
					},
					Properties: &armhybridcompute.MachineProperties{
						AgentConfiguration: &armhybridcompute.AgentConfiguration{
							IncomingConnectionsPorts: []*string{
								to.Ptr("22"),
								to.Ptr("23")},
							ProxyURL: to.Ptr("https://test.test"),
						},
						ClientPublicKey: to.Ptr("string"),
						DetectedProperties: map[string]*string{
							"cloudprovider": to.Ptr("N/A"),
							"manufacturer":  to.Ptr("Microsoft Corporation"),
							"model":         to.Ptr("Surfacebook"),
						},
						LocationData: &armhybridcompute.LocationData{
							Name: to.Ptr("Redmond"),
						},
						MssqlDiscovered: to.Ptr("true"),
						OSProfile: &armhybridcompute.OSProfile{
							LinuxConfiguration: &armhybridcompute.OSProfileLinuxConfiguration{
								PatchSettings: &armhybridcompute.PatchSettings{},
							},
							WindowsConfiguration: &armhybridcompute.OSProfileWindowsConfiguration{
								PatchSettings: &armhybridcompute.PatchSettings{},
							},
						},
						ParentClusterResourceID: to.Ptr("{AzureStackHCIResourceId}"),
						ProvisioningState:       to.Ptr("Succeeded"),
						VMID:                    to.Ptr("a4a098cc-b0b8-46e8-a205-62f301a62a8f"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.MachineListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.MachineListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/hybridcompute/resource-manager/Microsoft.HybridCompute/preview/2021-12-10-preview/examples/Machines_ListBySubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestMachineExtensions_CreateOrUpdate(t *testing.T) {
	// From example specification/hybridcompute/resource-manager/Microsoft.HybridCompute/preview/2021-12-10-preview/examples/PUTExtension.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or Update a Machine Extension"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhybridcompute.NewMachineExtensionsClient("{subscriptionId}", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myMachine",
		"CustomScriptExtension",
		armhybridcompute.MachineExtension{
			Location: to.Ptr("eastus2euap"),
			Properties: &armhybridcompute.MachineExtensionProperties{
				Type:      to.Ptr("CustomScriptExtension"),
				Publisher: to.Ptr("Microsoft.Compute"),
				Settings: map[string]interface{}{
					"commandToExecute": "powershell.exe -c \"Get-Process | Where-Object { $_.CPU -gt 10000 }\"",
				},
				TypeHandlerVersion: to.Ptr("1.10"),
			},
		},
		&armhybridcompute.MachineExtensionsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hybridcompute/resource-manager/Microsoft.HybridCompute/preview/2021-12-10-preview/examples/PUTExtension.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/hybridcompute/resource-manager/Microsoft.HybridCompute/preview/2021-12-10-preview/examples/PUTExtension.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhybridcompute.MachineExtension{
			Name:     to.Ptr("CustomScriptExtension"),
			Type:     to.Ptr("Microsoft.HybridCompute/machines/extensions"),
			ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.HybridCompute/Machines/myMachine/Extensions/CustomScriptExtension"),
			Location: to.Ptr("eastus2euap"),
			Properties: &armhybridcompute.MachineExtensionProperties{
				Type:                    to.Ptr("string"),
				AutoUpgradeMinorVersion: to.Ptr(false),
				InstanceView: &armhybridcompute.MachineExtensionInstanceView{
					Name: to.Ptr("CustomScriptExtension"),
					Type: to.Ptr("CustomScriptExtension"),
					Status: &armhybridcompute.MachineExtensionInstanceViewStatus{
						Code:    to.Ptr("success"),
						Level:   to.Ptr(armhybridcompute.StatusLevelTypes("Information")),
						Message: to.Ptr("Finished executing command, StdOut: , StdErr:"),
						Time:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-08-08T20:42:10.999Z"); return t }()),
					},
					TypeHandlerVersion: to.Ptr("1.10.3"),
				},
				ProtectedSettings:  map[string]interface{}{},
				ProvisioningState:  to.Ptr("Succeeded"),
				Publisher:          to.Ptr("Microsoft.Compute"),
				Settings:           "@{commandToExecute=powershell.exe -c \"Get-Process | Where-Object { $_.CPU -gt 10000 }\"}",
				TypeHandlerVersion: to.Ptr("1.10.3"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.MachineExtension) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.MachineExtension)
			t.Fatalf("Mock response is not equal to example response for example specification/hybridcompute/resource-manager/Microsoft.HybridCompute/preview/2021-12-10-preview/examples/PUTExtension.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestMachineExtensions_Update(t *testing.T) {
	// From example specification/hybridcompute/resource-manager/Microsoft.HybridCompute/preview/2021-12-10-preview/examples/UpdateExtension.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or Update a Machine Extension"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhybridcompute.NewMachineExtensionsClient("{subscriptionId}", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"myResourceGroup",
		"myMachine",
		"CustomScriptExtension",
		armhybridcompute.MachineExtensionUpdate{
			Properties: &armhybridcompute.MachineExtensionUpdateProperties{
				Type:      to.Ptr("CustomScriptExtension"),
				Publisher: to.Ptr("Microsoft.Compute"),
				Settings: map[string]interface{}{
					"commandToExecute": "powershell.exe -c \"Get-Process | Where-Object { $_.CPU -lt 100 }\"",
				},
				TypeHandlerVersion: to.Ptr("1.10"),
			},
		},
		&armhybridcompute.MachineExtensionsClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hybridcompute/resource-manager/Microsoft.HybridCompute/preview/2021-12-10-preview/examples/UpdateExtension.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/hybridcompute/resource-manager/Microsoft.HybridCompute/preview/2021-12-10-preview/examples/UpdateExtension.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhybridcompute.MachineExtension{
			Name:     to.Ptr("CustomScriptExtension"),
			Type:     to.Ptr("Microsoft.HybridCompute/machines/extensions"),
			ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.HybridCompute/Machines/myMachine/Extensions/CustomScriptExtension"),
			Location: to.Ptr("eastus2euap"),
			Properties: &armhybridcompute.MachineExtensionProperties{
				Type:                    to.Ptr("string"),
				AutoUpgradeMinorVersion: to.Ptr(false),
				InstanceView: &armhybridcompute.MachineExtensionInstanceView{
					Name: to.Ptr("CustomScriptExtension"),
					Type: to.Ptr("CustomScriptExtension"),
					Status: &armhybridcompute.MachineExtensionInstanceViewStatus{
						Code:    to.Ptr("success"),
						Level:   to.Ptr(armhybridcompute.StatusLevelTypes("Information")),
						Message: to.Ptr("Finished executing command, StdOut: , StdErr:"),
						Time:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-08T20:42:10.999Z"); return t }()),
					},
					TypeHandlerVersion: to.Ptr("1.10.3"),
				},
				ProtectedSettings:  map[string]interface{}{},
				ProvisioningState:  to.Ptr("Succeeded"),
				Publisher:          to.Ptr("Microsoft.Compute"),
				Settings:           "@{commandToExecute=powershell.exe -c \"Get-Process | Where-Object { $_.CPU -lt 100 }\"}",
				TypeHandlerVersion: to.Ptr("1.10.3"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.MachineExtension) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.MachineExtension)
			t.Fatalf("Mock response is not equal to example response for example specification/hybridcompute/resource-manager/Microsoft.HybridCompute/preview/2021-12-10-preview/examples/UpdateExtension.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestMachineExtensions_Delete(t *testing.T) {
	// From example specification/hybridcompute/resource-manager/Microsoft.HybridCompute/preview/2021-12-10-preview/examples/DELETEExtension.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a Machine Extension"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhybridcompute.NewMachineExtensionsClient("{subscriptionId}", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"myMachine",
		"MMA",
		&armhybridcompute.MachineExtensionsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hybridcompute/resource-manager/Microsoft.HybridCompute/preview/2021-12-10-preview/examples/DELETEExtension.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/hybridcompute/resource-manager/Microsoft.HybridCompute/preview/2021-12-10-preview/examples/DELETEExtension.json: %v", err)
	}
}

func TestMachineExtensions_Get(t *testing.T) {
	// From example specification/hybridcompute/resource-manager/Microsoft.HybridCompute/preview/2021-12-10-preview/examples/GETExtension.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GET Machine Extension"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhybridcompute.NewMachineExtensionsClient("{subscriptionId}", cred, &options)
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myMachine",
		"CustomScriptExtension",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hybridcompute/resource-manager/Microsoft.HybridCompute/preview/2021-12-10-preview/examples/GETExtension.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhybridcompute.MachineExtension{
			Name:     to.Ptr("CustomScriptExtension"),
			Type:     to.Ptr("Microsoft.HybridCompute/machines/extensions"),
			ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.HybridCompute/Machines/myMachine/Extensions/CustomScriptExtension"),
			Location: to.Ptr("eastus2euap"),
			Properties: &armhybridcompute.MachineExtensionProperties{
				Type:                    to.Ptr("string"),
				AutoUpgradeMinorVersion: to.Ptr(false),
				InstanceView: &armhybridcompute.MachineExtensionInstanceView{
					Name: to.Ptr("CustomScriptExtension"),
					Type: to.Ptr("CustomScriptExtension"),
					Status: &armhybridcompute.MachineExtensionInstanceViewStatus{
						Code:          to.Ptr("success"),
						DisplayStatus: to.Ptr("Provisioning succeeded"),
						Level:         to.Ptr(armhybridcompute.StatusLevelTypes("Information")),
						Message:       to.Ptr("Finished executing command, StdOut: , StdErr:"),
						Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-08-08T20:42:10.999Z"); return t }()),
					},
					TypeHandlerVersion: to.Ptr("1.10.3"),
				},
				ProtectedSettings:  map[string]interface{}{},
				ProvisioningState:  to.Ptr("Succeeded"),
				Publisher:          to.Ptr("Microsoft.Compute"),
				Settings:           "@{commandToExecute=powershell.exe -c \"Get-Process | Where-Object { $_.CPU -gt 10000 }\"}",
				TypeHandlerVersion: to.Ptr("1.10.3"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.MachineExtension) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.MachineExtension)
			t.Fatalf("Mock response is not equal to example response for example specification/hybridcompute/resource-manager/Microsoft.HybridCompute/preview/2021-12-10-preview/examples/GETExtension.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestMachineExtensions_List(t *testing.T) {
	// From example specification/hybridcompute/resource-manager/Microsoft.HybridCompute/preview/2021-12-10-preview/examples/LISTExtension.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GET all Machine Extensions"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhybridcompute.NewMachineExtensionsClient("{subscriptionId}", cred, &options)
	pager := client.List("myResourceGroup",
		"myMachine",
		&armhybridcompute.MachineExtensionsClientListOptions{Expand: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/hybridcompute/resource-manager/Microsoft.HybridCompute/preview/2021-12-10-preview/examples/LISTExtension.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armhybridcompute.MachineExtensionsListResult{
			Value: []*armhybridcompute.MachineExtension{
				{
					Name:     to.Ptr("CustomScriptExtension"),
					Type:     to.Ptr("Microsoft.HybridCompute/machines/extensions"),
					ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.HybridCompute/Machines/myMachine/Extensions/CustomScriptExtension"),
					Location: to.Ptr("eastus2euap"),
					Properties: &armhybridcompute.MachineExtensionProperties{
						Type:                    to.Ptr("CustomScriptExtension"),
						AutoUpgradeMinorVersion: to.Ptr(false),
						InstanceView: &armhybridcompute.MachineExtensionInstanceView{
							Name: to.Ptr("CustomScriptExtension"),
							Type: to.Ptr("CustomScriptExtension"),
							Status: &armhybridcompute.MachineExtensionInstanceViewStatus{
								Code:          to.Ptr("success"),
								DisplayStatus: to.Ptr("Provisioning succeeded"),
								Level:         to.Ptr(armhybridcompute.StatusLevelTypes("Information")),
								Message:       to.Ptr("formattedMessage: Finished executing command, StdOut: , StdErr: "),
								Time:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-08-13T17:18:57.405Z"); return t }()),
							},
							TypeHandlerVersion: to.Ptr("1.10.3"),
						},
						ProvisioningState: to.Ptr("Succeeded"),
						Publisher:         to.Ptr("Microsoft.Compute"),
						Settings: map[string]interface{}{
							"commandToExecute": "powershell.exe -c \"Get-Process | Where-Object { $_.CPU -gt 10000 }\"",
						},
						TypeHandlerVersion: to.Ptr("1.10.3"),
					},
				},
				{
					Name:     to.Ptr("winosupdateextension"),
					Type:     to.Ptr("Microsoft.HybridCompute/machines/extensions"),
					ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.HybridCompute/Machines/myMachine/Extensions/winosupdateextension"),
					Location: to.Ptr("eastus2euap"),
					Properties: &armhybridcompute.MachineExtensionProperties{
						Type:                    to.Ptr("windowsosupdateextension"),
						AutoUpgradeMinorVersion: to.Ptr(false),
						InstanceView: &armhybridcompute.MachineExtensionInstanceView{
							Name:               to.Ptr("winosupdateextension"),
							Type:               to.Ptr("windowsosupdateextension"),
							Status:             &armhybridcompute.MachineExtensionInstanceViewStatus{},
							TypeHandlerVersion: to.Ptr("1.0.0.0"),
						},
						ProvisioningState:  to.Ptr("Succeeded"),
						Publisher:          to.Ptr("microsoft.softwareupdatemanagement.test"),
						Settings:           map[string]interface{}{},
						TypeHandlerVersion: to.Ptr("1.0.0.0"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.MachineExtensionsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.MachineExtensionsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/hybridcompute/resource-manager/Microsoft.HybridCompute/preview/2021-12-10-preview/examples/LISTExtension.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestHybridComputeManagementClient_UpgradeExtensions(t *testing.T) {
	// From example specification/hybridcompute/resource-manager/Microsoft.HybridCompute/preview/2021-12-10-preview/examples/Extensions_Upgrade.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Upgrade Machine Extensions"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhybridcompute.NewManagementClient("{subscriptionId}", cred, &options)
	poller, err := client.BeginUpgradeExtensions(ctx,
		"myResourceGroup",
		"myMachine",
		armhybridcompute.MachineExtensionUpgrade{
			ExtensionTargets: map[string]*armhybridcompute.ExtensionTargetProperties{
				"Microsoft.Azure.Monitoring": {
					TargetVersion: to.Ptr("2.0"),
				},
				"Microsoft.Compute.CustomScriptExtension": {
					TargetVersion: to.Ptr("1.10"),
				},
			},
		},
		&armhybridcompute.ManagementClientBeginUpgradeExtensionsOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hybridcompute/resource-manager/Microsoft.HybridCompute/preview/2021-12-10-preview/examples/Extensions_Upgrade.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/hybridcompute/resource-manager/Microsoft.HybridCompute/preview/2021-12-10-preview/examples/Extensions_Upgrade.json: %v", err)
	}
}

func TestOperations_List(t *testing.T) {
	// From example specification/hybridcompute/resource-manager/Microsoft.HybridCompute/preview/2021-12-10-preview/examples/Operations_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Hybrid Compute Provider Operations"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhybridcompute.NewOperationsClient(cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/hybridcompute/resource-manager/Microsoft.HybridCompute/preview/2021-12-10-preview/examples/Operations_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armhybridcompute.OperationListResult{
			Value: []*armhybridcompute.OperationValue{
				{
					Name: to.Ptr("Microsoft.HybridCompute/operations/read"),
					Display: &armhybridcompute.OperationValueDisplay{
						Description: to.Ptr("Read all Operations for Azure Arc for Servers"),
						Operation:   to.Ptr("Read all Operations"),
						Provider:    to.Ptr("Microsoft HybridCompute"),
						Resource:    to.Ptr("Microsoft.HybridCompute Resource Provider"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.HybridCompute/register/action"),
					Display: &armhybridcompute.OperationValueDisplay{
						Description: to.Ptr("Registers the subscription for the Microsoft.HybridCompute Resource Provider"),
						Operation:   to.Ptr("Register Subscription for Azure Arc for Servers"),
						Provider:    to.Ptr("Microsoft HybridCompute"),
						Resource:    to.Ptr("Microsoft.HybridCompute Resource Provider"),
					},
					Origin: to.Ptr("user,system"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OperationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OperationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/hybridcompute/resource-manager/Microsoft.HybridCompute/preview/2021-12-10-preview/examples/Operations_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateLinkScopes_List(t *testing.T) {
	// From example specification/hybridcompute/resource-manager/Microsoft.HybridCompute/preview/2021-12-10-preview/examples/PrivateLinkScopesList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateLinkScopesList.json"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhybridcompute.NewPrivateLinkScopesClient("86dc51d3-92ed-4d7e-947a-775ea79b4919", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/hybridcompute/resource-manager/Microsoft.HybridCompute/preview/2021-12-10-preview/examples/PrivateLinkScopesList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armhybridcompute.PrivateLinkScopeListResult{
			Value: []*armhybridcompute.PrivateLinkScope{
				{
					Name:     to.Ptr("my-privatelinkscope"),
					Type:     to.Ptr("Microsoft.HybridCompute/privateLinkScopes"),
					ID:       to.Ptr("/subscriptions/86dc51d3-92ed-4d7e-947a-775ea79b4919/resourceGroups/my-resource-group/providers/microsoft.hybridcompute/privateLinkScopes/my-privatelinkscope"),
					Location: to.Ptr("westus"),
					Tags:     map[string]*string{},
					Properties: &armhybridcompute.PrivateLinkScopeProperties{
						PrivateLinkScopeID:  to.Ptr("e5dc51d3-92ed-4d7e-947a-775ea79b4919"),
						ProvisioningState:   to.Ptr("Succeeded"),
						PublicNetworkAccess: to.Ptr(armhybridcompute.PublicNetworkAccessTypeDisabled),
					},
				},
				{
					Name:     to.Ptr("my-other-privatelinkscope"),
					Type:     to.Ptr("Microsoft.HybridCompute/privateLinkScopes"),
					ID:       to.Ptr("/subscriptions/86dc51d3-92ed-4d7e-947a-775ea79b4919/resourceGroups/my-resource-group/providers/microsoft.hybridcompute/privateLinkScopes/my-other-privatelinkscope"),
					Location: to.Ptr("westus"),
					Tags:     map[string]*string{},
					Properties: &armhybridcompute.PrivateLinkScopeProperties{
						PrivateEndpointConnections: []*armhybridcompute.PrivateEndpointConnectionDataModel{
							{
								Name: to.Ptr("private-endpoint-connection-name"),
								Type: to.Ptr("Microsoft.HybridCompute/privateLinkScopes/privateEndpointConnections"),
								ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/myResourceGroup/providers/Microsoft.HybridCompute/privateLinkScopes/myPrivateLinkScope/privateEndpointConnections/private-endpoint-connection-name"),
								Properties: &armhybridcompute.PrivateEndpointConnectionProperties{
									PrivateEndpoint: &armhybridcompute.PrivateEndpointProperty{
										ID: to.Ptr("/subscriptions/55555555-6666-7777-8888-999999999999/resourceGroups/Default-Network/providers/Microsoft.Network/privateEndpoints/private-endpoint-name"),
									},
									PrivateLinkServiceConnectionState: &armhybridcompute.PrivateLinkServiceConnectionStateProperty{
										Description:     to.Ptr("Auto-approved"),
										ActionsRequired: to.Ptr("None"),
										Status:          to.Ptr("Approved"),
									},
									ProvisioningState: to.Ptr("Succeeded"),
								},
							}},
						PrivateLinkScopeID:  to.Ptr("f5dc51d3-92ed-4d7e-947a-775ea79b4919"),
						ProvisioningState:   to.Ptr("Succeeded"),
						PublicNetworkAccess: to.Ptr(armhybridcompute.PublicNetworkAccessTypeDisabled),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PrivateLinkScopeListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PrivateLinkScopeListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/hybridcompute/resource-manager/Microsoft.HybridCompute/preview/2021-12-10-preview/examples/PrivateLinkScopesList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateLinkScopes_ListByResourceGroup(t *testing.T) {
	// From example specification/hybridcompute/resource-manager/Microsoft.HybridCompute/preview/2021-12-10-preview/examples/PrivateLinkScopesListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateLinkScopeListByResourceGroup"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhybridcompute.NewPrivateLinkScopesClient("86dc51d3-92ed-4d7e-947a-775ea79b4919", cred, &options)
	pager := client.ListByResourceGroup("my-resource-group",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/hybridcompute/resource-manager/Microsoft.HybridCompute/preview/2021-12-10-preview/examples/PrivateLinkScopesListByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armhybridcompute.PrivateLinkScopeListResult{
			Value: []*armhybridcompute.PrivateLinkScope{
				{
					Name:     to.Ptr("my-privatelinkscope"),
					Type:     to.Ptr("Microsoft.HybridCompute/privateLinkScopes"),
					ID:       to.Ptr("/subscriptions/86dc51d3-92ed-4d7e-947a-775ea79b4919/resourceGroups/my-resource-group/providers/microsoft.hybridcompute/privateLinkScopes/my-privatelinkscope"),
					Location: to.Ptr("westus"),
					Tags:     map[string]*string{},
					Properties: &armhybridcompute.PrivateLinkScopeProperties{
						PrivateEndpointConnections: []*armhybridcompute.PrivateEndpointConnectionDataModel{
							{
								Name: to.Ptr("private-endpoint-connection-name"),
								Type: to.Ptr("Microsoft.HybridCompute/privateLinkScopes/privateEndpointConnections"),
								ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/myResourceGroup/providers/Microsoft.HybridCompute/privateLinkScopes/myPrivateLinkScope/privateEndpointConnections/private-endpoint-connection-name"),
								Properties: &armhybridcompute.PrivateEndpointConnectionProperties{
									PrivateEndpoint: &armhybridcompute.PrivateEndpointProperty{
										ID: to.Ptr("/subscriptions/55555555-6666-7777-8888-999999999999/resourceGroups/Default-Network/providers/Microsoft.Network/privateEndpoints/private-endpoint-name"),
									},
									PrivateLinkServiceConnectionState: &armhybridcompute.PrivateLinkServiceConnectionStateProperty{
										Description:     to.Ptr("Auto-approved"),
										ActionsRequired: to.Ptr("None"),
										Status:          to.Ptr("Approved"),
									},
									ProvisioningState: to.Ptr("Succeeded"),
								},
							}},
						PrivateLinkScopeID:  to.Ptr("f5dc51d3-92ed-4d7e-947a-775ea79b4919"),
						ProvisioningState:   to.Ptr("Succeeded"),
						PublicNetworkAccess: to.Ptr(armhybridcompute.PublicNetworkAccessTypeDisabled),
					},
				},
				{
					Name:     to.Ptr("my-other-privatelinkscope"),
					Type:     to.Ptr("Microsoft.HybridCompute/privateLinkScopes"),
					ID:       to.Ptr("/subscriptions/86dc51d3-92ed-4d7e-947a-775ea79b4919/resourceGroups/my-resource-group/providers/microsoft.hybridcompute/privateLinkScopes/my-other-privatelinkscope"),
					Location: to.Ptr("westus"),
					Tags:     map[string]*string{},
					Properties: &armhybridcompute.PrivateLinkScopeProperties{
						PrivateEndpointConnections: []*armhybridcompute.PrivateEndpointConnectionDataModel{
							{
								Name: to.Ptr("private-endpoint-connection-name"),
								Type: to.Ptr("Microsoft.HybridCompute/privateLinkScopes/privateEndpointConnections"),
								ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/myResourceGroup/providers/Microsoft.HybridCompute/privateLinkScopes/myPrivateLinkScope/privateEndpointConnections/private-endpoint-connection-name"),
								Properties: &armhybridcompute.PrivateEndpointConnectionProperties{
									PrivateEndpoint: &armhybridcompute.PrivateEndpointProperty{
										ID: to.Ptr("/subscriptions/55555555-6666-7777-8888-999999999999/resourceGroups/Default-Network/providers/Microsoft.Network/privateEndpoints/private-endpoint-name"),
									},
									PrivateLinkServiceConnectionState: &armhybridcompute.PrivateLinkServiceConnectionStateProperty{
										Description:     to.Ptr("Auto-approved"),
										ActionsRequired: to.Ptr("None"),
										Status:          to.Ptr("Approved"),
									},
									ProvisioningState: to.Ptr("Succeeded"),
								},
							}},
						PrivateLinkScopeID:  to.Ptr("a5dc51d3-92ed-4d7e-947a-775ea79b4919"),
						ProvisioningState:   to.Ptr("Succeeded"),
						PublicNetworkAccess: to.Ptr(armhybridcompute.PublicNetworkAccessTypeDisabled),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PrivateLinkScopeListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PrivateLinkScopeListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/hybridcompute/resource-manager/Microsoft.HybridCompute/preview/2021-12-10-preview/examples/PrivateLinkScopesListByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateLinkScopes_Delete(t *testing.T) {
	// From example specification/hybridcompute/resource-manager/Microsoft.HybridCompute/preview/2021-12-10-preview/examples/PrivateLinkScopesDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateLinkScopesDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhybridcompute.NewPrivateLinkScopesClient("86dc51d3-92ed-4d7e-947a-775ea79b4919", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"my-resource-group",
		"my-privatelinkscope",
		&armhybridcompute.PrivateLinkScopesClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hybridcompute/resource-manager/Microsoft.HybridCompute/preview/2021-12-10-preview/examples/PrivateLinkScopesDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/hybridcompute/resource-manager/Microsoft.HybridCompute/preview/2021-12-10-preview/examples/PrivateLinkScopesDelete.json: %v", err)
	}
}

func TestPrivateLinkScopes_Get(t *testing.T) {
	// From example specification/hybridcompute/resource-manager/Microsoft.HybridCompute/preview/2021-12-10-preview/examples/PrivateLinkScopesGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateLinkScopeGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhybridcompute.NewPrivateLinkScopesClient("86dc51d3-92ed-4d7e-947a-775ea79b4919", cred, &options)
	res, err := client.Get(ctx,
		"my-resource-group",
		"my-privatelinkscope",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hybridcompute/resource-manager/Microsoft.HybridCompute/preview/2021-12-10-preview/examples/PrivateLinkScopesGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhybridcompute.PrivateLinkScope{
			Name:     to.Ptr("my-privatelinkscope"),
			Type:     to.Ptr("Microsoft.HybridCompute/privateLinkScopes"),
			ID:       to.Ptr("/subscriptions/86dc51d3-92ed-4d7e-947a-775ea79b4919/resourceGroups/my-resource-group/providers/microsoft.hybridcompute/privateLinkScopes/my-privatelinkscope"),
			Location: to.Ptr("westus"),
			Tags:     map[string]*string{},
			Properties: &armhybridcompute.PrivateLinkScopeProperties{
				PrivateEndpointConnections: []*armhybridcompute.PrivateEndpointConnectionDataModel{
					{
						Name: to.Ptr("private-endpoint-connection-name"),
						Type: to.Ptr("Microsoft.HybridCompute/privateLinkScopes/privateEndpointConnections"),
						ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/myResourceGroup/providers/Microsoft.HybridCompute/privateLinkScopes/myPrivateLinkScope/privateEndpointConnections/private-endpoint-connection-name"),
						Properties: &armhybridcompute.PrivateEndpointConnectionProperties{
							PrivateEndpoint: &armhybridcompute.PrivateEndpointProperty{
								ID: to.Ptr("/subscriptions/55555555-6666-7777-8888-999999999999/resourceGroups/Default-Network/providers/Microsoft.Network/privateEndpoints/private-endpoint-name"),
							},
							PrivateLinkServiceConnectionState: &armhybridcompute.PrivateLinkServiceConnectionStateProperty{
								Description:     to.Ptr("Auto-approved"),
								ActionsRequired: to.Ptr("None"),
								Status:          to.Ptr("Approved"),
							},
							ProvisioningState: to.Ptr("Succeeded"),
						},
					}},
				PrivateLinkScopeID:  to.Ptr("f5dc51d3-92ed-4d7e-947a-775ea79b4919"),
				ProvisioningState:   to.Ptr("Succeeded"),
				PublicNetworkAccess: to.Ptr(armhybridcompute.PublicNetworkAccessTypeDisabled),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateLinkScope) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateLinkScope)
			t.Fatalf("Mock response is not equal to example response for example specification/hybridcompute/resource-manager/Microsoft.HybridCompute/preview/2021-12-10-preview/examples/PrivateLinkScopesGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateLinkScopes_CreateOrUpdate(t *testing.T) {
	// From example specification/hybridcompute/resource-manager/Microsoft.HybridCompute/preview/2021-12-10-preview/examples/PrivateLinkScopesCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateLinkScopeCreate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhybridcompute.NewPrivateLinkScopesClient("86dc51d3-92ed-4d7e-947a-775ea79b4919", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"my-resource-group",
		"my-privatelinkscope",
		armhybridcompute.PrivateLinkScope{
			Location: to.Ptr("westus"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hybridcompute/resource-manager/Microsoft.HybridCompute/preview/2021-12-10-preview/examples/PrivateLinkScopesCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhybridcompute.PrivateLinkScope{
			Name:     to.Ptr("my-privatelinkscope"),
			Type:     to.Ptr("Microsoft.HybridCompute/privateLinkScopes"),
			ID:       to.Ptr("/subscriptions/86dc51d3-92ed-4d7e-947a-775ea79b4919/resourceGroups/my-resource-group/providers/microsoft.hybridcompute/privateLinkScopes/my-privatelinkscope"),
			Location: to.Ptr("westus"),
			Tags:     map[string]*string{},
			Properties: &armhybridcompute.PrivateLinkScopeProperties{
				PrivateEndpointConnections: []*armhybridcompute.PrivateEndpointConnectionDataModel{
					{
						Name: to.Ptr("private-endpoint-connection-name"),
						Type: to.Ptr("Microsoft.HybridCompute/privateLinkScopes/privateEndpointConnections"),
						ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/myResourceGroup/providers/Microsoft.HybridCompute/privateLinkScopes/myPrivateLinkScope/privateEndpointConnections/private-endpoint-connection-name"),
						Properties: &armhybridcompute.PrivateEndpointConnectionProperties{
							PrivateEndpoint: &armhybridcompute.PrivateEndpointProperty{
								ID: to.Ptr("/subscriptions/55555555-6666-7777-8888-999999999999/resourceGroups/Default-Network/providers/Microsoft.Network/privateEndpoints/private-endpoint-name"),
							},
							PrivateLinkServiceConnectionState: &armhybridcompute.PrivateLinkServiceConnectionStateProperty{
								Description:     to.Ptr("Auto-approved"),
								ActionsRequired: to.Ptr("None"),
								Status:          to.Ptr("Approved"),
							},
							ProvisioningState: to.Ptr("Succeeded"),
						},
					}},
				PrivateLinkScopeID:  to.Ptr("e5dc51d3-92ed-4d7e-947a-775ea79b4919"),
				ProvisioningState:   to.Ptr("Succeeded"),
				PublicNetworkAccess: to.Ptr(armhybridcompute.PublicNetworkAccessTypeDisabled),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateLinkScope) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateLinkScope)
			t.Fatalf("Mock response is not equal to example response for example specification/hybridcompute/resource-manager/Microsoft.HybridCompute/preview/2021-12-10-preview/examples/PrivateLinkScopesCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/hybridcompute/resource-manager/Microsoft.HybridCompute/preview/2021-12-10-preview/examples/PrivateLinkScopesUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateLinkScopeUpdate"},
	})
	client = armhybridcompute.NewPrivateLinkScopesClient("86dc51d3-92ed-4d7e-947a-775ea79b4919", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"my-resource-group",
		"my-privatelinkscope",
		armhybridcompute.PrivateLinkScope{
			Location: to.Ptr("westus"),
			Tags: map[string]*string{
				"Tag1": to.Ptr("Value1"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hybridcompute/resource-manager/Microsoft.HybridCompute/preview/2021-12-10-preview/examples/PrivateLinkScopesUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhybridcompute.PrivateLinkScope{
			Name:     to.Ptr("my-privatelinkscope"),
			Type:     to.Ptr("Microsoft.HybridCompute/privateLinkScopes"),
			ID:       to.Ptr("/subscriptions/86dc51d3-92ed-4d7e-947a-775ea79b4919/resourceGroups/my-resource-group/providers/microsoft.hybridCompute/privateLinkScopes/my-privatelinkscope"),
			Location: to.Ptr("westus"),
			Tags: map[string]*string{
				"Tag1": to.Ptr("Value1"),
			},
			Properties: &armhybridcompute.PrivateLinkScopeProperties{
				PrivateEndpointConnections: []*armhybridcompute.PrivateEndpointConnectionDataModel{
					{
						Name: to.Ptr("private-endpoint-connection-name"),
						Type: to.Ptr("Microsoft.HybridCompute/privateLinkScopes/privateEndpointConnections"),
						ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/myResourceGroup/providers/Microsoft.HybridCompute/privateLinkScopes/myPrivateLinkScope/privateEndpointConnections/private-endpoint-connection-name"),
						Properties: &armhybridcompute.PrivateEndpointConnectionProperties{
							PrivateEndpoint: &armhybridcompute.PrivateEndpointProperty{
								ID: to.Ptr("/subscriptions/55555555-6666-7777-8888-999999999999/resourceGroups/Default-Network/providers/Microsoft.Network/privateEndpoints/private-endpoint-name"),
							},
							PrivateLinkServiceConnectionState: &armhybridcompute.PrivateLinkServiceConnectionStateProperty{
								Description:     to.Ptr("Auto-approved"),
								ActionsRequired: to.Ptr("None"),
								Status:          to.Ptr("Approved"),
							},
							ProvisioningState: to.Ptr("Succeeded"),
						},
					}},
				PrivateLinkScopeID:  to.Ptr("e5dc51d3-92ed-4d7e-947a-775ea79b4919"),
				ProvisioningState:   to.Ptr("Succeeded"),
				PublicNetworkAccess: to.Ptr(armhybridcompute.PublicNetworkAccessTypeDisabled),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateLinkScope) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateLinkScope)
			t.Fatalf("Mock response is not equal to example response for example specification/hybridcompute/resource-manager/Microsoft.HybridCompute/preview/2021-12-10-preview/examples/PrivateLinkScopesUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateLinkScopes_UpdateTags(t *testing.T) {
	// From example specification/hybridcompute/resource-manager/Microsoft.HybridCompute/preview/2021-12-10-preview/examples/PrivateLinkScopesUpdateTagsOnly.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateLinkScopeUpdateTagsOnly"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhybridcompute.NewPrivateLinkScopesClient("subid", cred, &options)
	res, err := client.UpdateTags(ctx,
		"my-resource-group",
		"my-privatelinkscope",
		armhybridcompute.TagsResource{
			Tags: map[string]*string{
				"Tag1": to.Ptr("Value1"),
				"Tag2": to.Ptr("Value2"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hybridcompute/resource-manager/Microsoft.HybridCompute/preview/2021-12-10-preview/examples/PrivateLinkScopesUpdateTagsOnly.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhybridcompute.PrivateLinkScope{
			Name:     to.Ptr("my-privatelinkscope"),
			Type:     to.Ptr("Microsoft.HybridCompute/privateLinkScopes"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/my-resource-group/providers/microsoft.hybridcompute/privateLinkScopes/my-privatelinkscope"),
			Location: to.Ptr("westus"),
			Tags: map[string]*string{
				"Tag1": to.Ptr("Value1"),
				"Tag2": to.Ptr("Value2"),
			},
			Properties: &armhybridcompute.PrivateLinkScopeProperties{
				PrivateEndpointConnections: []*armhybridcompute.PrivateEndpointConnectionDataModel{
					{
						Name: to.Ptr("private-endpoint-connection-name"),
						Type: to.Ptr("Microsoft.HybridCompute/privateLinkScopes/privateEndpointConnections"),
						ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/myResourceGroup/providers/Microsoft.HybridCompute/privateLinkScopes/myPrivateLinkScope/privateEndpointConnections/private-endpoint-connection-name"),
						Properties: &armhybridcompute.PrivateEndpointConnectionProperties{
							PrivateEndpoint: &armhybridcompute.PrivateEndpointProperty{
								ID: to.Ptr("/subscriptions/55555555-6666-7777-8888-999999999999/resourceGroups/Default-Network/providers/Microsoft.Network/privateEndpoints/private-endpoint-name"),
							},
							PrivateLinkServiceConnectionState: &armhybridcompute.PrivateLinkServiceConnectionStateProperty{
								Description:     to.Ptr("Auto-approved"),
								ActionsRequired: to.Ptr("None"),
								Status:          to.Ptr("Approved"),
							},
							ProvisioningState: to.Ptr("Succeeded"),
						},
					}},
				PrivateLinkScopeID:  to.Ptr("e5dc51d3-92ed-4d7e-947a-775ea79b4919"),
				ProvisioningState:   to.Ptr("Succeeded"),
				PublicNetworkAccess: to.Ptr(armhybridcompute.PublicNetworkAccessTypeDisabled),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateLinkScope) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateLinkScope)
			t.Fatalf("Mock response is not equal to example response for example specification/hybridcompute/resource-manager/Microsoft.HybridCompute/preview/2021-12-10-preview/examples/PrivateLinkScopesUpdateTagsOnly.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateLinkScopes_GetValidationDetails(t *testing.T) {
	// From example specification/hybridcompute/resource-manager/Microsoft.HybridCompute/preview/2021-12-10-preview/examples/PrivateLinkScopesGetValidation.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateLinkScopeGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhybridcompute.NewPrivateLinkScopesClient("86dc51d3-92ed-4d7e-947a-775ea79b4919", cred, &options)
	res, err := client.GetValidationDetails(ctx,
		"wus2",
		"f5dc51d3-92ed-4d7e-947a-775ea79b4919",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hybridcompute/resource-manager/Microsoft.HybridCompute/preview/2021-12-10-preview/examples/PrivateLinkScopesGetValidation.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhybridcompute.PrivateLinkScopeValidationDetails{
			ConnectionDetails: []*armhybridcompute.ConnectionDetail{
				{
					GroupID:          to.Ptr("groupId"),
					ID:               to.Ptr("id"),
					LinkIdentifier:   to.Ptr("linkId"),
					MemberName:       to.Ptr("memberName"),
					PrivateIPAddress: to.Ptr("ip"),
				}},
			ID:                  to.Ptr("/subscriptions/86dc51d3-92ed-4d7e-947a-775ea79b4919/resourceGroups/my-resource-group/providers/microsoft.hybridcompute/privateLinkScopes/my-privatelinkscope"),
			PublicNetworkAccess: to.Ptr(armhybridcompute.PublicNetworkAccessTypeDisabled),
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateLinkScopeValidationDetails) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateLinkScopeValidationDetails)
			t.Fatalf("Mock response is not equal to example response for example specification/hybridcompute/resource-manager/Microsoft.HybridCompute/preview/2021-12-10-preview/examples/PrivateLinkScopesGetValidation.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateLinkScopes_GetValidationDetailsForMachine(t *testing.T) {
	// From example specification/hybridcompute/resource-manager/Microsoft.HybridCompute/preview/2021-12-10-preview/examples/PrivateLinkScopesGetValidationForMachine.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateLinkScopeGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhybridcompute.NewPrivateLinkScopesClient("86dc51d3-92ed-4d7e-947a-775ea79b4919", cred, &options)
	res, err := client.GetValidationDetailsForMachine(ctx,
		"my-resource-group",
		"machineName",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hybridcompute/resource-manager/Microsoft.HybridCompute/preview/2021-12-10-preview/examples/PrivateLinkScopesGetValidationForMachine.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhybridcompute.PrivateLinkScopeValidationDetails{
			ConnectionDetails: []*armhybridcompute.ConnectionDetail{
				{
					GroupID:          to.Ptr("groupId"),
					ID:               to.Ptr("id"),
					LinkIdentifier:   to.Ptr("linkId"),
					MemberName:       to.Ptr("memberName"),
					PrivateIPAddress: to.Ptr("ip"),
				}},
			ID:                  to.Ptr("/subscriptions/86dc51d3-92ed-4d7e-947a-775ea79b4919/resourceGroups/my-resource-group/providers/microsoft.hybridcompute/privateLinkScopes/my-privatelinkscope"),
			PublicNetworkAccess: to.Ptr(armhybridcompute.PublicNetworkAccessTypeDisabled),
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateLinkScopeValidationDetails) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateLinkScopeValidationDetails)
			t.Fatalf("Mock response is not equal to example response for example specification/hybridcompute/resource-manager/Microsoft.HybridCompute/preview/2021-12-10-preview/examples/PrivateLinkScopesGetValidationForMachine.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateLinkResources_ListByPrivateLinkScope(t *testing.T) {
	// From example specification/hybridcompute/resource-manager/Microsoft.HybridCompute/preview/2021-12-10-preview/examples/PrivateLinkScopePrivateLinkResourceListGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets private endpoint connection."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhybridcompute.NewPrivateLinkResourcesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByPrivateLinkScope("myResourceGroup",
		"myPrivateLinkScope",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/hybridcompute/resource-manager/Microsoft.HybridCompute/preview/2021-12-10-preview/examples/PrivateLinkScopePrivateLinkResourceListGet.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armhybridcompute.PrivateLinkResourceListResult{
			Value: []*armhybridcompute.PrivateLinkResource{
				{
					Name: to.Ptr("hybridcompute"),
					Type: to.Ptr("Microsoft.HybridCompute/privateLinkScopes/privateLinkResources"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/myResourceGroup/providers/Microsoft.HybridCompute/privateLinkScopes/myPrivateLinkScope/privateLinkResources/hybridcompute"),
					Properties: &armhybridcompute.PrivateLinkResourceProperties{
						GroupID: to.Ptr("hybridcompute"),
						RequiredMembers: []*string{
							to.Ptr("HybridCompute.ServerDP"),
							to.Ptr("HybridCompute.K8sConfigurationDP"),
							to.Ptr("HybridCompute.GuestConfigDP")},
						RequiredZoneNames: []*string{
							to.Ptr("privatelink.his.arc.azure.com"),
							to.Ptr("privatelink.kubernetesconfiguration.azure.com"),
							to.Ptr("privatelink.Guestconfiguration.azure.com")},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PrivateLinkResourceListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PrivateLinkResourceListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/hybridcompute/resource-manager/Microsoft.HybridCompute/preview/2021-12-10-preview/examples/PrivateLinkScopePrivateLinkResourceListGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateLinkResources_Get(t *testing.T) {
	// From example specification/hybridcompute/resource-manager/Microsoft.HybridCompute/preview/2021-12-10-preview/examples/PrivateLinkScopePrivateLinkResourceGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets private endpoint connection."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhybridcompute.NewPrivateLinkResourcesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myPrivateLinkScope",
		"hybridcompute",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hybridcompute/resource-manager/Microsoft.HybridCompute/preview/2021-12-10-preview/examples/PrivateLinkScopePrivateLinkResourceGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhybridcompute.PrivateLinkResource{
			Name: to.Ptr("hybridcompute"),
			Type: to.Ptr("Microsoft.HybridCompute/privateLinkScopes/privateLinkResources"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/myResourceGroup/providers/Microsoft.HybridCompute/privateLinkScopes/myPrivateLinkScope/privateLinkResources/hybridcompute"),
			Properties: &armhybridcompute.PrivateLinkResourceProperties{
				GroupID: to.Ptr("hybridcompute"),
				RequiredMembers: []*string{
					to.Ptr("HybridCompute.Server"),
					to.Ptr("HybridCompute.K8sConfiguration"),
					to.Ptr("GuestConfig.DP")},
				RequiredZoneNames: []*string{
					to.Ptr("privatelink.his.arc.azure.com"),
					to.Ptr("privatelink.kubernetesconfiguration.azure.com"),
					to.Ptr("privatelink.Guestconfiguration.azure.com")},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateLinkResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateLinkResource)
			t.Fatalf("Mock response is not equal to example response for example specification/hybridcompute/resource-manager/Microsoft.HybridCompute/preview/2021-12-10-preview/examples/PrivateLinkScopePrivateLinkResourceGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnections_Get(t *testing.T) {
	// From example specification/hybridcompute/resource-manager/Microsoft.HybridCompute/preview/2021-12-10-preview/examples/PrivateEndpointConnectionGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets private endpoint connection."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhybridcompute.NewPrivateEndpointConnectionsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myPrivateLinkScope",
		"private-endpoint-connection-name",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hybridcompute/resource-manager/Microsoft.HybridCompute/preview/2021-12-10-preview/examples/PrivateEndpointConnectionGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhybridcompute.PrivateEndpointConnection{
			Name: to.Ptr("private-endpoint-connection-name"),
			Type: to.Ptr("Microsoft.HybridCompute/privateLinkScopes/privateEndpointConnections"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/myResourceGroup/providers/Microsoft.HybridCompute/privateLinkScopes/myPrivateLinkScope/privateEndpointConnections/private-endpoint-connection-name"),
			Properties: &armhybridcompute.PrivateEndpointConnectionProperties{
				PrivateEndpoint: &armhybridcompute.PrivateEndpointProperty{
					ID: to.Ptr("/subscriptions/55555555-6666-7777-8888-999999999999/resourceGroups/Default-Network/providers/Microsoft.Network/privateEndpoints/private-endpoint-name"),
				},
				PrivateLinkServiceConnectionState: &armhybridcompute.PrivateLinkServiceConnectionStateProperty{
					Description:     to.Ptr("Auto-approved"),
					ActionsRequired: to.Ptr("None"),
					Status:          to.Ptr("Approved"),
				},
				ProvisioningState: to.Ptr("Succeeded"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateEndpointConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/hybridcompute/resource-manager/Microsoft.HybridCompute/preview/2021-12-10-preview/examples/PrivateEndpointConnectionGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnections_CreateOrUpdate(t *testing.T) {
	// From example specification/hybridcompute/resource-manager/Microsoft.HybridCompute/preview/2021-12-10-preview/examples/PrivateEndpointConnectionUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Approve or reject a private endpoint connection with a given name."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhybridcompute.NewPrivateEndpointConnectionsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myPrivateLinkScope",
		"private-endpoint-connection-name",
		armhybridcompute.PrivateEndpointConnection{
			Properties: &armhybridcompute.PrivateEndpointConnectionProperties{
				PrivateLinkServiceConnectionState: &armhybridcompute.PrivateLinkServiceConnectionStateProperty{
					Description: to.Ptr("Approved by johndoe@contoso.com"),
					Status:      to.Ptr("Approved"),
				},
			},
		},
		&armhybridcompute.PrivateEndpointConnectionsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hybridcompute/resource-manager/Microsoft.HybridCompute/preview/2021-12-10-preview/examples/PrivateEndpointConnectionUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/hybridcompute/resource-manager/Microsoft.HybridCompute/preview/2021-12-10-preview/examples/PrivateEndpointConnectionUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armhybridcompute.PrivateEndpointConnection{
			Name: to.Ptr("private-endpoint-connection-name"),
			Type: to.Ptr("Microsoft.HybridCompute/privateLinkScopes/privateEndpointConnections"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/myResourceGroup/providers/Microsoft.HybridCompute/privateLinkScopes/myPrivateLinkScope/privateEndpointConnections/private-endpoint-connection-name"),
			Properties: &armhybridcompute.PrivateEndpointConnectionProperties{
				PrivateEndpoint: &armhybridcompute.PrivateEndpointProperty{
					ID: to.Ptr("/subscriptions/55555555-6666-7777-8888-999999999999/resourceGroups/Default-Network/providers/Microsoft.Network/privateEndpoints/private-endpoint-name"),
				},
				PrivateLinkServiceConnectionState: &armhybridcompute.PrivateLinkServiceConnectionStateProperty{
					Description:     to.Ptr("Approved by johndoe@contoso.com"),
					ActionsRequired: to.Ptr("None"),
					Status:          to.Ptr("Approved"),
				},
				ProvisioningState: to.Ptr("Succeeded"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateEndpointConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/hybridcompute/resource-manager/Microsoft.HybridCompute/preview/2021-12-10-preview/examples/PrivateEndpointConnectionUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnections_Delete(t *testing.T) {
	// From example specification/hybridcompute/resource-manager/Microsoft.HybridCompute/preview/2021-12-10-preview/examples/PrivateEndpointConnectionDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Deletes a private endpoint connection with a given name."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhybridcompute.NewPrivateEndpointConnectionsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"myPrivateLinkScope",
		"private-endpoint-connection-name",
		&armhybridcompute.PrivateEndpointConnectionsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/hybridcompute/resource-manager/Microsoft.HybridCompute/preview/2021-12-10-preview/examples/PrivateEndpointConnectionDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/hybridcompute/resource-manager/Microsoft.HybridCompute/preview/2021-12-10-preview/examples/PrivateEndpointConnectionDelete.json: %v", err)
	}
}

func TestPrivateEndpointConnections_ListByPrivateLinkScope(t *testing.T) {
	// From example specification/hybridcompute/resource-manager/Microsoft.HybridCompute/preview/2021-12-10-preview/examples/PrivateEndpointConnectionList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets list of private endpoint connections on a private link scope."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armhybridcompute.NewPrivateEndpointConnectionsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByPrivateLinkScope("myResourceGroup",
		"myPrivateLinkScope",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/hybridcompute/resource-manager/Microsoft.HybridCompute/preview/2021-12-10-preview/examples/PrivateEndpointConnectionList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armhybridcompute.PrivateEndpointConnectionListResult{
			Value: []*armhybridcompute.PrivateEndpointConnection{
				{
					Name: to.Ptr("private-endpoint-connection-name"),
					Type: to.Ptr("Microsoft.HybridCompute/privateLinkScopes/privateEndpointConnections"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/myResourceGroup/providers/Microsoft.HybridCompute/privateLinkScopes/myPrivateLinkScope/privateEndpointConnections/private-endpoint-connection-name-2"),
					Properties: &armhybridcompute.PrivateEndpointConnectionProperties{
						PrivateEndpoint: &armhybridcompute.PrivateEndpointProperty{
							ID: to.Ptr("/subscriptions/55555555-6666-7777-8888-999999999999/resourceGroups/Default-Network/providers/Microsoft.Network/privateEndpoints/private-endpoint-name"),
						},
						PrivateLinkServiceConnectionState: &armhybridcompute.PrivateLinkServiceConnectionStateProperty{
							Description:     to.Ptr("Auto-approved"),
							ActionsRequired: to.Ptr("None"),
							Status:          to.Ptr("Approved"),
						},
						ProvisioningState: to.Ptr("Succeeded"),
					},
				},
				{
					Name: to.Ptr("private-endpoint-connection-name-2"),
					Type: to.Ptr("Microsoft.HybridCompute/privateLinkScopes/privateEndpointConnections"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/myResourceGroup/providers/Microsoft.HybridCompute/privateLinkScopes/myPrivateLinkScope/privateEndpointConnections/private-endpoint-connection-name-2"),
					Properties: &armhybridcompute.PrivateEndpointConnectionProperties{
						PrivateEndpoint: &armhybridcompute.PrivateEndpointProperty{
							ID: to.Ptr("/subscriptions/55555555-6666-7777-8888-999999999999/resourceGroups/Default-Network/providers/Microsoft.Network/privateEndpoints/private-endpoint-name-2"),
						},
						PrivateLinkServiceConnectionState: &armhybridcompute.PrivateLinkServiceConnectionStateProperty{
							Description:     to.Ptr("Please approve my connection."),
							ActionsRequired: to.Ptr("None"),
							Status:          to.Ptr("Pending"),
						},
						ProvisioningState: to.Ptr("Succeeded"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PrivateEndpointConnectionListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PrivateEndpointConnectionListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/hybridcompute/resource-manager/Microsoft.HybridCompute/preview/2021-12-10-preview/examples/PrivateEndpointConnectionList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
