//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armhybridcompute

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"golang.org/x/net/http2"
)

var (
	ctx            context.Context
	subscriptionId string
	cred           azcore.TokenCredential
	err            error
	con            *arm.Connection
	mockHost       string
)

func TestMachines_CreateOrUpdate(t *testing.T) {
	// From example Create or Update a Machine
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewMachinesClient(con,
		"{subscriptionId}")
	res, err := client.CreateOrUpdate(ctx,
		"myResourceGroup",
		"myMachine",
		Machine{
			TrackedResource: TrackedResource{
				Location: to.StringPtr("eastus2euap"),
			},
			Identity: &Identity{
				Type: to.StringPtr("SystemAssigned"),
			},
			Properties: &MachineProperties{
				ClientPublicKey: to.StringPtr("string"),
				LocationData: &LocationData{
					Name: to.StringPtr("Redmond"),
				},
				ParentClusterResourceID:    to.StringPtr("{AzureStackHCIResourceId}"),
				PrivateLinkScopeResourceID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.HybridCompute/privateLinkScopes/privateLinkScopeName"),
				VMID:                       to.StringPtr("b7a098cc-b0b8-46e8-a205-62f301a62a8f"),
			},
		},
		&MachinesCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Machine.ID == nil {
		t.Fatal("Machine.ID should not be nil!")
	}
}

func TestMachines_Update(t *testing.T) {
	// From example Update a Machine
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewMachinesClient(con,
		"{subscription-id}")
	res, err := client.Update(ctx,
		"myResourceGroup",
		"myMachine",
		MachineUpdate{
			Identity: &Identity{
				Type: to.StringPtr("SystemAssigned"),
			},
			Properties: &MachineUpdateProperties{
				LocationData: &LocationData{
					Name: to.StringPtr("Redmond"),
				},
				OSProfile: &OSProfile{
					LinuxConfiguration: &OSProfileLinuxConfiguration{
						PatchSettings: &PatchSettings{
							AssessmentMode: to.StringPtr("ImageDefault"),
						},
					},
					WindowsConfiguration: &OSProfileWindowsConfiguration{
						PatchSettings: &PatchSettings{
							AssessmentMode: to.StringPtr("ImageDefault"),
						},
					},
				},
				ParentClusterResourceID:    to.StringPtr("{AzureStackHCIResourceId}"),
				PrivateLinkScopeResourceID: to.StringPtr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.HybridCompute/privateLinkScopes/privateLinkScopeName"),
			},
		},
		&MachinesUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Machine.ID == nil {
		t.Fatal("Machine.ID should not be nil!")
	}
}

func TestMachines_Delete(t *testing.T) {
	// From example Delete a Machine
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewMachinesClient(con,
		"{subscriptionId}")
	_, err := client.Delete(ctx,
		"myResourceGroup",
		"myMachine",
		&MachinesDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestMachines_Get(t *testing.T) {
	// From example Get Machine
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewMachinesClient(con,
		"{subscriptionId}")
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myMachine",
		&MachinesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Machine.ID == nil {
		t.Fatal("Machine.ID should not be nil!")
	}
}

func TestMachines_ListByResourceGroup(t *testing.T) {
	// From example List Machines by resource group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewMachinesClient(con,
		"{subscription-id}")
	pager := client.ListByResourceGroup("myResourceGroup",
		&MachinesListByResourceGroupOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Machine.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Machine.ID should not be nil!")
			}
		}
	}
}

func TestMachines_ListBySubscription(t *testing.T) {
	// From example List Machines by resource group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewMachinesClient(con,
		"{subscription-id}")
	pager := client.ListBySubscription(&MachinesListBySubscriptionOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Machine.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Machine.ID should not be nil!")
			}
		}
	}
}

func TestMachineExtensions_CreateOrUpdate(t *testing.T) {
	// From example Create or Update a Machine Extension
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewMachineExtensionsClient(con,
		"{subscriptionId}")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myMachine",
		"CustomScriptExtension",
		MachineExtension{
			TrackedResource: TrackedResource{
				Location: to.StringPtr("eastus2euap"),
			},
			Properties: &MachineExtensionProperties{
				Type:      to.StringPtr("CustomScriptExtension"),
				Publisher: to.StringPtr("Microsoft.Compute"),
				Settings: map[string]interface{}{
					"commandToExecute": "powershell.exe -c \"Get-Process | Where-Object { $_.CPU -gt 10000 }\"",
				},
				TypeHandlerVersion: to.StringPtr("1.10"),
			},
		},
		&MachineExtensionsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.MachineExtension.ID == nil {
		t.Fatal("MachineExtension.ID should not be nil!")
	}
}

func TestMachineExtensions_Update(t *testing.T) {
	// From example Create or Update a Machine Extension
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewMachineExtensionsClient(con,
		"{subscriptionId}")
	poller, err := client.BeginUpdate(ctx,
		"myResourceGroup",
		"myMachine",
		"CustomScriptExtension",
		MachineExtensionUpdate{
			Properties: &MachineExtensionUpdateProperties{
				Type:      to.StringPtr("CustomScriptExtension"),
				Publisher: to.StringPtr("Microsoft.Compute"),
				Settings: map[string]interface{}{
					"commandToExecute": "powershell.exe -c \"Get-Process | Where-Object { $_.CPU -lt 100 }\"",
				},
				TypeHandlerVersion: to.StringPtr("1.10"),
			},
		},
		&MachineExtensionsBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.MachineExtension.ID == nil {
		t.Fatal("MachineExtension.ID should not be nil!")
	}
}

func TestMachineExtensions_Delete(t *testing.T) {
	// From example Delete a Machine Extension
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewMachineExtensionsClient(con,
		"{subscriptionId}")
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"myMachine",
		"MMA",
		&MachineExtensionsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestMachineExtensions_Get(t *testing.T) {
	// From example GET Machine Extension
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewMachineExtensionsClient(con,
		"{subscriptionId}")
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myMachine",
		"CustomScriptExtension",
		&MachineExtensionsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.MachineExtension.ID == nil {
		t.Fatal("MachineExtension.ID should not be nil!")
	}
}

func TestMachineExtensions_List(t *testing.T) {
	// From example GET all Machine Extensions
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewMachineExtensionsClient(con,
		"{subscriptionId}")
	pager := client.List("myResourceGroup",
		"myMachine",
		&MachineExtensionsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("MachineExtension.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("MachineExtension.ID should not be nil!")
			}
		}
	}
}

func Test_UpgradeExtensions(t *testing.T) {
	// From example Upgrade Machine Extensions
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewHybridComputeManagementClientClient(con,
		"{subscriptionId}")
	poller, err := client.BeginUpgradeExtensions(ctx,
		"myResourceGroup",
		"myMachine",
		MachineExtensionUpgrade{
			ExtensionTargets: map[string]*ExtensionTargetProperties{
				"Microsoft.Azure.Monitoring": &ExtensionTargetProperties{
					TargetVersion: to.StringPtr("2.0"),
				},
				"Microsoft.Compute.CustomScriptExtension": &ExtensionTargetProperties{
					TargetVersion: to.StringPtr("1.10"),
				},
			},
		},
		&HybridComputeManagementClientBeginUpgradeExtensionsOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestOperations_List(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestPrivateLinkScopes_List(t *testing.T) {
	// From example PrivateLinkScopesList.json
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateLinkScopesClient(con,
		"86dc51d3-92ed-4d7e-947a-775ea79b4919")
	pager := client.List(&PrivateLinkScopesListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("HybridComputePrivateLinkScope.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("HybridComputePrivateLinkScope.ID should not be nil!")
			}
		}
	}
}

func TestPrivateLinkScopes_ListByResourceGroup(t *testing.T) {
	// From example PrivateLinkScopeListByResourceGroup
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateLinkScopesClient(con,
		"86dc51d3-92ed-4d7e-947a-775ea79b4919")
	pager := client.ListByResourceGroup("my-resource-group",
		&PrivateLinkScopesListByResourceGroupOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("HybridComputePrivateLinkScope.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("HybridComputePrivateLinkScope.ID should not be nil!")
			}
		}
	}
}

func TestPrivateLinkScopes_Delete(t *testing.T) {
	// From example PrivateLinkScopesDelete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateLinkScopesClient(con,
		"86dc51d3-92ed-4d7e-947a-775ea79b4919")
	poller, err := client.BeginDelete(ctx,
		"my-resource-group",
		"my-privatelinkscope",
		&PrivateLinkScopesBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestPrivateLinkScopes_Get(t *testing.T) {
	// From example PrivateLinkScopeGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateLinkScopesClient(con,
		"86dc51d3-92ed-4d7e-947a-775ea79b4919")
	res, err := client.Get(ctx,
		"my-resource-group",
		"my-privatelinkscope",
		&PrivateLinkScopesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.HybridComputePrivateLinkScope.ID == nil {
		t.Fatal("HybridComputePrivateLinkScope.ID should not be nil!")
	}
}

func TestPrivateLinkScopes_CreateOrUpdate(t *testing.T) {
	// From example PrivateLinkScopeCreate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateLinkScopesClient(con,
		"86dc51d3-92ed-4d7e-947a-775ea79b4919")
	res, err := client.CreateOrUpdate(ctx,
		"my-resource-group",
		"my-privatelinkscope",
		HybridComputePrivateLinkScope{
			PrivateLinkScopesResource: PrivateLinkScopesResource{
				Location: to.StringPtr("westus"),
			},
		},
		&PrivateLinkScopesCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.HybridComputePrivateLinkScope.ID == nil {
		t.Fatal("HybridComputePrivateLinkScope.ID should not be nil!")
	}

	// From example PrivateLinkScopeUpdate
	res, err = client.CreateOrUpdate(ctx,
		"my-resource-group",
		"my-privatelinkscope",
		HybridComputePrivateLinkScope{
			PrivateLinkScopesResource: PrivateLinkScopesResource{
				Location: to.StringPtr("westus"),
				Tags: map[string]*string{
					"Tag1": to.StringPtr("Value1"),
				},
			},
		},
		&PrivateLinkScopesCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.HybridComputePrivateLinkScope.ID == nil {
		t.Fatal("HybridComputePrivateLinkScope.ID should not be nil!")
	}
}

func TestPrivateLinkScopes_UpdateTags(t *testing.T) {
	// From example PrivateLinkScopeUpdateTagsOnly
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateLinkScopesClient(con,
		"subid")
	res, err := client.UpdateTags(ctx,
		"my-resource-group",
		"my-privatelinkscope",
		nil,
		&PrivateLinkScopesUpdateTagsOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.HybridComputePrivateLinkScope.ID == nil {
		t.Fatal("HybridComputePrivateLinkScope.ID should not be nil!")
	}
}

func TestPrivateLinkScopes_GetValidationDetails(t *testing.T) {
	// From example PrivateLinkScopeGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateLinkScopesClient(con,
		"86dc51d3-92ed-4d7e-947a-775ea79b4919")
	res, err := client.GetValidationDetails(ctx,
		"wus2",
		"f5dc51d3-92ed-4d7e-947a-775ea79b4919",
		&PrivateLinkScopesGetValidationDetailsOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.PrivateLinkScopeValidationDetails.ID == nil {
		t.Fatal("PrivateLinkScopeValidationDetails.ID should not be nil!")
	}
}

func TestPrivateLinkScopes_GetValidationDetailsForMachine(t *testing.T) {
	// From example PrivateLinkScopeGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateLinkScopesClient(con,
		"86dc51d3-92ed-4d7e-947a-775ea79b4919")
	res, err := client.GetValidationDetailsForMachine(ctx,
		"my-resource-group",
		"machineName",
		&PrivateLinkScopesGetValidationDetailsForMachineOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.PrivateLinkScopeValidationDetails.ID == nil {
		t.Fatal("PrivateLinkScopeValidationDetails.ID should not be nil!")
	}
}

func TestPrivateLinkResources_ListByPrivateLinkScope(t *testing.T) {
	// From example Gets private endpoint connection.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateLinkResourcesClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListByPrivateLinkScope("myResourceGroup",
		"myPrivateLinkScope",
		&PrivateLinkResourcesListByPrivateLinkScopeOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("PrivateLinkResource.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("PrivateLinkResource.ID should not be nil!")
			}
		}
	}
}

func TestPrivateLinkResources_Get(t *testing.T) {
	// From example Gets private endpoint connection.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateLinkResourcesClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myPrivateLinkScope",
		"hybridcompute",
		&PrivateLinkResourcesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.PrivateLinkResource.ID == nil {
		t.Fatal("PrivateLinkResource.ID should not be nil!")
	}
}

func TestPrivateEndpointConnections_Get(t *testing.T) {
	// From example Gets private endpoint connection.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateEndpointConnectionsClient(con,
		"00000000-1111-2222-3333-444444444444")
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myPrivateLinkScope",
		"private-endpoint-connection-name",
		&PrivateEndpointConnectionsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.PrivateEndpointConnection.ID == nil {
		t.Fatal("PrivateEndpointConnection.ID should not be nil!")
	}
}

func TestPrivateEndpointConnections_CreateOrUpdate(t *testing.T) {
	// From example Approve or reject a private endpoint connection with a given name.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateEndpointConnectionsClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myPrivateLinkScope",
		"private-endpoint-connection-name",
		PrivateEndpointConnection{
			Properties: &PrivateEndpointConnectionProperties{
				PrivateLinkServiceConnectionState: &PrivateLinkServiceConnectionStateProperty{
					Description: to.StringPtr("Approved by johndoe@contoso.com"),
					Status:      to.StringPtr("Approved"),
				},
			},
		},
		&PrivateEndpointConnectionsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.PrivateEndpointConnection.ID == nil {
		t.Fatal("PrivateEndpointConnection.ID should not be nil!")
	}
}

func TestPrivateEndpointConnections_Delete(t *testing.T) {
	// From example Deletes a private endpoint connection with a given name.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateEndpointConnectionsClient(con,
		"00000000-1111-2222-3333-444444444444")
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"myPrivateLinkScope",
		"private-endpoint-connection-name",
		&PrivateEndpointConnectionsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestPrivateEndpointConnections_ListByPrivateLinkScope(t *testing.T) {
	// From example Gets list of private endpoint connections on a private link scope.
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateEndpointConnectionsClient(con,
		"00000000-1111-2222-3333-444444444444")
	pager := client.ListByPrivateLinkScope("myResourceGroup",
		"myPrivateLinkScope",
		&PrivateEndpointConnectionsListByPrivateLinkScopeOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("PrivateEndpointConnection.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("PrivateEndpointConnection.ID should not be nil!")
			}
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	subscriptionId = getEnv("SUBSCRIPTION_ID", "00000000-0000-0000-0000-000000000000")
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}
	cred, err = azidentity.NewEnvironmentCredential(&azidentity.EnvironmentCredentialOptions{AuthorityHost: mockHost, HTTPClient: client})
	if err != nil {
		panic(err)
	}

	con = arm.NewConnection(mockHost, cred, &arm.ConnectionOptions{
		Logging: policy.LogOptions{
			IncludeBody: true,
		},
		HTTPClient: client,
	})
}

func tearDown() {

}
