//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armalertsmanagement_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/alertsmanagement/armalertsmanagement"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestAlertProcessingRules_ListBySubscription(t *testing.T) {
	// From example specification/alertsmanagement/resource-manager/Microsoft.AlertsManagement/stable/2021-08-08/examples/AlertProcessingRules_List_Subscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetAlertProcessingRulesSubscriptionWide"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armalertsmanagement.NewAlertProcessingRulesClient("1e3ff1c0-771a-4119-a03b-be82a51e232d", cred, &options)
	pager := client.ListBySubscription(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/alertsmanagement/resource-manager/Microsoft.AlertsManagement/stable/2021-08-08/examples/AlertProcessingRules_List_Subscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armalertsmanagement.AlertProcessingRulesList{
			Value: []*armalertsmanagement.AlertProcessingRule{
				{
					Name:     to.Ptr("DailySuppression"),
					Type:     to.Ptr("Microsoft.AlertsManagement/actionRules"),
					ID:       to.Ptr("/subscriptions/1e3ff1c0-771a-4119-a03b-be82a51e232d/resourceGroups/alertscorrelationrg/providers/Microsoft.AlertsManagement/actionRules/DailySuppression"),
					Location: to.Ptr("Global"),
					Tags:     map[string]*string{},
					Properties: &armalertsmanagement.AlertProcessingRuleProperties{
						Description: to.Ptr("Alert processing rule on resource group for daily suppression"),
						Actions: []armalertsmanagement.ActionClassification{
							&armalertsmanagement.RemoveAllActionGroups{
								ActionType: to.Ptr(armalertsmanagement.ActionTypeRemoveAllActionGroups),
							}},
						Conditions: []*armalertsmanagement.Condition{
							{
								Field:    to.Ptr(armalertsmanagement.FieldSeverity),
								Operator: to.Ptr(armalertsmanagement.OperatorEquals),
								Values: []*string{
									to.Ptr("Sev0"),
									to.Ptr("Sev2")},
							},
							{
								Field:    to.Ptr(armalertsmanagement.FieldMonitorService),
								Operator: to.Ptr(armalertsmanagement.OperatorEquals),
								Values: []*string{
									to.Ptr("Platform"),
									to.Ptr("Application Insights")},
							},
							{
								Field:    to.Ptr(armalertsmanagement.FieldTargetResourceType),
								Operator: to.Ptr(armalertsmanagement.OperatorNotEquals),
								Values: []*string{
									to.Ptr("Microsoft.Compute/VirtualMachines")},
							}},
						Enabled: to.Ptr(true),
						Schedule: &armalertsmanagement.Schedule{
							EffectiveFrom:  to.Ptr("2018-01-10T22:05:09"),
							EffectiveUntil: to.Ptr("2018-12-10T22:05:09"),
							Recurrences: []armalertsmanagement.RecurrenceClassification{
								&armalertsmanagement.DailyRecurrence{
									EndTime:        to.Ptr("14:00:00"),
									RecurrenceType: to.Ptr(armalertsmanagement.RecurrenceTypeDaily),
									StartTime:      to.Ptr("06:00:00"),
								}},
							TimeZone: to.Ptr("Pacific Standard Time"),
						},
						Scopes: []*string{
							to.Ptr("/subscriptions/1e3ff1c0-771a-4119-a03b-be82a51e232d/resourceGroups/alertscorrelationrg")},
					},
					SystemData: &armalertsmanagement.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-12T22:05:09Z"); return t }()),
						CreatedBy:          to.Ptr("abc@microsoft.com"),
						CreatedByType:      to.Ptr(armalertsmanagement.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-12T22:05:09Z"); return t }()),
						LastModifiedBy:     to.Ptr("xyz@microsoft.com"),
						LastModifiedByType: to.Ptr(armalertsmanagement.CreatedByTypeUser),
					},
				},
				{
					Name:     to.Ptr("WeeklySuppression"),
					Type:     to.Ptr("Microsoft.AlertsManagement/actionRules"),
					ID:       to.Ptr("/subscriptions/1e3ff1c0-771a-4119-a03b-be82a51e232d/resourceGroups/alertscorrelationrg/providers/Microsoft.AlertsManagement/actionRules/WeeklySuppression"),
					Location: to.Ptr("Global"),
					Tags:     map[string]*string{},
					Properties: &armalertsmanagement.AlertProcessingRuleProperties{
						Description: to.Ptr("Alert processing rule on resource group for adding action group"),
						Actions: []armalertsmanagement.ActionClassification{
							&armalertsmanagement.AddActionGroups{
								ActionType: to.Ptr(armalertsmanagement.ActionTypeAddActionGroups),
								ActionGroupIDs: []*string{
									to.Ptr("actiongGroup1")},
							}},
						Conditions: []*armalertsmanagement.Condition{
							{
								Field:    to.Ptr(armalertsmanagement.FieldMonitorCondition),
								Operator: to.Ptr(armalertsmanagement.OperatorEquals),
								Values: []*string{
									to.Ptr("Fired")},
							},
							{
								Field:    to.Ptr(armalertsmanagement.FieldDescription),
								Operator: to.Ptr(armalertsmanagement.OperatorContains),
								Values: []*string{
									to.Ptr("Percentage CPU greater than 80%"),
									to.Ptr("Metric alert on resource foo")},
							}},
						Enabled: to.Ptr(true),
						Scopes: []*string{
							to.Ptr("/subscriptions/1e3ff1c0-771a-4119-a03b-be82a51e232d/resourceGroups/alertscorrelationrg/providers/Microsoft.Compute/VirtualMachines/testResource")},
					},
					SystemData: &armalertsmanagement.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-12T22:05:09Z"); return t }()),
						CreatedBy:          to.Ptr("abc@microsoft.com"),
						CreatedByType:      to.Ptr(armalertsmanagement.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-12T22:05:09Z"); return t }()),
						LastModifiedBy:     to.Ptr("xyz@microsoft.com"),
						LastModifiedByType: to.Ptr(armalertsmanagement.CreatedByTypeUser),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AlertProcessingRulesList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AlertProcessingRulesList)
			t.Fatalf("Mock response is not equal to example response for example specification/alertsmanagement/resource-manager/Microsoft.AlertsManagement/stable/2021-08-08/examples/AlertProcessingRules_List_Subscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAlertProcessingRules_ListByResourceGroup(t *testing.T) {
	// From example specification/alertsmanagement/resource-manager/Microsoft.AlertsManagement/stable/2021-08-08/examples/AlertProcessingRules_List_ResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetAlertProcessingRulesResourceGroupWide"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armalertsmanagement.NewAlertProcessingRulesClient("1e3ff1c0-771a-4119-a03b-be82a51e232d", cred, &options)
	pager := client.ListByResourceGroup("alertscorrelationrg",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/alertsmanagement/resource-manager/Microsoft.AlertsManagement/stable/2021-08-08/examples/AlertProcessingRules_List_ResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armalertsmanagement.AlertProcessingRulesList{
			Value: []*armalertsmanagement.AlertProcessingRule{
				{
					Name:     to.Ptr("DailySuppression"),
					Type:     to.Ptr("Microsoft.AlertsManagement/actionRules"),
					ID:       to.Ptr("/subscriptions/1e3ff1c0-771a-4119-a03b-be82a51e232d/resourceGroups/alertscorrelationrg/providers/Microsoft.AlertsManagement/actionRules/DailySuppression"),
					Location: to.Ptr("Global"),
					Tags:     map[string]*string{},
					Properties: &armalertsmanagement.AlertProcessingRuleProperties{
						Description: to.Ptr("Alert processing rule on resource group for daily suppression"),
						Actions: []armalertsmanagement.ActionClassification{
							&armalertsmanagement.RemoveAllActionGroups{
								ActionType: to.Ptr(armalertsmanagement.ActionTypeRemoveAllActionGroups),
							}},
						Conditions: []*armalertsmanagement.Condition{
							{
								Field:    to.Ptr(armalertsmanagement.FieldSeverity),
								Operator: to.Ptr(armalertsmanagement.OperatorEquals),
								Values: []*string{
									to.Ptr("Sev0"),
									to.Ptr("Sev2")},
							},
							{
								Field:    to.Ptr(armalertsmanagement.FieldMonitorService),
								Operator: to.Ptr(armalertsmanagement.OperatorEquals),
								Values: []*string{
									to.Ptr("Platform"),
									to.Ptr("Application Insights")},
							},
							{
								Field:    to.Ptr(armalertsmanagement.FieldTargetResourceType),
								Operator: to.Ptr(armalertsmanagement.OperatorNotEquals),
								Values: []*string{
									to.Ptr("Microsoft.Compute/VirtualMachines")},
							}},
						Enabled: to.Ptr(true),
						Schedule: &armalertsmanagement.Schedule{
							EffectiveFrom:  to.Ptr("2018-09-12T06:00:00"),
							EffectiveUntil: to.Ptr("2018-09-20T14:00:00"),
							Recurrences: []armalertsmanagement.RecurrenceClassification{
								&armalertsmanagement.DailyRecurrence{
									EndTime:        to.Ptr("14:00:00"),
									RecurrenceType: to.Ptr(armalertsmanagement.RecurrenceTypeDaily),
									StartTime:      to.Ptr("06:00:00"),
								}},
							TimeZone: to.Ptr("Pacific Standard Time"),
						},
						Scopes: []*string{
							to.Ptr("/subscriptions/1e3ff1c0-771a-4119-a03b-be82a51e232d/resourceGroups/alertscorrelationrg")},
					},
					SystemData: &armalertsmanagement.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-12T22:05:09Z"); return t }()),
						CreatedBy:          to.Ptr("abc@microsoft.com"),
						CreatedByType:      to.Ptr(armalertsmanagement.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-12T22:05:09Z"); return t }()),
						LastModifiedBy:     to.Ptr("xyz@microsoft.com"),
						LastModifiedByType: to.Ptr(armalertsmanagement.CreatedByTypeUser),
					},
				},
				{
					Name:     to.Ptr("WeeklySuppression"),
					Type:     to.Ptr("Microsoft.AlertsManagement/actionRules"),
					ID:       to.Ptr("/subscriptions/1e3ff1c0-771a-4119-a03b-be82a51e232d/resourceGroups/alertscorrelationrg/providers/Microsoft.AlertsManagement/actionRules/WeeklySuppression"),
					Location: to.Ptr("Global"),
					Tags:     map[string]*string{},
					Properties: &armalertsmanagement.AlertProcessingRuleProperties{
						Description: to.Ptr("Alert processing rule on resource group for sending email"),
						Actions: []armalertsmanagement.ActionClassification{
							&armalertsmanagement.AddActionGroups{
								ActionType: to.Ptr(armalertsmanagement.ActionTypeAddActionGroups),
								ActionGroupIDs: []*string{
									to.Ptr("/subscriptions/1e3ff1c0-771a-4119-a03b-be82a51e232d/resourceGroups/alertscorrelationrg/providers/Microsoft.insights/actiongroups/testAG")},
							}},
						Conditions: []*armalertsmanagement.Condition{
							{
								Field:    to.Ptr(armalertsmanagement.FieldMonitorCondition),
								Operator: to.Ptr(armalertsmanagement.OperatorEquals),
								Values: []*string{
									to.Ptr("Fired")},
							},
							{
								Field:    to.Ptr(armalertsmanagement.FieldDescription),
								Operator: to.Ptr(armalertsmanagement.OperatorContains),
								Values: []*string{
									to.Ptr("Percentage CPU greater than 80%"),
									to.Ptr("Metric alert on resource foo")},
							},
							{
								Field:    to.Ptr(armalertsmanagement.FieldAlertContext),
								Operator: to.Ptr(armalertsmanagement.OperatorDoesNotContain),
								Values: []*string{
									to.Ptr("testresource"),
									to.Ptr("foo")},
							}},
						Enabled: to.Ptr(true),
						Scopes: []*string{
							to.Ptr("/subscriptions/1e3ff1c0-771a-4119-a03b-be82a51e232d/resourceGroups/alertscorrelationrg/providers/Microsoft.Compute/VirtualMachines/testResource")},
					},
					SystemData: &armalertsmanagement.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-12T22:05:09Z"); return t }()),
						CreatedBy:          to.Ptr("abc@microsoft.com"),
						CreatedByType:      to.Ptr(armalertsmanagement.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-12T22:05:09Z"); return t }()),
						LastModifiedBy:     to.Ptr("xyz@microsoft.com"),
						LastModifiedByType: to.Ptr(armalertsmanagement.CreatedByTypeUser),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AlertProcessingRulesList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AlertProcessingRulesList)
			t.Fatalf("Mock response is not equal to example response for example specification/alertsmanagement/resource-manager/Microsoft.AlertsManagement/stable/2021-08-08/examples/AlertProcessingRules_List_ResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAlertProcessingRules_GetByName(t *testing.T) {
	// From example specification/alertsmanagement/resource-manager/Microsoft.AlertsManagement/stable/2021-08-08/examples/AlertProcessingRules_GetById.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetAlertProcessingRuleById"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armalertsmanagement.NewAlertProcessingRulesClient("1e3ff1c0-771a-4119-a03b-be82a51e232d", cred, &options)
	res, err := client.GetByName(ctx,
		"alertscorrelationrg",
		"DailySuppression",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/alertsmanagement/resource-manager/Microsoft.AlertsManagement/stable/2021-08-08/examples/AlertProcessingRules_GetById.json: %v", err)
	}
	// Response check
	{
		exampleRes := armalertsmanagement.AlertProcessingRule{
			Name:     to.Ptr("DailySuppression"),
			Type:     to.Ptr("Microsoft.AlertsManagement/actionRules"),
			ID:       to.Ptr("/subscriptions/1e3ff1c0-771a-4119-a03b-be82a51e232d/resourceGroups/alertscorrelationrg/providers/Microsoft.AlertsManagement/actionRules/DailySuppression"),
			Location: to.Ptr("Global"),
			Tags:     map[string]*string{},
			Properties: &armalertsmanagement.AlertProcessingRuleProperties{
				Description: to.Ptr("Alert processing rule on resource group for daily and weekly scheduling"),
				Actions: []armalertsmanagement.ActionClassification{
					&armalertsmanagement.AddActionGroups{
						ActionType: to.Ptr(armalertsmanagement.ActionTypeAddActionGroups),
						ActionGroupIDs: []*string{
							to.Ptr("actiongGroup1"),
							to.Ptr("actiongGroup2")},
					}},
				Conditions: []*armalertsmanagement.Condition{
					{
						Field:    to.Ptr(armalertsmanagement.FieldSeverity),
						Operator: to.Ptr(armalertsmanagement.OperatorEquals),
						Values: []*string{
							to.Ptr("Sev0"),
							to.Ptr("Sev2")},
					},
					{
						Field:    to.Ptr(armalertsmanagement.FieldMonitorService),
						Operator: to.Ptr(armalertsmanagement.OperatorEquals),
						Values: []*string{
							to.Ptr("Platform"),
							to.Ptr("Application Insights")},
					},
					{
						Field:    to.Ptr(armalertsmanagement.FieldMonitorCondition),
						Operator: to.Ptr(armalertsmanagement.OperatorEquals),
						Values: []*string{
							to.Ptr("Fired")},
					},
					{
						Field:    to.Ptr(armalertsmanagement.FieldTargetResourceType),
						Operator: to.Ptr(armalertsmanagement.OperatorNotEquals),
						Values: []*string{
							to.Ptr("Microsoft.Compute/VirtualMachines")},
					}},
				Enabled: to.Ptr(true),
				Schedule: &armalertsmanagement.Schedule{
					EffectiveFrom:  to.Ptr("2018-01-10T22:05:09"),
					EffectiveUntil: to.Ptr("2018-12-10T22:05:09"),
					Recurrences: []armalertsmanagement.RecurrenceClassification{
						&armalertsmanagement.DailyRecurrence{
							EndTime:        to.Ptr("14:00:00"),
							RecurrenceType: to.Ptr(armalertsmanagement.RecurrenceTypeDaily),
							StartTime:      to.Ptr("06:00:00"),
						},
						&armalertsmanagement.WeeklyRecurrence{
							EndTime:        to.Ptr("20:00:00"),
							RecurrenceType: to.Ptr(armalertsmanagement.RecurrenceTypeWeekly),
							StartTime:      to.Ptr("10:00:00"),
							DaysOfWeek: []*armalertsmanagement.DaysOfWeek{
								to.Ptr(armalertsmanagement.DaysOfWeekSaturday),
								to.Ptr(armalertsmanagement.DaysOfWeekSunday)},
						}},
					TimeZone: to.Ptr("Pacific Standard Time"),
				},
				Scopes: []*string{
					to.Ptr("/subscriptions/1e3ff1c0-771a-4119-a03b-be82a51e232d/resourceGroups/alertscorrelationrg")},
			},
			SystemData: &armalertsmanagement.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-12T22:05:09Z"); return t }()),
				CreatedBy:          to.Ptr("abc@microsoft.com"),
				CreatedByType:      to.Ptr(armalertsmanagement.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-12T22:05:09Z"); return t }()),
				LastModifiedBy:     to.Ptr("xyz@microsoft.com"),
				LastModifiedByType: to.Ptr(armalertsmanagement.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AlertProcessingRule) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AlertProcessingRule)
			t.Fatalf("Mock response is not equal to example response for example specification/alertsmanagement/resource-manager/Microsoft.AlertsManagement/stable/2021-08-08/examples/AlertProcessingRules_GetById.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAlertProcessingRules_CreateOrUpdate(t *testing.T) {
	// From example specification/alertsmanagement/resource-manager/Microsoft.AlertsManagement/stable/2021-08-08/examples/AlertProcessingRules_Create_or_update_add_action_group_all_alerts_in_subscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a rule that adds an action group to all alerts in a subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armalertsmanagement.NewAlertProcessingRulesClient("subId1", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"alertscorrelationrg",
		"AddActionGroupToSubscription",
		armalertsmanagement.AlertProcessingRule{
			Location: to.Ptr("Global"),
			Tags:     map[string]*string{},
			Properties: &armalertsmanagement.AlertProcessingRuleProperties{
				Description: to.Ptr("Add ActionGroup1 to all alerts in the subscription"),
				Actions: []armalertsmanagement.ActionClassification{
					&armalertsmanagement.AddActionGroups{
						ActionType: to.Ptr(armalertsmanagement.ActionTypeAddActionGroups),
						ActionGroupIDs: []*string{
							to.Ptr("/subscriptions/subId1/resourcegroups/RGId1/providers/microsoft.insights/actiongroups/ActionGroup1")},
					}},
				Enabled: to.Ptr(true),
				Scopes: []*string{
					to.Ptr("/subscriptions/subId1")},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/alertsmanagement/resource-manager/Microsoft.AlertsManagement/stable/2021-08-08/examples/AlertProcessingRules_Create_or_update_add_action_group_all_alerts_in_subscription.json: %v", err)
	}
	// Response check
	{
		exampleRes := armalertsmanagement.AlertProcessingRule{
			Name:     to.Ptr("AddActionGroupToSubscription"),
			Type:     to.Ptr("Microsoft.AlertsManagement/actionRules"),
			ID:       to.Ptr("/subscriptions/subId1/resourceGroups/alertscorrelationrg/providers/Microsoft.AlertsManagement/actionRules/AddActionGroupToSubscription"),
			Location: to.Ptr("Global"),
			Tags:     map[string]*string{},
			Properties: &armalertsmanagement.AlertProcessingRuleProperties{
				Description: to.Ptr("Add ActionGroup1 to all alerts in the subscription"),
				Actions: []armalertsmanagement.ActionClassification{
					&armalertsmanagement.AddActionGroups{
						ActionType: to.Ptr(armalertsmanagement.ActionTypeAddActionGroups),
						ActionGroupIDs: []*string{
							to.Ptr("/subscriptions/subId1/resourcegroups/RGId1/providers/microsoft.insights/actiongroups/ActionGroup1")},
					}},
				Enabled: to.Ptr(true),
				Scopes: []*string{
					to.Ptr("/subscriptions/subId1")},
			},
			SystemData: &armalertsmanagement.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-02-12T22:05:09Z"); return t }()),
				CreatedBy:          to.Ptr("abc@microsoft.com"),
				CreatedByType:      to.Ptr(armalertsmanagement.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-02-13T16:15:34Z"); return t }()),
				LastModifiedBy:     to.Ptr("xyz@microsoft.com"),
				LastModifiedByType: to.Ptr(armalertsmanagement.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AlertProcessingRule) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AlertProcessingRule)
			t.Fatalf("Mock response is not equal to example response for example specification/alertsmanagement/resource-manager/Microsoft.AlertsManagement/stable/2021-08-08/examples/AlertProcessingRules_Create_or_update_add_action_group_all_alerts_in_subscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/alertsmanagement/resource-manager/Microsoft.AlertsManagement/stable/2021-08-08/examples/AlertProcessingRules_Create_or_update_add_two_action_groups_all_Sev0_Sev1_two_resource_groups.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a rule that adds two action groups to all Sev0 and Sev1 alerts in two resource groups"},
	})
	client = armalertsmanagement.NewAlertProcessingRulesClient("subId1", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"alertscorrelationrg",
		"AddActionGroupsBySeverity",
		armalertsmanagement.AlertProcessingRule{
			Location: to.Ptr("Global"),
			Tags:     map[string]*string{},
			Properties: &armalertsmanagement.AlertProcessingRuleProperties{
				Description: to.Ptr("Add AGId1 and AGId2 to all Sev0 and Sev1 alerts in these resourceGroups"),
				Actions: []armalertsmanagement.ActionClassification{
					&armalertsmanagement.AddActionGroups{
						ActionType: to.Ptr(armalertsmanagement.ActionTypeAddActionGroups),
						ActionGroupIDs: []*string{
							to.Ptr("/subscriptions/subId1/resourcegroups/RGId1/providers/microsoft.insights/actiongroups/AGId1"),
							to.Ptr("/subscriptions/subId1/resourcegroups/RGId1/providers/microsoft.insights/actiongroups/AGId2")},
					}},
				Conditions: []*armalertsmanagement.Condition{
					{
						Field:    to.Ptr(armalertsmanagement.FieldSeverity),
						Operator: to.Ptr(armalertsmanagement.OperatorEquals),
						Values: []*string{
							to.Ptr("sev0"),
							to.Ptr("sev1")},
					}},
				Enabled: to.Ptr(true),
				Scopes: []*string{
					to.Ptr("/subscriptions/subId1/resourceGroups/RGId1"),
					to.Ptr("/subscriptions/subId1/resourceGroups/RGId2")},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/alertsmanagement/resource-manager/Microsoft.AlertsManagement/stable/2021-08-08/examples/AlertProcessingRules_Create_or_update_add_two_action_groups_all_Sev0_Sev1_two_resource_groups.json: %v", err)
	}
	// Response check
	{
		exampleRes := armalertsmanagement.AlertProcessingRule{
			Name:     to.Ptr("AddActionGroupsBySeverity"),
			Type:     to.Ptr("Microsoft.AlertsManagement/actionRules"),
			ID:       to.Ptr("/subscriptions/subId1/resourceGroups/alertscorrelationrg/providers/Microsoft.AlertsManagement/actionRules/AddActionGroupsBySeverity"),
			Location: to.Ptr("Global"),
			Tags:     map[string]*string{},
			Properties: &armalertsmanagement.AlertProcessingRuleProperties{
				Description: to.Ptr("Add AGId1 and AGId2 to all Sev0 and Sev1 alerts in these resourceGroups"),
				Actions: []armalertsmanagement.ActionClassification{
					&armalertsmanagement.AddActionGroups{
						ActionType: to.Ptr(armalertsmanagement.ActionTypeAddActionGroups),
						ActionGroupIDs: []*string{
							to.Ptr("/subscriptions/subId1/resourcegroups/RGId1/providers/microsoft.insights/actiongroups/AGId1"),
							to.Ptr("/subscriptions/subId1/resourcegroups/RGId1/providers/microsoft.insights/actiongroups/AGId2")},
					}},
				Conditions: []*armalertsmanagement.Condition{
					{
						Field:    to.Ptr(armalertsmanagement.FieldSeverity),
						Operator: to.Ptr(armalertsmanagement.OperatorEquals),
						Values: []*string{
							to.Ptr("sev0"),
							to.Ptr("sev1")},
					}},
				Enabled: to.Ptr(true),
				Scopes: []*string{
					to.Ptr("/subscriptions/subId1/resourceGroups/RGId1"),
					to.Ptr("/subscriptions/subId1/resourceGroups/RGId2")},
			},
			SystemData: &armalertsmanagement.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-12T22:05:09Z"); return t }()),
				CreatedBy:          to.Ptr("abc@microsoft.com"),
				CreatedByType:      to.Ptr(armalertsmanagement.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-13T22:05:09Z"); return t }()),
				LastModifiedBy:     to.Ptr("xyz@microsoft.com"),
				LastModifiedByType: to.Ptr(armalertsmanagement.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AlertProcessingRule) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AlertProcessingRule)
			t.Fatalf("Mock response is not equal to example response for example specification/alertsmanagement/resource-manager/Microsoft.AlertsManagement/stable/2021-08-08/examples/AlertProcessingRules_Create_or_update_add_two_action_groups_all_Sev0_Sev1_two_resource_groups.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/alertsmanagement/resource-manager/Microsoft.AlertsManagement/stable/2021-08-08/examples/AlertProcessingRules_Create_or_update_remove_all_action_groups_specific_VM_one-off_maintenance_window.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a rule that removes all action groups from alerts on a specific VM during a one-off maintenance window (1800-2000 at a specific date, Pacific Standard Time)"},
	})
	client = armalertsmanagement.NewAlertProcessingRulesClient("subId1", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"alertscorrelationrg",
		"RemoveActionGroupsMaintenanceWindow",
		armalertsmanagement.AlertProcessingRule{
			Location: to.Ptr("Global"),
			Tags:     map[string]*string{},
			Properties: &armalertsmanagement.AlertProcessingRuleProperties{
				Description: to.Ptr("Removes all ActionGroups from all Alerts on VMName during the maintenance window"),
				Actions: []armalertsmanagement.ActionClassification{
					&armalertsmanagement.RemoveAllActionGroups{
						ActionType: to.Ptr(armalertsmanagement.ActionTypeRemoveAllActionGroups),
					}},
				Enabled: to.Ptr(true),
				Schedule: &armalertsmanagement.Schedule{
					EffectiveFrom:  to.Ptr("2021-04-15T18:00:00"),
					EffectiveUntil: to.Ptr("2021-04-15T20:00:00"),
					TimeZone:       to.Ptr("Pacific Standard Time"),
				},
				Scopes: []*string{
					to.Ptr("/subscriptions/subId1/resourceGroups/RGId1/providers/Microsoft.Compute/virtualMachines/VMName")},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/alertsmanagement/resource-manager/Microsoft.AlertsManagement/stable/2021-08-08/examples/AlertProcessingRules_Create_or_update_remove_all_action_groups_specific_VM_one-off_maintenance_window.json: %v", err)
	}
	// Response check
	{
		exampleRes := armalertsmanagement.AlertProcessingRule{
			Name:     to.Ptr("RemoveActionGroupsMaintenanceWindow"),
			Type:     to.Ptr("Microsoft.AlertsManagement/actionRules"),
			ID:       to.Ptr("/subscriptions/subId1/resourceGroups/alertscorrelationrg/providers/Microsoft.AlertsManagement/actionRules/RemoveActionGroupsMaintenanceWindow"),
			Location: to.Ptr("Global"),
			Tags:     map[string]*string{},
			Properties: &armalertsmanagement.AlertProcessingRuleProperties{
				Description: to.Ptr("Removes all ActionGroups from all Alerts on VMName during the maintenance window"),
				Actions: []armalertsmanagement.ActionClassification{
					&armalertsmanagement.RemoveAllActionGroups{
						ActionType: to.Ptr(armalertsmanagement.ActionTypeRemoveAllActionGroups),
					}},
				Enabled: to.Ptr(true),
				Schedule: &armalertsmanagement.Schedule{
					EffectiveFrom:  to.Ptr("2021-04-15T18:00:00"),
					EffectiveUntil: to.Ptr("2021-04-15T20:00:00"),
					TimeZone:       to.Ptr("Pacific Standard Time"),
				},
				Scopes: []*string{
					to.Ptr("/subscriptions/subId1/resourceGroups/RGId1/providers/Microsoft.Compute/virtualMachines/VMName")},
			},
			SystemData: &armalertsmanagement.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-12T20:13:29Z"); return t }()),
				CreatedBy:          to.Ptr("abc@microsoft.com"),
				CreatedByType:      to.Ptr(armalertsmanagement.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-12T22:05:09Z"); return t }()),
				LastModifiedBy:     to.Ptr("xyz@microsoft.com"),
				LastModifiedByType: to.Ptr(armalertsmanagement.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AlertProcessingRule) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AlertProcessingRule)
			t.Fatalf("Mock response is not equal to example response for example specification/alertsmanagement/resource-manager/Microsoft.AlertsManagement/stable/2021-08-08/examples/AlertProcessingRules_Create_or_update_remove_all_action_groups_specific_VM_one-off_maintenance_window.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/alertsmanagement/resource-manager/Microsoft.AlertsManagement/stable/2021-08-08/examples/AlertProcessingRules_Create_or_update_remove_all_action_groups_from_specific_alert_rule.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a rule that removes all action groups from all alerts in a subscription coming from a specific alert rule"},
	})
	client = armalertsmanagement.NewAlertProcessingRulesClient("subId1", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"alertscorrelationrg",
		"RemoveActionGroupsSpecificAlertRule",
		armalertsmanagement.AlertProcessingRule{
			Location: to.Ptr("Global"),
			Tags:     map[string]*string{},
			Properties: &armalertsmanagement.AlertProcessingRuleProperties{
				Description: to.Ptr("Removes all ActionGroups from all Alerts that fire on above AlertRule"),
				Actions: []armalertsmanagement.ActionClassification{
					&armalertsmanagement.RemoveAllActionGroups{
						ActionType: to.Ptr(armalertsmanagement.ActionTypeRemoveAllActionGroups),
					}},
				Conditions: []*armalertsmanagement.Condition{
					{
						Field:    to.Ptr(armalertsmanagement.FieldAlertRuleID),
						Operator: to.Ptr(armalertsmanagement.OperatorEquals),
						Values: []*string{
							to.Ptr("/subscriptions/suubId1/resourceGroups/Rgid2/providers/microsoft.insights/activityLogAlerts/RuleName")},
					}},
				Enabled: to.Ptr(true),
				Scopes: []*string{
					to.Ptr("/subscriptions/subId1")},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/alertsmanagement/resource-manager/Microsoft.AlertsManagement/stable/2021-08-08/examples/AlertProcessingRules_Create_or_update_remove_all_action_groups_from_specific_alert_rule.json: %v", err)
	}
	// Response check
	{
		exampleRes := armalertsmanagement.AlertProcessingRule{
			Name:     to.Ptr("RemoveActionGroupsSpecificAlertRule"),
			Type:     to.Ptr("Microsoft.AlertsManagement/actionRules"),
			ID:       to.Ptr("/subscriptions/subId1/resourceGroups/alertscorrelationrg/providers/Microsoft.AlertsManagement/actionRules/RemoveActionGroupsSpecificAlertRule"),
			Location: to.Ptr("Global"),
			Tags:     map[string]*string{},
			Properties: &armalertsmanagement.AlertProcessingRuleProperties{
				Description: to.Ptr("Removes all ActionGroups from all Alerts that fire on above AlertRule"),
				Actions: []armalertsmanagement.ActionClassification{
					&armalertsmanagement.RemoveAllActionGroups{
						ActionType: to.Ptr(armalertsmanagement.ActionTypeRemoveAllActionGroups),
					}},
				Conditions: []*armalertsmanagement.Condition{
					{
						Field:    to.Ptr(armalertsmanagement.FieldAlertRuleID),
						Operator: to.Ptr(armalertsmanagement.OperatorEquals),
						Values: []*string{
							to.Ptr("/subscriptions/suubId1/resourceGroups/Rgid2/providers/microsoft.insights/activityLogAlerts/RuleName")},
					}},
				Enabled: to.Ptr(true),
				Scopes: []*string{
					to.Ptr("/subscriptions/subId1")},
			},
			SystemData: &armalertsmanagement.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-11T22:05:09Z"); return t }()),
				CreatedBy:          to.Ptr("abc@microsoft.com"),
				CreatedByType:      to.Ptr(armalertsmanagement.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-12T22:05:09Z"); return t }()),
				LastModifiedBy:     to.Ptr("xyz@microsoft.com"),
				LastModifiedByType: to.Ptr(armalertsmanagement.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AlertProcessingRule) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AlertProcessingRule)
			t.Fatalf("Mock response is not equal to example response for example specification/alertsmanagement/resource-manager/Microsoft.AlertsManagement/stable/2021-08-08/examples/AlertProcessingRules_Create_or_update_remove_all_action_groups_from_specific_alert_rule.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/alertsmanagement/resource-manager/Microsoft.AlertsManagement/stable/2021-08-08/examples/AlertProcessingRules_Create_or_update_remove_all_action_groups_recurring_maintenance_window.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a rule that removes all action groups from all alerts on any VM in two resource groups during a recurring maintenance window (2200-0400 every Sat and Sun, India Standard Time)"},
	})
	client = armalertsmanagement.NewAlertProcessingRulesClient("subId1", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"alertscorrelationrg",
		"RemoveActionGroupsRecurringMaintenance",
		armalertsmanagement.AlertProcessingRule{
			Location: to.Ptr("Global"),
			Tags:     map[string]*string{},
			Properties: &armalertsmanagement.AlertProcessingRuleProperties{
				Description: to.Ptr("Remove all ActionGroups from all Vitual machine Alerts during the recurring maintenance"),
				Actions: []armalertsmanagement.ActionClassification{
					&armalertsmanagement.RemoveAllActionGroups{
						ActionType: to.Ptr(armalertsmanagement.ActionTypeRemoveAllActionGroups),
					}},
				Conditions: []*armalertsmanagement.Condition{
					{
						Field:    to.Ptr(armalertsmanagement.FieldTargetResourceType),
						Operator: to.Ptr(armalertsmanagement.OperatorEquals),
						Values: []*string{
							to.Ptr("microsoft.compute/virtualmachines")},
					}},
				Enabled: to.Ptr(true),
				Schedule: &armalertsmanagement.Schedule{
					Recurrences: []armalertsmanagement.RecurrenceClassification{
						&armalertsmanagement.WeeklyRecurrence{
							EndTime:        to.Ptr("04:00:00"),
							RecurrenceType: to.Ptr(armalertsmanagement.RecurrenceTypeWeekly),
							StartTime:      to.Ptr("22:00:00"),
							DaysOfWeek: []*armalertsmanagement.DaysOfWeek{
								to.Ptr(armalertsmanagement.DaysOfWeekSaturday),
								to.Ptr(armalertsmanagement.DaysOfWeekSunday)},
						}},
					TimeZone: to.Ptr("India Standard Time"),
				},
				Scopes: []*string{
					to.Ptr("/subscriptions/subId1/resourceGroups/RGId1"),
					to.Ptr("/subscriptions/subId1/resourceGroups/RGId2")},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/alertsmanagement/resource-manager/Microsoft.AlertsManagement/stable/2021-08-08/examples/AlertProcessingRules_Create_or_update_remove_all_action_groups_recurring_maintenance_window.json: %v", err)
	}
	// Response check
	{
		exampleRes := armalertsmanagement.AlertProcessingRule{
			Name:     to.Ptr("RemoveActionGroupsRecurringMaintenance"),
			Type:     to.Ptr("Microsoft.AlertsManagement/actionRules"),
			ID:       to.Ptr("/subscriptions/subId1/resourceGroups/alertscorrelationrg/providers/Microsoft.AlertsManagement/actionRules/RemoveActionGroupsRecurringMaintenance"),
			Location: to.Ptr("Global"),
			Tags:     map[string]*string{},
			Properties: &armalertsmanagement.AlertProcessingRuleProperties{
				Description: to.Ptr("Remove all ActionGroups from all Vitual machine Alerts during the recurring maintenance"),
				Actions: []armalertsmanagement.ActionClassification{
					&armalertsmanagement.RemoveAllActionGroups{
						ActionType: to.Ptr(armalertsmanagement.ActionTypeRemoveAllActionGroups),
					}},
				Conditions: []*armalertsmanagement.Condition{
					{
						Field:    to.Ptr(armalertsmanagement.FieldTargetResourceType),
						Operator: to.Ptr(armalertsmanagement.OperatorEquals),
						Values: []*string{
							to.Ptr("microsoft.compute/virtualmachines")},
					}},
				Enabled: to.Ptr(true),
				Schedule: &armalertsmanagement.Schedule{
					Recurrences: []armalertsmanagement.RecurrenceClassification{
						&armalertsmanagement.WeeklyRecurrence{
							EndTime:        to.Ptr("04:00:00"),
							RecurrenceType: to.Ptr(armalertsmanagement.RecurrenceTypeWeekly),
							StartTime:      to.Ptr("22:00:00"),
							DaysOfWeek: []*armalertsmanagement.DaysOfWeek{
								to.Ptr(armalertsmanagement.DaysOfWeekSaturday),
								to.Ptr(armalertsmanagement.DaysOfWeekSunday)},
						}},
					TimeZone: to.Ptr("India Standard Time"),
				},
				Scopes: []*string{
					to.Ptr("/subscriptions/subId1/resourceGroups/RGId1"),
					to.Ptr("/subscriptions/subId1/resourceGroups/RGId2")},
			},
			SystemData: &armalertsmanagement.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-11T22:05:09Z"); return t }()),
				CreatedBy:          to.Ptr("abc@microsoft.com"),
				CreatedByType:      to.Ptr(armalertsmanagement.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-12T22:05:09Z"); return t }()),
				LastModifiedBy:     to.Ptr("xyz@microsoft.com"),
				LastModifiedByType: to.Ptr(armalertsmanagement.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AlertProcessingRule) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AlertProcessingRule)
			t.Fatalf("Mock response is not equal to example response for example specification/alertsmanagement/resource-manager/Microsoft.AlertsManagement/stable/2021-08-08/examples/AlertProcessingRules_Create_or_update_remove_all_action_groups_recurring_maintenance_window.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/alertsmanagement/resource-manager/Microsoft.AlertsManagement/stable/2021-08-08/examples/AlertProcessingRules_Create_or_update_remove_all_action_groups_outside_business_hours.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a rule that removes all action groups outside business hours (Mon-Fri 09:00-17:00, Eastern Standard Time)"},
	})
	client = armalertsmanagement.NewAlertProcessingRulesClient("subId1", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"alertscorrelationrg",
		"RemoveActionGroupsOutsideBusinessHours",
		armalertsmanagement.AlertProcessingRule{
			Location: to.Ptr("Global"),
			Tags:     map[string]*string{},
			Properties: &armalertsmanagement.AlertProcessingRuleProperties{
				Description: to.Ptr("Remove all ActionGroups outside business hours"),
				Actions: []armalertsmanagement.ActionClassification{
					&armalertsmanagement.RemoveAllActionGroups{
						ActionType: to.Ptr(armalertsmanagement.ActionTypeRemoveAllActionGroups),
					}},
				Enabled: to.Ptr(true),
				Schedule: &armalertsmanagement.Schedule{
					Recurrences: []armalertsmanagement.RecurrenceClassification{
						&armalertsmanagement.DailyRecurrence{
							EndTime:        to.Ptr("09:00:00"),
							RecurrenceType: to.Ptr(armalertsmanagement.RecurrenceTypeDaily),
							StartTime:      to.Ptr("17:00:00"),
						},
						&armalertsmanagement.WeeklyRecurrence{
							RecurrenceType: to.Ptr(armalertsmanagement.RecurrenceTypeWeekly),
							DaysOfWeek: []*armalertsmanagement.DaysOfWeek{
								to.Ptr(armalertsmanagement.DaysOfWeekSaturday),
								to.Ptr(armalertsmanagement.DaysOfWeekSunday)},
						}},
					TimeZone: to.Ptr("Eastern Standard Time"),
				},
				Scopes: []*string{
					to.Ptr("/subscriptions/subId1")},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/alertsmanagement/resource-manager/Microsoft.AlertsManagement/stable/2021-08-08/examples/AlertProcessingRules_Create_or_update_remove_all_action_groups_outside_business_hours.json: %v", err)
	}
	// Response check
	{
		exampleRes := armalertsmanagement.AlertProcessingRule{
			Name:     to.Ptr("RemoveActionGroupsOutsideBusinessHours"),
			Type:     to.Ptr("Microsoft.AlertsManagement/actionRules"),
			ID:       to.Ptr("/subscriptions/subId1/resourceGroups/alertscorrelationrg/providers/Microsoft.AlertsManagement/actionRules/RemoveActionGroupsOutsideBusinessHours"),
			Location: to.Ptr("Global"),
			Tags:     map[string]*string{},
			Properties: &armalertsmanagement.AlertProcessingRuleProperties{
				Description: to.Ptr("Remove all ActionGroups outside business hours"),
				Actions: []armalertsmanagement.ActionClassification{
					&armalertsmanagement.RemoveAllActionGroups{
						ActionType: to.Ptr(armalertsmanagement.ActionTypeRemoveAllActionGroups),
					}},
				Enabled: to.Ptr(true),
				Schedule: &armalertsmanagement.Schedule{
					Recurrences: []armalertsmanagement.RecurrenceClassification{
						&armalertsmanagement.DailyRecurrence{
							EndTime:        to.Ptr("09:00:00"),
							RecurrenceType: to.Ptr(armalertsmanagement.RecurrenceTypeDaily),
							StartTime:      to.Ptr("17:00:00"),
						},
						&armalertsmanagement.WeeklyRecurrence{
							RecurrenceType: to.Ptr(armalertsmanagement.RecurrenceTypeWeekly),
							DaysOfWeek: []*armalertsmanagement.DaysOfWeek{
								to.Ptr(armalertsmanagement.DaysOfWeekSaturday),
								to.Ptr(armalertsmanagement.DaysOfWeekSunday)},
						}},
					TimeZone: to.Ptr("Eastern Standard Time"),
				},
				Scopes: []*string{
					to.Ptr("/subscriptions/subId1")},
			},
			SystemData: &armalertsmanagement.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-11T22:05:09Z"); return t }()),
				CreatedBy:          to.Ptr("abc@microsoft.com"),
				CreatedByType:      to.Ptr(armalertsmanagement.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-12T22:05:09Z"); return t }()),
				LastModifiedBy:     to.Ptr("xyz@microsoft.com"),
				LastModifiedByType: to.Ptr(armalertsmanagement.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AlertProcessingRule) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AlertProcessingRule)
			t.Fatalf("Mock response is not equal to example response for example specification/alertsmanagement/resource-manager/Microsoft.AlertsManagement/stable/2021-08-08/examples/AlertProcessingRules_Create_or_update_remove_all_action_groups_outside_business_hours.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAlertProcessingRules_Delete(t *testing.T) {
	// From example specification/alertsmanagement/resource-manager/Microsoft.AlertsManagement/stable/2021-08-08/examples/AlertProcessingRules_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DeleteAlertProcessingRule"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armalertsmanagement.NewAlertProcessingRulesClient("1e3ff1c0-771a-4119-a03b-be82a51e232d", cred, &options)
	_, err := client.Delete(ctx,
		"alertscorrelationrg",
		"DailySuppression",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/alertsmanagement/resource-manager/Microsoft.AlertsManagement/stable/2021-08-08/examples/AlertProcessingRules_Delete.json: %v", err)
	}
}

func TestAlertProcessingRules_Update(t *testing.T) {
	// From example specification/alertsmanagement/resource-manager/Microsoft.AlertsManagement/stable/2021-08-08/examples/AlertProcessingRules_Patch.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PatchAlertProcessingRule"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armalertsmanagement.NewAlertProcessingRulesClient("1e3ff1c0-771a-4119-a03b-be82a51e232d", cred, &options)
	res, err := client.Update(ctx,
		"alertscorrelationrg",
		"WeeklySuppression",
		armalertsmanagement.PatchObject{
			Properties: &armalertsmanagement.PatchProperties{
				Enabled: to.Ptr(false),
			},
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
				"key2": to.Ptr("value2"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/alertsmanagement/resource-manager/Microsoft.AlertsManagement/stable/2021-08-08/examples/AlertProcessingRules_Patch.json: %v", err)
	}
	// Response check
	{
		exampleRes := armalertsmanagement.AlertProcessingRule{
			Name:     to.Ptr("WeeklySuppression"),
			Type:     to.Ptr("Microsoft.AlertsManagement/actionRules"),
			ID:       to.Ptr("/subscriptions/1e3ff1c0-771a-4119-a03b-be82a51e232d/resourceGroups/alertscorrelationrg/providers/Microsoft.AlertsManagement/actionRules/WeeklySuppression"),
			Location: to.Ptr("Global"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
				"key2": to.Ptr("value2"),
			},
			Properties: &armalertsmanagement.AlertProcessingRuleProperties{
				Description: to.Ptr("Alert processing rule on resource group for weekly suppression"),
				Actions: []armalertsmanagement.ActionClassification{
					&armalertsmanagement.RemoveAllActionGroups{
						ActionType: to.Ptr(armalertsmanagement.ActionTypeRemoveAllActionGroups),
					}},
				Conditions: []*armalertsmanagement.Condition{
					{
						Field:    to.Ptr(armalertsmanagement.FieldSeverity),
						Operator: to.Ptr(armalertsmanagement.OperatorEquals),
						Values: []*string{
							to.Ptr("Sev0"),
							to.Ptr("Sev2")},
					},
					{
						Field:    to.Ptr(armalertsmanagement.FieldMonitorService),
						Operator: to.Ptr(armalertsmanagement.OperatorEquals),
						Values: []*string{
							to.Ptr("Platform"),
							to.Ptr("Application Insights")},
					},
					{
						Field:    to.Ptr(armalertsmanagement.FieldTargetResourceType),
						Operator: to.Ptr(armalertsmanagement.OperatorNotEquals),
						Values: []*string{
							to.Ptr("Microsoft.Compute/VirtualMachines")},
					}},
				Enabled: to.Ptr(false),
				Schedule: &armalertsmanagement.Schedule{
					EffectiveFrom:  to.Ptr("2018-12-10T22:05:09"),
					EffectiveUntil: to.Ptr("2018-12-05T22:05:09"),
					Recurrences: []armalertsmanagement.RecurrenceClassification{
						&armalertsmanagement.WeeklyRecurrence{
							EndTime:        to.Ptr("14:00:00"),
							RecurrenceType: to.Ptr(armalertsmanagement.RecurrenceTypeWeekly),
							StartTime:      to.Ptr("06:00:00"),
							DaysOfWeek: []*armalertsmanagement.DaysOfWeek{
								to.Ptr(armalertsmanagement.DaysOfWeekTuesday),
								to.Ptr(armalertsmanagement.DaysOfWeekFriday)},
						}},
					TimeZone: to.Ptr("Pacific Standard Time"),
				},
				Scopes: []*string{
					to.Ptr("/subscriptions/1e3ff1c0-771a-4119-a03b-be82a51e232d/resourceGroups/alertscorrelationrg")},
			},
			SystemData: &armalertsmanagement.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-12T22:05:09Z"); return t }()),
				CreatedBy:          to.Ptr("abc@microsoft.com"),
				CreatedByType:      to.Ptr(armalertsmanagement.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-12T22:05:09Z"); return t }()),
				LastModifiedBy:     to.Ptr("xyz@microsoft.com"),
				LastModifiedByType: to.Ptr(armalertsmanagement.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AlertProcessingRule) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AlertProcessingRule)
			t.Fatalf("Mock response is not equal to example response for example specification/alertsmanagement/resource-manager/Microsoft.AlertsManagement/stable/2021-08-08/examples/AlertProcessingRules_Patch.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOperations_List(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAlerts_MetaData(t *testing.T) {
	// From example specification/alertsmanagement/resource-manager/Microsoft.AlertsManagement/preview/2019-05-05-preview/examples/AlertsMetaData_MonitorService.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"MonService"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armalertsmanagement.NewAlertsClient("<subscription-id>", cred, &options)
	res, err := client.MetaData(ctx,
		armalertsmanagement.IdentifierMonitorServiceList,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/alertsmanagement/resource-manager/Microsoft.AlertsManagement/preview/2019-05-05-preview/examples/AlertsMetaData_MonitorService.json: %v", err)
	}
	// Response check
	{
		exampleRes := armalertsmanagement.AlertsMetaData{
			Properties: &armalertsmanagement.MonitorServiceList{
				MetadataIdentifier: to.Ptr(armalertsmanagement.MetadataIdentifierMonitorServiceList),
				Data: []*armalertsmanagement.MonitorServiceDetails{
					{
						Name:        to.Ptr("ActivityLog Administrative"),
						DisplayName: to.Ptr("Activity Log - Administrative"),
					},
					{
						Name:        to.Ptr("ActivityLog Autoscale"),
						DisplayName: to.Ptr("Activity Log - Autoscale"),
					},
					{
						Name:        to.Ptr("ActivityLog Policy"),
						DisplayName: to.Ptr("Activity Log - Policy"),
					},
					{
						Name:        to.Ptr("ActivityLog Recommendation"),
						DisplayName: to.Ptr("Activity Log - Recommendation"),
					},
					{
						Name:        to.Ptr("ActivityLog Security"),
						DisplayName: to.Ptr("Activity Log - Security"),
					},
					{
						Name:        to.Ptr("Application Insights"),
						DisplayName: to.Ptr("Application Insights"),
					},
					{
						Name:        to.Ptr("Azure Backup"),
						DisplayName: to.Ptr("Azure Backup"),
					},
					{
						Name:        to.Ptr("Custom"),
						DisplayName: to.Ptr("Custom"),
					},
					{
						Name:        to.Ptr("Data Box Edge"),
						DisplayName: to.Ptr("Data Box Edge"),
					},
					{
						Name:        to.Ptr("VM Insights"),
						DisplayName: to.Ptr("VM Insights"),
					},
					{
						Name:        to.Ptr("Log Analytics"),
						DisplayName: to.Ptr("Log Analytics"),
					},
					{
						Name:        to.Ptr("Nagios"),
						DisplayName: to.Ptr("NAGIOS"),
					},
					{
						Name:        to.Ptr("Platform"),
						DisplayName: to.Ptr("Platform"),
					},
					{
						Name:        to.Ptr("Resource Health"),
						DisplayName: to.Ptr("Resource Health"),
					},
					{
						Name:        to.Ptr("SCOM"),
						DisplayName: to.Ptr("SCOM"),
					},
					{
						Name:        to.Ptr("ServiceHealth"),
						DisplayName: to.Ptr("Service Health"),
					},
					{
						Name:        to.Ptr("Smart Detector"),
						DisplayName: to.Ptr("SmartDetector"),
					},
					{
						Name:        to.Ptr("Zabbix"),
						DisplayName: to.Ptr("ZABBIX"),
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AlertsMetaData) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AlertsMetaData)
			t.Fatalf("Mock response is not equal to example response for example specification/alertsmanagement/resource-manager/Microsoft.AlertsManagement/preview/2019-05-05-preview/examples/AlertsMetaData_MonitorService.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAlerts_GetAll(t *testing.T) {
	// From example specification/alertsmanagement/resource-manager/Microsoft.AlertsManagement/preview/2019-05-05-preview/examples/Alerts_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ListAlerts"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armalertsmanagement.NewAlertsClient("1e3ff1c0-771a-4119-a03b-be82a51e232d", cred, &options)
	pager := client.GetAll(&armalertsmanagement.AlertsClientGetAllOptions{TargetResource: nil,
		TargetResourceType:  nil,
		TargetResourceGroup: nil,
		MonitorService:      nil,
		MonitorCondition:    nil,
		Severity:            nil,
		AlertState:          nil,
		AlertRule:           nil,
		SmartGroupID:        nil,
		IncludeContext:      nil,
		IncludeEgressConfig: nil,
		PageCount:           nil,
		SortBy:              nil,
		SortOrder:           nil,
		Select:              nil,
		TimeRange:           nil,
		CustomTimeRange:     nil,
	})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/alertsmanagement/resource-manager/Microsoft.AlertsManagement/preview/2019-05-05-preview/examples/Alerts_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armalertsmanagement.AlertsList{
			Value: []*armalertsmanagement.Alert{
				{
					Name: to.Ptr("cpu alert"),
					Type: to.Ptr("Microsoft.AlertsManagement/alerts"),
					ID:   to.Ptr("/subscriptions/9e261de7-c804-4b9d-9ebf-6f50fe350a9a/providers/Microsoft.AlertsManagement/alerts/66114d64-d9d9-478b-95c9-b789d6502100"),
					Properties: &armalertsmanagement.AlertProperties{
						Context:      map[string]interface{}{},
						EgressConfig: map[string]interface{}{},
						Essentials: &armalertsmanagement.Essentials{
							Description: to.Ptr("description of the alert"),
							ActionStatus: &armalertsmanagement.ActionStatus{
								IsSuppressed: to.Ptr(false),
							},
							AlertRule:                        to.Ptr("https://servisdffsdf.portal.mms.microsoft.com/#Workspace/overview/settings/details/Edit Alert Rule/details/index?savedSearchId=&scheduleId="),
							AlertState:                       to.Ptr(armalertsmanagement.AlertStateAcknowledged),
							LastModifiedDateTime:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-09-13T15:51:02Z"); return t }()),
							LastModifiedUserName:             to.Ptr("System"),
							MonitorCondition:                 to.Ptr(armalertsmanagement.MonitorConditionFired),
							MonitorConditionResolvedDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-09-13T15:51:02Z"); return t }()),
							MonitorService:                   to.Ptr(armalertsmanagement.MonitorServiceApplicationInsights),
							Severity:                         to.Ptr(armalertsmanagement.SeveritySev3),
							SignalType:                       to.Ptr(armalertsmanagement.SignalTypeLog),
							SmartGroupID:                     to.Ptr("23d6b2ce-8c54-468f-aff0-sd32aebb7e56"),
							SmartGroupingReason:              to.Ptr("Occurred frequently with other alerts"),
							SourceCreatedID:                  to.Ptr("6cd6b2ce-8c54-468f-aff0-9d12aebb7e49"),
							StartDateTime:                    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-09-13T15:51:02Z"); return t }()),
							TargetResource:                   to.Ptr("/subscriptions/3b540246-808d-4331-99aa-917b808a9166/resourcegroups/servicedeskresourcegroup/providers/microsoft.insights/components/servicedeskappinsight"),
							TargetResourceGroup:              to.Ptr("servicedeskresourcegroup"),
							TargetResourceName:               to.Ptr("servicedeskappinsight"),
							TargetResourceType:               to.Ptr("components"),
						},
					},
				},
				{
					Name: to.Ptr("cpu alert"),
					Type: to.Ptr("Microsoft.AlertsManagement/alerts"),
					ID:   to.Ptr("/subscriptions/9e261de7-c804-4b9d-9ebf-6f50fe350a9a/providers/Microsoft.AlertsManagement/alerts/66114d64-d9d9-478b-95c9-b789d6502100"),
					Properties: &armalertsmanagement.AlertProperties{
						Context:      map[string]interface{}{},
						EgressConfig: map[string]interface{}{},
						Essentials: &armalertsmanagement.Essentials{
							Description: to.Ptr("description of the alert"),
							ActionStatus: &armalertsmanagement.ActionStatus{
								IsSuppressed: to.Ptr(false),
							},
							AlertRule:                        to.Ptr("https://servicsdfsdf.portal.mms.microsoft.com/#Workspace/overview/settings/details/Edit Alert Rule/details/index?savedSearchId=&scheduleId="),
							AlertState:                       to.Ptr(armalertsmanagement.AlertStateNew),
							LastModifiedDateTime:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-09-13T15:51:02Z"); return t }()),
							LastModifiedUserName:             to.Ptr("System"),
							MonitorCondition:                 to.Ptr(armalertsmanagement.MonitorConditionFired),
							MonitorConditionResolvedDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-09-13T15:51:02Z"); return t }()),
							MonitorService:                   to.Ptr(armalertsmanagement.MonitorServiceApplicationInsights),
							Severity:                         to.Ptr(armalertsmanagement.SeveritySev3),
							SignalType:                       to.Ptr(armalertsmanagement.SignalTypeLog),
							SmartGroupID:                     to.Ptr("d1c49c89-ea95-4697-a299-c0f5ebac62f1"),
							SmartGroupingReason:              to.Ptr("Alerts that frequently occur together have been grouped."),
							SourceCreatedID:                  to.Ptr("6cd6b2ce-8c54-468f-aff0-9d12aebb7e49"),
							StartDateTime:                    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-09-13T15:51:02Z"); return t }()),
							TargetResource:                   to.Ptr("/subscriptions/3b540246-808d-4331-99aa-917b808a9166/resourcegroups/cind/providers/microsoft.operationalinsights/workspaces/servicedeskwcus"),
							TargetResourceGroup:              to.Ptr("servicedeskresourcegroup"),
							TargetResourceName:               to.Ptr("servicedeskwcus"),
							TargetResourceType:               to.Ptr("components"),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AlertsList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AlertsList)
			t.Fatalf("Mock response is not equal to example response for example specification/alertsmanagement/resource-manager/Microsoft.AlertsManagement/preview/2019-05-05-preview/examples/Alerts_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAlerts_ChangeState(t *testing.T) {
	// From example specification/alertsmanagement/resource-manager/Microsoft.AlertsManagement/preview/2019-05-05-preview/examples/Alerts_ChangeState.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Resolve"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armalertsmanagement.NewAlertsClient("9e261de7-c804-4b9d-9ebf-6f50fe350a9a", cred, &options)
	res, err := client.ChangeState(ctx,
		"66114d64-d9d9-478b-95c9-b789d6502100",
		armalertsmanagement.AlertStateAcknowledged,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/alertsmanagement/resource-manager/Microsoft.AlertsManagement/preview/2019-05-05-preview/examples/Alerts_ChangeState.json: %v", err)
	}
	// Response check
	{
		exampleRes := armalertsmanagement.Alert{
			Name: to.Ptr("cpu alert"),
			Type: to.Ptr("Microsoft.AlertsManagement/alerts"),
			ID:   to.Ptr("/subscriptions/9e261de7-c804-4b9d-9ebf-6f50fe350a9a/providers/Microsoft.AlertsManagement/alerts/66114d64-d9d9-478b-95c9-b789d6502100"),
			Properties: &armalertsmanagement.AlertProperties{
				Context:      map[string]interface{}{},
				EgressConfig: map[string]interface{}{},
				Essentials: &armalertsmanagement.Essentials{
					Description: to.Ptr("description of the alert"),
					ActionStatus: &armalertsmanagement.ActionStatus{
						IsSuppressed: to.Ptr(false),
					},
					AlertRule:                        to.Ptr("https://servisdfsdfappinsight.portal.mms.microsoft.com/#Workspace/overview/settings/details/Edit Alert Rule/details/index?savedSearchId=&scheduleId="),
					AlertState:                       to.Ptr(armalertsmanagement.AlertStateAcknowledged),
					LastModifiedDateTime:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-09-13T15:51:02Z"); return t }()),
					LastModifiedUserName:             to.Ptr("System"),
					MonitorCondition:                 to.Ptr(armalertsmanagement.MonitorConditionFired),
					MonitorConditionResolvedDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-09-13T15:51:02Z"); return t }()),
					MonitorService:                   to.Ptr(armalertsmanagement.MonitorServiceApplicationInsights),
					Severity:                         to.Ptr(armalertsmanagement.SeveritySev3),
					SignalType:                       to.Ptr(armalertsmanagement.SignalTypeLog),
					SmartGroupID:                     to.Ptr("23d6b2ce-8c54-468f-aff0-sd32aebb7e56"),
					SmartGroupingReason:              to.Ptr("Occurred frequently with other alerts"),
					SourceCreatedID:                  to.Ptr("6cd6b2ce-8c54-468f-aff0-9d12aebb7e49"),
					StartDateTime:                    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-09-13T15:51:02Z"); return t }()),
					TargetResource:                   to.Ptr("/subscriptions/3b540246-808d-4331-99aa-917b808a9166/resourcegroups/servicedeskresourcegroup/providers/microsoft.insights/components/servicedeskappinsight"),
					TargetResourceGroup:              to.Ptr("servicedeskresourcegroup"),
					TargetResourceName:               to.Ptr("servicedeskappinsight"),
					TargetResourceType:               to.Ptr("components"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Alert) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Alert)
			t.Fatalf("Mock response is not equal to example response for example specification/alertsmanagement/resource-manager/Microsoft.AlertsManagement/preview/2019-05-05-preview/examples/Alerts_ChangeState.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAlerts_GetHistory(t *testing.T) {
	// From example specification/alertsmanagement/resource-manager/Microsoft.AlertsManagement/preview/2019-05-05-preview/examples/Alerts_History.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Resolve"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armalertsmanagement.NewAlertsClient("9e261de7-c804-4b9d-9ebf-6f50fe350a9a", cred, &options)
	res, err := client.GetHistory(ctx,
		"66114d64-d9d9-478b-95c9-b789d6502100",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/alertsmanagement/resource-manager/Microsoft.AlertsManagement/preview/2019-05-05-preview/examples/Alerts_History.json: %v", err)
	}
	// Response check
	{
		exampleRes := armalertsmanagement.AlertModification{
			Name: to.Ptr("CPU Alert"),
			Type: to.Ptr("Microsoft.AlertsManagement/alerts"),
			ID:   to.Ptr("/subscriptions/9e261de7-c804-4b9d-9ebf-6f50fe350a9a/providers/Microsoft.AlertsManagement/alerts/66114d64-d9d9-478b-95c9-b789d6502100/history/default"),
			Properties: &armalertsmanagement.AlertModificationProperties{
				AlertID: to.Ptr("66114d64-d9d9-478b-95c9-b789d6502100"),
				Modifications: []*armalertsmanagement.AlertModificationItem{
					{
						Description:       to.Ptr("State changed from 'New' to 'Acknowledged'"),
						Comments:          to.Ptr("Acknowledging alert"),
						ModificationEvent: to.Ptr(armalertsmanagement.AlertModificationEventStateChange),
						ModifiedAt:        to.Ptr("2018-06-13T06:14:15.7378737Z"),
						ModifiedBy:        to.Ptr("vikramm@microsoft.com"),
						NewValue:          to.Ptr("Acknowledged"),
						OldValue:          to.Ptr("New"),
					},
					{
						Description:       to.Ptr("New Alert Object is created"),
						Comments:          to.Ptr(""),
						ModificationEvent: to.Ptr(armalertsmanagement.AlertModificationEventAlertCreated),
						ModifiedAt:        to.Ptr("2018-06-13T06:09:01Z"),
						ModifiedBy:        to.Ptr("System"),
						NewValue:          to.Ptr(""),
						OldValue:          to.Ptr(""),
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AlertModification) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AlertModification)
			t.Fatalf("Mock response is not equal to example response for example specification/alertsmanagement/resource-manager/Microsoft.AlertsManagement/preview/2019-05-05-preview/examples/Alerts_History.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAlerts_GetSummary(t *testing.T) {
	// From example specification/alertsmanagement/resource-manager/Microsoft.AlertsManagement/preview/2019-05-05-preview/examples/Alerts_Summary.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Summary"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armalertsmanagement.NewAlertsClient("1e3ff1c0-771a-4119-a03b-be82a51e232d", cred, &options)
	res, err := client.GetSummary(ctx,
		armalertsmanagement.AlertsSummaryGroupByFields("severity,alertState"),
		&armalertsmanagement.AlertsClientGetSummaryOptions{IncludeSmartGroupsCount: nil,
			TargetResource:      nil,
			TargetResourceType:  nil,
			TargetResourceGroup: nil,
			MonitorService:      nil,
			MonitorCondition:    nil,
			Severity:            nil,
			AlertState:          nil,
			AlertRule:           nil,
			TimeRange:           nil,
			CustomTimeRange:     nil,
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/alertsmanagement/resource-manager/Microsoft.AlertsManagement/preview/2019-05-05-preview/examples/Alerts_Summary.json: %v", err)
	}
	// Response check
	{
		exampleRes := armalertsmanagement.AlertsSummary{
			Name: to.Ptr("current"),
			Type: to.Ptr("Microsoft.AlertsManagement/alertsSummary"),
			ID:   to.Ptr("/subscriptions/1e3ff1c0-771a-4119-a03b-be82a51e232d/providers/Microsoft.AlertsManagement/alertsSummary/current"),
			Properties: &armalertsmanagement.AlertsSummaryGroup{
				Groupedby:        to.Ptr("severity"),
				SmartGroupsCount: to.Ptr[int64](100),
				Total:            to.Ptr[int64](14189),
				Values: []*armalertsmanagement.AlertsSummaryGroupItem{
					{
						Name:      to.Ptr("Sev0"),
						Count:     to.Ptr[int64](6517),
						Groupedby: to.Ptr("alertState"),
						Values: []*armalertsmanagement.AlertsSummaryGroupItem{
							{
								Name:  to.Ptr("New"),
								Count: to.Ptr[int64](6517),
							},
							{
								Name:  to.Ptr("Acknowledged"),
								Count: to.Ptr[int64](0),
							},
							{
								Name:  to.Ptr("Closed"),
								Count: to.Ptr[int64](0),
							}},
					},
					{
						Name:      to.Ptr("Sev1"),
						Count:     to.Ptr[int64](3175),
						Groupedby: to.Ptr("alertState"),
						Values: []*armalertsmanagement.AlertsSummaryGroupItem{
							{
								Name:  to.Ptr("New"),
								Count: to.Ptr[int64](3175),
							},
							{
								Name:  to.Ptr("Acknowledged"),
								Count: to.Ptr[int64](0),
							},
							{
								Name:  to.Ptr("Closed"),
								Count: to.Ptr[int64](0),
							}},
					},
					{
						Name:      to.Ptr("Sev2"),
						Count:     to.Ptr[int64](1120),
						Groupedby: to.Ptr("alertState"),
						Values: []*armalertsmanagement.AlertsSummaryGroupItem{
							{
								Name:  to.Ptr("New"),
								Count: to.Ptr[int64](1120),
							},
							{
								Name:  to.Ptr("Acknowledged"),
								Count: to.Ptr[int64](0),
							},
							{
								Name:  to.Ptr("Closed"),
								Count: to.Ptr[int64](0),
							}},
					},
					{
						Name:      to.Ptr("Sev3"),
						Count:     to.Ptr[int64](1902),
						Groupedby: to.Ptr("alertState"),
						Values: []*armalertsmanagement.AlertsSummaryGroupItem{
							{
								Name:  to.Ptr("New"),
								Count: to.Ptr[int64](1902),
							},
							{
								Name:  to.Ptr("Acknowledged"),
								Count: to.Ptr[int64](0),
							},
							{
								Name:  to.Ptr("Closed"),
								Count: to.Ptr[int64](0),
							}},
					},
					{
						Name:      to.Ptr("Sev4"),
						Count:     to.Ptr[int64](1475),
						Groupedby: to.Ptr("alertState"),
						Values: []*armalertsmanagement.AlertsSummaryGroupItem{
							{
								Name:  to.Ptr("New"),
								Count: to.Ptr[int64](1475),
							},
							{
								Name:  to.Ptr("Acknowledged"),
								Count: to.Ptr[int64](0),
							},
							{
								Name:  to.Ptr("Closed"),
								Count: to.Ptr[int64](0),
							}},
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AlertsSummary) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AlertsSummary)
			t.Fatalf("Mock response is not equal to example response for example specification/alertsmanagement/resource-manager/Microsoft.AlertsManagement/preview/2019-05-05-preview/examples/Alerts_Summary.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSmartGroups_GetAll(t *testing.T) {
	// From example specification/alertsmanagement/resource-manager/Microsoft.AlertsManagement/preview/2019-05-05-preview/examples/SmartGroups_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armalertsmanagement.NewSmartGroupsClient("dd91de05-d791-4ceb-b6dc-988682dc7d72", cred, &options)
	pager := client.GetAll(&armalertsmanagement.SmartGroupsClientGetAllOptions{TargetResource: nil,
		TargetResourceGroup: nil,
		TargetResourceType:  nil,
		MonitorService:      nil,
		MonitorCondition:    nil,
		Severity:            nil,
		SmartGroupState:     nil,
		TimeRange:           nil,
		PageCount:           nil,
		SortBy:              nil,
		SortOrder:           nil,
	})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/alertsmanagement/resource-manager/Microsoft.AlertsManagement/preview/2019-05-05-preview/examples/SmartGroups_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armalertsmanagement.SmartGroupsList{
			Value: []*armalertsmanagement.SmartGroup{
				{
					Name: to.Ptr("cpu alert"),
					Type: to.Ptr("Microsoft.AlertsManagement/smartGroups"),
					ID:   to.Ptr("/subscriptions/dd91de05-d791-4ceb-b6dc-988682dc7d72/providers/Microsoft.AlertsManagement/smartGroups/a808445e-bb38-4751-85c2-1b109ccc1059"),
					Properties: &armalertsmanagement.SmartGroupProperties{
						AlertSeverities: []*armalertsmanagement.SmartGroupAggregatedProperty{
							{
								Name:  to.Ptr("Sev3"),
								Count: to.Ptr[int64](1942),
							}},
						AlertStates: []*armalertsmanagement.SmartGroupAggregatedProperty{
							{
								Name:  to.Ptr("New"),
								Count: to.Ptr[int64](1941),
							},
							{
								Name:  to.Ptr("Acknowledged"),
								Count: to.Ptr[int64](1),
							}},
						AlertsCount:          to.Ptr[int64](1942),
						LastModifiedDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-13T06:30:09Z"); return t }()),
						LastModifiedUserName: to.Ptr("System"),
						MonitorConditions: []*armalertsmanagement.SmartGroupAggregatedProperty{
							{
								Name:  to.Ptr("Fired"),
								Count: to.Ptr[int64](1942),
							}},
						MonitorServices: []*armalertsmanagement.SmartGroupAggregatedProperty{
							{
								Name:  to.Ptr("Application Insights"),
								Count: to.Ptr[int64](1942),
							}},
						ResourceGroups: []*armalertsmanagement.SmartGroupAggregatedProperty{
							{
								Name:  to.Ptr("alertscorrelationrg"),
								Count: to.Ptr[int64](1942),
							}},
						ResourceTypes: []*armalertsmanagement.SmartGroupAggregatedProperty{
							{
								Name:  to.Ptr("components"),
								Count: to.Ptr[int64](1942),
							}},
						Resources: []*armalertsmanagement.SmartGroupAggregatedProperty{
							{
								Name:  to.Ptr("/subscriptions/dd91de05-d791-4ceb-b6dc-988682dc7d72/resourcegroups/alertscorrelationrg/providers/microsoft.insights/components/alertscorrelationworkerrole_int"),
								Count: to.Ptr[int64](1942),
							}},
						Severity:        to.Ptr(armalertsmanagement.SeveritySev3),
						SmartGroupState: to.Ptr(armalertsmanagement.StateNew),
						StartDateTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-06T12:35:09Z"); return t }()),
					},
				},
				{
					Name: to.Ptr("CPU Alert"),
					Type: to.Ptr("Microsoft.AlertsManagement/smartGroups"),
					ID:   to.Ptr("/subscriptions/dd91de05-d791-4ceb-b6dc-988682dc7d72/providers/Microsoft.AlertsManagement/smartGroups/01114c7c-769f-4fd4-b6fa-ab77693b83cd"),
					Properties: &armalertsmanagement.SmartGroupProperties{
						AlertSeverities: []*armalertsmanagement.SmartGroupAggregatedProperty{
							{
								Name:  to.Ptr("Sev0"),
								Count: to.Ptr[int64](6984),
							},
							{
								Name:  to.Ptr("Sev1"),
								Count: to.Ptr[int64](6927),
							}},
						AlertStates: []*armalertsmanagement.SmartGroupAggregatedProperty{
							{
								Name:  to.Ptr("New"),
								Count: to.Ptr[int64](15358),
							},
							{
								Name:  to.Ptr("Acknowledged"),
								Count: to.Ptr[int64](12),
							},
							{
								Name:  to.Ptr("Closed"),
								Count: to.Ptr[int64](4),
							}},
						AlertsCount:          to.Ptr[int64](15374),
						LastModifiedDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-13T06:29:01Z"); return t }()),
						LastModifiedUserName: to.Ptr("System"),
						MonitorConditions: []*armalertsmanagement.SmartGroupAggregatedProperty{
							{
								Name:  to.Ptr("Fired"),
								Count: to.Ptr[int64](15374),
							}},
						MonitorServices: []*armalertsmanagement.SmartGroupAggregatedProperty{
							{
								Name:  to.Ptr("Log Analytics"),
								Count: to.Ptr[int64](13911),
							}},
						ResourceGroups: []*armalertsmanagement.SmartGroupAggregatedProperty{
							{
								Name:  to.Ptr("mms-eus"),
								Count: to.Ptr[int64](15374),
							}},
						ResourceTypes: []*armalertsmanagement.SmartGroupAggregatedProperty{
							{
								Name:  to.Ptr("microsoft.operationalinsights/workspaces"),
								Count: to.Ptr[int64](6912),
							},
							{
								Name:  to.Ptr("workspaces"),
								Count: to.Ptr[int64](8462),
							}},
						Resources: []*armalertsmanagement.SmartGroupAggregatedProperty{
							{
								Name:  to.Ptr("/subscriptions/dd91de05-d791-4ceb-b6dc-988682dc7d72/resourcegroups/mms-eus/providers/microsoft.operationalinsights/workspaces/alertsint"),
								Count: to.Ptr[int64](15374),
							}},
						Severity:        to.Ptr(armalertsmanagement.SeveritySev0),
						SmartGroupState: to.Ptr(armalertsmanagement.StateAcknowledged),
						StartDateTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-05-17T10:18:44.2020997Z"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SmartGroupsList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SmartGroupsList)
			t.Fatalf("Mock response is not equal to example response for example specification/alertsmanagement/resource-manager/Microsoft.AlertsManagement/preview/2019-05-05-preview/examples/SmartGroups_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSmartGroups_ChangeState(t *testing.T) {
	// From example specification/alertsmanagement/resource-manager/Microsoft.AlertsManagement/preview/2019-05-05-preview/examples/SmartGroups_ChangeState.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"changestate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armalertsmanagement.NewSmartGroupsClient("dd91de05-d791-4ceb-b6dc-988682dc7d72", cred, &options)
	res, err := client.ChangeState(ctx,
		"a808445e-bb38-4751-85c2-1b109ccc1059",
		armalertsmanagement.AlertStateAcknowledged,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/alertsmanagement/resource-manager/Microsoft.AlertsManagement/preview/2019-05-05-preview/examples/SmartGroups_ChangeState.json: %v", err)
	}
	// Response check
	{
		exampleRes := armalertsmanagement.SmartGroup{
			Name: to.Ptr("cpu alert"),
			Type: to.Ptr("Microsoft.AlertsManagement/smartGroups"),
			ID:   to.Ptr("/subscriptions/dd91de05-d791-4ceb-b6dc-988682dc7d72/providers/Microsoft.AlertsManagement/smartGroups/a808445e-bb38-4751-85c2-1b109ccc1059"),
			Properties: &armalertsmanagement.SmartGroupProperties{
				AlertSeverities: []*armalertsmanagement.SmartGroupAggregatedProperty{
					{
						Name:  to.Ptr("Sev3"),
						Count: to.Ptr[int64](1942),
					}},
				AlertStates: []*armalertsmanagement.SmartGroupAggregatedProperty{
					{
						Name:  to.Ptr("New"),
						Count: to.Ptr[int64](1941),
					},
					{
						Name:  to.Ptr("Acknowledged"),
						Count: to.Ptr[int64](1),
					}},
				AlertsCount:          to.Ptr[int64](1942),
				LastModifiedDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-13T06:30:09Z"); return t }()),
				LastModifiedUserName: to.Ptr("System"),
				MonitorConditions: []*armalertsmanagement.SmartGroupAggregatedProperty{
					{
						Name:  to.Ptr("Fired"),
						Count: to.Ptr[int64](1942),
					}},
				MonitorServices: []*armalertsmanagement.SmartGroupAggregatedProperty{
					{
						Name:  to.Ptr("Application Insights"),
						Count: to.Ptr[int64](1942),
					}},
				ResourceGroups: []*armalertsmanagement.SmartGroupAggregatedProperty{
					{
						Name:  to.Ptr("alertscorrelationrg"),
						Count: to.Ptr[int64](1942),
					}},
				ResourceTypes: []*armalertsmanagement.SmartGroupAggregatedProperty{
					{
						Name:  to.Ptr("components"),
						Count: to.Ptr[int64](1942),
					}},
				Resources: []*armalertsmanagement.SmartGroupAggregatedProperty{
					{
						Name:  to.Ptr("/subscriptions/dd91de05-d791-4ceb-b6dc-988682dc7d72/resourcegroups/alertscorrelationrg/providers/microsoft.insights/components/alertscorrelationworkerrole_int"),
						Count: to.Ptr[int64](1942),
					}},
				Severity:        to.Ptr(armalertsmanagement.SeveritySev3),
				SmartGroupState: to.Ptr(armalertsmanagement.StateAcknowledged),
				StartDateTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-06-06T12:35:09Z"); return t }()),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SmartGroup) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SmartGroup)
			t.Fatalf("Mock response is not equal to example response for example specification/alertsmanagement/resource-manager/Microsoft.AlertsManagement/preview/2019-05-05-preview/examples/SmartGroups_ChangeState.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSmartGroups_GetHistory(t *testing.T) {
	// From example specification/alertsmanagement/resource-manager/Microsoft.AlertsManagement/preview/2019-05-05-preview/examples/SmartGroups_History.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Resolve"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armalertsmanagement.NewSmartGroupsClient("9e261de7-c804-4b9d-9ebf-6f50fe350a9a", cred, &options)
	res, err := client.GetHistory(ctx,
		"a808445e-bb38-4751-85c2-1b109ccc1059",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/alertsmanagement/resource-manager/Microsoft.AlertsManagement/preview/2019-05-05-preview/examples/SmartGroups_History.json: %v", err)
	}
	// Response check
	{
		exampleRes := armalertsmanagement.SmartGroupModification{
			Name: to.Ptr("cpu alert"),
			Type: to.Ptr("Microsoft.AlertsManagement/alerts"),
			ID:   to.Ptr("/subscriptions/9e261de7-c804-4b9d-9ebf-6f50fe350a9a/providers/Microsoft.AlertsManagement/smartGroups/a808445e-bb38-4751-85c2-1b109ccc1059/history/default"),
			Properties: &armalertsmanagement.SmartGroupModificationProperties{
				Modifications: []*armalertsmanagement.SmartGroupModificationItem{
					{
						Description:       to.Ptr("New Smart Group is created"),
						Comments:          to.Ptr(""),
						ModificationEvent: to.Ptr(armalertsmanagement.SmartGroupModificationEventSmartGroupCreated),
						ModifiedAt:        to.Ptr("2018-06-06T12:35:09Z"),
						ModifiedBy:        to.Ptr("System"),
						NewValue:          to.Ptr(""),
						OldValue:          to.Ptr(""),
					}},
				SmartGroupID: to.Ptr("a808445e-bb38-4751-85c2-1b109ccc1059"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SmartGroupModification) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SmartGroupModification)
			t.Fatalf("Mock response is not equal to example response for example specification/alertsmanagement/resource-manager/Microsoft.AlertsManagement/preview/2019-05-05-preview/examples/SmartGroups_History.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
