//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armalertsmanagement

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"golang.org/x/net/http2"
)

var (
	ctx            context.Context
	subscriptionId string
	cred           azcore.TokenCredential
	err            error
	con            *arm.Connection
	mockHost       string
)

func TestActionRules_ListBySubscription(t *testing.T) {
	// From example GetActionRulesSubscriptionWide
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewActionRulesClient(con,
		"1e3ff1c0-771a-4119-a03b-be82a51e232d")
	pager := client.ListBySubscription(&ActionRulesListBySubscriptionOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ActionRule.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ActionRule.ID should not be nil!")
			}
		}
	}
}

func TestActionRules_ListByResourceGroup(t *testing.T) {
	// From example GetActionRulesResourceGroupWide
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewActionRulesClient(con,
		"1e3ff1c0-771a-4119-a03b-be82a51e232d")
	pager := client.ListByResourceGroup("alertscorrelationrg",
		&ActionRulesListByResourceGroupOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ActionRule.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ActionRule.ID should not be nil!")
			}
		}
	}
}

func TestActionRules_GetByName(t *testing.T) {
	// From example GetActionRuleById
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewActionRulesClient(con,
		"1e3ff1c0-771a-4119-a03b-be82a51e232d")
	res, err := client.GetByName(ctx,
		"alertscorrelationrg",
		"DailySuppression",
		&ActionRulesGetByNameOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ActionRule.ID == nil {
		t.Fatal("ActionRule.ID should not be nil!")
	}
}

func TestActionRules_CreateUpdate(t *testing.T) {
	// From example PutActionRule
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewActionRulesClient(con,
		"1e3ff1c0-771a-4119-a03b-be82a51e232d")
	res, err := client.CreateUpdate(ctx,
		"alertscorrelationrg",
		"DailySuppression",
		ActionRule{
			ManagedResource: ManagedResource{
				Location: to.StringPtr("Global"),
				Tags:     map[string]*string{},
			},
			Properties: &Suppression{
				ActionRuleProperties: ActionRuleProperties{
					Type:        ActionRuleTypeSuppression.ToPtr(),
					Description: to.StringPtr("Action rule on resource group for daily suppression"),
					Conditions: &Conditions{
						MonitorCondition: &Condition{
							Operator: OperatorEquals.ToPtr(),
							Values: []*string{
								to.StringPtr("Fired")},
						},
						MonitorService: &Condition{
							Operator: OperatorEquals.ToPtr(),
							Values: []*string{
								to.StringPtr("Platform"),
								to.StringPtr("Application Insights")},
						},
						Severity: &Condition{
							Operator: OperatorEquals.ToPtr(),
							Values: []*string{
								to.StringPtr("Sev0"),
								to.StringPtr("Sev2")},
						},
						TargetResourceType: &Condition{
							Operator: OperatorNotEquals.ToPtr(),
							Values: []*string{
								to.StringPtr("Microsoft.Compute/VirtualMachines")},
						},
					},
					Scope: &Scope{
						ScopeType: ScopeTypeResourceGroup.ToPtr(),
						Values: []*string{
							to.StringPtr("/subscriptions/1e3ff1c0-771a-4119-a03b-be82a51e232d/resourceGroups/alertscorrelationrg")},
					},
					Status: ActionRuleStatusEnabled.ToPtr(),
				},
				SuppressionConfig: &SuppressionConfig{
					RecurrenceType: SuppressionTypeDaily.ToPtr(),
					Schedule: &SuppressionSchedule{
						EndDate:   to.StringPtr("12/18/2018"),
						EndTime:   to.StringPtr("14:00:00"),
						StartDate: to.StringPtr("12/09/2018"),
						StartTime: to.StringPtr("06:00:00"),
					},
				},
			},
		},
		&ActionRulesCreateUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ActionRule.ID == nil {
		t.Fatal("ActionRule.ID should not be nil!")
	}
}

func TestActionRules_Delete(t *testing.T) {
	// From example DeleteActionRule
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewActionRulesClient(con,
		"1e3ff1c0-771a-4119-a03b-be82a51e232d")
	_, err := client.Delete(ctx,
		"alertscorrelationrg",
		"DailySuppression",
		&ActionRulesDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestActionRules_Update(t *testing.T) {
	// From example PatchActionRule
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewActionRulesClient(con,
		"1e3ff1c0-771a-4119-a03b-be82a51e232d")
	res, err := client.Update(ctx,
		"alertscorrelationrg",
		"WeeklySuppression",
		PatchObject{
			Properties: &PatchProperties{
				Status: ActionRuleStatusDisabled.ToPtr(),
			},
			Tags: map[string]interface{}{
				"key1": "value1",
				"key2": "value2",
			},
		},
		&ActionRulesUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ActionRule.ID == nil {
		t.Fatal("ActionRule.ID should not be nil!")
	}
}

func TestOperations_List(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestAlerts_MetaData(t *testing.T) {
	// From example MonService
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAlertsClient(con,
		nil)
	_, err := client.MetaData(ctx,
		IdentifierMonitorServiceList,
		&AlertsMetaDataOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestAlerts_GetAll(t *testing.T) {
	// From example ListAlerts
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAlertsClient(con,
		"1e3ff1c0-771a-4119-a03b-be82a51e232d")
	pager := client.GetAll(&AlertsGetAllOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Alert.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Alert.ID should not be nil!")
			}
		}
	}
}

func TestAlerts_GetById(t *testing.T) {
	// From example GetById
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAlertsClient(con,
		"9e261de7-c804-4b9d-9ebf-6f50fe350a9a")
	res, err := client.GetByID(ctx,
		"66114d64-d9d9-478b-95c9-b789d6502100",
		&AlertsGetByIDOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Alert.ID == nil {
		t.Fatal("Alert.ID should not be nil!")
	}
}

func TestAlerts_ChangeState(t *testing.T) {
	// From example Resolve
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAlertsClient(con,
		"9e261de7-c804-4b9d-9ebf-6f50fe350a9a")
	res, err := client.ChangeState(ctx,
		"66114d64-d9d9-478b-95c9-b789d6502100",
		AlertStateAcknowledged,
		&AlertsChangeStateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Alert.ID == nil {
		t.Fatal("Alert.ID should not be nil!")
	}
}

func TestAlerts_GetHistory(t *testing.T) {
	// From example Resolve
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAlertsClient(con,
		"9e261de7-c804-4b9d-9ebf-6f50fe350a9a")
	res, err := client.GetHistory(ctx,
		"66114d64-d9d9-478b-95c9-b789d6502100",
		&AlertsGetHistoryOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.AlertModification.ID == nil {
		t.Fatal("AlertModification.ID should not be nil!")
	}
}

func TestAlerts_GetSummary(t *testing.T) {
	// From example Summary
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAlertsClient(con,
		"1e3ff1c0-771a-4119-a03b-be82a51e232d")
	res, err := client.GetSummary(ctx,
		AlertsSummaryGroupByFieldsSeverity,
		&AlertsGetSummaryOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.AlertsSummary.ID == nil {
		t.Fatal("AlertsSummary.ID should not be nil!")
	}
}

func TestSmartGroups_GetAll(t *testing.T) {
	// From example List
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSmartGroupsClient(con,
		"dd91de05-d791-4ceb-b6dc-988682dc7d72")
	pager := client.GetAll(&SmartGroupsGetAllOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("SmartGroup.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("SmartGroup.ID should not be nil!")
			}
		}
	}
}

func TestSmartGroups_GetById(t *testing.T) {
	// From example Get
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSmartGroupsClient(con,
		"9e261de7-c804-4b9d-9ebf-6f50fe350a9a")
	res, err := client.GetByID(ctx,
		"603675da-9851-4b26-854a-49fc53d32715",
		&SmartGroupsGetByIDOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.SmartGroup.ID == nil {
		t.Fatal("SmartGroup.ID should not be nil!")
	}
}

func TestSmartGroups_ChangeState(t *testing.T) {
	// From example changestate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSmartGroupsClient(con,
		"dd91de05-d791-4ceb-b6dc-988682dc7d72")
	res, err := client.ChangeState(ctx,
		"a808445e-bb38-4751-85c2-1b109ccc1059",
		AlertStateAcknowledged,
		&SmartGroupsChangeStateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.SmartGroup.ID == nil {
		t.Fatal("SmartGroup.ID should not be nil!")
	}
}

func TestSmartGroups_GetHistory(t *testing.T) {
	// From example Resolve
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSmartGroupsClient(con,
		"9e261de7-c804-4b9d-9ebf-6f50fe350a9a")
	res, err := client.GetHistory(ctx,
		"a808445e-bb38-4751-85c2-1b109ccc1059",
		&SmartGroupsGetHistoryOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.SmartGroupModification.ID == nil {
		t.Fatal("SmartGroupModification.ID should not be nil!")
	}
}

func TestSmartDetectorAlertRules_List(t *testing.T) {
	// From example List Smart Detector alert rules
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSmartDetectorAlertRulesClient(con,
		"b368ca2f-e298-46b7-b0ab-012281956afa")
	pager := client.List(&SmartDetectorAlertRulesListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("AlertRule.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("AlertRule.ID should not be nil!")
			}
		}
	}
}

func TestSmartDetectorAlertRules_ListByResourceGroup(t *testing.T) {
	// From example List alert rules
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSmartDetectorAlertRulesClient(con,
		"b368ca2f-e298-46b7-b0ab-012281956afa")
	pager := client.ListByResourceGroup("MyAlertRules",
		&SmartDetectorAlertRulesListByResourceGroupOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("AlertRule.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("AlertRule.ID should not be nil!")
			}
		}
	}
}

func TestSmartDetectorAlertRules_Get(t *testing.T) {
	// From example Get a Smart Detector alert rule
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSmartDetectorAlertRulesClient(con,
		"b368ca2f-e298-46b7-b0ab-012281956afa")
	res, err := client.Get(ctx,
		"MyAlertRules",
		"MyAlertRule",
		&SmartDetectorAlertRulesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.AlertRule.ID == nil {
		t.Fatal("AlertRule.ID should not be nil!")
	}
}

func TestSmartDetectorAlertRules_CreateOrUpdate(t *testing.T) {
	// From example Create or update a Smart Detector alert rule
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSmartDetectorAlertRulesClient(con,
		"b368ca2f-e298-46b7-b0ab-012281956afa")
	res, err := client.CreateOrUpdate(ctx,
		"MyAlertRules",
		"MyAlertRule",
		AlertRule{
			Properties: &AlertRuleProperties{
				Description: to.StringPtr("Sample smart detector alert rule description"),
				ActionGroups: &ActionGroupsInformation{
					CustomEmailSubject:   to.StringPtr("My custom email subject"),
					CustomWebhookPayload: to.StringPtr("{\"AlertRuleName\":\"#alertrulename\"}"),
					GroupIDs: []*string{
						to.StringPtr("/subscriptions/b368ca2f-e298-46b7-b0ab-012281956afa/resourcegroups/actionGroups/providers/microsoft.insights/actiongroups/MyActionGroup")},
				},
				Detector: &Detector{
					ID: to.StringPtr("VMMemoryLeak"),
				},
				Frequency: to.StringPtr("PT5M"),
				Scope: []*string{
					to.StringPtr("/subscriptions/b368ca2f-e298-46b7-b0ab-012281956afa/resourceGroups/MyVms/providers/Microsoft.Compute/virtualMachines/vm1")},
				Severity: SeveritySev3.ToPtr(),
				State:    AlertRuleStateEnabled.ToPtr(),
				Throttling: &ThrottlingInformation{
					Duration: to.StringPtr("PT20M"),
				},
			},
		},
		&SmartDetectorAlertRulesCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.AlertRule.ID == nil {
		t.Fatal("AlertRule.ID should not be nil!")
	}
}

func TestSmartDetectorAlertRules_Patch(t *testing.T) {
	// From example Patch alert rules
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSmartDetectorAlertRulesClient(con,
		"b368ca2f-e298-46b7-b0ab-012281956afa")
	res, err := client.Patch(ctx,
		"MyAlertRules",
		"MyAlertRule",
		AlertRulePatchObject{
			Properties: &AlertRulePatchProperties{
				Description: to.StringPtr("New description for patching"),
				Frequency:   to.StringPtr("PT1M"),
			},
			Tags: map[string]*string{
				"newKey": to.StringPtr("newVal"),
			},
		},
		&SmartDetectorAlertRulesPatchOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.AlertRule.ID == nil {
		t.Fatal("AlertRule.ID should not be nil!")
	}
}

func TestSmartDetectorAlertRules_Delete(t *testing.T) {
	// From example Delete a Smart Detector alert rule
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSmartDetectorAlertRulesClient(con,
		"b368ca2f-e298-46b7-b0ab-012281956afa")
	_, err := client.Delete(ctx,
		"MyAlertRules",
		"MyAlertRule",
		&SmartDetectorAlertRulesDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	subscriptionId = getEnv("SUBSCRIPTION_ID", "00000000-0000-0000-0000-000000000000")
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}
	cred, err = azidentity.NewEnvironmentCredential(&azidentity.EnvironmentCredentialOptions{AuthorityHost: mockHost, HTTPClient: client})
	if err != nil {
		panic(err)
	}

	con = arm.NewConnection(mockHost, cred, &arm.ConnectionOptions{
		Logging: policy.LogOptions{
			IncludeBody: true,
		},
		HTTPClient: client,
	})
}

func tearDown() {

}
