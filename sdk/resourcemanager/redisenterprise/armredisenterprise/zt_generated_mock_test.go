//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armredisenterprise_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/redisenterprise/armredisenterprise"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestOperations_List(t *testing.T) {
	// From example specification/redisenterprise/resource-manager/Microsoft.Cache/stable/2022-01-01/examples/OperationsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"OperationsList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armredisenterprise.NewOperationsClient(cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/redisenterprise/resource-manager/Microsoft.Cache/stable/2022-01-01/examples/OperationsList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armredisenterprise.OperationListResult{
			Value: []*armredisenterprise.Operation{
				{
					Name: to.Ptr("Microsoft.Cache/redisEnterprise/read"),
					Display: &armredisenterprise.OperationDisplay{
						Description: to.Ptr("View the Redis Enterprise cache's settings and configuration in the management portal"),
						Operation:   to.Ptr("Manage Redis Enterprise cache (read)"),
						Provider:    to.Ptr("Microsoft Cache"),
						Resource:    to.Ptr("Redis Enterprise cache"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Cache/redisEnterprise/write"),
					Display: &armredisenterprise.OperationDisplay{
						Description: to.Ptr("Modify the Redis Enterprise cache's settings and configuration in the management portal"),
						Operation:   to.Ptr("Manage Redis Enterprise cache (write)"),
						Provider:    to.Ptr("Microsoft Cache"),
						Resource:    to.Ptr("Redis Enterprise cache"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OperationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OperationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/redisenterprise/resource-manager/Microsoft.Cache/stable/2022-01-01/examples/OperationsList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOperationsStatus_Get(t *testing.T) {
	// From example specification/redisenterprise/resource-manager/Microsoft.Cache/stable/2022-01-01/examples/OperationsStatusGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"OperationsStatusGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armredisenterprise.NewOperationsStatusClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"West US",
		"testoperationid",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/redisenterprise/resource-manager/Microsoft.Cache/stable/2022-01-01/examples/OperationsStatusGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armredisenterprise.OperationStatus{
			Name:      to.Ptr("testoperationid"),
			EndTime:   to.Ptr("2017-01-01T16:13:13.933Z"),
			ID:        to.Ptr("/subscriptions/subid/providers/Microsoft.Cache/locations/westus/operationsStatus/testoperationid"),
			StartTime: to.Ptr("2017-01-01T13:13:13.933Z"),
			Status:    to.Ptr("Succeeded"),
		}
		if !reflect.DeepEqual(exampleRes, res.OperationStatus) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.OperationStatus)
			t.Fatalf("Mock response is not equal to example response for example specification/redisenterprise/resource-manager/Microsoft.Cache/stable/2022-01-01/examples/OperationsStatusGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRedisEnterprise_Create(t *testing.T) {
	// From example specification/redisenterprise/resource-manager/Microsoft.Cache/stable/2022-01-01/examples/RedisEnterpriseCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RedisEnterpriseCreate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armredisenterprise.NewClient("subid", cred, &options)
	poller, err := client.BeginCreate(ctx,
		"rg1",
		"cache1",
		armredisenterprise.Cluster{
			Location: to.Ptr("West US"),
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
			},
			Properties: &armredisenterprise.ClusterProperties{
				MinimumTLSVersion: to.Ptr(armredisenterprise.TLSVersionOne2),
			},
			SKU: &armredisenterprise.SKU{
				Name:     to.Ptr(armredisenterprise.SKUNameEnterpriseFlashF300),
				Capacity: to.Ptr[int32](3),
			},
			Zones: []*string{
				to.Ptr("1"),
				to.Ptr("2"),
				to.Ptr("3")},
		},
		&armredisenterprise.ClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/redisenterprise/resource-manager/Microsoft.Cache/stable/2022-01-01/examples/RedisEnterpriseCreate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/redisenterprise/resource-manager/Microsoft.Cache/stable/2022-01-01/examples/RedisEnterpriseCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armredisenterprise.Cluster{
			Name:     to.Ptr("cache1"),
			Type:     to.Ptr("Microsoft.Cache/redisEnterprise"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Cache/redisEnterprise/cache1"),
			Location: to.Ptr("West US"),
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
			},
			Properties: &armredisenterprise.ClusterProperties{
				HostName:          to.Ptr("cache1.westus.something.azure.net"),
				MinimumTLSVersion: to.Ptr(armredisenterprise.TLSVersionOne2),
				ProvisioningState: to.Ptr(armredisenterprise.ProvisioningStateSucceeded),
				RedisVersion:      to.Ptr("5"),
				ResourceState:     to.Ptr(armredisenterprise.ResourceStateRunning),
			},
			SKU: &armredisenterprise.SKU{
				Name:     to.Ptr(armredisenterprise.SKUNameEnterpriseFlashF300),
				Capacity: to.Ptr[int32](3),
			},
			Zones: []*string{
				to.Ptr("1"),
				to.Ptr("2"),
				to.Ptr("3")},
		}
		if !reflect.DeepEqual(exampleRes, res.Cluster) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Cluster)
			t.Fatalf("Mock response is not equal to example response for example specification/redisenterprise/resource-manager/Microsoft.Cache/stable/2022-01-01/examples/RedisEnterpriseCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRedisEnterprise_Update(t *testing.T) {
	// From example specification/redisenterprise/resource-manager/Microsoft.Cache/stable/2022-01-01/examples/RedisEnterpriseUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RedisEnterpriseUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armredisenterprise.NewClient("subid", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"rg1",
		"cache1",
		armredisenterprise.ClusterUpdate{
			Properties: &armredisenterprise.ClusterProperties{
				MinimumTLSVersion: to.Ptr(armredisenterprise.TLSVersionOne2),
			},
			SKU: &armredisenterprise.SKU{
				Name:     to.Ptr(armredisenterprise.SKUNameEnterpriseFlashF300),
				Capacity: to.Ptr[int32](9),
			},
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
			},
		},
		&armredisenterprise.ClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/redisenterprise/resource-manager/Microsoft.Cache/stable/2022-01-01/examples/RedisEnterpriseUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/redisenterprise/resource-manager/Microsoft.Cache/stable/2022-01-01/examples/RedisEnterpriseUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armredisenterprise.Cluster{
			Name:     to.Ptr("cache1"),
			Type:     to.Ptr("Microsoft.Cache/redisEnterprise"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Cache/redisEnterprise/cache1"),
			Location: to.Ptr("West US"),
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
			},
			Properties: &armredisenterprise.ClusterProperties{
				HostName:          to.Ptr("cache1.westus.something.azure.com"),
				MinimumTLSVersion: to.Ptr(armredisenterprise.TLSVersionOne2),
				ProvisioningState: to.Ptr(armredisenterprise.ProvisioningStateSucceeded),
				RedisVersion:      to.Ptr("5"),
				ResourceState:     to.Ptr(armredisenterprise.ResourceStateUpdating),
			},
			SKU: &armredisenterprise.SKU{
				Name:     to.Ptr(armredisenterprise.SKUNameEnterpriseFlashF300),
				Capacity: to.Ptr[int32](9),
			},
			Zones: []*string{
				to.Ptr("1"),
				to.Ptr("2"),
				to.Ptr("3")},
		}
		if !reflect.DeepEqual(exampleRes, res.Cluster) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Cluster)
			t.Fatalf("Mock response is not equal to example response for example specification/redisenterprise/resource-manager/Microsoft.Cache/stable/2022-01-01/examples/RedisEnterpriseUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRedisEnterprise_Delete(t *testing.T) {
	// From example specification/redisenterprise/resource-manager/Microsoft.Cache/stable/2022-01-01/examples/RedisEnterpriseDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RedisEnterpriseDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armredisenterprise.NewClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"cache1",
		&armredisenterprise.ClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/redisenterprise/resource-manager/Microsoft.Cache/stable/2022-01-01/examples/RedisEnterpriseDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/redisenterprise/resource-manager/Microsoft.Cache/stable/2022-01-01/examples/RedisEnterpriseDelete.json: %v", err)
	}
}

func TestRedisEnterprise_Get(t *testing.T) {
	// From example specification/redisenterprise/resource-manager/Microsoft.Cache/stable/2022-01-01/examples/RedisEnterpriseGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RedisEnterpriseGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armredisenterprise.NewClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"cache1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/redisenterprise/resource-manager/Microsoft.Cache/stable/2022-01-01/examples/RedisEnterpriseGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armredisenterprise.Cluster{
			Name:     to.Ptr("cache1"),
			Type:     to.Ptr("Microsoft.Cache/redisEnterprise"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Cache/redisEnterprise/cache1"),
			Location: to.Ptr("West US"),
			Tags:     map[string]*string{},
			Properties: &armredisenterprise.ClusterProperties{
				HostName:          to.Ptr("cache1.westus.something.azure.com"),
				MinimumTLSVersion: to.Ptr(armredisenterprise.TLSVersionOne2),
				PrivateEndpointConnections: []*armredisenterprise.PrivateEndpointConnection{
					{
						ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Cache/redisEnterprise/cache1/privateEndpointConnections/cachePec"),
						Properties: &armredisenterprise.PrivateEndpointConnectionProperties{
							PrivateEndpoint: &armredisenterprise.PrivateEndpoint{
								ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/privateEndpoints/cachePe"),
							},
							PrivateLinkServiceConnectionState: &armredisenterprise.PrivateLinkServiceConnectionState{
								Description:     to.Ptr("Please approve my connection"),
								ActionsRequired: to.Ptr("None"),
								Status:          to.Ptr(armredisenterprise.PrivateEndpointServiceConnectionStatusApproved),
							},
						},
					}},
				ProvisioningState: to.Ptr(armredisenterprise.ProvisioningStateSucceeded),
				RedisVersion:      to.Ptr("6"),
				ResourceState:     to.Ptr(armredisenterprise.ResourceStateRunning),
			},
			SKU: &armredisenterprise.SKU{
				Name:     to.Ptr(armredisenterprise.SKUNameEnterpriseFlashF300),
				Capacity: to.Ptr[int32](3),
			},
			Zones: []*string{
				to.Ptr("1"),
				to.Ptr("2"),
				to.Ptr("3")},
		}
		if !reflect.DeepEqual(exampleRes, res.Cluster) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Cluster)
			t.Fatalf("Mock response is not equal to example response for example specification/redisenterprise/resource-manager/Microsoft.Cache/stable/2022-01-01/examples/RedisEnterpriseGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRedisEnterprise_ListByResourceGroup(t *testing.T) {
	// From example specification/redisenterprise/resource-manager/Microsoft.Cache/stable/2022-01-01/examples/RedisEnterpriseListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RedisEnterpriseListByResourceGroup"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armredisenterprise.NewClient("subid", cred, &options)
	pager := client.ListByResourceGroup("rg1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/redisenterprise/resource-manager/Microsoft.Cache/stable/2022-01-01/examples/RedisEnterpriseListByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armredisenterprise.ClusterList{
			Value: []*armredisenterprise.Cluster{
				{
					Name:     to.Ptr("cache1"),
					Type:     to.Ptr("Microsoft.Cache/redisEnterprise"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Cache/redisEnterprise/cache1"),
					Location: to.Ptr("West US"),
					Tags:     map[string]*string{},
					Properties: &armredisenterprise.ClusterProperties{
						HostName:          to.Ptr("cache1.westus.something.azure.com"),
						MinimumTLSVersion: to.Ptr(armredisenterprise.TLSVersionOne2),
						ProvisioningState: to.Ptr(armredisenterprise.ProvisioningStateSucceeded),
						RedisVersion:      to.Ptr("5"),
						ResourceState:     to.Ptr(armredisenterprise.ResourceStateRunning),
					},
					SKU: &armredisenterprise.SKU{
						Name:     to.Ptr(armredisenterprise.SKUNameEnterpriseFlashF300),
						Capacity: to.Ptr[int32](3),
					},
					Zones: []*string{
						to.Ptr("1"),
						to.Ptr("2"),
						to.Ptr("3")},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ClusterList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ClusterList)
			t.Fatalf("Mock response is not equal to example response for example specification/redisenterprise/resource-manager/Microsoft.Cache/stable/2022-01-01/examples/RedisEnterpriseListByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRedisEnterprise_List(t *testing.T) {
	// From example specification/redisenterprise/resource-manager/Microsoft.Cache/stable/2022-01-01/examples/RedisEnterpriseList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RedisEnterpriseList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armredisenterprise.NewClient("subid", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/redisenterprise/resource-manager/Microsoft.Cache/stable/2022-01-01/examples/RedisEnterpriseList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armredisenterprise.ClusterList{
			Value: []*armredisenterprise.Cluster{
				{
					Name:     to.Ptr("cache1"),
					Type:     to.Ptr("Microsoft.Cache/redisEnterprise"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Cache/redisEnterprise/cache1"),
					Location: to.Ptr("West US"),
					Tags:     map[string]*string{},
					Properties: &armredisenterprise.ClusterProperties{
						HostName:          to.Ptr("cache1.westus.something.azure.com"),
						MinimumTLSVersion: to.Ptr(armredisenterprise.TLSVersionOne2),
						ProvisioningState: to.Ptr(armredisenterprise.ProvisioningStateSucceeded),
						RedisVersion:      to.Ptr("6"),
						ResourceState:     to.Ptr(armredisenterprise.ResourceStateRunning),
					},
					SKU: &armredisenterprise.SKU{
						Name:     to.Ptr(armredisenterprise.SKUNameEnterpriseFlashF300),
						Capacity: to.Ptr[int32](3),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ClusterList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ClusterList)
			t.Fatalf("Mock response is not equal to example response for example specification/redisenterprise/resource-manager/Microsoft.Cache/stable/2022-01-01/examples/RedisEnterpriseList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDatabases_ListByCluster(t *testing.T) {
	// From example specification/redisenterprise/resource-manager/Microsoft.Cache/stable/2022-01-01/examples/RedisEnterpriseDatabasesListByCluster.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RedisEnterpriseDatabasesListByCluster"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armredisenterprise.NewDatabasesClient("subid", cred, &options)
	pager := client.ListByCluster("rg1",
		"cache1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/redisenterprise/resource-manager/Microsoft.Cache/stable/2022-01-01/examples/RedisEnterpriseDatabasesListByCluster.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armredisenterprise.DatabaseList{
			Value: []*armredisenterprise.Database{
				{
					Name: to.Ptr("cache1/default"),
					Type: to.Ptr("Microsoft.Cache/redisEnterprise/databases"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Cache/redisEnterprise/cache1/databases/default"),
					Properties: &armredisenterprise.DatabaseProperties{
						ClientProtocol:   to.Ptr(armredisenterprise.ProtocolEncrypted),
						ClusteringPolicy: to.Ptr(armredisenterprise.ClusteringPolicyOSSCluster),
						EvictionPolicy:   to.Ptr(armredisenterprise.EvictionPolicyAllKeysLRU),
						Modules: []*armredisenterprise.Module{
							{
								Name:    to.Ptr("RediSearch"),
								Args:    to.Ptr(""),
								Version: to.Ptr("1.0.0"),
							}},
						Persistence: &armredisenterprise.Persistence{
							RdbEnabled:   to.Ptr(true),
							RdbFrequency: to.Ptr(armredisenterprise.RdbFrequencyTwelveH),
						},
						Port:              to.Ptr[int32](10000),
						ProvisioningState: to.Ptr(armredisenterprise.ProvisioningStateSucceeded),
						ResourceState:     to.Ptr(armredisenterprise.ResourceStateRunning),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DatabaseList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DatabaseList)
			t.Fatalf("Mock response is not equal to example response for example specification/redisenterprise/resource-manager/Microsoft.Cache/stable/2022-01-01/examples/RedisEnterpriseDatabasesListByCluster.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDatabases_Create(t *testing.T) {
	// From example specification/redisenterprise/resource-manager/Microsoft.Cache/stable/2022-01-01/examples/RedisEnterpriseDatabasesCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RedisEnterpriseDatabasesCreate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armredisenterprise.NewDatabasesClient("subid", cred, &options)
	poller, err := client.BeginCreate(ctx,
		"rg1",
		"cache1",
		"default",
		armredisenterprise.Database{
			Properties: &armredisenterprise.DatabaseProperties{
				ClientProtocol:   to.Ptr(armredisenterprise.ProtocolEncrypted),
				ClusteringPolicy: to.Ptr(armredisenterprise.ClusteringPolicyEnterpriseCluster),
				EvictionPolicy:   to.Ptr(armredisenterprise.EvictionPolicyAllKeysLRU),
				Modules: []*armredisenterprise.Module{
					{
						Name: to.Ptr("RedisBloom"),
						Args: to.Ptr("ERROR_RATE 0.00 INITIAL_SIZE 400"),
					},
					{
						Name: to.Ptr("RedisTimeSeries"),
						Args: to.Ptr("RETENTION_POLICY 20"),
					},
					{
						Name: to.Ptr("RediSearch"),
					}},
				Persistence: &armredisenterprise.Persistence{
					AofEnabled:   to.Ptr(true),
					AofFrequency: to.Ptr(armredisenterprise.AofFrequencyOneS),
				},
				Port: to.Ptr[int32](10000),
			},
		},
		&armredisenterprise.DatabasesClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/redisenterprise/resource-manager/Microsoft.Cache/stable/2022-01-01/examples/RedisEnterpriseDatabasesCreate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/redisenterprise/resource-manager/Microsoft.Cache/stable/2022-01-01/examples/RedisEnterpriseDatabasesCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armredisenterprise.Database{
			Name: to.Ptr("cache1/default"),
			Type: to.Ptr("Microsoft.Cache/redisEnterprise/databases"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Cache/redisEnterprise/cache1/databases/default"),
			Properties: &armredisenterprise.DatabaseProperties{
				ClientProtocol:   to.Ptr(armredisenterprise.ProtocolEncrypted),
				ClusteringPolicy: to.Ptr(armredisenterprise.ClusteringPolicyEnterpriseCluster),
				EvictionPolicy:   to.Ptr(armredisenterprise.EvictionPolicyAllKeysLRU),
				Modules: []*armredisenterprise.Module{
					{
						Name:    to.Ptr("RedisBloom"),
						Args:    to.Ptr("ERROR_RATE 0.00 INITIAL_SIZE 400"),
						Version: to.Ptr("1.0.0"),
					},
					{
						Name:    to.Ptr("RedisTimeSeries"),
						Args:    to.Ptr("RETENTION_POLICY 20"),
						Version: to.Ptr("1.0.0"),
					},
					{
						Name:    to.Ptr("RediSearch"),
						Args:    to.Ptr(""),
						Version: to.Ptr("1.0.0"),
					}},
				Persistence: &armredisenterprise.Persistence{
					AofEnabled:   to.Ptr(true),
					AofFrequency: to.Ptr(armredisenterprise.AofFrequencyOneS),
				},
				Port:              to.Ptr[int32](10000),
				ProvisioningState: to.Ptr(armredisenterprise.ProvisioningStateSucceeded),
				ResourceState:     to.Ptr(armredisenterprise.ResourceStateUpdating),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Database) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Database)
			t.Fatalf("Mock response is not equal to example response for example specification/redisenterprise/resource-manager/Microsoft.Cache/stable/2022-01-01/examples/RedisEnterpriseDatabasesCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/redisenterprise/resource-manager/Microsoft.Cache/stable/2022-01-01/examples/RedisEnterpriseDatabasesCreateWithGeoReplication.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RedisEnterpriseDatabasesCreate With Active Geo Replication"},
	})
	client = armredisenterprise.NewDatabasesClient("subid1", cred, &options)
	poller, err = client.BeginCreate(ctx,
		"rg1",
		"cache1",
		"default",
		armredisenterprise.Database{
			Properties: &armredisenterprise.DatabaseProperties{
				ClientProtocol:   to.Ptr(armredisenterprise.ProtocolEncrypted),
				ClusteringPolicy: to.Ptr(armredisenterprise.ClusteringPolicyEnterpriseCluster),
				EvictionPolicy:   to.Ptr(armredisenterprise.EvictionPolicyNoEviction),
				GeoReplication: &armredisenterprise.DatabasePropertiesGeoReplication{
					GroupNickname: to.Ptr("groupName"),
					LinkedDatabases: []*armredisenterprise.LinkedDatabase{
						{
							ID: to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Cache/redisEnterprise/cache1/databases/default"),
						},
						{
							ID: to.Ptr("/subscriptions/subid2/resourceGroups/rg2/providers/Microsoft.Cache/redisEnterprise/cache2/databases/default"),
						}},
				},
				Port: to.Ptr[int32](10000),
			},
		},
		&armredisenterprise.DatabasesClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/redisenterprise/resource-manager/Microsoft.Cache/stable/2022-01-01/examples/RedisEnterpriseDatabasesCreateWithGeoReplication.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/redisenterprise/resource-manager/Microsoft.Cache/stable/2022-01-01/examples/RedisEnterpriseDatabasesCreateWithGeoReplication.json: %v", err)
	}
	// Response check
	{
		exampleRes := armredisenterprise.Database{
			Name: to.Ptr("cache1/default"),
			Type: to.Ptr("Microsoft.Cache/redisEnterprise/databases"),
			ID:   to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Cache/redisEnterprise/cache1/databases/default"),
			Properties: &armredisenterprise.DatabaseProperties{
				ClientProtocol:   to.Ptr(armredisenterprise.ProtocolEncrypted),
				ClusteringPolicy: to.Ptr(armredisenterprise.ClusteringPolicyEnterpriseCluster),
				EvictionPolicy:   to.Ptr(armredisenterprise.EvictionPolicyNoEviction),
				GeoReplication: &armredisenterprise.DatabasePropertiesGeoReplication{
					GroupNickname: to.Ptr("groupName"),
					LinkedDatabases: []*armredisenterprise.LinkedDatabase{
						{
							ID:    to.Ptr("/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Cache/redisEnterprise/cache1/databases/default"),
							State: to.Ptr(armredisenterprise.LinkStateLinking),
						},
						{
							ID:    to.Ptr("/subscriptions/subid2/resourceGroups/rg2/providers/Microsoft.Cache/redisEnterprise/cache2/databases/default"),
							State: to.Ptr(armredisenterprise.LinkStateLinking),
						}},
				},
				Port:              to.Ptr[int32](10000),
				ProvisioningState: to.Ptr(armredisenterprise.ProvisioningStateSucceeded),
				ResourceState:     to.Ptr(armredisenterprise.ResourceStateUpdating),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Database) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Database)
			t.Fatalf("Mock response is not equal to example response for example specification/redisenterprise/resource-manager/Microsoft.Cache/stable/2022-01-01/examples/RedisEnterpriseDatabasesCreateWithGeoReplication.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDatabases_Update(t *testing.T) {
	// From example specification/redisenterprise/resource-manager/Microsoft.Cache/stable/2022-01-01/examples/RedisEnterpriseDatabasesUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RedisEnterpriseDatabasesUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armredisenterprise.NewDatabasesClient("subid", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"rg1",
		"cache1",
		"default",
		armredisenterprise.DatabaseUpdate{
			Properties: &armredisenterprise.DatabaseProperties{
				ClientProtocol: to.Ptr(armredisenterprise.ProtocolEncrypted),
				EvictionPolicy: to.Ptr(armredisenterprise.EvictionPolicyAllKeysLRU),
				Persistence: &armredisenterprise.Persistence{
					RdbEnabled:   to.Ptr(true),
					RdbFrequency: to.Ptr(armredisenterprise.RdbFrequencyTwelveH),
				},
			},
		},
		&armredisenterprise.DatabasesClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/redisenterprise/resource-manager/Microsoft.Cache/stable/2022-01-01/examples/RedisEnterpriseDatabasesUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/redisenterprise/resource-manager/Microsoft.Cache/stable/2022-01-01/examples/RedisEnterpriseDatabasesUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armredisenterprise.Database{
			Name: to.Ptr("cache1/default"),
			Type: to.Ptr("Microsoft.Cache/redisEnterprise/databases"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Cache/redisEnterprise/cache1/databases/default"),
			Properties: &armredisenterprise.DatabaseProperties{
				ClientProtocol:   to.Ptr(armredisenterprise.ProtocolEncrypted),
				ClusteringPolicy: to.Ptr(armredisenterprise.ClusteringPolicyOSSCluster),
				EvictionPolicy:   to.Ptr(armredisenterprise.EvictionPolicyAllKeysLRU),
				Modules: []*armredisenterprise.Module{
					{
						Name:    to.Ptr("RediSearch"),
						Args:    to.Ptr(""),
						Version: to.Ptr("1.0.0"),
					}},
				Persistence: &armredisenterprise.Persistence{
					RdbEnabled:   to.Ptr(true),
					RdbFrequency: to.Ptr(armredisenterprise.RdbFrequencyTwelveH),
				},
				Port:              to.Ptr[int32](10000),
				ProvisioningState: to.Ptr(armredisenterprise.ProvisioningStateSucceeded),
				ResourceState:     to.Ptr(armredisenterprise.ResourceStateUpdating),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Database) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Database)
			t.Fatalf("Mock response is not equal to example response for example specification/redisenterprise/resource-manager/Microsoft.Cache/stable/2022-01-01/examples/RedisEnterpriseDatabasesUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDatabases_Get(t *testing.T) {
	// From example specification/redisenterprise/resource-manager/Microsoft.Cache/stable/2022-01-01/examples/RedisEnterpriseDatabasesGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RedisEnterpriseDatabasesGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armredisenterprise.NewDatabasesClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"cache1",
		"default",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/redisenterprise/resource-manager/Microsoft.Cache/stable/2022-01-01/examples/RedisEnterpriseDatabasesGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armredisenterprise.Database{
			Name: to.Ptr("cache1/default"),
			Type: to.Ptr("Microsoft.Cache/redisEnterprise/databases"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Cache/redisEnterprise/cache1/databases/default"),
			Properties: &armredisenterprise.DatabaseProperties{
				ClientProtocol:   to.Ptr(armredisenterprise.ProtocolEncrypted),
				ClusteringPolicy: to.Ptr(armredisenterprise.ClusteringPolicyOSSCluster),
				EvictionPolicy:   to.Ptr(armredisenterprise.EvictionPolicyAllKeysLRU),
				Modules: []*armredisenterprise.Module{
					{
						Name:    to.Ptr("RediSearch"),
						Args:    to.Ptr(""),
						Version: to.Ptr("1.0.0"),
					}},
				Persistence: &armredisenterprise.Persistence{
					RdbEnabled:   to.Ptr(true),
					RdbFrequency: to.Ptr(armredisenterprise.RdbFrequencyTwelveH),
				},
				Port:              to.Ptr[int32](10000),
				ProvisioningState: to.Ptr(armredisenterprise.ProvisioningStateSucceeded),
				ResourceState:     to.Ptr(armredisenterprise.ResourceStateRunning),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Database) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Database)
			t.Fatalf("Mock response is not equal to example response for example specification/redisenterprise/resource-manager/Microsoft.Cache/stable/2022-01-01/examples/RedisEnterpriseDatabasesGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDatabases_Delete(t *testing.T) {
	// From example specification/redisenterprise/resource-manager/Microsoft.Cache/stable/2022-01-01/examples/RedisEnterpriseDatabasesDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RedisEnterpriseDatabasesDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armredisenterprise.NewDatabasesClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"cache1",
		"db1",
		&armredisenterprise.DatabasesClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/redisenterprise/resource-manager/Microsoft.Cache/stable/2022-01-01/examples/RedisEnterpriseDatabasesDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/redisenterprise/resource-manager/Microsoft.Cache/stable/2022-01-01/examples/RedisEnterpriseDatabasesDelete.json: %v", err)
	}
}

func TestDatabases_ListKeys(t *testing.T) {
	// From example specification/redisenterprise/resource-manager/Microsoft.Cache/stable/2022-01-01/examples/RedisEnterpriseDatabasesListKeys.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RedisEnterpriseDatabasesListKeys"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armredisenterprise.NewDatabasesClient("subid", cred, &options)
	res, err := client.ListKeys(ctx,
		"rg1",
		"cache1",
		"default",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/redisenterprise/resource-manager/Microsoft.Cache/stable/2022-01-01/examples/RedisEnterpriseDatabasesListKeys.json: %v", err)
	}
	// Response check
	{
		exampleRes := armredisenterprise.AccessKeys{
			PrimaryKey:   to.Ptr("<primaryKey>"),
			SecondaryKey: to.Ptr("<secondaryKey>"),
		}
		if !reflect.DeepEqual(exampleRes, res.AccessKeys) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AccessKeys)
			t.Fatalf("Mock response is not equal to example response for example specification/redisenterprise/resource-manager/Microsoft.Cache/stable/2022-01-01/examples/RedisEnterpriseDatabasesListKeys.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDatabases_RegenerateKey(t *testing.T) {
	// From example specification/redisenterprise/resource-manager/Microsoft.Cache/stable/2022-01-01/examples/RedisEnterpriseDatabasesRegenerateKey.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RedisEnterpriseDatabasesRegenerateKey"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armredisenterprise.NewDatabasesClient("subid", cred, &options)
	poller, err := client.BeginRegenerateKey(ctx,
		"rg1",
		"cache1",
		"default",
		armredisenterprise.RegenerateKeyParameters{
			KeyType: to.Ptr(armredisenterprise.AccessKeyTypePrimary),
		},
		&armredisenterprise.DatabasesClientBeginRegenerateKeyOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/redisenterprise/resource-manager/Microsoft.Cache/stable/2022-01-01/examples/RedisEnterpriseDatabasesRegenerateKey.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/redisenterprise/resource-manager/Microsoft.Cache/stable/2022-01-01/examples/RedisEnterpriseDatabasesRegenerateKey.json: %v", err)
	}
	// Response check
	{
		exampleRes := armredisenterprise.AccessKeys{
			PrimaryKey:   to.Ptr("<primaryKey>"),
			SecondaryKey: to.Ptr("<secondaryKey>"),
		}
		if !reflect.DeepEqual(exampleRes, res.AccessKeys) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AccessKeys)
			t.Fatalf("Mock response is not equal to example response for example specification/redisenterprise/resource-manager/Microsoft.Cache/stable/2022-01-01/examples/RedisEnterpriseDatabasesRegenerateKey.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDatabases_Import(t *testing.T) {
	// From example specification/redisenterprise/resource-manager/Microsoft.Cache/stable/2022-01-01/examples/RedisEnterpriseDatabasesImport.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RedisEnterpriseDatabasesImport"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armredisenterprise.NewDatabasesClient("subid", cred, &options)
	poller, err := client.BeginImport(ctx,
		"rg1",
		"cache1",
		"default",
		armredisenterprise.ImportClusterParameters{
			SasUris: []*string{
				to.Ptr("https://contosostorage.blob.core.window.net/urltoBlobFile1?sasKeyParameters"),
				to.Ptr("https://contosostorage.blob.core.window.net/urltoBlobFile2?sasKeyParameters")},
		},
		&armredisenterprise.DatabasesClientBeginImportOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/redisenterprise/resource-manager/Microsoft.Cache/stable/2022-01-01/examples/RedisEnterpriseDatabasesImport.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/redisenterprise/resource-manager/Microsoft.Cache/stable/2022-01-01/examples/RedisEnterpriseDatabasesImport.json: %v", err)
	}
}

func TestDatabases_Export(t *testing.T) {
	// From example specification/redisenterprise/resource-manager/Microsoft.Cache/stable/2022-01-01/examples/RedisEnterpriseDatabasesExport.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RedisEnterpriseDatabasesExport"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armredisenterprise.NewDatabasesClient("subid", cred, &options)
	poller, err := client.BeginExport(ctx,
		"rg1",
		"cache1",
		"default",
		armredisenterprise.ExportClusterParameters{
			SasURI: to.Ptr("https://contosostorage.blob.core.window.net/urlToBlobContainer?sasKeyParameters"),
		},
		&armredisenterprise.DatabasesClientBeginExportOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/redisenterprise/resource-manager/Microsoft.Cache/stable/2022-01-01/examples/RedisEnterpriseDatabasesExport.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/redisenterprise/resource-manager/Microsoft.Cache/stable/2022-01-01/examples/RedisEnterpriseDatabasesExport.json: %v", err)
	}
}

func TestDatabases_ForceUnlink(t *testing.T) {
	// From example specification/redisenterprise/resource-manager/Microsoft.Cache/stable/2022-01-01/examples/RedisEnterpriseDatabasesForceUnlink.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"How to unlink a database during a regional outage"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armredisenterprise.NewDatabasesClient("subid", cred, &options)
	poller, err := client.BeginForceUnlink(ctx,
		"rg1",
		"cache1",
		"default",
		armredisenterprise.ForceUnlinkParameters{
			IDs: []*string{
				to.Ptr("/subscriptions/subid2/resourceGroups/rg2/providers/Microsoft.Cache/redisEnterprise/cache2/databases/default")},
		},
		&armredisenterprise.DatabasesClientBeginForceUnlinkOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/redisenterprise/resource-manager/Microsoft.Cache/stable/2022-01-01/examples/RedisEnterpriseDatabasesForceUnlink.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/redisenterprise/resource-manager/Microsoft.Cache/stable/2022-01-01/examples/RedisEnterpriseDatabasesForceUnlink.json: %v", err)
	}
}

func TestPrivateEndpointConnections_List(t *testing.T) {
	// From example specification/redisenterprise/resource-manager/Microsoft.Cache/stable/2022-01-01/examples/RedisEnterpriseListPrivateEndpointConnections.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RedisEnterpriseListPrivateEndpointConnections"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armredisenterprise.NewPrivateEndpointConnectionsClient("subid", cred, &options)
	pager := client.List("rg1",
		"cache1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/redisenterprise/resource-manager/Microsoft.Cache/stable/2022-01-01/examples/RedisEnterpriseListPrivateEndpointConnections.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armredisenterprise.PrivateEndpointConnectionListResult{
			Value: []*armredisenterprise.PrivateEndpointConnection{
				{
					Name: to.Ptr("pectest01"),
					Type: to.Ptr("Microsoft.Cache/redisEnterprise/privateEndpointConnections"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Cache/redisEnterprise/cache1/privateEndpointConnections/pectest01"),
					Properties: &armredisenterprise.PrivateEndpointConnectionProperties{
						PrivateEndpoint: &armredisenterprise.PrivateEndpoint{
							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/privateEndpoints/petest01"),
						},
						PrivateLinkServiceConnectionState: &armredisenterprise.PrivateLinkServiceConnectionState{
							Description:     to.Ptr("Auto-Approved"),
							ActionsRequired: to.Ptr("None"),
							Status:          to.Ptr(armredisenterprise.PrivateEndpointServiceConnectionStatusApproved),
						},
						ProvisioningState: to.Ptr(armredisenterprise.PrivateEndpointConnectionProvisioningStateSucceeded),
					},
				},
				{
					Name: to.Ptr("pectest01"),
					Type: to.Ptr("Microsoft.Cache/redisEnterprise/privateEndpointConnections"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Cache/redisEnterprise/cache1/privateEndpointConnections/pectest01"),
					Properties: &armredisenterprise.PrivateEndpointConnectionProperties{
						PrivateEndpoint: &armredisenterprise.PrivateEndpoint{
							ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/privateEndpoints/petest01"),
						},
						PrivateLinkServiceConnectionState: &armredisenterprise.PrivateLinkServiceConnectionState{
							Description:     to.Ptr("Auto-Approved"),
							ActionsRequired: to.Ptr("None"),
							Status:          to.Ptr(armredisenterprise.PrivateEndpointServiceConnectionStatusApproved),
						},
						ProvisioningState: to.Ptr(armredisenterprise.PrivateEndpointConnectionProvisioningStateSucceeded),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PrivateEndpointConnectionListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PrivateEndpointConnectionListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/redisenterprise/resource-manager/Microsoft.Cache/stable/2022-01-01/examples/RedisEnterpriseListPrivateEndpointConnections.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnections_Get(t *testing.T) {
	// From example specification/redisenterprise/resource-manager/Microsoft.Cache/stable/2022-01-01/examples/RedisEnterpriseGetPrivateEndpointConnection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RedisEnterpriseGetPrivateEndpointConnection"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armredisenterprise.NewPrivateEndpointConnectionsClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"cache1",
		"pectest01",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/redisenterprise/resource-manager/Microsoft.Cache/stable/2022-01-01/examples/RedisEnterpriseGetPrivateEndpointConnection.json: %v", err)
	}
	// Response check
	{
		exampleRes := armredisenterprise.PrivateEndpointConnection{
			Name: to.Ptr("pectest01"),
			Type: to.Ptr("Microsoft.Cache/redisEnterprise/privateEndpointConnections"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Cache/redisEnterprise/cache1/privateEndpointConnections/pectest01"),
			Properties: &armredisenterprise.PrivateEndpointConnectionProperties{
				PrivateEndpoint: &armredisenterprise.PrivateEndpoint{
					ID: to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/privateEndpoints/petest01"),
				},
				PrivateLinkServiceConnectionState: &armredisenterprise.PrivateLinkServiceConnectionState{
					Description:     to.Ptr("Auto-Approved"),
					ActionsRequired: to.Ptr("None"),
					Status:          to.Ptr(armredisenterprise.PrivateEndpointServiceConnectionStatusApproved),
				},
				ProvisioningState: to.Ptr(armredisenterprise.PrivateEndpointConnectionProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateEndpointConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/redisenterprise/resource-manager/Microsoft.Cache/stable/2022-01-01/examples/RedisEnterpriseGetPrivateEndpointConnection.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnections_Put(t *testing.T) {
	// From example specification/redisenterprise/resource-manager/Microsoft.Cache/stable/2022-01-01/examples/RedisEnterprisePutPrivateEndpointConnection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RedisEnterprisePutPrivateEndpointConnection"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armredisenterprise.NewPrivateEndpointConnectionsClient("subid", cred, &options)
	poller, err := client.BeginPut(ctx,
		"rg1",
		"cache1",
		"pectest01",
		armredisenterprise.PrivateEndpointConnection{
			Properties: &armredisenterprise.PrivateEndpointConnectionProperties{
				PrivateLinkServiceConnectionState: &armredisenterprise.PrivateLinkServiceConnectionState{
					Description: to.Ptr("Auto-Approved"),
					Status:      to.Ptr(armredisenterprise.PrivateEndpointServiceConnectionStatusApproved),
				},
			},
		},
		&armredisenterprise.PrivateEndpointConnectionsClientBeginPutOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/redisenterprise/resource-manager/Microsoft.Cache/stable/2022-01-01/examples/RedisEnterprisePutPrivateEndpointConnection.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/redisenterprise/resource-manager/Microsoft.Cache/stable/2022-01-01/examples/RedisEnterprisePutPrivateEndpointConnection.json: %v", err)
	}
}

func TestPrivateEndpointConnections_Delete(t *testing.T) {
	// From example specification/redisenterprise/resource-manager/Microsoft.Cache/stable/2022-01-01/examples/RedisEnterpriseDeletePrivateEndpointConnection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RedisEnterpriseDeletePrivateEndpointConnection"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armredisenterprise.NewPrivateEndpointConnectionsClient("subid", cred, &options)
	_, err := client.Delete(ctx,
		"rg1",
		"cache1",
		"pectest01",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/redisenterprise/resource-manager/Microsoft.Cache/stable/2022-01-01/examples/RedisEnterpriseDeletePrivateEndpointConnection.json: %v", err)
	}
}

func TestPrivateLinkResources_ListByCluster(t *testing.T) {
	// From example specification/redisenterprise/resource-manager/Microsoft.Cache/stable/2022-01-01/examples/RedisEnterpriseListPrivateLinkResources.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"RedisEnterpriseListPrivateLinkResources"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armredisenterprise.NewPrivateLinkResourcesClient("subid", cred, &options)
	pager := client.ListByCluster("rg1",
		"cache1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/redisenterprise/resource-manager/Microsoft.Cache/stable/2022-01-01/examples/RedisEnterpriseListPrivateLinkResources.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armredisenterprise.PrivateLinkResourceListResult{
			Value: []*armredisenterprise.PrivateLinkResource{
				{
					Name: to.Ptr("redisEnterpriseCache"),
					Type: to.Ptr("Microsoft.Cache/redisEnterprise/privateLinkResources"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Cache/redisEnterprise/cache1/privateLinkResources/redisEnterpriseCache"),
					Properties: &armredisenterprise.PrivateLinkResourceProperties{
						GroupID: to.Ptr("redisEnterpriseCache"),
						RequiredMembers: []*string{
							to.Ptr("redisEnterpriseCache")},
						RequiredZoneNames: []*string{
							to.Ptr("privatelink.redisenterprise.cache.windows.net")},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PrivateLinkResourceListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PrivateLinkResourceListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/redisenterprise/resource-manager/Microsoft.Cache/stable/2022-01-01/examples/RedisEnterpriseListPrivateLinkResources.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
