//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armstreamanalytics_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/streamanalytics/armstreamanalytics"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestOperations_List(t *testing.T) {
	// From example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Operation_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List available operations for the Stream Analytics resource provider"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstreamanalytics.NewOperationsClient(cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Operation_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armstreamanalytics.OperationListResult{
			Value: []*armstreamanalytics.Operation{
				{
					Name: to.Ptr("Microsoft.StreamAnalytics/locations/quotas/Read"),
					Display: &armstreamanalytics.OperationDisplay{
						Description: to.Ptr("Read Stream Analytics Subscription Quota"),
						Operation:   to.Ptr("Read Stream Analytics Subscription Quota"),
						Provider:    to.Ptr("Microsoft Azure Stream Analytics"),
						Resource:    to.Ptr("Stream Analytics Subscription Quota"),
					},
				},
				{
					Name: to.Ptr("Microsoft.StreamAnalytics/operations/Read"),
					Display: &armstreamanalytics.OperationDisplay{
						Description: to.Ptr("Read Stream Analytics Operations"),
						Operation:   to.Ptr("Read Stream Analytics Operations"),
						Provider:    to.Ptr("Microsoft Azure Stream Analytics"),
						Resource:    to.Ptr("Stream Analytics Operations"),
					},
				},
				{
					Name: to.Ptr("Microsoft.StreamAnalytics/Register/action"),
					Display: &armstreamanalytics.OperationDisplay{
						Description: to.Ptr("Register subscription with Stream Analytics Resource Provider"),
						Operation:   to.Ptr("Register subscription with Stream Analytics Resource Provider"),
						Provider:    to.Ptr("Microsoft Azure Stream Analytics"),
						Resource:    to.Ptr("Stream Analytics Resource Provider"),
					},
				},
				{
					Name: to.Ptr("Microsoft.StreamAnalytics/streamingjobs/Delete"),
					Display: &armstreamanalytics.OperationDisplay{
						Description: to.Ptr("Delete Stream Analytics Job"),
						Operation:   to.Ptr("Delete Stream Analytics Job"),
						Provider:    to.Ptr("Microsoft Azure Stream Analytics"),
						Resource:    to.Ptr("Stream Analytics Job"),
					},
				},
				{
					Name: to.Ptr("Microsoft.StreamAnalytics/streamingjobs/functions/Delete"),
					Display: &armstreamanalytics.OperationDisplay{
						Description: to.Ptr("Delete Stream Analytics Job Function"),
						Operation:   to.Ptr("Delete Stream Analytics Job Function"),
						Provider:    to.Ptr("Microsoft Azure Stream Analytics"),
						Resource:    to.Ptr("Stream Analytics Job Function"),
					},
				},
				{
					Name: to.Ptr("Microsoft.StreamAnalytics/streamingjobs/functions/operationresults/Read"),
					Display: &armstreamanalytics.OperationDisplay{
						Description: to.Ptr("Read operation results for Stream Analytics Job Function"),
						Operation:   to.Ptr("Read operation results for Stream Analytics Job Function"),
						Provider:    to.Ptr("Microsoft Azure Stream Analytics"),
						Resource:    to.Ptr("Stream Analytics Job Function"),
					},
				},
				{
					Name: to.Ptr("Microsoft.StreamAnalytics/streamingjobs/functions/Read"),
					Display: &armstreamanalytics.OperationDisplay{
						Description: to.Ptr("Read Stream Analytics Job Function"),
						Operation:   to.Ptr("Read Stream Analytics Job Function"),
						Provider:    to.Ptr("Microsoft Azure Stream Analytics"),
						Resource:    to.Ptr("Stream Analytics Job Function"),
					},
				},
				{
					Name: to.Ptr("Microsoft.StreamAnalytics/streamingjobs/functions/RetrieveDefaultDefinition/action"),
					Display: &armstreamanalytics.OperationDisplay{
						Description: to.Ptr("Retrieve Default Definition of a Stream Analytics Job Function"),
						Operation:   to.Ptr("Retrieve Default Definition of a Stream Analytics Job Function"),
						Provider:    to.Ptr("Microsoft Azure Stream Analytics"),
						Resource:    to.Ptr("Stream Analytics Job Function"),
					},
				},
				{
					Name: to.Ptr("Microsoft.StreamAnalytics/streamingjobs/functions/Test/action"),
					Display: &armstreamanalytics.OperationDisplay{
						Description: to.Ptr("Test Stream Analytics Job Function"),
						Operation:   to.Ptr("Test Stream Analytics Job Function"),
						Provider:    to.Ptr("Microsoft Azure Stream Analytics"),
						Resource:    to.Ptr("Stream Analytics Job Function"),
					},
				},
				{
					Name: to.Ptr("Microsoft.StreamAnalytics/streamingjobs/functions/Write"),
					Display: &armstreamanalytics.OperationDisplay{
						Description: to.Ptr("Write Stream Analytics Job Function"),
						Operation:   to.Ptr("Write Stream Analytics Job Function"),
						Provider:    to.Ptr("Microsoft Azure Stream Analytics"),
						Resource:    to.Ptr("Stream Analytics Job Function"),
					},
				},
				{
					Name: to.Ptr("Microsoft.StreamAnalytics/streamingjobs/inputs/Delete"),
					Display: &armstreamanalytics.OperationDisplay{
						Description: to.Ptr("Delete Stream Analytics Job Input"),
						Operation:   to.Ptr("Delete Stream Analytics Job Input"),
						Provider:    to.Ptr("Microsoft Azure Stream Analytics"),
						Resource:    to.Ptr("Stream Analytics Job Input"),
					},
				},
				{
					Name: to.Ptr("Microsoft.StreamAnalytics/streamingjobs/inputs/operationresults/Read"),
					Display: &armstreamanalytics.OperationDisplay{
						Description: to.Ptr("Read operation results for Stream Analytics Job Input"),
						Operation:   to.Ptr("Read operation results for Stream Analytics Job Input"),
						Provider:    to.Ptr("Microsoft Azure Stream Analytics"),
						Resource:    to.Ptr("Stream Analytics Job Input"),
					},
				},
				{
					Name: to.Ptr("Microsoft.StreamAnalytics/streamingjobs/inputs/Read"),
					Display: &armstreamanalytics.OperationDisplay{
						Description: to.Ptr("Read Stream Analytics Job Input"),
						Operation:   to.Ptr("Read Stream Analytics Job Input"),
						Provider:    to.Ptr("Microsoft Azure Stream Analytics"),
						Resource:    to.Ptr("Stream Analytics Job Input"),
					},
				},
				{
					Name: to.Ptr("Microsoft.StreamAnalytics/streamingjobs/inputs/Sample/action"),
					Display: &armstreamanalytics.OperationDisplay{
						Description: to.Ptr("Sample Stream Analytics Job Input"),
						Operation:   to.Ptr("Sample Stream Analytics Job Input"),
						Provider:    to.Ptr("Microsoft Azure Stream Analytics"),
						Resource:    to.Ptr("Stream Analytics Job Input"),
					},
				},
				{
					Name: to.Ptr("Microsoft.StreamAnalytics/streamingjobs/inputs/Test/action"),
					Display: &armstreamanalytics.OperationDisplay{
						Description: to.Ptr("Test Stream Analytics Job Input"),
						Operation:   to.Ptr("Test Stream Analytics Job Input"),
						Provider:    to.Ptr("Microsoft Azure Stream Analytics"),
						Resource:    to.Ptr("Stream Analytics Job Input"),
					},
				},
				{
					Name: to.Ptr("Microsoft.StreamAnalytics/streamingjobs/inputs/Write"),
					Display: &armstreamanalytics.OperationDisplay{
						Description: to.Ptr("Write Stream Analytics Job Input"),
						Operation:   to.Ptr("Write Stream Analytics Job Input"),
						Provider:    to.Ptr("Microsoft Azure Stream Analytics"),
						Resource:    to.Ptr("Stream Analytics Job Input"),
					},
				},
				{
					Name: to.Ptr("Microsoft.StreamAnalytics/streamingjobs/metricdefinitions/Read"),
					Display: &armstreamanalytics.OperationDisplay{
						Description: to.Ptr("Read Metric Definitions"),
						Operation:   to.Ptr("Read Metric Definitions"),
						Provider:    to.Ptr("Microsoft Azure Stream Analytics"),
						Resource:    to.Ptr("Metric Definitions"),
					},
				},
				{
					Name: to.Ptr("Microsoft.StreamAnalytics/streamingjobs/operationresults/Read"),
					Display: &armstreamanalytics.OperationDisplay{
						Description: to.Ptr("Read operation results for Stream Analytics Job"),
						Operation:   to.Ptr("Read operation results for Stream Analytics Job"),
						Provider:    to.Ptr("Microsoft Azure Stream Analytics"),
						Resource:    to.Ptr("Stream Analytics Job"),
					},
				},
				{
					Name: to.Ptr("Microsoft.StreamAnalytics/streamingjobs/outputs/Delete"),
					Display: &armstreamanalytics.OperationDisplay{
						Description: to.Ptr("Delete Stream Analytics Job Output"),
						Operation:   to.Ptr("Delete Stream Analytics Job Output"),
						Provider:    to.Ptr("Microsoft Azure Stream Analytics"),
						Resource:    to.Ptr("Stream Analytics Job Output"),
					},
				},
				{
					Name: to.Ptr("Microsoft.StreamAnalytics/streamingjobs/outputs/operationresults/Read"),
					Display: &armstreamanalytics.OperationDisplay{
						Description: to.Ptr("Read operation results for Stream Analytics Job Output"),
						Operation:   to.Ptr("Read operation results for Stream Analytics Job Output"),
						Provider:    to.Ptr("Microsoft Azure Stream Analytics"),
						Resource:    to.Ptr("Stream Analytics Job Output"),
					},
				},
				{
					Name: to.Ptr("Microsoft.StreamAnalytics/streamingjobs/outputs/Read"),
					Display: &armstreamanalytics.OperationDisplay{
						Description: to.Ptr("Read Stream Analytics Job Output"),
						Operation:   to.Ptr("Read Stream Analytics Job Output"),
						Provider:    to.Ptr("Microsoft Azure Stream Analytics"),
						Resource:    to.Ptr("Stream Analytics Job Output"),
					},
				},
				{
					Name: to.Ptr("Microsoft.StreamAnalytics/streamingjobs/outputs/Test/action"),
					Display: &armstreamanalytics.OperationDisplay{
						Description: to.Ptr("Test Stream Analytics Job Output"),
						Operation:   to.Ptr("Test Stream Analytics Job Output"),
						Provider:    to.Ptr("Microsoft Azure Stream Analytics"),
						Resource:    to.Ptr("Stream Analytics Job Output"),
					},
				},
				{
					Name: to.Ptr("Microsoft.StreamAnalytics/streamingjobs/outputs/Write"),
					Display: &armstreamanalytics.OperationDisplay{
						Description: to.Ptr("Write Stream Analytics Job Output"),
						Operation:   to.Ptr("Write Stream Analytics Job Output"),
						Provider:    to.Ptr("Microsoft Azure Stream Analytics"),
						Resource:    to.Ptr("Stream Analytics Job Output"),
					},
				},
				{
					Name: to.Ptr("Microsoft.StreamAnalytics/streamingjobs/providers/Microsoft.Insights/diagnosticSettings/read"),
					Display: &armstreamanalytics.OperationDisplay{
						Description: to.Ptr("Read diagnostic setting."),
						Operation:   to.Ptr("Read diagnostic setting."),
						Provider:    to.Ptr("Microsoft Azure Stream Analytics"),
						Resource:    to.Ptr("streamingjobs"),
					},
				},
				{
					Name: to.Ptr("Microsoft.StreamAnalytics/streamingjobs/providers/Microsoft.Insights/diagnosticSettings/write"),
					Display: &armstreamanalytics.OperationDisplay{
						Description: to.Ptr("Write diagnostic setting."),
						Operation:   to.Ptr("Write diagnostic setting."),
						Provider:    to.Ptr("Microsoft Azure Stream Analytics"),
						Resource:    to.Ptr("streamingjobs"),
					},
				},
				{
					Name: to.Ptr("Microsoft.StreamAnalytics/streamingjobs/PublishEdgePackage/action"),
					Display: &armstreamanalytics.OperationDisplay{
						Description: to.Ptr("Publish edge package for Stream Analytics Job"),
						Operation:   to.Ptr("Publish edge package for Stream Analytics Job"),
						Provider:    to.Ptr("Microsoft Azure Stream Analytics"),
						Resource:    to.Ptr("Stream Analytics Job"),
					},
				},
				{
					Name: to.Ptr("Microsoft.StreamAnalytics/streamingjobs/Read"),
					Display: &armstreamanalytics.OperationDisplay{
						Description: to.Ptr("Read Stream Analytics Job"),
						Operation:   to.Ptr("Read Stream Analytics Job"),
						Provider:    to.Ptr("Microsoft Azure Stream Analytics"),
						Resource:    to.Ptr("Stream Analytics Job"),
					},
				},
				{
					Name: to.Ptr("Microsoft.StreamAnalytics/streamingjobs/Scale/action"),
					Display: &armstreamanalytics.OperationDisplay{
						Description: to.Ptr("Scale Stream Analytics Job"),
						Operation:   to.Ptr("Scale Stream Analytics Job"),
						Provider:    to.Ptr("Microsoft Azure Stream Analytics"),
						Resource:    to.Ptr("Stream Analytics Job"),
					},
				},
				{
					Name: to.Ptr("Microsoft.StreamAnalytics/streamingjobs/Start/action"),
					Display: &armstreamanalytics.OperationDisplay{
						Description: to.Ptr("Start Stream Analytics Job"),
						Operation:   to.Ptr("Start Stream Analytics Job"),
						Provider:    to.Ptr("Microsoft Azure Stream Analytics"),
						Resource:    to.Ptr("Stream Analytics Job"),
					},
				},
				{
					Name: to.Ptr("Microsoft.StreamAnalytics/streamingjobs/Stop/action"),
					Display: &armstreamanalytics.OperationDisplay{
						Description: to.Ptr("Stop Stream Analytics Job"),
						Operation:   to.Ptr("Stop Stream Analytics Job"),
						Provider:    to.Ptr("Microsoft Azure Stream Analytics"),
						Resource:    to.Ptr("Stream Analytics Job"),
					},
				},
				{
					Name: to.Ptr("Microsoft.StreamAnalytics/streamingjobs/transformations/Delete"),
					Display: &armstreamanalytics.OperationDisplay{
						Description: to.Ptr("Delete Stream Analytics Job Transformation"),
						Operation:   to.Ptr("Delete Stream Analytics Job Transformation"),
						Provider:    to.Ptr("Microsoft Azure Stream Analytics"),
						Resource:    to.Ptr("Stream Analytics Job Transformation"),
					},
				},
				{
					Name: to.Ptr("Microsoft.StreamAnalytics/streamingjobs/transformations/Read"),
					Display: &armstreamanalytics.OperationDisplay{
						Description: to.Ptr("Read Stream Analytics Job Transformation"),
						Operation:   to.Ptr("Read Stream Analytics Job Transformation"),
						Provider:    to.Ptr("Microsoft Azure Stream Analytics"),
						Resource:    to.Ptr("Stream Analytics Job Transformation"),
					},
				},
				{
					Name: to.Ptr("Microsoft.StreamAnalytics/streamingjobs/transformations/Write"),
					Display: &armstreamanalytics.OperationDisplay{
						Description: to.Ptr("Write Stream Analytics Job Transformation"),
						Operation:   to.Ptr("Write Stream Analytics Job Transformation"),
						Provider:    to.Ptr("Microsoft Azure Stream Analytics"),
						Resource:    to.Ptr("Stream Analytics Job Transformation"),
					},
				},
				{
					Name: to.Ptr("Microsoft.StreamAnalytics/streamingjobs/Write"),
					Display: &armstreamanalytics.OperationDisplay{
						Description: to.Ptr("Write Stream Analytics Job"),
						Operation:   to.Ptr("Write Stream Analytics Job"),
						Provider:    to.Ptr("Microsoft Azure Stream Analytics"),
						Resource:    to.Ptr("Stream Analytics Job"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OperationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OperationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Operation_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestStreamingJobs_CreateOrReplace(t *testing.T) {
	// From example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/StreamingJob_Create_CompleteJob.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a complete streaming job (a streaming job with a transformation, at least 1 input and at least 1 output)"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstreamanalytics.NewStreamingJobsClient("56b5e0a9-b645-407d-99b0-c64f86013e3d", cred, &options)
	poller, err := client.BeginCreateOrReplace(ctx,
		"sjrg3276",
		"sj7804",
		armstreamanalytics.StreamingJob{
			Location: to.Ptr("West US"),
			Tags: map[string]*string{
				"key1":      to.Ptr("value1"),
				"key3":      to.Ptr("value3"),
				"randomKey": to.Ptr("randomValue"),
			},
			Properties: &armstreamanalytics.StreamingJobProperties{
				CompatibilityLevel:                 to.Ptr(armstreamanalytics.CompatibilityLevelOne0),
				DataLocale:                         to.Ptr("en-US"),
				EventsLateArrivalMaxDelayInSeconds: to.Ptr[int32](5),
				EventsOutOfOrderMaxDelayInSeconds:  to.Ptr[int32](0),
				EventsOutOfOrderPolicy:             to.Ptr(armstreamanalytics.EventsOutOfOrderPolicyDrop),
				Functions:                          []*armstreamanalytics.Function{},
				Inputs: []*armstreamanalytics.Input{
					{
						Name: to.Ptr("inputtest"),
						Properties: &armstreamanalytics.StreamInputProperties{
							Type: to.Ptr("Stream"),
							Serialization: &armstreamanalytics.JSONSerialization{
								Type: to.Ptr(armstreamanalytics.EventSerializationTypeJSON),
								Properties: &armstreamanalytics.JSONSerializationProperties{
									Encoding: to.Ptr(armstreamanalytics.EncodingUTF8),
								},
							},
							Datasource: &armstreamanalytics.BlobStreamInputDataSource{
								Type: to.Ptr("Microsoft.Storage/Blob"),
								Properties: &armstreamanalytics.BlobStreamInputDataSourceProperties{
									Container:   to.Ptr("containerName"),
									PathPattern: to.Ptr(""),
									StorageAccounts: []*armstreamanalytics.StorageAccount{
										{
											AccountKey:  to.Ptr("yourAccountKey=="),
											AccountName: to.Ptr("yourAccountName"),
										}},
								},
							},
						},
					}},
				OutputErrorPolicy: to.Ptr(armstreamanalytics.OutputErrorPolicyDrop),
				Outputs: []*armstreamanalytics.Output{
					{
						Name: to.Ptr("outputtest"),
						Properties: &armstreamanalytics.OutputProperties{
							Datasource: &armstreamanalytics.AzureSQLDatabaseOutputDataSource{
								Type: to.Ptr("Microsoft.Sql/Server/Database"),
								Properties: &armstreamanalytics.AzureSQLDatabaseOutputDataSourceProperties{
									Database: to.Ptr("databaseName"),
									Password: to.Ptr("userPassword"),
									Server:   to.Ptr("serverName"),
									Table:    to.Ptr("tableName"),
									User:     to.Ptr("<user>"),
								},
							},
						},
					}},
				SKU: &armstreamanalytics.SKU{
					Name: to.Ptr(armstreamanalytics.SKUNameStandard),
				},
				Transformation: &armstreamanalytics.Transformation{
					Name: to.Ptr("transformationtest"),
					Properties: &armstreamanalytics.TransformationProperties{
						Query:          to.Ptr("Select Id, Name from inputtest"),
						StreamingUnits: to.Ptr[int32](1),
					},
				},
			},
		},
		&armstreamanalytics.StreamingJobsClientBeginCreateOrReplaceOptions{IfMatch: nil,
			IfNoneMatch: nil,
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/StreamingJob_Create_CompleteJob.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/StreamingJob_Create_CompleteJob.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstreamanalytics.StreamingJob{
			Name:     to.Ptr("sj7804"),
			Type:     to.Ptr("Microsoft.StreamAnalytics/streamingjobs"),
			ID:       to.Ptr("/subscriptions/56b5e0a9-b645-407d-99b0-c64f86013e3d/resourceGroups/sjrg3276/providers/Microsoft.StreamAnalytics/streamingjobs/sj7804"),
			Location: to.Ptr("West US"),
			Tags: map[string]*string{
				"key1":      to.Ptr("value1"),
				"key3":      to.Ptr("value3"),
				"randomKey": to.Ptr("randomValue"),
			},
			Properties: &armstreamanalytics.StreamingJobProperties{
				CompatibilityLevel:                 to.Ptr(armstreamanalytics.CompatibilityLevelOne0),
				CreatedDate:                        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-05-11T04:37:11.54Z"); return t }()),
				DataLocale:                         to.Ptr("en-US"),
				EventsLateArrivalMaxDelayInSeconds: to.Ptr[int32](5),
				EventsOutOfOrderMaxDelayInSeconds:  to.Ptr[int32](0),
				EventsOutOfOrderPolicy:             to.Ptr(armstreamanalytics.EventsOutOfOrderPolicyDrop),
				Functions:                          []*armstreamanalytics.Function{},
				Inputs: []*armstreamanalytics.Input{
					{
						Name: to.Ptr("inputtest"),
						Type: to.Ptr("Microsoft.StreamAnalytics/streamingjobs/inputs"),
						ID:   to.Ptr("/subscriptions/56b5e0a9-b645-407d-99b0-c64f86013e3d/resourceGroups/sjrg3276/providers/Microsoft.StreamAnalytics/streamingjobs/sj7804/inputs/inputtest"),
						Properties: &armstreamanalytics.StreamInputProperties{
							Type: to.Ptr("Stream"),
							Etag: to.Ptr("ca88f8fa-605b-4c7f-8695-46f5faa60cd0"),
							Serialization: &armstreamanalytics.JSONSerialization{
								Type: to.Ptr(armstreamanalytics.EventSerializationTypeJSON),
								Properties: &armstreamanalytics.JSONSerializationProperties{
									Encoding: to.Ptr(armstreamanalytics.EncodingUTF8),
								},
							},
							Datasource: &armstreamanalytics.BlobStreamInputDataSource{
								Type: to.Ptr("Microsoft.Storage/Blob"),
								Properties: &armstreamanalytics.BlobStreamInputDataSourceProperties{
									Container:   to.Ptr("containerName"),
									PathPattern: to.Ptr(""),
									StorageAccounts: []*armstreamanalytics.StorageAccount{
										{
											AccountName: to.Ptr("accountName"),
										}},
								},
							},
						},
					}},
				JobID:             to.Ptr("732e4b1d-94a7-43ae-8297-3ad04f1540b9"),
				JobState:          to.Ptr("Created"),
				OutputErrorPolicy: to.Ptr(armstreamanalytics.OutputErrorPolicyDrop),
				Outputs: []*armstreamanalytics.Output{
					{
						Name: to.Ptr("outputtest"),
						Type: to.Ptr("Microsoft.StreamAnalytics/streamingjobs/outputs"),
						ID:   to.Ptr("/subscriptions/56b5e0a9-b645-407d-99b0-c64f86013e3d/resourceGroups/sjrg3276/providers/Microsoft.StreamAnalytics/streamingjobs/sj7804/outputs/outputtest"),
						Properties: &armstreamanalytics.OutputProperties{
							Datasource: &armstreamanalytics.AzureSQLDatabaseOutputDataSource{
								Type: to.Ptr("Microsoft.Sql/Server/Database"),
								Properties: &armstreamanalytics.AzureSQLDatabaseOutputDataSourceProperties{
									Database: to.Ptr("databaseName"),
									Server:   to.Ptr("serverName"),
									Table:    to.Ptr("tableName"),
									User:     to.Ptr("userName"),
								},
							},
							Etag: to.Ptr("62097c3c-b503-41ff-a56f-196a9598ab90"),
						},
					}},
				ProvisioningState: to.Ptr("Succeeded"),
				SKU: &armstreamanalytics.SKU{
					Name: to.Ptr(armstreamanalytics.SKUNameStandard),
				},
				Transformation: &armstreamanalytics.Transformation{
					Name: to.Ptr("transformationtest"),
					Type: to.Ptr("Microsoft.StreamAnalytics/streamingjobs/transformations"),
					ID:   to.Ptr("/subscriptions/56b5e0a9-b645-407d-99b0-c64f86013e3d/resourceGroups/sjrg3276/providers/Microsoft.StreamAnalytics/streamingjobs/sj7804/transformations/transformationtest"),
					Properties: &armstreamanalytics.TransformationProperties{
						Etag:           to.Ptr("91d8fcbe-60b3-49c3-9f21-9942b95602b8"),
						Query:          to.Ptr("Select Id, Name from inputtest"),
						StreamingUnits: to.Ptr[int32](1),
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.StreamingJob) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.StreamingJob)
			t.Fatalf("Mock response is not equal to example response for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/StreamingJob_Create_CompleteJob.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/StreamingJob_Create_JobShell.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a streaming job shell (a streaming job with no inputs, outputs, transformation, or functions)"},
	})
	client = armstreamanalytics.NewStreamingJobsClient("56b5e0a9-b645-407d-99b0-c64f86013e3d", cred, &options)
	poller, err = client.BeginCreateOrReplace(ctx,
		"sjrg6936",
		"sj59",
		armstreamanalytics.StreamingJob{
			Location: to.Ptr("West US"),
			Tags: map[string]*string{
				"key1":      to.Ptr("value1"),
				"key3":      to.Ptr("value3"),
				"randomKey": to.Ptr("randomValue"),
			},
			Properties: &armstreamanalytics.StreamingJobProperties{
				CompatibilityLevel:                 to.Ptr(armstreamanalytics.CompatibilityLevelOne0),
				DataLocale:                         to.Ptr("en-US"),
				EventsLateArrivalMaxDelayInSeconds: to.Ptr[int32](16),
				EventsOutOfOrderMaxDelayInSeconds:  to.Ptr[int32](5),
				EventsOutOfOrderPolicy:             to.Ptr(armstreamanalytics.EventsOutOfOrderPolicyDrop),
				Functions:                          []*armstreamanalytics.Function{},
				Inputs:                             []*armstreamanalytics.Input{},
				OutputErrorPolicy:                  to.Ptr(armstreamanalytics.OutputErrorPolicyDrop),
				Outputs:                            []*armstreamanalytics.Output{},
				SKU: &armstreamanalytics.SKU{
					Name: to.Ptr(armstreamanalytics.SKUNameStandard),
				},
			},
		},
		&armstreamanalytics.StreamingJobsClientBeginCreateOrReplaceOptions{IfMatch: nil,
			IfNoneMatch: nil,
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/StreamingJob_Create_JobShell.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/StreamingJob_Create_JobShell.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstreamanalytics.StreamingJob{
			Name:     to.Ptr("sj59"),
			Type:     to.Ptr("Microsoft.StreamAnalytics/streamingjobs"),
			ID:       to.Ptr("/subscriptions/56b5e0a9-b645-407d-99b0-c64f86013e3d/resourceGroups/sjrg6936/providers/Microsoft.StreamAnalytics/streamingjobs/sj59"),
			Location: to.Ptr("West US"),
			Tags: map[string]*string{
				"key1":      to.Ptr("value1"),
				"key3":      to.Ptr("value3"),
				"randomKey": to.Ptr("randomValue"),
			},
			Properties: &armstreamanalytics.StreamingJobProperties{
				CompatibilityLevel:                 to.Ptr(armstreamanalytics.CompatibilityLevelOne0),
				CreatedDate:                        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-05-11T04:37:04.697Z"); return t }()),
				DataLocale:                         to.Ptr("en-US"),
				EventsLateArrivalMaxDelayInSeconds: to.Ptr[int32](16),
				EventsOutOfOrderMaxDelayInSeconds:  to.Ptr[int32](5),
				EventsOutOfOrderPolicy:             to.Ptr(armstreamanalytics.EventsOutOfOrderPolicyDrop),
				Functions:                          []*armstreamanalytics.Function{},
				Inputs:                             []*armstreamanalytics.Input{},
				JobID:                              to.Ptr("d53ecc3c-fcb0-485d-9caf-25e20fcb2061"),
				JobState:                           to.Ptr("Created"),
				OutputErrorPolicy:                  to.Ptr(armstreamanalytics.OutputErrorPolicyDrop),
				Outputs:                            []*armstreamanalytics.Output{},
				ProvisioningState:                  to.Ptr("Succeeded"),
				SKU: &armstreamanalytics.SKU{
					Name: to.Ptr(armstreamanalytics.SKUNameStandard),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.StreamingJob) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.StreamingJob)
			t.Fatalf("Mock response is not equal to example response for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/StreamingJob_Create_JobShell.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestStreamingJobs_Update(t *testing.T) {
	// From example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/StreamingJob_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a streaming job"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstreamanalytics.NewStreamingJobsClient("56b5e0a9-b645-407d-99b0-c64f86013e3d", cred, &options)
	res, err := client.Update(ctx,
		"sjrg6936",
		"sj59",
		armstreamanalytics.StreamingJob{
			Properties: &armstreamanalytics.StreamingJobProperties{
				EventsLateArrivalMaxDelayInSeconds: to.Ptr[int32](13),
				EventsOutOfOrderMaxDelayInSeconds:  to.Ptr[int32](21),
			},
		},
		&armstreamanalytics.StreamingJobsClientUpdateOptions{IfMatch: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/StreamingJob_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstreamanalytics.StreamingJob{
			Name:     to.Ptr("sj59"),
			Type:     to.Ptr("Microsoft.StreamAnalytics/streamingjobs"),
			ID:       to.Ptr("/subscriptions/56b5e0a9-b645-407d-99b0-c64f86013e3d/resourceGroups/sjrg6936/providers/Microsoft.StreamAnalytics/streamingjobs/sj59"),
			Location: to.Ptr("West US"),
			Tags: map[string]*string{
				"key1":      to.Ptr("value1"),
				"key3":      to.Ptr("value3"),
				"randomKey": to.Ptr("randomValue"),
			},
			Properties: &armstreamanalytics.StreamingJobProperties{
				CompatibilityLevel:                 to.Ptr(armstreamanalytics.CompatibilityLevelOne0),
				CreatedDate:                        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-05-11T04:37:04.697Z"); return t }()),
				DataLocale:                         to.Ptr("en-US"),
				EventsLateArrivalMaxDelayInSeconds: to.Ptr[int32](13),
				EventsOutOfOrderMaxDelayInSeconds:  to.Ptr[int32](21),
				EventsOutOfOrderPolicy:             to.Ptr(armstreamanalytics.EventsOutOfOrderPolicyDrop),
				JobID:                              to.Ptr("d53ecc3c-fcb0-485d-9caf-25e20fcb2061"),
				JobState:                           to.Ptr("Created"),
				OutputErrorPolicy:                  to.Ptr(armstreamanalytics.OutputErrorPolicyDrop),
				ProvisioningState:                  to.Ptr("Succeeded"),
				SKU: &armstreamanalytics.SKU{
					Name: to.Ptr(armstreamanalytics.SKUNameStandard),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.StreamingJob) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.StreamingJob)
			t.Fatalf("Mock response is not equal to example response for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/StreamingJob_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestStreamingJobs_Delete(t *testing.T) {
	// From example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/StreamingJob_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a streaming job"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstreamanalytics.NewStreamingJobsClient("56b5e0a9-b645-407d-99b0-c64f86013e3d", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"sjrg6936",
		"sj59",
		&armstreamanalytics.StreamingJobsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/StreamingJob_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/StreamingJob_Delete.json: %v", err)
	}
}

func TestStreamingJobs_Get(t *testing.T) {
	// From example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/StreamingJob_Get_NoExpand.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a streaming job and do not use the $expand OData query parameter"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstreamanalytics.NewStreamingJobsClient("56b5e0a9-b645-407d-99b0-c64f86013e3d", cred, &options)
	res, err := client.Get(ctx,
		"sjrg6936",
		"sj59",
		&armstreamanalytics.StreamingJobsClientGetOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/StreamingJob_Get_NoExpand.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstreamanalytics.StreamingJob{
			Name:     to.Ptr("sj59"),
			Type:     to.Ptr("Microsoft.StreamAnalytics/streamingjobs"),
			ID:       to.Ptr("/subscriptions/56b5e0a9-b645-407d-99b0-c64f86013e3d/resourceGroups/sjrg6936/providers/Microsoft.StreamAnalytics/streamingjobs/sj59"),
			Location: to.Ptr("West US"),
			Tags: map[string]*string{
				"key1":      to.Ptr("value1"),
				"key3":      to.Ptr("value3"),
				"randomKey": to.Ptr("randomValue"),
			},
			Properties: &armstreamanalytics.StreamingJobProperties{
				CompatibilityLevel:                 to.Ptr(armstreamanalytics.CompatibilityLevelOne0),
				CreatedDate:                        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-05-11T04:37:04.697Z"); return t }()),
				DataLocale:                         to.Ptr("en-US"),
				EventsLateArrivalMaxDelayInSeconds: to.Ptr[int32](16),
				EventsOutOfOrderMaxDelayInSeconds:  to.Ptr[int32](5),
				EventsOutOfOrderPolicy:             to.Ptr(armstreamanalytics.EventsOutOfOrderPolicyDrop),
				JobID:                              to.Ptr("d53ecc3c-fcb0-485d-9caf-25e20fcb2061"),
				JobState:                           to.Ptr("Created"),
				OutputErrorPolicy:                  to.Ptr(armstreamanalytics.OutputErrorPolicyDrop),
				ProvisioningState:                  to.Ptr("Succeeded"),
				SKU: &armstreamanalytics.SKU{
					Name: to.Ptr(armstreamanalytics.SKUNameStandard),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.StreamingJob) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.StreamingJob)
			t.Fatalf("Mock response is not equal to example response for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/StreamingJob_Get_NoExpand.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/StreamingJob_Get_Expand.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a streaming job and use the $expand OData query parameter to expand inputs, outputs, transformation, and functions"},
	})
	client = armstreamanalytics.NewStreamingJobsClient("56b5e0a9-b645-407d-99b0-c64f86013e3d", cred, &options)
	res, err = client.Get(ctx,
		"sjrg3276",
		"sj7804",
		&armstreamanalytics.StreamingJobsClientGetOptions{Expand: to.Ptr("inputs,outputs,transformation,functions")})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/StreamingJob_Get_Expand.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstreamanalytics.StreamingJob{
			Name:     to.Ptr("sj7804"),
			Type:     to.Ptr("Microsoft.StreamAnalytics/streamingjobs"),
			ID:       to.Ptr("/subscriptions/56b5e0a9-b645-407d-99b0-c64f86013e3d/resourceGroups/sjrg3276/providers/Microsoft.StreamAnalytics/streamingjobs/sj7804"),
			Location: to.Ptr("West US"),
			Tags: map[string]*string{
				"key1":      to.Ptr("value1"),
				"key3":      to.Ptr("value3"),
				"randomKey": to.Ptr("randomValue"),
			},
			Properties: &armstreamanalytics.StreamingJobProperties{
				CompatibilityLevel:                 to.Ptr(armstreamanalytics.CompatibilityLevelOne0),
				CreatedDate:                        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-05-11T04:37:11.54Z"); return t }()),
				DataLocale:                         to.Ptr("en-US"),
				EventsLateArrivalMaxDelayInSeconds: to.Ptr[int32](5),
				EventsOutOfOrderMaxDelayInSeconds:  to.Ptr[int32](0),
				EventsOutOfOrderPolicy:             to.Ptr(armstreamanalytics.EventsOutOfOrderPolicyDrop),
				Functions:                          []*armstreamanalytics.Function{},
				Inputs: []*armstreamanalytics.Input{
					{
						Name: to.Ptr("inputtest"),
						Type: to.Ptr("Microsoft.StreamAnalytics/streamingjobs/inputs"),
						ID:   to.Ptr("/subscriptions/56b5e0a9-b645-407d-99b0-c64f86013e3d/resourceGroups/sjrg3276/providers/Microsoft.StreamAnalytics/streamingjobs/sj7804/inputs/inputtest"),
						Properties: &armstreamanalytics.StreamInputProperties{
							Type: to.Ptr("Stream"),
							Etag: to.Ptr("ca88f8fa-605b-4c7f-8695-46f5faa60cd0"),
							Serialization: &armstreamanalytics.JSONSerialization{
								Type: to.Ptr(armstreamanalytics.EventSerializationTypeJSON),
								Properties: &armstreamanalytics.JSONSerializationProperties{
									Encoding: to.Ptr(armstreamanalytics.EncodingUTF8),
								},
							},
							Datasource: &armstreamanalytics.BlobStreamInputDataSource{
								Type: to.Ptr("Microsoft.Storage/Blob"),
								Properties: &armstreamanalytics.BlobStreamInputDataSourceProperties{
									Container:   to.Ptr("containerName"),
									PathPattern: to.Ptr(""),
									StorageAccounts: []*armstreamanalytics.StorageAccount{
										{
											AccountName: to.Ptr("accountName"),
										}},
								},
							},
						},
					}},
				JobID:             to.Ptr("732e4b1d-94a7-43ae-8297-3ad04f1540b9"),
				JobState:          to.Ptr("Created"),
				OutputErrorPolicy: to.Ptr(armstreamanalytics.OutputErrorPolicyDrop),
				Outputs: []*armstreamanalytics.Output{
					{
						Name: to.Ptr("outputtest"),
						Type: to.Ptr("Microsoft.StreamAnalytics/streamingjobs/outputs"),
						ID:   to.Ptr("/subscriptions/56b5e0a9-b645-407d-99b0-c64f86013e3d/resourceGroups/sjrg3276/providers/Microsoft.StreamAnalytics/streamingjobs/sj7804/outputs/outputtest"),
						Properties: &armstreamanalytics.OutputProperties{
							Datasource: &armstreamanalytics.AzureSQLDatabaseOutputDataSource{
								Type: to.Ptr("Microsoft.Sql/Server/Database"),
								Properties: &armstreamanalytics.AzureSQLDatabaseOutputDataSourceProperties{
									Database: to.Ptr("databaseName"),
									Server:   to.Ptr("serverName"),
									Table:    to.Ptr("tableName"),
									User:     to.Ptr("userName"),
								},
							},
							Etag: to.Ptr("62097c3c-b503-41ff-a56f-196a9598ab90"),
						},
					}},
				ProvisioningState: to.Ptr("Succeeded"),
				SKU: &armstreamanalytics.SKU{
					Name: to.Ptr(armstreamanalytics.SKUNameStandard),
				},
				Transformation: &armstreamanalytics.Transformation{
					Name: to.Ptr("transformationtest"),
					Type: to.Ptr("Microsoft.StreamAnalytics/streamingjobs/transformations"),
					ID:   to.Ptr("/subscriptions/56b5e0a9-b645-407d-99b0-c64f86013e3d/resourceGroups/sjrg3276/providers/Microsoft.StreamAnalytics/streamingjobs/sj7804/transformations/transformationtest"),
					Properties: &armstreamanalytics.TransformationProperties{
						Etag:           to.Ptr("91d8fcbe-60b3-49c3-9f21-9942b95602b8"),
						Query:          to.Ptr("Select Id, Name from inputtest"),
						StreamingUnits: to.Ptr[int32](1),
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.StreamingJob) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.StreamingJob)
			t.Fatalf("Mock response is not equal to example response for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/StreamingJob_Get_Expand.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestStreamingJobs_ListByResourceGroup(t *testing.T) {
	// From example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/StreamingJob_List_ByResourceGroup_NoExpand.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all streaming jobs in a resource group and do not use the $expand OData query parameter"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstreamanalytics.NewStreamingJobsClient("56b5e0a9-b645-407d-99b0-c64f86013e3d", cred, &options)
	pager := client.ListByResourceGroup("sjrg6936",
		&armstreamanalytics.StreamingJobsClientListByResourceGroupOptions{Expand: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/StreamingJob_List_ByResourceGroup_NoExpand.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armstreamanalytics.StreamingJobListResult{
			Value: []*armstreamanalytics.StreamingJob{
				{
					Name:     to.Ptr("sj59"),
					Type:     to.Ptr("Microsoft.StreamAnalytics/streamingjobs"),
					ID:       to.Ptr("/subscriptions/56b5e0a9-b645-407d-99b0-c64f86013e3d/resourceGroups/sjrg6936/providers/Microsoft.StreamAnalytics/streamingjobs/sj59"),
					Location: to.Ptr("West US"),
					Tags: map[string]*string{
						"key1":      to.Ptr("value1"),
						"key3":      to.Ptr("value3"),
						"randomKey": to.Ptr("randomValue"),
					},
					Properties: &armstreamanalytics.StreamingJobProperties{
						CompatibilityLevel:                 to.Ptr(armstreamanalytics.CompatibilityLevelOne0),
						CreatedDate:                        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-05-11T04:37:04.697Z"); return t }()),
						DataLocale:                         to.Ptr("en-US"),
						Etag:                               to.Ptr("3e6872bc-c9d0-45b6-91b6-da66f1773056"),
						EventsLateArrivalMaxDelayInSeconds: to.Ptr[int32](13),
						EventsOutOfOrderMaxDelayInSeconds:  to.Ptr[int32](21),
						EventsOutOfOrderPolicy:             to.Ptr(armstreamanalytics.EventsOutOfOrderPolicyDrop),
						JobID:                              to.Ptr("d53ecc3c-fcb0-485d-9caf-25e20fcb2061"),
						JobState:                           to.Ptr("Created"),
						OutputErrorPolicy:                  to.Ptr(armstreamanalytics.OutputErrorPolicyDrop),
						ProvisioningState:                  to.Ptr("Succeeded"),
						SKU: &armstreamanalytics.SKU{
							Name: to.Ptr(armstreamanalytics.SKUNameStandard),
						},
					},
				},
				{
					Name:     to.Ptr("sj69"),
					Type:     to.Ptr("Microsoft.StreamAnalytics/streamingjobs"),
					ID:       to.Ptr("/subscriptions/56b5e0a9-b645-407d-99b0-c64f86013e3d/resourceGroups/sjrg6936/providers/Microsoft.StreamAnalytics/streamingjobs/sj69"),
					Location: to.Ptr("West US"),
					Tags: map[string]*string{
						"key1":      to.Ptr("value1"),
						"key3":      to.Ptr("value3"),
						"randomKey": to.Ptr("randomValue"),
					},
					Properties: &armstreamanalytics.StreamingJobProperties{
						CompatibilityLevel:                 to.Ptr(armstreamanalytics.CompatibilityLevelOne0),
						CreatedDate:                        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-05-11T04:38:04.697Z"); return t }()),
						DataLocale:                         to.Ptr("en-US"),
						Etag:                               to.Ptr("99538949-a164-4e2f-a991-40303e86024f"),
						EventsLateArrivalMaxDelayInSeconds: to.Ptr[int32](6),
						EventsOutOfOrderMaxDelayInSeconds:  to.Ptr[int32](5),
						EventsOutOfOrderPolicy:             to.Ptr(armstreamanalytics.EventsOutOfOrderPolicyDrop),
						JobID:                              to.Ptr("817b36cf-a161-4a9e-86f2-eb00b3566d88"),
						JobState:                           to.Ptr("Created"),
						OutputErrorPolicy:                  to.Ptr(armstreamanalytics.OutputErrorPolicyDrop),
						ProvisioningState:                  to.Ptr("Succeeded"),
						SKU: &armstreamanalytics.SKU{
							Name: to.Ptr(armstreamanalytics.SKUNameStandard),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.StreamingJobListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.StreamingJobListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/StreamingJob_List_ByResourceGroup_NoExpand.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/StreamingJob_List_ByResourceGroup_Expand.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all streaming jobs in a resource group and use the $expand OData query parameter to expand inputs, outputs, transformation, and functions"},
	})
	client = armstreamanalytics.NewStreamingJobsClient("56b5e0a9-b645-407d-99b0-c64f86013e3d", cred, &options)
	pager = client.ListByResourceGroup("sjrg3276",
		&armstreamanalytics.StreamingJobsClientListByResourceGroupOptions{Expand: to.Ptr("inputs,outputs,transformation,functions")})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/StreamingJob_List_ByResourceGroup_Expand.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armstreamanalytics.StreamingJobListResult{
			Value: []*armstreamanalytics.StreamingJob{
				{
					Name:     to.Ptr("sj7804"),
					Type:     to.Ptr("Microsoft.StreamAnalytics/streamingjobs"),
					ID:       to.Ptr("/subscriptions/56b5e0a9-b645-407d-99b0-c64f86013e3d/resourceGroups/sjrg3276/providers/Microsoft.StreamAnalytics/streamingjobs/sj7804"),
					Location: to.Ptr("West US"),
					Tags: map[string]*string{
						"key1":      to.Ptr("value1"),
						"key3":      to.Ptr("value3"),
						"randomKey": to.Ptr("randomValue"),
					},
					Properties: &armstreamanalytics.StreamingJobProperties{
						CompatibilityLevel:                 to.Ptr(armstreamanalytics.CompatibilityLevelOne0),
						CreatedDate:                        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-05-11T04:37:11.54Z"); return t }()),
						DataLocale:                         to.Ptr("en-US"),
						Etag:                               to.Ptr("8081b2a3-dfe6-457f-8740-1a22d209bf8a"),
						EventsLateArrivalMaxDelayInSeconds: to.Ptr[int32](5),
						EventsOutOfOrderMaxDelayInSeconds:  to.Ptr[int32](0),
						EventsOutOfOrderPolicy:             to.Ptr(armstreamanalytics.EventsOutOfOrderPolicyAdjust),
						Functions:                          []*armstreamanalytics.Function{},
						Inputs: []*armstreamanalytics.Input{
							{
								Name: to.Ptr("inputtest"),
								Type: to.Ptr("Microsoft.StreamAnalytics/streamingjobs/inputs"),
								ID:   to.Ptr("/subscriptions/56b5e0a9-b645-407d-99b0-c64f86013e3d/resourceGroups/sjrg3276/providers/Microsoft.StreamAnalytics/streamingjobs/sj7804/inputs/inputtest"),
								Properties: &armstreamanalytics.StreamInputProperties{
									Type: to.Ptr("Stream"),
									Etag: to.Ptr("ca88f8fa-605b-4c7f-8695-46f5faa60cd0"),
									Serialization: &armstreamanalytics.JSONSerialization{
										Type: to.Ptr(armstreamanalytics.EventSerializationTypeJSON),
										Properties: &armstreamanalytics.JSONSerializationProperties{
											Encoding: to.Ptr(armstreamanalytics.EncodingUTF8),
										},
									},
									Datasource: &armstreamanalytics.BlobStreamInputDataSource{
										Type: to.Ptr("Microsoft.Storage/Blob"),
										Properties: &armstreamanalytics.BlobStreamInputDataSourceProperties{
											Container:   to.Ptr("containerName"),
											PathPattern: to.Ptr(""),
											StorageAccounts: []*armstreamanalytics.StorageAccount{
												{
													AccountName: to.Ptr("accountName"),
												}},
										},
									},
								},
							}},
						JobID:             to.Ptr("732e4b1d-94a7-43ae-8297-3ad04f1540b9"),
						JobState:          to.Ptr("Created"),
						OutputErrorPolicy: to.Ptr(armstreamanalytics.OutputErrorPolicyStop),
						Outputs: []*armstreamanalytics.Output{
							{
								Name: to.Ptr("outputtest"),
								Type: to.Ptr("Microsoft.StreamAnalytics/streamingjobs/outputs"),
								ID:   to.Ptr("/subscriptions/56b5e0a9-b645-407d-99b0-c64f86013e3d/resourceGroups/sjrg3276/providers/Microsoft.StreamAnalytics/streamingjobs/sj7804/outputs/outputtest"),
								Properties: &armstreamanalytics.OutputProperties{
									Datasource: &armstreamanalytics.AzureSQLDatabaseOutputDataSource{
										Type: to.Ptr("Microsoft.Sql/Server/Database"),
										Properties: &armstreamanalytics.AzureSQLDatabaseOutputDataSourceProperties{
											Database: to.Ptr("databaseName"),
											Server:   to.Ptr("serverName"),
											Table:    to.Ptr("tableName"),
											User:     to.Ptr("userName"),
										},
									},
									Etag: to.Ptr("62097c3c-b503-41ff-a56f-196a9598ab90"),
								},
							}},
						ProvisioningState: to.Ptr("Succeeded"),
						SKU: &armstreamanalytics.SKU{
							Name: to.Ptr(armstreamanalytics.SKUNameStandard),
						},
						Transformation: &armstreamanalytics.Transformation{
							Name: to.Ptr("transformationtest"),
							Type: to.Ptr("Microsoft.StreamAnalytics/streamingjobs/transformations"),
							ID:   to.Ptr("/subscriptions/56b5e0a9-b645-407d-99b0-c64f86013e3d/resourceGroups/sjrg3276/providers/Microsoft.StreamAnalytics/streamingjobs/sj7804/transformations/transformationtest"),
							Properties: &armstreamanalytics.TransformationProperties{
								Etag:           to.Ptr("91d8fcbe-60b3-49c3-9f21-9942b95602b8"),
								Query:          to.Ptr("Select Id, Name from inputtest"),
								StreamingUnits: to.Ptr[int32](1),
							},
						},
					},
				},
				{
					Name:     to.Ptr("sj7805"),
					Type:     to.Ptr("Microsoft.StreamAnalytics/streamingjobs"),
					ID:       to.Ptr("/subscriptions/56b5e0a9-b645-407d-99b0-c64f86013e3d/resourceGroups/sjrg3276/providers/Microsoft.StreamAnalytics/streamingjobs/sj7805"),
					Location: to.Ptr("West US"),
					Tags: map[string]*string{
						"key1":      to.Ptr("value1"),
						"key3":      to.Ptr("value3"),
						"randomKey": to.Ptr("randomValue"),
					},
					Properties: &armstreamanalytics.StreamingJobProperties{
						CompatibilityLevel:                 to.Ptr(armstreamanalytics.CompatibilityLevelOne0),
						CreatedDate:                        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-05-11T04:38:11.54Z"); return t }()),
						DataLocale:                         to.Ptr("en-US"),
						Etag:                               to.Ptr("5420059f-e5d7-47d4-be44-40816a4dca7e"),
						EventsLateArrivalMaxDelayInSeconds: to.Ptr[int32](5),
						EventsOutOfOrderMaxDelayInSeconds:  to.Ptr[int32](0),
						EventsOutOfOrderPolicy:             to.Ptr(armstreamanalytics.EventsOutOfOrderPolicyAdjust),
						Functions:                          []*armstreamanalytics.Function{},
						Inputs: []*armstreamanalytics.Input{
							{
								Name: to.Ptr("inputtest"),
								Type: to.Ptr("Microsoft.StreamAnalytics/streamingjobs/inputs"),
								ID:   to.Ptr("/subscriptions/56b5e0a9-b645-407d-99b0-c64f86013e3d/resourceGroups/sjrg3276/providers/Microsoft.StreamAnalytics/streamingjobs/sj7804/inputs/inputtest"),
								Properties: &armstreamanalytics.StreamInputProperties{
									Type: to.Ptr("Stream"),
									Etag: to.Ptr("45dcf40f-88bb-4776-b5ca-7b10a607cb59"),
									Serialization: &armstreamanalytics.JSONSerialization{
										Type: to.Ptr(armstreamanalytics.EventSerializationTypeJSON),
										Properties: &armstreamanalytics.JSONSerializationProperties{
											Encoding: to.Ptr(armstreamanalytics.EncodingUTF8),
										},
									},
									Datasource: &armstreamanalytics.BlobStreamInputDataSource{
										Type: to.Ptr("Microsoft.Storage/Blob"),
										Properties: &armstreamanalytics.BlobStreamInputDataSourceProperties{
											Container:   to.Ptr("containerName"),
											PathPattern: to.Ptr(""),
											StorageAccounts: []*armstreamanalytics.StorageAccount{
												{
													AccountName: to.Ptr("accountName"),
												}},
										},
									},
								},
							}},
						JobID:             to.Ptr("d8f4041a-0793-433e-a38d-5499d5332113"),
						JobState:          to.Ptr("Created"),
						OutputErrorPolicy: to.Ptr(armstreamanalytics.OutputErrorPolicyStop),
						Outputs: []*armstreamanalytics.Output{
							{
								Name: to.Ptr("outputtest"),
								Type: to.Ptr("Microsoft.StreamAnalytics/streamingjobs/outputs"),
								ID:   to.Ptr("/subscriptions/56b5e0a9-b645-407d-99b0-c64f86013e3d/resourceGroups/sjrg3276/providers/Microsoft.StreamAnalytics/streamingjobs/sj7804/outputs/outputtest"),
								Properties: &armstreamanalytics.OutputProperties{
									Datasource: &armstreamanalytics.AzureSQLDatabaseOutputDataSource{
										Type: to.Ptr("Microsoft.Sql/Server/Database"),
										Properties: &armstreamanalytics.AzureSQLDatabaseOutputDataSourceProperties{
											Database: to.Ptr("databaseName"),
											Server:   to.Ptr("serverName"),
											Table:    to.Ptr("tableName"),
											User:     to.Ptr("userName"),
										},
									},
									Etag: to.Ptr("b09606c8-1b0d-43c9-affb-fac0e18b9481"),
								},
							}},
						ProvisioningState: to.Ptr("Succeeded"),
						SKU: &armstreamanalytics.SKU{
							Name: to.Ptr(armstreamanalytics.SKUNameStandard),
						},
						Transformation: &armstreamanalytics.Transformation{
							Name: to.Ptr("transformationtest"),
							Type: to.Ptr("Microsoft.StreamAnalytics/streamingjobs/transformations"),
							ID:   to.Ptr("/subscriptions/56b5e0a9-b645-407d-99b0-c64f86013e3d/resourceGroups/sjrg3276/providers/Microsoft.StreamAnalytics/streamingjobs/sj7804/transformations/transformationtest"),
							Properties: &armstreamanalytics.TransformationProperties{
								Etag:           to.Ptr("288d95c0-204b-4c54-828f-f57aa6896b2a"),
								Query:          to.Ptr("Select Id, Name from inputtest"),
								StreamingUnits: to.Ptr[int32](1),
							},
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.StreamingJobListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.StreamingJobListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/StreamingJob_List_ByResourceGroup_Expand.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestStreamingJobs_List(t *testing.T) {
	// From example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/StreamingJob_List_BySubscription_NoExpand.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all streaming jobs in a subscription and do not use the $expand OData query parameter"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstreamanalytics.NewStreamingJobsClient("56b5e0a9-b645-407d-99b0-c64f86013e3d", cred, &options)
	pager := client.List(&armstreamanalytics.StreamingJobsClientListOptions{Expand: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/StreamingJob_List_BySubscription_NoExpand.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armstreamanalytics.StreamingJobListResult{
			Value: []*armstreamanalytics.StreamingJob{
				{
					Name:     to.Ptr("sj59"),
					Type:     to.Ptr("Microsoft.StreamAnalytics/streamingjobs"),
					ID:       to.Ptr("/subscriptions/56b5e0a9-b645-407d-99b0-c64f86013e3d/resourceGroups/sjrg6936/providers/Microsoft.StreamAnalytics/streamingjobs/sj59"),
					Location: to.Ptr("West US"),
					Tags: map[string]*string{
						"key1":      to.Ptr("value1"),
						"key3":      to.Ptr("value3"),
						"randomKey": to.Ptr("randomValue"),
					},
					Properties: &armstreamanalytics.StreamingJobProperties{
						CompatibilityLevel:                 to.Ptr(armstreamanalytics.CompatibilityLevelOne0),
						CreatedDate:                        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-05-11T04:37:04.697Z"); return t }()),
						DataLocale:                         to.Ptr("en-US"),
						Etag:                               to.Ptr("3e6872bc-c9d0-45b6-91b6-da66f1773056"),
						EventsLateArrivalMaxDelayInSeconds: to.Ptr[int32](13),
						EventsOutOfOrderMaxDelayInSeconds:  to.Ptr[int32](21),
						EventsOutOfOrderPolicy:             to.Ptr(armstreamanalytics.EventsOutOfOrderPolicyDrop),
						JobID:                              to.Ptr("d53ecc3c-fcb0-485d-9caf-25e20fcb2061"),
						JobState:                           to.Ptr("Created"),
						OutputErrorPolicy:                  to.Ptr(armstreamanalytics.OutputErrorPolicyDrop),
						ProvisioningState:                  to.Ptr("Succeeded"),
						SKU: &armstreamanalytics.SKU{
							Name: to.Ptr(armstreamanalytics.SKUNameStandard),
						},
					},
				},
				{
					Name:     to.Ptr("sj69"),
					Type:     to.Ptr("Microsoft.StreamAnalytics/streamingjobs"),
					ID:       to.Ptr("/subscriptions/56b5e0a9-b645-407d-99b0-c64f86013e3d/resourceGroups/sjrg6936/providers/Microsoft.StreamAnalytics/streamingjobs/sj69"),
					Location: to.Ptr("West US"),
					Tags: map[string]*string{
						"key1":      to.Ptr("value1"),
						"key3":      to.Ptr("value3"),
						"randomKey": to.Ptr("randomValue"),
					},
					Properties: &armstreamanalytics.StreamingJobProperties{
						CompatibilityLevel:                 to.Ptr(armstreamanalytics.CompatibilityLevelOne0),
						CreatedDate:                        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-05-11T04:38:04.697Z"); return t }()),
						DataLocale:                         to.Ptr("en-US"),
						Etag:                               to.Ptr("99538949-a164-4e2f-a991-40303e86024f"),
						EventsLateArrivalMaxDelayInSeconds: to.Ptr[int32](6),
						EventsOutOfOrderMaxDelayInSeconds:  to.Ptr[int32](5),
						EventsOutOfOrderPolicy:             to.Ptr(armstreamanalytics.EventsOutOfOrderPolicyDrop),
						JobID:                              to.Ptr("817b36cf-a161-4a9e-86f2-eb00b3566d88"),
						JobState:                           to.Ptr("Created"),
						OutputErrorPolicy:                  to.Ptr(armstreamanalytics.OutputErrorPolicyDrop),
						ProvisioningState:                  to.Ptr("Succeeded"),
						SKU: &armstreamanalytics.SKU{
							Name: to.Ptr(armstreamanalytics.SKUNameStandard),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.StreamingJobListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.StreamingJobListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/StreamingJob_List_BySubscription_NoExpand.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/StreamingJob_List_BySubscription_Expand.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all streaming jobs in a subscription and use the $expand OData query parameter to expand inputs, outputs, transformation, and functions"},
	})
	client = armstreamanalytics.NewStreamingJobsClient("56b5e0a9-b645-407d-99b0-c64f86013e3d", cred, &options)
	pager = client.List(&armstreamanalytics.StreamingJobsClientListOptions{Expand: to.Ptr("inputs,outputs,transformation,functions")})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/StreamingJob_List_BySubscription_Expand.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armstreamanalytics.StreamingJobListResult{
			Value: []*armstreamanalytics.StreamingJob{
				{
					Name:     to.Ptr("sj7804"),
					Type:     to.Ptr("Microsoft.StreamAnalytics/streamingjobs"),
					ID:       to.Ptr("/subscriptions/56b5e0a9-b645-407d-99b0-c64f86013e3d/resourceGroups/sjrg3276/providers/Microsoft.StreamAnalytics/streamingjobs/sj7804"),
					Location: to.Ptr("West US"),
					Tags: map[string]*string{
						"key1":      to.Ptr("value1"),
						"key3":      to.Ptr("value3"),
						"randomKey": to.Ptr("randomValue"),
					},
					Properties: &armstreamanalytics.StreamingJobProperties{
						CompatibilityLevel:                 to.Ptr(armstreamanalytics.CompatibilityLevelOne0),
						CreatedDate:                        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-05-11T04:37:11.54Z"); return t }()),
						DataLocale:                         to.Ptr("en-US"),
						Etag:                               to.Ptr("8081b2a3-dfe6-457f-8740-1a22d209bf8a"),
						EventsLateArrivalMaxDelayInSeconds: to.Ptr[int32](5),
						EventsOutOfOrderMaxDelayInSeconds:  to.Ptr[int32](0),
						EventsOutOfOrderPolicy:             to.Ptr(armstreamanalytics.EventsOutOfOrderPolicyAdjust),
						Functions:                          []*armstreamanalytics.Function{},
						Inputs: []*armstreamanalytics.Input{
							{
								Name: to.Ptr("inputtest"),
								Type: to.Ptr("Microsoft.StreamAnalytics/streamingjobs/inputs"),
								ID:   to.Ptr("/subscriptions/56b5e0a9-b645-407d-99b0-c64f86013e3d/resourceGroups/sjrg3276/providers/Microsoft.StreamAnalytics/streamingjobs/sj7804/inputs/inputtest"),
								Properties: &armstreamanalytics.StreamInputProperties{
									Type: to.Ptr("Stream"),
									Etag: to.Ptr("ca88f8fa-605b-4c7f-8695-46f5faa60cd0"),
									Serialization: &armstreamanalytics.JSONSerialization{
										Type: to.Ptr(armstreamanalytics.EventSerializationTypeJSON),
										Properties: &armstreamanalytics.JSONSerializationProperties{
											Encoding: to.Ptr(armstreamanalytics.EncodingUTF8),
										},
									},
									Datasource: &armstreamanalytics.BlobStreamInputDataSource{
										Type: to.Ptr("Microsoft.Storage/Blob"),
										Properties: &armstreamanalytics.BlobStreamInputDataSourceProperties{
											Container:   to.Ptr("containerName"),
											PathPattern: to.Ptr(""),
											StorageAccounts: []*armstreamanalytics.StorageAccount{
												{
													AccountName: to.Ptr("accountName"),
												}},
										},
									},
								},
							}},
						JobID:             to.Ptr("732e4b1d-94a7-43ae-8297-3ad04f1540b9"),
						JobState:          to.Ptr("Created"),
						OutputErrorPolicy: to.Ptr(armstreamanalytics.OutputErrorPolicyStop),
						Outputs: []*armstreamanalytics.Output{
							{
								Name: to.Ptr("outputtest"),
								Type: to.Ptr("Microsoft.StreamAnalytics/streamingjobs/outputs"),
								ID:   to.Ptr("/subscriptions/56b5e0a9-b645-407d-99b0-c64f86013e3d/resourceGroups/sjrg3276/providers/Microsoft.StreamAnalytics/streamingjobs/sj7804/outputs/outputtest"),
								Properties: &armstreamanalytics.OutputProperties{
									Datasource: &armstreamanalytics.AzureSQLDatabaseOutputDataSource{
										Type: to.Ptr("Microsoft.Sql/Server/Database"),
										Properties: &armstreamanalytics.AzureSQLDatabaseOutputDataSourceProperties{
											Database: to.Ptr("databaseName"),
											Server:   to.Ptr("serverName"),
											Table:    to.Ptr("tableName"),
											User:     to.Ptr("userName"),
										},
									},
									Etag: to.Ptr("62097c3c-b503-41ff-a56f-196a9598ab90"),
								},
							}},
						ProvisioningState: to.Ptr("Succeeded"),
						SKU: &armstreamanalytics.SKU{
							Name: to.Ptr(armstreamanalytics.SKUNameStandard),
						},
						Transformation: &armstreamanalytics.Transformation{
							Name: to.Ptr("transformationtest"),
							Type: to.Ptr("Microsoft.StreamAnalytics/streamingjobs/transformations"),
							ID:   to.Ptr("/subscriptions/56b5e0a9-b645-407d-99b0-c64f86013e3d/resourceGroups/sjrg3276/providers/Microsoft.StreamAnalytics/streamingjobs/sj7804/transformations/transformationtest"),
							Properties: &armstreamanalytics.TransformationProperties{
								Etag:           to.Ptr("91d8fcbe-60b3-49c3-9f21-9942b95602b8"),
								Query:          to.Ptr("Select Id, Name from inputtest"),
								StreamingUnits: to.Ptr[int32](1),
							},
						},
					},
				},
				{
					Name:     to.Ptr("sj7805"),
					Type:     to.Ptr("Microsoft.StreamAnalytics/streamingjobs"),
					ID:       to.Ptr("/subscriptions/56b5e0a9-b645-407d-99b0-c64f86013e3d/resourceGroups/sjrg3276/providers/Microsoft.StreamAnalytics/streamingjobs/sj7805"),
					Location: to.Ptr("West US"),
					Tags: map[string]*string{
						"key1":      to.Ptr("value1"),
						"key3":      to.Ptr("value3"),
						"randomKey": to.Ptr("randomValue"),
					},
					Properties: &armstreamanalytics.StreamingJobProperties{
						CompatibilityLevel:                 to.Ptr(armstreamanalytics.CompatibilityLevelOne0),
						CreatedDate:                        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-05-11T04:38:11.54Z"); return t }()),
						DataLocale:                         to.Ptr("en-US"),
						Etag:                               to.Ptr("5420059f-e5d7-47d4-be44-40816a4dca7e"),
						EventsLateArrivalMaxDelayInSeconds: to.Ptr[int32](5),
						EventsOutOfOrderMaxDelayInSeconds:  to.Ptr[int32](0),
						EventsOutOfOrderPolicy:             to.Ptr(armstreamanalytics.EventsOutOfOrderPolicyAdjust),
						Functions:                          []*armstreamanalytics.Function{},
						Inputs: []*armstreamanalytics.Input{
							{
								Name: to.Ptr("inputtest"),
								Type: to.Ptr("Microsoft.StreamAnalytics/streamingjobs/inputs"),
								ID:   to.Ptr("/subscriptions/56b5e0a9-b645-407d-99b0-c64f86013e3d/resourceGroups/sjrg3276/providers/Microsoft.StreamAnalytics/streamingjobs/sj7805/inputs/inputtest"),
								Properties: &armstreamanalytics.StreamInputProperties{
									Type: to.Ptr("Stream"),
									Etag: to.Ptr("45dcf40f-88bb-4776-b5ca-7b10a607cb59"),
									Serialization: &armstreamanalytics.JSONSerialization{
										Type: to.Ptr(armstreamanalytics.EventSerializationTypeJSON),
										Properties: &armstreamanalytics.JSONSerializationProperties{
											Encoding: to.Ptr(armstreamanalytics.EncodingUTF8),
										},
									},
									Datasource: &armstreamanalytics.BlobStreamInputDataSource{
										Type: to.Ptr("Microsoft.Storage/Blob"),
										Properties: &armstreamanalytics.BlobStreamInputDataSourceProperties{
											Container:   to.Ptr("containerName"),
											PathPattern: to.Ptr(""),
											StorageAccounts: []*armstreamanalytics.StorageAccount{
												{
													AccountName: to.Ptr("accountName"),
												}},
										},
									},
								},
							}},
						JobID:             to.Ptr("d8f4041a-0793-433e-a38d-5499d5332113"),
						JobState:          to.Ptr("Created"),
						OutputErrorPolicy: to.Ptr(armstreamanalytics.OutputErrorPolicyStop),
						Outputs: []*armstreamanalytics.Output{
							{
								Name: to.Ptr("outputtest"),
								Type: to.Ptr("Microsoft.StreamAnalytics/streamingjobs/outputs"),
								ID:   to.Ptr("/subscriptions/56b5e0a9-b645-407d-99b0-c64f86013e3d/resourceGroups/sjrg3276/providers/Microsoft.StreamAnalytics/streamingjobs/sj7805/outputs/outputtest"),
								Properties: &armstreamanalytics.OutputProperties{
									Datasource: &armstreamanalytics.AzureSQLDatabaseOutputDataSource{
										Type: to.Ptr("Microsoft.Sql/Server/Database"),
										Properties: &armstreamanalytics.AzureSQLDatabaseOutputDataSourceProperties{
											Database: to.Ptr("databaseName"),
											Server:   to.Ptr("serverName"),
											Table:    to.Ptr("tableName"),
											User:     to.Ptr("userName"),
										},
									},
									Etag: to.Ptr("b09606c8-1b0d-43c9-affb-fac0e18b9481"),
								},
							}},
						ProvisioningState: to.Ptr("Succeeded"),
						SKU: &armstreamanalytics.SKU{
							Name: to.Ptr(armstreamanalytics.SKUNameStandard),
						},
						Transformation: &armstreamanalytics.Transformation{
							Name: to.Ptr("transformationtest"),
							Type: to.Ptr("Microsoft.StreamAnalytics/streamingjobs/transformations"),
							ID:   to.Ptr("/subscriptions/56b5e0a9-b645-407d-99b0-c64f86013e3d/resourceGroups/sjrg3276/providers/Microsoft.StreamAnalytics/streamingjobs/sj7805/transformations/transformationtest"),
							Properties: &armstreamanalytics.TransformationProperties{
								Etag:           to.Ptr("288d95c0-204b-4c54-828f-f57aa6896b2a"),
								Query:          to.Ptr("Select Id, Name from inputtest"),
								StreamingUnits: to.Ptr[int32](1),
							},
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.StreamingJobListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.StreamingJobListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/StreamingJob_List_BySubscription_Expand.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestStreamingJobs_Start(t *testing.T) {
	// From example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/StreamingJob_Start_CustomTime.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Start a streaming job with CustomTime output start mode"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstreamanalytics.NewStreamingJobsClient("56b5e0a9-b645-407d-99b0-c64f86013e3d", cred, &options)
	poller, err := client.BeginStart(ctx,
		"sjrg6936",
		"sj59",
		&armstreamanalytics.StreamingJobsClientBeginStartOptions{StartJobParameters: &armstreamanalytics.StartStreamingJobParameters{
			OutputStartMode: to.Ptr(armstreamanalytics.OutputStartModeCustomTime),
			OutputStartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2012-12-12T12:12:12Z"); return t }()),
		},
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/StreamingJob_Start_CustomTime.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/StreamingJob_Start_CustomTime.json: %v", err)
	}

	// From example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/StreamingJob_Start_JobStartTime.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Start a streaming job with JobStartTime output start mode"},
	})
	client = armstreamanalytics.NewStreamingJobsClient("56b5e0a9-b645-407d-99b0-c64f86013e3d", cred, &options)
	poller, err = client.BeginStart(ctx,
		"sjrg6936",
		"sj59",
		&armstreamanalytics.StreamingJobsClientBeginStartOptions{StartJobParameters: &armstreamanalytics.StartStreamingJobParameters{
			OutputStartMode: to.Ptr(armstreamanalytics.OutputStartModeJobStartTime),
		},
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/StreamingJob_Start_JobStartTime.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/StreamingJob_Start_JobStartTime.json: %v", err)
	}

	// From example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/StreamingJob_Start_LastOutputEventTime.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Start a streaming job with LastOutputEventTime output start mode"},
	})
	client = armstreamanalytics.NewStreamingJobsClient("56b5e0a9-b645-407d-99b0-c64f86013e3d", cred, &options)
	poller, err = client.BeginStart(ctx,
		"sjrg6936",
		"sj59",
		&armstreamanalytics.StreamingJobsClientBeginStartOptions{StartJobParameters: &armstreamanalytics.StartStreamingJobParameters{
			OutputStartMode: to.Ptr(armstreamanalytics.OutputStartModeLastOutputEventTime),
		},
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/StreamingJob_Start_LastOutputEventTime.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/StreamingJob_Start_LastOutputEventTime.json: %v", err)
	}
}

func TestStreamingJobs_Stop(t *testing.T) {
	// From example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/StreamingJob_Stop.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Stop a streaming job"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstreamanalytics.NewStreamingJobsClient("56b5e0a9-b645-407d-99b0-c64f86013e3d", cred, &options)
	poller, err := client.BeginStop(ctx,
		"sjrg6936",
		"sj59",
		&armstreamanalytics.StreamingJobsClientBeginStopOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/StreamingJob_Stop.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/StreamingJob_Stop.json: %v", err)
	}
}

func TestStreamingJobs_Scale(t *testing.T) {
	// From example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/StreamingJob_Scale.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Scale a streaming job"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstreamanalytics.NewStreamingJobsClient("56b5e0a9-b645-407d-99b0-c64f86013e3d", cred, &options)
	poller, err := client.BeginScale(ctx,
		"sjrg6936",
		"sj59",
		&armstreamanalytics.StreamingJobsClientBeginScaleOptions{ScaleJobParameters: &armstreamanalytics.ScaleStreamingJobParameters{
			StreamingUnits: to.Ptr[int32](36),
		},
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/StreamingJob_Scale.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/StreamingJob_Scale.json: %v", err)
	}
}

func TestInputs_CreateOrReplace(t *testing.T) {
	// From example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Input_Create_Reference_Blob_CSV.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a reference blob input with CSV serialization"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstreamanalytics.NewInputsClient("56b5e0a9-b645-407d-99b0-c64f86013e3d", cred, &options)
	res, err := client.CreateOrReplace(ctx,
		"sjrg8440",
		"sj9597",
		"input7225",
		armstreamanalytics.Input{
			Properties: &armstreamanalytics.ReferenceInputProperties{
				Type: to.Ptr("Reference"),
				Serialization: &armstreamanalytics.CSVSerialization{
					Type: to.Ptr(armstreamanalytics.EventSerializationTypeCSV),
					Properties: &armstreamanalytics.CSVSerializationProperties{
						Encoding:       to.Ptr(armstreamanalytics.EncodingUTF8),
						FieldDelimiter: to.Ptr(","),
					},
				},
				Datasource: &armstreamanalytics.BlobReferenceInputDataSource{
					Type: to.Ptr("Microsoft.Storage/Blob"),
					Properties: &armstreamanalytics.BlobReferenceInputDataSourceProperties{
						Container:   to.Ptr("state"),
						DateFormat:  to.Ptr("yyyy/MM/dd"),
						PathPattern: to.Ptr("{date}/{time}"),
						StorageAccounts: []*armstreamanalytics.StorageAccount{
							{
								AccountKey:  to.Ptr("someAccountKey=="),
								AccountName: to.Ptr("someAccountName"),
							}},
						TimeFormat: to.Ptr("HH"),
					},
				},
			},
		},
		&armstreamanalytics.InputsClientCreateOrReplaceOptions{IfMatch: nil,
			IfNoneMatch: nil,
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Input_Create_Reference_Blob_CSV.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstreamanalytics.Input{
			Name: to.Ptr("input7225"),
			Type: to.Ptr("Microsoft.StreamAnalytics/streamingjobs/inputs"),
			ID:   to.Ptr("/subscriptions/56b5e0a9-b645-407d-99b0-c64f86013e3d/resourceGroups/sjrg8440/providers/Microsoft.StreamAnalytics/streamingjobs/sj9597/inputs/input7225"),
			Properties: &armstreamanalytics.ReferenceInputProperties{
				Type: to.Ptr("Reference"),
				Serialization: &armstreamanalytics.CSVSerialization{
					Type: to.Ptr(armstreamanalytics.EventSerializationTypeCSV),
					Properties: &armstreamanalytics.CSVSerializationProperties{
						Encoding:       to.Ptr(armstreamanalytics.EncodingUTF8),
						FieldDelimiter: to.Ptr(","),
					},
				},
				Datasource: &armstreamanalytics.BlobReferenceInputDataSource{
					Type: to.Ptr("Microsoft.Storage/Blob"),
					Properties: &armstreamanalytics.BlobReferenceInputDataSourceProperties{
						Container:   to.Ptr("state"),
						DateFormat:  to.Ptr("yyyy/MM/dd"),
						PathPattern: to.Ptr("{date}/{time}"),
						StorageAccounts: []*armstreamanalytics.StorageAccount{
							{
								AccountName: to.Ptr("someAccountName"),
							}},
						TimeFormat: to.Ptr("HH"),
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Input) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Input)
			t.Fatalf("Mock response is not equal to example response for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Input_Create_Reference_Blob_CSV.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Input_Create_Stream_EventHub_JSON.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a stream Event Hub input with JSON serialization"},
	})
	client = armstreamanalytics.NewInputsClient("56b5e0a9-b645-407d-99b0-c64f86013e3d", cred, &options)
	res, err = client.CreateOrReplace(ctx,
		"sjrg3139",
		"sj197",
		"input7425",
		armstreamanalytics.Input{
			Properties: &armstreamanalytics.StreamInputProperties{
				Type: to.Ptr("Stream"),
				Serialization: &armstreamanalytics.JSONSerialization{
					Type: to.Ptr(armstreamanalytics.EventSerializationTypeJSON),
					Properties: &armstreamanalytics.JSONSerializationProperties{
						Encoding: to.Ptr(armstreamanalytics.EncodingUTF8),
					},
				},
				Datasource: &armstreamanalytics.EventHubStreamInputDataSource{
					Type: to.Ptr("Microsoft.ServiceBus/EventHub"),
					Properties: &armstreamanalytics.EventHubStreamInputDataSourceProperties{
						ServiceBusNamespace:    to.Ptr("sdktest"),
						SharedAccessPolicyKey:  to.Ptr("someSharedAccessPolicyKey=="),
						SharedAccessPolicyName: to.Ptr("RootManageSharedAccessKey"),
						EventHubName:           to.Ptr("sdkeventhub"),
						ConsumerGroupName:      to.Ptr("sdkconsumergroup"),
					},
				},
			},
		},
		&armstreamanalytics.InputsClientCreateOrReplaceOptions{IfMatch: nil,
			IfNoneMatch: nil,
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Input_Create_Stream_EventHub_JSON.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstreamanalytics.Input{
			Name: to.Ptr("input7425"),
			Type: to.Ptr("Microsoft.StreamAnalytics/streamingjobs/inputs"),
			ID:   to.Ptr("/subscriptions/56b5e0a9-b645-407d-99b0-c64f86013e3d/resourceGroups/sjrg3139/providers/Microsoft.StreamAnalytics/streamingjobs/sj197/inputs/input7425"),
			Properties: &armstreamanalytics.StreamInputProperties{
				Type: to.Ptr("Stream"),
				Serialization: &armstreamanalytics.JSONSerialization{
					Type: to.Ptr(armstreamanalytics.EventSerializationTypeJSON),
					Properties: &armstreamanalytics.JSONSerializationProperties{
						Encoding: to.Ptr(armstreamanalytics.EncodingUTF8),
					},
				},
				Datasource: &armstreamanalytics.EventHubStreamInputDataSource{
					Type: to.Ptr("Microsoft.ServiceBus/EventHub"),
					Properties: &armstreamanalytics.EventHubStreamInputDataSourceProperties{
						ServiceBusNamespace:    to.Ptr("sdktest"),
						SharedAccessPolicyName: to.Ptr("RootManageSharedAccessKey"),
						EventHubName:           to.Ptr("sdkeventhub"),
						ConsumerGroupName:      to.Ptr("sdkconsumergroup"),
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Input) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Input)
			t.Fatalf("Mock response is not equal to example response for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Input_Create_Stream_EventHub_JSON.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Input_Create_Stream_IoTHub_Avro.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a stream IoT Hub input with Avro serialization"},
	})
	client = armstreamanalytics.NewInputsClient("56b5e0a9-b645-407d-99b0-c64f86013e3d", cred, &options)
	res, err = client.CreateOrReplace(ctx,
		"sjrg3467",
		"sj9742",
		"input7970",
		armstreamanalytics.Input{
			Properties: &armstreamanalytics.StreamInputProperties{
				Type: to.Ptr("Stream"),
				Serialization: &armstreamanalytics.AvroSerialization{
					Type: to.Ptr(armstreamanalytics.EventSerializationTypeAvro),
				},
				Datasource: &armstreamanalytics.IoTHubStreamInputDataSource{
					Type: to.Ptr("Microsoft.Devices/IotHubs"),
					Properties: &armstreamanalytics.IoTHubStreamInputDataSourceProperties{
						ConsumerGroupName:      to.Ptr("sdkconsumergroup"),
						Endpoint:               to.Ptr("messages/events"),
						IotHubNamespace:        to.Ptr("iothub"),
						SharedAccessPolicyKey:  to.Ptr("sharedAccessPolicyKey="),
						SharedAccessPolicyName: to.Ptr("owner"),
					},
				},
			},
		},
		&armstreamanalytics.InputsClientCreateOrReplaceOptions{IfMatch: nil,
			IfNoneMatch: nil,
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Input_Create_Stream_IoTHub_Avro.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstreamanalytics.Input{
			Name: to.Ptr("input7970"),
			Type: to.Ptr("Microsoft.StreamAnalytics/streamingjobs/inputs"),
			ID:   to.Ptr("/subscriptions/56b5e0a9-b645-407d-99b0-c64f86013e3d/resourceGroups/sjrg3467/providers/Microsoft.StreamAnalytics/streamingjobs/sj9742/inputs/input7970"),
			Properties: &armstreamanalytics.StreamInputProperties{
				Type: to.Ptr("Stream"),
				Serialization: &armstreamanalytics.AvroSerialization{
					Type:       to.Ptr(armstreamanalytics.EventSerializationTypeAvro),
					Properties: map[string]interface{}{},
				},
				Datasource: &armstreamanalytics.IoTHubStreamInputDataSource{
					Type: to.Ptr("Microsoft.Devices/IotHubs"),
					Properties: &armstreamanalytics.IoTHubStreamInputDataSourceProperties{
						ConsumerGroupName:      to.Ptr("sdkconsumergroup"),
						Endpoint:               to.Ptr("messages/events"),
						IotHubNamespace:        to.Ptr("iothub"),
						SharedAccessPolicyName: to.Ptr("owner"),
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Input) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Input)
			t.Fatalf("Mock response is not equal to example response for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Input_Create_Stream_IoTHub_Avro.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Input_Create_Stream_Blob_CSV.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a stream blob input with CSV serialization"},
	})
	client = armstreamanalytics.NewInputsClient("56b5e0a9-b645-407d-99b0-c64f86013e3d", cred, &options)
	res, err = client.CreateOrReplace(ctx,
		"sjrg8161",
		"sj6695",
		"input8899",
		armstreamanalytics.Input{
			Properties: &armstreamanalytics.StreamInputProperties{
				Type: to.Ptr("Stream"),
				Serialization: &armstreamanalytics.CSVSerialization{
					Type: to.Ptr(armstreamanalytics.EventSerializationTypeCSV),
					Properties: &armstreamanalytics.CSVSerializationProperties{
						Encoding:       to.Ptr(armstreamanalytics.EncodingUTF8),
						FieldDelimiter: to.Ptr(","),
					},
				},
				Datasource: &armstreamanalytics.BlobStreamInputDataSource{
					Type: to.Ptr("Microsoft.Storage/Blob"),
					Properties: &armstreamanalytics.BlobStreamInputDataSourceProperties{
						Container:   to.Ptr("state"),
						DateFormat:  to.Ptr("yyyy/MM/dd"),
						PathPattern: to.Ptr("{date}/{time}"),
						StorageAccounts: []*armstreamanalytics.StorageAccount{
							{
								AccountKey:  to.Ptr("someAccountKey=="),
								AccountName: to.Ptr("someAccountName"),
							}},
						TimeFormat:           to.Ptr("HH"),
						SourcePartitionCount: to.Ptr[int32](16),
					},
				},
			},
		},
		&armstreamanalytics.InputsClientCreateOrReplaceOptions{IfMatch: nil,
			IfNoneMatch: nil,
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Input_Create_Stream_Blob_CSV.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstreamanalytics.Input{
			Name: to.Ptr("input8899"),
			Type: to.Ptr("Microsoft.StreamAnalytics/streamingjobs/inputs"),
			ID:   to.Ptr("/subscriptions/56b5e0a9-b645-407d-99b0-c64f86013e3d/resourceGroups/sjrg8161/providers/Microsoft.StreamAnalytics/streamingjobs/sj6695/inputs/input8899"),
			Properties: &armstreamanalytics.StreamInputProperties{
				Type: to.Ptr("Stream"),
				Serialization: &armstreamanalytics.CSVSerialization{
					Type: to.Ptr(armstreamanalytics.EventSerializationTypeCSV),
					Properties: &armstreamanalytics.CSVSerializationProperties{
						Encoding:       to.Ptr(armstreamanalytics.EncodingUTF8),
						FieldDelimiter: to.Ptr(","),
					},
				},
				Datasource: &armstreamanalytics.BlobStreamInputDataSource{
					Type: to.Ptr("Microsoft.Storage/Blob"),
					Properties: &armstreamanalytics.BlobStreamInputDataSourceProperties{
						Container:   to.Ptr("state"),
						DateFormat:  to.Ptr("yyyy/MM/dd"),
						PathPattern: to.Ptr("{date}/{time}"),
						StorageAccounts: []*armstreamanalytics.StorageAccount{
							{
								AccountName: to.Ptr("someAccountName"),
							}},
						TimeFormat:           to.Ptr("HH"),
						SourcePartitionCount: to.Ptr[int32](16),
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Input) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Input)
			t.Fatalf("Mock response is not equal to example response for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Input_Create_Stream_Blob_CSV.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestInputs_Update(t *testing.T) {
	// From example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Input_Update_Reference_Blob.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a reference blob input"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstreamanalytics.NewInputsClient("56b5e0a9-b645-407d-99b0-c64f86013e3d", cred, &options)
	res, err := client.Update(ctx,
		"sjrg8440",
		"sj9597",
		"input7225",
		armstreamanalytics.Input{
			Properties: &armstreamanalytics.ReferenceInputProperties{
				Type: to.Ptr("Reference"),
				Serialization: &armstreamanalytics.CSVSerialization{
					Type: to.Ptr(armstreamanalytics.EventSerializationTypeCSV),
					Properties: &armstreamanalytics.CSVSerializationProperties{
						Encoding:       to.Ptr(armstreamanalytics.EncodingUTF8),
						FieldDelimiter: to.Ptr("|"),
					},
				},
				Datasource: &armstreamanalytics.BlobReferenceInputDataSource{
					Type: to.Ptr("Microsoft.Storage/Blob"),
					Properties: &armstreamanalytics.BlobReferenceInputDataSourceProperties{
						Container: to.Ptr("differentContainer"),
					},
				},
			},
		},
		&armstreamanalytics.InputsClientUpdateOptions{IfMatch: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Input_Update_Reference_Blob.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstreamanalytics.Input{
			Name: to.Ptr("input7225"),
			Type: to.Ptr("Microsoft.StreamAnalytics/streamingjobs/inputs"),
			ID:   to.Ptr("/subscriptions/56b5e0a9-b645-407d-99b0-c64f86013e3d/resourceGroups/sjrg8440/providers/Microsoft.StreamAnalytics/streamingjobs/sj9597/inputs/input7225"),
			Properties: &armstreamanalytics.ReferenceInputProperties{
				Type: to.Ptr("Reference"),
				Serialization: &armstreamanalytics.CSVSerialization{
					Type: to.Ptr(armstreamanalytics.EventSerializationTypeCSV),
					Properties: &armstreamanalytics.CSVSerializationProperties{
						Encoding:       to.Ptr(armstreamanalytics.EncodingUTF8),
						FieldDelimiter: to.Ptr("|"),
					},
				},
				Datasource: &armstreamanalytics.BlobReferenceInputDataSource{
					Type: to.Ptr("Microsoft.Storage/Blob"),
					Properties: &armstreamanalytics.BlobReferenceInputDataSourceProperties{
						Container:   to.Ptr("differentContainer"),
						DateFormat:  to.Ptr("yyyy/MM/dd"),
						PathPattern: to.Ptr("{date}/{time}"),
						StorageAccounts: []*armstreamanalytics.StorageAccount{
							{
								AccountName: to.Ptr("someAccountName"),
							}},
						TimeFormat: to.Ptr("HH"),
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Input) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Input)
			t.Fatalf("Mock response is not equal to example response for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Input_Update_Reference_Blob.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Input_Update_Stream_EventHub.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a stream Event Hub input"},
	})
	client = armstreamanalytics.NewInputsClient("56b5e0a9-b645-407d-99b0-c64f86013e3d", cred, &options)
	res, err = client.Update(ctx,
		"sjrg3139",
		"sj197",
		"input7425",
		armstreamanalytics.Input{
			Properties: &armstreamanalytics.StreamInputProperties{
				Type: to.Ptr("Stream"),
				Serialization: &armstreamanalytics.AvroSerialization{
					Type: to.Ptr(armstreamanalytics.EventSerializationTypeAvro),
				},
				Datasource: &armstreamanalytics.EventHubStreamInputDataSource{
					Type: to.Ptr("Microsoft.ServiceBus/EventHub"),
					Properties: &armstreamanalytics.EventHubStreamInputDataSourceProperties{
						ConsumerGroupName: to.Ptr("differentConsumerGroupName"),
					},
				},
			},
		},
		&armstreamanalytics.InputsClientUpdateOptions{IfMatch: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Input_Update_Stream_EventHub.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstreamanalytics.Input{
			Name: to.Ptr("input7425"),
			Type: to.Ptr("Microsoft.StreamAnalytics/streamingjobs/inputs"),
			ID:   to.Ptr("/subscriptions/56b5e0a9-b645-407d-99b0-c64f86013e3d/resourceGroups/sjrg3139/providers/Microsoft.StreamAnalytics/streamingjobs/sj197/inputs/input7425"),
			Properties: &armstreamanalytics.StreamInputProperties{
				Type: to.Ptr("Stream"),
				Serialization: &armstreamanalytics.AvroSerialization{
					Type:       to.Ptr(armstreamanalytics.EventSerializationTypeAvro),
					Properties: map[string]interface{}{},
				},
				Datasource: &armstreamanalytics.EventHubStreamInputDataSource{
					Type: to.Ptr("Microsoft.ServiceBus/EventHub"),
					Properties: &armstreamanalytics.EventHubStreamInputDataSourceProperties{
						ServiceBusNamespace:    to.Ptr("sdktest"),
						SharedAccessPolicyName: to.Ptr("RootManageSharedAccessKey"),
						EventHubName:           to.Ptr("sdkeventhub"),
						ConsumerGroupName:      to.Ptr("differentConsumerGroupName"),
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Input) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Input)
			t.Fatalf("Mock response is not equal to example response for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Input_Update_Stream_EventHub.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Input_Update_Stream_IoTHub.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a stream IoT Hub input"},
	})
	client = armstreamanalytics.NewInputsClient("56b5e0a9-b645-407d-99b0-c64f86013e3d", cred, &options)
	res, err = client.Update(ctx,
		"sjrg3467",
		"sj9742",
		"input7970",
		armstreamanalytics.Input{
			Properties: &armstreamanalytics.StreamInputProperties{
				Type: to.Ptr("Stream"),
				Serialization: &armstreamanalytics.CSVSerialization{
					Type: to.Ptr(armstreamanalytics.EventSerializationTypeCSV),
					Properties: &armstreamanalytics.CSVSerializationProperties{
						Encoding:       to.Ptr(armstreamanalytics.EncodingUTF8),
						FieldDelimiter: to.Ptr("|"),
					},
				},
				Datasource: &armstreamanalytics.IoTHubStreamInputDataSource{
					Type: to.Ptr("Microsoft.Devices/IotHubs"),
					Properties: &armstreamanalytics.IoTHubStreamInputDataSourceProperties{
						Endpoint: to.Ptr("messages/operationsMonitoringEvents"),
					},
				},
			},
		},
		&armstreamanalytics.InputsClientUpdateOptions{IfMatch: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Input_Update_Stream_IoTHub.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstreamanalytics.Input{
			Name: to.Ptr("input7970"),
			Type: to.Ptr("Microsoft.StreamAnalytics/streamingjobs/inputs"),
			ID:   to.Ptr("/subscriptions/56b5e0a9-b645-407d-99b0-c64f86013e3d/resourceGroups/sjrg3467/providers/Microsoft.StreamAnalytics/streamingjobs/sj9742/inputs/input7970"),
			Properties: &armstreamanalytics.StreamInputProperties{
				Type: to.Ptr("Stream"),
				Serialization: &armstreamanalytics.CSVSerialization{
					Type: to.Ptr(armstreamanalytics.EventSerializationTypeCSV),
					Properties: &armstreamanalytics.CSVSerializationProperties{
						Encoding:       to.Ptr(armstreamanalytics.EncodingUTF8),
						FieldDelimiter: to.Ptr("|"),
					},
				},
				Datasource: &armstreamanalytics.IoTHubStreamInputDataSource{
					Type: to.Ptr("Microsoft.Devices/IotHubs"),
					Properties: &armstreamanalytics.IoTHubStreamInputDataSourceProperties{
						ConsumerGroupName:      to.Ptr("sdkconsumergroup"),
						Endpoint:               to.Ptr("messages/operationsMonitoringEvents"),
						IotHubNamespace:        to.Ptr("iothub"),
						SharedAccessPolicyName: to.Ptr("owner"),
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Input) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Input)
			t.Fatalf("Mock response is not equal to example response for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Input_Update_Stream_IoTHub.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Input_Update_Stream_Blob.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a stream blob input"},
	})
	client = armstreamanalytics.NewInputsClient("56b5e0a9-b645-407d-99b0-c64f86013e3d", cred, &options)
	res, err = client.Update(ctx,
		"sjrg8161",
		"sj6695",
		"input8899",
		armstreamanalytics.Input{
			Properties: &armstreamanalytics.StreamInputProperties{
				Type: to.Ptr("Stream"),
				Serialization: &armstreamanalytics.CSVSerialization{
					Type: to.Ptr(armstreamanalytics.EventSerializationTypeCSV),
					Properties: &armstreamanalytics.CSVSerializationProperties{
						Encoding:       to.Ptr(armstreamanalytics.EncodingUTF8),
						FieldDelimiter: to.Ptr("|"),
					},
				},
				Datasource: &armstreamanalytics.BlobStreamInputDataSource{
					Type: to.Ptr("Microsoft.Storage/Blob"),
					Properties: &armstreamanalytics.BlobStreamInputDataSourceProperties{
						SourcePartitionCount: to.Ptr[int32](32),
					},
				},
			},
		},
		&armstreamanalytics.InputsClientUpdateOptions{IfMatch: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Input_Update_Stream_Blob.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstreamanalytics.Input{
			Name: to.Ptr("input8899"),
			Type: to.Ptr("Microsoft.StreamAnalytics/streamingjobs/inputs"),
			ID:   to.Ptr("/subscriptions/56b5e0a9-b645-407d-99b0-c64f86013e3d/resourceGroups/sjrg8161/providers/Microsoft.StreamAnalytics/streamingjobs/sj6695/inputs/input8899"),
			Properties: &armstreamanalytics.StreamInputProperties{
				Type: to.Ptr("Stream"),
				Serialization: &armstreamanalytics.CSVSerialization{
					Type: to.Ptr(armstreamanalytics.EventSerializationTypeCSV),
					Properties: &armstreamanalytics.CSVSerializationProperties{
						Encoding:       to.Ptr(armstreamanalytics.EncodingUTF8),
						FieldDelimiter: to.Ptr("|"),
					},
				},
				Datasource: &armstreamanalytics.BlobStreamInputDataSource{
					Type: to.Ptr("Microsoft.Storage/Blob"),
					Properties: &armstreamanalytics.BlobStreamInputDataSourceProperties{
						Container:   to.Ptr("state"),
						DateFormat:  to.Ptr("yyyy/MM/dd"),
						PathPattern: to.Ptr("{date}/{time}"),
						StorageAccounts: []*armstreamanalytics.StorageAccount{
							{
								AccountName: to.Ptr("someAccountName"),
							}},
						TimeFormat:           to.Ptr("HH"),
						SourcePartitionCount: to.Ptr[int32](32),
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Input) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Input)
			t.Fatalf("Mock response is not equal to example response for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Input_Update_Stream_Blob.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestInputs_Delete(t *testing.T) {
	// From example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Input_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete an input"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstreamanalytics.NewInputsClient("56b5e0a9-b645-407d-99b0-c64f86013e3d", cred, &options)
	_, err := client.Delete(ctx,
		"sjrg8440",
		"sj9597",
		"input7225",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Input_Delete.json: %v", err)
	}
}

func TestInputs_Get(t *testing.T) {
	// From example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Input_Get_Reference_Blob_CSV.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a reference blob input with CSV serialization"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstreamanalytics.NewInputsClient("56b5e0a9-b645-407d-99b0-c64f86013e3d", cred, &options)
	res, err := client.Get(ctx,
		"sjrg8440",
		"sj9597",
		"input7225",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Input_Get_Reference_Blob_CSV.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstreamanalytics.Input{
			Name: to.Ptr("input7225"),
			Type: to.Ptr("Microsoft.StreamAnalytics/streamingjobs/inputs"),
			ID:   to.Ptr("/subscriptions/56b5e0a9-b645-407d-99b0-c64f86013e3d/resourceGroups/sjrg8440/providers/Microsoft.StreamAnalytics/streamingjobs/sj9597/inputs/input7225"),
			Properties: &armstreamanalytics.ReferenceInputProperties{
				Type: to.Ptr("Reference"),
				Serialization: &armstreamanalytics.CSVSerialization{
					Type: to.Ptr(armstreamanalytics.EventSerializationTypeCSV),
					Properties: &armstreamanalytics.CSVSerializationProperties{
						Encoding:       to.Ptr(armstreamanalytics.EncodingUTF8),
						FieldDelimiter: to.Ptr(","),
					},
				},
				Datasource: &armstreamanalytics.BlobReferenceInputDataSource{
					Type: to.Ptr("Microsoft.Storage/Blob"),
					Properties: &armstreamanalytics.BlobReferenceInputDataSourceProperties{
						Container:   to.Ptr("state"),
						DateFormat:  to.Ptr("yyyy/MM/dd"),
						PathPattern: to.Ptr("{date}/{time}"),
						StorageAccounts: []*armstreamanalytics.StorageAccount{
							{
								AccountName: to.Ptr("someAccountName"),
							}},
						TimeFormat: to.Ptr("HH"),
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Input) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Input)
			t.Fatalf("Mock response is not equal to example response for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Input_Get_Reference_Blob_CSV.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Input_Get_Stream_EventHub_JSON.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a stream Event Hub input with JSON serialization"},
	})
	client = armstreamanalytics.NewInputsClient("56b5e0a9-b645-407d-99b0-c64f86013e3d", cred, &options)
	res, err = client.Get(ctx,
		"sjrg3139",
		"sj197",
		"input7425",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Input_Get_Stream_EventHub_JSON.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstreamanalytics.Input{
			Name: to.Ptr("input7425"),
			Type: to.Ptr("Microsoft.StreamAnalytics/streamingjobs/inputs"),
			ID:   to.Ptr("/subscriptions/56b5e0a9-b645-407d-99b0-c64f86013e3d/resourceGroups/sjrg3139/providers/Microsoft.StreamAnalytics/streamingjobs/sj197/inputs/input7425"),
			Properties: &armstreamanalytics.StreamInputProperties{
				Type: to.Ptr("Stream"),
				Serialization: &armstreamanalytics.JSONSerialization{
					Type: to.Ptr(armstreamanalytics.EventSerializationTypeJSON),
					Properties: &armstreamanalytics.JSONSerializationProperties{
						Encoding: to.Ptr(armstreamanalytics.EncodingUTF8),
					},
				},
				Datasource: &armstreamanalytics.EventHubStreamInputDataSource{
					Type: to.Ptr("Microsoft.ServiceBus/EventHub"),
					Properties: &armstreamanalytics.EventHubStreamInputDataSourceProperties{
						ServiceBusNamespace:    to.Ptr("sdktest"),
						SharedAccessPolicyName: to.Ptr("RootManageSharedAccessKey"),
						EventHubName:           to.Ptr("sdkeventhub"),
						ConsumerGroupName:      to.Ptr("sdkconsumergroup"),
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Input) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Input)
			t.Fatalf("Mock response is not equal to example response for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Input_Get_Stream_EventHub_JSON.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Input_Get_Stream_IoTHub_Avro.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a stream IoT Hub input with Avro serialization"},
	})
	client = armstreamanalytics.NewInputsClient("56b5e0a9-b645-407d-99b0-c64f86013e3d", cred, &options)
	res, err = client.Get(ctx,
		"sjrg3467",
		"sj9742",
		"input7970",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Input_Get_Stream_IoTHub_Avro.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstreamanalytics.Input{
			Name: to.Ptr("input7970"),
			Type: to.Ptr("Microsoft.StreamAnalytics/streamingjobs/inputs"),
			ID:   to.Ptr("/subscriptions/56b5e0a9-b645-407d-99b0-c64f86013e3d/resourceGroups/sjrg3467/providers/Microsoft.StreamAnalytics/streamingjobs/sj9742/inputs/input7970"),
			Properties: &armstreamanalytics.StreamInputProperties{
				Type: to.Ptr("Stream"),
				Serialization: &armstreamanalytics.AvroSerialization{
					Type:       to.Ptr(armstreamanalytics.EventSerializationTypeAvro),
					Properties: map[string]interface{}{},
				},
				Datasource: &armstreamanalytics.IoTHubStreamInputDataSource{
					Type: to.Ptr("Microsoft.Devices/IotHubs"),
					Properties: &armstreamanalytics.IoTHubStreamInputDataSourceProperties{
						ConsumerGroupName:      to.Ptr("sdkconsumergroup"),
						Endpoint:               to.Ptr("messages/events"),
						IotHubNamespace:        to.Ptr("iothub"),
						SharedAccessPolicyName: to.Ptr("owner"),
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Input) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Input)
			t.Fatalf("Mock response is not equal to example response for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Input_Get_Stream_IoTHub_Avro.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Input_Get_Stream_Blob_CSV.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a stream blob input with CSV serialization"},
	})
	client = armstreamanalytics.NewInputsClient("56b5e0a9-b645-407d-99b0-c64f86013e3d", cred, &options)
	res, err = client.Get(ctx,
		"sjrg8161",
		"sj6695",
		"input8899",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Input_Get_Stream_Blob_CSV.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstreamanalytics.Input{
			Name: to.Ptr("input8899"),
			Type: to.Ptr("Microsoft.StreamAnalytics/streamingjobs/inputs"),
			ID:   to.Ptr("/subscriptions/56b5e0a9-b645-407d-99b0-c64f86013e3d/resourceGroups/sjrg8161/providers/Microsoft.StreamAnalytics/streamingjobs/sj6695/inputs/input8899"),
			Properties: &armstreamanalytics.StreamInputProperties{
				Type: to.Ptr("Stream"),
				Serialization: &armstreamanalytics.CSVSerialization{
					Type: to.Ptr(armstreamanalytics.EventSerializationTypeCSV),
					Properties: &armstreamanalytics.CSVSerializationProperties{
						Encoding:       to.Ptr(armstreamanalytics.EncodingUTF8),
						FieldDelimiter: to.Ptr(","),
					},
				},
				Datasource: &armstreamanalytics.BlobStreamInputDataSource{
					Type: to.Ptr("Microsoft.Storage/Blob"),
					Properties: &armstreamanalytics.BlobStreamInputDataSourceProperties{
						Container:   to.Ptr("state"),
						DateFormat:  to.Ptr("yyyy/MM/dd"),
						PathPattern: to.Ptr("{date}/{time}"),
						StorageAccounts: []*armstreamanalytics.StorageAccount{
							{
								AccountName: to.Ptr("someAccountName"),
							}},
						TimeFormat:           to.Ptr("HH"),
						SourcePartitionCount: to.Ptr[int32](16),
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Input) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Input)
			t.Fatalf("Mock response is not equal to example response for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Input_Get_Stream_Blob_CSV.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestInputs_ListByStreamingJob(t *testing.T) {
	// From example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Input_ListByStreamingJob.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all inputs in a streaming job"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstreamanalytics.NewInputsClient("56b5e0a9-b645-407d-99b0-c64f86013e3d", cred, &options)
	pager := client.ListByStreamingJob("sjrg8440",
		"sj9597",
		&armstreamanalytics.InputsClientListByStreamingJobOptions{Select: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Input_ListByStreamingJob.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armstreamanalytics.InputListResult{
			Value: []*armstreamanalytics.Input{
				{
					Name: to.Ptr("input7225"),
					Type: to.Ptr("Microsoft.StreamAnalytics/streamingjobs/inputs"),
					ID:   to.Ptr("/subscriptions/56b5e0a9-b645-407d-99b0-c64f86013e3d/resourceGroups/sjrg8440/providers/Microsoft.StreamAnalytics/streamingjobs/sj9597/inputs/input7225"),
					Properties: &armstreamanalytics.ReferenceInputProperties{
						Type: to.Ptr("Reference"),
						Etag: to.Ptr("a4ceb697-1c8f-40c8-b951-fb5ee4757437"),
						Serialization: &armstreamanalytics.CSVSerialization{
							Type: to.Ptr(armstreamanalytics.EventSerializationTypeCSV),
							Properties: &armstreamanalytics.CSVSerializationProperties{
								Encoding:       to.Ptr(armstreamanalytics.EncodingUTF8),
								FieldDelimiter: to.Ptr("|"),
							},
						},
						Datasource: &armstreamanalytics.BlobReferenceInputDataSource{
							Type: to.Ptr("Microsoft.Storage/Blob"),
							Properties: &armstreamanalytics.BlobReferenceInputDataSourceProperties{
								Container:   to.Ptr("differentContainer"),
								DateFormat:  to.Ptr("yyyy/MM/dd"),
								PathPattern: to.Ptr("{date}/{time}"),
								StorageAccounts: []*armstreamanalytics.StorageAccount{
									{
										AccountName: to.Ptr("someAccountName"),
									}},
								TimeFormat: to.Ptr("HH"),
							},
						},
					},
				},
				{
					Name: to.Ptr("input8899"),
					Type: to.Ptr("Microsoft.StreamAnalytics/streamingjobs/inputs"),
					ID:   to.Ptr("/subscriptions/56b5e0a9-b645-407d-99b0-c64f86013e3d/resourceGroups/sjrg8440/providers/Microsoft.StreamAnalytics/streamingjobs/sj9597/inputs/input8899"),
					Properties: &armstreamanalytics.StreamInputProperties{
						Type: to.Ptr("Stream"),
						Etag: to.Ptr("3b35d57c-02f4-4b41-8e1d-af02a86c2fa1"),
						Serialization: &armstreamanalytics.CSVSerialization{
							Type: to.Ptr(armstreamanalytics.EventSerializationTypeCSV),
							Properties: &armstreamanalytics.CSVSerializationProperties{
								Encoding:       to.Ptr(armstreamanalytics.EncodingUTF8),
								FieldDelimiter: to.Ptr("|"),
							},
						},
						Datasource: &armstreamanalytics.BlobStreamInputDataSource{
							Type: to.Ptr("Microsoft.Storage/Blob"),
							Properties: &armstreamanalytics.BlobStreamInputDataSourceProperties{
								Container:   to.Ptr("state"),
								DateFormat:  to.Ptr("yyyy/MM/dd"),
								PathPattern: to.Ptr("{date}/{time}"),
								StorageAccounts: []*armstreamanalytics.StorageAccount{
									{
										AccountName: to.Ptr("someAccountName"),
									}},
								TimeFormat:           to.Ptr("HH"),
								SourcePartitionCount: to.Ptr[int32](32),
							},
						},
					},
				},
				{
					Name: to.Ptr("input7425"),
					Type: to.Ptr("Microsoft.StreamAnalytics/streamingjobs/inputs"),
					ID:   to.Ptr("/subscriptions/56b5e0a9-b645-407d-99b0-c64f86013e3d/resourceGroups/sjrg8440/providers/Microsoft.StreamAnalytics/streamingjobs/sj9597/inputs/input7425"),
					Properties: &armstreamanalytics.StreamInputProperties{
						Type: to.Ptr("Stream"),
						Etag: to.Ptr("7548f259-81b5-4ea7-b896-25c6717d98ba"),
						Serialization: &armstreamanalytics.AvroSerialization{
							Type:       to.Ptr(armstreamanalytics.EventSerializationTypeAvro),
							Properties: map[string]interface{}{},
						},
						Datasource: &armstreamanalytics.EventHubStreamInputDataSource{
							Type: to.Ptr("Microsoft.ServiceBus/EventHub"),
							Properties: &armstreamanalytics.EventHubStreamInputDataSourceProperties{
								ServiceBusNamespace:    to.Ptr("sdktest"),
								SharedAccessPolicyName: to.Ptr("RootManageSharedAccessKey"),
								EventHubName:           to.Ptr("sdkeventhub"),
								ConsumerGroupName:      to.Ptr("differentConsumerGroupName"),
							},
						},
					},
				},
				{
					Name: to.Ptr("input7970"),
					Type: to.Ptr("Microsoft.StreamAnalytics/streamingjobs/inputs"),
					ID:   to.Ptr("/subscriptions/56b5e0a9-b645-407d-99b0-c64f86013e3d/resourceGroups/sjrg8440/providers/Microsoft.StreamAnalytics/streamingjobs/sj9597/inputs/input7970"),
					Properties: &armstreamanalytics.StreamInputProperties{
						Type: to.Ptr("Stream"),
						Etag: to.Ptr("e2d847e0-c95b-48ef-9e14-1afc1f2270cb"),
						Serialization: &armstreamanalytics.CSVSerialization{
							Type: to.Ptr(armstreamanalytics.EventSerializationTypeCSV),
							Properties: &armstreamanalytics.CSVSerializationProperties{
								Encoding:       to.Ptr(armstreamanalytics.EncodingUTF8),
								FieldDelimiter: to.Ptr("|"),
							},
						},
						Datasource: &armstreamanalytics.IoTHubStreamInputDataSource{
							Type: to.Ptr("Microsoft.Devices/IotHubs"),
							Properties: &armstreamanalytics.IoTHubStreamInputDataSourceProperties{
								ConsumerGroupName:      to.Ptr("sdkconsumergroup"),
								Endpoint:               to.Ptr("messages/operationsMonitoringEvents"),
								IotHubNamespace:        to.Ptr("iothub"),
								SharedAccessPolicyName: to.Ptr("owner"),
							},
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.InputListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.InputListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Input_ListByStreamingJob.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Input_ListByStreamingJob_Diagnostics.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all inputs in a streaming job and include diagnostic information using the $select OData query parameter"},
	})
	client = armstreamanalytics.NewInputsClient("56b5e0a9-b645-407d-99b0-c64f86013e3d", cred, &options)
	pager = client.ListByStreamingJob("sjrg3276",
		"sj7804",
		&armstreamanalytics.InputsClientListByStreamingJobOptions{Select: to.Ptr("*")})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Input_ListByStreamingJob_Diagnostics.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armstreamanalytics.InputListResult{
			Value: []*armstreamanalytics.Input{
				{
					Name: to.Ptr("inputtest"),
					Type: to.Ptr("Microsoft.StreamAnalytics/streamingjobs/inputs"),
					ID:   to.Ptr("/subscriptions/56b5e0a9-b645-407d-99b0-c64f86013e3d/resourceGroups/sjrg3276/providers/Microsoft.StreamAnalytics/streamingjobs/sj7804/inputs/inputtest"),
					Properties: &armstreamanalytics.StreamInputProperties{
						Type: to.Ptr("Stream"),
						Diagnostics: &armstreamanalytics.Diagnostics{
							Conditions: []*armstreamanalytics.DiagnosticCondition{
								{
									Code:    to.Ptr("INP-3"),
									Message: to.Ptr("Could not deserialize the input event as Json. Some possible reasons: 1) Malformed events 2) Input source configured with incorrect serialization format"),
									Since:   to.Ptr("2017-05-11T04:38:42.4938687Z"),
								}},
						},
						Etag: to.Ptr("ca88f8fa-605b-4c7f-8695-46f5faa60cd0"),
						Serialization: &armstreamanalytics.JSONSerialization{
							Type: to.Ptr(armstreamanalytics.EventSerializationTypeJSON),
							Properties: &armstreamanalytics.JSONSerializationProperties{
								Encoding: to.Ptr(armstreamanalytics.EncodingUTF8),
							},
						},
						Datasource: &armstreamanalytics.BlobStreamInputDataSource{
							Type: to.Ptr("Microsoft.Storage/Blob"),
							Properties: &armstreamanalytics.BlobStreamInputDataSourceProperties{
								Container:   to.Ptr("state"),
								PathPattern: to.Ptr(""),
								StorageAccounts: []*armstreamanalytics.StorageAccount{
									{
										AccountName: to.Ptr("someAccountName"),
									}},
							},
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.InputListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.InputListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Input_ListByStreamingJob_Diagnostics.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestInputs_Test(t *testing.T) {
	// From example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Input_Test.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Test the connection for an input"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstreamanalytics.NewInputsClient("56b5e0a9-b645-407d-99b0-c64f86013e3d", cred, &options)
	poller, err := client.BeginTest(ctx,
		"sjrg8440",
		"sj9597",
		"input7225",
		&armstreamanalytics.InputsClientBeginTestOptions{Input: nil,
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Input_Test.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Input_Test.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstreamanalytics.ResourceTestStatus{
			Status: to.Ptr("TestSucceeded"),
		}
		if !reflect.DeepEqual(exampleRes, res.ResourceTestStatus) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ResourceTestStatus)
			t.Fatalf("Mock response is not equal to example response for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Input_Test.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOutputs_CreateOrReplace(t *testing.T) {
	// From example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Output_Create_DocumentDB.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a DocumentDB output"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstreamanalytics.NewOutputsClient("56b5e0a9-b645-407d-99b0-c64f86013e3d", cred, &options)
	res, err := client.CreateOrReplace(ctx,
		"sjrg7983",
		"sj2331",
		"output3022",
		armstreamanalytics.Output{
			Properties: &armstreamanalytics.OutputProperties{
				Datasource: &armstreamanalytics.DocumentDbOutputDataSource{
					Type: to.Ptr("Microsoft.Storage/DocumentDB"),
					Properties: &armstreamanalytics.DocumentDbOutputDataSourceProperties{
						AccountID:             to.Ptr("someAccountId"),
						AccountKey:            to.Ptr("accountKey=="),
						CollectionNamePattern: to.Ptr("collection"),
						Database:              to.Ptr("db01"),
						DocumentID:            to.Ptr("documentId"),
						PartitionKey:          to.Ptr("key"),
					},
				},
			},
		},
		&armstreamanalytics.OutputsClientCreateOrReplaceOptions{IfMatch: nil,
			IfNoneMatch: nil,
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Output_Create_DocumentDB.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstreamanalytics.Output{
			Name: to.Ptr("output3022"),
			Type: to.Ptr("Microsoft.StreamAnalytics/streamingjobs/outputs"),
			ID:   to.Ptr("/subscriptions/56b5e0a9-b645-407d-99b0-c64f86013e3d/resourceGroups/sjrg7983/providers/Microsoft.StreamAnalytics/streamingjobs/sj2331/outputs/output3022"),
			Properties: &armstreamanalytics.OutputProperties{
				Datasource: &armstreamanalytics.DocumentDbOutputDataSource{
					Type: to.Ptr("Microsoft.Storage/DocumentDB"),
					Properties: &armstreamanalytics.DocumentDbOutputDataSourceProperties{
						AccountID:             to.Ptr("someAccountId"),
						CollectionNamePattern: to.Ptr("collection"),
						Database:              to.Ptr("db01"),
						DocumentID:            to.Ptr("documentId"),
						PartitionKey:          to.Ptr("key"),
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Output) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Output)
			t.Fatalf("Mock response is not equal to example response for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Output_Create_DocumentDB.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Output_Create_PowerBI.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a Power BI output"},
	})
	client = armstreamanalytics.NewOutputsClient("56b5e0a9-b645-407d-99b0-c64f86013e3d", cred, &options)
	res, err = client.CreateOrReplace(ctx,
		"sjrg7983",
		"sj2331",
		"output3022",
		armstreamanalytics.Output{
			Properties: &armstreamanalytics.OutputProperties{
				Datasource: &armstreamanalytics.PowerBIOutputDataSource{
					Type: to.Ptr("PowerBI"),
					Properties: &armstreamanalytics.PowerBIOutputDataSourceProperties{
						RefreshToken:           to.Ptr("someRefreshToken=="),
						TokenUserDisplayName:   to.Ptr("Bob Smith"),
						TokenUserPrincipalName: to.Ptr("bobsmith@contoso.com"),
						Dataset:                to.Ptr("someDataset"),
						GroupID:                to.Ptr("ac40305e-3e8d-43ac-8161-c33799f43e95"),
						GroupName:              to.Ptr("MyPowerBIGroup"),
						Table:                  to.Ptr("someTable"),
					},
				},
			},
		},
		&armstreamanalytics.OutputsClientCreateOrReplaceOptions{IfMatch: nil,
			IfNoneMatch: nil,
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Output_Create_PowerBI.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstreamanalytics.Output{
			Name: to.Ptr("output3022"),
			Type: to.Ptr("Microsoft.StreamAnalytics/streamingjobs/outputs"),
			ID:   to.Ptr("/subscriptions/56b5e0a9-b645-407d-99b0-c64f86013e3d/resourceGroups/sjrg7983/providers/Microsoft.StreamAnalytics/streamingjobs/sj2331/outputs/output3022"),
			Properties: &armstreamanalytics.OutputProperties{
				Datasource: &armstreamanalytics.PowerBIOutputDataSource{
					Type: to.Ptr("PowerBI"),
					Properties: &armstreamanalytics.PowerBIOutputDataSourceProperties{
						TokenUserDisplayName:   to.Ptr("Bob Smith"),
						TokenUserPrincipalName: to.Ptr("bobsmith@contoso.com"),
						Dataset:                to.Ptr("someDataset"),
						GroupID:                to.Ptr("ac40305e-3e8d-43ac-8161-c33799f43e95"),
						GroupName:              to.Ptr("MyPowerBIGroup"),
						Table:                  to.Ptr("someTable"),
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Output) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Output)
			t.Fatalf("Mock response is not equal to example response for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Output_Create_PowerBI.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Output_Create_ServiceBusQueue_Avro.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a Service Bus Queue output with Avro serialization"},
	})
	client = armstreamanalytics.NewOutputsClient("56b5e0a9-b645-407d-99b0-c64f86013e3d", cred, &options)
	res, err = client.CreateOrReplace(ctx,
		"sjrg3410",
		"sj5095",
		"output3456",
		armstreamanalytics.Output{
			Properties: &armstreamanalytics.OutputProperties{
				Datasource: &armstreamanalytics.ServiceBusQueueOutputDataSource{
					Type: to.Ptr("Microsoft.ServiceBus/Queue"),
					Properties: &armstreamanalytics.ServiceBusQueueOutputDataSourceProperties{
						ServiceBusNamespace:    to.Ptr("sdktest"),
						SharedAccessPolicyKey:  to.Ptr("sharedAccessPolicyKey="),
						SharedAccessPolicyName: to.Ptr("RootManageSharedAccessKey"),
						PropertyColumns: []*string{
							to.Ptr("column1"),
							to.Ptr("column2")},
						QueueName: to.Ptr("sdkqueue"),
						SystemPropertyColumns: map[string]interface{}{
							"MessageId":    "col3",
							"PartitionKey": "col4",
						},
					},
				},
				Serialization: &armstreamanalytics.AvroSerialization{
					Type: to.Ptr(armstreamanalytics.EventSerializationTypeAvro),
				},
			},
		},
		&armstreamanalytics.OutputsClientCreateOrReplaceOptions{IfMatch: nil,
			IfNoneMatch: nil,
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Output_Create_ServiceBusQueue_Avro.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstreamanalytics.Output{
			Name: to.Ptr("output3456"),
			Type: to.Ptr("Microsoft.StreamAnalytics/streamingjobs/outputs"),
			ID:   to.Ptr("/subscriptions/56b5e0a9-b645-407d-99b0-c64f86013e3d/resourceGroups/sjrg3410/providers/Microsoft.StreamAnalytics/streamingjobs/sj5095/outputs/output3456"),
			Properties: &armstreamanalytics.OutputProperties{
				Datasource: &armstreamanalytics.ServiceBusQueueOutputDataSource{
					Type: to.Ptr("Microsoft.ServiceBus/Queue"),
					Properties: &armstreamanalytics.ServiceBusQueueOutputDataSourceProperties{
						ServiceBusNamespace:    to.Ptr("sdktest"),
						SharedAccessPolicyName: to.Ptr("RootManageSharedAccessKey"),
						PropertyColumns: []*string{
							to.Ptr("column1"),
							to.Ptr("column2")},
						QueueName: to.Ptr("sdkqueue"),
					},
				},
				Serialization: &armstreamanalytics.AvroSerialization{
					Type:       to.Ptr(armstreamanalytics.EventSerializationTypeAvro),
					Properties: map[string]interface{}{},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Output) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Output)
			t.Fatalf("Mock response is not equal to example response for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Output_Create_ServiceBusQueue_Avro.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Output_Create_ServiceBusTopic_CSV.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a Service Bus Topic output with CSV serialization"},
	})
	client = armstreamanalytics.NewOutputsClient("56b5e0a9-b645-407d-99b0-c64f86013e3d", cred, &options)
	res, err = client.CreateOrReplace(ctx,
		"sjrg6450",
		"sj7094",
		"output7886",
		armstreamanalytics.Output{
			Properties: &armstreamanalytics.OutputProperties{
				Datasource: &armstreamanalytics.ServiceBusTopicOutputDataSource{
					Type: to.Ptr("Microsoft.ServiceBus/Topic"),
					Properties: &armstreamanalytics.ServiceBusTopicOutputDataSourceProperties{
						ServiceBusNamespace:    to.Ptr("sdktest"),
						SharedAccessPolicyKey:  to.Ptr("sharedAccessPolicyKey="),
						SharedAccessPolicyName: to.Ptr("RootManageSharedAccessKey"),
						PropertyColumns: []*string{
							to.Ptr("column1"),
							to.Ptr("column2")},
						TopicName: to.Ptr("sdktopic"),
					},
				},
				Serialization: &armstreamanalytics.CSVSerialization{
					Type: to.Ptr(armstreamanalytics.EventSerializationTypeCSV),
					Properties: &armstreamanalytics.CSVSerializationProperties{
						Encoding:       to.Ptr(armstreamanalytics.EncodingUTF8),
						FieldDelimiter: to.Ptr(","),
					},
				},
			},
		},
		&armstreamanalytics.OutputsClientCreateOrReplaceOptions{IfMatch: nil,
			IfNoneMatch: nil,
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Output_Create_ServiceBusTopic_CSV.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstreamanalytics.Output{
			Name: to.Ptr("output7886"),
			Type: to.Ptr("Microsoft.StreamAnalytics/streamingjobs/outputs"),
			ID:   to.Ptr("/subscriptions/56b5e0a9-b645-407d-99b0-c64f86013e3d/resourceGroups/sjrg6450/providers/Microsoft.StreamAnalytics/streamingjobs/sj7094/outputs/output7886"),
			Properties: &armstreamanalytics.OutputProperties{
				Datasource: &armstreamanalytics.ServiceBusTopicOutputDataSource{
					Type: to.Ptr("Microsoft.ServiceBus/Topic"),
					Properties: &armstreamanalytics.ServiceBusTopicOutputDataSourceProperties{
						ServiceBusNamespace:    to.Ptr("sdktest"),
						SharedAccessPolicyName: to.Ptr("RootManageSharedAccessKey"),
						PropertyColumns: []*string{
							to.Ptr("column1"),
							to.Ptr("column2")},
						TopicName: to.Ptr("sdktopic"),
					},
				},
				Serialization: &armstreamanalytics.CSVSerialization{
					Type: to.Ptr(armstreamanalytics.EventSerializationTypeCSV),
					Properties: &armstreamanalytics.CSVSerializationProperties{
						Encoding:       to.Ptr(armstreamanalytics.EncodingUTF8),
						FieldDelimiter: to.Ptr(","),
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Output) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Output)
			t.Fatalf("Mock response is not equal to example response for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Output_Create_ServiceBusTopic_CSV.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Output_Create_Blob_CSV.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a blob output with CSV serialization"},
	})
	client = armstreamanalytics.NewOutputsClient("56b5e0a9-b645-407d-99b0-c64f86013e3d", cred, &options)
	res, err = client.CreateOrReplace(ctx,
		"sjrg5023",
		"sj900",
		"output1623",
		armstreamanalytics.Output{
			Properties: &armstreamanalytics.OutputProperties{
				Datasource: &armstreamanalytics.BlobOutputDataSource{
					Type: to.Ptr("Microsoft.Storage/Blob"),
					Properties: &armstreamanalytics.BlobOutputDataSourceProperties{
						Container:   to.Ptr("state"),
						DateFormat:  to.Ptr("yyyy/MM/dd"),
						PathPattern: to.Ptr("{date}/{time}"),
						StorageAccounts: []*armstreamanalytics.StorageAccount{
							{
								AccountKey:  to.Ptr("accountKey=="),
								AccountName: to.Ptr("someAccountName"),
							}},
						TimeFormat: to.Ptr("HH"),
					},
				},
				Serialization: &armstreamanalytics.CSVSerialization{
					Type: to.Ptr(armstreamanalytics.EventSerializationTypeCSV),
					Properties: &armstreamanalytics.CSVSerializationProperties{
						Encoding:       to.Ptr(armstreamanalytics.EncodingUTF8),
						FieldDelimiter: to.Ptr(","),
					},
				},
			},
		},
		&armstreamanalytics.OutputsClientCreateOrReplaceOptions{IfMatch: nil,
			IfNoneMatch: nil,
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Output_Create_Blob_CSV.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstreamanalytics.Output{
			Name: to.Ptr("output1623"),
			Type: to.Ptr("Microsoft.StreamAnalytics/streamingjobs/outputs"),
			ID:   to.Ptr("/subscriptions/56b5e0a9-b645-407d-99b0-c64f86013e3d/resourceGroups/sjrg5023/providers/Microsoft.StreamAnalytics/streamingjobs/sj900/outputs/output1623"),
			Properties: &armstreamanalytics.OutputProperties{
				Datasource: &armstreamanalytics.BlobOutputDataSource{
					Type: to.Ptr("Microsoft.Storage/Blob"),
					Properties: &armstreamanalytics.BlobOutputDataSourceProperties{
						Container:   to.Ptr("state"),
						DateFormat:  to.Ptr("yyyy/MM/dd"),
						PathPattern: to.Ptr("{date}/{time}"),
						StorageAccounts: []*armstreamanalytics.StorageAccount{
							{
								AccountName: to.Ptr("someAccountName"),
							}},
						TimeFormat: to.Ptr("HH"),
					},
				},
				Serialization: &armstreamanalytics.CSVSerialization{
					Type: to.Ptr(armstreamanalytics.EventSerializationTypeCSV),
					Properties: &armstreamanalytics.CSVSerializationProperties{
						Encoding:       to.Ptr(armstreamanalytics.EncodingUTF8),
						FieldDelimiter: to.Ptr(","),
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Output) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Output)
			t.Fatalf("Mock response is not equal to example response for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Output_Create_Blob_CSV.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Output_Create_AzureDataLakeStore_JSON.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create an Azure Data Lake Store output with JSON serialization"},
	})
	client = armstreamanalytics.NewOutputsClient("56b5e0a9-b645-407d-99b0-c64f86013e3d", cred, &options)
	res, err = client.CreateOrReplace(ctx,
		"sjrg6912",
		"sj3310",
		"output5195",
		armstreamanalytics.Output{
			Properties: &armstreamanalytics.OutputProperties{
				Datasource: &armstreamanalytics.AzureDataLakeStoreOutputDataSource{
					Type: to.Ptr("Microsoft.DataLake/Accounts"),
					Properties: &armstreamanalytics.AzureDataLakeStoreOutputDataSourceProperties{
						RefreshToken:           to.Ptr("someRefreshToken=="),
						TokenUserDisplayName:   to.Ptr("Bob Smith"),
						TokenUserPrincipalName: to.Ptr("bobsmith@contoso.com"),
						AccountName:            to.Ptr("someaccount"),
						DateFormat:             to.Ptr("yyyy/MM/dd"),
						FilePathPrefix:         to.Ptr("{date}/{time}"),
						TenantID:               to.Ptr("cea4e98b-c798-49e7-8c40-4a2b3beb47dd"),
						TimeFormat:             to.Ptr("HH"),
					},
				},
				Serialization: &armstreamanalytics.JSONSerialization{
					Type: to.Ptr(armstreamanalytics.EventSerializationTypeJSON),
					Properties: &armstreamanalytics.JSONSerializationProperties{
						Format:   to.Ptr(armstreamanalytics.JSONOutputSerializationFormatArray),
						Encoding: to.Ptr(armstreamanalytics.EncodingUTF8),
					},
				},
			},
		},
		&armstreamanalytics.OutputsClientCreateOrReplaceOptions{IfMatch: nil,
			IfNoneMatch: nil,
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Output_Create_AzureDataLakeStore_JSON.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstreamanalytics.Output{
			Name: to.Ptr("output5195"),
			Type: to.Ptr("Microsoft.StreamAnalytics/streamingjobs/outputs"),
			ID:   to.Ptr("/subscriptions/56b5e0a9-b645-407d-99b0-c64f86013e3d/resourceGroups/sjrg6912/providers/Microsoft.StreamAnalytics/streamingjobs/sj3310/outputs/output5195"),
			Properties: &armstreamanalytics.OutputProperties{
				Datasource: &armstreamanalytics.AzureDataLakeStoreOutputDataSource{
					Type: to.Ptr("Microsoft.DataLake/Accounts"),
					Properties: &armstreamanalytics.AzureDataLakeStoreOutputDataSourceProperties{
						TokenUserDisplayName:   to.Ptr("Bob Smith"),
						TokenUserPrincipalName: to.Ptr("bobsmith@contoso.com"),
						AccountName:            to.Ptr("someaccount"),
						DateFormat:             to.Ptr("yyyy/MM/dd"),
						FilePathPrefix:         to.Ptr("{date}/{time}"),
						TenantID:               to.Ptr("cea4e98b-c798-49e7-8c40-4a2b3beb47dd"),
						TimeFormat:             to.Ptr("HH"),
					},
				},
				Serialization: &armstreamanalytics.JSONSerialization{
					Type: to.Ptr(armstreamanalytics.EventSerializationTypeJSON),
					Properties: &armstreamanalytics.JSONSerializationProperties{
						Format:   to.Ptr(armstreamanalytics.JSONOutputSerializationFormatArray),
						Encoding: to.Ptr(armstreamanalytics.EncodingUTF8),
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Output) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Output)
			t.Fatalf("Mock response is not equal to example response for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Output_Create_AzureDataLakeStore_JSON.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Output_Create_AzureSQL.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create an Azure SQL database output"},
	})
	client = armstreamanalytics.NewOutputsClient("56b5e0a9-b645-407d-99b0-c64f86013e3d", cred, &options)
	res, err = client.CreateOrReplace(ctx,
		"sjrg2157",
		"sj6458",
		"output1755",
		armstreamanalytics.Output{
			Properties: &armstreamanalytics.OutputProperties{
				Datasource: &armstreamanalytics.AzureSQLDatabaseOutputDataSource{
					Type: to.Ptr("Microsoft.Sql/Server/Database"),
					Properties: &armstreamanalytics.AzureSQLDatabaseOutputDataSourceProperties{
						Database: to.Ptr("someDatabase"),
						Password: to.Ptr("somePassword"),
						Server:   to.Ptr("someServer"),
						Table:    to.Ptr("someTable"),
						User:     to.Ptr("<user>"),
					},
				},
			},
		},
		&armstreamanalytics.OutputsClientCreateOrReplaceOptions{IfMatch: nil,
			IfNoneMatch: nil,
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Output_Create_AzureSQL.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstreamanalytics.Output{
			Name: to.Ptr("output1755"),
			Type: to.Ptr("Microsoft.StreamAnalytics/streamingjobs/outputs"),
			ID:   to.Ptr("/subscriptions/56b5e0a9-b645-407d-99b0-c64f86013e3d/resourceGroups/sjrg2157/providers/Microsoft.StreamAnalytics/streamingjobs/sj6458/outputs/output1755"),
			Properties: &armstreamanalytics.OutputProperties{
				Datasource: &armstreamanalytics.AzureSQLDatabaseOutputDataSource{
					Type: to.Ptr("Microsoft.Sql/Server/Database"),
					Properties: &armstreamanalytics.AzureSQLDatabaseOutputDataSourceProperties{
						Database: to.Ptr("someDatabase"),
						Server:   to.Ptr("someServer"),
						Table:    to.Ptr("someTable"),
						User:     to.Ptr("someUser"),
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Output) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Output)
			t.Fatalf("Mock response is not equal to example response for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Output_Create_AzureSQL.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Output_Create_AzureTable.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create an Azure Table output"},
	})
	client = armstreamanalytics.NewOutputsClient("56b5e0a9-b645-407d-99b0-c64f86013e3d", cred, &options)
	res, err = client.CreateOrReplace(ctx,
		"sjrg5176",
		"sj2790",
		"output958",
		armstreamanalytics.Output{
			Properties: &armstreamanalytics.OutputProperties{
				Datasource: &armstreamanalytics.AzureTableOutputDataSource{
					Type: to.Ptr("Microsoft.Storage/Table"),
					Properties: &armstreamanalytics.AzureTableOutputDataSourceProperties{
						AccountKey:  to.Ptr("accountKey=="),
						AccountName: to.Ptr("someAccountName"),
						BatchSize:   to.Ptr[int32](25),
						ColumnsToRemove: []*string{
							to.Ptr("column1"),
							to.Ptr("column2")},
						PartitionKey: to.Ptr("partitionKey"),
						RowKey:       to.Ptr("rowKey"),
						Table:        to.Ptr("samples"),
					},
				},
			},
		},
		&armstreamanalytics.OutputsClientCreateOrReplaceOptions{IfMatch: nil,
			IfNoneMatch: nil,
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Output_Create_AzureTable.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstreamanalytics.Output{
			Name: to.Ptr("output958"),
			Type: to.Ptr("Microsoft.StreamAnalytics/streamingjobs/outputs"),
			ID:   to.Ptr("/subscriptions/56b5e0a9-b645-407d-99b0-c64f86013e3d/resourceGroups/sjrg5176/providers/Microsoft.StreamAnalytics/streamingjobs/sj2790/outputs/output958"),
			Properties: &armstreamanalytics.OutputProperties{
				Datasource: &armstreamanalytics.AzureTableOutputDataSource{
					Type: to.Ptr("Microsoft.Storage/Table"),
					Properties: &armstreamanalytics.AzureTableOutputDataSourceProperties{
						AccountName: to.Ptr("someAccountName"),
						BatchSize:   to.Ptr[int32](25),
						ColumnsToRemove: []*string{
							to.Ptr("column1"),
							to.Ptr("column2")},
						PartitionKey: to.Ptr("partitionKey"),
						RowKey:       to.Ptr("rowKey"),
						Table:        to.Ptr("samples"),
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Output) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Output)
			t.Fatalf("Mock response is not equal to example response for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Output_Create_AzureTable.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Output_Create_EventHub_JSON.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create an Event Hub output with JSON serialization"},
	})
	client = armstreamanalytics.NewOutputsClient("56b5e0a9-b645-407d-99b0-c64f86013e3d", cred, &options)
	res, err = client.CreateOrReplace(ctx,
		"sjrg6912",
		"sj3310",
		"output5195",
		armstreamanalytics.Output{
			Properties: &armstreamanalytics.OutputProperties{
				Datasource: &armstreamanalytics.EventHubOutputDataSource{
					Type: to.Ptr("Microsoft.ServiceBus/EventHub"),
					Properties: &armstreamanalytics.EventHubOutputDataSourceProperties{
						ServiceBusNamespace:    to.Ptr("sdktest"),
						SharedAccessPolicyKey:  to.Ptr("sharedAccessPolicyKey="),
						SharedAccessPolicyName: to.Ptr("RootManageSharedAccessKey"),
						EventHubName:           to.Ptr("sdkeventhub"),
						PartitionKey:           to.Ptr("partitionKey"),
					},
				},
				Serialization: &armstreamanalytics.JSONSerialization{
					Type: to.Ptr(armstreamanalytics.EventSerializationTypeJSON),
					Properties: &armstreamanalytics.JSONSerializationProperties{
						Format:   to.Ptr(armstreamanalytics.JSONOutputSerializationFormatArray),
						Encoding: to.Ptr(armstreamanalytics.EncodingUTF8),
					},
				},
			},
		},
		&armstreamanalytics.OutputsClientCreateOrReplaceOptions{IfMatch: nil,
			IfNoneMatch: nil,
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Output_Create_EventHub_JSON.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstreamanalytics.Output{
			Name: to.Ptr("output5195"),
			Type: to.Ptr("Microsoft.StreamAnalytics/streamingjobs/outputs"),
			ID:   to.Ptr("/subscriptions/56b5e0a9-b645-407d-99b0-c64f86013e3d/resourceGroups/sjrg6912/providers/Microsoft.StreamAnalytics/streamingjobs/sj3310/outputs/output5195"),
			Properties: &armstreamanalytics.OutputProperties{
				Datasource: &armstreamanalytics.EventHubOutputDataSource{
					Type: to.Ptr("Microsoft.ServiceBus/EventHub"),
					Properties: &armstreamanalytics.EventHubOutputDataSourceProperties{
						ServiceBusNamespace:    to.Ptr("sdktest"),
						SharedAccessPolicyName: to.Ptr("RootManageSharedAccessKey"),
						EventHubName:           to.Ptr("sdkeventhub"),
						PartitionKey:           to.Ptr("partitionKey"),
					},
				},
				Serialization: &armstreamanalytics.JSONSerialization{
					Type: to.Ptr(armstreamanalytics.EventSerializationTypeJSON),
					Properties: &armstreamanalytics.JSONSerializationProperties{
						Format:   to.Ptr(armstreamanalytics.JSONOutputSerializationFormatArray),
						Encoding: to.Ptr(armstreamanalytics.EncodingUTF8),
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Output) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Output)
			t.Fatalf("Mock response is not equal to example response for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Output_Create_EventHub_JSON.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOutputs_Update(t *testing.T) {
	// From example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Output_Update_DocumentDB.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a DocumentDB output"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstreamanalytics.NewOutputsClient("56b5e0a9-b645-407d-99b0-c64f86013e3d", cred, &options)
	res, err := client.Update(ctx,
		"sjrg7983",
		"sj2331",
		"output3022",
		armstreamanalytics.Output{
			Properties: &armstreamanalytics.OutputProperties{
				Datasource: &armstreamanalytics.DocumentDbOutputDataSource{
					Type: to.Ptr("Microsoft.Storage/DocumentDB"),
					Properties: &armstreamanalytics.DocumentDbOutputDataSourceProperties{
						PartitionKey: to.Ptr("differentPartitionKey"),
					},
				},
			},
		},
		&armstreamanalytics.OutputsClientUpdateOptions{IfMatch: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Output_Update_DocumentDB.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstreamanalytics.Output{
			Name: to.Ptr("output3022"),
			Type: to.Ptr("Microsoft.StreamAnalytics/streamingjobs/outputs"),
			ID:   to.Ptr("/subscriptions/56b5e0a9-b645-407d-99b0-c64f86013e3d/resourceGroups/sjrg7983/providers/Microsoft.StreamAnalytics/streamingjobs/sj2331/outputs/output3022"),
			Properties: &armstreamanalytics.OutputProperties{
				Datasource: &armstreamanalytics.DocumentDbOutputDataSource{
					Type: to.Ptr("Microsoft.Storage/DocumentDB"),
					Properties: &armstreamanalytics.DocumentDbOutputDataSourceProperties{
						AccountID:             to.Ptr("someAccountId"),
						CollectionNamePattern: to.Ptr("collection"),
						Database:              to.Ptr("db01"),
						DocumentID:            to.Ptr("documentId"),
						PartitionKey:          to.Ptr("differentPartitionKey"),
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Output) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Output)
			t.Fatalf("Mock response is not equal to example response for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Output_Update_DocumentDB.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Output_Update_PowerBI.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a Power BI output"},
	})
	client = armstreamanalytics.NewOutputsClient("56b5e0a9-b645-407d-99b0-c64f86013e3d", cred, &options)
	res, err = client.Update(ctx,
		"sjrg7983",
		"sj2331",
		"output3022",
		armstreamanalytics.Output{
			Properties: &armstreamanalytics.OutputProperties{
				Datasource: &armstreamanalytics.PowerBIOutputDataSource{
					Type: to.Ptr("PowerBI"),
					Properties: &armstreamanalytics.PowerBIOutputDataSourceProperties{
						Dataset: to.Ptr("differentDataset"),
					},
				},
			},
		},
		&armstreamanalytics.OutputsClientUpdateOptions{IfMatch: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Output_Update_PowerBI.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstreamanalytics.Output{
			Name: to.Ptr("output3022"),
			Type: to.Ptr("Microsoft.StreamAnalytics/streamingjobs/outputs"),
			ID:   to.Ptr("/subscriptions/56b5e0a9-b645-407d-99b0-c64f86013e3d/resourceGroups/sjrg7983/providers/Microsoft.StreamAnalytics/streamingjobs/sj2331/outputs/output3022"),
			Properties: &armstreamanalytics.OutputProperties{
				Datasource: &armstreamanalytics.PowerBIOutputDataSource{
					Type: to.Ptr("PowerBI"),
					Properties: &armstreamanalytics.PowerBIOutputDataSourceProperties{
						TokenUserDisplayName:   to.Ptr("Bob Smith"),
						TokenUserPrincipalName: to.Ptr("bobsmith@contoso.com"),
						Dataset:                to.Ptr("differentDataset"),
						GroupID:                to.Ptr("ac40305e-3e8d-43ac-8161-c33799f43e95"),
						GroupName:              to.Ptr("MyPowerBIGroup"),
						Table:                  to.Ptr("someTable"),
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Output) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Output)
			t.Fatalf("Mock response is not equal to example response for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Output_Update_PowerBI.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Output_Update_ServiceBusQueue.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a Service Bus Queue output with Avro serialization"},
	})
	client = armstreamanalytics.NewOutputsClient("56b5e0a9-b645-407d-99b0-c64f86013e3d", cred, &options)
	res, err = client.Update(ctx,
		"sjrg3410",
		"sj5095",
		"output3456",
		armstreamanalytics.Output{
			Properties: &armstreamanalytics.OutputProperties{
				Datasource: &armstreamanalytics.ServiceBusQueueOutputDataSource{
					Type: to.Ptr("Microsoft.ServiceBus/Queue"),
					Properties: &armstreamanalytics.ServiceBusQueueOutputDataSourceProperties{
						QueueName: to.Ptr("differentQueueName"),
					},
				},
				Serialization: &armstreamanalytics.JSONSerialization{
					Type: to.Ptr(armstreamanalytics.EventSerializationTypeJSON),
					Properties: &armstreamanalytics.JSONSerializationProperties{
						Format:   to.Ptr(armstreamanalytics.JSONOutputSerializationFormatLineSeparated),
						Encoding: to.Ptr(armstreamanalytics.EncodingUTF8),
					},
				},
			},
		},
		&armstreamanalytics.OutputsClientUpdateOptions{IfMatch: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Output_Update_ServiceBusQueue.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstreamanalytics.Output{
			Name: to.Ptr("output3456"),
			Type: to.Ptr("Microsoft.StreamAnalytics/streamingjobs/outputs"),
			ID:   to.Ptr("/subscriptions/56b5e0a9-b645-407d-99b0-c64f86013e3d/resourceGroups/sjrg3410/providers/Microsoft.StreamAnalytics/streamingjobs/sj5095/outputs/output3456"),
			Properties: &armstreamanalytics.OutputProperties{
				Datasource: &armstreamanalytics.ServiceBusQueueOutputDataSource{
					Type: to.Ptr("Microsoft.ServiceBus/Queue"),
					Properties: &armstreamanalytics.ServiceBusQueueOutputDataSourceProperties{
						ServiceBusNamespace:    to.Ptr("sdktest"),
						SharedAccessPolicyName: to.Ptr("RootManageSharedAccessKey"),
						PropertyColumns: []*string{
							to.Ptr("column1"),
							to.Ptr("column2")},
						QueueName: to.Ptr("differentQueueName"),
					},
				},
				Serialization: &armstreamanalytics.JSONSerialization{
					Type: to.Ptr(armstreamanalytics.EventSerializationTypeJSON),
					Properties: &armstreamanalytics.JSONSerializationProperties{
						Format:   to.Ptr(armstreamanalytics.JSONOutputSerializationFormatLineSeparated),
						Encoding: to.Ptr(armstreamanalytics.EncodingUTF8),
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Output) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Output)
			t.Fatalf("Mock response is not equal to example response for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Output_Update_ServiceBusQueue.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Output_Update_ServiceBusTopic.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a Service Bus Topic output with CSV serialization"},
	})
	client = armstreamanalytics.NewOutputsClient("56b5e0a9-b645-407d-99b0-c64f86013e3d", cred, &options)
	res, err = client.Update(ctx,
		"sjrg6450",
		"sj7094",
		"output7886",
		armstreamanalytics.Output{
			Properties: &armstreamanalytics.OutputProperties{
				Datasource: &armstreamanalytics.ServiceBusTopicOutputDataSource{
					Type: to.Ptr("Microsoft.ServiceBus/Topic"),
					Properties: &armstreamanalytics.ServiceBusTopicOutputDataSourceProperties{
						TopicName: to.Ptr("differentTopicName"),
					},
				},
				Serialization: &armstreamanalytics.CSVSerialization{
					Type: to.Ptr(armstreamanalytics.EventSerializationTypeCSV),
					Properties: &armstreamanalytics.CSVSerializationProperties{
						Encoding:       to.Ptr(armstreamanalytics.EncodingUTF8),
						FieldDelimiter: to.Ptr("|"),
					},
				},
			},
		},
		&armstreamanalytics.OutputsClientUpdateOptions{IfMatch: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Output_Update_ServiceBusTopic.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstreamanalytics.Output{
			Name: to.Ptr("output7886"),
			Type: to.Ptr("Microsoft.StreamAnalytics/streamingjobs/outputs"),
			ID:   to.Ptr("/subscriptions/56b5e0a9-b645-407d-99b0-c64f86013e3d/resourceGroups/sjrg6450/providers/Microsoft.StreamAnalytics/streamingjobs/sj7094/outputs/output7886"),
			Properties: &armstreamanalytics.OutputProperties{
				Datasource: &armstreamanalytics.ServiceBusTopicOutputDataSource{
					Type: to.Ptr("Microsoft.ServiceBus/Topic"),
					Properties: &armstreamanalytics.ServiceBusTopicOutputDataSourceProperties{
						ServiceBusNamespace:    to.Ptr("sdktest"),
						SharedAccessPolicyName: to.Ptr("RootManageSharedAccessKey"),
						PropertyColumns: []*string{
							to.Ptr("column1"),
							to.Ptr("column2")},
						TopicName: to.Ptr("differentTopicName"),
					},
				},
				Serialization: &armstreamanalytics.CSVSerialization{
					Type: to.Ptr(armstreamanalytics.EventSerializationTypeCSV),
					Properties: &armstreamanalytics.CSVSerializationProperties{
						Encoding:       to.Ptr(armstreamanalytics.EncodingUTF8),
						FieldDelimiter: to.Ptr("|"),
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Output) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Output)
			t.Fatalf("Mock response is not equal to example response for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Output_Update_ServiceBusTopic.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Output_Update_Blob.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a blob output with CSV serialization"},
	})
	client = armstreamanalytics.NewOutputsClient("56b5e0a9-b645-407d-99b0-c64f86013e3d", cred, &options)
	res, err = client.Update(ctx,
		"sjrg5023",
		"sj900",
		"output1623",
		armstreamanalytics.Output{
			Properties: &armstreamanalytics.OutputProperties{
				Datasource: &armstreamanalytics.BlobOutputDataSource{
					Type: to.Ptr("Microsoft.Storage/Blob"),
					Properties: &armstreamanalytics.BlobOutputDataSourceProperties{
						Container: to.Ptr("differentContainer"),
					},
				},
				Serialization: &armstreamanalytics.CSVSerialization{
					Type: to.Ptr(armstreamanalytics.EventSerializationTypeCSV),
					Properties: &armstreamanalytics.CSVSerializationProperties{
						Encoding:       to.Ptr(armstreamanalytics.EncodingUTF8),
						FieldDelimiter: to.Ptr("|"),
					},
				},
			},
		},
		&armstreamanalytics.OutputsClientUpdateOptions{IfMatch: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Output_Update_Blob.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstreamanalytics.Output{
			Name: to.Ptr("output1623"),
			Type: to.Ptr("Microsoft.StreamAnalytics/streamingjobs/outputs"),
			ID:   to.Ptr("/subscriptions/56b5e0a9-b645-407d-99b0-c64f86013e3d/resourceGroups/sjrg5023/providers/Microsoft.StreamAnalytics/streamingjobs/sj900/outputs/output1623"),
			Properties: &armstreamanalytics.OutputProperties{
				Datasource: &armstreamanalytics.BlobOutputDataSource{
					Type: to.Ptr("Microsoft.Storage/Blob"),
					Properties: &armstreamanalytics.BlobOutputDataSourceProperties{
						Container:   to.Ptr("differentContainer"),
						DateFormat:  to.Ptr("yyyy/MM/dd"),
						PathPattern: to.Ptr("{date}/{time}"),
						StorageAccounts: []*armstreamanalytics.StorageAccount{
							{
								AccountName: to.Ptr("someAccountName"),
							}},
						TimeFormat: to.Ptr("HH"),
					},
				},
				Serialization: &armstreamanalytics.CSVSerialization{
					Type: to.Ptr(armstreamanalytics.EventSerializationTypeCSV),
					Properties: &armstreamanalytics.CSVSerializationProperties{
						Encoding:       to.Ptr(armstreamanalytics.EncodingUTF8),
						FieldDelimiter: to.Ptr("|"),
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Output) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Output)
			t.Fatalf("Mock response is not equal to example response for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Output_Update_Blob.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Output_Update_AzureDataLakeStore.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update an Azure Data Lake Store output with JSON serialization"},
	})
	client = armstreamanalytics.NewOutputsClient("56b5e0a9-b645-407d-99b0-c64f86013e3d", cred, &options)
	res, err = client.Update(ctx,
		"sjrg6912",
		"sj3310",
		"output5195",
		armstreamanalytics.Output{
			Properties: &armstreamanalytics.OutputProperties{
				Datasource: &armstreamanalytics.AzureDataLakeStoreOutputDataSource{
					Type: to.Ptr("Microsoft.DataLake/Accounts"),
					Properties: &armstreamanalytics.AzureDataLakeStoreOutputDataSourceProperties{
						AccountName: to.Ptr("differentaccount"),
					},
				},
				Serialization: &armstreamanalytics.JSONSerialization{
					Type: to.Ptr(armstreamanalytics.EventSerializationTypeJSON),
					Properties: &armstreamanalytics.JSONSerializationProperties{
						Format:   to.Ptr(armstreamanalytics.JSONOutputSerializationFormatLineSeparated),
						Encoding: to.Ptr(armstreamanalytics.EncodingUTF8),
					},
				},
			},
		},
		&armstreamanalytics.OutputsClientUpdateOptions{IfMatch: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Output_Update_AzureDataLakeStore.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstreamanalytics.Output{
			Name: to.Ptr("output5195"),
			Type: to.Ptr("Microsoft.StreamAnalytics/streamingjobs/outputs"),
			ID:   to.Ptr("/subscriptions/56b5e0a9-b645-407d-99b0-c64f86013e3d/resourceGroups/sjrg6912/providers/Microsoft.StreamAnalytics/streamingjobs/sj3310/outputs/output5195"),
			Properties: &armstreamanalytics.OutputProperties{
				Datasource: &armstreamanalytics.AzureDataLakeStoreOutputDataSource{
					Type: to.Ptr("Microsoft.DataLake/Accounts"),
					Properties: &armstreamanalytics.AzureDataLakeStoreOutputDataSourceProperties{
						TokenUserDisplayName:   to.Ptr("Bob Smith"),
						TokenUserPrincipalName: to.Ptr("bobsmith@contoso.com"),
						AccountName:            to.Ptr("differentaccount"),
						DateFormat:             to.Ptr("yyyy/MM/dd"),
						FilePathPrefix:         to.Ptr("{date}/{time}"),
						TenantID:               to.Ptr("cea4e98b-c798-49e7-8c40-4a2b3beb47dd"),
						TimeFormat:             to.Ptr("HH"),
					},
				},
				Serialization: &armstreamanalytics.JSONSerialization{
					Type: to.Ptr(armstreamanalytics.EventSerializationTypeJSON),
					Properties: &armstreamanalytics.JSONSerializationProperties{
						Format:   to.Ptr(armstreamanalytics.JSONOutputSerializationFormatLineSeparated),
						Encoding: to.Ptr(armstreamanalytics.EncodingUTF8),
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Output) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Output)
			t.Fatalf("Mock response is not equal to example response for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Output_Update_AzureDataLakeStore.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Output_Update_AzureSQL.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update an Azure SQL database output"},
	})
	client = armstreamanalytics.NewOutputsClient("56b5e0a9-b645-407d-99b0-c64f86013e3d", cred, &options)
	res, err = client.Update(ctx,
		"sjrg2157",
		"sj6458",
		"output1755",
		armstreamanalytics.Output{
			Properties: &armstreamanalytics.OutputProperties{
				Datasource: &armstreamanalytics.AzureSQLDatabaseOutputDataSource{
					Type: to.Ptr("Microsoft.Sql/Server/Database"),
					Properties: &armstreamanalytics.AzureSQLDatabaseOutputDataSourceProperties{
						Table: to.Ptr("differentTable"),
					},
				},
			},
		},
		&armstreamanalytics.OutputsClientUpdateOptions{IfMatch: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Output_Update_AzureSQL.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstreamanalytics.Output{
			Name: to.Ptr("output1755"),
			Type: to.Ptr("Microsoft.StreamAnalytics/streamingjobs/outputs"),
			ID:   to.Ptr("/subscriptions/56b5e0a9-b645-407d-99b0-c64f86013e3d/resourceGroups/sjrg2157/providers/Microsoft.StreamAnalytics/streamingjobs/sj6458/outputs/output1755"),
			Properties: &armstreamanalytics.OutputProperties{
				Datasource: &armstreamanalytics.AzureSQLDatabaseOutputDataSource{
					Type: to.Ptr("Microsoft.Sql/Server/Database"),
					Properties: &armstreamanalytics.AzureSQLDatabaseOutputDataSourceProperties{
						Database: to.Ptr("someDatabase"),
						Server:   to.Ptr("someServer"),
						Table:    to.Ptr("differentTable"),
						User:     to.Ptr("someUser"),
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Output) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Output)
			t.Fatalf("Mock response is not equal to example response for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Output_Update_AzureSQL.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Output_Update_AzureTable.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update an Azure Table output"},
	})
	client = armstreamanalytics.NewOutputsClient("56b5e0a9-b645-407d-99b0-c64f86013e3d", cred, &options)
	res, err = client.Update(ctx,
		"sjrg5176",
		"sj2790",
		"output958",
		armstreamanalytics.Output{
			Properties: &armstreamanalytics.OutputProperties{
				Datasource: &armstreamanalytics.AzureTableOutputDataSource{
					Type: to.Ptr("Microsoft.Storage/Table"),
					Properties: &armstreamanalytics.AzureTableOutputDataSourceProperties{
						PartitionKey: to.Ptr("differentPartitionKey"),
					},
				},
			},
		},
		&armstreamanalytics.OutputsClientUpdateOptions{IfMatch: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Output_Update_AzureTable.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstreamanalytics.Output{
			Name: to.Ptr("output958"),
			Type: to.Ptr("Microsoft.StreamAnalytics/streamingjobs/outputs"),
			ID:   to.Ptr("/subscriptions/56b5e0a9-b645-407d-99b0-c64f86013e3d/resourceGroups/sjrg5176/providers/Microsoft.StreamAnalytics/streamingjobs/sj2790/outputs/output958"),
			Properties: &armstreamanalytics.OutputProperties{
				Datasource: &armstreamanalytics.AzureTableOutputDataSource{
					Type: to.Ptr("Microsoft.Storage/Table"),
					Properties: &armstreamanalytics.AzureTableOutputDataSourceProperties{
						AccountName: to.Ptr("someAccountName"),
						BatchSize:   to.Ptr[int32](25),
						ColumnsToRemove: []*string{
							to.Ptr("column1"),
							to.Ptr("column2")},
						PartitionKey: to.Ptr("differentPartitionKey"),
						RowKey:       to.Ptr("rowKey"),
						Table:        to.Ptr("samples"),
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Output) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Output)
			t.Fatalf("Mock response is not equal to example response for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Output_Update_AzureTable.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Output_Update_EventHub.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update an Event Hub output with JSON serialization"},
	})
	client = armstreamanalytics.NewOutputsClient("56b5e0a9-b645-407d-99b0-c64f86013e3d", cred, &options)
	res, err = client.Update(ctx,
		"sjrg6912",
		"sj3310",
		"output5195",
		armstreamanalytics.Output{
			Properties: &armstreamanalytics.OutputProperties{
				Datasource: &armstreamanalytics.EventHubOutputDataSource{
					Type: to.Ptr("Microsoft.ServiceBus/EventHub"),
					Properties: &armstreamanalytics.EventHubOutputDataSourceProperties{
						PartitionKey: to.Ptr("differentPartitionKey"),
					},
				},
				Serialization: &armstreamanalytics.JSONSerialization{
					Type: to.Ptr(armstreamanalytics.EventSerializationTypeJSON),
					Properties: &armstreamanalytics.JSONSerializationProperties{
						Format:   to.Ptr(armstreamanalytics.JSONOutputSerializationFormatLineSeparated),
						Encoding: to.Ptr(armstreamanalytics.EncodingUTF8),
					},
				},
			},
		},
		&armstreamanalytics.OutputsClientUpdateOptions{IfMatch: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Output_Update_EventHub.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstreamanalytics.Output{
			Name: to.Ptr("output5195"),
			Type: to.Ptr("Microsoft.StreamAnalytics/streamingjobs/outputs"),
			ID:   to.Ptr("/subscriptions/56b5e0a9-b645-407d-99b0-c64f86013e3d/resourceGroups/sjrg6912/providers/Microsoft.StreamAnalytics/streamingjobs/sj3310/outputs/output5195"),
			Properties: &armstreamanalytics.OutputProperties{
				Datasource: &armstreamanalytics.EventHubOutputDataSource{
					Type: to.Ptr("Microsoft.ServiceBus/EventHub"),
					Properties: &armstreamanalytics.EventHubOutputDataSourceProperties{
						ServiceBusNamespace:    to.Ptr("sdktest"),
						SharedAccessPolicyName: to.Ptr("RootManageSharedAccessKey"),
						EventHubName:           to.Ptr("sdkeventhub"),
						PartitionKey:           to.Ptr("differentPartitionKey"),
					},
				},
				Serialization: &armstreamanalytics.JSONSerialization{
					Type: to.Ptr(armstreamanalytics.EventSerializationTypeJSON),
					Properties: &armstreamanalytics.JSONSerializationProperties{
						Format:   to.Ptr(armstreamanalytics.JSONOutputSerializationFormatLineSeparated),
						Encoding: to.Ptr(armstreamanalytics.EncodingUTF8),
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Output) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Output)
			t.Fatalf("Mock response is not equal to example response for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Output_Update_EventHub.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOutputs_Delete(t *testing.T) {
	// From example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Output_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete an output"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstreamanalytics.NewOutputsClient("56b5e0a9-b645-407d-99b0-c64f86013e3d", cred, &options)
	_, err := client.Delete(ctx,
		"sjrg2157",
		"sj6458",
		"output1755",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Output_Delete.json: %v", err)
	}
}

func TestOutputs_Get(t *testing.T) {
	// From example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Output_Get_DocumentDB.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a DocumentDB output"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstreamanalytics.NewOutputsClient("56b5e0a9-b645-407d-99b0-c64f86013e3d", cred, &options)
	res, err := client.Get(ctx,
		"sjrg7983",
		"sj2331",
		"output3022",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Output_Get_DocumentDB.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstreamanalytics.Output{
			Name: to.Ptr("output3022"),
			Type: to.Ptr("Microsoft.StreamAnalytics/streamingjobs/outputs"),
			ID:   to.Ptr("/subscriptions/56b5e0a9-b645-407d-99b0-c64f86013e3d/resourceGroups/sjrg7983/providers/Microsoft.StreamAnalytics/streamingjobs/sj2331/outputs/output3022"),
			Properties: &armstreamanalytics.OutputProperties{
				Datasource: &armstreamanalytics.DocumentDbOutputDataSource{
					Type: to.Ptr("Microsoft.Storage/DocumentDB"),
					Properties: &armstreamanalytics.DocumentDbOutputDataSourceProperties{
						AccountID:             to.Ptr("someAccountId"),
						CollectionNamePattern: to.Ptr("collection"),
						Database:              to.Ptr("db01"),
						DocumentID:            to.Ptr("documentId"),
						PartitionKey:          to.Ptr("key"),
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Output) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Output)
			t.Fatalf("Mock response is not equal to example response for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Output_Get_DocumentDB.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Output_Get_PowerBI.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a Power BI output"},
	})
	client = armstreamanalytics.NewOutputsClient("56b5e0a9-b645-407d-99b0-c64f86013e3d", cred, &options)
	res, err = client.Get(ctx,
		"sjrg7983",
		"sj2331",
		"output3022",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Output_Get_PowerBI.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstreamanalytics.Output{
			Name: to.Ptr("output3022"),
			Type: to.Ptr("Microsoft.StreamAnalytics/streamingjobs/outputs"),
			ID:   to.Ptr("/subscriptions/56b5e0a9-b645-407d-99b0-c64f86013e3d/resourceGroups/sjrg7983/providers/Microsoft.StreamAnalytics/streamingjobs/sj2331/outputs/output3022"),
			Properties: &armstreamanalytics.OutputProperties{
				Datasource: &armstreamanalytics.PowerBIOutputDataSource{
					Type: to.Ptr("PowerBI"),
					Properties: &armstreamanalytics.PowerBIOutputDataSourceProperties{
						TokenUserDisplayName:   to.Ptr("Bob Smith"),
						TokenUserPrincipalName: to.Ptr("bobsmith@contoso.com"),
						Dataset:                to.Ptr("someDataset"),
						GroupID:                to.Ptr("ac40305e-3e8d-43ac-8161-c33799f43e95"),
						GroupName:              to.Ptr("MyPowerBIGroup"),
						Table:                  to.Ptr("someTable"),
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Output) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Output)
			t.Fatalf("Mock response is not equal to example response for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Output_Get_PowerBI.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Output_Get_ServiceBusQueue_Avro.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a Service Bus Queue output with Avro serialization"},
	})
	client = armstreamanalytics.NewOutputsClient("56b5e0a9-b645-407d-99b0-c64f86013e3d", cred, &options)
	res, err = client.Get(ctx,
		"sjrg3410",
		"sj5095",
		"output3456",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Output_Get_ServiceBusQueue_Avro.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstreamanalytics.Output{
			Name: to.Ptr("output3456"),
			Type: to.Ptr("Microsoft.StreamAnalytics/streamingjobs/outputs"),
			ID:   to.Ptr("/subscriptions/56b5e0a9-b645-407d-99b0-c64f86013e3d/resourceGroups/sjrg3410/providers/Microsoft.StreamAnalytics/streamingjobs/sj5095/outputs/output3456"),
			Properties: &armstreamanalytics.OutputProperties{
				Datasource: &armstreamanalytics.ServiceBusQueueOutputDataSource{
					Type: to.Ptr("Microsoft.ServiceBus/Queue"),
					Properties: &armstreamanalytics.ServiceBusQueueOutputDataSourceProperties{
						ServiceBusNamespace:    to.Ptr("sdktest"),
						SharedAccessPolicyName: to.Ptr("RootManageSharedAccessKey"),
						PropertyColumns: []*string{
							to.Ptr("column1"),
							to.Ptr("column2")},
						QueueName: to.Ptr("sdkqueue"),
					},
				},
				Serialization: &armstreamanalytics.AvroSerialization{
					Type:       to.Ptr(armstreamanalytics.EventSerializationTypeAvro),
					Properties: map[string]interface{}{},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Output) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Output)
			t.Fatalf("Mock response is not equal to example response for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Output_Get_ServiceBusQueue_Avro.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Output_Get_ServiceBusTopic_CSV.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a Service Bus Topic output with CSV serialization"},
	})
	client = armstreamanalytics.NewOutputsClient("56b5e0a9-b645-407d-99b0-c64f86013e3d", cred, &options)
	res, err = client.Get(ctx,
		"sjrg6450",
		"sj7094",
		"output7886",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Output_Get_ServiceBusTopic_CSV.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstreamanalytics.Output{
			Name: to.Ptr("output7886"),
			Type: to.Ptr("Microsoft.StreamAnalytics/streamingjobs/outputs"),
			ID:   to.Ptr("/subscriptions/56b5e0a9-b645-407d-99b0-c64f86013e3d/resourceGroups/sjrg6450/providers/Microsoft.StreamAnalytics/streamingjobs/sj7094/outputs/output7886"),
			Properties: &armstreamanalytics.OutputProperties{
				Datasource: &armstreamanalytics.ServiceBusTopicOutputDataSource{
					Type: to.Ptr("Microsoft.ServiceBus/Topic"),
					Properties: &armstreamanalytics.ServiceBusTopicOutputDataSourceProperties{
						ServiceBusNamespace:    to.Ptr("sdktest"),
						SharedAccessPolicyName: to.Ptr("RootManageSharedAccessKey"),
						PropertyColumns: []*string{
							to.Ptr("column1"),
							to.Ptr("column2")},
						TopicName: to.Ptr("sdktopic"),
					},
				},
				Serialization: &armstreamanalytics.CSVSerialization{
					Type: to.Ptr(armstreamanalytics.EventSerializationTypeCSV),
					Properties: &armstreamanalytics.CSVSerializationProperties{
						Encoding:       to.Ptr(armstreamanalytics.EncodingUTF8),
						FieldDelimiter: to.Ptr(","),
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Output) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Output)
			t.Fatalf("Mock response is not equal to example response for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Output_Get_ServiceBusTopic_CSV.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Output_Get_Blob_CSV.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a blob output with CSV serialization"},
	})
	client = armstreamanalytics.NewOutputsClient("56b5e0a9-b645-407d-99b0-c64f86013e3d", cred, &options)
	res, err = client.Get(ctx,
		"sjrg5023",
		"sj900",
		"output1623",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Output_Get_Blob_CSV.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstreamanalytics.Output{
			Name: to.Ptr("output1623"),
			Type: to.Ptr("Microsoft.StreamAnalytics/streamingjobs/outputs"),
			ID:   to.Ptr("/subscriptions/56b5e0a9-b645-407d-99b0-c64f86013e3d/resourceGroups/sjrg5023/providers/Microsoft.StreamAnalytics/streamingjobs/sj900/outputs/output1623"),
			Properties: &armstreamanalytics.OutputProperties{
				Datasource: &armstreamanalytics.BlobOutputDataSource{
					Type: to.Ptr("Microsoft.Storage/Blob"),
					Properties: &armstreamanalytics.BlobOutputDataSourceProperties{
						Container:   to.Ptr("state"),
						DateFormat:  to.Ptr("yyyy/MM/dd"),
						PathPattern: to.Ptr("{date}/{time}"),
						StorageAccounts: []*armstreamanalytics.StorageAccount{
							{
								AccountName: to.Ptr("someAccountName"),
							}},
						TimeFormat: to.Ptr("HH"),
					},
				},
				Serialization: &armstreamanalytics.CSVSerialization{
					Type: to.Ptr(armstreamanalytics.EventSerializationTypeCSV),
					Properties: &armstreamanalytics.CSVSerializationProperties{
						Encoding:       to.Ptr(armstreamanalytics.EncodingUTF8),
						FieldDelimiter: to.Ptr(","),
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Output) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Output)
			t.Fatalf("Mock response is not equal to example response for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Output_Get_Blob_CSV.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Output_Get_AzureDataLakeStore_JSON.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get an Azure Data Lake Store output with JSON serialization"},
	})
	client = armstreamanalytics.NewOutputsClient("56b5e0a9-b645-407d-99b0-c64f86013e3d", cred, &options)
	res, err = client.Get(ctx,
		"sjrg6912",
		"sj3310",
		"output5195",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Output_Get_AzureDataLakeStore_JSON.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstreamanalytics.Output{
			Name: to.Ptr("output5195"),
			Type: to.Ptr("Microsoft.StreamAnalytics/streamingjobs/outputs"),
			ID:   to.Ptr("/subscriptions/56b5e0a9-b645-407d-99b0-c64f86013e3d/resourceGroups/sjrg6912/providers/Microsoft.StreamAnalytics/streamingjobs/sj3310/outputs/output5195"),
			Properties: &armstreamanalytics.OutputProperties{
				Datasource: &armstreamanalytics.AzureDataLakeStoreOutputDataSource{
					Type: to.Ptr("Microsoft.DataLake/Accounts"),
					Properties: &armstreamanalytics.AzureDataLakeStoreOutputDataSourceProperties{
						TokenUserDisplayName:   to.Ptr("Bob Smith"),
						TokenUserPrincipalName: to.Ptr("bobsmith@contoso.com"),
						AccountName:            to.Ptr("someaccount"),
						DateFormat:             to.Ptr("yyyy/MM/dd"),
						FilePathPrefix:         to.Ptr("{date}/{time}"),
						TenantID:               to.Ptr("cea4e98b-c798-49e7-8c40-4a2b3beb47dd"),
						TimeFormat:             to.Ptr("HH"),
					},
				},
				Serialization: &armstreamanalytics.JSONSerialization{
					Type: to.Ptr(armstreamanalytics.EventSerializationTypeJSON),
					Properties: &armstreamanalytics.JSONSerializationProperties{
						Format:   to.Ptr(armstreamanalytics.JSONOutputSerializationFormatArray),
						Encoding: to.Ptr(armstreamanalytics.EncodingUTF8),
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Output) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Output)
			t.Fatalf("Mock response is not equal to example response for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Output_Get_AzureDataLakeStore_JSON.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Output_Get_DataWarehouse.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get an Azure Data Warehouse output"},
	})
	client = armstreamanalytics.NewOutputsClient("56b5e0a9-b645-407d-99b0-c64f86013e3d", cred, &options)
	res, err = client.Get(ctx,
		"sjrg",
		"sjName",
		"output958",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Output_Get_DataWarehouse.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstreamanalytics.Output{
			Name: to.Ptr("SynapseformerlySQLDW1"),
			Type: to.Ptr("Microsoft.StreamAnalytics/streamingjobs/outputs"),
			ID:   to.Ptr("/subscriptions/56b5e0a9-b645-407d-99b0-c64f86013e3d/resourceGroups/sjrg/providers/Microsoft.StreamAnalytics/streamingjobs/kunAll0908npm2/outputs/SynapseformerlySQLDW1"),
			Properties: &armstreamanalytics.OutputProperties{
				Datasource: &armstreamanalytics.AzureSynapseOutputDataSource{
					Type: to.Ptr("Microsoft.Sql/Server/DataWarehouse"),
					Properties: &armstreamanalytics.AzureSynapseOutputDataSourceProperties{
						Database: to.Ptr("zhayaSQLpool"),
						Server:   to.Ptr("asatestserver"),
						Table:    to.Ptr("test2"),
						User:     to.Ptr("tolladmin"),
					},
				},
				Etag: to.Ptr("ce3fb956-0487-4168-af20-1133a59bdc6e"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Output) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Output)
			t.Fatalf("Mock response is not equal to example response for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Output_Get_DataWarehouse.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Output_Get_AzureSQL.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get an Azure SQL database output"},
	})
	client = armstreamanalytics.NewOutputsClient("56b5e0a9-b645-407d-99b0-c64f86013e3d", cred, &options)
	res, err = client.Get(ctx,
		"sjrg2157",
		"sj6458",
		"output1755",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Output_Get_AzureSQL.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstreamanalytics.Output{
			Name: to.Ptr("output1755"),
			Type: to.Ptr("Microsoft.StreamAnalytics/streamingjobs/outputs"),
			ID:   to.Ptr("/subscriptions/56b5e0a9-b645-407d-99b0-c64f86013e3d/resourceGroups/sjrg2157/providers/Microsoft.StreamAnalytics/streamingjobs/sj6458/outputs/output1755"),
			Properties: &armstreamanalytics.OutputProperties{
				Datasource: &armstreamanalytics.AzureSQLDatabaseOutputDataSource{
					Type: to.Ptr("Microsoft.Sql/Server/Database"),
					Properties: &armstreamanalytics.AzureSQLDatabaseOutputDataSourceProperties{
						Database: to.Ptr("someDatabase"),
						Server:   to.Ptr("someServer"),
						Table:    to.Ptr("someTable"),
						User:     to.Ptr("someUser"),
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Output) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Output)
			t.Fatalf("Mock response is not equal to example response for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Output_Get_AzureSQL.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Output_Get_AzureTable.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get an Azure Table output"},
	})
	client = armstreamanalytics.NewOutputsClient("56b5e0a9-b645-407d-99b0-c64f86013e3d", cred, &options)
	res, err = client.Get(ctx,
		"sjrg5176",
		"sj2790",
		"output958",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Output_Get_AzureTable.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstreamanalytics.Output{
			Name: to.Ptr("output958"),
			Type: to.Ptr("Microsoft.StreamAnalytics/streamingjobs/outputs"),
			ID:   to.Ptr("/subscriptions/56b5e0a9-b645-407d-99b0-c64f86013e3d/resourceGroups/sjrg5176/providers/Microsoft.StreamAnalytics/streamingjobs/sj2790/outputs/output958"),
			Properties: &armstreamanalytics.OutputProperties{
				Datasource: &armstreamanalytics.AzureTableOutputDataSource{
					Type: to.Ptr("Microsoft.Storage/Table"),
					Properties: &armstreamanalytics.AzureTableOutputDataSourceProperties{
						AccountName: to.Ptr("someAccountName"),
						BatchSize:   to.Ptr[int32](25),
						ColumnsToRemove: []*string{
							to.Ptr("column1"),
							to.Ptr("column2")},
						PartitionKey: to.Ptr("partitionKey"),
						RowKey:       to.Ptr("rowKey"),
						Table:        to.Ptr("samples"),
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Output) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Output)
			t.Fatalf("Mock response is not equal to example response for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Output_Get_AzureTable.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Output_Get_EventHub_JSON.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get an Event Hub output with JSON serialization"},
	})
	client = armstreamanalytics.NewOutputsClient("56b5e0a9-b645-407d-99b0-c64f86013e3d", cred, &options)
	res, err = client.Get(ctx,
		"sjrg6912",
		"sj3310",
		"output5195",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Output_Get_EventHub_JSON.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstreamanalytics.Output{
			Name: to.Ptr("output5195"),
			Type: to.Ptr("Microsoft.StreamAnalytics/streamingjobs/outputs"),
			ID:   to.Ptr("/subscriptions/56b5e0a9-b645-407d-99b0-c64f86013e3d/resourceGroups/sjrg6912/providers/Microsoft.StreamAnalytics/streamingjobs/sj3310/outputs/output5195"),
			Properties: &armstreamanalytics.OutputProperties{
				Datasource: &armstreamanalytics.EventHubOutputDataSource{
					Type: to.Ptr("Microsoft.ServiceBus/EventHub"),
					Properties: &armstreamanalytics.EventHubOutputDataSourceProperties{
						ServiceBusNamespace:    to.Ptr("sdktest"),
						SharedAccessPolicyName: to.Ptr("RootManageSharedAccessKey"),
						EventHubName:           to.Ptr("sdkeventhub"),
						PartitionKey:           to.Ptr("partitionKey"),
					},
				},
				Serialization: &armstreamanalytics.JSONSerialization{
					Type: to.Ptr(armstreamanalytics.EventSerializationTypeJSON),
					Properties: &armstreamanalytics.JSONSerializationProperties{
						Format:   to.Ptr(armstreamanalytics.JSONOutputSerializationFormatArray),
						Encoding: to.Ptr(armstreamanalytics.EncodingUTF8),
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Output) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Output)
			t.Fatalf("Mock response is not equal to example response for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Output_Get_EventHub_JSON.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOutputs_ListByStreamingJob(t *testing.T) {
	// From example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Output_ListByStreamingJob.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all outputs in a streaming job"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstreamanalytics.NewOutputsClient("56b5e0a9-b645-407d-99b0-c64f86013e3d", cred, &options)
	pager := client.ListByStreamingJob("sjrg2157",
		"sj6458",
		&armstreamanalytics.OutputsClientListByStreamingJobOptions{Select: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Output_ListByStreamingJob.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armstreamanalytics.OutputListResult{
			Value: []*armstreamanalytics.Output{
				{
					Name: to.Ptr("output1755"),
					Type: to.Ptr("Microsoft.StreamAnalytics/streamingjobs/outputs"),
					ID:   to.Ptr("/subscriptions/56b5e0a9-b645-407d-99b0-c64f86013e3d/resourceGroups/sjrg2157/providers/Microsoft.StreamAnalytics/streamingjobs/sj6458/outputs/output1755"),
					Properties: &armstreamanalytics.OutputProperties{
						Datasource: &armstreamanalytics.AzureSQLDatabaseOutputDataSource{
							Type: to.Ptr("Microsoft.Sql/Server/Database"),
							Properties: &armstreamanalytics.AzureSQLDatabaseOutputDataSourceProperties{
								Database: to.Ptr("someDatabase"),
								Server:   to.Ptr("someServer"),
								Table:    to.Ptr("differentTable"),
								User:     to.Ptr("someUser"),
							},
						},
						Etag: to.Ptr("f489d6f3-fcd5-4bcb-b642-81e987ee16d6"),
					},
				},
				{
					Name: to.Ptr("output958"),
					Type: to.Ptr("Microsoft.StreamAnalytics/streamingjobs/outputs"),
					ID:   to.Ptr("/subscriptions/56b5e0a9-b645-407d-99b0-c64f86013e3d/resourceGroups/sjrg2157/providers/Microsoft.StreamAnalytics/streamingjobs/sj6458/outputs/output958"),
					Properties: &armstreamanalytics.OutputProperties{
						Datasource: &armstreamanalytics.AzureTableOutputDataSource{
							Type: to.Ptr("Microsoft.Storage/Table"),
							Properties: &armstreamanalytics.AzureTableOutputDataSourceProperties{
								AccountName: to.Ptr("someAccountName"),
								BatchSize:   to.Ptr[int32](25),
								ColumnsToRemove: []*string{
									to.Ptr("column1"),
									to.Ptr("column2")},
								PartitionKey: to.Ptr("differentPartitionKey"),
								RowKey:       to.Ptr("rowKey"),
								Table:        to.Ptr("samples"),
							},
						},
						Etag: to.Ptr("ea1d20bf-6cb3-40bc-bc7b-ec3a7fd5977e"),
					},
				},
				{
					Name: to.Ptr("output1623"),
					Type: to.Ptr("Microsoft.StreamAnalytics/streamingjobs/outputs"),
					ID:   to.Ptr("/subscriptions/56b5e0a9-b645-407d-99b0-c64f86013e3d/resourceGroups/sjrg2157/providers/Microsoft.StreamAnalytics/streamingjobs/sj6458/outputs/output1623"),
					Properties: &armstreamanalytics.OutputProperties{
						Datasource: &armstreamanalytics.BlobOutputDataSource{
							Type: to.Ptr("Microsoft.Storage/Blob"),
							Properties: &armstreamanalytics.BlobOutputDataSourceProperties{
								Container:   to.Ptr("differentContainer"),
								DateFormat:  to.Ptr("yyyy/MM/dd"),
								PathPattern: to.Ptr("{date}/{time}"),
								StorageAccounts: []*armstreamanalytics.StorageAccount{
									{
										AccountName: to.Ptr("someAccountName"),
									}},
								TimeFormat: to.Ptr("HH"),
							},
						},
						Etag: to.Ptr("3a1b2023-79a9-4b33-93e8-f49fc3e573fe"),
						Serialization: &armstreamanalytics.CSVSerialization{
							Type: to.Ptr(armstreamanalytics.EventSerializationTypeCSV),
							Properties: &armstreamanalytics.CSVSerializationProperties{
								Encoding:       to.Ptr(armstreamanalytics.EncodingUTF8),
								FieldDelimiter: to.Ptr("|"),
							},
						},
					},
				},
				{
					Name: to.Ptr("output3022"),
					Type: to.Ptr("Microsoft.StreamAnalytics/streamingjobs/outputs"),
					ID:   to.Ptr("/subscriptions/56b5e0a9-b645-407d-99b0-c64f86013e3d/resourceGroups/sjrg2157/providers/Microsoft.StreamAnalytics/streamingjobs/sj6458/outputs/output3022"),
					Properties: &armstreamanalytics.OutputProperties{
						Datasource: &armstreamanalytics.DocumentDbOutputDataSource{
							Type: to.Ptr("Microsoft.Storage/DocumentDB"),
							Properties: &armstreamanalytics.DocumentDbOutputDataSourceProperties{
								AccountID:             to.Ptr("someAccountId"),
								CollectionNamePattern: to.Ptr("collection"),
								Database:              to.Ptr("db01"),
								DocumentID:            to.Ptr("documentId"),
								PartitionKey:          to.Ptr("differentPartitionKey"),
							},
						},
						Etag: to.Ptr("7849c132-e995-4631-91c3-931606eec432"),
					},
				},
				{
					Name: to.Ptr("output5195"),
					Type: to.Ptr("Microsoft.StreamAnalytics/streamingjobs/outputs"),
					ID:   to.Ptr("/subscriptions/56b5e0a9-b645-407d-99b0-c64f86013e3d/resourceGroups/sjrg2157/providers/Microsoft.StreamAnalytics/streamingjobs/sj6458/outputs/output5195"),
					Properties: &armstreamanalytics.OutputProperties{
						Datasource: &armstreamanalytics.EventHubOutputDataSource{
							Type: to.Ptr("Microsoft.ServiceBus/EventHub"),
							Properties: &armstreamanalytics.EventHubOutputDataSourceProperties{
								ServiceBusNamespace:    to.Ptr("sdktest"),
								SharedAccessPolicyName: to.Ptr("RootManageSharedAccessKey"),
								EventHubName:           to.Ptr("sdkeventhub"),
								PartitionKey:           to.Ptr("differentPartitionKey"),
							},
						},
						Etag: to.Ptr("5020de6b-5bb3-4b88-8606-f11fb3c46185"),
						Serialization: &armstreamanalytics.JSONSerialization{
							Type: to.Ptr(armstreamanalytics.EventSerializationTypeJSON),
							Properties: &armstreamanalytics.JSONSerializationProperties{
								Format:   to.Ptr(armstreamanalytics.JSONOutputSerializationFormatLineSeparated),
								Encoding: to.Ptr(armstreamanalytics.EncodingUTF8),
							},
						},
					},
				},
				{
					Name: to.Ptr("output3456"),
					Type: to.Ptr("Microsoft.StreamAnalytics/streamingjobs/outputs"),
					ID:   to.Ptr("/subscriptions/56b5e0a9-b645-407d-99b0-c64f86013e3d/resourceGroups/sjrg2157/providers/Microsoft.StreamAnalytics/streamingjobs/sj6458/outputs/output3456"),
					Properties: &armstreamanalytics.OutputProperties{
						Datasource: &armstreamanalytics.ServiceBusQueueOutputDataSource{
							Type: to.Ptr("Microsoft.ServiceBus/Queue"),
							Properties: &armstreamanalytics.ServiceBusQueueOutputDataSourceProperties{
								ServiceBusNamespace:    to.Ptr("sdktest"),
								SharedAccessPolicyName: to.Ptr("RootManageSharedAccessKey"),
								PropertyColumns: []*string{
									to.Ptr("column1"),
									to.Ptr("column2")},
								QueueName: to.Ptr("differentQueueName"),
							},
						},
						Etag: to.Ptr("429adaec-a777-4750-8a39-8d0c931d801c"),
						Serialization: &armstreamanalytics.JSONSerialization{
							Type: to.Ptr(armstreamanalytics.EventSerializationTypeJSON),
							Properties: &armstreamanalytics.JSONSerializationProperties{
								Format:   to.Ptr(armstreamanalytics.JSONOutputSerializationFormatLineSeparated),
								Encoding: to.Ptr(armstreamanalytics.EncodingUTF8),
							},
						},
					},
				},
				{
					Name: to.Ptr("output7886"),
					Type: to.Ptr("Microsoft.StreamAnalytics/streamingjobs/outputs"),
					ID:   to.Ptr("/subscriptions/56b5e0a9-b645-407d-99b0-c64f86013e3d/resourceGroups/sjrg2157/providers/Microsoft.StreamAnalytics/streamingjobs/sj6458/outputs/output7886"),
					Properties: &armstreamanalytics.OutputProperties{
						Datasource: &armstreamanalytics.ServiceBusTopicOutputDataSource{
							Type: to.Ptr("Microsoft.ServiceBus/Topic"),
							Properties: &armstreamanalytics.ServiceBusTopicOutputDataSourceProperties{
								ServiceBusNamespace:    to.Ptr("sdktest"),
								SharedAccessPolicyName: to.Ptr("RootManageSharedAccessKey"),
								PropertyColumns: []*string{
									to.Ptr("column1"),
									to.Ptr("column2")},
								TopicName: to.Ptr("differentTopicName"),
							},
						},
						Etag: to.Ptr("c1c2007f-45b2-419a-ae7d-4d2148998460"),
						Serialization: &armstreamanalytics.CSVSerialization{
							Type: to.Ptr(armstreamanalytics.EventSerializationTypeCSV),
							Properties: &armstreamanalytics.CSVSerializationProperties{
								Encoding:       to.Ptr(armstreamanalytics.EncodingUTF8),
								FieldDelimiter: to.Ptr("|"),
							},
						},
					},
				},
				{
					Name: to.Ptr("output3021"),
					Type: to.Ptr("Microsoft.StreamAnalytics/streamingjobs/outputs"),
					ID:   to.Ptr("/subscriptions/56b5e0a9-b645-407d-99b0-c64f86013e3d/resourceGroups/sjrg2157/providers/Microsoft.StreamAnalytics/streamingjobs/sj6458/outputs/output3021"),
					Properties: &armstreamanalytics.OutputProperties{
						Datasource: &armstreamanalytics.PowerBIOutputDataSource{
							Type: to.Ptr("PowerBI"),
							Properties: &armstreamanalytics.PowerBIOutputDataSourceProperties{
								TokenUserDisplayName:   to.Ptr("Bob Smith"),
								TokenUserPrincipalName: to.Ptr("bobsmith@contoso.com"),
								Dataset:                to.Ptr("differentDataset"),
								GroupID:                to.Ptr("ac40305e-3e8d-43ac-8161-c33799f43e95"),
								GroupName:              to.Ptr("MyPowerBIGroup"),
								Table:                  to.Ptr("someTable"),
							},
						},
						Etag: to.Ptr("4a492191-9672-4178-be10-043b9dbd4b9f"),
					},
				},
				{
					Name: to.Ptr("output5196"),
					Type: to.Ptr("Microsoft.StreamAnalytics/streamingjobs/outputs"),
					ID:   to.Ptr("/subscriptions/56b5e0a9-b645-407d-99b0-c64f86013e3d/resourceGroups/sjrg2157/providers/Microsoft.StreamAnalytics/streamingjobs/sj6458/outputs/output5196"),
					Properties: &armstreamanalytics.OutputProperties{
						Datasource: &armstreamanalytics.AzureDataLakeStoreOutputDataSource{
							Type: to.Ptr("Microsoft.DataLake/Accounts"),
							Properties: &armstreamanalytics.AzureDataLakeStoreOutputDataSourceProperties{
								TokenUserDisplayName:   to.Ptr("Bob Smith"),
								TokenUserPrincipalName: to.Ptr("bobsmith@contoso.com"),
								AccountName:            to.Ptr("differentaccount"),
								DateFormat:             to.Ptr("yyyy/MM/dd"),
								FilePathPrefix:         to.Ptr("{date}/{time}"),
								TenantID:               to.Ptr("cea4e98b-c798-49e7-8c40-4a2b3beb47dd"),
								TimeFormat:             to.Ptr("HH"),
							},
						},
						Etag: to.Ptr("39ab7642-8c1e-48ed-85eb-949068d68002"),
						Serialization: &armstreamanalytics.JSONSerialization{
							Type: to.Ptr(armstreamanalytics.EventSerializationTypeJSON),
							Properties: &armstreamanalytics.JSONSerializationProperties{
								Format:   to.Ptr(armstreamanalytics.JSONOutputSerializationFormatLineSeparated),
								Encoding: to.Ptr(armstreamanalytics.EncodingUTF8),
							},
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OutputListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OutputListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Output_ListByStreamingJob.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOutputs_Test(t *testing.T) {
	// From example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Output_Test.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Test the connection for an output"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstreamanalytics.NewOutputsClient("56b5e0a9-b645-407d-99b0-c64f86013e3d", cred, &options)
	poller, err := client.BeginTest(ctx,
		"sjrg2157",
		"sj6458",
		"output1755",
		&armstreamanalytics.OutputsClientBeginTestOptions{Output: nil,
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Output_Test.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Output_Test.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstreamanalytics.ResourceTestStatus{
			Status: to.Ptr("TestSucceeded"),
		}
		if !reflect.DeepEqual(exampleRes, res.ResourceTestStatus) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ResourceTestStatus)
			t.Fatalf("Mock response is not equal to example response for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Output_Test.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTransformations_CreateOrReplace(t *testing.T) {
	// From example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Transformation_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a transformation"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstreamanalytics.NewTransformationsClient("56b5e0a9-b645-407d-99b0-c64f86013e3d", cred, &options)
	res, err := client.CreateOrReplace(ctx,
		"sjrg4423",
		"sj8374",
		"transformation952",
		armstreamanalytics.Transformation{
			Properties: &armstreamanalytics.TransformationProperties{
				Query:          to.Ptr("Select Id, Name from inputtest"),
				StreamingUnits: to.Ptr[int32](6),
			},
		},
		&armstreamanalytics.TransformationsClientCreateOrReplaceOptions{IfMatch: nil,
			IfNoneMatch: nil,
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Transformation_Create.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstreamanalytics.Transformation{
			Name: to.Ptr("transformation952"),
			Type: to.Ptr("Microsoft.StreamAnalytics/streamingjobs/transformations"),
			ID:   to.Ptr("/subscriptions/56b5e0a9-b645-407d-99b0-c64f86013e3d/resourceGroups/sjrg4423/providers/Microsoft.StreamAnalytics/streamingjobs/sj8374/transformations/transformation952"),
			Properties: &armstreamanalytics.TransformationProperties{
				Query:          to.Ptr("Select Id, Name from inputtest"),
				StreamingUnits: to.Ptr[int32](6),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Transformation) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Transformation)
			t.Fatalf("Mock response is not equal to example response for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Transformation_Create.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTransformations_Update(t *testing.T) {
	// From example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Transformation_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a transformation"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstreamanalytics.NewTransformationsClient("56b5e0a9-b645-407d-99b0-c64f86013e3d", cred, &options)
	res, err := client.Update(ctx,
		"sjrg4423",
		"sj8374",
		"transformation952",
		armstreamanalytics.Transformation{
			Properties: &armstreamanalytics.TransformationProperties{
				Query: to.Ptr("New query"),
			},
		},
		&armstreamanalytics.TransformationsClientUpdateOptions{IfMatch: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Transformation_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstreamanalytics.Transformation{
			Name: to.Ptr("transformation952"),
			Type: to.Ptr("Microsoft.StreamAnalytics/streamingjobs/transformations"),
			ID:   to.Ptr("/subscriptions/56b5e0a9-b645-407d-99b0-c64f86013e3d/resourceGroups/sjrg4423/providers/Microsoft.StreamAnalytics/streamingjobs/sj8374/transformations/transformation952"),
			Properties: &armstreamanalytics.TransformationProperties{
				Query:          to.Ptr("New query"),
				StreamingUnits: to.Ptr[int32](6),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Transformation) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Transformation)
			t.Fatalf("Mock response is not equal to example response for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Transformation_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTransformations_Get(t *testing.T) {
	// From example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Transformation_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a transformation"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstreamanalytics.NewTransformationsClient("56b5e0a9-b645-407d-99b0-c64f86013e3d", cred, &options)
	res, err := client.Get(ctx,
		"sjrg4423",
		"sj8374",
		"transformation952",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Transformation_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstreamanalytics.Transformation{
			Name: to.Ptr("transformation952"),
			Type: to.Ptr("Microsoft.StreamAnalytics/streamingjobs/transformations"),
			ID:   to.Ptr("/subscriptions/56b5e0a9-b645-407d-99b0-c64f86013e3d/resourceGroups/sjrg4423/providers/Microsoft.StreamAnalytics/streamingjobs/sj8374/transformations/transformation952"),
			Properties: &armstreamanalytics.TransformationProperties{
				Query:          to.Ptr("Select Id, Name from inputtest"),
				StreamingUnits: to.Ptr[int32](6),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Transformation) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Transformation)
			t.Fatalf("Mock response is not equal to example response for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Transformation_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestFunctions_CreateOrReplace(t *testing.T) {
	// From example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Function_Create_JavaScript.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a JavaScript function"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstreamanalytics.NewFunctionsClient("56b5e0a9-b645-407d-99b0-c64f86013e3d", cred, &options)
	res, err := client.CreateOrReplace(ctx,
		"sjrg1637",
		"sj8653",
		"function8197",
		armstreamanalytics.Function{
			Properties: &armstreamanalytics.ScalarFunctionProperties{
				Type: to.Ptr("Scalar"),
				Properties: &armstreamanalytics.ScalarFunctionConfiguration{
					Binding: &armstreamanalytics.JavaScriptFunctionBinding{
						Type: to.Ptr("Microsoft.StreamAnalytics/JavascriptUdf"),
						Properties: &armstreamanalytics.JavaScriptFunctionBindingProperties{
							Script: to.Ptr("function (x, y) { return x + y; }"),
						},
					},
					Inputs: []*armstreamanalytics.FunctionInput{
						{
							DataType: to.Ptr("Any"),
						}},
					Output: &armstreamanalytics.FunctionOutput{
						DataType: to.Ptr("Any"),
					},
				},
			},
		},
		&armstreamanalytics.FunctionsClientCreateOrReplaceOptions{IfMatch: nil,
			IfNoneMatch: nil,
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Function_Create_JavaScript.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstreamanalytics.Function{
			Name: to.Ptr("function8197"),
			Type: to.Ptr("Microsoft.StreamAnalytics/streamingjobs/functions"),
			ID:   to.Ptr("/subscriptions/56b5e0a9-b645-407d-99b0-c64f86013e3d/resourceGroups/sjrg1637/providers/Microsoft.StreamAnalytics/streamingjobs/sj8653/functions/function8197"),
			Properties: &armstreamanalytics.ScalarFunctionProperties{
				Type: to.Ptr("Scalar"),
				Properties: &armstreamanalytics.ScalarFunctionConfiguration{
					Binding: &armstreamanalytics.JavaScriptFunctionBinding{
						Type: to.Ptr("Microsoft.StreamAnalytics/JavascriptUdf"),
						Properties: &armstreamanalytics.JavaScriptFunctionBindingProperties{
							Script: to.Ptr("function (x, y) { return x + y; }"),
						},
					},
					Inputs: []*armstreamanalytics.FunctionInput{
						{
							DataType: to.Ptr("Any"),
						}},
					Output: &armstreamanalytics.FunctionOutput{
						DataType: to.Ptr("Any"),
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Function) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Function)
			t.Fatalf("Mock response is not equal to example response for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Function_Create_JavaScript.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Function_Create_AzureML.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create an Azure ML function"},
	})
	client = armstreamanalytics.NewFunctionsClient("56b5e0a9-b645-407d-99b0-c64f86013e3d", cred, &options)
	res, err = client.CreateOrReplace(ctx,
		"sjrg7",
		"sj9093",
		"function588",
		armstreamanalytics.Function{
			Properties: &armstreamanalytics.ScalarFunctionProperties{
				Type: to.Ptr("Scalar"),
				Properties: &armstreamanalytics.ScalarFunctionConfiguration{
					Binding: &armstreamanalytics.AzureMachineLearningWebServiceFunctionBinding{
						Type: to.Ptr("Microsoft.MachineLearning/WebService"),
						Properties: &armstreamanalytics.AzureMachineLearningWebServiceFunctionBindingProperties{
							APIKey:    to.Ptr("someApiKey=="),
							BatchSize: to.Ptr[int32](1000),
							Endpoint:  to.Ptr("someAzureMLEndpointURL"),
							Inputs: &armstreamanalytics.AzureMachineLearningWebServiceInputs{
								Name: to.Ptr("input1"),
								ColumnNames: []*armstreamanalytics.AzureMachineLearningWebServiceInputColumn{
									{
										Name:     to.Ptr("tweet"),
										DataType: to.Ptr("string"),
										MapTo:    to.Ptr[int32](0),
									}},
							},
							Outputs: []*armstreamanalytics.AzureMachineLearningWebServiceOutputColumn{
								{
									Name:     to.Ptr("Sentiment"),
									DataType: to.Ptr("string"),
								}},
						},
					},
					Inputs: []*armstreamanalytics.FunctionInput{
						{
							DataType: to.Ptr("nvarchar(max)"),
						}},
					Output: &armstreamanalytics.FunctionOutput{
						DataType: to.Ptr("nvarchar(max)"),
					},
				},
			},
		},
		&armstreamanalytics.FunctionsClientCreateOrReplaceOptions{IfMatch: nil,
			IfNoneMatch: nil,
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Function_Create_AzureML.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstreamanalytics.Function{
			Name: to.Ptr("function588"),
			Type: to.Ptr("Microsoft.StreamAnalytics/streamingjobs/functions"),
			ID:   to.Ptr("/subscriptions/56b5e0a9-b645-407d-99b0-c64f86013e3d/resourceGroups/sjrg7/providers/Microsoft.StreamAnalytics/streamingjobs/sj9093/functions/function588"),
			Properties: &armstreamanalytics.ScalarFunctionProperties{
				Type: to.Ptr("Scalar"),
				Properties: &armstreamanalytics.ScalarFunctionConfiguration{
					Binding: &armstreamanalytics.AzureMachineLearningWebServiceFunctionBinding{
						Type: to.Ptr("Microsoft.MachineLearning/WebService"),
						Properties: &armstreamanalytics.AzureMachineLearningWebServiceFunctionBindingProperties{
							BatchSize: to.Ptr[int32](1000),
							Endpoint:  to.Ptr("someAzureMLEndpointURL"),
							Inputs: &armstreamanalytics.AzureMachineLearningWebServiceInputs{
								Name: to.Ptr("input1"),
								ColumnNames: []*armstreamanalytics.AzureMachineLearningWebServiceInputColumn{
									{
										Name:     to.Ptr("tweet"),
										DataType: to.Ptr("string"),
										MapTo:    to.Ptr[int32](0),
									}},
							},
							Outputs: []*armstreamanalytics.AzureMachineLearningWebServiceOutputColumn{
								{
									Name:     to.Ptr("Sentiment"),
									DataType: to.Ptr("string"),
								}},
						},
					},
					Inputs: []*armstreamanalytics.FunctionInput{
						{
							DataType: to.Ptr("nvarchar(max)"),
						}},
					Output: &armstreamanalytics.FunctionOutput{
						DataType: to.Ptr("nvarchar(max)"),
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Function) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Function)
			t.Fatalf("Mock response is not equal to example response for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Function_Create_AzureML.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestFunctions_Update(t *testing.T) {
	// From example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Function_Update_JavaScript.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a JavaScript function"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstreamanalytics.NewFunctionsClient("56b5e0a9-b645-407d-99b0-c64f86013e3d", cred, &options)
	res, err := client.Update(ctx,
		"sjrg1637",
		"sj8653",
		"function8197",
		armstreamanalytics.Function{
			Properties: &armstreamanalytics.ScalarFunctionProperties{
				Type: to.Ptr("Scalar"),
				Properties: &armstreamanalytics.ScalarFunctionConfiguration{
					Binding: &armstreamanalytics.JavaScriptFunctionBinding{
						Type: to.Ptr("Microsoft.StreamAnalytics/JavascriptUdf"),
						Properties: &armstreamanalytics.JavaScriptFunctionBindingProperties{
							Script: to.Ptr("function (a, b) { return a * b; }"),
						},
					},
				},
			},
		},
		&armstreamanalytics.FunctionsClientUpdateOptions{IfMatch: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Function_Update_JavaScript.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstreamanalytics.Function{
			Name: to.Ptr("function8197"),
			Type: to.Ptr("Microsoft.StreamAnalytics/streamingjobs/functions"),
			ID:   to.Ptr("/subscriptions/56b5e0a9-b645-407d-99b0-c64f86013e3d/resourceGroups/sjrg1637/providers/Microsoft.StreamAnalytics/streamingjobs/sj8653/functions/function8197"),
			Properties: &armstreamanalytics.ScalarFunctionProperties{
				Type: to.Ptr("Scalar"),
				Properties: &armstreamanalytics.ScalarFunctionConfiguration{
					Binding: &armstreamanalytics.JavaScriptFunctionBinding{
						Type: to.Ptr("Microsoft.StreamAnalytics/JavascriptUdf"),
						Properties: &armstreamanalytics.JavaScriptFunctionBindingProperties{
							Script: to.Ptr("function (a, b) { return a * b; }"),
						},
					},
					Inputs: []*armstreamanalytics.FunctionInput{
						{
							DataType: to.Ptr("Any"),
						}},
					Output: &armstreamanalytics.FunctionOutput{
						DataType: to.Ptr("Any"),
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Function) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Function)
			t.Fatalf("Mock response is not equal to example response for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Function_Update_JavaScript.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Function_Update_AzureML.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update an Azure ML function"},
	})
	client = armstreamanalytics.NewFunctionsClient("56b5e0a9-b645-407d-99b0-c64f86013e3d", cred, &options)
	res, err = client.Update(ctx,
		"sjrg7",
		"sj9093",
		"function588",
		armstreamanalytics.Function{
			Properties: &armstreamanalytics.ScalarFunctionProperties{
				Type: to.Ptr("Scalar"),
				Properties: &armstreamanalytics.ScalarFunctionConfiguration{
					Binding: &armstreamanalytics.AzureMachineLearningWebServiceFunctionBinding{
						Type: to.Ptr("Microsoft.MachineLearning/WebService"),
						Properties: &armstreamanalytics.AzureMachineLearningWebServiceFunctionBindingProperties{
							BatchSize: to.Ptr[int32](5000),
						},
					},
				},
			},
		},
		&armstreamanalytics.FunctionsClientUpdateOptions{IfMatch: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Function_Update_AzureML.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstreamanalytics.Function{
			Name: to.Ptr("function588"),
			Type: to.Ptr("Microsoft.StreamAnalytics/streamingjobs/functions"),
			ID:   to.Ptr("/subscriptions/56b5e0a9-b645-407d-99b0-c64f86013e3d/resourceGroups/sjrg7/providers/Microsoft.StreamAnalytics/streamingjobs/sj9093/functions/function588"),
			Properties: &armstreamanalytics.ScalarFunctionProperties{
				Type: to.Ptr("Scalar"),
				Properties: &armstreamanalytics.ScalarFunctionConfiguration{
					Binding: &armstreamanalytics.AzureMachineLearningWebServiceFunctionBinding{
						Type: to.Ptr("Microsoft.MachineLearning/WebService"),
						Properties: &armstreamanalytics.AzureMachineLearningWebServiceFunctionBindingProperties{
							BatchSize: to.Ptr[int32](5000),
							Endpoint:  to.Ptr("someAzureMLEndpointURL"),
							Inputs: &armstreamanalytics.AzureMachineLearningWebServiceInputs{
								Name: to.Ptr("input1"),
								ColumnNames: []*armstreamanalytics.AzureMachineLearningWebServiceInputColumn{
									{
										Name:     to.Ptr("tweet"),
										DataType: to.Ptr("string"),
										MapTo:    to.Ptr[int32](0),
									}},
							},
							Outputs: []*armstreamanalytics.AzureMachineLearningWebServiceOutputColumn{
								{
									Name:     to.Ptr("Sentiment"),
									DataType: to.Ptr("string"),
								}},
						},
					},
					Inputs: []*armstreamanalytics.FunctionInput{
						{
							DataType: to.Ptr("nvarchar(max)"),
						}},
					Output: &armstreamanalytics.FunctionOutput{
						DataType: to.Ptr("nvarchar(max)"),
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Function) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Function)
			t.Fatalf("Mock response is not equal to example response for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Function_Update_AzureML.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestFunctions_Delete(t *testing.T) {
	// From example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Function_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a function"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstreamanalytics.NewFunctionsClient("56b5e0a9-b645-407d-99b0-c64f86013e3d", cred, &options)
	_, err := client.Delete(ctx,
		"sjrg1637",
		"sj8653",
		"function8197",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Function_Delete.json: %v", err)
	}
}

func TestFunctions_Get(t *testing.T) {
	// From example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Function_Get_JavaScript.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a JavaScript function"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstreamanalytics.NewFunctionsClient("56b5e0a9-b645-407d-99b0-c64f86013e3d", cred, &options)
	res, err := client.Get(ctx,
		"sjrg1637",
		"sj8653",
		"function8197",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Function_Get_JavaScript.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstreamanalytics.Function{
			Name: to.Ptr("function8197"),
			Type: to.Ptr("Microsoft.StreamAnalytics/streamingjobs/functions"),
			ID:   to.Ptr("/subscriptions/56b5e0a9-b645-407d-99b0-c64f86013e3d/resourceGroups/sjrg1637/providers/Microsoft.StreamAnalytics/streamingjobs/sj8653/functions/function8197"),
			Properties: &armstreamanalytics.ScalarFunctionProperties{
				Type: to.Ptr("Scalar"),
				Properties: &armstreamanalytics.ScalarFunctionConfiguration{
					Binding: &armstreamanalytics.JavaScriptFunctionBinding{
						Type: to.Ptr("Microsoft.StreamAnalytics/JavascriptUdf"),
						Properties: &armstreamanalytics.JavaScriptFunctionBindingProperties{
							Script: to.Ptr("function (x, y) { return x + y; }"),
						},
					},
					Inputs: []*armstreamanalytics.FunctionInput{
						{
							DataType: to.Ptr("Any"),
						}},
					Output: &armstreamanalytics.FunctionOutput{
						DataType: to.Ptr("Any"),
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Function) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Function)
			t.Fatalf("Mock response is not equal to example response for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Function_Get_JavaScript.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Function_Get_AzureML.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get an Azure ML function"},
	})
	client = armstreamanalytics.NewFunctionsClient("56b5e0a9-b645-407d-99b0-c64f86013e3d", cred, &options)
	res, err = client.Get(ctx,
		"sjrg7",
		"sj9093",
		"function588",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Function_Get_AzureML.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstreamanalytics.Function{
			Name: to.Ptr("function588"),
			Type: to.Ptr("Microsoft.StreamAnalytics/streamingjobs/functions"),
			ID:   to.Ptr("/subscriptions/56b5e0a9-b645-407d-99b0-c64f86013e3d/resourceGroups/sjrg7/providers/Microsoft.StreamAnalytics/streamingjobs/sj9093/functions/function588"),
			Properties: &armstreamanalytics.ScalarFunctionProperties{
				Type: to.Ptr("Scalar"),
				Properties: &armstreamanalytics.ScalarFunctionConfiguration{
					Binding: &armstreamanalytics.AzureMachineLearningWebServiceFunctionBinding{
						Type: to.Ptr("Microsoft.MachineLearning/WebService"),
						Properties: &armstreamanalytics.AzureMachineLearningWebServiceFunctionBindingProperties{
							BatchSize: to.Ptr[int32](1000),
							Endpoint:  to.Ptr("someAzureMLEndpointURL"),
							Inputs: &armstreamanalytics.AzureMachineLearningWebServiceInputs{
								Name: to.Ptr("input1"),
								ColumnNames: []*armstreamanalytics.AzureMachineLearningWebServiceInputColumn{
									{
										Name:     to.Ptr("tweet"),
										DataType: to.Ptr("string"),
										MapTo:    to.Ptr[int32](0),
									}},
							},
							Outputs: []*armstreamanalytics.AzureMachineLearningWebServiceOutputColumn{
								{
									Name:     to.Ptr("Sentiment"),
									DataType: to.Ptr("string"),
								}},
						},
					},
					Inputs: []*armstreamanalytics.FunctionInput{
						{
							DataType: to.Ptr("nvarchar(max)"),
						}},
					Output: &armstreamanalytics.FunctionOutput{
						DataType: to.Ptr("nvarchar(max)"),
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Function) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Function)
			t.Fatalf("Mock response is not equal to example response for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Function_Get_AzureML.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestFunctions_ListByStreamingJob(t *testing.T) {
	// From example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Function_ListByStreamingJob.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all functions in a streaming job"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstreamanalytics.NewFunctionsClient("56b5e0a9-b645-407d-99b0-c64f86013e3d", cred, &options)
	pager := client.ListByStreamingJob("sjrg1637",
		"sj8653",
		&armstreamanalytics.FunctionsClientListByStreamingJobOptions{Select: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Function_ListByStreamingJob.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armstreamanalytics.FunctionListResult{
			Value: []*armstreamanalytics.Function{
				{
					Name: to.Ptr("function588"),
					Type: to.Ptr("Microsoft.StreamAnalytics/streamingjobs/functions"),
					ID:   to.Ptr("/subscriptions/56b5e0a9-b645-407d-99b0-c64f86013e3d/resourceGroups/sjrg1637/providers/Microsoft.StreamAnalytics/streamingjobs/sj8653/functions/function588"),
					Properties: &armstreamanalytics.ScalarFunctionProperties{
						Type: to.Ptr("Scalar"),
						Etag: to.Ptr("281cbf11-cd50-4a44-b833-cf170ce74748"),
						Properties: &armstreamanalytics.ScalarFunctionConfiguration{
							Binding: &armstreamanalytics.AzureMachineLearningWebServiceFunctionBinding{
								Type: to.Ptr("Microsoft.MachineLearning/WebService"),
								Properties: &armstreamanalytics.AzureMachineLearningWebServiceFunctionBindingProperties{
									BatchSize: to.Ptr[int32](5000),
									Endpoint:  to.Ptr("someAzureMLEndpointURL"),
									Inputs: &armstreamanalytics.AzureMachineLearningWebServiceInputs{
										Name: to.Ptr("input1"),
										ColumnNames: []*armstreamanalytics.AzureMachineLearningWebServiceInputColumn{
											{
												Name:     to.Ptr("tweet"),
												DataType: to.Ptr("string"),
												MapTo:    to.Ptr[int32](0),
											}},
									},
									Outputs: []*armstreamanalytics.AzureMachineLearningWebServiceOutputColumn{
										{
											Name:     to.Ptr("Sentiment"),
											DataType: to.Ptr("string"),
										}},
								},
							},
							Inputs: []*armstreamanalytics.FunctionInput{
								{
									DataType: to.Ptr("nvarchar(max)"),
								}},
							Output: &armstreamanalytics.FunctionOutput{
								DataType: to.Ptr("nvarchar(max)"),
							},
						},
					},
				},
				{
					Name: to.Ptr("function8197"),
					Type: to.Ptr("Microsoft.StreamAnalytics/streamingjobs/functions"),
					ID:   to.Ptr("/subscriptions/56b5e0a9-b645-407d-99b0-c64f86013e3d/resourceGroups/sjrg1637/providers/Microsoft.StreamAnalytics/streamingjobs/sj8653/functions/function8197"),
					Properties: &armstreamanalytics.ScalarFunctionProperties{
						Type: to.Ptr("Scalar"),
						Etag: to.Ptr("94a512d5-2f59-4e39-b9c8-bca4abd74b7e"),
						Properties: &armstreamanalytics.ScalarFunctionConfiguration{
							Binding: &armstreamanalytics.JavaScriptFunctionBinding{
								Type: to.Ptr("Microsoft.StreamAnalytics/JavascriptUdf"),
								Properties: &armstreamanalytics.JavaScriptFunctionBindingProperties{
									Script: to.Ptr("function (a, b) { return a * b; }"),
								},
							},
							Inputs: []*armstreamanalytics.FunctionInput{
								{
									DataType: to.Ptr("Any"),
								}},
							Output: &armstreamanalytics.FunctionOutput{
								DataType: to.Ptr("Any"),
							},
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.FunctionListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.FunctionListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Function_ListByStreamingJob.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestFunctions_Test(t *testing.T) {
	// From example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Function_Test_JavaScript.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Test the connection for a JavaScript function"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstreamanalytics.NewFunctionsClient("56b5e0a9-b645-407d-99b0-c64f86013e3d", cred, &options)
	poller, err := client.BeginTest(ctx,
		"sjrg1637",
		"sj8653",
		"function8197",
		&armstreamanalytics.FunctionsClientBeginTestOptions{Function: nil,
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Function_Test_JavaScript.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Function_Test_JavaScript.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstreamanalytics.ResourceTestStatus{
			Error: &armstreamanalytics.ErrorResponse{
				Code:    to.Ptr("BadRequest"),
				Message: to.Ptr("Test operation is not supported for function type: Microsoft.StreamAnalytics/JavascriptUdf"),
			},
			Status: to.Ptr("TestFailed"),
		}
		if !reflect.DeepEqual(exampleRes, res.ResourceTestStatus) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ResourceTestStatus)
			t.Fatalf("Mock response is not equal to example response for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Function_Test_JavaScript.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Function_Test_AzureML.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Test the connection for an Azure ML function"},
	})
	client = armstreamanalytics.NewFunctionsClient("56b5e0a9-b645-407d-99b0-c64f86013e3d", cred, &options)
	poller, err = client.BeginTest(ctx,
		"sjrg7",
		"sj9093",
		"function588",
		&armstreamanalytics.FunctionsClientBeginTestOptions{Function: nil,
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Function_Test_AzureML.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Function_Test_AzureML.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstreamanalytics.ResourceTestStatus{
			Status: to.Ptr("TestSucceeded"),
		}
		if !reflect.DeepEqual(exampleRes, res.ResourceTestStatus) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ResourceTestStatus)
			t.Fatalf("Mock response is not equal to example response for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Function_Test_AzureML.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestFunctions_RetrieveDefaultDefinition(t *testing.T) {
	// From example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Function_RetrieveDefaultDefinition_AzureML.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Retrieve the default definition for an Azure ML function"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstreamanalytics.NewFunctionsClient("56b5e0a9-b645-407d-99b0-c64f86013e3d", cred, &options)
	res, err := client.RetrieveDefaultDefinition(ctx,
		"sjrg7",
		"sj9093",
		"function588",
		&armstreamanalytics.FunctionsClientRetrieveDefaultDefinitionOptions{FunctionRetrieveDefaultDefinitionParameters: &armstreamanalytics.AzureMachineLearningWebServiceFunctionRetrieveDefaultDefinitionParameters{
			BindingType: to.Ptr("Microsoft.MachineLearning/WebService"),
			BindingRetrievalProperties: &armstreamanalytics.AzureMachineLearningWebServiceFunctionBindingRetrievalProperties{
				ExecuteEndpoint: to.Ptr("someAzureMLExecuteEndpointUrl"),
				UdfType:         to.Ptr("Scalar"),
			},
		},
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Function_RetrieveDefaultDefinition_AzureML.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstreamanalytics.Function{
			Name: to.Ptr("function588"),
			Properties: &armstreamanalytics.ScalarFunctionProperties{
				Type: to.Ptr("Scalar"),
				Properties: &armstreamanalytics.ScalarFunctionConfiguration{
					Binding: &armstreamanalytics.AzureMachineLearningWebServiceFunctionBinding{
						Type: to.Ptr("Microsoft.MachineLearning/WebService"),
						Properties: &armstreamanalytics.AzureMachineLearningWebServiceFunctionBindingProperties{
							BatchSize: to.Ptr[int32](1000),
							Endpoint:  to.Ptr("someAzureMLExecuteEndpointUrl"),
							Inputs: &armstreamanalytics.AzureMachineLearningWebServiceInputs{
								Name: to.Ptr("input1"),
								ColumnNames: []*armstreamanalytics.AzureMachineLearningWebServiceInputColumn{
									{
										Name:     to.Ptr("tweet"),
										DataType: to.Ptr("string"),
										MapTo:    to.Ptr[int32](0),
									}},
							},
							Outputs: []*armstreamanalytics.AzureMachineLearningWebServiceOutputColumn{
								{
									Name:     to.Ptr("Sentiment"),
									DataType: to.Ptr("string"),
								}},
						},
					},
					Inputs: []*armstreamanalytics.FunctionInput{
						{
							DataType: to.Ptr("nvarchar(max)"),
						}},
					Output: &armstreamanalytics.FunctionOutput{
						DataType: to.Ptr("nvarchar(max)"),
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Function) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Function)
			t.Fatalf("Mock response is not equal to example response for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Function_RetrieveDefaultDefinition_AzureML.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSubscriptions_ListQuotas(t *testing.T) {
	// From example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Subscription_ListQuotas.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List subscription quota information in West US"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstreamanalytics.NewSubscriptionsClient("56b5e0a9-b645-407d-99b0-c64f86013e3d", cred, &options)
	res, err := client.ListQuotas(ctx,
		"West US",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Subscription_ListQuotas.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstreamanalytics.SubscriptionQuotasListResult{
			Value: []*armstreamanalytics.SubscriptionQuota{
				{
					Name: to.Ptr("StreamingUnits"),
					Type: to.Ptr("Microsoft.StreamAnalytics/quotas"),
					ID:   to.Ptr("/subscriptions/56b5e0a9-b645-407d-99b0-c64f86013e3d/providers/Microsoft.StreamAnalytics/locations/West US/quotas/StreamingUnits"),
					Properties: &armstreamanalytics.SubscriptionQuotaProperties{
						CurrentCount: to.Ptr[int32](0),
						MaxCount:     to.Ptr[int32](200),
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.SubscriptionQuotasListResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SubscriptionQuotasListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Subscription_ListQuotas.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestClusters_CreateOrUpdate(t *testing.T) {
	// From example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Cluster_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a new cluster"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstreamanalytics.NewClustersClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"sjrg",
		"An Example Cluster",
		armstreamanalytics.Cluster{
			Location: to.Ptr("North US"),
			Tags: map[string]*string{
				"key": to.Ptr("value"),
			},
			SKU: &armstreamanalytics.ClusterSKU{
				Name:     to.Ptr(armstreamanalytics.ClusterSKUNameDefault),
				Capacity: to.Ptr[int32](48),
			},
		},
		&armstreamanalytics.ClustersClientBeginCreateOrUpdateOptions{IfMatch: nil,
			IfNoneMatch: nil,
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Cluster_Create.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Cluster_Create.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstreamanalytics.Cluster{
			Name:     to.Ptr("An Example Cluster"),
			Type:     to.Ptr("Microsoft.StreamAnalytics/clusters"),
			ID:       to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/sjrg/providers/Microsoft.StreamAnalytics/clusters/AnExampleStreamingCluster"),
			Location: to.Ptr("North US"),
			Tags: map[string]*string{
				"key": to.Ptr("value"),
			},
			Etag: to.Ptr("F86B9B70-D5B1-451D-AFC8-0B42D4729B8C"),
			Properties: &armstreamanalytics.ClusterProperties{
				CapacityAllocated: to.Ptr[int32](0),
				CapacityAssigned:  to.Ptr[int32](0),
				ClusterID:         to.Ptr("B01C67EF-4739-4DDD-9FB2-427EB43DE839"),
				CreatedDate:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-25T01:00:00Z"); return t }()),
				ProvisioningState: to.Ptr(armstreamanalytics.ClusterProvisioningStateSucceeded),
			},
			SKU: &armstreamanalytics.ClusterSKU{
				Name:     to.Ptr(armstreamanalytics.ClusterSKUNameDefault),
				Capacity: to.Ptr[int32](48),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Cluster) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Cluster)
			t.Fatalf("Mock response is not equal to example response for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Cluster_Create.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestClusters_Update(t *testing.T) {
	// From example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Cluster_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a cluster"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstreamanalytics.NewClustersClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"sjrg",
		"testcluster",
		armstreamanalytics.Cluster{
			Location: to.Ptr("Central US"),
			SKU: &armstreamanalytics.ClusterSKU{
				Capacity: to.Ptr[int32](96),
			},
		},
		&armstreamanalytics.ClustersClientBeginUpdateOptions{IfMatch: nil,
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Cluster_Update.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Cluster_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstreamanalytics.Cluster{
			Name:     to.Ptr("An Example Cluster"),
			Type:     to.Ptr("Microsoft.StreamAnalytics/clusters"),
			ID:       to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/sjrg/providers/Microsoft.StreamAnalytics/clusters/AnExampleStreamingCluster"),
			Location: to.Ptr("Central US"),
			Tags: map[string]*string{
				"key": to.Ptr("value"),
			},
			Etag: to.Ptr("F86B9B70-D5B1-451D-AFC8-0B42D4729B8C"),
			Properties: &armstreamanalytics.ClusterProperties{
				CapacityAllocated: to.Ptr[int32](36),
				CapacityAssigned:  to.Ptr[int32](48),
				ClusterID:         to.Ptr("B01C67EF-4739-4DDD-9FB2-427EB43DE839"),
				CreatedDate:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-25T01:00:00Z"); return t }()),
				ProvisioningState: to.Ptr(armstreamanalytics.ClusterProvisioningStateSucceeded),
			},
			SKU: &armstreamanalytics.ClusterSKU{
				Name:     to.Ptr(armstreamanalytics.ClusterSKUNameDefault),
				Capacity: to.Ptr[int32](96),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Cluster) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Cluster)
			t.Fatalf("Mock response is not equal to example response for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Cluster_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestClusters_Get(t *testing.T) {
	// From example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Cluster_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a cluster"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstreamanalytics.NewClustersClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.Get(ctx,
		"sjrg",
		"testcluster",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Cluster_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstreamanalytics.Cluster{
			Name:     to.Ptr("An Example Cluster"),
			Type:     to.Ptr("Microsoft.StreamAnalytics/clusters"),
			ID:       to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/sjrg/providers/Microsoft.StreamAnalytics/clusters/AnExampleStreamingCluster"),
			Location: to.Ptr("Central US"),
			Tags: map[string]*string{
				"key": to.Ptr("value"),
			},
			Etag: to.Ptr("F86B9B70-D5B1-451D-AFC8-0B42D4729B8C"),
			Properties: &armstreamanalytics.ClusterProperties{
				CapacityAllocated: to.Ptr[int32](48),
				CapacityAssigned:  to.Ptr[int32](96),
				ClusterID:         to.Ptr("B01C67EF-4739-4DDD-9FB2-427EB43DE839"),
				CreatedDate:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-25T01:00:00Z"); return t }()),
				ProvisioningState: to.Ptr(armstreamanalytics.ClusterProvisioningStateSucceeded),
			},
			SKU: &armstreamanalytics.ClusterSKU{
				Name:     to.Ptr(armstreamanalytics.ClusterSKUNameDefault),
				Capacity: to.Ptr[int32](96),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Cluster) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Cluster)
			t.Fatalf("Mock response is not equal to example response for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Cluster_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestClusters_Delete(t *testing.T) {
	// From example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Cluster_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a cluster"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstreamanalytics.NewClustersClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"sjrg",
		"testcluster",
		&armstreamanalytics.ClustersClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Cluster_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Cluster_Delete.json: %v", err)
	}
}

func TestClusters_ListBySubscription(t *testing.T) {
	// From example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Cluster_ListBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List the clusters in a subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstreamanalytics.NewClustersClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	pager := client.ListBySubscription(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Cluster_ListBySubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armstreamanalytics.ClusterListResult{
			Value: []*armstreamanalytics.Cluster{
				{
					Name:     to.Ptr("An Example Cluster"),
					Type:     to.Ptr("Microsoft.StreamAnalytics/clusters"),
					ID:       to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/sjrg/providers/Microsoft.StreamAnalytics/clusters/AnExampleStreamingCluster"),
					Location: to.Ptr("Central US"),
					Tags: map[string]*string{
						"key": to.Ptr("value"),
					},
					Etag: to.Ptr("F86B9B70-D5B1-451D-AFC8-0B42D4729B8C"),
					Properties: &armstreamanalytics.ClusterProperties{
						CapacityAllocated: to.Ptr[int32](48),
						CapacityAssigned:  to.Ptr[int32](96),
						ClusterID:         to.Ptr("B01C67EF-4739-4DDD-9FB2-427EB43DE839"),
						CreatedDate:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-25T01:00:00Z"); return t }()),
						ProvisioningState: to.Ptr(armstreamanalytics.ClusterProvisioningStateSucceeded),
					},
					SKU: &armstreamanalytics.ClusterSKU{
						Name:     to.Ptr(armstreamanalytics.ClusterSKUNameDefault),
						Capacity: to.Ptr[int32](96),
					},
				},
				{
					Name:     to.Ptr("A Different Cluster"),
					Type:     to.Ptr("Microsoft.StreamAnalytics/clusters"),
					ID:       to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/sjrg/providers/Microsoft.StreamAnalytics/clusters/ADifferentStreamingCluster"),
					Location: to.Ptr("Central US"),
					Tags: map[string]*string{
						"key": to.Ptr("value"),
					},
					Etag: to.Ptr("G97C0C81-D5B1-451D-AFC8-0B42D4729B8C"),
					Properties: &armstreamanalytics.ClusterProperties{
						CapacityAllocated: to.Ptr[int32](48),
						CapacityAssigned:  to.Ptr[int32](96),
						ClusterID:         to.Ptr("B01C67EF-4739-4DDD-9FB2-427EB43DE839"),
						CreatedDate:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-25T01:00:00Z"); return t }()),
						ProvisioningState: to.Ptr(armstreamanalytics.ClusterProvisioningStateSucceeded),
					},
					SKU: &armstreamanalytics.ClusterSKU{
						Name:     to.Ptr(armstreamanalytics.ClusterSKUNameDefault),
						Capacity: to.Ptr[int32](96),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ClusterListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ClusterListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Cluster_ListBySubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestClusters_ListByResourceGroup(t *testing.T) {
	// From example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Cluster_ListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List clusters in resource group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstreamanalytics.NewClustersClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	pager := client.ListByResourceGroup("sjrg",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Cluster_ListByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armstreamanalytics.ClusterListResult{
			Value: []*armstreamanalytics.Cluster{
				{
					Name:     to.Ptr("An Example Cluster"),
					Type:     to.Ptr("Microsoft.StreamAnalytics/clusters"),
					ID:       to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/sjrg/providers/Microsoft.StreamAnalytics/clusters/AnExampleStreamingCluster"),
					Location: to.Ptr("Central US"),
					Tags: map[string]*string{
						"key": to.Ptr("value"),
					},
					Etag: to.Ptr("F86B9B70-D5B1-451D-AFC8-0B42D4729B8C"),
					Properties: &armstreamanalytics.ClusterProperties{
						CapacityAllocated: to.Ptr[int32](48),
						CapacityAssigned:  to.Ptr[int32](96),
						ClusterID:         to.Ptr("B01C67EF-4739-4DDD-9FB2-427EB43DE839"),
						CreatedDate:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-25T01:00:00Z"); return t }()),
						ProvisioningState: to.Ptr(armstreamanalytics.ClusterProvisioningStateSucceeded),
					},
					SKU: &armstreamanalytics.ClusterSKU{
						Name:     to.Ptr(armstreamanalytics.ClusterSKUNameDefault),
						Capacity: to.Ptr[int32](96),
					},
				},
				{
					Name:     to.Ptr("A Different Cluster"),
					Type:     to.Ptr("Microsoft.StreamAnalytics/clusters"),
					ID:       to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/sjrg/providers/Microsoft.StreamAnalytics/clusters/ADifferentStreamingCluster"),
					Location: to.Ptr("Central US"),
					Tags: map[string]*string{
						"key": to.Ptr("value"),
					},
					Etag: to.Ptr("G97C0C81-D5B1-451D-AFC8-0B42D4729B8C"),
					Properties: &armstreamanalytics.ClusterProperties{
						CapacityAllocated: to.Ptr[int32](48),
						CapacityAssigned:  to.Ptr[int32](96),
						ClusterID:         to.Ptr("B01C67EF-4739-4DDD-9FB2-427EB43DE839"),
						CreatedDate:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-25T01:00:00Z"); return t }()),
						ProvisioningState: to.Ptr(armstreamanalytics.ClusterProvisioningStateSucceeded),
					},
					SKU: &armstreamanalytics.ClusterSKU{
						Name:     to.Ptr(armstreamanalytics.ClusterSKUNameDefault),
						Capacity: to.Ptr[int32](96),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ClusterListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ClusterListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Cluster_ListByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestClusters_ListStreamingJobs(t *testing.T) {
	// From example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Cluster_ListStreamingJobs.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all streaming jobs in cluster"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstreamanalytics.NewClustersClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	pager := client.ListStreamingJobs("sjrg",
		"testcluster",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Cluster_ListStreamingJobs.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armstreamanalytics.ClusterJobListResult{
			Value: []*armstreamanalytics.ClusterJob{
				{
					ID:             to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/sjrg/providers/microsoft.streamAnalytics/streamingjobs/AFilterSample"),
					JobState:       to.Ptr(armstreamanalytics.JobStateRunning),
					StreamingUnits: to.Ptr[int32](6),
				},
				{
					ID:             to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/sjrg/providers/microsoft.streamAnalytics/streamingjobs/AnotherFilterSample"),
					JobState:       to.Ptr(armstreamanalytics.JobStateStopped),
					StreamingUnits: to.Ptr[int32](1),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ClusterJobListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ClusterJobListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/Cluster_ListStreamingJobs.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpoints_CreateOrUpdate(t *testing.T) {
	// From example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/PrivateEndpoint_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a private endpoint"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstreamanalytics.NewPrivateEndpointsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"sjrg",
		"testcluster",
		"testpe",
		armstreamanalytics.PrivateEndpoint{
			Properties: &armstreamanalytics.PrivateEndpointProperties{
				ManualPrivateLinkServiceConnections: []*armstreamanalytics.PrivateLinkServiceConnection{
					{
						Properties: &armstreamanalytics.PrivateLinkServiceConnectionProperties{
							GroupIDs: []*string{
								to.Ptr("groupIdFromResource")},
							PrivateLinkServiceID: to.Ptr("/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/privateLinkServices/testPls"),
						},
					}},
			},
		},
		&armstreamanalytics.PrivateEndpointsClientCreateOrUpdateOptions{IfMatch: nil,
			IfNoneMatch: nil,
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/PrivateEndpoint_Create.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstreamanalytics.PrivateEndpoint{
			Name: to.Ptr("An Example Private Endpoint"),
			Type: to.Ptr("Microsoft.StreamAnalytics/clusters/privateEndpoints"),
			ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/sjrg/providers/Microsoft.StreamAnalytics/clusters/testcluster/privateEndpoints/AnExamplePrivateEndpoint"),
			Etag: to.Ptr("F86B9B70-D5B1-451D-AFC8-0B42D4729B8C"),
			Properties: &armstreamanalytics.PrivateEndpointProperties{
				CreatedDate: to.Ptr("2020-03-01T01:00Z"),
				ManualPrivateLinkServiceConnections: []*armstreamanalytics.PrivateLinkServiceConnection{
					{
						Properties: &armstreamanalytics.PrivateLinkServiceConnectionProperties{
							GroupIDs: []*string{
								to.Ptr("groupIdFromResource")},
							PrivateLinkServiceConnectionState: &armstreamanalytics.PrivateLinkConnectionState{
								Description:     to.Ptr("Awaiting approval"),
								ActionsRequired: to.Ptr("None"),
								Status:          to.Ptr("Pending"),
							},
							PrivateLinkServiceID: to.Ptr("/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/privateLinkServices/testPls"),
							RequestMessage:       to.Ptr("Please approve my connection."),
						},
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateEndpoint) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateEndpoint)
			t.Fatalf("Mock response is not equal to example response for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/PrivateEndpoint_Create.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpoints_Get(t *testing.T) {
	// From example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/PrivateEndpoint_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a private endpoint"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstreamanalytics.NewPrivateEndpointsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	res, err := client.Get(ctx,
		"sjrg",
		"testcluster",
		"testpe",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/PrivateEndpoint_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armstreamanalytics.PrivateEndpoint{
			Name: to.Ptr("An Example Private Endpoint"),
			Type: to.Ptr("Microsoft.StreamAnalytics/clusters/privateEndpoints"),
			ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/sjrg/providers/Microsoft.StreamAnalytics/clusters/testcluster/privateEndpoints/AnExamplePrivateEndpoint"),
			Etag: to.Ptr("F86B9B70-D5B1-451D-AFC8-0B42D4729B8C"),
			Properties: &armstreamanalytics.PrivateEndpointProperties{
				CreatedDate: to.Ptr("2020-03-01T01:00Z"),
				ManualPrivateLinkServiceConnections: []*armstreamanalytics.PrivateLinkServiceConnection{
					{
						Properties: &armstreamanalytics.PrivateLinkServiceConnectionProperties{
							GroupIDs: []*string{
								to.Ptr("groupIdFromResource")},
							PrivateLinkServiceConnectionState: &armstreamanalytics.PrivateLinkConnectionState{
								Description:     to.Ptr("Awaiting approval"),
								ActionsRequired: to.Ptr("None"),
								Status:          to.Ptr("Pending"),
							},
							PrivateLinkServiceID: to.Ptr("/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/privateLinkServices/testPls"),
							RequestMessage:       to.Ptr("This connection request originated from Azure Stream Analytics cluster named \"testcluster\". Please approve this request to allow any Stream Analytics job running on that cluster to access this resource."),
						},
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateEndpoint) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateEndpoint)
			t.Fatalf("Mock response is not equal to example response for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/PrivateEndpoint_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpoints_Delete(t *testing.T) {
	// From example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/PrivateEndpoint_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a private endpoint"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstreamanalytics.NewPrivateEndpointsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"sjrg",
		"testcluster",
		"testpe",
		&armstreamanalytics.PrivateEndpointsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/PrivateEndpoint_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/PrivateEndpoint_Delete.json: %v", err)
	}
}

func TestPrivateEndpoints_ListByCluster(t *testing.T) {
	// From example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/PrivateEndpoint_ListByCluster.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get the private endpoints in a cluster"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armstreamanalytics.NewPrivateEndpointsClient("34adfa4f-cedf-4dc0-ba29-b6d1a69ab345", cred, &options)
	pager := client.ListByCluster("sjrg",
		"testcluster",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/PrivateEndpoint_ListByCluster.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armstreamanalytics.PrivateEndpointListResult{
			Value: []*armstreamanalytics.PrivateEndpoint{
				{
					Name: to.Ptr("An Example Private Endpoint"),
					Type: to.Ptr("Microsoft.StreamAnalytics/clusters/privateEndpoints"),
					ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/sjrg/providers/Microsoft.StreamAnalytics/clusters/testcluster/privateEndpoints/AnExamplePrivateEndpoint"),
					Etag: to.Ptr("F86B9B70-D5B1-451D-AFC8-0B42D4729B8C"),
					Properties: &armstreamanalytics.PrivateEndpointProperties{
						CreatedDate: to.Ptr("2020-03-01T01:00Z"),
						ManualPrivateLinkServiceConnections: []*armstreamanalytics.PrivateLinkServiceConnection{
							{
								Properties: &armstreamanalytics.PrivateLinkServiceConnectionProperties{
									GroupIDs: []*string{
										to.Ptr("groupIdFromResource")},
									PrivateLinkServiceConnectionState: &armstreamanalytics.PrivateLinkConnectionState{
										Description:     to.Ptr("Awaiting approval"),
										ActionsRequired: to.Ptr("None"),
										Status:          to.Ptr("Pending"),
									},
									PrivateLinkServiceID: to.Ptr("/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/privateLinkServices/testPls"),
									RequestMessage:       to.Ptr("Please approve my connection."),
								},
							}},
					},
				},
				{
					Name: to.Ptr("A Different Private Endpoint"),
					Type: to.Ptr("Microsoft.StreamAnalytics/clusters/privateEndpoints"),
					ID:   to.Ptr("/subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/sjrg/providers/Microsoft.StreamAnalytics/clusters/testcluster/privateEndpoints/ADifferentPrivateEndpoint"),
					Etag: to.Ptr("G97C0C81-D5B1-451D-AFC8-0B42D4729B8C"),
					Properties: &armstreamanalytics.PrivateEndpointProperties{
						CreatedDate: to.Ptr("2020-03-01T01:00Z"),
						ManualPrivateLinkServiceConnections: []*armstreamanalytics.PrivateLinkServiceConnection{
							{
								Properties: &armstreamanalytics.PrivateLinkServiceConnectionProperties{
									GroupIDs: []*string{
										to.Ptr("groupIdFromResource")},
									PrivateLinkServiceConnectionState: &armstreamanalytics.PrivateLinkConnectionState{
										Description:     to.Ptr("Awaiting approval"),
										ActionsRequired: to.Ptr("None"),
										Status:          to.Ptr("Pending"),
									},
									PrivateLinkServiceID: to.Ptr("/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.Network/privateLinkServices/testPls"),
									RequestMessage:       to.Ptr("Please approve my connection."),
								},
							}},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PrivateEndpointListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PrivateEndpointListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/streamanalytics/resource-manager/Microsoft.StreamAnalytics/stable/2020-03-01/examples/PrivateEndpoint_ListByCluster.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
