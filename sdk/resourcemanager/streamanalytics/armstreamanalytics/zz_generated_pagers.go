//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armstreamanalytics

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"reflect"
)

// ClustersClientListByResourceGroupPager provides operations for iterating over paged responses.
type ClustersClientListByResourceGroupPager struct {
	client    *ClustersClient
	current   ClustersClientListByResourceGroupResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ClustersClientListByResourceGroupResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ClustersClientListByResourceGroupPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ClusterListResult.NextLink == nil || len(*p.current.ClusterListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *ClustersClientListByResourceGroupPager) NextPage(ctx context.Context) (ClustersClientListByResourceGroupResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return ClustersClientListByResourceGroupResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ClustersClientListByResourceGroupResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ClustersClientListByResourceGroupResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ClustersClientListByResourceGroupResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		return ClustersClientListByResourceGroupResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// ClustersClientListBySubscriptionPager provides operations for iterating over paged responses.
type ClustersClientListBySubscriptionPager struct {
	client    *ClustersClient
	current   ClustersClientListBySubscriptionResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ClustersClientListBySubscriptionResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ClustersClientListBySubscriptionPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ClusterListResult.NextLink == nil || len(*p.current.ClusterListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *ClustersClientListBySubscriptionPager) NextPage(ctx context.Context) (ClustersClientListBySubscriptionResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return ClustersClientListBySubscriptionResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ClustersClientListBySubscriptionResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ClustersClientListBySubscriptionResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ClustersClientListBySubscriptionResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listBySubscriptionHandleResponse(resp)
	if err != nil {
		return ClustersClientListBySubscriptionResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// ClustersClientListStreamingJobsPager provides operations for iterating over paged responses.
type ClustersClientListStreamingJobsPager struct {
	client    *ClustersClient
	current   ClustersClientListStreamingJobsResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ClustersClientListStreamingJobsResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ClustersClientListStreamingJobsPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ClusterJobListResult.NextLink == nil || len(*p.current.ClusterJobListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *ClustersClientListStreamingJobsPager) NextPage(ctx context.Context) (ClustersClientListStreamingJobsResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return ClustersClientListStreamingJobsResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ClustersClientListStreamingJobsResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ClustersClientListStreamingJobsResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ClustersClientListStreamingJobsResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listStreamingJobsHandleResponse(resp)
	if err != nil {
		return ClustersClientListStreamingJobsResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// FunctionsClientListByStreamingJobPager provides operations for iterating over paged responses.
type FunctionsClientListByStreamingJobPager struct {
	client    *FunctionsClient
	current   FunctionsClientListByStreamingJobResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, FunctionsClientListByStreamingJobResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *FunctionsClientListByStreamingJobPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.FunctionListResult.NextLink == nil || len(*p.current.FunctionListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *FunctionsClientListByStreamingJobPager) NextPage(ctx context.Context) (FunctionsClientListByStreamingJobResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return FunctionsClientListByStreamingJobResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return FunctionsClientListByStreamingJobResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return FunctionsClientListByStreamingJobResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return FunctionsClientListByStreamingJobResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByStreamingJobHandleResponse(resp)
	if err != nil {
		return FunctionsClientListByStreamingJobResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// InputsClientListByStreamingJobPager provides operations for iterating over paged responses.
type InputsClientListByStreamingJobPager struct {
	client    *InputsClient
	current   InputsClientListByStreamingJobResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, InputsClientListByStreamingJobResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *InputsClientListByStreamingJobPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.InputListResult.NextLink == nil || len(*p.current.InputListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *InputsClientListByStreamingJobPager) NextPage(ctx context.Context) (InputsClientListByStreamingJobResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return InputsClientListByStreamingJobResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return InputsClientListByStreamingJobResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return InputsClientListByStreamingJobResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return InputsClientListByStreamingJobResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByStreamingJobHandleResponse(resp)
	if err != nil {
		return InputsClientListByStreamingJobResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// OperationsClientListPager provides operations for iterating over paged responses.
type OperationsClientListPager struct {
	client    *OperationsClient
	current   OperationsClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, OperationsClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *OperationsClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.OperationListResult.NextLink == nil || len(*p.current.OperationListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *OperationsClientListPager) NextPage(ctx context.Context) (OperationsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return OperationsClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return OperationsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return OperationsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return OperationsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return OperationsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// OutputsClientListByStreamingJobPager provides operations for iterating over paged responses.
type OutputsClientListByStreamingJobPager struct {
	client    *OutputsClient
	current   OutputsClientListByStreamingJobResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, OutputsClientListByStreamingJobResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *OutputsClientListByStreamingJobPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.OutputListResult.NextLink == nil || len(*p.current.OutputListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *OutputsClientListByStreamingJobPager) NextPage(ctx context.Context) (OutputsClientListByStreamingJobResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return OutputsClientListByStreamingJobResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return OutputsClientListByStreamingJobResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return OutputsClientListByStreamingJobResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return OutputsClientListByStreamingJobResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByStreamingJobHandleResponse(resp)
	if err != nil {
		return OutputsClientListByStreamingJobResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// PrivateEndpointsClientListByClusterPager provides operations for iterating over paged responses.
type PrivateEndpointsClientListByClusterPager struct {
	client    *PrivateEndpointsClient
	current   PrivateEndpointsClientListByClusterResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, PrivateEndpointsClientListByClusterResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *PrivateEndpointsClientListByClusterPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PrivateEndpointListResult.NextLink == nil || len(*p.current.PrivateEndpointListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *PrivateEndpointsClientListByClusterPager) NextPage(ctx context.Context) (PrivateEndpointsClientListByClusterResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return PrivateEndpointsClientListByClusterResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return PrivateEndpointsClientListByClusterResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return PrivateEndpointsClientListByClusterResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return PrivateEndpointsClientListByClusterResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByClusterHandleResponse(resp)
	if err != nil {
		return PrivateEndpointsClientListByClusterResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// StreamingJobsClientListByResourceGroupPager provides operations for iterating over paged responses.
type StreamingJobsClientListByResourceGroupPager struct {
	client    *StreamingJobsClient
	current   StreamingJobsClientListByResourceGroupResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, StreamingJobsClientListByResourceGroupResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *StreamingJobsClientListByResourceGroupPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.StreamingJobListResult.NextLink == nil || len(*p.current.StreamingJobListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *StreamingJobsClientListByResourceGroupPager) NextPage(ctx context.Context) (StreamingJobsClientListByResourceGroupResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return StreamingJobsClientListByResourceGroupResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return StreamingJobsClientListByResourceGroupResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return StreamingJobsClientListByResourceGroupResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return StreamingJobsClientListByResourceGroupResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		return StreamingJobsClientListByResourceGroupResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// StreamingJobsClientListPager provides operations for iterating over paged responses.
type StreamingJobsClientListPager struct {
	client    *StreamingJobsClient
	current   StreamingJobsClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, StreamingJobsClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *StreamingJobsClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.StreamingJobListResult.NextLink == nil || len(*p.current.StreamingJobListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *StreamingJobsClientListPager) NextPage(ctx context.Context) (StreamingJobsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return StreamingJobsClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return StreamingJobsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return StreamingJobsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return StreamingJobsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return StreamingJobsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}
