//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armsecurity_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/security/armsecurity"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestMdeOnboardings_List(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/preview/2021-10-01-preview/examples/MdeOnboardings/ListMdeOnboardings_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"The configuration or data needed to onboard the machine to MDE"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewMdeOnboardingsClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23", cred, &options)
	res, err := client.List(ctx,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/preview/2021-10-01-preview/examples/MdeOnboardings/ListMdeOnboardings_example.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurity.MdeOnboardingDataList{
			Value: []*armsecurity.MdeOnboardingData{
				{
					Name: to.Ptr("default"),
					Type: to.Ptr("Microsoft.Security/mdeOnboarding"),
					ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/mdeOnboarding/default"),
					Properties: &armsecurity.MdeOnboardingDataProperties{
						OnboardingPackageLinux:   []byte(""),
						OnboardingPackageWindows: []byte(""),
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.MdeOnboardingDataList) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.MdeOnboardingDataList)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/preview/2021-10-01-preview/examples/MdeOnboardings/ListMdeOnboardings_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestMdeOnboardings_Get(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/preview/2021-10-01-preview/examples/MdeOnboardings/GetMdeOnboardings_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"The default configuration or data needed to onboard the machine to MDE"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewMdeOnboardingsClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23", cred, &options)
	res, err := client.Get(ctx,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/preview/2021-10-01-preview/examples/MdeOnboardings/GetMdeOnboardings_example.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurity.MdeOnboardingData{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Security/mdeOnboardings"),
			ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/mdeOnboardings/default"),
			Properties: &armsecurity.MdeOnboardingDataProperties{
				OnboardingPackageLinux:   []byte(""),
				OnboardingPackageWindows: []byte(""),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.MdeOnboardingData) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.MdeOnboardingData)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/preview/2021-10-01-preview/examples/MdeOnboardings/GetMdeOnboardings_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCustomAssessmentAutomations_Get(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/preview/2021-07-01-preview/examples/CustomAssessmentAutomations/customAssessmentAutomationGet_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a Custom Assessment Automation"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewCustomAssessmentAutomationsClient("e5d1b86c-3051-44d5-8802-aa65d45a279b", cred, &options)
	res, err := client.Get(ctx,
		"TestResourceGroup",
		"MyCustomAssessmentAutomation",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/preview/2021-07-01-preview/examples/CustomAssessmentAutomations/customAssessmentAutomationGet_example.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurity.CustomAssessmentAutomation{
			Name: to.Ptr("MyCustomAssessmentAutomation"),
			Type: to.Ptr("Microsoft.Security/customAssessmentAutomations"),
			ID:   to.Ptr("/subscriptions/e5d1b86c-3051-44d5-8802-aa65d45a279b/resourcegroups/TestResourceGroup/providers/Microsoft.Security/customAssessmentAutomations/MyCustomAssessmentAutomation"),
			Properties: &armsecurity.CustomAssessmentAutomationProperties{
				Description:            to.Ptr("organization passwords policy"),
				AssessmentKey:          to.Ptr("d5f442f7-7e77-4bcf-a450-a9c1b9a94eeb"),
				CompressedQuery:        to.Ptr("DQAKAEkAYQBtAF8ARwByAG8AdQBwAA0ACgB8ACAAZQB4AHQAZQBuAGQAIABIAGUAYQBsAHQAaABTAHQAYQB0AHUAcwAgAD0AIABpAGYAZgAoAHQAbwBzAHQAcgBpAG4AZwAoAFIAZQBjAG8AcgBkAC4AVQBzAGUAcgBOAGEAbQBlACkAIABjAG8AbgB0AGEAaQBuAHMAIAAnAHUAcwBlAHIAJwAsACAAJwBVAE4ASABFAEEATABUAEgAWQAnACwAIAAnAEgARQBBAEwAVABIAFkAJwApAA0ACgA="),
				DisplayName:            to.Ptr("Password Policy"),
				RemediationDescription: to.Ptr("Change password policy to..."),
				Severity:               to.Ptr(armsecurity.SeverityEnumLow),
				SupportedCloud:         to.Ptr(armsecurity.SupportedCloudEnumAWS),
			},
			SystemData: &armsecurity.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-31T13:47:50.328Z"); return t }()),
				CreatedBy:          to.Ptr("user@contoso.com"),
				CreatedByType:      to.Ptr(armsecurity.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-31T13:47:50.328Z"); return t }()),
				LastModifiedBy:     to.Ptr("user@contoso.com"),
				LastModifiedByType: to.Ptr(armsecurity.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.CustomAssessmentAutomation) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CustomAssessmentAutomation)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/preview/2021-07-01-preview/examples/CustomAssessmentAutomations/customAssessmentAutomationGet_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCustomAssessmentAutomations_Create(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/preview/2021-07-01-preview/examples/CustomAssessmentAutomations/customAssessmentAutomationCreate_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a Custom Assessment Automation"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewCustomAssessmentAutomationsClient("e5d1b86c-3051-44d5-8802-aa65d45a279b", cred, &options)
	res, err := client.Create(ctx,
		"TestResourceGroup",
		"MyCustomAssessmentAutomation",
		armsecurity.CustomAssessmentAutomationRequest{
			Properties: &armsecurity.CustomAssessmentAutomationRequestProperties{
				Description:            to.Ptr("Data should be encrypted"),
				CompressedQuery:        to.Ptr("DQAKAEkAYQBtAF8ARwByAG8AdQBwAA0ACgB8ACAAZQB4AHQAZQBuAGQAIABIAGUAYQBsAHQAaABTAHQAYQB0AHUAcwAgAD0AIABpAGYAZgAoAHQAbwBzAHQAcgBpAG4AZwAoAFIAZQBjAG8AcgBkAC4AVQBzAGUAcgBOAGEAbQBlACkAIABjAG8AbgB0AGEAaQBuAHMAIAAnAHUAcwBlAHIAJwAsACAAJwBVAE4ASABFAEEATABUAEgAWQAnACwAIAAnAEgARQBBAEwAVABIAFkAJwApAA0ACgA="),
				DisplayName:            to.Ptr("Password Policy"),
				RemediationDescription: to.Ptr("Encrypt store by..."),
				Severity:               to.Ptr(armsecurity.SeverityEnumMedium),
				SupportedCloud:         to.Ptr(armsecurity.SupportedCloudEnumAWS),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/preview/2021-07-01-preview/examples/CustomAssessmentAutomations/customAssessmentAutomationCreate_example.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurity.CustomAssessmentAutomation{
			Name: to.Ptr("33e7cc6e-a139-4723-a0e5-76993aee0771"),
			Type: to.Ptr("Microsoft.Security/customAssessmentAutomations"),
			ID:   to.Ptr("/subscriptions/e5d1b86c-3051-44d5-8802-aa65d45a279b/resourcegroups/TestResourceGroup/providers/Microsoft.Security/customAssessmentAutomations/33e7cc6e-a139-4723-a0e5-76993aee0771"),
			Properties: &armsecurity.CustomAssessmentAutomationProperties{
				Description:            to.Ptr("organization passwords policy"),
				AssessmentKey:          to.Ptr("d5f442f7-7e77-4bcf-a450-a9c1b9a94eeb"),
				CompressedQuery:        to.Ptr("DQAKAEkAYQBtAF8ARwByAG8AdQBwAA0ACgB8ACAAZQB4AHQAZQBuAGQAIABIAGUAYQBsAHQAaABTAHQAYQB0AHUAcwAgAD0AIABpAGYAZgAoAHQAbwBzAHQAcgBpAG4AZwAoAFIAZQBjAG8AcgBkAC4AVQBzAGUAcgBOAGEAbQBlACkAIABjAG8AbgB0AGEAaQBuAHMAIAAnAHUAcwBlAHIAJwAsACAAJwBVAE4ASABFAEEATABUAEgAWQAnACwAIAAnAEgARQBBAEwAVABIAFkAJwApAA0ACgA="),
				DisplayName:            to.Ptr("Password Policy"),
				RemediationDescription: to.Ptr("Change password policy to..."),
				Severity:               to.Ptr(armsecurity.SeverityEnumMedium),
				SupportedCloud:         to.Ptr(armsecurity.SupportedCloudEnumAWS),
			},
			SystemData: &armsecurity.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-31T13:47:50.328Z"); return t }()),
				CreatedBy:          to.Ptr("user@contoso.com"),
				CreatedByType:      to.Ptr(armsecurity.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-31T13:47:50.328Z"); return t }()),
				LastModifiedBy:     to.Ptr("user@contoso.com"),
				LastModifiedByType: to.Ptr(armsecurity.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.CustomAssessmentAutomation) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CustomAssessmentAutomation)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/preview/2021-07-01-preview/examples/CustomAssessmentAutomations/customAssessmentAutomationCreate_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCustomAssessmentAutomations_Delete(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/preview/2021-07-01-preview/examples/CustomAssessmentAutomations/customAssessmentAutomationDelete_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a Custom Assessment Automation"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewCustomAssessmentAutomationsClient("e5d1b86c-3051-44d5-8802-aa65d45a279b", cred, &options)
	_, err := client.Delete(ctx,
		"TestResourceGroup",
		"MyCustomAssessmentAutomation",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/preview/2021-07-01-preview/examples/CustomAssessmentAutomations/customAssessmentAutomationDelete_example.json: %v", err)
	}
}

func TestCustomAssessmentAutomations_ListByResourceGroup(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/preview/2021-07-01-preview/examples/CustomAssessmentAutomations/customAssessmentAutomationListByResourceGroup_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Custom Assessment Automations in a subscription and a resource group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewCustomAssessmentAutomationsClient("e5d1b86c-3051-44d5-8802-aa65d45a279b", cred, &options)
	pager := client.ListByResourceGroup("TestResourceGroup",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/security/resource-manager/Microsoft.Security/preview/2021-07-01-preview/examples/CustomAssessmentAutomations/customAssessmentAutomationListByResourceGroup_example.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsecurity.CustomAssessmentAutomationsListResult{
			Value: []*armsecurity.CustomAssessmentAutomation{
				{
					Name: to.Ptr("MyCustomAssessmentAutomation1"),
					Type: to.Ptr("Microsoft.Security/customAssessmentAutomations"),
					ID:   to.Ptr("/subscriptions/e5d1b86c-3051-44d5-8802-aa65d45a279b/resourcegroups/TestResourceGroup/providers/Microsoft.Security/customAssessmentAutomations/MyCustomAssessmentAutomation1"),
					Properties: &armsecurity.CustomAssessmentAutomationProperties{
						Description:            to.Ptr("organization passwords policy"),
						AssessmentKey:          to.Ptr("d5f442f7-7e77-4bcf-a450-a9c1b9a94eeb"),
						CompressedQuery:        to.Ptr("DQAKAEkAYQBtAF8ARwByAG8AdQBwAA0ACgB8ACAAZQB4AHQAZQBuAGQAIABIAGUAYQBsAHQAaABTAHQAYQB0AHUAcwAgAD0AIABpAGYAZgAoAHQAbwBzAHQAcgBpAG4AZwAoAFIAZQBjAG8AcgBkAC4AVQBzAGUAcgBOAGEAbQBlACkAIABjAG8AbgB0AGEAaQBuAHMAIAAnAHUAcwBlAHIAJwAsACAAJwBVAE4ASABFAEEATABUAEgAWQAnACwAIAAnAEgARQBBAEwAVABIAFkAJwApAA0ACgA="),
						DisplayName:            to.Ptr("Password Policy"),
						RemediationDescription: to.Ptr("Change password policy to..."),
						Severity:               to.Ptr(armsecurity.SeverityEnumMedium),
						SupportedCloud:         to.Ptr(armsecurity.SupportedCloudEnumAWS),
					},
					SystemData: &armsecurity.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-31T13:47:50.328Z"); return t }()),
						CreatedBy:          to.Ptr("user@contoso.com"),
						CreatedByType:      to.Ptr(armsecurity.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-31T13:47:50.328Z"); return t }()),
						LastModifiedBy:     to.Ptr("user@contoso.com"),
						LastModifiedByType: to.Ptr(armsecurity.CreatedByTypeUser),
					},
				},
				{
					Name: to.Ptr("MyCustomAssessmentAutomation2"),
					Type: to.Ptr("Microsoft.Security/customAssessmentAutomations"),
					ID:   to.Ptr("/subscriptions/e5d1b86c-3051-44d5-8802-aa65d45a279b/resourcegroups/TestResourceGroup/providers/Microsoft.Security/customAssessmentAutomations/MyCustomAssessmentAutomation2"),
					Properties: &armsecurity.CustomAssessmentAutomationProperties{
						Description:            to.Ptr("organization passwords policy"),
						AssessmentKey:          to.Ptr("fc1dbcd0-502c-4eab-9312-4014cfc8ea56"),
						CompressedQuery:        to.Ptr("DQAKAEkAYQBtAF8AUABhAHMAcwB3AG8AcgBkAFAAbwBsAGkAYwB5ACAADQAKAHwAIABlAHgAdABlAG4AZAAgAEgAZQBhAGwAdABoAFMAdABhAHQAdQBzACAAPQAgAGkAZgBmACgAdABvAGkAbgB0ACgAUgBlAGMAbwByAGQALgBNAGkAbgBpAG0AdQBtAFAAYQBzAHMAdwBvAHIAZABMAGUAbgBnAHQAaAApACAAPAAgADgALAAgACcAVQBOAEgARQBBAEwAVABIAFkAJwAsACAAJwBIAEUAQQBMAFQASABZACcAKQANAAoA"),
						DisplayName:            to.Ptr("Password Policy"),
						RemediationDescription: to.Ptr("Change password policy to..."),
						Severity:               to.Ptr(armsecurity.SeverityEnumLow),
						SupportedCloud:         to.Ptr(armsecurity.SupportedCloudEnumAWS),
					},
					SystemData: &armsecurity.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-31T13:01:50.328Z"); return t }()),
						CreatedBy:          to.Ptr("user@contoso.com"),
						CreatedByType:      to.Ptr(armsecurity.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-31T13:01:50.328Z"); return t }()),
						LastModifiedBy:     to.Ptr("user@contoso.com"),
						LastModifiedByType: to.Ptr(armsecurity.CreatedByTypeUser),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.CustomAssessmentAutomationsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.CustomAssessmentAutomationsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/preview/2021-07-01-preview/examples/CustomAssessmentAutomations/customAssessmentAutomationListByResourceGroup_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCustomAssessmentAutomations_ListBySubscription(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/preview/2021-07-01-preview/examples/CustomAssessmentAutomations/customAssessmentAutomationListBySubscription_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Custom Assessment Automations in a subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewCustomAssessmentAutomationsClient("e5d1b86c-3051-44d5-8802-aa65d45a279b", cred, &options)
	pager := client.ListBySubscription(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/security/resource-manager/Microsoft.Security/preview/2021-07-01-preview/examples/CustomAssessmentAutomations/customAssessmentAutomationListBySubscription_example.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsecurity.CustomAssessmentAutomationsListResult{
			Value: []*armsecurity.CustomAssessmentAutomation{
				{
					Name: to.Ptr("MyCustomAssessmentAutomation1"),
					Type: to.Ptr("Microsoft.Security/customAssessmentAutomations"),
					ID:   to.Ptr("/subscriptions/e5d1b86c-3051-44d5-8802-aa65d45a279b/resourcegroups/TestResourceGroup/providers/Microsoft.Security/customAssessmentAutomations/MyCustomAssessmentAutomation1"),
					Properties: &armsecurity.CustomAssessmentAutomationProperties{
						Description:            to.Ptr("organization passwords policy"),
						AssessmentKey:          to.Ptr("d5f442f7-7e77-4bcf-a450-a9c1b9a94eeb"),
						CompressedQuery:        to.Ptr("DQAKAEkAYQBtAF8ARwByAG8AdQBwAA0ACgB8ACAAZQB4AHQAZQBuAGQAIABIAGUAYQBsAHQAaABTAHQAYQB0AHUAcwAgAD0AIABpAGYAZgAoAHQAbwBzAHQAcgBpAG4AZwAoAFIAZQBjAG8AcgBkAC4AVQBzAGUAcgBOAGEAbQBlACkAIABjAG8AbgB0AGEAaQBuAHMAIAAnAHUAcwBlAHIAJwAsACAAJwBVAE4ASABFAEEATABUAEgAWQAnACwAIAAnAEgARQBBAEwAVABIAFkAJwApAA0ACgA="),
						DisplayName:            to.Ptr("Password Policy"),
						RemediationDescription: to.Ptr("Change password policy to..."),
						Severity:               to.Ptr(armsecurity.SeverityEnumMedium),
						SupportedCloud:         to.Ptr(armsecurity.SupportedCloudEnumAWS),
					},
					SystemData: &armsecurity.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-31T13:47:50.328Z"); return t }()),
						CreatedBy:          to.Ptr("user@contoso.com"),
						CreatedByType:      to.Ptr(armsecurity.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-31T13:47:50.328Z"); return t }()),
						LastModifiedBy:     to.Ptr("user@contoso.com"),
						LastModifiedByType: to.Ptr(armsecurity.CreatedByTypeUser),
					},
				},
				{
					Name: to.Ptr("MyCustomAssessmentAutomation2"),
					Type: to.Ptr("Microsoft.Security/customAssessmentAutomations"),
					ID:   to.Ptr("/subscriptions/e5d1b86c-3051-44d5-8802-aa65d45a279b/resourcegroups/TestResourceGroup/providers/Microsoft.Security/customAssessmentAutomations/MyCustomAssessmentAutomation2"),
					Properties: &armsecurity.CustomAssessmentAutomationProperties{
						Description:            to.Ptr("organization passwords policy"),
						AssessmentKey:          to.Ptr("fc1dbcd0-502c-4eab-9312-4014cfc8ea56"),
						CompressedQuery:        to.Ptr("DQAKAEkAYQBtAF8AUABhAHMAcwB3AG8AcgBkAFAAbwBsAGkAYwB5ACAADQAKAHwAIABlAHgAdABlAG4AZAAgAEgAZQBhAGwAdABoAFMAdABhAHQAdQBzACAAPQAgAGkAZgBmACgAdABvAGkAbgB0ACgAUgBlAGMAbwByAGQALgBNAGkAbgBpAG0AdQBtAFAAYQBzAHMAdwBvAHIAZABMAGUAbgBnAHQAaAApACAAPAAgADgALAAgACcAVQBOAEgARQBBAEwAVABIAFkAJwAsACAAJwBIAEUAQQBMAFQASABZACcAKQANAAoA"),
						DisplayName:            to.Ptr("Password Policy"),
						RemediationDescription: to.Ptr("Change password policy to..."),
						Severity:               to.Ptr(armsecurity.SeverityEnumLow),
						SupportedCloud:         to.Ptr(armsecurity.SupportedCloudEnumAWS),
					},
					SystemData: &armsecurity.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-31T13:01:50.328Z"); return t }()),
						CreatedBy:          to.Ptr("user@contoso.com"),
						CreatedByType:      to.Ptr(armsecurity.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-31T13:01:50.328Z"); return t }()),
						LastModifiedBy:     to.Ptr("user@contoso.com"),
						LastModifiedByType: to.Ptr(armsecurity.CreatedByTypeUser),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.CustomAssessmentAutomationsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.CustomAssessmentAutomationsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/preview/2021-07-01-preview/examples/CustomAssessmentAutomations/customAssessmentAutomationListBySubscription_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCustomEntityStoreAssignments_Get(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/preview/2021-07-01-preview/examples/CustomEntityStoreAssignments/customEntityStoreAssignmentGet_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a custom entity store assignment"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewCustomEntityStoreAssignmentsClient("e5d1b86c-3051-44d5-8802-aa65d45a279b", cred, &options)
	res, err := client.Get(ctx,
		"TestResourceGroup",
		"33e7cc6e-a139-4723-a0e5-76993aee0771",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/preview/2021-07-01-preview/examples/CustomEntityStoreAssignments/customEntityStoreAssignmentGet_example.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurity.CustomEntityStoreAssignment{
			Name: to.Ptr("33e7cc6e-a139-4723-a0e5-76993aee0771"),
			Type: to.Ptr("Microsoft.Security/customEntityStoreAssignments"),
			ID:   to.Ptr("/subscriptions/e5d1b86c-3051-44d5-8802-aa65d45a279b/resourcegroups/TestResourceGroup/providers/Microsoft.Security/customEntityStoreAssignments/33e7cc6e-a139-4723-a0e5-76993aee0771"),
			Properties: &armsecurity.CustomEntityStoreAssignmentProperties{
				EntityStoreDatabaseLink: to.Ptr("https://dataexplorer.azure.com/clusters/securitydatastore.centralus/databases/DiscoveryAwsKedamari?query=H4sIAAAAAAAAAwtILC4uzy9KCcjPyUyu5OWqUShJzE5VMAQAlMJzABgAAAA="),
				Principal:               to.Ptr("aaduser=f3923a3e-ad57-4752-b1a9-fbf3c8e5e082;72f988bf-86f1-41af-91ab-2d7cd011db47"),
			},
			SystemData: &armsecurity.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-31T13:47:50.328Z"); return t }()),
				CreatedBy:          to.Ptr("user@contoso.com"),
				CreatedByType:      to.Ptr(armsecurity.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-31T13:47:50.328Z"); return t }()),
				LastModifiedBy:     to.Ptr("user@contoso.com"),
				LastModifiedByType: to.Ptr(armsecurity.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.CustomEntityStoreAssignment) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CustomEntityStoreAssignment)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/preview/2021-07-01-preview/examples/CustomEntityStoreAssignments/customEntityStoreAssignmentGet_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCustomEntityStoreAssignments_Create(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/preview/2021-07-01-preview/examples/CustomEntityStoreAssignments/customEntityStoreAssignmentCreate_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a custom entity store assignment"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewCustomEntityStoreAssignmentsClient("e5d1b86c-3051-44d5-8802-aa65d45a279b", cred, &options)
	res, err := client.Create(ctx,
		"TestResourceGroup",
		"33e7cc6e-a139-4723-a0e5-76993aee0771",
		armsecurity.CustomEntityStoreAssignmentRequest{
			Properties: &armsecurity.CustomEntityStoreAssignmentRequestProperties{
				Principal: to.Ptr("aaduser=f3923a3e-ad57-4752-b1a9-fbf3c8e5e082;72f988bf-86f1-41af-91ab-2d7cd011db47"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/preview/2021-07-01-preview/examples/CustomEntityStoreAssignments/customEntityStoreAssignmentCreate_example.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurity.CustomEntityStoreAssignment{
			Name: to.Ptr("33e7cc6e-a139-4723-a0e5-76993aee0771"),
			Type: to.Ptr("Microsoft.Security/customEntityStoreAssignments"),
			ID:   to.Ptr("/subscriptions/e5d1b86c-3051-44d5-8802-aa65d45a279b/resourcegroups/TestResourceGroup/providers/Microsoft.Security/customEntityStoreAssignments/33e7cc6e-a139-4723-a0e5-76993aee0771"),
			Properties: &armsecurity.CustomEntityStoreAssignmentProperties{
				EntityStoreDatabaseLink: to.Ptr("https://dataexplorer.azure.com/clusters/securitydatastore.centralus/databases/DiscoveryAwsKedamari?query=H4sIAAAAAAAAAwtILC4uzy9KCcjPyUyu5OWqUShJzE5VMAQAlMJzABgAAAA="),
				Principal:               to.Ptr("aaduser=f3923a3e-ad57-4752-b1a9-fbf3c8e5e082;72f988bf-86f1-41af-91ab-2d7cd011db47"),
			},
			SystemData: &armsecurity.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-31T13:47:50.328Z"); return t }()),
				CreatedBy:          to.Ptr("user@contoso.com"),
				CreatedByType:      to.Ptr(armsecurity.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-31T13:47:50.328Z"); return t }()),
				LastModifiedBy:     to.Ptr("user@contoso.com"),
				LastModifiedByType: to.Ptr(armsecurity.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.CustomEntityStoreAssignment) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CustomEntityStoreAssignment)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/preview/2021-07-01-preview/examples/CustomEntityStoreAssignments/customEntityStoreAssignmentCreate_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCustomEntityStoreAssignments_Delete(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/preview/2021-07-01-preview/examples/CustomEntityStoreAssignments/customEntityStoreAssignmentDelete_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a custom entity store assignment"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewCustomEntityStoreAssignmentsClient("e5d1b86c-3051-44d5-8802-aa65d45a279b", cred, &options)
	_, err := client.Delete(ctx,
		"TestResourceGroup",
		"33e7cc6e-a139-4723-a0e5-76993aee0771",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/preview/2021-07-01-preview/examples/CustomEntityStoreAssignments/customEntityStoreAssignmentDelete_example.json: %v", err)
	}
}

func TestCustomEntityStoreAssignments_ListByResourceGroup(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/preview/2021-07-01-preview/examples/CustomEntityStoreAssignments/customEntityStoreAssignmentListByResourceGroup_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List custom entity store assignments in a subscription and a resource group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewCustomEntityStoreAssignmentsClient("e5d1b86c-3051-44d5-8802-aa65d45a279b", cred, &options)
	pager := client.ListByResourceGroup("TestResourceGroup",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/security/resource-manager/Microsoft.Security/preview/2021-07-01-preview/examples/CustomEntityStoreAssignments/customEntityStoreAssignmentListByResourceGroup_example.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsecurity.CustomEntityStoreAssignmentsListResult{
			Value: []*armsecurity.CustomEntityStoreAssignment{
				{
					Name: to.Ptr("33e7cc6e-a139-4723-a0e5-76993aee0771"),
					Type: to.Ptr("Microsoft.Security/customEntityStoreAssignments"),
					ID:   to.Ptr("/subscriptions/e5d1b86c-3051-44d5-8802-aa65d45a279b/resourcegroups/TestResourceGroup/providers/Microsoft.Security/customEntityStoreAssignments/33e7cc6e-a139-4723-a0e5-76993aee0771"),
					Properties: &armsecurity.CustomEntityStoreAssignmentProperties{
						EntityStoreDatabaseLink: to.Ptr("https://dataexplorer.azure.com/clusters/securitydatastore.centralus/databases/DiscoveryAwsKedamari?query=H4sIAAAAAAAAAwtILC4uzy9KCcjPyUyu5OWqUShJzE5VMAQAlMJzABgAAAA="),
						Principal:               to.Ptr("aaduser=f3923a3e-ad57-4752-b1a9-fbf3c8e5e082;72f988bf-86f1-41af-91ab-2d7cd011db47"),
					},
					SystemData: &armsecurity.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-31T13:47:50.328Z"); return t }()),
						CreatedBy:          to.Ptr("user@contoso.com"),
						CreatedByType:      to.Ptr(armsecurity.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-31T13:47:50.328Z"); return t }()),
						LastModifiedBy:     to.Ptr("user@contoso.com"),
						LastModifiedByType: to.Ptr(armsecurity.CreatedByTypeUser),
					},
				},
				{
					Name: to.Ptr("a400695c-4728-d5cc-8e19-4b5a76f209df"),
					Type: to.Ptr("Microsoft.Security/customEntityStoreAssignments"),
					ID:   to.Ptr("/subscriptions/e5d1b86c-3051-44d5-8802-aa65d45a279b/resourcegroups/TestResourceGroup/providers/Microsoft.Security/customEntityStoreAssignments/a400695c-4728-d5cc-8e19-4b5a76f209df"),
					Properties: &armsecurity.CustomEntityStoreAssignmentProperties{
						EntityStoreDatabaseLink: to.Ptr("https://dataexplorer.azure.com/clusters/securitydatastore.centralus/databases/DiscoveryAwsKedamari?query=H4sIAAAAAAAAAwvIz8lMrgzKz0nlqlFIrShJzUtR8Cz2SE3MKcmoVLBVUE9LzClOVQcA1IFnficAAAA="),
						Principal:               to.Ptr("aaduser=f6e2564c-f34a-9b61-416c-5e5e7e521118;72f988bf-86f1-41af-91ab-2d7cd011db47"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.CustomEntityStoreAssignmentsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.CustomEntityStoreAssignmentsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/preview/2021-07-01-preview/examples/CustomEntityStoreAssignments/customEntityStoreAssignmentListByResourceGroup_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCustomEntityStoreAssignments_ListBySubscription(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/preview/2021-07-01-preview/examples/CustomEntityStoreAssignments/customEntityStoreAssignmentListBySubscription_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List custom entity store assignments in a subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewCustomEntityStoreAssignmentsClient("e5d1b86c-3051-44d5-8802-aa65d45a279b", cred, &options)
	pager := client.ListBySubscription(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/security/resource-manager/Microsoft.Security/preview/2021-07-01-preview/examples/CustomEntityStoreAssignments/customEntityStoreAssignmentListBySubscription_example.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsecurity.CustomEntityStoreAssignmentsListResult{
			Value: []*armsecurity.CustomEntityStoreAssignment{
				{
					Name: to.Ptr("33e7cc6e-a139-4723-a0e5-76993aee0771"),
					Type: to.Ptr("Microsoft.Security/customEntityStoreAssignments"),
					ID:   to.Ptr("/subscriptions/e5d1b86c-3051-44d5-8802-aa65d45a279b/resourcegroups/TestResourceGroup/providers/Microsoft.Security/customEntityStoreAssignments/33e7cc6e-a139-4723-a0e5-76993aee0771"),
					Properties: &armsecurity.CustomEntityStoreAssignmentProperties{
						EntityStoreDatabaseLink: to.Ptr("https://dataexplorer.azure.com/clusters/securitydatastore.centralus/databases/DiscoveryAwsKedamari?query=H4sIAAAAAAAAAwtILC4uzy9KCcjPyUyu5OWqUShJzE5VMAQAlMJzABgAAAA="),
						Principal:               to.Ptr("aaduser=f3923a3e-ad57-4752-b1a9-fbf3c8e5e082;72f988bf-86f1-41af-91ab-2d7cd011db47"),
					},
					SystemData: &armsecurity.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-31T13:47:50.328Z"); return t }()),
						CreatedBy:          to.Ptr("user@contoso.com"),
						CreatedByType:      to.Ptr(armsecurity.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-31T13:47:50.328Z"); return t }()),
						LastModifiedBy:     to.Ptr("user@contoso.com"),
						LastModifiedByType: to.Ptr(armsecurity.CreatedByTypeUser),
					},
				},
				{
					Name: to.Ptr("a400695c-4728-d5cc-8e19-4b5a76f209df"),
					Type: to.Ptr("Microsoft.Security/customEntityStoreAssignments"),
					ID:   to.Ptr("/subscriptions/e5d1b86c-3051-44d5-8802-aa65d45a279b/resourcegroups/TestResourceGroup/providers/Microsoft.Security/customEntityStoreAssignments/a400695c-4728-d5cc-8e19-4b5a76f209df"),
					Properties: &armsecurity.CustomEntityStoreAssignmentProperties{
						EntityStoreDatabaseLink: to.Ptr("https://dataexplorer.azure.com/clusters/securitydatastore.centralus/databases/DiscoveryAwsKedamari?query=H4sIAAAAAAAAAwvIz8lMrgzKz0nlqlFIrShJzUtR8Cz2SE3MKcmoVLBVUE9LzClOVQcA1IFnficAAAA="),
						Principal:               to.Ptr("aaduser=f6e2564c-f34a-9b61-416c-5e5e7e521118;72f988bf-86f1-41af-91ab-2d7cd011db47"),
					},
					SystemData: &armsecurity.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-31T13:01:50.328Z"); return t }()),
						CreatedBy:          to.Ptr("user@contoso.com"),
						CreatedByType:      to.Ptr(armsecurity.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-31T13:01:50.328Z"); return t }()),
						LastModifiedBy:     to.Ptr("user@contoso.com"),
						LastModifiedByType: to.Ptr(armsecurity.CreatedByTypeUser),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.CustomEntityStoreAssignmentsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.CustomEntityStoreAssignmentsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/preview/2021-07-01-preview/examples/CustomEntityStoreAssignments/customEntityStoreAssignmentListBySubscription_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestComplianceResults_List(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/stable/2017-08-01/examples/ComplianceResults/ListComplianceResults_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get compliance results on subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewComplianceResultsClient(cred, &options)
	pager := client.List("subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/security/resource-manager/Microsoft.Security/stable/2017-08-01/examples/ComplianceResults/ListComplianceResults_example.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsecurity.ComplianceResultList{
			Value: []*armsecurity.ComplianceResult{
				{
					Name: to.Ptr("DesignateMoreThanOneOwner"),
					Type: to.Ptr("Microsoft.Security/complianceResults"),
					ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/complianceResults/DesignateMoreThanOneOwner"),
					Properties: &armsecurity.ComplianceResultProperties{
						ResourceStatus: to.Ptr(armsecurity.ResourceStatusHealthy),
					},
				},
				{
					Name: to.Ptr("RemoveExternalAccountsWithReadPermissions"),
					Type: to.Ptr("Microsoft.Security/complianceResults"),
					ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/complianceResults/RemoveExternalAccountsWithReadPermissions"),
					Properties: &armsecurity.ComplianceResultProperties{
						ResourceStatus: to.Ptr(armsecurity.ResourceStatusNotHealthy),
					},
				},
				{
					Name: to.Ptr("RemoveDeprecatedAccounts"),
					Type: to.Ptr("Microsoft.Security/complianceResults"),
					ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/complianceResults/RemoveDeprecatedAccounts"),
					Properties: &armsecurity.ComplianceResultProperties{
						ResourceStatus: to.Ptr(armsecurity.ResourceStatusHealthy),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ComplianceResultList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ComplianceResultList)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/stable/2017-08-01/examples/ComplianceResults/ListComplianceResults_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestComplianceResults_Get(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/stable/2017-08-01/examples/ComplianceResults/GetComplianceResults_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get compliance results on subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewComplianceResultsClient(cred, &options)
	res, err := client.Get(ctx,
		"subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23",
		"DesignateMoreThanOneOwner",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/stable/2017-08-01/examples/ComplianceResults/GetComplianceResults_example.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurity.ComplianceResult{
			Name: to.Ptr("DesignateMoreThanOneOwner"),
			Type: to.Ptr("Microsoft.Security/complianceResults"),
			ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/complianceResults/DesignateMoreThanOneOwner"),
			Properties: &armsecurity.ComplianceResultProperties{
				ResourceStatus: to.Ptr(armsecurity.ResourceStatusHealthy),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ComplianceResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ComplianceResult)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/stable/2017-08-01/examples/ComplianceResults/GetComplianceResults_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPricings_List(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/stable/2018-06-01/examples/Pricings/ListPricings_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get pricings on subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewPricingsClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23", cred, &options)
	res, err := client.List(ctx,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/stable/2018-06-01/examples/Pricings/ListPricings_example.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurity.PricingList{
			Value: []*armsecurity.Pricing{
				{
					Name: to.Ptr("VirtualMachines"),
					Type: to.Ptr("Microsoft.Security/pricings"),
					ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/pricings/VirtualMachines"),
					Properties: &armsecurity.PricingProperties{
						PricingTier: to.Ptr(armsecurity.PricingTierStandard),
					},
				},
				{
					Name: to.Ptr("SqlServers"),
					Type: to.Ptr("Microsoft.Security/pricings"),
					ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/pricings/SqlServers"),
					Properties: &armsecurity.PricingProperties{
						PricingTier: to.Ptr(armsecurity.PricingTierStandard),
					},
				},
				{
					Name: to.Ptr("AppServices"),
					Type: to.Ptr("Microsoft.Security/pricings"),
					ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/pricings/AppServices"),
					Properties: &armsecurity.PricingProperties{
						PricingTier: to.Ptr(armsecurity.PricingTierFree),
					},
				},
				{
					Name: to.Ptr("StorageAccounts"),
					Type: to.Ptr("Microsoft.Security/pricings"),
					ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/pricings/StorageAccounts"),
					Properties: &armsecurity.PricingProperties{
						PricingTier: to.Ptr(armsecurity.PricingTierStandard),
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.PricingList) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PricingList)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/stable/2018-06-01/examples/Pricings/ListPricings_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPricings_Get(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/stable/2018-06-01/examples/Pricings/GetPricingByName_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get pricings on subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewPricingsClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23", cred, &options)
	res, err := client.Get(ctx,
		"VirtualMachines",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/stable/2018-06-01/examples/Pricings/GetPricingByName_example.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurity.Pricing{
			Name: to.Ptr("VirtualMachines"),
			Type: to.Ptr("Microsoft.Security/pricings"),
			ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/pricings/VirtualMachines"),
			Properties: &armsecurity.PricingProperties{
				PricingTier: to.Ptr(armsecurity.PricingTierStandard),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Pricing) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Pricing)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/stable/2018-06-01/examples/Pricings/GetPricingByName_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPricings_Update(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/stable/2018-06-01/examples/Pricings/PutPricingByName_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update pricing on subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewPricingsClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23", cred, &options)
	res, err := client.Update(ctx,
		"VirtualMachines",
		armsecurity.Pricing{
			Name: to.Ptr("VirtualMachines"),
			Type: to.Ptr("Microsoft.Security/pricings"),
			ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/pricings/VirtualMachines"),
			Properties: &armsecurity.PricingProperties{
				PricingTier: to.Ptr(armsecurity.PricingTierStandard),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/stable/2018-06-01/examples/Pricings/PutPricingByName_example.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurity.Pricing{
			Name: to.Ptr("VirtualMachines"),
			Type: to.Ptr("Microsoft.Security/pricings"),
			ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/pricings/VirtualMachines"),
			Properties: &armsecurity.PricingProperties{
				PricingTier: to.Ptr(armsecurity.PricingTierStandard),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Pricing) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Pricing)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/stable/2018-06-01/examples/Pricings/PutPricingByName_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAdvancedThreatProtection_Get(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/stable/2019-01-01/examples/AdvancedThreatProtection/GetAdvancedThreatProtectionSettings_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets the Advanced Threat Protection settings for the specified resource."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewAdvancedThreatProtectionClient(cred, &options)
	res, err := client.Get(ctx,
		"subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/SampleRG/providers/Microsoft.Storage/storageAccounts/samplestorageaccount",
		armsecurity.Enum5Current,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/stable/2019-01-01/examples/AdvancedThreatProtection/GetAdvancedThreatProtectionSettings_example.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurity.AdvancedThreatProtectionSetting{
			Name: to.Ptr("current"),
			Type: to.Ptr("Microsoft.Security/advancedThreatProtectionSettings"),
			ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/SampleRG/providers/Microsoft.Storage/storageAccounts/samplestorageaccount/providers/Microsoft.Security/advancedThreatProtectionSettings/current"),
			Properties: &armsecurity.AdvancedThreatProtectionProperties{
				IsEnabled: to.Ptr(true),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AdvancedThreatProtectionSetting) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AdvancedThreatProtectionSetting)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/stable/2019-01-01/examples/AdvancedThreatProtection/GetAdvancedThreatProtectionSettings_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAdvancedThreatProtection_Create(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/stable/2019-01-01/examples/AdvancedThreatProtection/PutAdvancedThreatProtectionSettings_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Creates or updates the Advanced Threat Protection settings on a specified resource."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewAdvancedThreatProtectionClient(cred, &options)
	res, err := client.Create(ctx,
		"subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/SampleRG/providers/Microsoft.Storage/storageAccounts/samplestorageaccount",
		armsecurity.Enum5Current,
		armsecurity.AdvancedThreatProtectionSetting{
			Name: to.Ptr("current"),
			Type: to.Ptr("Microsoft.Security/advancedThreatProtectionSettings"),
			ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/SampleRG/providers/Microsoft.Storage/storageAccounts/samplestorageaccount/providers/Microsoft.Security/advancedThreatProtectionSettings/current"),
			Properties: &armsecurity.AdvancedThreatProtectionProperties{
				IsEnabled: to.Ptr(true),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/stable/2019-01-01/examples/AdvancedThreatProtection/PutAdvancedThreatProtectionSettings_example.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurity.AdvancedThreatProtectionSetting{
			Name: to.Ptr("current"),
			Type: to.Ptr("Microsoft.Security/advancedThreatProtectionSettings"),
			ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/SampleRG/providers/Microsoft.Storage/storageAccounts/samplestorageaccount/providers/Microsoft.Security/advancedThreatProtectionSettings/current"),
			Properties: &armsecurity.AdvancedThreatProtectionProperties{
				IsEnabled: to.Ptr(true),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AdvancedThreatProtectionSetting) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AdvancedThreatProtectionSetting)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/stable/2019-01-01/examples/AdvancedThreatProtection/PutAdvancedThreatProtectionSettings_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDeviceSecurityGroups_List(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/stable/2019-08-01/examples/DeviceSecurityGroups/ListDeviceSecurityGroups_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all device security groups for the specified IoT Hub resource"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewDeviceSecurityGroupsClient(cred, &options)
	pager := client.List("subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/SampleRG/providers/Microsoft.Devices/iotHubs/sampleiothub",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/security/resource-manager/Microsoft.Security/stable/2019-08-01/examples/DeviceSecurityGroups/ListDeviceSecurityGroups_example.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsecurity.DeviceSecurityGroupList{
			Value: []*armsecurity.DeviceSecurityGroup{
				{
					Name: to.Ptr("samplesecuritygroup"),
					Type: to.Ptr("Microsoft.Security/deviceSecurityGroups"),
					ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/SampleRG/providers/Microsoft.Devices/iotHubs/sampleiothub/providers/Microsoft.Security/deviceSecurityGroups/samplesecuritygroup"),
					Properties: &armsecurity.DeviceSecurityGroupProperties{
						AllowlistRules: []armsecurity.AllowlistCustomAlertRuleClassification{
							&armsecurity.ConnectionToIPNotAllowed{
								Description:     to.Ptr("Get an alert when an outbound connection is created between your device and an ip that isn't allowed"),
								DisplayName:     to.Ptr("Outbound connection to an ip that isn't allowed"),
								IsEnabled:       to.Ptr(false),
								RuleType:        to.Ptr("ConnectionToIpNotAllowed"),
								ValueType:       to.Ptr(armsecurity.ValueTypeIPCidr),
								AllowlistValues: []*string{},
							},
							&armsecurity.LocalUserNotAllowed{
								Description:     to.Ptr("Get an alert when a local user that isn't allowed logins to the device"),
								DisplayName:     to.Ptr("Login by a local user that isn't allowed"),
								IsEnabled:       to.Ptr(false),
								RuleType:        to.Ptr("LocalUserNotAllowed"),
								ValueType:       to.Ptr(armsecurity.ValueTypeString),
								AllowlistValues: []*string{},
							},
							&armsecurity.ProcessNotAllowed{
								Description:     to.Ptr("Get an alert when a process that isn't allowed is executed"),
								DisplayName:     to.Ptr("Execution of a process that isn't allowed"),
								IsEnabled:       to.Ptr(false),
								RuleType:        to.Ptr("ProcessNotAllowed"),
								ValueType:       to.Ptr(armsecurity.ValueTypeString),
								AllowlistValues: []*string{},
							}},
						DenylistRules:  []*armsecurity.DenylistCustomAlertRule{},
						ThresholdRules: []armsecurity.ThresholdCustomAlertRuleClassification{},
						TimeWindowRules: []armsecurity.TimeWindowCustomAlertRuleClassification{
							&armsecurity.ActiveConnectionsNotInAllowedRange{
								Description:    to.Ptr("Get an alert when the number of active connections of a device in the time window is not in the allowed range"),
								DisplayName:    to.Ptr("Number of active connections is not in allowed range"),
								IsEnabled:      to.Ptr(false),
								RuleType:       to.Ptr("ActiveConnectionsNotInAllowedRange"),
								MaxThreshold:   to.Ptr[int32](0),
								MinThreshold:   to.Ptr[int32](0),
								TimeWindowSize: to.Ptr("PT15M"),
							},
							&armsecurity.AmqpC2DMessagesNotInAllowedRange{
								Description:    to.Ptr("Get an alert when the number of cloud to device messages (AMQP protocol) in the time window is not in the allowed range"),
								DisplayName:    to.Ptr("Number of cloud to device messages (AMQP protocol) is not in allowed range"),
								IsEnabled:      to.Ptr(false),
								RuleType:       to.Ptr("AmqpC2DMessagesNotInAllowedRange"),
								MaxThreshold:   to.Ptr[int32](0),
								MinThreshold:   to.Ptr[int32](0),
								TimeWindowSize: to.Ptr("PT15M"),
							},
							&armsecurity.MqttC2DMessagesNotInAllowedRange{
								Description:    to.Ptr("Get an alert when the number of cloud to device messages (MQTT protocol) in the time window is not in the allowed range"),
								DisplayName:    to.Ptr("Number of cloud to device messages (MQTT protocol) is not in allowed range"),
								IsEnabled:      to.Ptr(false),
								RuleType:       to.Ptr("MqttC2DMessagesNotInAllowedRange"),
								MaxThreshold:   to.Ptr[int32](0),
								MinThreshold:   to.Ptr[int32](0),
								TimeWindowSize: to.Ptr("PT15M"),
							},
							&armsecurity.HTTPC2DMessagesNotInAllowedRange{
								Description:    to.Ptr("Get an alert when the number of cloud to device messages (HTTP protocol) in the time window is not in the allowed range"),
								DisplayName:    to.Ptr("Number of cloud to device messages (HTTP protocol) is not in allowed range"),
								IsEnabled:      to.Ptr(false),
								RuleType:       to.Ptr("HttpC2DMessagesNotInAllowedRange"),
								MaxThreshold:   to.Ptr[int32](0),
								MinThreshold:   to.Ptr[int32](0),
								TimeWindowSize: to.Ptr("PT15M"),
							},
							&armsecurity.AmqpC2DRejectedMessagesNotInAllowedRange{
								Description:    to.Ptr("Get an alert when the number of cloud to device messages (AMQP protocol) that were rejected by the device in the time window is not in the allowed range"),
								DisplayName:    to.Ptr("Number of rejected cloud to device messages (AMQP protocol) is not in allowed range"),
								IsEnabled:      to.Ptr(false),
								RuleType:       to.Ptr("AmqpC2DRejectedMessagesNotInAllowedRange"),
								MaxThreshold:   to.Ptr[int32](0),
								MinThreshold:   to.Ptr[int32](0),
								TimeWindowSize: to.Ptr("PT15M"),
							},
							&armsecurity.MqttC2DRejectedMessagesNotInAllowedRange{
								Description:    to.Ptr("Get an alert when the number of cloud to device messages (MQTT protocol) that were rejected by the device in the time window is not in the allowed range"),
								DisplayName:    to.Ptr("Number of rejected cloud to device messages (MQTT protocol) is not in allowed range"),
								IsEnabled:      to.Ptr(false),
								RuleType:       to.Ptr("MqttC2DRejectedMessagesNotInAllowedRange"),
								MaxThreshold:   to.Ptr[int32](0),
								MinThreshold:   to.Ptr[int32](0),
								TimeWindowSize: to.Ptr("PT15M"),
							},
							&armsecurity.HTTPC2DRejectedMessagesNotInAllowedRange{
								Description:    to.Ptr("Get an alert when the number of cloud to device messages (HTTP protocol) that were rejected by the device in the time window is not in the allowed range"),
								DisplayName:    to.Ptr("Number of rejected cloud to device messages (HTTP protocol) is not in allowed range"),
								IsEnabled:      to.Ptr(false),
								RuleType:       to.Ptr("HttpC2DRejectedMessagesNotInAllowedRange"),
								MaxThreshold:   to.Ptr[int32](0),
								MinThreshold:   to.Ptr[int32](0),
								TimeWindowSize: to.Ptr("PT15M"),
							},
							&armsecurity.AmqpD2CMessagesNotInAllowedRange{
								Description:    to.Ptr("Get an alert when the number of device to cloud messages (AMQP protocol) in the time window is not in the allowed range"),
								DisplayName:    to.Ptr("Number of device to cloud messages (AMQP protocol) is not in allowed range"),
								IsEnabled:      to.Ptr(false),
								RuleType:       to.Ptr("AmqpD2CMessagesNotInAllowedRange"),
								MaxThreshold:   to.Ptr[int32](0),
								MinThreshold:   to.Ptr[int32](0),
								TimeWindowSize: to.Ptr("PT15M"),
							},
							&armsecurity.MqttD2CMessagesNotInAllowedRange{
								Description:    to.Ptr("Get an alert when the number of device to cloud messages (MQTT protocol) in the time window is not in the allowed range"),
								DisplayName:    to.Ptr("Number of device to cloud messages (MQTT protocol) is not in allowed range"),
								IsEnabled:      to.Ptr(false),
								RuleType:       to.Ptr("MqttD2CMessagesNotInAllowedRange"),
								MaxThreshold:   to.Ptr[int32](0),
								MinThreshold:   to.Ptr[int32](0),
								TimeWindowSize: to.Ptr("PT15M"),
							},
							&armsecurity.HTTPD2CMessagesNotInAllowedRange{
								Description:    to.Ptr("Get an alert when the number of device to cloud messages (HTTP protocol) in the time window is not in the allowed range"),
								DisplayName:    to.Ptr("Number of device to cloud messages (HTTP protocol) is not in allowed range"),
								IsEnabled:      to.Ptr(false),
								RuleType:       to.Ptr("HttpD2CMessagesNotInAllowedRange"),
								MaxThreshold:   to.Ptr[int32](0),
								MinThreshold:   to.Ptr[int32](0),
								TimeWindowSize: to.Ptr("PT15M"),
							},
							&armsecurity.DirectMethodInvokesNotInAllowedRange{
								Description:    to.Ptr("Get an alert when the number of direct method invokes in the time window is not in the allowed range"),
								DisplayName:    to.Ptr("Number of direct method invokes is not in allowed range"),
								IsEnabled:      to.Ptr(false),
								RuleType:       to.Ptr("DirectMethodInvokesNotInAllowedRange"),
								MaxThreshold:   to.Ptr[int32](0),
								MinThreshold:   to.Ptr[int32](0),
								TimeWindowSize: to.Ptr("PT15M"),
							},
							&armsecurity.FailedLocalLoginsNotInAllowedRange{
								Description:    to.Ptr("Get an alert when the number of failed local logins on the device in the time window is not in the allowed range"),
								DisplayName:    to.Ptr("Number of failed local logins is not in allowed range"),
								IsEnabled:      to.Ptr(false),
								RuleType:       to.Ptr("FailedLocalLoginsNotInAllowedRange"),
								MaxThreshold:   to.Ptr[int32](0),
								MinThreshold:   to.Ptr[int32](0),
								TimeWindowSize: to.Ptr("PT15M"),
							},
							&armsecurity.FileUploadsNotInAllowedRange{
								Description:    to.Ptr("Get an alert when the number of file uploads from the device to the cloud in the time window is not in the allowed range"),
								DisplayName:    to.Ptr("Number of file uploads is not in allowed range"),
								IsEnabled:      to.Ptr(false),
								RuleType:       to.Ptr("FileUploadsNotInAllowedRange"),
								MaxThreshold:   to.Ptr[int32](0),
								MinThreshold:   to.Ptr[int32](0),
								TimeWindowSize: to.Ptr("PT15M"),
							},
							&armsecurity.QueuePurgesNotInAllowedRange{
								Description:    to.Ptr("Get an alert when the number of device queue purges in the time window is not in the allowed range"),
								DisplayName:    to.Ptr("Number of device queue purges is not in allowed range"),
								IsEnabled:      to.Ptr(false),
								RuleType:       to.Ptr("QueuePurgesNotInAllowedRange"),
								MaxThreshold:   to.Ptr[int32](0),
								MinThreshold:   to.Ptr[int32](0),
								TimeWindowSize: to.Ptr("PT15M"),
							},
							&armsecurity.TwinUpdatesNotInAllowedRange{
								Description:    to.Ptr("Get an alert when the number of twin updates (by the device or the service) in the time window is not in the allowed range"),
								DisplayName:    to.Ptr("Number of twin updates is not in allowed range"),
								IsEnabled:      to.Ptr(false),
								RuleType:       to.Ptr("TwinUpdatesNotInAllowedRange"),
								MaxThreshold:   to.Ptr[int32](0),
								MinThreshold:   to.Ptr[int32](0),
								TimeWindowSize: to.Ptr("PT15M"),
							},
							&armsecurity.UnauthorizedOperationsNotInAllowedRange{
								Description:    to.Ptr("Get an alert when the number unauthorized operations in the time window is not in the allowed range. Unauthorized operations are operations that affect the device (or done by it) that fail because of an unauthorized error"),
								DisplayName:    to.Ptr("Number of unauthorized operations is not in allowed range"),
								IsEnabled:      to.Ptr(false),
								RuleType:       to.Ptr("UnauthorizedOperationsNotInAllowedRange"),
								MaxThreshold:   to.Ptr[int32](0),
								MinThreshold:   to.Ptr[int32](0),
								TimeWindowSize: to.Ptr("PT15M"),
							}},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DeviceSecurityGroupList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DeviceSecurityGroupList)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/stable/2019-08-01/examples/DeviceSecurityGroups/ListDeviceSecurityGroups_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDeviceSecurityGroups_Get(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/stable/2019-08-01/examples/DeviceSecurityGroups/GetDeviceSecurityGroups_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a device security group for the specified IoT Hub resource"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewDeviceSecurityGroupsClient(cred, &options)
	res, err := client.Get(ctx,
		"subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/SampleRG/providers/Microsoft.Devices/iotHubs/sampleiothub",
		"samplesecuritygroup",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/stable/2019-08-01/examples/DeviceSecurityGroups/GetDeviceSecurityGroups_example.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurity.DeviceSecurityGroup{
			Name: to.Ptr("samplesecuritygroup"),
			Type: to.Ptr("Microsoft.Security/deviceSecurityGroups"),
			ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/SampleRG/providers/Microsoft.Devices/iotHubs/sampleiothub/providers/Microsoft.Security/deviceSecurityGroups/samplesecuritygroup"),
			Properties: &armsecurity.DeviceSecurityGroupProperties{
				AllowlistRules: []armsecurity.AllowlistCustomAlertRuleClassification{
					&armsecurity.ConnectionToIPNotAllowed{
						Description:     to.Ptr("Get an alert when an outbound connection is created between your device and an ip that isn't allowed"),
						DisplayName:     to.Ptr("Outbound connection to an ip that isn't allowed"),
						IsEnabled:       to.Ptr(false),
						RuleType:        to.Ptr("ConnectionToIpNotAllowed"),
						ValueType:       to.Ptr(armsecurity.ValueTypeIPCidr),
						AllowlistValues: []*string{},
					},
					&armsecurity.LocalUserNotAllowed{
						Description:     to.Ptr("Get an alert when a local user that isn't allowed logins to the device"),
						DisplayName:     to.Ptr("Login by a local user that isn't allowed"),
						IsEnabled:       to.Ptr(false),
						RuleType:        to.Ptr("LocalUserNotAllowed"),
						ValueType:       to.Ptr(armsecurity.ValueTypeString),
						AllowlistValues: []*string{},
					},
					&armsecurity.ProcessNotAllowed{
						Description:     to.Ptr("Get an alert when a process that isn't allowed is executed"),
						DisplayName:     to.Ptr("Execution of a process that isn't allowed"),
						IsEnabled:       to.Ptr(false),
						RuleType:        to.Ptr("ProcessNotAllowed"),
						ValueType:       to.Ptr(armsecurity.ValueTypeString),
						AllowlistValues: []*string{},
					}},
				DenylistRules:  []*armsecurity.DenylistCustomAlertRule{},
				ThresholdRules: []armsecurity.ThresholdCustomAlertRuleClassification{},
				TimeWindowRules: []armsecurity.TimeWindowCustomAlertRuleClassification{
					&armsecurity.ActiveConnectionsNotInAllowedRange{
						Description:    to.Ptr("Get an alert when the number of active connections of a device in the time window is not in the allowed range"),
						DisplayName:    to.Ptr("Number of active connections is not in allowed range"),
						IsEnabled:      to.Ptr(false),
						RuleType:       to.Ptr("ActiveConnectionsNotInAllowedRange"),
						MaxThreshold:   to.Ptr[int32](0),
						MinThreshold:   to.Ptr[int32](0),
						TimeWindowSize: to.Ptr("PT15M"),
					},
					&armsecurity.AmqpC2DMessagesNotInAllowedRange{
						Description:    to.Ptr("Get an alert when the number of cloud to device messages (AMQP protocol) in the time window is not in the allowed range"),
						DisplayName:    to.Ptr("Number of cloud to device messages (AMQP protocol) is not in allowed range"),
						IsEnabled:      to.Ptr(false),
						RuleType:       to.Ptr("AmqpC2DMessagesNotInAllowedRange"),
						MaxThreshold:   to.Ptr[int32](0),
						MinThreshold:   to.Ptr[int32](0),
						TimeWindowSize: to.Ptr("PT15M"),
					},
					&armsecurity.MqttC2DMessagesNotInAllowedRange{
						Description:    to.Ptr("Get an alert when the number of cloud to device messages (MQTT protocol) in the time window is not in the allowed range"),
						DisplayName:    to.Ptr("Number of cloud to device messages (MQTT protocol) is not in allowed range"),
						IsEnabled:      to.Ptr(false),
						RuleType:       to.Ptr("MqttC2DMessagesNotInAllowedRange"),
						MaxThreshold:   to.Ptr[int32](0),
						MinThreshold:   to.Ptr[int32](0),
						TimeWindowSize: to.Ptr("PT15M"),
					},
					&armsecurity.HTTPC2DMessagesNotInAllowedRange{
						Description:    to.Ptr("Get an alert when the number of cloud to device messages (HTTP protocol) in the time window is not in the allowed range"),
						DisplayName:    to.Ptr("Number of cloud to device messages (HTTP protocol) is not in allowed range"),
						IsEnabled:      to.Ptr(false),
						RuleType:       to.Ptr("HttpC2DMessagesNotInAllowedRange"),
						MaxThreshold:   to.Ptr[int32](0),
						MinThreshold:   to.Ptr[int32](0),
						TimeWindowSize: to.Ptr("PT15M"),
					},
					&armsecurity.AmqpC2DRejectedMessagesNotInAllowedRange{
						Description:    to.Ptr("Get an alert when the number of cloud to device messages (AMQP protocol) that were rejected by the device in the time window is not in the allowed range"),
						DisplayName:    to.Ptr("Number of rejected cloud to device messages (AMQP protocol) is not in allowed range"),
						IsEnabled:      to.Ptr(false),
						RuleType:       to.Ptr("AmqpC2DRejectedMessagesNotInAllowedRange"),
						MaxThreshold:   to.Ptr[int32](0),
						MinThreshold:   to.Ptr[int32](0),
						TimeWindowSize: to.Ptr("PT15M"),
					},
					&armsecurity.MqttC2DRejectedMessagesNotInAllowedRange{
						Description:    to.Ptr("Get an alert when the number of cloud to device messages (MQTT protocol) that were rejected by the device in the time window is not in the allowed range"),
						DisplayName:    to.Ptr("Number of rejected cloud to device messages (MQTT protocol) is not in allowed range"),
						IsEnabled:      to.Ptr(false),
						RuleType:       to.Ptr("MqttC2DRejectedMessagesNotInAllowedRange"),
						MaxThreshold:   to.Ptr[int32](0),
						MinThreshold:   to.Ptr[int32](0),
						TimeWindowSize: to.Ptr("PT15M"),
					},
					&armsecurity.HTTPC2DRejectedMessagesNotInAllowedRange{
						Description:    to.Ptr("Get an alert when the number of cloud to device messages (HTTP protocol) that were rejected by the device in the time window is not in the allowed range"),
						DisplayName:    to.Ptr("Number of rejected cloud to device messages (HTTP protocol) is not in allowed range"),
						IsEnabled:      to.Ptr(false),
						RuleType:       to.Ptr("HttpC2DRejectedMessagesNotInAllowedRange"),
						MaxThreshold:   to.Ptr[int32](0),
						MinThreshold:   to.Ptr[int32](0),
						TimeWindowSize: to.Ptr("PT15M"),
					},
					&armsecurity.AmqpD2CMessagesNotInAllowedRange{
						Description:    to.Ptr("Get an alert when the number of device to cloud messages (AMQP protocol) in the time window is not in the allowed range"),
						DisplayName:    to.Ptr("Number of device to cloud messages (AMQP protocol) is not in allowed range"),
						IsEnabled:      to.Ptr(false),
						RuleType:       to.Ptr("AmqpD2CMessagesNotInAllowedRange"),
						MaxThreshold:   to.Ptr[int32](0),
						MinThreshold:   to.Ptr[int32](0),
						TimeWindowSize: to.Ptr("PT15M"),
					},
					&armsecurity.MqttD2CMessagesNotInAllowedRange{
						Description:    to.Ptr("Get an alert when the number of device to cloud messages (MQTT protocol) in the time window is not in the allowed range"),
						DisplayName:    to.Ptr("Number of device to cloud messages (MQTT protocol) is not in allowed range"),
						IsEnabled:      to.Ptr(false),
						RuleType:       to.Ptr("MqttD2CMessagesNotInAllowedRange"),
						MaxThreshold:   to.Ptr[int32](0),
						MinThreshold:   to.Ptr[int32](0),
						TimeWindowSize: to.Ptr("PT15M"),
					},
					&armsecurity.HTTPD2CMessagesNotInAllowedRange{
						Description:    to.Ptr("Get an alert when the number of device to cloud messages (HTTP protocol) in the time window is not in the allowed range"),
						DisplayName:    to.Ptr("Number of device to cloud messages (HTTP protocol) is not in allowed range"),
						IsEnabled:      to.Ptr(false),
						RuleType:       to.Ptr("HttpD2CMessagesNotInAllowedRange"),
						MaxThreshold:   to.Ptr[int32](0),
						MinThreshold:   to.Ptr[int32](0),
						TimeWindowSize: to.Ptr("PT15M"),
					},
					&armsecurity.DirectMethodInvokesNotInAllowedRange{
						Description:    to.Ptr("Get an alert when the number of direct method invokes in the time window is not in the allowed range"),
						DisplayName:    to.Ptr("Number of direct method invokes is not in allowed range"),
						IsEnabled:      to.Ptr(false),
						RuleType:       to.Ptr("DirectMethodInvokesNotInAllowedRange"),
						MaxThreshold:   to.Ptr[int32](0),
						MinThreshold:   to.Ptr[int32](0),
						TimeWindowSize: to.Ptr("PT15M"),
					},
					&armsecurity.FailedLocalLoginsNotInAllowedRange{
						Description:    to.Ptr("Get an alert when the number of failed local logins on the device in the time window is not in the allowed range"),
						DisplayName:    to.Ptr("Number of failed local logins is not in allowed range"),
						IsEnabled:      to.Ptr(false),
						RuleType:       to.Ptr("FailedLocalLoginsNotInAllowedRange"),
						MaxThreshold:   to.Ptr[int32](0),
						MinThreshold:   to.Ptr[int32](0),
						TimeWindowSize: to.Ptr("PT15M"),
					},
					&armsecurity.FileUploadsNotInAllowedRange{
						Description:    to.Ptr("Get an alert when the number of file uploads from the device to the cloud in the time window is not in the allowed range"),
						DisplayName:    to.Ptr("Number of file uploads is not in allowed range"),
						IsEnabled:      to.Ptr(false),
						RuleType:       to.Ptr("FileUploadsNotInAllowedRange"),
						MaxThreshold:   to.Ptr[int32](0),
						MinThreshold:   to.Ptr[int32](0),
						TimeWindowSize: to.Ptr("PT15M"),
					},
					&armsecurity.QueuePurgesNotInAllowedRange{
						Description:    to.Ptr("Get an alert when the number of device queue purges in the time window is not in the allowed range"),
						DisplayName:    to.Ptr("Number of device queue purges is not in allowed range"),
						IsEnabled:      to.Ptr(false),
						RuleType:       to.Ptr("QueuePurgesNotInAllowedRange"),
						MaxThreshold:   to.Ptr[int32](0),
						MinThreshold:   to.Ptr[int32](0),
						TimeWindowSize: to.Ptr("PT15M"),
					},
					&armsecurity.TwinUpdatesNotInAllowedRange{
						Description:    to.Ptr("Get an alert when the number of twin updates (by the device or the service) in the time window is not in the allowed range"),
						DisplayName:    to.Ptr("Number of twin updates is not in allowed range"),
						IsEnabled:      to.Ptr(false),
						RuleType:       to.Ptr("TwinUpdatesNotInAllowedRange"),
						MaxThreshold:   to.Ptr[int32](0),
						MinThreshold:   to.Ptr[int32](0),
						TimeWindowSize: to.Ptr("PT15M"),
					},
					&armsecurity.UnauthorizedOperationsNotInAllowedRange{
						Description:    to.Ptr("Get an alert when the number unauthorized operations in the time window is not in the allowed range. Unauthorized operations are operations that affect the device (or done by it) that fail because of an unauthorized error"),
						DisplayName:    to.Ptr("Number of unauthorized operations is not in allowed range"),
						IsEnabled:      to.Ptr(false),
						RuleType:       to.Ptr("UnauthorizedOperationsNotInAllowedRange"),
						MaxThreshold:   to.Ptr[int32](0),
						MinThreshold:   to.Ptr[int32](0),
						TimeWindowSize: to.Ptr("PT15M"),
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DeviceSecurityGroup) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DeviceSecurityGroup)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/stable/2019-08-01/examples/DeviceSecurityGroups/GetDeviceSecurityGroups_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDeviceSecurityGroups_CreateOrUpdate(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/stable/2019-08-01/examples/DeviceSecurityGroups/PutDeviceSecurityGroups_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a device security group for the specified IoT hub resource"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewDeviceSecurityGroupsClient(cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/SampleRG/providers/Microsoft.Devices/iotHubs/sampleiothub",
		"samplesecuritygroup",
		armsecurity.DeviceSecurityGroup{
			Properties: &armsecurity.DeviceSecurityGroupProperties{
				TimeWindowRules: []armsecurity.TimeWindowCustomAlertRuleClassification{
					&armsecurity.ActiveConnectionsNotInAllowedRange{
						IsEnabled:      to.Ptr(true),
						RuleType:       to.Ptr("ActiveConnectionsNotInAllowedRange"),
						MaxThreshold:   to.Ptr[int32](30),
						MinThreshold:   to.Ptr[int32](0),
						TimeWindowSize: to.Ptr("PT05M"),
					}},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/stable/2019-08-01/examples/DeviceSecurityGroups/PutDeviceSecurityGroups_example.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurity.DeviceSecurityGroup{
			Name: to.Ptr("samplesecuritygroup"),
			Type: to.Ptr("Microsoft.Security/deviceSecurityGroups"),
			ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/SampleRG/providers/Microsoft.Devices/iotHubs/sampleiothub/providers/Microsoft.Security/deviceSecurityGroups/samplesecuritygroup"),
			Properties: &armsecurity.DeviceSecurityGroupProperties{
				AllowlistRules: []armsecurity.AllowlistCustomAlertRuleClassification{
					&armsecurity.ConnectionToIPNotAllowed{
						Description:     to.Ptr("Get an alert when an outbound connection is created between your device and an ip that isn't allowed"),
						DisplayName:     to.Ptr("Outbound connection to an ip that isn't allowed"),
						IsEnabled:       to.Ptr(false),
						RuleType:        to.Ptr("ConnectionToIpNotAllowed"),
						AllowlistValues: []*string{},
					},
					&armsecurity.LocalUserNotAllowed{
						Description:     to.Ptr("Get an alert when a local user that isn't allowed logins to the device"),
						DisplayName:     to.Ptr("Login by a local user that isn't allowed"),
						IsEnabled:       to.Ptr(false),
						RuleType:        to.Ptr("LocalUserNotAllowed"),
						AllowlistValues: []*string{},
					},
					&armsecurity.ProcessNotAllowed{
						Description:     to.Ptr("Get an alert when a process that isn't allowed is executed"),
						DisplayName:     to.Ptr("Execution of a process that isn't allowed"),
						IsEnabled:       to.Ptr(false),
						RuleType:        to.Ptr("ProcessNotAllowed"),
						AllowlistValues: []*string{},
					}},
				DenylistRules:  []*armsecurity.DenylistCustomAlertRule{},
				ThresholdRules: []armsecurity.ThresholdCustomAlertRuleClassification{},
				TimeWindowRules: []armsecurity.TimeWindowCustomAlertRuleClassification{
					&armsecurity.ActiveConnectionsNotInAllowedRange{
						Description:    to.Ptr("Get an alert when the number of active connections of a device in the time window is not in the allowed range"),
						DisplayName:    to.Ptr("Number of active connections is not in allowed range"),
						IsEnabled:      to.Ptr(true),
						RuleType:       to.Ptr("ActiveConnectionsNotInAllowedRange"),
						MaxThreshold:   to.Ptr[int32](30),
						MinThreshold:   to.Ptr[int32](0),
						TimeWindowSize: to.Ptr("PT05M"),
					},
					&armsecurity.AmqpC2DMessagesNotInAllowedRange{
						Description:    to.Ptr("Get an alert when the number of cloud to device messages (AMQP protocol) in the time window is not in the allowed range"),
						DisplayName:    to.Ptr("Number of cloud to device messages (AMQP protocol) is not in allowed range"),
						IsEnabled:      to.Ptr(false),
						RuleType:       to.Ptr("AmqpC2DMessagesNotInAllowedRange"),
						MaxThreshold:   to.Ptr[int32](0),
						MinThreshold:   to.Ptr[int32](0),
						TimeWindowSize: to.Ptr("PT15M"),
					},
					&armsecurity.MqttC2DMessagesNotInAllowedRange{
						Description:    to.Ptr("Get an alert when the number of cloud to device messages (MQTT protocol) in the time window is not in the allowed range"),
						DisplayName:    to.Ptr("Number of cloud to device messages (MQTT protocol) is not in allowed range"),
						IsEnabled:      to.Ptr(false),
						RuleType:       to.Ptr("MqttC2DMessagesNotInAllowedRange"),
						MaxThreshold:   to.Ptr[int32](0),
						MinThreshold:   to.Ptr[int32](0),
						TimeWindowSize: to.Ptr("PT15M"),
					},
					&armsecurity.HTTPC2DMessagesNotInAllowedRange{
						Description:    to.Ptr("Get an alert when the number of cloud to device messages (HTTP protocol) in the time window is not in the allowed range"),
						DisplayName:    to.Ptr("Number of cloud to device messages (HTTP protocol) is not in allowed range"),
						IsEnabled:      to.Ptr(false),
						RuleType:       to.Ptr("HttpC2DMessagesNotInAllowedRange"),
						MaxThreshold:   to.Ptr[int32](0),
						MinThreshold:   to.Ptr[int32](0),
						TimeWindowSize: to.Ptr("PT15M"),
					},
					&armsecurity.AmqpC2DRejectedMessagesNotInAllowedRange{
						Description:    to.Ptr("Get an alert when the number of cloud to device messages (AMQP protocol) that were rejected by the device in the time window is not in the allowed range"),
						DisplayName:    to.Ptr("Number of rejected cloud to device messages (AMQP protocol) is not in allowed range"),
						IsEnabled:      to.Ptr(false),
						RuleType:       to.Ptr("AmqpC2DRejectedMessagesNotInAllowedRange"),
						MaxThreshold:   to.Ptr[int32](0),
						MinThreshold:   to.Ptr[int32](0),
						TimeWindowSize: to.Ptr("PT15M"),
					},
					&armsecurity.MqttC2DRejectedMessagesNotInAllowedRange{
						Description:    to.Ptr("Get an alert when the number of cloud to device messages (MQTT protocol) that were rejected by the device in the time window is not in the allowed range"),
						DisplayName:    to.Ptr("Number of rejected cloud to device messages (MQTT protocol) is not in allowed range"),
						IsEnabled:      to.Ptr(false),
						RuleType:       to.Ptr("MqttC2DRejectedMessagesNotInAllowedRange"),
						MaxThreshold:   to.Ptr[int32](0),
						MinThreshold:   to.Ptr[int32](0),
						TimeWindowSize: to.Ptr("PT15M"),
					},
					&armsecurity.HTTPC2DRejectedMessagesNotInAllowedRange{
						Description:    to.Ptr("Get an alert when the number of cloud to device messages (HTTP protocol) that were rejected by the device in the time window is not in the allowed range"),
						DisplayName:    to.Ptr("Number of rejected cloud to device messages (HTTP protocol) is not in allowed range"),
						IsEnabled:      to.Ptr(false),
						RuleType:       to.Ptr("HttpC2DRejectedMessagesNotInAllowedRange"),
						MaxThreshold:   to.Ptr[int32](0),
						MinThreshold:   to.Ptr[int32](0),
						TimeWindowSize: to.Ptr("PT15M"),
					},
					&armsecurity.AmqpD2CMessagesNotInAllowedRange{
						Description:    to.Ptr("Get an alert when the number of device to cloud messages (AMQP protocol) in the time window is not in the allowed range"),
						DisplayName:    to.Ptr("Number of device to cloud messages (AMQP protocol) is not in allowed range"),
						IsEnabled:      to.Ptr(false),
						RuleType:       to.Ptr("AmqpD2CMessagesNotInAllowedRange"),
						MaxThreshold:   to.Ptr[int32](0),
						MinThreshold:   to.Ptr[int32](0),
						TimeWindowSize: to.Ptr("PT15M"),
					},
					&armsecurity.MqttD2CMessagesNotInAllowedRange{
						Description:    to.Ptr("Get an alert when the number of device to cloud messages (MQTT protocol) in the time window is not in the allowed range"),
						DisplayName:    to.Ptr("Number of device to cloud messages (MQTT protocol) is not in allowed range"),
						IsEnabled:      to.Ptr(false),
						RuleType:       to.Ptr("MqttD2CMessagesNotInAllowedRange"),
						MaxThreshold:   to.Ptr[int32](0),
						MinThreshold:   to.Ptr[int32](0),
						TimeWindowSize: to.Ptr("PT15M"),
					},
					&armsecurity.HTTPD2CMessagesNotInAllowedRange{
						Description:    to.Ptr("Get an alert when the number of device to cloud messages (HTTP protocol) in the time window is not in the allowed range"),
						DisplayName:    to.Ptr("Number of device to cloud messages (HTTP protocol) is not in allowed range"),
						IsEnabled:      to.Ptr(false),
						RuleType:       to.Ptr("HttpD2CMessagesNotInAllowedRange"),
						MaxThreshold:   to.Ptr[int32](0),
						MinThreshold:   to.Ptr[int32](0),
						TimeWindowSize: to.Ptr("PT15M"),
					},
					&armsecurity.DirectMethodInvokesNotInAllowedRange{
						Description:    to.Ptr("Get an alert when the number of direct method invokes in the time window is not in the allowed range"),
						DisplayName:    to.Ptr("Number of direct method invokes is not in allowed range"),
						IsEnabled:      to.Ptr(false),
						RuleType:       to.Ptr("DirectMethodInvokesNotInAllowedRange"),
						MaxThreshold:   to.Ptr[int32](0),
						MinThreshold:   to.Ptr[int32](0),
						TimeWindowSize: to.Ptr("PT15M"),
					},
					&armsecurity.FailedLocalLoginsNotInAllowedRange{
						Description:    to.Ptr("Get an alert when the number of failed local logins on the device in the time window is not in the allowed range"),
						DisplayName:    to.Ptr("Number of failed local logins is not in allowed range"),
						IsEnabled:      to.Ptr(false),
						RuleType:       to.Ptr("FailedLocalLoginsNotInAllowedRange"),
						MaxThreshold:   to.Ptr[int32](0),
						MinThreshold:   to.Ptr[int32](0),
						TimeWindowSize: to.Ptr("PT15M"),
					},
					&armsecurity.FileUploadsNotInAllowedRange{
						Description:    to.Ptr("Get an alert when the number of file uploads from the device to the cloud in the time window is not in the allowed range"),
						DisplayName:    to.Ptr("Number of file uploads is not in allowed range"),
						IsEnabled:      to.Ptr(false),
						RuleType:       to.Ptr("FileUploadsNotInAllowedRange"),
						MaxThreshold:   to.Ptr[int32](0),
						MinThreshold:   to.Ptr[int32](0),
						TimeWindowSize: to.Ptr("PT15M"),
					},
					&armsecurity.QueuePurgesNotInAllowedRange{
						Description:    to.Ptr("Get an alert when the number of device queue purges in the time window is not in the allowed range"),
						DisplayName:    to.Ptr("Number of device queue purges is not in allowed range"),
						IsEnabled:      to.Ptr(false),
						RuleType:       to.Ptr("QueuePurgesNotInAllowedRange"),
						MaxThreshold:   to.Ptr[int32](0),
						MinThreshold:   to.Ptr[int32](0),
						TimeWindowSize: to.Ptr("PT15M"),
					},
					&armsecurity.TwinUpdatesNotInAllowedRange{
						Description:    to.Ptr("Get an alert when the number of twin updates (by the device or the service) in the time window is not in the allowed range"),
						DisplayName:    to.Ptr("Number of twin updates is not in allowed range"),
						IsEnabled:      to.Ptr(false),
						RuleType:       to.Ptr("TwinUpdatesNotInAllowedRange"),
						MaxThreshold:   to.Ptr[int32](0),
						MinThreshold:   to.Ptr[int32](0),
						TimeWindowSize: to.Ptr("PT15M"),
					},
					&armsecurity.UnauthorizedOperationsNotInAllowedRange{
						Description:    to.Ptr("Get an alert when the number unauthorized operations in the time window is not in the allowed range. Unauthorized operations are operations that affect the device (or done by it) that fail because of an unauthorized error"),
						DisplayName:    to.Ptr("Number of unauthorized operations is not in allowed range"),
						IsEnabled:      to.Ptr(false),
						RuleType:       to.Ptr("UnauthorizedOperationsNotInAllowedRange"),
						MaxThreshold:   to.Ptr[int32](0),
						MinThreshold:   to.Ptr[int32](0),
						TimeWindowSize: to.Ptr("PT15M"),
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DeviceSecurityGroup) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DeviceSecurityGroup)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/stable/2019-08-01/examples/DeviceSecurityGroups/PutDeviceSecurityGroups_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDeviceSecurityGroups_Delete(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/stable/2019-08-01/examples/DeviceSecurityGroups/DeleteDeviceSecurityGroups_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a device security group for the specified IoT Hub resource"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewDeviceSecurityGroupsClient(cred, &options)
	_, err := client.Delete(ctx,
		"subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/SampleRG/providers/Microsoft.Devices/iotHubs/sampleiothub",
		"samplesecuritygroup",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/stable/2019-08-01/examples/DeviceSecurityGroups/DeleteDeviceSecurityGroups_example.json: %v", err)
	}
}

func TestIotSecuritySolution_ListBySubscription(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/stable/2019-08-01/examples/IoTSecuritySolutions/GetIoTSecuritySolutionsListByIotHub.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List IoT Security solutions by IoT Hub"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewIotSecuritySolutionClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23", cred, &options)
	pager := client.ListBySubscription(&armsecurity.IotSecuritySolutionClientListBySubscriptionOptions{Filter: to.Ptr("properties.iotHubs/any(i eq \"/subscriptions/075423e9-7d33-4166-8bdf-3920b04e3735/resourceGroups/myRg/providers/Microsoft.Devices/IotHubs/FirstIotHub\")")})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/security/resource-manager/Microsoft.Security/stable/2019-08-01/examples/IoTSecuritySolutions/GetIoTSecuritySolutionsListByIotHub.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsecurity.IoTSecuritySolutionsList{
			Value: []*armsecurity.IoTSecuritySolutionModel{
				{
					Name:     to.Ptr("default"),
					Type:     to.Ptr("Microsoft.Security/IoTSecuritySolutions"),
					ID:       to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/MyGroup/providers/Microsoft.Security/IoTSecuritySolutions/Locations/eastus/default"),
					Tags:     map[string]*string{},
					Location: to.Ptr("East Us"),
					Properties: &armsecurity.IoTSecuritySolutionProperties{
						AutoDiscoveredResources: []*string{
							to.Ptr("/subscriptions/075423e9-7d33-4166-8bdf-3920b04e3735"),
							to.Ptr("/subscriptions/075423e9-7d33-4166-8bdf-3920b04e3735/resourceGroups/myRg/providers/Microsoft.Devices/IotHubs/FirstIotHub")},
						DisabledDataSources: []*armsecurity.DataSource{},
						DisplayName:         to.Ptr("Solution Default"),
						Export: []*armsecurity.ExportData{
							to.Ptr(armsecurity.ExportDataRawEvents)},
						IotHubs: []*string{
							to.Ptr("/subscriptions/075423e9-7d33-4166-8bdf-3920b04e3735/resourceGroups/myRg/providers/Microsoft.Devices/IotHubs/FirstIotHub")},
						RecommendationsConfiguration: []*armsecurity.RecommendationConfigurationProperties{
							{
								Name:               to.Ptr("Service Principal Not Used with ACR"),
								RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTAcrauthentication),
								Status:             to.Ptr(armsecurity.RecommendationConfigStatusEnabled),
							},
							{
								Name:               to.Ptr("Agent sending underutilized messages"),
								RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTAgentSendsUnutilizedMessages),
								Status:             to.Ptr(armsecurity.RecommendationConfigStatus("TurnedOn")),
							},
							{
								Name:               to.Ptr("Operating system (OS) baseline validation failure"),
								RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTBaseline),
								Status:             to.Ptr(armsecurity.RecommendationConfigStatusEnabled),
							},
							{
								Name:               to.Ptr("Edge Hub memory can be optimized"),
								RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTEdgeHubMemOptimize),
								Status:             to.Ptr(armsecurity.RecommendationConfigStatusEnabled),
							},
							{
								Name:               to.Ptr("No Logging Configured for Edge Module"),
								RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTEdgeLoggingOptions),
								Status:             to.Ptr(armsecurity.RecommendationConfigStatusEnabled),
							},
							{
								Name:               to.Ptr("Module Settings Inconsistent in SecurityGroup"),
								RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTInconsistentModuleSettings),
								Status:             to.Ptr(armsecurity.RecommendationConfigStatusEnabled),
							},
							{
								Name:               to.Ptr("Install the Azure Security of Things Agent"),
								RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTInstallAgent),
								Status:             to.Ptr(armsecurity.RecommendationConfigStatusEnabled),
							},
							{
								Name:               to.Ptr("Default IP Filter Policy should be Deny"),
								RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTIpfilterDenyAll),
								Status:             to.Ptr(armsecurity.RecommendationConfigStatusEnabled),
							},
							{
								Name:               to.Ptr("IP Filter rule includes large IP range"),
								RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTIpfilterPermissiveRule),
								Status:             to.Ptr(armsecurity.RecommendationConfigStatusEnabled),
							},
							{
								Name:               to.Ptr("Open Ports On Device"),
								RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTOpenPorts),
								Status:             to.Ptr(armsecurity.RecommendationConfigStatusDisabled),
							},
							{
								Name:               to.Ptr("Permissive firewall policy in one of the chains was found"),
								RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTPermissiveFirewallPolicy),
								Status:             to.Ptr(armsecurity.RecommendationConfigStatusEnabled),
							},
							{
								Name:               to.Ptr("Permissive firewall rule in the input chain was found"),
								RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTPermissiveInputFirewallRules),
								Status:             to.Ptr(armsecurity.RecommendationConfigStatusEnabled),
							},
							{
								Name:               to.Ptr("Permissive firewall rule in the output chain was found"),
								RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTPermissiveOutputFirewallRules),
								Status:             to.Ptr(armsecurity.RecommendationConfigStatusEnabled),
							},
							{
								Name:               to.Ptr("High level permissions configured in Edge model twin for Edge module"),
								RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTPrivilegedDockerOptions),
								Status:             to.Ptr(armsecurity.RecommendationConfigStatusEnabled),
							},
							{
								Name:               to.Ptr("Same Authentication Credentials used by multiple devices"),
								RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTSharedCredentials),
								Status:             to.Ptr(armsecurity.RecommendationConfigStatusDisabled),
							},
							{
								Name:               to.Ptr("TLS cipher suite upgrade"),
								RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTVulnerableTLSCipherSuite),
								Status:             to.Ptr(armsecurity.RecommendationConfigStatusEnabled),
							}},
						Status:                  to.Ptr(armsecurity.SecuritySolutionStatusEnabled),
						UnmaskedIPLoggingStatus: to.Ptr(armsecurity.UnmaskedIPLoggingStatusEnabled),
						UserDefinedResources: &armsecurity.UserDefinedResourcesProperties{
							Query: to.Ptr("where type != \"microsoft.devices/iothubs\" | where name contains \"iot\""),
							QuerySubscriptions: []*string{
								to.Ptr("075423e9-7d33-4166-8bdf-3920b04e3735")},
						},
						Workspace: to.Ptr("/subscriptions/c4930e90-cd72-4aa5-93e9-2d081d129569/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace1"),
					},
					SystemData: &armsecurity.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-27T21:53:29.0928001Z"); return t }()),
						CreatedBy:          to.Ptr("string"),
						CreatedByType:      to.Ptr(armsecurity.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-27T21:53:29.0928001Z"); return t }()),
						LastModifiedBy:     to.Ptr("string"),
						LastModifiedByType: to.Ptr(armsecurity.CreatedByTypeUser),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.IoTSecuritySolutionsList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.IoTSecuritySolutionsList)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/stable/2019-08-01/examples/IoTSecuritySolutions/GetIoTSecuritySolutionsListByIotHub.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/security/resource-manager/Microsoft.Security/stable/2019-08-01/examples/IoTSecuritySolutions/GetIoTSecuritySolutionsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List IoT Security solutions by subscription"},
	})
	client = armsecurity.NewIotSecuritySolutionClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23", cred, &options)
	pager = client.ListBySubscription(&armsecurity.IotSecuritySolutionClientListBySubscriptionOptions{Filter: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/security/resource-manager/Microsoft.Security/stable/2019-08-01/examples/IoTSecuritySolutions/GetIoTSecuritySolutionsList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsecurity.IoTSecuritySolutionsList{
			Value: []*armsecurity.IoTSecuritySolutionModel{
				{
					Name:     to.Ptr("default"),
					Type:     to.Ptr("Microsoft.Security/IoTSecuritySolutions"),
					ID:       to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/MyGroup/providers/Microsoft.Security/IoTSecuritySolutions/Locations/eastus/default"),
					Tags:     map[string]*string{},
					Location: to.Ptr("East Us"),
					Properties: &armsecurity.IoTSecuritySolutionProperties{
						AutoDiscoveredResources: []*string{
							to.Ptr("/subscriptions/075423e9-7d33-4166-8bdf-3920b04e3735"),
							to.Ptr("/subscriptions/075423e9-7d33-4166-8bdf-3920b04e3735/resourceGroups/myRg/providers/Microsoft.Devices/IotHubs/FirstIotHub")},
						DisabledDataSources: []*armsecurity.DataSource{},
						DisplayName:         to.Ptr("Solution Default"),
						Export:              []*armsecurity.ExportData{},
						IotHubs: []*string{
							to.Ptr("/subscriptions/075423e9-7d33-4166-8bdf-3920b04e3735/resourceGroups/myRg/providers/Microsoft.Devices/IotHubs/FirstIotHub")},
						RecommendationsConfiguration: []*armsecurity.RecommendationConfigurationProperties{
							{
								Name:               to.Ptr("Service Principal Not Used with ACR"),
								RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTAcrauthentication),
								Status:             to.Ptr(armsecurity.RecommendationConfigStatusEnabled),
							},
							{
								Name:               to.Ptr("Agent sending underutilized messages"),
								RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTAgentSendsUnutilizedMessages),
								Status:             to.Ptr(armsecurity.RecommendationConfigStatus("TurnedOn")),
							},
							{
								Name:               to.Ptr("Operating system (OS) baseline validation failure"),
								RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTBaseline),
								Status:             to.Ptr(armsecurity.RecommendationConfigStatusEnabled),
							},
							{
								Name:               to.Ptr("Edge Hub memory can be optimized"),
								RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTEdgeHubMemOptimize),
								Status:             to.Ptr(armsecurity.RecommendationConfigStatusEnabled),
							},
							{
								Name:               to.Ptr("No Logging Configured for Edge Module"),
								RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTEdgeLoggingOptions),
								Status:             to.Ptr(armsecurity.RecommendationConfigStatusEnabled),
							},
							{
								Name:               to.Ptr("Module Settings Inconsistent in SecurityGroup"),
								RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTInconsistentModuleSettings),
								Status:             to.Ptr(armsecurity.RecommendationConfigStatusEnabled),
							},
							{
								Name:               to.Ptr("Install the Azure Security of Things Agent"),
								RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTInstallAgent),
								Status:             to.Ptr(armsecurity.RecommendationConfigStatusEnabled),
							},
							{
								Name:               to.Ptr("Default IP Filter Policy should be Deny"),
								RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTIpfilterDenyAll),
								Status:             to.Ptr(armsecurity.RecommendationConfigStatusEnabled),
							},
							{
								Name:               to.Ptr("IP Filter rule includes large IP range"),
								RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTIpfilterPermissiveRule),
								Status:             to.Ptr(armsecurity.RecommendationConfigStatusEnabled),
							},
							{
								Name:               to.Ptr("Open Ports On Device"),
								RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTOpenPorts),
								Status:             to.Ptr(armsecurity.RecommendationConfigStatusDisabled),
							},
							{
								Name:               to.Ptr("Permissive firewall policy in one of the chains was found"),
								RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTPermissiveFirewallPolicy),
								Status:             to.Ptr(armsecurity.RecommendationConfigStatusEnabled),
							},
							{
								Name:               to.Ptr("Permissive firewall rule in the input chain was found"),
								RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTPermissiveInputFirewallRules),
								Status:             to.Ptr(armsecurity.RecommendationConfigStatusEnabled),
							},
							{
								Name:               to.Ptr("Permissive firewall rule in the output chain was found"),
								RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTPermissiveOutputFirewallRules),
								Status:             to.Ptr(armsecurity.RecommendationConfigStatusEnabled),
							},
							{
								Name:               to.Ptr("High level permissions configured in Edge model twin for Edge module"),
								RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTPrivilegedDockerOptions),
								Status:             to.Ptr(armsecurity.RecommendationConfigStatusEnabled),
							},
							{
								Name:               to.Ptr("Same Authentication Credentials used by multiple devices"),
								RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTSharedCredentials),
								Status:             to.Ptr(armsecurity.RecommendationConfigStatusDisabled),
							},
							{
								Name:               to.Ptr("TLS cipher suite upgrade"),
								RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTVulnerableTLSCipherSuite),
								Status:             to.Ptr(armsecurity.RecommendationConfigStatusEnabled),
							}},
						Status:                  to.Ptr(armsecurity.SecuritySolutionStatusEnabled),
						UnmaskedIPLoggingStatus: to.Ptr(armsecurity.UnmaskedIPLoggingStatusEnabled),
						UserDefinedResources: &armsecurity.UserDefinedResourcesProperties{
							Query: to.Ptr("where type != \"microsoft.devices/iothubs\" | where name contains \"iot\""),
							QuerySubscriptions: []*string{
								to.Ptr("075423e9-7d33-4166-8bdf-3920b04e3735")},
						},
						Workspace: to.Ptr("/subscriptions/c4930e90-cd72-4aa5-93e9-2d081d129569/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace1"),
					},
					SystemData: &armsecurity.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-27T21:53:29.0928001Z"); return t }()),
						CreatedBy:          to.Ptr("string"),
						CreatedByType:      to.Ptr(armsecurity.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-27T21:53:29.0928001Z"); return t }()),
						LastModifiedBy:     to.Ptr("string"),
						LastModifiedByType: to.Ptr(armsecurity.CreatedByTypeUser),
					},
				},
				{
					Name:     to.Ptr("sec-solution"),
					Type:     to.Ptr("Microsoft.Security/IoTSecuritySolutions"),
					ID:       to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/SecondGroup/providers/Microsoft.Security/IoTSecuritySolutions/Locations/eastus/sec-solution"),
					Tags:     map[string]*string{},
					Location: to.Ptr("East Us"),
					Properties: &armsecurity.IoTSecuritySolutionProperties{
						AutoDiscoveredResources: []*string{
							to.Ptr("/subscriptions/075423e9-7d33-4166-8bdf-3920b04e3735"),
							to.Ptr("/subscriptions/075423e9-7d33-4166-8bdf-3920b04e3735/resourceGroups/myRg/providers/Microsoft.Devices/IotHubs/IotHubSecond")},
						DisabledDataSources: []*armsecurity.DataSource{},
						DisplayName:         to.Ptr("Second Solution"),
						Export: []*armsecurity.ExportData{
							to.Ptr(armsecurity.ExportDataRawEvents)},
						IotHubs: []*string{
							to.Ptr("/subscriptions/075423e9-7d33-4166-8bdf-3920b04e3735/resourceGroups/myRg/providers/Microsoft.Devices/IotHubs/IotHubSecond")},
						RecommendationsConfiguration: []*armsecurity.RecommendationConfigurationProperties{
							{
								Name:               to.Ptr("Service Principal Not Used with ACR"),
								RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTAcrauthentication),
								Status:             to.Ptr(armsecurity.RecommendationConfigStatusEnabled),
							},
							{
								Name:               to.Ptr("Agent sending underutilized messages"),
								RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTAgentSendsUnutilizedMessages),
								Status:             to.Ptr(armsecurity.RecommendationConfigStatus("TurnedOn")),
							},
							{
								Name:               to.Ptr("Operating system (OS) baseline validation failure"),
								RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTBaseline),
								Status:             to.Ptr(armsecurity.RecommendationConfigStatusEnabled),
							},
							{
								Name:               to.Ptr("Edge Hub memory can be optimized"),
								RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTEdgeHubMemOptimize),
								Status:             to.Ptr(armsecurity.RecommendationConfigStatusEnabled),
							},
							{
								Name:               to.Ptr("No Logging Configured for Edge Module"),
								RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTEdgeLoggingOptions),
								Status:             to.Ptr(armsecurity.RecommendationConfigStatusEnabled),
							},
							{
								Name:               to.Ptr("Module Settings Inconsistent in SecurityGroup"),
								RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTInconsistentModuleSettings),
								Status:             to.Ptr(armsecurity.RecommendationConfigStatusEnabled),
							},
							{
								Name:               to.Ptr("Install the Azure Security of Things Agent"),
								RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTInstallAgent),
								Status:             to.Ptr(armsecurity.RecommendationConfigStatusEnabled),
							},
							{
								Name:               to.Ptr("Default IP Filter Policy should be Deny"),
								RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTIpfilterDenyAll),
								Status:             to.Ptr(armsecurity.RecommendationConfigStatusEnabled),
							},
							{
								Name:               to.Ptr("IP Filter rule includes large IP range"),
								RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTIpfilterPermissiveRule),
								Status:             to.Ptr(armsecurity.RecommendationConfigStatusEnabled),
							},
							{
								Name:               to.Ptr("Open Ports On Device"),
								RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTOpenPorts),
								Status:             to.Ptr(armsecurity.RecommendationConfigStatusDisabled),
							},
							{
								Name:               to.Ptr("Permissive firewall policy in one of the chains was found"),
								RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTPermissiveFirewallPolicy),
								Status:             to.Ptr(armsecurity.RecommendationConfigStatusEnabled),
							},
							{
								Name:               to.Ptr("Permissive firewall rule in the input chain was found"),
								RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTPermissiveInputFirewallRules),
								Status:             to.Ptr(armsecurity.RecommendationConfigStatusEnabled),
							},
							{
								Name:               to.Ptr("Permissive firewall rule in the output chain was found"),
								RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTPermissiveOutputFirewallRules),
								Status:             to.Ptr(armsecurity.RecommendationConfigStatusEnabled),
							},
							{
								Name:               to.Ptr("High level permissions configured in Edge model twin for Edge module"),
								RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTPrivilegedDockerOptions),
								Status:             to.Ptr(armsecurity.RecommendationConfigStatusEnabled),
							},
							{
								Name:               to.Ptr("Same Authentication Credentials used by multiple devices"),
								RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTSharedCredentials),
								Status:             to.Ptr(armsecurity.RecommendationConfigStatusDisabled),
							},
							{
								Name:               to.Ptr("TLS cipher suite upgrade"),
								RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTVulnerableTLSCipherSuite),
								Status:             to.Ptr(armsecurity.RecommendationConfigStatusEnabled),
							}},
						Status:                  to.Ptr(armsecurity.SecuritySolutionStatusEnabled),
						UnmaskedIPLoggingStatus: to.Ptr(armsecurity.UnmaskedIPLoggingStatusEnabled),
						UserDefinedResources: &armsecurity.UserDefinedResourcesProperties{
							Query: to.Ptr("where type != \"microsoft.devices/iothubs\" | where name contains \"iot\""),
							QuerySubscriptions: []*string{
								to.Ptr("075423e9-7d33-4166-8bdf-3920b04e3735")},
						},
						Workspace: to.Ptr("/subscriptions/c4930e90-cd72-4aa5-93e9-2d081d129569/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace1"),
					},
					SystemData: &armsecurity.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-27T21:53:29.0928001Z"); return t }()),
						CreatedBy:          to.Ptr("string"),
						CreatedByType:      to.Ptr(armsecurity.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-27T21:53:29.0928001Z"); return t }()),
						LastModifiedBy:     to.Ptr("string"),
						LastModifiedByType: to.Ptr(armsecurity.CreatedByTypeUser),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.IoTSecuritySolutionsList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.IoTSecuritySolutionsList)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/stable/2019-08-01/examples/IoTSecuritySolutions/GetIoTSecuritySolutionsList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIotSecuritySolution_ListByResourceGroup(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/stable/2019-08-01/examples/IoTSecuritySolutions/GetIoTSecuritySolutionsListByRg.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List IoT Security solutions by resource group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewIotSecuritySolutionClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23", cred, &options)
	pager := client.ListByResourceGroup("MyGroup",
		&armsecurity.IotSecuritySolutionClientListByResourceGroupOptions{Filter: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/security/resource-manager/Microsoft.Security/stable/2019-08-01/examples/IoTSecuritySolutions/GetIoTSecuritySolutionsListByRg.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsecurity.IoTSecuritySolutionsList{
			Value: []*armsecurity.IoTSecuritySolutionModel{
				{
					Name:     to.Ptr("default"),
					Type:     to.Ptr("Microsoft.Security/IoTSecuritySolutions"),
					ID:       to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/MyGroup/providers/Microsoft.Security/IoTSecuritySolutions/Locations/eastus/default"),
					Tags:     map[string]*string{},
					Location: to.Ptr("East Us"),
					Properties: &armsecurity.IoTSecuritySolutionProperties{
						AutoDiscoveredResources: []*string{
							to.Ptr("/subscriptions/075423e9-7d33-4166-8bdf-3920b04e3735"),
							to.Ptr("/subscriptions/075423e9-7d33-4166-8bdf-3920b04e3735/resourceGroups/myRg/providers/Microsoft.Devices/IotHubs/FirstIotHub")},
						DisabledDataSources: []*armsecurity.DataSource{},
						DisplayName:         to.Ptr("Solution Default"),
						Export:              []*armsecurity.ExportData{},
						IotHubs: []*string{
							to.Ptr("/subscriptions/075423e9-7d33-4166-8bdf-3920b04e3735/resourceGroups/myRg/providers/Microsoft.Devices/IotHubs/FirstIotHub")},
						RecommendationsConfiguration: []*armsecurity.RecommendationConfigurationProperties{
							{
								Name:               to.Ptr("Service Principal Not Used with ACR"),
								RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTAcrauthentication),
								Status:             to.Ptr(armsecurity.RecommendationConfigStatusEnabled),
							},
							{
								Name:               to.Ptr("Agent sending underutilized messages"),
								RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTAgentSendsUnutilizedMessages),
								Status:             to.Ptr(armsecurity.RecommendationConfigStatus("TurnedOn")),
							},
							{
								Name:               to.Ptr("Operating system (OS) baseline validation failure"),
								RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTBaseline),
								Status:             to.Ptr(armsecurity.RecommendationConfigStatusEnabled),
							},
							{
								Name:               to.Ptr("Edge Hub memory can be optimized"),
								RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTEdgeHubMemOptimize),
								Status:             to.Ptr(armsecurity.RecommendationConfigStatusEnabled),
							},
							{
								Name:               to.Ptr("No Logging Configured for Edge Module"),
								RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTEdgeLoggingOptions),
								Status:             to.Ptr(armsecurity.RecommendationConfigStatusEnabled),
							},
							{
								Name:               to.Ptr("Module Settings Inconsistent in SecurityGroup"),
								RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTInconsistentModuleSettings),
								Status:             to.Ptr(armsecurity.RecommendationConfigStatusEnabled),
							},
							{
								Name:               to.Ptr("Install the Azure Security of Things Agent"),
								RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTInstallAgent),
								Status:             to.Ptr(armsecurity.RecommendationConfigStatusEnabled),
							},
							{
								Name:               to.Ptr("Default IP Filter Policy should be Deny"),
								RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTIpfilterDenyAll),
								Status:             to.Ptr(armsecurity.RecommendationConfigStatusEnabled),
							},
							{
								Name:               to.Ptr("IP Filter rule includes large IP range"),
								RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTIpfilterPermissiveRule),
								Status:             to.Ptr(armsecurity.RecommendationConfigStatusEnabled),
							},
							{
								Name:               to.Ptr("Open Ports On Device"),
								RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTOpenPorts),
								Status:             to.Ptr(armsecurity.RecommendationConfigStatusDisabled),
							},
							{
								Name:               to.Ptr("Permissive firewall policy in one of the chains was found"),
								RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTPermissiveFirewallPolicy),
								Status:             to.Ptr(armsecurity.RecommendationConfigStatusEnabled),
							},
							{
								Name:               to.Ptr("Permissive firewall rule in the input chain was found"),
								RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTPermissiveInputFirewallRules),
								Status:             to.Ptr(armsecurity.RecommendationConfigStatusEnabled),
							},
							{
								Name:               to.Ptr("Permissive firewall rule in the output chain was found"),
								RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTPermissiveOutputFirewallRules),
								Status:             to.Ptr(armsecurity.RecommendationConfigStatusEnabled),
							},
							{
								Name:               to.Ptr("High level permissions configured in Edge model twin for Edge module"),
								RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTPrivilegedDockerOptions),
								Status:             to.Ptr(armsecurity.RecommendationConfigStatusEnabled),
							},
							{
								Name:               to.Ptr("Same Authentication Credentials used by multiple devices"),
								RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTSharedCredentials),
								Status:             to.Ptr(armsecurity.RecommendationConfigStatusDisabled),
							},
							{
								Name:               to.Ptr("TLS cipher suite upgrade"),
								RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTVulnerableTLSCipherSuite),
								Status:             to.Ptr(armsecurity.RecommendationConfigStatusEnabled),
							}},
						Status:                  to.Ptr(armsecurity.SecuritySolutionStatusEnabled),
						UnmaskedIPLoggingStatus: to.Ptr(armsecurity.UnmaskedIPLoggingStatusEnabled),
						UserDefinedResources: &armsecurity.UserDefinedResourcesProperties{
							Query: to.Ptr("where type != \"microsoft.devices/iothubs\" | where name contains \"iot\""),
							QuerySubscriptions: []*string{
								to.Ptr("075423e9-7d33-4166-8bdf-3920b04e3735")},
						},
						Workspace: to.Ptr("/subscriptions/c4930e90-cd72-4aa5-93e9-2d081d129569/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace1"),
					},
					SystemData: &armsecurity.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-27T21:53:29.0928001Z"); return t }()),
						CreatedBy:          to.Ptr("string"),
						CreatedByType:      to.Ptr(armsecurity.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-27T21:53:29.0928001Z"); return t }()),
						LastModifiedBy:     to.Ptr("string"),
						LastModifiedByType: to.Ptr(armsecurity.CreatedByTypeUser),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.IoTSecuritySolutionsList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.IoTSecuritySolutionsList)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/stable/2019-08-01/examples/IoTSecuritySolutions/GetIoTSecuritySolutionsListByRg.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/security/resource-manager/Microsoft.Security/stable/2019-08-01/examples/IoTSecuritySolutions/GetIoTSecuritySolutionsListByIotHubAndRg.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List IoT Security solutions by resource group and IoT Hub"},
	})
	client = armsecurity.NewIotSecuritySolutionClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23", cred, &options)
	pager = client.ListByResourceGroup("MyRg",
		&armsecurity.IotSecuritySolutionClientListByResourceGroupOptions{Filter: to.Ptr("properties.iotHubs/any(i eq \"/subscriptions/075423e9-7d33-4166-8bdf-3920b04e3735/resourceGroups/myRg/providers/Microsoft.Devices/IotHubs/FirstIotHub\")")})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/security/resource-manager/Microsoft.Security/stable/2019-08-01/examples/IoTSecuritySolutions/GetIoTSecuritySolutionsListByIotHubAndRg.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsecurity.IoTSecuritySolutionsList{
			Value: []*armsecurity.IoTSecuritySolutionModel{
				{
					Name:     to.Ptr("default"),
					Type:     to.Ptr("Microsoft.Security/IoTSecuritySolutions"),
					ID:       to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/MyRg/providers/Microsoft.Security/IoTSecuritySolutions/Locations/eastus/default"),
					Tags:     map[string]*string{},
					Location: to.Ptr("East Us"),
					Properties: &armsecurity.IoTSecuritySolutionProperties{
						AutoDiscoveredResources: []*string{
							to.Ptr("/subscriptions/075423e9-7d33-4166-8bdf-3920b04e3735"),
							to.Ptr("/subscriptions/075423e9-7d33-4166-8bdf-3920b04e3735/resourceGroups/myRg/providers/Microsoft.Devices/IotHubs/FirstIotHub")},
						DisabledDataSources: []*armsecurity.DataSource{},
						DisplayName:         to.Ptr("Solution Default"),
						Export: []*armsecurity.ExportData{
							to.Ptr(armsecurity.ExportDataRawEvents)},
						IotHubs: []*string{
							to.Ptr("/subscriptions/075423e9-7d33-4166-8bdf-3920b04e3735/resourceGroups/myRg/providers/Microsoft.Devices/IotHubs/FirstIotHub")},
						RecommendationsConfiguration: []*armsecurity.RecommendationConfigurationProperties{
							{
								Name:               to.Ptr("Service Principal Not Used with ACR"),
								RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTAcrauthentication),
								Status:             to.Ptr(armsecurity.RecommendationConfigStatusEnabled),
							},
							{
								Name:               to.Ptr("Agent sending underutilized messages"),
								RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTAgentSendsUnutilizedMessages),
								Status:             to.Ptr(armsecurity.RecommendationConfigStatus("TurnedOn")),
							},
							{
								Name:               to.Ptr("Operating system (OS) baseline validation failure"),
								RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTBaseline),
								Status:             to.Ptr(armsecurity.RecommendationConfigStatusEnabled),
							},
							{
								Name:               to.Ptr("Edge Hub memory can be optimized"),
								RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTEdgeHubMemOptimize),
								Status:             to.Ptr(armsecurity.RecommendationConfigStatusEnabled),
							},
							{
								Name:               to.Ptr("No Logging Configured for Edge Module"),
								RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTEdgeLoggingOptions),
								Status:             to.Ptr(armsecurity.RecommendationConfigStatusEnabled),
							},
							{
								Name:               to.Ptr("Module Settings Inconsistent in SecurityGroup"),
								RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTInconsistentModuleSettings),
								Status:             to.Ptr(armsecurity.RecommendationConfigStatusEnabled),
							},
							{
								Name:               to.Ptr("Install the Azure Security of Things Agent"),
								RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTInstallAgent),
								Status:             to.Ptr(armsecurity.RecommendationConfigStatusEnabled),
							},
							{
								Name:               to.Ptr("Default IP Filter Policy should be Deny"),
								RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTIpfilterDenyAll),
								Status:             to.Ptr(armsecurity.RecommendationConfigStatusEnabled),
							},
							{
								Name:               to.Ptr("IP Filter rule includes large IP range"),
								RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTIpfilterPermissiveRule),
								Status:             to.Ptr(armsecurity.RecommendationConfigStatusEnabled),
							},
							{
								Name:               to.Ptr("Open Ports On Device"),
								RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTOpenPorts),
								Status:             to.Ptr(armsecurity.RecommendationConfigStatusDisabled),
							},
							{
								Name:               to.Ptr("Permissive firewall policy in one of the chains was found"),
								RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTPermissiveFirewallPolicy),
								Status:             to.Ptr(armsecurity.RecommendationConfigStatusEnabled),
							},
							{
								Name:               to.Ptr("Permissive firewall rule in the input chain was found"),
								RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTPermissiveInputFirewallRules),
								Status:             to.Ptr(armsecurity.RecommendationConfigStatusEnabled),
							},
							{
								Name:               to.Ptr("Permissive firewall rule in the output chain was found"),
								RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTPermissiveOutputFirewallRules),
								Status:             to.Ptr(armsecurity.RecommendationConfigStatusEnabled),
							},
							{
								Name:               to.Ptr("High level permissions configured in Edge model twin for Edge module"),
								RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTPrivilegedDockerOptions),
								Status:             to.Ptr(armsecurity.RecommendationConfigStatusEnabled),
							},
							{
								Name:               to.Ptr("Same Authentication Credentials used by multiple devices"),
								RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTSharedCredentials),
								Status:             to.Ptr(armsecurity.RecommendationConfigStatusDisabled),
							},
							{
								Name:               to.Ptr("TLS cipher suite upgrade"),
								RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTVulnerableTLSCipherSuite),
								Status:             to.Ptr(armsecurity.RecommendationConfigStatusEnabled),
							}},
						Status:                  to.Ptr(armsecurity.SecuritySolutionStatusEnabled),
						UnmaskedIPLoggingStatus: to.Ptr(armsecurity.UnmaskedIPLoggingStatusEnabled),
						UserDefinedResources: &armsecurity.UserDefinedResourcesProperties{
							Query: to.Ptr("where type != \"microsoft.devices/iothubs\" | where name contains \"iot\""),
							QuerySubscriptions: []*string{
								to.Ptr("075423e9-7d33-4166-8bdf-3920b04e3735")},
						},
						Workspace: to.Ptr("/subscriptions/c4930e90-cd72-4aa5-93e9-2d081d129569/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace1"),
					},
					SystemData: &armsecurity.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-27T21:53:29.0928001Z"); return t }()),
						CreatedBy:          to.Ptr("string"),
						CreatedByType:      to.Ptr(armsecurity.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-27T21:53:29.0928001Z"); return t }()),
						LastModifiedBy:     to.Ptr("string"),
						LastModifiedByType: to.Ptr(armsecurity.CreatedByTypeUser),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.IoTSecuritySolutionsList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.IoTSecuritySolutionsList)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/stable/2019-08-01/examples/IoTSecuritySolutions/GetIoTSecuritySolutionsListByIotHubAndRg.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIotSecuritySolution_Get(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/stable/2019-08-01/examples/IoTSecuritySolutions/GetIoTSecuritySolution.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a IoT security solution"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewIotSecuritySolutionClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23", cred, &options)
	res, err := client.Get(ctx,
		"MyGroup",
		"default",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/stable/2019-08-01/examples/IoTSecuritySolutions/GetIoTSecuritySolution.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurity.IoTSecuritySolutionModel{
			Name:     to.Ptr("default"),
			Type:     to.Ptr("Microsoft.Security/IoTSecuritySolutions"),
			ID:       to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/MyGroup/providers/Microsoft.Security/IoTSecuritySolutions/Locations/eastus/default"),
			Tags:     map[string]*string{},
			Location: to.Ptr("East Us"),
			Properties: &armsecurity.IoTSecuritySolutionProperties{
				AutoDiscoveredResources: []*string{
					to.Ptr("/subscriptions/075423e9-7d33-4166-8bdf-3920b04e3735"),
					to.Ptr("/subscriptions/075423e9-7d33-4166-8bdf-3920b04e3735/resourceGroups/myRg/providers/Microsoft.Devices/IotHubs/FirstIotHub")},
				DisabledDataSources: []*armsecurity.DataSource{},
				DisplayName:         to.Ptr("Solution Default"),
				Export:              []*armsecurity.ExportData{},
				IotHubs: []*string{
					to.Ptr("/subscriptions/075423e9-7d33-4166-8bdf-3920b04e3735/resourceGroups/myRg/providers/Microsoft.Devices/IotHubs/FirstIotHub")},
				RecommendationsConfiguration: []*armsecurity.RecommendationConfigurationProperties{
					{
						Name:               to.Ptr("Service Principal Not Used with ACR"),
						RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTAcrauthentication),
						Status:             to.Ptr(armsecurity.RecommendationConfigStatusEnabled),
					},
					{
						Name:               to.Ptr("Agent sending underutilized messages"),
						RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTAgentSendsUnutilizedMessages),
						Status:             to.Ptr(armsecurity.RecommendationConfigStatus("TurnedOn")),
					},
					{
						Name:               to.Ptr("Operating system (OS) baseline validation failure"),
						RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTBaseline),
						Status:             to.Ptr(armsecurity.RecommendationConfigStatusEnabled),
					},
					{
						Name:               to.Ptr("Edge Hub memory can be optimized"),
						RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTEdgeHubMemOptimize),
						Status:             to.Ptr(armsecurity.RecommendationConfigStatusEnabled),
					},
					{
						Name:               to.Ptr("No Logging Configured for Edge Module"),
						RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTEdgeLoggingOptions),
						Status:             to.Ptr(armsecurity.RecommendationConfigStatusEnabled),
					},
					{
						Name:               to.Ptr("Module Settings Inconsistent in SecurityGroup"),
						RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTInconsistentModuleSettings),
						Status:             to.Ptr(armsecurity.RecommendationConfigStatusEnabled),
					},
					{
						Name:               to.Ptr("Install the Azure Security of Things Agent"),
						RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTInstallAgent),
						Status:             to.Ptr(armsecurity.RecommendationConfigStatusEnabled),
					},
					{
						Name:               to.Ptr("Default IP Filter Policy should be Deny"),
						RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTIpfilterDenyAll),
						Status:             to.Ptr(armsecurity.RecommendationConfigStatusEnabled),
					},
					{
						Name:               to.Ptr("IP Filter rule includes large IP range"),
						RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTIpfilterPermissiveRule),
						Status:             to.Ptr(armsecurity.RecommendationConfigStatusEnabled),
					},
					{
						Name:               to.Ptr("Open Ports On Device"),
						RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTOpenPorts),
						Status:             to.Ptr(armsecurity.RecommendationConfigStatusDisabled),
					},
					{
						Name:               to.Ptr("Permissive firewall policy in one of the chains was found"),
						RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTPermissiveFirewallPolicy),
						Status:             to.Ptr(armsecurity.RecommendationConfigStatusEnabled),
					},
					{
						Name:               to.Ptr("Permissive firewall rule in the input chain was found"),
						RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTPermissiveInputFirewallRules),
						Status:             to.Ptr(armsecurity.RecommendationConfigStatusEnabled),
					},
					{
						Name:               to.Ptr("Permissive firewall rule in the output chain was found"),
						RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTPermissiveOutputFirewallRules),
						Status:             to.Ptr(armsecurity.RecommendationConfigStatusEnabled),
					},
					{
						Name:               to.Ptr("High level permissions configured in Edge model twin for Edge module"),
						RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTPrivilegedDockerOptions),
						Status:             to.Ptr(armsecurity.RecommendationConfigStatusEnabled),
					},
					{
						Name:               to.Ptr("Same Authentication Credentials used by multiple devices"),
						RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTSharedCredentials),
						Status:             to.Ptr(armsecurity.RecommendationConfigStatusDisabled),
					},
					{
						Name:               to.Ptr("TLS cipher suite upgrade"),
						RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTVulnerableTLSCipherSuite),
						Status:             to.Ptr(armsecurity.RecommendationConfigStatusEnabled),
					}},
				Status:                  to.Ptr(armsecurity.SecuritySolutionStatusEnabled),
				UnmaskedIPLoggingStatus: to.Ptr(armsecurity.UnmaskedIPLoggingStatusEnabled),
				UserDefinedResources: &armsecurity.UserDefinedResourcesProperties{
					Query: to.Ptr("where type != \"microsoft.devices/iothubs\" | where name contains \"iot\""),
					QuerySubscriptions: []*string{
						to.Ptr("075423e9-7d33-4166-8bdf-3920b04e3735")},
				},
				Workspace: to.Ptr("/subscriptions/c4930e90-cd72-4aa5-93e9-2d081d129569/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace1"),
			},
			SystemData: &armsecurity.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-27T21:53:29.0928001Z"); return t }()),
				CreatedBy:          to.Ptr("string"),
				CreatedByType:      to.Ptr(armsecurity.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-27T21:53:29.0928001Z"); return t }()),
				LastModifiedBy:     to.Ptr("string"),
				LastModifiedByType: to.Ptr(armsecurity.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.IoTSecuritySolutionModel) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.IoTSecuritySolutionModel)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/stable/2019-08-01/examples/IoTSecuritySolutions/GetIoTSecuritySolution.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIotSecuritySolution_CreateOrUpdate(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/stable/2019-08-01/examples/IoTSecuritySolutions/CreateIoTSecuritySolution.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a IoT security solution"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewIotSecuritySolutionClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"MyGroup",
		"default",
		armsecurity.IoTSecuritySolutionModel{
			Tags:     map[string]*string{},
			Location: to.Ptr("East Us"),
			Properties: &armsecurity.IoTSecuritySolutionProperties{
				DisabledDataSources: []*armsecurity.DataSource{},
				DisplayName:         to.Ptr("Solution Default"),
				Export:              []*armsecurity.ExportData{},
				IotHubs: []*string{
					to.Ptr("/subscriptions/075423e9-7d33-4166-8bdf-3920b04e3735/resourceGroups/myRg/providers/Microsoft.Devices/IotHubs/FirstIotHub")},
				RecommendationsConfiguration: []*armsecurity.RecommendationConfigurationProperties{
					{
						RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTOpenPorts),
						Status:             to.Ptr(armsecurity.RecommendationConfigStatusDisabled),
					},
					{
						RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTSharedCredentials),
						Status:             to.Ptr(armsecurity.RecommendationConfigStatusDisabled),
					}},
				Status:                  to.Ptr(armsecurity.SecuritySolutionStatusEnabled),
				UnmaskedIPLoggingStatus: to.Ptr(armsecurity.UnmaskedIPLoggingStatusEnabled),
				UserDefinedResources: &armsecurity.UserDefinedResourcesProperties{
					Query: to.Ptr("where type != \"microsoft.devices/iothubs\" | where name contains \"iot\""),
					QuerySubscriptions: []*string{
						to.Ptr("075423e9-7d33-4166-8bdf-3920b04e3735")},
				},
				Workspace: to.Ptr("/subscriptions/c4930e90-cd72-4aa5-93e9-2d081d129569/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace1"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/stable/2019-08-01/examples/IoTSecuritySolutions/CreateIoTSecuritySolution.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurity.IoTSecuritySolutionModel{
			Name:     to.Ptr("default"),
			Type:     to.Ptr("Microsoft.Security/IoTSecuritySolutions"),
			ID:       to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/MyGroup/providers/Microsoft.Security/Locations/eastus/IoTSecuritySolutions/default"),
			Tags:     map[string]*string{},
			Location: to.Ptr("East Us"),
			Properties: &armsecurity.IoTSecuritySolutionProperties{
				AutoDiscoveredResources: []*string{
					to.Ptr("/subscriptions/075423e9-7d33-4166-8bdf-3920b04e3735"),
					to.Ptr("/subscriptions/075423e9-7d33-4166-8bdf-3920b04e3735/resourceGroups/myRg/providers/Microsoft.Devices/IotHubs/FirstIotHub")},
				DisabledDataSources: []*armsecurity.DataSource{},
				DisplayName:         to.Ptr("Solution Default"),
				Export:              []*armsecurity.ExportData{},
				IotHubs: []*string{
					to.Ptr("/subscriptions/075423e9-7d33-4166-8bdf-3920b04e3735/resourceGroups/myRg/providers/Microsoft.Devices/IotHubs/FirstIotHub")},
				RecommendationsConfiguration: []*armsecurity.RecommendationConfigurationProperties{
					{
						Name:               to.Ptr("Service Principal Not Used with ACR"),
						RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTAcrauthentication),
						Status:             to.Ptr(armsecurity.RecommendationConfigStatusEnabled),
					},
					{
						Name:               to.Ptr("Agent sending underutilized messages"),
						RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTAgentSendsUnutilizedMessages),
						Status:             to.Ptr(armsecurity.RecommendationConfigStatus("TurnedOn")),
					},
					{
						Name:               to.Ptr("Operating system (OS) baseline validation failure"),
						RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTBaseline),
						Status:             to.Ptr(armsecurity.RecommendationConfigStatusEnabled),
					},
					{
						Name:               to.Ptr("Edge Hub memory can be optimized"),
						RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTEdgeHubMemOptimize),
						Status:             to.Ptr(armsecurity.RecommendationConfigStatusEnabled),
					},
					{
						Name:               to.Ptr("No Logging Configured for Edge Module"),
						RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTEdgeLoggingOptions),
						Status:             to.Ptr(armsecurity.RecommendationConfigStatusEnabled),
					},
					{
						Name:               to.Ptr("Module Settings Inconsistent in SecurityGroup"),
						RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTInconsistentModuleSettings),
						Status:             to.Ptr(armsecurity.RecommendationConfigStatusEnabled),
					},
					{
						Name:               to.Ptr("Install the Azure Security of Things Agent"),
						RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTInstallAgent),
						Status:             to.Ptr(armsecurity.RecommendationConfigStatusEnabled),
					},
					{
						Name:               to.Ptr("Default IP Filter Policy should be Deny"),
						RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTIpfilterDenyAll),
						Status:             to.Ptr(armsecurity.RecommendationConfigStatusEnabled),
					},
					{
						Name:               to.Ptr("IP Filter rule includes large IP range"),
						RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTIpfilterPermissiveRule),
						Status:             to.Ptr(armsecurity.RecommendationConfigStatusEnabled),
					},
					{
						Name:               to.Ptr("Open Ports On Device"),
						RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTOpenPorts),
						Status:             to.Ptr(armsecurity.RecommendationConfigStatusDisabled),
					},
					{
						Name:               to.Ptr("Permissive firewall policy in one of the chains was found"),
						RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTPermissiveFirewallPolicy),
						Status:             to.Ptr(armsecurity.RecommendationConfigStatusEnabled),
					},
					{
						Name:               to.Ptr("Permissive firewall rule in the input chain was found"),
						RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTPermissiveInputFirewallRules),
						Status:             to.Ptr(armsecurity.RecommendationConfigStatusEnabled),
					},
					{
						Name:               to.Ptr("Permissive firewall rule in the output chain was found"),
						RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTPermissiveOutputFirewallRules),
						Status:             to.Ptr(armsecurity.RecommendationConfigStatusEnabled),
					},
					{
						Name:               to.Ptr("High level permissions configured in Edge model twin for Edge module"),
						RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTPrivilegedDockerOptions),
						Status:             to.Ptr(armsecurity.RecommendationConfigStatusEnabled),
					},
					{
						Name:               to.Ptr("Same Authentication Credentials used by multiple devices"),
						RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTSharedCredentials),
						Status:             to.Ptr(armsecurity.RecommendationConfigStatusDisabled),
					},
					{
						Name:               to.Ptr("TLS cipher suite upgrade"),
						RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTVulnerableTLSCipherSuite),
						Status:             to.Ptr(armsecurity.RecommendationConfigStatusEnabled),
					}},
				Status:                  to.Ptr(armsecurity.SecuritySolutionStatusEnabled),
				UnmaskedIPLoggingStatus: to.Ptr(armsecurity.UnmaskedIPLoggingStatusEnabled),
				UserDefinedResources: &armsecurity.UserDefinedResourcesProperties{
					Query: to.Ptr("where type != \"microsoft.devices/iothubs\" | where name contains \"iot\""),
					QuerySubscriptions: []*string{
						to.Ptr("075423e9-7d33-4166-8bdf-3920b04e3735")},
				},
				Workspace: to.Ptr("/subscriptions/c4930e90-cd72-4aa5-93e9-2d081d129569/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace1"),
			},
			SystemData: &armsecurity.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-27T21:53:29.0928001Z"); return t }()),
				CreatedBy:          to.Ptr("string"),
				CreatedByType:      to.Ptr(armsecurity.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-27T21:53:29.0928001Z"); return t }()),
				LastModifiedBy:     to.Ptr("string"),
				LastModifiedByType: to.Ptr(armsecurity.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.IoTSecuritySolutionModel) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.IoTSecuritySolutionModel)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/stable/2019-08-01/examples/IoTSecuritySolutions/CreateIoTSecuritySolution.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIotSecuritySolution_Update(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/stable/2019-08-01/examples/IoTSecuritySolutions/UpdateIoTSecuritySolution.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Use this method to update existing IoT Security solution"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewIotSecuritySolutionClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23", cred, &options)
	res, err := client.Update(ctx,
		"myRg",
		"default",
		armsecurity.UpdateIotSecuritySolutionData{
			Tags: map[string]*string{
				"foo": to.Ptr("bar"),
			},
			Properties: &armsecurity.UpdateIoTSecuritySolutionProperties{
				RecommendationsConfiguration: []*armsecurity.RecommendationConfigurationProperties{
					{
						RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTOpenPorts),
						Status:             to.Ptr(armsecurity.RecommendationConfigStatusDisabled),
					},
					{
						RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTSharedCredentials),
						Status:             to.Ptr(armsecurity.RecommendationConfigStatusDisabled),
					}},
				UserDefinedResources: &armsecurity.UserDefinedResourcesProperties{
					Query: to.Ptr("where type != \"microsoft.devices/iothubs\" | where name contains \"v2\""),
					QuerySubscriptions: []*string{
						to.Ptr("075423e9-7d33-4166-8bdf-3920b04e3735")},
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/stable/2019-08-01/examples/IoTSecuritySolutions/UpdateIoTSecuritySolution.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurity.IoTSecuritySolutionModel{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Security/IoTSecuritySolutions"),
			ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/MyGroup/providers/Microsoft.Security/Locations/eastus/IoTSecuritySolutions/default"),
			Tags: map[string]*string{
				"foo": to.Ptr("bar"),
			},
			Location: to.Ptr("East Us"),
			Properties: &armsecurity.IoTSecuritySolutionProperties{
				AutoDiscoveredResources: []*string{
					to.Ptr("/subscriptions/075423e9-7d33-4166-8bdf-3920b04e3735"),
					to.Ptr("/subscriptions/075423e9-7d33-4166-8bdf-3920b04e3735/resourceGroups/myRg/providers/Microsoft.Devices/IotHubs/FirstIotHub")},
				DisabledDataSources: []*armsecurity.DataSource{},
				DisplayName:         to.Ptr("Solution Default"),
				Export: []*armsecurity.ExportData{
					to.Ptr(armsecurity.ExportDataRawEvents)},
				IotHubs: []*string{
					to.Ptr("/subscriptions/075423e9-7d33-4166-8bdf-3920b04e3735/resourceGroups/myRg/providers/Microsoft.Devices/IotHubs/FirstIotHub")},
				RecommendationsConfiguration: []*armsecurity.RecommendationConfigurationProperties{
					{
						Name:               to.Ptr("Service Principal Not Used with ACR"),
						RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTAcrauthentication),
						Status:             to.Ptr(armsecurity.RecommendationConfigStatusEnabled),
					},
					{
						Name:               to.Ptr("Agent sending underutilized messages"),
						RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTAgentSendsUnutilizedMessages),
						Status:             to.Ptr(armsecurity.RecommendationConfigStatus("TurnedOn")),
					},
					{
						Name:               to.Ptr("Operating system (OS) baseline validation failure"),
						RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTBaseline),
						Status:             to.Ptr(armsecurity.RecommendationConfigStatusEnabled),
					},
					{
						Name:               to.Ptr("Edge Hub memory can be optimized"),
						RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTEdgeHubMemOptimize),
						Status:             to.Ptr(armsecurity.RecommendationConfigStatusEnabled),
					},
					{
						Name:               to.Ptr("No Logging Configured for Edge Module"),
						RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTEdgeLoggingOptions),
						Status:             to.Ptr(armsecurity.RecommendationConfigStatusEnabled),
					},
					{
						Name:               to.Ptr("Module Settings Inconsistent in SecurityGroup"),
						RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTInconsistentModuleSettings),
						Status:             to.Ptr(armsecurity.RecommendationConfigStatusEnabled),
					},
					{
						Name:               to.Ptr("Install the Azure Security of Things Agent"),
						RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTInstallAgent),
						Status:             to.Ptr(armsecurity.RecommendationConfigStatusEnabled),
					},
					{
						Name:               to.Ptr("Default IP Filter Policy should be Deny"),
						RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTIpfilterDenyAll),
						Status:             to.Ptr(armsecurity.RecommendationConfigStatusEnabled),
					},
					{
						Name:               to.Ptr("IP Filter rule includes large IP range"),
						RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTIpfilterPermissiveRule),
						Status:             to.Ptr(armsecurity.RecommendationConfigStatusEnabled),
					},
					{
						Name:               to.Ptr("Open Ports On Device"),
						RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTOpenPorts),
						Status:             to.Ptr(armsecurity.RecommendationConfigStatusDisabled),
					},
					{
						Name:               to.Ptr("Permissive firewall policy in one of the chains was found"),
						RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTPermissiveFirewallPolicy),
						Status:             to.Ptr(armsecurity.RecommendationConfigStatusEnabled),
					},
					{
						Name:               to.Ptr("Permissive firewall rule in the input chain was found"),
						RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTPermissiveInputFirewallRules),
						Status:             to.Ptr(armsecurity.RecommendationConfigStatusEnabled),
					},
					{
						Name:               to.Ptr("Permissive firewall rule in the output chain was found"),
						RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTPermissiveOutputFirewallRules),
						Status:             to.Ptr(armsecurity.RecommendationConfigStatusEnabled),
					},
					{
						Name:               to.Ptr("High level permissions configured in Edge model twin for Edge module"),
						RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTPrivilegedDockerOptions),
						Status:             to.Ptr(armsecurity.RecommendationConfigStatusEnabled),
					},
					{
						Name:               to.Ptr("Same Authentication Credentials used by multiple devices"),
						RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTSharedCredentials),
						Status:             to.Ptr(armsecurity.RecommendationConfigStatusDisabled),
					},
					{
						Name:               to.Ptr("TLS cipher suite upgrade"),
						RecommendationType: to.Ptr(armsecurity.RecommendationTypeIoTVulnerableTLSCipherSuite),
						Status:             to.Ptr(armsecurity.RecommendationConfigStatusEnabled),
					}},
				Status:                  to.Ptr(armsecurity.SecuritySolutionStatusEnabled),
				UnmaskedIPLoggingStatus: to.Ptr(armsecurity.UnmaskedIPLoggingStatusEnabled),
				UserDefinedResources: &armsecurity.UserDefinedResourcesProperties{
					Query: to.Ptr("where type != \"microsoft.devices/iothubs\" | where name contains \"v2\""),
					QuerySubscriptions: []*string{
						to.Ptr("075423e9-7d33-4166-8bdf-3920b04e3735")},
				},
				Workspace: to.Ptr("/subscriptions/c4930e90-cd72-4aa5-93e9-2d081d129569/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace1"),
			},
			SystemData: &armsecurity.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-27T21:53:29.0928001Z"); return t }()),
				CreatedBy:          to.Ptr("string"),
				CreatedByType:      to.Ptr(armsecurity.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-27T21:53:29.0928001Z"); return t }()),
				LastModifiedBy:     to.Ptr("string"),
				LastModifiedByType: to.Ptr(armsecurity.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.IoTSecuritySolutionModel) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.IoTSecuritySolutionModel)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/stable/2019-08-01/examples/IoTSecuritySolutions/UpdateIoTSecuritySolution.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIotSecuritySolution_Delete(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/stable/2019-08-01/examples/IoTSecuritySolutions/DeleteIoTSecuritySolution.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete an IoT security solution"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewIotSecuritySolutionClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23", cred, &options)
	_, err := client.Delete(ctx,
		"MyGroup",
		"default",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/stable/2019-08-01/examples/IoTSecuritySolutions/DeleteIoTSecuritySolution.json: %v", err)
	}
}

func TestIotSecuritySolutionAnalytics_List(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/stable/2019-08-01/examples/IoTSecuritySolutionsAnalytics/GetIoTSecuritySolutionsSecurityAnalyticsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Security Solution Analytics"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewIotSecuritySolutionAnalyticsClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23", cred, &options)
	res, err := client.List(ctx,
		"MyGroup",
		"default",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/stable/2019-08-01/examples/IoTSecuritySolutionsAnalytics/GetIoTSecuritySolutionsSecurityAnalyticsList.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurity.IoTSecuritySolutionAnalyticsModelList{
			Value: []*armsecurity.IoTSecuritySolutionAnalyticsModel{
				{
					Name: to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/MyGroup/providers/Microsoft.Security/IoTSecuritySolutions/Locations/eastus/default"),
					Type: to.Ptr("Microsoft.Security/iotSecuritySolutions/analyticsModels"),
					ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/MyGroup/providers/Microsoft.Security/IoTSecuritySolutions/Locations/eastus/default"),
					Properties: &armsecurity.IoTSecuritySolutionAnalyticsModelProperties{
						DevicesMetrics: []*armsecurity.IoTSecuritySolutionAnalyticsModelPropertiesDevicesMetricsItem{
							{
								Date: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-02-01T00:00:00Z"); return t }()),
								DevicesMetrics: &armsecurity.IoTSeverityMetrics{
									High:   to.Ptr[int64](3),
									Low:    to.Ptr[int64](70),
									Medium: to.Ptr[int64](15),
								},
							},
							{
								Date: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-02-02T00:00:00Z"); return t }()),
								DevicesMetrics: &armsecurity.IoTSeverityMetrics{
									High:   to.Ptr[int64](3),
									Low:    to.Ptr[int64](65),
									Medium: to.Ptr[int64](45),
								},
							}},
						Metrics: &armsecurity.IoTSeverityMetrics{
							High:   to.Ptr[int64](5),
							Low:    to.Ptr[int64](102),
							Medium: to.Ptr[int64](200),
						},
						MostPrevalentDeviceAlerts: []*armsecurity.IoTSecurityDeviceAlert{
							{
								AlertDisplayName: to.Ptr("Custom Alert - number of device to cloud messages in AMQP protocol is not in the allowed range"),
								AlertsCount:      to.Ptr[int64](200),
								ReportedSeverity: to.Ptr(armsecurity.ReportedSeverityLow),
							},
							{
								AlertDisplayName: to.Ptr("Custom Alert - execution of a process that is not allowed"),
								AlertsCount:      to.Ptr[int64](170),
								ReportedSeverity: to.Ptr(armsecurity.ReportedSeverityMedium),
							},
							{
								AlertDisplayName: to.Ptr("Successful Bruteforce"),
								AlertsCount:      to.Ptr[int64](150),
								ReportedSeverity: to.Ptr(armsecurity.ReportedSeverityLow),
							}},
						MostPrevalentDeviceRecommendations: []*armsecurity.IoTSecurityDeviceRecommendation{
							{
								DevicesCount:              to.Ptr[int64](200),
								RecommendationDisplayName: to.Ptr("Install the Azure Security of Things Agent"),
								ReportedSeverity:          to.Ptr(armsecurity.ReportedSeverityLow),
							},
							{
								DevicesCount:              to.Ptr[int64](170),
								RecommendationDisplayName: to.Ptr("High level permissions configured in Edge model twin for Edge module"),
								ReportedSeverity:          to.Ptr(armsecurity.ReportedSeverityLow),
							},
							{
								DevicesCount:              to.Ptr[int64](150),
								RecommendationDisplayName: to.Ptr("Same Authentication Credentials used by multiple devices"),
								ReportedSeverity:          to.Ptr(armsecurity.ReportedSeverityMedium),
							}},
						TopAlertedDevices: []*armsecurity.IoTSecurityAlertedDevice{
							{
								AlertsCount: to.Ptr[int64](200),
								DeviceID:    to.Ptr("id1"),
							},
							{
								AlertsCount: to.Ptr[int64](170),
								DeviceID:    to.Ptr("id2"),
							},
							{
								AlertsCount: to.Ptr[int64](150),
								DeviceID:    to.Ptr("id3"),
							}},
						UnhealthyDeviceCount: to.Ptr[int64](1200),
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.IoTSecuritySolutionAnalyticsModelList) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.IoTSecuritySolutionAnalyticsModelList)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/stable/2019-08-01/examples/IoTSecuritySolutionsAnalytics/GetIoTSecuritySolutionsSecurityAnalyticsList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIotSecuritySolutionAnalytics_Get(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/stable/2019-08-01/examples/IoTSecuritySolutionsAnalytics/GetIoTSecuritySolutionsSecurityAnalytics.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Security Solution Analytics"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewIotSecuritySolutionAnalyticsClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23", cred, &options)
	res, err := client.Get(ctx,
		"MyGroup",
		"default",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/stable/2019-08-01/examples/IoTSecuritySolutionsAnalytics/GetIoTSecuritySolutionsSecurityAnalytics.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurity.IoTSecuritySolutionAnalyticsModel{
			Name: to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/MyGroup/providers/Microsoft.Security/IoTSecuritySolutions/Locations/eastus/default"),
			Type: to.Ptr("Microsoft.Security/iotSecuritySolutions/analyticsModels"),
			ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/MyGroup/providers/Microsoft.Security/IoTSecuritySolutions/Locations/eastus/default"),
			Properties: &armsecurity.IoTSecuritySolutionAnalyticsModelProperties{
				DevicesMetrics: []*armsecurity.IoTSecuritySolutionAnalyticsModelPropertiesDevicesMetricsItem{
					{
						Date: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-02-01T00:00:00Z"); return t }()),
						DevicesMetrics: &armsecurity.IoTSeverityMetrics{
							High:   to.Ptr[int64](3),
							Low:    to.Ptr[int64](70),
							Medium: to.Ptr[int64](15),
						},
					},
					{
						Date: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-02-02T00:00:00Z"); return t }()),
						DevicesMetrics: &armsecurity.IoTSeverityMetrics{
							High:   to.Ptr[int64](3),
							Low:    to.Ptr[int64](65),
							Medium: to.Ptr[int64](45),
						},
					}},
				Metrics: &armsecurity.IoTSeverityMetrics{
					High:   to.Ptr[int64](5),
					Low:    to.Ptr[int64](102),
					Medium: to.Ptr[int64](200),
				},
				MostPrevalentDeviceAlerts: []*armsecurity.IoTSecurityDeviceAlert{
					{
						AlertDisplayName: to.Ptr("Custom Alert - number of device to cloud messages in AMQP protocol is not in the allowed range"),
						AlertsCount:      to.Ptr[int64](200),
						ReportedSeverity: to.Ptr(armsecurity.ReportedSeverityLow),
					},
					{
						AlertDisplayName: to.Ptr("Custom Alert - execution of a process that is not allowed"),
						AlertsCount:      to.Ptr[int64](170),
						ReportedSeverity: to.Ptr(armsecurity.ReportedSeverityMedium),
					},
					{
						AlertDisplayName: to.Ptr("Successful Bruteforce"),
						AlertsCount:      to.Ptr[int64](150),
						ReportedSeverity: to.Ptr(armsecurity.ReportedSeverityLow),
					}},
				MostPrevalentDeviceRecommendations: []*armsecurity.IoTSecurityDeviceRecommendation{
					{
						DevicesCount:              to.Ptr[int64](200),
						RecommendationDisplayName: to.Ptr("Install the Azure Security of Things Agent"),
						ReportedSeverity:          to.Ptr(armsecurity.ReportedSeverityLow),
					},
					{
						DevicesCount:              to.Ptr[int64](170),
						RecommendationDisplayName: to.Ptr("High level permissions configured in Edge model twin for Edge module"),
						ReportedSeverity:          to.Ptr(armsecurity.ReportedSeverityLow),
					},
					{
						DevicesCount:              to.Ptr[int64](150),
						RecommendationDisplayName: to.Ptr("Same Authentication Credentials used by multiple devices"),
						ReportedSeverity:          to.Ptr(armsecurity.ReportedSeverityMedium),
					}},
				TopAlertedDevices: []*armsecurity.IoTSecurityAlertedDevice{
					{
						AlertsCount: to.Ptr[int64](200),
						DeviceID:    to.Ptr("id1"),
					},
					{
						AlertsCount: to.Ptr[int64](170),
						DeviceID:    to.Ptr("id2"),
					},
					{
						AlertsCount: to.Ptr[int64](150),
						DeviceID:    to.Ptr("id3"),
					}},
				UnhealthyDeviceCount: to.Ptr[int64](1200),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.IoTSecuritySolutionAnalyticsModel) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.IoTSecuritySolutionAnalyticsModel)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/stable/2019-08-01/examples/IoTSecuritySolutionsAnalytics/GetIoTSecuritySolutionsSecurityAnalytics.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIotSecuritySolutionsAnalyticsAggregatedAlert_List(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/stable/2019-08-01/examples/IoTSecuritySolutionsAnalytics/GetIoTSecuritySolutionsSecurityAggregatedAlertList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get the aggregated alert list of yours IoT Security solution"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewIotSecuritySolutionsAnalyticsAggregatedAlertClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23", cred, &options)
	pager := client.List("MyGroup",
		"default",
		&armsecurity.IotSecuritySolutionsAnalyticsAggregatedAlertClientListOptions{Top: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/security/resource-manager/Microsoft.Security/stable/2019-08-01/examples/IoTSecuritySolutionsAnalytics/GetIoTSecuritySolutionsSecurityAggregatedAlertList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsecurity.IoTSecurityAggregatedAlertList{
			Value: []*armsecurity.IoTSecurityAggregatedAlert{
				{
					Name: to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/MyGroup/providers/Microsoft.Security/IoTSecuritySolutions/Locations/eastus/default/IoT_Bruteforce_Fail/2019-02-02"),
					Type: to.Ptr("Microsoft.Security/iotSecuritySolutions/analyticsModels/aggregatedAlerts"),
					ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/MyGroup/providers/Microsoft.Security/IoTSecuritySolutions/Locations/eastus/default/IoT_Bruteforce_Fail/2019-02-02"),
					Properties: &armsecurity.IoTSecurityAggregatedAlertProperties{
						Description:          to.Ptr("Multiple unsuccsseful login attempts identified. A Bruteforce attack on the device failed."),
						ActionTaken:          to.Ptr("Detected"),
						AggregatedDateUTC:    to.Ptr(func() time.Time { t, _ := time.Parse("2006-01-02", "2019-02-02"); return t }()),
						AlertDisplayName:     to.Ptr("Failed Bruteforce"),
						AlertType:            to.Ptr("IoT_Bruteforce_Fail"),
						Count:                to.Ptr[int64](50),
						EffectedResourceType: to.Ptr("IoT Device"),
						LogAnalyticsQuery:    to.Ptr("SecurityAlert | where tolower(ResourceId) == tolower('/subscriptions/b77ec8a9-04ed-48d2-a87a-e5887b978ba6/resourceGroups/IoT-Solution-DemoEnv/providers/Microsoft.Devices/IotHubs/rtogm-hub') and tolower(AlertName) == tolower('Custom Alert - number of device to cloud messages in MQTT protocol is not in the allowed range') | extend DeviceId=parse_json(ExtendedProperties)['DeviceId'] | project DeviceId, TimeGenerated, DisplayName, AlertSeverity, Description, RemediationSteps, ExtendedProperties"),
						RemediationSteps:     to.Ptr(""),
						ReportedSeverity:     to.Ptr(armsecurity.ReportedSeverityLow),
						SystemSource:         to.Ptr("Devices"),
						TopDevicesList: []*armsecurity.IoTSecurityAggregatedAlertPropertiesTopDevicesListItem{
							{
								AlertsCount:    to.Ptr[int64](45),
								DeviceID:       to.Ptr("testDevice1"),
								LastOccurrence: to.Ptr("10:42"),
							},
							{
								AlertsCount:    to.Ptr[int64](30),
								DeviceID:       to.Ptr("testDevice2"),
								LastOccurrence: to.Ptr("15:42"),
							}},
						VendorName: to.Ptr("Microsoft"),
					},
				},
				{
					Name: to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/MyGroup/providers/Microsoft.Security/IoTSecuritySolutions/Locations/eastus/default/IoT_Bruteforce_Success/2019-02-02"),
					Type: to.Ptr("Microsoft.Security/iotSecuritySolutions/analyticsModels/aggregatedAlerts"),
					ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/MyGroup/providers/Microsoft.Security/IoTSecuritySolutions/Locations/eastus/default/IoT_Bruteforce_Success/2019-02-02"),
					Properties: &armsecurity.IoTSecurityAggregatedAlertProperties{
						Description:          to.Ptr("Multiple unsuccsseful login attempts identified followed by a succssful login. A Bruteforce attack on the device was Successfule"),
						ActionTaken:          to.Ptr("Detected"),
						AggregatedDateUTC:    to.Ptr(func() time.Time { t, _ := time.Parse("2006-01-02", "2019-02-02"); return t }()),
						AlertDisplayName:     to.Ptr("Successful Bruteforce"),
						AlertType:            to.Ptr("IoT_Bruteforce_Success"),
						Count:                to.Ptr[int64](600000),
						EffectedResourceType: to.Ptr("IoT Device"),
						LogAnalyticsQuery:    to.Ptr("SecurityAlert | where tolower(ResourceId) == tolower('/subscriptions/b77ec8a9-04ed-48d2-a87a-e5887b978ba6/resourceGroups/IoT-Solution-DemoEnv/providers/Microsoft.Devices/IotHubs/rtogm-hub') and tolower(AlertName) == tolower('Custom Alert - number of device to cloud messages in MQTT protocol is not in the allowed range') | extend DeviceId=parse_json(ExtendedProperties)['DeviceId'] | project DeviceId, TimeGenerated, DisplayName, AlertSeverity, Description, RemediationSteps, ExtendedProperties"),
						RemediationSteps:     to.Ptr(""),
						ReportedSeverity:     to.Ptr(armsecurity.ReportedSeverityLow),
						SystemSource:         to.Ptr("Devices"),
						TopDevicesList: []*armsecurity.IoTSecurityAggregatedAlertPropertiesTopDevicesListItem{
							{
								AlertsCount:    to.Ptr[int64](12321),
								DeviceID:       to.Ptr("testDevice1"),
								LastOccurrence: to.Ptr("10:42"),
							},
							{
								AlertsCount:    to.Ptr[int64](455),
								DeviceID:       to.Ptr("testDevice2"),
								LastOccurrence: to.Ptr("15:42"),
							}},
						VendorName: to.Ptr("Microsoft"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.IoTSecurityAggregatedAlertList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.IoTSecurityAggregatedAlertList)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/stable/2019-08-01/examples/IoTSecuritySolutionsAnalytics/GetIoTSecuritySolutionsSecurityAggregatedAlertList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIotSecuritySolutionsAnalyticsAggregatedAlert_Get(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/stable/2019-08-01/examples/IoTSecuritySolutionsAnalytics/GetIoTSecuritySolutionsSecurityAggregatedAlert.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get the aggregated security analytics alert of yours IoT Security solution. This aggregation is performed by alert name"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewIotSecuritySolutionsAnalyticsAggregatedAlertClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23", cred, &options)
	res, err := client.Get(ctx,
		"MyGroup",
		"default",
		"IoT_Bruteforce_Fail/2019-02-02",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/stable/2019-08-01/examples/IoTSecuritySolutionsAnalytics/GetIoTSecuritySolutionsSecurityAggregatedAlert.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurity.IoTSecurityAggregatedAlert{
			Name: to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/MyGroup/providers/Microsoft.Security/IoTSecuritySolutions/Locations/eastus/default/IoT_Bruteforce_Fail/2019-02-02"),
			Type: to.Ptr("Microsoft.Security/iotSecuritySolutions/analyticsModels/aggregatedAlerts"),
			ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/MyGroup/providers/Microsoft.Security/IoTSecuritySolutions/Locations/eastus/default/IoT_Bruteforce_Fail/2019-02-02"),
			Properties: &armsecurity.IoTSecurityAggregatedAlertProperties{
				Description:          to.Ptr("Multiple unsuccsseful login attempts identified. A Bruteforce attack on the device failed."),
				ActionTaken:          to.Ptr("Detected"),
				AggregatedDateUTC:    to.Ptr(func() time.Time { t, _ := time.Parse("2006-01-02", "2019-02-02"); return t }()),
				AlertDisplayName:     to.Ptr("Failed Bruteforce"),
				AlertType:            to.Ptr("IoT_Bruteforce_Fail"),
				Count:                to.Ptr[int64](50),
				EffectedResourceType: to.Ptr("IoT Device"),
				LogAnalyticsQuery:    to.Ptr("SecurityAlert | where tolower(ResourceId) == tolower('/subscriptions/b77ec8a9-04ed-48d2-a87a-e5887b978ba6/resourceGroups/IoT-Solution-DemoEnv/providers/Microsoft.Devices/IotHubs/rtogm-hub') and tolower(AlertName) == tolower('Custom Alert - number of device to cloud messages in MQTT protocol is not in the allowed range') | extend DeviceId=parse_json(ExtendedProperties)['DeviceId'] | project DeviceId, TimeGenerated, DisplayName, AlertSeverity, Description, RemediationSteps, ExtendedProperties"),
				RemediationSteps:     to.Ptr(""),
				ReportedSeverity:     to.Ptr(armsecurity.ReportedSeverityLow),
				SystemSource:         to.Ptr("Devices"),
				TopDevicesList: []*armsecurity.IoTSecurityAggregatedAlertPropertiesTopDevicesListItem{
					{
						AlertsCount:    to.Ptr[int64](100),
						DeviceID:       to.Ptr("testDevice1"),
						LastOccurrence: to.Ptr("10:42"),
					},
					{
						AlertsCount:    to.Ptr[int64](80),
						DeviceID:       to.Ptr("testDevice2"),
						LastOccurrence: to.Ptr("15:42"),
					}},
				VendorName: to.Ptr("Microsoft"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.IoTSecurityAggregatedAlert) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.IoTSecurityAggregatedAlert)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/stable/2019-08-01/examples/IoTSecuritySolutionsAnalytics/GetIoTSecuritySolutionsSecurityAggregatedAlert.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIotSecuritySolutionsAnalyticsAggregatedAlert_Dismiss(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/stable/2019-08-01/examples/IoTSecuritySolutionsAnalytics/PostIoTSecuritySolutionsSecurityAggregatedAlertDismiss.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Dismiss an aggregated IoT Security Solution Alert"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewIotSecuritySolutionsAnalyticsAggregatedAlertClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23", cred, &options)
	_, err := client.Dismiss(ctx,
		"IoTEdgeResources",
		"default",
		"IoT_Bruteforce_Fail/2019-02-02/dismiss",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/stable/2019-08-01/examples/IoTSecuritySolutionsAnalytics/PostIoTSecuritySolutionsSecurityAggregatedAlertDismiss.json: %v", err)
	}
}

func TestIotSecuritySolutionsAnalyticsRecommendation_Get(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/stable/2019-08-01/examples/IoTSecuritySolutionsAnalytics/GetIoTSecuritySolutionsSecurityRecommendation.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get the aggregated security analytics recommendation of yours IoT Security solution"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewIotSecuritySolutionsAnalyticsRecommendationClient("075423e9-7d33-4166-8bdf-3920b04e3735", cred, &options)
	res, err := client.Get(ctx,
		"IoTEdgeResources",
		"default",
		"OpenPortsOnDevice",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/stable/2019-08-01/examples/IoTSecuritySolutionsAnalytics/GetIoTSecuritySolutionsSecurityRecommendation.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurity.IoTSecurityAggregatedRecommendation{
			Name: to.Ptr("/subscriptions/075423e9-7d33-4166-8bdf-3920b04e3735/resourceGroups/IoTEdgeResources/providers/Microsoft.Security/IoTSecuritySolutions/Locations/eastus/default/OpenPortsOnDevice"),
			Type: to.Ptr("Microsoft.Security/iotSecuritySolutions/analyticsModels/aggregatedRecommendations"),
			ID:   to.Ptr("/subscriptions/075423e9-7d33-4166-8bdf-3920b04e3735/resourceGroups/IoTEdgeResources/providers/Microsoft.Security/IoTSecuritySolutions/Locations/eastus/default/OpenPortsOnDevice"),
			Properties: &armsecurity.IoTSecurityAggregatedRecommendationProperties{
				Description:               to.Ptr("An allowed firewall policy was found in main firewall Chains (INPUT/OUTPUT). The policy should Deny all traffic by default define rules to allow necessary communication to/from the device"),
				DetectedBy:                to.Ptr("Microsoft"),
				HealthyDevices:            to.Ptr[int64](10000),
				LogAnalyticsQuery:         to.Ptr("SecurityRecommendation | where tolower(AssessedResourceId) == tolower('/subscriptions/075423e9-7d33-4166-8bdf-3920b04e3735/resourceGroups/IoTEdgeResources/providers/Microsoft.Devices/IotHubs/t-ofdadu-hub') and tolower(RecommendationName) == tolower('OpenPortsOnDevice')"),
				RecommendationDisplayName: to.Ptr("Permissive firewall policy in one of the chains was found"),
				RecommendationName:        to.Ptr("OpenPortsOnDevice"),
				RecommendationTypeID:      to.Ptr("{20ff7fc3-e762-44dd-bd96-b71116dcdc23}"),
				RemediationSteps:          to.Ptr(""),
				ReportedSeverity:          to.Ptr(armsecurity.ReportedSeverityLow),
				UnhealthyDeviceCount:      to.Ptr[int64](200),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.IoTSecurityAggregatedRecommendation) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.IoTSecurityAggregatedRecommendation)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/stable/2019-08-01/examples/IoTSecuritySolutionsAnalytics/GetIoTSecuritySolutionsSecurityRecommendation.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIotSecuritySolutionsAnalyticsRecommendation_List(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/stable/2019-08-01/examples/IoTSecuritySolutionsAnalytics/GetIoTSecuritySolutionsSecurityRecommendationList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get the list of aggregated security analytics recommendations of yours IoT Security solution"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewIotSecuritySolutionsAnalyticsRecommendationClient("075423e9-7d33-4166-8bdf-3920b04e3735", cred, &options)
	pager := client.List("IoTEdgeResources",
		"default",
		&armsecurity.IotSecuritySolutionsAnalyticsRecommendationClientListOptions{Top: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/security/resource-manager/Microsoft.Security/stable/2019-08-01/examples/IoTSecuritySolutionsAnalytics/GetIoTSecuritySolutionsSecurityRecommendationList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsecurity.IoTSecurityAggregatedRecommendationList{
			Value: []*armsecurity.IoTSecurityAggregatedRecommendation{
				{
					Name: to.Ptr("/subscriptions/075423e9-7d33-4166-8bdf-3920b04e3735/resourceGroups/IoTEdgeResources/providers/Microsoft.Security/IoTSecuritySolutions/Locations/eastus/default/OpenPortsOnDevice"),
					Type: to.Ptr("Microsoft.Security/iotSecuritySolutions/analyticsModels/aggregatedRecommendations"),
					ID:   to.Ptr("/subscriptions/075423e9-7d33-4166-8bdf-3920b04e3735/resourceGroups/IoTEdgeResources/providers/Microsoft.Security/IoTSecuritySolutions/Locations/eastus/default/OpenPortsOnDevice"),
					Properties: &armsecurity.IoTSecurityAggregatedRecommendationProperties{
						Description:               to.Ptr("An allowed firewall policy was found in main firewall Chains (INPUT/OUTPUT). The policy should Deny all traffic by default define rules to allow necessary communication to/from the device"),
						DetectedBy:                to.Ptr("Microsoft"),
						HealthyDevices:            to.Ptr[int64](10000),
						LogAnalyticsQuery:         to.Ptr("SecurityRecommendation | where tolower(AssessedResourceId) == tolower('/subscriptions/075423e9-7d33-4166-8bdf-3920b04e3735/resourceGroups/IoTEdgeResources/providers/Microsoft.Devices/IotHubs/t-ofdadu-hub') and tolower(RecommendationName) == tolower('OpenPortsOnDevice')"),
						RecommendationDisplayName: to.Ptr("Permissive firewall policy in one of the chains was found"),
						RecommendationName:        to.Ptr("OpenPortsOnDevice"),
						RecommendationTypeID:      to.Ptr("{20ff7fc3-e762-44dd-bd96-b71116dcdc23}"),
						RemediationSteps:          to.Ptr(""),
						ReportedSeverity:          to.Ptr(armsecurity.ReportedSeverityLow),
						UnhealthyDeviceCount:      to.Ptr[int64](200),
					},
				},
				{
					Name: to.Ptr("/subscriptions/075423e9-7d33-4166-8bdf-3920b04e3735/resourceGroups/IoTEdgeResources/providers/Microsoft.Security/IoTSecuritySolutions/Locations/eastus/default/IoT_InstallAgent"),
					Type: to.Ptr("Microsoft.Security/iotSecuritySolutions/analyticsModels/aggregatedRecommendations"),
					ID:   to.Ptr("/subscriptions/075423e9-7d33-4166-8bdf-3920b04e3735/resourceGroups/IoTEdgeResources/providers/Microsoft.Security/IoTSecuritySolutions/Locations/eastus/default/TooLargeIPRange"),
					Properties: &armsecurity.IoTSecurityAggregatedRecommendationProperties{
						Description:               to.Ptr("An allow IP filter rule source IP range is too large. Overly permissive rules can expose your IoT hub to malicious actors."),
						DetectedBy:                to.Ptr("Microsoft"),
						HealthyDevices:            to.Ptr[int64](130000),
						LogAnalyticsQuery:         to.Ptr("SecurityRecommendation | where tolower(AssessedResourceId) == tolower('/subscriptions/075423e9-7d33-4166-8bdf-3920b04e3735/resourceGroups/IoTEdgeResources/providers/Microsoft.Devices/IotHubs/t-ofdadu-hub') and tolower(RecommendationName) == tolower('TooLargeIPRange')"),
						RecommendationDisplayName: to.Ptr("Permissive firewall policy in one of the chains was found"),
						RecommendationName:        to.Ptr("TooLargeIPRange"),
						RecommendationTypeID:      to.Ptr("{20ff7fc3-e762-44dd-bd96-b71116dcdc23}"),
						RemediationSteps:          to.Ptr(""),
						ReportedSeverity:          to.Ptr(armsecurity.ReportedSeverityHigh),
						UnhealthyDeviceCount:      to.Ptr[int64](1),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.IoTSecurityAggregatedRecommendationList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.IoTSecurityAggregatedRecommendationList)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/stable/2019-08-01/examples/IoTSecuritySolutionsAnalytics/GetIoTSecuritySolutionsSecurityRecommendationList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLocations_List(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/preview/2015-06-01-preview/examples/Locations/GetLocations_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get security data locations"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewLocationsClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23",
		"<asc-location>", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/security/resource-manager/Microsoft.Security/preview/2015-06-01-preview/examples/Locations/GetLocations_example.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsecurity.AscLocationList{
			Value: []*armsecurity.AscLocation{
				{
					Name: to.Ptr("centralus"),
					Type: to.Ptr("Microsoft.Security/locations"),
					ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/locations/centralus"),
					Properties: map[string]interface{}{
						"homeRegionName": "centralus",
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AscLocationList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AscLocationList)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/preview/2015-06-01-preview/examples/Locations/GetLocations_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLocations_Get(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/preview/2015-06-01-preview/examples/Locations/GetLocation_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get security data location"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewLocationsClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23",
		"centralus", cred, &options)
	res, err := client.Get(ctx,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/preview/2015-06-01-preview/examples/Locations/GetLocation_example.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurity.AscLocation{
			Name: to.Ptr("centralus"),
			Type: to.Ptr("Microsoft.Security/locations"),
			ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/locations/centralus"),
			Properties: map[string]interface{}{
				"homeRegionName": "centralus",
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AscLocation) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AscLocation)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/preview/2015-06-01-preview/examples/Locations/GetLocation_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOperations_List(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestTasks_List(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/preview/2015-06-01-preview/examples/Tasks/GetTasksSubscription_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get security recommendations tasks"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewTasksClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23",
		"<asc-location>", cred, &options)
	pager := client.List(&armsecurity.TasksClientListOptions{Filter: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/security/resource-manager/Microsoft.Security/preview/2015-06-01-preview/examples/Tasks/GetTasksSubscription_example.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsecurity.TaskList{
			Value: []*armsecurity.Task{
				{
					Name: to.Ptr("62609ee7-d0a5-8616-9fe4-1df5cca7758d"),
					Type: to.Ptr("Microsoft.Security/locations/tasks"),
					ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/locations/westeurope/tasks/62609ee7-d0a5-8616-9fe4-1df5cca7758d"),
					Properties: &armsecurity.TaskProperties{
						CreationTimeUTC:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-05T10:42:03.9935508Z"); return t }()),
						LastStateChangeTimeUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-05T10:42:03.9935508Z"); return t }()),
						SecurityTaskParameters: &armsecurity.TaskParameters{
							AdditionalProperties: map[string]interface{}{
								"location":       "uksouth",
								"resourceGroup":  "myRg",
								"resourceId":     "/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/myRg/providers/Microsoft.Network/virtualNetworks/vnet1/subnets/default",
								"resourceName":   "default",
								"resourceParent": "vnet1",
								"resourceType":   "Subnet",
								"uniqueKey":      "/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/myRg/providers/Microsoft.Network/virtualNetworks/vnet1/subnets/default",
							},
							Name: to.Ptr("NetworkSecurityGroupMissingOnSubnet"),
						},
						State:    to.Ptr("Active"),
						SubState: to.Ptr("NA"),
					},
				},
				{
					Name: to.Ptr("d55b4dc0-779c-c66c-33e5-d7bce24c4222"),
					Type: to.Ptr("Microsoft.Security/locations/tasks"),
					ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/myRg/providers/Microsoft.Security/locations/westeurope/tasks/d55b4dc0-779c-c66c-33e5-d7bce24c4222"),
					Properties: &armsecurity.TaskProperties{
						CreationTimeUTC:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-02T11:41:27.0541014Z"); return t }()),
						LastStateChangeTimeUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-02T11:41:27.0541014Z"); return t }()),
						SecurityTaskParameters: &armsecurity.TaskParameters{
							AdditionalProperties: map[string]interface{}{
								"isDataDiskEncrypted": false,
								"isOsDiskEncrypted":   false,
								"resourceId":          "/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/myRg/providers/Microsoft.Compute/virtualMachines/vm1",
								"severity":            "High",
								"uniqueKey":           "EncryptionOnVmTaskParameters_/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/myRg/providers/Microsoft.Compute/virtualMachines/vm1",
								"vmId":                "/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/myRg/providers/Microsoft.Compute/virtualMachines/vm1",
								"vmName":              "vm1",
							},
							Name: to.Ptr("EncryptionOnVm"),
						},
						State:    to.Ptr("Active"),
						SubState: to.Ptr("NA"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.TaskList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.TaskList)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/preview/2015-06-01-preview/examples/Tasks/GetTasksSubscription_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTasks_ListByHomeRegion(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/preview/2015-06-01-preview/examples/Tasks/GetTasksSubscriptionLocation_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get security recommendations tasks from security data location"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewTasksClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23",
		"westeurope", cred, &options)
	pager := client.ListByHomeRegion(&armsecurity.TasksClientListByHomeRegionOptions{Filter: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/security/resource-manager/Microsoft.Security/preview/2015-06-01-preview/examples/Tasks/GetTasksSubscriptionLocation_example.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsecurity.TaskList{
			Value: []*armsecurity.Task{
				{
					Name: to.Ptr("62609ee7-d0a5-8616-9fe4-1df5cca7758d"),
					Type: to.Ptr("Microsoft.Security/locations/tasks"),
					ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/locations/westeurope/tasks/62609ee7-d0a5-8616-9fe4-1df5cca7758d"),
					Properties: &armsecurity.TaskProperties{
						CreationTimeUTC:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-05T10:42:03.9935508Z"); return t }()),
						LastStateChangeTimeUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-05T10:42:03.9935508Z"); return t }()),
						SecurityTaskParameters: &armsecurity.TaskParameters{
							AdditionalProperties: map[string]interface{}{
								"location":       "uksouth",
								"resourceGroup":  "myRg",
								"resourceId":     "/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/myRg/providers/Microsoft.Network/virtualNetworks/vnet1/subnets/default",
								"resourceName":   "default",
								"resourceParent": "vnet1",
								"resourceType":   "Subnet",
								"uniqueKey":      "/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/myRg/providers/Microsoft.Network/virtualNetworks/vnet1/subnets/default",
							},
							Name: to.Ptr("NetworkSecurityGroupMissingOnSubnet"),
						},
						State:    to.Ptr("Active"),
						SubState: to.Ptr("NA"),
					},
				},
				{
					Name: to.Ptr("d55b4dc0-779c-c66c-33e5-d7bce24c4222"),
					Type: to.Ptr("Microsoft.Security/locations/tasks"),
					ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/myRg/providers/Microsoft.Security/locations/westeurope/tasks/d55b4dc0-779c-c66c-33e5-d7bce24c4222"),
					Properties: &armsecurity.TaskProperties{
						CreationTimeUTC:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-02T11:41:27.0541014Z"); return t }()),
						LastStateChangeTimeUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-02T11:41:27.0541014Z"); return t }()),
						SecurityTaskParameters: &armsecurity.TaskParameters{
							AdditionalProperties: map[string]interface{}{
								"isDataDiskEncrypted": false,
								"isOsDiskEncrypted":   false,
								"resourceId":          "/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/myRg/providers/Microsoft.Compute/virtualMachines/vm1",
								"severity":            "High",
								"uniqueKey":           "EncryptionOnVmTaskParameters_/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/myRg/providers/Microsoft.Compute/virtualMachines/vm1",
								"vmId":                "/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/myRg/providers/Microsoft.Compute/virtualMachines/vm1",
								"vmName":              "vm1",
							},
							Name: to.Ptr("EncryptionOnVm"),
						},
						State:    to.Ptr("Active"),
						SubState: to.Ptr("NA"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.TaskList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.TaskList)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/preview/2015-06-01-preview/examples/Tasks/GetTasksSubscriptionLocation_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTasks_GetSubscriptionLevelTask(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/preview/2015-06-01-preview/examples/Tasks/GetTaskSubscriptionLocation_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get security recommendation task from security data location"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewTasksClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23",
		"westeurope", cred, &options)
	res, err := client.GetSubscriptionLevelTask(ctx,
		"62609ee7-d0a5-8616-9fe4-1df5cca7758d",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/preview/2015-06-01-preview/examples/Tasks/GetTaskSubscriptionLocation_example.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurity.Task{
			Name: to.Ptr("62609ee7-d0a5-8616-9fe4-1df5cca7758d"),
			Type: to.Ptr("Microsoft.Security/locations/tasks"),
			ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/locations/westeurope/tasks/62609ee7-d0a5-8616-9fe4-1df5cca7758d"),
			Properties: &armsecurity.TaskProperties{
				CreationTimeUTC:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-05T10:42:03.9935508Z"); return t }()),
				LastStateChangeTimeUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-03-05T10:42:03.9935508Z"); return t }()),
				SecurityTaskParameters: &armsecurity.TaskParameters{
					AdditionalProperties: map[string]interface{}{
						"location":       "uksouth",
						"resourceGroup":  "myRg",
						"resourceId":     "/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/myRg/providers/Microsoft.Network/virtualNetworks/vnet1/subnets/default",
						"resourceName":   "default",
						"resourceParent": "vnet1",
						"resourceType":   "Subnet",
						"uniqueKey":      "/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/myRg/providers/Microsoft.Network/virtualNetworks/vnet1/subnets/default",
					},
					Name: to.Ptr("NetworkSecurityGroupMissingOnSubnet"),
				},
				State:    to.Ptr("Active"),
				SubState: to.Ptr("NA"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Task) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Task)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/preview/2015-06-01-preview/examples/Tasks/GetTaskSubscriptionLocation_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTasks_UpdateSubscriptionLevelTaskState(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/preview/2015-06-01-preview/examples/Tasks/UpdateTaskSubscriptionLocation_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Change security recommendation task state"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewTasksClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23",
		"westeurope", cred, &options)
	_, err := client.UpdateSubscriptionLevelTaskState(ctx,
		"62609ee7-d0a5-8616-9fe4-1df5cca7758d",
		armsecurity.Enum16Dismiss,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/preview/2015-06-01-preview/examples/Tasks/UpdateTaskSubscriptionLocation_example.json: %v", err)
	}
}

func TestTasks_ListByResourceGroup(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/preview/2015-06-01-preview/examples/Tasks/GetTasksResourceGroupLocation_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get security recommendation tasks in a resource group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewTasksClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23",
		"westeurope", cred, &options)
	pager := client.ListByResourceGroup("myRg",
		&armsecurity.TasksClientListByResourceGroupOptions{Filter: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/security/resource-manager/Microsoft.Security/preview/2015-06-01-preview/examples/Tasks/GetTasksResourceGroupLocation_example.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsecurity.TaskList{
			Value: []*armsecurity.Task{
				{
					Name: to.Ptr("d55b4dc0-779c-c66c-33e5-d7bce24c4222"),
					Type: to.Ptr("Microsoft.Security/locations/tasks"),
					ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/myRg/providers/Microsoft.Security/locations/westeurope/tasks/d55b4dc0-779c-c66c-33e5-d7bce24c4222"),
					Properties: &armsecurity.TaskProperties{
						CreationTimeUTC:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-02T11:41:27.0541014Z"); return t }()),
						LastStateChangeTimeUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-02T11:41:27.0541014Z"); return t }()),
						SecurityTaskParameters: &armsecurity.TaskParameters{
							AdditionalProperties: map[string]interface{}{
								"isDataDiskEncrypted": false,
								"isOsDiskEncrypted":   false,
								"resourceId":          "/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/myRg/providers/Microsoft.Compute/virtualMachines/vm1",
								"severity":            "High",
								"uniqueKey":           "EncryptionOnVmTaskParameters_/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/myRg/providers/Microsoft.Compute/virtualMachines/vm1",
								"vmId":                "/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/myRg/providers/Microsoft.Compute/virtualMachines/vm1",
								"vmName":              "vm1",
							},
							Name: to.Ptr("EncryptionOnVm"),
						},
						State:    to.Ptr("Active"),
						SubState: to.Ptr("NA"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.TaskList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.TaskList)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/preview/2015-06-01-preview/examples/Tasks/GetTasksResourceGroupLocation_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTasks_GetResourceGroupLevelTask(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/preview/2015-06-01-preview/examples/Tasks/GetTaskResourceGroupLocation_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get security recommendation task in a resource group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewTasksClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23",
		"westeurope", cred, &options)
	res, err := client.GetResourceGroupLevelTask(ctx,
		"myRg",
		"d55b4dc0-779c-c66c-33e5-d7bce24c4222",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/preview/2015-06-01-preview/examples/Tasks/GetTaskResourceGroupLocation_example.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurity.Task{
			Name: to.Ptr("d55b4dc0-779c-c66c-33e5-d7bce24c4222"),
			Type: to.Ptr("Microsoft.Security/locations/tasks"),
			ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/myRg/providers/Microsoft.Security/locations/westeurope/tasks/d55b4dc0-779c-c66c-33e5-d7bce24c4222"),
			Properties: &armsecurity.TaskProperties{
				CreationTimeUTC:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-02T11:41:27.0541014Z"); return t }()),
				LastStateChangeTimeUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-04-02T11:41:27.0541014Z"); return t }()),
				SecurityTaskParameters: &armsecurity.TaskParameters{
					AdditionalProperties: map[string]interface{}{
						"isDataDiskEncrypted": false,
						"isOsDiskEncrypted":   false,
						"resourceId":          "/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/myRg/providers/Microsoft.Compute/virtualMachines/vm1",
						"severity":            "High",
						"uniqueKey":           "EncryptionOnVmTaskParameters_/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/myRg/providers/Microsoft.Compute/virtualMachines/vm1",
						"vmId":                "/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/myRg/providers/Microsoft.Compute/virtualMachines/vm1",
						"vmName":              "vm1",
					},
					Name: to.Ptr("EncryptionOnVm"),
				},
				State:    to.Ptr("Active"),
				SubState: to.Ptr("NA"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Task) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Task)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/preview/2015-06-01-preview/examples/Tasks/GetTaskResourceGroupLocation_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTasks_UpdateResourceGroupLevelTaskState(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/preview/2015-06-01-preview/examples/Tasks/UpdateTaskResourceGroupLocation_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Change security recommendation task state"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewTasksClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23",
		"westeurope", cred, &options)
	_, err := client.UpdateResourceGroupLevelTaskState(ctx,
		"myRg",
		"d55b4dc0-779c-c66c-33e5-d7bce24c4222",
		armsecurity.Enum16Dismiss,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/preview/2015-06-01-preview/examples/Tasks/UpdateTaskResourceGroupLocation_example.json: %v", err)
	}
}

func TestAutoProvisioningSettings_List(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/preview/2017-08-01-preview/examples/AutoProvisioningSettings/GetAutoProvisioningSettingsSubscription_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get auto provisioning settings for subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewAutoProvisioningSettingsClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/security/resource-manager/Microsoft.Security/preview/2017-08-01-preview/examples/AutoProvisioningSettings/GetAutoProvisioningSettingsSubscription_example.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsecurity.AutoProvisioningSettingList{
			Value: []*armsecurity.AutoProvisioningSetting{
				{
					Name: to.Ptr("default"),
					Type: to.Ptr("Microsoft.Security/autoProvisioningSettings"),
					ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/autoProvisioningSettings/default"),
					Properties: &armsecurity.AutoProvisioningSettingProperties{
						AutoProvision: to.Ptr(armsecurity.AutoProvisionOn),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AutoProvisioningSettingList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AutoProvisioningSettingList)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/preview/2017-08-01-preview/examples/AutoProvisioningSettings/GetAutoProvisioningSettingsSubscription_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAutoProvisioningSettings_Get(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/preview/2017-08-01-preview/examples/AutoProvisioningSettings/GetAutoProvisioningSettingSubscription_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get an auto provisioning setting for subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewAutoProvisioningSettingsClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23", cred, &options)
	res, err := client.Get(ctx,
		"default",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/preview/2017-08-01-preview/examples/AutoProvisioningSettings/GetAutoProvisioningSettingSubscription_example.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurity.AutoProvisioningSetting{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Security/autoProvisioningSettings"),
			ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/autoProvisioningSettings/default"),
			Properties: &armsecurity.AutoProvisioningSettingProperties{
				AutoProvision: to.Ptr(armsecurity.AutoProvisionOn),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AutoProvisioningSetting) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AutoProvisioningSetting)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/preview/2017-08-01-preview/examples/AutoProvisioningSettings/GetAutoProvisioningSettingSubscription_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAutoProvisioningSettings_Create(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/preview/2017-08-01-preview/examples/AutoProvisioningSettings/CreateAutoProvisioningSettingsSubscription_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create auto provisioning settings for subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewAutoProvisioningSettingsClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23", cred, &options)
	res, err := client.Create(ctx,
		"default",
		armsecurity.AutoProvisioningSetting{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Security/autoProvisioningSettings"),
			ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/autoProvisioningSettings/default"),
			Properties: &armsecurity.AutoProvisioningSettingProperties{
				AutoProvision: to.Ptr(armsecurity.AutoProvisionOn),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/preview/2017-08-01-preview/examples/AutoProvisioningSettings/CreateAutoProvisioningSettingsSubscription_example.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurity.AutoProvisioningSetting{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Security/autoProvisioningSettings"),
			ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/autoProvisioningSettings/default"),
			Properties: &armsecurity.AutoProvisioningSettingProperties{
				AutoProvision: to.Ptr(armsecurity.AutoProvisionOn),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AutoProvisioningSetting) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AutoProvisioningSetting)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/preview/2017-08-01-preview/examples/AutoProvisioningSettings/CreateAutoProvisioningSettingsSubscription_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCompliances_List(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/preview/2017-08-01-preview/examples/Compliances/GetCompliances_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get security compliance data over time"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewCompliancesClient(cred, &options)
	pager := client.List("subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/security/resource-manager/Microsoft.Security/preview/2017-08-01-preview/examples/Compliances/GetCompliances_example.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsecurity.ComplianceList{
			Value: []*armsecurity.Compliance{
				{
					Name: to.Ptr("2018-01-01Z"),
					Type: to.Ptr("Microsoft.Security/compliances"),
					ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/compliances/2018-01-01Z"),
					Properties: &armsecurity.ComplianceProperties{
						AssessmentResult: []*armsecurity.ComplianceSegment{
							{
								Percentage:  to.Ptr[float64](77.77777777777779),
								SegmentType: to.Ptr("Compliant"),
							}},
						AssessmentTimestampUTCDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-01T00:00:00Z"); return t }()),
						ResourceCount:              to.Ptr[int32](18),
					},
				},
				{
					Name: to.Ptr("2018-01-02Z"),
					Type: to.Ptr("Microsoft.Security/compliances"),
					ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/compliances/2018-01-02Z"),
					Properties: &armsecurity.ComplianceProperties{
						AssessmentResult: []*armsecurity.ComplianceSegment{
							{
								Percentage:  to.Ptr[float64](94.44444444444444),
								SegmentType: to.Ptr("Compliant"),
							}},
						AssessmentTimestampUTCDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-02T00:00:00Z"); return t }()),
						ResourceCount:              to.Ptr[int32](18),
					},
				},
				{
					Name: to.Ptr("2018-01-03Z"),
					Type: to.Ptr("Microsoft.Security/compliances"),
					ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/compliances/2018-01-03Z"),
					Properties: &armsecurity.ComplianceProperties{
						AssessmentResult: []*armsecurity.ComplianceSegment{
							{
								Percentage:  to.Ptr[float64](100),
								SegmentType: to.Ptr("Compliant"),
							}},
						AssessmentTimestampUTCDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-03T00:00:00Z"); return t }()),
						ResourceCount:              to.Ptr[int32](18),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ComplianceList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ComplianceList)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/preview/2017-08-01-preview/examples/Compliances/GetCompliances_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCompliances_Get(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/preview/2017-08-01-preview/examples/Compliances/GetCompliance_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get security compliance data for a day"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewCompliancesClient(cred, &options)
	res, err := client.Get(ctx,
		"subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23",
		"2018-01-01Z",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/preview/2017-08-01-preview/examples/Compliances/GetCompliance_example.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurity.Compliance{
			Name: to.Ptr("2018-01-01Z"),
			Type: to.Ptr("Microsoft.Security/compliances"),
			ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/compliances/2018-01-01Z"),
			Properties: &armsecurity.ComplianceProperties{
				AssessmentResult: []*armsecurity.ComplianceSegment{
					{
						Percentage:  to.Ptr[float64](77.77777777777779),
						SegmentType: to.Ptr("Compliant"),
					}},
				AssessmentTimestampUTCDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-01T00:00:00Z"); return t }()),
				ResourceCount:              to.Ptr[int32](18),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Compliance) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Compliance)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/preview/2017-08-01-preview/examples/Compliances/GetCompliance_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestInformationProtectionPolicies_Get(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/preview/2017-08-01-preview/examples/InformationProtectionPolicies/GetCustomInformationProtectionPolicy_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get the customized information protection policy for a management group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewInformationProtectionPoliciesClient(cred, &options)
	res, err := client.Get(ctx,
		"providers/Microsoft.Management/managementGroups/148059f7-faf3-49a6-ba35-85122112291e",
		armsecurity.Enum18Custom,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/preview/2017-08-01-preview/examples/InformationProtectionPolicies/GetCustomInformationProtectionPolicy_example.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurity.InformationProtectionPolicy{
			Name: to.Ptr("custom"),
			Type: to.Ptr("Microsoft.Security/informationProtectionPolicies"),
			ID:   to.Ptr("/providers/Microsoft.Management/managementGroups/148059f7-faf3-49a6-ba35-85122112291e/providers/Microsoft.Security/informationProtectionPolicies/custom"),
			Properties: &armsecurity.InformationProtectionPolicyProperties{
				InformationTypes: map[string]*armsecurity.InformationType{
					"3bf35491-99b8-41f2-86d5-c1200a7df658": {
						Custom:      to.Ptr(true),
						DisplayName: to.Ptr("Custom"),
						Enabled:     to.Ptr(true),
						Keywords: []*armsecurity.InformationProtectionKeyword{
							{
								CanBeNumeric: to.Ptr(true),
								Custom:       to.Ptr(true),
								Pattern:      to.Ptr("%custom%"),
							}},
						Order:              to.Ptr[int32](1400),
						RecommendedLabelID: to.Ptr("7aa516c7-5a53-4857-bc6e-6808c6acd542"),
					},
					"7fb9419d-2473-4ad8-8e11-b25cc8cf6a07": {
						Custom:      to.Ptr(false),
						DisplayName: to.Ptr("Networking"),
						Enabled:     to.Ptr(true),
						Keywords: []*armsecurity.InformationProtectionKeyword{
							{
								CanBeNumeric: to.Ptr(false),
								Custom:       to.Ptr(true),
								Pattern:      to.Ptr("%networking%"),
							}},
						Order:              to.Ptr[int32](100),
						RecommendedLabelID: to.Ptr("575739d2-3d53-4df0-9042-4c7772d5c7b1"),
					},
				},
				Labels: map[string]*armsecurity.SensitivityLabel{
					"1345da73-bc5a-4a8f-b7dd-3820eb713da8": {
						DisplayName: to.Ptr("Public"),
						Enabled:     to.Ptr(true),
						Order:       to.Ptr[int32](100),
					},
					"575739d2-3d53-4df0-9042-4c7772d5c7b1": {
						DisplayName: to.Ptr("Confidential"),
						Enabled:     to.Ptr(true),
						Order:       to.Ptr[int32](300),
					},
					"7aa516c7-5a53-4857-bc6e-6808c6acd542": {
						DisplayName: to.Ptr("General"),
						Enabled:     to.Ptr(true),
						Order:       to.Ptr[int32](200),
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.InformationProtectionPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.InformationProtectionPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/preview/2017-08-01-preview/examples/InformationProtectionPolicies/GetCustomInformationProtectionPolicy_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/security/resource-manager/Microsoft.Security/preview/2017-08-01-preview/examples/InformationProtectionPolicies/GetEffectiveInformationProtectionPolicy_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get the effective information protection policy for a management group"},
	})
	client = armsecurity.NewInformationProtectionPoliciesClient(cred, &options)
	res, err = client.Get(ctx,
		"providers/Microsoft.Management/managementGroups/148059f7-faf3-49a6-ba35-85122112291e",
		armsecurity.Enum18Effective,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/preview/2017-08-01-preview/examples/InformationProtectionPolicies/GetEffectiveInformationProtectionPolicy_example.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurity.InformationProtectionPolicy{
			Name: to.Ptr("effective"),
			Type: to.Ptr("Microsoft.Security/informationProtectionPolicies"),
			ID:   to.Ptr("/providers/Microsoft.Management/managementGroups/148059f7-faf3-49a6-ba35-85122112291e/providers/Microsoft.Security/informationProtectionPolicies/effective"),
			Properties: &armsecurity.InformationProtectionPolicyProperties{
				InformationTypes: map[string]*armsecurity.InformationType{
					"3bf35491-99b8-41f2-86d5-c1200a7df658": {
						Custom:      to.Ptr(true),
						DisplayName: to.Ptr("Custom"),
						Enabled:     to.Ptr(true),
						Keywords: []*armsecurity.InformationProtectionKeyword{
							{
								CanBeNumeric: to.Ptr(false),
								Custom:       to.Ptr(true),
								Pattern:      to.Ptr("%networking%"),
							}},
						Order:              to.Ptr[int32](1400),
						RecommendedLabelID: to.Ptr("7aa516c7-5a53-4857-bc6e-6808c6acd542"),
					},
					"5856f35c-8e08-4d08-9bf7-87a146150569": {
						Custom:      to.Ptr(false),
						DisplayName: to.Ptr("Contact Info"),
						Enabled:     to.Ptr(true),
						Keywords: []*armsecurity.InformationProtectionKeyword{
							{
								CanBeNumeric: to.Ptr(false),
								Custom:       to.Ptr(false),
								Pattern:      to.Ptr("%email%"),
							},
							{
								CanBeNumeric: to.Ptr(false),
								Custom:       to.Ptr(false),
								Pattern:      to.Ptr("%e-mail%"),
							},
							{
								CanBeNumeric: to.Ptr(false),
								Custom:       to.Ptr(false),
								Pattern:      to.Ptr("%addr%"),
							},
							{
								CanBeNumeric: to.Ptr(true),
								Custom:       to.Ptr(false),
								Pattern:      to.Ptr("%street%"),
							},
							{
								CanBeNumeric: to.Ptr(false),
								Custom:       to.Ptr(false),
								Pattern:      to.Ptr("%city%"),
							}},
						Order:              to.Ptr[int32](200),
						RecommendedLabelID: to.Ptr("575739d2-3d53-4df0-9042-4c7772d5c7b1"),
					},
					"7fb9419d-2473-4ad8-8e11-b25cc8cf6a07": {
						Custom:      to.Ptr(false),
						DisplayName: to.Ptr("Networking"),
						Enabled:     to.Ptr(true),
						Keywords: []*armsecurity.InformationProtectionKeyword{
							{
								CanBeNumeric: to.Ptr(false),
								Custom:       to.Ptr(false),
								Pattern:      to.Ptr("%ip%"),
							},
							{
								CanBeNumeric: to.Ptr(false),
								Custom:       to.Ptr(false),
								Pattern:      to.Ptr("ip%address%"),
							},
							{
								CanBeNumeric: to.Ptr(false),
								Custom:       to.Ptr(false),
								Pattern:      to.Ptr("%mac%address%"),
							},
							{
								CanBeNumeric: to.Ptr(true),
								Custom:       to.Ptr(true),
								Excluded:     to.Ptr(true),
								Pattern:      to.Ptr("%networking%"),
							}},
						Order:              to.Ptr[int32](100),
						RecommendedLabelID: to.Ptr("575739d2-3d53-4df0-9042-4c7772d5c7b1"),
					},
				},
				Labels: map[string]*armsecurity.SensitivityLabel{
					"1345da73-bc5a-4a8f-b7dd-3820eb713da8": {
						DisplayName: to.Ptr("Public"),
						Enabled:     to.Ptr(true),
						Order:       to.Ptr[int32](100),
					},
					"575739d2-3d53-4df0-9042-4c7772d5c7b1": {
						DisplayName: to.Ptr("Confidential"),
						Enabled:     to.Ptr(true),
						Order:       to.Ptr[int32](300),
					},
					"7aa516c7-5a53-4857-bc6e-6808c6acd542": {
						DisplayName: to.Ptr("General"),
						Enabled:     to.Ptr(true),
						Order:       to.Ptr[int32](200),
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.InformationProtectionPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.InformationProtectionPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/preview/2017-08-01-preview/examples/InformationProtectionPolicies/GetEffectiveInformationProtectionPolicy_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestInformationProtectionPolicies_CreateOrUpdate(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/preview/2017-08-01-preview/examples/InformationProtectionPolicies/CreateOrUpdateInformationProtectionPolicy_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update an information protection policy for a management group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewInformationProtectionPoliciesClient(cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"providers/Microsoft.Management/managementGroups/148059f7-faf3-49a6-ba35-85122112291e",
		armsecurity.Enum18Custom,
		armsecurity.InformationProtectionPolicy{
			Properties: &armsecurity.InformationProtectionPolicyProperties{
				InformationTypes: map[string]*armsecurity.InformationType{
					"3bf35491-99b8-41f2-86d5-c1200a7df658": {
						Custom:      to.Ptr(true),
						DisplayName: to.Ptr("Custom"),
						Enabled:     to.Ptr(true),
						Keywords: []*armsecurity.InformationProtectionKeyword{
							{
								CanBeNumeric: to.Ptr(true),
								Custom:       to.Ptr(true),
								Pattern:      to.Ptr("%custom%"),
							}},
						Order:              to.Ptr[int32](1400),
						RecommendedLabelID: to.Ptr("7aa516c7-5a53-4857-bc6e-6808c6acd542"),
					},
					"7fb9419d-2473-4ad8-8e11-b25cc8cf6a07": {
						Custom:      to.Ptr(false),
						DisplayName: to.Ptr("Networking"),
						Enabled:     to.Ptr(true),
						Keywords: []*armsecurity.InformationProtectionKeyword{
							{
								CanBeNumeric: to.Ptr(false),
								Custom:       to.Ptr(true),
								Pattern:      to.Ptr("%networking%"),
							}},
						Order:              to.Ptr[int32](100),
						RecommendedLabelID: to.Ptr("575739d2-3d53-4df0-9042-4c7772d5c7b1"),
					},
				},
				Labels: map[string]*armsecurity.SensitivityLabel{
					"1345da73-bc5a-4a8f-b7dd-3820eb713da8": {
						DisplayName: to.Ptr("Public"),
						Enabled:     to.Ptr(true),
						Order:       to.Ptr[int32](100),
					},
					"575739d2-3d53-4df0-9042-4c7772d5c7b1": {
						DisplayName: to.Ptr("Confidential"),
						Enabled:     to.Ptr(true),
						Order:       to.Ptr[int32](300),
					},
					"7aa516c7-5a53-4857-bc6e-6808c6acd542": {
						DisplayName: to.Ptr("General"),
						Enabled:     to.Ptr(true),
						Order:       to.Ptr[int32](200),
					},
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/preview/2017-08-01-preview/examples/InformationProtectionPolicies/CreateOrUpdateInformationProtectionPolicy_example.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurity.InformationProtectionPolicy{
			Name: to.Ptr("custom"),
			Type: to.Ptr("Microsoft.Security/informationProtectionPolicies"),
			ID:   to.Ptr("/providers/Microsoft.Management/managementGroups/148059f7-faf3-49a6-ba35-85122112291e/providers/Microsoft.Security/informationProtectionPolicies/custom"),
			Properties: &armsecurity.InformationProtectionPolicyProperties{
				InformationTypes: map[string]*armsecurity.InformationType{
					"3bf35491-99b8-41f2-86d5-c1200a7df658": {
						Custom:      to.Ptr(true),
						DisplayName: to.Ptr("Custom"),
						Enabled:     to.Ptr(true),
						Keywords: []*armsecurity.InformationProtectionKeyword{
							{
								CanBeNumeric: to.Ptr(true),
								Custom:       to.Ptr(true),
								Pattern:      to.Ptr("%custom%"),
							}},
						Order:              to.Ptr[int32](1400),
						RecommendedLabelID: to.Ptr("7aa516c7-5a53-4857-bc6e-6808c6acd542"),
					},
					"7fb9419d-2473-4ad8-8e11-b25cc8cf6a07": {
						Custom:      to.Ptr(false),
						DisplayName: to.Ptr("Networking"),
						Enabled:     to.Ptr(true),
						Keywords: []*armsecurity.InformationProtectionKeyword{
							{
								CanBeNumeric: to.Ptr(false),
								Custom:       to.Ptr(true),
								Pattern:      to.Ptr("%networking%"),
							}},
						Order:              to.Ptr[int32](100),
						RecommendedLabelID: to.Ptr("575739d2-3d53-4df0-9042-4c7772d5c7b1"),
					},
				},
				Labels: map[string]*armsecurity.SensitivityLabel{
					"1345da73-bc5a-4a8f-b7dd-3820eb713da8": {
						DisplayName: to.Ptr("Public"),
						Enabled:     to.Ptr(true),
						Order:       to.Ptr[int32](100),
					},
					"575739d2-3d53-4df0-9042-4c7772d5c7b1": {
						DisplayName: to.Ptr("Confidential"),
						Enabled:     to.Ptr(true),
						Order:       to.Ptr[int32](300),
					},
					"7aa516c7-5a53-4857-bc6e-6808c6acd542": {
						DisplayName: to.Ptr("General"),
						Enabled:     to.Ptr(true),
						Order:       to.Ptr[int32](200),
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.InformationProtectionPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.InformationProtectionPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/preview/2017-08-01-preview/examples/InformationProtectionPolicies/CreateOrUpdateInformationProtectionPolicy_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestInformationProtectionPolicies_List(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/preview/2017-08-01-preview/examples/InformationProtectionPolicies/ListInformationProtectionPolicies_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get information protection policies"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewInformationProtectionPoliciesClient(cred, &options)
	pager := client.List("providers/Microsoft.Management/managementGroups/148059f7-faf3-49a6-ba35-85122112291e",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/security/resource-manager/Microsoft.Security/preview/2017-08-01-preview/examples/InformationProtectionPolicies/ListInformationProtectionPolicies_example.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsecurity.InformationProtectionPolicyList{
			Value: []*armsecurity.InformationProtectionPolicy{
				{
					Name: to.Ptr("effective"),
					Type: to.Ptr("Microsoft.Security/informationProtectionPolicies"),
					ID:   to.Ptr("/providers/Microsoft.Management/managementGroups/148059f7-faf3-49a6-ba35-85122112291e/providers/Microsoft.Security/informationProtectionPolicies/effective"),
					Properties: &armsecurity.InformationProtectionPolicyProperties{
						InformationTypes: map[string]*armsecurity.InformationType{
							"3bf35491-99b8-41f2-86d5-c1200a7df658": {
								Custom:      to.Ptr(true),
								DisplayName: to.Ptr("Custom"),
								Enabled:     to.Ptr(true),
								Keywords: []*armsecurity.InformationProtectionKeyword{
									{
										CanBeNumeric: to.Ptr(false),
										Custom:       to.Ptr(true),
										Pattern:      to.Ptr("%networking%"),
									}},
								Order:              to.Ptr[int32](1400),
								RecommendedLabelID: to.Ptr("7aa516c7-5a53-4857-bc6e-6808c6acd542"),
							},
							"5856f35c-8e08-4d08-9bf7-87a146150569": {
								Custom:      to.Ptr(false),
								DisplayName: to.Ptr("Contact Info"),
								Enabled:     to.Ptr(true),
								Keywords: []*armsecurity.InformationProtectionKeyword{
									{
										CanBeNumeric: to.Ptr(false),
										Custom:       to.Ptr(false),
										Pattern:      to.Ptr("%email%"),
									},
									{
										CanBeNumeric: to.Ptr(false),
										Custom:       to.Ptr(false),
										Pattern:      to.Ptr("%e-mail%"),
									},
									{
										CanBeNumeric: to.Ptr(false),
										Custom:       to.Ptr(false),
										Pattern:      to.Ptr("%addr%"),
									},
									{
										CanBeNumeric: to.Ptr(true),
										Custom:       to.Ptr(false),
										Pattern:      to.Ptr("%street%"),
									},
									{
										CanBeNumeric: to.Ptr(false),
										Custom:       to.Ptr(false),
										Pattern:      to.Ptr("%city%"),
									}},
								Order:              to.Ptr[int32](200),
								RecommendedLabelID: to.Ptr("575739d2-3d53-4df0-9042-4c7772d5c7b1"),
							},
							"7fb9419d-2473-4ad8-8e11-b25cc8cf6a07": {
								Custom:      to.Ptr(false),
								DisplayName: to.Ptr("Networking"),
								Enabled:     to.Ptr(true),
								Keywords: []*armsecurity.InformationProtectionKeyword{
									{
										CanBeNumeric: to.Ptr(false),
										Custom:       to.Ptr(false),
										Pattern:      to.Ptr("%ip%"),
									},
									{
										CanBeNumeric: to.Ptr(false),
										Custom:       to.Ptr(false),
										Pattern:      to.Ptr("ip%address%"),
									},
									{
										CanBeNumeric: to.Ptr(false),
										Custom:       to.Ptr(false),
										Pattern:      to.Ptr("%mac%address%"),
									},
									{
										CanBeNumeric: to.Ptr(true),
										Custom:       to.Ptr(true),
										Pattern:      to.Ptr("%networking%"),
									}},
								Order:              to.Ptr[int32](100),
								RecommendedLabelID: to.Ptr("575739d2-3d53-4df0-9042-4c7772d5c7b1"),
							},
						},
						Labels: map[string]*armsecurity.SensitivityLabel{
							"1345da73-bc5a-4a8f-b7dd-3820eb713da8": {
								DisplayName: to.Ptr("Public"),
								Enabled:     to.Ptr(true),
								Order:       to.Ptr[int32](100),
							},
							"575739d2-3d53-4df0-9042-4c7772d5c7b1": {
								DisplayName: to.Ptr("Confidential"),
								Enabled:     to.Ptr(true),
								Order:       to.Ptr[int32](300),
							},
							"7aa516c7-5a53-4857-bc6e-6808c6acd542": {
								DisplayName: to.Ptr("General"),
								Enabled:     to.Ptr(true),
								Order:       to.Ptr[int32](200),
							},
						},
					},
				},
				{
					Name: to.Ptr("custom"),
					Type: to.Ptr("Microsoft.Security/informationProtectionPolicies"),
					ID:   to.Ptr("/providers/Microsoft.Management/managementGroups/148059f7-faf3-49a6-ba35-85122112291e/providers/Microsoft.Security/informationProtectionPolicies/custom"),
					Properties: &armsecurity.InformationProtectionPolicyProperties{
						InformationTypes: map[string]*armsecurity.InformationType{
							"3bf35491-99b8-41f2-86d5-c1200a7df658": {
								Custom:      to.Ptr(true),
								DisplayName: to.Ptr("Custom"),
								Enabled:     to.Ptr(true),
								Keywords: []*armsecurity.InformationProtectionKeyword{
									{
										CanBeNumeric: to.Ptr(true),
										Custom:       to.Ptr(true),
										Pattern:      to.Ptr("%custom%"),
									}},
								Order:              to.Ptr[int32](1400),
								RecommendedLabelID: to.Ptr("7aa516c7-5a53-4857-bc6e-6808c6acd542"),
							},
							"7fb9419d-2473-4ad8-8e11-b25cc8cf6a07": {
								Custom:      to.Ptr(false),
								DisplayName: to.Ptr("Networking"),
								Enabled:     to.Ptr(true),
								Keywords: []*armsecurity.InformationProtectionKeyword{
									{
										CanBeNumeric: to.Ptr(false),
										Custom:       to.Ptr(true),
										Pattern:      to.Ptr("%networking%"),
									}},
								Order:              to.Ptr[int32](100),
								RecommendedLabelID: to.Ptr("575739d2-3d53-4df0-9042-4c7772d5c7b1"),
							},
						},
						Labels: map[string]*armsecurity.SensitivityLabel{
							"1345da73-bc5a-4a8f-b7dd-3820eb713da8": {
								DisplayName: to.Ptr("Public"),
								Enabled:     to.Ptr(true),
								Order:       to.Ptr[int32](100),
							},
							"575739d2-3d53-4df0-9042-4c7772d5c7b1": {
								DisplayName: to.Ptr("Confidential"),
								Enabled:     to.Ptr(true),
								Order:       to.Ptr[int32](300),
							},
							"7aa516c7-5a53-4857-bc6e-6808c6acd542": {
								DisplayName: to.Ptr("General"),
								Enabled:     to.Ptr(true),
								Order:       to.Ptr[int32](200),
							},
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.InformationProtectionPolicyList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.InformationProtectionPolicyList)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/preview/2017-08-01-preview/examples/InformationProtectionPolicies/ListInformationProtectionPolicies_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSecurityContacts_List(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/preview/2017-08-01-preview/examples/SecurityContacts/GetSecurityContactsSubscription_full_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update security contact data full"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewContactsClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/security/resource-manager/Microsoft.Security/preview/2017-08-01-preview/examples/SecurityContacts/GetSecurityContactsSubscription_full_example.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsecurity.ContactList{
			Value: []*armsecurity.Contact{
				{
					Name: to.Ptr("default1"),
					Type: to.Ptr("Microsoft.Security/securityContacts"),
					ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/securityContacts/default1"),
					Properties: &armsecurity.ContactProperties{
						AlertNotifications: to.Ptr(armsecurity.AlertNotificationsOn),
						AlertsToAdmins:     to.Ptr(armsecurity.AlertsToAdminsOn),
						Email:              to.Ptr("john@contoso.com"),
						Phone:              to.Ptr("(214)275-4038"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ContactList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ContactList)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/preview/2017-08-01-preview/examples/SecurityContacts/GetSecurityContactsSubscription_full_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/security/resource-manager/Microsoft.Security/preview/2017-08-01-preview/examples/SecurityContacts/GetSecurityContactsSubscription_min_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update security contact data minimal"},
	})
	client = armsecurity.NewContactsClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23", cred, &options)
	pager = client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/security/resource-manager/Microsoft.Security/preview/2017-08-01-preview/examples/SecurityContacts/GetSecurityContactsSubscription_min_example.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsecurity.ContactList{
			Value: []*armsecurity.Contact{
				{
					Name: to.Ptr("default2"),
					Type: to.Ptr("Microsoft.Security/securityContacts"),
					ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/securityContacts/default2"),
					Properties: &armsecurity.ContactProperties{
						AlertNotifications: to.Ptr(armsecurity.AlertNotificationsOn),
						AlertsToAdmins:     to.Ptr(armsecurity.AlertsToAdminsOn),
						Email:              to.Ptr("chen@contoso.com"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ContactList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ContactList)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/preview/2017-08-01-preview/examples/SecurityContacts/GetSecurityContactsSubscription_min_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSecurityContacts_Get(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/preview/2017-08-01-preview/examples/SecurityContacts/GetSecurityContact_full_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get security contact data full"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewContactsClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23", cred, &options)
	res, err := client.Get(ctx,
		"default1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/preview/2017-08-01-preview/examples/SecurityContacts/GetSecurityContact_full_example.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurity.Contact{
			Name: to.Ptr("default1"),
			Type: to.Ptr("Microsoft.Security/securityContacts"),
			ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/securityContacts/default1"),
			Properties: &armsecurity.ContactProperties{
				AlertNotifications: to.Ptr(armsecurity.AlertNotificationsOn),
				AlertsToAdmins:     to.Ptr(armsecurity.AlertsToAdminsOn),
				Email:              to.Ptr("john@contoso.com"),
				Phone:              to.Ptr("(214)275-4038"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Contact) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Contact)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/preview/2017-08-01-preview/examples/SecurityContacts/GetSecurityContact_full_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/security/resource-manager/Microsoft.Security/preview/2017-08-01-preview/examples/SecurityContacts/GetSecurityContact_min_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get security contact data minimal"},
	})
	client = armsecurity.NewContactsClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23", cred, &options)
	res, err = client.Get(ctx,
		"default2",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/preview/2017-08-01-preview/examples/SecurityContacts/GetSecurityContact_min_example.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurity.Contact{
			Name: to.Ptr("default2"),
			Type: to.Ptr("Microsoft.Security/securityContacts"),
			ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/securityContacts/default2"),
			Properties: &armsecurity.ContactProperties{
				AlertNotifications: to.Ptr(armsecurity.AlertNotificationsOn),
				AlertsToAdmins:     to.Ptr(armsecurity.AlertsToAdminsOn),
				Email:              to.Ptr("chen@contoso.com"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Contact) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Contact)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/preview/2017-08-01-preview/examples/SecurityContacts/GetSecurityContact_min_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSecurityContacts_Create(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/preview/2017-08-01-preview/examples/SecurityContacts/CreateSecurityContact_full_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create security contact data full"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewContactsClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23", cred, &options)
	res, err := client.Create(ctx,
		"default1",
		armsecurity.Contact{
			Name: to.Ptr("default1"),
			Type: to.Ptr("Microsoft.Security/securityContacts"),
			ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/securityContacts/default1"),
			Properties: &armsecurity.ContactProperties{
				AlertNotifications: to.Ptr(armsecurity.AlertNotificationsOn),
				AlertsToAdmins:     to.Ptr(armsecurity.AlertsToAdminsOn),
				Email:              to.Ptr("john@contoso.com"),
				Phone:              to.Ptr("(214)275-4038"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/preview/2017-08-01-preview/examples/SecurityContacts/CreateSecurityContact_full_example.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurity.Contact{
			Name: to.Ptr("default1"),
			Type: to.Ptr("Microsoft.Security/securityContacts"),
			ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/securityContacts/default1"),
			Properties: &armsecurity.ContactProperties{
				AlertNotifications: to.Ptr(armsecurity.AlertNotificationsOn),
				AlertsToAdmins:     to.Ptr(armsecurity.AlertsToAdminsOn),
				Email:              to.Ptr("john@contoso.com"),
				Phone:              to.Ptr("(214)275-4038"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Contact) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Contact)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/preview/2017-08-01-preview/examples/SecurityContacts/CreateSecurityContact_full_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/security/resource-manager/Microsoft.Security/preview/2017-08-01-preview/examples/SecurityContacts/CreateSecurityContact_min_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create security contact data minimal"},
	})
	client = armsecurity.NewContactsClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23", cred, &options)
	res, err = client.Create(ctx,
		"default2",
		armsecurity.Contact{
			Name: to.Ptr("default2"),
			Type: to.Ptr("Microsoft.Security/securityContacts"),
			ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/securityContacts/default2"),
			Properties: &armsecurity.ContactProperties{
				AlertNotifications: to.Ptr(armsecurity.AlertNotificationsOn),
				AlertsToAdmins:     to.Ptr(armsecurity.AlertsToAdminsOn),
				Email:              to.Ptr("chen@contoso.com"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/preview/2017-08-01-preview/examples/SecurityContacts/CreateSecurityContact_min_example.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurity.Contact{
			Name: to.Ptr("default2"),
			Type: to.Ptr("Microsoft.Security/securityContacts"),
			ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/securityContacts/default2"),
			Properties: &armsecurity.ContactProperties{
				AlertNotifications: to.Ptr(armsecurity.AlertNotificationsOn),
				AlertsToAdmins:     to.Ptr(armsecurity.AlertsToAdminsOn),
				Email:              to.Ptr("chen@contoso.com"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Contact) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Contact)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/preview/2017-08-01-preview/examples/SecurityContacts/CreateSecurityContact_min_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSecurityContacts_Delete(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/preview/2017-08-01-preview/examples/SecurityContacts/DeleteSecurityContact_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete security contact data"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewContactsClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23", cred, &options)
	_, err := client.Delete(ctx,
		"default1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/preview/2017-08-01-preview/examples/SecurityContacts/DeleteSecurityContact_example.json: %v", err)
	}
}

func TestSecurityContacts_Update(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/preview/2017-08-01-preview/examples/SecurityContacts/UpdateSecurityContact_full_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update security contact data full"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewContactsClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23", cred, &options)
	res, err := client.Update(ctx,
		"john",
		armsecurity.Contact{
			Name: to.Ptr("default1"),
			Type: to.Ptr("Microsoft.Security/securityContacts"),
			ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/securityContacts/default1"),
			Properties: &armsecurity.ContactProperties{
				AlertNotifications: to.Ptr(armsecurity.AlertNotificationsOn),
				Phone:              to.Ptr("(214)275-4038"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/preview/2017-08-01-preview/examples/SecurityContacts/UpdateSecurityContact_full_example.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurity.Contact{
			Name: to.Ptr("default1"),
			Type: to.Ptr("Microsoft.Security/securityContacts"),
			ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/securityContacts/default1"),
			Properties: &armsecurity.ContactProperties{
				AlertNotifications: to.Ptr(armsecurity.AlertNotificationsOn),
				AlertsToAdmins:     to.Ptr(armsecurity.AlertsToAdminsOff),
				Email:              to.Ptr("john@contoso.com"),
				Phone:              to.Ptr("(214)275-4038"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Contact) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Contact)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/preview/2017-08-01-preview/examples/SecurityContacts/UpdateSecurityContact_full_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/security/resource-manager/Microsoft.Security/preview/2017-08-01-preview/examples/SecurityContacts/UpdateSecurityContact_min_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update security contact data minimal"},
	})
	client = armsecurity.NewContactsClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23", cred, &options)
	res, err = client.Update(ctx,
		"default2",
		armsecurity.Contact{
			Name: to.Ptr("default2"),
			Type: to.Ptr("Microsoft.Security/securityContacts"),
			ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/securityContacts/default2"),
			Properties: &armsecurity.ContactProperties{
				AlertNotifications: to.Ptr(armsecurity.AlertNotificationsOn),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/preview/2017-08-01-preview/examples/SecurityContacts/UpdateSecurityContact_min_example.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurity.Contact{
			Name: to.Ptr("default2"),
			Type: to.Ptr("Microsoft.Security/securityContacts"),
			ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/securityContacts/default2"),
			Properties: &armsecurity.ContactProperties{
				AlertNotifications: to.Ptr(armsecurity.AlertNotificationsOn),
				AlertsToAdmins:     to.Ptr(armsecurity.AlertsToAdminsOff),
				Email:              to.Ptr("chen@contoso.com"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Contact) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Contact)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/preview/2017-08-01-preview/examples/SecurityContacts/UpdateSecurityContact_min_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkspaceSettings_List(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/preview/2017-08-01-preview/examples/WorkspaceSettings/GetWorkspaceSettings_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get workspace settings on subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewWorkspaceSettingsClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/security/resource-manager/Microsoft.Security/preview/2017-08-01-preview/examples/WorkspaceSettings/GetWorkspaceSettings_example.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsecurity.WorkspaceSettingList{
			Value: []*armsecurity.WorkspaceSetting{
				{
					Name: to.Ptr("default"),
					Type: to.Ptr("Microsoft.Security/workspaceSettings"),
					ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/workspaceSettings/default"),
					Properties: &armsecurity.WorkspaceSettingProperties{
						Scope:       to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23"),
						WorkspaceID: to.Ptr("/subscriptions/c4930e90-cd72-4aa5-93e9-2d081d129569/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace1"),
					},
				},
				{
					Name: to.Ptr("myRg"),
					Type: to.Ptr("Microsoft.Security/workspaceSettings"),
					ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/myRg/providers/Microsoft.Security/workspaceSettings/myRg"),
					Properties: &armsecurity.WorkspaceSettingProperties{
						Scope:       to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/myRg"),
						WorkspaceID: to.Ptr("/subscriptions/c4930e90-cd72-4aa5-93e9-2d081d129569/resourceGroups/myOtherRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace2"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.WorkspaceSettingList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.WorkspaceSettingList)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/preview/2017-08-01-preview/examples/WorkspaceSettings/GetWorkspaceSettings_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkspaceSettings_Get(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/preview/2017-08-01-preview/examples/WorkspaceSettings/GetWorkspaceSetting_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a workspace setting on subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewWorkspaceSettingsClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23", cred, &options)
	res, err := client.Get(ctx,
		"default",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/preview/2017-08-01-preview/examples/WorkspaceSettings/GetWorkspaceSetting_example.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurity.WorkspaceSetting{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Security/workspaceSettings"),
			ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/workspaceSettings/default"),
			Properties: &armsecurity.WorkspaceSettingProperties{
				Scope:       to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23"),
				WorkspaceID: to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.WorkspaceSetting) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.WorkspaceSetting)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/preview/2017-08-01-preview/examples/WorkspaceSettings/GetWorkspaceSetting_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkspaceSettings_Create(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/preview/2017-08-01-preview/examples/WorkspaceSettings/CreateWorkspaceSetting_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a workspace setting data for subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewWorkspaceSettingsClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23", cred, &options)
	res, err := client.Create(ctx,
		"default",
		armsecurity.WorkspaceSetting{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Security/workspaceSettings"),
			ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/workspaceSettings/default"),
			Properties: &armsecurity.WorkspaceSettingProperties{
				Scope:       to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23"),
				WorkspaceID: to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/preview/2017-08-01-preview/examples/WorkspaceSettings/CreateWorkspaceSetting_example.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurity.WorkspaceSetting{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Security/workspaceSettings"),
			ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/workspaceSettings/default"),
			Properties: &armsecurity.WorkspaceSettingProperties{
				Scope:       to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23"),
				WorkspaceID: to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.WorkspaceSetting) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.WorkspaceSetting)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/preview/2017-08-01-preview/examples/WorkspaceSettings/CreateWorkspaceSetting_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkspaceSettings_Update(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/preview/2017-08-01-preview/examples/WorkspaceSettings/UpdateWorkspaceSetting_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a workspace setting data for subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewWorkspaceSettingsClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23", cred, &options)
	res, err := client.Update(ctx,
		"default",
		armsecurity.WorkspaceSetting{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Security/workspaceSettings"),
			ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/workspaceSettings/default"),
			Properties: &armsecurity.WorkspaceSettingProperties{
				WorkspaceID: to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/preview/2017-08-01-preview/examples/WorkspaceSettings/UpdateWorkspaceSetting_example.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurity.WorkspaceSetting{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Security/workspaceSettings"),
			ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/workspaceSettings/default"),
			Properties: &armsecurity.WorkspaceSettingProperties{
				Scope:       to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23"),
				WorkspaceID: to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myWorkspace"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.WorkspaceSetting) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.WorkspaceSetting)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/preview/2017-08-01-preview/examples/WorkspaceSettings/UpdateWorkspaceSetting_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestWorkspaceSettings_Delete(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/preview/2017-08-01-preview/examples/WorkspaceSettings/DeleteWorkspaceSetting_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a workspace setting data for resource group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewWorkspaceSettingsClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23", cred, &options)
	_, err := client.Delete(ctx,
		"default",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/preview/2017-08-01-preview/examples/WorkspaceSettings/DeleteWorkspaceSetting_example.json: %v", err)
	}
}

func TestRegulatoryComplianceStandards_List(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/preview/2019-01-01-preview/examples/RegulatoryCompliance/getRegulatoryComplianceStandardList_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get all supported regulatory compliance standards details and state"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewRegulatoryComplianceStandardsClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23", cred, &options)
	pager := client.List(&armsecurity.RegulatoryComplianceStandardsClientListOptions{Filter: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/security/resource-manager/Microsoft.Security/preview/2019-01-01-preview/examples/RegulatoryCompliance/getRegulatoryComplianceStandardList_example.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsecurity.RegulatoryComplianceStandardList{
			Value: []*armsecurity.RegulatoryComplianceStandard{
				{
					Name: to.Ptr("PCI-DSS-3.2"),
					Type: to.Ptr("Microsoft.Security/regulatoryComplianceStandard"),
					ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/regulatoryComplianceStandards/PCI-DSS-3.2"),
					Properties: &armsecurity.RegulatoryComplianceStandardProperties{
						FailedControls:      to.Ptr[int32](4),
						PassedControls:      to.Ptr[int32](7),
						SkippedControls:     to.Ptr[int32](0),
						State:               to.Ptr(armsecurity.StateFailed),
						UnsupportedControls: to.Ptr[int32](0),
					},
				},
				{
					Name: to.Ptr("ISO-27001"),
					Type: to.Ptr("Microsoft.Security/regulatoryComplianceStandard"),
					ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/regulatoryComplianceStandards/ISO-27001"),
					Properties: &armsecurity.RegulatoryComplianceStandardProperties{
						FailedControls:      to.Ptr[int32](0),
						PassedControls:      to.Ptr[int32](0),
						SkippedControls:     to.Ptr[int32](10),
						State:               to.Ptr(armsecurity.StateSkipped),
						UnsupportedControls: to.Ptr[int32](0),
					},
				},
				{
					Name: to.Ptr("AZURE-CIS"),
					Type: to.Ptr("Microsoft.Security/regulatoryComplianceStandard"),
					ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/regulatoryComplianceStandards/AZURE-CIS"),
					Properties: &armsecurity.RegulatoryComplianceStandardProperties{
						FailedControls:      to.Ptr[int32](0),
						PassedControls:      to.Ptr[int32](0),
						SkippedControls:     to.Ptr[int32](0),
						State:               to.Ptr(armsecurity.StateUnsupported),
						UnsupportedControls: to.Ptr[int32](0),
					},
				},
				{
					Name: to.Ptr("SOC-TSP"),
					Type: to.Ptr("Microsoft.Security/regulatoryComplianceStandard"),
					ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/regulatoryComplianceStandards/SOC-TSP"),
					Properties: &armsecurity.RegulatoryComplianceStandardProperties{
						FailedControls:      to.Ptr[int32](0),
						PassedControls:      to.Ptr[int32](15),
						SkippedControls:     to.Ptr[int32](0),
						State:               to.Ptr(armsecurity.StatePassed),
						UnsupportedControls: to.Ptr[int32](0),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.RegulatoryComplianceStandardList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.RegulatoryComplianceStandardList)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/preview/2019-01-01-preview/examples/RegulatoryCompliance/getRegulatoryComplianceStandardList_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRegulatoryComplianceStandards_Get(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/preview/2019-01-01-preview/examples/RegulatoryCompliance/getRegulatoryComplianceStandard_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get selected regulatory compliance standard details and state"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewRegulatoryComplianceStandardsClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23", cred, &options)
	res, err := client.Get(ctx,
		"PCI-DSS-3.2",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/preview/2019-01-01-preview/examples/RegulatoryCompliance/getRegulatoryComplianceStandard_example.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurity.RegulatoryComplianceStandard{
			Name: to.Ptr("PCI-DSS-3.2"),
			Type: to.Ptr("Microsoft.Security/regulatoryComplianceStandard"),
			ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/regulatoryComplianceStandards/PCI-DSS-3.2"),
			Properties: &armsecurity.RegulatoryComplianceStandardProperties{
				FailedControls:      to.Ptr[int32](4),
				PassedControls:      to.Ptr[int32](7),
				SkippedControls:     to.Ptr[int32](0),
				State:               to.Ptr(armsecurity.StateFailed),
				UnsupportedControls: to.Ptr[int32](0),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RegulatoryComplianceStandard) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RegulatoryComplianceStandard)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/preview/2019-01-01-preview/examples/RegulatoryCompliance/getRegulatoryComplianceStandard_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRegulatoryComplianceControls_List(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/preview/2019-01-01-preview/examples/RegulatoryCompliance/getRegulatoryComplianceControlList_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get all regulatory compliance controls details and state for selected standard"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewRegulatoryComplianceControlsClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23", cred, &options)
	pager := client.List("PCI-DSS-3.2",
		&armsecurity.RegulatoryComplianceControlsClientListOptions{Filter: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/security/resource-manager/Microsoft.Security/preview/2019-01-01-preview/examples/RegulatoryCompliance/getRegulatoryComplianceControlList_example.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsecurity.RegulatoryComplianceControlList{
			Value: []*armsecurity.RegulatoryComplianceControl{
				{
					Name: to.Ptr("1.1"),
					Type: to.Ptr("Microsoft.Security/regulatoryComplianceControl"),
					ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/regulatoryComplianceStandards/PCI-DSS-3.2/regulatoryComplianceControls/1.1"),
					Properties: &armsecurity.RegulatoryComplianceControlProperties{
						Description:        to.Ptr("Common Criteria Related to Organization and Management."),
						FailedAssessments:  to.Ptr[int32](4),
						PassedAssessments:  to.Ptr[int32](7),
						SkippedAssessments: to.Ptr[int32](0),
						State:              to.Ptr(armsecurity.StateFailed),
					},
				},
				{
					Name: to.Ptr("2"),
					Type: to.Ptr("Microsoft.Security/regulatoryComplianceControl"),
					ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/regulatoryComplianceStandards/PCI-DSS-3.2/regulatoryComplianceControls/2"),
					Properties: &armsecurity.RegulatoryComplianceControlProperties{
						Description:        to.Ptr("Confidential information is protected during the system design, development, testing, implementation, and change processes in accordance with confidentiality commitments and requirements."),
						FailedAssessments:  to.Ptr[int32](0),
						PassedAssessments:  to.Ptr[int32](0),
						SkippedAssessments: to.Ptr[int32](10),
						State:              to.Ptr(armsecurity.StateSkipped),
					},
				},
				{
					Name: to.Ptr("2.1"),
					Type: to.Ptr("Microsoft.Security/regulatoryComplianceControl"),
					ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/regulatoryComplianceStandards/PCI-DSS-3.2/regulatoryComplianceControls/2.1"),
					Properties: &armsecurity.RegulatoryComplianceControlProperties{
						Description:        to.Ptr("Changes to confidentiality commitments and requirements are communicated to internal and external users, vendors, and other third parties whose products and services are included in the system."),
						FailedAssessments:  to.Ptr[int32](0),
						PassedAssessments:  to.Ptr[int32](0),
						SkippedAssessments: to.Ptr[int32](0),
						State:              to.Ptr(armsecurity.StateUnsupported),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.RegulatoryComplianceControlList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.RegulatoryComplianceControlList)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/preview/2019-01-01-preview/examples/RegulatoryCompliance/getRegulatoryComplianceControlList_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRegulatoryComplianceControls_Get(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/preview/2019-01-01-preview/examples/RegulatoryCompliance/getRegulatoryComplianceControl_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get selected regulatory compliance control details and state"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewRegulatoryComplianceControlsClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23", cred, &options)
	res, err := client.Get(ctx,
		"PCI-DSS-3.2",
		"1.1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/preview/2019-01-01-preview/examples/RegulatoryCompliance/getRegulatoryComplianceControl_example.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurity.RegulatoryComplianceControl{
			Name: to.Ptr("1.1"),
			Type: to.Ptr("Microsoft.Security/regulatoryComplianceControl"),
			ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/regulatoryComplianceStandards/PCI-DSS-3.2/regulatoryComplianceControls/1.1"),
			Properties: &armsecurity.RegulatoryComplianceControlProperties{
				Description:        to.Ptr("Common Criteria Related to Organization and Management"),
				FailedAssessments:  to.Ptr[int32](4),
				PassedAssessments:  to.Ptr[int32](7),
				SkippedAssessments: to.Ptr[int32](0),
				State:              to.Ptr(armsecurity.StateFailed),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RegulatoryComplianceControl) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RegulatoryComplianceControl)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/preview/2019-01-01-preview/examples/RegulatoryCompliance/getRegulatoryComplianceControl_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRegulatoryComplianceAssessments_List(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/preview/2019-01-01-preview/examples/RegulatoryCompliance/getRegulatoryComplianceAssessmentList_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get all assessments mapped to selected regulatory compliance control"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewRegulatoryComplianceAssessmentsClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23", cred, &options)
	pager := client.List("PCI-DSS-3.2",
		"1.1",
		&armsecurity.RegulatoryComplianceAssessmentsClientListOptions{Filter: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/security/resource-manager/Microsoft.Security/preview/2019-01-01-preview/examples/RegulatoryCompliance/getRegulatoryComplianceAssessmentList_example.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsecurity.RegulatoryComplianceAssessmentList{
			Value: []*armsecurity.RegulatoryComplianceAssessment{
				{
					Name: to.Ptr("968548cb-02b3-8cd2-11f8-0cf64ab1a347"),
					Type: to.Ptr("Microsoft.Security/regulatoryComplianceAssessment"),
					ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/regulatoryComplianceStandards/PCI-DSS-3.2/regulatoryComplianceControls/1.1/regulatoryComplianceAssessments/968548cb-02b3-8cd2-11f8-0cf64ab1a347"),
					Properties: &armsecurity.RegulatoryComplianceAssessmentProperties{
						Description:           to.Ptr("Troubleshoot missing scan data on your machines"),
						AssessmentDetailsLink: to.Ptr("https://management.azure.com/subscriptions/a27e854a-8578-4395-8eaf-6fc7849f3050/providers/Microsoft.Security/securityStatuses/968548cb-02b3-8cd2-11f8-0cf64ab1a347"),
						AssessmentType:        to.Ptr("Assessment"),
						FailedResources:       to.Ptr[int32](4),
						PassedResources:       to.Ptr[int32](7),
						SkippedResources:      to.Ptr[int32](0),
						State:                 to.Ptr(armsecurity.StateFailed),
					},
				},
				{
					Name: to.Ptr("3bcd234d-c9c7-c2a2-89e0-c01f419c1a8a"),
					Type: to.Ptr("Microsoft.Security/regulatoryComplianceAssessment"),
					ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/regulatoryComplianceStandards/PCI-DSS-3.2/regulatoryComplianceControls/2/regulatoryComplianceAssessments/3bcd234d-c9c7-c2a2-89e0-c01f419c1a8a"),
					Properties: &armsecurity.RegulatoryComplianceAssessmentProperties{
						Description:           to.Ptr("Resolve endpoint protection health issues on your machines"),
						AssessmentDetailsLink: to.Ptr("https://management.azure.com/subscriptions/a27e854a-8578-4395-8eaf-6fc7849f3050/providers/Microsoft.Security/securityStatuses/3bcd234d-c9c7-c2a2-89e0-c01f419c1a8a"),
						AssessmentType:        to.Ptr("Assessment"),
						FailedResources:       to.Ptr[int32](0),
						PassedResources:       to.Ptr[int32](0),
						SkippedResources:      to.Ptr[int32](10),
						State:                 to.Ptr(armsecurity.StateSkipped),
					},
				},
				{
					Name: to.Ptr("d1db3318-01ff-16de-29eb-28b344515626"),
					Type: to.Ptr("Microsoft.Security/regulatoryComplianceAssessment"),
					ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/regulatoryComplianceStandards/PCI-DSS-3.2/regulatoryComplianceControls/2.1/regulatoryComplianceAssessments/d1db3318-01ff-16de-29eb-28b344515626"),
					Properties: &armsecurity.RegulatoryComplianceAssessmentProperties{
						Description:           to.Ptr("Install monitoring agent on your machines"),
						AssessmentDetailsLink: to.Ptr("https://management.azure.com/subscriptions/a27e854a-8578-4395-8eaf-6fc7849f3050/providers/Microsoft.Security/securityStatuses/d1db3318-01ff-16de-29eb-28b344515626"),
						AssessmentType:        to.Ptr("Assessment"),
						FailedResources:       to.Ptr[int32](0),
						PassedResources:       to.Ptr[int32](8),
						SkippedResources:      to.Ptr[int32](0),
						State:                 to.Ptr(armsecurity.StatePassed),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.RegulatoryComplianceAssessmentList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.RegulatoryComplianceAssessmentList)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/preview/2019-01-01-preview/examples/RegulatoryCompliance/getRegulatoryComplianceAssessmentList_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRegulatoryComplianceAssessments_Get(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/preview/2019-01-01-preview/examples/RegulatoryCompliance/getRegulatoryComplianceAssessment_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get selected regulatory compliance assessment details and state"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewRegulatoryComplianceAssessmentsClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23", cred, &options)
	res, err := client.Get(ctx,
		"PCI-DSS-3.2",
		"1.1",
		"968548cb-02b3-8cd2-11f8-0cf64ab1a347",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/preview/2019-01-01-preview/examples/RegulatoryCompliance/getRegulatoryComplianceAssessment_example.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurity.RegulatoryComplianceAssessment{
			Name: to.Ptr("968548cb-02b3-8cd2-11f8-0cf64ab1a347"),
			Type: to.Ptr("Microsoft.Security/regulatoryComplianceAssessment"),
			ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/regulatoryComplianceStandards/PCI-DSS-3.2/regulatoryComplianceControls/1.1/regulatoryComplianceAssessments/968548cb-02b3-8cd2-11f8-0cf64ab1a347"),
			Properties: &armsecurity.RegulatoryComplianceAssessmentProperties{
				Description:           to.Ptr("Troubleshoot missing scan data on your machines"),
				AssessmentDetailsLink: to.Ptr("https://management.azure.com/subscriptions/a27e854a-8578-4395-8eaf-6fc7849f3050/providers/Microsoft.Security/securityStatuses/968548cb-02b3-8cd2-11f8-0cf64ab1a347"),
				AssessmentType:        to.Ptr("Assessment"),
				FailedResources:       to.Ptr[int32](4),
				PassedResources:       to.Ptr[int32](7),
				SkippedResources:      to.Ptr[int32](0),
				State:                 to.Ptr(armsecurity.StateFailed),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RegulatoryComplianceAssessment) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RegulatoryComplianceAssessment)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/preview/2019-01-01-preview/examples/RegulatoryCompliance/getRegulatoryComplianceAssessment_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSubAssessments_ListAll(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/preview/2019-01-01-preview/examples/SubAssessments/ListSubscriptionSubAssessments_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List security sub-assessments"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewSubAssessmentsClient(cred, &options)
	pager := client.ListAll("subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/security/resource-manager/Microsoft.Security/preview/2019-01-01-preview/examples/SubAssessments/ListSubscriptionSubAssessments_example.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsecurity.SubAssessmentList{
			Value: []*armsecurity.SubAssessment{
				{
					Name: to.Ptr("8c98f353-8b41-4e77-979b-6adeecd5d168"),
					Type: to.Ptr("Microsoft.Security/assessments/subAssessments"),
					ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/myRg/providers/Microsoft.ContainerRegistry/registries/myRegistry/providers/Microsoft.Security/assessments/dbd0cb49-b563-45e7-9724-889e799fa648/subAssessments/8c98f353-8b41-4e77-979b-6adeecd5d168"),
					Properties: &armsecurity.SubAssessmentProperties{
						Description: to.Ptr("The backdoor 'Back Orifice' was detected on this system.  The presence of this backdoor indicates that your system has already been compromised.  Unauthorized users can access your host at any time. Unauthorized users can take complete control of the host and manipulate data.  They can steal the data or even wipe out the host."),
						AdditionalData: &armsecurity.ContainerRegistryVulnerabilityProperties{
							AssessedResourceType: to.Ptr(armsecurity.AssessedResourceTypeContainerRegistryVulnerability),
							Type:                 to.Ptr("Vulnerability"),
							Cve: []*armsecurity.CVE{
								{
									Link:  to.Ptr("http://contoso.com"),
									Title: to.Ptr("CVE-2019-12345"),
								}},
							Cvss: map[string]*armsecurity.CVSS{
								"2.0": {
									Base: to.Ptr[float32](10),
								},
								"3.0": {
									Base: to.Ptr[float32](10),
								},
							},
							ImageDigest:    to.Ptr("c186fc44-3154-4ce2-ba18-b719d895c3b0"),
							Patchable:      to.Ptr(true),
							PublishedTime:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-01-01T00:00:00.0000000Z"); return t }()),
							RepositoryName: to.Ptr("myRepo"),
							VendorReferences: []*armsecurity.VendorReference{
								{
									Link:  to.Ptr("http://contoso.com"),
									Title: to.Ptr("Reference_1"),
								}},
						},
						Category:    to.Ptr("Backdoors and trojan horses"),
						DisplayName: to.Ptr("'Back Orifice' Backdoor"),
						ID:          to.Ptr("1001"),
						Impact:      to.Ptr("3"),
						Remediation: to.Ptr("Use a recent anti-virus program to remove this backdoor and check your system regularly with anti-virus software."),
						ResourceDetails: &armsecurity.AzureResourceDetails{
							Source: to.Ptr(armsecurity.SourceAzure),
							ID:     to.Ptr("repositories/asc/msi-connector/images/sha256:877a6f2a212c44021281f80cb1f4c73a09dce4e99a8cb8efcc03f7ce3c877a6f"),
						},
						Status: &armsecurity.SubAssessmentStatus{
							Description: to.Ptr("The resource is unhealthy"),
							Cause:       to.Ptr(""),
							Code:        to.Ptr(armsecurity.SubAssessmentStatusCodeUnhealthy),
							Severity:    to.Ptr(armsecurity.SeverityHigh),
						},
						TimeGenerated: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-06-23T12:20:08.7644808Z"); return t }()),
					},
				},
				{
					Name: to.Ptr("8fbe5054-e97c-3a7a-fda7-c8308ca8d3cf"),
					Type: to.Ptr("Microsoft.Security/assessments/subAssessments"),
					ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/ascdemoRG/providers/Microsoft.Sql/servers/sqlserver1demo/providers/Microsoft.Security/assessments/82e20e14-edc5-4373-bfc4-f13121257c37/subassessments/8fbe5054-e97c-3a7a-fda7-c8308ca8d3cf"),
					Properties: &armsecurity.SubAssessmentProperties{
						Description: to.Ptr("The Azure SQL Database-level firewall helps protect your data by preventing all access to your database until you specify which IP addresses have permission. Database-level firewall rules grant access to the specific database based on the originating IP address of each request.\n\nDatabase-level firewall rules for master"),
						AdditionalData: &armsecurity.SQLServerVulnerabilityProperties{
							AssessedResourceType: to.Ptr(armsecurity.AssessedResourceTypeSQLServerVulnerability),
							Type:                 to.Ptr("AzureDatabase"),
							Query:                to.Ptr("SELECT name\n    ,start_ip_address\n    ,end_ip_address\nFROM sys.database_firewall_rules"),
						},
						Category:    to.Ptr("SurfaceAreaReduction"),
						DisplayName: to.Ptr("Database-level firewall rules should be tracked and maintained at a strict minimum"),
						ID:          to.Ptr("VA2064"),
						Impact:      to.Ptr("Firewall rules should be strictly configured to allow access only to client computers that have a valid need to connect to the database. Any superfluous entries in the firewall may pose a threat by allowing an unauthorized source access to your database."),
						Remediation: to.Ptr("Evaluate each of the database-level firewall rules. Remove any rules that grant unnecessary access and set the rest as a baseline. Deviations from the baseline will be identified and brought to your attention in subsequent scans."),
						ResourceDetails: &armsecurity.AzureResourceDetails{
							Source: to.Ptr(armsecurity.SourceAzure),
							ID:     to.Ptr("/subscriptions/212f9889-769e-45ae-ab43-6da33674bd26/resourceGroups/ascdemoRG/providers/Microsoft.Sql/servers/sqlserver1demo/databases/database1"),
						},
						Status: &armsecurity.SubAssessmentStatus{
							Cause:    to.Ptr("Unknown"),
							Code:     to.Ptr(armsecurity.SubAssessmentStatusCodeHealthy),
							Severity: to.Ptr(armsecurity.SeverityHigh),
						},
						TimeGenerated: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-06-23T12:20:08.7644808Z"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SubAssessmentList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SubAssessmentList)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/preview/2019-01-01-preview/examples/SubAssessments/ListSubscriptionSubAssessments_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSubAssessments_List(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/preview/2019-01-01-preview/examples/SubAssessments/ListSubAssessments_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List security sub-assessments"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewSubAssessmentsClient(cred, &options)
	pager := client.List("subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23",
		"82e20e14-edc5-4373-bfc4-f13121257c37",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/security/resource-manager/Microsoft.Security/preview/2019-01-01-preview/examples/SubAssessments/ListSubAssessments_example.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsecurity.SubAssessmentList{
			Value: []*armsecurity.SubAssessment{
				{
					Name: to.Ptr("8fbe5054-e97c-3a7a-fda7-c8308ca8d3cf"),
					Type: to.Ptr("Microsoft.Security/assessments/subAssessments"),
					ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/ascdemoRG/providers/Microsoft.Sql/servers/sqlserver1demo/providers/Microsoft.Security/assessments/82e20e14-edc5-4373-bfc4-f13121257c37/subassessments/8fbe5054-e97c-3a7a-fda7-c8308ca8d3cf"),
					Properties: &armsecurity.SubAssessmentProperties{
						Description: to.Ptr("The Azure SQL Database-level firewall helps protect your data by preventing all access to your database until you specify which IP addresses have permission. Database-level firewall rules grant access to the specific database based on the originating IP address of each request.\n\nDatabase-level firewall rules for master"),
						AdditionalData: &armsecurity.SQLServerVulnerabilityProperties{
							AssessedResourceType: to.Ptr(armsecurity.AssessedResourceTypeSQLServerVulnerability),
							Type:                 to.Ptr("AzureDatabase"),
							Query:                to.Ptr("SELECT name\n    ,start_ip_address\n    ,end_ip_address\nFROM sys.database_firewall_rules"),
						},
						Category:    to.Ptr("SurfaceAreaReduction"),
						DisplayName: to.Ptr("Database-level firewall rules should be tracked and maintained at a strict minimum"),
						ID:          to.Ptr("VA2064"),
						Impact:      to.Ptr("Firewall rules should be strictly configured to allow access only to client computers that have a valid need to connect to the database. Any superfluous entries in the firewall may pose a threat by allowing an unauthorized source access to your database."),
						Remediation: to.Ptr("Evaluate each of the database-level firewall rules. Remove any rules that grant unnecessary access and set the rest as a baseline. Deviations from the baseline will be identified and brought to your attention in subsequent scans."),
						ResourceDetails: &armsecurity.AzureResourceDetails{
							Source: to.Ptr(armsecurity.SourceAzure),
							ID:     to.Ptr("/subscriptions/212f9889-769e-45ae-ab43-6da33674bd26/resourceGroups/ascdemoRG/providers/Microsoft.Sql/servers/sqlserver1demo/databases/database1"),
						},
						Status: &armsecurity.SubAssessmentStatus{
							Cause:    to.Ptr("Unknown"),
							Code:     to.Ptr(armsecurity.SubAssessmentStatusCodeHealthy),
							Severity: to.Ptr(armsecurity.SeverityHigh),
						},
						TimeGenerated: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-06-23T12:20:08.7644808Z"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SubAssessmentList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SubAssessmentList)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/preview/2019-01-01-preview/examples/SubAssessments/ListSubAssessments_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSubAssessments_Get(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/preview/2019-01-01-preview/examples/SubAssessments/GetSubAssessment_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get security recommendation task from security data location"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewSubAssessmentsClient(cred, &options)
	res, err := client.Get(ctx,
		"subscriptions/212f9889-769e-45ae-ab43-6da33674bd26/resourceGroups/DEMORG/providers/Microsoft.Compute/virtualMachines/vm2",
		"1195afff-c881-495e-9bc5-1486211ae03f",
		"95f7da9c-a2a4-1322-0758-fcd24ef09b85",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/preview/2019-01-01-preview/examples/SubAssessments/GetSubAssessment_example.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurity.SubAssessment{
			Name: to.Ptr("95f7da9c-a2a4-1322-0758-fcd24ef09b85"),
			Type: to.Ptr("Microsoft.Security/assessments/subAssessments"),
			ID:   to.Ptr("/subscriptions/212f9889-769e-45ae-ab43-6da33674bd26/resourceGroups/DEMORG/providers/Microsoft.Compute/virtualMachines/vm2/providers/Microsoft.Security/assessments/1195afff-c881-495e-9bc5-1486211ae03f/subassessments/95f7da9c-a2a4-1322-0758-fcd24ef09b85"),
			Properties: &armsecurity.SubAssessmentProperties{
				Description: to.Ptr("PuTTY ssh_agent_channel_data Function Integer Overflow Vulnerability"),
				AdditionalData: &armsecurity.AdditionalData{
					AssessedResourceType: to.Ptr(armsecurity.AssessedResourceTypeServerVulnerability),
				},
				Category:    to.Ptr("Local"),
				DisplayName: to.Ptr("PuTTY ssh_agent_channel_data Function Integer Overflow Vulnerability"),
				ID:          to.Ptr("370361"),
				Impact:      to.Ptr("Successful exploitation could allow remote attackers to have unspecified impact via a large length value in an agent protocol message."),
				Remediation: to.Ptr("Customers are advised to upgrade toPuTTY 0.68 or later version in order to remediate this vulnerability."),
				ResourceDetails: &armsecurity.AzureResourceDetails{
					Source: to.Ptr(armsecurity.SourceAzure),
					ID:     to.Ptr("/subscriptions/212f9889-769e-45ae-ab43-6da33674bd26/resourceGroups/DEMORG/providers/Microsoft.Compute/virtualMachines/vm2"),
				},
				Status: &armsecurity.SubAssessmentStatus{
					Code:     to.Ptr(armsecurity.SubAssessmentStatusCodeUnhealthy),
					Severity: to.Ptr(armsecurity.SeverityMedium),
				},
				TimeGenerated: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-02-02T12:36:50.779Z"); return t }()),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SubAssessment) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SubAssessment)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/preview/2019-01-01-preview/examples/SubAssessments/GetSubAssessment_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAutomations_List(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/preview/2019-01-01-preview/examples/Automations/GetAutomationsSubscription_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all security automations of a specified subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewAutomationsClient("a5caac9c-5c04-49af-b3d0-e204f40345d5", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/security/resource-manager/Microsoft.Security/preview/2019-01-01-preview/examples/Automations/GetAutomationsSubscription_example.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsecurity.AutomationList{
			Value: []*armsecurity.Automation{
				{
					Location: to.Ptr("Central US"),
					Etag:     to.Ptr("etag value"),
					Name:     to.Ptr("exampleAutomation"),
					Type:     to.Ptr("Microsoft.Security/automations"),
					ID:       to.Ptr("/subscriptions/a5caac9c-5c04-49af-b3d0-e204f40345d5/resourceGroups/exampleResourceGroup/providers/Microsoft.Security/automations/exampleAutomation"),
					Tags:     map[string]*string{},
					Properties: &armsecurity.AutomationProperties{
						Description: to.Ptr("An example of a security automation that triggers one LogicApp resource (myTest1) on any security assessment of type customAssessment"),
						Actions: []armsecurity.AutomationActionClassification{
							&armsecurity.AutomationActionLogicApp{
								ActionType:         to.Ptr(armsecurity.ActionTypeLogicApp),
								LogicAppResourceID: to.Ptr("/subscriptions/e54a4a18-5b94-4f90-9471-bd3decad8a2e/resourceGroups/sample/providers/Microsoft.Logic/workflows/MyTest1"),
							}},
						IsEnabled: to.Ptr(true),
						Scopes: []*armsecurity.AutomationScope{
							{
								Description: to.Ptr("A description that helps to identify this scope - for example: security assessments that relate to the resource group myResourceGroup within the subscription a5caac9c-5c04-49af-b3d0-e204f40345d5"),
								ScopePath:   to.Ptr("/subscriptions/a5caac9c-5c04-49af-b3d0-e204f40345d5/resourceGroups/myResourceGroup"),
							}},
						Sources: []*armsecurity.AutomationSource{
							{
								EventSource: to.Ptr(armsecurity.EventSourceAssessments),
								RuleSets: []*armsecurity.AutomationRuleSet{
									{
										Rules: []*armsecurity.AutomationTriggeringRule{
											{
												ExpectedValue: to.Ptr("customAssessment"),
												Operator:      to.Ptr(armsecurity.OperatorEquals),
												PropertyJPath: to.Ptr("$.Entity.AssessmentType"),
												PropertyType:  to.Ptr(armsecurity.PropertyTypeString),
											}},
									}},
							}},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AutomationList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AutomationList)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/preview/2019-01-01-preview/examples/Automations/GetAutomationsSubscription_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAutomations_ListByResourceGroup(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/preview/2019-01-01-preview/examples/Automations/GetAutomationsResourceGroup_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all security automations of a specified resource group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewAutomationsClient("a5caac9c-5c04-49af-b3d0-e204f40345d5", cred, &options)
	pager := client.ListByResourceGroup("exampleResourceGroup",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/security/resource-manager/Microsoft.Security/preview/2019-01-01-preview/examples/Automations/GetAutomationsResourceGroup_example.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsecurity.AutomationList{
			Value: []*armsecurity.Automation{
				{
					Location: to.Ptr("Central US"),
					Etag:     to.Ptr("etag value"),
					Name:     to.Ptr("exampleAutomation"),
					Type:     to.Ptr("Microsoft.Security/automations"),
					ID:       to.Ptr("/subscriptions/e4272367-5645-4c4e-9c67-3b74b59a6982/resourceGroups/exampleResourceGroup/providers/Microsoft.Security/automations/exampleAutomation"),
					Tags:     map[string]*string{},
					Properties: &armsecurity.AutomationProperties{
						Description: to.Ptr("An example of a security automation that triggers one LogicApp resource (myTest1) on any security assessment of type customAssessment"),
						Actions: []armsecurity.AutomationActionClassification{
							&armsecurity.AutomationActionLogicApp{
								ActionType:         to.Ptr(armsecurity.ActionTypeLogicApp),
								LogicAppResourceID: to.Ptr("/subscriptions/e54a4a18-5b94-4f90-9471-bd3decad8a2e/resourceGroups/sample/providers/Microsoft.Logic/workflows/MyTest1"),
							}},
						IsEnabled: to.Ptr(true),
						Scopes: []*armsecurity.AutomationScope{
							{
								Description: to.Ptr("A description that helps to identify this scope - for example: security assessments that relate to the resource group myResourceGroup within the subscription a5caac9c-5c04-49af-b3d0-e204f40345d5"),
								ScopePath:   to.Ptr("/subscriptions/a5caac9c-5c04-49af-b3d0-e204f40345d5/resourceGroups/myResourceGroup"),
							}},
						Sources: []*armsecurity.AutomationSource{
							{
								EventSource: to.Ptr(armsecurity.EventSourceAssessments),
								RuleSets: []*armsecurity.AutomationRuleSet{
									{
										Rules: []*armsecurity.AutomationTriggeringRule{
											{
												ExpectedValue: to.Ptr("customAssessment"),
												Operator:      to.Ptr(armsecurity.OperatorEquals),
												PropertyJPath: to.Ptr("$.Entity.AssessmentType"),
												PropertyType:  to.Ptr(armsecurity.PropertyTypeString),
											}},
									}},
							}},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AutomationList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AutomationList)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/preview/2019-01-01-preview/examples/Automations/GetAutomationsResourceGroup_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAutomations_Get(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/preview/2019-01-01-preview/examples/Automations/GetAutomationResourceGroup_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Retrieve a security automation"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewAutomationsClient("a5caac9c-5c04-49af-b3d0-e204f40345d5", cred, &options)
	res, err := client.Get(ctx,
		"exampleResourceGroup",
		"exampleAutomation",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/preview/2019-01-01-preview/examples/Automations/GetAutomationResourceGroup_example.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurity.Automation{
			Location: to.Ptr("Central US"),
			Etag:     to.Ptr("etag value"),
			Name:     to.Ptr("exampleAutomation"),
			Type:     to.Ptr("Microsoft.Security/automations"),
			ID:       to.Ptr("/subscriptions/a5caac9c-5c04-49af-b3d0-e204f40345d5/resourceGroups/exampleResourceGroup/providers/Microsoft.Security/automations/exampleAutomation"),
			Tags:     map[string]*string{},
			Properties: &armsecurity.AutomationProperties{
				Description: to.Ptr("An example of a security automation that triggers one LogicApp resource (myTest1) on any security assessment of type customAssessment"),
				Actions: []armsecurity.AutomationActionClassification{
					&armsecurity.AutomationActionLogicApp{
						ActionType:         to.Ptr(armsecurity.ActionTypeLogicApp),
						LogicAppResourceID: to.Ptr("/subscriptions/e54a4a18-5b94-4f90-9471-bd3decad8a2e/resourceGroups/sample/providers/Microsoft.Logic/workflows/MyTest1"),
					}},
				IsEnabled: to.Ptr(true),
				Scopes: []*armsecurity.AutomationScope{
					{
						Description: to.Ptr("A description that helps to identify this scope - for example: security assessments that relate to the resource group myResourceGroup within the subscription a5caac9c-5c04-49af-b3d0-e204f40345d5"),
						ScopePath:   to.Ptr("/subscriptions/a5caac9c-5c04-49af-b3d0-e204f40345d5/resourceGroups/myResourceGroup"),
					}},
				Sources: []*armsecurity.AutomationSource{
					{
						EventSource: to.Ptr(armsecurity.EventSourceAssessments),
						RuleSets: []*armsecurity.AutomationRuleSet{
							{
								Rules: []*armsecurity.AutomationTriggeringRule{
									{
										ExpectedValue: to.Ptr("customAssessment"),
										Operator:      to.Ptr(armsecurity.OperatorEquals),
										PropertyJPath: to.Ptr("$.Entity.AssessmentType"),
										PropertyType:  to.Ptr(armsecurity.PropertyTypeString),
									}},
							}},
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Automation) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Automation)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/preview/2019-01-01-preview/examples/Automations/GetAutomationResourceGroup_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAutomations_CreateOrUpdate(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/preview/2019-01-01-preview/examples/Automations/PutAutomationAllAssessments_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a security automation for all assessments (including all severities)"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewAutomationsClient("a5caac9c-5c04-49af-b3d0-e204f40345d5", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"exampleResourceGroup",
		"exampleAutomation",
		armsecurity.Automation{
			Location: to.Ptr("Central US"),
			Etag:     to.Ptr("etag value (must be supplied for update)"),
			Tags:     map[string]*string{},
			Properties: &armsecurity.AutomationProperties{
				Description: to.Ptr("An example of a security automation that triggers one LogicApp resource (myTest1) on any security assessment"),
				Actions: []armsecurity.AutomationActionClassification{
					&armsecurity.AutomationActionLogicApp{
						ActionType:         to.Ptr(armsecurity.ActionTypeLogicApp),
						LogicAppResourceID: to.Ptr("/subscriptions/e54a4a18-5b94-4f90-9471-bd3decad8a2e/resourceGroups/sample/providers/Microsoft.Logic/workflows/MyTest1"),
						URI:                to.Ptr("https://exampleTriggerUri1.com"),
					}},
				IsEnabled: to.Ptr(true),
				Scopes: []*armsecurity.AutomationScope{
					{
						Description: to.Ptr("A description that helps to identify this scope - for example: security assessments that relate to the resource group myResourceGroup within the subscription a5caac9c-5c04-49af-b3d0-e204f40345d5"),
						ScopePath:   to.Ptr("/subscriptions/a5caac9c-5c04-49af-b3d0-e204f40345d5/resourceGroups/myResourceGroup"),
					}},
				Sources: []*armsecurity.AutomationSource{
					{
						EventSource: to.Ptr(armsecurity.EventSourceAssessments),
					}},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/preview/2019-01-01-preview/examples/Automations/PutAutomationAllAssessments_example.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurity.Automation{
			Location: to.Ptr("Central US"),
			Etag:     to.Ptr("new etag value"),
			Name:     to.Ptr("exampleAutomation"),
			Type:     to.Ptr("Microsoft.Security/automations"),
			ID:       to.Ptr("/subscriptions/a5caac9c-5c04-49af-b3d0-e204f40345d5/resourceGroups/exampleResourceGroup/providers/Microsoft.Security/automations/exampleAutomation"),
			Tags:     map[string]*string{},
			Properties: &armsecurity.AutomationProperties{
				Description: to.Ptr("An example of a security automation that triggers one LogicApp resource (myTest1) on any security assessment"),
				Actions: []armsecurity.AutomationActionClassification{
					&armsecurity.AutomationActionLogicApp{
						ActionType:         to.Ptr(armsecurity.ActionTypeLogicApp),
						LogicAppResourceID: to.Ptr("/subscriptions/e54a4a18-5b94-4f90-9471-bd3decad8a2e/resourceGroups/sample/providers/Microsoft.Logic/workflows/MyTest1"),
					}},
				IsEnabled: to.Ptr(true),
				Scopes: []*armsecurity.AutomationScope{
					{
						Description: to.Ptr("A description that helps to identify this scope - for example: security assessments that relate to the resource group myResourceGroup within the subscription a5caac9c-5c04-49af-b3d0-e204f40345d5"),
						ScopePath:   to.Ptr("/subscriptions/a5caac9c-5c04-49af-b3d0-e204f40345d5/resourceGroups/myResourceGroup"),
					}},
				Sources: []*armsecurity.AutomationSource{
					{
						EventSource: to.Ptr(armsecurity.EventSourceAssessments),
						RuleSets:    []*armsecurity.AutomationRuleSet{},
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Automation) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Automation)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/preview/2019-01-01-preview/examples/Automations/PutAutomationAllAssessments_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/security/resource-manager/Microsoft.Security/preview/2019-01-01-preview/examples/Automations/PutAutomationHighSeverityAssessments_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a security automation for all high severity assessments"},
	})
	client = armsecurity.NewAutomationsClient("a5caac9c-5c04-49af-b3d0-e204f40345d5", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"exampleResourceGroup",
		"exampleAutomation",
		armsecurity.Automation{
			Location: to.Ptr("Central US"),
			Etag:     to.Ptr("etag value (must be supplied for update)"),
			Tags:     map[string]*string{},
			Properties: &armsecurity.AutomationProperties{
				Description: to.Ptr("An example of a security automation that triggers one LogicApp resource (myTest1) on any high severity security assessment"),
				Actions: []armsecurity.AutomationActionClassification{
					&armsecurity.AutomationActionLogicApp{
						ActionType:         to.Ptr(armsecurity.ActionTypeLogicApp),
						LogicAppResourceID: to.Ptr("/subscriptions/e54a4a18-5b94-4f90-9471-bd3decad8a2e/resourceGroups/sample/providers/Microsoft.Logic/workflows/MyTest1"),
						URI:                to.Ptr("https://exampleTriggerUri1.com"),
					}},
				IsEnabled: to.Ptr(true),
				Scopes: []*armsecurity.AutomationScope{
					{
						Description: to.Ptr("A description that helps to identify this scope - for example: security assessments that relate to the resource group myResourceGroup within the subscription a5caac9c-5c04-49af-b3d0-e204f40345d5"),
						ScopePath:   to.Ptr("/subscriptions/a5caac9c-5c04-49af-b3d0-e204f40345d5/resourceGroups/myResourceGroup"),
					}},
				Sources: []*armsecurity.AutomationSource{
					{
						EventSource: to.Ptr(armsecurity.EventSourceAssessments),
						RuleSets: []*armsecurity.AutomationRuleSet{
							{
								Rules: []*armsecurity.AutomationTriggeringRule{
									{
										ExpectedValue: to.Ptr("High"),
										Operator:      to.Ptr(armsecurity.OperatorEquals),
										PropertyJPath: to.Ptr("properties.metadata.severity"),
										PropertyType:  to.Ptr(armsecurity.PropertyTypeString),
									}},
							}},
					}},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/preview/2019-01-01-preview/examples/Automations/PutAutomationHighSeverityAssessments_example.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurity.Automation{
			Location: to.Ptr("Central US"),
			Etag:     to.Ptr("new etag value"),
			Name:     to.Ptr("exampleAutomation"),
			Type:     to.Ptr("Microsoft.Security/automations"),
			ID:       to.Ptr("/subscriptions/a5caac9c-5c04-49af-b3d0-e204f40345d5/resourceGroups/exampleResourceGroup/providers/Microsoft.Security/automations/exampleAutomation"),
			Tags:     map[string]*string{},
			Properties: &armsecurity.AutomationProperties{
				Description: to.Ptr("An example of a security automation that triggers one LogicApp resource (myTest1) on any high severity security assessment"),
				Actions: []armsecurity.AutomationActionClassification{
					&armsecurity.AutomationActionLogicApp{
						ActionType:         to.Ptr(armsecurity.ActionTypeLogicApp),
						LogicAppResourceID: to.Ptr("/subscriptions/e54a4a18-5b94-4f90-9471-bd3decad8a2e/resourceGroups/sample/providers/Microsoft.Logic/workflows/MyTest1"),
					}},
				IsEnabled: to.Ptr(true),
				Scopes: []*armsecurity.AutomationScope{
					{
						Description: to.Ptr("A description that helps to identify this scope - for example: security assessments that relate to the resource group myResourceGroup within the subscription a5caac9c-5c04-49af-b3d0-e204f40345d5"),
						ScopePath:   to.Ptr("/subscriptions/a5caac9c-5c04-49af-b3d0-e204f40345d5/resourceGroups/myResourceGroup"),
					}},
				Sources: []*armsecurity.AutomationSource{
					{
						EventSource: to.Ptr(armsecurity.EventSourceAssessments),
						RuleSets: []*armsecurity.AutomationRuleSet{
							{
								Rules: []*armsecurity.AutomationTriggeringRule{
									{
										ExpectedValue: to.Ptr("High"),
										Operator:      to.Ptr(armsecurity.OperatorEquals),
										PropertyJPath: to.Ptr("properties.metadata.severity"),
										PropertyType:  to.Ptr(armsecurity.PropertyTypeString),
									}},
							}},
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Automation) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Automation)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/preview/2019-01-01-preview/examples/Automations/PutAutomationHighSeverityAssessments_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/security/resource-manager/Microsoft.Security/preview/2019-01-01-preview/examples/Automations/PutDisableAutomation_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Disable or enable a security automation"},
	})
	client = armsecurity.NewAutomationsClient("a5caac9c-5c04-49af-b3d0-e204f40345d5", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"exampleResourceGroup",
		"exampleAutomation",
		armsecurity.Automation{
			Location: to.Ptr("Central US"),
			Etag:     to.Ptr("etag value (must be supplied for update)"),
			Tags:     map[string]*string{},
			Properties: &armsecurity.AutomationProperties{
				Description: to.Ptr("An example of a security automation that triggers one LogicApp resource (myTest1) on any security assessment of type customAssessment"),
				Actions: []armsecurity.AutomationActionClassification{
					&armsecurity.AutomationActionLogicApp{
						ActionType:         to.Ptr(armsecurity.ActionTypeLogicApp),
						LogicAppResourceID: to.Ptr("/subscriptions/e54a4a18-5b94-4f90-9471-bd3decad8a2e/resourceGroups/sample/providers/Microsoft.Logic/workflows/MyTest1"),
						URI:                to.Ptr("https://exampleTriggerUri1.com"),
					}},
				IsEnabled: to.Ptr(false),
				Scopes: []*armsecurity.AutomationScope{
					{
						Description: to.Ptr("A description that helps to identify this scope - for example: security assessments that relate to the resource group myResourceGroup within the subscription a5caac9c-5c04-49af-b3d0-e204f40345d5"),
						ScopePath:   to.Ptr("/subscriptions/a5caac9c-5c04-49af-b3d0-e204f40345d5/resourceGroups/myResourceGroup"),
					}},
				Sources: []*armsecurity.AutomationSource{
					{
						EventSource: to.Ptr(armsecurity.EventSourceAssessments),
						RuleSets: []*armsecurity.AutomationRuleSet{
							{
								Rules: []*armsecurity.AutomationTriggeringRule{
									{
										ExpectedValue: to.Ptr("customAssessment"),
										Operator:      to.Ptr(armsecurity.OperatorEquals),
										PropertyJPath: to.Ptr("$.Entity.AssessmentType"),
										PropertyType:  to.Ptr(armsecurity.PropertyTypeString),
									}},
							}},
					}},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/preview/2019-01-01-preview/examples/Automations/PutDisableAutomation_example.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurity.Automation{
			Location: to.Ptr("Central US"),
			Etag:     to.Ptr("new etag value"),
			Name:     to.Ptr("exampleAutomation"),
			Type:     to.Ptr("Microsoft.Security/automations"),
			ID:       to.Ptr("/subscriptions/a5caac9c-5c04-49af-b3d0-e204f40345d5/resourceGroups/exampleResourceGroup/providers/Microsoft.Security/automations/exampleAutomation"),
			Tags:     map[string]*string{},
			Properties: &armsecurity.AutomationProperties{
				Description: to.Ptr("An example of a security automation that triggers one LogicApp resource (myTest1) on any security assessment of type customAssessment"),
				Actions: []armsecurity.AutomationActionClassification{
					&armsecurity.AutomationActionLogicApp{
						ActionType:         to.Ptr(armsecurity.ActionTypeLogicApp),
						LogicAppResourceID: to.Ptr("/subscriptions/e54a4a18-5b94-4f90-9471-bd3decad8a2e/resourceGroups/sample/providers/Microsoft.Logic/workflows/MyTest1"),
					}},
				IsEnabled: to.Ptr(false),
				Scopes: []*armsecurity.AutomationScope{
					{
						Description: to.Ptr("A description that helps to identify this scope - for example: security assessments that relate to the resource group myResourceGroup within the subscription a5caac9c-5c04-49af-b3d0-e204f40345d5"),
						ScopePath:   to.Ptr("/subscriptions/a5caac9c-5c04-49af-b3d0-e204f40345d5/resourceGroups/myResourceGroup"),
					}},
				Sources: []*armsecurity.AutomationSource{
					{
						EventSource: to.Ptr(armsecurity.EventSourceAssessments),
						RuleSets: []*armsecurity.AutomationRuleSet{
							{
								Rules: []*armsecurity.AutomationTriggeringRule{
									{
										ExpectedValue: to.Ptr("customAssessment"),
										Operator:      to.Ptr(armsecurity.OperatorEquals),
										PropertyJPath: to.Ptr("$.Entity.AssessmentType"),
										PropertyType:  to.Ptr(armsecurity.PropertyTypeString),
									}},
							}},
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Automation) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Automation)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/preview/2019-01-01-preview/examples/Automations/PutDisableAutomation_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAutomations_Delete(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/preview/2019-01-01-preview/examples/Automations/DeleteAutomation_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a security automation"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewAutomationsClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23", cred, &options)
	_, err := client.Delete(ctx,
		"myRg",
		"myAutomationName",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/preview/2019-01-01-preview/examples/Automations/DeleteAutomation_example.json: %v", err)
	}
}

func TestAutomations_Validate(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/preview/2019-01-01-preview/examples/Automations/ValidateAutomation_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Validate the security automation model before create or update"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewAutomationsClient("a5caac9c-5c04-49af-b3d0-e204f40345d5", cred, &options)
	res, err := client.Validate(ctx,
		"exampleResourceGroup",
		"exampleAutomation",
		armsecurity.Automation{
			Location: to.Ptr("Central US"),
			Tags:     map[string]*string{},
			Properties: &armsecurity.AutomationProperties{
				Description: to.Ptr("An example of a security automation that triggers one LogicApp resource (myTest1) on any security assessment of type customAssessment"),
				Actions: []armsecurity.AutomationActionClassification{
					&armsecurity.AutomationActionLogicApp{
						ActionType:         to.Ptr(armsecurity.ActionTypeLogicApp),
						LogicAppResourceID: to.Ptr("/subscriptions/e54a4a18-5b94-4f90-9471-bd3decad8a2e/resourceGroups/sample/providers/Microsoft.Logic/workflows/MyTest1"),
						URI:                to.Ptr("https://exampleTriggerUri1.com"),
					}},
				IsEnabled: to.Ptr(true),
				Scopes: []*armsecurity.AutomationScope{
					{
						Description: to.Ptr("A description that helps to identify this scope - for example: security assessments that relate to the resource group myResourceGroup within the subscription a5caac9c-5c04-49af-b3d0-e204f40345d5"),
						ScopePath:   to.Ptr("/subscriptions/a5caac9c-5c04-49af-b3d0-e204f40345d5/resourceGroups/myResourceGroup"),
					}},
				Sources: []*armsecurity.AutomationSource{
					{
						EventSource: to.Ptr(armsecurity.EventSourceAssessments),
						RuleSets: []*armsecurity.AutomationRuleSet{
							{
								Rules: []*armsecurity.AutomationTriggeringRule{
									{
										ExpectedValue: to.Ptr("customAssessment"),
										Operator:      to.Ptr(armsecurity.OperatorEquals),
										PropertyJPath: to.Ptr("$.Entity.AssessmentType"),
										PropertyType:  to.Ptr(armsecurity.PropertyTypeString),
									}},
							}},
					}},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/preview/2019-01-01-preview/examples/Automations/ValidateAutomation_example.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurity.AutomationValidationStatus{
			IsValid: to.Ptr(true),
			Message: to.Ptr("Validation Successful"),
		}
		if !reflect.DeepEqual(exampleRes, res.AutomationValidationStatus) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AutomationValidationStatus)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/preview/2019-01-01-preview/examples/Automations/ValidateAutomation_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAlertsSuppressionRules_List(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/preview/2019-01-01-preview/examples/AlertsSuppressionRules/GetAlertsSuppressionRulesWithAlertType_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get suppression alert rule for subscription, filtered by AlertType"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewAlertsSuppressionRulesClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23", cred, &options)
	pager := client.List(&armsecurity.AlertsSuppressionRulesClientListOptions{AlertType: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/security/resource-manager/Microsoft.Security/preview/2019-01-01-preview/examples/AlertsSuppressionRules/GetAlertsSuppressionRulesWithAlertType_example.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsecurity.AlertsSuppressionRulesList{
			Value: []*armsecurity.AlertsSuppressionRule{
				{
					Name: to.Ptr("dismissIpAnomalyAlerts"),
					Type: to.Ptr("Microsoft.Security/alertsSuppressionRules"),
					ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/alertsSuppressionRules/dismissIpAnomalyAlerts"),
					Properties: &armsecurity.AlertsSuppressionRuleProperties{
						AlertType:         to.Ptr("IpAnomaly"),
						Comment:           to.Ptr("Test VM"),
						ExpirationDateUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-12-01T19:50:47.083633Z"); return t }()),
						LastModifiedUTC:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-07-31T19:50:47.083633Z"); return t }()),
						Reason:            to.Ptr("FalsePositive"),
						State:             to.Ptr(armsecurity.RuleStateEnabled),
						SuppressionAlertsScope: &armsecurity.SuppressionAlertsScope{
							AllOf: []*armsecurity.ScopeElement{
								{
									AdditionalProperties: map[string]interface{}{
										"in": []interface{}{
											"104.215.95.187",
											"52.164.206.56",
										},
									},
									Field: to.Ptr("entities.ip.address"),
								},
								{
									AdditionalProperties: map[string]interface{}{
										"contains": "POWERSHELL.EXE",
									},
									Field: to.Ptr("entities.process.commandline"),
								}},
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AlertsSuppressionRulesList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AlertsSuppressionRulesList)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/preview/2019-01-01-preview/examples/AlertsSuppressionRules/GetAlertsSuppressionRulesWithAlertType_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/security/resource-manager/Microsoft.Security/preview/2019-01-01-preview/examples/AlertsSuppressionRules/GetAlertsSuppressionRules_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get suppression rules for subscription"},
	})
	client = armsecurity.NewAlertsSuppressionRulesClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23", cred, &options)
	pager = client.List(&armsecurity.AlertsSuppressionRulesClientListOptions{AlertType: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/security/resource-manager/Microsoft.Security/preview/2019-01-01-preview/examples/AlertsSuppressionRules/GetAlertsSuppressionRules_example.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsecurity.AlertsSuppressionRulesList{
			Value: []*armsecurity.AlertsSuppressionRule{
				{
					Name: to.Ptr("dismissIpAnomalyAlerts"),
					Type: to.Ptr("Microsoft.Security/alertsSuppressionRules"),
					ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/alertsSuppressionRules/dismissIpAnomalyAlerts"),
					Properties: &armsecurity.AlertsSuppressionRuleProperties{
						AlertType:         to.Ptr("IpAnomaly"),
						Comment:           to.Ptr("Test VM"),
						ExpirationDateUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-12-01T19:50:47.083633Z"); return t }()),
						LastModifiedUTC:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-07-31T19:50:47.083633Z"); return t }()),
						Reason:            to.Ptr("FalsePositive"),
						State:             to.Ptr(armsecurity.RuleStateEnabled),
						SuppressionAlertsScope: &armsecurity.SuppressionAlertsScope{
							AllOf: []*armsecurity.ScopeElement{
								{
									AdditionalProperties: map[string]interface{}{
										"in": []interface{}{
											"104.215.95.187",
											"52.164.206.56",
										},
									},
									Field: to.Ptr("entities.ip.address"),
								},
								{
									AdditionalProperties: map[string]interface{}{
										"contains": "POWERSHELL.EXE",
									},
									Field: to.Ptr("entities.process.commandline"),
								}},
						},
					},
				},
				{
					Name: to.Ptr("dismissDataExfiltrationAnomalyAlertsOnTestVMs"),
					Type: to.Ptr("Microsoft.Security/alertsSuppressionRules"),
					ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/alertsSuppressionRules/dismissDataExfiltrationAnomalyAlertsOnTestVMs"),
					Properties: &armsecurity.AlertsSuppressionRuleProperties{
						AlertType:         to.Ptr("DataExfiltrationAnomaly"),
						ExpirationDateUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-12-01T19:50:47.083633Z"); return t }()),
						LastModifiedUTC:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-07-31T19:50:47.083633Z"); return t }()),
						Reason:            to.Ptr("FalsePositive"),
						State:             to.Ptr(armsecurity.RuleStateEnabled),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AlertsSuppressionRulesList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AlertsSuppressionRulesList)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/preview/2019-01-01-preview/examples/AlertsSuppressionRules/GetAlertsSuppressionRules_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAlertsSuppressionRules_Get(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/preview/2019-01-01-preview/examples/AlertsSuppressionRules/GetAlertsSuppressionRule_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get suppression alert rule for subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewAlertsSuppressionRulesClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23", cred, &options)
	res, err := client.Get(ctx,
		"dismissIpAnomalyAlerts",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/preview/2019-01-01-preview/examples/AlertsSuppressionRules/GetAlertsSuppressionRule_example.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurity.AlertsSuppressionRule{
			Name: to.Ptr("dismissIpAnomalyAlerts"),
			Type: to.Ptr("Microsoft.Security/alertsSuppressionRules"),
			ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/alertsSuppressionRules/dismissIpAnomalyAlerts"),
			Properties: &armsecurity.AlertsSuppressionRuleProperties{
				AlertType:         to.Ptr("IpAnomaly"),
				Comment:           to.Ptr("Test VM"),
				ExpirationDateUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-12-01T19:50:47.083633Z"); return t }()),
				LastModifiedUTC:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-07-31T19:50:47.083633Z"); return t }()),
				Reason:            to.Ptr("FalsePositive"),
				State:             to.Ptr(armsecurity.RuleStateEnabled),
				SuppressionAlertsScope: &armsecurity.SuppressionAlertsScope{
					AllOf: []*armsecurity.ScopeElement{
						{
							AdditionalProperties: map[string]interface{}{
								"in": []interface{}{
									"104.215.95.187",
									"52.164.206.56",
								},
							},
							Field: to.Ptr("entities.ip.address"),
						},
						{
							AdditionalProperties: map[string]interface{}{
								"contains": "POWERSHELL.EXE",
							},
							Field: to.Ptr("entities.process.commandline"),
						}},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AlertsSuppressionRule) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AlertsSuppressionRule)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/preview/2019-01-01-preview/examples/AlertsSuppressionRules/GetAlertsSuppressionRule_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAlertsSuppressionRules_Update(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/preview/2019-01-01-preview/examples/AlertsSuppressionRules/PutAlertsSuppressionRule_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update or create suppression rule for subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewAlertsSuppressionRulesClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23", cred, &options)
	res, err := client.Update(ctx,
		"dismissIpAnomalyAlerts",
		armsecurity.AlertsSuppressionRule{
			Properties: &armsecurity.AlertsSuppressionRuleProperties{
				AlertType:         to.Ptr("IpAnomaly"),
				Comment:           to.Ptr("Test VM"),
				ExpirationDateUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-12-01T19:50:47.083633Z"); return t }()),
				Reason:            to.Ptr("FalsePositive"),
				State:             to.Ptr(armsecurity.RuleStateEnabled),
				SuppressionAlertsScope: &armsecurity.SuppressionAlertsScope{
					AllOf: []*armsecurity.ScopeElement{
						{
							AdditionalProperties: map[string]interface{}{
								"in": []interface{}{
									"104.215.95.187",
									"52.164.206.56",
								},
							},
							Field: to.Ptr("entities.ip.address"),
						},
						{
							AdditionalProperties: map[string]interface{}{
								"contains": "POWERSHELL.EXE",
							},
							Field: to.Ptr("entities.process.commandline"),
						}},
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/preview/2019-01-01-preview/examples/AlertsSuppressionRules/PutAlertsSuppressionRule_example.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurity.AlertsSuppressionRule{
			Name: to.Ptr("dismissIpAnomalyAlerts"),
			Type: to.Ptr("Microsoft.Security/alertsSuppressionRules"),
			ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/alertsSuppressionRules/dismissIpAnomalyAlerts"),
			Properties: &armsecurity.AlertsSuppressionRuleProperties{
				AlertType:         to.Ptr("IpAnomaly"),
				Comment:           to.Ptr("Test VM"),
				ExpirationDateUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-12-01T19:50:47.083633Z"); return t }()),
				LastModifiedUTC:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-07-31T19:50:47.083633Z"); return t }()),
				Reason:            to.Ptr("FalsePositive"),
				State:             to.Ptr(armsecurity.RuleStateEnabled),
				SuppressionAlertsScope: &armsecurity.SuppressionAlertsScope{
					AllOf: []*armsecurity.ScopeElement{
						{
							AdditionalProperties: map[string]interface{}{
								"in": []interface{}{
									"104.215.95.187",
									"52.164.206.56",
								},
							},
							Field: to.Ptr("entities.ip.address"),
						},
						{
							AdditionalProperties: map[string]interface{}{
								"contains": "POWERSHELL.EXE",
							},
							Field: to.Ptr("entities.process.commandline"),
						}},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AlertsSuppressionRule) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AlertsSuppressionRule)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/preview/2019-01-01-preview/examples/AlertsSuppressionRules/PutAlertsSuppressionRule_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAlertsSuppressionRules_Delete(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/preview/2019-01-01-preview/examples/AlertsSuppressionRules/DeleteAlertsSuppressionRule_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete suppression rule data for a subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewAlertsSuppressionRulesClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23", cred, &options)
	_, err := client.Delete(ctx,
		"dismissIpAnomalyAlerts",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/preview/2019-01-01-preview/examples/AlertsSuppressionRules/DeleteAlertsSuppressionRule_example.json: %v", err)
	}
}

func TestServerVulnerabilityAssessment_ListByExtendedResource(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/stable/2020-01-01/examples/ServerVulnerabilityAssessments/ListByExtendedResourceServerVulnerabilityAssessments_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a list of server vulnerability assessments on a resource. Though this API returns a list, Currently Microsoft.Security only supports a single default type of server vulnerability assessment"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewServerVulnerabilityAssessmentClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23", cred, &options)
	res, err := client.ListByExtendedResource(ctx,
		"rg1",
		"Microsoft.Compute",
		"virtualMachines",
		"vm1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/stable/2020-01-01/examples/ServerVulnerabilityAssessments/ListByExtendedResourceServerVulnerabilityAssessments_example.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurity.ServerVulnerabilityAssessmentsList{
			Value: []*armsecurity.ServerVulnerabilityAssessment{
				{
					Name: to.Ptr("default"),
					Type: to.Ptr("Microsoft.Security/serverVulnerabilityAssessments"),
					ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourcegroups/rg1/providers/Microsoft.Compute/virtualMachines/vm1/providers/Microsoft.Security/serverVulnerabilityAssessments/default"),
					Properties: &armsecurity.ServerVulnerabilityAssessmentProperties{
						ProvisioningState: to.Ptr(armsecurity.ServerVulnerabilityAssessmentPropertiesProvisioningStateSucceeded),
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.ServerVulnerabilityAssessmentsList) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServerVulnerabilityAssessmentsList)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/stable/2020-01-01/examples/ServerVulnerabilityAssessments/ListByExtendedResourceServerVulnerabilityAssessments_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServerVulnerabilityAssessment_Get(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/stable/2020-01-01/examples/ServerVulnerabilityAssessments/GetServerVulnerabilityAssessments_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a server vulnerability assessments onboarding status on a resource. Currently Microsoft.Security only supports the single 'default' resource"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewServerVulnerabilityAssessmentClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"Microsoft.Compute",
		"virtualMachines",
		"vm1",
		armsecurity.Enum31Default,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/stable/2020-01-01/examples/ServerVulnerabilityAssessments/GetServerVulnerabilityAssessments_example.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurity.ServerVulnerabilityAssessment{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Security/serverVulnerabilityAssessments"),
			ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourcegroups/rg1/providers/Microsoft.Compute/virtualMachines/vm1/providers/Microsoft.Security/serverVulnerabilityAssessments/default"),
			Properties: &armsecurity.ServerVulnerabilityAssessmentProperties{
				ProvisioningState: to.Ptr(armsecurity.ServerVulnerabilityAssessmentPropertiesProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ServerVulnerabilityAssessment) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServerVulnerabilityAssessment)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/stable/2020-01-01/examples/ServerVulnerabilityAssessments/GetServerVulnerabilityAssessments_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestServerVulnerabilityAssessment_CreateOrUpdate(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/stable/2020-01-01/examples/ServerVulnerabilityAssessments/CreateServerVulnerabilityAssessments_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a server vulnerability assessments on a resource. Only 'default' resource is supported. Once creating the resource, the server will be onboarded to vulnerability assessment by Microsoft.Security"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewServerVulnerabilityAssessmentClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23", cred, &options)
	_, err := client.CreateOrUpdate(ctx,
		"rg1",
		"Microsoft.Compute",
		"virtualMachines",
		"vm1",
		armsecurity.Enum31Default,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/stable/2020-01-01/examples/ServerVulnerabilityAssessments/CreateServerVulnerabilityAssessments_example.json: %v", err)
	}
}

func TestServerVulnerabilityAssessment_Delete(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/stable/2020-01-01/examples/ServerVulnerabilityAssessments/DeleteServerVulnerabilityAssessments_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a server vulnerability assessments on a resource. Only 'default' resource is supported. Once deleting, Microsoft.Security will not provide vulnerability assessment findings on the resource."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewServerVulnerabilityAssessmentClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"Microsoft.Compute",
		"virtualMachines",
		"vm1",
		armsecurity.Enum31Default,
		&armsecurity.ServerVulnerabilityAssessmentClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/stable/2020-01-01/examples/ServerVulnerabilityAssessments/DeleteServerVulnerabilityAssessments_example.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/security/resource-manager/Microsoft.Security/stable/2020-01-01/examples/ServerVulnerabilityAssessments/DeleteServerVulnerabilityAssessments_example.json: %v", err)
	}
}

func TestAssessmentsMetadata_List(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/stable/2021-06-01/examples/AssessmentsMetadata/ListAssessmentsMetadata_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List security assessment metadata"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewAssessmentsMetadataClient("<subscription-id>", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/security/resource-manager/Microsoft.Security/stable/2021-06-01/examples/AssessmentsMetadata/ListAssessmentsMetadata_example.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsecurity.AssessmentMetadataResponseList{
			Value: []*armsecurity.AssessmentMetadataResponse{
				{
					Name: to.Ptr("21300918-b2e3-0346-785f-c77ff57d243b"),
					Type: to.Ptr("Microsoft.Security/assessmentMetadata"),
					ID:   to.Ptr("/providers/Microsoft.Security/assessmentMetadata/21300918-b2e3-0346-785f-c77ff57d243b"),
					Properties: &armsecurity.AssessmentMetadataPropertiesResponse{
						Description:    to.Ptr("Install an endpoint protection solution on your virtual machines scale sets, to protect them from threats and vulnerabilities."),
						AssessmentType: to.Ptr(armsecurity.AssessmentTypeBuiltIn),
						Categories: []*armsecurity.Categories{
							to.Ptr(armsecurity.CategoriesCompute)},
						DisplayName:            to.Ptr("Install endpoint protection solution on virtual machine scale sets"),
						ImplementationEffort:   to.Ptr(armsecurity.ImplementationEffortLow),
						PolicyDefinitionID:     to.Ptr("/providers/Microsoft.Authorization/policyDefinitions/26a828e1-e88f-464e-bbb3-c134a282b9de"),
						RemediationDescription: to.Ptr("To install an endpoint protection solution: 1.  <a href=\"https://docs.microsoft.com/azure/virtual-machine-scale-sets/virtual-machine-scale-sets-faq#how-do-i-turn-on-antimalware-in-my-virtual-machine-scale-set\">Follow the instructions in How do I turn on antimalware in my virtual machine scale set</a>"),
						Severity:               to.Ptr(armsecurity.SeverityMedium),
						Threats: []*armsecurity.Threats{
							to.Ptr(armsecurity.ThreatsDataExfiltration),
							to.Ptr(armsecurity.ThreatsDataSpillage),
							to.Ptr(armsecurity.ThreatsMaliciousInsider)},
						UserImpact:             to.Ptr(armsecurity.UserImpactLow),
						PlannedDeprecationDate: to.Ptr("03/2022"),
						PublishDates: &armsecurity.AssessmentMetadataPropertiesResponsePublishDates{
							GA:     to.Ptr("06/01/2021"),
							Public: to.Ptr("06/01/2021"),
						},
						Tactics: []*armsecurity.Tactics{
							to.Ptr(armsecurity.TacticsCredentialAccess),
							to.Ptr(armsecurity.TacticsPersistence),
							to.Ptr(armsecurity.TacticsExecution),
							to.Ptr(armsecurity.TacticsDefenseEvasion),
							to.Ptr(armsecurity.TacticsCollection),
							to.Ptr(armsecurity.TacticsDiscovery),
							to.Ptr(armsecurity.TacticsPrivilegeEscalation)},
						Techniques: []*armsecurity.Techniques{
							to.Ptr(armsecurity.TechniquesObfuscatedFilesOrInformation),
							to.Ptr(armsecurity.TechniquesIngressToolTransfer),
							to.Ptr(armsecurity.TechniquesPhishing),
							to.Ptr(armsecurity.TechniquesUserExecution)},
					},
				},
				{
					Name: to.Ptr("bc303248-3d14-44c2-96a0-55f5c326b5fe"),
					Type: to.Ptr("Microsoft.Security/assessmentMetadata"),
					ID:   to.Ptr("/providers/Microsoft.Security/assessmentMetadata/bc303248-3d14-44c2-96a0-55f5c326b5fe"),
					Properties: &armsecurity.AssessmentMetadataPropertiesResponse{
						Description:    to.Ptr("Open remote management ports expose your VM to a high level of risk from internet-based attacks that attempt to brute force credentials to gain admin access to the machine."),
						AssessmentType: to.Ptr(armsecurity.AssessmentTypeCustomPolicy),
						Categories: []*armsecurity.Categories{
							to.Ptr(armsecurity.CategoriesNetworking)},
						DisplayName:            to.Ptr("Close management ports on your virtual machines"),
						ImplementationEffort:   to.Ptr(armsecurity.ImplementationEffortLow),
						PolicyDefinitionID:     to.Ptr("/providers/Microsoft.Authorization/policyDefinitions/22730e10-96f6-4aac-ad84-9383d35b5917"),
						Preview:                to.Ptr(true),
						RemediationDescription: to.Ptr("We recommend that you edit the inbound rules of the below virtual machines to restrict access to specific source ranges.<br>To restrict the access to your virtual machines: 1. Click on a VM from the list below 2. At the 'Networking' blade, click on each of the rules that allow management ports (e.g. RDP-3389, WINRM-5985, SSH-22) 3. Change the 'Action' property to 'Deny' 4. Click 'Save'"),
						Severity:               to.Ptr(armsecurity.SeverityMedium),
						Threats: []*armsecurity.Threats{
							to.Ptr(armsecurity.ThreatsDataExfiltration),
							to.Ptr(armsecurity.ThreatsDataSpillage),
							to.Ptr(armsecurity.ThreatsMaliciousInsider)},
						UserImpact: to.Ptr(armsecurity.UserImpactHigh),
						PublishDates: &armsecurity.AssessmentMetadataPropertiesResponsePublishDates{
							GA:     to.Ptr("06/01/2021"),
							Public: to.Ptr("06/01/2021"),
						},
					},
				},
				{
					Name: to.Ptr("ca039e75-a276-4175-aebc-bcd41e4b14b7"),
					Type: to.Ptr("Microsoft.Security/assessmentMetadata"),
					ID:   to.Ptr("/providers/Microsoft.Security/assessmentMetadata/ca039e75-a276-4175-aebc-bcd41e4b14b7"),
					Properties: &armsecurity.AssessmentMetadataPropertiesResponse{
						Description:    to.Ptr("Assessment that my organization created to view our security assessment in Azure Security Center"),
						AssessmentType: to.Ptr(armsecurity.AssessmentTypeCustomerManaged),
						Categories: []*armsecurity.Categories{
							to.Ptr(armsecurity.CategoriesCompute)},
						DisplayName:            to.Ptr("My organization security assessment"),
						ImplementationEffort:   to.Ptr(armsecurity.ImplementationEffortLow),
						RemediationDescription: to.Ptr("Fix it with these remediation instructions"),
						Severity:               to.Ptr(armsecurity.SeverityMedium),
						Threats:                []*armsecurity.Threats{},
						UserImpact:             to.Ptr(armsecurity.UserImpactLow),
						PublishDates: &armsecurity.AssessmentMetadataPropertiesResponsePublishDates{
							GA:     to.Ptr("06/01/2021"),
							Public: to.Ptr("06/01/2021"),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AssessmentMetadataResponseList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AssessmentMetadataResponseList)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/stable/2021-06-01/examples/AssessmentsMetadata/ListAssessmentsMetadata_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAssessmentsMetadata_Get(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/stable/2021-06-01/examples/AssessmentsMetadata/GetAssessmentsMetadata_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get security assessment metadata"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewAssessmentsMetadataClient("<subscription-id>", cred, &options)
	res, err := client.Get(ctx,
		"21300918-b2e3-0346-785f-c77ff57d243b",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/stable/2021-06-01/examples/AssessmentsMetadata/GetAssessmentsMetadata_example.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurity.AssessmentMetadataResponse{
			Name: to.Ptr("21300918-b2e3-0346-785f-c77ff57d243b"),
			Type: to.Ptr("Microsoft.Security/assessmentMetadata"),
			ID:   to.Ptr("/providers/Microsoft.Security/assessmentMetadata/21300918-b2e3-0346-785f-c77ff57d243b"),
			Properties: &armsecurity.AssessmentMetadataPropertiesResponse{
				Description:    to.Ptr("Install an endpoint protection solution on your virtual machines scale sets, to protect them from threats and vulnerabilities."),
				AssessmentType: to.Ptr(armsecurity.AssessmentTypeBuiltIn),
				Categories: []*armsecurity.Categories{
					to.Ptr(armsecurity.CategoriesCompute)},
				DisplayName:            to.Ptr("Install endpoint protection solution on virtual machine scale sets"),
				ImplementationEffort:   to.Ptr(armsecurity.ImplementationEffortLow),
				PolicyDefinitionID:     to.Ptr("/providers/Microsoft.Authorization/policyDefinitions/26a828e1-e88f-464e-bbb3-c134a282b9de"),
				RemediationDescription: to.Ptr("To install an endpoint protection solution: 1.  <a href=\"https://docs.microsoft.com/azure/virtual-machine-scale-sets/virtual-machine-scale-sets-faq#how-do-i-turn-on-antimalware-in-my-virtual-machine-scale-set\">Follow the instructions in How do I turn on antimalware in my virtual machine scale set</a>"),
				Severity:               to.Ptr(armsecurity.SeverityMedium),
				Threats: []*armsecurity.Threats{
					to.Ptr(armsecurity.ThreatsDataExfiltration),
					to.Ptr(armsecurity.ThreatsDataSpillage),
					to.Ptr(armsecurity.ThreatsMaliciousInsider)},
				UserImpact:             to.Ptr(armsecurity.UserImpactLow),
				PlannedDeprecationDate: to.Ptr("03/2022"),
				PublishDates: &armsecurity.AssessmentMetadataPropertiesResponsePublishDates{
					GA:     to.Ptr("06/01/2021"),
					Public: to.Ptr("06/01/2021"),
				},
				Tactics: []*armsecurity.Tactics{
					to.Ptr(armsecurity.TacticsCredentialAccess),
					to.Ptr(armsecurity.TacticsPersistence),
					to.Ptr(armsecurity.TacticsExecution),
					to.Ptr(armsecurity.TacticsDefenseEvasion),
					to.Ptr(armsecurity.TacticsCollection),
					to.Ptr(armsecurity.TacticsDiscovery),
					to.Ptr(armsecurity.TacticsPrivilegeEscalation)},
				Techniques: []*armsecurity.Techniques{
					to.Ptr(armsecurity.TechniquesObfuscatedFilesOrInformation),
					to.Ptr(armsecurity.TechniquesIngressToolTransfer),
					to.Ptr(armsecurity.TechniquesPhishing),
					to.Ptr(armsecurity.TechniquesUserExecution)},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AssessmentMetadataResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AssessmentMetadataResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/stable/2021-06-01/examples/AssessmentsMetadata/GetAssessmentsMetadata_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAssessmentsMetadata_ListBySubscription(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/stable/2021-06-01/examples/AssessmentsMetadata/ListAssessmentsMetadata_subscription_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List security assessment metadata for subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewAssessmentsMetadataClient("0980887d-03d6-408c-9566-532f3456804e", cred, &options)
	pager := client.ListBySubscription(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/security/resource-manager/Microsoft.Security/stable/2021-06-01/examples/AssessmentsMetadata/ListAssessmentsMetadata_subscription_example.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsecurity.AssessmentMetadataResponseList{
			Value: []*armsecurity.AssessmentMetadataResponse{
				{
					Name: to.Ptr("21300918-b2e3-0346-785f-c77ff57d243b"),
					Type: to.Ptr("Microsoft.Security/assessmentMetadata"),
					ID:   to.Ptr("/providers/Microsoft.Security/assessmentMetadata/21300918-b2e3-0346-785f-c77ff57d243b"),
					Properties: &armsecurity.AssessmentMetadataPropertiesResponse{
						Description:    to.Ptr("Install an endpoint protection solution on your virtual machines scale sets, to protect them from threats and vulnerabilities."),
						AssessmentType: to.Ptr(armsecurity.AssessmentTypeBuiltIn),
						Categories: []*armsecurity.Categories{
							to.Ptr(armsecurity.CategoriesCompute)},
						DisplayName:            to.Ptr("Install endpoint protection solution on virtual machine scale sets"),
						ImplementationEffort:   to.Ptr(armsecurity.ImplementationEffortLow),
						PolicyDefinitionID:     to.Ptr("/providers/Microsoft.Authorization/policyDefinitions/26a828e1-e88f-464e-bbb3-c134a282b9de"),
						RemediationDescription: to.Ptr("To install an endpoint protection solution: 1.  <a href=\"https://docs.microsoft.com/azure/virtual-machine-scale-sets/virtual-machine-scale-sets-faq#how-do-i-turn-on-antimalware-in-my-virtual-machine-scale-set\">Follow the instructions in How do I turn on antimalware in my virtual machine scale set</a>"),
						Severity:               to.Ptr(armsecurity.SeverityMedium),
						Threats: []*armsecurity.Threats{
							to.Ptr(armsecurity.ThreatsDataExfiltration),
							to.Ptr(armsecurity.ThreatsDataSpillage),
							to.Ptr(armsecurity.ThreatsMaliciousInsider)},
						UserImpact:             to.Ptr(armsecurity.UserImpactLow),
						PlannedDeprecationDate: to.Ptr("03/2022"),
						PublishDates: &armsecurity.AssessmentMetadataPropertiesResponsePublishDates{
							GA:     to.Ptr("06/01/2021"),
							Public: to.Ptr("06/01/2021"),
						},
						Tactics: []*armsecurity.Tactics{
							to.Ptr(armsecurity.TacticsCredentialAccess),
							to.Ptr(armsecurity.TacticsPersistence),
							to.Ptr(armsecurity.TacticsExecution),
							to.Ptr(armsecurity.TacticsDefenseEvasion),
							to.Ptr(armsecurity.TacticsCollection),
							to.Ptr(armsecurity.TacticsDiscovery),
							to.Ptr(armsecurity.TacticsPrivilegeEscalation)},
						Techniques: []*armsecurity.Techniques{
							to.Ptr(armsecurity.TechniquesObfuscatedFilesOrInformation),
							to.Ptr(armsecurity.TechniquesIngressToolTransfer),
							to.Ptr(armsecurity.TechniquesPhishing),
							to.Ptr(armsecurity.TechniquesUserExecution)},
					},
				},
				{
					Name: to.Ptr("bc303248-3d14-44c2-96a0-55f5c326b5fe"),
					Type: to.Ptr("Microsoft.Security/assessmentMetadata"),
					ID:   to.Ptr("/providers/Microsoft.Security/assessmentMetadata/bc303248-3d14-44c2-96a0-55f5c326b5fe"),
					Properties: &armsecurity.AssessmentMetadataPropertiesResponse{
						Description:    to.Ptr("Open remote management ports expose your VM to a high level of risk from internet-based attacks that attempt to brute force credentials to gain admin access to the machine."),
						AssessmentType: to.Ptr(armsecurity.AssessmentTypeCustomPolicy),
						Categories: []*armsecurity.Categories{
							to.Ptr(armsecurity.CategoriesNetworking)},
						DisplayName:            to.Ptr("Close management ports on your virtual machines"),
						ImplementationEffort:   to.Ptr(armsecurity.ImplementationEffortLow),
						PolicyDefinitionID:     to.Ptr("/providers/Microsoft.Authorization/policyDefinitions/22730e10-96f6-4aac-ad84-9383d35b5917"),
						Preview:                to.Ptr(true),
						RemediationDescription: to.Ptr("We recommend that you edit the inbound rules of the below virtual machines to restrict access to specific source ranges.<br>To restrict the access to your virtual machines: 1. Click on a VM from the list below 2. At the 'Networking' blade, click on each of the rules that allow management ports (e.g. RDP-3389, WINRM-5985, SSH-22) 3. Change the 'Action' property to 'Deny' 4. Click 'Save'"),
						Severity:               to.Ptr(armsecurity.SeverityMedium),
						Threats: []*armsecurity.Threats{
							to.Ptr(armsecurity.ThreatsDataExfiltration),
							to.Ptr(armsecurity.ThreatsDataSpillage),
							to.Ptr(armsecurity.ThreatsMaliciousInsider)},
						UserImpact: to.Ptr(armsecurity.UserImpactHigh),
						PublishDates: &armsecurity.AssessmentMetadataPropertiesResponsePublishDates{
							GA:     to.Ptr("06/01/2021"),
							Public: to.Ptr("06/01/2021"),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AssessmentMetadataResponseList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AssessmentMetadataResponseList)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/stable/2021-06-01/examples/AssessmentsMetadata/ListAssessmentsMetadata_subscription_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAssessmentsMetadata_GetInSubscription(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/stable/2021-06-01/examples/AssessmentsMetadata/GetAssessmentsMetadata_subscription_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get security assessment metadata for subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewAssessmentsMetadataClient("0980887d-03d6-408c-9566-532f3456804e", cred, &options)
	res, err := client.GetInSubscription(ctx,
		"21300918-b2e3-0346-785f-c77ff57d243b",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/stable/2021-06-01/examples/AssessmentsMetadata/GetAssessmentsMetadata_subscription_example.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurity.AssessmentMetadataResponse{
			Name: to.Ptr("21300918-b2e3-0346-785f-c77ff57d243b"),
			Type: to.Ptr("Microsoft.Security/assessmentMetadata"),
			ID:   to.Ptr("/providers/Microsoft.Security/assessmentMetadata/21300918-b2e3-0346-785f-c77ff57d243b"),
			Properties: &armsecurity.AssessmentMetadataPropertiesResponse{
				Description:    to.Ptr("Install an endpoint protection solution on your virtual machines scale sets, to protect them from threats and vulnerabilities."),
				AssessmentType: to.Ptr(armsecurity.AssessmentTypeBuiltIn),
				Categories: []*armsecurity.Categories{
					to.Ptr(armsecurity.CategoriesCompute)},
				DisplayName:            to.Ptr("Install endpoint protection solution on virtual machine scale sets"),
				ImplementationEffort:   to.Ptr(armsecurity.ImplementationEffortLow),
				PolicyDefinitionID:     to.Ptr("/providers/Microsoft.Authorization/policyDefinitions/26a828e1-e88f-464e-bbb3-c134a282b9de"),
				RemediationDescription: to.Ptr("To install an endpoint protection solution: 1.  <a href=\"https://docs.microsoft.com/azure/virtual-machine-scale-sets/virtual-machine-scale-sets-faq#how-do-i-turn-on-antimalware-in-my-virtual-machine-scale-set\">Follow the instructions in How do I turn on antimalware in my virtual machine scale set</a>"),
				Severity:               to.Ptr(armsecurity.SeverityMedium),
				Threats: []*armsecurity.Threats{
					to.Ptr(armsecurity.ThreatsDataExfiltration),
					to.Ptr(armsecurity.ThreatsDataSpillage),
					to.Ptr(armsecurity.ThreatsMaliciousInsider)},
				UserImpact:             to.Ptr(armsecurity.UserImpactLow),
				PlannedDeprecationDate: to.Ptr("03/2022"),
				PublishDates: &armsecurity.AssessmentMetadataPropertiesResponsePublishDates{
					GA:     to.Ptr("06/01/2021"),
					Public: to.Ptr("06/01/2021"),
				},
				Tactics: []*armsecurity.Tactics{
					to.Ptr(armsecurity.TacticsCredentialAccess),
					to.Ptr(armsecurity.TacticsPersistence),
					to.Ptr(armsecurity.TacticsExecution),
					to.Ptr(armsecurity.TacticsDefenseEvasion),
					to.Ptr(armsecurity.TacticsCollection),
					to.Ptr(armsecurity.TacticsDiscovery),
					to.Ptr(armsecurity.TacticsPrivilegeEscalation)},
				Techniques: []*armsecurity.Techniques{
					to.Ptr(armsecurity.TechniquesObfuscatedFilesOrInformation),
					to.Ptr(armsecurity.TechniquesIngressToolTransfer),
					to.Ptr(armsecurity.TechniquesPhishing),
					to.Ptr(armsecurity.TechniquesUserExecution)},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AssessmentMetadataResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AssessmentMetadataResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/stable/2021-06-01/examples/AssessmentsMetadata/GetAssessmentsMetadata_subscription_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAssessmentsMetadata_CreateInSubscription(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/stable/2021-06-01/examples/AssessmentsMetadata/CreateAssessmentsMetadata_subscription_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create security assessment metadata for subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewAssessmentsMetadataClient("0980887d-03d6-408c-9566-532f3456804e", cred, &options)
	res, err := client.CreateInSubscription(ctx,
		"ca039e75-a276-4175-aebc-bcd41e4b14b7",
		armsecurity.AssessmentMetadataResponse{
			Properties: &armsecurity.AssessmentMetadataPropertiesResponse{
				Description:    to.Ptr("Install an endpoint protection solution on your virtual machines scale sets, to protect them from threats and vulnerabilities."),
				AssessmentType: to.Ptr(armsecurity.AssessmentTypeCustomerManaged),
				Categories: []*armsecurity.Categories{
					to.Ptr(armsecurity.CategoriesCompute)},
				DisplayName:            to.Ptr("Install endpoint protection solution on virtual machine scale sets"),
				ImplementationEffort:   to.Ptr(armsecurity.ImplementationEffortLow),
				RemediationDescription: to.Ptr("To install an endpoint protection solution: 1.  <a href=\"https://docs.microsoft.com/azure/virtual-machine-scale-sets/virtual-machine-scale-sets-faq#how-do-i-turn-on-antimalware-in-my-virtual-machine-scale-set\">Follow the instructions in How do I turn on antimalware in my virtual machine scale set</a>"),
				Severity:               to.Ptr(armsecurity.SeverityMedium),
				Threats: []*armsecurity.Threats{
					to.Ptr(armsecurity.ThreatsDataExfiltration),
					to.Ptr(armsecurity.ThreatsDataSpillage),
					to.Ptr(armsecurity.ThreatsMaliciousInsider)},
				UserImpact: to.Ptr(armsecurity.UserImpactLow),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/stable/2021-06-01/examples/AssessmentsMetadata/CreateAssessmentsMetadata_subscription_example.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurity.AssessmentMetadataResponse{
			Name: to.Ptr("ca039e75-a276-4175-aebc-bcd41e4b14b7"),
			Type: to.Ptr("Microsoft.Security/assessmentMetadata"),
			ID:   to.Ptr("/providers/Microsoft.Security/assessmentMetadata/ca039e75-a276-4175-aebc-bcd41e4b14b7"),
			Properties: &armsecurity.AssessmentMetadataPropertiesResponse{
				Description:    to.Ptr("Assessment that my organization created to view our security assessment in Azure Security Center"),
				AssessmentType: to.Ptr(armsecurity.AssessmentTypeCustomerManaged),
				Categories: []*armsecurity.Categories{
					to.Ptr(armsecurity.CategoriesCompute)},
				DisplayName:            to.Ptr("My organization security assessment"),
				ImplementationEffort:   to.Ptr(armsecurity.ImplementationEffortLow),
				RemediationDescription: to.Ptr("Fix it with these remediation instructions"),
				Severity:               to.Ptr(armsecurity.SeverityMedium),
				Threats: []*armsecurity.Threats{
					to.Ptr(armsecurity.ThreatsDataExfiltration),
					to.Ptr(armsecurity.ThreatsDataSpillage),
					to.Ptr(armsecurity.ThreatsMaliciousInsider)},
				UserImpact: to.Ptr(armsecurity.UserImpactLow),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AssessmentMetadataResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AssessmentMetadataResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/stable/2021-06-01/examples/AssessmentsMetadata/CreateAssessmentsMetadata_subscription_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAssessmentsMetadata_DeleteInSubscription(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/stable/2021-06-01/examples/AssessmentsMetadata/DeleteAssessmentsMetadata_subscription_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a security assessment metadata for subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewAssessmentsMetadataClient("0980887d-03d6-408c-9566-532f3456804e", cred, &options)
	_, err := client.DeleteInSubscription(ctx,
		"ca039e75-a276-4175-aebc-bcd41e4b14b7",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/stable/2021-06-01/examples/AssessmentsMetadata/DeleteAssessmentsMetadata_subscription_example.json: %v", err)
	}
}

func TestAssessments_List(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/stable/2021-06-01/examples/Assessments/ListAssessments_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List security assessments"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewAssessmentsClient(cred, &options)
	pager := client.List("subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/security/resource-manager/Microsoft.Security/stable/2021-06-01/examples/Assessments/ListAssessments_example.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsecurity.AssessmentList{
			Value: []*armsecurity.AssessmentResponse{
				{
					Name: to.Ptr("21300918-b2e3-0346-785f-c77ff57d243b"),
					Type: to.Ptr("Microsoft.Security/assessments"),
					ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/myRg/providers/Microsoft.Compute/virtualMachineScaleSets/vmss1/providers/Microsoft.Security/assessments/21300918-b2e3-0346-785f-c77ff57d243b"),
					Properties: &armsecurity.AssessmentPropertiesResponse{
						DisplayName: to.Ptr("Install endpoint protection solution on virtual machine scale sets"),
						ResourceDetails: &armsecurity.AzureResourceDetails{
							Source: to.Ptr(armsecurity.SourceAzure),
							ID:     to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/myRg/providers/Microsoft.Compute/virtualMachineScaleSets/vmss1"),
						},
						Status: &armsecurity.AssessmentStatusResponse{
							Code:                to.Ptr(armsecurity.AssessmentStatusCodeHealthy),
							FirstEvaluationDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-12T09:07:18.6759138Z"); return t }()),
							StatusChangeDate:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-12T09:07:18.6759138Z"); return t }()),
						},
					},
				},
				{
					Name: to.Ptr("21300918-b2e3-0346-785f-c77ff57d243b"),
					Type: to.Ptr("Microsoft.Security/assessments"),
					ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/myRg/providers/Microsoft.Compute/virtualMachineScaleSets/vmss2/providers/Microsoft.Security/assessments/21300918-b2e3-0346-785f-c77ff57d243b"),
					Properties: &armsecurity.AssessmentPropertiesResponse{
						AdditionalData: map[string]*string{
							"linkedWorkspaceId": to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myLaWorkspace"),
						},
						DisplayName: to.Ptr("Install endpoint protection solution on virtual machine scale sets"),
						ResourceDetails: &armsecurity.AzureResourceDetails{
							Source: to.Ptr(armsecurity.SourceAzure),
							ID:     to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/myRg/providers/Microsoft.Compute/virtualMachineScaleSets/vmss2"),
						},
						Status: &armsecurity.AssessmentStatusResponse{
							Description:         to.Ptr("The effective policy for the assessment was evaluated to off - use Microsoft.Authorization/policyAssignments to turn this assessment on"),
							Cause:               to.Ptr("OffByPolicy"),
							Code:                to.Ptr(armsecurity.AssessmentStatusCodeNotApplicable),
							FirstEvaluationDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-12T09:07:18.6759138Z"); return t }()),
							StatusChangeDate:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-12T09:07:18.6759138Z"); return t }()),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AssessmentList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AssessmentList)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/stable/2021-06-01/examples/Assessments/ListAssessments_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAssessments_Get(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/stable/2021-06-01/examples/Assessments/GetAssessment_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get security recommendation task from security data location"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewAssessmentsClient(cred, &options)
	res, err := client.Get(ctx,
		"subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/myRg/providers/Microsoft.Compute/virtualMachineScaleSets/vmss2",
		"21300918-b2e3-0346-785f-c77ff57d243b",
		&armsecurity.AssessmentsClientGetOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/stable/2021-06-01/examples/Assessments/GetAssessment_example.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurity.AssessmentResponse{
			Name: to.Ptr("21300918-b2e3-0346-785f-c77ff57d243b"),
			Type: to.Ptr("Microsoft.Security/assessments"),
			ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/myRg/providers/Microsoft.Compute/virtualMachineScaleSets/vmss2/providers/Microsoft.Security/assessments/21300918-b2e3-0346-785f-c77ff57d243b"),
			Properties: &armsecurity.AssessmentPropertiesResponse{
				AdditionalData: map[string]*string{
					"linkedWorkspaceId": to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myLaWorkspace"),
				},
				DisplayName: to.Ptr("Install endpoint protection solution on virtual machine scale sets"),
				ResourceDetails: &armsecurity.AzureResourceDetails{
					Source: to.Ptr(armsecurity.SourceAzure),
					ID:     to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/myRg/providers/Microsoft.Compute/virtualMachineScaleSets/vmss2"),
				},
				Status: &armsecurity.AssessmentStatusResponse{
					Description:         to.Ptr("The effective policy for the assessment was evaluated to off - use Microsoft.Authorization/policyAssignments to turn this assessment on"),
					Cause:               to.Ptr("OffByPolicy"),
					Code:                to.Ptr(armsecurity.AssessmentStatusCodeNotApplicable),
					FirstEvaluationDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-12T09:07:18.6759138Z"); return t }()),
					StatusChangeDate:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-12T09:07:18.6759138Z"); return t }()),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AssessmentResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AssessmentResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/stable/2021-06-01/examples/Assessments/GetAssessment_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/security/resource-manager/Microsoft.Security/stable/2021-06-01/examples/Assessments/GetAssessmentWithExpand_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get security recommendation task from security data location with expand parameter"},
	})
	client = armsecurity.NewAssessmentsClient(cred, &options)
	res, err = client.Get(ctx,
		"subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/myRg/providers/Microsoft.Compute/virtualMachineScaleSets/vmss2",
		"21300918-b2e3-0346-785f-c77ff57d243b",
		&armsecurity.AssessmentsClientGetOptions{Expand: to.Ptr(armsecurity.ExpandEnumLinks)})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/stable/2021-06-01/examples/Assessments/GetAssessmentWithExpand_example.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurity.AssessmentResponse{
			Name: to.Ptr("21300918-b2e3-0346-785f-c77ff57d243b"),
			Type: to.Ptr("Microsoft.Security/assessments"),
			ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/myRg/providers/Microsoft.Compute/virtualMachineScaleSets/vmss2/providers/Microsoft.Security/assessments/21300918-b2e3-0346-785f-c77ff57d243b"),
			Properties: &armsecurity.AssessmentPropertiesResponse{
				AdditionalData: map[string]*string{
					"linkedWorkspaceId": to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/myRg/providers/Microsoft.OperationalInsights/workspaces/myLaWorkspace"),
				},
				DisplayName: to.Ptr("Install endpoint protection solution on virtual machine scale sets"),
				Links: &armsecurity.AssessmentLinks{
					AzurePortalURI: to.Ptr("https://www.portal.azure.com/?fea#blade/Microsoft_Azure_Security/RecommendationsBlade/assessmentKey/21300918-b2e3-0346-785f-c77ff57d243b"),
				},
				ResourceDetails: &armsecurity.AzureResourceDetails{
					Source: to.Ptr(armsecurity.SourceAzure),
					ID:     to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/myRg/providers/Microsoft.Compute/virtualMachineScaleSets/vmss2"),
				},
				Status: &armsecurity.AssessmentStatusResponse{
					Description:         to.Ptr("The effective policy for the assessment was evaluated to off - use Microsoft.Authorization/policyAssignments to turn this assessment on"),
					Cause:               to.Ptr("OffByPolicy"),
					Code:                to.Ptr(armsecurity.AssessmentStatusCodeNotApplicable),
					FirstEvaluationDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-12T09:07:18.6759138Z"); return t }()),
					StatusChangeDate:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-04-12T09:07:18.6759138Z"); return t }()),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AssessmentResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AssessmentResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/stable/2021-06-01/examples/Assessments/GetAssessmentWithExpand_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAssessments_CreateOrUpdate(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/stable/2021-06-01/examples/Assessments/PutAssessment_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create security recommendation task on a resource"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewAssessmentsClient(cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/myRg/providers/Microsoft.Compute/virtualMachineScaleSets/vmss2",
		"8bb8be0a-6010-4789-812f-e4d661c4ed0e",
		armsecurity.Assessment{
			Properties: &armsecurity.AssessmentProperties{
				ResourceDetails: &armsecurity.AzureResourceDetails{
					Source: to.Ptr(armsecurity.SourceAzure),
				},
				Status: &armsecurity.AssessmentStatus{
					Code: to.Ptr(armsecurity.AssessmentStatusCodeHealthy),
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/stable/2021-06-01/examples/Assessments/PutAssessment_example.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurity.AssessmentResponse{
			Name: to.Ptr("8bb8be0a-6010-4789-812f-e4d661c4ed0e"),
			Type: to.Ptr("Microsoft.Security/assessments"),
			ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/myRg/providers/Microsoft.Compute/virtualMachineScaleSets/vmss1/providers/Microsoft.Security/assessments/8bb8be0a-6010-4789-812f-e4d661c4ed0e"),
			Properties: &armsecurity.AssessmentPropertiesResponse{
				DisplayName: to.Ptr("Install internal agent on VM"),
				ResourceDetails: &armsecurity.AzureResourceDetails{
					Source: to.Ptr(armsecurity.SourceAzure),
					ID:     to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/myRg/providers/Microsoft.Compute/virtualMachineScaleSets/vmss1/providers/Microsoft.Security/assessments/8bb8be0a-6010-4789-812f-e4d661c4ed0e"),
				},
				Status: &armsecurity.AssessmentStatusResponse{
					Code: to.Ptr(armsecurity.AssessmentStatusCodeHealthy),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AssessmentResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AssessmentResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/stable/2021-06-01/examples/Assessments/PutAssessment_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAssessments_Delete(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/stable/2021-06-01/examples/Assessments/DeleteAssessment_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a security recommendation task on a resource"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewAssessmentsClient(cred, &options)
	_, err := client.Delete(ctx,
		"subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/myRg/providers/Microsoft.Compute/virtualMachineScaleSets/vmss2",
		"8bb8be0a-6010-4789-812f-e4d661c4ed0e",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/stable/2021-06-01/examples/Assessments/DeleteAssessment_example.json: %v", err)
	}
}

func TestAdaptiveApplicationControls_List(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/stable/2020-01-01/examples/ApplicationWhitelistings/GetAdaptiveApplicationControlsSubscription_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets a list of application control groups of machines for the subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewAdaptiveApplicationControlsClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23",
		"<asc-location>", cred, &options)
	res, err := client.List(ctx,
		&armsecurity.AdaptiveApplicationControlsClientListOptions{IncludePathRecommendations: to.Ptr(true),
			Summary: to.Ptr(false),
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/stable/2020-01-01/examples/ApplicationWhitelistings/GetAdaptiveApplicationControlsSubscription_example.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurity.AdaptiveApplicationControlGroups{
			Value: []*armsecurity.AdaptiveApplicationControlGroup{
				{
					Location: to.Ptr("centralus"),
					Name:     to.Ptr("AMIT-VA"),
					Type:     to.Ptr("Microsoft.Security/applicationWhitelistings"),
					ID:       to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/locations/centralus/applicationWhitelistings/AMIT-VA"),
					Properties: &armsecurity.AdaptiveApplicationControlGroupData{
						ConfigurationStatus: to.Ptr(armsecurity.ConfigurationStatusConfigured),
						EnforcementMode:     to.Ptr(armsecurity.EnforcementModeAudit),
						Issues:              []*armsecurity.AdaptiveApplicationControlIssueSummary{},
						PathRecommendations: []*armsecurity.PathRecommendation{
							{
								Type:                to.Ptr(armsecurity.RecommendationType("File")),
								Path:                to.Ptr("C:\\Windows\\SoftwareDistribution\\Download\\Install\\Windows-KB890830-x64-V5.53-delta.exe"),
								Action:              to.Ptr(armsecurity.RecommendationActionRemove),
								Common:              to.Ptr(true),
								ConfigurationStatus: to.Ptr(armsecurity.ConfigurationStatusNoStatus),
								FileType:            to.Ptr(armsecurity.FileTypeExe),
								UserSids: []*string{
									to.Ptr("S-1-5-18")},
								Usernames: []*armsecurity.UserRecommendation{
									{
										RecommendationAction: to.Ptr(armsecurity.RecommendationActionRecommended),
										Username:             to.Ptr("LOCAL SYSTEM"),
									}},
							},
							{
								Type:                to.Ptr(armsecurity.RecommendationType("File")),
								Path:                to.Ptr("C:\\WindowsAzure\\GuestAgent_2.7.1198.822\\CollectGuestLogs.exe"),
								Action:              to.Ptr(armsecurity.RecommendationActionRemove),
								Common:              to.Ptr(true),
								ConfigurationStatus: to.Ptr(armsecurity.ConfigurationStatusNoStatus),
								FileType:            to.Ptr(armsecurity.FileTypeExe),
								UserSids: []*string{
									to.Ptr("S-1-5-18")},
								Usernames: []*armsecurity.UserRecommendation{
									{
										RecommendationAction: to.Ptr(armsecurity.RecommendationActionRecommended),
										Username:             to.Ptr("LOCAL SYSTEM"),
									}},
							},
							{
								Type:                to.Ptr(armsecurity.RecommendationType("PublisherSignature")),
								Path:                to.Ptr("C:\\Windows\\System32\\wbem\\WmiPrvSE.exe"),
								Action:              to.Ptr(armsecurity.RecommendationActionRecommended),
								Common:              to.Ptr(true),
								ConfigurationStatus: to.Ptr(armsecurity.ConfigurationStatusConfigured),
								FileType:            to.Ptr(armsecurity.FileTypeExe),
								PublisherInfo: &armsecurity.PublisherInfo{
									BinaryName:    to.Ptr("*"),
									ProductName:   to.Ptr("*"),
									PublisherName: to.Ptr("O=MICROSOFT CORPORATION, L=REDMOND, S=WASHINGTON, C=US"),
									Version:       to.Ptr("0.0.0.0"),
								},
								UserSids: []*string{
									to.Ptr("S-1-5-18"),
									to.Ptr("S-1-1-0")},
								Usernames: []*armsecurity.UserRecommendation{
									{
										RecommendationAction: to.Ptr(armsecurity.RecommendationActionRecommended),
										Username:             to.Ptr("Everyone"),
									}},
							},
							{
								Type:                to.Ptr(armsecurity.RecommendationType("File")),
								Path:                to.Ptr("%OSDRIVE%\\WINDOWSAZURE\\SECAGENT\\WASECAGENTPROV.EXE"),
								Action:              to.Ptr(armsecurity.RecommendationActionRecommended),
								Common:              to.Ptr(true),
								ConfigurationStatus: to.Ptr(armsecurity.ConfigurationStatusConfigured),
								FileType:            to.Ptr(armsecurity.FileTypeExe),
								UserSids: []*string{
									to.Ptr("S-1-1-0")},
								Usernames: []*armsecurity.UserRecommendation{
									{
										RecommendationAction: to.Ptr(armsecurity.RecommendationActionRecommended),
										Username:             to.Ptr("Everyone"),
									}},
							}},
						ProtectionMode: &armsecurity.ProtectionMode{
							Exe:    to.Ptr(armsecurity.EnforcementModeAudit),
							Msi:    to.Ptr(armsecurity.EnforcementModeAudit),
							Script: to.Ptr(armsecurity.EnforcementModeNone),
						},
						RecommendationStatus: to.Ptr(armsecurity.RecommendationStatusRecommended),
						SourceSystem:         to.Ptr(armsecurity.SourceSystemAzureAppLocker),
						VMRecommendations: []*armsecurity.VMRecommendation{
							{
								ConfigurationStatus:  to.Ptr(armsecurity.ConfigurationStatusConfigured),
								EnforcementSupport:   to.Ptr(armsecurity.EnforcementSupportSupported),
								RecommendationAction: to.Ptr(armsecurity.RecommendationActionRecommended),
								ResourceID:           to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourcegroups/erelh-dsc/providers/microsoft.compute/virtualmachines/erelh-14011"),
							},
							{
								ConfigurationStatus:  to.Ptr(armsecurity.ConfigurationStatusConfigured),
								EnforcementSupport:   to.Ptr(armsecurity.EnforcementSupportSupported),
								RecommendationAction: to.Ptr(armsecurity.RecommendationActionRecommended),
								ResourceID:           to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourcegroups/amit-va/providers/microsoft.compute/virtualmachines/ream-test"),
							},
							{
								ConfigurationStatus:  to.Ptr(armsecurity.ConfigurationStatusConfigured),
								EnforcementSupport:   to.Ptr(armsecurity.EnforcementSupportSupported),
								RecommendationAction: to.Ptr(armsecurity.RecommendationActionRecommended),
								ResourceID:           to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourcegroups/v-arrikl-scheduledapps/providers/microsoft.compute/virtualmachines/v-arrikl-14060"),
							}},
					},
				},
				{
					Location: to.Ptr("centralus"),
					Name:     to.Ptr("ERELGROUP1"),
					Type:     to.Ptr("Microsoft.Security/applicationWhitelistings"),
					ID:       to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/locations/centralus/applicationWhitelistings/ERELGROUP1"),
					Properties: &armsecurity.AdaptiveApplicationControlGroupData{
						ConfigurationStatus: to.Ptr(armsecurity.ConfigurationStatusConfigured),
						EnforcementMode:     to.Ptr(armsecurity.EnforcementModeAudit),
						Issues:              []*armsecurity.AdaptiveApplicationControlIssueSummary{},
						PathRecommendations: []*armsecurity.PathRecommendation{
							{
								Type:                to.Ptr(armsecurity.RecommendationType("PublisherSignature")),
								Path:                to.Ptr("[Exe] O=MICROSOFT CORPORATION, L=REDMOND, S=WASHINGTON, C=US\\*\\*\\0.0.0.0"),
								Action:              to.Ptr(armsecurity.RecommendationActionRecommended),
								Common:              to.Ptr(true),
								ConfigurationStatus: to.Ptr(armsecurity.ConfigurationStatusConfigured),
								FileType:            to.Ptr(armsecurity.FileTypeExe),
								PublisherInfo: &armsecurity.PublisherInfo{
									BinaryName:    to.Ptr("*"),
									ProductName:   to.Ptr("*"),
									PublisherName: to.Ptr("O=MICROSOFT CORPORATION, L=REDMOND, S=WASHINGTON, C=US"),
									Version:       to.Ptr("0.0.0.0"),
								},
								UserSids: []*string{
									to.Ptr("S-1-1-0")},
								Usernames: []*armsecurity.UserRecommendation{
									{
										RecommendationAction: to.Ptr(armsecurity.RecommendationActionRecommended),
										Username:             to.Ptr("Everyone"),
									}},
							}},
						ProtectionMode: &armsecurity.ProtectionMode{
							Exe:    to.Ptr(armsecurity.EnforcementModeAudit),
							Msi:    to.Ptr(armsecurity.EnforcementModeNone),
							Script: to.Ptr(armsecurity.EnforcementModeNone),
						},
						RecommendationStatus: to.Ptr(armsecurity.RecommendationStatusRecommended),
						SourceSystem:         to.Ptr(armsecurity.SourceSystemAzureAppLocker),
						VMRecommendations: []*armsecurity.VMRecommendation{
							{
								ConfigurationStatus:  to.Ptr(armsecurity.ConfigurationStatusConfigured),
								EnforcementSupport:   to.Ptr(armsecurity.EnforcementSupportNotSupported),
								RecommendationAction: to.Ptr(armsecurity.RecommendationActionRecommended),
								ResourceID:           to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourcegroups/erelh-stable/providers/microsoft.compute/virtualmachines/erelh-16090"),
							}},
					},
				},
				{
					Location: to.Ptr("centralus"),
					Name:     to.Ptr("GROUP1"),
					Type:     to.Ptr("Microsoft.Security/applicationWhitelistings"),
					ID:       to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/locations/centralus/applicationWhitelistings/GROUP1"),
					Properties: &armsecurity.AdaptiveApplicationControlGroupData{
						ConfigurationStatus: to.Ptr(armsecurity.ConfigurationStatusConfigured),
						EnforcementMode:     to.Ptr(armsecurity.EnforcementModeAudit),
						Issues:              []*armsecurity.AdaptiveApplicationControlIssueSummary{},
						PathRecommendations: []*armsecurity.PathRecommendation{
							{
								Type:                to.Ptr(armsecurity.RecommendationType("PublisherSignature")),
								Path:                to.Ptr("[Exe] O=MICROSOFT CORPORATION, L=REDMOND, S=WASHINGTON, C=US\\*\\*\\0.0.0.0"),
								Action:              to.Ptr(armsecurity.RecommendationActionRecommended),
								Common:              to.Ptr(true),
								ConfigurationStatus: to.Ptr(armsecurity.ConfigurationStatusConfigured),
								FileType:            to.Ptr(armsecurity.FileTypeExe),
								PublisherInfo: &armsecurity.PublisherInfo{
									BinaryName:    to.Ptr("*"),
									ProductName:   to.Ptr("*"),
									PublisherName: to.Ptr("O=MICROSOFT CORPORATION, L=REDMOND, S=WASHINGTON, C=US"),
									Version:       to.Ptr("0.0.0.0"),
								},
								UserSids: []*string{
									to.Ptr("S-1-1-0")},
								Usernames: []*armsecurity.UserRecommendation{
									{
										RecommendationAction: to.Ptr(armsecurity.RecommendationActionRecommended),
										Username:             to.Ptr("Everyone"),
									}},
							},
							{
								Type:                to.Ptr(armsecurity.RecommendationType("ProductSignature")),
								Path:                to.Ptr("%OSDRIVE%\\WINDOWSAZURE\\SECAGENT\\WASECAGENTPROV.EXE"),
								Action:              to.Ptr(armsecurity.RecommendationActionRecommended),
								Common:              to.Ptr(true),
								ConfigurationStatus: to.Ptr(armsecurity.ConfigurationStatusConfigured),
								FileType:            to.Ptr(armsecurity.FileTypeExe),
								PublisherInfo: &armsecurity.PublisherInfo{
									BinaryName:    to.Ptr("*"),
									ProductName:   to.Ptr("MICROSOFT® COREXT"),
									PublisherName: to.Ptr("CN=MICROSOFT AZURE DEPENDENCY CODE SIGN"),
									Version:       to.Ptr("0.0.0.0"),
								},
								UserSids: []*string{
									to.Ptr("S-1-1-0")},
								Usernames: []*armsecurity.UserRecommendation{
									{
										RecommendationAction: to.Ptr(armsecurity.RecommendationActionRecommended),
										Username:             to.Ptr("NT AUTHORITY\\SYSTEM"),
									}},
							},
							{
								Type:                to.Ptr(armsecurity.RecommendationType("PublisherSignature")),
								Path:                to.Ptr("%PROGRAMFILES%\\RAPID7\\INSIGHT AGENT\\COMPONENTS\\INSIGHT_AGENT\\2.6.7.9\\GET_PROXY.EXE"),
								Action:              to.Ptr(armsecurity.RecommendationActionRecommended),
								Common:              to.Ptr(true),
								ConfigurationStatus: to.Ptr(armsecurity.ConfigurationStatusConfigured),
								FileType:            to.Ptr(armsecurity.FileTypeExe),
								PublisherInfo: &armsecurity.PublisherInfo{
									BinaryName:    to.Ptr("*"),
									ProductName:   to.Ptr("*"),
									PublisherName: to.Ptr("O=RAPID7 LLC, L=BOSTON, S=MASSACHUSETTS, C=US"),
									Version:       to.Ptr("0.0.0.0"),
								},
								UserSids: []*string{
									to.Ptr("S-1-1-0")},
								Usernames: []*armsecurity.UserRecommendation{
									{
										RecommendationAction: to.Ptr(armsecurity.RecommendationActionRecommended),
										Username:             to.Ptr("NT AUTHORITY\\SYSTEM"),
									}},
							},
							{
								Type:                to.Ptr(armsecurity.RecommendationType("ProductSignature")),
								Path:                to.Ptr("%PROGRAMFILES%\\GOOGLE\\CHROME\\APPLICATION\\CHROME.EXE"),
								Action:              to.Ptr(armsecurity.RecommendationActionRecommended),
								Common:              to.Ptr(true),
								ConfigurationStatus: to.Ptr(armsecurity.ConfigurationStatusConfigured),
								FileType:            to.Ptr(armsecurity.FileTypeExe),
								PublisherInfo: &armsecurity.PublisherInfo{
									BinaryName:    to.Ptr("*"),
									ProductName:   to.Ptr("GOOGLE CHROME"),
									PublisherName: to.Ptr("O=GOOGLE LLC, L=MOUNTAIN VIEW, S=CA, C=US"),
									Version:       to.Ptr("0.0.0.0"),
								},
								UserSids: []*string{
									to.Ptr("S-1-1-0")},
								Usernames: []*armsecurity.UserRecommendation{
									{
										RecommendationAction: to.Ptr(armsecurity.RecommendationActionRecommended),
										Username:             to.Ptr("NT AUTHORITY\\SYSTEM"),
									}},
							},
							{
								Type:                to.Ptr(armsecurity.RecommendationType("ProductSignature")),
								Path:                to.Ptr("O=GOOGLE INC, L=MOUNTAIN VIEW, S=CALIFORNIA, C=US\\GOOGLE UPDATE\\*\\0.0.0.0"),
								Action:              to.Ptr(armsecurity.RecommendationActionRecommended),
								Common:              to.Ptr(true),
								ConfigurationStatus: to.Ptr(armsecurity.ConfigurationStatusConfigured),
								FileType:            to.Ptr(armsecurity.FileTypeExe),
								PublisherInfo: &armsecurity.PublisherInfo{
									BinaryName:    to.Ptr("*"),
									ProductName:   to.Ptr("GOOGLE UPDATE"),
									PublisherName: to.Ptr("O=GOOGLE INC, L=MOUNTAIN VIEW, S=CALIFORNIA, C=US"),
									Version:       to.Ptr("0.0.0.0"),
								},
								UserSids: []*string{
									to.Ptr("S-1-1-0")},
								Usernames: []*armsecurity.UserRecommendation{
									{
										RecommendationAction: to.Ptr(armsecurity.RecommendationActionRecommended),
										Username:             to.Ptr("NT AUTHORITY\\SYSTEM"),
									}},
							}},
						ProtectionMode: &armsecurity.ProtectionMode{
							Exe:    to.Ptr(armsecurity.EnforcementModeAudit),
							Msi:    to.Ptr(armsecurity.EnforcementModeNone),
							Script: to.Ptr(armsecurity.EnforcementModeNone),
						},
						RecommendationStatus: to.Ptr(armsecurity.RecommendationStatusRecommended),
						SourceSystem:         to.Ptr(armsecurity.SourceSystemAzureAppLocker),
						VMRecommendations: []*armsecurity.VMRecommendation{
							{
								ConfigurationStatus:  to.Ptr(armsecurity.ConfigurationStatusConfigured),
								EnforcementSupport:   to.Ptr(armsecurity.EnforcementSupportSupported),
								RecommendationAction: to.Ptr(armsecurity.RecommendationActionRecommended),
								ResourceID:           to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourcegroups/talk-va/providers/microsoft.compute/virtualmachines/tal-win-vm"),
							},
							{
								ConfigurationStatus:  to.Ptr(armsecurity.ConfigurationStatusConfigured),
								EnforcementSupport:   to.Ptr(armsecurity.EnforcementSupportSupported),
								RecommendationAction: to.Ptr(armsecurity.RecommendationActionRecommended),
								ResourceID:           to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourcegroups/talk-va/providers/microsoft.compute/virtualmachines/tal-win-vm-jit"),
							},
							{
								ConfigurationStatus:  to.Ptr(armsecurity.ConfigurationStatusConfigured),
								EnforcementSupport:   to.Ptr(armsecurity.EnforcementSupportSupported),
								RecommendationAction: to.Ptr(armsecurity.RecommendationActionRecommended),
								ResourceID:           to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourcegroups/myresourcegroup/providers/microsoft.compute/virtualmachines/myvmweb"),
							},
							{
								ConfigurationStatus:  to.Ptr(armsecurity.ConfigurationStatusConfigured),
								EnforcementSupport:   to.Ptr(armsecurity.EnforcementSupportSupported),
								RecommendationAction: to.Ptr(armsecurity.RecommendationActionRecommended),
								ResourceID:           to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourcegroups/v-arrikl-scheduledapps/providers/microsoft.compute/virtualmachines/v-arrikl-14061"),
							}},
					},
				},
				{
					Location: to.Ptr("westeurope"),
					Name:     to.Ptr("GROUP1"),
					Type:     to.Ptr("Microsoft.Security/applicationWhitelistings"),
					ID:       to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/locations/westeurope/applicationWhitelistings/GROUP1"),
					Properties: &armsecurity.AdaptiveApplicationControlGroupData{
						ConfigurationStatus: to.Ptr(armsecurity.ConfigurationStatusConfigured),
						EnforcementMode:     to.Ptr(armsecurity.EnforcementModeAudit),
						Issues: []*armsecurity.AdaptiveApplicationControlIssueSummary{
							{
								Issue:       to.Ptr(armsecurity.AdaptiveApplicationControlIssueExecutableViolationsAudited),
								NumberOfVMs: to.Ptr[float32](1),
							}},
						PathRecommendations: []*armsecurity.PathRecommendation{
							{
								Type:                to.Ptr(armsecurity.RecommendationType("File")),
								Path:                to.Ptr("/sbin/init"),
								Action:              to.Ptr(armsecurity.RecommendationActionRecommended),
								Common:              to.Ptr(true),
								ConfigurationStatus: to.Ptr(armsecurity.ConfigurationStatusConfigured),
								FileType:            to.Ptr(armsecurity.FileTypeExecutable),
								UserSids: []*string{
									to.Ptr("S-1-1-0")},
								Usernames: []*armsecurity.UserRecommendation{
									{
										RecommendationAction: to.Ptr(armsecurity.RecommendationActionRecommended),
										Username:             to.Ptr("root"),
									}},
							},
							{
								Type:                to.Ptr(armsecurity.RecommendationType("File")),
								Path:                to.Ptr("/sbin/upstart-udev-bridge"),
								Action:              to.Ptr(armsecurity.RecommendationActionRecommended),
								Common:              to.Ptr(true),
								ConfigurationStatus: to.Ptr(armsecurity.ConfigurationStatusConfigured),
								FileType:            to.Ptr(armsecurity.FileTypeExecutable),
								UserSids: []*string{
									to.Ptr("S-1-1-0")},
								Usernames: []*armsecurity.UserRecommendation{
									{
										RecommendationAction: to.Ptr(armsecurity.RecommendationActionRecommended),
										Username:             to.Ptr("root"),
									}},
							},
							{
								Type:                to.Ptr(armsecurity.RecommendationType("File")),
								Path:                to.Ptr("/lib/systemd/systemd-udevd"),
								Action:              to.Ptr(armsecurity.RecommendationActionRecommended),
								Common:              to.Ptr(true),
								ConfigurationStatus: to.Ptr(armsecurity.ConfigurationStatusConfigured),
								FileType:            to.Ptr(armsecurity.FileTypeExecutable),
								UserSids: []*string{
									to.Ptr("S-1-1-0")},
								Usernames: []*armsecurity.UserRecommendation{
									{
										RecommendationAction: to.Ptr(armsecurity.RecommendationActionRecommended),
										Username:             to.Ptr("root"),
									}},
							},
							{
								Type:                to.Ptr(armsecurity.RecommendationType("File")),
								Path:                to.Ptr("/sbin/upstart-socket-bridge"),
								Action:              to.Ptr(armsecurity.RecommendationActionRecommended),
								Common:              to.Ptr(true),
								ConfigurationStatus: to.Ptr(armsecurity.ConfigurationStatusConfigured),
								FileType:            to.Ptr(armsecurity.FileTypeExecutable),
								UserSids: []*string{
									to.Ptr("S-1-1-0")},
								Usernames: []*armsecurity.UserRecommendation{
									{
										RecommendationAction: to.Ptr(armsecurity.RecommendationActionRecommended),
										Username:             to.Ptr("root"),
									}},
							},
							{
								Type:                to.Ptr(armsecurity.RecommendationType("File")),
								Path:                to.Ptr("/sbin/dhclient"),
								Action:              to.Ptr(armsecurity.RecommendationActionRecommended),
								Common:              to.Ptr(true),
								ConfigurationStatus: to.Ptr(armsecurity.ConfigurationStatusConfigured),
								FileType:            to.Ptr(armsecurity.FileTypeExecutable),
								UserSids: []*string{
									to.Ptr("S-1-1-0")},
								Usernames: []*armsecurity.UserRecommendation{
									{
										RecommendationAction: to.Ptr(armsecurity.RecommendationActionRecommended),
										Username:             to.Ptr("root"),
									}},
							},
							{
								Type:                to.Ptr(armsecurity.RecommendationType("File")),
								Path:                to.Ptr("/usr/bin/python3.4"),
								Action:              to.Ptr(armsecurity.RecommendationActionRecommended),
								Common:              to.Ptr(true),
								ConfigurationStatus: to.Ptr(armsecurity.ConfigurationStatusConfigured),
								FileType:            to.Ptr(armsecurity.FileTypeExecutable),
								UserSids: []*string{
									to.Ptr("S-1-1-0")},
								Usernames: []*armsecurity.UserRecommendation{
									{
										RecommendationAction: to.Ptr(armsecurity.RecommendationActionRecommended),
										Username:             to.Ptr("root"),
									}},
							},
							{
								Type:                to.Ptr(armsecurity.RecommendationType("File")),
								Path:                to.Ptr("/sbin/upstart-file-bridge"),
								Action:              to.Ptr(armsecurity.RecommendationActionRecommended),
								Common:              to.Ptr(true),
								ConfigurationStatus: to.Ptr(armsecurity.ConfigurationStatusConfigured),
								FileType:            to.Ptr(armsecurity.FileTypeExecutable),
								UserSids: []*string{
									to.Ptr("S-1-1-0")},
								Usernames: []*armsecurity.UserRecommendation{
									{
										RecommendationAction: to.Ptr(armsecurity.RecommendationActionRecommended),
										Username:             to.Ptr("root"),
									}},
							},
							{
								Type:                to.Ptr(armsecurity.RecommendationType("File")),
								Path:                to.Ptr("/bin/dbus-daemon"),
								Action:              to.Ptr(armsecurity.RecommendationActionRecommended),
								Common:              to.Ptr(true),
								ConfigurationStatus: to.Ptr(armsecurity.ConfigurationStatusConfigured),
								FileType:            to.Ptr(armsecurity.FileTypeExecutable),
								UserSids: []*string{
									to.Ptr("S-1-1-0")},
								Usernames: []*armsecurity.UserRecommendation{
									{
										RecommendationAction: to.Ptr(armsecurity.RecommendationActionRecommended),
										Username:             to.Ptr("messagebus"),
									}},
							},
							{
								Type:                to.Ptr(armsecurity.RecommendationType("File")),
								Path:                to.Ptr("/lib/systemd/systemd-logind"),
								Action:              to.Ptr(armsecurity.RecommendationActionRecommended),
								Common:              to.Ptr(true),
								ConfigurationStatus: to.Ptr(armsecurity.ConfigurationStatusConfigured),
								FileType:            to.Ptr(armsecurity.FileTypeExecutable),
								UserSids: []*string{
									to.Ptr("S-1-1-0")},
								Usernames: []*armsecurity.UserRecommendation{
									{
										RecommendationAction: to.Ptr(armsecurity.RecommendationActionRecommended),
										Username:             to.Ptr("root"),
									}},
							},
							{
								Type:                to.Ptr(armsecurity.RecommendationType("File")),
								Path:                to.Ptr("/sbin/getty"),
								Action:              to.Ptr(armsecurity.RecommendationActionRecommended),
								Common:              to.Ptr(true),
								ConfigurationStatus: to.Ptr(armsecurity.ConfigurationStatusConfigured),
								FileType:            to.Ptr(armsecurity.FileTypeExecutable),
								UserSids: []*string{
									to.Ptr("S-1-1-0")},
								Usernames: []*armsecurity.UserRecommendation{
									{
										RecommendationAction: to.Ptr(armsecurity.RecommendationActionRecommended),
										Username:             to.Ptr("root"),
									}},
							},
							{
								Type:                to.Ptr(armsecurity.RecommendationType("File")),
								Path:                to.Ptr("/usr/sbin/atd"),
								Action:              to.Ptr(armsecurity.RecommendationActionRecommended),
								Common:              to.Ptr(true),
								ConfigurationStatus: to.Ptr(armsecurity.ConfigurationStatusConfigured),
								FileType:            to.Ptr(armsecurity.FileTypeExecutable),
								UserSids: []*string{
									to.Ptr("S-1-1-0")},
								Usernames: []*armsecurity.UserRecommendation{
									{
										RecommendationAction: to.Ptr(armsecurity.RecommendationActionRecommended),
										Username:             to.Ptr("root"),
									}},
							},
							{
								Type:                to.Ptr(armsecurity.RecommendationType("File")),
								Path:                to.Ptr("/usr/sbin/cron"),
								Action:              to.Ptr(armsecurity.RecommendationActionRecommended),
								Common:              to.Ptr(true),
								ConfigurationStatus: to.Ptr(armsecurity.ConfigurationStatusConfigured),
								FileType:            to.Ptr(armsecurity.FileTypeExecutable),
								UserSids: []*string{
									to.Ptr("S-1-1-0")},
								Usernames: []*armsecurity.UserRecommendation{
									{
										RecommendationAction: to.Ptr(armsecurity.RecommendationActionRecommended),
										Username:             to.Ptr("root"),
									}},
							},
							{
								Type:                to.Ptr(armsecurity.RecommendationType("File")),
								Path:                to.Ptr("/usr/sbin/acpid"),
								Action:              to.Ptr(armsecurity.RecommendationActionRecommended),
								Common:              to.Ptr(true),
								ConfigurationStatus: to.Ptr(armsecurity.ConfigurationStatusConfigured),
								FileType:            to.Ptr(armsecurity.FileTypeExecutable),
								UserSids: []*string{
									to.Ptr("S-1-1-0")},
								Usernames: []*armsecurity.UserRecommendation{
									{
										RecommendationAction: to.Ptr(armsecurity.RecommendationActionRecommended),
										Username:             to.Ptr("root"),
									}},
							},
							{
								Type:                to.Ptr(armsecurity.RecommendationType("File")),
								Path:                to.Ptr("/usr/sbin/sshd"),
								Action:              to.Ptr(armsecurity.RecommendationActionRecommended),
								Common:              to.Ptr(true),
								ConfigurationStatus: to.Ptr(armsecurity.ConfigurationStatusConfigured),
								FileType:            to.Ptr(armsecurity.FileTypeExecutable),
								UserSids: []*string{
									to.Ptr("S-1-1-0")},
								Usernames: []*armsecurity.UserRecommendation{
									{
										RecommendationAction: to.Ptr(armsecurity.RecommendationActionRecommended),
										Username:             to.Ptr("root"),
									}},
							},
							{
								Type:                to.Ptr(armsecurity.RecommendationType("File")),
								Path:                to.Ptr("/usr/lib/linux-lts-xenial-tools-4.4.0-103/hv_vss_daemon"),
								Action:              to.Ptr(armsecurity.RecommendationActionRecommended),
								Common:              to.Ptr(true),
								ConfigurationStatus: to.Ptr(armsecurity.ConfigurationStatusConfigured),
								FileType:            to.Ptr(armsecurity.FileTypeExecutable),
								UserSids: []*string{
									to.Ptr("S-1-1-0")},
								Usernames: []*armsecurity.UserRecommendation{
									{
										RecommendationAction: to.Ptr(armsecurity.RecommendationActionRecommended),
										Username:             to.Ptr("root"),
									}},
							},
							{
								Type:                to.Ptr(armsecurity.RecommendationType("File")),
								Path:                to.Ptr("/usr/lib/linux-lts-xenial-tools-4.4.0-103/hv_kvp_daemon"),
								Action:              to.Ptr(armsecurity.RecommendationActionRecommended),
								Common:              to.Ptr(true),
								ConfigurationStatus: to.Ptr(armsecurity.ConfigurationStatusConfigured),
								FileType:            to.Ptr(armsecurity.FileTypeExecutable),
								UserSids: []*string{
									to.Ptr("S-1-1-0")},
								Usernames: []*armsecurity.UserRecommendation{
									{
										RecommendationAction: to.Ptr(armsecurity.RecommendationActionRecommended),
										Username:             to.Ptr("root"),
									}},
							},
							{
								Type:                to.Ptr(armsecurity.RecommendationType("File")),
								Path:                to.Ptr("/usr/sbin/nscd"),
								Action:              to.Ptr(armsecurity.RecommendationActionRecommended),
								Common:              to.Ptr(true),
								ConfigurationStatus: to.Ptr(armsecurity.ConfigurationStatusConfigured),
								FileType:            to.Ptr(armsecurity.FileTypeExecutable),
								UserSids: []*string{
									to.Ptr("S-1-1-0")},
								Usernames: []*armsecurity.UserRecommendation{
									{
										RecommendationAction: to.Ptr(armsecurity.RecommendationActionRecommended),
										Username:             to.Ptr("unscd"),
									}},
							},
							{
								Type:                to.Ptr(armsecurity.RecommendationType("File")),
								Path:                to.Ptr("/usr/sbin/ntpd"),
								Action:              to.Ptr(armsecurity.RecommendationActionRecommended),
								Common:              to.Ptr(true),
								ConfigurationStatus: to.Ptr(armsecurity.ConfigurationStatusConfigured),
								FileType:            to.Ptr(armsecurity.FileTypeExecutable),
								UserSids: []*string{
									to.Ptr("S-1-1-0")},
								Usernames: []*armsecurity.UserRecommendation{
									{
										RecommendationAction: to.Ptr(armsecurity.RecommendationActionRecommended),
										Username:             to.Ptr("ntp"),
									}},
							},
							{
								Type:                to.Ptr(armsecurity.RecommendationType("File")),
								Path:                to.Ptr("/opt/microsoft/auoms/bin/auomscollect"),
								Action:              to.Ptr(armsecurity.RecommendationActionRecommended),
								Common:              to.Ptr(true),
								ConfigurationStatus: to.Ptr(armsecurity.ConfigurationStatusConfigured),
								FileType:            to.Ptr(armsecurity.FileTypeExecutable),
								UserSids: []*string{
									to.Ptr("S-1-1-0")},
								Usernames: []*armsecurity.UserRecommendation{
									{
										RecommendationAction: to.Ptr(armsecurity.RecommendationActionRecommended),
										Username:             to.Ptr("root"),
									}},
							},
							{
								Type:                to.Ptr(armsecurity.RecommendationType("File")),
								Path:                to.Ptr("/opt/omi/bin/omiserver"),
								Action:              to.Ptr(armsecurity.RecommendationActionRecommended),
								Common:              to.Ptr(true),
								ConfigurationStatus: to.Ptr(armsecurity.ConfigurationStatusConfigured),
								FileType:            to.Ptr(armsecurity.FileTypeExecutable),
								UserSids: []*string{
									to.Ptr("S-1-1-0")},
								Usernames: []*armsecurity.UserRecommendation{
									{
										RecommendationAction: to.Ptr(armsecurity.RecommendationActionRecommended),
										Username:             to.Ptr("root"),
									}},
							},
							{
								Type:                to.Ptr(armsecurity.RecommendationType("File")),
								Path:                to.Ptr("/opt/omi/bin/omiengine"),
								Action:              to.Ptr(armsecurity.RecommendationActionRecommended),
								Common:              to.Ptr(true),
								ConfigurationStatus: to.Ptr(armsecurity.ConfigurationStatusConfigured),
								FileType:            to.Ptr(armsecurity.FileTypeExecutable),
								UserSids: []*string{
									to.Ptr("S-1-1-0")},
								Usernames: []*armsecurity.UserRecommendation{
									{
										RecommendationAction: to.Ptr(armsecurity.RecommendationActionRecommended),
										Username:             to.Ptr("omi"),
									}},
							},
							{
								Type:                to.Ptr(armsecurity.RecommendationType("File")),
								Path:                to.Ptr("/opt/omi/bin/omiagent"),
								Action:              to.Ptr(armsecurity.RecommendationActionRecommended),
								Common:              to.Ptr(true),
								ConfigurationStatus: to.Ptr(armsecurity.ConfigurationStatusConfigured),
								FileType:            to.Ptr(armsecurity.FileTypeExecutable),
								UserSids: []*string{
									to.Ptr("S-1-1-0")},
								Usernames: []*armsecurity.UserRecommendation{
									{
										RecommendationAction: to.Ptr(armsecurity.RecommendationActionRecommended),
										Username:             to.Ptr("root"),
									}},
							},
							{
								Type:                to.Ptr(armsecurity.RecommendationType("File")),
								Path:                to.Ptr("/usr/sbin/rsyslogd"),
								Action:              to.Ptr(armsecurity.RecommendationActionRecommended),
								Common:              to.Ptr(true),
								ConfigurationStatus: to.Ptr(armsecurity.ConfigurationStatusConfigured),
								FileType:            to.Ptr(armsecurity.FileTypeExecutable),
								UserSids: []*string{
									to.Ptr("S-1-1-0")},
								Usernames: []*armsecurity.UserRecommendation{
									{
										RecommendationAction: to.Ptr(armsecurity.RecommendationActionRecommended),
										Username:             to.Ptr("syslog"),
									}},
							},
							{
								Type:                to.Ptr(armsecurity.RecommendationType("File")),
								Path:                to.Ptr("/usr/bin/python2.7"),
								Action:              to.Ptr(armsecurity.RecommendationActionRecommended),
								Common:              to.Ptr(true),
								ConfigurationStatus: to.Ptr(armsecurity.ConfigurationStatusConfigured),
								FileType:            to.Ptr(armsecurity.FileTypeExecutable),
								UserSids: []*string{
									to.Ptr("S-1-1-0")},
								Usernames: []*armsecurity.UserRecommendation{
									{
										RecommendationAction: to.Ptr(armsecurity.RecommendationActionRecommended),
										Username:             to.Ptr("root"),
									},
									{
										RecommendationAction: to.Ptr(armsecurity.RecommendationActionRecommended),
										Username:             to.Ptr("omsagent"),
									}},
							},
							{
								Type:                to.Ptr(armsecurity.RecommendationType("File")),
								Path:                to.Ptr("/opt/microsoft/omsagent/ruby/bin/ruby"),
								Action:              to.Ptr(armsecurity.RecommendationActionRecommended),
								Common:              to.Ptr(true),
								ConfigurationStatus: to.Ptr(armsecurity.ConfigurationStatusConfigured),
								FileType:            to.Ptr(armsecurity.FileTypeExecutable),
								UserSids: []*string{
									to.Ptr("S-1-1-0")},
								Usernames: []*armsecurity.UserRecommendation{
									{
										RecommendationAction: to.Ptr(armsecurity.RecommendationActionRecommended),
										Username:             to.Ptr("omsagent"),
									}},
							},
							{
								Type:                to.Ptr(armsecurity.RecommendationType("File")),
								Path:                to.Ptr("/opt/microsoft/auoms/bin/auoms"),
								Action:              to.Ptr(armsecurity.RecommendationActionRecommended),
								Common:              to.Ptr(true),
								ConfigurationStatus: to.Ptr(armsecurity.ConfigurationStatusConfigured),
								FileType:            to.Ptr(armsecurity.FileTypeExecutable),
								UserSids: []*string{
									to.Ptr("S-1-1-0")},
								Usernames: []*armsecurity.UserRecommendation{
									{
										RecommendationAction: to.Ptr(armsecurity.RecommendationActionRecommended),
										Username:             to.Ptr("root"),
									}},
							},
							{
								Type:                to.Ptr(armsecurity.RecommendationType("File")),
								Path:                to.Ptr("/usr/local/qualys/cloud-agent/bin/qualys-cloud-agent"),
								Action:              to.Ptr(armsecurity.RecommendationActionRecommended),
								Common:              to.Ptr(true),
								ConfigurationStatus: to.Ptr(armsecurity.ConfigurationStatusConfigured),
								FileType:            to.Ptr(armsecurity.FileTypeExecutable),
								UserSids: []*string{
									to.Ptr("S-1-1-0")},
								Usernames: []*armsecurity.UserRecommendation{
									{
										RecommendationAction: to.Ptr(armsecurity.RecommendationActionRecommended),
										Username:             to.Ptr("root"),
									}},
							},
							{
								Type:                to.Ptr(armsecurity.RecommendationType("File")),
								Path:                to.Ptr("/bin/dash"),
								Action:              to.Ptr(armsecurity.RecommendationActionRecommended),
								Common:              to.Ptr(true),
								ConfigurationStatus: to.Ptr(armsecurity.ConfigurationStatusConfigured),
								FileType:            to.Ptr(armsecurity.FileTypeExecutable),
								UserSids: []*string{
									to.Ptr("S-1-1-0")},
								Usernames: []*armsecurity.UserRecommendation{
									{
										RecommendationAction: to.Ptr(armsecurity.RecommendationActionRecommended),
										Username:             to.Ptr("omsagent"),
									},
									{
										RecommendationAction: to.Ptr(armsecurity.RecommendationActionRecommended),
										Username:             to.Ptr("root"),
									}},
							},
							{
								Type:                to.Ptr(armsecurity.RecommendationType("File")),
								Path:                to.Ptr("/bin/sleep"),
								Action:              to.Ptr(armsecurity.RecommendationActionRecommended),
								Common:              to.Ptr(true),
								ConfigurationStatus: to.Ptr(armsecurity.ConfigurationStatusConfigured),
								FileType:            to.Ptr(armsecurity.FileTypeExecutable),
								UserSids: []*string{
									to.Ptr("S-1-1-0")},
								Usernames: []*armsecurity.UserRecommendation{
									{
										RecommendationAction: to.Ptr(armsecurity.RecommendationActionRecommended),
										Username:             to.Ptr("omsagent"),
									}},
							},
							{
								Type:                to.Ptr(armsecurity.RecommendationType("File")),
								Path:                to.Ptr("/opt/dsc/bin/dsc_host"),
								Action:              to.Ptr(armsecurity.RecommendationActionRecommended),
								Common:              to.Ptr(false),
								ConfigurationStatus: to.Ptr(armsecurity.ConfigurationStatusConfigured),
								FileType:            to.Ptr(armsecurity.FileTypeExecutable),
								UserSids: []*string{
									to.Ptr("S-1-1-0")},
								Usernames: []*armsecurity.UserRecommendation{
									{
										RecommendationAction: to.Ptr(armsecurity.RecommendationActionRecommended),
										Username:             to.Ptr("omsagent"),
									}},
							},
							{
								Type:                to.Ptr(armsecurity.RecommendationType("File")),
								Path:                to.Ptr("/usr/bin/sudo"),
								Action:              to.Ptr(armsecurity.RecommendationActionRecommended),
								Common:              to.Ptr(false),
								ConfigurationStatus: to.Ptr(armsecurity.ConfigurationStatusConfigured),
								FileType:            to.Ptr(armsecurity.FileTypeExecutable),
								UserSids: []*string{
									to.Ptr("S-1-1-0")},
								Usernames: []*armsecurity.UserRecommendation{
									{
										RecommendationAction: to.Ptr(armsecurity.RecommendationActionRecommended),
										Username:             to.Ptr("root"),
									}},
							},
							{
								Type:                to.Ptr(armsecurity.RecommendationType("File")),
								Path:                to.Ptr("/bin/bash"),
								Action:              to.Ptr(armsecurity.RecommendationActionRecommended),
								Common:              to.Ptr(false),
								ConfigurationStatus: to.Ptr(armsecurity.ConfigurationStatusConfigured),
								FileType:            to.Ptr(armsecurity.FileTypeExecutable),
								UserSids: []*string{
									to.Ptr("S-1-1-0")},
								Usernames: []*armsecurity.UserRecommendation{
									{
										RecommendationAction: to.Ptr(armsecurity.RecommendationActionRecommended),
										Username:             to.Ptr("root"),
									}},
							},
							{
								Type:                to.Ptr(armsecurity.RecommendationType("File")),
								Path:                to.Ptr("/usr/bin/apt-get"),
								Action:              to.Ptr(armsecurity.RecommendationActionRecommended),
								Common:              to.Ptr(false),
								ConfigurationStatus: to.Ptr(armsecurity.ConfigurationStatusConfigured),
								FileType:            to.Ptr(armsecurity.FileTypeExecutable),
								UserSids: []*string{
									to.Ptr("S-1-1-0")},
								Usernames: []*armsecurity.UserRecommendation{
									{
										RecommendationAction: to.Ptr(armsecurity.RecommendationActionRecommended),
										Username:             to.Ptr("root"),
									}},
							},
							{
								Type:                to.Ptr(armsecurity.RecommendationType("File")),
								Path:                to.Ptr("/usr/lib/apt/methods/http"),
								Action:              to.Ptr(armsecurity.RecommendationActionRecommended),
								Common:              to.Ptr(false),
								ConfigurationStatus: to.Ptr(armsecurity.ConfigurationStatusConfigured),
								FileType:            to.Ptr(armsecurity.FileTypeExecutable),
								UserSids: []*string{
									to.Ptr("S-1-1-0")},
								Usernames: []*armsecurity.UserRecommendation{
									{
										RecommendationAction: to.Ptr(armsecurity.RecommendationActionRecommended),
										Username:             to.Ptr("root"),
									}},
							},
							{
								Type:                to.Ptr(armsecurity.RecommendationType("File")),
								Path:                to.Ptr("/usr/lib/apt/methods/gpgv"),
								Action:              to.Ptr(armsecurity.RecommendationActionRecommended),
								Common:              to.Ptr(false),
								ConfigurationStatus: to.Ptr(armsecurity.ConfigurationStatusConfigured),
								FileType:            to.Ptr(armsecurity.FileTypeExecutable),
								UserSids: []*string{
									to.Ptr("S-1-1-0")},
								Usernames: []*armsecurity.UserRecommendation{
									{
										RecommendationAction: to.Ptr(armsecurity.RecommendationActionRecommended),
										Username:             to.Ptr("root"),
									}},
							},
							{
								Type:                to.Ptr(armsecurity.RecommendationType("File")),
								Path:                to.Ptr("/usr/lib/apt/methods/copy"),
								Action:              to.Ptr(armsecurity.RecommendationActionRecommended),
								Common:              to.Ptr(false),
								ConfigurationStatus: to.Ptr(armsecurity.ConfigurationStatusConfigured),
								FileType:            to.Ptr(armsecurity.FileTypeExecutable),
								UserSids: []*string{
									to.Ptr("S-1-1-0")},
								Usernames: []*armsecurity.UserRecommendation{
									{
										RecommendationAction: to.Ptr(armsecurity.RecommendationActionRecommended),
										Username:             to.Ptr("root"),
									}},
							},
							{
								Type:                to.Ptr(armsecurity.RecommendationType("File")),
								Path:                to.Ptr("/usr/bin/pgrep"),
								Action:              to.Ptr(armsecurity.RecommendationActionRecommended),
								Common:              to.Ptr(true),
								ConfigurationStatus: to.Ptr(armsecurity.ConfigurationStatusConfigured),
								FileType:            to.Ptr(armsecurity.FileTypeExecutable),
								UserSids: []*string{
									to.Ptr("S-1-1-0")},
								Usernames: []*armsecurity.UserRecommendation{
									{
										RecommendationAction: to.Ptr(armsecurity.RecommendationActionRecommended),
										Username:             to.Ptr("omsagent"),
									}},
							},
							{
								Type:                to.Ptr(armsecurity.RecommendationType("File")),
								Path:                to.Ptr("/opt/microsoft/omsconfig/bin/omsconsistencyinvoker"),
								Action:              to.Ptr(armsecurity.RecommendationActionRecommended),
								Common:              to.Ptr(false),
								ConfigurationStatus: to.Ptr(armsecurity.ConfigurationStatusConfigured),
								FileType:            to.Ptr(armsecurity.FileTypeExecutable),
								UserSids: []*string{
									to.Ptr("S-1-1-0")},
								Usernames: []*armsecurity.UserRecommendation{
									{
										RecommendationAction: to.Ptr(armsecurity.RecommendationActionRecommended),
										Username:             to.Ptr("omsagent"),
									}},
							}},
						ProtectionMode: &armsecurity.ProtectionMode{
							Executable: to.Ptr(armsecurity.EnforcementModeAudit),
						},
						RecommendationStatus: to.Ptr(armsecurity.RecommendationStatusRecommended),
						SourceSystem:         to.Ptr(armsecurity.SourceSystemAzureAuditD),
						VMRecommendations: []*armsecurity.VMRecommendation{
							{
								ConfigurationStatus:  to.Ptr(armsecurity.ConfigurationStatusConfigured),
								EnforcementSupport:   to.Ptr(armsecurity.EnforcementSupportUnknown),
								RecommendationAction: to.Ptr(armsecurity.RecommendationActionRecommended),
								ResourceID:           to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourcegroups/nic-no-pip/providers/microsoft.compute/virtualmachines/nic-no-pip-vm"),
							}},
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.AdaptiveApplicationControlGroups) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AdaptiveApplicationControlGroups)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/stable/2020-01-01/examples/ApplicationWhitelistings/GetAdaptiveApplicationControlsSubscription_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAdaptiveApplicationControls_Get(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/stable/2020-01-01/examples/ApplicationWhitelistings/GetAdaptiveApplicationControlsGroup_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets a configured application control VM/server group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewAdaptiveApplicationControlsClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23",
		"centralus", cred, &options)
	res, err := client.Get(ctx,
		"ERELGROUP1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/stable/2020-01-01/examples/ApplicationWhitelistings/GetAdaptiveApplicationControlsGroup_example.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurity.AdaptiveApplicationControlGroup{
			Location: to.Ptr("centralus"),
			Name:     to.Ptr("ERELGROUP1"),
			Type:     to.Ptr("Microsoft.Security/applicationWhitelistings"),
			ID:       to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/locations/centralus/applicationWhitelistings/ERELGROUP1"),
			Properties: &armsecurity.AdaptiveApplicationControlGroupData{
				ConfigurationStatus: to.Ptr(armsecurity.ConfigurationStatusConfigured),
				EnforcementMode:     to.Ptr(armsecurity.EnforcementModeAudit),
				Issues:              []*armsecurity.AdaptiveApplicationControlIssueSummary{},
				PathRecommendations: []*armsecurity.PathRecommendation{
					{
						Type:                to.Ptr(armsecurity.RecommendationType("PublisherSignature")),
						Path:                to.Ptr("[Exe] O=MICROSOFT CORPORATION, L=REDMOND, S=WASHINGTON, C=US\\*\\*\\0.0.0.0"),
						Action:              to.Ptr(armsecurity.RecommendationActionRecommended),
						Common:              to.Ptr(true),
						ConfigurationStatus: to.Ptr(armsecurity.ConfigurationStatusConfigured),
						FileType:            to.Ptr(armsecurity.FileTypeExe),
						PublisherInfo: &armsecurity.PublisherInfo{
							BinaryName:    to.Ptr("*"),
							ProductName:   to.Ptr("*"),
							PublisherName: to.Ptr("O=MICROSOFT CORPORATION, L=REDMOND, S=WASHINGTON, C=US"),
							Version:       to.Ptr("0.0.0.0"),
						},
						UserSids: []*string{
							to.Ptr("S-1-1-0")},
						Usernames: []*armsecurity.UserRecommendation{
							{
								RecommendationAction: to.Ptr(armsecurity.RecommendationActionRecommended),
								Username:             to.Ptr("Everyone"),
							}},
					},
					{
						Type:                to.Ptr(armsecurity.RecommendationType("ProductSignature")),
						Path:                to.Ptr("%OSDRIVE%\\WINDOWSAZURE\\SECAGENT\\WASECAGENTPROV.EXE"),
						Action:              to.Ptr(armsecurity.RecommendationActionRecommended),
						Common:              to.Ptr(true),
						ConfigurationStatus: to.Ptr(armsecurity.ConfigurationStatusConfigured),
						FileType:            to.Ptr(armsecurity.FileTypeExe),
						PublisherInfo: &armsecurity.PublisherInfo{
							BinaryName:    to.Ptr("*"),
							ProductName:   to.Ptr("MICROSOFT® COREXT"),
							PublisherName: to.Ptr("CN=MICROSOFT AZURE DEPENDENCY CODE SIGN"),
							Version:       to.Ptr("0.0.0.0"),
						},
						UserSids: []*string{
							to.Ptr("S-1-1-0")},
						Usernames: []*armsecurity.UserRecommendation{
							{
								RecommendationAction: to.Ptr(armsecurity.RecommendationActionRecommended),
								Username:             to.Ptr("NT AUTHORITY\\SYSTEM"),
							}},
					},
					{
						Type:                to.Ptr(armsecurity.RecommendationType("PublisherSignature")),
						Path:                to.Ptr("%OSDRIVE%\\WINDOWSAZURE\\PACKAGES_201973_7415\\COLLECTGUESTLOGS.EXE"),
						Action:              to.Ptr(armsecurity.RecommendationActionRecommended),
						Common:              to.Ptr(true),
						ConfigurationStatus: to.Ptr(armsecurity.ConfigurationStatusConfigured),
						FileType:            to.Ptr(armsecurity.FileTypeExe),
						PublisherInfo: &armsecurity.PublisherInfo{
							BinaryName:    to.Ptr("*"),
							ProductName:   to.Ptr("*"),
							PublisherName: to.Ptr("CN=MICROSOFT AZURE DEPENDENCY CODE SIGN"),
							Version:       to.Ptr("0.0.0.0"),
						},
						UserSids: []*string{
							to.Ptr("S-1-1-0")},
						Usernames: []*armsecurity.UserRecommendation{
							{
								RecommendationAction: to.Ptr(armsecurity.RecommendationActionRecommended),
								Username:             to.Ptr("NT AUTHORITY\\SYSTEM"),
							}},
					},
					{
						Type:                to.Ptr(armsecurity.RecommendationType("File")),
						Path:                to.Ptr("C:\\directory\\file.exe"),
						Action:              to.Ptr(armsecurity.RecommendationActionAdd),
						Common:              to.Ptr(true),
						ConfigurationStatus: to.Ptr(armsecurity.ConfigurationStatusConfigured),
						FileType:            to.Ptr(armsecurity.FileTypeExe),
						UserSids: []*string{
							to.Ptr("S-1-1-0")},
						Usernames: []*armsecurity.UserRecommendation{
							{
								RecommendationAction: to.Ptr(armsecurity.RecommendationActionRecommended),
								Username:             to.Ptr("Everyone"),
							}},
					}},
				ProtectionMode: &armsecurity.ProtectionMode{
					Exe:    to.Ptr(armsecurity.EnforcementModeAudit),
					Msi:    to.Ptr(armsecurity.EnforcementModeAudit),
					Script: to.Ptr(armsecurity.EnforcementModeNone),
				},
				RecommendationStatus: to.Ptr(armsecurity.RecommendationStatusRecommended),
				SourceSystem:         to.Ptr(armsecurity.SourceSystemAzureAppLocker),
				VMRecommendations: []*armsecurity.VMRecommendation{
					{
						ConfigurationStatus:  to.Ptr(armsecurity.ConfigurationStatusConfigured),
						EnforcementSupport:   to.Ptr(armsecurity.EnforcementSupportSupported),
						RecommendationAction: to.Ptr(armsecurity.RecommendationActionRecommended),
						ResourceID:           to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourcegroups/erelh-stable/providers/microsoft.compute/virtualmachines/erelh-16090"),
					},
					{
						ConfigurationStatus:  to.Ptr(armsecurity.ConfigurationStatusConfigured),
						EnforcementSupport:   to.Ptr(armsecurity.EnforcementSupportSupported),
						RecommendationAction: to.Ptr(armsecurity.RecommendationActionRecommended),
						ResourceID:           to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourcegroups/matanvs/providers/microsoft.compute/virtualmachines/matanvs19"),
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AdaptiveApplicationControlGroup) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AdaptiveApplicationControlGroup)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/stable/2020-01-01/examples/ApplicationWhitelistings/GetAdaptiveApplicationControlsGroup_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAdaptiveApplicationControls_Put(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/stable/2020-01-01/examples/ApplicationWhitelistings/PutAdaptiveApplicationControls_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update an application control machine group by adding a new application"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewAdaptiveApplicationControlsClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23",
		"centralus", cred, &options)
	res, err := client.Put(ctx,
		"ERELGROUP1",
		armsecurity.AdaptiveApplicationControlGroup{
			Properties: &armsecurity.AdaptiveApplicationControlGroupData{
				EnforcementMode: to.Ptr(armsecurity.EnforcementModeAudit),
				PathRecommendations: []*armsecurity.PathRecommendation{
					{
						Type:                to.Ptr(armsecurity.RecommendationType("PublisherSignature")),
						Path:                to.Ptr("[Exe] O=MICROSOFT CORPORATION, L=REDMOND, S=WASHINGTON, C=US\\*\\*\\0.0.0.0"),
						Action:              to.Ptr(armsecurity.RecommendationActionRecommended),
						Common:              to.Ptr(true),
						ConfigurationStatus: to.Ptr(armsecurity.ConfigurationStatusConfigured),
						FileType:            to.Ptr(armsecurity.FileTypeExe),
						PublisherInfo: &armsecurity.PublisherInfo{
							BinaryName:    to.Ptr("*"),
							ProductName:   to.Ptr("*"),
							PublisherName: to.Ptr("O=MICROSOFT CORPORATION, L=REDMOND, S=WASHINGTON, C=US"),
							Version:       to.Ptr("0.0.0.0"),
						},
						UserSids: []*string{
							to.Ptr("S-1-1-0")},
						Usernames: []*armsecurity.UserRecommendation{
							{
								RecommendationAction: to.Ptr(armsecurity.RecommendationActionRecommended),
								Username:             to.Ptr("Everyone"),
							}},
					},
					{
						Type:                to.Ptr(armsecurity.RecommendationType("ProductSignature")),
						Path:                to.Ptr("%OSDRIVE%\\WINDOWSAZURE\\SECAGENT\\WASECAGENTPROV.EXE"),
						Action:              to.Ptr(armsecurity.RecommendationActionRecommended),
						Common:              to.Ptr(true),
						ConfigurationStatus: to.Ptr(armsecurity.ConfigurationStatusConfigured),
						FileType:            to.Ptr(armsecurity.FileTypeExe),
						PublisherInfo: &armsecurity.PublisherInfo{
							BinaryName:    to.Ptr("*"),
							ProductName:   to.Ptr("MICROSOFT® COREXT"),
							PublisherName: to.Ptr("CN=MICROSOFT AZURE DEPENDENCY CODE SIGN"),
							Version:       to.Ptr("0.0.0.0"),
						},
						UserSids: []*string{
							to.Ptr("S-1-1-0")},
						Usernames: []*armsecurity.UserRecommendation{
							{
								RecommendationAction: to.Ptr(armsecurity.RecommendationActionRecommended),
								Username:             to.Ptr("NT AUTHORITY\\SYSTEM"),
							}},
					},
					{
						Type:                to.Ptr(armsecurity.RecommendationType("PublisherSignature")),
						Path:                to.Ptr("%OSDRIVE%\\WINDOWSAZURE\\PACKAGES_201973_7415\\COLLECTGUESTLOGS.EXE"),
						Action:              to.Ptr(armsecurity.RecommendationActionRecommended),
						Common:              to.Ptr(true),
						ConfigurationStatus: to.Ptr(armsecurity.ConfigurationStatusConfigured),
						FileType:            to.Ptr(armsecurity.FileTypeExe),
						PublisherInfo: &armsecurity.PublisherInfo{
							BinaryName:    to.Ptr("*"),
							ProductName:   to.Ptr("*"),
							PublisherName: to.Ptr("CN=MICROSOFT AZURE DEPENDENCY CODE SIGN"),
							Version:       to.Ptr("0.0.0.0"),
						},
						UserSids: []*string{
							to.Ptr("S-1-1-0")},
						Usernames: []*armsecurity.UserRecommendation{
							{
								RecommendationAction: to.Ptr(armsecurity.RecommendationActionRecommended),
								Username:             to.Ptr("NT AUTHORITY\\SYSTEM"),
							}},
					},
					{
						Type:   to.Ptr(armsecurity.RecommendationType("File")),
						Path:   to.Ptr("C:\\directory\\file.exe"),
						Action: to.Ptr(armsecurity.RecommendationActionAdd),
						Common: to.Ptr(true),
					}},
				ProtectionMode: &armsecurity.ProtectionMode{
					Exe:    to.Ptr(armsecurity.EnforcementModeAudit),
					Msi:    to.Ptr(armsecurity.EnforcementModeNone),
					Script: to.Ptr(armsecurity.EnforcementModeNone),
				},
				VMRecommendations: []*armsecurity.VMRecommendation{
					{
						ConfigurationStatus:  to.Ptr(armsecurity.ConfigurationStatusConfigured),
						EnforcementSupport:   to.Ptr(armsecurity.EnforcementSupportSupported),
						RecommendationAction: to.Ptr(armsecurity.RecommendationActionRecommended),
						ResourceID:           to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourcegroups/erelh-stable/providers/microsoft.compute/virtualmachines/erelh-16090"),
					},
					{
						ConfigurationStatus:  to.Ptr(armsecurity.ConfigurationStatusConfigured),
						EnforcementSupport:   to.Ptr(armsecurity.EnforcementSupportSupported),
						RecommendationAction: to.Ptr(armsecurity.RecommendationActionRecommended),
						ResourceID:           to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourcegroups/matanvs/providers/microsoft.compute/virtualmachines/matanvs19"),
					}},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/stable/2020-01-01/examples/ApplicationWhitelistings/PutAdaptiveApplicationControls_example.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurity.AdaptiveApplicationControlGroup{
			Location: to.Ptr("centralus"),
			Name:     to.Ptr("ERELGROUP1"),
			Type:     to.Ptr("Microsoft.Security/applicationWhitelistings"),
			ID:       to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/locations/centralus/applicationWhitelistings/ERELGROUP1"),
			Properties: &armsecurity.AdaptiveApplicationControlGroupData{
				ConfigurationStatus: to.Ptr(armsecurity.ConfigurationStatusInProgress),
				EnforcementMode:     to.Ptr(armsecurity.EnforcementModeAudit),
				Issues:              []*armsecurity.AdaptiveApplicationControlIssueSummary{},
				PathRecommendations: []*armsecurity.PathRecommendation{
					{
						Type:                to.Ptr(armsecurity.RecommendationType("PublisherSignature")),
						Path:                to.Ptr("[Exe] O=MICROSOFT CORPORATION, L=REDMOND, S=WASHINGTON, C=US\\*\\*\\0.0.0.0"),
						Action:              to.Ptr(armsecurity.RecommendationActionRecommended),
						Common:              to.Ptr(true),
						ConfigurationStatus: to.Ptr(armsecurity.ConfigurationStatusConfigured),
						FileType:            to.Ptr(armsecurity.FileTypeExe),
						PublisherInfo: &armsecurity.PublisherInfo{
							BinaryName:    to.Ptr("*"),
							ProductName:   to.Ptr("*"),
							PublisherName: to.Ptr("O=MICROSOFT CORPORATION, L=REDMOND, S=WASHINGTON, C=US"),
							Version:       to.Ptr("0.0.0.0"),
						},
						UserSids: []*string{
							to.Ptr("S-1-1-0")},
						Usernames: []*armsecurity.UserRecommendation{
							{
								RecommendationAction: to.Ptr(armsecurity.RecommendationActionRecommended),
								Username:             to.Ptr("Everyone"),
							}},
					},
					{
						Type:                to.Ptr(armsecurity.RecommendationType("ProductSignature")),
						Path:                to.Ptr("%OSDRIVE%\\WINDOWSAZURE\\SECAGENT\\WASECAGENTPROV.EXE"),
						Action:              to.Ptr(armsecurity.RecommendationActionRecommended),
						Common:              to.Ptr(true),
						ConfigurationStatus: to.Ptr(armsecurity.ConfigurationStatusConfigured),
						FileType:            to.Ptr(armsecurity.FileTypeExe),
						PublisherInfo: &armsecurity.PublisherInfo{
							BinaryName:    to.Ptr("*"),
							ProductName:   to.Ptr("MICROSOFT® COREXT"),
							PublisherName: to.Ptr("CN=MICROSOFT AZURE DEPENDENCY CODE SIGN"),
							Version:       to.Ptr("0.0.0.0"),
						},
						UserSids: []*string{
							to.Ptr("S-1-1-0")},
						Usernames: []*armsecurity.UserRecommendation{
							{
								RecommendationAction: to.Ptr(armsecurity.RecommendationActionRecommended),
								Username:             to.Ptr("NT AUTHORITY\\SYSTEM"),
							}},
					},
					{
						Type:                to.Ptr(armsecurity.RecommendationType("PublisherSignature")),
						Path:                to.Ptr("%OSDRIVE%\\WINDOWSAZURE\\PACKAGES_201973_7415\\COLLECTGUESTLOGS.EXE"),
						Action:              to.Ptr(armsecurity.RecommendationActionRecommended),
						Common:              to.Ptr(true),
						ConfigurationStatus: to.Ptr(armsecurity.ConfigurationStatusConfigured),
						FileType:            to.Ptr(armsecurity.FileTypeExe),
						PublisherInfo: &armsecurity.PublisherInfo{
							BinaryName:    to.Ptr("*"),
							ProductName:   to.Ptr("*"),
							PublisherName: to.Ptr("CN=MICROSOFT AZURE DEPENDENCY CODE SIGN"),
							Version:       to.Ptr("0.0.0.0"),
						},
						UserSids: []*string{
							to.Ptr("S-1-1-0")},
						Usernames: []*armsecurity.UserRecommendation{
							{
								RecommendationAction: to.Ptr(armsecurity.RecommendationActionRecommended),
								Username:             to.Ptr("NT AUTHORITY\\SYSTEM"),
							}},
					},
					{
						Type:                to.Ptr(armsecurity.RecommendationType("File")),
						Path:                to.Ptr("C:\\directory\\file.exe"),
						Action:              to.Ptr(armsecurity.RecommendationActionAdd),
						Common:              to.Ptr(true),
						ConfigurationStatus: to.Ptr(armsecurity.ConfigurationStatusNotConfigured),
						FileType:            to.Ptr(armsecurity.FileTypeExe),
						UserSids: []*string{
							to.Ptr("S-1-1-0")},
						Usernames: []*armsecurity.UserRecommendation{
							{
								RecommendationAction: to.Ptr(armsecurity.RecommendationActionRecommended),
								Username:             to.Ptr("Everyone"),
							}},
					}},
				ProtectionMode: &armsecurity.ProtectionMode{
					Exe:    to.Ptr(armsecurity.EnforcementModeAudit),
					Msi:    to.Ptr(armsecurity.EnforcementModeNone),
					Script: to.Ptr(armsecurity.EnforcementModeNone),
				},
				RecommendationStatus: to.Ptr(armsecurity.RecommendationStatusRecommended),
				SourceSystem:         to.Ptr(armsecurity.SourceSystemAzureAppLocker),
				VMRecommendations: []*armsecurity.VMRecommendation{
					{
						RecommendationAction: to.Ptr(armsecurity.RecommendationActionRecommended),
						ResourceID:           to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourcegroups/erelh-stable/providers/microsoft.compute/virtualmachines/erelh-16090"),
					},
					{
						RecommendationAction: to.Ptr(armsecurity.RecommendationActionRecommended),
						ResourceID:           to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourcegroups/matanvs/providers/microsoft.compute/virtualmachines/matanvs19"),
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AdaptiveApplicationControlGroup) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AdaptiveApplicationControlGroup)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/stable/2020-01-01/examples/ApplicationWhitelistings/PutAdaptiveApplicationControls_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAdaptiveApplicationControls_Delete(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/stable/2020-01-01/examples/ApplicationWhitelistings/DeleteAdaptiveApplicationControls_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete an application control machine group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewAdaptiveApplicationControlsClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23",
		"centralus", cred, &options)
	_, err := client.Delete(ctx,
		"GROUP1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/stable/2020-01-01/examples/ApplicationWhitelistings/DeleteAdaptiveApplicationControls_example.json: %v", err)
	}
}

func TestAdaptiveNetworkHardenings_ListByExtendedResource(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/stable/2020-01-01/examples/AdaptiveNetworkHardenings/ListByExtendedResourceAdaptiveNetworkHardenings_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Adaptive Network Hardenings resources of an extended resource"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewAdaptiveNetworkHardeningsClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23", cred, &options)
	pager := client.ListByExtendedResource("rg1",
		"Microsoft.Compute",
		"virtualMachines",
		"vm1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/security/resource-manager/Microsoft.Security/stable/2020-01-01/examples/AdaptiveNetworkHardenings/ListByExtendedResourceAdaptiveNetworkHardenings_example.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsecurity.AdaptiveNetworkHardeningsList{
			Value: []*armsecurity.AdaptiveNetworkHardening{
				{
					Name: to.Ptr("default"),
					Type: to.Ptr("Microsoft.Security/adaptiveNetworkHardenings"),
					ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourcegroups/rg1/providers/Microsoft.Compute/virtualMachines/vm1/providers/Microsoft.Security/adaptiveNetworkHardenings/default"),
					Properties: &armsecurity.AdaptiveNetworkHardeningProperties{
						EffectiveNetworkSecurityGroups: []*armsecurity.EffectiveNetworkSecurityGroups{
							{
								NetworkInterface: to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourcegroups/rg1/providers/Microsoft.Network/networkInterfaces/nic1"),
								NetworkSecurityGroups: []*string{
									to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/nicNsg"),
									to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/subnetNsg")},
							},
							{
								NetworkInterface: to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourcegroups/rg1/providers/Microsoft.Network/networkInterfaces/nic2"),
								NetworkSecurityGroups: []*string{
									to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/nicNsg2")},
							}},
						Rules: []*armsecurity.Rule{
							{
								Name:            to.Ptr("rule1"),
								DestinationPort: to.Ptr[int32](3389),
								Direction:       to.Ptr(armsecurity.DirectionInbound),
								IPAddresses: []*string{
									to.Ptr("100.10.1.1"),
									to.Ptr("200.20.2.2"),
									to.Ptr("81.199.3.0/24")},
								Protocols: []*armsecurity.TransportProtocol{
									to.Ptr(armsecurity.TransportProtocolTCP)},
							},
							{
								Name:            to.Ptr("rule2"),
								DestinationPort: to.Ptr[int32](22),
								Direction:       to.Ptr(armsecurity.DirectionInbound),
								IPAddresses:     []*string{},
								Protocols: []*armsecurity.TransportProtocol{
									to.Ptr(armsecurity.TransportProtocolTCP)},
							}},
						RulesCalculationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-15T00:00:00.0000000Z"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AdaptiveNetworkHardeningsList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AdaptiveNetworkHardeningsList)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/stable/2020-01-01/examples/AdaptiveNetworkHardenings/ListByExtendedResourceAdaptiveNetworkHardenings_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAdaptiveNetworkHardenings_Get(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/stable/2020-01-01/examples/AdaptiveNetworkHardenings/GetAdaptiveNetworkHardening_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a single Adaptive Network Hardening resource"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewAdaptiveNetworkHardeningsClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"Microsoft.Compute",
		"virtualMachines",
		"vm1",
		"default",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/stable/2020-01-01/examples/AdaptiveNetworkHardenings/GetAdaptiveNetworkHardening_example.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurity.AdaptiveNetworkHardening{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Security/adaptiveNetworkHardenings"),
			ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourcegroups/rg1/providers/Microsoft.Compute/virtualMachines/vm1/providers/Microsoft.Security/adaptiveNetworkHardenings/default"),
			Properties: &armsecurity.AdaptiveNetworkHardeningProperties{
				EffectiveNetworkSecurityGroups: []*armsecurity.EffectiveNetworkSecurityGroups{
					{
						NetworkInterface: to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourcegroups/rg1/providers/Microsoft.Network/networkInterfaces/nic1"),
						NetworkSecurityGroups: []*string{
							to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/nicNsg"),
							to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/subnetNsg")},
					},
					{
						NetworkInterface: to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourcegroups/rg2/providers/Microsoft.Network/networkInterfaces/nic2"),
						NetworkSecurityGroups: []*string{
							to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/rg2/providers/Microsoft.Network/networkSecurityGroups/nicNsg")},
					}},
				Rules: []*armsecurity.Rule{
					{
						Name:            to.Ptr("rule1"),
						DestinationPort: to.Ptr[int32](3389),
						Direction:       to.Ptr(armsecurity.DirectionInbound),
						IPAddresses: []*string{
							to.Ptr("100.10.1.1"),
							to.Ptr("200.20.2.2"),
							to.Ptr("81.199.3.0/24")},
						Protocols: []*armsecurity.TransportProtocol{
							to.Ptr(armsecurity.TransportProtocolTCP)},
					},
					{
						Name:            to.Ptr("rule2"),
						DestinationPort: to.Ptr[int32](22),
						Direction:       to.Ptr(armsecurity.DirectionInbound),
						IPAddresses:     []*string{},
						Protocols: []*armsecurity.TransportProtocol{
							to.Ptr(armsecurity.TransportProtocolTCP)},
					}},
				RulesCalculationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-15T00:00:00.0000000Z"); return t }()),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AdaptiveNetworkHardening) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AdaptiveNetworkHardening)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/stable/2020-01-01/examples/AdaptiveNetworkHardenings/GetAdaptiveNetworkHardening_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAdaptiveNetworkHardenings_Enforce(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/stable/2020-01-01/examples/AdaptiveNetworkHardenings/EnforceAdaptiveNetworkHardeningRules_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Enforces the given rules on the NSG(s) listed in the request"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewAdaptiveNetworkHardeningsClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23", cred, &options)
	poller, err := client.BeginEnforce(ctx,
		"rg1",
		"Microsoft.Compute",
		"virtualMachines",
		"vm1",
		"default",
		armsecurity.Enum51Enforce,
		armsecurity.AdaptiveNetworkHardeningEnforceRequest{
			NetworkSecurityGroups: []*string{
				to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/rg1/providers/Microsoft.Network/networkSecurityGroups/nsg1"),
				to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/rg2/providers/Microsoft.Network/networkSecurityGroups/nsg2")},
			Rules: []*armsecurity.Rule{
				{
					Name:            to.Ptr("rule1"),
					DestinationPort: to.Ptr[int32](3389),
					Direction:       to.Ptr(armsecurity.DirectionInbound),
					IPAddresses: []*string{
						to.Ptr("100.10.1.1"),
						to.Ptr("200.20.2.2"),
						to.Ptr("81.199.3.0/24")},
					Protocols: []*armsecurity.TransportProtocol{
						to.Ptr(armsecurity.TransportProtocolTCP)},
				},
				{
					Name:            to.Ptr("rule2"),
					DestinationPort: to.Ptr[int32](22),
					Direction:       to.Ptr(armsecurity.DirectionInbound),
					IPAddresses:     []*string{},
					Protocols: []*armsecurity.TransportProtocol{
						to.Ptr(armsecurity.TransportProtocolTCP)},
				}},
		},
		&armsecurity.AdaptiveNetworkHardeningsClientBeginEnforceOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/stable/2020-01-01/examples/AdaptiveNetworkHardenings/EnforceAdaptiveNetworkHardeningRules_example.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/security/resource-manager/Microsoft.Security/stable/2020-01-01/examples/AdaptiveNetworkHardenings/EnforceAdaptiveNetworkHardeningRules_example.json: %v", err)
	}
}

func TestAllowedConnections_List(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/stable/2020-01-01/examples/AllowedConnections/GetAllowedConnectionsSubscription_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get allowed connections on a subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewAllowedConnectionsClient("3eeab341-f466-499c-a8be-85427e154bad",
		"<asc-location>", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/security/resource-manager/Microsoft.Security/stable/2020-01-01/examples/AllowedConnections/GetAllowedConnectionsSubscription_example.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsecurity.AllowedConnectionsList{
			Value: []*armsecurity.AllowedConnectionsResource{
				{
					Location: to.Ptr("centralus"),
					Name:     to.Ptr("Internal"),
					Type:     to.Ptr("Microsoft.Security/locations/allowedConnections"),
					ID:       to.Ptr("/subscriptions/3eeab341-f466-499c-a8be-85427e154baf/resourceGroups/myResourceGroup/providers/Microsoft.Security/locations/centralus/allowedConnections/Internal"),
					Properties: &armsecurity.AllowedConnectionsResourceProperties{
						CalculatedDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-06T14:55:32.3518545Z"); return t }()),
						ConnectableResources: []*armsecurity.ConnectableResource{
							{
								ID: to.Ptr("/subscriptions/3eeab341-f466-499c-a8be-85427e154baf/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/virtaulMachine1"),
								InboundConnectedResources: []*armsecurity.ConnectedResource{
									{
										ConnectedResourceID: to.Ptr("/subscriptions/3eeab341-f466-499c-a8be-85427e154baf/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/virtaulMachine2"),
										TCPPorts:            to.Ptr("[0-21,23-3388,3390-5984,5987-65535]"),
										UDPPorts:            to.Ptr("[0-21,23-3388,3390-5984,5987-65535]"),
									}},
								OutboundConnectedResources: []*armsecurity.ConnectedResource{
									{
										ConnectedResourceID: to.Ptr("/subscriptions/3eeab341-f466-499c-a8be-85427e154baf/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/virtaulMachine2"),
										TCPPorts:            to.Ptr("[0-21,23-3388,3390-5984,5987-65535]"),
										UDPPorts:            to.Ptr("[0-21,23-3388,3390-5984,5987-65535]"),
									}},
							},
							{
								ID: to.Ptr("/subscriptions/3eeab341-f466-499c-a8be-85427e154baf/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/virtaulMachine2"),
								InboundConnectedResources: []*armsecurity.ConnectedResource{
									{
										ConnectedResourceID: to.Ptr("/subscriptions/3eeab341-f466-499c-a8be-85427e154baf/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/virtaulMachine1"),
										TCPPorts:            to.Ptr("[0-21,23-3388,3390-5984,5987-65535]"),
										UDPPorts:            to.Ptr("[0-21,23-3388,3390-5984,5987-65535]"),
									}},
								OutboundConnectedResources: []*armsecurity.ConnectedResource{
									{
										ConnectedResourceID: to.Ptr("/subscriptions/3eeab341-f466-499c-a8be-85427e154baf/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/virtaulMachine1"),
										TCPPorts:            to.Ptr("[0-21,23-3388,3390-5984,5987-65535]"),
										UDPPorts:            to.Ptr("[0-21,23-3388,3390-5984,5987-65535]"),
									}},
							},
							{
								ID:                         to.Ptr("/subscriptions/3eeab341-f466-499c-a8be-85427e154baf/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/virtaulMachine3"),
								InboundConnectedResources:  []*armsecurity.ConnectedResource{},
								OutboundConnectedResources: []*armsecurity.ConnectedResource{},
							}},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AllowedConnectionsList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AllowedConnectionsList)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/stable/2020-01-01/examples/AllowedConnections/GetAllowedConnectionsSubscription_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAllowedConnections_ListByHomeRegion(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/stable/2020-01-01/examples/AllowedConnections/GetAllowedConnectionsSubscriptionLocation_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get allowed connections on a subscription from security data location"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewAllowedConnectionsClient("3eeab341-f466-499c-a8be-85427e154bad",
		"centralus", cred, &options)
	pager := client.ListByHomeRegion(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/security/resource-manager/Microsoft.Security/stable/2020-01-01/examples/AllowedConnections/GetAllowedConnectionsSubscriptionLocation_example.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsecurity.AllowedConnectionsList{
			Value: []*armsecurity.AllowedConnectionsResource{
				{
					Location: to.Ptr("centralus"),
					Name:     to.Ptr("Internal"),
					Type:     to.Ptr("Microsoft.Security/locations/allowedConnections"),
					ID:       to.Ptr("/subscriptions/3eeab341-f466-499c-a8be-85427e154baf/resourceGroups/myResourceGroup/providers/Microsoft.Security/locations/centralus/allowedConnections/Internal"),
					Properties: &armsecurity.AllowedConnectionsResourceProperties{
						CalculatedDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-06T14:55:32.3518545Z"); return t }()),
						ConnectableResources: []*armsecurity.ConnectableResource{
							{
								ID: to.Ptr("/subscriptions/3eeab341-f466-499c-a8be-85427e154baf/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/virtaulMachine1"),
								InboundConnectedResources: []*armsecurity.ConnectedResource{
									{
										ConnectedResourceID: to.Ptr("/subscriptions/3eeab341-f466-499c-a8be-85427e154baf/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/virtaulMachine2"),
										TCPPorts:            to.Ptr("[0-21,23-3388,3390-5984,5987-65535]"),
										UDPPorts:            to.Ptr("[0-21,23-3388,3390-5984,5987-65535]"),
									}},
								OutboundConnectedResources: []*armsecurity.ConnectedResource{
									{
										ConnectedResourceID: to.Ptr("/subscriptions/3eeab341-f466-499c-a8be-85427e154baf/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/virtaulMachine2"),
										TCPPorts:            to.Ptr("[0-21,23-3388,3390-5984,5987-65535]"),
										UDPPorts:            to.Ptr("[0-21,23-3388,3390-5984,5987-65535]"),
									}},
							},
							{
								ID: to.Ptr("/subscriptions/3eeab341-f466-499c-a8be-85427e154baf/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/virtaulMachine2"),
								InboundConnectedResources: []*armsecurity.ConnectedResource{
									{
										ConnectedResourceID: to.Ptr("/subscriptions/3eeab341-f466-499c-a8be-85427e154baf/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/virtaulMachine1"),
										TCPPorts:            to.Ptr("[0-21,23-3388,3390-5984,5987-65535]"),
										UDPPorts:            to.Ptr("[0-21,23-3388,3390-5984,5987-65535]"),
									}},
								OutboundConnectedResources: []*armsecurity.ConnectedResource{
									{
										ConnectedResourceID: to.Ptr("/subscriptions/3eeab341-f466-499c-a8be-85427e154baf/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/virtaulMachine1"),
										TCPPorts:            to.Ptr("[0-21,23-3388,3390-5984,5987-65535]"),
										UDPPorts:            to.Ptr("[0-21,23-3388,3390-5984,5987-65535]"),
									}},
							},
							{
								ID:                         to.Ptr("/subscriptions/3eeab341-f466-499c-a8be-85427e154baf/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/virtaulMachine3"),
								InboundConnectedResources:  []*armsecurity.ConnectedResource{},
								OutboundConnectedResources: []*armsecurity.ConnectedResource{},
							}},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AllowedConnectionsList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AllowedConnectionsList)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/stable/2020-01-01/examples/AllowedConnections/GetAllowedConnectionsSubscriptionLocation_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAllowedConnections_Get(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/stable/2020-01-01/examples/AllowedConnections/GetAllowedConnections_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get allowed connections"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewAllowedConnectionsClient("3eeab341-f466-499c-a8be-85427e154bad",
		"centralus", cred, &options)
	res, err := client.Get(ctx,
		"myResourceGroup",
		armsecurity.ConnectionTypeInternal,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/stable/2020-01-01/examples/AllowedConnections/GetAllowedConnections_example.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurity.AllowedConnectionsResource{
			Location: to.Ptr("centralus"),
			Name:     to.Ptr("Internal"),
			Type:     to.Ptr("Microsoft.Security/locations/allowedConnections"),
			ID:       to.Ptr("/subscriptions/3eeab341-f466-499c-a8be-85427e154baf/resourceGroups/myResourceGroup/providers/Microsoft.Security/locations/centralus/allowedConnections/Internal"),
			Properties: &armsecurity.AllowedConnectionsResourceProperties{
				CalculatedDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-06T14:55:32.3518545Z"); return t }()),
				ConnectableResources: []*armsecurity.ConnectableResource{
					{
						ID: to.Ptr("/subscriptions/3eeab341-f466-499c-a8be-85427e154baf/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/virtaulMachine1"),
						InboundConnectedResources: []*armsecurity.ConnectedResource{
							{
								ConnectedResourceID: to.Ptr("/subscriptions/3eeab341-f466-499c-a8be-85427e154baf/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/virtaulMachine2"),
								TCPPorts:            to.Ptr("[0-21,23-3388,3390-5984,5987-65535]"),
								UDPPorts:            to.Ptr("[0-21,23-3388,3390-5984,5987-65535]"),
							}},
						OutboundConnectedResources: []*armsecurity.ConnectedResource{
							{
								ConnectedResourceID: to.Ptr("/subscriptions/3eeab341-f466-499c-a8be-85427e154baf/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/virtaulMachine2"),
								TCPPorts:            to.Ptr("[0-21,23-3388,3390-5984,5987-65535]"),
								UDPPorts:            to.Ptr("[0-21,23-3388,3390-5984,5987-65535]"),
							}},
					},
					{
						ID: to.Ptr("/subscriptions/3eeab341-f466-499c-a8be-85427e154baf/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/virtaulMachine2"),
						InboundConnectedResources: []*armsecurity.ConnectedResource{
							{
								ConnectedResourceID: to.Ptr("/subscriptions/3eeab341-f466-499c-a8be-85427e154baf/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/virtaulMachine1"),
								TCPPorts:            to.Ptr("[0-21,23-3388,3390-5984,5987-65535]"),
								UDPPorts:            to.Ptr("[0-21,23-3388,3390-5984,5987-65535]"),
							}},
						OutboundConnectedResources: []*armsecurity.ConnectedResource{
							{
								ConnectedResourceID: to.Ptr("/subscriptions/3eeab341-f466-499c-a8be-85427e154baf/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/virtaulMachine1"),
								TCPPorts:            to.Ptr("[0-21,23-3388,3390-5984,5987-65535]"),
								UDPPorts:            to.Ptr("[0-21,23-3388,3390-5984,5987-65535]"),
							}},
					},
					{
						ID:                         to.Ptr("/subscriptions/3eeab341-f466-499c-a8be-85427e154baf/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/virtaulMachine3"),
						InboundConnectedResources:  []*armsecurity.ConnectedResource{},
						OutboundConnectedResources: []*armsecurity.ConnectedResource{},
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AllowedConnectionsResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AllowedConnectionsResource)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/stable/2020-01-01/examples/AllowedConnections/GetAllowedConnections_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTopology_List(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/stable/2020-01-01/examples/Topology/GetTopologySubscription_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get topology on a subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewTopologyClient("3eeab341-f466-499c-a8be-85427e154bad",
		"<asc-location>", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/security/resource-manager/Microsoft.Security/stable/2020-01-01/examples/Topology/GetTopologySubscription_example.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsecurity.TopologyList{
			Value: []*armsecurity.TopologyResource{
				{
					Location: to.Ptr("westus"),
					Name:     to.Ptr("vnets"),
					Type:     to.Ptr("Microsoft.Security/locations/topologies"),
					ID:       to.Ptr("/subscriptions/3eeab341-f466-499c-a8be-85427e154bad/resourceGroups/myservers/providers/Microsoft.Security/locations/centralus/topologies/vnets"),
					Properties: &armsecurity.TopologyResourceProperties{
						CalculatedDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-07-10T13:56:10.5755270Z"); return t }()),
						TopologyResources: []*armsecurity.TopologySingleResource{
							{
								Children: []*armsecurity.TopologySingleResourceChild{
									{
										ResourceID: to.Ptr("/subscriptions/3eeab341-f466-499c-a8be-85427e154bad/resourceGroups/myservers/providers/Microsoft.Network/virtualNetworks/myvnet/subnets/mysubnet"),
									}},
								Location:             to.Ptr("westus"),
								NetworkZones:         to.Ptr("Internal"),
								RecommendationsExist: to.Ptr(false),
								ResourceID:           to.Ptr("/subscriptions/3eeab341-f466-499c-a8be-85427e154bad/resourceGroups/myservers/providers/Microsoft.Network/virtualNetworks/myvnet"),
								Severity:             to.Ptr("Healthy"),
								TopologyScore:        to.Ptr[int32](0),
							}},
					},
				},
				{
					Location: to.Ptr("westus"),
					Name:     to.Ptr("subnets"),
					Type:     to.Ptr("Microsoft.Security/locations/topologies"),
					ID:       to.Ptr("/subscriptions/3eeab341-f466-499c-a8be-85427e154bad/resourceGroups/myservers/providers/Microsoft.Security/locations/centralus/topologies/subnets"),
					Properties: &armsecurity.TopologyResourceProperties{
						CalculatedDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-07-10T13:56:10.5755270Z"); return t }()),
						TopologyResources: []*armsecurity.TopologySingleResource{
							{
								Location:     to.Ptr("westus"),
								NetworkZones: to.Ptr("Internal"),
								Parents: []*armsecurity.TopologySingleResourceParent{
									{
										ResourceID: to.Ptr("/subscriptions/3eeab341-f466-499c-a8be-85427e154bad/resourceGroups/myservers/providers/Microsoft.Network/virtualNetworks/myvnet"),
									}},
								RecommendationsExist: to.Ptr(false),
								ResourceID:           to.Ptr("/subscriptions/3eeab341-f466-499c-a8be-85427e154bad/resourceGroups/myservers/providers/Microsoft.Network/virtualNetworks/myvnet/subnets/mysubnet"),
								Severity:             to.Ptr("Healthy"),
								TopologyScore:        to.Ptr[int32](5),
							}},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.TopologyList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.TopologyList)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/stable/2020-01-01/examples/Topology/GetTopologySubscription_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTopology_ListByHomeRegion(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/stable/2020-01-01/examples/Topology/GetTopologySubscriptionLocation_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get topology on a subscription from security data location"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewTopologyClient("3eeab341-f466-499c-a8be-85427e154bad",
		"centralus", cred, &options)
	pager := client.ListByHomeRegion(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/security/resource-manager/Microsoft.Security/stable/2020-01-01/examples/Topology/GetTopologySubscriptionLocation_example.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsecurity.TopologyList{
			Value: []*armsecurity.TopologyResource{
				{
					Location: to.Ptr("westus"),
					Name:     to.Ptr("vnets"),
					Type:     to.Ptr("Microsoft.Security/locations/topologies"),
					ID:       to.Ptr("/subscriptions/3eeab341-f466-499c-a8be-85427e154bad/resourceGroups/myservers/providers/Microsoft.Security/locations/centralus/topologies/vnets"),
					Properties: &armsecurity.TopologyResourceProperties{
						CalculatedDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-07-10T13:56:10.5755270Z"); return t }()),
						TopologyResources: []*armsecurity.TopologySingleResource{
							{
								Children: []*armsecurity.TopologySingleResourceChild{
									{
										ResourceID: to.Ptr("/subscriptions/3eeab341-f466-499c-a8be-85427e154bad/resourceGroups/myservers/providers/Microsoft.Network/virtualNetworks/myvnet/subnets/mysubnet"),
									}},
								Location:             to.Ptr("westus"),
								NetworkZones:         to.Ptr("Internal"),
								RecommendationsExist: to.Ptr(false),
								ResourceID:           to.Ptr("/subscriptions/3eeab341-f466-499c-a8be-85427e154bad/resourceGroups/myservers/providers/Microsoft.Network/virtualNetworks/myvnet"),
								Severity:             to.Ptr("Healthy"),
								TopologyScore:        to.Ptr[int32](0),
							}},
					},
				},
				{
					Location: to.Ptr("westus"),
					Name:     to.Ptr("subnets"),
					Type:     to.Ptr("Microsoft.Security/locations/topologies"),
					ID:       to.Ptr("/subscriptions/3eeab341-f466-499c-a8be-85427e154bad/resourceGroups/myservers/providers/Microsoft.Security/locations/centralus/topologies/subnets"),
					Properties: &armsecurity.TopologyResourceProperties{
						CalculatedDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-07-10T13:56:10.5755270Z"); return t }()),
						TopologyResources: []*armsecurity.TopologySingleResource{
							{
								Location:     to.Ptr("westus"),
								NetworkZones: to.Ptr("Internal"),
								Parents: []*armsecurity.TopologySingleResourceParent{
									{
										ResourceID: to.Ptr("/subscriptions/3eeab341-f466-499c-a8be-85427e154bad/resourceGroups/myservers/providers/Microsoft.Network/virtualNetworks/myvnet"),
									}},
								RecommendationsExist: to.Ptr(false),
								ResourceID:           to.Ptr("/subscriptions/3eeab341-f466-499c-a8be-85427e154bad/resourceGroups/myservers/providers/Microsoft.Network/virtualNetworks/myvnet/subnets/mysubnet"),
								Severity:             to.Ptr("Healthy"),
								TopologyScore:        to.Ptr[int32](5),
							}},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.TopologyList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.TopologyList)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/stable/2020-01-01/examples/Topology/GetTopologySubscriptionLocation_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTopology_Get(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/stable/2020-01-01/examples/Topology/GetTopology_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get topology"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewTopologyClient("3eeab341-f466-499c-a8be-85427e154bad",
		"centralus", cred, &options)
	res, err := client.Get(ctx,
		"myservers",
		"vnets",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/stable/2020-01-01/examples/Topology/GetTopology_example.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurity.TopologyResource{
			Location: to.Ptr("westus"),
			Name:     to.Ptr("vnets"),
			Type:     to.Ptr("Microsoft.Security/locations/topologies"),
			ID:       to.Ptr("/subscriptions/3eeab341-f466-499c-a8be-85427e154bad/resourceGroups/myservers/providers/Microsoft.Security/locations/centralus/topologies/vnets"),
			Properties: &armsecurity.TopologyResourceProperties{
				CalculatedDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-07-10T13:56:10.5755270Z"); return t }()),
				TopologyResources: []*armsecurity.TopologySingleResource{
					{
						Children: []*armsecurity.TopologySingleResourceChild{
							{
								ResourceID: to.Ptr("/subscriptions/3eeab341-f466-499c-a8be-85427e154bad/resourceGroups/myservers/providers/Microsoft.Network/virtualNetworks/myvnet/subnets/mysubnet"),
							}},
						Location:             to.Ptr("westus"),
						NetworkZones:         to.Ptr("InternetFacing"),
						RecommendationsExist: to.Ptr(false),
						ResourceID:           to.Ptr("/subscriptions/3eeab341-f466-499c-a8be-85427e154bad/resourceGroups/myservers/providers/Microsoft.Network/virtualNetworks/myvnet"),
						Severity:             to.Ptr("Healthy"),
						TopologyScore:        to.Ptr[int32](0),
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.TopologyResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.TopologyResource)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/stable/2020-01-01/examples/Topology/GetTopology_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestJitNetworkAccessPolicies_List(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/stable/2020-01-01/examples/JitNetworkAccessPolicies/GetJitNetworkAccessPoliciesSubscription_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get JIT network access policies on a subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewJitNetworkAccessPoliciesClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23",
		"<asc-location>", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/security/resource-manager/Microsoft.Security/stable/2020-01-01/examples/JitNetworkAccessPolicies/GetJitNetworkAccessPoliciesSubscription_example.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsecurity.JitNetworkAccessPoliciesList{
			Value: []*armsecurity.JitNetworkAccessPolicy{
				{
					Kind:     to.Ptr("Basic"),
					Location: to.Ptr("westeurope"),
					Name:     to.Ptr("default"),
					Type:     to.Ptr("Microsoft.Security/locations/jitNetworkAccessPolicies"),
					ID:       to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/myRg1/providers/Microsoft.Security/locations/westeurope/jitNetworkAccessPolicies/default"),
					Properties: &armsecurity.JitNetworkAccessPolicyProperties{
						ProvisioningState: to.Ptr("Succeeded"),
						Requests: []*armsecurity.JitNetworkAccessRequest{
							{
								Justification: to.Ptr("testing a new version of the product"),
								Requestor:     to.Ptr("barbara@contoso.com"),
								StartTimeUTC:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-05-17T08:06:45.5691611Z"); return t }()),
								VirtualMachines: []*armsecurity.JitNetworkAccessRequestVirtualMachine{
									{
										ID: to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/myRg1/providers/Microsoft.Compute/virtualMachines/vm1"),
										Ports: []*armsecurity.JitNetworkAccessRequestPort{
											{
												AllowedSourceAddressPrefix: to.Ptr("192.127.0.2"),
												EndTimeUTC:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-05-17T09:06:45.5691611Z"); return t }()),
												Number:                     to.Ptr[int32](3389),
												Status:                     to.Ptr(armsecurity.StatusInitiated),
												StatusReason:               to.Ptr(armsecurity.StatusReasonUserRequested),
											}},
									}},
							}},
						VirtualMachines: []*armsecurity.JitNetworkAccessPolicyVirtualMachine{
							{
								ID: to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/myRg1/providers/Microsoft.Compute/virtualMachines/vm1"),
								Ports: []*armsecurity.JitNetworkAccessPortRule{
									{
										AllowedSourceAddressPrefix: to.Ptr("*"),
										MaxRequestAccessDuration:   to.Ptr("PT3H"),
										Number:                     to.Ptr[int32](22),
										Protocol:                   to.Ptr(armsecurity.ProtocolAll),
									},
									{
										AllowedSourceAddressPrefix: to.Ptr("*"),
										MaxRequestAccessDuration:   to.Ptr("PT3H"),
										Number:                     to.Ptr[int32](3389),
										Protocol:                   to.Ptr(armsecurity.ProtocolAll),
									}},
							}},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.JitNetworkAccessPoliciesList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.JitNetworkAccessPoliciesList)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/stable/2020-01-01/examples/JitNetworkAccessPolicies/GetJitNetworkAccessPoliciesSubscription_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestJitNetworkAccessPolicies_ListByRegion(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/stable/2020-01-01/examples/JitNetworkAccessPolicies/GetJitNetworkAccessPoliciesSubscriptionLocation_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get JIT network access policies on a subscription from a security data location"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewJitNetworkAccessPoliciesClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23",
		"westeurope", cred, &options)
	pager := client.ListByRegion(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/security/resource-manager/Microsoft.Security/stable/2020-01-01/examples/JitNetworkAccessPolicies/GetJitNetworkAccessPoliciesSubscriptionLocation_example.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsecurity.JitNetworkAccessPoliciesList{
			Value: []*armsecurity.JitNetworkAccessPolicy{
				{
					Kind:     to.Ptr("Basic"),
					Location: to.Ptr("westeurope"),
					Name:     to.Ptr("default"),
					Type:     to.Ptr("Microsoft.Security/locations/jitNetworkAccessPolicies"),
					ID:       to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/myRg1/providers/Microsoft.Security/locations/westeurope/jitNetworkAccessPolicies/default"),
					Properties: &armsecurity.JitNetworkAccessPolicyProperties{
						ProvisioningState: to.Ptr("Succeeded"),
						Requests: []*armsecurity.JitNetworkAccessRequest{
							{
								Justification: to.Ptr("testing a new version of the product"),
								Requestor:     to.Ptr("barbara@contoso.com"),
								StartTimeUTC:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-05-17T08:06:45.5691611Z"); return t }()),
								VirtualMachines: []*armsecurity.JitNetworkAccessRequestVirtualMachine{
									{
										ID: to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/myRg1/providers/Microsoft.Compute/virtualMachines/vm1"),
										Ports: []*armsecurity.JitNetworkAccessRequestPort{
											{
												AllowedSourceAddressPrefix: to.Ptr("192.127.0.2"),
												EndTimeUTC:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-05-17T09:06:45.5691611Z"); return t }()),
												Number:                     to.Ptr[int32](3389),
												Status:                     to.Ptr(armsecurity.StatusInitiated),
												StatusReason:               to.Ptr(armsecurity.StatusReasonUserRequested),
											}},
									}},
							}},
						VirtualMachines: []*armsecurity.JitNetworkAccessPolicyVirtualMachine{
							{
								ID: to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/myRg1/providers/Microsoft.Compute/virtualMachines/vm1"),
								Ports: []*armsecurity.JitNetworkAccessPortRule{
									{
										AllowedSourceAddressPrefix: to.Ptr("*"),
										MaxRequestAccessDuration:   to.Ptr("PT3H"),
										Number:                     to.Ptr[int32](22),
										Protocol:                   to.Ptr(armsecurity.ProtocolAll),
									},
									{
										AllowedSourceAddressPrefix: to.Ptr("*"),
										MaxRequestAccessDuration:   to.Ptr("PT3H"),
										Number:                     to.Ptr[int32](3389),
										Protocol:                   to.Ptr(armsecurity.ProtocolAll),
									}},
							}},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.JitNetworkAccessPoliciesList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.JitNetworkAccessPoliciesList)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/stable/2020-01-01/examples/JitNetworkAccessPolicies/GetJitNetworkAccessPoliciesSubscriptionLocation_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestJitNetworkAccessPolicies_ListByResourceGroup(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/stable/2020-01-01/examples/JitNetworkAccessPolicies/GetJitNetworkAccessPoliciesResourceGroup_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get JIT network access policies on a resource group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewJitNetworkAccessPoliciesClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23",
		"<asc-location>", cred, &options)
	pager := client.ListByResourceGroup("myRg1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/security/resource-manager/Microsoft.Security/stable/2020-01-01/examples/JitNetworkAccessPolicies/GetJitNetworkAccessPoliciesResourceGroup_example.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsecurity.JitNetworkAccessPoliciesList{
			Value: []*armsecurity.JitNetworkAccessPolicy{
				{
					Kind:     to.Ptr("Basic"),
					Location: to.Ptr("westeurope"),
					Name:     to.Ptr("default"),
					Type:     to.Ptr("Microsoft.Security/locations/jitNetworkAccessPolicies"),
					ID:       to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/myRg1/providers/Microsoft.Security/locations/westeurope/jitNetworkAccessPolicies/default"),
					Properties: &armsecurity.JitNetworkAccessPolicyProperties{
						ProvisioningState: to.Ptr("Succeeded"),
						Requests: []*armsecurity.JitNetworkAccessRequest{
							{
								Justification: to.Ptr("testing a new version of the product"),
								Requestor:     to.Ptr("barbara@contoso.com"),
								StartTimeUTC:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-05-17T08:06:45.5691611Z"); return t }()),
								VirtualMachines: []*armsecurity.JitNetworkAccessRequestVirtualMachine{
									{
										ID: to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/myRg1/providers/Microsoft.Compute/virtualMachines/vm1"),
										Ports: []*armsecurity.JitNetworkAccessRequestPort{
											{
												AllowedSourceAddressPrefix: to.Ptr("192.127.0.2"),
												EndTimeUTC:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-05-17T09:06:45.5691611Z"); return t }()),
												Number:                     to.Ptr[int32](3389),
												Status:                     to.Ptr(armsecurity.StatusInitiated),
												StatusReason:               to.Ptr(armsecurity.StatusReasonUserRequested),
											}},
									}},
							}},
						VirtualMachines: []*armsecurity.JitNetworkAccessPolicyVirtualMachine{
							{
								ID: to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/myRg1/providers/Microsoft.Compute/virtualMachines/vm1"),
								Ports: []*armsecurity.JitNetworkAccessPortRule{
									{
										AllowedSourceAddressPrefix: to.Ptr("*"),
										MaxRequestAccessDuration:   to.Ptr("PT3H"),
										Number:                     to.Ptr[int32](22),
										Protocol:                   to.Ptr(armsecurity.ProtocolAll),
									},
									{
										AllowedSourceAddressPrefix: to.Ptr("*"),
										MaxRequestAccessDuration:   to.Ptr("PT3H"),
										Number:                     to.Ptr[int32](3389),
										Protocol:                   to.Ptr(armsecurity.ProtocolAll),
									}},
							}},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.JitNetworkAccessPoliciesList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.JitNetworkAccessPoliciesList)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/stable/2020-01-01/examples/JitNetworkAccessPolicies/GetJitNetworkAccessPoliciesResourceGroup_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestJitNetworkAccessPolicies_ListByResourceGroupAndRegion(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/stable/2020-01-01/examples/JitNetworkAccessPolicies/GetJitNetworkAccessPoliciesResourceGroupLocation_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get JIT network access policies on a resource group from a security data location"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewJitNetworkAccessPoliciesClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23",
		"westeurope", cred, &options)
	pager := client.ListByResourceGroupAndRegion("myRg1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/security/resource-manager/Microsoft.Security/stable/2020-01-01/examples/JitNetworkAccessPolicies/GetJitNetworkAccessPoliciesResourceGroupLocation_example.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsecurity.JitNetworkAccessPoliciesList{
			Value: []*armsecurity.JitNetworkAccessPolicy{
				{
					Kind:     to.Ptr("Basic"),
					Location: to.Ptr("westeurope"),
					Name:     to.Ptr("default"),
					Type:     to.Ptr("Microsoft.Security/locations/jitNetworkAccessPolicies"),
					ID:       to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/myRg1/providers/Microsoft.Security/locations/westeurope/jitNetworkAccessPolicies/default"),
					Properties: &armsecurity.JitNetworkAccessPolicyProperties{
						ProvisioningState: to.Ptr("Succeeded"),
						Requests: []*armsecurity.JitNetworkAccessRequest{
							{
								Justification: to.Ptr("testing a new version of the product"),
								Requestor:     to.Ptr("barbara@contoso.com"),
								StartTimeUTC:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-05-17T08:06:45.5691611Z"); return t }()),
								VirtualMachines: []*armsecurity.JitNetworkAccessRequestVirtualMachine{
									{
										ID: to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/myRg1/providers/Microsoft.Compute/virtualMachines/vm1"),
										Ports: []*armsecurity.JitNetworkAccessRequestPort{
											{
												AllowedSourceAddressPrefix: to.Ptr("192.127.0.2"),
												EndTimeUTC:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-05-17T09:06:45.5691611Z"); return t }()),
												Number:                     to.Ptr[int32](3389),
												Status:                     to.Ptr(armsecurity.StatusInitiated),
												StatusReason:               to.Ptr(armsecurity.StatusReasonUserRequested),
											}},
									}},
							}},
						VirtualMachines: []*armsecurity.JitNetworkAccessPolicyVirtualMachine{
							{
								ID: to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/myRg1/providers/Microsoft.Compute/virtualMachines/vm1"),
								Ports: []*armsecurity.JitNetworkAccessPortRule{
									{
										AllowedSourceAddressPrefix: to.Ptr("*"),
										MaxRequestAccessDuration:   to.Ptr("PT3H"),
										Number:                     to.Ptr[int32](22),
										Protocol:                   to.Ptr(armsecurity.ProtocolAll),
									},
									{
										AllowedSourceAddressPrefix: to.Ptr("*"),
										MaxRequestAccessDuration:   to.Ptr("PT3H"),
										Number:                     to.Ptr[int32](3389),
										Protocol:                   to.Ptr(armsecurity.ProtocolAll),
									}},
							}},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.JitNetworkAccessPoliciesList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.JitNetworkAccessPoliciesList)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/stable/2020-01-01/examples/JitNetworkAccessPolicies/GetJitNetworkAccessPoliciesResourceGroupLocation_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestJitNetworkAccessPolicies_Get(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/stable/2020-01-01/examples/JitNetworkAccessPolicies/GetJitNetworkAccessPolicy_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get JIT network access policy"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewJitNetworkAccessPoliciesClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23",
		"westeurope", cred, &options)
	res, err := client.Get(ctx,
		"myRg1",
		"default",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/stable/2020-01-01/examples/JitNetworkAccessPolicies/GetJitNetworkAccessPolicy_example.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurity.JitNetworkAccessPolicy{
			Kind:     to.Ptr("Basic"),
			Location: to.Ptr("westeurope"),
			Name:     to.Ptr("default"),
			Type:     to.Ptr("Microsoft.Security/locations/jitNetworkAccessPolicies"),
			ID:       to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/myRg1/providers/Microsoft.Security/locations/westeurope/jitNetworkAccessPolicies/default"),
			Properties: &armsecurity.JitNetworkAccessPolicyProperties{
				ProvisioningState: to.Ptr("Succeeded"),
				Requests: []*armsecurity.JitNetworkAccessRequest{
					{
						Justification: to.Ptr("testing a new version of the product"),
						Requestor:     to.Ptr("barbara@contoso.com"),
						StartTimeUTC:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-05-17T08:06:45.5691611Z"); return t }()),
						VirtualMachines: []*armsecurity.JitNetworkAccessRequestVirtualMachine{
							{
								ID: to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/myRg1/providers/Microsoft.Compute/virtualMachines/vm1"),
								Ports: []*armsecurity.JitNetworkAccessRequestPort{
									{
										AllowedSourceAddressPrefix: to.Ptr("192.127.0.2"),
										EndTimeUTC:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-05-17T09:06:45.5691611Z"); return t }()),
										Number:                     to.Ptr[int32](3389),
										Status:                     to.Ptr(armsecurity.StatusInitiated),
										StatusReason:               to.Ptr(armsecurity.StatusReasonUserRequested),
									}},
							}},
					}},
				VirtualMachines: []*armsecurity.JitNetworkAccessPolicyVirtualMachine{
					{
						ID: to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/myRg1/providers/Microsoft.Compute/virtualMachines/vm1"),
						Ports: []*armsecurity.JitNetworkAccessPortRule{
							{
								AllowedSourceAddressPrefix: to.Ptr("*"),
								MaxRequestAccessDuration:   to.Ptr("PT3H"),
								Number:                     to.Ptr[int32](22),
								Protocol:                   to.Ptr(armsecurity.ProtocolAll),
							},
							{
								AllowedSourceAddressPrefix: to.Ptr("*"),
								MaxRequestAccessDuration:   to.Ptr("PT3H"),
								Number:                     to.Ptr[int32](3389),
								Protocol:                   to.Ptr(armsecurity.ProtocolAll),
							}},
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.JitNetworkAccessPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.JitNetworkAccessPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/stable/2020-01-01/examples/JitNetworkAccessPolicies/GetJitNetworkAccessPolicy_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestJitNetworkAccessPolicies_CreateOrUpdate(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/stable/2020-01-01/examples/JitNetworkAccessPolicies/CreateJitNetworkAccessPolicy_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create JIT network access policy"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewJitNetworkAccessPoliciesClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23",
		"westeurope", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"myRg1",
		"default",
		armsecurity.JitNetworkAccessPolicy{
			Kind:     to.Ptr("Basic"),
			Location: to.Ptr("westeurope"),
			Name:     to.Ptr("default"),
			Type:     to.Ptr("Microsoft.Security/locations/jitNetworkAccessPolicies"),
			ID:       to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/myRg1/providers/Microsoft.Security/locations/westeurope/jitNetworkAccessPolicies/default"),
			Properties: &armsecurity.JitNetworkAccessPolicyProperties{
				ProvisioningState: to.Ptr("Succeeded"),
				Requests: []*armsecurity.JitNetworkAccessRequest{
					{
						Requestor:    to.Ptr("barbara@contoso.com"),
						StartTimeUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-05-17T08:06:45.5691611Z"); return t }()),
						VirtualMachines: []*armsecurity.JitNetworkAccessRequestVirtualMachine{
							{
								ID: to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/myRg1/providers/Microsoft.Compute/virtualMachines/vm1"),
								Ports: []*armsecurity.JitNetworkAccessRequestPort{
									{
										AllowedSourceAddressPrefix: to.Ptr("192.127.0.2"),
										EndTimeUTC:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-05-17T09:06:45.5691611Z"); return t }()),
										Number:                     to.Ptr[int32](3389),
										Status:                     to.Ptr(armsecurity.StatusInitiated),
										StatusReason:               to.Ptr(armsecurity.StatusReasonUserRequested),
									}},
							}},
					}},
				VirtualMachines: []*armsecurity.JitNetworkAccessPolicyVirtualMachine{
					{
						ID: to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/myRg1/providers/Microsoft.Compute/virtualMachines/vm1"),
						Ports: []*armsecurity.JitNetworkAccessPortRule{
							{
								AllowedSourceAddressPrefix: to.Ptr("*"),
								MaxRequestAccessDuration:   to.Ptr("PT3H"),
								Number:                     to.Ptr[int32](22),
								Protocol:                   to.Ptr(armsecurity.ProtocolAll),
							},
							{
								AllowedSourceAddressPrefix: to.Ptr("*"),
								MaxRequestAccessDuration:   to.Ptr("PT3H"),
								Number:                     to.Ptr[int32](3389),
								Protocol:                   to.Ptr(armsecurity.ProtocolAll),
							}},
					}},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/stable/2020-01-01/examples/JitNetworkAccessPolicies/CreateJitNetworkAccessPolicy_example.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurity.JitNetworkAccessPolicy{
			Kind:     to.Ptr("Basic"),
			Location: to.Ptr("westeurope"),
			Name:     to.Ptr("default"),
			Type:     to.Ptr("Microsoft.Security/locations/jitNetworkAccessPolicies"),
			ID:       to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/myRg1/providers/Microsoft.Security/locations/westeurope/jitNetworkAccessPolicies/default"),
			Properties: &armsecurity.JitNetworkAccessPolicyProperties{
				ProvisioningState: to.Ptr("Succeeded"),
				Requests: []*armsecurity.JitNetworkAccessRequest{
					{
						Requestor:    to.Ptr("barbara@contoso.com"),
						StartTimeUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-05-17T08:06:45.5691611Z"); return t }()),
						VirtualMachines: []*armsecurity.JitNetworkAccessRequestVirtualMachine{
							{
								ID: to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/myRg1/providers/Microsoft.Compute/virtualMachines/vm1"),
								Ports: []*armsecurity.JitNetworkAccessRequestPort{
									{
										AllowedSourceAddressPrefix: to.Ptr("192.127.0.2"),
										EndTimeUTC:                 to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-05-17T09:06:45.5691611Z"); return t }()),
										Number:                     to.Ptr[int32](3389),
										Status:                     to.Ptr(armsecurity.StatusInitiated),
										StatusReason:               to.Ptr(armsecurity.StatusReasonUserRequested),
									}},
							}},
					}},
				VirtualMachines: []*armsecurity.JitNetworkAccessPolicyVirtualMachine{
					{
						ID: to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/myRg1/providers/Microsoft.Compute/virtualMachines/vm1"),
						Ports: []*armsecurity.JitNetworkAccessPortRule{
							{
								AllowedSourceAddressPrefix: to.Ptr("*"),
								MaxRequestAccessDuration:   to.Ptr("PT3H"),
								Number:                     to.Ptr[int32](22),
								Protocol:                   to.Ptr(armsecurity.ProtocolAll),
							},
							{
								AllowedSourceAddressPrefix: to.Ptr("*"),
								MaxRequestAccessDuration:   to.Ptr("PT3H"),
								Number:                     to.Ptr[int32](3389),
								Protocol:                   to.Ptr(armsecurity.ProtocolAll),
							}},
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.JitNetworkAccessPolicy) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.JitNetworkAccessPolicy)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/stable/2020-01-01/examples/JitNetworkAccessPolicies/CreateJitNetworkAccessPolicy_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestJitNetworkAccessPolicies_Delete(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/stable/2020-01-01/examples/JitNetworkAccessPolicies/DeleteJitNetworkAccessPolicy_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a JIT network access policy"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewJitNetworkAccessPoliciesClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23",
		"westeurope", cred, &options)
	_, err := client.Delete(ctx,
		"myRg1",
		"default",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/stable/2020-01-01/examples/JitNetworkAccessPolicies/DeleteJitNetworkAccessPolicy_example.json: %v", err)
	}
}

func TestJitNetworkAccessPolicies_Initiate(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/stable/2020-01-01/examples/JitNetworkAccessPolicies/InitiateJitNetworkAccessPolicy_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Initiate an action on a JIT network access policy"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewJitNetworkAccessPoliciesClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23",
		"westeurope", cred, &options)
	_, err := client.Initiate(ctx,
		"myRg1",
		"default",
		armsecurity.Enum56Initiate,
		armsecurity.JitNetworkAccessPolicyInitiateRequest{
			Justification: to.Ptr("testing a new version of the product"),
			VirtualMachines: []*armsecurity.JitNetworkAccessPolicyInitiateVirtualMachine{
				{
					ID: to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/myRg1/providers/Microsoft.Compute/virtualMachines/vm1"),
					Ports: []*armsecurity.JitNetworkAccessPolicyInitiatePort{
						{
							AllowedSourceAddressPrefix: to.Ptr("192.127.0.2"),
							Number:                     to.Ptr[int32](3389),
						}},
				}},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/stable/2020-01-01/examples/JitNetworkAccessPolicies/InitiateJitNetworkAccessPolicy_example.json: %v", err)
	}
}

func TestDiscoveredSecuritySolutions_List(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/stable/2020-01-01/examples/DiscoveredSecuritySolutions/GetDiscoveredSecuritySolutionsSubscription_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get discovered security solutions"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewDiscoveredSecuritySolutionsClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23",
		"<asc-location>", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/security/resource-manager/Microsoft.Security/stable/2020-01-01/examples/DiscoveredSecuritySolutions/GetDiscoveredSecuritySolutionsSubscription_example.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsecurity.DiscoveredSecuritySolutionList{
			Value: []*armsecurity.DiscoveredSecuritySolution{
				{
					Location: to.Ptr("eastus"),
					Name:     to.Ptr("CP"),
					Type:     to.Ptr("Microsoft.Security/locations/discoveredSecuritySolutions"),
					ID:       to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/myRg1/providers/Microsoft.Security/locations/centralus/discoveredSecuritySolutions/CP"),
					Properties: &armsecurity.DiscoveredSecuritySolutionProperties{
						Offer:          to.Ptr("cisco-asav"),
						Publisher:      to.Ptr("cisco"),
						SecurityFamily: to.Ptr(armsecurity.SecurityFamilyNgfw),
						SKU:            to.Ptr("asav-azure-byol"),
					},
				},
				{
					Location: to.Ptr("eastus2"),
					Name:     to.Ptr("paloalto7"),
					Type:     to.Ptr("Microsoft.Security/locations/discoveredSecuritySolutions"),
					ID:       to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/myRg2/providers/Microsoft.Security/locations/centralus/discoveredSecuritySolutions/paloalto7"),
					Properties: &armsecurity.DiscoveredSecuritySolutionProperties{
						Offer:          to.Ptr("vmseries1"),
						Publisher:      to.Ptr("paloaltonetworks"),
						SecurityFamily: to.Ptr(armsecurity.SecurityFamilyNgfw),
						SKU:            to.Ptr("byol"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DiscoveredSecuritySolutionList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DiscoveredSecuritySolutionList)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/stable/2020-01-01/examples/DiscoveredSecuritySolutions/GetDiscoveredSecuritySolutionsSubscription_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDiscoveredSecuritySolutions_ListByHomeRegion(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/stable/2020-01-01/examples/DiscoveredSecuritySolutions/GetDiscoveredSecuritySolutionsSubscriptionLocation_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get discovered security solutions from a security data location"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewDiscoveredSecuritySolutionsClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23",
		"centralus", cred, &options)
	pager := client.ListByHomeRegion(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/security/resource-manager/Microsoft.Security/stable/2020-01-01/examples/DiscoveredSecuritySolutions/GetDiscoveredSecuritySolutionsSubscriptionLocation_example.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsecurity.DiscoveredSecuritySolutionList{
			Value: []*armsecurity.DiscoveredSecuritySolution{
				{
					Location: to.Ptr("eastus"),
					Name:     to.Ptr("CP"),
					Type:     to.Ptr("Microsoft.Security/locations/discoveredSecuritySolutions"),
					ID:       to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/myRg1/providers/Microsoft.Security/locations/centralus/discoveredSecuritySolutions/CP"),
					Properties: &armsecurity.DiscoveredSecuritySolutionProperties{
						Offer:          to.Ptr("cisco-asav"),
						Publisher:      to.Ptr("cisco"),
						SecurityFamily: to.Ptr(armsecurity.SecurityFamilyNgfw),
						SKU:            to.Ptr("asav-azure-byol"),
					},
				},
				{
					Location: to.Ptr("eastus2"),
					Name:     to.Ptr("paloalto7"),
					Type:     to.Ptr("Microsoft.Security/locations/discoveredSecuritySolutions"),
					ID:       to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/myRg2/providers/Microsoft.Security/locations/centralus/discoveredSecuritySolutions/paloalto7"),
					Properties: &armsecurity.DiscoveredSecuritySolutionProperties{
						Offer:          to.Ptr("vmseries1"),
						Publisher:      to.Ptr("paloaltonetworks"),
						SecurityFamily: to.Ptr(armsecurity.SecurityFamilyNgfw),
						SKU:            to.Ptr("byol"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DiscoveredSecuritySolutionList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DiscoveredSecuritySolutionList)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/stable/2020-01-01/examples/DiscoveredSecuritySolutions/GetDiscoveredSecuritySolutionsSubscriptionLocation_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDiscoveredSecuritySolutions_Get(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/stable/2020-01-01/examples/DiscoveredSecuritySolutions/GetDiscoveredSecuritySolutionResourceGroupLocation_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get discovered security solution from a security data location"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewDiscoveredSecuritySolutionsClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23",
		"centralus", cred, &options)
	res, err := client.Get(ctx,
		"myRg2",
		"paloalto7",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/stable/2020-01-01/examples/DiscoveredSecuritySolutions/GetDiscoveredSecuritySolutionResourceGroupLocation_example.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurity.DiscoveredSecuritySolution{
			Location: to.Ptr("eastus2"),
			Name:     to.Ptr("paloalto7"),
			Type:     to.Ptr("Microsoft.Security/locations/discoveredSecuritySolutions"),
			ID:       to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/myRg2/providers/Microsoft.Security/locations/centralus/discoveredSecuritySolutions/paloalto7"),
			Properties: &armsecurity.DiscoveredSecuritySolutionProperties{
				Offer:          to.Ptr("vmseries1"),
				Publisher:      to.Ptr("paloaltonetworks"),
				SecurityFamily: to.Ptr(armsecurity.SecurityFamilyNgfw),
				SKU:            to.Ptr("byol"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DiscoveredSecuritySolution) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DiscoveredSecuritySolution)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/stable/2020-01-01/examples/DiscoveredSecuritySolutions/GetDiscoveredSecuritySolutionResourceGroupLocation_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSecuritySolutionsReferenceData_List(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/stable/2020-01-01/examples/SecuritySolutionsReferenceData/GetSecuritySolutionsReferenceDataSubscription_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get security solutions"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewSolutionsReferenceDataClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23",
		"<asc-location>", cred, &options)
	res, err := client.List(ctx,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/stable/2020-01-01/examples/SecuritySolutionsReferenceData/GetSecuritySolutionsReferenceDataSubscription_example.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurity.SolutionsReferenceDataList{
			Value: []*armsecurity.SolutionsReferenceData{
				{
					Name: to.Ptr("microsoft.ApplicationGateway-ARM"),
					Type: to.Ptr("Microsoft.Security/locations/securitySolutionsReferenceData"),
					ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/locations/westcentralus/securitySolutionsReferenceData/microsoft.ApplicationGateway-ARM"),
					Properties: &armsecurity.SolutionsReferenceDataProperties{
						AlertVendorName:      to.Ptr("Microsoft"),
						PackageInfoURL:       to.Ptr("www.azure.com"),
						ProductName:          to.Ptr("Web Application Firewall"),
						Publisher:            to.Ptr("microsoft"),
						PublisherDisplayName: to.Ptr("Microsoft Inc."),
						SecurityFamily:       to.Ptr(armsecurity.SecurityFamilySaasWaf),
						Template:             to.Ptr("microsoft/ApplicationGateway-ARM"),
					},
				},
				{
					Name: to.Ptr("qualys.qualysAgent"),
					Type: to.Ptr("Microsoft.Security/locations/SecuritySolutions"),
					ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/locations/westcentralus/securitySolutionsReferenceData/qualys.qualysAgent"),
					Properties: &armsecurity.SolutionsReferenceDataProperties{
						AlertVendorName:      to.Ptr("Qualys VA"),
						PackageInfoURL:       to.Ptr("http://www.qualys.com/"),
						ProductName:          to.Ptr("Vulnerability Assessment"),
						Publisher:            to.Ptr("qualys"),
						PublisherDisplayName: to.Ptr("Qualys, Inc."),
						SecurityFamily:       to.Ptr(armsecurity.SecurityFamilyVa),
						Template:             to.Ptr("qualys/qualysAgent"),
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.SolutionsReferenceDataList) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SolutionsReferenceDataList)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/stable/2020-01-01/examples/SecuritySolutionsReferenceData/GetSecuritySolutionsReferenceDataSubscription_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSecuritySolutionsReferenceData_ListByHomeRegion(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/stable/2020-01-01/examples/SecuritySolutionsReferenceData/GetSecuritySolutionsReferenceDataSubscriptionLocation_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get security solutions from a security data location"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewSolutionsReferenceDataClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23",
		"westcentralus", cred, &options)
	res, err := client.ListByHomeRegion(ctx,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/stable/2020-01-01/examples/SecuritySolutionsReferenceData/GetSecuritySolutionsReferenceDataSubscriptionLocation_example.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurity.SolutionsReferenceDataList{
			Value: []*armsecurity.SolutionsReferenceData{
				{
					Name: to.Ptr("microsoft.ApplicationGateway-ARM"),
					Type: to.Ptr("Microsoft.Security/locations/securitySolutionsReferenceData"),
					ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/locations/westcentralus/securitySolutionsReferenceData/microsoft.ApplicationGateway-ARM"),
					Properties: &armsecurity.SolutionsReferenceDataProperties{
						AlertVendorName:      to.Ptr("Microsoft"),
						PackageInfoURL:       to.Ptr("www.azure.com"),
						ProductName:          to.Ptr("Web Application Firewall"),
						Publisher:            to.Ptr("microsoft"),
						PublisherDisplayName: to.Ptr("Microsoft Inc."),
						SecurityFamily:       to.Ptr(armsecurity.SecurityFamilySaasWaf),
						Template:             to.Ptr("microsoft/ApplicationGateway-ARM"),
					},
				},
				{
					Name: to.Ptr("qualys.qualysAgent"),
					Type: to.Ptr("Microsoft.Security/locations/SecuritySolutions"),
					ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/locations/westcentralus/securitySolutionsReferenceData/qualys.qualysAgent"),
					Properties: &armsecurity.SolutionsReferenceDataProperties{
						AlertVendorName:      to.Ptr("Qualys VA"),
						PackageInfoURL:       to.Ptr("http://www.qualys.com/"),
						ProductName:          to.Ptr("Vulnerability Assessment"),
						Publisher:            to.Ptr("qualys"),
						PublisherDisplayName: to.Ptr("Qualys, Inc."),
						SecurityFamily:       to.Ptr(armsecurity.SecurityFamilyVa),
						Template:             to.Ptr("qualys/qualysAgent"),
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.SolutionsReferenceDataList) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SolutionsReferenceDataList)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/stable/2020-01-01/examples/SecuritySolutionsReferenceData/GetSecuritySolutionsReferenceDataSubscriptionLocation_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestExternalSecuritySolutions_List(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/stable/2020-01-01/examples/ExternalSecuritySolutions/GetExternalSecuritySolutionsSubscription_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get external security solutions on a subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewExternalSecuritySolutionsClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23",
		"<asc-location>", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/security/resource-manager/Microsoft.Security/stable/2020-01-01/examples/ExternalSecuritySolutions/GetExternalSecuritySolutionsSubscription_example.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsecurity.ExternalSecuritySolutionList{
			Value: []*armsecurity.ExternalSecuritySolution{
				{
					Kind:     to.Ptr(armsecurity.ExternalSecuritySolutionKindAAD),
					Location: to.Ptr("eastus"),
					Name:     to.Ptr("aad_defaultworkspace-20ff7fc3-e762-44dd-bd96-b71116dcdc23-eus"),
					Type:     to.Ptr("Microsoft.Security/locations/externalSecuritySolutions"),
					ID:       to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/defaultresourcegroup-eus/providers/Microsoft.Security/locations/centralus/externalSecuritySolutions/aad_defaultworkspace-20ff7fc3-e762-44dd-bd96-b71116dcdc23-eus"),
				},
				{
					Kind:     to.Ptr(armsecurity.ExternalSecuritySolutionKindAAD),
					Location: to.Ptr("westeurope"),
					Name:     to.Ptr("aad_defaultworkspace-20ff7fc3-e762-44dd-bd96-b71116dcdc23-weu"),
					Type:     to.Ptr("Microsoft.Security/locations/externalSecuritySolutions"),
					ID:       to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/defaultresourcegroup-weu/providers/Microsoft.Security/locations/centralus/externalSecuritySolutions/aad_defaultworkspace-20ff7fc3-e762-44dd-bd96-b71116dcdc23-weu"),
				},
				{
					Kind:     to.Ptr(armsecurity.ExternalSecuritySolutionKindCEF),
					Location: to.Ptr("westcentralus"),
					Name:     to.Ptr("cef_omsprd_barracudanetworks_waf_barracuda"),
					Type:     to.Ptr("Microsoft.Security/locations/externalSecuritySolutions"),
					ID:       to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/unificationprod/providers/Microsoft.Security/locations/centralus/externalSecuritySolutions/cef_omsprd_barracudanetworks_waf_barracuda"),
				},
				{
					Kind:     to.Ptr(armsecurity.ExternalSecuritySolutionKindCEF),
					Location: to.Ptr("westcentralus"),
					Name:     to.Ptr("cef_omsprd_virtualhoneypot_Microsoft_demovm20"),
					Type:     to.Ptr("Microsoft.Security/locations/externalSecuritySolutions"),
					ID:       to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/unificationprod/providers/Microsoft.Security/locations/centralus/externalSecuritySolutions/cef_omsprd_virtualhoneypot_Microsoft_demovm20"),
				},
				{
					Kind:     to.Ptr(armsecurity.ExternalSecuritySolutionKindCEF),
					Location: to.Ptr("westcentralus"),
					Name:     to.Ptr("cef_omsprd_virtualhoneypot_Microsoft_demovm10"),
					Type:     to.Ptr("Microsoft.Security/locations/externalSecuritySolutions"),
					ID:       to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/unificationprod/providers/Microsoft.Security/locations/centralus/externalSecuritySolutions/cef_omsprd_virtualhoneypot_Microsoft_demovm10"),
				},
				{
					Kind:     to.Ptr(armsecurity.ExternalSecuritySolutionKindAAD),
					Location: to.Ptr("westcentralus"),
					Name:     to.Ptr("aad_omsprd"),
					Type:     to.Ptr("Microsoft.Security/locations/externalSecuritySolutions"),
					ID:       to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/unificationprod/providers/Microsoft.Security/locations/centralus/externalSecuritySolutions/aad_omsprd"),
				},
				{
					Kind:     to.Ptr(armsecurity.ExternalSecuritySolutionKindAAD),
					Location: to.Ptr("japaneast"),
					Name:     to.Ptr("aad_defaultworkspace-20ff7fc3-e762-44dd-bd96-b71116dcdc23-ejp"),
					Type:     to.Ptr("Microsoft.Security/locations/externalSecuritySolutions"),
					ID:       to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/defaultresourcegroup-ejp/providers/Microsoft.Security/locations/centralus/externalSecuritySolutions/aad_defaultworkspace-20ff7fc3-e762-44dd-bd96-b71116dcdc23-ejp"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ExternalSecuritySolutionList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ExternalSecuritySolutionList)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/stable/2020-01-01/examples/ExternalSecuritySolutions/GetExternalSecuritySolutionsSubscription_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestExternalSecuritySolutions_ListByHomeRegion(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/stable/2020-01-01/examples/ExternalSecuritySolutions/GetExternalSecuritySolutionsSubscriptionLocation_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get external security solutions on a subscription from security data location"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewExternalSecuritySolutionsClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23",
		"centralus", cred, &options)
	pager := client.ListByHomeRegion(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/security/resource-manager/Microsoft.Security/stable/2020-01-01/examples/ExternalSecuritySolutions/GetExternalSecuritySolutionsSubscriptionLocation_example.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsecurity.ExternalSecuritySolutionList{
			Value: []*armsecurity.ExternalSecuritySolution{
				{
					Kind:     to.Ptr(armsecurity.ExternalSecuritySolutionKindAAD),
					Location: to.Ptr("eastus"),
					Name:     to.Ptr("aad_defaultworkspace-20ff7fc3-e762-44dd-bd96-b71116dcdc23-eus"),
					Type:     to.Ptr("Microsoft.Security/locations/externalSecuritySolutions"),
					ID:       to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/defaultresourcegroup-eus/providers/Microsoft.Security/locations/centralus/externalSecuritySolutions/aad_defaultworkspace-20ff7fc3-e762-44dd-bd96-b71116dcdc23-eus"),
				},
				{
					Kind:     to.Ptr(armsecurity.ExternalSecuritySolutionKindAAD),
					Location: to.Ptr("westeurope"),
					Name:     to.Ptr("aad_defaultworkspace-20ff7fc3-e762-44dd-bd96-b71116dcdc23-weu"),
					Type:     to.Ptr("Microsoft.Security/locations/externalSecuritySolutions"),
					ID:       to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/defaultresourcegroup-weu/providers/Microsoft.Security/locations/centralus/externalSecuritySolutions/aad_defaultworkspace-20ff7fc3-e762-44dd-bd96-b71116dcdc23-weu"),
				},
				{
					Kind:     to.Ptr(armsecurity.ExternalSecuritySolutionKindCEF),
					Location: to.Ptr("westcentralus"),
					Name:     to.Ptr("cef_omsprd_barracudanetworks_waf_barracuda"),
					Type:     to.Ptr("Microsoft.Security/locations/externalSecuritySolutions"),
					ID:       to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/unificationprod/providers/Microsoft.Security/locations/centralus/externalSecuritySolutions/cef_omsprd_barracudanetworks_waf_barracuda"),
				},
				{
					Kind:     to.Ptr(armsecurity.ExternalSecuritySolutionKindCEF),
					Location: to.Ptr("westcentralus"),
					Name:     to.Ptr("cef_omsprd_virtualhoneypot_Microsoft_demovm20"),
					Type:     to.Ptr("Microsoft.Security/locations/externalSecuritySolutions"),
					ID:       to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/unificationprod/providers/Microsoft.Security/locations/centralus/externalSecuritySolutions/cef_omsprd_virtualhoneypot_Microsoft_demovm20"),
				},
				{
					Kind:     to.Ptr(armsecurity.ExternalSecuritySolutionKindCEF),
					Location: to.Ptr("westcentralus"),
					Name:     to.Ptr("cef_omsprd_virtualhoneypot_Microsoft_demovm10"),
					Type:     to.Ptr("Microsoft.Security/locations/externalSecuritySolutions"),
					ID:       to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/unificationprod/providers/Microsoft.Security/locations/centralus/externalSecuritySolutions/cef_omsprd_virtualhoneypot_Microsoft_demovm10"),
				},
				{
					Kind:     to.Ptr(armsecurity.ExternalSecuritySolutionKindAAD),
					Location: to.Ptr("westcentralus"),
					Name:     to.Ptr("aad_omsprd"),
					Type:     to.Ptr("Microsoft.Security/locations/externalSecuritySolutions"),
					ID:       to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/unificationprod/providers/Microsoft.Security/locations/centralus/externalSecuritySolutions/aad_omsprd"),
				},
				{
					Kind:     to.Ptr(armsecurity.ExternalSecuritySolutionKindAAD),
					Location: to.Ptr("japaneast"),
					Name:     to.Ptr("aad_defaultworkspace-20ff7fc3-e762-44dd-bd96-b71116dcdc23-ejp"),
					Type:     to.Ptr("Microsoft.Security/locations/externalSecuritySolutions"),
					ID:       to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/defaultresourcegroup-ejp/providers/Microsoft.Security/locations/centralus/externalSecuritySolutions/aad_defaultworkspace-20ff7fc3-e762-44dd-bd96-b71116dcdc23-ejp"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ExternalSecuritySolutionList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ExternalSecuritySolutionList)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/stable/2020-01-01/examples/ExternalSecuritySolutions/GetExternalSecuritySolutionsSubscriptionLocation_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestExternalSecuritySolutions_Get(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/stable/2020-01-01/examples/ExternalSecuritySolutions/GetExternalSecuritySolution_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get external security solution"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewExternalSecuritySolutionsClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23",
		"centralus", cred, &options)
	res, err := client.Get(ctx,
		"defaultresourcegroup-eus",
		"aad_defaultworkspace-20ff7fc3-e762-44dd-bd96-b71116dcdc23-eus",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/stable/2020-01-01/examples/ExternalSecuritySolutions/GetExternalSecuritySolution_example.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurity.ExternalSecuritySolution{
			Kind:     to.Ptr(armsecurity.ExternalSecuritySolutionKindAAD),
			Location: to.Ptr("eastus"),
			Name:     to.Ptr("aad_defaultworkspace-20ff7fc3-e762-44dd-bd96-b71116dcdc23-eus"),
			Type:     to.Ptr("Microsoft.Security/locations/externalSecuritySolutions"),
			ID:       to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/defaultresourcegroup-eus/providers/Microsoft.Security/locations/centralus/externalSecuritySolutions/aad_defaultworkspace-20ff7fc3-e762-44dd-bd96-b71116dcdc23-eus"),
		}
		if !reflect.DeepEqual(exampleRes, res.ExternalSecuritySolution) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ExternalSecuritySolution)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/stable/2020-01-01/examples/ExternalSecuritySolutions/GetExternalSecuritySolution_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSecureScores_List(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/stable/2020-01-01/examples/secureScores/ListSecureScores_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List secure scores"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewSecureScoresClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/security/resource-manager/Microsoft.Security/stable/2020-01-01/examples/secureScores/ListSecureScores_example.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsecurity.SecureScoresList{
			Value: []*armsecurity.SecureScoreItem{
				{
					Name: to.Ptr("ascScore"),
					Type: to.Ptr("Microsoft.Security/secureScores"),
					ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/secureScores/ascScore"),
					Properties: &armsecurity.SecureScoreItemProperties{
						DisplayName: to.Ptr("ASC score"),
						Score: &armsecurity.ScoreDetails{
							Current:    to.Ptr[float64](23.53),
							Max:        to.Ptr[int32](39),
							Percentage: to.Ptr[float64](0.6033),
						},
						Weight: to.Ptr[int64](67),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SecureScoresList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SecureScoresList)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/stable/2020-01-01/examples/secureScores/ListSecureScores_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSecureScores_Get(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/stable/2020-01-01/examples/secureScores/GetSecureScoresSingle_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get single secure score"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewSecureScoresClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23", cred, &options)
	res, err := client.Get(ctx,
		"ascScore",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/stable/2020-01-01/examples/secureScores/GetSecureScoresSingle_example.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurity.SecureScoreItem{
			Name: to.Ptr("ascScore"),
			Type: to.Ptr("Microsoft.Security/secureScores"),
			ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/secureScores/ascScore"),
			Properties: &armsecurity.SecureScoreItemProperties{
				DisplayName: to.Ptr("ASC score"),
				Score: &armsecurity.ScoreDetails{
					Current:    to.Ptr[float64](23.53),
					Max:        to.Ptr[int32](39),
					Percentage: to.Ptr[float64](0.6033),
				},
				Weight: to.Ptr[int64](67),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SecureScoreItem) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SecureScoreItem)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/stable/2020-01-01/examples/secureScores/GetSecureScoresSingle_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSecureScoreControls_ListBySecureScore(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/stable/2020-01-01/examples/secureScores/ListSecureScoreControlsForName_builtin_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get security controls and their current score for the specified initiative"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewSecureScoreControlsClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23", cred, &options)
	pager := client.ListBySecureScore("ascScore",
		&armsecurity.SecureScoreControlsClientListBySecureScoreOptions{Expand: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/security/resource-manager/Microsoft.Security/stable/2020-01-01/examples/secureScores/ListSecureScoreControlsForName_builtin_example.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsecurity.SecureScoreControlList{
			Value: []*armsecurity.SecureScoreControlDetails{
				{
					Name: to.Ptr("a9909064-42b4-4d34-8143-275477afe18b"),
					Type: to.Ptr("Microsoft.Security/secureScores/secureScoreControls"),
					ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/secureScores/ascScore/secureScoreControls/a9909064-42b4-4d34-8143-275477afe18b"),
					Properties: &armsecurity.SecureScoreControlScoreDetails{
						DisplayName:                to.Ptr("Protect applications against DDoS attacks"),
						HealthyResourceCount:       to.Ptr[int32](0),
						NotApplicableResourceCount: to.Ptr[int32](1),
						Score: &armsecurity.ScoreDetails{
							Current:    to.Ptr[float64](0),
							Max:        to.Ptr[int32](0),
							Percentage: to.Ptr[float64](0),
						},
						UnhealthyResourceCount: to.Ptr[int32](0),
						Weight:                 to.Ptr[int64](0),
					},
				},
				{
					Name: to.Ptr("34a42fb3-e6db-409c-b56b-7b1db6b8aee0"),
					Type: to.Ptr("Microsoft.Security/secureScores/secureScoreControls"),
					ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/secureScores/ascScore/secureScoreControls/34a42fb3-e6db-409c-b56b-7b1db6b8aee0"),
					Properties: &armsecurity.SecureScoreControlScoreDetails{
						DisplayName:                to.Ptr("Enable MFA"),
						HealthyResourceCount:       to.Ptr[int32](1),
						NotApplicableResourceCount: to.Ptr[int32](0),
						Score: &armsecurity.ScoreDetails{
							Current:    to.Ptr[float64](10),
							Max:        to.Ptr[int32](10),
							Percentage: to.Ptr[float64](1),
						},
						UnhealthyResourceCount: to.Ptr[int32](0),
						Weight:                 to.Ptr[int64](1),
					},
				},
				{
					Name: to.Ptr("76763537-9feb-42d3-b4f4-78c01117be80"),
					Type: to.Ptr("Microsoft.Security/secureScores/secureScoreControls"),
					ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/secureScores/ascScore/secureScoreControls/76763537-9feb-42d3-b4f4-78c01117be80"),
					Properties: &armsecurity.SecureScoreControlScoreDetails{
						DisplayName:                to.Ptr("Implement security best practices"),
						HealthyResourceCount:       to.Ptr[int32](7),
						NotApplicableResourceCount: to.Ptr[int32](1),
						Score: &armsecurity.ScoreDetails{
							Current:    to.Ptr[float64](0),
							Max:        to.Ptr[int32](0),
							Percentage: to.Ptr[float64](0),
						},
						UnhealthyResourceCount: to.Ptr[int32](0),
						Weight:                 to.Ptr[int64](7),
					},
				},
				{
					Name: to.Ptr("4db8d6cf-075b-4149-a813-da09ca2ae120"),
					Type: to.Ptr("Microsoft.Security/secureScores/secureScoreControls"),
					ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/secureScores/ascScore/secureScoreControls/4db8d6cf-075b-4149-a813-da09ca2ae120"),
					Properties: &armsecurity.SecureScoreControlScoreDetails{
						DisplayName:                to.Ptr("Enable Advanced Threat Protection"),
						HealthyResourceCount:       to.Ptr[int32](0),
						NotApplicableResourceCount: to.Ptr[int32](0),
						Score: &armsecurity.ScoreDetails{
							Current:    to.Ptr[float64](0),
							Max:        to.Ptr[int32](0),
							Percentage: to.Ptr[float64](0),
						},
						UnhealthyResourceCount: to.Ptr[int32](1),
						Weight:                 to.Ptr[int64](1),
					},
				},
				{
					Name: to.Ptr("27b24961-75ba-4fe4-8909-97286d5dd5ee"),
					Type: to.Ptr("Microsoft.Security/secureScores/secureScoreControls"),
					ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/secureScores/ascScore/secureScoreControls/27b24961-75ba-4fe4-8909-97286d5dd5ee"),
					Properties: &armsecurity.SecureScoreControlScoreDetails{
						DisplayName:                to.Ptr("Enable auditing and logging"),
						HealthyResourceCount:       to.Ptr[int32](1),
						NotApplicableResourceCount: to.Ptr[int32](0),
						Score: &armsecurity.ScoreDetails{
							Current:    to.Ptr[float64](0.2),
							Max:        to.Ptr[int32](1),
							Percentage: to.Ptr[float64](0.2),
						},
						UnhealthyResourceCount: to.Ptr[int32](4),
						Weight:                 to.Ptr[int64](5),
					},
				},
				{
					Name: to.Ptr("2d85f639-0bea-4a4a-b6c6-608952a1414a"),
					Type: to.Ptr("Microsoft.Security/secureScores/secureScoreControls"),
					ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/secureScores/ascScore/secureScoreControls/2d85f639-0bea-4a4a-b6c6-608952a1414a"),
					Properties: &armsecurity.SecureScoreControlScoreDetails{
						DisplayName:                to.Ptr("Manage access and permissions"),
						HealthyResourceCount:       to.Ptr[int32](1),
						NotApplicableResourceCount: to.Ptr[int32](0),
						Score: &armsecurity.ScoreDetails{
							Current:    to.Ptr[float64](2),
							Max:        to.Ptr[int32](4),
							Percentage: to.Ptr[float64](0.5),
						},
						UnhealthyResourceCount: to.Ptr[int32](1),
						Weight:                 to.Ptr[int64](2),
					},
				},
				{
					Name: to.Ptr("99fc8df2-e0f5-40f8-9415-a7f7ca948b5a"),
					Type: to.Ptr("Microsoft.Security/secureScores/secureScoreControls"),
					ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/secureScores/ascScore/secureScoreControls/99fc8df2-e0f5-40f8-9415-a7f7ca948b5a"),
					Properties: &armsecurity.SecureScoreControlScoreDetails{
						DisplayName:                to.Ptr("Remediate security configurations"),
						HealthyResourceCount:       to.Ptr[int32](0),
						NotApplicableResourceCount: to.Ptr[int32](0),
						Score: &armsecurity.ScoreDetails{
							Current:    to.Ptr[float64](0),
							Max:        to.Ptr[int32](4),
							Percentage: to.Ptr[float64](0),
						},
						UnhealthyResourceCount: to.Ptr[int32](1),
						Weight:                 to.Ptr[int64](1),
					},
				},
				{
					Name: to.Ptr("12136bd9-dc24-44f2-9587-7be3af6aac14"),
					Type: to.Ptr("Microsoft.Security/secureScores/secureScoreControls"),
					ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/secureScores/ascScore/secureScoreControls/12136bd9-dc24-44f2-9587-7be3af6aac14"),
					Properties: &armsecurity.SecureScoreControlScoreDetails{
						DisplayName:                to.Ptr("Enable endpoint protection"),
						HealthyResourceCount:       to.Ptr[int32](0),
						NotApplicableResourceCount: to.Ptr[int32](0),
						Score: &armsecurity.ScoreDetails{
							Current:    to.Ptr[float64](0),
							Max:        to.Ptr[int32](2),
							Percentage: to.Ptr[float64](0),
						},
						UnhealthyResourceCount: to.Ptr[int32](1),
						Weight:                 to.Ptr[int64](1),
					},
				},
				{
					Name: to.Ptr("61702b76-1fab-41f2-bcbc-50b7870dcf38"),
					Type: to.Ptr("Microsoft.Security/secureScores/secureScoreControls"),
					ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/secureScores/ascScore/secureScoreControls/61702b76-1fab-41f2-bcbc-50b7870dcf38"),
					Properties: &armsecurity.SecureScoreControlScoreDetails{
						DisplayName:                to.Ptr("Apply system updates"),
						HealthyResourceCount:       to.Ptr[int32](0),
						NotApplicableResourceCount: to.Ptr[int32](0),
						Score: &armsecurity.ScoreDetails{
							Current:    to.Ptr[float64](0),
							Max:        to.Ptr[int32](6),
							Percentage: to.Ptr[float64](0),
						},
						UnhealthyResourceCount: to.Ptr[int32](1),
						Weight:                 to.Ptr[int64](1),
					},
				},
				{
					Name: to.Ptr("0e55495e-034f-4abc-8293-767229250176"),
					Type: to.Ptr("Microsoft.Security/secureScores/secureScoreControls"),
					ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/secureScores/ascScore/secureScoreControls/0e55495e-034f-4abc-8293-767229250176"),
					Properties: &armsecurity.SecureScoreControlScoreDetails{
						DisplayName:                to.Ptr("Encrypt data in transit"),
						HealthyResourceCount:       to.Ptr[int32](5),
						NotApplicableResourceCount: to.Ptr[int32](0),
						Score: &armsecurity.ScoreDetails{
							Current:    to.Ptr[float64](3.33),
							Max:        to.Ptr[int32](4),
							Percentage: to.Ptr[float64](0.8325),
						},
						UnhealthyResourceCount: to.Ptr[int32](1),
						Weight:                 to.Ptr[int64](6),
					},
				},
				{
					Name: to.Ptr("f9d5432b-8f7b-45e9-b90c-e214a30f6a02"),
					Type: to.Ptr("Microsoft.Security/secureScores/secureScoreControls"),
					ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/secureScores/ascScore/secureScoreControls/f9d5432b-8f7b-45e9-b90c-e214a30f6a02"),
					Properties: &armsecurity.SecureScoreControlScoreDetails{
						DisplayName:                to.Ptr("Restrict unauthorized network access"),
						HealthyResourceCount:       to.Ptr[int32](1),
						NotApplicableResourceCount: to.Ptr[int32](0),
						Score: &armsecurity.ScoreDetails{
							Current:    to.Ptr[float64](4),
							Max:        to.Ptr[int32](4),
							Percentage: to.Ptr[float64](1),
						},
						UnhealthyResourceCount: to.Ptr[int32](0),
						Weight:                 to.Ptr[int64](1),
					},
				},
				{
					Name: to.Ptr("8fd574ec-43cf-426e-a439-a67cbaf2d564"),
					Type: to.Ptr("Microsoft.Security/secureScores/secureScoreControls"),
					ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/secureScores/ascScore/secureScoreControls/8fd574ec-43cf-426e-a439-a67cbaf2d564"),
					Properties: &armsecurity.SecureScoreControlScoreDetails{
						DisplayName:                to.Ptr("Enable encryption at rest"),
						HealthyResourceCount:       to.Ptr[int32](1),
						NotApplicableResourceCount: to.Ptr[int32](0),
						Score: &armsecurity.ScoreDetails{
							Current:    to.Ptr[float64](4),
							Max:        to.Ptr[int32](4),
							Percentage: to.Ptr[float64](1),
						},
						UnhealthyResourceCount: to.Ptr[int32](0),
						Weight:                 to.Ptr[int64](1),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SecureScoreControlList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SecureScoreControlList)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/stable/2020-01-01/examples/secureScores/ListSecureScoreControlsForName_builtin_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/security/resource-manager/Microsoft.Security/stable/2020-01-01/examples/secureScores/ListSecureScoreControlsForNameWithExpand_builtin_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get security controls and their current score for the specified initiative with the expand parameter"},
	})
	client = armsecurity.NewSecureScoreControlsClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23", cred, &options)
	pager = client.ListBySecureScore("ascScore",
		&armsecurity.SecureScoreControlsClientListBySecureScoreOptions{Expand: to.Ptr(armsecurity.ExpandControlsEnumDefinition)})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/security/resource-manager/Microsoft.Security/stable/2020-01-01/examples/secureScores/ListSecureScoreControlsForNameWithExpand_builtin_example.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsecurity.SecureScoreControlList{
			Value: []*armsecurity.SecureScoreControlDetails{
				{
					Name: to.Ptr("a9909064-42b4-4d34-8143-275477afe18b"),
					Type: to.Ptr("Microsoft.Security/secureScores/secureScoreControls"),
					ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/secureScores/ascScore/secureScoreControls/a9909064-42b4-4d34-8143-275477afe18b"),
					Properties: &armsecurity.SecureScoreControlScoreDetails{
						Definition: &armsecurity.SecureScoreControlDefinitionItem{
							Name: to.Ptr("a9909064-42b4-4d34-8143-275477afe18b"),
							Type: to.Ptr("Microsoft.Security/secureScoreControlDefinitions"),
							ID:   to.Ptr("/providers/Microsoft.Security/secureScoreControlDefinitions/a9909064-42b4-4d34-8143-275477afe18b"),
							Properties: &armsecurity.SecureScoreControlDefinitionItemProperties{
								AssessmentDefinitions: []*armsecurity.AzureResourceLink{
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/e3de1cc0-f4dd-3b34-e496-8b5381ba2d70"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/08e628db-e2ed-4793-bc91-d13e684401c3"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/405c9ae6-49f9-46c4-8873-a86690f27818"),
									}},
								DisplayName: to.Ptr("Protect applications against DDoS attacks"),
								MaxScore:    to.Ptr[int32](2),
								Source: &armsecurity.SecureScoreControlDefinitionSource{
									SourceType: to.Ptr(armsecurity.ControlTypeBuiltIn),
								},
							},
						},
						DisplayName:                to.Ptr("Protect applications against DDoS attacks"),
						HealthyResourceCount:       to.Ptr[int32](0),
						NotApplicableResourceCount: to.Ptr[int32](1),
						Score: &armsecurity.ScoreDetails{
							Current:    to.Ptr[float64](0),
							Max:        to.Ptr[int32](0),
							Percentage: to.Ptr[float64](0),
						},
						UnhealthyResourceCount: to.Ptr[int32](0),
						Weight:                 to.Ptr[int64](0),
					},
				},
				{
					Name: to.Ptr("34a42fb3-e6db-409c-b56b-7b1db6b8aee0"),
					Type: to.Ptr("Microsoft.Security/secureScores/secureScoreControls"),
					ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/secureScores/ascScore/secureScoreControls/34a42fb3-e6db-409c-b56b-7b1db6b8aee0"),
					Properties: &armsecurity.SecureScoreControlScoreDetails{
						Definition: &armsecurity.SecureScoreControlDefinitionItem{
							Name: to.Ptr("34a42fb3-e6db-409c-b56b-7b1db6b8aee0"),
							Type: to.Ptr("Microsoft.Security/secureScoreControlDefinitions"),
							ID:   to.Ptr("/providers/Microsoft.Security/secureScoreControlDefinitions/34a42fb3-e6db-409c-b56b-7b1db6b8aee0"),
							Properties: &armsecurity.SecureScoreControlDefinitionItemProperties{
								AssessmentDefinitions: []*armsecurity.AzureResourceLink{
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/94290b00-4d0c-d7b4-7cea-064a9554e681"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/57e98606-6b1e-6193-0e3d-fe621387c16b"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/1f24d55a-df0f-4772-9090-4629c2d6bfff"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/8e3d9ac0-a248-4276-a437-304c6cd1443b"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/8d7a6128-c8f2-43df-b422-7877346f9ddb"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/dbfc99e3-e648-4c3b-bd32-995e6268430d"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/4a946e22-47e8-443d-8761-b25620b4a1e1"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/a7c8fa46-526d-4bf6-b8b3-17fa01310fd8"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/20f6c761-4dd7-4f27-9e37-6db8471486ef"),
									}},
								DisplayName: to.Ptr("Enable MFA"),
								MaxScore:    to.Ptr[int32](10),
								Source: &armsecurity.SecureScoreControlDefinitionSource{
									SourceType: to.Ptr(armsecurity.ControlTypeBuiltIn),
								},
							},
						},
						DisplayName:                to.Ptr("Enable MFA"),
						HealthyResourceCount:       to.Ptr[int32](1),
						NotApplicableResourceCount: to.Ptr[int32](0),
						Score: &armsecurity.ScoreDetails{
							Current:    to.Ptr[float64](10),
							Max:        to.Ptr[int32](10),
							Percentage: to.Ptr[float64](1),
						},
						UnhealthyResourceCount: to.Ptr[int32](0),
						Weight:                 to.Ptr[int64](1),
					},
				},
				{
					Name: to.Ptr("76763537-9feb-42d3-b4f4-78c01117be80"),
					Type: to.Ptr("Microsoft.Security/secureScores/secureScoreControls"),
					ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/secureScores/ascScore/secureScoreControls/76763537-9feb-42d3-b4f4-78c01117be80"),
					Properties: &armsecurity.SecureScoreControlScoreDetails{
						Definition: &armsecurity.SecureScoreControlDefinitionItem{
							Name: to.Ptr("76763537-9feb-42d3-b4f4-78c01117be80"),
							Type: to.Ptr("Microsoft.Security/secureScoreControlDefinitions"),
							ID:   to.Ptr("/providers/Microsoft.Security/secureScoreControlDefinitions/76763537-9feb-42d3-b4f4-78c01117be80"),
							Properties: &armsecurity.SecureScoreControlDefinitionItemProperties{
								AssessmentDefinitions: []*armsecurity.AzureResourceLink{
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/151e82c5-5341-a74b-1eb0-bc38d2c84bb5"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/a8c6a4ad-d51e-88fe-2979-d3ee3c864f8b"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/6f90a6d6-d4d6-0794-0ec1-98fa77878c2e"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/a9341235-9389-42f0-a0bf-9bfb57960d44"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/45d313c3-3fca-5040-035f-d61928366d31"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/f0553104-cfdb-65e6-759c-002812e38500"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/47bb383c-8e25-95f0-c2aa-437add1d87d3"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/12018f4f-3d10-999b-e4c4-86ec25be08a1"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/eade5b56-eefd-444f-95c8-23f29e5d93cb"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/ebe970fe-9c27-4dd7-a165-1e943d565e10"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/f7010359-8d21-4598-a9f2-c3e81a17141e"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/24d8af06-d441-40b4-a49c-311421aa9f58"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/8c3e93d3-0276-4d06-b20a-9a9f3012742c"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/9172da4e-9571-6e33-2b5b-d742847f3be7"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/093c685b-56dd-13a3-8ed5-887a001837a2"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/64b8637e-4e1d-76a9-0fc9-c1e487a97ed8"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/fe02b3b7-a722-d4d6-6731-6493776203a6"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/57f36d21-69e3-4b0f-a66c-18629d1b736d"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/6c99f570-2ce7-46bc-8175-cde013df43bc"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/22489c48-27d1-4e40-9420-4303ad9cffef"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/fc84abc0-eee6-4758-8372-a7681965ca44"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/726cde3e-02f8-4041-8935-727f2be19ba7"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/a2bb3a1b-4a09-4cf7-9e79-c438687e2c2f"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/664c6a0b-5cd2-4140-aaff-a94241c07afd"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/3af5de46-fda8-4b6e-90f1-6565187d7c48"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/a9a59ebb-5d6f-42f5-92a1-036fd0fd1879"),
									}},
								DisplayName: to.Ptr("Implement security best practices"),
								MaxScore:    to.Ptr[int32](0),
								Source: &armsecurity.SecureScoreControlDefinitionSource{
									SourceType: to.Ptr(armsecurity.ControlTypeBuiltIn),
								},
							},
						},
						DisplayName:                to.Ptr("Implement security best practices"),
						HealthyResourceCount:       to.Ptr[int32](7),
						NotApplicableResourceCount: to.Ptr[int32](1),
						Score: &armsecurity.ScoreDetails{
							Current:    to.Ptr[float64](0),
							Max:        to.Ptr[int32](0),
							Percentage: to.Ptr[float64](0),
						},
						UnhealthyResourceCount: to.Ptr[int32](0),
						Weight:                 to.Ptr[int64](7),
					},
				},
				{
					Name: to.Ptr("4db8d6cf-075b-4149-a813-da09ca2ae120"),
					Type: to.Ptr("Microsoft.Security/secureScores/secureScoreControls"),
					ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/secureScores/ascScore/secureScoreControls/4db8d6cf-075b-4149-a813-da09ca2ae120"),
					Properties: &armsecurity.SecureScoreControlScoreDetails{
						Definition: &armsecurity.SecureScoreControlDefinitionItem{
							Name: to.Ptr("4db8d6cf-075b-4149-a813-da09ca2ae120"),
							Type: to.Ptr("Microsoft.Security/secureScoreControlDefinitions"),
							ID:   to.Ptr("/providers/Microsoft.Security/secureScoreControlDefinitions/4db8d6cf-075b-4149-a813-da09ca2ae120"),
							Properties: &armsecurity.SecureScoreControlDefinitionItemProperties{
								AssessmentDefinitions: []*armsecurity.AzureResourceLink{
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/56a6e81f-7413-4f72-9a1b-aaeeaa87c872"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/0876ef51-fee7-449d-ba1e-f2662c7e43c6"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/58d72d9d-0310-4792-9a3b-6dd111093cdb"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/6ac66a74-761f-4a59-928a-d373eea3f028"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/1be22853-8ed1-4005-9907-ddad64cb1417"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/86ea1a79-29d3-4eac-a9f4-3541ace4e718"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/53572822-d3fc-4363-bfb9-248645841612"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/b1af52e4-e968-4e2b-b6d0-6736c9651f0a"),
									}},
								DisplayName: to.Ptr("Enable Advanced Threat Protection"),
								MaxScore:    to.Ptr[int32](0),
								Source: &armsecurity.SecureScoreControlDefinitionSource{
									SourceType: to.Ptr(armsecurity.ControlTypeBuiltIn),
								},
							},
						},
						DisplayName:                to.Ptr("Enable Advanced Threat Protection"),
						HealthyResourceCount:       to.Ptr[int32](0),
						NotApplicableResourceCount: to.Ptr[int32](0),
						Score: &armsecurity.ScoreDetails{
							Current:    to.Ptr[float64](0),
							Max:        to.Ptr[int32](0),
							Percentage: to.Ptr[float64](0),
						},
						UnhealthyResourceCount: to.Ptr[int32](1),
						Weight:                 to.Ptr[int64](1),
					},
				},
				{
					Name: to.Ptr("27b24961-75ba-4fe4-8909-97286d5dd5ee"),
					Type: to.Ptr("Microsoft.Security/secureScores/secureScoreControls"),
					ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/secureScores/ascScore/secureScoreControls/27b24961-75ba-4fe4-8909-97286d5dd5ee"),
					Properties: &armsecurity.SecureScoreControlScoreDetails{
						Definition: &armsecurity.SecureScoreControlDefinitionItem{
							Name: to.Ptr("27b24961-75ba-4fe4-8909-97286d5dd5ee"),
							Type: to.Ptr("Microsoft.Security/secureScoreControlDefinitions"),
							ID:   to.Ptr("/providers/Microsoft.Security/secureScoreControlDefinitions/27b24961-75ba-4fe4-8909-97286d5dd5ee"),
							Properties: &armsecurity.SecureScoreControlDefinitionItemProperties{
								AssessmentDefinitions: []*armsecurity.AzureResourceLink{
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/94208a8b-16e8-4e5b-abbd-4e81c9d02bee"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/c6dad669-efd7-cd72-61c5-289935607791"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/77785808-ce86-4e40-b45f-19110a547397"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/32771b45-220c-1a8b-584e-fdd5a2584a66"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/f11b27f2-8c49-5bb4-eff5-e1e5384bf95e"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/f19ab7d9-5ff2-f8fd-ab3b-0bf95dcb6889"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/ad5bbaeb-7632-5edf-f1c2-752075831ce8"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/dea5192e-1bb3-101b-b70c-4646546f5e1e"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/1597605a-0faf-5860-eb74-462ae2e9fc21"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/91387f44-7e43-4ecc-55f0-46f5adee3dd5"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/961eb649-3ea9-f8c2-6595-88e9a3aeedeb"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/88bbc99c-e5af-ddd7-6105-6150b2bfa519"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/22438e3c-73c8-40af-a083-10c980c63aa2"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/5720f1a6-6061-4768-9c0d-2000a6041744"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/dbfc99e3-e648-4c3b-bd32-995e6268430d"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/30c69b23-a9a2-4729-aca6-f21adacfff66"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/a9ac48d8-8dd7-42b9-9752-b1fa70ea5dd9"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/00261067-76a8-4ebb-b5fc-becc81067bee"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/83ca4867-58c1-45d6-b6b6-dbf226512891"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/a269cbdb-86e8-431c-9ff2-f0ea491174d8"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/5ea59e47-093b-446f-9765-5b0ec4c9da61"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/011397ca-1366-4bcc-b85a-7a5e3df2e80b"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/c62371bc-f6a7-4915-b5b5-14288682cf79"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/293ba336-7312-42fc-a59d-836e4e678b17"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/0b547a38-2c0d-47e1-b9a2-a59fccc140db"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/7d0ad86f-f43b-4889-b2f7-09d91bd1407b"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/b20558b6-de31-480c-8aa0-e920d62b9764"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/022efc2d-5119-480b-a203-e151b6b2645c"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/3ee7608e-f0e7-4c26-8921-5ae46c4e99df"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/33765629-073d-49eb-bab4-64bdf8ac90da"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/9c054f50-823f-45ab-839e-9df4eb7c2f11"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/f61e15f3-4bcf-4d2e-8f06-32237cabe0a0"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/cdb3af55-2abf-476b-aac7-5cfec366a4dd"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/bc26b0d4-a1d7-4665-9d44-efc205ae73f0"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/3812e247-34f2-4f06-a312-89a8fe51fa37"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/f0f8405a-5ecc-4314-808e-083e030d6163"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/c23e0eec-eee4-4632-b1c2-6c884c3c963b"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/7ce5a01f-e94b-438a-8b72-fa02c076f11a"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/46e4e0ed-106d-405e-b1a9-ca34c8f7d31f"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/b1294b0d-9b2e-4e1b-9f67-77a75fb10a65"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/0b86a67f-bde5-4c91-b10c-4102033b8692"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/3d55e4b1-ecdb-4eaf-9e3f-b00a764182bd"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/a7c8fa46-526d-4bf6-b8b3-17fa01310fd8"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/20f6c761-4dd7-4f27-9e37-6db8471486ef"),
									}},
								DisplayName: to.Ptr("Enable auditing and logging"),
								MaxScore:    to.Ptr[int32](1),
								Source: &armsecurity.SecureScoreControlDefinitionSource{
									SourceType: to.Ptr(armsecurity.ControlTypeBuiltIn),
								},
							},
						},
						DisplayName:                to.Ptr("Enable auditing and logging"),
						HealthyResourceCount:       to.Ptr[int32](1),
						NotApplicableResourceCount: to.Ptr[int32](0),
						Score: &armsecurity.ScoreDetails{
							Current:    to.Ptr[float64](0.2),
							Max:        to.Ptr[int32](1),
							Percentage: to.Ptr[float64](0.2),
						},
						UnhealthyResourceCount: to.Ptr[int32](4),
						Weight:                 to.Ptr[int64](5),
					},
				},
				{
					Name: to.Ptr("2d85f639-0bea-4a4a-b6c6-608952a1414a"),
					Type: to.Ptr("Microsoft.Security/secureScores/secureScoreControls"),
					ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/secureScores/ascScore/secureScoreControls/2d85f639-0bea-4a4a-b6c6-608952a1414a"),
					Properties: &armsecurity.SecureScoreControlScoreDetails{
						Definition: &armsecurity.SecureScoreControlDefinitionItem{
							Name: to.Ptr("2d85f639-0bea-4a4a-b6c6-608952a1414a"),
							Type: to.Ptr("Microsoft.Security/secureScoreControlDefinitions"),
							ID:   to.Ptr("/providers/Microsoft.Security/secureScoreControlDefinitions/2d85f639-0bea-4a4a-b6c6-608952a1414a"),
							Properties: &armsecurity.SecureScoreControlDefinitionItemProperties{
								AssessmentDefinitions: []*armsecurity.AzureResourceLink{
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/c3b6ae71-f1f0-31b4-e6c1-d5951285d03d"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/04e7147b-0deb-9796-2e5c-0336343ceb3d"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/e52064aa-6853-e252-a11e-dffc675689c2"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/00c6d40b-e990-6acf-d4f3-471e747a27c4"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/2c79b4af-f830-b61e-92b9-63dfa30f16e4"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/b0fdc63a-38e7-4bab-a7c4-2c2665abbaa9"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/03afeb6f-7634-adb3-0a01-803b0b9cb611"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/9d07b7e6-2986-4964-a76c-b2689604e212"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/08e628db-e2ed-4793-bc91-d13e684401c3"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/5d90913f-a1c5-4429-ad54-2c6c17fb3c73"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/582c14e9-48c1-4b25-ab93-91bdeaf9120c"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/8a10942a-02ca-483f-81ae-2260ea7808cc"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/9b8eac17-6b11-4b94-9bb4-18c81aee7123"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/554ba13c-d7d4-4530-88ce-94cf11a670ce"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/66a1d478-4d24-42d4-8eca-dcdab6532a18"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/b396f112-a462-4813-a93f-80bc90041e4d"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/5425052d-cc0d-4424-af71-050311f99634"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/09cb7d54-db05-4d31-97f3-9bbfe1dff610"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/01fb1ad4-303b-4789-abf2-c024c4a76523"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/0de072b9-6515-4985-842e-0318047bb85b"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/8c3f474a-234e-442f-92b3-2a45e37f7eee"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/c55461af-4923-4fbb-b270-40d5e5f4c0ff"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/bbdc4999-1462-4d46-853b-2f8c6ca1c682"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/9e1f12d0-cb3d-4e1c-a468-6bc3d934c99d"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/fd5d38f6-340e-4bd2-88f2-e1314c3c07a9"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/0384d5b7-5def-4130-b7b5-db7da7e63276"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/dbfc99e3-e648-4c3b-bd32-995e6268430d"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/0ad39832-f031-4fdd-885e-c6cce85ac77c"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/90191798-da1b-40dd-aa9c-1c0eafb1ba87"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/ddced3c8-a5e2-4dc4-b0fe-1331c77fc9c4"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/52f83ea2-6871-45c3-8b26-13566e966638"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/79b4eb34-c06e-49bf-883d-5352a21a962f"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/5723400d-5b2a-45f1-99ee-837986866318"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/76e8881d-f18e-4e1b-b01d-376d0260e066"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/0eaf40a8-5673-4b33-8457-a31d85882233"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/5a235918-41a2-4bd0-8ab0-00a596e9d6a8"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/3ff38dcd-92e2-4b67-8765-35bb0174a4c7"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/1ff4501b-2109-4ef6-ba9d-e824a96d63d0"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/f493084a-d3c4-4886-8cf2-3c815aeef901"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/a7c8fa46-526d-4bf6-b8b3-17fa01310fd8"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/20f6c761-4dd7-4f27-9e37-6db8471486ef"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/11c95609-3553-430d-b788-fd41cde8b2db"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/27d6f0e9-b4d5-468b-ae7e-03d5473fd864"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/f0debc84-981c-4a0d-924d-aa4bd7d55fef"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/9b795646-9130-41a4-90b7-df9eae2437c8"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/802c0637-5a8c-4c98-abd7-7c96d89d6010"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/43dc2a2e-ce69-4d42-923e-ab7d136f2cfe"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/2acd365d-e8b5-4094-bce4-244b7c51d67c"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/51fd8bb1-0db4-bbf1-7e2b-cfcba7eb66a6"),
									}},
								DisplayName: to.Ptr("Manage access and permissions"),
								MaxScore:    to.Ptr[int32](4),
								Source: &armsecurity.SecureScoreControlDefinitionSource{
									SourceType: to.Ptr(armsecurity.ControlTypeBuiltIn),
								},
							},
						},
						DisplayName:                to.Ptr("Manage access and permissions"),
						HealthyResourceCount:       to.Ptr[int32](1),
						NotApplicableResourceCount: to.Ptr[int32](0),
						Score: &armsecurity.ScoreDetails{
							Current:    to.Ptr[float64](2),
							Max:        to.Ptr[int32](4),
							Percentage: to.Ptr[float64](0.5),
						},
						UnhealthyResourceCount: to.Ptr[int32](1),
						Weight:                 to.Ptr[int64](2),
					},
				},
				{
					Name: to.Ptr("99fc8df2-e0f5-40f8-9415-a7f7ca948b5a"),
					Type: to.Ptr("Microsoft.Security/secureScores/secureScoreControls"),
					ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/secureScores/ascScore/secureScoreControls/99fc8df2-e0f5-40f8-9415-a7f7ca948b5a"),
					Properties: &armsecurity.SecureScoreControlScoreDetails{
						Definition: &armsecurity.SecureScoreControlDefinitionItem{
							Name: to.Ptr("99fc8df2-e0f5-40f8-9415-a7f7ca948b5a"),
							Type: to.Ptr("Microsoft.Security/secureScoreControlDefinitions"),
							ID:   to.Ptr("/providers/Microsoft.Security/secureScoreControlDefinitions/99fc8df2-e0f5-40f8-9415-a7f7ca948b5a"),
							Properties: &armsecurity.SecureScoreControlDefinitionItemProperties{
								AssessmentDefinitions: []*armsecurity.AzureResourceLink{
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/d1db3318-01ff-16de-29eb-28b344515626"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/e7ee30c4-bac9-2966-54bd-2023a4282872"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/27ac71b1-75c5-41c2-adc2-858f5db45b08"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/720a3e77-0b9a-4fa9-98b6-ddf0fd7e32c1"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/8e2b96ff-3de2-289b-b5c1-3b9921a3441e"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/181ac480-f7c4-544b-9865-11b8ffe87f47"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/8c3d9ad0-3639-4686-9cd2-2b2ab2609bda"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/0677209d-e675-2c6f-e91a-54cef2878663"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/a3eee263-aa01-4b52-a7c0-0094578ef48f"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/45cfe080-ceb1-a91e-9743-71551ed24e94"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/8941d121-f740-35f6-952c-6561d2b38d36"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/0396b18c-41aa-489c-affd-4ee5d1714a59"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/fa924a53-0837-4296-9bf7-18ce7dd68593"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/9e1789cd-7b61-42db-ba12-7268283ba466"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/233da9cd-11bf-463a-8aa7-4c81b9e788d1"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/c4131c22-1ecc-4beb-9961-d90108bd975f"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/d74d2738-2485-4103-9919-69c7e63776ec"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/5f65e47f-7a00-4bf3-acae-90ee441ee876"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/bc85a7ee-7f43-47ab-8736-4faaec9346b5"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/08e628db-e2ed-4793-bc91-d13e684401c3"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/86f91051-9d6a-47c3-a07f-bd14cb214b45"),
									}},
								DisplayName: to.Ptr("Remediate security configurations"),
								MaxScore:    to.Ptr[int32](4),
								Source: &armsecurity.SecureScoreControlDefinitionSource{
									SourceType: to.Ptr(armsecurity.ControlTypeBuiltIn),
								},
							},
						},
						DisplayName:                to.Ptr("Remediate security configurations"),
						HealthyResourceCount:       to.Ptr[int32](0),
						NotApplicableResourceCount: to.Ptr[int32](0),
						Score: &armsecurity.ScoreDetails{
							Current:    to.Ptr[float64](0),
							Max:        to.Ptr[int32](4),
							Percentage: to.Ptr[float64](0),
						},
						UnhealthyResourceCount: to.Ptr[int32](1),
						Weight:                 to.Ptr[int64](1),
					},
				},
				{
					Name: to.Ptr("12136bd9-dc24-44f2-9587-7be3af6aac14"),
					Type: to.Ptr("Microsoft.Security/secureScores/secureScoreControls"),
					ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/secureScores/ascScore/secureScoreControls/12136bd9-dc24-44f2-9587-7be3af6aac14"),
					Properties: &armsecurity.SecureScoreControlScoreDetails{
						Definition: &armsecurity.SecureScoreControlDefinitionItem{
							Name: to.Ptr("12136bd9-dc24-44f2-9587-7be3af6aac14"),
							Type: to.Ptr("Microsoft.Security/secureScoreControlDefinitions"),
							ID:   to.Ptr("/providers/Microsoft.Security/secureScoreControlDefinitions/12136bd9-dc24-44f2-9587-7be3af6aac14"),
							Properties: &armsecurity.SecureScoreControlDefinitionItemProperties{
								AssessmentDefinitions: []*armsecurity.AzureResourceLink{
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/d1db3318-01ff-16de-29eb-28b344515626"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/e7ee30c4-bac9-2966-54bd-2023a4282872"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/27ac71b1-75c5-41c2-adc2-858f5db45b08"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/720a3e77-0b9a-4fa9-98b6-ddf0fd7e32c1"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/8e2b96ff-3de2-289b-b5c1-3b9921a3441e"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/83f577bd-a1b6-b7e1-0891-12ca19d1e6df"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/4fb67663-9ab9-475d-b026-8c544cced439"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/383cf3bc-fdf9-4a02-120a-3e7e36c6bfee"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/3bcd234d-c9c7-c2a2-89e0-c01f419c1a8a"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/37a3689a-818e-4a0e-82ac-b1392b9bb000"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/45cfe080-ceb1-a91e-9743-71551ed24e94"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/21300918-b2e3-0346-785f-c77ff57d243b"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/e71020c2-860c-3235-cd39-04f3f8c936d2"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/bc85a7ee-7f43-47ab-8736-4faaec9346b5"),
									}},
								DisplayName: to.Ptr("Enable endpoint protection"),
								MaxScore:    to.Ptr[int32](2),
								Source: &armsecurity.SecureScoreControlDefinitionSource{
									SourceType: to.Ptr(armsecurity.ControlTypeBuiltIn),
								},
							},
						},
						DisplayName:                to.Ptr("Enable endpoint protection"),
						HealthyResourceCount:       to.Ptr[int32](0),
						NotApplicableResourceCount: to.Ptr[int32](0),
						Score: &armsecurity.ScoreDetails{
							Current:    to.Ptr[float64](0),
							Max:        to.Ptr[int32](2),
							Percentage: to.Ptr[float64](0),
						},
						UnhealthyResourceCount: to.Ptr[int32](1),
						Weight:                 to.Ptr[int64](1),
					},
				},
				{
					Name: to.Ptr("61702b76-1fab-41f2-bcbc-50b7870dcf38"),
					Type: to.Ptr("Microsoft.Security/secureScores/secureScoreControls"),
					ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/secureScores/ascScore/secureScoreControls/61702b76-1fab-41f2-bcbc-50b7870dcf38"),
					Properties: &armsecurity.SecureScoreControlScoreDetails{
						Definition: &armsecurity.SecureScoreControlDefinitionItem{
							Name: to.Ptr("61702b76-1fab-41f2-bcbc-50b7870dcf38"),
							Type: to.Ptr("Microsoft.Security/secureScoreControlDefinitions"),
							ID:   to.Ptr("/providers/Microsoft.Security/secureScoreControlDefinitions/61702b76-1fab-41f2-bcbc-50b7870dcf38"),
							Properties: &armsecurity.SecureScoreControlDefinitionItemProperties{
								AssessmentDefinitions: []*armsecurity.AzureResourceLink{
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/d1db3318-01ff-16de-29eb-28b344515626"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/e7ee30c4-bac9-2966-54bd-2023a4282872"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/27ac71b1-75c5-41c2-adc2-858f5db45b08"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/720a3e77-0b9a-4fa9-98b6-ddf0fd7e32c1"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/8e2b96ff-3de2-289b-b5c1-3b9921a3441e"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/4ab6e3c5-74dd-8b35-9ab9-f61b30875b27"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/f2805ebc-abc2-4aac-a8d6-35664c479971"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/c0f5316d-5ac5-9218-b77a-b96e16ccfd66"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/45cfe080-ceb1-a91e-9743-71551ed24e94"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/bd20bd91-aaf1-7f14-b6e4-866de2f43146"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/8bc390da-9eb6-938d-25ed-44a35d9bcc9d"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/22e18b64-4576-41e6-8972-0eb28c9af0c8"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/bc85a7ee-7f43-47ab-8736-4faaec9346b5"),
									}},
								DisplayName: to.Ptr("Apply system updates"),
								MaxScore:    to.Ptr[int32](6),
								Source: &armsecurity.SecureScoreControlDefinitionSource{
									SourceType: to.Ptr(armsecurity.ControlTypeBuiltIn),
								},
							},
						},
						DisplayName:                to.Ptr("Apply system updates"),
						HealthyResourceCount:       to.Ptr[int32](0),
						NotApplicableResourceCount: to.Ptr[int32](0),
						Score: &armsecurity.ScoreDetails{
							Current:    to.Ptr[float64](0),
							Max:        to.Ptr[int32](6),
							Percentage: to.Ptr[float64](0),
						},
						UnhealthyResourceCount: to.Ptr[int32](1),
						Weight:                 to.Ptr[int64](1),
					},
				},
				{
					Name: to.Ptr("0e55495e-034f-4abc-8293-767229250176"),
					Type: to.Ptr("Microsoft.Security/secureScores/secureScoreControls"),
					ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/secureScores/ascScore/secureScoreControls/0e55495e-034f-4abc-8293-767229250176"),
					Properties: &armsecurity.SecureScoreControlScoreDetails{
						Definition: &armsecurity.SecureScoreControlDefinitionItem{
							Name: to.Ptr("0e55495e-034f-4abc-8293-767229250176"),
							Type: to.Ptr("Microsoft.Security/secureScoreControlDefinitions"),
							ID:   to.Ptr("/providers/Microsoft.Security/secureScoreControlDefinitions/0e55495e-034f-4abc-8293-767229250176"),
							Properties: &armsecurity.SecureScoreControlDefinitionItemProperties{
								AssessmentDefinitions: []*armsecurity.AzureResourceLink{
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/1b351b29-41ca-6df5-946c-c190a56be5fe"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/cb0acdc6-0846-fd48-debe-9905af151b6d"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/bf82a334-13b6-ca57-ea75-096fc2ffce50"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/35b25be2-d08a-e340-45ed-f08a95d804fc"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/1c5de8e1-f68d-6a17-e0d2-ec259c42768c"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/a3ebc80a-847b-46d5-a37d-8dca5e6947df"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/c28a89d9-7cf4-439b-a8c4-ad4e769f68ee"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/2acc27c6-5fdb-405e-9080-cb66b850c8f5"),
									}},
								DisplayName: to.Ptr("Encrypt data in transit"),
								MaxScore:    to.Ptr[int32](4),
								Source: &armsecurity.SecureScoreControlDefinitionSource{
									SourceType: to.Ptr(armsecurity.ControlTypeBuiltIn),
								},
							},
						},
						DisplayName:                to.Ptr("Encrypt data in transit"),
						HealthyResourceCount:       to.Ptr[int32](5),
						NotApplicableResourceCount: to.Ptr[int32](0),
						Score: &armsecurity.ScoreDetails{
							Current:    to.Ptr[float64](3.33),
							Max:        to.Ptr[int32](4),
							Percentage: to.Ptr[float64](0.8325),
						},
						UnhealthyResourceCount: to.Ptr[int32](1),
						Weight:                 to.Ptr[int64](6),
					},
				},
				{
					Name: to.Ptr("f9d5432b-8f7b-45e9-b90c-e214a30f6a02"),
					Type: to.Ptr("Microsoft.Security/secureScores/secureScoreControls"),
					ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/secureScores/ascScore/secureScoreControls/f9d5432b-8f7b-45e9-b90c-e214a30f6a02"),
					Properties: &armsecurity.SecureScoreControlScoreDetails{
						Definition: &armsecurity.SecureScoreControlDefinitionItem{
							Name: to.Ptr("f9d5432b-8f7b-45e9-b90c-e214a30f6a02"),
							Type: to.Ptr("Microsoft.Security/secureScoreControlDefinitions"),
							ID:   to.Ptr("/providers/Microsoft.Security/secureScoreControlDefinitions/f9d5432b-8f7b-45e9-b90c-e214a30f6a02"),
							Properties: &armsecurity.SecureScoreControlDefinitionItemProperties{
								AssessmentDefinitions: []*armsecurity.AzureResourceLink{
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/483f12ed-ae23-447e-a2de-a67a10db4353"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/3b20e985-f71f-483b-b078-f30d73936d43"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/f9f0eed0-f143-47bf-b856-671ea2eeed62"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/1a2b5b4c-f80d-46e7-ac81-b51a9fb363de"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/c3b51c94-588b-426b-a892-24696f9e54cc"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/e40df93c-7a7c-1b0a-c787-9987ceb98e54"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/7b3d4796-9400-2904-692b-4a5ede7f0a1e"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/df4d1739-47f0-60c7-1706-3731fea6ab03"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/1a36f14a-8bd8-45f5-abe5-eef88d76ab5b"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/beb62be3-5e78-49bd-ac5f-099250ef3c7c"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/ba975338-f956-41e7-a9f2-7614832d382d"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/d5a8d84a-9ad0-42e2-80e0-d38e3d46028a"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/5a3d6cdd-8eb3-46d2-ba11-d24a0d47fe65"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/d8326952-60bb-40fb-b33f-51e662708a88"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/08e628db-e2ed-4793-bc91-d13e684401c3"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/5f88450f-9546-4b78-a181-a2d9162bb441"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/add45209-73f6-4fa5-a5a5-74a451b07fbe"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/dbfc99e3-e648-4c3b-bd32-995e6268430d"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/b3473ed6-78c0-40d5-b5f0-674e98924952"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/9dd55566-33b9-4c07-a959-14794ce02355"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/ad0b04b9-eaf9-49f8-b85e-724f9520e760"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/ece6ec5d-a862-4e22-a8db-271661216018"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/e40b679a-f44e-4366-87dd-7693e16a2128"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/0bdcd23c-4ff2-4077-aa14-eb6950bfbdd8"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/1f386f4e-449e-41e8-b829-a2fe01086ae1"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/2f6c8a5a-9407-467c-8082-0ad4ab915d77"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/3b1713ec-feb3-4b32-b5b0-251acff0a84a"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/049f1551-438b-444e-8904-a3c3afbcb43e"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/684307e9-62a8-4f2a-887a-4b90de5e4b98"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/0327f9da-f758-4d69-8903-55448b8cf70e"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/cc637123-c11e-40ee-adf8-93c0876481f4"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/a7c8fa46-526d-4bf6-b8b3-17fa01310fd8"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/20f6c761-4dd7-4f27-9e37-6db8471486ef"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/ebc68898-5c0f-4353-a426-4a5f1e737b12"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/f67fb4ed-d481-44d7-91e5-efadf504f74a"),
									}},
								DisplayName: to.Ptr("Restrict unauthorized network access"),
								MaxScore:    to.Ptr[int32](4),
								Source: &armsecurity.SecureScoreControlDefinitionSource{
									SourceType: to.Ptr(armsecurity.ControlTypeBuiltIn),
								},
							},
						},
						DisplayName:                to.Ptr("Restrict unauthorized network access"),
						HealthyResourceCount:       to.Ptr[int32](1),
						NotApplicableResourceCount: to.Ptr[int32](0),
						Score: &armsecurity.ScoreDetails{
							Current:    to.Ptr[float64](4),
							Max:        to.Ptr[int32](4),
							Percentage: to.Ptr[float64](1),
						},
						UnhealthyResourceCount: to.Ptr[int32](0),
						Weight:                 to.Ptr[int64](1),
					},
				},
				{
					Name: to.Ptr("8fd574ec-43cf-426e-a439-a67cbaf2d564"),
					Type: to.Ptr("Microsoft.Security/secureScores/secureScoreControls"),
					ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/secureScores/ascScore/secureScoreControls/8fd574ec-43cf-426e-a439-a67cbaf2d564"),
					Properties: &armsecurity.SecureScoreControlScoreDetails{
						Definition: &armsecurity.SecureScoreControlDefinitionItem{
							Name: to.Ptr("8fd574ec-43cf-426e-a439-a67cbaf2d564"),
							Type: to.Ptr("Microsoft.Security/secureScoreControlDefinitions"),
							ID:   to.Ptr("/providers/Microsoft.Security/secureScoreControlDefinitions/8fd574ec-43cf-426e-a439-a67cbaf2d564"),
							Properties: &armsecurity.SecureScoreControlDefinitionItemProperties{
								AssessmentDefinitions: []*armsecurity.AzureResourceLink{
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/d57a4221-a804-52ca-3dea-768284f06bb7"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/651967bf-044e-4bde-8376-3e08e0600105"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/b12bc79e-4f12-44db-acda-571820191ddc"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/7f04fc0c-4a3d-5c7e-ce19-666cb871b510"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/dbfc99e3-e648-4c3b-bd32-995e6268430d"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/c01fab9f-bde1-4ba5-9d35-7de51f31c2d3"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/23b514bd-2afc-4a3e-8d3d-f4327118eee9"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/3053474d-4fab-4603-8d18-2a6dfd09f782"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/6be98232-0100-474a-b33d-ba9c1a747f70"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/a7c8fa46-526d-4bf6-b8b3-17fa01310fd8"),
									},
									{
										ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/20f6c761-4dd7-4f27-9e37-6db8471486ef"),
									}},
								DisplayName: to.Ptr("Enable encryption at rest"),
								MaxScore:    to.Ptr[int32](4),
								Source: &armsecurity.SecureScoreControlDefinitionSource{
									SourceType: to.Ptr(armsecurity.ControlTypeBuiltIn),
								},
							},
						},
						DisplayName:                to.Ptr("Enable encryption at rest"),
						HealthyResourceCount:       to.Ptr[int32](1),
						NotApplicableResourceCount: to.Ptr[int32](0),
						Score: &armsecurity.ScoreDetails{
							Current:    to.Ptr[float64](4),
							Max:        to.Ptr[int32](4),
							Percentage: to.Ptr[float64](1),
						},
						UnhealthyResourceCount: to.Ptr[int32](0),
						Weight:                 to.Ptr[int64](1),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SecureScoreControlList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SecureScoreControlList)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/stable/2020-01-01/examples/secureScores/ListSecureScoreControlsForNameWithExpand_builtin_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSecureScoreControls_List(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/stable/2020-01-01/examples/secureScores/ListSecureScoreControls_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all secure scores controls"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewSecureScoreControlsClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23", cred, &options)
	pager := client.List(&armsecurity.SecureScoreControlsClientListOptions{Expand: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/security/resource-manager/Microsoft.Security/stable/2020-01-01/examples/secureScores/ListSecureScoreControls_example.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsecurity.SecureScoreControlList{
			Value: []*armsecurity.SecureScoreControlDetails{
				{
					Name: to.Ptr("a9909064-42b4-4d34-8143-275477afe18b"),
					Type: to.Ptr("Microsoft.Security/secureScores/secureScoreControls"),
					ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/secureScores/ascScore/secureScoreControls/a9909064-42b4-4d34-8143-275477afe18b"),
					Properties: &armsecurity.SecureScoreControlScoreDetails{
						DisplayName:                to.Ptr("Protect applications against DDoS attacks"),
						HealthyResourceCount:       to.Ptr[int32](0),
						NotApplicableResourceCount: to.Ptr[int32](1),
						Score: &armsecurity.ScoreDetails{
							Current:    to.Ptr[float64](0),
							Max:        to.Ptr[int32](0),
							Percentage: to.Ptr[float64](0),
						},
						UnhealthyResourceCount: to.Ptr[int32](0),
						Weight:                 to.Ptr[int64](0),
					},
				},
				{
					Name: to.Ptr("34a42fb3-e6db-409c-b56b-7b1db6b8aee0"),
					Type: to.Ptr("Microsoft.Security/secureScores/secureScoreControls"),
					ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/secureScores/ascScore/secureScoreControls/34a42fb3-e6db-409c-b56b-7b1db6b8aee0"),
					Properties: &armsecurity.SecureScoreControlScoreDetails{
						DisplayName:                to.Ptr("Enable MFA"),
						HealthyResourceCount:       to.Ptr[int32](1),
						NotApplicableResourceCount: to.Ptr[int32](0),
						Score: &armsecurity.ScoreDetails{
							Current:    to.Ptr[float64](10),
							Max:        to.Ptr[int32](10),
							Percentage: to.Ptr[float64](1),
						},
						UnhealthyResourceCount: to.Ptr[int32](0),
						Weight:                 to.Ptr[int64](1),
					},
				},
				{
					Name: to.Ptr("76763537-9feb-42d3-b4f4-78c01117be80"),
					Type: to.Ptr("Microsoft.Security/secureScores/secureScoreControls"),
					ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/secureScores/ascScore/secureScoreControls/76763537-9feb-42d3-b4f4-78c01117be80"),
					Properties: &armsecurity.SecureScoreControlScoreDetails{
						DisplayName:                to.Ptr("Implement security best practices"),
						HealthyResourceCount:       to.Ptr[int32](7),
						NotApplicableResourceCount: to.Ptr[int32](1),
						Score: &armsecurity.ScoreDetails{
							Current:    to.Ptr[float64](0),
							Max:        to.Ptr[int32](0),
							Percentage: to.Ptr[float64](0),
						},
						UnhealthyResourceCount: to.Ptr[int32](0),
						Weight:                 to.Ptr[int64](7),
					},
				},
				{
					Name: to.Ptr("4db8d6cf-075b-4149-a813-da09ca2ae120"),
					Type: to.Ptr("Microsoft.Security/secureScores/secureScoreControls"),
					ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/secureScores/ascScore/secureScoreControls/4db8d6cf-075b-4149-a813-da09ca2ae120"),
					Properties: &armsecurity.SecureScoreControlScoreDetails{
						DisplayName:                to.Ptr("Enable Advanced Threat Protection"),
						HealthyResourceCount:       to.Ptr[int32](0),
						NotApplicableResourceCount: to.Ptr[int32](0),
						Score: &armsecurity.ScoreDetails{
							Current:    to.Ptr[float64](0),
							Max:        to.Ptr[int32](0),
							Percentage: to.Ptr[float64](0),
						},
						UnhealthyResourceCount: to.Ptr[int32](1),
						Weight:                 to.Ptr[int64](1),
					},
				},
				{
					Name: to.Ptr("27b24961-75ba-4fe4-8909-97286d5dd5ee"),
					Type: to.Ptr("Microsoft.Security/secureScores/secureScoreControls"),
					ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/secureScores/ascScore/secureScoreControls/27b24961-75ba-4fe4-8909-97286d5dd5ee"),
					Properties: &armsecurity.SecureScoreControlScoreDetails{
						DisplayName:                to.Ptr("Enable auditing and logging"),
						HealthyResourceCount:       to.Ptr[int32](1),
						NotApplicableResourceCount: to.Ptr[int32](0),
						Score: &armsecurity.ScoreDetails{
							Current:    to.Ptr[float64](0.2),
							Max:        to.Ptr[int32](1),
							Percentage: to.Ptr[float64](0.2),
						},
						UnhealthyResourceCount: to.Ptr[int32](4),
						Weight:                 to.Ptr[int64](5),
					},
				},
				{
					Name: to.Ptr("2d85f639-0bea-4a4a-b6c6-608952a1414a"),
					Type: to.Ptr("Microsoft.Security/secureScores/secureScoreControls"),
					ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/secureScores/ascScore/secureScoreControls/2d85f639-0bea-4a4a-b6c6-608952a1414a"),
					Properties: &armsecurity.SecureScoreControlScoreDetails{
						DisplayName:                to.Ptr("Manage access and permissions"),
						HealthyResourceCount:       to.Ptr[int32](1),
						NotApplicableResourceCount: to.Ptr[int32](0),
						Score: &armsecurity.ScoreDetails{
							Current:    to.Ptr[float64](2),
							Max:        to.Ptr[int32](4),
							Percentage: to.Ptr[float64](0.5),
						},
						UnhealthyResourceCount: to.Ptr[int32](1),
						Weight:                 to.Ptr[int64](2),
					},
				},
				{
					Name: to.Ptr("99fc8df2-e0f5-40f8-9415-a7f7ca948b5a"),
					Type: to.Ptr("Microsoft.Security/secureScores/secureScoreControls"),
					ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/secureScores/ascScore/secureScoreControls/99fc8df2-e0f5-40f8-9415-a7f7ca948b5a"),
					Properties: &armsecurity.SecureScoreControlScoreDetails{
						DisplayName:                to.Ptr("Remediate security configurations"),
						HealthyResourceCount:       to.Ptr[int32](0),
						NotApplicableResourceCount: to.Ptr[int32](0),
						Score: &armsecurity.ScoreDetails{
							Current:    to.Ptr[float64](0),
							Max:        to.Ptr[int32](4),
							Percentage: to.Ptr[float64](0),
						},
						UnhealthyResourceCount: to.Ptr[int32](1),
						Weight:                 to.Ptr[int64](1),
					},
				},
				{
					Name: to.Ptr("12136bd9-dc24-44f2-9587-7be3af6aac14"),
					Type: to.Ptr("Microsoft.Security/secureScores/secureScoreControls"),
					ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/secureScores/ascScore/secureScoreControls/12136bd9-dc24-44f2-9587-7be3af6aac14"),
					Properties: &armsecurity.SecureScoreControlScoreDetails{
						DisplayName:                to.Ptr("Enable endpoint protection"),
						HealthyResourceCount:       to.Ptr[int32](0),
						NotApplicableResourceCount: to.Ptr[int32](0),
						Score: &armsecurity.ScoreDetails{
							Current:    to.Ptr[float64](0),
							Max:        to.Ptr[int32](2),
							Percentage: to.Ptr[float64](0),
						},
						UnhealthyResourceCount: to.Ptr[int32](1),
						Weight:                 to.Ptr[int64](1),
					},
				},
				{
					Name: to.Ptr("61702b76-1fab-41f2-bcbc-50b7870dcf38"),
					Type: to.Ptr("Microsoft.Security/secureScores/secureScoreControls"),
					ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/secureScores/ascScore/secureScoreControls/61702b76-1fab-41f2-bcbc-50b7870dcf38"),
					Properties: &armsecurity.SecureScoreControlScoreDetails{
						DisplayName:                to.Ptr("Apply system updates"),
						HealthyResourceCount:       to.Ptr[int32](0),
						NotApplicableResourceCount: to.Ptr[int32](0),
						Score: &armsecurity.ScoreDetails{
							Current:    to.Ptr[float64](0),
							Max:        to.Ptr[int32](6),
							Percentage: to.Ptr[float64](0),
						},
						UnhealthyResourceCount: to.Ptr[int32](1),
						Weight:                 to.Ptr[int64](1),
					},
				},
				{
					Name: to.Ptr("0e55495e-034f-4abc-8293-767229250176"),
					Type: to.Ptr("Microsoft.Security/secureScores/secureScoreControls"),
					ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/secureScores/ascScore/secureScoreControls/0e55495e-034f-4abc-8293-767229250176"),
					Properties: &armsecurity.SecureScoreControlScoreDetails{
						DisplayName:                to.Ptr("Encrypt data in transit"),
						HealthyResourceCount:       to.Ptr[int32](5),
						NotApplicableResourceCount: to.Ptr[int32](0),
						Score: &armsecurity.ScoreDetails{
							Current:    to.Ptr[float64](3.33),
							Max:        to.Ptr[int32](4),
							Percentage: to.Ptr[float64](0.8325),
						},
						UnhealthyResourceCount: to.Ptr[int32](1),
						Weight:                 to.Ptr[int64](6),
					},
				},
				{
					Name: to.Ptr("f9d5432b-8f7b-45e9-b90c-e214a30f6a02"),
					Type: to.Ptr("Microsoft.Security/secureScores/secureScoreControls"),
					ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/secureScores/ascScore/secureScoreControls/f9d5432b-8f7b-45e9-b90c-e214a30f6a02"),
					Properties: &armsecurity.SecureScoreControlScoreDetails{
						DisplayName:                to.Ptr("Restrict unauthorized network access"),
						HealthyResourceCount:       to.Ptr[int32](1),
						NotApplicableResourceCount: to.Ptr[int32](0),
						Score: &armsecurity.ScoreDetails{
							Current:    to.Ptr[float64](4),
							Max:        to.Ptr[int32](4),
							Percentage: to.Ptr[float64](1),
						},
						UnhealthyResourceCount: to.Ptr[int32](0),
						Weight:                 to.Ptr[int64](1),
					},
				},
				{
					Name: to.Ptr("8fd574ec-43cf-426e-a439-a67cbaf2d564"),
					Type: to.Ptr("Microsoft.Security/secureScores/secureScoreControls"),
					ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/secureScores/ascScore/secureScoreControls/8fd574ec-43cf-426e-a439-a67cbaf2d564"),
					Properties: &armsecurity.SecureScoreControlScoreDetails{
						DisplayName:                to.Ptr("Enable encryption at rest"),
						HealthyResourceCount:       to.Ptr[int32](1),
						NotApplicableResourceCount: to.Ptr[int32](0),
						Score: &armsecurity.ScoreDetails{
							Current:    to.Ptr[float64](4),
							Max:        to.Ptr[int32](4),
							Percentage: to.Ptr[float64](1),
						},
						UnhealthyResourceCount: to.Ptr[int32](0),
						Weight:                 to.Ptr[int64](1),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SecureScoreControlList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SecureScoreControlList)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/stable/2020-01-01/examples/secureScores/ListSecureScoreControls_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSecureScoreControlDefinitions_List(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/stable/2020-01-01/examples/secureScoreControlDefinitions/ListSecureScoreControlDefinitions_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List security controls definition"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewSecureScoreControlDefinitionsClient("<subscription-id>", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/security/resource-manager/Microsoft.Security/stable/2020-01-01/examples/secureScoreControlDefinitions/ListSecureScoreControlDefinitions_example.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsecurity.SecureScoreControlDefinitionList{
			Value: []*armsecurity.SecureScoreControlDefinitionItem{
				{
					Name: to.Ptr("a9909064-42b4-4d34-8143-275477afe18b"),
					Type: to.Ptr("Microsoft.Security/SecureScoreControlDefinitions"),
					ID:   to.Ptr("/providers/Microsoft.Security/SecureScoreControlDefinitions/a9909064-42b4-4d34-8143-275477afe18b"),
					Properties: &armsecurity.SecureScoreControlDefinitionItemProperties{
						Description: to.Ptr("This control contains recommendations regarding DDoS attack prevention"),
						AssessmentDefinitions: []*armsecurity.AzureResourceLink{
							{
								ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/e3de1cc0-f4dd-3b34-e496-8b5381ba2d70"),
							}},
						DisplayName: to.Ptr("Protect applications against DDoS attacks"),
						MaxScore:    to.Ptr[int32](2),
						Source: &armsecurity.SecureScoreControlDefinitionSource{
							SourceType: to.Ptr(armsecurity.ControlTypeBuiltIn),
						},
					},
				},
				{
					Name: to.Ptr("a000c66f-6da2-4f9d-826d-2364347d2588"),
					Type: to.Ptr("Microsoft.Security/SecureScoreControlDefinitions"),
					ID:   to.Ptr("/providers/Microsoft.Security/SecureScoreControlDefinitions/a000c66f-6da2-4f9d-826d-2364347d2588"),
					Properties: &armsecurity.SecureScoreControlDefinitionItemProperties{
						Description: to.Ptr("This control contains recommendations regarding enabling adaptive application control"),
						AssessmentDefinitions: []*armsecurity.AzureResourceLink{
							{
								ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/35f45c95-27cf-4e52-891f-8390d1de5828"),
							},
							{
								ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/d1db3318-01ff-16de-29eb-28b344515626"),
							},
							{
								ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/e7ee30c4-bac9-2966-54bd-2023a4282872"),
							},
							{
								ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/8e2b96ff-3de2-289b-b5c1-3b9921a3441e"),
							}},
						DisplayName: to.Ptr("Apply adaptive application control"),
						MaxScore:    to.Ptr[int32](3),
						Source: &armsecurity.SecureScoreControlDefinitionSource{
							SourceType: to.Ptr(armsecurity.ControlTypeBuiltIn),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SecureScoreControlDefinitionList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SecureScoreControlDefinitionList)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/stable/2020-01-01/examples/secureScoreControlDefinitions/ListSecureScoreControlDefinitions_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSecureScoreControlDefinitions_ListBySubscription(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/stable/2020-01-01/examples/secureScoreControlDefinitions/ListSecureScoreControlDefinitions_subscription_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List security controls definition by subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewSecureScoreControlDefinitionsClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23", cred, &options)
	pager := client.ListBySubscription(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/security/resource-manager/Microsoft.Security/stable/2020-01-01/examples/secureScoreControlDefinitions/ListSecureScoreControlDefinitions_subscription_example.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsecurity.SecureScoreControlDefinitionList{
			Value: []*armsecurity.SecureScoreControlDefinitionItem{
				{
					Name: to.Ptr("a9909064-42b4-4d34-8143-275477afe18b"),
					Type: to.Ptr("Microsoft.Security/SecureScoreControlDefinitions"),
					ID:   to.Ptr("/providers/Microsoft.Security/SecureScoreControlDefinitions/a9909064-42b4-4d34-8143-275477afe18b"),
					Properties: &armsecurity.SecureScoreControlDefinitionItemProperties{
						Description: to.Ptr("This control contains recommendations regarding DDoS attack prevention"),
						AssessmentDefinitions: []*armsecurity.AzureResourceLink{
							{
								ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/e3de1cc0-f4dd-3b34-e496-8b5381ba2d70"),
							}},
						DisplayName: to.Ptr("Protect applications against DDoS attacks"),
						MaxScore:    to.Ptr[int32](2),
						Source: &armsecurity.SecureScoreControlDefinitionSource{
							SourceType: to.Ptr(armsecurity.ControlTypeBuiltIn),
						},
					},
				},
				{
					Name: to.Ptr("34a42fb3-e6db-409c-b56b-7b1db6b8aee0"),
					Type: to.Ptr("Microsoft.Security/SecureScoreControlDefinitions"),
					ID:   to.Ptr("/providers/Microsoft.Security/SecureScoreControlDefinitions/34a42fb3-e6db-409c-b56b-7b1db6b8aee0"),
					Properties: &armsecurity.SecureScoreControlDefinitionItemProperties{
						Description: to.Ptr("This control contains recommendations regarding MFA"),
						AssessmentDefinitions: []*armsecurity.AzureResourceLink{
							{
								ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/151e82c5-5341-a74b-1eb0-bc38d2c84bb5"),
							},
							{
								ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/57e98606-6b1e-6193-0e3d-fe621387c16b"),
							},
							{
								ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/94290b00-4d0c-d7b4-7cea-064a9554e681"),
							}},
						DisplayName: to.Ptr("Enable MFA"),
						MaxScore:    to.Ptr[int32](10),
						Source: &armsecurity.SecureScoreControlDefinitionSource{
							SourceType: to.Ptr(armsecurity.ControlTypeBuiltIn),
						},
					},
				},
				{
					Name: to.Ptr("a000c66f-6da2-4f9d-826d-2364347d2588"),
					Type: to.Ptr("Microsoft.Security/SecureScoreControlDefinitions"),
					ID:   to.Ptr("/providers/Microsoft.Security/SecureScoreControlDefinitions/a000c66f-6da2-4f9d-826d-2364347d2588"),
					Properties: &armsecurity.SecureScoreControlDefinitionItemProperties{
						Description: to.Ptr("This control contains recommendations regarding enabling adaptive application control"),
						AssessmentDefinitions: []*armsecurity.AzureResourceLink{
							{
								ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/35f45c95-27cf-4e52-891f-8390d1de5828"),
							},
							{
								ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/d1db3318-01ff-16de-29eb-28b344515626"),
							},
							{
								ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/e7ee30c4-bac9-2966-54bd-2023a4282872"),
							},
							{
								ID: to.Ptr("/providers/Microsoft.Security/assessmentMetadata/8e2b96ff-3de2-289b-b5c1-3b9921a3441e"),
							}},
						DisplayName: to.Ptr("Apply adaptive application control"),
						MaxScore:    to.Ptr[int32](3),
						Source: &armsecurity.SecureScoreControlDefinitionSource{
							SourceType: to.Ptr(armsecurity.ControlTypeBuiltIn),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SecureScoreControlDefinitionList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SecureScoreControlDefinitionList)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/stable/2020-01-01/examples/secureScoreControlDefinitions/ListSecureScoreControlDefinitions_subscription_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSecuritySolutions_List(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/stable/2020-01-01/examples/SecuritySolutions/GetSecuritySolutionsSubscription_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get security solutions"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewSolutionsClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23",
		"<asc-location>", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/security/resource-manager/Microsoft.Security/stable/2020-01-01/examples/SecuritySolutions/GetSecuritySolutionsSubscription_example.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsecurity.SolutionList{
			Value: []*armsecurity.Solution{
				{
					Location: to.Ptr("eastus"),
					Name:     to.Ptr("MySaasWaf"),
					Type:     to.Ptr("Microsoft.Security/locations/securitySolutions"),
					ID:       to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/myRg1/providers/Microsoft.Security/locations/centralus/securitySolutions/SaasWaf"),
					Properties: &armsecurity.SolutionProperties{
						ProtectionStatus:  to.Ptr("Good"),
						ProvisioningState: to.Ptr(armsecurity.ProvisioningStateSucceeded),
						SecurityFamily:    to.Ptr(armsecurity.SecurityFamilySaasWaf),
						Template:          to.Ptr("microsoft/ApplicationGateway-ARM"),
					},
				},
				{
					Location: to.Ptr("eastus2"),
					Name:     to.Ptr("MyVA"),
					Type:     to.Ptr("Microsoft.Security/locations/securitySolutions"),
					ID:       to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/myRg2/providers/Microsoft.Security/locations/centralus/securitySolutions/MyVA"),
					Properties: &armsecurity.SolutionProperties{
						ProtectionStatus:  to.Ptr("Good"),
						ProvisioningState: to.Ptr(armsecurity.ProvisioningStateSucceeded),
						SecurityFamily:    to.Ptr(armsecurity.SecurityFamilyVa),
						Template:          to.Ptr("qualys.qualysAgent"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SolutionList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SolutionList)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/stable/2020-01-01/examples/SecuritySolutions/GetSecuritySolutionsSubscription_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSecuritySolutions_Get(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/stable/2020-01-01/examples/SecuritySolutions/GetSecuritySolutionsResourceGroupLocation_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a security solution from a security data location"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewSolutionsClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23",
		"centralus", cred, &options)
	res, err := client.Get(ctx,
		"myRg2",
		"paloalto7",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/stable/2020-01-01/examples/SecuritySolutions/GetSecuritySolutionsResourceGroupLocation_example.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurity.Solution{
			Location: to.Ptr("eastus2"),
			Name:     to.Ptr("MyVA"),
			Type:     to.Ptr("Microsoft.Security/locations/securitySolutions"),
			ID:       to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/myRg2/providers/Microsoft.Security/locations/centralus/securitySolutions/paloalto7"),
			Properties: &armsecurity.SolutionProperties{
				ProtectionStatus:  to.Ptr("Good"),
				ProvisioningState: to.Ptr(armsecurity.ProvisioningStateSucceeded),
				SecurityFamily:    to.Ptr(armsecurity.SecurityFamilyNgfw),
				Template:          to.Ptr("paloalto.paloaltofw"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Solution) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Solution)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/stable/2020-01-01/examples/SecuritySolutions/GetSecuritySolutionsResourceGroupLocation_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAccountConnectors_List(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/preview/2020-01-01-preview/examples/Connectors/GetListConnectorSubscription_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get all cloud accounts connectors of a subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewAccountConnectorsClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/security/resource-manager/Microsoft.Security/preview/2020-01-01-preview/examples/Connectors/GetListConnectorSubscription_example.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsecurity.ConnectorSettingList{
			Value: []*armsecurity.ConnectorSetting{
				{
					Name: to.Ptr("aws_dev1"),
					Type: to.Ptr("Microsoft.Security/connectors"),
					ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/connectors/aws_dev1"),
					Properties: &armsecurity.ConnectorSettingProperties{
						AuthenticationDetails: &armsecurity.AwsCredsAuthenticationDetailsProperties{
							AuthenticationProvisioningState: to.Ptr(armsecurity.AuthenticationProvisioningStateValid),
							AuthenticationType:              to.Ptr(armsecurity.AuthenticationTypeAwsCreds),
							GrantedPermissions: []*armsecurity.PermissionProperty{
								to.Ptr(armsecurity.PermissionPropertyAWSAWSSecurityHubReadOnlyAccess),
								to.Ptr(armsecurity.PermissionPropertyAWSSecurityAudit),
								to.Ptr(armsecurity.PermissionPropertyAWSAmazonSSMAutomationRole)},
							AccountID:          to.Ptr("922315681122"),
							AwsAccessKeyID:     to.Ptr(""),
							AwsSecretAccessKey: to.Ptr(""),
						},
						HybridComputeSettings: &armsecurity.HybridComputeSettingsProperties{
							AutoProvision:                  to.Ptr(armsecurity.AutoProvisionOn),
							HybridComputeProvisioningState: to.Ptr(armsecurity.HybridComputeProvisioningStateValid),
							ProxyServer: &armsecurity.ProxyServerProperties{
								IP:   to.Ptr("287.221.107.152"),
								Port: to.Ptr("34"),
							},
							Region:            to.Ptr("West US 2"),
							ResourceGroupName: to.Ptr("AwsConnectorRG"),
							ServicePrincipal: &armsecurity.ServicePrincipalProperties{
								ApplicationID: to.Ptr("ad9bcd79-be9c-45ab-abd8-80ca1654a7d1"),
							},
						},
					},
				},
				{
					Name: to.Ptr("aws_dev2"),
					Type: to.Ptr("Microsoft.Security/connectors"),
					ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/connectors/aws_dev2"),
					Properties: &armsecurity.ConnectorSettingProperties{
						AuthenticationDetails: &armsecurity.AwAssumeRoleAuthenticationDetailsProperties{
							AuthenticationProvisioningState: to.Ptr(armsecurity.AuthenticationProvisioningStateValid),
							AuthenticationType:              to.Ptr(armsecurity.AuthenticationTypeAwsAssumeRole),
							GrantedPermissions: []*armsecurity.PermissionProperty{
								to.Ptr(armsecurity.PermissionPropertyAWSAWSSecurityHubReadOnlyAccess),
								to.Ptr(armsecurity.PermissionPropertyAWSSecurityAudit),
								to.Ptr(armsecurity.PermissionPropertyAWSAmazonSSMAutomationRole)},
							AccountID:        to.Ptr("81231569658"),
							AwsAssumeRoleArn: to.Ptr("arn:aws:iam::81231569658:role/AscConnector"),
							AwsExternalID:    to.Ptr("20ff7fc3-e762-44dd-bd96-b71116dcdc23"),
						},
						HybridComputeSettings: &armsecurity.HybridComputeSettingsProperties{
							AutoProvision:                  to.Ptr(armsecurity.AutoProvisionOn),
							HybridComputeProvisioningState: to.Ptr(armsecurity.HybridComputeProvisioningStateValid),
							ProxyServer: &armsecurity.ProxyServerProperties{
								IP:   to.Ptr("167.210.187.160"),
								Port: to.Ptr("34"),
							},
							Region:            to.Ptr("West US 2"),
							ResourceGroupName: to.Ptr("AwsConnectorRG"),
							ServicePrincipal: &armsecurity.ServicePrincipalProperties{
								ApplicationID: to.Ptr("ad9bcd79-be9c-45ab-abd8-80ca1654a7d1"),
							},
						},
					},
				},
				{
					Name: to.Ptr("gcp_dev"),
					Type: to.Ptr("Microsoft.Security/connectors"),
					ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/connectors/gcp_dev"),
					Properties: &armsecurity.ConnectorSettingProperties{
						AuthenticationDetails: &armsecurity.GcpCredentialsDetailsProperties{
							AuthenticationProvisioningState: to.Ptr(armsecurity.AuthenticationProvisioningStateValid),
							AuthenticationType:              to.Ptr(armsecurity.AuthenticationTypeGcpCredentials),
							GrantedPermissions: []*armsecurity.PermissionProperty{
								to.Ptr(armsecurity.PermissionPropertyGCPSecurityCenterAdminViewer)},
							Type:                    to.Ptr(""),
							AuthProviderX509CertURL: to.Ptr(""),
							AuthURI:                 to.Ptr(""),
							ClientEmail:             to.Ptr(""),
							ClientID:                to.Ptr(""),
							ClientX509CertURL:       to.Ptr(""),
							OrganizationID:          to.Ptr("AscDemoOrg"),
							PrivateKey:              to.Ptr(""),
							PrivateKeyID:            to.Ptr(""),
							ProjectID:               to.Ptr(""),
							TokenURI:                to.Ptr(""),
						},
						HybridComputeSettings: &armsecurity.HybridComputeSettingsProperties{
							AutoProvision:                  to.Ptr(armsecurity.AutoProvisionOff),
							HybridComputeProvisioningState: to.Ptr(armsecurity.HybridComputeProvisioningStateInvalid),
							Region:                         to.Ptr(""),
							ResourceGroupName:              to.Ptr(""),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ConnectorSettingList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ConnectorSettingList)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/preview/2020-01-01-preview/examples/Connectors/GetListConnectorSubscription_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAccountConnectors_Get(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/preview/2020-01-01-preview/examples/Connectors/GetConnectorSubscription_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Details of a specific cloud account connector"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewAccountConnectorsClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23", cred, &options)
	res, err := client.Get(ctx,
		"aws_dev1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/preview/2020-01-01-preview/examples/Connectors/GetConnectorSubscription_example.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurity.ConnectorSetting{
			Name: to.Ptr("aws_dev1"),
			Type: to.Ptr("Microsoft.Security/connectors"),
			ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/connectors/aws_dev1"),
			Properties: &armsecurity.ConnectorSettingProperties{
				AuthenticationDetails: &armsecurity.AwsCredsAuthenticationDetailsProperties{
					AuthenticationProvisioningState: to.Ptr(armsecurity.AuthenticationProvisioningStateValid),
					AuthenticationType:              to.Ptr(armsecurity.AuthenticationTypeAwsCreds),
					GrantedPermissions: []*armsecurity.PermissionProperty{
						to.Ptr(armsecurity.PermissionPropertyAWSAWSSecurityHubReadOnlyAccess),
						to.Ptr(armsecurity.PermissionPropertyAWSSecurityAudit),
						to.Ptr(armsecurity.PermissionPropertyAWSAmazonSSMAutomationRole)},
					AccountID:          to.Ptr("922315681122"),
					AwsAccessKeyID:     to.Ptr(""),
					AwsSecretAccessKey: to.Ptr(""),
				},
				HybridComputeSettings: &armsecurity.HybridComputeSettingsProperties{
					AutoProvision:                  to.Ptr(armsecurity.AutoProvisionOn),
					HybridComputeProvisioningState: to.Ptr(armsecurity.HybridComputeProvisioningStateValid),
					ProxyServer: &armsecurity.ProxyServerProperties{
						IP:   to.Ptr("287.221.107.152"),
						Port: to.Ptr("34"),
					},
					Region:            to.Ptr("West US 2"),
					ResourceGroupName: to.Ptr("AwsConnectorRG"),
					ServicePrincipal: &armsecurity.ServicePrincipalProperties{
						ApplicationID: to.Ptr("ad9bcd79-be9c-45ab-abd8-80ca1654a7d1"),
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ConnectorSetting) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ConnectorSetting)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/preview/2020-01-01-preview/examples/Connectors/GetConnectorSubscription_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAccountConnectors_CreateOrUpdate(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/preview/2020-01-01-preview/examples/Connectors/CreateUpdateAwsAssumeRoleConnectorSubscription_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AwsAssumeRole - Create a cloud account connector for a subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewAccountConnectorsClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"aws_dev2",
		armsecurity.ConnectorSetting{
			Properties: &armsecurity.ConnectorSettingProperties{
				AuthenticationDetails: &armsecurity.AwAssumeRoleAuthenticationDetailsProperties{
					AuthenticationType: to.Ptr(armsecurity.AuthenticationTypeAwsAssumeRole),
					AwsAssumeRoleArn:   to.Ptr("arn:aws:iam::81231569658:role/AscConnector"),
					AwsExternalID:      to.Ptr("20ff7fc3-e762-44dd-bd96-b71116dcdc23"),
				},
				HybridComputeSettings: &armsecurity.HybridComputeSettingsProperties{
					AutoProvision: to.Ptr(armsecurity.AutoProvisionOn),
					ProxyServer: &armsecurity.ProxyServerProperties{
						IP:   to.Ptr("167.220.197.140"),
						Port: to.Ptr("34"),
					},
					Region:            to.Ptr("West US 2"),
					ResourceGroupName: to.Ptr("AwsConnectorRG"),
					ServicePrincipal: &armsecurity.ServicePrincipalProperties{
						ApplicationID: to.Ptr("ad9bcd79-be9c-45ab-abd8-80ca1654a7d1"),
						Secret:        to.Ptr("<secret>"),
					},
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/preview/2020-01-01-preview/examples/Connectors/CreateUpdateAwsAssumeRoleConnectorSubscription_example.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurity.ConnectorSetting{
			Name: to.Ptr("aws_dev2"),
			Type: to.Ptr("Microsoft.Security/connectors"),
			ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/connectors/aws_dev2"),
			Properties: &armsecurity.ConnectorSettingProperties{
				AuthenticationDetails: &armsecurity.AwAssumeRoleAuthenticationDetailsProperties{
					AuthenticationProvisioningState: to.Ptr(armsecurity.AuthenticationProvisioningStateValid),
					AuthenticationType:              to.Ptr(armsecurity.AuthenticationTypeAwsAssumeRole),
					GrantedPermissions: []*armsecurity.PermissionProperty{
						to.Ptr(armsecurity.PermissionPropertyAWSAWSSecurityHubReadOnlyAccess),
						to.Ptr(armsecurity.PermissionPropertyAWSSecurityAudit),
						to.Ptr(armsecurity.PermissionPropertyAWSAmazonSSMAutomationRole)},
					AccountID:        to.Ptr("81231569658"),
					AwsAssumeRoleArn: to.Ptr("arn:aws:iam::81231569658:role/AscConnector"),
					AwsExternalID:    to.Ptr("20ff7fc3-e762-44dd-bd96-b71116dcdc23"),
				},
				HybridComputeSettings: &armsecurity.HybridComputeSettingsProperties{
					AutoProvision:                  to.Ptr(armsecurity.AutoProvisionOn),
					HybridComputeProvisioningState: to.Ptr(armsecurity.HybridComputeProvisioningStateValid),
					ProxyServer: &armsecurity.ProxyServerProperties{
						IP:   to.Ptr("167.220.197.140"),
						Port: to.Ptr("34"),
					},
					Region:            to.Ptr("West US 2"),
					ResourceGroupName: to.Ptr("AwsConnectorRG"),
					ServicePrincipal: &armsecurity.ServicePrincipalProperties{
						ApplicationID: to.Ptr("ad9bcd79-be9c-45ab-abd8-80ca1654a7d1"),
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ConnectorSetting) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ConnectorSetting)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/preview/2020-01-01-preview/examples/Connectors/CreateUpdateAwsAssumeRoleConnectorSubscription_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/security/resource-manager/Microsoft.Security/preview/2020-01-01-preview/examples/Connectors/CreateUpdateAwsCredConnectorSubscription_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AwsCred - Create a cloud account connector for a subscription"},
	})
	client = armsecurity.NewAccountConnectorsClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"aws_dev1",
		armsecurity.ConnectorSetting{
			Properties: &armsecurity.ConnectorSettingProperties{
				AuthenticationDetails: &armsecurity.AwsCredsAuthenticationDetailsProperties{
					AuthenticationType: to.Ptr(armsecurity.AuthenticationTypeAwsCreds),
					AwsAccessKeyID:     to.Ptr("AKIARPZCNODDNAEQFSOE"),
					AwsSecretAccessKey: to.Ptr("<awsSecretAccessKey>"),
				},
				HybridComputeSettings: &armsecurity.HybridComputeSettingsProperties{
					AutoProvision: to.Ptr(armsecurity.AutoProvisionOn),
					ProxyServer: &armsecurity.ProxyServerProperties{
						IP:   to.Ptr("167.220.197.140"),
						Port: to.Ptr("34"),
					},
					Region:            to.Ptr("West US 2"),
					ResourceGroupName: to.Ptr("AwsConnectorRG"),
					ServicePrincipal: &armsecurity.ServicePrincipalProperties{
						ApplicationID: to.Ptr("ad9bcd79-be9c-45ab-abd8-80ca1654a7d1"),
						Secret:        to.Ptr("<secret>"),
					},
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/preview/2020-01-01-preview/examples/Connectors/CreateUpdateAwsCredConnectorSubscription_example.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurity.ConnectorSetting{
			Name: to.Ptr("aws_dev1"),
			Type: to.Ptr("Microsoft.Security/connectors"),
			ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/connectors/aws_dev1"),
			Properties: &armsecurity.ConnectorSettingProperties{
				AuthenticationDetails: &armsecurity.AwsCredsAuthenticationDetailsProperties{
					AuthenticationProvisioningState: to.Ptr(armsecurity.AuthenticationProvisioningStateValid),
					AuthenticationType:              to.Ptr(armsecurity.AuthenticationTypeAwsCreds),
					GrantedPermissions: []*armsecurity.PermissionProperty{
						to.Ptr(armsecurity.PermissionPropertyAWSAWSSecurityHubReadOnlyAccess),
						to.Ptr(armsecurity.PermissionPropertyAWSSecurityAudit),
						to.Ptr(armsecurity.PermissionPropertyAWSAmazonSSMAutomationRole)},
					AccountID:          to.Ptr("922315681122"),
					AwsAccessKeyID:     to.Ptr(""),
					AwsSecretAccessKey: to.Ptr(""),
				},
				HybridComputeSettings: &armsecurity.HybridComputeSettingsProperties{
					AutoProvision:                  to.Ptr(armsecurity.AutoProvisionOn),
					HybridComputeProvisioningState: to.Ptr(armsecurity.HybridComputeProvisioningStateValid),
					ProxyServer: &armsecurity.ProxyServerProperties{
						IP:   to.Ptr("287.221.107.152"),
						Port: to.Ptr("34"),
					},
					Region:            to.Ptr("West US 2"),
					ResourceGroupName: to.Ptr("AwsConnectorRG"),
					ServicePrincipal: &armsecurity.ServicePrincipalProperties{
						ApplicationID: to.Ptr("ad9bcd79-be9c-45ab-abd8-80ca1654a7d1"),
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ConnectorSetting) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ConnectorSetting)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/preview/2020-01-01-preview/examples/Connectors/CreateUpdateAwsCredConnectorSubscription_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/security/resource-manager/Microsoft.Security/preview/2020-01-01-preview/examples/Connectors/CreateUpdateGcpCredentialsConnectorSubscription_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"gcpCredentials - Create a cloud account connector for a subscription"},
	})
	client = armsecurity.NewAccountConnectorsClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23", cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"gcp_dev",
		armsecurity.ConnectorSetting{
			Properties: &armsecurity.ConnectorSettingProperties{
				AuthenticationDetails: &armsecurity.GcpCredentialsDetailsProperties{
					AuthenticationType:      to.Ptr(armsecurity.AuthenticationTypeGcpCredentials),
					Type:                    to.Ptr("service_account"),
					AuthProviderX509CertURL: to.Ptr("https://www.googleapis.com/oauth2/v1/certs"),
					AuthURI:                 to.Ptr("https://accounts.google.com/o/oauth2/auth"),
					ClientEmail:             to.Ptr("asc-135@asc-project-1234.iam.gserviceaccount.com"),
					ClientID:                to.Ptr("105889053725632919854"),
					ClientX509CertURL:       to.Ptr("https://www.googleapis.com/robot/v1/metadata/x509/asc-135%40asc-project-1234.iam.gserviceaccount.com"),
					OrganizationID:          to.Ptr("AscDemoOrg"),
					PrivateKey:              to.Ptr("-----BEGIN PRIVATE KEY-----\nMIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCpxYHcLzcDZ6/Q\nAeQZnQXM5GTb3p09Xsbjo2T2F61b6I7FZiQXBrbw3Zf0CUCkkqTTpD5xifl82yQ6\n89V7SAe8hxI7esAcVDhm/aJMqzVjHLISAU2L3li1sn0jjY2oYtndwN6bRivP8O6t\n9F+W6E0zMlbCxtpZEHLbb6WxlJJrwEQ0MPH2yOCwZUQi6NHksAtEzX2nNKJNyUC7\nQyBVHHMm34H2bmZwsuQp3y2otpcJ9tJnVmYfC3k/w4x2L+DIK7JnQP/C1wQqu2du\nc0w6sydF6RhLoHButrVdYRJTdfK4k03SsSTyMqZ+f7LNnKw3xenzw1VmEpk8mvoQ\nt08tCBOrAgMBAAECggEAByzz6iyMtLYjNjV+QJ7kad6VbL2iA8AHxANZ9xTVHPdd\nYXaJu/dqsA+NpqDlfI8+LDva782XH/HbPCqmMUnAGfXTjXQIvqnIoIHD5F2wKfpC\nhIRNlMXXFgbvRxtqi11yO+80+XcjzuwuCmgzyhsTeEB+bkkdXXpWgHPdmv3emnM6\nMQM9Zgrug0UndPmiUwKOcJSU4PlmlTpHEV4vA6JfA4bvphy9m1jxO5qWeah5yym2\n6FP5BRIDF98kFrDnSXJjajwgLCQ+MypFQXyax6XkxDxuKXbng1bv7eZDjqazIChk\nm0y14X0s0jnWc+AX8vfeSf7d+EsGdVinEwR1aAawEQKBgQDqDB0qxcIQ1oI1Kww8\n9vXefTiuWsf47F+fJ/DIOEbiRfE8IdCgmOABvcqJIoxW/DFMBEdLCcx73Km7pOmd\nKg1ddScnaO8cOj2v/Ub+fAqVrA4ki4ViYP0A7/Nogga3Jr/x3ey5bitrIfFImteS\nCgBHBzZvoQpvO4lB2tKVgo2P9wKBgQC5sgTEq4sasRGSAY6lIoJno0I8w28a/16D\nes60XQeY1ger8uTGwlT02v/u/arDUmRLPClpujXq6gK29KvtRCHy7JkpGbqW2bZs\nPFKKWR7Tk3XPKYyjv94AIi5/xoFeDhS4lpAvy3Z5tQhYS6wqWKvT6yZQ3kM+Hfxs\npHgvu3mU7QKBgQC9/E1k3hj1cBtMK4CIsHPPQljTd4+iacYJPPPAo6YuoVX8WPqw\nksgrwbN59Fh1d8xQh5yTtgWOegYx8uFMGcm1lpbM7+pBQKm4hWGuzGQPMRZd5f/F\nZzOZIi61I+9tlv/yxxIVR+/ozCm/pSneO04UWi9/F/uPZYW6tnWAtfRR6wKBgGsZ\n8MQaCK4JaI/klAhMghgSQnbXZXKVzUZaA3Rln6cX8u7KtgapOOTMlwaZie8Dy1LV\nTTFstAJcm9o3/h1nyYjZy3C4JTUyNpPwqs6enjf7edxVI4eidwFutZD+xcigqHTa\naikW2atSrZB3fMIjyF7+5meH+hKOqvNiXOty3qn1AoGAZuVxYQy5FVq3YZxzr3Aa\nAm0ShoXTF6QYIbsaUiUGoa/NlHcw9V/lj4AqBRbxbaYMD+hz2J/od9cb268eJKY8\n3b6MvaUqdNhNnWodJXLhgtmGEHDKmTppz2JSTx/tVzCfhFdcOC79StZvcKLhtoFQ\n+/3lEw6NCIXzm5E4+dtJG4k=\n-----END PRIVATE KEY-----\n"),
					PrivateKeyID:            to.Ptr("6efg587hra2568as34d22326b044cc20dc2af"),
					ProjectID:               to.Ptr("asc-project-1234"),
					TokenURI:                to.Ptr("https://oauth2.googleapis.com/token"),
				},
				HybridComputeSettings: &armsecurity.HybridComputeSettingsProperties{
					AutoProvision: to.Ptr(armsecurity.AutoProvisionOff),
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/preview/2020-01-01-preview/examples/Connectors/CreateUpdateGcpCredentialsConnectorSubscription_example.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurity.ConnectorSetting{
			Name: to.Ptr("gcp_dev"),
			Type: to.Ptr("Microsoft.Security/connectors"),
			ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/connectors/gcp_dev"),
			Properties: &armsecurity.ConnectorSettingProperties{
				AuthenticationDetails: &armsecurity.GcpCredentialsDetailsProperties{
					AuthenticationProvisioningState: to.Ptr(armsecurity.AuthenticationProvisioningStateValid),
					AuthenticationType:              to.Ptr(armsecurity.AuthenticationTypeGcpCredentials),
					GrantedPermissions: []*armsecurity.PermissionProperty{
						to.Ptr(armsecurity.PermissionPropertyGCPSecurityCenterAdminViewer)},
					Type:                    to.Ptr(""),
					AuthProviderX509CertURL: to.Ptr(""),
					AuthURI:                 to.Ptr(""),
					ClientEmail:             to.Ptr(""),
					ClientID:                to.Ptr(""),
					ClientX509CertURL:       to.Ptr(""),
					OrganizationID:          to.Ptr("AscDemoOrg"),
					PrivateKey:              to.Ptr(""),
					PrivateKeyID:            to.Ptr(""),
					ProjectID:               to.Ptr(""),
					TokenURI:                to.Ptr(""),
				},
				HybridComputeSettings: &armsecurity.HybridComputeSettingsProperties{
					AutoProvision:                  to.Ptr(armsecurity.AutoProvisionOff),
					HybridComputeProvisioningState: to.Ptr(armsecurity.HybridComputeProvisioningStateInvalid),
					Region:                         to.Ptr(""),
					ResourceGroupName:              to.Ptr(""),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ConnectorSetting) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ConnectorSetting)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/preview/2020-01-01-preview/examples/Connectors/CreateUpdateGcpCredentialsConnectorSubscription_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAccountConnectors_Delete(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/preview/2020-01-01-preview/examples/Connectors/DeleteConnectorSubscription_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a cloud account connector from a subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewAccountConnectorsClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23", cred, &options)
	_, err := client.Delete(ctx,
		"aws_dev1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/preview/2020-01-01-preview/examples/Connectors/DeleteConnectorSubscription_example.json: %v", err)
	}
}

func TestSQLVulnerabilityAssessmentScans_Get(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/preview/2020-07-01-preview/examples/sqlVulnerabilityAssessmentScanOperations/ArcMachineScans_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get scan details of a scan record"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewSQLVulnerabilityAssessmentScansClient(cred, &options)
	res, err := client.Get(ctx,
		"Scheduled-20200623",
		"55555555-6666-7777-8888-999999999999",
		"subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Rg/providers/Microsoft.HybridCompute/machines/MyMachine/sqlServers/server1/databases/master",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/preview/2020-07-01-preview/examples/sqlVulnerabilityAssessmentScanOperations/ArcMachineScans_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurity.Scan{
			Name: to.Ptr("Scheduled-20200623"),
			Type: to.Ptr("Microsoft.Security/sqlVulnerabilityAssessments/scans"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Rg/providers/Microsoft.HybridCompute/machines/MyMachine/sqlServers/server1/databases/master/providers/Microsoft.Security/sqlVulnerabilityAssessments/default/scans/Scheduled-20200623"),
			Properties: &armsecurity.ScanProperties{
				Database:                       to.Ptr("master"),
				EndTime:                        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-06-23T06:49:00.7236217Z"); return t }()),
				HighSeverityFailedRulesCount:   to.Ptr[int32](3),
				IsBaselineApplied:              to.Ptr(false),
				LowSeverityFailedRulesCount:    to.Ptr[int32](1),
				MediumSeverityFailedRulesCount: to.Ptr[int32](2),
				Server:                         to.Ptr("server1"),
				SQLVersion:                     to.Ptr("15.0.2000"),
				StartTime:                      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-06-23T06:49:00.6455136+00:00"); return t }()),
				State:                          to.Ptr(armsecurity.ScanStateFailed),
				TotalFailedRulesCount:          to.Ptr[int32](6),
				TotalPassedRulesCount:          to.Ptr[int32](20),
				TotalRulesCount:                to.Ptr[int32](26),
				TriggerType:                    to.Ptr(armsecurity.ScanTriggerTypeRecurring),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Scan) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Scan)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/preview/2020-07-01-preview/examples/sqlVulnerabilityAssessmentScanOperations/ArcMachineScans_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/security/resource-manager/Microsoft.Security/preview/2020-07-01-preview/examples/sqlVulnerabilityAssessmentScanOperations/ArcMachineScans_GetLatest.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get scan details of the latest scan record"},
	})
	client = armsecurity.NewSQLVulnerabilityAssessmentScansClient(cred, &options)
	res, err = client.Get(ctx,
		"latest",
		"55555555-6666-7777-8888-999999999999",
		"subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Rg/providers/Microsoft.HybridCompute/machines/MyMachine/sqlServers/server1/databases/master",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/preview/2020-07-01-preview/examples/sqlVulnerabilityAssessmentScanOperations/ArcMachineScans_GetLatest.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurity.Scan{
			Name: to.Ptr("Scheduled-20200623"),
			Type: to.Ptr("Microsoft.Security/sqlVulnerabilityAssessments/scans"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Rg/providers/Microsoft.HybridCompute/machines/MyMachine/sqlServers/server1/databases/master/providers/Microsoft.Security/sqlVulnerabilityAssessments/default/scans/Scheduled-20200623"),
			Properties: &armsecurity.ScanProperties{
				Database:                       to.Ptr("master"),
				EndTime:                        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-06-23T06:49:00.7236217Z"); return t }()),
				HighSeverityFailedRulesCount:   to.Ptr[int32](3),
				IsBaselineApplied:              to.Ptr(false),
				LowSeverityFailedRulesCount:    to.Ptr[int32](1),
				MediumSeverityFailedRulesCount: to.Ptr[int32](2),
				Server:                         to.Ptr("server1"),
				SQLVersion:                     to.Ptr("15.0.2000"),
				StartTime:                      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-06-23T06:49:00.6455136+00:00"); return t }()),
				State:                          to.Ptr(armsecurity.ScanStateFailed),
				TotalFailedRulesCount:          to.Ptr[int32](6),
				TotalPassedRulesCount:          to.Ptr[int32](20),
				TotalRulesCount:                to.Ptr[int32](26),
				TriggerType:                    to.Ptr(armsecurity.ScanTriggerTypeRecurring),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Scan) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Scan)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/preview/2020-07-01-preview/examples/sqlVulnerabilityAssessmentScanOperations/ArcMachineScans_GetLatest.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSQLVulnerabilityAssessmentScans_List(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/preview/2020-07-01-preview/examples/sqlVulnerabilityAssessmentScanOperations/ArcMachineScans_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List scan details"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewSQLVulnerabilityAssessmentScansClient(cred, &options)
	res, err := client.List(ctx,
		"55555555-6666-7777-8888-999999999999",
		"subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Rg/providers/Microsoft.HybridCompute/machines/MyMachine/sqlServers/server1/databases/master",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/preview/2020-07-01-preview/examples/sqlVulnerabilityAssessmentScanOperations/ArcMachineScans_List.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurity.Scans{
			Value: []*armsecurity.Scan{
				{
					Name: to.Ptr("Scheduled-20200225"),
					Type: to.Ptr("Microsoft.Security/sqlVulnerabilityAssessments/scans"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Rg/providers/Microsoft.HybridCompute/machines/MyMachine/sqlServers/server1/databases/master/providers/Microsoft.Security/sqlVulnerabilityAssessments/default/scans/Scheduled-20200225"),
					Properties: &armsecurity.ScanProperties{
						Database:                       to.Ptr("master"),
						EndTime:                        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-25T11:38:07.8606151Z"); return t }()),
						HighSeverityFailedRulesCount:   to.Ptr[int32](3),
						IsBaselineApplied:              to.Ptr(false),
						LowSeverityFailedRulesCount:    to.Ptr[int32](1),
						MediumSeverityFailedRulesCount: to.Ptr[int32](2),
						Server:                         to.Ptr("server1"),
						SQLVersion:                     to.Ptr("15.0.2000"),
						StartTime:                      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-25T11:34:29.1399864Z"); return t }()),
						State:                          to.Ptr(armsecurity.ScanStateFailed),
						TotalFailedRulesCount:          to.Ptr[int32](6),
						TotalPassedRulesCount:          to.Ptr[int32](20),
						TotalRulesCount:                to.Ptr[int32](26),
						TriggerType:                    to.Ptr(armsecurity.ScanTriggerTypeRecurring),
					},
				},
				{
					Name: to.Ptr("scan_20200226_113429"),
					Type: to.Ptr("Microsoft.Security/sqlVulnerabilityAssessments/scans"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Rg/providers/Microsoft.HybridCompute/machines/MyMachine/sqlServers/server1/databases/master/providers/Microsoft.Security/sqlVulnerabilityAssessments/default/scans/scan_20200226_113429"),
					Properties: &armsecurity.ScanProperties{
						Database:                       to.Ptr("master"),
						EndTime:                        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-26T11:38:07.8606151Z"); return t }()),
						HighSeverityFailedRulesCount:   to.Ptr[int32](0),
						IsBaselineApplied:              to.Ptr(true),
						LowSeverityFailedRulesCount:    to.Ptr[int32](0),
						MediumSeverityFailedRulesCount: to.Ptr[int32](0),
						Server:                         to.Ptr("server1"),
						SQLVersion:                     to.Ptr("15.0.2000"),
						StartTime:                      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-26T11:34:29.1399864Z"); return t }()),
						State:                          to.Ptr(armsecurity.ScanStatePassed),
						TotalFailedRulesCount:          to.Ptr[int32](0),
						TotalPassedRulesCount:          to.Ptr[int32](26),
						TotalRulesCount:                to.Ptr[int32](26),
						TriggerType:                    to.Ptr(armsecurity.ScanTriggerTypeOnDemand),
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.Scans) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Scans)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/preview/2020-07-01-preview/examples/sqlVulnerabilityAssessmentScanOperations/ArcMachineScans_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSQLVulnerabilityAssessmentScanResults_Get(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/preview/2020-07-01-preview/examples/sqlVulnerabilityAssessmentsScanResultsOperations/ArcMachineScanResults_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get scan details of a scan record"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewSQLVulnerabilityAssessmentScanResultsClient(cred, &options)
	res, err := client.Get(ctx,
		"Scheduled-20200623",
		"VA2063",
		"55555555-6666-7777-8888-999999999999",
		"subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Rg/providers/Microsoft.HybridCompute/machines/MyMachine/sqlServers/server1/databases/master",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/preview/2020-07-01-preview/examples/sqlVulnerabilityAssessmentsScanResultsOperations/ArcMachineScanResults_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurity.ScanResult{
			Name: to.Ptr("VA2063"),
			Type: to.Ptr("Microsoft.Security/sqlVulnerabilityAssessments/scans/scanResults"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Rg/providers/Microsoft.HybridCompute/machines/MyMachine/sqlServers/server1/databases/master/providers/Microsoft.Security/sqlVulnerabilityAssessments/default/scans/Scheduled-20200623/scanResults/VA2063"),
			Properties: &armsecurity.ScanResultProperties{
				BaselineAdjustedResult: &armsecurity.BaselineAdjustedResult{
					Baseline: &armsecurity.Baseline{
						ExpectedResults: [][]*string{
							{
								to.Ptr("Test"),
								to.Ptr("0.0.0.0"),
								to.Ptr("125.125.125.125")}},
						UpdatedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-04T12:49:41.027771+00:00"); return t }()),
					},
					ResultsNotInBaseline:  [][]*string{},
					ResultsOnlyInBaseline: [][]*string{},
					Status:                to.Ptr(armsecurity.RuleStatusNonFinding),
				},
				IsTrimmed: to.Ptr(false),
				QueryResults: [][]*string{
					{
						to.Ptr("Test"),
						to.Ptr("0.0.0.0"),
						to.Ptr("125.125.125.125")}},
				Remediation: &armsecurity.Remediation{
					Description: to.Ptr("Remove server firewall rules that grant excessive access"),
					Automated:   to.Ptr(false),
					PortalLink:  to.Ptr("ReviewServerFirewallRules"),
					Scripts: []*string{
						to.Ptr("EXECUTE sp_delete_firewall_rule N'Test';")},
				},
				RuleID: to.Ptr("VA2063"),
				RuleMetadata: &armsecurity.VaRule{
					Description:         to.Ptr("The Azure SQL server-level firewall helps protect your server by preventing all access to your databases until you specify which IP addresses have permission. Server-level firewall rules grant access to all databases that belong to the server based on the originating IP address of each request.\n\nServer-level firewall rules can only be created and managed through Transact-SQL as well as through the Azure portal or PowerShell. For more details please see: https://docs.microsoft.com/en-us/azure/sql-database/sql-database-firewall-configure\n\nThis check verifies that server-level firewall rules do not grant excessive access."),
					BenchmarkReferences: []*armsecurity.BenchmarkReference{},
					Category:            to.Ptr("SurfaceAreaReduction"),
					QueryCheck: &armsecurity.QueryCheck{
						ColumnNames: []*string{
							to.Ptr("Firewall Rule Name"),
							to.Ptr("Start Address"),
							to.Ptr("End Address")},
						ExpectedResult: [][]*string{},
						Query:          to.Ptr("SELECT name\n    ,start_ip_address\n    ,end_ip_address\nFROM sys.firewall_rules\nWHERE ( \n        (CONVERT(bigint, parsename(end_ip_address, 1)) +\n         CONVERT(bigint, parsename(end_ip_address, 2)) * 256 + \n         CONVERT(bigint, parsename(end_ip_address, 3)) * 65536 + \n         CONVERT(bigint, parsename(end_ip_address, 4)) * 16777216 ) \n        - \n        (CONVERT(bigint, parsename(start_ip_address, 1)) +\n         CONVERT(bigint, parsename(start_ip_address, 2)) * 256 + \n         CONVERT(bigint, parsename(start_ip_address, 3)) * 65536 + \n         CONVERT(bigint, parsename(start_ip_address, 4)) * 16777216 )\n      ) > 255;"),
					},
					Rationale: to.Ptr("Often, administrators add rules that grant excessive access as part of a troubleshooting process � to eliminate the firewall as the source of a problem, they simply create a rule that allows all traffic to pass to the affected server.\n\nGranting excessive access using server firewall rules is a clear security concern, as it violates the principle of least privilege by allowing unnecessary access to your databases. In fact, it's the equivalent of placing the server outside of the firewall."),
					RuleID:    to.Ptr("VA2063"),
					RuleType:  to.Ptr(armsecurity.RuleTypeNegativeList),
					Severity:  to.Ptr(armsecurity.RuleSeverityHigh),
					Title:     to.Ptr("Server-level firewall rules should not grant excessive access"),
				},
				Status: to.Ptr(armsecurity.RuleStatusFinding),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ScanResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ScanResult)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/preview/2020-07-01-preview/examples/sqlVulnerabilityAssessmentsScanResultsOperations/ArcMachineScanResults_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/security/resource-manager/Microsoft.Security/preview/2020-07-01-preview/examples/sqlVulnerabilityAssessmentsScanResultsOperations/ArcMachineScanResults_GetLatest.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get scan details of the latest scan record"},
	})
	client = armsecurity.NewSQLVulnerabilityAssessmentScanResultsClient(cred, &options)
	res, err = client.Get(ctx,
		"latest",
		"VA2063",
		"55555555-6666-7777-8888-999999999999",
		"subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Rg/providers/Microsoft.HybridCompute/machines/MyMachine/sqlServers/server1/databases/master",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/preview/2020-07-01-preview/examples/sqlVulnerabilityAssessmentsScanResultsOperations/ArcMachineScanResults_GetLatest.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurity.ScanResult{
			Name: to.Ptr("VA2063"),
			Type: to.Ptr("Microsoft.Security/sqlVulnerabilityAssessments/scans/scanResults"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Rg/providers/Microsoft.HybridCompute/machines/MyMachine/sqlServers/server1/databases/master/providers/Microsoft.Security/sqlVulnerabilityAssessments/default/scans/Scheduled-20200623/scanResults/VA2063"),
			Properties: &armsecurity.ScanResultProperties{
				BaselineAdjustedResult: &armsecurity.BaselineAdjustedResult{
					Baseline: &armsecurity.Baseline{
						ExpectedResults: [][]*string{
							{
								to.Ptr("Test"),
								to.Ptr("0.0.0.0"),
								to.Ptr("125.125.125.125")}},
						UpdatedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-04T12:49:41.027771+00:00"); return t }()),
					},
					ResultsNotInBaseline:  [][]*string{},
					ResultsOnlyInBaseline: [][]*string{},
					Status:                to.Ptr(armsecurity.RuleStatusNonFinding),
				},
				IsTrimmed: to.Ptr(false),
				QueryResults: [][]*string{
					{
						to.Ptr("Test"),
						to.Ptr("0.0.0.0"),
						to.Ptr("125.125.125.125")}},
				Remediation: &armsecurity.Remediation{
					Description: to.Ptr("Remove server firewall rules that grant excessive access"),
					Automated:   to.Ptr(false),
					PortalLink:  to.Ptr("ReviewServerFirewallRules"),
					Scripts: []*string{
						to.Ptr("EXECUTE sp_delete_firewall_rule N'Test';")},
				},
				RuleID: to.Ptr("VA2063"),
				RuleMetadata: &armsecurity.VaRule{
					Description:         to.Ptr("The Azure SQL server-level firewall helps protect your server by preventing all access to your databases until you specify which IP addresses have permission. Server-level firewall rules grant access to all databases that belong to the server based on the originating IP address of each request.\n\nServer-level firewall rules can only be created and managed through Transact-SQL as well as through the Azure portal or PowerShell. For more details please see: https://docs.microsoft.com/en-us/azure/sql-database/sql-database-firewall-configure\n\nThis check verifies that server-level firewall rules do not grant excessive access."),
					BenchmarkReferences: []*armsecurity.BenchmarkReference{},
					Category:            to.Ptr("SurfaceAreaReduction"),
					QueryCheck: &armsecurity.QueryCheck{
						ColumnNames: []*string{
							to.Ptr("Firewall Rule Name"),
							to.Ptr("Start Address"),
							to.Ptr("End Address")},
						ExpectedResult: [][]*string{},
						Query:          to.Ptr("SELECT name\n    ,start_ip_address\n    ,end_ip_address\nFROM sys.firewall_rules\nWHERE ( \n        (CONVERT(bigint, parsename(end_ip_address, 1)) +\n         CONVERT(bigint, parsename(end_ip_address, 2)) * 256 + \n         CONVERT(bigint, parsename(end_ip_address, 3)) * 65536 + \n         CONVERT(bigint, parsename(end_ip_address, 4)) * 16777216 ) \n        - \n        (CONVERT(bigint, parsename(start_ip_address, 1)) +\n         CONVERT(bigint, parsename(start_ip_address, 2)) * 256 + \n         CONVERT(bigint, parsename(start_ip_address, 3)) * 65536 + \n         CONVERT(bigint, parsename(start_ip_address, 4)) * 16777216 )\n      ) > 255;"),
					},
					Rationale: to.Ptr("Often, administrators add rules that grant excessive access as part of a troubleshooting process � to eliminate the firewall as the source of a problem, they simply create a rule that allows all traffic to pass to the affected server.\n\nGranting excessive access using server firewall rules is a clear security concern, as it violates the principle of least privilege by allowing unnecessary access to your databases. In fact, it's the equivalent of placing the server outside of the firewall."),
					RuleID:    to.Ptr("VA2063"),
					RuleType:  to.Ptr(armsecurity.RuleTypeNegativeList),
					Severity:  to.Ptr(armsecurity.RuleSeverityHigh),
					Title:     to.Ptr("Server-level firewall rules should not grant excessive access"),
				},
				Status: to.Ptr(armsecurity.RuleStatusFinding),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ScanResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ScanResult)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/preview/2020-07-01-preview/examples/sqlVulnerabilityAssessmentsScanResultsOperations/ArcMachineScanResults_GetLatest.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSQLVulnerabilityAssessmentScanResults_List(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/preview/2020-07-01-preview/examples/sqlVulnerabilityAssessmentsScanResultsOperations/ArcMachineScanResults_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List scan results"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewSQLVulnerabilityAssessmentScanResultsClient(cred, &options)
	res, err := client.List(ctx,
		"Scheduled-20200623",
		"55555555-6666-7777-8888-999999999999",
		"subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Rg/providers/Microsoft.HybridCompute/machines/MyMachine/sqlServers/server1/databases/master",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/preview/2020-07-01-preview/examples/sqlVulnerabilityAssessmentsScanResultsOperations/ArcMachineScanResults_List.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurity.ScanResults{
			Value: []*armsecurity.ScanResult{
				{
					Name: to.Ptr("VA2062"),
					Type: to.Ptr("Microsoft.Security/sqlVulnerabilityAssessments/scans/scanResults"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Rg/providers/Microsoft.HybridCompute/machines/MyMachine/sqlServers/server1/databases/master/providers/Microsoft.Security/sqlVulnerabilityAssessments/default/scans/Scheduled-20200623/scanResults/VA2062"),
					Properties: &armsecurity.ScanResultProperties{
						IsTrimmed:    to.Ptr(false),
						QueryResults: [][]*string{},
						Remediation: &armsecurity.Remediation{
							Description: to.Ptr("Remove database firewall rules that grant excessive access"),
							Automated:   to.Ptr(false),
							PortalLink:  to.Ptr(""),
							Scripts:     []*string{},
						},
						RuleID: to.Ptr("VA2062"),
						RuleMetadata: &armsecurity.VaRule{
							Description:         to.Ptr("The Azure SQL Database-level firewall helps protect your data by preventing all access to your database until you specify which IP addresses have permission. Database-level firewall rules grant access to the specific database based on the originating IP address of each request.\n\nDatabase-level firewall rules for master and user databases can only be created and managed through Transact-SQL (unlike server-level firewall rules which can also be created and managed using the Azure portal or PowerShell). For more details please see: https://docs.microsoft.com/en-us/azure/sql-database/sql-database-firewall-configure\n\nThis check verifies that database-level firewall rules do not grant excessive access."),
							BenchmarkReferences: []*armsecurity.BenchmarkReference{},
							Category:            to.Ptr("SurfaceAreaReduction"),
							QueryCheck: &armsecurity.QueryCheck{
								ColumnNames: []*string{
									to.Ptr("Firewall Rule Name"),
									to.Ptr("Start Address"),
									to.Ptr("End Address")},
								ExpectedResult: [][]*string{},
								Query:          to.Ptr("SELECT name\n    ,start_ip_address\n    ,end_ip_address\nFROM sys.database_firewall_rules\nWHERE ( \n        (CONVERT(bigint, parsename(end_ip_address, 1)) +\n         CONVERT(bigint, parsename(end_ip_address, 2)) * 256 + \n         CONVERT(bigint, parsename(end_ip_address, 3)) * 65536 + \n         CONVERT(bigint, parsename(end_ip_address, 4)) * 16777216 ) \n        - \n        (CONVERT(bigint, parsename(start_ip_address, 1)) +\n         CONVERT(bigint, parsename(start_ip_address, 2)) * 256 + \n         CONVERT(bigint, parsename(start_ip_address, 3)) * 65536 + \n         CONVERT(bigint, parsename(start_ip_address, 4)) * 16777216 )\n      ) > 255;"),
							},
							Rationale: to.Ptr("Often, administrators add rules that grant excessive access as part of a troubleshooting process - to eliminate the firewall as the source of a problem, they simply create a rule that allows all traffic to pass to the affected database.\n\nGranting excessive access using database firewall rules is a clear security concern, as it violates the principle of least privilege by allowing unnecessary access to your database. In fact, it's the equivalent of placing the database outside of the firewall."),
							RuleID:    to.Ptr("VA2062"),
							RuleType:  to.Ptr(armsecurity.RuleTypeNegativeList),
							Severity:  to.Ptr(armsecurity.RuleSeverityHigh),
							Title:     to.Ptr("Database-level firewall rules should not grant excessive access"),
						},
						Status: to.Ptr(armsecurity.RuleStatusNonFinding),
					},
				},
				{
					Name: to.Ptr("VA2063"),
					Type: to.Ptr("Microsoft.Security/sqlVulnerabilityAssessments/scans/scanResults"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Rg/providers/Microsoft.HybridCompute/machines/MyMachine/sqlServers/server1/databases/master/providers/Microsoft.Security/sqlVulnerabilityAssessments/default/scans/Scheduled-20200623/scanResults/VA2063"),
					Properties: &armsecurity.ScanResultProperties{
						BaselineAdjustedResult: &armsecurity.BaselineAdjustedResult{
							Baseline: &armsecurity.Baseline{
								ExpectedResults: [][]*string{
									{
										to.Ptr("Test"),
										to.Ptr("0.0.0.0"),
										to.Ptr("125.125.125.125")}},
								UpdatedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-04T12:49:41.027771+00:00"); return t }()),
							},
							ResultsNotInBaseline:  [][]*string{},
							ResultsOnlyInBaseline: [][]*string{},
							Status:                to.Ptr(armsecurity.RuleStatusNonFinding),
						},
						IsTrimmed: to.Ptr(false),
						QueryResults: [][]*string{
							{
								to.Ptr("Test"),
								to.Ptr("0.0.0.0"),
								to.Ptr("125.125.125.125")}},
						Remediation: &armsecurity.Remediation{
							Description: to.Ptr("Remove server firewall rules that grant excessive access"),
							Automated:   to.Ptr(false),
							PortalLink:  to.Ptr("ReviewServerFirewallRules"),
							Scripts: []*string{
								to.Ptr("EXECUTE sp_delete_firewall_rule N'Test';")},
						},
						RuleID: to.Ptr("VA2063"),
						RuleMetadata: &armsecurity.VaRule{
							Description:         to.Ptr("The Azure SQL server-level firewall helps protect your server by preventing all access to your databases until you specify which IP addresses have permission. Server-level firewall rules grant access to all databases that belong to the server based on the originating IP address of each request.\n\nServer-level firewall rules can only be created and managed through Transact-SQL as well as through the Azure portal or PowerShell. For more details please see: https://docs.microsoft.com/en-us/azure/sql-database/sql-database-firewall-configure\n\nThis check verifies that server-level firewall rules do not grant excessive access."),
							BenchmarkReferences: []*armsecurity.BenchmarkReference{},
							Category:            to.Ptr("SurfaceAreaReduction"),
							QueryCheck: &armsecurity.QueryCheck{
								ColumnNames: []*string{
									to.Ptr("Firewall Rule Name"),
									to.Ptr("Start Address"),
									to.Ptr("End Address")},
								ExpectedResult: [][]*string{},
								Query:          to.Ptr("SELECT name\n    ,start_ip_address\n    ,end_ip_address\nFROM sys.firewall_rules\nWHERE ( \n        (CONVERT(bigint, parsename(end_ip_address, 1)) +\n         CONVERT(bigint, parsename(end_ip_address, 2)) * 256 + \n         CONVERT(bigint, parsename(end_ip_address, 3)) * 65536 + \n         CONVERT(bigint, parsename(end_ip_address, 4)) * 16777216 ) \n        - \n        (CONVERT(bigint, parsename(start_ip_address, 1)) +\n         CONVERT(bigint, parsename(start_ip_address, 2)) * 256 + \n         CONVERT(bigint, parsename(start_ip_address, 3)) * 65536 + \n         CONVERT(bigint, parsename(start_ip_address, 4)) * 16777216 )\n      ) > 255;"),
							},
							Rationale: to.Ptr("Often, administrators add rules that grant excessive access as part of a troubleshooting process � to eliminate the firewall as the source of a problem, they simply create a rule that allows all traffic to pass to the affected server.\n\nGranting excessive access using server firewall rules is a clear security concern, as it violates the principle of least privilege by allowing unnecessary access to your databases. In fact, it's the equivalent of placing the server outside of the firewall."),
							RuleID:    to.Ptr("VA2063"),
							RuleType:  to.Ptr(armsecurity.RuleTypeNegativeList),
							Severity:  to.Ptr(armsecurity.RuleSeverityHigh),
							Title:     to.Ptr("Server-level firewall rules should not grant excessive access"),
						},
						Status: to.Ptr(armsecurity.RuleStatusFinding),
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.ScanResults) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ScanResults)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/preview/2020-07-01-preview/examples/sqlVulnerabilityAssessmentsScanResultsOperations/ArcMachineScanResults_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/security/resource-manager/Microsoft.Security/preview/2020-07-01-preview/examples/sqlVulnerabilityAssessmentsScanResultsOperations/ArcMachineScanResults_ListLatest.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List scan results of the latest scan"},
	})
	client = armsecurity.NewSQLVulnerabilityAssessmentScanResultsClient(cred, &options)
	res, err = client.List(ctx,
		"latest",
		"55555555-6666-7777-8888-999999999999",
		"subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Rg/providers/Microsoft.HybridCompute/machines/MyMachine/sqlServers/server1/databases/master",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/preview/2020-07-01-preview/examples/sqlVulnerabilityAssessmentsScanResultsOperations/ArcMachineScanResults_ListLatest.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurity.ScanResults{
			Value: []*armsecurity.ScanResult{
				{
					Name: to.Ptr("VA2062"),
					Type: to.Ptr("Microsoft.Security/sqlVulnerabilityAssessments/scans/scanResults"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Rg/providers/Microsoft.HybridCompute/machines/MyMachine/sqlServers/server1/databases/master/providers/Microsoft.Security/sqlVulnerabilityAssessments/default/scans/Scheduled-20200623/scanResults/VA2062"),
					Properties: &armsecurity.ScanResultProperties{
						IsTrimmed:    to.Ptr(false),
						QueryResults: [][]*string{},
						Remediation: &armsecurity.Remediation{
							Description: to.Ptr("Remove database firewall rules that grant excessive access"),
							Automated:   to.Ptr(false),
							PortalLink:  to.Ptr(""),
							Scripts:     []*string{},
						},
						RuleID: to.Ptr("VA2062"),
						RuleMetadata: &armsecurity.VaRule{
							Description:         to.Ptr("The Azure SQL Database-level firewall helps protect your data by preventing all access to your database until you specify which IP addresses have permission. Database-level firewall rules grant access to the specific database based on the originating IP address of each request.\n\nDatabase-level firewall rules for master and user databases can only be created and managed through Transact-SQL (unlike server-level firewall rules which can also be created and managed using the Azure portal or PowerShell). For more details please see: https://docs.microsoft.com/en-us/azure/sql-database/sql-database-firewall-configure\n\nThis check verifies that database-level firewall rules do not grant excessive access."),
							BenchmarkReferences: []*armsecurity.BenchmarkReference{},
							Category:            to.Ptr("SurfaceAreaReduction"),
							QueryCheck: &armsecurity.QueryCheck{
								ColumnNames: []*string{
									to.Ptr("Firewall Rule Name"),
									to.Ptr("Start Address"),
									to.Ptr("End Address")},
								ExpectedResult: [][]*string{},
								Query:          to.Ptr("SELECT name\n    ,start_ip_address\n    ,end_ip_address\nFROM sys.database_firewall_rules\nWHERE ( \n        (CONVERT(bigint, parsename(end_ip_address, 1)) +\n         CONVERT(bigint, parsename(end_ip_address, 2)) * 256 + \n         CONVERT(bigint, parsename(end_ip_address, 3)) * 65536 + \n         CONVERT(bigint, parsename(end_ip_address, 4)) * 16777216 ) \n        - \n        (CONVERT(bigint, parsename(start_ip_address, 1)) +\n         CONVERT(bigint, parsename(start_ip_address, 2)) * 256 + \n         CONVERT(bigint, parsename(start_ip_address, 3)) * 65536 + \n         CONVERT(bigint, parsename(start_ip_address, 4)) * 16777216 )\n      ) > 255;"),
							},
							Rationale: to.Ptr("Often, administrators add rules that grant excessive access as part of a troubleshooting process - to eliminate the firewall as the source of a problem, they simply create a rule that allows all traffic to pass to the affected database.\n\nGranting excessive access using database firewall rules is a clear security concern, as it violates the principle of least privilege by allowing unnecessary access to your database. In fact, it's the equivalent of placing the database outside of the firewall."),
							RuleID:    to.Ptr("VA2062"),
							RuleType:  to.Ptr(armsecurity.RuleTypeNegativeList),
							Severity:  to.Ptr(armsecurity.RuleSeverityHigh),
							Title:     to.Ptr("Database-level firewall rules should not grant excessive access"),
						},
						Status: to.Ptr(armsecurity.RuleStatusNonFinding),
					},
				},
				{
					Name: to.Ptr("VA2063"),
					Type: to.Ptr("Microsoft.Security/sqlVulnerabilityAssessments/scans/scanResults"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Rg/providers/Microsoft.HybridCompute/machines/MyMachine/sqlServers/server1/databases/master/providers/Microsoft.Security/sqlVulnerabilityAssessments/default/scans/Scheduled-20200623/scanResults/VA2063"),
					Properties: &armsecurity.ScanResultProperties{
						BaselineAdjustedResult: &armsecurity.BaselineAdjustedResult{
							Baseline: &armsecurity.Baseline{
								ExpectedResults: [][]*string{
									{
										to.Ptr("Test"),
										to.Ptr("0.0.0.0"),
										to.Ptr("125.125.125.125")}},
								UpdatedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-04T12:49:41.027771+00:00"); return t }()),
							},
							ResultsNotInBaseline:  [][]*string{},
							ResultsOnlyInBaseline: [][]*string{},
							Status:                to.Ptr(armsecurity.RuleStatusNonFinding),
						},
						IsTrimmed: to.Ptr(false),
						QueryResults: [][]*string{
							{
								to.Ptr("Test"),
								to.Ptr("0.0.0.0"),
								to.Ptr("125.125.125.125")}},
						Remediation: &armsecurity.Remediation{
							Description: to.Ptr("Remove server firewall rules that grant excessive access"),
							Automated:   to.Ptr(false),
							PortalLink:  to.Ptr("ReviewServerFirewallRules"),
							Scripts: []*string{
								to.Ptr("EXECUTE sp_delete_firewall_rule N'Test';")},
						},
						RuleID: to.Ptr("VA2063"),
						RuleMetadata: &armsecurity.VaRule{
							Description:         to.Ptr("The Azure SQL server-level firewall helps protect your server by preventing all access to your databases until you specify which IP addresses have permission. Server-level firewall rules grant access to all databases that belong to the server based on the originating IP address of each request.\n\nServer-level firewall rules can only be created and managed through Transact-SQL as well as through the Azure portal or PowerShell. For more details please see: https://docs.microsoft.com/en-us/azure/sql-database/sql-database-firewall-configure\n\nThis check verifies that server-level firewall rules do not grant excessive access."),
							BenchmarkReferences: []*armsecurity.BenchmarkReference{},
							Category:            to.Ptr("SurfaceAreaReduction"),
							QueryCheck: &armsecurity.QueryCheck{
								ColumnNames: []*string{
									to.Ptr("Firewall Rule Name"),
									to.Ptr("Start Address"),
									to.Ptr("End Address")},
								ExpectedResult: [][]*string{},
								Query:          to.Ptr("SELECT name\n    ,start_ip_address\n    ,end_ip_address\nFROM sys.firewall_rules\nWHERE ( \n        (CONVERT(bigint, parsename(end_ip_address, 1)) +\n         CONVERT(bigint, parsename(end_ip_address, 2)) * 256 + \n         CONVERT(bigint, parsename(end_ip_address, 3)) * 65536 + \n         CONVERT(bigint, parsename(end_ip_address, 4)) * 16777216 ) \n        - \n        (CONVERT(bigint, parsename(start_ip_address, 1)) +\n         CONVERT(bigint, parsename(start_ip_address, 2)) * 256 + \n         CONVERT(bigint, parsename(start_ip_address, 3)) * 65536 + \n         CONVERT(bigint, parsename(start_ip_address, 4)) * 16777216 )\n      ) > 255;"),
							},
							Rationale: to.Ptr("Often, administrators add rules that grant excessive access as part of a troubleshooting process � to eliminate the firewall as the source of a problem, they simply create a rule that allows all traffic to pass to the affected server.\n\nGranting excessive access using server firewall rules is a clear security concern, as it violates the principle of least privilege by allowing unnecessary access to your databases. In fact, it's the equivalent of placing the server outside of the firewall."),
							RuleID:    to.Ptr("VA2063"),
							RuleType:  to.Ptr(armsecurity.RuleTypeNegativeList),
							Severity:  to.Ptr(armsecurity.RuleSeverityHigh),
							Title:     to.Ptr("Server-level firewall rules should not grant excessive access"),
						},
						Status: to.Ptr(armsecurity.RuleStatusFinding),
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.ScanResults) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ScanResults)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/preview/2020-07-01-preview/examples/sqlVulnerabilityAssessmentsScanResultsOperations/ArcMachineScanResults_ListLatest.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSQLVulnerabilityAssessmentBaselineRules_CreateOrUpdate(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/preview/2020-07-01-preview/examples/sqlVulnerabilityAssessmentsBaselineRuleOperations/ArcMachineBaselineRules_Put.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a baseline"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewSQLVulnerabilityAssessmentBaselineRulesClient(cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"VA1234",
		"55555555-6666-7777-8888-999999999999",
		"subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Rg/providers/Microsoft.HybridCompute/machines/MyMachine/sqlServers/server1/databases/master",
		&armsecurity.SQLVulnerabilityAssessmentBaselineRulesClientCreateOrUpdateOptions{Body: &armsecurity.RuleResultsInput{
			LatestScan: to.Ptr(false),
			Results: [][]*string{
				{
					to.Ptr("userA"),
					to.Ptr("SELECT")},
				{
					to.Ptr("userB"),
					to.Ptr("SELECT")}},
		},
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/preview/2020-07-01-preview/examples/sqlVulnerabilityAssessmentsBaselineRuleOperations/ArcMachineBaselineRules_Put.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurity.RuleResults{
			Name: to.Ptr("VA1234"),
			Type: to.Ptr("Microsoft.Security/sqlVulnerabilityAssessments/baselineRules"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Rg/providers/Microsoft.HybridCompute/machines/MyMachine/sqlServers/server1/databases/master/providers/Microsoft.Security/sqlVulnerabilityAssessments/default/baselineRules/VA1234"),
			Properties: &armsecurity.RuleResultsProperties{
				Results: [][]*string{
					{
						to.Ptr("userA"),
						to.Ptr("SELECT")},
					{
						to.Ptr("userB"),
						to.Ptr("SELECT")}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RuleResults) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RuleResults)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/preview/2020-07-01-preview/examples/sqlVulnerabilityAssessmentsBaselineRuleOperations/ArcMachineBaselineRules_Put.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/security/resource-manager/Microsoft.Security/preview/2020-07-01-preview/examples/sqlVulnerabilityAssessmentsBaselineRuleOperations/ArcMachineBaselineRules_PutLatest.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a baseline using the latest scan results"},
	})
	client = armsecurity.NewSQLVulnerabilityAssessmentBaselineRulesClient(cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"VA1234",
		"55555555-6666-7777-8888-999999999999",
		"subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Rg/providers/Microsoft.HybridCompute/machines/MyMachine/sqlServers/server1/databases/master",
		&armsecurity.SQLVulnerabilityAssessmentBaselineRulesClientCreateOrUpdateOptions{Body: &armsecurity.RuleResultsInput{
			LatestScan: to.Ptr(true),
			Results:    [][]*string{},
		},
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/preview/2020-07-01-preview/examples/sqlVulnerabilityAssessmentsBaselineRuleOperations/ArcMachineBaselineRules_PutLatest.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurity.RuleResults{
			Name: to.Ptr("VA1234"),
			Type: to.Ptr("Microsoft.Security/sqlVulnerabilityAssessments/baselineRules"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Rg/providers/Microsoft.HybridCompute/machines/MyMachine/sqlServers/server1/databases/master/providers/Microsoft.Security/sqlVulnerabilityAssessments/default/baselineRules/VA1234"),
			Properties: &armsecurity.RuleResultsProperties{
				Results: [][]*string{
					{
						to.Ptr("userA"),
						to.Ptr("SELECT")},
					{
						to.Ptr("userB"),
						to.Ptr("SELECT")}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RuleResults) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RuleResults)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/preview/2020-07-01-preview/examples/sqlVulnerabilityAssessmentsBaselineRuleOperations/ArcMachineBaselineRules_PutLatest.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSQLVulnerabilityAssessmentBaselineRules_Get(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/preview/2020-07-01-preview/examples/sqlVulnerabilityAssessmentsBaselineRuleOperations/ArcMachineBaselineRules_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get the baseline"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewSQLVulnerabilityAssessmentBaselineRulesClient(cred, &options)
	res, err := client.Get(ctx,
		"VA1234",
		"55555555-6666-7777-8888-999999999999",
		"subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Rg/providers/Microsoft.HybridCompute/machines/MyMachine/sqlServers/server1/databases/master",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/preview/2020-07-01-preview/examples/sqlVulnerabilityAssessmentsBaselineRuleOperations/ArcMachineBaselineRules_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurity.RuleResults{
			Name: to.Ptr("VA1234"),
			Type: to.Ptr("Microsoft.Security/sqlVulnerabilityAssessments/baselineRules"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Rg/providers/Microsoft.HybridCompute/machines/MyMachine/sqlServers/server1/databases/master/providers/Microsoft.Security/sqlVulnerabilityAssessments/default/baselineRules/VA1234"),
			Properties: &armsecurity.RuleResultsProperties{
				Results: [][]*string{
					{
						to.Ptr("userA"),
						to.Ptr("SELECT")},
					{
						to.Ptr("userB"),
						to.Ptr("SELECT")}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RuleResults) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RuleResults)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/preview/2020-07-01-preview/examples/sqlVulnerabilityAssessmentsBaselineRuleOperations/ArcMachineBaselineRules_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSQLVulnerabilityAssessmentBaselineRules_Delete(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/preview/2020-07-01-preview/examples/sqlVulnerabilityAssessmentsBaselineRuleOperations/ArcMachineBaselineRules_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete the baseline"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewSQLVulnerabilityAssessmentBaselineRulesClient(cred, &options)
	_, err := client.Delete(ctx,
		"VA1234",
		"55555555-6666-7777-8888-999999999999",
		"subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Rg/providers/Microsoft.HybridCompute/machines/MyMachine/sqlServers/server1/databases/master",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/preview/2020-07-01-preview/examples/sqlVulnerabilityAssessmentsBaselineRuleOperations/ArcMachineBaselineRules_Delete.json: %v", err)
	}
}

func TestSQLVulnerabilityAssessmentBaselineRules_List(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/preview/2020-07-01-preview/examples/sqlVulnerabilityAssessmentsBaselineRuleOperations/ArcMachineBaselineRules_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List baseline for all rules"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewSQLVulnerabilityAssessmentBaselineRulesClient(cred, &options)
	res, err := client.List(ctx,
		"55555555-6666-7777-8888-999999999999",
		"subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Rg/providers/Microsoft.HybridCompute/machines/MyMachine/sqlServers/server1/databases/master",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/preview/2020-07-01-preview/examples/sqlVulnerabilityAssessmentsBaselineRuleOperations/ArcMachineBaselineRules_List.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurity.RulesResults{
			Value: []*armsecurity.RuleResults{
				{
					Name: to.Ptr("VA1234"),
					Type: to.Ptr("Microsoft.Security/sqlVulnerabilityAssessments/baselineRules"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Rg/providers/Microsoft.HybridCompute/machines/MyMachine/sqlServers/server1/databases/master/providers/Microsoft.Security/sqlVulnerabilityAssessments/default/baselineRules/VA1234"),
					Properties: &armsecurity.RuleResultsProperties{
						Results: [][]*string{
							{
								to.Ptr("userA"),
								to.Ptr("SELECT")},
							{
								to.Ptr("userB"),
								to.Ptr("SELECT")}},
					},
				},
				{
					Name: to.Ptr("VA5678"),
					Type: to.Ptr("Microsoft.Security/sqlVulnerabilityAssessments/baselineRules"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Rg/providers/Microsoft.HybridCompute/machines/MyMachine/sqlServers/server1/databases/master/providers/Microsoft.Security/sqlVulnerabilityAssessments/default/baselineRules/VA5678"),
					Properties: &armsecurity.RuleResultsProperties{
						Results: [][]*string{
							{
								to.Ptr("Test"),
								to.Ptr("0.0.0.0"),
								to.Ptr("125.125.125.125")}},
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.RulesResults) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RulesResults)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/preview/2020-07-01-preview/examples/sqlVulnerabilityAssessmentsBaselineRuleOperations/ArcMachineBaselineRules_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSQLVulnerabilityAssessmentBaselineRules_Add(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/preview/2020-07-01-preview/examples/sqlVulnerabilityAssessmentsBaselineRuleOperations/ArcMachineBaselineRules_Add.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a baseline for all rules"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewSQLVulnerabilityAssessmentBaselineRulesClient(cred, &options)
	res, err := client.Add(ctx,
		"55555555-6666-7777-8888-999999999999",
		"subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Rg/providers/Microsoft.HybridCompute/machines/MyMachine/sqlServers/server1/databases/master",
		&armsecurity.SQLVulnerabilityAssessmentBaselineRulesClientAddOptions{Body: &armsecurity.RulesResultsInput{
			LatestScan: to.Ptr(false),
			Results: map[string][][]*string{
				"VA1234": {
					{
						to.Ptr("userA"),
						to.Ptr("SELECT")},
					{
						to.Ptr("userB"),
						to.Ptr("SELECT")}},
				"VA5678": {
					{
						to.Ptr("Test"),
						to.Ptr("0.0.0.0"),
						to.Ptr("125.125.125.125")}},
			},
		},
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/preview/2020-07-01-preview/examples/sqlVulnerabilityAssessmentsBaselineRuleOperations/ArcMachineBaselineRules_Add.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurity.RulesResults{
			Value: []*armsecurity.RuleResults{
				{
					Name: to.Ptr("VA1234"),
					Type: to.Ptr("Microsoft.Security/sqlVulnerabilityAssessments/baselineRules"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Rg/providers/Microsoft.HybridCompute/machines/MyMachine/sqlServers/server1/databases/master/providers/Microsoft.Security/sqlVulnerabilityAssessments/default/baselineRules/VA1234"),
					Properties: &armsecurity.RuleResultsProperties{
						Results: [][]*string{
							{
								to.Ptr("userA"),
								to.Ptr("SELECT")},
							{
								to.Ptr("userB"),
								to.Ptr("SELECT")}},
					},
				},
				{
					Name: to.Ptr("VA5678"),
					Type: to.Ptr("Microsoft.Security/sqlVulnerabilityAssessments/baselineRules"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Rg/providers/Microsoft.HybridCompute/machines/MyMachine/sqlServers/server1/databases/master/providers/Microsoft.Security/sqlVulnerabilityAssessments/default/baselineRules/VA5678"),
					Properties: &armsecurity.RuleResultsProperties{
						Results: [][]*string{
							{
								to.Ptr("Test"),
								to.Ptr("0.0.0.0"),
								to.Ptr("125.125.125.125")}},
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.RulesResults) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RulesResults)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/preview/2020-07-01-preview/examples/sqlVulnerabilityAssessmentsBaselineRuleOperations/ArcMachineBaselineRules_Add.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/security/resource-manager/Microsoft.Security/preview/2020-07-01-preview/examples/sqlVulnerabilityAssessmentsBaselineRuleOperations/ArcMachineBaselineRules_AddLatest.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create a baseline for all rules using the latest scan results"},
	})
	client = armsecurity.NewSQLVulnerabilityAssessmentBaselineRulesClient(cred, &options)
	res, err = client.Add(ctx,
		"55555555-6666-7777-8888-999999999999",
		"subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Rg/providers/Microsoft.HybridCompute/machines/MyMachine/sqlServers/server1/databases/master",
		&armsecurity.SQLVulnerabilityAssessmentBaselineRulesClientAddOptions{Body: &armsecurity.RulesResultsInput{
			LatestScan: to.Ptr(true),
			Results:    map[string][][]*string{},
		},
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/preview/2020-07-01-preview/examples/sqlVulnerabilityAssessmentsBaselineRuleOperations/ArcMachineBaselineRules_AddLatest.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurity.RulesResults{
			Value: []*armsecurity.RuleResults{
				{
					Name: to.Ptr("VA1234"),
					Type: to.Ptr("Microsoft.Security/sqlVulnerabilityAssessments/baselineRules"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Rg/providers/Microsoft.HybridCompute/machines/MyMachine/sqlServers/server1/databases/master/providers/Microsoft.Security/sqlVulnerabilityAssessments/default/baselineRules/VA1234"),
					Properties: &armsecurity.RuleResultsProperties{
						Results: [][]*string{
							{
								to.Ptr("userA"),
								to.Ptr("SELECT")},
							{
								to.Ptr("userB"),
								to.Ptr("SELECT")}},
					},
				},
				{
					Name: to.Ptr("VA5678"),
					Type: to.Ptr("Microsoft.Security/sqlVulnerabilityAssessments/baselineRules"),
					ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Rg/providers/Microsoft.HybridCompute/machines/MyMachine/sqlServers/server1/databases/master/providers/Microsoft.Security/sqlVulnerabilityAssessments/default/baselineRules/VA5678"),
					Properties: &armsecurity.RuleResultsProperties{
						Results: [][]*string{
							{
								to.Ptr("Test"),
								to.Ptr("0.0.0.0"),
								to.Ptr("125.125.125.125")}},
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.RulesResults) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RulesResults)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/preview/2020-07-01-preview/examples/sqlVulnerabilityAssessmentsBaselineRuleOperations/ArcMachineBaselineRules_AddLatest.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAlerts_List(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/stable/2021-01-01/examples/Alerts/GetAlertsSubscription_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get security alerts on a subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewAlertsClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23",
		"<asc-location>", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/security/resource-manager/Microsoft.Security/stable/2021-01-01/examples/Alerts/GetAlertsSubscription_example.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsecurity.AlertList{
			Value: []*armsecurity.Alert{
				{
					Name: to.Ptr("2518298467986649999_4d25bfef-2d77-4a08-adc0-3e35715cc92a"),
					Type: to.Ptr("Microsoft.Security/Locations/alerts"),
					ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/myRg1/providers/Microsoft.Security/locations/westeurope/alerts/2518770965529163669_F144EE95-A3E5-42DA-A279-967D115809AA"),
					Properties: &armsecurity.AlertProperties{
						Description:       to.Ptr("This is a test alert generated by Azure Security Center. No further action is needed."),
						AlertDisplayName:  to.Ptr("Azure Security Center test alert (not a threat)"),
						AlertType:         to.Ptr("VM_EICAR"),
						AlertURI:          to.Ptr("https://portal.azure.com/#blade/Microsoft_Azure_Security/AlertBlade/alertId/2518298467986649999_4d25bfef-2d77-4a08-adc0-3e35715cc92a/subscriptionId/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroup/myRg1/referencedFrom/alertDeepLink/location/westeurope"),
						CompromisedEntity: to.Ptr("vm1"),
						CorrelationKey:    to.Ptr("kso0LFWxzCll5tqrk5hmrBJ+MY1BX806W6q6+0s9Lk="),
						EndTimeUTC:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-22T00:00:00.0000000Z"); return t }()),
						Entities: []*armsecurity.AlertEntity{
							{
								AdditionalProperties: map[string]interface{}{
									"address": "192.0.2.1",
									"location": map[string]interface{}{
										"asn":         float64(6584),
										"city":        "sonning",
										"countryCode": "gb",
										"latitude":    float64(51.468),
										"longitude":   float64(-0.909),
										"state":       "wokingham",
									},
								},
								Type: to.Ptr("ip"),
							}},
						ExtendedLinks: []map[string]*string{
							{
								"Category": to.Ptr("threat_reports"),
								"Href":     to.Ptr("https://contoso.com/reports/DisplayReport"),
								"Label":    to.Ptr("Report: RDP Brute Forcing"),
								"Type":     to.Ptr("webLink"),
							}},
						ExtendedProperties: map[string]*string{
							"Property1": to.Ptr("Property1 information"),
						},
						Intent:               to.Ptr(armsecurity.IntentExecution),
						IsIncident:           to.Ptr(true),
						ProcessingEndTimeUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-23T13:47:58.9205584Z"); return t }()),
						ProductComponentName: to.Ptr(""),
						ProductName:          to.Ptr("Azure Security Center"),
						RemediationSteps: []*string{
							to.Ptr("No further action is needed.")},
						ResourceIdentifiers: []armsecurity.ResourceIdentifierClassification{
							&armsecurity.AzureResourceIdentifier{
								Type:            to.Ptr(armsecurity.ResourceIdentifierTypeAzureResource),
								AzureResourceID: to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/myRg1/providers/Microsoft.Compute/virtualMachines/vm1"),
							},
							&armsecurity.LogAnalyticsIdentifier{
								Type:                    to.Ptr(armsecurity.ResourceIdentifierTypeLogAnalytics),
								AgentID:                 to.Ptr("75724a01-f021-4aa8-9ec2-329792373e6e"),
								WorkspaceID:             to.Ptr("f419f624-acad-4d89-b86d-f62fa387f019"),
								WorkspaceResourceGroup:  to.Ptr("myRg1"),
								WorkspaceSubscriptionID: to.Ptr("20ff7fc3-e762-44dd-bd96-b71116dcdc23"),
							}},
						Severity:         to.Ptr(armsecurity.AlertSeverityHigh),
						StartTimeUTC:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-22T00:00:00.0000000Z"); return t }()),
						Status:           to.Ptr(armsecurity.AlertStatus("New")),
						SystemAlertID:    to.Ptr("2518298467986649999_4d25bfef-2d77-4a08-adc0-3e35715cc92a"),
						TimeGeneratedUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-23T13:47:58.0000000Z"); return t }()),
						VendorName:       to.Ptr("Microsoft"),
					},
				},
				{
					Name: to.Ptr("2518765996949954086_2325cf9e-42a2-4f72-ae7f-9b863cba2d22"),
					Type: to.Ptr("Microsoft.Security/Locations/alerts"),
					ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/myRg2/providers/Microsoft.Security/locations/westeurope/alerts/2518765996949954086_2325cf9e-42a2-4f72-ae7f-9b863cba2d22"),
					Properties: &armsecurity.AlertProperties{
						Description:       to.Ptr("The process ‘c:\\users\\contosoUser\\scrsave.scr’ was observed executing from an uncommon location. Files with the .scr extensions are screen saver files and are normally reside and execute from the Windows system directory."),
						AlertDisplayName:  to.Ptr("Suspicious Screensaver process executed"),
						AlertType:         to.Ptr("VM_SuspiciousScreenSaver"),
						AlertURI:          to.Ptr("https://portal.azure.com/#blade/Microsoft_Azure_Security/AlertBlade/alertId/2518298467986649999_4d25bfef-2d77-4a08-adc0-3e35715cc92a/subscriptionId/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroup/myRg1/referencedFrom/alertDeepLink/location/westeurope"),
						CompromisedEntity: to.Ptr("vm2"),
						CorrelationKey:    to.Ptr("4hno6LF0xzCl5tqrk4nrBW+MY1BX816W6q6+0srk4"),
						EndTimeUTC:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-07T13:51:45.0045913Z"); return t }()),
						Entities: []*armsecurity.AlertEntity{
							{
								AdditionalProperties: map[string]interface{}{
									"OsVersion":       nil,
									"azureID":         "/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourcegroups/myRg2/providers/microsoft.compute/virtualmachines/vm2",
									"dnsDomain":       "",
									"hostName":        "vm2",
									"netBiosName":     "vm2",
									"ntDomain":        "",
									"omsAgentID":      "45b44640-3b94-4892-a28c-4a5cae27065a",
									"operatingSystem": "Unknown",
								},
								Type: to.Ptr("host"),
							},
							{
								AdditionalProperties: map[string]interface{}{
									"name":     "contosoUser",
									"logonId":  "0x61450d87",
									"ntDomain": "vm2",
									"sid":      "S-1-5-21-2144575486-8928446540-5163864319-500",
								},
								Type: to.Ptr("account"),
							},
							{
								AdditionalProperties: map[string]interface{}{
									"name":      "cmd.exe",
									"directory": "c:\\windows\\system32",
								},
								Type: to.Ptr("file"),
							},
							{
								AdditionalProperties: map[string]interface{}{
									"processId": "0x3c44",
								},
								Type: to.Ptr("process"),
							},
							{
								AdditionalProperties: map[string]interface{}{
									"name":      "scrsave.scr",
									"directory": "c:\\users\\contosoUser",
								},
								Type: to.Ptr("file"),
							},
							{
								AdditionalProperties: map[string]interface{}{
									"commandLine":     "c:\\users\\contosoUser\\scrsave.scr",
									"creationTimeUtc": "2018-05-07T13:51:45.0045913Z",
									"processId":       "0x4aec",
								},
								Type: to.Ptr("process"),
							}},
						ExtendedLinks: []map[string]*string{
							{
								"Category": to.Ptr("threat_reports"),
								"Href":     to.Ptr("https://contoso.com/reports/DisplayReport"),
								"Label":    to.Ptr("Report: RDP Brute Forcing"),
								"Type":     to.Ptr("webLink"),
							}},
						ExtendedProperties: map[string]*string{
							"account logon id":  to.Ptr("0x61450d87"),
							"command line":      to.Ptr("c:\\users\\contosoUser\\scrsave.scr"),
							"domain name":       to.Ptr("vm2"),
							"parent process":    to.Ptr("cmd.exe"),
							"parent process id": to.Ptr("0x3c44"),
							"process id":        to.Ptr("0x4aec"),
							"process name":      to.Ptr("c:\\users\\contosoUser\\scrsave.scr"),
							"resourceType":      to.Ptr("Virtual Machine"),
							"user SID":          to.Ptr("S-1-5-21-2144575486-8928446540-5163864319-500"),
							"user name":         to.Ptr("vm2\\contosoUser"),
						},
						Intent:               to.Ptr(armsecurity.IntentExecution),
						IsIncident:           to.Ptr(true),
						ProcessingEndTimeUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-07T13:51:48.9810457Z"); return t }()),
						ProductComponentName: to.Ptr(""),
						ProductName:          to.Ptr("Azure Security Center"),
						RemediationSteps: []*string{
							to.Ptr("1. Run Process Explorer and try to identify unknown running processes (see https://technet.microsoft.com/en-us/sysinternals/bb896653.aspx)"),
							to.Ptr("2. Make sure the machine is completely updated and has an updated anti-malware application installed"),
							to.Ptr("3. Run a full anti-malware scan and verify that the threat was removed"),
							to.Ptr("4. Install and run Microsoft’s Malicious Software Removal Tool (see https://www.microsoft.com/en-us/download/malicious-software-removal-tool-details.aspx)"),
							to.Ptr("5. Run Microsoft’s Autoruns utility and try to identify unknown applications that are configured to run at login (see https://technet.microsoft.com/en-us/sysinternals/bb963902.aspx)"),
							to.Ptr("6. Escalate the alert to the information security team")},
						ResourceIdentifiers: []armsecurity.ResourceIdentifierClassification{
							&armsecurity.AzureResourceIdentifier{
								Type:            to.Ptr(armsecurity.ResourceIdentifierTypeAzureResource),
								AzureResourceID: to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/myRg1/providers/Microsoft.Compute/virtualMachines/vm1"),
							},
							&armsecurity.LogAnalyticsIdentifier{
								Type:                    to.Ptr(armsecurity.ResourceIdentifierTypeLogAnalytics),
								AgentID:                 to.Ptr("75724a01-f021-4aa8-9ec2-329792373e6e"),
								WorkspaceID:             to.Ptr("f419f624-acad-4d89-b86d-f62fa387f019"),
								WorkspaceResourceGroup:  to.Ptr("myRg1"),
								WorkspaceSubscriptionID: to.Ptr("20ff7fc3-e762-44dd-bd96-b71116dcdc23"),
							}},
						Severity:         to.Ptr(armsecurity.AlertSeverityMedium),
						StartTimeUTC:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-07T13:51:45.0045913Z"); return t }()),
						Status:           to.Ptr(armsecurity.AlertStatus("New")),
						SystemAlertID:    to.Ptr("2518298467986649999_4d25bfef-2d77-4a08-adc0-3e35715cc92a"),
						TimeGeneratedUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-07T13:51:48.3810457Z"); return t }()),
						VendorName:       to.Ptr("Microsoft"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AlertList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AlertList)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/stable/2021-01-01/examples/Alerts/GetAlertsSubscription_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAlerts_ListByResourceGroup(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/stable/2021-01-01/examples/Alerts/GetAlertsResourceGroup_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get security alerts on a resource group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewAlertsClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23",
		"<asc-location>", cred, &options)
	pager := client.ListByResourceGroup("myRg1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/security/resource-manager/Microsoft.Security/stable/2021-01-01/examples/Alerts/GetAlertsResourceGroup_example.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsecurity.AlertList{
			Value: []*armsecurity.Alert{
				{
					Name: to.Ptr("2518298467986649999_4d25bfef-2d77-4a08-adc0-3e35715cc92a"),
					Type: to.Ptr("Microsoft.Security/Locations/alerts"),
					ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/myRg1/providers/Microsoft.Security/locations/westeurope/alerts/2518770965529163669_F144EE95-A3E5-42DA-A279-967D115809AA"),
					Properties: &armsecurity.AlertProperties{
						Description:       to.Ptr("This is a test alert generated by Azure Security Center. No further action is needed."),
						AlertDisplayName:  to.Ptr("Azure Security Center test alert (not a threat)"),
						AlertType:         to.Ptr("VM_EICAR"),
						AlertURI:          to.Ptr("https://portal.azure.com/#blade/Microsoft_Azure_Security/AlertBlade/alertId/2518298467986649999_4d25bfef-2d77-4a08-adc0-3e35715cc92a/subscriptionId/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroup/myRg1/referencedFrom/alertDeepLink/location/westeurope"),
						CompromisedEntity: to.Ptr("vm1"),
						CorrelationKey:    to.Ptr("kso0LFWxzCll5tqrk5hmrBJ+MY1BX806W6q6+0s9Lk="),
						EndTimeUTC:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-22T00:00:00.0000000Z"); return t }()),
						Entities: []*armsecurity.AlertEntity{
							{
								AdditionalProperties: map[string]interface{}{
									"address": "192.0.2.1",
									"location": map[string]interface{}{
										"asn":         float64(6584),
										"city":        "sonning",
										"countryCode": "gb",
										"latitude":    float64(51.468),
										"longitude":   float64(-0.909),
										"state":       "wokingham",
									},
								},
								Type: to.Ptr("ip"),
							}},
						ExtendedLinks: []map[string]*string{
							{
								"Category": to.Ptr("threat_reports"),
								"Href":     to.Ptr("https://contoso.com/reports/DisplayReport"),
								"Label":    to.Ptr("Report: RDP Brute Forcing"),
								"Type":     to.Ptr("webLink"),
							}},
						ExtendedProperties: map[string]*string{
							"Property1": to.Ptr("Property1 information"),
						},
						Intent:               to.Ptr(armsecurity.IntentExecution),
						IsIncident:           to.Ptr(true),
						ProcessingEndTimeUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-23T13:47:58.9205584Z"); return t }()),
						ProductComponentName: to.Ptr(""),
						ProductName:          to.Ptr("Azure Security Center"),
						RemediationSteps: []*string{
							to.Ptr("No further action is needed.")},
						ResourceIdentifiers: []armsecurity.ResourceIdentifierClassification{
							&armsecurity.AzureResourceIdentifier{
								Type:            to.Ptr(armsecurity.ResourceIdentifierTypeAzureResource),
								AzureResourceID: to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/myRg1/providers/Microsoft.Compute/virtualMachines/vm1"),
							},
							&armsecurity.LogAnalyticsIdentifier{
								Type:                    to.Ptr(armsecurity.ResourceIdentifierTypeLogAnalytics),
								AgentID:                 to.Ptr("75724a01-f021-4aa8-9ec2-329792373e6e"),
								WorkspaceID:             to.Ptr("f419f624-acad-4d89-b86d-f62fa387f019"),
								WorkspaceResourceGroup:  to.Ptr("myRg1"),
								WorkspaceSubscriptionID: to.Ptr("20ff7fc3-e762-44dd-bd96-b71116dcdc23"),
							}},
						Severity:         to.Ptr(armsecurity.AlertSeverityHigh),
						StartTimeUTC:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-22T00:00:00.0000000Z"); return t }()),
						Status:           to.Ptr(armsecurity.AlertStatus("New")),
						SystemAlertID:    to.Ptr("2518298467986649999_4d25bfef-2d77-4a08-adc0-3e35715cc92a"),
						TimeGeneratedUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-23T13:47:58.0000000Z"); return t }()),
						VendorName:       to.Ptr("Microsoft"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AlertList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AlertList)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/stable/2021-01-01/examples/Alerts/GetAlertsResourceGroup_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAlerts_ListSubscriptionLevelByRegion(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/stable/2021-01-01/examples/Alerts/GetAlertsSubscriptionsLocation_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get security alerts on a subscription from a security data location"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewAlertsClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23",
		"westeurope", cred, &options)
	pager := client.ListSubscriptionLevelByRegion(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/security/resource-manager/Microsoft.Security/stable/2021-01-01/examples/Alerts/GetAlertsSubscriptionsLocation_example.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsecurity.AlertList{
			Value: []*armsecurity.Alert{
				{
					Name: to.Ptr("2518298467986649999_4d25bfef-2d77-4a08-adc0-3e35715cc92a"),
					Type: to.Ptr("Microsoft.Security/Locations/alerts"),
					ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/myRg1/providers/Microsoft.Security/locations/westeurope/alerts/2518770965529163669_F144EE95-A3E5-42DA-A279-967D115809AA"),
					Properties: &armsecurity.AlertProperties{
						Description:       to.Ptr("This is a test alert generated by Azure Security Center. No further action is needed."),
						AlertDisplayName:  to.Ptr("Azure Security Center test alert (not a threat)"),
						AlertType:         to.Ptr("VM_EICAR"),
						AlertURI:          to.Ptr("https://portal.azure.com/#blade/Microsoft_Azure_Security/AlertBlade/alertId/2518298467986649999_4d25bfef-2d77-4a08-adc0-3e35715cc92a/subscriptionId/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroup/myRg1/referencedFrom/alertDeepLink/location/westeurope"),
						CompromisedEntity: to.Ptr("vm1"),
						CorrelationKey:    to.Ptr("kso0LFWxzCll5tqrk5hmrBJ+MY1BX806W6q6+0s9Lk="),
						EndTimeUTC:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-22T00:00:00.0000000Z"); return t }()),
						Entities: []*armsecurity.AlertEntity{
							{
								AdditionalProperties: map[string]interface{}{
									"address": "192.0.2.1",
									"location": map[string]interface{}{
										"asn":         float64(6584),
										"city":        "sonning",
										"countryCode": "gb",
										"latitude":    float64(51.468),
										"longitude":   float64(-0.909),
										"state":       "wokingham",
									},
								},
								Type: to.Ptr("ip"),
							}},
						ExtendedLinks: []map[string]*string{
							{
								"Category": to.Ptr("threat_reports"),
								"Href":     to.Ptr("https://contoso.com/reports/DisplayReport"),
								"Label":    to.Ptr("Report: RDP Brute Forcing"),
								"Type":     to.Ptr("webLink"),
							}},
						ExtendedProperties: map[string]*string{
							"Property1": to.Ptr("Property1 information"),
						},
						Intent:               to.Ptr(armsecurity.IntentExecution),
						IsIncident:           to.Ptr(true),
						ProcessingEndTimeUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-23T13:47:58.9205584Z"); return t }()),
						ProductComponentName: to.Ptr(""),
						ProductName:          to.Ptr("Azure Security Center"),
						RemediationSteps: []*string{
							to.Ptr("No further action is needed.")},
						ResourceIdentifiers: []armsecurity.ResourceIdentifierClassification{
							&armsecurity.AzureResourceIdentifier{
								Type:            to.Ptr(armsecurity.ResourceIdentifierTypeAzureResource),
								AzureResourceID: to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/myRg1/providers/Microsoft.Compute/virtualMachines/vm1"),
							},
							&armsecurity.LogAnalyticsIdentifier{
								Type:                    to.Ptr(armsecurity.ResourceIdentifierTypeLogAnalytics),
								AgentID:                 to.Ptr("75724a01-f021-4aa8-9ec2-329792373e6e"),
								WorkspaceID:             to.Ptr("f419f624-acad-4d89-b86d-f62fa387f019"),
								WorkspaceResourceGroup:  to.Ptr("myRg1"),
								WorkspaceSubscriptionID: to.Ptr("20ff7fc3-e762-44dd-bd96-b71116dcdc23"),
							}},
						Severity:         to.Ptr(armsecurity.AlertSeverityHigh),
						StartTimeUTC:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-22T00:00:00.0000000Z"); return t }()),
						Status:           to.Ptr(armsecurity.AlertStatus("New")),
						SystemAlertID:    to.Ptr("2518298467986649999_4d25bfef-2d77-4a08-adc0-3e35715cc92a"),
						TimeGeneratedUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-23T13:47:58.0000000Z"); return t }()),
						VendorName:       to.Ptr("Microsoft"),
					},
				},
				{
					Name: to.Ptr("2518765996949954086_2325cf9e-42a2-4f72-ae7f-9b863cba2d22"),
					Type: to.Ptr("Microsoft.Security/Locations/alerts"),
					ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/myRg2/providers/Microsoft.Security/locations/westeurope/alerts/2518765996949954086_2325cf9e-42a2-4f72-ae7f-9b863cba2d22"),
					Properties: &armsecurity.AlertProperties{
						Description:       to.Ptr("The process ‘c:\\users\\contosoUser\\scrsave.scr’ was observed executing from an uncommon location. Files with the .scr extensions are screen saver files and are normally reside and execute from the Windows system directory."),
						AlertDisplayName:  to.Ptr("Suspicious Screensaver process executed"),
						AlertType:         to.Ptr("VM_SuspiciousScreenSaver"),
						AlertURI:          to.Ptr("https://portal.azure.com/#blade/Microsoft_Azure_Security/AlertBlade/alertId/2518298467986649999_4d25bfef-2d77-4a08-adc0-3e35715cc92a/subscriptionId/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroup/myRg1/referencedFrom/alertDeepLink/location/westeurope"),
						CompromisedEntity: to.Ptr("vm2"),
						CorrelationKey:    to.Ptr("4hno6LF0xzCl5tqrk4nrBW+MY1BX816W6q6+0srk4"),
						EndTimeUTC:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-07T13:51:45.0045913Z"); return t }()),
						Entities: []*armsecurity.AlertEntity{
							{
								AdditionalProperties: map[string]interface{}{
									"OsVersion":       nil,
									"azureID":         "/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourcegroups/myRg2/providers/microsoft.compute/virtualmachines/vm2",
									"dnsDomain":       "",
									"hostName":        "vm2",
									"netBiosName":     "vm2",
									"ntDomain":        "",
									"omsAgentID":      "45b44640-3b94-4892-a28c-4a5cae27065a",
									"operatingSystem": "Unknown",
								},
								Type: to.Ptr("host"),
							},
							{
								AdditionalProperties: map[string]interface{}{
									"name":     "contosoUser",
									"logonId":  "0x61450d87",
									"ntDomain": "vm2",
									"sid":      "S-1-5-21-2144575486-8928446540-5163864319-500",
								},
								Type: to.Ptr("account"),
							},
							{
								AdditionalProperties: map[string]interface{}{
									"name":      "cmd.exe",
									"directory": "c:\\windows\\system32",
								},
								Type: to.Ptr("file"),
							},
							{
								AdditionalProperties: map[string]interface{}{
									"processId": "0x3c44",
								},
								Type: to.Ptr("process"),
							},
							{
								AdditionalProperties: map[string]interface{}{
									"name":      "scrsave.scr",
									"directory": "c:\\users\\contosoUser",
								},
								Type: to.Ptr("file"),
							},
							{
								AdditionalProperties: map[string]interface{}{
									"commandLine":     "c:\\users\\contosoUser\\scrsave.scr",
									"creationTimeUtc": "2018-05-07T13:51:45.0045913Z",
									"processId":       "0x4aec",
								},
								Type: to.Ptr("process"),
							}},
						ExtendedLinks: []map[string]*string{
							{
								"Category": to.Ptr("threat_reports"),
								"Href":     to.Ptr("https://contoso.com/reports/DisplayReport"),
								"Label":    to.Ptr("Report: RDP Brute Forcing"),
								"Type":     to.Ptr("webLink"),
							}},
						ExtendedProperties: map[string]*string{
							"account logon id":  to.Ptr("0x61450d87"),
							"command line":      to.Ptr("c:\\users\\contosoUser\\scrsave.scr"),
							"domainName":        to.Ptr("vm2"),
							"parent process":    to.Ptr("cmd.exe"),
							"parent process id": to.Ptr("0x3c44"),
							"process id":        to.Ptr("0x4aec"),
							"processName":       to.Ptr("c:\\users\\contosoUser\\scrsave.scr"),
							"resourceType":      to.Ptr("Virtual Machine"),
							"user SID":          to.Ptr("S-1-5-21-2144575486-8928446540-5163864319-500"),
							"userName":          to.Ptr("vm2\\contosoUser"),
						},
						Intent:               to.Ptr(armsecurity.IntentExecution),
						IsIncident:           to.Ptr(true),
						ProcessingEndTimeUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-07T13:51:48.9810457Z"); return t }()),
						ProductComponentName: to.Ptr(""),
						ProductName:          to.Ptr("Azure Security Center"),
						RemediationSteps: []*string{
							to.Ptr("1. Run Process Explorer and try to identify unknown running processes (see https://technet.microsoft.com/en-us/sysinternals/bb896653.aspx)"),
							to.Ptr("2. Make sure the machine is completely updated and has an updated anti-malware application installed"),
							to.Ptr("3. Run a full anti-malware scan and verify that the threat was removed"),
							to.Ptr("4. Install and run Microsoft’s Malicious Software Removal Tool (see https://www.microsoft.com/en-us/download/malicious-software-removal-tool-details.aspx)"),
							to.Ptr("5. Run Microsoft’s Autoruns utility and try to identify unknown applications that are configured to run at login (see https://technet.microsoft.com/en-us/sysinternals/bb963902.aspx)"),
							to.Ptr("6. Escalate the alert to the information security team")},
						ResourceIdentifiers: []armsecurity.ResourceIdentifierClassification{
							&armsecurity.AzureResourceIdentifier{
								Type:            to.Ptr(armsecurity.ResourceIdentifierTypeAzureResource),
								AzureResourceID: to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/myRg1/providers/Microsoft.Compute/virtualMachines/vm1"),
							},
							&armsecurity.LogAnalyticsIdentifier{
								Type:                    to.Ptr(armsecurity.ResourceIdentifierTypeLogAnalytics),
								AgentID:                 to.Ptr("75724a01-f021-4aa8-9ec2-329792373e6e"),
								WorkspaceID:             to.Ptr("f419f624-acad-4d89-b86d-f62fa387f019"),
								WorkspaceResourceGroup:  to.Ptr("myRg1"),
								WorkspaceSubscriptionID: to.Ptr("20ff7fc3-e762-44dd-bd96-b71116dcdc23"),
							}},
						Severity:         to.Ptr(armsecurity.AlertSeverityMedium),
						StartTimeUTC:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-07T13:51:45.0045913Z"); return t }()),
						Status:           to.Ptr(armsecurity.AlertStatus("New")),
						SystemAlertID:    to.Ptr("2518298467986649999_4d25bfef-2d77-4a08-adc0-3e35715cc92a"),
						TimeGeneratedUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-05-07T13:51:48.3810457Z"); return t }()),
						VendorName:       to.Ptr("Microsoft"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AlertList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AlertList)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/stable/2021-01-01/examples/Alerts/GetAlertsSubscriptionsLocation_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAlerts_ListResourceGroupLevelByRegion(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/stable/2021-01-01/examples/Alerts/GetAlertsResourceGroupLocation_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get security alerts on a resource group from a security data location"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewAlertsClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23",
		"westeurope", cred, &options)
	pager := client.ListResourceGroupLevelByRegion("myRg1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/security/resource-manager/Microsoft.Security/stable/2021-01-01/examples/Alerts/GetAlertsResourceGroupLocation_example.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsecurity.AlertList{
			Value: []*armsecurity.Alert{
				{
					Name: to.Ptr("2518298467986649999_4d25bfef-2d77-4a08-adc0-3e35715cc92a"),
					Type: to.Ptr("Microsoft.Security/Locations/alerts"),
					ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/myRg1/providers/Microsoft.Security/locations/westeurope/alerts/2518770965529163669_F144EE95-A3E5-42DA-A279-967D115809AA"),
					Properties: &armsecurity.AlertProperties{
						Description:       to.Ptr("This is a test alert generated by Azure Security Center. No further action is needed."),
						AlertDisplayName:  to.Ptr("Azure Security Center test alert (not a threat)"),
						AlertType:         to.Ptr("VM_EICAR"),
						AlertURI:          to.Ptr("https://portal.azure.com/#blade/Microsoft_Azure_Security/AlertBlade/alertId/2518298467986649999_4d25bfef-2d77-4a08-adc0-3e35715cc92a/subscriptionId/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroup/myRg1/referencedFrom/alertDeepLink/location/westeurope"),
						CompromisedEntity: to.Ptr("vm1"),
						CorrelationKey:    to.Ptr("kso0LFWxzCll5tqrk5hmrBJ+MY1BX806W6q6+0s9Lk="),
						EndTimeUTC:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-22T00:00:00.0000000Z"); return t }()),
						Entities: []*armsecurity.AlertEntity{
							{
								AdditionalProperties: map[string]interface{}{
									"address": "192.0.2.1",
									"location": map[string]interface{}{
										"asn":         float64(6584),
										"city":        "sonning",
										"countryCode": "gb",
										"latitude":    float64(51.468),
										"longitude":   float64(-0.909),
										"state":       "wokingham",
									},
								},
								Type: to.Ptr("ip"),
							}},
						ExtendedLinks: []map[string]*string{
							{
								"Category": to.Ptr("threat_reports"),
								"Href":     to.Ptr("https://contoso.com/reports/DisplayReport"),
								"Label":    to.Ptr("Report: RDP Brute Forcing"),
								"Type":     to.Ptr("webLink"),
							}},
						ExtendedProperties: map[string]*string{
							"Property1": to.Ptr("Property1 information"),
						},
						Intent:               to.Ptr(armsecurity.IntentExecution),
						IsIncident:           to.Ptr(true),
						ProcessingEndTimeUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-23T13:47:58.9205584Z"); return t }()),
						ProductComponentName: to.Ptr(""),
						ProductName:          to.Ptr("Azure Security Center"),
						RemediationSteps: []*string{
							to.Ptr("No further action is needed.")},
						ResourceIdentifiers: []armsecurity.ResourceIdentifierClassification{
							&armsecurity.AzureResourceIdentifier{
								Type:            to.Ptr(armsecurity.ResourceIdentifierTypeAzureResource),
								AzureResourceID: to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/myRg1/providers/Microsoft.Compute/virtualMachines/vm1"),
							},
							&armsecurity.LogAnalyticsIdentifier{
								Type:                    to.Ptr(armsecurity.ResourceIdentifierTypeLogAnalytics),
								AgentID:                 to.Ptr("75724a01-f021-4aa8-9ec2-329792373e6e"),
								WorkspaceID:             to.Ptr("f419f624-acad-4d89-b86d-f62fa387f019"),
								WorkspaceResourceGroup:  to.Ptr("myRg1"),
								WorkspaceSubscriptionID: to.Ptr("20ff7fc3-e762-44dd-bd96-b71116dcdc23"),
							}},
						Severity:         to.Ptr(armsecurity.AlertSeverityHigh),
						StartTimeUTC:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-22T00:00:00.0000000Z"); return t }()),
						Status:           to.Ptr(armsecurity.AlertStatus("New")),
						SystemAlertID:    to.Ptr("2518298467986649999_4d25bfef-2d77-4a08-adc0-3e35715cc92a"),
						TimeGeneratedUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-23T13:47:58.0000000Z"); return t }()),
						VendorName:       to.Ptr("Microsoft"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AlertList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AlertList)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/stable/2021-01-01/examples/Alerts/GetAlertsResourceGroupLocation_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAlerts_GetSubscriptionLevel(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/stable/2021-01-01/examples/Alerts/GetAlertSubscriptionLocation_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get security alert on a subscription from a security data location"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewAlertsClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23",
		"westeurope", cred, &options)
	res, err := client.GetSubscriptionLevel(ctx,
		"2518770965529163669_F144EE95-A3E5-42DA-A279-967D115809AA",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/stable/2021-01-01/examples/Alerts/GetAlertSubscriptionLocation_example.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurity.Alert{
			Name: to.Ptr("2518298467986649999_4d25bfef-2d77-4a08-adc0-3e35715cc92a"),
			Type: to.Ptr("Microsoft.Security/Locations/alerts"),
			ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/myRg1/providers/Microsoft.Security/locations/westeurope/alerts/2518770965529163669_F144EE95-A3E5-42DA-A279-967D115809AA"),
			Properties: &armsecurity.AlertProperties{
				Description:       to.Ptr("This is a test alert generated by Azure Security Center. No further action is needed."),
				AlertDisplayName:  to.Ptr("Azure Security Center test alert (not a threat)"),
				AlertType:         to.Ptr("VM_EICAR"),
				AlertURI:          to.Ptr("https://portal.azure.com/#blade/Microsoft_Azure_Security/AlertBlade/alertId/2518298467986649999_4d25bfef-2d77-4a08-adc0-3e35715cc92a/subscriptionId/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroup/myRg1/referencedFrom/alertDeepLink/location/westeurope"),
				CompromisedEntity: to.Ptr("vm1"),
				CorrelationKey:    to.Ptr("kso0LFWxzCll5tqrk5hmrBJ+MY1BX806W6q6+0s9Lk="),
				EndTimeUTC:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-22T00:00:00.0000000Z"); return t }()),
				Entities: []*armsecurity.AlertEntity{
					{
						AdditionalProperties: map[string]interface{}{
							"address": "192.0.2.1",
							"location": map[string]interface{}{
								"asn":         float64(6584),
								"city":        "sonning",
								"countryCode": "gb",
								"latitude":    float64(51.468),
								"longitude":   float64(-0.909),
								"state":       "wokingham",
							},
						},
						Type: to.Ptr("ip"),
					}},
				ExtendedLinks: []map[string]*string{
					{
						"Category": to.Ptr("threat_reports"),
						"Href":     to.Ptr("https://contoso.com/reports/DisplayReport"),
						"Label":    to.Ptr("Report: RDP Brute Forcing"),
						"Type":     to.Ptr("webLink"),
					}},
				ExtendedProperties: map[string]*string{
					"Property1": to.Ptr("Property1 information"),
				},
				Intent:               to.Ptr(armsecurity.IntentExecution),
				IsIncident:           to.Ptr(true),
				ProcessingEndTimeUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-23T13:47:58.9205584Z"); return t }()),
				ProductComponentName: to.Ptr(""),
				ProductName:          to.Ptr("Azure Security Center"),
				RemediationSteps: []*string{
					to.Ptr("No further action is needed.")},
				ResourceIdentifiers: []armsecurity.ResourceIdentifierClassification{
					&armsecurity.AzureResourceIdentifier{
						Type:            to.Ptr(armsecurity.ResourceIdentifierTypeAzureResource),
						AzureResourceID: to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/myRg1/providers/Microsoft.Compute/virtualMachines/vm1"),
					},
					&armsecurity.LogAnalyticsIdentifier{
						Type:                    to.Ptr(armsecurity.ResourceIdentifierTypeLogAnalytics),
						AgentID:                 to.Ptr("75724a01-f021-4aa8-9ec2-329792373e6e"),
						WorkspaceID:             to.Ptr("f419f624-acad-4d89-b86d-f62fa387f019"),
						WorkspaceResourceGroup:  to.Ptr("myRg1"),
						WorkspaceSubscriptionID: to.Ptr("20ff7fc3-e762-44dd-bd96-b71116dcdc23"),
					}},
				Severity:         to.Ptr(armsecurity.AlertSeverityHigh),
				StartTimeUTC:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-22T00:00:00.0000000Z"); return t }()),
				Status:           to.Ptr(armsecurity.AlertStatus("New")),
				SystemAlertID:    to.Ptr("2518298467986649999_4d25bfef-2d77-4a08-adc0-3e35715cc92a"),
				TimeGeneratedUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-23T13:47:58.0000000Z"); return t }()),
				VendorName:       to.Ptr("Microsoft"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Alert) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Alert)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/stable/2021-01-01/examples/Alerts/GetAlertSubscriptionLocation_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAlerts_GetResourceGroupLevel(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/stable/2021-01-01/examples/Alerts/GetAlertResourceGroupLocation_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get security alert on a resource group from a security data location"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewAlertsClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23",
		"westeurope", cred, &options)
	res, err := client.GetResourceGroupLevel(ctx,
		"2518298467986649999_4d25bfef-2d77-4a08-adc0-3e35715cc92a",
		"myRg1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/stable/2021-01-01/examples/Alerts/GetAlertResourceGroupLocation_example.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurity.Alert{
			Name: to.Ptr("2518298467986649999_4d25bfef-2d77-4a08-adc0-3e35715cc92a"),
			Type: to.Ptr("Microsoft.Security/Locations/alerts"),
			ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/myRg1/providers/Microsoft.Security/locations/westeurope/alerts/2518770965529163669_F144EE95-A3E5-42DA-A279-967D115809AA"),
			Properties: &armsecurity.AlertProperties{
				Description:       to.Ptr("This is a test alert generated by Azure Security Center. No further action is needed."),
				AlertDisplayName:  to.Ptr("Azure Security Center test alert (not a threat)"),
				AlertType:         to.Ptr("VM_EICAR"),
				AlertURI:          to.Ptr("https://portal.azure.com/#blade/Microsoft_Azure_Security/AlertBlade/alertId/2518298467986649999_4d25bfef-2d77-4a08-adc0-3e35715cc92a/subscriptionId/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroup/myRg1/referencedFrom/alertDeepLink/location/westeurope"),
				CompromisedEntity: to.Ptr("vm1"),
				CorrelationKey:    to.Ptr("kso0LFWxzCll5tqrk5hmrBJ+MY1BX806W6q6+0s9Lk="),
				EndTimeUTC:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-22T00:00:00.0000000Z"); return t }()),
				Entities: []*armsecurity.AlertEntity{
					{
						AdditionalProperties: map[string]interface{}{
							"address": "192.0.2.1",
							"location": map[string]interface{}{
								"asn":         float64(6584),
								"city":        "sonning",
								"countryCode": "gb",
								"latitude":    float64(51.468),
								"longitude":   float64(-0.909),
								"state":       "wokingham",
							},
						},
						Type: to.Ptr("ip"),
					}},
				ExtendedLinks: []map[string]*string{
					{
						"Category": to.Ptr("threat_reports"),
						"Href":     to.Ptr("https://contoso.com/reports/DisplayReport"),
						"Label":    to.Ptr("Report: RDP Brute Forcing"),
						"Type":     to.Ptr("webLink"),
					}},
				ExtendedProperties: map[string]*string{
					"Property1": to.Ptr("Property1 information"),
				},
				Intent:               to.Ptr(armsecurity.IntentExecution),
				IsIncident:           to.Ptr(true),
				ProcessingEndTimeUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-23T13:47:58.9205584Z"); return t }()),
				ProductComponentName: to.Ptr(""),
				ProductName:          to.Ptr("Azure Security Center"),
				RemediationSteps: []*string{
					to.Ptr("No further action is needed.")},
				ResourceIdentifiers: []armsecurity.ResourceIdentifierClassification{
					&armsecurity.AzureResourceIdentifier{
						Type:            to.Ptr(armsecurity.ResourceIdentifierTypeAzureResource),
						AzureResourceID: to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/myRg1/providers/Microsoft.Compute/virtualMachines/vm1"),
					},
					&armsecurity.LogAnalyticsIdentifier{
						Type:                    to.Ptr(armsecurity.ResourceIdentifierTypeLogAnalytics),
						AgentID:                 to.Ptr("75724a01-f021-4aa8-9ec2-329792373e6e"),
						WorkspaceID:             to.Ptr("f419f624-acad-4d89-b86d-f62fa387f019"),
						WorkspaceResourceGroup:  to.Ptr("myRg1"),
						WorkspaceSubscriptionID: to.Ptr("20ff7fc3-e762-44dd-bd96-b71116dcdc23"),
					}},
				Severity:         to.Ptr(armsecurity.AlertSeverityHigh),
				StartTimeUTC:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-22T00:00:00.0000000Z"); return t }()),
				Status:           to.Ptr(armsecurity.AlertStatus("New")),
				SystemAlertID:    to.Ptr("2518298467986649999_4d25bfef-2d77-4a08-adc0-3e35715cc92a"),
				TimeGeneratedUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-23T13:47:58.0000000Z"); return t }()),
				VendorName:       to.Ptr("Microsoft"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Alert) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Alert)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/stable/2021-01-01/examples/Alerts/GetAlertResourceGroupLocation_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAlerts_UpdateSubscriptionLevelStateToDismiss(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/stable/2021-01-01/examples/Alerts/UpdateAlertSubscriptionLocation_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update security alert state on a subscription from a security data location"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewAlertsClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23",
		"westeurope", cred, &options)
	_, err := client.UpdateSubscriptionLevelStateToDismiss(ctx,
		"2518298467986649999_4d25bfef-2d77-4a08-adc0-3e35715cc92a",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/stable/2021-01-01/examples/Alerts/UpdateAlertSubscriptionLocation_example.json: %v", err)
	}
}

func TestAlerts_UpdateSubscriptionLevelStateToResolve(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/stable/2021-01-01/examples/Alerts/UpdateAlertSubscriptionLocation_resolve_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update security alert state on a subscription from a security data location"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewAlertsClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23",
		"westeurope", cred, &options)
	_, err := client.UpdateSubscriptionLevelStateToResolve(ctx,
		"2518298467986649999_4d25bfef-2d77-4a08-adc0-3e35715cc92a",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/stable/2021-01-01/examples/Alerts/UpdateAlertSubscriptionLocation_resolve_example.json: %v", err)
	}
}

func TestAlerts_UpdateSubscriptionLevelStateToActivate(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/stable/2021-01-01/examples/Alerts/UpdateAlertSubscriptionLocation_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update security alert state on a subscription from a security data location"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewAlertsClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23",
		"westeurope", cred, &options)
	_, err := client.UpdateSubscriptionLevelStateToActivate(ctx,
		"2518298467986649999_4d25bfef-2d77-4a08-adc0-3e35715cc92a",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/stable/2021-01-01/examples/Alerts/UpdateAlertSubscriptionLocation_example.json: %v", err)
	}
}

func TestAlerts_UpdateResourceGroupLevelStateToResolve(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/stable/2021-01-01/examples/Alerts/UpdateAlertResourceGroupLocation_resolve_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update security alert state on a resource group from a security data location"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewAlertsClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23",
		"westeurope", cred, &options)
	_, err := client.UpdateResourceGroupLevelStateToResolve(ctx,
		"2518765996949954086_2325cf9e-42a2-4f72-ae7f-9b863cba2d22",
		"myRg2",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/stable/2021-01-01/examples/Alerts/UpdateAlertResourceGroupLocation_resolve_example.json: %v", err)
	}
}

func TestAlerts_UpdateResourceGroupLevelStateToDismiss(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/stable/2021-01-01/examples/Alerts/UpdateAlertResourceGroupLocation_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update security alert state on a resource group from a security data location"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewAlertsClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23",
		"westeurope", cred, &options)
	_, err := client.UpdateResourceGroupLevelStateToDismiss(ctx,
		"2518765996949954086_2325cf9e-42a2-4f72-ae7f-9b863cba2d22",
		"myRg2",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/stable/2021-01-01/examples/Alerts/UpdateAlertResourceGroupLocation_example.json: %v", err)
	}
}

func TestAlerts_UpdateResourceGroupLevelStateToActivate(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/stable/2021-01-01/examples/Alerts/UpdateAlertResourceGroupLocation_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update security alert state on a resource group from a security data location"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewAlertsClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23",
		"westeurope", cred, &options)
	_, err := client.UpdateResourceGroupLevelStateToActivate(ctx,
		"2518765996949954086_2325cf9e-42a2-4f72-ae7f-9b863cba2d22",
		"myRg2",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/stable/2021-01-01/examples/Alerts/UpdateAlertResourceGroupLocation_example.json: %v", err)
	}
}

func TestAlerts_Simulate(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/stable/2021-01-01/examples/Alerts/SimulateAlerts_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Simulate security alerts on a subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewAlertsClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23",
		"centralus", cred, &options)
	poller, err := client.BeginSimulate(ctx,
		armsecurity.AlertSimulatorRequestBody{
			Properties: &armsecurity.AlertSimulatorBundlesRequestProperties{
				Kind: to.Ptr(armsecurity.KindBundles),
				Bundles: []*armsecurity.BundleType{
					to.Ptr(armsecurity.BundleTypeAppServices),
					to.Ptr(armsecurity.BundleTypeDNS),
					to.Ptr(armsecurity.BundleTypeKeyVaults),
					to.Ptr(armsecurity.BundleTypeKubernetesService),
					to.Ptr(armsecurity.BundleTypeResourceManager),
					to.Ptr(armsecurity.BundleTypeSQLServers),
					to.Ptr(armsecurity.BundleTypeStorageAccounts),
					to.Ptr(armsecurity.BundleTypeVirtualMachines)},
			},
		},
		&armsecurity.AlertsClientBeginSimulateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/stable/2021-01-01/examples/Alerts/SimulateAlerts_example.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/security/resource-manager/Microsoft.Security/stable/2021-01-01/examples/Alerts/SimulateAlerts_example.json: %v", err)
	}
}

func TestSettings_List(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/stable/2021-07-01/examples/Settings/GetSettings_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get settings of subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewSettingsClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/security/resource-manager/Microsoft.Security/stable/2021-07-01/examples/Settings/GetSettings_example.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsecurity.SettingsList{
			Value: []armsecurity.SettingClassification{
				&armsecurity.DataExportSettings{
					Name: to.Ptr("MCAS"),
					Type: to.Ptr("Microsoft.Security/settings"),
					ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/settings/MCAS"),
					Kind: to.Ptr(armsecurity.SettingKindDataExportSettings),
					Properties: &armsecurity.DataExportSettingProperties{
						Enabled: to.Ptr(true),
					},
				},
				&armsecurity.DataExportSettings{
					Name: to.Ptr("WDATP"),
					Type: to.Ptr("Microsoft.Security/settings"),
					ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/settings/WDATP"),
					Kind: to.Ptr(armsecurity.SettingKindDataExportSettings),
					Properties: &armsecurity.DataExportSettingProperties{
						Enabled: to.Ptr(false),
					},
				},
				&armsecurity.DataExportSettings{
					Name: to.Ptr("WDATP_EXCLUDE_LINUX_PUBLIC_PREVIEW"),
					Type: to.Ptr("Microsoft.Security/settings"),
					ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/settings/WDATP_EXCLUDE_LINUX_PUBLIC_PREVIEW"),
					Kind: to.Ptr(armsecurity.SettingKindDataExportSettings),
					Properties: &armsecurity.DataExportSettingProperties{
						Enabled: to.Ptr(false),
					},
				},
				&armsecurity.AlertSyncSettings{
					Name: to.Ptr("Sentinel"),
					Type: to.Ptr("Microsoft.Security/settings"),
					ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/settings/Sentinel"),
					Kind: to.Ptr(armsecurity.SettingKindAlertSyncSettings),
					Properties: &armsecurity.AlertSyncSettingProperties{
						Enabled: to.Ptr(false),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SettingsList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SettingsList)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/stable/2021-07-01/examples/Settings/GetSettings_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSettings_Get(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/stable/2021-07-01/examples/Settings/GetSetting_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a setting on subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewSettingsClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23", cred, &options)
	res, err := client.Get(ctx,
		armsecurity.Enum77MCAS,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/stable/2021-07-01/examples/Settings/GetSetting_example.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurity.SettingsClientGetResponse{
			&armsecurity.DataExportSettings{
				Name: to.Ptr("MCAS"),
				Type: to.Ptr("Microsoft.Security/settings"),
				ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/settings/MCAS"),
				Kind: to.Ptr(armsecurity.SettingKindDataExportSettings),
				Properties: &armsecurity.DataExportSettingProperties{
					Enabled: to.Ptr(true),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/stable/2021-07-01/examples/Settings/GetSetting_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSettings_Update(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/stable/2021-07-01/examples/Settings/UpdateSetting_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a setting for subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewSettingsClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23", cred, &options)
	res, err := client.Update(ctx,
		armsecurity.Enum77MCAS,
		&armsecurity.DataExportSettings{
			Kind: to.Ptr(armsecurity.SettingKindDataExportSettings),
			Properties: &armsecurity.DataExportSettingProperties{
				Enabled: to.Ptr(true),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/stable/2021-07-01/examples/Settings/UpdateSetting_example.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurity.SettingsClientUpdateResponse{
			&armsecurity.DataExportSettings{
				Name: to.Ptr("MCAS"),
				Type: to.Ptr("Microsoft.Security/settings"),
				ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/settings/MCAS"),
				Kind: to.Ptr(armsecurity.SettingKindDataExportSettings),
				Properties: &armsecurity.DataExportSettingProperties{
					Enabled: to.Ptr(true),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/stable/2021-07-01/examples/Settings/UpdateSetting_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIngestionSettings_List(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/preview/2021-01-15-preview/examples/IngestionSettings/GetIngestionSettings_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get ingestion settings on subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewIngestionSettingsClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/security/resource-manager/Microsoft.Security/preview/2021-01-15-preview/examples/IngestionSettings/GetIngestionSettings_example.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsecurity.IngestionSettingList{
			Value: []*armsecurity.IngestionSetting{
				{
					Name: to.Ptr("default"),
					Type: to.Ptr("Microsoft.Security/ingestionSettings"),
					ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/ingestionSettings/default"),
				},
				{
					Name: to.Ptr("default2"),
					Type: to.Ptr("Microsoft.Security/ingestionSettings"),
					ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/ingestionSettings/default2"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.IngestionSettingList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.IngestionSettingList)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/preview/2021-01-15-preview/examples/IngestionSettings/GetIngestionSettings_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIngestionSettings_Get(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/preview/2021-01-15-preview/examples/IngestionSettings/GetIngestionSetting_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a ingestion setting on subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewIngestionSettingsClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23", cred, &options)
	res, err := client.Get(ctx,
		"default",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/preview/2021-01-15-preview/examples/IngestionSettings/GetIngestionSetting_example.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurity.IngestionSetting{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Security/ingestionSettings"),
			ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/ingestionSettings/default"),
		}
		if !reflect.DeepEqual(exampleRes, res.IngestionSetting) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.IngestionSetting)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/preview/2021-01-15-preview/examples/IngestionSettings/GetIngestionSetting_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIngestionSettings_Create(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/preview/2021-01-15-preview/examples/IngestionSettings/CreateIngestionSetting_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create an ingestion setting for subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewIngestionSettingsClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23", cred, &options)
	res, err := client.Create(ctx,
		"default",
		armsecurity.IngestionSetting{},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/preview/2021-01-15-preview/examples/IngestionSettings/CreateIngestionSetting_example.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurity.IngestionSetting{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Security/ingestionSettings"),
			ID:   to.Ptr("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/providers/Microsoft.Security/ingestionSettings/default"),
		}
		if !reflect.DeepEqual(exampleRes, res.IngestionSetting) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.IngestionSetting)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/preview/2021-01-15-preview/examples/IngestionSettings/CreateIngestionSetting_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIngestionSettings_Delete(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/preview/2021-01-15-preview/examples/IngestionSettings/DeleteIngestionSetting_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete an ingestion setting for the subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewIngestionSettingsClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23", cred, &options)
	_, err := client.Delete(ctx,
		"default",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/preview/2021-01-15-preview/examples/IngestionSettings/DeleteIngestionSetting_example.json: %v", err)
	}
}

func TestIngestionSettings_ListTokens(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/preview/2021-01-15-preview/examples/IngestionSettings/ListTokensIngestionSetting_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List ingestion setting tokens"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewIngestionSettingsClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23", cred, &options)
	res, err := client.ListTokens(ctx,
		"default",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/preview/2021-01-15-preview/examples/IngestionSettings/ListTokensIngestionSetting_example.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurity.IngestionSettingToken{
			Token: to.Ptr("<value>"),
		}
		if !reflect.DeepEqual(exampleRes, res.IngestionSettingToken) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.IngestionSettingToken)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/preview/2021-01-15-preview/examples/IngestionSettings/ListTokensIngestionSetting_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestIngestionSettings_ListConnectionStrings(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/preview/2021-01-15-preview/examples/IngestionSettings/ListConnectionStrings_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List connection strings for ingesting security data and logs"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewIngestionSettingsClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23", cred, &options)
	res, err := client.ListConnectionStrings(ctx,
		"default",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/preview/2021-01-15-preview/examples/IngestionSettings/ListConnectionStrings_example.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurity.ConnectionStrings{
			Value: []*armsecurity.IngestionConnectionString{
				{
					Location: to.Ptr("CUS"),
					Value:    to.Ptr("<connection string>"),
				},
				{
					Location: to.Ptr("WEU"),
					Value:    to.Ptr("<connection string>"),
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.ConnectionStrings) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ConnectionStrings)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/preview/2021-01-15-preview/examples/IngestionSettings/ListConnectionStrings_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSoftwareInventories_ListByExtendedResource(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/preview/2021-05-01-preview/examples/SoftwareInventories/ListByExtendedResourceSoftwareInventories_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets the software inventory of the virtual machine"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewSoftwareInventoriesClient("e5d1b86c-3051-44d5-8802-aa65d45a279b", cred, &options)
	pager := client.ListByExtendedResource("EITAN-TESTS",
		"Microsoft.Compute",
		"virtualMachines",
		"Eitan-Test1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/security/resource-manager/Microsoft.Security/preview/2021-05-01-preview/examples/SoftwareInventories/ListByExtendedResourceSoftwareInventories_example.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsecurity.SoftwaresList{
			Value: []*armsecurity.Software{
				{
					Name: to.Ptr("outlook_16.0.10371.20060"),
					Type: to.Ptr("Microsoft.Security/softwareInventories"),
					ID:   to.Ptr("/subscriptions/e5d1b86c-3051-44d5-8802-aa65d45a279b/resourcegroups/EITAN-TESTS/providers/Microsoft.Compute/virtualMachines/Eitan-Test1/providers/Microsoft.Security/softwareInventories/outlook_16.0.10371.20060"),
					Properties: &armsecurity.SoftwareProperties{
						DeviceID:                     to.Ptr("7bd19ed6b07553e52a2844451bcec68d25963a53"),
						EndOfSupportStatus:           to.Ptr(armsecurity.EndOfSupportStatusNone),
						FirstSeenAt:                  to.Ptr("2021-01-26 15:48:56"),
						NumberOfKnownVulnerabilities: to.Ptr[int32](0),
						OSPlatform:                   to.Ptr("Windows10"),
						SoftwareName:                 to.Ptr("outlook"),
						Vendor:                       to.Ptr("microsoft"),
						Version:                      to.Ptr("16.0.10371.20060"),
					},
				},
				{
					Name: to.Ptr("windows_10_10.0.19042.746"),
					Type: to.Ptr("Microsoft.Security/softwareInventories"),
					ID:   to.Ptr("/subscriptions/e5d1b86c-3051-44d5-8802-aa65d45a279b/resourcegroups/EITAN-TESTS/providers/Microsoft.Compute/virtualMachines/Eitan-Test1/providers/Microsoft.Security/softwareInventories/windows_10_10.0.19042.746"),
					Properties: &armsecurity.SoftwareProperties{
						DeviceID:                     to.Ptr("7bd19ed6b07553e52a2844451bcec68d25963a53"),
						EndOfSupportStatus:           to.Ptr(armsecurity.EndOfSupportStatusNone),
						FirstSeenAt:                  to.Ptr("2021-01-26 15:51:19"),
						NumberOfKnownVulnerabilities: to.Ptr[int32](26),
						OSPlatform:                   to.Ptr("Windows10"),
						SoftwareName:                 to.Ptr("windows_10"),
						Vendor:                       to.Ptr("microsoft"),
						Version:                      to.Ptr("10.0.19042.746"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SoftwaresList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SoftwaresList)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/preview/2021-05-01-preview/examples/SoftwareInventories/ListByExtendedResourceSoftwareInventories_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSoftwareInventories_ListBySubscription(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/preview/2021-05-01-preview/examples/SoftwareInventories/ListBySubscriptionSoftwareInventories_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets the software inventory of all virtual machines in the subscriptions"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewSoftwareInventoriesClient("e5d1b86c-3051-44d5-8802-aa65d45a279b", cred, &options)
	pager := client.ListBySubscription(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/security/resource-manager/Microsoft.Security/preview/2021-05-01-preview/examples/SoftwareInventories/ListBySubscriptionSoftwareInventories_example.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsecurity.SoftwaresList{
			Value: []*armsecurity.Software{
				{
					Name: to.Ptr("outlook_16.0.10371.20060"),
					Type: to.Ptr("Microsoft.Security/softwareInventories"),
					ID:   to.Ptr("/subscriptions/e5d1b86c-3051-44d5-8802-aa65d45a279b/resourcegroups/EITAN-TESTS/providers/Microsoft.Compute/virtualMachines/Eitan-Test1/providers/Microsoft.Security/softwareInventories/outlook_16.0.10371.20060"),
					Properties: &armsecurity.SoftwareProperties{
						DeviceID:                     to.Ptr("7bd19ed6b07553e52a2844451bcec68d25963a53"),
						EndOfSupportStatus:           to.Ptr(armsecurity.EndOfSupportStatusNone),
						FirstSeenAt:                  to.Ptr("2021-01-26 15:48:56"),
						NumberOfKnownVulnerabilities: to.Ptr[int32](0),
						OSPlatform:                   to.Ptr("Windows10"),
						SoftwareName:                 to.Ptr("outlook"),
						Vendor:                       to.Ptr("microsoft"),
						Version:                      to.Ptr("16.0.10371.20060"),
					},
				},
				{
					Name: to.Ptr("windows_10_10.0.19042.746"),
					Type: to.Ptr("Microsoft.Security/softwareInventories"),
					ID:   to.Ptr("/subscriptions/e5d1b86c-3051-44d5-8802-aa65d45a279b/resourcegroups/EITAN-TESTS/providers/Microsoft.Compute/virtualMachines/Eitan-Test2/providers/Microsoft.Security/softwareInventories/windows_10_10.0.19042.746"),
					Properties: &armsecurity.SoftwareProperties{
						DeviceID:                     to.Ptr("7bd19ed6b07553e52a2844451bcec68d25963a53"),
						EndOfSupportStatus:           to.Ptr(armsecurity.EndOfSupportStatusNone),
						FirstSeenAt:                  to.Ptr("2021-01-26 15:51:19"),
						NumberOfKnownVulnerabilities: to.Ptr[int32](26),
						OSPlatform:                   to.Ptr("Windows10"),
						SoftwareName:                 to.Ptr("windows_10"),
						Vendor:                       to.Ptr("microsoft"),
						Version:                      to.Ptr("10.0.19042.746"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SoftwaresList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SoftwaresList)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/preview/2021-05-01-preview/examples/SoftwareInventories/ListBySubscriptionSoftwareInventories_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSoftwareInventories_Get(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/preview/2021-05-01-preview/examples/SoftwareInventories/GetSoftware_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets a single software data of the virtual machine"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewSoftwareInventoriesClient("e5d1b86c-3051-44d5-8802-aa65d45a279b", cred, &options)
	res, err := client.Get(ctx,
		"EITAN-TESTS",
		"Microsoft.Compute",
		"virtualMachines",
		"Eitan-Test1",
		"outlook_16.0.10371.20060",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/preview/2021-05-01-preview/examples/SoftwareInventories/GetSoftware_example.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurity.Software{
			Name: to.Ptr("outlook_16.0.10371.20060"),
			Type: to.Ptr("Microsoft.Security/softwareInventories"),
			ID:   to.Ptr("/subscriptions/e5d1b86c-3051-44d5-8802-aa65d45a279b/resourcegroups/EITAN-TESTS/providers/Microsoft.Compute/virtualMachines/Eitan-Test1/providers/Microsoft.Security/softwareInventories/outlook_16.0.10371.20060"),
			Properties: &armsecurity.SoftwareProperties{
				DeviceID:                     to.Ptr("7bd19ed6b07553e52a2844451bcec68d25963a53"),
				EndOfSupportStatus:           to.Ptr(armsecurity.EndOfSupportStatusNone),
				FirstSeenAt:                  to.Ptr("2021-01-26 15:48:56"),
				NumberOfKnownVulnerabilities: to.Ptr[int32](0),
				OSPlatform:                   to.Ptr("Windows10"),
				SoftwareName:                 to.Ptr("outlook"),
				Vendor:                       to.Ptr("microsoft"),
				Version:                      to.Ptr("16.0.10371.20060"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Software) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Software)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/preview/2021-05-01-preview/examples/SoftwareInventories/GetSoftware_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSecurityConnectors_List(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/preview/2021-07-01-preview/examples/SecurityConnectors/GetSecurityConnectorsSubscription_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all security connectors of a specified subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewConnectorsClient("a5caac9c-5c04-49af-b3d0-e204f40345d5", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/security/resource-manager/Microsoft.Security/preview/2021-07-01-preview/examples/SecurityConnectors/GetSecurityConnectorsSubscription_example.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsecurity.ConnectorsList{
			Value: []*armsecurity.Connector{
				{
					Location: to.Ptr("Central US"),
					Etag:     to.Ptr("etag value"),
					Name:     to.Ptr("exampleSecurityConnectorName"),
					Type:     to.Ptr("Microsoft.Security/securityConnectors"),
					ID:       to.Ptr("/subscriptions/a5caac9c-5c04-49af-b3d0-e204f40345d5/resourceGroups/exampleResourceGroup/providers/Microsoft.Security/securityConnectors/exampleSecurityConnectorName"),
					Tags:     map[string]*string{},
					Properties: &armsecurity.ConnectorProperties{
						CloudName:           to.Ptr(armsecurity.CloudNameAWS),
						HierarchyIdentifier: to.Ptr("exampleHierarchyId"),
						Offerings: []armsecurity.CloudOfferingClassification{
							&armsecurity.CspmMonitorAwsOffering{
								OfferingType: to.Ptr(armsecurity.OfferingTypeCspmMonitorAws),
								NativeCloudConnection: &armsecurity.CspmMonitorAwsOfferingNativeCloudConnection{
									CloudRoleArn: to.Ptr("arn:aws:iam::00000000:role/ASCMonitor"),
								},
							}},
					},
					SystemData: &armsecurity.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-31T13:47:50.328Z"); return t }()),
						CreatedBy:          to.Ptr("user@contoso.com"),
						CreatedByType:      to.Ptr(armsecurity.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-31T13:47:50.328Z"); return t }()),
						LastModifiedBy:     to.Ptr("user@contoso.com"),
						LastModifiedByType: to.Ptr(armsecurity.CreatedByTypeUser),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ConnectorsList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ConnectorsList)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/preview/2021-07-01-preview/examples/SecurityConnectors/GetSecurityConnectorsSubscription_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSecurityConnectors_ListByResourceGroup(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/preview/2021-07-01-preview/examples/SecurityConnectors/GetSecurityConnectorsResourceGroup_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all security connectors of a specified resource group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewConnectorsClient("a5caac9c-5c04-49af-b3d0-e204f40345d5", cred, &options)
	pager := client.ListByResourceGroup("exampleResourceGroup",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/security/resource-manager/Microsoft.Security/preview/2021-07-01-preview/examples/SecurityConnectors/GetSecurityConnectorsResourceGroup_example.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armsecurity.ConnectorsList{
			Value: []*armsecurity.Connector{
				{
					Location: to.Ptr("Central US"),
					Etag:     to.Ptr("etag value"),
					Kind:     to.Ptr(""),
					Name:     to.Ptr("exampleSecurityConnectorName"),
					Type:     to.Ptr("Microsoft.Security/securityConnectors"),
					ID:       to.Ptr("/subscriptions/a5caac9c-5c04-49af-b3d0-e204f40345d5/resourceGroups/exampleResourceGroup/providers/Microsoft.Security/securityConnectors/exampleSecurityConnectorName"),
					Tags:     map[string]*string{},
					Properties: &armsecurity.ConnectorProperties{
						CloudName:           to.Ptr(armsecurity.CloudNameAWS),
						HierarchyIdentifier: to.Ptr("exampleHierarchyId"),
						Offerings: []armsecurity.CloudOfferingClassification{
							&armsecurity.CspmMonitorAwsOffering{
								OfferingType: to.Ptr(armsecurity.OfferingTypeCspmMonitorAws),
								NativeCloudConnection: &armsecurity.CspmMonitorAwsOfferingNativeCloudConnection{
									CloudRoleArn: to.Ptr("arn:aws:iam::00000000:role/ASCMonitor"),
								},
							}},
					},
					SystemData: &armsecurity.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-31T13:47:50.328Z"); return t }()),
						CreatedBy:          to.Ptr("user@contoso.com"),
						CreatedByType:      to.Ptr(armsecurity.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-31T13:47:50.328Z"); return t }()),
						LastModifiedBy:     to.Ptr("user@contoso.com"),
						LastModifiedByType: to.Ptr(armsecurity.CreatedByTypeUser),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ConnectorsList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ConnectorsList)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/preview/2021-07-01-preview/examples/SecurityConnectors/GetSecurityConnectorsResourceGroup_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSecurityConnectors_Get(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/preview/2021-07-01-preview/examples/SecurityConnectors/GetSecurityConnectorResourceGroup_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Retrieve a security connector"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewConnectorsClient("a5caac9c-5c04-49af-b3d0-e204f40345d5", cred, &options)
	res, err := client.Get(ctx,
		"exampleResourceGroup",
		"exampleSecurityConnectorName",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/preview/2021-07-01-preview/examples/SecurityConnectors/GetSecurityConnectorResourceGroup_example.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurity.Connector{
			Location: to.Ptr("Central US"),
			Etag:     to.Ptr("etag value"),
			Kind:     to.Ptr(""),
			Name:     to.Ptr("exampleSecurityConnectorName"),
			Type:     to.Ptr("Microsoft.Security/securityConnectors"),
			ID:       to.Ptr("/subscriptions/a5caac9c-5c04-49af-b3d0-e204f40345d5/resourceGroups/exampleResourceGroup/providers/Microsoft.Security/securityConnectors/exampleSecurityConnectorName"),
			Tags:     map[string]*string{},
			Properties: &armsecurity.ConnectorProperties{
				CloudName:           to.Ptr(armsecurity.CloudNameAWS),
				HierarchyIdentifier: to.Ptr("exampleHierarchyId"),
				Offerings: []armsecurity.CloudOfferingClassification{
					&armsecurity.CspmMonitorAwsOffering{
						OfferingType: to.Ptr(armsecurity.OfferingTypeCspmMonitorAws),
						NativeCloudConnection: &armsecurity.CspmMonitorAwsOfferingNativeCloudConnection{
							CloudRoleArn: to.Ptr("arn:aws:iam::00000000:role/ASCMonitor"),
						},
					}},
			},
			SystemData: &armsecurity.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-31T13:47:50.328Z"); return t }()),
				CreatedBy:          to.Ptr("user@contoso.com"),
				CreatedByType:      to.Ptr(armsecurity.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-31T13:47:50.328Z"); return t }()),
				LastModifiedBy:     to.Ptr("user@contoso.com"),
				LastModifiedByType: to.Ptr(armsecurity.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Connector) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Connector)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/preview/2021-07-01-preview/examples/SecurityConnectors/GetSecurityConnectorResourceGroup_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSecurityConnectors_CreateOrUpdate(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/preview/2021-07-01-preview/examples/SecurityConnectors/PutSecurityConnector_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update a security connector"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewConnectorsClient("a5caac9c-5c04-49af-b3d0-e204f40345d5", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"exampleResourceGroup",
		"exampleSecurityConnectorName",
		armsecurity.Connector{
			Location: to.Ptr("Central US"),
			Etag:     to.Ptr("etag value (must be supplied for update)"),
			Tags:     map[string]*string{},
			Properties: &armsecurity.ConnectorProperties{
				CloudName:           to.Ptr(armsecurity.CloudNameAWS),
				HierarchyIdentifier: to.Ptr("exampleHierarchyId"),
				Offerings: []armsecurity.CloudOfferingClassification{
					&armsecurity.CspmMonitorAwsOffering{
						OfferingType: to.Ptr(armsecurity.OfferingTypeCspmMonitorAws),
						NativeCloudConnection: &armsecurity.CspmMonitorAwsOfferingNativeCloudConnection{
							CloudRoleArn: to.Ptr("arn:aws:iam::00000000:role/ASCMonitor"),
						},
					}},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/preview/2021-07-01-preview/examples/SecurityConnectors/PutSecurityConnector_example.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurity.Connector{
			Location: to.Ptr("Central US"),
			Etag:     to.Ptr(""),
			Kind:     to.Ptr(""),
			Name:     to.Ptr("exampleSecurityConnectorName"),
			Type:     to.Ptr("Microsoft.Security/securityConnectors"),
			ID:       to.Ptr("/subscriptions/a5caac9c-5c04-49af-b3d0-e204f40345d5/resourceGroups/exampleResourceGroup/providers/Microsoft.Security/securityConnectors/exampleSecurityConnectorName"),
			Tags:     map[string]*string{},
			Properties: &armsecurity.ConnectorProperties{
				CloudName:           to.Ptr(armsecurity.CloudNameAWS),
				HierarchyIdentifier: to.Ptr("exampleHierarchyId"),
				Offerings: []armsecurity.CloudOfferingClassification{
					&armsecurity.CspmMonitorAwsOffering{
						OfferingType: to.Ptr(armsecurity.OfferingTypeCspmMonitorAws),
						NativeCloudConnection: &armsecurity.CspmMonitorAwsOfferingNativeCloudConnection{
							CloudRoleArn: to.Ptr("arn:aws:iam::00000000:role/ASCMonitor"),
						},
					}},
			},
			SystemData: &armsecurity.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-31T13:47:50.328Z"); return t }()),
				CreatedBy:          to.Ptr("user@contoso.com"),
				CreatedByType:      to.Ptr(armsecurity.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-31T13:47:50.328Z"); return t }()),
				LastModifiedBy:     to.Ptr("user@contoso.com"),
				LastModifiedByType: to.Ptr(armsecurity.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Connector) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Connector)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/preview/2021-07-01-preview/examples/SecurityConnectors/PutSecurityConnector_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSecurityConnectors_Update(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/preview/2021-07-01-preview/examples/SecurityConnectors/PatchSecurityConnector_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update a security connector"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewConnectorsClient("a5caac9c-5c04-49af-b3d0-e204f40345d5", cred, &options)
	res, err := client.Update(ctx,
		"exampleResourceGroup",
		"exampleSecurityConnectorName",
		armsecurity.Connector{
			Location: to.Ptr("Central US"),
			Etag:     to.Ptr("etag value (must be supplied for update)"),
			Tags:     map[string]*string{},
			Properties: &armsecurity.ConnectorProperties{
				CloudName:           to.Ptr(armsecurity.CloudNameAWS),
				HierarchyIdentifier: to.Ptr("exampleHierarchyId"),
				Offerings: []armsecurity.CloudOfferingClassification{
					&armsecurity.CspmMonitorAwsOffering{
						OfferingType: to.Ptr(armsecurity.OfferingTypeCspmMonitorAws),
						NativeCloudConnection: &armsecurity.CspmMonitorAwsOfferingNativeCloudConnection{
							CloudRoleArn: to.Ptr("arn:aws:iam::00000000:role/ASCMonitor"),
						},
					}},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/preview/2021-07-01-preview/examples/SecurityConnectors/PatchSecurityConnector_example.json: %v", err)
	}
	// Response check
	{
		exampleRes := armsecurity.Connector{
			Location: to.Ptr("Central US"),
			Etag:     to.Ptr("etag value"),
			Kind:     to.Ptr(""),
			Name:     to.Ptr("exampleSecurityConnectorName"),
			Type:     to.Ptr("Microsoft.Security/securityConnectors"),
			ID:       to.Ptr("/subscriptions/a5caac9c-5c04-49af-b3d0-e204f40345d5/resourceGroups/exampleResourceGroup/providers/Microsoft.Security/securityConnectors/exampleSecurityConnectorName"),
			Tags:     map[string]*string{},
			Properties: &armsecurity.ConnectorProperties{
				CloudName:           to.Ptr(armsecurity.CloudNameAWS),
				HierarchyIdentifier: to.Ptr("exampleHierarchyId"),
				Offerings: []armsecurity.CloudOfferingClassification{
					&armsecurity.CspmMonitorAwsOffering{
						OfferingType: to.Ptr(armsecurity.OfferingTypeCspmMonitorAws),
						NativeCloudConnection: &armsecurity.CspmMonitorAwsOfferingNativeCloudConnection{
							CloudRoleArn: to.Ptr("arn:aws:iam::00000000:role/ASCMonitor"),
						},
					}},
			},
			SystemData: &armsecurity.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-31T13:47:50.328Z"); return t }()),
				CreatedBy:          to.Ptr("user@contoso.com"),
				CreatedByType:      to.Ptr(armsecurity.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-31T13:47:50.328Z"); return t }()),
				LastModifiedBy:     to.Ptr("user@contoso.com"),
				LastModifiedByType: to.Ptr(armsecurity.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Connector) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Connector)
			t.Fatalf("Mock response is not equal to example response for example specification/security/resource-manager/Microsoft.Security/preview/2021-07-01-preview/examples/SecurityConnectors/PatchSecurityConnector_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSecurityConnectors_Delete(t *testing.T) {
	// From example specification/security/resource-manager/Microsoft.Security/preview/2021-07-01-preview/examples/SecurityConnectors/DeleteSecurityConnector_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a security connector"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armsecurity.NewConnectorsClient("20ff7fc3-e762-44dd-bd96-b71116dcdc23", cred, &options)
	_, err := client.Delete(ctx,
		"myRg",
		"mySecurityConnectorName",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/security/resource-manager/Microsoft.Security/preview/2021-07-01-preview/examples/SecurityConnectors/DeleteSecurityConnector_example.json: %v", err)
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
