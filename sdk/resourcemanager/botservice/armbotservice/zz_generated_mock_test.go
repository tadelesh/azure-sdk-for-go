//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armbotservice

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"golang.org/x/net/http2"
)

var (
	ctx            context.Context
	subscriptionId string
	cred           azcore.TokenCredential
	err            error
	con            *arm.Connection
	mockHost       string
)

func TestBots_Create(t *testing.T) {
	// From example Create Bot
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewBotsClient(con,
		"subscription-id")
	res, err := client.Create(ctx,
		"OneResourceGroupName",
		"samplebotname",
		Bot{
			Resource: Resource{
				Etag:     to.StringPtr("etag1"),
				Kind:     KindSdk.ToPtr(),
				Location: to.StringPtr("West US"),
				SKU: &SKU{
					Name: SKUNameS1.ToPtr(),
				},
				Tags: map[string]*string{
					"tag1": to.StringPtr("value1"),
					"tag2": to.StringPtr("value2"),
				},
			},
			Properties: &BotProperties{
				Description:                       to.StringPtr("The description of the bot"),
				CmekKeyVaultURL:                   to.StringPtr("https://myCmekKey"),
				DeveloperAppInsightKey:            to.StringPtr("appinsightskey"),
				DeveloperAppInsightsAPIKey:        to.StringPtr("appinsightsapikey"),
				DeveloperAppInsightsApplicationID: to.StringPtr("appinsightsappid"),
				DisableLocalAuth:                  to.BoolPtr(true),
				DisplayName:                       to.StringPtr("The Name of the bot"),
				Endpoint:                          to.StringPtr("http://mybot.coffee"),
				IconURL:                           to.StringPtr("http://myicon"),
				IsCmekEnabled:                     to.BoolPtr(true),
				IsIsolated:                        to.BoolPtr(false),
				LuisAppIDs: []*string{
					to.StringPtr("luisappid1"),
					to.StringPtr("luisappid2")},
				LuisKey:                     to.StringPtr("luiskey"),
				MsaAppID:                    to.StringPtr("exampleappid"),
				MsaAppMSIResourceID:         to.StringPtr("/subscriptions/foo/resourcegroups/bar/providers/microsoft.managedidentity/userassignedidentities/sampleId"),
				MsaAppTenantID:              to.StringPtr("exampleapptenantid"),
				MsaAppType:                  MsaAppTypeUserAssignedMSI.ToPtr(),
				SchemaTransformationVersion: to.StringPtr("1.0"),
			},
		},
		&BotsCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Bot.ID == nil {
		t.Fatal("Bot.ID should not be nil!")
	}
}

func TestBots_Update(t *testing.T) {
	// From example Update Bot
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewBotsClient(con,
		"subscription-id")
	res, err := client.Update(ctx,
		"OneResourceGroupName",
		"samplebotname",
		Bot{
			Resource: Resource{
				Etag:     to.StringPtr("etag1"),
				Kind:     KindSdk.ToPtr(),
				Location: to.StringPtr("West US"),
				SKU: &SKU{
					Name: SKUNameS1.ToPtr(),
				},
				Tags: map[string]*string{
					"tag1": to.StringPtr("value1"),
					"tag2": to.StringPtr("value2"),
				},
			},
			Properties: &BotProperties{
				Description:                       to.StringPtr("The description of the bot"),
				CmekKeyVaultURL:                   to.StringPtr("https://myCmekKey"),
				DeveloperAppInsightKey:            to.StringPtr("appinsightskey"),
				DeveloperAppInsightsAPIKey:        to.StringPtr("appinsightsapikey"),
				DeveloperAppInsightsApplicationID: to.StringPtr("appinsightsappid"),
				DisableLocalAuth:                  to.BoolPtr(true),
				DisplayName:                       to.StringPtr("The Name of the bot"),
				Endpoint:                          to.StringPtr("http://mybot.coffee"),
				IconURL:                           to.StringPtr("http://myicon"),
				IsCmekEnabled:                     to.BoolPtr(true),
				IsIsolated:                        to.BoolPtr(false),
				LuisAppIDs: []*string{
					to.StringPtr("luisappid1"),
					to.StringPtr("luisappid2")},
				LuisKey:                     to.StringPtr("luiskey"),
				MsaAppID:                    to.StringPtr("msaappid"),
				MsaAppMSIResourceID:         to.StringPtr("/subscriptions/foo/resourcegroups/bar/providers/microsoft.managedidentity/userassignedidentities/sampleId"),
				MsaAppTenantID:              to.StringPtr("msaapptenantid"),
				MsaAppType:                  MsaAppTypeUserAssignedMSI.ToPtr(),
				SchemaTransformationVersion: to.StringPtr("1.0"),
			},
		},
		&BotsUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Bot.ID == nil {
		t.Fatal("Bot.ID should not be nil!")
	}
}

func TestBots_Delete(t *testing.T) {
	// From example Delete Bot
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewBotsClient(con,
		"subscription-id")
	_, err := client.Delete(ctx,
		"OneResourceGroupName",
		"samplebotname",
		&BotsDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestBots_Get(t *testing.T) {
	// From example Get Bot
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewBotsClient(con,
		"subscription-id")
	res, err := client.Get(ctx,
		"OneResourceGroupName",
		"samplebotname",
		&BotsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.Bot.ID == nil {
		t.Fatal("Bot.ID should not be nil!")
	}
}

func TestBots_ListByResourceGroup(t *testing.T) {
	// From example List Bots by Resource Group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewBotsClient(con,
		"subscription-id")
	pager := client.ListByResourceGroup("OneResourceGroupName",
		&BotsListByResourceGroupOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Bot.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Bot.ID should not be nil!")
			}
		}
	}
}

func TestBots_List(t *testing.T) {
	// From example List Bots by Subscription
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewBotsClient(con,
		"subscription-id")
	pager := client.List(&BotsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("Bot.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("Bot.ID should not be nil!")
			}
		}
	}
}

func TestBots_GetCheckNameAvailability(t *testing.T) {
	// From example check Name Availability
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewBotsClient(con,
		nil)
	_, err := client.GetCheckNameAvailability(ctx,
		CheckNameAvailabilityRequestBody{
			Name: to.StringPtr("testbotname"),
			Type: to.StringPtr("string"),
		},
		&BotsGetCheckNameAvailabilityOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestChannels_Create(t *testing.T) {
	// From example Create Alexa Bot
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewChannelsClient(con,
		"subscription-id")
	res, err := client.Create(ctx,
		"OneResourceGroupName",
		"samplebotname",
		ChannelNameAlexaChannel,
		BotChannel{
			Resource: Resource{
				Location: to.StringPtr("global"),
			},
			Properties: &AlexaChannel{
				Channel: Channel{
					ChannelName: to.StringPtr("AlexaChannel"),
				},
				Properties: &AlexaChannelProperties{
					AlexaSkillID: to.StringPtr("XAlexaSkillIdX"),
					IsEnabled:    to.BoolPtr(true),
				},
			},
		},
		&ChannelsCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.BotChannel.ID == nil {
		t.Fatal("BotChannel.ID should not be nil!")
	}

	// From example Create Bot
	res, err = client.Create(ctx,
		"OneResourceGroupName",
		"samplebotname",
		ChannelNameEmailChannel,
		BotChannel{
			Resource: Resource{
				Location: to.StringPtr("global"),
			},
			Properties: &EmailChannel{
				Channel: Channel{
					ChannelName: to.StringPtr("EmailChannel"),
				},
				Properties: &EmailChannelProperties{
					EmailAddress: to.StringPtr("a@b.com"),
					IsEnabled:    to.BoolPtr(true),
					Password:     to.StringPtr("pwd"),
				},
			},
		},
		&ChannelsCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.BotChannel.ID == nil {
		t.Fatal("BotChannel.ID should not be nil!")
	}

	// From example Create DirectLine Speech Bot
	res, err = client.Create(ctx,
		"OneResourceGroupName",
		"samplebotname",
		ChannelNameDirectLineSpeechChannel,
		BotChannel{
			Resource: Resource{
				Location: to.StringPtr("global"),
			},
			Properties: &DirectLineSpeechChannel{
				Channel: Channel{
					ChannelName: to.StringPtr("DirectLineSpeechChannel"),
				},
				Properties: &DirectLineSpeechChannelProperties{
					CognitiveServiceRegion:          to.StringPtr("XcognitiveServiceRegionX"),
					CognitiveServiceSubscriptionKey: to.StringPtr("XcognitiveServiceSubscriptionKeyX"),
					IsEnabled:                       to.BoolPtr(true),
				},
			},
		},
		&ChannelsCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.BotChannel.ID == nil {
		t.Fatal("BotChannel.ID should not be nil!")
	}

	// From example Create Line Bot
	res, err = client.Create(ctx,
		"OneResourceGroupName",
		"samplebotname",
		ChannelNameLineChannel,
		BotChannel{
			Resource: Resource{
				Location: to.StringPtr("global"),
			},
			Properties: &LineChannel{
				Channel: Channel{
					ChannelName: to.StringPtr("LineChannel"),
				},
				Properties: &LineChannelProperties{
					LineRegistrations: []*LineRegistration{
						{
							ChannelAccessToken: to.StringPtr("channelAccessToken"),
							ChannelSecret:      to.StringPtr("channelSecret"),
						}},
				},
			},
		},
		&ChannelsCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.BotChannel.ID == nil {
		t.Fatal("BotChannel.ID should not be nil!")
	}
}

func TestChannels_Update(t *testing.T) {
	// From example Update Alexa
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewChannelsClient(con,
		"subscription-id")
	res, err := client.Update(ctx,
		"OneResourceGroupName",
		"samplebotname",
		ChannelNameAlexaChannel,
		BotChannel{
			Resource: Resource{
				Location: to.StringPtr("global"),
			},
			Properties: &AlexaChannel{
				Channel: Channel{
					ChannelName: to.StringPtr("AlexaChannel"),
				},
				Properties: &AlexaChannelProperties{
					AlexaSkillID: to.StringPtr("XAlexaSkillIdX"),
					IsEnabled:    to.BoolPtr(true),
				},
			},
		},
		&ChannelsUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.BotChannel.ID == nil {
		t.Fatal("BotChannel.ID should not be nil!")
	}

	// From example Update Bot
	res, err = client.Update(ctx,
		"OneResourceGroupName",
		"samplebotname",
		ChannelNameEmailChannel,
		BotChannel{
			Resource: Resource{
				Location: to.StringPtr("global"),
			},
			Properties: &EmailChannel{
				Channel: Channel{
					ChannelName: to.StringPtr("EmailChannel"),
				},
				Properties: &EmailChannelProperties{
					EmailAddress: to.StringPtr("a@b.com"),
					IsEnabled:    to.BoolPtr(true),
					Password:     to.StringPtr("pwd"),
				},
			},
		},
		&ChannelsUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.BotChannel.ID == nil {
		t.Fatal("BotChannel.ID should not be nil!")
	}

	// From example Update DirectLine Speech
	res, err = client.Update(ctx,
		"OneResourceGroupName",
		"samplebotname",
		ChannelNameDirectLineSpeechChannel,
		BotChannel{
			Resource: Resource{
				Location: to.StringPtr("global"),
			},
			Properties: &DirectLineSpeechChannel{
				Channel: Channel{
					ChannelName: to.StringPtr("DirectLineSpeechChannel"),
				},
				Properties: &DirectLineSpeechChannelProperties{
					CognitiveServiceRegion:          to.StringPtr("XcognitiveServiceRegionX"),
					CognitiveServiceSubscriptionKey: to.StringPtr("XcognitiveServiceSubscriptionKeyX"),
					IsEnabled:                       to.BoolPtr(true),
				},
			},
		},
		&ChannelsUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.BotChannel.ID == nil {
		t.Fatal("BotChannel.ID should not be nil!")
	}

	// From example Update Line
	res, err = client.Update(ctx,
		"OneResourceGroupName",
		"samplebotname",
		ChannelNameLineChannel,
		BotChannel{
			Resource: Resource{
				Location: to.StringPtr("global"),
			},
			Properties: &LineChannel{
				Channel: Channel{
					ChannelName: to.StringPtr("LineChannel"),
				},
				Properties: &LineChannelProperties{
					LineRegistrations: []*LineRegistration{
						{
							ChannelAccessToken: to.StringPtr("channelAccessToken"),
							ChannelSecret:      to.StringPtr("channelSecret"),
						}},
				},
			},
		},
		&ChannelsUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.BotChannel.ID == nil {
		t.Fatal("BotChannel.ID should not be nil!")
	}
}

func TestChannels_Delete(t *testing.T) {
	// From example Delete Bot
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewChannelsClient(con,
		"subscription-id")
	_, err := client.Delete(ctx,
		"OneResourceGroupName",
		"samplebotname",
		"EmailChannel",
		&ChannelsDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}

	// From example Delete DirectLine Speech Bot
	_, err = client.Delete(ctx,
		"OneResourceGroupName",
		"samplebotname",
		"DirectLineSpeechChannel",
		&ChannelsDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestChannels_Get(t *testing.T) {
	// From example Get Alexa Bot
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewChannelsClient(con,
		"subscription-id")
	res, err := client.Get(ctx,
		"OneResourceGroupName",
		"samplebotname",
		"AlexaChannel",
		&ChannelsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.BotChannel.ID == nil {
		t.Fatal("BotChannel.ID should not be nil!")
	}

	// From example Get Bot
	res, err = client.Get(ctx,
		"OneResourceGroupName",
		"samplebotname",
		"EmailChannel",
		&ChannelsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.BotChannel.ID == nil {
		t.Fatal("BotChannel.ID should not be nil!")
	}

	// From example Get DirectLine Speech Bot
	res, err = client.Get(ctx,
		"OneResourceGroupName",
		"samplebotname",
		"DirectLineSpeechChannel",
		&ChannelsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.BotChannel.ID == nil {
		t.Fatal("BotChannel.ID should not be nil!")
	}

	// From example Get Line Bot
	res, err = client.Get(ctx,
		"OneResourceGroupName",
		"samplebotname",
		"LineChannel",
		&ChannelsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.BotChannel.ID == nil {
		t.Fatal("BotChannel.ID should not be nil!")
	}
}

func TestChannels_ListWithKeys(t *testing.T) {
	// From example List Channel
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewChannelsClient(con,
		"subscription-id")
	res, err := client.ListWithKeys(ctx,
		"OneResourceGroupName",
		"samplebotname",
		ChannelNameEmailChannel,
		&ChannelsListWithKeysOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.BotChannel.ID == nil {
		t.Fatal("BotChannel.ID should not be nil!")
	}
}

func TestChannels_ListByResourceGroup(t *testing.T) {
	// From example List Bots by Resource Group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewChannelsClient(con,
		"subscription-id")
	pager := client.ListByResourceGroup("OneResourceGroupName",
		"samplebotname",
		&ChannelsListByResourceGroupOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("BotChannel.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("BotChannel.ID should not be nil!")
			}
		}
	}
}

func TestDirectLine_RegenerateKeys(t *testing.T) {
	// From example Regenerate Keys for DirectLine Channel Site
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewDirectLineClient(con,
		"subscription-id")
	res, err := client.RegenerateKeys(ctx,
		"OneResourceGroupName",
		"samplebotname",
		RegenerateKeysChannelNameDirectLineChannel,
		SiteInfo{
			Key:      KeyKey1.ToPtr(),
			SiteName: to.StringPtr("testSiteName"),
		},
		&DirectLineRegenerateKeysOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.BotChannel.ID == nil {
		t.Fatal("BotChannel.ID should not be nil!")
	}

	// From example Regenerate Keys for WebChat Channel Site
	res, err = client.RegenerateKeys(ctx,
		"OneResourceGroupName",
		"samplebotname",
		RegenerateKeysChannelNameWebChatChannel,
		SiteInfo{
			Key:      KeyKey1.ToPtr(),
			SiteName: to.StringPtr("testSiteName"),
		},
		&DirectLineRegenerateKeysOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.BotChannel.ID == nil {
		t.Fatal("BotChannel.ID should not be nil!")
	}
}

func TestOperations_List(t *testing.T) {
	// From example Get Operations
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewOperationsClient(con)
	pager := client.List(&OperationsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
	}
}

func TestBotConnection_ListServiceProviders(t *testing.T) {
	// From example List Auth Service Providers
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewBotConnectionClient(con,
		"subscription-id")
	_, err := client.ListServiceProviders(ctx,
		&BotConnectionListServiceProvidersOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestBotConnection_ListWithSecrets(t *testing.T) {
	// From example Update Connection Setting
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewBotConnectionClient(con,
		"subscription-id")
	res, err := client.ListWithSecrets(ctx,
		"OneResourceGroupName",
		"samplebotname",
		"sampleConnection",
		&BotConnectionListWithSecretsOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ConnectionSetting.ID == nil {
		t.Fatal("ConnectionSetting.ID should not be nil!")
	}
}

func TestBotConnection_Create(t *testing.T) {
	// From example Create Connection Setting
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewBotConnectionClient(con,
		"subscription-id")
	res, err := client.Create(ctx,
		"OneResourceGroupName",
		"samplebotname",
		"sampleConnection",
		ConnectionSetting{
			Resource: Resource{
				Etag:     to.StringPtr("etag1"),
				Location: to.StringPtr("West US"),
			},
			Properties: &ConnectionSettingProperties{
				ClientID:     to.StringPtr("sampleclientid"),
				ClientSecret: to.StringPtr("samplesecret"),
				Parameters: []*ConnectionSettingParameter{
					{
						Key:   to.StringPtr("key1"),
						Value: to.StringPtr("value1"),
					},
					{
						Key:   to.StringPtr("key2"),
						Value: to.StringPtr("value2"),
					}},
				Scopes:            to.StringPtr("samplescope"),
				ServiceProviderID: to.StringPtr("serviceproviderid"),
			},
		},
		&BotConnectionCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ConnectionSetting.ID == nil {
		t.Fatal("ConnectionSetting.ID should not be nil!")
	}
}

func TestBotConnection_Update(t *testing.T) {
	// From example Update Connection Setting
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewBotConnectionClient(con,
		"subscription-id")
	res, err := client.Update(ctx,
		"OneResourceGroupName",
		"samplebotname",
		"sampleConnection",
		ConnectionSetting{
			Resource: Resource{
				Etag:     to.StringPtr("etag1"),
				Location: to.StringPtr("global"),
			},
			Properties: &ConnectionSettingProperties{
				ClientID:     to.StringPtr("sampleclientid"),
				ClientSecret: to.StringPtr("samplesecret"),
				Parameters: []*ConnectionSettingParameter{
					{
						Key:   to.StringPtr("key1"),
						Value: to.StringPtr("value1"),
					},
					{
						Key:   to.StringPtr("key2"),
						Value: to.StringPtr("value2"),
					}},
				Scopes:                     to.StringPtr("samplescope"),
				ServiceProviderDisplayName: to.StringPtr("serviceProviderDisplayName"),
				ServiceProviderID:          to.StringPtr("serviceproviderid"),
			},
		},
		&BotConnectionUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ConnectionSetting.ID == nil {
		t.Fatal("ConnectionSetting.ID should not be nil!")
	}
}

func TestBotConnection_Get(t *testing.T) {
	// From example Update Connection Setting
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewBotConnectionClient(con,
		"subscription-id")
	res, err := client.Get(ctx,
		"OneResourceGroupName",
		"samplebotname",
		"sampleConnection",
		&BotConnectionGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ConnectionSetting.ID == nil {
		t.Fatal("ConnectionSetting.ID should not be nil!")
	}
}

func TestBotConnection_Delete(t *testing.T) {
	// From example Update Connection Setting
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewBotConnectionClient(con,
		"subscription-id")
	_, err := client.Delete(ctx,
		"OneResourceGroupName",
		"samplebotname",
		"sampleConnection",
		&BotConnectionDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestBotConnection_ListByBotService(t *testing.T) {
	// From example List Connection Settings
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewBotConnectionClient(con,
		"subscription-id")
	pager := client.ListByBotService("OneResourceGroupName",
		"samplebotname",
		&BotConnectionListByBotServiceOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ConnectionSetting.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ConnectionSetting.ID should not be nil!")
			}
		}
	}
}

func TestHostSettings_Get(t *testing.T) {
	// From example Get Bot Host Settings
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewHostSettingsClient(con,
		"subscription-id")
	_, err := client.Get(ctx,
		&HostSettingsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestOperationResults_Get(t *testing.T) {
	// From example Get operation result
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewOperationResultsClient(con,
		"subid")
	poller, err := client.BeginGet(ctx,
		"exampleid",
		&OperationResultsBeginGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.OperationResultsDescription.ID == nil {
		t.Fatal("OperationResultsDescription.ID should not be nil!")
	}
}

func TestPrivateEndpointConnections_List(t *testing.T) {
	// From example List Private Endpoint Connections
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateEndpointConnectionsClient(con,
		"{subscription-id}")
	_, err := client.List(ctx,
		"res6977",
		"sto2527",
		&PrivateEndpointConnectionsListOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestPrivateEndpointConnections_Get(t *testing.T) {
	// From example Get Private Endpoint Connection
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateEndpointConnectionsClient(con,
		"{subscription-id}")
	res, err := client.Get(ctx,
		"res6977",
		"sto2527",
		"{privateEndpointConnectionName}",
		&PrivateEndpointConnectionsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.PrivateEndpointConnection.ID == nil {
		t.Fatal("PrivateEndpointConnection.ID should not be nil!")
	}
}

func TestPrivateEndpointConnections_Create(t *testing.T) {
	// From example Put Private Endpoint Connection
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateEndpointConnectionsClient(con,
		"{subscription-id}")
	res, err := client.Create(ctx,
		"res7687",
		"sto9699",
		"{privateEndpointConnectionName}",
		PrivateEndpointConnection{
			Properties: &PrivateEndpointConnectionProperties{
				PrivateLinkServiceConnectionState: &PrivateLinkServiceConnectionState{
					Description: to.StringPtr("Auto-Approved"),
					Status:      PrivateEndpointServiceConnectionStatusApproved.ToPtr(),
				},
			},
		},
		&PrivateEndpointConnectionsCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.PrivateEndpointConnection.ID == nil {
		t.Fatal("PrivateEndpointConnection.ID should not be nil!")
	}
}

func TestPrivateEndpointConnections_Delete(t *testing.T) {
	// From example Delete Private Endpoint Connection
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateEndpointConnectionsClient(con,
		"{subscription-id}")
	_, err := client.Delete(ctx,
		"res6977",
		"sto2527",
		"{privateEndpointConnectionName}",
		&PrivateEndpointConnectionsDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestPrivateLinkResources_ListByBotResource(t *testing.T) {
	// From example List Private Link Resources
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewPrivateLinkResourcesClient(con,
		"{subscription-id}")
	_, err := client.ListByBotResource(ctx,
		"res6977",
		"sto2527",
		&PrivateLinkResourcesListByBotResourceOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	subscriptionId = getEnv("SUBSCRIPTION_ID", "00000000-0000-0000-0000-000000000000")
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}
	cred, err = azidentity.NewEnvironmentCredential(&azidentity.EnvironmentCredentialOptions{AuthorityHost: mockHost, HTTPClient: client})
	if err != nil {
		panic(err)
	}

	con = arm.NewConnection(mockHost, cred, &arm.ConnectionOptions{
		Logging: policy.LogOptions{
			IncludeBody: true,
		},
		HTTPClient: client,
	})
}

func tearDown() {

}
