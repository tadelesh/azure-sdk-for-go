//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armbotservice_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/botservice/armbotservice"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestBots_Create(t *testing.T) {
	// From example specification/botservice/resource-manager/Microsoft.BotService/preview/2021-05-01-preview/examples/CreateBot.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create Bot"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbotservice.NewBotsClient("subscription-id", cred, &options)
	res, err := client.Create(ctx,
		"OneResourceGroupName",
		"samplebotname",
		armbotservice.Bot{
			Etag:     to.Ptr("etag1"),
			Kind:     to.Ptr(armbotservice.KindSdk),
			Location: to.Ptr("West US"),
			SKU: &armbotservice.SKU{
				Name: to.Ptr(armbotservice.SKUNameS1),
			},
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
			Properties: &armbotservice.BotProperties{
				Description:                       to.Ptr("The description of the bot"),
				CmekKeyVaultURL:                   to.Ptr("https://myCmekKey"),
				DeveloperAppInsightKey:            to.Ptr("appinsightskey"),
				DeveloperAppInsightsAPIKey:        to.Ptr("appinsightsapikey"),
				DeveloperAppInsightsApplicationID: to.Ptr("appinsightsappid"),
				DisableLocalAuth:                  to.Ptr(true),
				DisplayName:                       to.Ptr("The Name of the bot"),
				Endpoint:                          to.Ptr("http://mybot.coffee"),
				IconURL:                           to.Ptr("http://myicon"),
				IsCmekEnabled:                     to.Ptr(true),
				LuisAppIDs: []*string{
					to.Ptr("luisappid1"),
					to.Ptr("luisappid2")},
				LuisKey:                     to.Ptr("luiskey"),
				MsaAppID:                    to.Ptr("exampleappid"),
				MsaAppMSIResourceID:         to.Ptr("/subscriptions/foo/resourcegroups/bar/providers/microsoft.managedidentity/userassignedidentities/sampleId"),
				MsaAppTenantID:              to.Ptr("exampleapptenantid"),
				MsaAppType:                  to.Ptr(armbotservice.MsaAppTypeUserAssignedMSI),
				PublicNetworkAccess:         to.Ptr(armbotservice.PublicNetworkAccessEnabled),
				SchemaTransformationVersion: to.Ptr("1.0"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/botservice/resource-manager/Microsoft.BotService/preview/2021-05-01-preview/examples/CreateBot.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbotservice.Bot{
			Name:     to.Ptr("samplebotname"),
			Type:     to.Ptr("Microsoft.BotService/botServices"),
			Etag:     to.Ptr("etag1"),
			ID:       to.Ptr("/subscriptions/subscription-id/resourceGroups/OneResourceGroupName/providers/Microsoft.BotService/botServices/samplebotname"),
			Kind:     to.Ptr(armbotservice.KindSdk),
			Location: to.Ptr("West US"),
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
			Properties: &armbotservice.BotProperties{
				Description:     to.Ptr("The description of the bot"),
				CmekKeyVaultURL: to.Ptr("https://myCmekKey"),
				ConfiguredChannels: []*string{
					to.Ptr("facebook"),
					to.Ptr("groupme")},
				DeveloperAppInsightKey:            to.Ptr("appinsightskey"),
				DeveloperAppInsightsApplicationID: to.Ptr("appinsightsappid"),
				DisableLocalAuth:                  to.Ptr(true),
				DisplayName:                       to.Ptr("The Name of the bot"),
				EnabledChannels: []*string{
					to.Ptr("facebook")},
				Endpoint:        to.Ptr("http://mybot.coffee"),
				EndpointVersion: to.Ptr("version"),
				IconURL:         to.Ptr("http://myicon"),
				IsCmekEnabled:   to.Ptr(true),
				LuisAppIDs: []*string{
					to.Ptr("luisappid1"),
					to.Ptr("luisappid2")},
				MsaAppID:                    to.Ptr("msaappid"),
				MsaAppMSIResourceID:         to.Ptr("/subscriptions/foo/resourcegroups/bar/providers/microsoft.managedidentity/userassignedidentities/sampleId"),
				MsaAppTenantID:              to.Ptr("msaapptenantid"),
				MsaAppType:                  to.Ptr(armbotservice.MsaAppTypeUserAssignedMSI),
				PublicNetworkAccess:         to.Ptr(armbotservice.PublicNetworkAccessEnabled),
				SchemaTransformationVersion: to.Ptr("1.0"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Bot) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Bot)
			t.Fatalf("Mock response is not equal to example response for example specification/botservice/resource-manager/Microsoft.BotService/preview/2021-05-01-preview/examples/CreateBot.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBots_Update(t *testing.T) {
	// From example specification/botservice/resource-manager/Microsoft.BotService/preview/2021-05-01-preview/examples/UpdateBot.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update Bot"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbotservice.NewBotsClient("subscription-id", cred, &options)
	res, err := client.Update(ctx,
		"OneResourceGroupName",
		"samplebotname",
		armbotservice.Bot{
			Etag:     to.Ptr("etag1"),
			Kind:     to.Ptr(armbotservice.KindSdk),
			Location: to.Ptr("West US"),
			SKU: &armbotservice.SKU{
				Name: to.Ptr(armbotservice.SKUNameS1),
			},
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
			Properties: &armbotservice.BotProperties{
				Description:                       to.Ptr("The description of the bot"),
				CmekKeyVaultURL:                   to.Ptr("https://myCmekKey"),
				DeveloperAppInsightKey:            to.Ptr("appinsightskey"),
				DeveloperAppInsightsAPIKey:        to.Ptr("appinsightsapikey"),
				DeveloperAppInsightsApplicationID: to.Ptr("appinsightsappid"),
				DisableLocalAuth:                  to.Ptr(true),
				DisplayName:                       to.Ptr("The Name of the bot"),
				Endpoint:                          to.Ptr("http://mybot.coffee"),
				IconURL:                           to.Ptr("http://myicon"),
				IsCmekEnabled:                     to.Ptr(true),
				LuisAppIDs: []*string{
					to.Ptr("luisappid1"),
					to.Ptr("luisappid2")},
				LuisKey:                     to.Ptr("luiskey"),
				MsaAppID:                    to.Ptr("msaappid"),
				MsaAppMSIResourceID:         to.Ptr("/subscriptions/foo/resourcegroups/bar/providers/microsoft.managedidentity/userassignedidentities/sampleId"),
				MsaAppTenantID:              to.Ptr("msaapptenantid"),
				MsaAppType:                  to.Ptr(armbotservice.MsaAppTypeUserAssignedMSI),
				PublicNetworkAccess:         to.Ptr(armbotservice.PublicNetworkAccessEnabled),
				SchemaTransformationVersion: to.Ptr("1.0"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/botservice/resource-manager/Microsoft.BotService/preview/2021-05-01-preview/examples/UpdateBot.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbotservice.Bot{
			Name:     to.Ptr("samplebotname"),
			Type:     to.Ptr("Microsoft.BotService/botServices"),
			Etag:     to.Ptr("etag1"),
			ID:       to.Ptr("/subscriptions/subscription-id/resourceGroups/OneResourceGroupName/providers/Microsoft.BotService/botServices/samplebotname"),
			Kind:     to.Ptr(armbotservice.KindSdk),
			Location: to.Ptr("West US"),
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
			Properties: &armbotservice.BotProperties{
				Description:     to.Ptr("The description of the bot"),
				CmekKeyVaultURL: to.Ptr("https://myCmekKey"),
				ConfiguredChannels: []*string{
					to.Ptr("facebook"),
					to.Ptr("groupme")},
				DeveloperAppInsightKey:            to.Ptr("appinsightskey"),
				DeveloperAppInsightsApplicationID: to.Ptr("appinsightsappid"),
				DisableLocalAuth:                  to.Ptr(true),
				DisplayName:                       to.Ptr("The Name of the bot"),
				EnabledChannels: []*string{
					to.Ptr("facebook")},
				Endpoint:        to.Ptr("http://mybot.coffee"),
				EndpointVersion: to.Ptr("version"),
				IconURL:         to.Ptr("http://myicon"),
				IsCmekEnabled:   to.Ptr(true),
				LuisAppIDs: []*string{
					to.Ptr("luisappid1"),
					to.Ptr("luisappid2")},
				MsaAppID:                    to.Ptr("msaappid"),
				MsaAppMSIResourceID:         to.Ptr("/subscriptions/foo/resourcegroups/bar/providers/microsoft.managedidentity/userassignedidentities/sampleId"),
				MsaAppTenantID:              to.Ptr("msaapptenantid"),
				MsaAppType:                  to.Ptr(armbotservice.MsaAppTypeUserAssignedMSI),
				PublicNetworkAccess:         to.Ptr(armbotservice.PublicNetworkAccessEnabled),
				SchemaTransformationVersion: to.Ptr("1.0"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Bot) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Bot)
			t.Fatalf("Mock response is not equal to example response for example specification/botservice/resource-manager/Microsoft.BotService/preview/2021-05-01-preview/examples/UpdateBot.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBots_Delete(t *testing.T) {
	// From example specification/botservice/resource-manager/Microsoft.BotService/preview/2021-05-01-preview/examples/DeleteBot.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete Bot"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbotservice.NewBotsClient("subscription-id", cred, &options)
	_, err := client.Delete(ctx,
		"OneResourceGroupName",
		"samplebotname",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/botservice/resource-manager/Microsoft.BotService/preview/2021-05-01-preview/examples/DeleteBot.json: %v", err)
	}
}

func TestBots_Get(t *testing.T) {
	// From example specification/botservice/resource-manager/Microsoft.BotService/preview/2021-05-01-preview/examples/GetBot.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Bot"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbotservice.NewBotsClient("subscription-id", cred, &options)
	res, err := client.Get(ctx,
		"OneResourceGroupName",
		"samplebotname",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/botservice/resource-manager/Microsoft.BotService/preview/2021-05-01-preview/examples/GetBot.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbotservice.Bot{
			Name:     to.Ptr("samplebotname"),
			Type:     to.Ptr("Microsoft.BotService/botServices"),
			Etag:     to.Ptr("etag1"),
			ID:       to.Ptr("/subscriptions/subscription-id/resourceGroups/OneResourceGroupName/providers/Microsoft.BotService/botServices/samplebotname"),
			Kind:     to.Ptr(armbotservice.KindSdk),
			Location: to.Ptr("West US"),
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
			Properties: &armbotservice.BotProperties{
				Description:     to.Ptr("The description of the bot"),
				CmekKeyVaultURL: to.Ptr("https://myCmekKey"),
				ConfiguredChannels: []*string{
					to.Ptr("facebook"),
					to.Ptr("groupme")},
				DeveloperAppInsightKey:            to.Ptr("appinsightskey"),
				DeveloperAppInsightsApplicationID: to.Ptr("appinsightsappid"),
				DisableLocalAuth:                  to.Ptr(true),
				DisplayName:                       to.Ptr("The Name of the bot"),
				EnabledChannels: []*string{
					to.Ptr("facebook")},
				Endpoint:        to.Ptr("http://mybot.coffee"),
				EndpointVersion: to.Ptr("version"),
				IconURL:         to.Ptr("http://myicon"),
				IsCmekEnabled:   to.Ptr(true),
				LuisAppIDs: []*string{
					to.Ptr("luisappid1"),
					to.Ptr("luisappid2")},
				MsaAppID:            to.Ptr("msaappid"),
				MsaAppMSIResourceID: to.Ptr("/subscriptions/foo/resourcegroups/bar/providers/microsoft.managedidentity/userassignedidentities/sampleId"),
				MsaAppTenantID:      to.Ptr("msaapptenantid"),
				MsaAppType:          to.Ptr(armbotservice.MsaAppTypeUserAssignedMSI),
				PrivateEndpointConnections: []*armbotservice.PrivateEndpointConnection{
					{
						ID: to.Ptr("/subscriptions/subscription-id/resourceGroups/OneResourceGroupName/providers/Microsoft.BotService/botServices/samplebotname/privateEndpointConnections/privatelink"),
						Properties: &armbotservice.PrivateEndpointConnectionProperties{
							PrivateEndpoint: &armbotservice.PrivateEndpoint{
								ID: to.Ptr("/subscriptions/subscription-id/resourceGroups/OneResourceGroupName/providers/Microsoft.Network/privateEndpoints/privatelink"),
							},
							PrivateLinkServiceConnectionState: &armbotservice.PrivateLinkServiceConnectionState{
								Description:     to.Ptr("Auto-Approved"),
								ActionsRequired: to.Ptr("None"),
								Status:          to.Ptr(armbotservice.PrivateEndpointServiceConnectionStatusApproved),
							},
							ProvisioningState: to.Ptr(armbotservice.PrivateEndpointConnectionProvisioningStateSucceeded),
						},
					}},
				PublicNetworkAccess:         to.Ptr(armbotservice.PublicNetworkAccessEnabled),
				SchemaTransformationVersion: to.Ptr("1.0"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Bot) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Bot)
			t.Fatalf("Mock response is not equal to example response for example specification/botservice/resource-manager/Microsoft.BotService/preview/2021-05-01-preview/examples/GetBot.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBots_ListByResourceGroup(t *testing.T) {
	// From example specification/botservice/resource-manager/Microsoft.BotService/preview/2021-05-01-preview/examples/ListBotsByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Bots by Resource Group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbotservice.NewBotsClient("subscription-id", cred, &options)
	pager := client.ListByResourceGroup("OneResourceGroupName",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/botservice/resource-manager/Microsoft.BotService/preview/2021-05-01-preview/examples/ListBotsByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armbotservice.BotResponseList{
			Value: []*armbotservice.Bot{
				{
					Name:     to.Ptr("samplebotname"),
					Type:     to.Ptr("Microsoft.BotService/botServices"),
					Etag:     to.Ptr("etag1"),
					ID:       to.Ptr("/subscriptions/subscription-id/resourceGroups/OneResourceGroupName/providers/Microsoft.BotService/botServices"),
					Kind:     to.Ptr(armbotservice.KindSdk),
					Location: to.Ptr("West US"),
					Tags: map[string]*string{
						"tag1": to.Ptr("value1"),
						"tag2": to.Ptr("value2"),
					},
					Properties: &armbotservice.BotProperties{
						Description:     to.Ptr("The description of the bot"),
						CmekKeyVaultURL: to.Ptr("https://myCmekKey"),
						ConfiguredChannels: []*string{
							to.Ptr("facebook"),
							to.Ptr("groupme")},
						DeveloperAppInsightKey:            to.Ptr("appinsightskey"),
						DeveloperAppInsightsApplicationID: to.Ptr("appinsightsappid"),
						DisableLocalAuth:                  to.Ptr(true),
						DisplayName:                       to.Ptr("The Name of the bot"),
						EnabledChannels: []*string{
							to.Ptr("facebook")},
						Endpoint:        to.Ptr("http://mybot.coffee"),
						EndpointVersion: to.Ptr("version"),
						IconURL:         to.Ptr("http://myicon"),
						IsCmekEnabled:   to.Ptr(true),
						LuisAppIDs: []*string{
							to.Ptr("luisappid1"),
							to.Ptr("luisappid2")},
						MsaAppID:                    to.Ptr("msaappid"),
						MsaAppMSIResourceID:         to.Ptr("/subscriptions/foo/resourcegroups/bar/providers/microsoft.managedidentity/userassignedidentities/sampleId"),
						MsaAppTenantID:              to.Ptr("msaapptenantid"),
						MsaAppType:                  to.Ptr(armbotservice.MsaAppTypeUserAssignedMSI),
						PublicNetworkAccess:         to.Ptr(armbotservice.PublicNetworkAccessEnabled),
						SchemaTransformationVersion: to.Ptr("1.0"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.BotResponseList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.BotResponseList)
			t.Fatalf("Mock response is not equal to example response for example specification/botservice/resource-manager/Microsoft.BotService/preview/2021-05-01-preview/examples/ListBotsByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBots_List(t *testing.T) {
	// From example specification/botservice/resource-manager/Microsoft.BotService/preview/2021-05-01-preview/examples/ListBotsBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Bots by Subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbotservice.NewBotsClient("subscription-id", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/botservice/resource-manager/Microsoft.BotService/preview/2021-05-01-preview/examples/ListBotsBySubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armbotservice.BotResponseList{
			Value: []*armbotservice.Bot{
				{
					Name:     to.Ptr("samplebotname"),
					Type:     to.Ptr("Microsoft.BotService/botServices"),
					Etag:     to.Ptr("etag1"),
					ID:       to.Ptr("/subscriptions/subscription-id/providers/Microsoft.BotService/botServices"),
					Kind:     to.Ptr(armbotservice.KindSdk),
					Location: to.Ptr("West US"),
					Tags: map[string]*string{
						"tag1": to.Ptr("value1"),
						"tag2": to.Ptr("value2"),
					},
					Properties: &armbotservice.BotProperties{
						Description:     to.Ptr("The description of the bot"),
						CmekKeyVaultURL: to.Ptr("https://myCmekKey"),
						ConfiguredChannels: []*string{
							to.Ptr("facebook"),
							to.Ptr("groupme")},
						DeveloperAppInsightKey:            to.Ptr("appinsightskey"),
						DeveloperAppInsightsApplicationID: to.Ptr("appinsightsappid"),
						DisableLocalAuth:                  to.Ptr(true),
						DisplayName:                       to.Ptr("The Name of the bot"),
						EnabledChannels: []*string{
							to.Ptr("facebook")},
						Endpoint:        to.Ptr("http://mybot.coffee"),
						EndpointVersion: to.Ptr("version"),
						IconURL:         to.Ptr("http://myicon"),
						IsCmekEnabled:   to.Ptr(true),
						LuisAppIDs: []*string{
							to.Ptr("luisappid1"),
							to.Ptr("luisappid2")},
						MsaAppID:                    to.Ptr("msaappid"),
						MsaAppMSIResourceID:         to.Ptr("/subscriptions/foo/resourcegroups/bar/providers/microsoft.managedidentity/userassignedidentities/sampleId"),
						MsaAppTenantID:              to.Ptr("msaapptenantid"),
						MsaAppType:                  to.Ptr(armbotservice.MsaAppTypeUserAssignedMSI),
						PublicNetworkAccess:         to.Ptr(armbotservice.PublicNetworkAccessEnabled),
						SchemaTransformationVersion: to.Ptr("1.0"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.BotResponseList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.BotResponseList)
			t.Fatalf("Mock response is not equal to example response for example specification/botservice/resource-manager/Microsoft.BotService/preview/2021-05-01-preview/examples/ListBotsBySubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBots_GetCheckNameAvailability(t *testing.T) {
	// From example specification/botservice/resource-manager/Microsoft.BotService/preview/2021-05-01-preview/examples/CheckNameAvailability.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"check Name Availability"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbotservice.NewBotsClient("<subscription-id>", cred, &options)
	res, err := client.GetCheckNameAvailability(ctx,
		armbotservice.CheckNameAvailabilityRequestBody{
			Name: to.Ptr("testbotname"),
			Type: to.Ptr("string"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/botservice/resource-manager/Microsoft.BotService/preview/2021-05-01-preview/examples/CheckNameAvailability.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbotservice.CheckNameAvailabilityResponseBody{
			Message: to.Ptr("custom message from server"),
			Valid:   to.Ptr(true),
		}
		if !reflect.DeepEqual(exampleRes, res.CheckNameAvailabilityResponseBody) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CheckNameAvailabilityResponseBody)
			t.Fatalf("Mock response is not equal to example response for example specification/botservice/resource-manager/Microsoft.BotService/preview/2021-05-01-preview/examples/CheckNameAvailability.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestChannels_Create(t *testing.T) {
	// From example specification/botservice/resource-manager/Microsoft.BotService/preview/2021-05-01-preview/examples/PutAlexaChannel.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create Alexa Bot"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbotservice.NewChannelsClient("subscription-id", cred, &options)
	res, err := client.Create(ctx,
		"OneResourceGroupName",
		"samplebotname",
		armbotservice.ChannelNameAlexaChannel,
		armbotservice.BotChannel{
			Location: to.Ptr("global"),
			Properties: &armbotservice.AlexaChannel{
				ChannelName: to.Ptr("AlexaChannel"),
				Properties: &armbotservice.AlexaChannelProperties{
					AlexaSkillID: to.Ptr("XAlexaSkillIdX"),
					IsEnabled:    to.Ptr(true),
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/botservice/resource-manager/Microsoft.BotService/preview/2021-05-01-preview/examples/PutAlexaChannel.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbotservice.BotChannel{
			Location: to.Ptr("global"),
			Properties: &armbotservice.AlexaChannel{
				ChannelName: to.Ptr("AlexaChannel"),
				Properties: &armbotservice.AlexaChannelProperties{
					AlexaSkillID:       to.Ptr("alexa skill id"),
					IsEnabled:          to.Ptr(true),
					ServiceEndpointURI: to.Ptr("https://domain/XUrlFragmentX/botId"),
					URLFragment:        to.Ptr("XUrlFragmentX"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.BotChannel) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.BotChannel)
			t.Fatalf("Mock response is not equal to example response for example specification/botservice/resource-manager/Microsoft.BotService/preview/2021-05-01-preview/examples/PutAlexaChannel.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/botservice/resource-manager/Microsoft.BotService/preview/2021-05-01-preview/examples/PutChannel.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create Bot"},
	})
	client = armbotservice.NewChannelsClient("subscription-id", cred, &options)
	res, err = client.Create(ctx,
		"OneResourceGroupName",
		"samplebotname",
		armbotservice.ChannelNameEmailChannel,
		armbotservice.BotChannel{
			Location: to.Ptr("global"),
			Properties: &armbotservice.EmailChannel{
				ChannelName: to.Ptr("EmailChannel"),
				Properties: &armbotservice.EmailChannelProperties{
					EmailAddress: to.Ptr("a@b.com"),
					IsEnabled:    to.Ptr(true),
					Password:     to.Ptr("pwd"),
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/botservice/resource-manager/Microsoft.BotService/preview/2021-05-01-preview/examples/PutChannel.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbotservice.BotChannel{
			Location: to.Ptr("global"),
			Properties: &armbotservice.EmailChannel{
				ChannelName: to.Ptr("EmailChannel"),
				Properties: &armbotservice.EmailChannelProperties{
					EmailAddress: to.Ptr("a@b.com"),
					IsEnabled:    to.Ptr(true),
					Password:     to.Ptr("pwd"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.BotChannel) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.BotChannel)
			t.Fatalf("Mock response is not equal to example response for example specification/botservice/resource-manager/Microsoft.BotService/preview/2021-05-01-preview/examples/PutChannel.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/botservice/resource-manager/Microsoft.BotService/preview/2021-05-01-preview/examples/PutDirectLineSpeechChannel.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create DirectLine Speech Bot"},
	})
	client = armbotservice.NewChannelsClient("subscription-id", cred, &options)
	res, err = client.Create(ctx,
		"OneResourceGroupName",
		"samplebotname",
		armbotservice.ChannelNameDirectLineSpeechChannel,
		armbotservice.BotChannel{
			Location: to.Ptr("global"),
			Properties: &armbotservice.DirectLineSpeechChannel{
				ChannelName: to.Ptr("DirectLineSpeechChannel"),
				Properties: &armbotservice.DirectLineSpeechChannelProperties{
					CognitiveServiceRegion:          to.Ptr("XcognitiveServiceRegionX"),
					CognitiveServiceSubscriptionKey: to.Ptr("XcognitiveServiceSubscriptionKeyX"),
					IsEnabled:                       to.Ptr(true),
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/botservice/resource-manager/Microsoft.BotService/preview/2021-05-01-preview/examples/PutDirectLineSpeechChannel.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbotservice.BotChannel{
			Location: to.Ptr("global"),
			Properties: &armbotservice.DirectLineSpeechChannel{
				ChannelName: to.Ptr("DirectLineSpeechChannel"),
				Properties: &armbotservice.DirectLineSpeechChannelProperties{
					CognitiveServiceRegion: to.Ptr("XcognitiveServiceRegionX"),
					IsEnabled:              to.Ptr(true),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.BotChannel) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.BotChannel)
			t.Fatalf("Mock response is not equal to example response for example specification/botservice/resource-manager/Microsoft.BotService/preview/2021-05-01-preview/examples/PutDirectLineSpeechChannel.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/botservice/resource-manager/Microsoft.BotService/preview/2021-05-01-preview/examples/PutLineChannel.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create Line Bot"},
	})
	client = armbotservice.NewChannelsClient("subscription-id", cred, &options)
	res, err = client.Create(ctx,
		"OneResourceGroupName",
		"samplebotname",
		armbotservice.ChannelNameLineChannel,
		armbotservice.BotChannel{
			Location: to.Ptr("global"),
			Properties: &armbotservice.LineChannel{
				ChannelName: to.Ptr("LineChannel"),
				Properties: &armbotservice.LineChannelProperties{
					LineRegistrations: []*armbotservice.LineRegistration{
						{
							ChannelAccessToken: to.Ptr("channelAccessToken"),
							ChannelSecret:      to.Ptr("channelSecret"),
						}},
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/botservice/resource-manager/Microsoft.BotService/preview/2021-05-01-preview/examples/PutLineChannel.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbotservice.BotChannel{
			Location: to.Ptr("global"),
			Properties: &armbotservice.LineChannel{
				ChannelName: to.Ptr("LineChannel"),
				Properties: &armbotservice.LineChannelProperties{
					CallbackURL: to.Ptr("http://callbackUrl"),
					IsValidated: to.Ptr(true),
					LineRegistrations: []*armbotservice.LineRegistration{
						{
							GeneratedID: to.Ptr("id"),
						}},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.BotChannel) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.BotChannel)
			t.Fatalf("Mock response is not equal to example response for example specification/botservice/resource-manager/Microsoft.BotService/preview/2021-05-01-preview/examples/PutLineChannel.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestChannels_Update(t *testing.T) {
	// From example specification/botservice/resource-manager/Microsoft.BotService/preview/2021-05-01-preview/examples/UpdateAlexaChannel.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update Alexa"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbotservice.NewChannelsClient("subscription-id", cred, &options)
	res, err := client.Update(ctx,
		"OneResourceGroupName",
		"samplebotname",
		armbotservice.ChannelNameAlexaChannel,
		armbotservice.BotChannel{
			Location: to.Ptr("global"),
			Properties: &armbotservice.AlexaChannel{
				ChannelName: to.Ptr("AlexaChannel"),
				Properties: &armbotservice.AlexaChannelProperties{
					AlexaSkillID: to.Ptr("XAlexaSkillIdX"),
					IsEnabled:    to.Ptr(true),
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/botservice/resource-manager/Microsoft.BotService/preview/2021-05-01-preview/examples/UpdateAlexaChannel.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbotservice.BotChannel{
			Location: to.Ptr("global"),
			Properties: &armbotservice.AlexaChannel{
				ChannelName: to.Ptr("AlexaChannel"),
				Properties: &armbotservice.AlexaChannelProperties{
					AlexaSkillID:       to.Ptr("XAlexaSkillIdX"),
					IsEnabled:          to.Ptr(true),
					ServiceEndpointURI: to.Ptr("https://domain/XUrlFragmentX/botId"),
					URLFragment:        to.Ptr("XUrlFragmentX"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.BotChannel) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.BotChannel)
			t.Fatalf("Mock response is not equal to example response for example specification/botservice/resource-manager/Microsoft.BotService/preview/2021-05-01-preview/examples/UpdateAlexaChannel.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/botservice/resource-manager/Microsoft.BotService/preview/2021-05-01-preview/examples/UpdateChannel.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update Bot"},
	})
	client = armbotservice.NewChannelsClient("subscription-id", cred, &options)
	res, err = client.Update(ctx,
		"OneResourceGroupName",
		"samplebotname",
		armbotservice.ChannelNameEmailChannel,
		armbotservice.BotChannel{
			Location: to.Ptr("global"),
			Properties: &armbotservice.EmailChannel{
				ChannelName: to.Ptr("EmailChannel"),
				Properties: &armbotservice.EmailChannelProperties{
					EmailAddress: to.Ptr("a@b.com"),
					IsEnabled:    to.Ptr(true),
					Password:     to.Ptr("pwd"),
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/botservice/resource-manager/Microsoft.BotService/preview/2021-05-01-preview/examples/UpdateChannel.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbotservice.BotChannel{
			Location: to.Ptr("global"),
			Properties: &armbotservice.EmailChannel{
				ChannelName: to.Ptr("EmailChannel"),
				Properties: &armbotservice.EmailChannelProperties{
					EmailAddress: to.Ptr("a@b.com"),
					IsEnabled:    to.Ptr(true),
					Password:     to.Ptr("pwd"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.BotChannel) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.BotChannel)
			t.Fatalf("Mock response is not equal to example response for example specification/botservice/resource-manager/Microsoft.BotService/preview/2021-05-01-preview/examples/UpdateChannel.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/botservice/resource-manager/Microsoft.BotService/preview/2021-05-01-preview/examples/UpdateDirectLineSpeechChannel.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update DirectLine Speech"},
	})
	client = armbotservice.NewChannelsClient("subscription-id", cred, &options)
	res, err = client.Update(ctx,
		"OneResourceGroupName",
		"samplebotname",
		armbotservice.ChannelNameDirectLineSpeechChannel,
		armbotservice.BotChannel{
			Location: to.Ptr("global"),
			Properties: &armbotservice.DirectLineSpeechChannel{
				ChannelName: to.Ptr("DirectLineSpeechChannel"),
				Properties: &armbotservice.DirectLineSpeechChannelProperties{
					CognitiveServiceRegion:          to.Ptr("XcognitiveServiceRegionX"),
					CognitiveServiceSubscriptionKey: to.Ptr("XcognitiveServiceSubscriptionKeyX"),
					IsEnabled:                       to.Ptr(true),
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/botservice/resource-manager/Microsoft.BotService/preview/2021-05-01-preview/examples/UpdateDirectLineSpeechChannel.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbotservice.BotChannel{
			Location: to.Ptr("global"),
			Properties: &armbotservice.DirectLineSpeechChannel{
				ChannelName: to.Ptr("DirectLineSpeechChannel"),
				Properties: &armbotservice.DirectLineSpeechChannelProperties{
					CognitiveServiceRegion: to.Ptr("XcognitiveServiceRegionX"),
					IsEnabled:              to.Ptr(true),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.BotChannel) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.BotChannel)
			t.Fatalf("Mock response is not equal to example response for example specification/botservice/resource-manager/Microsoft.BotService/preview/2021-05-01-preview/examples/UpdateDirectLineSpeechChannel.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/botservice/resource-manager/Microsoft.BotService/preview/2021-05-01-preview/examples/UpdateLineChannel.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update Line"},
	})
	client = armbotservice.NewChannelsClient("subscription-id", cred, &options)
	res, err = client.Update(ctx,
		"OneResourceGroupName",
		"samplebotname",
		armbotservice.ChannelNameLineChannel,
		armbotservice.BotChannel{
			Location: to.Ptr("global"),
			Properties: &armbotservice.LineChannel{
				ChannelName: to.Ptr("LineChannel"),
				Properties: &armbotservice.LineChannelProperties{
					LineRegistrations: []*armbotservice.LineRegistration{
						{
							ChannelAccessToken: to.Ptr("channelAccessToken"),
							ChannelSecret:      to.Ptr("channelSecret"),
						}},
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/botservice/resource-manager/Microsoft.BotService/preview/2021-05-01-preview/examples/UpdateLineChannel.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbotservice.BotChannel{
			Location: to.Ptr("global"),
			Properties: &armbotservice.LineChannel{
				ChannelName: to.Ptr("LineChannel"),
				Properties: &armbotservice.LineChannelProperties{
					CallbackURL: to.Ptr("http://callbackUrl"),
					IsValidated: to.Ptr(true),
					LineRegistrations: []*armbotservice.LineRegistration{
						{
							GeneratedID: to.Ptr("id"),
						}},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.BotChannel) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.BotChannel)
			t.Fatalf("Mock response is not equal to example response for example specification/botservice/resource-manager/Microsoft.BotService/preview/2021-05-01-preview/examples/UpdateLineChannel.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestChannels_Delete(t *testing.T) {
	// From example specification/botservice/resource-manager/Microsoft.BotService/preview/2021-05-01-preview/examples/DeleteChannel.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete Bot"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbotservice.NewChannelsClient("subscription-id", cred, &options)
	_, err := client.Delete(ctx,
		"OneResourceGroupName",
		"samplebotname",
		"EmailChannel",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/botservice/resource-manager/Microsoft.BotService/preview/2021-05-01-preview/examples/DeleteChannel.json: %v", err)
	}

	// From example specification/botservice/resource-manager/Microsoft.BotService/preview/2021-05-01-preview/examples/DeleteDirectLineSpeechChannel.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete DirectLine Speech Bot"},
	})
	client = armbotservice.NewChannelsClient("subscription-id", cred, &options)
	_, err = client.Delete(ctx,
		"OneResourceGroupName",
		"samplebotname",
		"DirectLineSpeechChannel",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/botservice/resource-manager/Microsoft.BotService/preview/2021-05-01-preview/examples/DeleteDirectLineSpeechChannel.json: %v", err)
	}
}

func TestChannels_Get(t *testing.T) {
	// From example specification/botservice/resource-manager/Microsoft.BotService/preview/2021-05-01-preview/examples/GetAlexaChannel.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Alexa Bot"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbotservice.NewChannelsClient("subscription-id", cred, &options)
	res, err := client.Get(ctx,
		"OneResourceGroupName",
		"samplebotname",
		"AlexaChannel",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/botservice/resource-manager/Microsoft.BotService/preview/2021-05-01-preview/examples/GetAlexaChannel.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbotservice.BotChannel{
			Location: to.Ptr("global"),
			Properties: &armbotservice.AlexaChannel{
				ChannelName: to.Ptr("AlexaChannel"),
				Properties: &armbotservice.AlexaChannelProperties{
					AlexaSkillID:       to.Ptr("alexa skill id"),
					IsEnabled:          to.Ptr(true),
					ServiceEndpointURI: to.Ptr("https://domain/XUrlFragmentX/botId"),
					URLFragment:        to.Ptr("XUrlFragmentX"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.BotChannel) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.BotChannel)
			t.Fatalf("Mock response is not equal to example response for example specification/botservice/resource-manager/Microsoft.BotService/preview/2021-05-01-preview/examples/GetAlexaChannel.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/botservice/resource-manager/Microsoft.BotService/preview/2021-05-01-preview/examples/GetChannel.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Bot"},
	})
	client = armbotservice.NewChannelsClient("subscription-id", cred, &options)
	res, err = client.Get(ctx,
		"OneResourceGroupName",
		"samplebotname",
		"EmailChannel",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/botservice/resource-manager/Microsoft.BotService/preview/2021-05-01-preview/examples/GetChannel.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbotservice.BotChannel{
			Location: to.Ptr("global"),
			Properties: &armbotservice.EmailChannel{
				ChannelName: to.Ptr("EmailChannel"),
				Properties: &armbotservice.EmailChannelProperties{
					EmailAddress: to.Ptr("a@b.com"),
					IsEnabled:    to.Ptr(true),
					Password:     to.Ptr("pwd"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.BotChannel) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.BotChannel)
			t.Fatalf("Mock response is not equal to example response for example specification/botservice/resource-manager/Microsoft.BotService/preview/2021-05-01-preview/examples/GetChannel.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/botservice/resource-manager/Microsoft.BotService/preview/2021-05-01-preview/examples/GetDirectLineSpeechChannel.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get DirectLine Speech Bot"},
	})
	client = armbotservice.NewChannelsClient("subscription-id", cred, &options)
	res, err = client.Get(ctx,
		"OneResourceGroupName",
		"samplebotname",
		"DirectLineSpeechChannel",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/botservice/resource-manager/Microsoft.BotService/preview/2021-05-01-preview/examples/GetDirectLineSpeechChannel.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbotservice.BotChannel{
			Location: to.Ptr("global"),
			Properties: &armbotservice.DirectLineSpeechChannel{
				ChannelName: to.Ptr("DirectLineSpeechChannel"),
				Properties: &armbotservice.DirectLineSpeechChannelProperties{
					CognitiveServiceRegion:       to.Ptr("Cognitive service region"),
					CustomSpeechModelID:          to.Ptr("Custom speech model ID"),
					CustomVoiceDeploymentID:      to.Ptr("Custom voice deployment ID"),
					IsDefaultBotForCogSvcAccount: to.Ptr(true),
					IsEnabled:                    to.Ptr(true),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.BotChannel) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.BotChannel)
			t.Fatalf("Mock response is not equal to example response for example specification/botservice/resource-manager/Microsoft.BotService/preview/2021-05-01-preview/examples/GetDirectLineSpeechChannel.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/botservice/resource-manager/Microsoft.BotService/preview/2021-05-01-preview/examples/GetLineChannel.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Line Bot"},
	})
	client = armbotservice.NewChannelsClient("subscription-id", cred, &options)
	res, err = client.Get(ctx,
		"OneResourceGroupName",
		"samplebotname",
		"LineChannel",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/botservice/resource-manager/Microsoft.BotService/preview/2021-05-01-preview/examples/GetLineChannel.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbotservice.BotChannel{
			Location: to.Ptr("global"),
			Properties: &armbotservice.LineChannel{
				ChannelName: to.Ptr("LineChannel"),
				Properties: &armbotservice.LineChannelProperties{
					CallbackURL: to.Ptr("http://callbackUrl"),
					IsValidated: to.Ptr(true),
					LineRegistrations: []*armbotservice.LineRegistration{
						{
							GeneratedID: to.Ptr("id"),
						}},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.BotChannel) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.BotChannel)
			t.Fatalf("Mock response is not equal to example response for example specification/botservice/resource-manager/Microsoft.BotService/preview/2021-05-01-preview/examples/GetLineChannel.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestChannels_ListWithKeys(t *testing.T) {
	// From example specification/botservice/resource-manager/Microsoft.BotService/preview/2021-05-01-preview/examples/ListChannel.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Channel"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbotservice.NewChannelsClient("subscription-id", cred, &options)
	res, err := client.ListWithKeys(ctx,
		"OneResourceGroupName",
		"samplebotname",
		armbotservice.ChannelNameEmailChannel,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/botservice/resource-manager/Microsoft.BotService/preview/2021-05-01-preview/examples/ListChannel.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbotservice.ListChannelWithKeysResponse{
			Location: to.Ptr("global"),
			Properties: &armbotservice.EmailChannel{
				ChannelName: to.Ptr("EmailChannel"),
				Properties: &armbotservice.EmailChannelProperties{
					EmailAddress: to.Ptr("a@b.com"),
					IsEnabled:    to.Ptr(true),
					Password:     to.Ptr("pwd"),
				},
			},
			Resource: &armbotservice.DirectLineChannel{
				ChannelName: to.Ptr("DirectLineChannel"),
				Etag:        to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
				Location:    to.Ptr("aaaaaa"),
				Properties: &armbotservice.DirectLineChannelProperties{
					Sites: []*armbotservice.DirectLineSite{
						{
							IsBlockUserUploadEnabled: to.Ptr(false),
							IsEnabled:                to.Ptr(true),
							IsSecureSiteEnabled:      to.Ptr(false),
							IsV1Enabled:              to.Ptr(true),
							IsV3Enabled:              to.Ptr(true),
							Key:                      to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
							Key2:                     to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
							SiteID:                   to.Ptr("aaaaaaaaaaa"),
							SiteName:                 to.Ptr("aaaaaaaaaaaa"),
							TrustedOrigins: []*string{
								to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa")},
						}},
				},
			},
			Setting: &armbotservice.ChannelSettings{
				BotIconURL:         to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
				BotID:              to.Ptr("aaaaaaaaaaaaaaaaaaaa"),
				ChannelDisplayName: to.Ptr("aaaaaaaaaaa"),
				ChannelID:          to.Ptr("aaaaaaaaaa"),
				DisableLocalAuth:   to.Ptr(false),
				ExtensionKey1:      to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
				ExtensionKey2:      to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
				IsEnabled:          to.Ptr(true),
				Sites: []*armbotservice.Site{
					{
						IsBlockUserUploadEnabled: to.Ptr(false),
						IsSecureSiteEnabled:      to.Ptr(false),
						IsV1Enabled:              to.Ptr(true),
						IsV3Enabled:              to.Ptr(true),
						TrustedOrigins: []*string{
							to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa")},
						IsEnabled:               to.Ptr(true),
						IsWebchatPreviewEnabled: to.Ptr(false),
						Key:                     to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
						Key2:                    to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
						SiteID:                  to.Ptr("aaaaaaaaaaa"),
						SiteName:                to.Ptr("aaaaaaaaaaaa"),
						ETag:                    to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
						IsTokenEnabled:          to.Ptr(false),
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ListChannelWithKeysResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ListChannelWithKeysResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/botservice/resource-manager/Microsoft.BotService/preview/2021-05-01-preview/examples/ListChannel.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestChannels_ListByResourceGroup(t *testing.T) {
	// From example specification/botservice/resource-manager/Microsoft.BotService/preview/2021-05-01-preview/examples/ListChannelsByBotService.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Bots by Resource Group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbotservice.NewChannelsClient("subscription-id", cred, &options)
	pager := client.ListByResourceGroup("OneResourceGroupName",
		"samplebotname",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/botservice/resource-manager/Microsoft.BotService/preview/2021-05-01-preview/examples/ListChannelsByBotService.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armbotservice.ChannelResponseList{
			Value: []*armbotservice.BotChannel{
				{
					Location: to.Ptr("global"),
					Properties: &armbotservice.EmailChannel{
						ChannelName: to.Ptr("EmailChannel"),
						Properties: &armbotservice.EmailChannelProperties{
							EmailAddress: to.Ptr("a@b.com"),
							IsEnabled:    to.Ptr(true),
							Password:     to.Ptr("pwd"),
						},
					},
				},
				{
					Location: to.Ptr("global"),
					Properties: &armbotservice.FacebookChannel{
						ChannelName: to.Ptr("FacebookChannel"),
						Properties: &armbotservice.FacebookChannelProperties{
							AppID:       to.Ptr("id"),
							CallbackURL: to.Ptr("appid"),
							IsEnabled:   to.Ptr(true),
							Pages: []*armbotservice.FacebookPage{
								{
									ID: to.Ptr("id"),
								}},
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ChannelResponseList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ChannelResponseList)
			t.Fatalf("Mock response is not equal to example response for example specification/botservice/resource-manager/Microsoft.BotService/preview/2021-05-01-preview/examples/ListChannelsByBotService.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDirectLine_RegenerateKeys(t *testing.T) {
	// From example specification/botservice/resource-manager/Microsoft.BotService/preview/2021-05-01-preview/examples/DirectlineRegenerateKeys.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Regenerate Keys for DirectLine Channel Site"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbotservice.NewDirectLineClient("subscription-id", cred, &options)
	res, err := client.RegenerateKeys(ctx,
		"OneResourceGroupName",
		"samplebotname",
		armbotservice.RegenerateKeysChannelNameDirectLineChannel,
		armbotservice.SiteInfo{
			Key:      to.Ptr(armbotservice.KeyKey1),
			SiteName: to.Ptr("testSiteName"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/botservice/resource-manager/Microsoft.BotService/preview/2021-05-01-preview/examples/DirectlineRegenerateKeys.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbotservice.BotChannel{
			Location: to.Ptr("global"),
			Properties: &armbotservice.DirectLineChannel{
				ChannelName: to.Ptr("DirectLineChannel"),
				Properties: &armbotservice.DirectLineChannelProperties{
					Sites: []*armbotservice.DirectLineSite{
						{
							IsEnabled:   to.Ptr(true),
							IsV1Enabled: to.Ptr(true),
							IsV3Enabled: to.Ptr(true),
							Key:         to.Ptr("key1"),
							Key2:        to.Ptr("key2"),
							SiteID:      to.Ptr("abcd"),
							SiteName:    to.Ptr("Default Site"),
						}},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.BotChannel) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.BotChannel)
			t.Fatalf("Mock response is not equal to example response for example specification/botservice/resource-manager/Microsoft.BotService/preview/2021-05-01-preview/examples/DirectlineRegenerateKeys.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/botservice/resource-manager/Microsoft.BotService/preview/2021-05-01-preview/examples/WebChatRegenerateKeys.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Regenerate Keys for WebChat Channel Site"},
	})
	client = armbotservice.NewDirectLineClient("subscription-id", cred, &options)
	res, err = client.RegenerateKeys(ctx,
		"OneResourceGroupName",
		"samplebotname",
		armbotservice.RegenerateKeysChannelNameWebChatChannel,
		armbotservice.SiteInfo{
			Key:      to.Ptr(armbotservice.KeyKey1),
			SiteName: to.Ptr("testSiteName"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/botservice/resource-manager/Microsoft.BotService/preview/2021-05-01-preview/examples/WebChatRegenerateKeys.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbotservice.BotChannel{
			Location: to.Ptr("global"),
			Properties: &armbotservice.WebChatChannel{
				ChannelName: to.Ptr("WebChatChannel"),
				Properties: &armbotservice.WebChatChannelProperties{
					Sites: []*armbotservice.WebChatSite{
						{
							IsEnabled:               to.Ptr(true),
							IsWebchatPreviewEnabled: to.Ptr(true),
							Key:                     to.Ptr("key1"),
							Key2:                    to.Ptr("key2"),
							SiteID:                  to.Ptr("abcd"),
							SiteName:                to.Ptr("Default Site"),
						}},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.BotChannel) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.BotChannel)
			t.Fatalf("Mock response is not equal to example response for example specification/botservice/resource-manager/Microsoft.BotService/preview/2021-05-01-preview/examples/WebChatRegenerateKeys.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOperations_List(t *testing.T) {
	// From example specification/botservice/resource-manager/Microsoft.BotService/preview/2021-05-01-preview/examples/GetOperations.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Operations"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbotservice.NewOperationsClient(cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/botservice/resource-manager/Microsoft.BotService/preview/2021-05-01-preview/examples/GetOperations.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armbotservice.OperationEntityListResult{
			Value: []*armbotservice.OperationEntity{
				{
					Name: to.Ptr("Microsoft.BotService/botService/read"),
					Display: &armbotservice.OperationDisplayInfo{
						Description: to.Ptr("Read Bot Service"),
						Operation:   to.Ptr("Read Bot Service"),
						Provider:    to.Ptr("Microsoft Bot Service"),
						Resource:    to.Ptr("Bot Service"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.BotService/botService/write"),
					Display: &armbotservice.OperationDisplayInfo{
						Description: to.Ptr("Writes Bot Service"),
						Operation:   to.Ptr("Write Bot Service"),
						Provider:    to.Ptr("Microsoft Bot Service"),
						Resource:    to.Ptr("Bot Service"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.BotService/botService/delete"),
					Display: &armbotservice.OperationDisplayInfo{
						Description: to.Ptr("Deletes Bot Service"),
						Operation:   to.Ptr("Delete Bot Service"),
						Provider:    to.Ptr("Microsoft Bot Service"),
						Resource:    to.Ptr("Bot Service"),
					},
					Origin: to.Ptr("user,system"),
				},
				{
					Name: to.Ptr("Microsoft.BotService/botService/botName/read"),
					Display: &armbotservice.OperationDisplayInfo{
						Description: to.Ptr("Check bot name availability"),
						Operation:   to.Ptr("Check bot name availability"),
						Provider:    to.Ptr("Microsoft Bot Service"),
						Resource:    to.Ptr("Bot Service name availability"),
					},
					Origin: to.Ptr("user,system"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OperationEntityListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OperationEntityListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/botservice/resource-manager/Microsoft.BotService/preview/2021-05-01-preview/examples/GetOperations.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBotConnection_ListServiceProviders(t *testing.T) {
	// From example specification/botservice/resource-manager/Microsoft.BotService/preview/2021-05-01-preview/examples/ListServiceProviders.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Auth Service Providers"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbotservice.NewBotConnectionClient("subscription-id", cred, &options)
	res, err := client.ListServiceProviders(ctx,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/botservice/resource-manager/Microsoft.BotService/preview/2021-05-01-preview/examples/ListServiceProviders.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbotservice.ServiceProviderResponseList{
			Value: []*armbotservice.ServiceProvider{
				{
					Properties: &armbotservice.ServiceProviderProperties{
						DevPortalURL: to.Ptr("sampleDevPortalUrl"),
						DisplayName:  to.Ptr("sample service provider display name"),
						IconURL:      to.Ptr("sampleIconUrl"),
						ID:           to.Ptr("sampleServiceProviderId"),
						Parameters: []*armbotservice.ServiceProviderParameter{
							{
								Name:        to.Ptr("sampleParameterName"),
								Type:        to.Ptr("sampleParameterType"),
								Description: to.Ptr("sampleDescription"),
								Default:     to.Ptr("sampleDefaultValue"),
								DisplayName: to.Ptr("sampleDisplayName"),
								HelpURL:     to.Ptr("sampleHelpUrl"),
							}},
						ServiceProviderName: to.Ptr("sampleServiceProvider"),
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.ServiceProviderResponseList) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ServiceProviderResponseList)
			t.Fatalf("Mock response is not equal to example response for example specification/botservice/resource-manager/Microsoft.BotService/preview/2021-05-01-preview/examples/ListServiceProviders.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBotConnection_ListWithSecrets(t *testing.T) {
	// From example specification/botservice/resource-manager/Microsoft.BotService/preview/2021-05-01-preview/examples/GetConnection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update Connection Setting"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbotservice.NewBotConnectionClient("subscription-id", cred, &options)
	res, err := client.ListWithSecrets(ctx,
		"OneResourceGroupName",
		"samplebotname",
		"sampleConnection",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/botservice/resource-manager/Microsoft.BotService/preview/2021-05-01-preview/examples/GetConnection.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbotservice.ConnectionSetting{
			Name:     to.Ptr("sampleConnection"),
			Etag:     to.Ptr("etag1"),
			ID:       to.Ptr("/subscriptions/subscription-id/resourceGroups/OneResourceGroupName/providers/Microsoft.BotService/botServices/samplebotname/connections/sampleConnection"),
			Location: to.Ptr("global"),
			Properties: &armbotservice.ConnectionSettingProperties{
				ClientID: to.Ptr("sampleclientid"),
				Parameters: []*armbotservice.ConnectionSettingParameter{
					{
						Key:   to.Ptr("key1"),
						Value: to.Ptr("value1"),
					},
					{
						Key:   to.Ptr("key2"),
						Value: to.Ptr("value2"),
					}},
				Scopes:                     to.Ptr("samplescope"),
				ServiceProviderDisplayName: to.Ptr("serviceProviderDisplayName"),
				ServiceProviderID:          to.Ptr("serviceproviderid"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ConnectionSetting) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ConnectionSetting)
			t.Fatalf("Mock response is not equal to example response for example specification/botservice/resource-manager/Microsoft.BotService/preview/2021-05-01-preview/examples/GetConnection.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBotConnection_Create(t *testing.T) {
	// From example specification/botservice/resource-manager/Microsoft.BotService/preview/2021-05-01-preview/examples/PutConnection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create Connection Setting"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbotservice.NewBotConnectionClient("subscription-id", cred, &options)
	res, err := client.Create(ctx,
		"OneResourceGroupName",
		"samplebotname",
		"sampleConnection",
		armbotservice.ConnectionSetting{
			Etag:     to.Ptr("etag1"),
			Location: to.Ptr("West US"),
			Properties: &armbotservice.ConnectionSettingProperties{
				ClientID:     to.Ptr("sampleclientid"),
				ClientSecret: to.Ptr("samplesecret"),
				Parameters: []*armbotservice.ConnectionSettingParameter{
					{
						Key:   to.Ptr("key1"),
						Value: to.Ptr("value1"),
					},
					{
						Key:   to.Ptr("key2"),
						Value: to.Ptr("value2"),
					}},
				Scopes:            to.Ptr("samplescope"),
				ServiceProviderID: to.Ptr("serviceproviderid"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/botservice/resource-manager/Microsoft.BotService/preview/2021-05-01-preview/examples/PutConnection.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbotservice.ConnectionSetting{
			Name:     to.Ptr("sampleConnection"),
			Etag:     to.Ptr("etag1"),
			ID:       to.Ptr("/subscriptions/subscription-id/resourceGroups/OneResourceGroupName/providers/Microsoft.BotService/botServices/samplebotname/connections/sampleConnection"),
			Location: to.Ptr("global"),
			Properties: &armbotservice.ConnectionSettingProperties{
				ClientID: to.Ptr("sampleclientid"),
				Parameters: []*armbotservice.ConnectionSettingParameter{
					{
						Key:   to.Ptr("key1"),
						Value: to.Ptr("value1"),
					},
					{
						Key:   to.Ptr("key2"),
						Value: to.Ptr("value2"),
					}},
				Scopes:                     to.Ptr("samplescope"),
				ServiceProviderDisplayName: to.Ptr("serviceProviderDisplayName"),
				ServiceProviderID:          to.Ptr("serviceproviderid"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ConnectionSetting) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ConnectionSetting)
			t.Fatalf("Mock response is not equal to example response for example specification/botservice/resource-manager/Microsoft.BotService/preview/2021-05-01-preview/examples/PutConnection.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBotConnection_Update(t *testing.T) {
	// From example specification/botservice/resource-manager/Microsoft.BotService/preview/2021-05-01-preview/examples/UpdateConnection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update Connection Setting"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbotservice.NewBotConnectionClient("subscription-id", cred, &options)
	res, err := client.Update(ctx,
		"OneResourceGroupName",
		"samplebotname",
		"sampleConnection",
		armbotservice.ConnectionSetting{
			Etag:     to.Ptr("etag1"),
			Location: to.Ptr("global"),
			Properties: &armbotservice.ConnectionSettingProperties{
				ClientID:     to.Ptr("sampleclientid"),
				ClientSecret: to.Ptr("samplesecret"),
				Parameters: []*armbotservice.ConnectionSettingParameter{
					{
						Key:   to.Ptr("key1"),
						Value: to.Ptr("value1"),
					},
					{
						Key:   to.Ptr("key2"),
						Value: to.Ptr("value2"),
					}},
				Scopes:                     to.Ptr("samplescope"),
				ServiceProviderDisplayName: to.Ptr("serviceProviderDisplayName"),
				ServiceProviderID:          to.Ptr("serviceproviderid"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/botservice/resource-manager/Microsoft.BotService/preview/2021-05-01-preview/examples/UpdateConnection.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbotservice.ConnectionSetting{
			Name:     to.Ptr("sampleConnection"),
			ID:       to.Ptr("/subscriptions/subscription-id/resourceGroups/OneResourceGroupName/providers/Microsoft.BotService/botServices/samplebotname/connections/sampleConnection"),
			Location: to.Ptr("global"),
			Properties: &armbotservice.ConnectionSettingProperties{
				ClientID: to.Ptr("sampleclientid"),
				Parameters: []*armbotservice.ConnectionSettingParameter{
					{
						Key:   to.Ptr("key1"),
						Value: to.Ptr("value1"),
					},
					{
						Key:   to.Ptr("key2"),
						Value: to.Ptr("value2"),
					}},
				Scopes:                     to.Ptr("samplescope"),
				ServiceProviderDisplayName: to.Ptr("serviceProviderDisplayName"),
				ServiceProviderID:          to.Ptr("serviceproviderid"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ConnectionSetting) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ConnectionSetting)
			t.Fatalf("Mock response is not equal to example response for example specification/botservice/resource-manager/Microsoft.BotService/preview/2021-05-01-preview/examples/UpdateConnection.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBotConnection_Get(t *testing.T) {
	// From example specification/botservice/resource-manager/Microsoft.BotService/preview/2021-05-01-preview/examples/GetConnection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update Connection Setting"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbotservice.NewBotConnectionClient("subscription-id", cred, &options)
	res, err := client.Get(ctx,
		"OneResourceGroupName",
		"samplebotname",
		"sampleConnection",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/botservice/resource-manager/Microsoft.BotService/preview/2021-05-01-preview/examples/GetConnection.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbotservice.ConnectionSetting{
			Name:     to.Ptr("sampleConnection"),
			Etag:     to.Ptr("etag1"),
			ID:       to.Ptr("/subscriptions/subscription-id/resourceGroups/OneResourceGroupName/providers/Microsoft.BotService/botServices/samplebotname/connections/sampleConnection"),
			Location: to.Ptr("global"),
			Properties: &armbotservice.ConnectionSettingProperties{
				ClientID: to.Ptr("sampleclientid"),
				Parameters: []*armbotservice.ConnectionSettingParameter{
					{
						Key:   to.Ptr("key1"),
						Value: to.Ptr("value1"),
					},
					{
						Key:   to.Ptr("key2"),
						Value: to.Ptr("value2"),
					}},
				Scopes:                     to.Ptr("samplescope"),
				ServiceProviderDisplayName: to.Ptr("serviceProviderDisplayName"),
				ServiceProviderID:          to.Ptr("serviceproviderid"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ConnectionSetting) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ConnectionSetting)
			t.Fatalf("Mock response is not equal to example response for example specification/botservice/resource-manager/Microsoft.BotService/preview/2021-05-01-preview/examples/GetConnection.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBotConnection_Delete(t *testing.T) {
	// From example specification/botservice/resource-manager/Microsoft.BotService/preview/2021-05-01-preview/examples/DeleteConnection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update Connection Setting"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbotservice.NewBotConnectionClient("subscription-id", cred, &options)
	_, err := client.Delete(ctx,
		"OneResourceGroupName",
		"samplebotname",
		"sampleConnection",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/botservice/resource-manager/Microsoft.BotService/preview/2021-05-01-preview/examples/DeleteConnection.json: %v", err)
	}
}

func TestBotConnection_ListByBotService(t *testing.T) {
	// From example specification/botservice/resource-manager/Microsoft.BotService/preview/2021-05-01-preview/examples/ListConnectionsByBotService.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Connection Settings"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbotservice.NewBotConnectionClient("subscription-id", cred, &options)
	pager := client.ListByBotService("OneResourceGroupName",
		"samplebotname",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/botservice/resource-manager/Microsoft.BotService/preview/2021-05-01-preview/examples/ListConnectionsByBotService.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armbotservice.ConnectionSettingResponseList{
			Value: []*armbotservice.ConnectionSetting{
				{
					Name: to.Ptr("sampleConnection"),
					Properties: &armbotservice.ConnectionSettingProperties{
						ClientID: to.Ptr("sampleclientid"),
						Parameters: []*armbotservice.ConnectionSettingParameter{
							{
								Key:   to.Ptr("key1"),
								Value: to.Ptr("value1"),
							},
							{
								Key:   to.Ptr("key2"),
								Value: to.Ptr("value2"),
							}},
						Scopes:            to.Ptr("samplescope"),
						ServiceProviderID: to.Ptr("serviceproviderid"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ConnectionSettingResponseList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ConnectionSettingResponseList)
			t.Fatalf("Mock response is not equal to example response for example specification/botservice/resource-manager/Microsoft.BotService/preview/2021-05-01-preview/examples/ListConnectionsByBotService.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestHostSettings_Get(t *testing.T) {
	// From example specification/botservice/resource-manager/Microsoft.BotService/preview/2021-05-01-preview/examples/GetHostSettings.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Bot Host Settings"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbotservice.NewHostSettingsClient("subscription-id", cred, &options)
	res, err := client.Get(ctx,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/botservice/resource-manager/Microsoft.BotService/preview/2021-05-01-preview/examples/GetHostSettings.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbotservice.HostSettingsResponse{
			BotOpenIDMetadata:                  to.Ptr("https://login.botframework.com/v1/.well-known/openidconfiguration"),
			OAuthURL:                           to.Ptr("https://token.botframework.com/"),
			ToBotFromChannelOpenIDMetadataURL:  to.Ptr("https://login.botframework.com/v1/.well-known/openidconfiguration"),
			ToBotFromChannelTokenIssuer:        to.Ptr("https://api.botframework.com"),
			ToBotFromEmulatorOpenIDMetadataURL: to.Ptr("https://login.microsoftonline.com/botframework.com/v2.0/.well-known/openid-configuration"),
			ToChannelFromBotLoginURL:           to.Ptr("https://login.microsoftonline.com/botframework.com"),
			ToChannelFromBotOAuthScope:         to.Ptr("https://api.botframework.com"),
			ValidateAuthority:                  to.Ptr(true),
		}
		if !reflect.DeepEqual(exampleRes, res.HostSettingsResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.HostSettingsResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/botservice/resource-manager/Microsoft.BotService/preview/2021-05-01-preview/examples/GetHostSettings.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOperationResults_Get(t *testing.T) {
	// From example specification/botservice/resource-manager/Microsoft.BotService/preview/2021-05-01-preview/examples/OperationResultsGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get operation result"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbotservice.NewOperationResultsClient("subid", cred, &options)
	poller, err := client.BeginGet(ctx,
		"exampleid",
		&armbotservice.OperationResultsClientBeginGetOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/botservice/resource-manager/Microsoft.BotService/preview/2021-05-01-preview/examples/OperationResultsGet.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/botservice/resource-manager/Microsoft.BotService/preview/2021-05-01-preview/examples/OperationResultsGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbotservice.OperationResultsDescription{
			Name:      to.Ptr("servicename"),
			ID:        to.Ptr("/subscriptions/subid/providers/Microsoft.BotService/locations/westus/operationresults/exampleid"),
			StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-01-21T06:03:30.2716301Z"); return t }()),
			Status:    to.Ptr(armbotservice.OperationResultStatusRequested),
		}
		if !reflect.DeepEqual(exampleRes, res.OperationResultsDescription) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.OperationResultsDescription)
			t.Fatalf("Mock response is not equal to example response for example specification/botservice/resource-manager/Microsoft.BotService/preview/2021-05-01-preview/examples/OperationResultsGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnections_List(t *testing.T) {
	// From example specification/botservice/resource-manager/Microsoft.BotService/preview/2021-05-01-preview/examples/ListPrivateEndpointConnections.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Private Endpoint Connections"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbotservice.NewPrivateEndpointConnectionsClient("{subscription-id}", cred, &options)
	pager := client.List("res6977",
		"sto2527",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/botservice/resource-manager/Microsoft.BotService/preview/2021-05-01-preview/examples/ListPrivateEndpointConnections.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armbotservice.PrivateEndpointConnectionListResult{
			Value: []*armbotservice.PrivateEndpointConnection{
				{
					Name: to.Ptr("{privateEndpointConnectionName}"),
					Type: to.Ptr("Microsoft.BotService/botServices/privateEndpointConnections"),
					ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res7231/providers/Microsoft.BotService/botServices/sto288/privateEndpointConnections/{privateEndpointConnectionName}"),
					Properties: &armbotservice.PrivateEndpointConnectionProperties{
						PrivateEndpoint: &armbotservice.PrivateEndpoint{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res7231/providers/Microsoft.Network/privateEndpoints/petest01"),
						},
						PrivateLinkServiceConnectionState: &armbotservice.PrivateLinkServiceConnectionState{
							Description:     to.Ptr("Auto-Approved"),
							ActionsRequired: to.Ptr("None"),
							Status:          to.Ptr(armbotservice.PrivateEndpointServiceConnectionStatusApproved),
						},
						ProvisioningState: to.Ptr(armbotservice.PrivateEndpointConnectionProvisioningStateSucceeded),
					},
				},
				{
					Name: to.Ptr("{privateEndpointConnectionName}"),
					Type: to.Ptr("Microsoft.BotService/botServices/privateEndpointConnections"),
					ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res7231/providers/Microsoft.BotService/botServices/sto288/privateEndpointConnections/{privateEndpointConnectionName}"),
					Properties: &armbotservice.PrivateEndpointConnectionProperties{
						PrivateEndpoint: &armbotservice.PrivateEndpoint{
							ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res7231/providers/Microsoft.Network/privateEndpoints/petest02"),
						},
						PrivateLinkServiceConnectionState: &armbotservice.PrivateLinkServiceConnectionState{
							Description:     to.Ptr("Auto-Approved"),
							ActionsRequired: to.Ptr("None"),
							Status:          to.Ptr(armbotservice.PrivateEndpointServiceConnectionStatusApproved),
						},
						ProvisioningState: to.Ptr(armbotservice.PrivateEndpointConnectionProvisioningStateSucceeded),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PrivateEndpointConnectionListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PrivateEndpointConnectionListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/botservice/resource-manager/Microsoft.BotService/preview/2021-05-01-preview/examples/ListPrivateEndpointConnections.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnections_Get(t *testing.T) {
	// From example specification/botservice/resource-manager/Microsoft.BotService/preview/2021-05-01-preview/examples/GetPrivateEndpointConnection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Private Endpoint Connection"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbotservice.NewPrivateEndpointConnectionsClient("{subscription-id}", cred, &options)
	res, err := client.Get(ctx,
		"res6977",
		"sto2527",
		"{privateEndpointConnectionName}",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/botservice/resource-manager/Microsoft.BotService/preview/2021-05-01-preview/examples/GetPrivateEndpointConnection.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbotservice.PrivateEndpointConnection{
			Name: to.Ptr("{privateEndpointConnectionName}"),
			Type: to.Ptr("Microsoft.BotService/botServices/privateEndpointConnections"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res7231/providers/Microsoft.BotService/botServices/sto288/privateEndpointConnections/{privateEndpointConnectionName}"),
			Properties: &armbotservice.PrivateEndpointConnectionProperties{
				PrivateEndpoint: &armbotservice.PrivateEndpoint{
					ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res7231/providers/Microsoft.Network/privateEndpoints/petest01"),
				},
				PrivateLinkServiceConnectionState: &armbotservice.PrivateLinkServiceConnectionState{
					Description:     to.Ptr("Auto-Approved"),
					ActionsRequired: to.Ptr("None"),
					Status:          to.Ptr(armbotservice.PrivateEndpointServiceConnectionStatusApproved),
				},
				ProvisioningState: to.Ptr(armbotservice.PrivateEndpointConnectionProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateEndpointConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/botservice/resource-manager/Microsoft.BotService/preview/2021-05-01-preview/examples/GetPrivateEndpointConnection.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnections_Create(t *testing.T) {
	// From example specification/botservice/resource-manager/Microsoft.BotService/preview/2021-05-01-preview/examples/PutPrivateEndpointConnection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Put Private Endpoint Connection"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbotservice.NewPrivateEndpointConnectionsClient("{subscription-id}", cred, &options)
	res, err := client.Create(ctx,
		"res7687",
		"sto9699",
		"{privateEndpointConnectionName}",
		armbotservice.PrivateEndpointConnection{
			Properties: &armbotservice.PrivateEndpointConnectionProperties{
				PrivateLinkServiceConnectionState: &armbotservice.PrivateLinkServiceConnectionState{
					Description: to.Ptr("Auto-Approved"),
					Status:      to.Ptr(armbotservice.PrivateEndpointServiceConnectionStatusApproved),
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/botservice/resource-manager/Microsoft.BotService/preview/2021-05-01-preview/examples/PutPrivateEndpointConnection.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbotservice.PrivateEndpointConnection{
			Name: to.Ptr("{privateEndpointConnectionName}"),
			Type: to.Ptr("Microsoft.BotService/botServices/privateEndpointConnections"),
			ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res7231/providers/Microsoft.BotService/botServices/sto288/privateEndpointConnections/{privateEndpointConnectionName}"),
			Properties: &armbotservice.PrivateEndpointConnectionProperties{
				PrivateEndpoint: &armbotservice.PrivateEndpoint{
					ID: to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res7231/providers/Microsoft.Network/privateEndpoints/petest01"),
				},
				PrivateLinkServiceConnectionState: &armbotservice.PrivateLinkServiceConnectionState{
					Description:     to.Ptr("Auto-Approved"),
					ActionsRequired: to.Ptr("None"),
					Status:          to.Ptr(armbotservice.PrivateEndpointServiceConnectionStatusApproved),
				},
				ProvisioningState: to.Ptr(armbotservice.PrivateEndpointConnectionProvisioningStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateEndpointConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/botservice/resource-manager/Microsoft.BotService/preview/2021-05-01-preview/examples/PutPrivateEndpointConnection.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnections_Delete(t *testing.T) {
	// From example specification/botservice/resource-manager/Microsoft.BotService/preview/2021-05-01-preview/examples/DeletePrivateEndpointConnection.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete Private Endpoint Connection"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbotservice.NewPrivateEndpointConnectionsClient("{subscription-id}", cred, &options)
	_, err := client.Delete(ctx,
		"res6977",
		"sto2527",
		"{privateEndpointConnectionName}",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/botservice/resource-manager/Microsoft.BotService/preview/2021-05-01-preview/examples/DeletePrivateEndpointConnection.json: %v", err)
	}
}

func TestPrivateLinkResources_ListByBotResource(t *testing.T) {
	// From example specification/botservice/resource-manager/Microsoft.BotService/preview/2021-05-01-preview/examples/ListPrivateLinkResources.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Private Link Resources"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbotservice.NewPrivateLinkResourcesClient("{subscription-id}", cred, &options)
	res, err := client.ListByBotResource(ctx,
		"res6977",
		"sto2527",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/botservice/resource-manager/Microsoft.BotService/preview/2021-05-01-preview/examples/ListPrivateLinkResources.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbotservice.PrivateLinkResourceListResult{
			Value: []*armbotservice.PrivateLinkResource{
				{
					Name: to.Ptr("resource1"),
					Type: to.Ptr("Microsoft.BotService/botServices/privateLinkResources"),
					ID:   to.Ptr("/subscriptions/{subscription-id}/resourceGroups/res6977/providers/Microsoft.BotService/botServices/sto2527/privateLinkResources/resource1"),
					Properties: &armbotservice.PrivateLinkResourceProperties{
						GroupID: to.Ptr("bot"),
						RequiredMembers: []*string{
							to.Ptr("bot")},
						RequiredZoneNames: []*string{
							to.Ptr("privatelink.botframework.com")},
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateLinkResourceListResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateLinkResourceListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/botservice/resource-manager/Microsoft.BotService/preview/2021-05-01-preview/examples/ListPrivateLinkResources.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
