//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armcommerce

import (
	"encoding/json"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"reflect"
)

// MarshalJSON implements the json.Marshaller interface for type MeterInfo.
func (m MeterInfo) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populateTimeRFC3339(objectMap, "EffectiveDate", m.EffectiveDate)
	populate(objectMap, "IncludedQuantity", m.IncludedQuantity)
	populate(objectMap, "MeterCategory", m.MeterCategory)
	populate(objectMap, "MeterId", m.MeterID)
	populate(objectMap, "MeterName", m.MeterName)
	populate(objectMap, "MeterRates", m.MeterRates)
	populate(objectMap, "MeterRegion", m.MeterRegion)
	populate(objectMap, "MeterSubCategory", m.MeterSubCategory)
	populate(objectMap, "MeterTags", m.MeterTags)
	populate(objectMap, "Unit", m.Unit)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type MeterInfo.
func (m *MeterInfo) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "EffectiveDate":
			err = unpopulateTimeRFC3339(val, &m.EffectiveDate)
			delete(rawMsg, key)
		case "IncludedQuantity":
			err = unpopulate(val, &m.IncludedQuantity)
			delete(rawMsg, key)
		case "MeterCategory":
			err = unpopulate(val, &m.MeterCategory)
			delete(rawMsg, key)
		case "MeterId":
			err = unpopulate(val, &m.MeterID)
			delete(rawMsg, key)
		case "MeterName":
			err = unpopulate(val, &m.MeterName)
			delete(rawMsg, key)
		case "MeterRates":
			err = unpopulate(val, &m.MeterRates)
			delete(rawMsg, key)
		case "MeterRegion":
			err = unpopulate(val, &m.MeterRegion)
			delete(rawMsg, key)
		case "MeterSubCategory":
			err = unpopulate(val, &m.MeterSubCategory)
			delete(rawMsg, key)
		case "MeterTags":
			err = unpopulate(val, &m.MeterTags)
			delete(rawMsg, key)
		case "Unit":
			err = unpopulate(val, &m.Unit)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// GetOfferTermInfoAutoGenerated implements the OfferTermInfoAutoGeneratedClassification interface for type MonetaryCommitment.
func (m *MonetaryCommitment) GetOfferTermInfoAutoGenerated() *OfferTermInfoAutoGenerated {
	return &OfferTermInfoAutoGenerated{
		Name:          m.Name,
		EffectiveDate: m.EffectiveDate,
	}
}

// MarshalJSON implements the json.Marshaller interface for type MonetaryCommitment.
func (m MonetaryCommitment) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populateTimeRFC3339(objectMap, "EffectiveDate", m.EffectiveDate)
	populate(objectMap, "ExcludedMeterIds", m.ExcludedMeterIDs)
	objectMap["Name"] = OfferTermInfoMonetaryCommitment
	populate(objectMap, "TieredDiscount", m.TieredDiscount)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type MonetaryCommitment.
func (m *MonetaryCommitment) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "EffectiveDate":
			err = unpopulateTimeRFC3339(val, &m.EffectiveDate)
			delete(rawMsg, key)
		case "ExcludedMeterIds":
			err = unpopulate(val, &m.ExcludedMeterIDs)
			delete(rawMsg, key)
		case "Name":
			err = unpopulate(val, &m.Name)
			delete(rawMsg, key)
		case "TieredDiscount":
			err = unpopulate(val, &m.TieredDiscount)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// GetOfferTermInfoAutoGenerated implements the OfferTermInfoAutoGeneratedClassification interface for type MonetaryCredit.
func (m *MonetaryCredit) GetOfferTermInfoAutoGenerated() *OfferTermInfoAutoGenerated {
	return &OfferTermInfoAutoGenerated{
		Name:          m.Name,
		EffectiveDate: m.EffectiveDate,
	}
}

// MarshalJSON implements the json.Marshaller interface for type MonetaryCredit.
func (m MonetaryCredit) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "Credit", m.Credit)
	populateTimeRFC3339(objectMap, "EffectiveDate", m.EffectiveDate)
	populate(objectMap, "ExcludedMeterIds", m.ExcludedMeterIDs)
	objectMap["Name"] = OfferTermInfoMonetaryCredit
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type MonetaryCredit.
func (m *MonetaryCredit) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "Credit":
			err = unpopulate(val, &m.Credit)
			delete(rawMsg, key)
		case "EffectiveDate":
			err = unpopulateTimeRFC3339(val, &m.EffectiveDate)
			delete(rawMsg, key)
		case "ExcludedMeterIds":
			err = unpopulate(val, &m.ExcludedMeterIDs)
			delete(rawMsg, key)
		case "Name":
			err = unpopulate(val, &m.Name)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// GetOfferTermInfoAutoGenerated implements the OfferTermInfoAutoGeneratedClassification interface for type OfferTermInfoAutoGenerated.
func (o *OfferTermInfoAutoGenerated) GetOfferTermInfoAutoGenerated() *OfferTermInfoAutoGenerated {
	return o
}

// MarshalJSON implements the json.Marshaller interface for type OfferTermInfoAutoGenerated.
func (o OfferTermInfoAutoGenerated) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populateTimeRFC3339(objectMap, "EffectiveDate", o.EffectiveDate)
	objectMap["Name"] = o.Name
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type OfferTermInfoAutoGenerated.
func (o *OfferTermInfoAutoGenerated) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "EffectiveDate":
			err = unpopulateTimeRFC3339(val, &o.EffectiveDate)
			delete(rawMsg, key)
		case "Name":
			err = unpopulate(val, &o.Name)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// GetOfferTermInfoAutoGenerated implements the OfferTermInfoAutoGeneratedClassification interface for type RecurringCharge.
func (r *RecurringCharge) GetOfferTermInfoAutoGenerated() *OfferTermInfoAutoGenerated {
	return &OfferTermInfoAutoGenerated{
		Name:          r.Name,
		EffectiveDate: r.EffectiveDate,
	}
}

// MarshalJSON implements the json.Marshaller interface for type RecurringCharge.
func (r RecurringCharge) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populateTimeRFC3339(objectMap, "EffectiveDate", r.EffectiveDate)
	objectMap["Name"] = OfferTermInfoRecurringCharge
	populate(objectMap, "RecurringCharge", r.RecurringCharge)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type RecurringCharge.
func (r *RecurringCharge) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "EffectiveDate":
			err = unpopulateTimeRFC3339(val, &r.EffectiveDate)
			delete(rawMsg, key)
		case "Name":
			err = unpopulate(val, &r.Name)
			delete(rawMsg, key)
		case "RecurringCharge":
			err = unpopulate(val, &r.RecurringCharge)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type ResourceRateCardInfo.
func (r ResourceRateCardInfo) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "Currency", r.Currency)
	populate(objectMap, "IsTaxIncluded", r.IsTaxIncluded)
	populate(objectMap, "Locale", r.Locale)
	populate(objectMap, "Meters", r.Meters)
	populate(objectMap, "OfferTerms", r.OfferTerms)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ResourceRateCardInfo.
func (r *ResourceRateCardInfo) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "Currency":
			err = unpopulate(val, &r.Currency)
			delete(rawMsg, key)
		case "IsTaxIncluded":
			err = unpopulate(val, &r.IsTaxIncluded)
			delete(rawMsg, key)
		case "Locale":
			err = unpopulate(val, &r.Locale)
			delete(rawMsg, key)
		case "Meters":
			err = unpopulate(val, &r.Meters)
			delete(rawMsg, key)
		case "OfferTerms":
			r.OfferTerms, err = unmarshalOfferTermInfoAutoGeneratedClassificationArray(val)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type UsageAggregationListResult.
func (u UsageAggregationListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", u.NextLink)
	populate(objectMap, "value", u.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type UsageSample.
func (u UsageSample) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "infoFields", u.InfoFields)
	populate(objectMap, "instanceData", u.InstanceData)
	populate(objectMap, "meterCategory", u.MeterCategory)
	populate(objectMap, "meterId", u.MeterID)
	populate(objectMap, "meterName", u.MeterName)
	populate(objectMap, "meterRegion", u.MeterRegion)
	populate(objectMap, "meterSubCategory", u.MeterSubCategory)
	populate(objectMap, "quantity", u.Quantity)
	populate(objectMap, "subscriptionId", u.SubscriptionID)
	populate(objectMap, "unit", u.Unit)
	populateTimeRFC3339(objectMap, "usageEndTime", u.UsageEndTime)
	populateTimeRFC3339(objectMap, "usageStartTime", u.UsageStartTime)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type UsageSample.
func (u *UsageSample) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "infoFields":
			err = unpopulate(val, &u.InfoFields)
			delete(rawMsg, key)
		case "instanceData":
			err = unpopulate(val, &u.InstanceData)
			delete(rawMsg, key)
		case "meterCategory":
			err = unpopulate(val, &u.MeterCategory)
			delete(rawMsg, key)
		case "meterId":
			err = unpopulate(val, &u.MeterID)
			delete(rawMsg, key)
		case "meterName":
			err = unpopulate(val, &u.MeterName)
			delete(rawMsg, key)
		case "meterRegion":
			err = unpopulate(val, &u.MeterRegion)
			delete(rawMsg, key)
		case "meterSubCategory":
			err = unpopulate(val, &u.MeterSubCategory)
			delete(rawMsg, key)
		case "quantity":
			err = unpopulate(val, &u.Quantity)
			delete(rawMsg, key)
		case "subscriptionId":
			err = unpopulate(val, &u.SubscriptionID)
			delete(rawMsg, key)
		case "unit":
			err = unpopulate(val, &u.Unit)
			delete(rawMsg, key)
		case "usageEndTime":
			err = unpopulateTimeRFC3339(val, &u.UsageEndTime)
			delete(rawMsg, key)
		case "usageStartTime":
			err = unpopulateTimeRFC3339(val, &u.UsageStartTime)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

func populate(m map[string]interface{}, k string, v interface{}) {
	if v == nil {
		return
	} else if azcore.IsNullValue(v) {
		m[k] = nil
	} else if !reflect.ValueOf(v).IsNil() {
		m[k] = v
	}
}

func unpopulate(data json.RawMessage, v interface{}) error {
	if data == nil {
		return nil
	}
	return json.Unmarshal(data, v)
}
