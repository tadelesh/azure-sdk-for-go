//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armcommerce_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/commerce/armcommerce"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestUsageAggregates_List(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestRateCard_Get(t *testing.T) {
	// From example specification/commerce/resource-manager/Microsoft.Commerce/preview/2015-06-01-preview/examples/GetRateCard.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetRateCard"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcommerce.NewRateCardClient("6d61cc05-8f8f-4916-b1b9-f1d9c25aae27", cred, &options)
	res, err := client.Get(ctx,
		"OfferDurableId eq 'MS-AZR-0003P' and Currency eq 'USD' and Locale eq 'en-US' and RegionInfo eq 'US'",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/commerce/resource-manager/Microsoft.Commerce/preview/2015-06-01-preview/examples/GetRateCard.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcommerce.ResourceRateCardInfo{
			Meters: []*armcommerce.MeterInfo{
				{
					EffectiveDate:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-09-01T00:00:00Z"); return t }()),
					IncludedQuantity: to.Ptr[float32](0),
					MeterCategory:    to.Ptr("Test Category"),
					MeterID:          to.Ptr("1d7518e5-bc2f-4a93-9057-1b3047856645"),
					MeterName:        to.Ptr("Test Meter"),
					MeterRates: map[string]*float32{
						"0":   to.Ptr[float32](1.99),
						"100": to.Ptr[float32](0.99),
					},
					MeterRegion:      to.Ptr("US West"),
					MeterSubCategory: to.Ptr("Test Subcategory"),
					MeterTags: []*string{
						to.Ptr("Third Party")},
					Unit: to.Ptr("Hours"),
				}},
			OfferTerms: []armcommerce.OfferTermInfoAutoGeneratedClassification{},
		}
		if !reflect.DeepEqual(exampleRes, res.ResourceRateCardInfo) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ResourceRateCardInfo)
			t.Fatalf("Mock response is not equal to example response for example specification/commerce/resource-manager/Microsoft.Commerce/preview/2015-06-01-preview/examples/GetRateCard.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
