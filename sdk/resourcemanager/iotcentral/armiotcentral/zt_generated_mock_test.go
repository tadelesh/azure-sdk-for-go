//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armiotcentral_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/iotcentral/armiotcentral"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestApps_Get(t *testing.T) {
	// From example specification/iotcentral/resource-manager/Microsoft.IoTCentral/stable/2021-06-01/examples/Apps_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Apps_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armiotcentral.NewAppsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		"resRg",
		"myIoTCentralApp",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/iotcentral/resource-manager/Microsoft.IoTCentral/stable/2021-06-01/examples/Apps_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armiotcentral.App{
			Name:     to.Ptr("myIoTCentralApp"),
			Type:     to.Ptr("Microsoft.IoTCentral/IoTApps"),
			ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/resRg/providers/Microsoft.IoTCentral/iotApps/myIoTCentralApp"),
			Location: to.Ptr("westus"),
			Tags: map[string]*string{
				"key": to.Ptr("value"),
			},
			Identity: &armiotcentral.SystemAssignedServiceIdentity{
				Type:        to.Ptr(armiotcentral.SystemAssignedServiceIdentityTypeSystemAssigned),
				PrincipalID: to.Ptr("8988ab15-3e7a-4586-8a1c-ed07a73a53e9"),
				TenantID:    to.Ptr("f686d426-8d16-42db-81b7-ab578e110ccd"),
			},
			Properties: &armiotcentral.AppProperties{
				ApplicationID: to.Ptr("6ebd8fd3-6e34-419e-908f-9be61ec6f6d6"),
				DisplayName:   to.Ptr("My IoT Central App"),
				State:         to.Ptr(armiotcentral.AppStateCreated),
				Subdomain:     to.Ptr("my-iot-central-app"),
				Template:      to.Ptr("iotc-pnp-preview@1.0.0"),
			},
			SKU: &armiotcentral.AppSKUInfo{
				Name: to.Ptr(armiotcentral.AppSKU("F1")),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.App) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.App)
			t.Fatalf("Mock response is not equal to example response for example specification/iotcentral/resource-manager/Microsoft.IoTCentral/stable/2021-06-01/examples/Apps_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestApps_CreateOrUpdate(t *testing.T) {
	// From example specification/iotcentral/resource-manager/Microsoft.IoTCentral/stable/2021-06-01/examples/Apps_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Apps_CreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armiotcentral.NewAppsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"resRg",
		"myIoTCentralApp",
		armiotcentral.App{
			Location: to.Ptr("westus"),
			Identity: &armiotcentral.SystemAssignedServiceIdentity{
				Type: to.Ptr(armiotcentral.SystemAssignedServiceIdentityTypeSystemAssigned),
			},
			Properties: &armiotcentral.AppProperties{
				DisplayName: to.Ptr("My IoT Central App"),
				Subdomain:   to.Ptr("my-iot-central-app"),
				Template:    to.Ptr("iotc-pnp-preview@1.0.0"),
			},
			SKU: &armiotcentral.AppSKUInfo{
				Name: to.Ptr(armiotcentral.AppSKUST2),
			},
		},
		&armiotcentral.AppsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/iotcentral/resource-manager/Microsoft.IoTCentral/stable/2021-06-01/examples/Apps_CreateOrUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/iotcentral/resource-manager/Microsoft.IoTCentral/stable/2021-06-01/examples/Apps_CreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armiotcentral.App{
			Name:     to.Ptr("myIoTCentralApp"),
			Type:     to.Ptr("Microsoft.IoTCentral/IoTApps"),
			ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/resRg/providers/Microsoft.IoTCentral/IoTApps/myIoTCentralApp"),
			Location: to.Ptr("westus"),
			Tags: map[string]*string{
				"key": to.Ptr("value"),
			},
			Identity: &armiotcentral.SystemAssignedServiceIdentity{
				Type:        to.Ptr(armiotcentral.SystemAssignedServiceIdentityTypeSystemAssigned),
				PrincipalID: to.Ptr("8988ab15-3e7a-4586-8a1c-ed07a73a53e9"),
				TenantID:    to.Ptr("f686d426-8d16-42db-81b7-ab578e110ccd"),
			},
			Properties: &armiotcentral.AppProperties{
				ApplicationID: to.Ptr("6ebd8fd3-6e34-419e-908f-9be61ec6f6d6"),
				DisplayName:   to.Ptr("My IoT Central App 2"),
				State:         to.Ptr(armiotcentral.AppStateCreated),
				Subdomain:     to.Ptr("my-iot-central-app-2"),
				Template:      to.Ptr("iotc-pnp-preview@1.0.0"),
			},
			SKU: &armiotcentral.AppSKUInfo{
				Name: to.Ptr(armiotcentral.AppSKUST2),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.App) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.App)
			t.Fatalf("Mock response is not equal to example response for example specification/iotcentral/resource-manager/Microsoft.IoTCentral/stable/2021-06-01/examples/Apps_CreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestApps_Update(t *testing.T) {
	// From example specification/iotcentral/resource-manager/Microsoft.IoTCentral/stable/2021-06-01/examples/Apps_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Apps_Update"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armiotcentral.NewAppsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"resRg",
		"myIoTCentralApp",
		armiotcentral.AppPatch{
			Identity: &armiotcentral.SystemAssignedServiceIdentity{
				Type: to.Ptr(armiotcentral.SystemAssignedServiceIdentityTypeSystemAssigned),
			},
			Properties: &armiotcentral.AppProperties{
				DisplayName: to.Ptr("My IoT Central App 2"),
			},
		},
		&armiotcentral.AppsClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/iotcentral/resource-manager/Microsoft.IoTCentral/stable/2021-06-01/examples/Apps_Update.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/iotcentral/resource-manager/Microsoft.IoTCentral/stable/2021-06-01/examples/Apps_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armiotcentral.App{
			Name:     to.Ptr("myIoTCentralApp"),
			Type:     to.Ptr("Microsoft.IoTCentral/IoTApps"),
			ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/resRg/providers/Microsoft.IoTCentral/IoTApps/myIoTCentralApp"),
			Location: to.Ptr("westus"),
			Tags: map[string]*string{
				"key": to.Ptr("value"),
			},
			Identity: &armiotcentral.SystemAssignedServiceIdentity{
				Type:        to.Ptr(armiotcentral.SystemAssignedServiceIdentityTypeSystemAssigned),
				PrincipalID: to.Ptr("8988ab15-3e7a-4586-8a1c-ed07a73a53e9"),
				TenantID:    to.Ptr("f686d426-8d16-42db-81b7-ab578e110ccd"),
			},
			Properties: &armiotcentral.AppProperties{
				ApplicationID: to.Ptr("6ebd8fd3-6e34-419e-908f-9be61ec6f6d6"),
				DisplayName:   to.Ptr("My IoT Central App 2"),
				State:         to.Ptr(armiotcentral.AppStateCreated),
				Subdomain:     to.Ptr("my-iot-central-app-2"),
				Template:      to.Ptr("iotc-pnp-preview@1.0.0"),
			},
			SKU: &armiotcentral.AppSKUInfo{
				Name: to.Ptr(armiotcentral.AppSKUST2),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.App) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.App)
			t.Fatalf("Mock response is not equal to example response for example specification/iotcentral/resource-manager/Microsoft.IoTCentral/stable/2021-06-01/examples/Apps_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestApps_Delete(t *testing.T) {
	// From example specification/iotcentral/resource-manager/Microsoft.IoTCentral/stable/2021-06-01/examples/Apps_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Apps_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armiotcentral.NewAppsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"resRg",
		"myIoTCentralApp",
		&armiotcentral.AppsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/iotcentral/resource-manager/Microsoft.IoTCentral/stable/2021-06-01/examples/Apps_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/iotcentral/resource-manager/Microsoft.IoTCentral/stable/2021-06-01/examples/Apps_Delete.json: %v", err)
	}
}

func TestApps_ListBySubscription(t *testing.T) {
	// From example specification/iotcentral/resource-manager/Microsoft.IoTCentral/stable/2021-06-01/examples/Apps_ListBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Apps_ListBySubscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armiotcentral.NewAppsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.ListBySubscription(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/iotcentral/resource-manager/Microsoft.IoTCentral/stable/2021-06-01/examples/Apps_ListBySubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armiotcentral.AppListResult{
			Value: []*armiotcentral.App{
				{
					Name:     to.Ptr("myIoTCentralApp"),
					Type:     to.Ptr("Microsoft.IoTCentral/IoTApps"),
					ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/resRg/providers/Microsoft.IoTCentral/iotApps/myIoTCentralApp"),
					Location: to.Ptr("westus"),
					Tags: map[string]*string{
						"key": to.Ptr("value"),
					},
					Identity: &armiotcentral.SystemAssignedServiceIdentity{
						Type:        to.Ptr(armiotcentral.SystemAssignedServiceIdentityTypeSystemAssigned),
						PrincipalID: to.Ptr("8988ab15-3e7a-4586-8a1c-ed07a73a53e9"),
						TenantID:    to.Ptr("f686d426-8d16-42db-81b7-ab578e110ccd"),
					},
					Properties: &armiotcentral.AppProperties{
						ApplicationID: to.Ptr("6ebd8fd3-6e34-419e-908f-9be61ec6f6d6"),
						DisplayName:   to.Ptr("My IoT Central App"),
						State:         to.Ptr(armiotcentral.AppStateCreated),
						Subdomain:     to.Ptr("my-iot-central-app"),
						Template:      to.Ptr("iotc-pnp-preview@1.0.0"),
					},
					SKU: &armiotcentral.AppSKUInfo{
						Name: to.Ptr(armiotcentral.AppSKU("F1")),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AppListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AppListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/iotcentral/resource-manager/Microsoft.IoTCentral/stable/2021-06-01/examples/Apps_ListBySubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestApps_ListByResourceGroup(t *testing.T) {
	// From example specification/iotcentral/resource-manager/Microsoft.IoTCentral/stable/2021-06-01/examples/Apps_ListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Apps_ListByResourceGroup"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armiotcentral.NewAppsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.ListByResourceGroup("resRg",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/iotcentral/resource-manager/Microsoft.IoTCentral/stable/2021-06-01/examples/Apps_ListByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armiotcentral.AppListResult{
			Value: []*armiotcentral.App{
				{
					Name:     to.Ptr("myIoTCentralApp"),
					Type:     to.Ptr("Microsoft.IoTCentral/IoTApps"),
					ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/resRg/providers/Microsoft.IoTCentral/iotApps/myIoTCentralApp"),
					Location: to.Ptr("westus"),
					Tags: map[string]*string{
						"key": to.Ptr("value"),
					},
					Identity: &armiotcentral.SystemAssignedServiceIdentity{
						Type:        to.Ptr(armiotcentral.SystemAssignedServiceIdentityTypeSystemAssigned),
						PrincipalID: to.Ptr("8988ab15-3e7a-4586-8a1c-ed07a73a53e9"),
						TenantID:    to.Ptr("f686d426-8d16-42db-81b7-ab578e110ccd"),
					},
					Properties: &armiotcentral.AppProperties{
						ApplicationID: to.Ptr("6ebd8fd3-6e34-419e-908f-9be61ec6f6d6"),
						DisplayName:   to.Ptr("My IoT Central App"),
						State:         to.Ptr(armiotcentral.AppStateCreated),
						Subdomain:     to.Ptr("my-iot-central-app"),
						Template:      to.Ptr("iotc-pnp-preview@1.0.0"),
					},
					SKU: &armiotcentral.AppSKUInfo{
						Name: to.Ptr(armiotcentral.AppSKU("F1")),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AppListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AppListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/iotcentral/resource-manager/Microsoft.IoTCentral/stable/2021-06-01/examples/Apps_ListByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestApps_CheckNameAvailability(t *testing.T) {
	// From example specification/iotcentral/resource-manager/Microsoft.IoTCentral/stable/2021-06-01/examples/Apps_CheckNameAvailability.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Apps_CheckNameAvailability"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armiotcentral.NewAppsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.CheckNameAvailability(ctx,
		armiotcentral.OperationInputs{
			Name: to.Ptr("myiotcentralapp"),
			Type: to.Ptr("IoTApps"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/iotcentral/resource-manager/Microsoft.IoTCentral/stable/2021-06-01/examples/Apps_CheckNameAvailability.json: %v", err)
	}
	// Response check
	{
		exampleRes := armiotcentral.AppAvailabilityInfo{
			NameAvailable: to.Ptr(true),
		}
		if !reflect.DeepEqual(exampleRes, res.AppAvailabilityInfo) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AppAvailabilityInfo)
			t.Fatalf("Mock response is not equal to example response for example specification/iotcentral/resource-manager/Microsoft.IoTCentral/stable/2021-06-01/examples/Apps_CheckNameAvailability.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestApps_CheckSubdomainAvailability(t *testing.T) {
	// From example specification/iotcentral/resource-manager/Microsoft.IoTCentral/stable/2021-06-01/examples/Apps_CheckSubdomainAvailability.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Apps_SubdomainAvailability"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armiotcentral.NewAppsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.CheckSubdomainAvailability(ctx,
		armiotcentral.OperationInputs{
			Name: to.Ptr("myiotcentralapp"),
			Type: to.Ptr("IoTApps"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/iotcentral/resource-manager/Microsoft.IoTCentral/stable/2021-06-01/examples/Apps_CheckSubdomainAvailability.json: %v", err)
	}
	// Response check
	{
		exampleRes := armiotcentral.AppAvailabilityInfo{
			NameAvailable: to.Ptr(true),
		}
		if !reflect.DeepEqual(exampleRes, res.AppAvailabilityInfo) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AppAvailabilityInfo)
			t.Fatalf("Mock response is not equal to example response for example specification/iotcentral/resource-manager/Microsoft.IoTCentral/stable/2021-06-01/examples/Apps_CheckSubdomainAvailability.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestApps_ListTemplates(t *testing.T) {
	// From example specification/iotcentral/resource-manager/Microsoft.IoTCentral/stable/2021-06-01/examples/Apps_Templates.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Apps_ListTemplates"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armiotcentral.NewAppsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.ListTemplates(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/iotcentral/resource-manager/Microsoft.IoTCentral/stable/2021-06-01/examples/Apps_Templates.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armiotcentral.AppTemplatesResult{
			Value: []*armiotcentral.AppTemplate{
				{
					Name:        to.Ptr("Store Analytics – Condition Monitoring"),
					Description: to.Ptr("Digitally connect and monitor your store environment to reduce operating costs and create experiences that customers love."),
					Industry:    to.Ptr("Retail"),
					Locations: []*armiotcentral.AppTemplateLocations{
						{
							DisplayName: to.Ptr("United States"),
							ID:          to.Ptr("unitedstates"),
						},
						{
							DisplayName: to.Ptr("Europe"),
							ID:          to.Ptr("europe"),
						},
						{
							DisplayName: to.Ptr("Asia Pacific"),
							ID:          to.Ptr("asiapacific"),
						},
						{
							DisplayName: to.Ptr("Australia"),
							ID:          to.Ptr("australia"),
						},
						{
							DisplayName: to.Ptr("United Kingdom"),
							ID:          to.Ptr("uk"),
						},
						{
							DisplayName: to.Ptr("Japan"),
							ID:          to.Ptr("japan"),
						}},
					ManifestID:      to.Ptr("iotc-condition"),
					ManifestVersion: to.Ptr("1.0.0"),
					Order:           to.Ptr[float32](99),
					Title:           to.Ptr("In-store Analytics – Condition Monitoring"),
				},
				{
					Name:        to.Ptr("IoT Central Water Consumption application template"),
					Description: to.Ptr("Enable remote tracking of water consumption to reduce field operations, detect leaks in time, while empowering cities to conserve water."),
					Industry:    to.Ptr("Government"),
					Locations: []*armiotcentral.AppTemplateLocations{
						{
							DisplayName: to.Ptr("United States"),
							ID:          to.Ptr("unitedstates"),
						},
						{
							DisplayName: to.Ptr("Europe"),
							ID:          to.Ptr("europe"),
						},
						{
							DisplayName: to.Ptr("Asia Pacific"),
							ID:          to.Ptr("asiapacific"),
						},
						{
							DisplayName: to.Ptr("Australia"),
							ID:          to.Ptr("australia"),
						},
						{
							DisplayName: to.Ptr("United Kingdom"),
							ID:          to.Ptr("uk"),
						},
						{
							DisplayName: to.Ptr("Japan"),
							ID:          to.Ptr("japan"),
						}},
					ManifestID:      to.Ptr("iotc-consumption"),
					ManifestVersion: to.Ptr("1.0.0"),
					Order:           to.Ptr[float32](99),
					Title:           to.Ptr("Water Consumption Monitoring"),
				},
				{
					Name:        to.Ptr("IoT Central Digital Distribution Center application template"),
					Description: to.Ptr("Digitally manage warehouse conveyor belt system efficiency using object detection and tracking."),
					Industry:    to.Ptr("Retail"),
					Locations: []*armiotcentral.AppTemplateLocations{
						{
							DisplayName: to.Ptr("United States"),
							ID:          to.Ptr("unitedstates"),
						},
						{
							DisplayName: to.Ptr("Europe"),
							ID:          to.Ptr("europe"),
						},
						{
							DisplayName: to.Ptr("Asia Pacific"),
							ID:          to.Ptr("asiapacific"),
						},
						{
							DisplayName: to.Ptr("Australia"),
							ID:          to.Ptr("australia"),
						},
						{
							DisplayName: to.Ptr("United Kingdom"),
							ID:          to.Ptr("uk"),
						},
						{
							DisplayName: to.Ptr("Japan"),
							ID:          to.Ptr("japan"),
						}},
					ManifestID:      to.Ptr("iotc-distribution"),
					ManifestVersion: to.Ptr("1.0.0"),
					Order:           to.Ptr[float32](99),
					Title:           to.Ptr("Digital Distribution Center"),
				},
				{
					Name:        to.Ptr("IoT Central Smart Inventory Management application template"),
					Description: to.Ptr("Enable accurate inventory tracking and ensure shelves are always stocked."),
					Industry:    to.Ptr("Retail"),
					Locations: []*armiotcentral.AppTemplateLocations{
						{
							DisplayName: to.Ptr("United States"),
							ID:          to.Ptr("unitedstates"),
						},
						{
							DisplayName: to.Ptr("Europe"),
							ID:          to.Ptr("europe"),
						},
						{
							DisplayName: to.Ptr("Asia Pacific"),
							ID:          to.Ptr("asiapacific"),
						},
						{
							DisplayName: to.Ptr("Australia"),
							ID:          to.Ptr("australia"),
						},
						{
							DisplayName: to.Ptr("United Kingdom"),
							ID:          to.Ptr("uk"),
						},
						{
							DisplayName: to.Ptr("Japan"),
							ID:          to.Ptr("japan"),
						}},
					ManifestID:      to.Ptr("iotc-inventory"),
					ManifestVersion: to.Ptr("1.0.0"),
					Order:           to.Ptr[float32](99),
					Title:           to.Ptr("Smart Inventory Management"),
				},
				{
					Name:        to.Ptr("IoT Central Connected Logistics application template"),
					Description: to.Ptr("Track your shipment in real-time across air, water and land with location and condition monitoring."),
					Industry:    to.Ptr("Retail"),
					Locations: []*armiotcentral.AppTemplateLocations{
						{
							DisplayName: to.Ptr("United States"),
							ID:          to.Ptr("unitedstates"),
						},
						{
							DisplayName: to.Ptr("Europe"),
							ID:          to.Ptr("europe"),
						},
						{
							DisplayName: to.Ptr("Asia Pacific"),
							ID:          to.Ptr("asiapacific"),
						},
						{
							DisplayName: to.Ptr("Australia"),
							ID:          to.Ptr("australia"),
						},
						{
							DisplayName: to.Ptr("United Kingdom"),
							ID:          to.Ptr("uk"),
						},
						{
							DisplayName: to.Ptr("Japan"),
							ID:          to.Ptr("japan"),
						}},
					ManifestID:      to.Ptr("iotc-logistics"),
					ManifestVersion: to.Ptr("1.0.0"),
					Order:           to.Ptr[float32](99),
					Title:           to.Ptr("Connected Logistics"),
				},
				{
					Name:        to.Ptr("IoT Central Smart Meter Analytics application template"),
					Description: to.Ptr("Connect utility meters to gain insights into billing, forecast consumption, and proactively detect outages."),
					Industry:    to.Ptr("Energy"),
					Locations: []*armiotcentral.AppTemplateLocations{
						{
							DisplayName: to.Ptr("United States"),
							ID:          to.Ptr("unitedstates"),
						},
						{
							DisplayName: to.Ptr("Europe"),
							ID:          to.Ptr("europe"),
						},
						{
							DisplayName: to.Ptr("Asia Pacific"),
							ID:          to.Ptr("asiapacific"),
						},
						{
							DisplayName: to.Ptr("Australia"),
							ID:          to.Ptr("australia"),
						},
						{
							DisplayName: to.Ptr("United Kingdom"),
							ID:          to.Ptr("uk"),
						},
						{
							DisplayName: to.Ptr("Japan"),
							ID:          to.Ptr("japan"),
						}},
					ManifestID:      to.Ptr("iotc-meter"),
					ManifestVersion: to.Ptr("1.0.0"),
					Order:           to.Ptr[float32](99),
					Title:           to.Ptr("Smart Meter Analytics"),
				},
				{
					Name:        to.Ptr("IoT Central Micro-fulfillment Center"),
					Description: to.Ptr("Digitally connect, monitor and manage all aspects of a fully automated fulfillment center to reduce costs by eliminating downtime while increasing security and overall efficiency."),
					Industry:    to.Ptr("Retail"),
					Locations: []*armiotcentral.AppTemplateLocations{
						{
							DisplayName: to.Ptr("United States"),
							ID:          to.Ptr("unitedstates"),
						},
						{
							DisplayName: to.Ptr("Europe"),
							ID:          to.Ptr("europe"),
						},
						{
							DisplayName: to.Ptr("Asia Pacific"),
							ID:          to.Ptr("asiapacific"),
						},
						{
							DisplayName: to.Ptr("Australia"),
							ID:          to.Ptr("australia"),
						},
						{
							DisplayName: to.Ptr("United Kingdom"),
							ID:          to.Ptr("uk"),
						},
						{
							DisplayName: to.Ptr("Japan"),
							ID:          to.Ptr("japan"),
						}},
					ManifestID:      to.Ptr("iotc-mfc"),
					ManifestVersion: to.Ptr("1.0.0"),
					Order:           to.Ptr[float32](99),
					Title:           to.Ptr("Micro-fulfillment Center"),
				},
				{
					Name:        to.Ptr("IoT Central Phone-as-a-device application template"),
					Description: to.Ptr("Create application with [\"paad\"] capabilities."),
					Industry:    to.Ptr("Utility"),
					Locations: []*armiotcentral.AppTemplateLocations{
						{
							DisplayName: to.Ptr("United States"),
							ID:          to.Ptr("unitedstates"),
						},
						{
							DisplayName: to.Ptr("Europe"),
							ID:          to.Ptr("europe"),
						},
						{
							DisplayName: to.Ptr("Asia Pacific"),
							ID:          to.Ptr("asiapacific"),
						},
						{
							DisplayName: to.Ptr("Australia"),
							ID:          to.Ptr("australia"),
						},
						{
							DisplayName: to.Ptr("United Kingdom"),
							ID:          to.Ptr("uk"),
						},
						{
							DisplayName: to.Ptr("Japan"),
							ID:          to.Ptr("japan"),
						}},
					ManifestID:      to.Ptr("iotc-paad"),
					ManifestVersion: to.Ptr("1.0.0"),
					Order:           to.Ptr[float32](99),
					Title:           to.Ptr("Paad"),
				},
				{
					Name:        to.Ptr("IoT Central Continuous Patient Monitoring application template"),
					Description: to.Ptr("Connect and manage devices for in-patient and remote monitoring to improve patient outcomes, reduce re-admissions, and manage chronic diseases."),
					Industry:    to.Ptr("Health"),
					Locations: []*armiotcentral.AppTemplateLocations{
						{
							DisplayName: to.Ptr("United States"),
							ID:          to.Ptr("unitedstates"),
						},
						{
							DisplayName: to.Ptr("Europe"),
							ID:          to.Ptr("europe"),
						},
						{
							DisplayName: to.Ptr("Asia Pacific"),
							ID:          to.Ptr("asiapacific"),
						},
						{
							DisplayName: to.Ptr("Australia"),
							ID:          to.Ptr("australia"),
						},
						{
							DisplayName: to.Ptr("United Kingdom"),
							ID:          to.Ptr("uk"),
						},
						{
							DisplayName: to.Ptr("Japan"),
							ID:          to.Ptr("japan"),
						}},
					ManifestID:      to.Ptr("iotc-patient"),
					ManifestVersion: to.Ptr("1.0.0"),
					Order:           to.Ptr[float32](99),
					Title:           to.Ptr("Continuous Patient Monitoring"),
				},
				{
					Name:        to.Ptr("IoT Central PnP template (preview)"),
					Description: to.Ptr("Create an application with Azure IoT Plug and Play."),
					Industry:    to.Ptr(""),
					Locations: []*armiotcentral.AppTemplateLocations{
						{
							DisplayName: to.Ptr("United States"),
							ID:          to.Ptr("unitedstates"),
						},
						{
							DisplayName: to.Ptr("Europe"),
							ID:          to.Ptr("europe"),
						},
						{
							DisplayName: to.Ptr("Asia Pacific"),
							ID:          to.Ptr("asiapacific"),
						},
						{
							DisplayName: to.Ptr("Australia"),
							ID:          to.Ptr("australia"),
						},
						{
							DisplayName: to.Ptr("United Kingdom"),
							ID:          to.Ptr("uk"),
						},
						{
							DisplayName: to.Ptr("Japan"),
							ID:          to.Ptr("japan"),
						}},
					ManifestID:      to.Ptr("iotc-pnp-preview"),
					ManifestVersion: to.Ptr("1.0.0"),
					Order:           to.Ptr[float32](1),
					Title:           to.Ptr("Custom application"),
				},
				{
					Name:        to.Ptr("IoT Central Solar Power Monitoring application template"),
					Description: to.Ptr("Connect, monitor, and manage your solar panels and energy generation."),
					Industry:    to.Ptr("Energy"),
					Locations: []*armiotcentral.AppTemplateLocations{
						{
							DisplayName: to.Ptr("United States"),
							ID:          to.Ptr("unitedstates"),
						},
						{
							DisplayName: to.Ptr("Europe"),
							ID:          to.Ptr("europe"),
						},
						{
							DisplayName: to.Ptr("Asia Pacific"),
							ID:          to.Ptr("asiapacific"),
						},
						{
							DisplayName: to.Ptr("Australia"),
							ID:          to.Ptr("australia"),
						},
						{
							DisplayName: to.Ptr("United Kingdom"),
							ID:          to.Ptr("uk"),
						},
						{
							DisplayName: to.Ptr("Japan"),
							ID:          to.Ptr("japan"),
						}},
					ManifestID:      to.Ptr("iotc-power"),
					ManifestVersion: to.Ptr("1.0.0"),
					Order:           to.Ptr[float32](99),
					Title:           to.Ptr("Solar Power Monitoring"),
				},
				{
					Name:        to.Ptr("IoT Central Water Quality Monitoring application template"),
					Description: to.Ptr("Improve water quality and detect issues earlier by analyzing real-time measurements across your environment."),
					Industry:    to.Ptr("Government"),
					Locations: []*armiotcentral.AppTemplateLocations{
						{
							DisplayName: to.Ptr("United States"),
							ID:          to.Ptr("unitedstates"),
						},
						{
							DisplayName: to.Ptr("Europe"),
							ID:          to.Ptr("europe"),
						},
						{
							DisplayName: to.Ptr("Asia Pacific"),
							ID:          to.Ptr("asiapacific"),
						},
						{
							DisplayName: to.Ptr("Australia"),
							ID:          to.Ptr("australia"),
						},
						{
							DisplayName: to.Ptr("United Kingdom"),
							ID:          to.Ptr("uk"),
						},
						{
							DisplayName: to.Ptr("Japan"),
							ID:          to.Ptr("japan"),
						}},
					ManifestID:      to.Ptr("iotc-quality"),
					ManifestVersion: to.Ptr("1.0.0"),
					Order:           to.Ptr[float32](99),
					Title:           to.Ptr("Water Quality Monitoring"),
				},
				{
					Name:        to.Ptr("Store Analytics – Checkout"),
					Description: to.Ptr("Monitor and manage the checkout flow inside your store to improve efficiency and reduce wait times."),
					Industry:    to.Ptr("Retail"),
					Locations: []*armiotcentral.AppTemplateLocations{
						{
							DisplayName: to.Ptr("United States"),
							ID:          to.Ptr("unitedstates"),
						},
						{
							DisplayName: to.Ptr("Europe"),
							ID:          to.Ptr("europe"),
						},
						{
							DisplayName: to.Ptr("Asia Pacific"),
							ID:          to.Ptr("asiapacific"),
						},
						{
							DisplayName: to.Ptr("Australia"),
							ID:          to.Ptr("australia"),
						},
						{
							DisplayName: to.Ptr("United Kingdom"),
							ID:          to.Ptr("uk"),
						},
						{
							DisplayName: to.Ptr("Japan"),
							ID:          to.Ptr("japan"),
						}},
					ManifestID:      to.Ptr("iotc-store"),
					ManifestVersion: to.Ptr("1.0.0"),
					Order:           to.Ptr[float32](99),
					Title:           to.Ptr("In-store Analytics – Checkout"),
				},
				{
					Name:        to.Ptr("IoT Central Video analytics - object and motion detection application template"),
					Description: to.Ptr("Use cameras as a sensor in intelligent video analytics solutions powered by Azure IoT Edge, AI, and Azure Media Services."),
					Industry:    to.Ptr("Retail"),
					Locations: []*armiotcentral.AppTemplateLocations{
						{
							DisplayName: to.Ptr("United States"),
							ID:          to.Ptr("unitedstates"),
						},
						{
							DisplayName: to.Ptr("Europe"),
							ID:          to.Ptr("europe"),
						},
						{
							DisplayName: to.Ptr("Asia Pacific"),
							ID:          to.Ptr("asiapacific"),
						},
						{
							DisplayName: to.Ptr("Australia"),
							ID:          to.Ptr("australia"),
						},
						{
							DisplayName: to.Ptr("United Kingdom"),
							ID:          to.Ptr("uk"),
						},
						{
							DisplayName: to.Ptr("Japan"),
							ID:          to.Ptr("japan"),
						}},
					ManifestID:      to.Ptr("iotc-video-analytics-om"),
					ManifestVersion: to.Ptr("1.0.0"),
					Order:           to.Ptr[float32](99),
					Title:           to.Ptr("Video analytics - object and motion detection"),
				},
				{
					Name:        to.Ptr("IoT Central Connected Waste Management application template"),
					Description: to.Ptr("Maximize efficiency in the collection of solid wastes by dispatching field operators at the right time along an optimized collection route."),
					Industry:    to.Ptr("Government"),
					Locations: []*armiotcentral.AppTemplateLocations{
						{
							DisplayName: to.Ptr("United States"),
							ID:          to.Ptr("unitedstates"),
						},
						{
							DisplayName: to.Ptr("Europe"),
							ID:          to.Ptr("europe"),
						},
						{
							DisplayName: to.Ptr("Asia Pacific"),
							ID:          to.Ptr("asiapacific"),
						},
						{
							DisplayName: to.Ptr("Australia"),
							ID:          to.Ptr("australia"),
						},
						{
							DisplayName: to.Ptr("United Kingdom"),
							ID:          to.Ptr("uk"),
						},
						{
							DisplayName: to.Ptr("Japan"),
							ID:          to.Ptr("japan"),
						}},
					ManifestID:      to.Ptr("iotc-waste"),
					ManifestVersion: to.Ptr("1.0.0"),
					Order:           to.Ptr[float32](99),
					Title:           to.Ptr("Connected Waste Management"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AppTemplatesResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AppTemplatesResult)
			t.Fatalf("Mock response is not equal to example response for example specification/iotcentral/resource-manager/Microsoft.IoTCentral/stable/2021-06-01/examples/Apps_Templates.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOperations_List(t *testing.T) {
	// From example specification/iotcentral/resource-manager/Microsoft.IoTCentral/stable/2021-06-01/examples/Operations_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Operations_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armiotcentral.NewOperationsClient(cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/iotcentral/resource-manager/Microsoft.IoTCentral/stable/2021-06-01/examples/Operations_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armiotcentral.OperationListResult{
			Value: []*armiotcentral.Operation{
				{
					Name: to.Ptr("Microsoft.IoTCentral/IoTApps/read"),
					Display: &armiotcentral.OperationDisplay{
						Description: to.Ptr("Gets a single IoT Central Application"),
						Operation:   to.Ptr("Get IoT Central Application"),
						Provider:    to.Ptr("Azure IoT Central"),
						Resource:    to.Ptr("IoTApps"),
					},
				},
				{
					Name: to.Ptr("Microsoft.IoTCentral/IoTApps/write"),
					Display: &armiotcentral.OperationDisplay{
						Description: to.Ptr("Creates or Updates an IoT Central Applications"),
						Operation:   to.Ptr("Create or Update IoT Central Application"),
						Provider:    to.Ptr("Azure IoT Central"),
						Resource:    to.Ptr("IoTApps"),
					},
				},
				{
					Name: to.Ptr("Microsoft.IoTCentral/IoTApps/delete"),
					Display: &armiotcentral.OperationDisplay{
						Description: to.Ptr("Deletes an IoT Central Applications"),
						Operation:   to.Ptr("Delete IoT Central Application"),
						Provider:    to.Ptr("Azure IoT Central"),
						Resource:    to.Ptr("IoTApps"),
					},
				},
				{
					Name: to.Ptr("Microsoft.IoTCentral/checkNameAvailability/action"),
					Display: &armiotcentral.OperationDisplay{
						Description: to.Ptr("Checks if an IoT Central Application name is available"),
						Operation:   to.Ptr("Check resource name availability"),
						Provider:    to.Ptr("Azure IoT Central"),
						Resource:    to.Ptr(""),
					},
				},
				{
					Name: to.Ptr("Microsoft.IoTCentral/checkSubdomainAvailability/action"),
					Display: &armiotcentral.OperationDisplay{
						Description: to.Ptr("Checks if an IoT Central Application subdomain is available"),
						Operation:   to.Ptr("Check resource subdomain availability"),
						Provider:    to.Ptr("Azure IoT Central"),
						Resource:    to.Ptr(""),
					},
				},
				{
					Name: to.Ptr("Microsoft.IoTCentral/operations/read"),
					Display: &armiotcentral.OperationDisplay{
						Description: to.Ptr("Gets all the available operations on IoT Central Applications"),
						Operation:   to.Ptr("Get all the available operations"),
						Provider:    to.Ptr("Azure IoT Central"),
						Resource:    to.Ptr(""),
					},
				},
				{
					Name: to.Ptr("Microsoft.IoTCentral/appTemplates/action"),
					Display: &armiotcentral.OperationDisplay{
						Description: to.Ptr("Gets all the available application templates on Azure IoT Central"),
						Operation:   to.Ptr("Get all available application templates"),
						Provider:    to.Ptr("Azure IoT Central"),
						Resource:    to.Ptr("Azure IoT Central Resource Provider"),
					},
				},
				{
					Name: to.Ptr("Microsoft.IoTCentral/register/action"),
					Display: &armiotcentral.OperationDisplay{
						Description: to.Ptr("Register the subscription for Azure IoT Central resource provider"),
						Operation:   to.Ptr("Register Azure IoT Central resource provider"),
						Provider:    to.Ptr("Azure IoT Central"),
						Resource:    to.Ptr("Azure IoT Central Resource Provider"),
					},
				},
				{
					Name: to.Ptr("Microsoft.IoTCentral/IoTApps/providers/Microsoft.Insights/metricDefinitions/read"),
					Display: &armiotcentral.OperationDisplay{
						Description: to.Ptr("Gets all the available Metrics definitions on Azure IoT Central"),
						Operation:   to.Ptr("Get all available Metrics definitions"),
						Provider:    to.Ptr("Azure IoT Central"),
						Resource:    to.Ptr("IoTApps"),
					},
					Origin: to.Ptr("system"),
					Properties: map[string]interface{}{
						"serviceSpecification": map[string]interface{}{
							"metricSpecifications": []interface{}{
								map[string]interface{}{
									"name":                "connectedDeviceCount",
									"aggregationType":     "Average",
									"displayDescription":  "Number of devices connected to IoT Central",
									"displayName":         "Total Connected Devices",
									"lockAggregationType": "Total",
									"supportedAggregationTypes": []interface{}{
										"Average",
									},
									"supportedTimeGrainTypes": []interface{}{
										"PT1M",
										"PT5M",
										"PT15M",
										"PT30M",
										"PT1H",
										"PT6H",
										"PT12H",
										"P1D",
									},
									"unit": "Count",
								},
								map[string]interface{}{
									"name":               "c2d.property.read.success",
									"aggregationType":    "Total",
									"displayDescription": "The count of all successful property reads initiated from IoT Central",
									"displayName":        "Successful Device Property Reads from IoT Central",
									"supportedAggregationTypes": []interface{}{
										"Total",
									},
									"supportedTimeGrainTypes": []interface{}{
										"PT1M",
										"PT5M",
										"PT15M",
										"PT30M",
										"PT1H",
										"PT6H",
										"PT12H",
										"P1D",
									},
									"unit": "Count",
								},
								map[string]interface{}{
									"name":               "c2d.property.read.failure",
									"aggregationType":    "Total",
									"displayDescription": "The count of all failed property reads initiated from IoT Central",
									"displayName":        "Failed Device Property Reads from IoT Central",
									"supportedAggregationTypes": []interface{}{
										"Total",
									},
									"supportedTimeGrainTypes": []interface{}{
										"PT1M",
										"PT5M",
										"PT15M",
										"PT30M",
										"PT1H",
										"PT6H",
										"PT12H",
										"P1D",
									},
									"unit": "Count",
								},
								map[string]interface{}{
									"name":               "d2c.property.read.success",
									"aggregationType":    "Total",
									"displayDescription": "The count of all successful property reads initiated from devices",
									"displayName":        "Successful Device Property Reads from Devices",
									"supportedAggregationTypes": []interface{}{
										"Total",
									},
									"supportedTimeGrainTypes": []interface{}{
										"PT1M",
										"PT5M",
										"PT15M",
										"PT30M",
										"PT1H",
										"PT6H",
										"PT12H",
										"P1D",
									},
									"unit": "Count",
								},
								map[string]interface{}{
									"name":               "d2c.property.read.failure",
									"aggregationType":    "Total",
									"displayDescription": "The count of all failed property reads initiated from devices",
									"displayName":        "Failed Device Property Reads from Devices",
									"supportedAggregationTypes": []interface{}{
										"Total",
									},
									"supportedTimeGrainTypes": []interface{}{
										"PT1M",
										"PT5M",
										"PT15M",
										"PT30M",
										"PT1H",
										"PT6H",
										"PT12H",
										"P1D",
									},
									"unit": "Count",
								},
								map[string]interface{}{
									"name":               "c2d.property.update.success",
									"aggregationType":    "Total",
									"displayDescription": "The count of all successful property updates initiated from IoT Central",
									"displayName":        "Successful Device Property Updates from IoT Central",
									"supportedAggregationTypes": []interface{}{
										"Total",
									},
									"supportedTimeGrainTypes": []interface{}{
										"PT1M",
										"PT5M",
										"PT15M",
										"PT30M",
										"PT1H",
										"PT6H",
										"PT12H",
										"P1D",
									},
									"unit": "Count",
								},
								map[string]interface{}{
									"name":               "c2d.property.update.failure",
									"aggregationType":    "Total",
									"displayDescription": "The count of all failed property updates initiated from IoT Central",
									"displayName":        "Failed Device Property Updates from IoT Central",
									"supportedAggregationTypes": []interface{}{
										"Total",
									},
									"supportedTimeGrainTypes": []interface{}{
										"PT1M",
										"PT5M",
										"PT15M",
										"PT30M",
										"PT1H",
										"PT6H",
										"PT12H",
										"P1D",
									},
									"unit": "Count",
								},
								map[string]interface{}{
									"name":               "d2c.property.update.success",
									"aggregationType":    "Total",
									"displayDescription": "The count of all successful property updates initiated from devices",
									"displayName":        "Successful Device Property Updates from Devices",
									"supportedAggregationTypes": []interface{}{
										"Total",
									},
									"supportedTimeGrainTypes": []interface{}{
										"PT1M",
										"PT5M",
										"PT15M",
										"PT30M",
										"PT1H",
										"PT6H",
										"PT12H",
										"P1D",
									},
									"unit": "Count",
								},
								map[string]interface{}{
									"name":               "d2c.property.update.failure",
									"aggregationType":    "Total",
									"displayDescription": "The count of all failed property updates initiated from devices",
									"displayName":        "Failed Device Property Updates from Devices",
									"supportedAggregationTypes": []interface{}{
										"Total",
									},
									"supportedTimeGrainTypes": []interface{}{
										"PT1M",
										"PT5M",
										"PT15M",
										"PT30M",
										"PT1H",
										"PT6H",
										"PT12H",
										"P1D",
									},
									"unit": "Count",
								},
							},
						},
					},
				},
				{
					Name: to.Ptr("Microsoft.IoTCentral/IoTApps/providers/Microsoft.Insights/diagnosticSettings/read"),
					Display: &armiotcentral.OperationDisplay{
						Description: to.Ptr("Gets the diagnostic setting for the resource"),
						Operation:   to.Ptr("Read diagnostic setting"),
						Provider:    to.Ptr("Azure IoT Central"),
						Resource:    to.Ptr("IoTApps"),
					},
					Origin: to.Ptr("system"),
				},
				{
					Name: to.Ptr("Microsoft.IoTCentral/IoTApps/providers/Microsoft.Insights/diagnosticSettings/write"),
					Display: &armiotcentral.OperationDisplay{
						Description: to.Ptr("Creates or updates the diagnostic setting for the resource"),
						Operation:   to.Ptr("Write diagnostic setting"),
						Provider:    to.Ptr("Azure IoT Central"),
						Resource:    to.Ptr("IoTApps"),
					},
					Origin: to.Ptr("system"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OperationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OperationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/iotcentral/resource-manager/Microsoft.IoTCentral/stable/2021-06-01/examples/Operations_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
