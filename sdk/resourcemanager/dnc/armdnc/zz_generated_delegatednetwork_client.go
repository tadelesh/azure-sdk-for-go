//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armdnc

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// DelegatedNetworkClient contains the methods for the DelegatedNetwork group.
// Don't use this type directly, use NewDelegatedNetworkClient() instead.
type DelegatedNetworkClient struct {
	host           string
	subscriptionID string
	pl             runtime.Pipeline
}

// NewDelegatedNetworkClient creates a new instance of DelegatedNetworkClient with the specified values.
// subscriptionID - The ID of the target subscription.
// credential - used to authorize requests. Usually a credential from azidentity.
// options - pass nil to accept the default values.
func NewDelegatedNetworkClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) *DelegatedNetworkClient {
	if options == nil {
		options = &arm.ClientOptions{}
	}
	ep := options.Endpoint
	if len(ep) == 0 {
		ep = arm.AzurePublicCloud
	}
	client := &DelegatedNetworkClient{
		subscriptionID: subscriptionID,
		host:           string(ep),
		pl:             armruntime.NewPipeline(moduleName, moduleVersion, credential, runtime.PipelineOptions{}, options),
	}
	return client
}

// ListByResourceGroup - Get all the delegatedController resources in a resource group.
// If the operation fails it returns an *azcore.ResponseError type.
// resourceGroupName - The name of the resource group. The name is case insensitive.
// options - DelegatedNetworkClientListByResourceGroupOptions contains the optional parameters for the DelegatedNetworkClient.ListByResourceGroup
// method.
func (client *DelegatedNetworkClient) ListByResourceGroup(resourceGroupName string, options *DelegatedNetworkClientListByResourceGroupOptions) *runtime.Pager[DelegatedNetworkClientListByResourceGroupResponse] {
	return runtime.NewPager(runtime.PageProcessor[DelegatedNetworkClientListByResourceGroupResponse]{
		More: func(page DelegatedNetworkClientListByResourceGroupResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *DelegatedNetworkClientListByResourceGroupResponse) (DelegatedNetworkClientListByResourceGroupResponse, error) {
			var req *policy.Request
			var err error
			if page == nil {
				req, err = client.listByResourceGroupCreateRequest(ctx, resourceGroupName, options)
			} else {
				req, err = runtime.NewRequest(ctx, http.MethodGet, *page.NextLink)
			}
			if err != nil {
				return DelegatedNetworkClientListByResourceGroupResponse{}, err
			}
			resp, err := client.pl.Do(req)
			if err != nil {
				return DelegatedNetworkClientListByResourceGroupResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return DelegatedNetworkClientListByResourceGroupResponse{}, runtime.NewResponseError(resp)
			}
			return client.listByResourceGroupHandleResponse(resp)
		},
	})
}

// listByResourceGroupCreateRequest creates the ListByResourceGroup request.
func (client *DelegatedNetworkClient) listByResourceGroupCreateRequest(ctx context.Context, resourceGroupName string, options *DelegatedNetworkClientListByResourceGroupOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DelegatedNetwork/controllers"
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-03-15")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listByResourceGroupHandleResponse handles the ListByResourceGroup response.
func (client *DelegatedNetworkClient) listByResourceGroupHandleResponse(resp *http.Response) (DelegatedNetworkClientListByResourceGroupResponse, error) {
	result := DelegatedNetworkClientListByResourceGroupResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.DelegatedControllers); err != nil {
		return DelegatedNetworkClientListByResourceGroupResponse{}, err
	}
	return result, nil
}

// ListBySubscription - Get all the delegatedController resources in a subscription.
// If the operation fails it returns an *azcore.ResponseError type.
// options - DelegatedNetworkClientListBySubscriptionOptions contains the optional parameters for the DelegatedNetworkClient.ListBySubscription
// method.
func (client *DelegatedNetworkClient) ListBySubscription(options *DelegatedNetworkClientListBySubscriptionOptions) *runtime.Pager[DelegatedNetworkClientListBySubscriptionResponse] {
	return runtime.NewPager(runtime.PageProcessor[DelegatedNetworkClientListBySubscriptionResponse]{
		More: func(page DelegatedNetworkClientListBySubscriptionResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *DelegatedNetworkClientListBySubscriptionResponse) (DelegatedNetworkClientListBySubscriptionResponse, error) {
			var req *policy.Request
			var err error
			if page == nil {
				req, err = client.listBySubscriptionCreateRequest(ctx, options)
			} else {
				req, err = runtime.NewRequest(ctx, http.MethodGet, *page.NextLink)
			}
			if err != nil {
				return DelegatedNetworkClientListBySubscriptionResponse{}, err
			}
			resp, err := client.pl.Do(req)
			if err != nil {
				return DelegatedNetworkClientListBySubscriptionResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return DelegatedNetworkClientListBySubscriptionResponse{}, runtime.NewResponseError(resp)
			}
			return client.listBySubscriptionHandleResponse(resp)
		},
	})
}

// listBySubscriptionCreateRequest creates the ListBySubscription request.
func (client *DelegatedNetworkClient) listBySubscriptionCreateRequest(ctx context.Context, options *DelegatedNetworkClientListBySubscriptionOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.DelegatedNetwork/controllers"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-03-15")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listBySubscriptionHandleResponse handles the ListBySubscription response.
func (client *DelegatedNetworkClient) listBySubscriptionHandleResponse(resp *http.Response) (DelegatedNetworkClientListBySubscriptionResponse, error) {
	result := DelegatedNetworkClientListBySubscriptionResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.DelegatedControllers); err != nil {
		return DelegatedNetworkClientListBySubscriptionResponse{}, err
	}
	return result, nil
}
