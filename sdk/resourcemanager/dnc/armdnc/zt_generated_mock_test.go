//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armdnc_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/dnc/armdnc"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestController_GetDetails(t *testing.T) {
	// From example specification/dnc/resource-manager/Microsoft.DelegatedNetwork/stable/2021-03-15/examples/getController.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get details of a controller"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdnc.NewControllerClient("613192d7-503f-477a-9cfe-4efc3ee2bd60", cred, &options)
	res, err := client.GetDetails(ctx,
		"TestRG",
		"testcontroller",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/dnc/resource-manager/Microsoft.DelegatedNetwork/stable/2021-03-15/examples/getController.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdnc.DelegatedController{
			Name:     to.Ptr("testcontroller"),
			Type:     to.Ptr("Microsoft.DelegatedNetwork/controller"),
			ID:       to.Ptr("/subscriptions/613192d7-503f-477a-9cfe-4efc3ee2bd60/resourceGroups/TestRG/providers/Microsoft.DelegatedNetwork/controller/testcontroller"),
			Location: to.Ptr("West US"),
			Properties: &armdnc.DelegatedControllerProperties{
				DncAppID:          to.Ptr("ac1192d7-503f-477a-9cfe-4efc3ee2bd60"),
				DncEndpoint:       to.Ptr("https://orch.useast.dnc.azure.com"),
				DncTenantID:       to.Ptr("66192d7-503f-477a-9cfe-4efc3ee2bd60"),
				ProvisioningState: to.Ptr(armdnc.ControllerStateSucceeded),
				ResourceGUID:      to.Ptr("5a82cbcf-e8ea-4175-ac2b-ad36a73f9801"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DelegatedController) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DelegatedController)
			t.Fatalf("Mock response is not equal to example response for example specification/dnc/resource-manager/Microsoft.DelegatedNetwork/stable/2021-03-15/examples/getController.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestController_Create(t *testing.T) {
	// From example specification/dnc/resource-manager/Microsoft.DelegatedNetwork/stable/2021-03-15/examples/putController.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create controller"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdnc.NewControllerClient("613192d7-503f-477a-9cfe-4efc3ee2bd60", cred, &options)
	poller, err := client.BeginCreate(ctx,
		"TestRG",
		"testcontroller",
		armdnc.DelegatedController{
			Location: to.Ptr("West US"),
		},
		&armdnc.ControllerClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/dnc/resource-manager/Microsoft.DelegatedNetwork/stable/2021-03-15/examples/putController.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/dnc/resource-manager/Microsoft.DelegatedNetwork/stable/2021-03-15/examples/putController.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdnc.DelegatedController{
			Name:     to.Ptr("testcontroller"),
			Type:     to.Ptr("Microsoft.DelegatedNetwork/controller"),
			ID:       to.Ptr("/subscriptions/613192d7-503f-477a-9cfe-4efc3ee2bd60/resourceGroups/TestRG/providers/Microsoft.DelegatedNetwork/controller/testcontroller"),
			Location: to.Ptr("West US"),
			Properties: &armdnc.DelegatedControllerProperties{
				DncAppID:          to.Ptr("ac1192d7-503f-477a-9cfe-4efc3ee2bd60"),
				DncEndpoint:       to.Ptr("https://orch.useast.dnc.azure.com"),
				DncTenantID:       to.Ptr("66192d7-503f-477a-9cfe-4efc3ee2bd60"),
				ProvisioningState: to.Ptr(armdnc.ControllerStateSucceeded),
				ResourceGUID:      to.Ptr("5a82cbcf-e8ea-4175-ac2b-ad36a73f9801"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DelegatedController) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DelegatedController)
			t.Fatalf("Mock response is not equal to example response for example specification/dnc/resource-manager/Microsoft.DelegatedNetwork/stable/2021-03-15/examples/putController.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestController_Delete(t *testing.T) {
	// From example specification/dnc/resource-manager/Microsoft.DelegatedNetwork/stable/2021-03-15/examples/deleteController.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete controller"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdnc.NewControllerClient("613192d7-503f-477a-9cfe-4efc3ee2bd60", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"TestRG",
		"testcontroller",
		&armdnc.ControllerClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/dnc/resource-manager/Microsoft.DelegatedNetwork/stable/2021-03-15/examples/deleteController.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/dnc/resource-manager/Microsoft.DelegatedNetwork/stable/2021-03-15/examples/deleteController.json: %v", err)
	}
}

func TestController_Patch(t *testing.T) {
	// From example specification/dnc/resource-manager/Microsoft.DelegatedNetwork/stable/2021-03-15/examples/patchController.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"update controller"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdnc.NewControllerClient("613192d7-503f-477a-9cfe-4efc3ee2bd60", cred, &options)
	res, err := client.Patch(ctx,
		"TestRG",
		"testcontroller",
		armdnc.ControllerResourceUpdateParameters{
			Tags: map[string]*string{
				"key": to.Ptr("value"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/dnc/resource-manager/Microsoft.DelegatedNetwork/stable/2021-03-15/examples/patchController.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdnc.DelegatedController{
			Name:     to.Ptr("testcontroller"),
			Type:     to.Ptr("Microsoft.DelegatedNetwork/controller"),
			ID:       to.Ptr("/subscriptions/613192d7-503f-477a-9cfe-4efc3ee2bd60/resourceGroups/TestRG/providers/Microsoft.DelegatedNetwork/controller/testcontroller"),
			Location: to.Ptr("West US"),
			Tags: map[string]*string{
				"key": to.Ptr("value"),
			},
			Properties: &armdnc.DelegatedControllerProperties{
				DncAppID:          to.Ptr("ac1192d7-503f-477a-9cfe-4efc3ee2bd60"),
				DncEndpoint:       to.Ptr("https://orch.useast.dnc.azure.com"),
				DncTenantID:       to.Ptr("66192d7-503f-477a-9cfe-4efc3ee2bd60"),
				ProvisioningState: to.Ptr(armdnc.ControllerStateSucceeded),
				ResourceGUID:      to.Ptr("5a82cbcf-e8ea-4175-ac2b-ad36a73f9801"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DelegatedController) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DelegatedController)
			t.Fatalf("Mock response is not equal to example response for example specification/dnc/resource-manager/Microsoft.DelegatedNetwork/stable/2021-03-15/examples/patchController.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDelegatedNetwork_ListBySubscription(t *testing.T) {
	// From example specification/dnc/resource-manager/Microsoft.DelegatedNetwork/stable/2021-03-15/examples/controllerListBySub.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get DelegatedController resources by subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdnc.NewDelegatedNetworkClient("50016170-c839-41ba-a724-51e9df440b9e", cred, &options)
	pager := client.ListBySubscription(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/dnc/resource-manager/Microsoft.DelegatedNetwork/stable/2021-03-15/examples/controllerListBySub.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdnc.DelegatedControllers{
			Value: []*armdnc.DelegatedController{
				{
					Name:     to.Ptr("testcontroller"),
					Type:     to.Ptr("Microsoft.DelegatedNetwork/controller"),
					ID:       to.Ptr("/subscriptions/613192d7-503f-477a-9cfe-4efc3ee2bd60/resourceGroups/TestRG/providers/Microsoft.DelegatedNetwork/controller/testcontroller"),
					Location: to.Ptr("West US"),
					Properties: &armdnc.DelegatedControllerProperties{
						DncAppID:          to.Ptr("ac1192d7-503f-477a-9cfe-4efc3ee2bd60"),
						DncEndpoint:       to.Ptr("https://orch.useast.dnc.azure.com"),
						DncTenantID:       to.Ptr("66192d7-503f-477a-9cfe-4efc3ee2bd60"),
						ProvisioningState: to.Ptr(armdnc.ControllerStateSucceeded),
						ResourceGUID:      to.Ptr("5a82cbcf-e8ea-4175-ac2b-ad36a73f9801"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DelegatedControllers) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DelegatedControllers)
			t.Fatalf("Mock response is not equal to example response for example specification/dnc/resource-manager/Microsoft.DelegatedNetwork/stable/2021-03-15/examples/controllerListBySub.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDelegatedNetwork_ListByResourceGroup(t *testing.T) {
	// From example specification/dnc/resource-manager/Microsoft.DelegatedNetwork/stable/2021-03-15/examples/controllerListByRG.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get DelegatedNetwork resources by resource group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdnc.NewDelegatedNetworkClient("50016170-c839-41ba-a724-51e9df440b9e", cred, &options)
	pager := client.ListByResourceGroup("testRG",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/dnc/resource-manager/Microsoft.DelegatedNetwork/stable/2021-03-15/examples/controllerListByRG.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdnc.DelegatedControllers{
			Value: []*armdnc.DelegatedController{
				{
					Name:     to.Ptr("testcontroller"),
					Type:     to.Ptr("Microsoft.DelegatedNetwork/controller"),
					ID:       to.Ptr("/subscriptions/613192d7-503f-477a-9cfe-4efc3ee2bd60/resourceGroups/TestRG/providers/Microsoft.DelegatedNetwork/controller/testcontroller"),
					Location: to.Ptr("West US"),
					Properties: &armdnc.DelegatedControllerProperties{
						DncAppID:          to.Ptr("ac1192d7-503f-477a-9cfe-4efc3ee2bd60"),
						DncEndpoint:       to.Ptr("https://orch.useast.dnc.azure.com"),
						DncTenantID:       to.Ptr("66192d7-503f-477a-9cfe-4efc3ee2bd60"),
						ProvisioningState: to.Ptr(armdnc.ControllerStateSucceeded),
						ResourceGUID:      to.Ptr("5a82cbcf-e8ea-4175-ac2b-ad36a73f9801"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DelegatedControllers) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DelegatedControllers)
			t.Fatalf("Mock response is not equal to example response for example specification/dnc/resource-manager/Microsoft.DelegatedNetwork/stable/2021-03-15/examples/controllerListByRG.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOrchestratorInstanceService_GetDetails(t *testing.T) {
	// From example specification/dnc/resource-manager/Microsoft.DelegatedNetwork/stable/2021-03-15/examples/getOrchestrator.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get details of a orchestratorInstance"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdnc.NewOrchestratorInstanceServiceClient("613192d7-503f-477a-9cfe-4efc3ee2bd60", cred, &options)
	res, err := client.GetDetails(ctx,
		"TestRG",
		"testk8s1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/dnc/resource-manager/Microsoft.DelegatedNetwork/stable/2021-03-15/examples/getOrchestrator.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdnc.Orchestrator{
			Name: to.Ptr("testk8s1"),
			Type: to.Ptr("Microsoft.DelegatedNetwork/orchestrators"),
			ID:   to.Ptr("/subscriptions/613192d7-503f-477a-9cfe-4efc3ee2bd60/resourceGroups/TestRG/providers/Microsoft.DelegatedNetwork/orchestrators/testk8s1"),
			Identity: &armdnc.OrchestratorIdentity{
				Type:        to.Ptr(armdnc.ResourceIdentityTypeSystemAssigned),
				PrincipalID: to.Ptr("7a2192d7-503f-477a-9cfe-4efc3ee2bd60"),
				TenantID:    to.Ptr("3e2192d7-503f-477a-9cfe-4efc3ee2bd60"),
			},
			Kind:     to.Ptr(armdnc.OrchestratorKindKubernetes),
			Location: to.Ptr("West US"),
			Properties: &armdnc.OrchestratorResourceProperties{
				APIServerEndpoint: to.Ptr("https://testk8s.cloudapp.net"),
				ClusterRootCA:     to.Ptr("ddsadsad344mfdsfdl"),
				ControllerDetails: &armdnc.ControllerDetails{
					ID: to.Ptr("/subscriptions/613192d7-503f-477a-9cfe-4efc3ee2bd60/resourceGroups/TestRG/providers/Microsoft.DelegatedNetwork/controller/testcontroller"),
				},
				OrchestratorAppID:     to.Ptr("546192d7-503f-477a-9cfe-4efc3ee2b6e1"),
				OrchestratorTenantID:  to.Ptr("da6192d7-503f-477a-9cfe-4efc3ee2b6c3"),
				PrivateLinkResourceID: to.Ptr("/subscriptions/d21192d7-503f-477a-9cfe-4efc3ee2bd60/resourceGroups/plrg/Microsoft.Network/PrivateLink/pl1"),
				ProvisioningState:     to.Ptr(armdnc.OrchestratorInstanceStateSucceeded),
				ResourceGUID:          to.Ptr("1b2192d7-503f-477a-9cfe-4efc3ee2bd60"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Orchestrator) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Orchestrator)
			t.Fatalf("Mock response is not equal to example response for example specification/dnc/resource-manager/Microsoft.DelegatedNetwork/stable/2021-03-15/examples/getOrchestrator.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOrchestratorInstanceService_Create(t *testing.T) {
	// From example specification/dnc/resource-manager/Microsoft.DelegatedNetwork/stable/2021-03-15/examples/putOrchestrator.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create orchestrator instance"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdnc.NewOrchestratorInstanceServiceClient("613192d7-503f-477a-9cfe-4efc3ee2bd60", cred, &options)
	poller, err := client.BeginCreate(ctx,
		"TestRG",
		"testk8s1",
		armdnc.Orchestrator{
			Identity: &armdnc.OrchestratorIdentity{
				Type: to.Ptr(armdnc.ResourceIdentityTypeSystemAssigned),
			},
			Kind:     to.Ptr(armdnc.OrchestratorKindKubernetes),
			Location: to.Ptr("West US"),
			Properties: &armdnc.OrchestratorResourceProperties{
				APIServerEndpoint: to.Ptr("https://testk8s.cloudapp.net"),
				ClusterRootCA:     to.Ptr("ddsadsad344mfdsfdl"),
				ControllerDetails: &armdnc.ControllerDetails{
					ID: to.Ptr("/subscriptions/613192d7-503f-477a-9cfe-4efc3ee2bd60/resourceGroups/TestRG/providers/Microsoft.DelegatedNetwork/controller/testcontroller"),
				},
				OrchestratorAppID:     to.Ptr("546192d7-503f-477a-9cfe-4efc3ee2b6e1"),
				OrchestratorTenantID:  to.Ptr("da6192d7-503f-477a-9cfe-4efc3ee2b6c3"),
				PrivateLinkResourceID: to.Ptr("/subscriptions/613192d7-503f-477a-9cfe-4efc3ee2bd60/resourceGroups/TestRG/providers/Microsoft.Network/privateLinkServices/plresource1"),
			},
		},
		&armdnc.OrchestratorInstanceServiceClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/dnc/resource-manager/Microsoft.DelegatedNetwork/stable/2021-03-15/examples/putOrchestrator.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/dnc/resource-manager/Microsoft.DelegatedNetwork/stable/2021-03-15/examples/putOrchestrator.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdnc.Orchestrator{
			Name: to.Ptr("testk8s1"),
			Type: to.Ptr("Microsoft.DelegatedNetwork/orchestrators"),
			ID:   to.Ptr("/subscriptions/613192d7-503f-477a-9cfe-4efc3ee2bd60/resourceGroups/TestRG/providers/Microsoft.DelegatedNetwork/orchestrators/testk8s1"),
			Identity: &armdnc.OrchestratorIdentity{
				Type:        to.Ptr(armdnc.ResourceIdentityTypeSystemAssigned),
				PrincipalID: to.Ptr("7a2192d7-503f-477a-9cfe-4efc3ee2bd60"),
				TenantID:    to.Ptr("3e2192d7-503f-477a-9cfe-4efc3ee2bd60"),
			},
			Kind:     to.Ptr(armdnc.OrchestratorKindKubernetes),
			Location: to.Ptr("West US"),
			Properties: &armdnc.OrchestratorResourceProperties{
				APIServerEndpoint: to.Ptr("https://testk8s.cloudapp.net"),
				ClusterRootCA:     to.Ptr("ddsadsad344mfdsfdl"),
				ControllerDetails: &armdnc.ControllerDetails{
					ID: to.Ptr("/subscriptions/613192d7-503f-477a-9cfe-4efc3ee2bd60/resourceGroups/TestRG/providers/Microsoft.DelegatedNetwork/controller/testcontroller"),
				},
				OrchestratorAppID:     to.Ptr("546192d7-503f-477a-9cfe-4efc3ee2b6e1"),
				OrchestratorTenantID:  to.Ptr("da6192d7-503f-477a-9cfe-4efc3ee2b6c3"),
				PrivateLinkResourceID: to.Ptr("/subscriptions/d21192d7-503f-477a-9cfe-4efc3ee2bd60/resourceGroups/plrg/Microsoft.Network/PrivateLink/pl1"),
				ProvisioningState:     to.Ptr(armdnc.OrchestratorInstanceStateSucceeded),
				ResourceGUID:          to.Ptr("1b2192d7-503f-477a-9cfe-4efc3ee2bd60"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Orchestrator) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Orchestrator)
			t.Fatalf("Mock response is not equal to example response for example specification/dnc/resource-manager/Microsoft.DelegatedNetwork/stable/2021-03-15/examples/putOrchestrator.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOrchestratorInstanceService_Delete(t *testing.T) {
	// From example specification/dnc/resource-manager/Microsoft.DelegatedNetwork/stable/2021-03-15/examples/deleteOrchestrator.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete Orchestrator Instance"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdnc.NewOrchestratorInstanceServiceClient("613192d7-503f-477a-9cfe-4efc3ee2bd60", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"TestRG",
		"k8stest1",
		&armdnc.OrchestratorInstanceServiceClientBeginDeleteOptions{ForceDelete: nil,
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/dnc/resource-manager/Microsoft.DelegatedNetwork/stable/2021-03-15/examples/deleteOrchestrator.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/dnc/resource-manager/Microsoft.DelegatedNetwork/stable/2021-03-15/examples/deleteOrchestrator.json: %v", err)
	}
}

func TestOrchestratorInstanceService_Patch(t *testing.T) {
	// From example specification/dnc/resource-manager/Microsoft.DelegatedNetwork/stable/2021-03-15/examples/patchOrchestrator.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"update Orchestrator Instance"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdnc.NewOrchestratorInstanceServiceClient("613192d7-503f-477a-9cfe-4efc3ee2bd60", cred, &options)
	res, err := client.Patch(ctx,
		"TestRG",
		"testk8s1",
		armdnc.OrchestratorResourceUpdateParameters{
			Tags: map[string]*string{
				"key": to.Ptr("value"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/dnc/resource-manager/Microsoft.DelegatedNetwork/stable/2021-03-15/examples/patchOrchestrator.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdnc.Orchestrator{
			Name: to.Ptr("testk8s1"),
			Type: to.Ptr("Microsoft.DelegatedNetwork/orchestrators"),
			ID:   to.Ptr("/subscriptions/613192d7-503f-477a-9cfe-4efc3ee2bd60/resourceGroups/TestRG/providers/Microsoft.DelegatedNetwork/orchestrators/testk8s1"),
			Identity: &armdnc.OrchestratorIdentity{
				Type:        to.Ptr(armdnc.ResourceIdentityTypeSystemAssigned),
				PrincipalID: to.Ptr("7a2192d7-503f-477a-9cfe-4efc3ee2bd60"),
				TenantID:    to.Ptr("3e2192d7-503f-477a-9cfe-4efc3ee2bd60"),
			},
			Kind:     to.Ptr(armdnc.OrchestratorKindKubernetes),
			Location: to.Ptr("West US"),
			Tags: map[string]*string{
				"key": to.Ptr("value"),
			},
			Properties: &armdnc.OrchestratorResourceProperties{
				APIServerEndpoint: to.Ptr("https://testk8s.cloudapp.net"),
				ClusterRootCA:     to.Ptr("ddsadsad344mfdsfdl"),
				ControllerDetails: &armdnc.ControllerDetails{
					ID: to.Ptr("/subscriptions/613192d7-503f-477a-9cfe-4efc3ee2bd60/resourceGroups/TestRG/providers/Microsoft.DelegatedNetwork/controller/testcontroller"),
				},
				OrchestratorAppID:     to.Ptr("546192d7-503f-477a-9cfe-4efc3ee2b6e1"),
				OrchestratorTenantID:  to.Ptr("da6192d7-503f-477a-9cfe-4efc3ee2b6c3"),
				PrivateLinkResourceID: to.Ptr("/subscriptions/d21192d7-503f-477a-9cfe-4efc3ee2bd60/resourceGroups/plrg/Microsoft.Network/PrivateLink/pl1"),
				ProvisioningState:     to.Ptr(armdnc.OrchestratorInstanceStateSucceeded),
				ResourceGUID:          to.Ptr("1b2192d7-503f-477a-9cfe-4efc3ee2bd60"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Orchestrator) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Orchestrator)
			t.Fatalf("Mock response is not equal to example response for example specification/dnc/resource-manager/Microsoft.DelegatedNetwork/stable/2021-03-15/examples/patchOrchestrator.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOrchestratorInstanceService_ListBySubscription(t *testing.T) {
	// From example specification/dnc/resource-manager/Microsoft.DelegatedNetwork/stable/2021-03-15/examples/orchestratorInstanceListBySub.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get orchestratorInstance resources by subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdnc.NewOrchestratorInstanceServiceClient("50016170-c839-41ba-a724-51e9df440b9e", cred, &options)
	pager := client.ListBySubscription(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/dnc/resource-manager/Microsoft.DelegatedNetwork/stable/2021-03-15/examples/orchestratorInstanceListBySub.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdnc.Orchestrators{
			Value: []*armdnc.Orchestrator{
				{
					Name: to.Ptr("testk8s1"),
					Type: to.Ptr("Microsoft.DelegatedNetwork/orchestrators"),
					ID:   to.Ptr("/subscriptions/613192d7-503f-477a-9cfe-4efc3ee2bd60/resourceGroups/TestRG/providers/Microsoft.DelegatedNetwork/orchestrators/testk8s1"),
					Identity: &armdnc.OrchestratorIdentity{
						Type:        to.Ptr(armdnc.ResourceIdentityTypeSystemAssigned),
						PrincipalID: to.Ptr("7a2192d7-503f-477a-9cfe-4efc3ee2bd60"),
						TenantID:    to.Ptr("3e2192d7-503f-477a-9cfe-4efc3ee2bd60"),
					},
					Kind:     to.Ptr(armdnc.OrchestratorKindKubernetes),
					Location: to.Ptr("West US"),
					Properties: &armdnc.OrchestratorResourceProperties{
						APIServerEndpoint: to.Ptr("https://testk8s.cloudapp.net"),
						ClusterRootCA:     to.Ptr("ddsadsad344mfdsfdl"),
						ControllerDetails: &armdnc.ControllerDetails{
							ID: to.Ptr("/subscriptions/613192d7-503f-477a-9cfe-4efc3ee2bd60/resourceGroups/TestRG/providers/Microsoft.DelegatedNetwork/controller/testcontroller"),
						},
						OrchestratorAppID:     to.Ptr("546192d7-503f-477a-9cfe-4efc3ee2b6e1"),
						OrchestratorTenantID:  to.Ptr("da6192d7-503f-477a-9cfe-4efc3ee2b6c3"),
						PrivateLinkResourceID: to.Ptr("/subscriptions/d21192d7-503f-477a-9cfe-4efc3ee2bd60/resourceGroups/plrg/Microsoft.Network/PrivateLink/pl1"),
						ProvisioningState:     to.Ptr(armdnc.OrchestratorInstanceStateSucceeded),
						ResourceGUID:          to.Ptr("1b2192d7-503f-477a-9cfe-4efc3ee2bd60"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.Orchestrators) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.Orchestrators)
			t.Fatalf("Mock response is not equal to example response for example specification/dnc/resource-manager/Microsoft.DelegatedNetwork/stable/2021-03-15/examples/orchestratorInstanceListBySub.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOrchestratorInstanceService_ListByResourceGroup(t *testing.T) {
	// From example specification/dnc/resource-manager/Microsoft.DelegatedNetwork/stable/2021-03-15/examples/orchestratorInstanceListByRG.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get OrchestratorInstance resources by resource group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdnc.NewOrchestratorInstanceServiceClient("50016170-c839-41ba-a724-51e9df440b9e", cred, &options)
	pager := client.ListByResourceGroup("testRG",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/dnc/resource-manager/Microsoft.DelegatedNetwork/stable/2021-03-15/examples/orchestratorInstanceListByRG.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdnc.Orchestrators{
			Value: []*armdnc.Orchestrator{
				{
					Name: to.Ptr("testk8s1"),
					Type: to.Ptr("Microsoft.DelegatedNetwork/orchestrators"),
					ID:   to.Ptr("/subscriptions/613192d7-503f-477a-9cfe-4efc3ee2bd60/resourceGroups/TestRG/providers/Microsoft.DelegatedNetwork/orchestrators/testk8s1"),
					Identity: &armdnc.OrchestratorIdentity{
						Type:        to.Ptr(armdnc.ResourceIdentityTypeSystemAssigned),
						PrincipalID: to.Ptr("7a2192d7-503f-477a-9cfe-4efc3ee2bd60"),
						TenantID:    to.Ptr("3e2192d7-503f-477a-9cfe-4efc3ee2bd60"),
					},
					Kind:     to.Ptr(armdnc.OrchestratorKindKubernetes),
					Location: to.Ptr("West US"),
					Properties: &armdnc.OrchestratorResourceProperties{
						APIServerEndpoint: to.Ptr("https://testk8s.cloudapp.net"),
						ClusterRootCA:     to.Ptr("ddsadsad344mfdsfdl"),
						ControllerDetails: &armdnc.ControllerDetails{
							ID: to.Ptr("/subscriptions/613192d7-503f-477a-9cfe-4efc3ee2bd60/resourceGroups/TestRG/providers/Microsoft.DelegatedNetwork/controller/testcontroller"),
						},
						OrchestratorAppID:     to.Ptr("546192d7-503f-477a-9cfe-4efc3ee2b6e1"),
						OrchestratorTenantID:  to.Ptr("da6192d7-503f-477a-9cfe-4efc3ee2b6c3"),
						PrivateLinkResourceID: to.Ptr("/subscriptions/d21192d7-503f-477a-9cfe-4efc3ee2bd60/resourceGroups/plrg/Microsoft.Network/PrivateLink/pl1"),
						ProvisioningState:     to.Ptr(armdnc.OrchestratorInstanceStateSucceeded),
						ResourceGUID:          to.Ptr("1b2192d7-503f-477a-9cfe-4efc3ee2bd60"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.Orchestrators) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.Orchestrators)
			t.Fatalf("Mock response is not equal to example response for example specification/dnc/resource-manager/Microsoft.DelegatedNetwork/stable/2021-03-15/examples/orchestratorInstanceListByRG.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDelegatedSubnetService_GetDetails(t *testing.T) {
	// From example specification/dnc/resource-manager/Microsoft.DelegatedNetwork/stable/2021-03-15/examples/getDelegatedSubnet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get details of a delegated subnet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdnc.NewDelegatedSubnetServiceClient("613192d7-503f-477a-9cfe-4efc3ee2bd60", cred, &options)
	res, err := client.GetDetails(ctx,
		"TestRG",
		"delegated1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/dnc/resource-manager/Microsoft.DelegatedNetwork/stable/2021-03-15/examples/getDelegatedSubnet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdnc.DelegatedSubnet{
			Name:     to.Ptr("delegated1"),
			Type:     to.Ptr("Microsoft.DelegatedNetwork/delegatedSubnets"),
			ID:       to.Ptr("/subscriptions/613192d7-503f-477a-9cfe-4efc3ee2bd60/resourceGroups/TestRG/providers/Microsoft.DelegatedNetwork/delegatedSubnets/delegated1"),
			Location: to.Ptr("West US"),
			Properties: &armdnc.DelegatedSubnetProperties{
				ControllerDetails: &armdnc.ControllerDetails{
					ID: to.Ptr("/subscriptions/613192d7-503f-477a-9cfe-4efc3ee2bd60/resourceGroups/TestRG/providers/Microsoft.DelegatedNetwork/controller/dnctestcontroller"),
				},
				ProvisioningState: to.Ptr(armdnc.DelegatedSubnetStateSucceeded),
				ResourceGUID:      to.Ptr("5a82cbcf-e8ea-4175-ac2b-ad36a73f9801"),
				SubnetDetails: &armdnc.SubnetDetails{
					ID: to.Ptr("/subscriptions/613192d7-503f-477a-9cfe-4efc3ee2bd60/resourceGroups/TestRG/providers/Microsoft.Network/virtualNetworks/testvnet/subnets/testsubnet"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DelegatedSubnet) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DelegatedSubnet)
			t.Fatalf("Mock response is not equal to example response for example specification/dnc/resource-manager/Microsoft.DelegatedNetwork/stable/2021-03-15/examples/getDelegatedSubnet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDelegatedSubnetService_PutDetails(t *testing.T) {
	// From example specification/dnc/resource-manager/Microsoft.DelegatedNetwork/stable/2021-03-15/examples/putDelegatedSubnet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"put delegated subnet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdnc.NewDelegatedSubnetServiceClient("613192d7-503f-477a-9cfe-4efc3ee2bd60", cred, &options)
	poller, err := client.BeginPutDetails(ctx,
		"TestRG",
		"delegated1",
		armdnc.DelegatedSubnet{
			Location: to.Ptr("West US"),
			Properties: &armdnc.DelegatedSubnetProperties{
				ControllerDetails: &armdnc.ControllerDetails{
					ID: to.Ptr("/subscriptions/613192d7-503f-477a-9cfe-4efc3ee2bd60/resourceGroups/TestRG/providers/Microsoft.DelegatedNetwork/controller/dnctestcontroller"),
				},
				SubnetDetails: &armdnc.SubnetDetails{
					ID: to.Ptr("/subscriptions/613192d7-503f-477a-9cfe-4efc3ee2bd60/resourceGroups/TestRG/providers/Microsoft.Network/virtualNetworks/testvnet/subnets/testsubnet"),
				},
			},
		},
		&armdnc.DelegatedSubnetServiceClientBeginPutDetailsOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/dnc/resource-manager/Microsoft.DelegatedNetwork/stable/2021-03-15/examples/putDelegatedSubnet.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/dnc/resource-manager/Microsoft.DelegatedNetwork/stable/2021-03-15/examples/putDelegatedSubnet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdnc.DelegatedSubnet{
			Name:     to.Ptr("delegated1"),
			Type:     to.Ptr("Microsoft.DelegatedNetwork/delegatedSubnets"),
			ID:       to.Ptr("/subscriptions/613192d7-503f-477a-9cfe-4efc3ee2bd60/resourceGroups/TestRG/providers/Microsoft.DelegatedNetwork/delegatedSubnets/delegated1"),
			Location: to.Ptr("West US"),
			Properties: &armdnc.DelegatedSubnetProperties{
				ControllerDetails: &armdnc.ControllerDetails{
					ID: to.Ptr("/subscriptions/613192d7-503f-477a-9cfe-4efc3ee2bd60/resourceGroups/TestRG/providers/Microsoft.DelegatedNetwork/controller/dnctestcontroller"),
				},
				ProvisioningState: to.Ptr(armdnc.DelegatedSubnetStateSucceeded),
				ResourceGUID:      to.Ptr("5a82cbcf-e8ea-4175-ac2b-ad36a73f9801"),
				SubnetDetails: &armdnc.SubnetDetails{
					ID: to.Ptr("/subscriptions/613192d7-503f-477a-9cfe-4efc3ee2bd60/resourceGroups/TestRG/providers/Microsoft.Network/virtualNetworks/testvnet/subnets/testsubnet"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DelegatedSubnet) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DelegatedSubnet)
			t.Fatalf("Mock response is not equal to example response for example specification/dnc/resource-manager/Microsoft.DelegatedNetwork/stable/2021-03-15/examples/putDelegatedSubnet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDelegatedSubnetService_PatchDetails(t *testing.T) {
	// From example specification/dnc/resource-manager/Microsoft.DelegatedNetwork/stable/2021-03-15/examples/patchDelegatedSubnet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"patch delegated subnet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdnc.NewDelegatedSubnetServiceClient("613192d7-503f-477a-9cfe-4efc3ee2bd60", cred, &options)
	poller, err := client.BeginPatchDetails(ctx,
		"TestRG",
		"delegated1",
		armdnc.ResourceUpdateParameters{
			Tags: map[string]*string{
				"key": to.Ptr("value"),
			},
		},
		&armdnc.DelegatedSubnetServiceClientBeginPatchDetailsOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/dnc/resource-manager/Microsoft.DelegatedNetwork/stable/2021-03-15/examples/patchDelegatedSubnet.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/dnc/resource-manager/Microsoft.DelegatedNetwork/stable/2021-03-15/examples/patchDelegatedSubnet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdnc.DelegatedSubnet{
			Name:     to.Ptr("delegated1"),
			Type:     to.Ptr("Microsoft.DelegatedNetwork/delegatedSubnets"),
			ID:       to.Ptr("/subscriptions/613192d7-503f-477a-9cfe-4efc3ee2bd60/resourceGroups/TestRG/providers/Microsoft.DelegatedNetwork/delegatedSubnets/delegated1"),
			Location: to.Ptr("West US"),
			Tags: map[string]*string{
				"key": to.Ptr("value"),
			},
			Properties: &armdnc.DelegatedSubnetProperties{
				ControllerDetails: &armdnc.ControllerDetails{
					ID: to.Ptr("/subscriptions/613192d7-503f-477a-9cfe-4efc3ee2bd60/resourceGroups/TestRG/providers/Microsoft.DelegatedNetwork/controller/dnctestcontroller"),
				},
				ProvisioningState: to.Ptr(armdnc.DelegatedSubnetStateSucceeded),
				ResourceGUID:      to.Ptr("5a82cbcf-e8ea-4175-ac2b-ad36a73f9801"),
				SubnetDetails: &armdnc.SubnetDetails{
					ID: to.Ptr("/subscriptions/613192d7-503f-477a-9cfe-4efc3ee2bd60/resourceGroups/TestRG/providers/Microsoft.Network/virtualNetworks/testvnet/subnets/testsubnet"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DelegatedSubnet) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DelegatedSubnet)
			t.Fatalf("Mock response is not equal to example response for example specification/dnc/resource-manager/Microsoft.DelegatedNetwork/stable/2021-03-15/examples/patchDelegatedSubnet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDelegatedSubnetService_DeleteDetails(t *testing.T) {
	// From example specification/dnc/resource-manager/Microsoft.DelegatedNetwork/stable/2021-03-15/examples/deleteDelegatedSubnet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"delete delegated subnet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdnc.NewDelegatedSubnetServiceClient("613192d7-503f-477a-9cfe-4efc3ee2bd60", cred, &options)
	poller, err := client.BeginDeleteDetails(ctx,
		"TestRG",
		"delegated1",
		&armdnc.DelegatedSubnetServiceClientBeginDeleteDetailsOptions{ForceDelete: nil,
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/dnc/resource-manager/Microsoft.DelegatedNetwork/stable/2021-03-15/examples/deleteDelegatedSubnet.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/dnc/resource-manager/Microsoft.DelegatedNetwork/stable/2021-03-15/examples/deleteDelegatedSubnet.json: %v", err)
	}
}

func TestDelegatedSubnetService_ListBySubscription(t *testing.T) {
	// From example specification/dnc/resource-manager/Microsoft.DelegatedNetwork/stable/2021-03-15/examples/delegatedSubnetListBySub.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get DelegatedSubnets resources by subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdnc.NewDelegatedSubnetServiceClient("50016170-c839-41ba-a724-51e9df440b9e", cred, &options)
	pager := client.ListBySubscription(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/dnc/resource-manager/Microsoft.DelegatedNetwork/stable/2021-03-15/examples/delegatedSubnetListBySub.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdnc.DelegatedSubnets{
			Value: []*armdnc.DelegatedSubnet{
				{
					Name:     to.Ptr("delegated1"),
					Type:     to.Ptr("Microsoft.DelegatedNetwork/delegatedSubnets"),
					ID:       to.Ptr("/subscriptions/613192d7-503f-477a-9cfe-4efc3ee2bd60/resourceGroups/TestRG/providers/Microsoft.Network/virtualNetworks/testvnet/subnets/testsubnet/providers/Microsoft.DelegatedNetwork/delegatedSubnets/delegated1"),
					Location: to.Ptr("West US"),
					Properties: &armdnc.DelegatedSubnetProperties{
						ControllerDetails: &armdnc.ControllerDetails{
							ID: to.Ptr("/subscriptions/613192d7-503f-477a-9cfe-4efc3ee2bd60/resourceGroups/TestRG/providers/Microsoft.DelegatedNetwork/controller/dnctestcontroller"),
						},
						ProvisioningState: to.Ptr(armdnc.DelegatedSubnetStateSucceeded),
						ResourceGUID:      to.Ptr("5a82cbcf-e8ea-4175-ac2b-ad36a73f9801"),
						SubnetDetails: &armdnc.SubnetDetails{
							ID: to.Ptr("/subscriptions/613192d7-503f-477a-9cfe-4efc3ee2bd60/resourceGroups/TestRG/providers/Microsoft.Network/virtualNetworks/testvnet/subnets/testsubnet"),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DelegatedSubnets) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DelegatedSubnets)
			t.Fatalf("Mock response is not equal to example response for example specification/dnc/resource-manager/Microsoft.DelegatedNetwork/stable/2021-03-15/examples/delegatedSubnetListBySub.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDelegatedSubnetService_ListByResourceGroup(t *testing.T) {
	// From example specification/dnc/resource-manager/Microsoft.DelegatedNetwork/stable/2021-03-15/examples/delegatedSubnetListByRG.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get DelegatedSubnets resources by resource group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdnc.NewDelegatedSubnetServiceClient("50016170-c839-41ba-a724-51e9df440b9e", cred, &options)
	pager := client.ListByResourceGroup("testRG",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/dnc/resource-manager/Microsoft.DelegatedNetwork/stable/2021-03-15/examples/delegatedSubnetListByRG.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdnc.DelegatedSubnets{
			Value: []*armdnc.DelegatedSubnet{
				{
					Name:     to.Ptr("delegated1"),
					Type:     to.Ptr("Microsoft.DelegatedNetwork/delegatedSubnets"),
					ID:       to.Ptr("/subscriptions/613192d7-503f-477a-9cfe-4efc3ee2bd60/resourceGroups/TestRG/providers/Microsoft.DelegatedNetwork/delegatedSubnets/delegated1"),
					Location: to.Ptr("West US"),
					Properties: &armdnc.DelegatedSubnetProperties{
						ControllerDetails: &armdnc.ControllerDetails{
							ID: to.Ptr("/subscriptions/613192d7-503f-477a-9cfe-4efc3ee2bd60/resourceGroups/TestRG/providers/Microsoft.DelegatedNetwork/controller/dnctestcontroller"),
						},
						ProvisioningState: to.Ptr(armdnc.DelegatedSubnetStateSucceeded),
						ResourceGUID:      to.Ptr("5a82cbcf-e8ea-4175-ac2b-ad36a73f9801"),
						SubnetDetails: &armdnc.SubnetDetails{
							ID: to.Ptr("/subscriptions/613192d7-503f-477a-9cfe-4efc3ee2bd60/resourceGroups/TestRG/providers/Microsoft.Network/virtualNetworks/testvnet/subnets/testsubnet"),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DelegatedSubnets) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DelegatedSubnets)
			t.Fatalf("Mock response is not equal to example response for example specification/dnc/resource-manager/Microsoft.DelegatedNetwork/stable/2021-03-15/examples/delegatedSubnetListByRG.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOperations_List(t *testing.T) {
	// From example specification/dnc/resource-manager/Microsoft.DelegatedNetwork/stable/2021-03-15/examples/delegatedNetworkOperationsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get available operations"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdnc.NewOperationsClient(cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/dnc/resource-manager/Microsoft.DelegatedNetwork/stable/2021-03-15/examples/delegatedNetworkOperationsList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdnc.OperationListResult{
			Value: []*armdnc.Operation{
				{
					Name: to.Ptr("Microsoft.DelegatedNetwork/controller/write"),
					Display: &armdnc.OperationDisplay{
						Description: to.Ptr("Create or update a Controller Service instance."),
						Operation:   to.Ptr("Create or update a Controller Service instance."),
						Provider:    to.Ptr("Microsoft Delegated Network Service"),
						Resource:    to.Ptr("Microsoft Delegated Network Controller Service instance"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DelegatedNetwork/controller/read"),
					Display: &armdnc.OperationDisplay{
						Description: to.Ptr("Get a Controller Service instance."),
						Operation:   to.Ptr("Get a Controller Service instance."),
						Provider:    to.Ptr("Microsoft Delegated Network Service"),
						Resource:    to.Ptr("Microsoft Delegated Network Controller Service instance"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DelegatedNetwork/controller/delete"),
					Display: &armdnc.OperationDisplay{
						Description: to.Ptr("Delete a Controller Service instance."),
						Operation:   to.Ptr("Delete a Controller Service instance."),
						Provider:    to.Ptr("Microsoft Delegated Network Service"),
						Resource:    to.Ptr("Microsoft Delegated Network Controller Service instance"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DelegatedNetwork/orchestratorInstances/write"),
					Display: &armdnc.OperationDisplay{
						Description: to.Ptr("Create or update a orchestratorInstance."),
						Operation:   to.Ptr("Create or update a orchestratorInstance."),
						Provider:    to.Ptr("Microsoft Delegated Network Service"),
						Resource:    to.Ptr("Microsoft Delegated Network orchestratorInstance"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DelegatedNetwork/controller/read"),
					Display: &armdnc.OperationDisplay{
						Description: to.Ptr("Get a orchestratorInstance."),
						Operation:   to.Ptr("Get a orchestratorInstances."),
						Provider:    to.Ptr("Microsoft Delegated Network Service"),
						Resource:    to.Ptr("Microsoft Delegated Network orchestratorInstance"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DelegatedNetwork/controller/delete"),
					Display: &armdnc.OperationDisplay{
						Description: to.Ptr("Delete a orchestratorInstance."),
						Operation:   to.Ptr("Delete a orchestratorInstance."),
						Provider:    to.Ptr("Microsoft Delegated Network Service"),
						Resource:    to.Ptr("Microsoft Delegated Network orchestratorInstance"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DelegatedNetwork/delegatedSubnets/write"),
					Display: &armdnc.OperationDisplay{
						Description: to.Ptr("Create or update a Delegated subnet instance."),
						Operation:   to.Ptr("Create or update a Delegated subnet instance."),
						Provider:    to.Ptr("Microsoft Delegated Network Service"),
						Resource:    to.Ptr("Microsoft Delegated subnet instance"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DelegatedNetwork/delegatedSubnets/read"),
					Display: &armdnc.OperationDisplay{
						Description: to.Ptr("Get a Delegated subnet instance."),
						Operation:   to.Ptr("Get a Delegated subnet instance."),
						Provider:    to.Ptr("Microsoft Delegated Network Service"),
						Resource:    to.Ptr("Microsoft Delegated subnet instance"),
					},
				},
				{
					Name: to.Ptr("Microsoft.DelegatedNetwork/delegatedSubnets/delete"),
					Display: &armdnc.OperationDisplay{
						Description: to.Ptr("Delete a Delegated subnet instance."),
						Operation:   to.Ptr("Delete a Delegated subnet instance."),
						Provider:    to.Ptr("Microsoft Delegated Network Controller Service"),
						Resource:    to.Ptr("Microsoft Delegated subnet instance"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OperationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OperationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/dnc/resource-manager/Microsoft.DelegatedNetwork/stable/2021-03-15/examples/delegatedNetworkOperationsList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
