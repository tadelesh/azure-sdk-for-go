//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armdnc

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
)

// ControllerClientCreatePoller provides polling facilities until the operation reaches a terminal state.
type ControllerClientCreatePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *ControllerClientCreatePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *ControllerClientCreatePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final ControllerClientCreateResponse will be returned.
func (p *ControllerClientCreatePoller) FinalResponse(ctx context.Context) (ControllerClientCreateResponse, error) {
	respType := ControllerClientCreateResponse{}
	_, err := p.pt.FinalResponse(ctx, &respType.DelegatedController)
	if err != nil {
		return ControllerClientCreateResponse{}, err
	}
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *ControllerClientCreatePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// ControllerClientDeletePoller provides polling facilities until the operation reaches a terminal state.
type ControllerClientDeletePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *ControllerClientDeletePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *ControllerClientDeletePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final ControllerClientDeleteResponse will be returned.
func (p *ControllerClientDeletePoller) FinalResponse(ctx context.Context) (ControllerClientDeleteResponse, error) {
	respType := ControllerClientDeleteResponse{}
	_, err := p.pt.FinalResponse(ctx, nil)
	if err != nil {
		return ControllerClientDeleteResponse{}, err
	}
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *ControllerClientDeletePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// DelegatedSubnetServiceClientDeleteDetailsPoller provides polling facilities until the operation reaches a terminal state.
type DelegatedSubnetServiceClientDeleteDetailsPoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *DelegatedSubnetServiceClientDeleteDetailsPoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *DelegatedSubnetServiceClientDeleteDetailsPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final DelegatedSubnetServiceClientDeleteDetailsResponse will be returned.
func (p *DelegatedSubnetServiceClientDeleteDetailsPoller) FinalResponse(ctx context.Context) (DelegatedSubnetServiceClientDeleteDetailsResponse, error) {
	respType := DelegatedSubnetServiceClientDeleteDetailsResponse{}
	_, err := p.pt.FinalResponse(ctx, nil)
	if err != nil {
		return DelegatedSubnetServiceClientDeleteDetailsResponse{}, err
	}
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *DelegatedSubnetServiceClientDeleteDetailsPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// DelegatedSubnetServiceClientPatchDetailsPoller provides polling facilities until the operation reaches a terminal state.
type DelegatedSubnetServiceClientPatchDetailsPoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *DelegatedSubnetServiceClientPatchDetailsPoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *DelegatedSubnetServiceClientPatchDetailsPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final DelegatedSubnetServiceClientPatchDetailsResponse will be returned.
func (p *DelegatedSubnetServiceClientPatchDetailsPoller) FinalResponse(ctx context.Context) (DelegatedSubnetServiceClientPatchDetailsResponse, error) {
	respType := DelegatedSubnetServiceClientPatchDetailsResponse{}
	_, err := p.pt.FinalResponse(ctx, &respType.DelegatedSubnet)
	if err != nil {
		return DelegatedSubnetServiceClientPatchDetailsResponse{}, err
	}
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *DelegatedSubnetServiceClientPatchDetailsPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// DelegatedSubnetServiceClientPutDetailsPoller provides polling facilities until the operation reaches a terminal state.
type DelegatedSubnetServiceClientPutDetailsPoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *DelegatedSubnetServiceClientPutDetailsPoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *DelegatedSubnetServiceClientPutDetailsPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final DelegatedSubnetServiceClientPutDetailsResponse will be returned.
func (p *DelegatedSubnetServiceClientPutDetailsPoller) FinalResponse(ctx context.Context) (DelegatedSubnetServiceClientPutDetailsResponse, error) {
	respType := DelegatedSubnetServiceClientPutDetailsResponse{}
	_, err := p.pt.FinalResponse(ctx, &respType.DelegatedSubnet)
	if err != nil {
		return DelegatedSubnetServiceClientPutDetailsResponse{}, err
	}
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *DelegatedSubnetServiceClientPutDetailsPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// OrchestratorInstanceServiceClientCreatePoller provides polling facilities until the operation reaches a terminal state.
type OrchestratorInstanceServiceClientCreatePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *OrchestratorInstanceServiceClientCreatePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *OrchestratorInstanceServiceClientCreatePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final OrchestratorInstanceServiceClientCreateResponse will be returned.
func (p *OrchestratorInstanceServiceClientCreatePoller) FinalResponse(ctx context.Context) (OrchestratorInstanceServiceClientCreateResponse, error) {
	respType := OrchestratorInstanceServiceClientCreateResponse{}
	_, err := p.pt.FinalResponse(ctx, &respType.Orchestrator)
	if err != nil {
		return OrchestratorInstanceServiceClientCreateResponse{}, err
	}
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *OrchestratorInstanceServiceClientCreatePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// OrchestratorInstanceServiceClientDeletePoller provides polling facilities until the operation reaches a terminal state.
type OrchestratorInstanceServiceClientDeletePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *OrchestratorInstanceServiceClientDeletePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *OrchestratorInstanceServiceClientDeletePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final OrchestratorInstanceServiceClientDeleteResponse will be returned.
func (p *OrchestratorInstanceServiceClientDeletePoller) FinalResponse(ctx context.Context) (OrchestratorInstanceServiceClientDeleteResponse, error) {
	respType := OrchestratorInstanceServiceClientDeleteResponse{}
	_, err := p.pt.FinalResponse(ctx, nil)
	if err != nil {
		return OrchestratorInstanceServiceClientDeleteResponse{}, err
	}
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *OrchestratorInstanceServiceClientDeletePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}
