//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armresourcehealth

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"reflect"
)

// AvailabilityStatusesClientListByResourceGroupPager provides operations for iterating over paged responses.
type AvailabilityStatusesClientListByResourceGroupPager struct {
	client    *AvailabilityStatusesClient
	current   AvailabilityStatusesClientListByResourceGroupResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, AvailabilityStatusesClientListByResourceGroupResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *AvailabilityStatusesClientListByResourceGroupPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.AvailabilityStatusListResult.NextLink == nil || len(*p.current.AvailabilityStatusListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *AvailabilityStatusesClientListByResourceGroupPager) NextPage(ctx context.Context) (AvailabilityStatusesClientListByResourceGroupResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return AvailabilityStatusesClientListByResourceGroupResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return AvailabilityStatusesClientListByResourceGroupResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return AvailabilityStatusesClientListByResourceGroupResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return AvailabilityStatusesClientListByResourceGroupResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		return AvailabilityStatusesClientListByResourceGroupResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// AvailabilityStatusesClientListBySubscriptionIDPager provides operations for iterating over paged responses.
type AvailabilityStatusesClientListBySubscriptionIDPager struct {
	client    *AvailabilityStatusesClient
	current   AvailabilityStatusesClientListBySubscriptionIDResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, AvailabilityStatusesClientListBySubscriptionIDResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *AvailabilityStatusesClientListBySubscriptionIDPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.AvailabilityStatusListResult.NextLink == nil || len(*p.current.AvailabilityStatusListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *AvailabilityStatusesClientListBySubscriptionIDPager) NextPage(ctx context.Context) (AvailabilityStatusesClientListBySubscriptionIDResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return AvailabilityStatusesClientListBySubscriptionIDResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return AvailabilityStatusesClientListBySubscriptionIDResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return AvailabilityStatusesClientListBySubscriptionIDResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return AvailabilityStatusesClientListBySubscriptionIDResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listBySubscriptionIDHandleResponse(resp)
	if err != nil {
		return AvailabilityStatusesClientListBySubscriptionIDResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// AvailabilityStatusesClientListPager provides operations for iterating over paged responses.
type AvailabilityStatusesClientListPager struct {
	client    *AvailabilityStatusesClient
	current   AvailabilityStatusesClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, AvailabilityStatusesClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *AvailabilityStatusesClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.AvailabilityStatusListResult.NextLink == nil || len(*p.current.AvailabilityStatusListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *AvailabilityStatusesClientListPager) NextPage(ctx context.Context) (AvailabilityStatusesClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return AvailabilityStatusesClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return AvailabilityStatusesClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return AvailabilityStatusesClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return AvailabilityStatusesClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return AvailabilityStatusesClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// ChildAvailabilityStatusesClientListPager provides operations for iterating over paged responses.
type ChildAvailabilityStatusesClientListPager struct {
	client    *ChildAvailabilityStatusesClient
	current   ChildAvailabilityStatusesClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ChildAvailabilityStatusesClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ChildAvailabilityStatusesClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.AvailabilityStatusListResult.NextLink == nil || len(*p.current.AvailabilityStatusListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *ChildAvailabilityStatusesClientListPager) NextPage(ctx context.Context) (ChildAvailabilityStatusesClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return ChildAvailabilityStatusesClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ChildAvailabilityStatusesClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ChildAvailabilityStatusesClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ChildAvailabilityStatusesClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return ChildAvailabilityStatusesClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// ChildResourcesClientListPager provides operations for iterating over paged responses.
type ChildResourcesClientListPager struct {
	client    *ChildResourcesClient
	current   ChildResourcesClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ChildResourcesClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ChildResourcesClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.AvailabilityStatusListResult.NextLink == nil || len(*p.current.AvailabilityStatusListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *ChildResourcesClientListPager) NextPage(ctx context.Context) (ChildResourcesClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return ChildResourcesClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ChildResourcesClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ChildResourcesClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ChildResourcesClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return ChildResourcesClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// EmergingIssuesClientListPager provides operations for iterating over paged responses.
type EmergingIssuesClientListPager struct {
	client    *EmergingIssuesClient
	current   EmergingIssuesClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, EmergingIssuesClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *EmergingIssuesClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.EmergingIssueListResult.NextLink == nil || len(*p.current.EmergingIssueListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *EmergingIssuesClientListPager) NextPage(ctx context.Context) (EmergingIssuesClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return EmergingIssuesClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return EmergingIssuesClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return EmergingIssuesClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return EmergingIssuesClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return EmergingIssuesClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}
