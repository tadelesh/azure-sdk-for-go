//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armresourcehealth_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/resourcehealth/armresourcehealth"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestAvailabilityStatuses_ListByResourceGroup(t *testing.T) {
	// From example specification/resourcehealth/resource-manager/Microsoft.ResourceHealth/stable/2017-07-01/examples/AvailabilityStatuses_ListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ListByResourceGroup"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armresourcehealth.NewAvailabilityStatusesClient("subscriptionId", cred, &options)
	pager := client.ListByResourceGroup("resourceGroupName",
		&armresourcehealth.AvailabilityStatusesClientListByResourceGroupOptions{Filter: nil,
			Expand: to.Ptr("recommendedactions"),
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/resourcehealth/resource-manager/Microsoft.ResourceHealth/stable/2017-07-01/examples/AvailabilityStatuses_ListByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armresourcehealth.AvailabilityStatusListResult{
			Value: []*armresourcehealth.AvailabilityStatus{
				{
					Name:     to.Ptr("current"),
					Type:     to.Ptr("Microsoft.ResourceHealth/AvailabilityStatuses"),
					ID:       to.Ptr("<resourceId>/providers/Microsoft.ResourceHealth/AvailabilityStatueses/current"),
					Location: to.Ptr("eastus"),
					Properties: &armresourcehealth.AvailabilityStatusProperties{
						AvailabilityState: to.Ptr(armresourcehealth.AvailabilityStateValuesAvailable),
						DetailedStatus:    to.Ptr("We have not seen any issues with your virtual machine"),
						OccuredTime:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-03-29T09:12:00Z"); return t }()),
						ReasonChronicity:  to.Ptr(armresourcehealth.ReasonChronicityTypesPersistent),
						ReasonType:        to.Ptr("Unplanned"),
						RecentlyResolvedState: &armresourcehealth.AvailabilityStatusPropertiesRecentlyResolvedState{
							ResolvedTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-28T00:49:00Z"); return t }()),
							UnavailabilitySummary:   to.Ptr("We are sorry your SQL database is unavailable"),
							UnavailableOccurredTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-28T00:48:00Z"); return t }()),
						},
						RecommendedActions: []*armresourcehealth.RecommendedAction{
							{
								Action:        to.Ptr("To start this virtualmachine, open the resource blade and click Start"),
								ActionURL:     to.Ptr("<#ResourceBlade>"),
								ActionURLText: to.Ptr("resourceblade"),
							}},
						ReportedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-05-04T14:11:29.7598931Z"); return t }()),
						Summary:      to.Ptr("Vm is available"),
					},
				},
				{
					Name:     to.Ptr("current"),
					Type:     to.Ptr("Microsoft.ResourceHealth/AvailabilityStatuses"),
					ID:       to.Ptr("<resourceId>/providers/Microsoft.ResourceHealth/AvailabilityStatueses/current"),
					Location: to.Ptr("eastus"),
					Properties: &armresourcehealth.AvailabilityStatusProperties{
						AvailabilityState: to.Ptr(armresourcehealth.AvailabilityStateValuesUnavailable),
						DetailedStatus:    to.Ptr("Diskproblemsarepreventingusfromautomaticallyrecoveringyourvirtualmachine"),
						OccuredTime:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-03-29T09:12:00Z"); return t }()),
						ReasonChronicity:  to.Ptr(armresourcehealth.ReasonChronicityTypesPersistent),
						ReasonType:        to.Ptr("Unplanned"),
						RecommendedActions: []*armresourcehealth.RecommendedAction{
							{
								Action:        to.Ptr("To start this virtualmachine, open the resource blade"),
								ActionURL:     to.Ptr("<#ResourceBlade>"),
								ActionURLText: to.Ptr("resourceblade"),
							},
							{
								Action:        to.Ptr("If you are experiencing problems you believe are caused by Azure, contact support"),
								ActionURL:     to.Ptr("<#SupportCase>"),
								ActionURLText: to.Ptr("contactsupport"),
							}},
						ReportedTime:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-05-04T14:11:29.7598931Z"); return t }()),
						ResolutionETA:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-03-29T09:37:00Z"); return t }()),
						RootCauseAttributionTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-03-29T09:13:00Z"); return t }()),
						Summary:                  to.Ptr("We are sorry, we couldn't automatically recovery our virtualmachine"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AvailabilityStatusListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AvailabilityStatusListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/resourcehealth/resource-manager/Microsoft.ResourceHealth/stable/2017-07-01/examples/AvailabilityStatuses_ListByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAvailabilityStatuses_GetByResource(t *testing.T) {
	// From example specification/resourcehealth/resource-manager/Microsoft.ResourceHealth/stable/2017-07-01/examples/AvailabilityStatus_GetByResource.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetCurrentHealthByResource"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armresourcehealth.NewAvailabilityStatusesClient("<subscription-id>", cred, &options)
	res, err := client.GetByResource(ctx,
		"resourceUri",
		&armresourcehealth.AvailabilityStatusesClientGetByResourceOptions{Filter: nil,
			Expand: to.Ptr("recommendedactions"),
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/resourcehealth/resource-manager/Microsoft.ResourceHealth/stable/2017-07-01/examples/AvailabilityStatus_GetByResource.json: %v", err)
	}
	// Response check
	{
		exampleRes := armresourcehealth.AvailabilityStatus{
			Name:     to.Ptr("current"),
			Type:     to.Ptr("Microsoft.ResourceHealth/AvailabilityStatuses"),
			ID:       to.Ptr("/subscriptions/4abcdefgh-ijkl-mnop-qrstuvwxyz/resourceGroups/rhctestenv/providers/Microsoft.ClassicCompute/virtualMachines /rhctestenvV1PI/providers/Microsoft.ResourceHealth/availabilityStatuses/current"),
			Location: to.Ptr("eastus"),
			Properties: &armresourcehealth.AvailabilityStatusProperties{
				AvailabilityState: to.Ptr(armresourcehealth.AvailabilityStateValuesUnavailable),
				DetailedStatus:    to.Ptr("Disk problems are preventing us from automatically recovering your virtual machine"),
				OccuredTime:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-03-29T09:12:00Z"); return t }()),
				ReasonChronicity:  to.Ptr(armresourcehealth.ReasonChronicityTypesPersistent),
				ReasonType:        to.Ptr("Unplanned"),
				RecommendedActions: []*armresourcehealth.RecommendedAction{
					{
						Action:        to.Ptr("To start this virtual machine, open the resource blade and click Start"),
						ActionURL:     to.Ptr("<#ResourceBlade>"),
						ActionURLText: to.Ptr("resource blade"),
					},
					{
						Action:        to.Ptr("If you are experiencing problems you believe are caused by Azure, contact support"),
						ActionURL:     to.Ptr("<#SupportCase>"),
						ActionURLText: to.Ptr("contact support"),
					}},
				ReportedTime:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-05-04T14:11:29.7598931Z"); return t }()),
				ResolutionETA:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-03-29T09:37:00Z"); return t }()),
				RootCauseAttributionTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-03-29T09:13:00Z"); return t }()),
				Summary:                  to.Ptr("We're sorry, we couldn't automatically recover your virtual machine"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AvailabilityStatus) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AvailabilityStatus)
			t.Fatalf("Mock response is not equal to example response for example specification/resourcehealth/resource-manager/Microsoft.ResourceHealth/stable/2017-07-01/examples/AvailabilityStatus_GetByResource.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAvailabilityStatuses_List(t *testing.T) {
	// From example specification/resourcehealth/resource-manager/Microsoft.ResourceHealth/stable/2017-07-01/examples/AvailabilityStatuses_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetHealthHistoryByResource"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armresourcehealth.NewAvailabilityStatusesClient("<subscription-id>", cred, &options)
	pager := client.List("resourceUri",
		&armresourcehealth.AvailabilityStatusesClientListOptions{Filter: nil,
			Expand: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/resourcehealth/resource-manager/Microsoft.ResourceHealth/stable/2017-07-01/examples/AvailabilityStatuses_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armresourcehealth.AvailabilityStatusListResult{
			Value: []*armresourcehealth.AvailabilityStatus{
				{
					Name:     to.Ptr("current"),
					Type:     to.Ptr("Microsoft.ResourceHealth/AvailabilityStatuses"),
					ID:       to.Ptr("/subscriptions/4abcdefgh-ijkl-mnop-qrstuvwxyz/resourceGroups/rhctestenv/providers/Microsoft.ClassicCompute/virtualMachines/rhctes tenvV1PI/providers/Microsoft.ResourceHealth/availabilityStatuses/current"),
					Location: to.Ptr("eastus"),
					Properties: &armresourcehealth.AvailabilityStatusProperties{
						AvailabilityState:        to.Ptr(armresourcehealth.AvailabilityStateValuesUnavailable),
						DetailedStatus:           to.Ptr("Disk problems are preventing us from automatically recovering your virtual machine"),
						OccuredTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-03-29T09:12:00Z"); return t }()),
						ReasonChronicity:         to.Ptr(armresourcehealth.ReasonChronicityTypesPersistent),
						ReasonType:               to.Ptr("Unplanned"),
						ReportedTime:             to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-05-04T14:11:29.7598931Z"); return t }()),
						ResolutionETA:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-03-29T09:37:00Z"); return t }()),
						RootCauseAttributionTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-03-29T09:13:00Z"); return t }()),
						ServiceImpactingEvents: []*armresourcehealth.ServiceImpactingEvent{
							{
								CorrelationID:               to.Ptr("b56d0180-2d6c-4f7b-b750-c1eca681874c"),
								EventStartTime:              to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-05-02T19:23:13.7115125Z"); return t }()),
								EventStatusLastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-05-02T19:27:04.9543491Z"); return t }()),
								IncidentProperties: &armresourcehealth.ServiceImpactingEventIncidentProperties{
									IncidentType: to.Ptr("outage"),
									Region:       to.Ptr("East US"),
									Service:      to.Ptr("Virtual Machines"),
									Title:        to.Ptr("Virtual Machines - West Europe [West Europe]"),
								},
								Status: &armresourcehealth.ServiceImpactingEventStatus{
									Value: to.Ptr("Resolved"),
								},
							}},
						Summary: to.Ptr("We're sorry, we couldn't automatically recover your virtual machine"),
					},
				},
				{
					Name:     to.Ptr("2016-03-28+16%3a23%3a00Z"),
					Type:     to.Ptr("Microsoft.ResourceHealth/AvailabilityStatuses"),
					ID:       to.Ptr("/subscriptions/4abcdefgh-ijkl-mnop-qrstuvwxyz/resourceGroups/rhctestenv/providers/Microsoft.ClassicCompute/virtualMachines/rhctes tenvV1PI/providers/Microsoft.ResourceHealth/availabilityStatuses/2016-03-28+16%3a23%3a00Z"),
					Location: to.Ptr("eastus"),
					Properties: &armresourcehealth.AvailabilityStatusProperties{
						AvailabilityState: to.Ptr(armresourcehealth.AvailabilityStateValuesAvailable),
						DetailedStatus:    to.Ptr("There aren’t any known Azure platform problems affecting this virtual machine"),
						OccuredTime:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-03-28T16:23:00Z"); return t }()),
						ReasonChronicity:  to.Ptr(armresourcehealth.ReasonChronicityTypesPersistent),
						Summary:           to.Ptr("This virtual machine is running normally"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AvailabilityStatusListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AvailabilityStatusListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/resourcehealth/resource-manager/Microsoft.ResourceHealth/stable/2017-07-01/examples/AvailabilityStatuses_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestChildAvailabilityStatuses_GetByResource(t *testing.T) {
	// From example specification/resourcehealth/resource-manager/Microsoft.ResourceHealth/stable/2017-07-01/examples/ChildAvailabilityStatus_GetByResource.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetCurrentHealthByResource"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armresourcehealth.NewChildAvailabilityStatusesClient(cred, &options)
	res, err := client.GetByResource(ctx,
		"resourceUri",
		&armresourcehealth.ChildAvailabilityStatusesClientGetByResourceOptions{Filter: nil,
			Expand: to.Ptr("recommendedactions"),
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/resourcehealth/resource-manager/Microsoft.ResourceHealth/stable/2017-07-01/examples/ChildAvailabilityStatus_GetByResource.json: %v", err)
	}
	// Response check
	{
		exampleRes := armresourcehealth.AvailabilityStatus{
			Name:     to.Ptr("current"),
			Type:     to.Ptr("Microsoft.ResourceHealth/AvailabilityStatuses"),
			ID:       to.Ptr("/subscriptions/227b734f-e14f-4de6-b7fc-3190c21e69f6/resourceGroups/JUHACKETRHCTEST/providers/Microsoft.Compute/virtualMachineScaleSets/rhctest/virtualMachines/4/providers/Microsoft.ResourceHealth/child/availabilityStatuses/current"),
			Location: to.Ptr("southcentralus"),
			Properties: &armresourcehealth.AvailabilityStatusProperties{
				AvailabilityState: to.Ptr(armresourcehealth.AvailabilityStateValuesAvailable),
				DetailedStatus:    to.Ptr(""),
				OccuredTime:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-11-30T23:37:44Z"); return t }()),
				ReasonChronicity:  to.Ptr(armresourcehealth.ReasonChronicityTypesPersistent),
				ReasonType:        to.Ptr(""),
				RecommendedActions: []*armresourcehealth.RecommendedAction{
					{
						Action:        to.Ptr("To start this virtual machine, open the resource blade and click Start"),
						ActionURL:     to.Ptr("<#ResourceBlade>"),
						ActionURLText: to.Ptr("resource blade"),
					},
					{
						Action:        to.Ptr("If you are experiencing problems you believe are caused by Azure, contact support"),
						ActionURL:     to.Ptr("<#SupportCase>"),
						ActionURLText: to.Ptr("contact support"),
					}},
				ReportedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-12-04T01:19:11.955255Z"); return t }()),
				Summary:      to.Ptr("There aren't any known Azure platform problems affecting this virtual machine"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AvailabilityStatus) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AvailabilityStatus)
			t.Fatalf("Mock response is not equal to example response for example specification/resourcehealth/resource-manager/Microsoft.ResourceHealth/stable/2017-07-01/examples/ChildAvailabilityStatus_GetByResource.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestChildAvailabilityStatuses_List(t *testing.T) {
	// From example specification/resourcehealth/resource-manager/Microsoft.ResourceHealth/stable/2017-07-01/examples/ChildAvailabilityStatuses_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetHealthHistoryByResource"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armresourcehealth.NewChildAvailabilityStatusesClient(cred, &options)
	pager := client.List("resourceUri",
		&armresourcehealth.ChildAvailabilityStatusesClientListOptions{Filter: nil,
			Expand: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/resourcehealth/resource-manager/Microsoft.ResourceHealth/stable/2017-07-01/examples/ChildAvailabilityStatuses_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armresourcehealth.AvailabilityStatusListResult{
			Value: []*armresourcehealth.AvailabilityStatus{
				{
					Name:     to.Ptr("current"),
					Type:     to.Ptr("Microsoft.ResourceHealth/AvailabilityStatuses"),
					ID:       to.Ptr("/subscriptions/227b734f-e14f-4de6-b7fc-3190c21e69f6/resourceGroups/JUHACKETRHCTEST/providers/Microsoft.Compute/virtualMachineScaleSets/rhctest/virtualMachines/4/providers/Microsoft.ResourceHealth/availabilityStatuses/current"),
					Location: to.Ptr("southcentralus"),
					Properties: &armresourcehealth.AvailabilityStatusProperties{
						AvailabilityState: to.Ptr(armresourcehealth.AvailabilityStateValuesAvailable),
						DetailedStatus:    to.Ptr(""),
						OccuredTime:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-11-30T23:37:44Z"); return t }()),
						ReasonChronicity:  to.Ptr(armresourcehealth.ReasonChronicityTypesTransient),
						ReasonType:        to.Ptr(""),
						RecommendedActions: []*armresourcehealth.RecommendedAction{
							{
								Action:        to.Ptr("If you're having problems, use the Troubleshoot tool to get recommended solutions."),
								ActionURL:     to.Ptr("<#TroubleshootV2Blade>"),
								ActionURLText: to.Ptr("Troubleshoot tool"),
							},
							{
								Action:        to.Ptr("If you are experiencing problems you believe are caused by Azure, contact support"),
								ActionURL:     to.Ptr("<#SupportCase>"),
								ActionURLText: to.Ptr("contact support"),
							}},
						ReportedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-12-05T19:45:45.6640838Z"); return t }()),
						Summary:      to.Ptr("There aren't any known Azure platform problems affecting this virtual machine"),
					},
				},
				{
					Name:     to.Ptr("2018-11-30+23%3a36%3a03Z"),
					Type:     to.Ptr("Microsoft.ResourceHealth/AvailabilityStatuses"),
					ID:       to.Ptr("/subscriptions/227b734f-e14f-4de6-b7fc-3190c21e69f6/resourceGroups/JUHACKETRHCTEST/providers/Microsoft.Compute/virtualMachineScaleSets/rhctest/virtualMachines/4/providers/Microsoft.ResourceHealth/availabilityStatuses/2018-11-30+23%3a36%3a03Z"),
					Location: to.Ptr("southcentralus"),
					Properties: &armresourcehealth.AvailabilityStatusProperties{
						AvailabilityState: to.Ptr(armresourcehealth.AvailabilityStateValuesUnavailable),
						DetailedStatus:    to.Ptr(""),
						OccuredTime:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-11-30T23:36:03Z"); return t }()),
						ReasonChronicity:  to.Ptr(armresourcehealth.ReasonChronicityTypesTransient),
						ReasonType:        to.Ptr("Customer Initiated"),
						RecommendedActions: []*armresourcehealth.RecommendedAction{
							{
								Action:        to.Ptr("Check back here for status updates"),
								ActionURL:     to.Ptr(""),
								ActionURLText: to.Ptr(""),
							},
							{
								Action:        to.Ptr("If you are experiencing problems you believe are caused by Azure, contact support"),
								ActionURL:     to.Ptr("<#SupportCase>"),
								ActionURLText: to.Ptr("contact support"),
							}},
						ResolutionETA:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-11-30T23:56:03Z"); return t }()),
						RootCauseAttributionTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-11-30T23:36:02.514Z"); return t }()),
						Summary:                  to.Ptr("This virtual machine is rebooting as requested by an authorized user or process. It will be back online after the reboot completes."),
					},
				},
				{
					Name:     to.Ptr("2018-11-30+22%3a32%3a12Z"),
					Type:     to.Ptr("Microsoft.ResourceHealth/AvailabilityStatuses"),
					ID:       to.Ptr("/subscriptions/227b734f-e14f-4de6-b7fc-3190c21e69f6/resourceGroups/JUHACKETRHCTEST/providers/Microsoft.Compute/virtualMachineScaleSets/rhctest/virtualMachines/4/providers/Microsoft.ResourceHealth/availabilityStatuses/2018-11-30+22%3a32%3a12Z"),
					Location: to.Ptr("southcentralus"),
					Properties: &armresourcehealth.AvailabilityStatusProperties{
						AvailabilityState: to.Ptr(armresourcehealth.AvailabilityStateValuesAvailable),
						DetailedStatus:    to.Ptr(""),
						OccuredTime:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-11-30T22:32:12Z"); return t }()),
						ReasonChronicity:  to.Ptr(armresourcehealth.ReasonChronicityTypesTransient),
						ReasonType:        to.Ptr(""),
						RecommendedActions: []*armresourcehealth.RecommendedAction{
							{
								Action:        to.Ptr("If you're having problems, use the Troubleshoot tool to get recommended solutions."),
								ActionURL:     to.Ptr("<#TroubleshootV2Blade>"),
								ActionURLText: to.Ptr("Troubleshoot tool"),
							},
							{
								Action:        to.Ptr("If you are experiencing problems you believe are caused by Azure, contact support"),
								ActionURL:     to.Ptr("<#SupportCase>"),
								ActionURLText: to.Ptr("contact support"),
							}},
						Summary: to.Ptr("There aren't any known Azure platform problems affecting this virtual machine"),
					},
				},
				{
					Name:     to.Ptr("2018-11-30+22%3a30%3a23Z"),
					Type:     to.Ptr("Microsoft.ResourceHealth/AvailabilityStatuses"),
					ID:       to.Ptr("/subscriptions/227b734f-e14f-4de6-b7fc-3190c21e69f6/resourceGroups/JUHACKETRHCTEST/providers/Microsoft.Compute/virtualMachineScaleSets/rhctest/virtualMachines/4/providers/Microsoft.ResourceHealth/availabilityStatuses/2018-11-30+22%3a30%3a23Z"),
					Location: to.Ptr("southcentralus"),
					Properties: &armresourcehealth.AvailabilityStatusProperties{
						AvailabilityState: to.Ptr(armresourcehealth.AvailabilityStateValuesUnavailable),
						DetailedStatus:    to.Ptr(""),
						OccuredTime:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-11-30T22:30:23Z"); return t }()),
						ReasonChronicity:  to.Ptr(armresourcehealth.ReasonChronicityTypesTransient),
						ReasonType:        to.Ptr("Customer Initiated"),
						RecommendedActions: []*armresourcehealth.RecommendedAction{
							{
								Action:        to.Ptr("Check back here for status updates"),
								ActionURL:     to.Ptr(""),
								ActionURLText: to.Ptr(""),
							},
							{
								Action:        to.Ptr("If you are experiencing problems you believe are caused by Azure, contact support"),
								ActionURL:     to.Ptr("<#SupportCase>"),
								ActionURLText: to.Ptr("contact support"),
							}},
						ResolutionETA:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-11-30T22:50:23Z"); return t }()),
						RootCauseAttributionTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-11-30T22:30:22.256Z"); return t }()),
						Summary:                  to.Ptr("This virtual machine is rebooting as requested by an authorized user or process. It will be back online after the reboot completes."),
					},
				},
				{
					Name:     to.Ptr("2018-11-21+00%3a00%3a00Z"),
					Type:     to.Ptr("Microsoft.ResourceHealth/AvailabilityStatuses"),
					ID:       to.Ptr("/subscriptions/227b734f-e14f-4de6-b7fc-3190c21e69f6/resourceGroups/JUHACKETRHCTEST/providers/Microsoft.Compute/virtualMachineScaleSets/rhctest/virtualMachines/4/providers/Microsoft.ResourceHealth/availabilityStatuses/2018-11-21+00%3a00%3a00Z"),
					Location: to.Ptr("southcentralus"),
					Properties: &armresourcehealth.AvailabilityStatusProperties{
						AvailabilityState: to.Ptr(armresourcehealth.AvailabilityStateValuesAvailable),
						DetailedStatus:    to.Ptr(""),
						OccuredTime:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-11-21T00:00:00Z"); return t }()),
						ReasonChronicity:  to.Ptr(armresourcehealth.ReasonChronicityTypesTransient),
						ReasonType:        to.Ptr(""),
						RecommendedActions: []*armresourcehealth.RecommendedAction{
							{
								Action:        to.Ptr("If you're having problems, use the Troubleshoot tool to get recommended solutions."),
								ActionURL:     to.Ptr("<#TroubleshootV2Blade>"),
								ActionURLText: to.Ptr("Troubleshoot tool"),
							},
							{
								Action:        to.Ptr("If you are experiencing problems you believe are caused by Azure, contact support"),
								ActionURL:     to.Ptr("<#SupportCase>"),
								ActionURLText: to.Ptr("contact support"),
							}},
						Summary: to.Ptr("There aren't any known Azure platform problems affecting this virtual machine"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AvailabilityStatusListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AvailabilityStatusListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/resourcehealth/resource-manager/Microsoft.ResourceHealth/stable/2017-07-01/examples/ChildAvailabilityStatuses_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestChildResources_List(t *testing.T) {
	// From example specification/resourcehealth/resource-manager/Microsoft.ResourceHealth/stable/2017-07-01/examples/ChildResources_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetHealthHistoryByResource"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armresourcehealth.NewChildResourcesClient(cred, &options)
	pager := client.List("resourceUri",
		&armresourcehealth.ChildResourcesClientListOptions{Filter: nil,
			Expand: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/resourcehealth/resource-manager/Microsoft.ResourceHealth/stable/2017-07-01/examples/ChildResources_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armresourcehealth.AvailabilityStatusListResult{
			Value: []*armresourcehealth.AvailabilityStatus{
				{
					Name:     to.Ptr("rhctest_0"),
					Type:     to.Ptr("Microsoft.ResourceHealth/AvailabilityStatuses"),
					ID:       to.Ptr("/subscriptions/227b734f-e14f-4de6-b7fc-3190c21e69f6/resourceGroups/JUHACKETRHCTEST/providers/Microsoft.Compute/virtualMachineScaleSets/rhctest/virtualMachines/0/providers/Microsoft.ResourceHealth/child/availabilityStatuses/current"),
					Location: to.Ptr("southcentralus"),
					Properties: &armresourcehealth.AvailabilityStatusProperties{
						AvailabilityState: to.Ptr(armresourcehealth.AvailabilityStateValuesAvailable),
						DetailedStatus:    to.Ptr(""),
						OccuredTime:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-11-30T23:37:43Z"); return t }()),
						ReasonChronicity:  to.Ptr(armresourcehealth.ReasonChronicityTypesPersistent),
						ReasonType:        to.Ptr(""),
						ReportedTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-12-04T01:18:25.575477Z"); return t }()),
						Summary:           to.Ptr("There aren't any known Azure platform problems affecting this virtual machine"),
					},
				},
				{
					Name:     to.Ptr("rhctest_3"),
					Type:     to.Ptr("Microsoft.ResourceHealth/AvailabilityStatuses"),
					ID:       to.Ptr("/subscriptions/227b734f-e14f-4de6-b7fc-3190c21e69f6/resourceGroups/JUHACKETRHCTEST/providers/Microsoft.Compute/virtualMachineScaleSets/rhctest/virtualMachines/3/providers/Microsoft.ResourceHealth/child/availabilityStatuses/current"),
					Location: to.Ptr("southcentralus"),
					Properties: &armresourcehealth.AvailabilityStatusProperties{
						AvailabilityState: to.Ptr(armresourcehealth.AvailabilityStateValuesAvailable),
						DetailedStatus:    to.Ptr(""),
						OccuredTime:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-11-30T23:37:41Z"); return t }()),
						ReasonChronicity:  to.Ptr(armresourcehealth.ReasonChronicityTypesPersistent),
						ReasonType:        to.Ptr(""),
						ReportedTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-12-04T01:18:25.575477Z"); return t }()),
						Summary:           to.Ptr("There aren't any known Azure platform problems affecting this virtual machine"),
					},
				},
				{
					Name:     to.Ptr("rhctest_1"),
					Type:     to.Ptr("Microsoft.ResourceHealth/AvailabilityStatuses"),
					ID:       to.Ptr("/subscriptions/227b734f-e14f-4de6-b7fc-3190c21e69f6/resourceGroups/JUHACKETRHCTEST/providers/Microsoft.Compute/virtualMachineScaleSets/rhctest/virtualMachines/1/providers/Microsoft.ResourceHealth/child/availabilityStatuses/current"),
					Location: to.Ptr("southcentralus"),
					Properties: &armresourcehealth.AvailabilityStatusProperties{
						AvailabilityState: to.Ptr(armresourcehealth.AvailabilityStateValuesAvailable),
						DetailedStatus:    to.Ptr(""),
						OccuredTime:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-11-30T23:37:48Z"); return t }()),
						ReasonChronicity:  to.Ptr(armresourcehealth.ReasonChronicityTypesPersistent),
						ReasonType:        to.Ptr(""),
						ReportedTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-12-04T01:18:25.575477Z"); return t }()),
						Summary:           to.Ptr("There aren't any known Azure platform problems affecting this virtual machine"),
					},
				},
				{
					Name:     to.Ptr("rhctest_2"),
					Type:     to.Ptr("Microsoft.ResourceHealth/AvailabilityStatuses"),
					ID:       to.Ptr("/subscriptions/227b734f-e14f-4de6-b7fc-3190c21e69f6/resourceGroups/JUHACKETRHCTEST/providers/Microsoft.Compute/virtualMachineScaleSets/rhctest/virtualMachines/2/providers/Microsoft.ResourceHealth/child/availabilityStatuses/current"),
					Location: to.Ptr("southcentralus"),
					Properties: &armresourcehealth.AvailabilityStatusProperties{
						AvailabilityState: to.Ptr(armresourcehealth.AvailabilityStateValuesAvailable),
						DetailedStatus:    to.Ptr(""),
						OccuredTime:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-11-30T23:37:43Z"); return t }()),
						ReasonChronicity:  to.Ptr(armresourcehealth.ReasonChronicityTypesPersistent),
						ReasonType:        to.Ptr(""),
						ReportedTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-12-04T01:18:25.575477Z"); return t }()),
						Summary:           to.Ptr("There aren't any known Azure platform problems affecting this virtual machine"),
					},
				},
				{
					Name:     to.Ptr("rhctest_4"),
					Type:     to.Ptr("Microsoft.ResourceHealth/AvailabilityStatuses"),
					ID:       to.Ptr("/subscriptions/227b734f-e14f-4de6-b7fc-3190c21e69f6/resourceGroups/JUHACKETRHCTEST/providers/Microsoft.Compute/virtualMachineScaleSets/rhctest/virtualMachines/4/providers/Microsoft.ResourceHealth/child/availabilityStatuses/current"),
					Location: to.Ptr("southcentralus"),
					Properties: &armresourcehealth.AvailabilityStatusProperties{
						AvailabilityState: to.Ptr(armresourcehealth.AvailabilityStateValuesAvailable),
						DetailedStatus:    to.Ptr(""),
						OccuredTime:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-11-30T23:37:44Z"); return t }()),
						ReasonChronicity:  to.Ptr(armresourcehealth.ReasonChronicityTypesPersistent),
						ReasonType:        to.Ptr(""),
						ReportedTime:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-12-04T01:18:25.575477Z"); return t }()),
						Summary:           to.Ptr("There aren't any known Azure platform problems affecting this virtual machine"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AvailabilityStatusListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AvailabilityStatusListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/resourcehealth/resource-manager/Microsoft.ResourceHealth/stable/2017-07-01/examples/ChildResources_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOperations_List(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

func TestEmergingIssues_Get(t *testing.T) {
	// From example specification/resourcehealth/resource-manager/Microsoft.ResourceHealth/stable/2017-07-01/examples/EmergingIssues_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetEmergingIssues"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armresourcehealth.NewEmergingIssuesClient(cred, &options)
	res, err := client.Get(ctx,
		armresourcehealth.Enum0Default,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/resourcehealth/resource-manager/Microsoft.ResourceHealth/stable/2017-07-01/examples/EmergingIssues_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armresourcehealth.EmergingIssuesGetResult{
			Name: to.Ptr("default"),
			Type: to.Ptr("/providers/Microsoft.ResourceHealth/emergingissues"),
			ID:   to.Ptr("/providers/Microsoft.ResourceHealth/emergingissues/default"),
			Properties: &armresourcehealth.EmergingIssue{
				RefreshTimestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-12-17T09:12:00Z"); return t }()),
				StatusActiveEvents: []*armresourcehealth.StatusActiveEvent{
					{
						Description: to.Ptr("Virtual Machines case"),
						Cloud:       to.Ptr("Public"),
						Impacts: []*armresourcehealth.EmergingIssueImpact{
							{
								Name: to.Ptr("Virtual Machines"),
								ID:   to.Ptr("virtual-machines"),
								Regions: []*armresourcehealth.ImpactedRegion{
									{
										Name: to.Ptr("Central US"),
										ID:   to.Ptr("us-central"),
									},
									{
										Name: to.Ptr("East US"),
										ID:   to.Ptr("us-east"),
									}},
							}},
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-12-15T08:10:00Z"); return t }()),
						Published:        to.Ptr(true),
						Severity:         to.Ptr(armresourcehealth.SeverityValuesInformation),
						Stage:            to.Ptr(armresourcehealth.StageValuesActive),
						StartTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-12-15T08:06:00Z"); return t }()),
						Title:            to.Ptr("Automatic updates to the dial tone page from ACM - SHD event"),
						TrackingID:       to.Ptr("KTTK-TZ8"),
					},
					{
						Description: to.Ptr("All Azure SQL service management requests (create, update, delete, etc.) are serviced through the SQL Control Plane infrastructure. Engineers determined that during this issue, the control plane service became unhealthy after receiving a significant increase in internally generated operations and reaching an operational threshold. This led to service management requests becoming unable to complete, which in-turn resulted in timeouts and throttling. Subsequent investigation by engineers determined this issue was due service requests from an internal Azure group that triggered a bug which caused an excessive number of internally generated operations."),
						Cloud:       to.Ptr("Public"),
						Impacts: []*armresourcehealth.EmergingIssueImpact{
							{
								Name: to.Ptr("SQL Database"),
								ID:   to.Ptr("sql-database"),
								Regions: []*armresourcehealth.ImpactedRegion{
									{
										Name: to.Ptr("West Europe"),
										ID:   to.Ptr("europe-west"),
									}},
							}},
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-12-16T05:11:00Z"); return t }()),
						Published:        to.Ptr(true),
						Severity:         to.Ptr(armresourcehealth.SeverityValuesError),
						Stage:            to.Ptr(armresourcehealth.StageValuesActive),
						StartTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-12-16T05:11:00Z"); return t }()),
						Title:            to.Ptr("Azure SQL Database - West Europe"),
						TrackingID:       to.Ptr("4KHK-LS8"),
					}},
				StatusBanners: []*armresourcehealth.StatusBanner{
					{
						Cloud:            to.Ptr("Public"),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-12-15T08:04:00Z"); return t }()),
						Message:          to.Ptr("Testing backup site"),
						Title:            to.Ptr("Automatic updates to the dial tone page from ACM - banner"),
					},
					{
						Cloud:            to.Ptr("Public"),
						LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-12-15T10:15:00Z"); return t }()),
						Message:          to.Ptr("<span style=\"color: #323237; font-family: &quot;Segoe UI&quot;, SegoeUI, &quot;Segoe WP&quot;, Tahoma, Arial, sans-serif; font-size: 16px; background-color: #ffffff\">A subset of customers using Storage in West Europe experienced service availability issues. In addition, resources with dependencies on the impacted storage scale units may have experienced downstream impact in the form of availability issues, connection failures, or high latency. Engineers are investigating the root cause.</span>"),
						Title:            to.Ptr("Storage - West Europe"),
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.EmergingIssuesGetResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.EmergingIssuesGetResult)
			t.Fatalf("Mock response is not equal to example response for example specification/resourcehealth/resource-manager/Microsoft.ResourceHealth/stable/2017-07-01/examples/EmergingIssues_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestEmergingIssues_List(t *testing.T) {
	// From example specification/resourcehealth/resource-manager/Microsoft.ResourceHealth/stable/2017-07-01/examples/EmergingIssues_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetEmergingIssues"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armresourcehealth.NewEmergingIssuesClient(cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/resourcehealth/resource-manager/Microsoft.ResourceHealth/stable/2017-07-01/examples/EmergingIssues_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armresourcehealth.EmergingIssueListResult{
			Value: []*armresourcehealth.EmergingIssuesGetResult{
				{
					Name: to.Ptr("default"),
					Type: to.Ptr("/providers/Microsoft.ResourceHealth/emergingissues"),
					ID:   to.Ptr("/providers/Microsoft.ResourceHealth/emergingissues/default"),
					Properties: &armresourcehealth.EmergingIssue{
						RefreshTimestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-12-17T09:12:00Z"); return t }()),
						StatusActiveEvents: []*armresourcehealth.StatusActiveEvent{
							{
								Description: to.Ptr("Virtual Machines case"),
								Cloud:       to.Ptr("Public"),
								Impacts: []*armresourcehealth.EmergingIssueImpact{
									{
										Name: to.Ptr("Virtual Machines"),
										ID:   to.Ptr("virtual-machines"),
										Regions: []*armresourcehealth.ImpactedRegion{
											{
												Name: to.Ptr("Central US"),
												ID:   to.Ptr("us-central"),
											},
											{
												Name: to.Ptr("East US"),
												ID:   to.Ptr("us-east"),
											}},
									}},
								LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-12-15T08:10:00Z"); return t }()),
								Published:        to.Ptr(true),
								Severity:         to.Ptr(armresourcehealth.SeverityValuesInformation),
								Stage:            to.Ptr(armresourcehealth.StageValuesActive),
								StartTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-12-15T08:06:00Z"); return t }()),
								Title:            to.Ptr("Automatic updates to the dial tone page from ACM - SHD event"),
								TrackingID:       to.Ptr("KTTK-TZ8"),
							},
							{
								Description: to.Ptr("All Azure SQL service management requests (create, update, delete, etc.) are serviced through the SQL Control Plane infrastructure. Engineers determined that during this issue, the control plane service became unhealthy after receiving a significant increase in internally generated operations and reaching an operational threshold. This led to service management requests becoming unable to complete, which in-turn resulted in timeouts and throttling. Subsequent investigation by engineers determined this issue was due service requests from an internal Azure group that triggered a bug which caused an excessive number of internally generated operations."),
								Cloud:       to.Ptr("Public"),
								Impacts: []*armresourcehealth.EmergingIssueImpact{
									{
										Name: to.Ptr("SQL Database"),
										ID:   to.Ptr("sql-database"),
										Regions: []*armresourcehealth.ImpactedRegion{
											{
												Name: to.Ptr("West Europe"),
												ID:   to.Ptr("europe-west"),
											}},
									}},
								LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-12-16T05:11:00Z"); return t }()),
								Published:        to.Ptr(true),
								Severity:         to.Ptr(armresourcehealth.SeverityValuesError),
								Stage:            to.Ptr(armresourcehealth.StageValuesActive),
								StartTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-12-16T05:11:00Z"); return t }()),
								Title:            to.Ptr("Azure SQL Database - West Europe"),
								TrackingID:       to.Ptr("4KHK-LS8"),
							}},
						StatusBanners: []*armresourcehealth.StatusBanner{
							{
								Cloud:            to.Ptr("Public"),
								LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-12-15T08:04:00Z"); return t }()),
								Message:          to.Ptr("Testing backup site"),
								Title:            to.Ptr("Automatic updates to the dial tone page from ACM - banner"),
							},
							{
								Cloud:            to.Ptr("Public"),
								LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-12-15T10:15:00Z"); return t }()),
								Message:          to.Ptr("<span style=\"color: #323237; font-family: &quot;Segoe UI&quot;, SegoeUI, &quot;Segoe WP&quot;, Tahoma, Arial, sans-serif; font-size: 16px; background-color: #ffffff\">A subset of customers using Storage in West Europe experienced service availability issues. In addition, resources with dependencies on the impacted storage scale units may have experienced downstream impact in the form of availability issues, connection failures, or high latency. Engineers are investigating the root cause.</span>"),
								Title:            to.Ptr("Storage - West Europe"),
							}},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.EmergingIssueListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.EmergingIssueListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/resourcehealth/resource-manager/Microsoft.ResourceHealth/stable/2017-07-01/examples/EmergingIssues_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
