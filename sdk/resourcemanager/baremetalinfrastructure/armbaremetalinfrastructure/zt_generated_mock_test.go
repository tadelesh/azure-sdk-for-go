//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armbaremetalinfrastructure_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/baremetalinfrastructure/armbaremetalinfrastructure"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestAzureBareMetalInstances_ListBySubscription(t *testing.T) {
	// From example specification/baremetalinfrastructure/resource-manager/Microsoft.BareMetalInfrastructure/stable/2021-08-09/examples/AzureBareMetalInstances_ListBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all AzureBareMetal instances in a subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbaremetalinfrastructure.NewAzureBareMetalInstancesClient("f0f4887f-d13c-4943-a8ba-d7da28d2a3fd", cred, &options)
	pager := client.ListBySubscription(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/baremetalinfrastructure/resource-manager/Microsoft.BareMetalInfrastructure/stable/2021-08-09/examples/AzureBareMetalInstances_ListBySubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armbaremetalinfrastructure.AzureBareMetalInstancesListResult{
			Value: []*armbaremetalinfrastructure.AzureBareMetalInstance{
				{
					Name:     to.Ptr("myAzureBareMetalInstance1"),
					Type:     to.Ptr("Microsoft.BareMetalInfrastructure/bareMetalInstances"),
					ID:       to.Ptr("/subscriptions/57d3422f-467a-448e-b798-ebf490849542/resourceGroups/myResourceGroup/providers/Microsoft.BareMetalInfrastructure/bareMetalInstances/myAzureBareMetalInstance1"),
					Location: to.Ptr("westus2"),
					Tags: map[string]*string{
						"key": to.Ptr("value"),
					},
					Properties: &armbaremetalinfrastructure.AzureBareMetalInstanceProperties{
						AzureBareMetalInstanceID: to.Ptr("23415635-4d7e-41dc-9598-8194f22c24e1"),
						HardwareProfile: &armbaremetalinfrastructure.HardwareProfile{
							AzureBareMetalInstanceSize: to.Ptr(armbaremetalinfrastructure.AzureBareMetalInstanceSizeNamesEnumS72),
							HardwareType:               to.Ptr(armbaremetalinfrastructure.AzureBareMetalHardwareTypeNamesEnumCiscoUCS),
						},
						HwRevision: to.Ptr("Rev 4.2"),
						NetworkProfile: &armbaremetalinfrastructure.NetworkProfile{
							CircuitID: to.Ptr("/subscriptions/57d3422f-467a-448e-b798-ebf490849542/resourceGroups/myResourceGroup/providers/Microsoft.Network/expressRouteCircuits/myCircuitId"),
							NetworkInterfaces: []*armbaremetalinfrastructure.IPAddress{
								{
									IPAddress: to.Ptr("123.123.123.123"),
								}},
						},
						OSProfile: &armbaremetalinfrastructure.OSProfile{
							ComputerName: to.Ptr("myComputerName"),
							OSType:       to.Ptr("SLES 12 SP2"),
							Version:      to.Ptr("12 SP2"),
						},
						PowerState:        to.Ptr(armbaremetalinfrastructure.AzureBareMetalInstancePowerStateEnumRestarting),
						ProvisioningState: to.Ptr(armbaremetalinfrastructure.AzureBareMetalProvisioningStatesEnumSucceeded),
						StorageProfile: &armbaremetalinfrastructure.StorageProfile{
							NfsIPAddress: to.Ptr("123.123.119.123"),
						},
					},
					SystemData: &armbaremetalinfrastructure.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-07-21T08:01:22.0000000Z"); return t }()),
						CreatedBy:          to.Ptr("user@microsoft.com"),
						CreatedByType:      to.Ptr(armbaremetalinfrastructure.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-13T08:01:22.1234567Z"); return t }()),
						LastModifiedBy:     to.Ptr("user@microsoft.com"),
						LastModifiedByType: to.Ptr(armbaremetalinfrastructure.CreatedByTypeUser),
					},
				},
				{
					Name:     to.Ptr("myAzureBareMetalInstance2"),
					Type:     to.Ptr("Microsoft.BareMetalInfrastructure/bareMetalInstances"),
					ID:       to.Ptr("/subscriptions/f0f4887f-d13c-4943-a8ba-d7da28d2a3fd/resourceGroups/myResourceGroup/providers/Microsoft.BareMetalInfrastructure/bareMetalInstances/myAzureBareMetalInstance2"),
					Location: to.Ptr("westus2"),
					Tags: map[string]*string{
						"key": to.Ptr("value"),
					},
					Properties: &armbaremetalinfrastructure.AzureBareMetalInstanceProperties{
						AzureBareMetalInstanceID: to.Ptr("589bce49-9fe6-4dc8-82df-cf6ae25e0cb9"),
						HardwareProfile: &armbaremetalinfrastructure.HardwareProfile{
							AzureBareMetalInstanceSize: to.Ptr(armbaremetalinfrastructure.AzureBareMetalInstanceSizeNamesEnumS72),
							HardwareType:               to.Ptr(armbaremetalinfrastructure.AzureBareMetalHardwareTypeNamesEnumCiscoUCS),
						},
						HwRevision: to.Ptr("Rev 4.2"),
						NetworkProfile: &armbaremetalinfrastructure.NetworkProfile{
							CircuitID: to.Ptr("/subscriptions/f0f4887f-d13c-4943-a8ba-d7da28d2a3fd/resourceGroups/myResourceGroup/providers/Microsoft.Network/expressRouteCircuits/myCircuitId"),
							NetworkInterfaces: []*armbaremetalinfrastructure.IPAddress{
								{
									IPAddress: to.Ptr("123.123.123.123"),
								}},
						},
						OSProfile: &armbaremetalinfrastructure.OSProfile{
							ComputerName: to.Ptr("myComputerName2"),
							OSType:       to.Ptr("SLES 12 SP2"),
							Version:      to.Ptr("12 SP2"),
						},
						PowerState:        to.Ptr(armbaremetalinfrastructure.AzureBareMetalInstancePowerStateEnumRestarting),
						ProvisioningState: to.Ptr(armbaremetalinfrastructure.AzureBareMetalProvisioningStatesEnumSucceeded),
						StorageProfile: &armbaremetalinfrastructure.StorageProfile{
							NfsIPAddress: to.Ptr("123.123.119.123"),
						},
					},
					SystemData: &armbaremetalinfrastructure.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-07-21T08:01:22.0000000Z"); return t }()),
						CreatedBy:          to.Ptr("user@microsoft.com"),
						CreatedByType:      to.Ptr(armbaremetalinfrastructure.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-13T08:01:22.1234567Z"); return t }()),
						LastModifiedBy:     to.Ptr("user@microsoft.com"),
						LastModifiedByType: to.Ptr(armbaremetalinfrastructure.CreatedByTypeUser),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AzureBareMetalInstancesListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AzureBareMetalInstancesListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/baremetalinfrastructure/resource-manager/Microsoft.BareMetalInfrastructure/stable/2021-08-09/examples/AzureBareMetalInstances_ListBySubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAzureBareMetalInstances_ListByResourceGroup(t *testing.T) {
	// From example specification/baremetalinfrastructure/resource-manager/Microsoft.BareMetalInfrastructure/stable/2021-08-09/examples/AzureBareMetalInstances_ListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all AzureBareMetal instances in a resource group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbaremetalinfrastructure.NewAzureBareMetalInstancesClient("f0f4887f-d13c-4943-a8ba-d7da28d2a3fd", cred, &options)
	pager := client.ListByResourceGroup("myResourceGroup",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/baremetalinfrastructure/resource-manager/Microsoft.BareMetalInfrastructure/stable/2021-08-09/examples/AzureBareMetalInstances_ListByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armbaremetalinfrastructure.AzureBareMetalInstancesListResult{
			Value: []*armbaremetalinfrastructure.AzureBareMetalInstance{
				{
					Name:     to.Ptr("myAzureBareMetalInstance1"),
					Type:     to.Ptr("Microsoft.BareMetalInfrastructure/azureBareMetalInstances"),
					ID:       to.Ptr("/subscriptions/f0f4887f-d13c-4943-a8ba-d7da28d2a3fd/resourceGroups/myResourceGroup/providers/Microsoft.BareMetalInfrastructure/azureBareMetalInstances/myAzureBareMetalInstance1"),
					Location: to.Ptr("westus"),
					Tags: map[string]*string{
						"key": to.Ptr("value"),
					},
					Properties: &armbaremetalinfrastructure.AzureBareMetalInstanceProperties{
						AzureBareMetalInstanceID: to.Ptr("23415635-4d7e-41dc-9598-8194f22c24e1"),
						HardwareProfile: &armbaremetalinfrastructure.HardwareProfile{
							AzureBareMetalInstanceSize: to.Ptr(armbaremetalinfrastructure.AzureBareMetalInstanceSizeNamesEnumS72),
							HardwareType:               to.Ptr(armbaremetalinfrastructure.AzureBareMetalHardwareTypeNamesEnumCiscoUCS),
						},
						HwRevision: to.Ptr("Rev 3"),
						NetworkProfile: &armbaremetalinfrastructure.NetworkProfile{
							CircuitID: to.Ptr("/subscriptions/f0f4887f-d13c-4943-a8ba-d7da28d2a3fd/resourceGroups/myResourceGroup/providers/Microsoft.Network/expressRouteCircuit"),
							NetworkInterfaces: []*armbaremetalinfrastructure.IPAddress{
								{
									IPAddress: to.Ptr("100.100.100.100"),
								}},
						},
						OSProfile: &armbaremetalinfrastructure.OSProfile{
							ComputerName: to.Ptr("myComputerName1"),
							OSType:       to.Ptr("SUSE"),
							SSHPublicKey: to.Ptr("AAAAB3NzaC1yc2EAAAABJQAAAQB/nAmOjTmezNUDKYvEeIRf2YnwM9/uUG1d0BYsc8/tRtx+RGi7N2lUbp728MXGwdnL9od4cItzky/zVdLZE2cycOa18xBK9cOWmcKS0A8FYBxEQWJ/q9YVUgZbFKfYGaGQxsER+A0w/fX8ALuk78ktP31K69LcQgxIsl7rNzxsoOQKJ/CIxOGMMxczYTiEoLvQhapFQMs3FL96didKr/QbrfB1WT6s3838SEaXfgZvLef1YB2xmfhbT9OXFE3FXvh2UPBfN+ffE7iiayQf/2XR+8j4N4bW30DiPtOQLGUrH1y5X/rpNZNlWW2+jGIxqZtgWg7lTy3mXy5x836Sj/6L"),
							Version:      to.Ptr("12 SP1"),
						},
						PowerState:              to.Ptr(armbaremetalinfrastructure.AzureBareMetalInstancePowerStateEnumStarted),
						ProvisioningState:       to.Ptr(armbaremetalinfrastructure.AzureBareMetalProvisioningStatesEnumSucceeded),
						ProximityPlacementGroup: to.Ptr("/subscriptions/f0f4887f-d13c-4943-a8ba-d7da28d2a3fd/resourceGroups/myResourceGroup/providers/Microsoft.Compute/proximityPlacementGroups/myplacementgroup"),
						StorageProfile: &armbaremetalinfrastructure.StorageProfile{
							NfsIPAddress: to.Ptr("200.200.200.200"),
						},
					},
					SystemData: &armbaremetalinfrastructure.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-20T23:10:22.6828621Z"); return t }()),
						CreatedBy:          to.Ptr("user@microsoft.com"),
						CreatedByType:      to.Ptr(armbaremetalinfrastructure.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-07-21T08:01:22.0000000Z"); return t }()),
						LastModifiedBy:     to.Ptr("user@microsoft.com"),
						LastModifiedByType: to.Ptr(armbaremetalinfrastructure.CreatedByTypeUser),
					},
				},
				{
					Name:     to.Ptr("myABMInstance2"),
					Type:     to.Ptr("Microsoft.BareMetalInfrastructure/azureBareMetalInstances"),
					ID:       to.Ptr("/subscriptions/f0f4887f-d13c-4943-a8ba-d7da28d2a3fd/resourceGroups/myResourceGroup/providers/Microsoft.BareMetalInfrastructure/azureBareMetalInstances/myABMInstance2"),
					Location: to.Ptr("westus"),
					Tags: map[string]*string{
						"key": to.Ptr("value"),
					},
					Properties: &armbaremetalinfrastructure.AzureBareMetalInstanceProperties{
						AzureBareMetalInstanceID: to.Ptr("589bce49-9fe6-4dc8-82df-cf6ae25e0cb9"),
						HardwareProfile: &armbaremetalinfrastructure.HardwareProfile{
							AzureBareMetalInstanceSize: to.Ptr(armbaremetalinfrastructure.AzureBareMetalInstanceSizeNamesEnumS384),
							HardwareType:               to.Ptr(armbaremetalinfrastructure.AzureBareMetalHardwareTypeNamesEnumHPE),
						},
						HwRevision: to.Ptr("Rev 3"),
						NetworkProfile: &armbaremetalinfrastructure.NetworkProfile{
							CircuitID: to.Ptr("/subscriptions/f0f4887f-d13c-4943-a8ba-d7da28d2a3fd/resourceGroups/myResourceGroup/providers/Microsoft.Network/expressRouteCircuit"),
							NetworkInterfaces: []*armbaremetalinfrastructure.IPAddress{
								{
									IPAddress: to.Ptr("100.100.100.101"),
								}},
						},
						OSProfile: &armbaremetalinfrastructure.OSProfile{
							ComputerName: to.Ptr("myComputerName2"),
							OSType:       to.Ptr("SUSE"),
							SSHPublicKey: to.Ptr("AAAAB3NzaC1yc2EAAAABJQAAAQB/nAmOjTmezNUDKYvEeIRf2YnwM9/uUG1d0BYsc8/tRtx+RGi7N2lUbp728MXGwdnL9od4cItzky/zVdLZE2cycOa18xBK9cOWmcKS0A8FYBxEQWJ/q9YVUgZbFKfYGaGQxsER+A0w/fX8ALuk78ktP31K69LcQgxIsl7rNzxsoOQKJ/CIxOGMMxczYTiEoLvQhapFQMs3FL96didKr/QbrfB1WT6s3838SEaXfgZvLef1YB2xmfhbT9OXFE3FXvh2UPBfN+ffE7iiayQf/2XR+8j4N4bW30DiPtOQLGUrH1y5X/rpNZNlWW2+jGIxqZtgWg7lTy3mXy5x836Sj/6L"),
							Version:      to.Ptr("12 SP1"),
						},
						PartnerNodeID:           to.Ptr("/subscriptions/f0f4887f-d13c-4943-a8ba-d7da28d2a3fd/resourceGroups/myResourceGroup/providers/Microsoft.BareMetalInfrastructure/azureBareMetalInstances/myAzureBareMetalInstance1"),
						PowerState:              to.Ptr(armbaremetalinfrastructure.AzureBareMetalInstancePowerStateEnumStarted),
						ProvisioningState:       to.Ptr(armbaremetalinfrastructure.AzureBareMetalProvisioningStatesEnumSucceeded),
						ProximityPlacementGroup: to.Ptr("/subscriptions/f0f4887f-d13c-4943-a8ba-d7da28d2a3fd/resourceGroups/myResourceGroup/providers/Microsoft.Compute/proximityPlacementGroups/myplacementgroup"),
						StorageProfile: &armbaremetalinfrastructure.StorageProfile{
							NfsIPAddress: to.Ptr("200.200.200.201"),
						},
					},
					SystemData: &armbaremetalinfrastructure.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-07-21T08:01:22.0000000Z"); return t }()),
						CreatedBy:          to.Ptr("user@microsoft.com"),
						CreatedByType:      to.Ptr(armbaremetalinfrastructure.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-08-13T08:01:22.1234567Z"); return t }()),
						LastModifiedBy:     to.Ptr("user@microsoft.com"),
						LastModifiedByType: to.Ptr(armbaremetalinfrastructure.CreatedByTypeUser),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AzureBareMetalInstancesListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AzureBareMetalInstancesListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/baremetalinfrastructure/resource-manager/Microsoft.BareMetalInfrastructure/stable/2021-08-09/examples/AzureBareMetalInstances_ListByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAzureBareMetalInstances_Get(t *testing.T) {
	// From example specification/baremetalinfrastructure/resource-manager/Microsoft.BareMetalInfrastructure/stable/2021-08-09/examples/AzureBareMetalInstances_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get an AzureBareMetal instance"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbaremetalinfrastructure.NewAzureBareMetalInstancesClient("f0f4887f-d13c-4943-a8ba-d7da28d2a3fd", cred, &options)
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myAzureBareMetalInstance",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/baremetalinfrastructure/resource-manager/Microsoft.BareMetalInfrastructure/stable/2021-08-09/examples/AzureBareMetalInstances_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbaremetalinfrastructure.AzureBareMetalInstance{
			Name:     to.Ptr("myAzureBareMetalInstance"),
			Type:     to.Ptr("Microsoft.BareMetalInfrastructure/bareMetalInstances"),
			ID:       to.Ptr("/subscriptions/f0f4887f-d13c-4943-a8ba-d7da28d2a3fd/resourceGroups/myResourceGroup/providers/Microsoft.BareMetalInfrastructure/bareMetalInstances/myAzureBareMetalInstance"),
			Location: to.Ptr("westus2"),
			Tags: map[string]*string{
				"key": to.Ptr("value"),
			},
			Properties: &armbaremetalinfrastructure.AzureBareMetalInstanceProperties{
				AzureBareMetalInstanceID: to.Ptr("23415635-4d7e-41dc-9598-8194f22c24e1"),
				HardwareProfile: &armbaremetalinfrastructure.HardwareProfile{
					AzureBareMetalInstanceSize: to.Ptr(armbaremetalinfrastructure.AzureBareMetalInstanceSizeNamesEnumS72),
					HardwareType:               to.Ptr(armbaremetalinfrastructure.AzureBareMetalHardwareTypeNamesEnumCiscoUCS),
				},
				HwRevision: to.Ptr("Rev 4.2"),
				NetworkProfile: &armbaremetalinfrastructure.NetworkProfile{
					CircuitID: to.Ptr("/subscriptions/f0f4887f-d13c-4943-a8ba-d7da28d2a3fd/resourceGroups/myResourceGroup/providers/Microsoft.Network/expressRouteCircuits/myCircuitId"),
					NetworkInterfaces: []*armbaremetalinfrastructure.IPAddress{
						{
							IPAddress: to.Ptr("123.123.123.123"),
						}},
				},
				OSProfile: &armbaremetalinfrastructure.OSProfile{
					ComputerName: to.Ptr("myComputerName"),
					OSType:       to.Ptr("SLES 12 SP2"),
					Version:      to.Ptr("12 SP2"),
				},
				PowerState:        to.Ptr(armbaremetalinfrastructure.AzureBareMetalInstancePowerStateEnumRestarting),
				ProvisioningState: to.Ptr(armbaremetalinfrastructure.AzureBareMetalProvisioningStatesEnumSucceeded),
				StorageProfile: &armbaremetalinfrastructure.StorageProfile{
					NfsIPAddress: to.Ptr("123.123.119.123"),
				},
			},
			SystemData: &armbaremetalinfrastructure.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-20T23:10:22.6828621Z"); return t }()),
				CreatedBy:          to.Ptr("user@microsoft.com"),
				CreatedByType:      to.Ptr(armbaremetalinfrastructure.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-07-21T08:01:22.0000000Z"); return t }()),
				LastModifiedBy:     to.Ptr("user@microsoft.com"),
				LastModifiedByType: to.Ptr(armbaremetalinfrastructure.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AzureBareMetalInstance) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AzureBareMetalInstance)
			t.Fatalf("Mock response is not equal to example response for example specification/baremetalinfrastructure/resource-manager/Microsoft.BareMetalInfrastructure/stable/2021-08-09/examples/AzureBareMetalInstances_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAzureBareMetalInstances_Update(t *testing.T) {
	// From example specification/baremetalinfrastructure/resource-manager/Microsoft.BareMetalInfrastructure/stable/2021-08-09/examples/AzureBareMetalInstances_PatchTags_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete Tags field of an AzureBareMetal instance"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbaremetalinfrastructure.NewAzureBareMetalInstancesClient("f0f4887f-d13c-4943-a8ba-d7da28d2a3fd", cred, &options)
	res, err := client.Update(ctx,
		"myResourceGroup",
		"myABMInstance",
		armbaremetalinfrastructure.Tags{
			Tags: map[string]*string{},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/baremetalinfrastructure/resource-manager/Microsoft.BareMetalInfrastructure/stable/2021-08-09/examples/AzureBareMetalInstances_PatchTags_Delete.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbaremetalinfrastructure.AzureBareMetalInstance{
			Name:     to.Ptr("myABMInstance"),
			Type:     to.Ptr("Microsoft.BareMetalInfrastructure/bareMetalInstances"),
			ID:       to.Ptr("/subscriptions/f0f4887f-d13c-4943-a8ba-d7da28d2a3fd/resourceGroups/myResourceGroup/providers/Microsoft.BareMetalInfrastructure/bareMetalInstances/myABMInstance"),
			Location: to.Ptr("westus"),
			Tags:     map[string]*string{},
			Properties: &armbaremetalinfrastructure.AzureBareMetalInstanceProperties{
				AzureBareMetalInstanceID: to.Ptr("23415635-4d7e-41dc-9598-8194f22c24e1"),
				HardwareProfile: &armbaremetalinfrastructure.HardwareProfile{
					AzureBareMetalInstanceSize: to.Ptr(armbaremetalinfrastructure.AzureBareMetalInstanceSizeNamesEnumS72),
					HardwareType:               to.Ptr(armbaremetalinfrastructure.AzureBareMetalHardwareTypeNamesEnumCiscoUCS),
				},
				HwRevision: to.Ptr("Rev 3"),
				NetworkProfile: &armbaremetalinfrastructure.NetworkProfile{
					CircuitID: to.Ptr("/subscriptions/f0f4887f-d13c-4943-a8ba-d7da28d2a3fd/resourceGroups/myResourceGroup/providers/Microsoft.Network/expressRouteCircuit"),
					NetworkInterfaces: []*armbaremetalinfrastructure.IPAddress{
						{
							IPAddress: to.Ptr("100.100.100.100"),
						}},
				},
				OSProfile: &armbaremetalinfrastructure.OSProfile{
					ComputerName: to.Ptr("myComputerName"),
					OSType:       to.Ptr("SUSE"),
					SSHPublicKey: to.Ptr("AAAAB3NzaC1yc2EAAAABJQAAAQB/nAmOjTmezNUDKYvEeIRf2YnwM9/uUG1d0BYsc8/tRtx+RGi7N2lUbp728MXGwdnL9od4cItzky/zVdLZE2cycOa18xBK9cOWmcKS0A8FYBxEQWJ/q9YVUgZbFKfYGaGQxsER+A0w/fX8ALuk78ktP31K69LcQgxIsl7rNzxsoOQKJ/CIxOGMMxczYTiEoLvQhapFQMs3FL96didKr/QbrfB1WT6s3838SEaXfgZvLef1YB2xmfhbT9OXFE3FXvh2UPBfN+ffE7iiayQf/2XR+8j4N4bW30DiPtOQLGUrH1y5X/rpNZNlWW2+jGIxqZtgWg7lTy3mXy5x836Sj/6L"),
					Version:      to.Ptr("12 SP1"),
				},
				PartnerNodeID:           to.Ptr("/subscriptions/f0f4887f-d13c-4943-a8ba-d7da28d2a3fd/resourceGroups/myResourceGroup/providers/Microsoft.BareMetalInfrastructure/bareMetalInstances/myABMInstance2"),
				PowerState:              to.Ptr(armbaremetalinfrastructure.AzureBareMetalInstancePowerStateEnumStarted),
				ProvisioningState:       to.Ptr(armbaremetalinfrastructure.AzureBareMetalProvisioningStatesEnumSucceeded),
				ProximityPlacementGroup: to.Ptr("/subscriptions/f0f4887f-d13c-4943-a8ba-d7da28d2a3fd/resourceGroups/myResourceGroup/providers/Microsoft.Compute/proximityPlacementGroups/myplacementgroup"),
				StorageProfile: &armbaremetalinfrastructure.StorageProfile{
					NfsIPAddress: to.Ptr("200.200.200.200"),
				},
			},
			SystemData: &armbaremetalinfrastructure.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-20T23:10:22.6828621Z"); return t }()),
				CreatedBy:          to.Ptr("user@microsoft.com"),
				CreatedByType:      to.Ptr(armbaremetalinfrastructure.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-07-21T08:01:22.0000000Z"); return t }()),
				LastModifiedBy:     to.Ptr("user@microsoft.com"),
				LastModifiedByType: to.Ptr(armbaremetalinfrastructure.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AzureBareMetalInstance) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AzureBareMetalInstance)
			t.Fatalf("Mock response is not equal to example response for example specification/baremetalinfrastructure/resource-manager/Microsoft.BareMetalInfrastructure/stable/2021-08-09/examples/AzureBareMetalInstances_PatchTags_Delete.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/baremetalinfrastructure/resource-manager/Microsoft.BareMetalInfrastructure/stable/2021-08-09/examples/AzureBareMetalInstances_PatchTags.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update Tags field of an AzureBareMetal instance"},
	})
	client = armbaremetalinfrastructure.NewAzureBareMetalInstancesClient("f0f4887f-d13c-4943-a8ba-d7da28d2a3fd", cred, &options)
	res, err = client.Update(ctx,
		"myResourceGroup",
		"myABMInstance",
		armbaremetalinfrastructure.Tags{
			Tags: map[string]*string{
				"testkey": to.Ptr("testvalue"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/baremetalinfrastructure/resource-manager/Microsoft.BareMetalInfrastructure/stable/2021-08-09/examples/AzureBareMetalInstances_PatchTags.json: %v", err)
	}
	// Response check
	{
		exampleRes := armbaremetalinfrastructure.AzureBareMetalInstance{
			Name:     to.Ptr("myABMInstance"),
			Type:     to.Ptr("Microsoft.BareMetalInfrastructure/bareMetalInstances"),
			ID:       to.Ptr("/subscriptions/f0f4887f-d13c-4943-a8ba-d7da28d2a3fd/resourceGroups/myResourceGroup/providers/Microsoft.BareMetalInfrastructure/bareMetalInstances/myABMInstance"),
			Location: to.Ptr("westus"),
			Tags: map[string]*string{
				"testkey": to.Ptr("testvalue"),
			},
			Properties: &armbaremetalinfrastructure.AzureBareMetalInstanceProperties{
				AzureBareMetalInstanceID: to.Ptr("23415635-4d7e-41dc-9598-8194f22c24e1"),
				HardwareProfile: &armbaremetalinfrastructure.HardwareProfile{
					AzureBareMetalInstanceSize: to.Ptr(armbaremetalinfrastructure.AzureBareMetalInstanceSizeNamesEnumS72),
					HardwareType:               to.Ptr(armbaremetalinfrastructure.AzureBareMetalHardwareTypeNamesEnumCiscoUCS),
				},
				HwRevision: to.Ptr("Rev 3"),
				NetworkProfile: &armbaremetalinfrastructure.NetworkProfile{
					CircuitID: to.Ptr("/subscriptions/f0f4887f-d13c-4943-a8ba-d7da28d2a3fd/resourceGroups/myResourceGroup/providers/Microsoft.Network/expressRouteCircuit"),
					NetworkInterfaces: []*armbaremetalinfrastructure.IPAddress{
						{
							IPAddress: to.Ptr("100.100.100.100"),
						}},
				},
				OSProfile: &armbaremetalinfrastructure.OSProfile{
					ComputerName: to.Ptr("myComputerName"),
					OSType:       to.Ptr("SUSE"),
					SSHPublicKey: to.Ptr("AAAAB3NzaC1yc2EAAAABJQAAAQB/nAmOjTmezNUDKYvEeIRf2YnwM9/uUG1d0BYsc8/tRtx+RGi7N2lUbp728MXGwdnL9od4cItzky/zVdLZE2cycOa18xBK9cOWmcKS0A8FYBxEQWJ/q9YVUgZbFKfYGaGQxsER+A0w/fX8ALuk78ktP31K69LcQgxIsl7rNzxsoOQKJ/CIxOGMMxczYTiEoLvQhapFQMs3FL96didKr/QbrfB1WT6s3838SEaXfgZvLef1YB2xmfhbT9OXFE3FXvh2UPBfN+ffE7iiayQf/2XR+8j4N4bW30DiPtOQLGUrH1y5X/rpNZNlWW2+jGIxqZtgWg7lTy3mXy5x836Sj/6L"),
					Version:      to.Ptr("12 SP1"),
				},
				PartnerNodeID:           to.Ptr("/subscriptions/f0f4887f-d13c-4943-a8ba-d7da28d2a3fd/resourceGroups/myResourceGroup/providers/Microsoft.BareMetalInfrastructure/bareMetalInstances/myABMInstance2"),
				PowerState:              to.Ptr(armbaremetalinfrastructure.AzureBareMetalInstancePowerStateEnumStarted),
				ProvisioningState:       to.Ptr(armbaremetalinfrastructure.AzureBareMetalProvisioningStatesEnumSucceeded),
				ProximityPlacementGroup: to.Ptr("/subscriptions/f0f4887f-d13c-4943-a8ba-d7da28d2a3fd/resourceGroups/myResourceGroup/providers/Microsoft.Compute/proximityPlacementGroups/myplacementgroup"),
				StorageProfile: &armbaremetalinfrastructure.StorageProfile{
					NfsIPAddress: to.Ptr("200.200.200.200"),
				},
			},
			SystemData: &armbaremetalinfrastructure.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-20T23:10:22.6828621Z"); return t }()),
				CreatedBy:          to.Ptr("user@microsoft.com"),
				CreatedByType:      to.Ptr(armbaremetalinfrastructure.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-07-21T08:01:22.0000000Z"); return t }()),
				LastModifiedBy:     to.Ptr("user@microsoft.com"),
				LastModifiedByType: to.Ptr(armbaremetalinfrastructure.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AzureBareMetalInstance) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AzureBareMetalInstance)
			t.Fatalf("Mock response is not equal to example response for example specification/baremetalinfrastructure/resource-manager/Microsoft.BareMetalInfrastructure/stable/2021-08-09/examples/AzureBareMetalInstances_PatchTags.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOperations_List(t *testing.T) {
	// From example specification/baremetalinfrastructure/resource-manager/Microsoft.BareMetalInfrastructure/stable/2021-08-09/examples/AzureBareMetalOperations_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all management operations supported by the AzureBareMetal RP"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armbaremetalinfrastructure.NewOperationsClient(cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/baremetalinfrastructure/resource-manager/Microsoft.BareMetalInfrastructure/stable/2021-08-09/examples/AzureBareMetalOperations_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armbaremetalinfrastructure.OperationList{
			Value: []*armbaremetalinfrastructure.Operation{
				{
					Name: to.Ptr("AzureBareMetalOp1"),
					Display: &armbaremetalinfrastructure.Display{
						Description: to.Ptr("AzureBareMetalOp1Description"),
						Operation:   to.Ptr("AzureBareMetalOp1OperationName"),
						Provider:    to.Ptr("AzureBareMetalOp1ProviderName"),
						Resource:    to.Ptr("AzureBareMetalOp1ResourceName"),
					},
					IsDataAction: to.Ptr(false),
				},
				{
					Name: to.Ptr("AzureBareMetalOp2"),
					Display: &armbaremetalinfrastructure.Display{
						Description: to.Ptr("AzureBareMetalOp2Description"),
						Operation:   to.Ptr("AzureBareMetalOp2OperationName"),
						Provider:    to.Ptr("AzureBareMetalOp2ProviderName"),
						Resource:    to.Ptr("AzureBareMetalOp2ResourceName"),
					},
					IsDataAction: to.Ptr(true),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OperationList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OperationList)
			t.Fatalf("Mock response is not equal to example response for example specification/baremetalinfrastructure/resource-manager/Microsoft.BareMetalInfrastructure/stable/2021-08-09/examples/AzureBareMetalOperations_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
