//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armdevops_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/devops/armdevops"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestOperations_List(t *testing.T) {
	// From example specification/devops/resource-manager/Microsoft.DevOps/preview/2019-07-01-preview/examples/ListOperations.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a list of operations supported by Microsoft.DevOps resource provider"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevops.NewOperationsClient(cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/devops/resource-manager/Microsoft.DevOps/preview/2019-07-01-preview/examples/ListOperations.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdevops.OperationListResult{
			Value: []*armdevops.Operation{
				{
					Name: to.Ptr("Microsoft.DevOps/register/action"),
					Display: &armdevops.OperationDisplayValue{
						Description: to.Ptr("Registers the specified subscription with Microsoft.DevOps resource provider and enables the creation of Pipelines"),
						Operation:   to.Ptr("Register for Microsoft.DevOps"),
						Provider:    to.Ptr("Microsoft DevOps"),
						Resource:    to.Ptr("register"),
					},
					IsDataAction: to.Ptr("false"),
				},
				{
					Name: to.Ptr("Microsoft.DevOps/pipelines/write"),
					Display: &armdevops.OperationDisplayValue{
						Description: to.Ptr("Creates or Updates any Pipeline"),
						Operation:   to.Ptr("Create or Update Pipeline"),
						Provider:    to.Ptr("Microsoft DevOps"),
						Resource:    to.Ptr("Pipelines"),
					},
					IsDataAction: to.Ptr("false"),
				},
				{
					Name: to.Ptr("Microsoft.DevOps/pipelines/read"),
					Display: &armdevops.OperationDisplayValue{
						Description: to.Ptr("Reads any Pipeline"),
						Operation:   to.Ptr("Read Pipeline"),
						Provider:    to.Ptr("Microsoft DevOps"),
						Resource:    to.Ptr("Pipelines"),
					},
					IsDataAction: to.Ptr("false"),
				},
				{
					Name: to.Ptr("Microsoft.DevOps/pipelines/delete"),
					Display: &armdevops.OperationDisplayValue{
						Description: to.Ptr("Deletes any Pipeline"),
						Operation:   to.Ptr("Delete Pipeline"),
						Provider:    to.Ptr("Microsoft DevOps"),
						Resource:    to.Ptr("Pipelines"),
					},
					IsDataAction: to.Ptr("false"),
				},
				{
					Name: to.Ptr("Microsoft.DevOps/pipelineTemplateDefinitions/read"),
					Display: &armdevops.OperationDisplayValue{
						Description: to.Ptr("Reads any PipelineTemplateDefinition"),
						Operation:   to.Ptr("Read PipelineTemplateDefinition"),
						Provider:    to.Ptr("Microsoft DevOps"),
						Resource:    to.Ptr("PipelineTemplateDefinitions"),
					},
					IsDataAction: to.Ptr("false"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OperationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OperationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/devops/resource-manager/Microsoft.DevOps/preview/2019-07-01-preview/examples/ListOperations.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPipelineTemplateDefinitions_List(t *testing.T) {
	// From example specification/devops/resource-manager/Microsoft.DevOps/preview/2019-07-01-preview/examples/ListPipelineTemplateDefinitions.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get the list of pipeline template definitions"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevops.NewPipelineTemplateDefinitionsClient(cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/devops/resource-manager/Microsoft.DevOps/preview/2019-07-01-preview/examples/ListPipelineTemplateDefinitions.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdevops.PipelineTemplateDefinitionListResult{
			Value: []*armdevops.PipelineTemplateDefinition{
				{
					Description: to.Ptr("Template for configuring CI/CD pipeline for ASP.Net app on Azure windows app service"),
					ID:          to.Ptr("ms.vss-continuous-delivery-pipeline-templates.aspnet-windowswebapp"),
					Inputs: []*armdevops.InputDescriptor{
						{
							Type:           to.Ptr(armdevops.InputDataTypeString),
							Description:    to.Ptr("Authorization for Azure ARM endpoints."),
							ID:             to.Ptr("azureAuth"),
							PossibleValues: []*armdevops.InputValue{},
						},
						{
							Type:           to.Ptr(armdevops.InputDataTypeString),
							Description:    to.Ptr("Id of subscription where azure resources will be created."),
							ID:             to.Ptr("subscriptionId"),
							PossibleValues: []*armdevops.InputValue{},
						},
						{
							Type:           to.Ptr(armdevops.InputDataTypeString),
							Description:    to.Ptr("A resource group is a collection of resources that share the same lifecycle, permissions, and policies. Name of resource group which should contain web app."),
							ID:             to.Ptr("resourceGroup"),
							PossibleValues: []*armdevops.InputValue{},
						},
						{
							Type:           to.Ptr(armdevops.InputDataTypeString),
							Description:    to.Ptr("Name of web app to be created"),
							ID:             to.Ptr("webAppName"),
							PossibleValues: []*armdevops.InputValue{},
						},
						{
							Type:           to.Ptr(armdevops.InputDataTypeString),
							Description:    to.Ptr("Choose the Azure region that's right for you and your customers."),
							ID:             to.Ptr("location"),
							PossibleValues: []*armdevops.InputValue{},
						},
						{
							Type:        to.Ptr(armdevops.InputDataTypeString),
							Description: to.Ptr("Details of cost and compute resource associated with the web app"),
							ID:          to.Ptr("appServicePlan"),
							PossibleValues: []*armdevops.InputValue{
								{
									DisplayValue: to.Ptr("P1 Premium (1 Core, 1.75 GB RAM)"),
									Value:        to.Ptr("P1 Premium"),
								},
								{
									DisplayValue: to.Ptr("P2 Premium (2 Core, 3.5 GB RAM)"),
									Value:        to.Ptr("P2 Premium"),
								},
								{
									DisplayValue: to.Ptr("P3 Premium (4 Core, 7 GB RAM)"),
									Value:        to.Ptr("P3 Premium"),
								},
								{
									DisplayValue: to.Ptr("S1 Standard (1 Core, 1.75 GB RAM)"),
									Value:        to.Ptr("S1 Standard"),
								},
								{
									DisplayValue: to.Ptr("S2 Standard (2 Core, 3.5 GB RAM)"),
									Value:        to.Ptr("S2 Standard"),
								},
								{
									DisplayValue: to.Ptr("S3 Standard (4 Core, 7 GB RAM)"),
									Value:        to.Ptr("S3 Standard"),
								},
								{
									DisplayValue: to.Ptr("B1 Basic (1 Core, 1.75 GB RAM)"),
									Value:        to.Ptr("B1 Basic"),
								},
								{
									DisplayValue: to.Ptr("B2 Basic (2 Core, 3.5 GB RAM)"),
									Value:        to.Ptr("B2 Basic"),
								},
								{
									DisplayValue: to.Ptr("B3 Basic (4 Core, 7 GB RAM)"),
									Value:        to.Ptr("B3 Basic"),
								},
								{
									DisplayValue: to.Ptr("F1 Free"),
									Value:        to.Ptr("F1 Free"),
								},
								{
									DisplayValue: to.Ptr("D1 Shared"),
									Value:        to.Ptr("D1 Shared"),
								}},
						},
						{
							Type:           to.Ptr(armdevops.InputDataTypeString),
							Description:    to.Ptr("Collect application monitoring data using Application Insights."),
							ID:             to.Ptr("appInsightLocation"),
							PossibleValues: []*armdevops.InputValue{},
						}},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PipelineTemplateDefinitionListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PipelineTemplateDefinitionListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/devops/resource-manager/Microsoft.DevOps/preview/2019-07-01-preview/examples/ListPipelineTemplateDefinitions.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPipelines_CreateOrUpdate(t *testing.T) {
	// From example specification/devops/resource-manager/Microsoft.DevOps/preview/2019-07-01-preview/examples/CreateAzurePipeline-Sample-AspNet-WindowsWebApp.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create an Azure pipeline to deploy a sample ASP.Net application to Azure web-app"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevops.NewPipelinesClient("{subscriptionId}", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"myAspNetWebAppPipeline-rg",
		"myAspNetWebAppPipeline",
		armdevops.Pipeline{
			Location: to.Ptr("South India"),
			Tags:     map[string]*string{},
			Properties: &armdevops.PipelineProperties{
				BootstrapConfiguration: &armdevops.BootstrapConfiguration{
					Template: &armdevops.PipelineTemplate{
						ID: to.Ptr("ms.vss-continuous-delivery-pipeline-templates.aspnet-windowswebapp"),
						Parameters: map[string]*string{
							"appInsightLocation": to.Ptr("South India"),
							"appServicePlan":     to.Ptr("S1 Standard"),
							"azureAuth":          to.Ptr("{\"scheme\":\"ServicePrincipal\",\"parameters\":{\"tenantid\":\"{subscriptionTenantId}\",\"objectid\":\"{appObjectId}\",\"serviceprincipalid\":\"{appId}\",\"serviceprincipalkey\":\"{appSecret}\"}}"),
							"location":           to.Ptr("South India"),
							"resourceGroup":      to.Ptr("myAspNetWebAppPipeline-rg"),
							"subscriptionId":     to.Ptr("{subscriptionId}"),
							"webAppName":         to.Ptr("myAspNetWebApp"),
						},
					},
				},
				Organization: &armdevops.OrganizationReference{
					Name: to.Ptr("myAspNetWebAppPipeline-org"),
				},
				Project: &armdevops.ProjectReference{
					Name: to.Ptr("myAspNetWebAppPipeline-project"),
				},
			},
		},
		&armdevops.PipelinesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/devops/resource-manager/Microsoft.DevOps/preview/2019-07-01-preview/examples/CreateAzurePipeline-Sample-AspNet-WindowsWebApp.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/devops/resource-manager/Microsoft.DevOps/preview/2019-07-01-preview/examples/CreateAzurePipeline-Sample-AspNet-WindowsWebApp.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdevops.Pipeline{
			Name:     to.Ptr("myAspNetWebAppPipeline"),
			Type:     to.Ptr("Microsoft.DevOps/pipelines"),
			ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myAspNetWebAppPipeline-rg/providers/Microsoft.DevOps/pipelines/myAspNetWebAppPipeline"),
			Location: to.Ptr("South India"),
			Properties: &armdevops.PipelineProperties{
				BootstrapConfiguration: &armdevops.BootstrapConfiguration{
					Template: &armdevops.PipelineTemplate{
						ID: to.Ptr("ms.vss-continuous-delivery-pipeline-templates.aspnet-windowswebapp"),
						Parameters: map[string]*string{
							"appInsightLocation": to.Ptr("South India"),
							"appServicePlan":     to.Ptr("S1 Standard"),
							"azureAuth":          nil,
							"location":           to.Ptr("South India"),
							"resourceGroup":      to.Ptr("myAspNetWebAppPipeline-rg"),
							"subscriptionId":     to.Ptr("{subscriptionId}"),
							"webAppName":         to.Ptr("myAspNetWebApp"),
						},
					},
				},
				Organization: &armdevops.OrganizationReference{
					Name: to.Ptr("myAspNetWebAppPipeline-org"),
				},
				Project: &armdevops.ProjectReference{
					Name: to.Ptr("myAspNetWebAppPipeline-project"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Pipeline) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Pipeline)
			t.Fatalf("Mock response is not equal to example response for example specification/devops/resource-manager/Microsoft.DevOps/preview/2019-07-01-preview/examples/CreateAzurePipeline-Sample-AspNet-WindowsWebApp.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPipelines_Get(t *testing.T) {
	// From example specification/devops/resource-manager/Microsoft.DevOps/preview/2019-07-01-preview/examples/GetAzurePipeline.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get an existing Azure pipeline"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevops.NewPipelinesClient("{subscriptionId}", cred, &options)
	res, err := client.Get(ctx,
		"myAspNetWebAppPipeline-rg",
		"myAspNetWebAppPipeline",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/devops/resource-manager/Microsoft.DevOps/preview/2019-07-01-preview/examples/GetAzurePipeline.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdevops.Pipeline{
			Name:     to.Ptr("myAspNetWebAppPipeline"),
			Type:     to.Ptr("Microsoft.DevOps/pipelines"),
			ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myAspNetWebAppPipeline-rg/providers/Microsoft.DevOps/pipelines/myAspNetWebAppPipeline"),
			Location: to.Ptr("South India"),
			Properties: &armdevops.PipelineProperties{
				BootstrapConfiguration: &armdevops.BootstrapConfiguration{
					Template: &armdevops.PipelineTemplate{
						ID: to.Ptr("ms.vss-continuous-delivery-pipeline-templates.aspnet-windowswebapp"),
						Parameters: map[string]*string{
							"appInsightLocation": to.Ptr("South India"),
							"appServicePlan":     to.Ptr("S1 Standard"),
							"azureAuth":          nil,
							"location":           to.Ptr("South India"),
							"resourceGroup":      to.Ptr("myAspNetWebAppPipeline-rg"),
							"subscriptionId":     to.Ptr("{subscriptionId}"),
							"webAppName":         to.Ptr("myAspNetWebApp"),
						},
					},
				},
				Organization: &armdevops.OrganizationReference{
					Name: to.Ptr("myAspNetWebAppPipeline-org"),
				},
				Project: &armdevops.ProjectReference{
					Name: to.Ptr("myAspNetWebAppPipeline-project"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Pipeline) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Pipeline)
			t.Fatalf("Mock response is not equal to example response for example specification/devops/resource-manager/Microsoft.DevOps/preview/2019-07-01-preview/examples/GetAzurePipeline.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPipelines_Update(t *testing.T) {
	// From example specification/devops/resource-manager/Microsoft.DevOps/preview/2019-07-01-preview/examples/UpdateAzurePipeline.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get an existing Azure pipeline"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevops.NewPipelinesClient("{subscriptionId}", cred, &options)
	res, err := client.Update(ctx,
		"myAspNetWebAppPipeline-rg",
		"myAspNetWebAppPipeline",
		armdevops.PipelineUpdateParameters{
			Tags: map[string]*string{
				"tagKey": to.Ptr("tagvalue"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/devops/resource-manager/Microsoft.DevOps/preview/2019-07-01-preview/examples/UpdateAzurePipeline.json: %v", err)
	}
	// Response check
	{
		exampleRes := armdevops.Pipeline{
			Name:     to.Ptr("myAspNetWebAppPipeline"),
			Type:     to.Ptr("Microsoft.DevOps/pipelines"),
			ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myAspNetWebAppPipeline-rg/providers/Microsoft.DevOps/pipelines/myAspNetWebAppPipeline"),
			Location: to.Ptr("South India"),
			Tags: map[string]*string{
				"tagKey": to.Ptr("tagvalue"),
			},
			Properties: &armdevops.PipelineProperties{
				BootstrapConfiguration: &armdevops.BootstrapConfiguration{
					Template: &armdevops.PipelineTemplate{
						ID: to.Ptr("ms.vss-continuous-delivery-pipeline-templates.aspnet-windowswebapp"),
						Parameters: map[string]*string{
							"appInsightLocation": to.Ptr("South India"),
							"appServicePlan":     to.Ptr("S1 Standard"),
							"azureAuth":          nil,
							"location":           to.Ptr("South India"),
							"resourceGroup":      to.Ptr("myAspNetWebAppPipeline-rg"),
							"subscriptionId":     to.Ptr("{subscriptionId}"),
							"webAppName":         to.Ptr("myAspNetWebApp"),
						},
					},
				},
				Organization: &armdevops.OrganizationReference{
					Name: to.Ptr("myAspNetWebAppPipeline-org"),
				},
				Project: &armdevops.ProjectReference{
					Name: to.Ptr("myAspNetWebAppPipeline-project"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Pipeline) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Pipeline)
			t.Fatalf("Mock response is not equal to example response for example specification/devops/resource-manager/Microsoft.DevOps/preview/2019-07-01-preview/examples/UpdateAzurePipeline.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPipelines_Delete(t *testing.T) {
	// From example specification/devops/resource-manager/Microsoft.DevOps/preview/2019-07-01-preview/examples/DeleteAzurePipeline.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get an existing Azure pipeline"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevops.NewPipelinesClient("{subscriptionId}", cred, &options)
	_, err := client.Delete(ctx,
		"myAspNetWebAppPipeline-rg",
		"myAspNetWebAppPipeline",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/devops/resource-manager/Microsoft.DevOps/preview/2019-07-01-preview/examples/DeleteAzurePipeline.json: %v", err)
	}
}

func TestPipelines_ListByResourceGroup(t *testing.T) {
	// From example specification/devops/resource-manager/Microsoft.DevOps/preview/2019-07-01-preview/examples/ListAzurePipelinesByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all Azure Pipelines under the specified resource group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevops.NewPipelinesClient("{subscriptionId}", cred, &options)
	pager := client.ListByResourceGroup("myAspNetWebAppPipeline-rg",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/devops/resource-manager/Microsoft.DevOps/preview/2019-07-01-preview/examples/ListAzurePipelinesByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdevops.PipelineListResult{
			Value: []*armdevops.Pipeline{
				{
					Name:     to.Ptr("myAspNetWebAppPipeline"),
					Type:     to.Ptr("Microsoft.DevOps/pipelines"),
					ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myAspNetWebAppPipeline-rg/providers/Microsoft.DevOps/pipelines/myAspNetWebAppPipeline"),
					Location: to.Ptr("South India"),
					Properties: &armdevops.PipelineProperties{
						BootstrapConfiguration: &armdevops.BootstrapConfiguration{
							Template: &armdevops.PipelineTemplate{
								ID: to.Ptr("ms.vss-continuous-delivery-pipeline-templates.aspnet-windowswebapp"),
								Parameters: map[string]*string{
									"appInsightLocation": to.Ptr("South India"),
									"appServicePlan":     to.Ptr("S1 Standard"),
									"azureAuth":          nil,
									"location":           to.Ptr("South India"),
									"resourceGroup":      to.Ptr("myAspNetWebAppPipeline-rg"),
									"subscriptionId":     to.Ptr("{subscriptionId}"),
									"webAppName":         to.Ptr("myAspNetWebApp"),
								},
							},
						},
						Organization: &armdevops.OrganizationReference{
							Name: to.Ptr("myAspNetWebAppPipeline-org"),
						},
						Project: &armdevops.ProjectReference{
							Name: to.Ptr("myAspNetWebAppPipeline-project"),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PipelineListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PipelineListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/devops/resource-manager/Microsoft.DevOps/preview/2019-07-01-preview/examples/ListAzurePipelinesByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPipelines_ListBySubscription(t *testing.T) {
	// From example specification/devops/resource-manager/Microsoft.DevOps/preview/2019-07-01-preview/examples/ListAzurePipelinesBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List all Azure pipelines under the specified subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armdevops.NewPipelinesClient("{subscriptionId}", cred, &options)
	pager := client.ListBySubscription(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/devops/resource-manager/Microsoft.DevOps/preview/2019-07-01-preview/examples/ListAzurePipelinesBySubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armdevops.PipelineListResult{
			Value: []*armdevops.Pipeline{
				{
					Name:     to.Ptr("myAspNetWebAppPipeline"),
					Type:     to.Ptr("Microsoft.DevOps/pipelines"),
					ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myAspNetWebAppPipeline-rg/providers/Microsoft.DevOps/pipelines/myAspNetWebAppPipeline"),
					Location: to.Ptr("South India"),
					Properties: &armdevops.PipelineProperties{
						BootstrapConfiguration: &armdevops.BootstrapConfiguration{
							Template: &armdevops.PipelineTemplate{
								ID: to.Ptr("ms.vss-continuous-delivery-pipeline-templates.aspnet-windowswebapp"),
								Parameters: map[string]*string{
									"appInsightLocation": to.Ptr("South India"),
									"appServicePlan":     to.Ptr("S1 Standard"),
									"azureAuth":          nil,
									"location":           to.Ptr("South India"),
									"resourceGroup":      to.Ptr("myAspNetWebAppPipeline-rg"),
									"subscriptionId":     to.Ptr("{subscriptionId}"),
									"webAppName":         to.Ptr("myAspNetWebApp"),
								},
							},
						},
						Organization: &armdevops.OrganizationReference{
							Name: to.Ptr("myAspNetWebAppPipeline-org"),
						},
						Project: &armdevops.ProjectReference{
							Name: to.Ptr("myAspNetWebAppPipeline-project"),
						},
					},
				},
				{
					Name:     to.Ptr("myAspNetWebAppPipeline1"),
					Type:     to.Ptr("Microsoft.DevOps/pipelines"),
					ID:       to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myAspNetWebAppPipeline-rg1/providers/Microsoft.DevOps/pipelines/myAspNetWebAppPipeline1"),
					Location: to.Ptr("South India"),
					Properties: &armdevops.PipelineProperties{
						BootstrapConfiguration: &armdevops.BootstrapConfiguration{
							Template: &armdevops.PipelineTemplate{
								ID: to.Ptr("ms.vss-continuous-delivery-pipeline-templates.aspnet-windowswebapp"),
								Parameters: map[string]*string{
									"appInsightLocation": to.Ptr("South India"),
									"appServicePlan":     to.Ptr("S1 Standard"),
									"azureAuth":          nil,
									"location":           to.Ptr("South India"),
									"resourceGroup":      to.Ptr("myAspNetWebAppPipeline-rg"),
									"subscriptionId":     to.Ptr("{subscriptionId}"),
									"webAppName":         to.Ptr("myAspNetWebApp"),
								},
							},
						},
						Organization: &armdevops.OrganizationReference{
							Name: to.Ptr("myAspNetWebAppPipeline-org1"),
						},
						Project: &armdevops.ProjectReference{
							Name: to.Ptr("myAspNetWebAppPipeline-project1"),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PipelineListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PipelineListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/devops/resource-manager/Microsoft.DevOps/preview/2019-07-01-preview/examples/ListAzurePipelinesBySubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
