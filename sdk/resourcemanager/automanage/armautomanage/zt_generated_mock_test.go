//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armautomanage_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/automanage/armautomanage"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestBestPractices_Get(t *testing.T) {
	// From example specification/automanage/resource-manager/Microsoft.Automanage/preview/2021-04-30-preview/examples/getBestPractice.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get an Automanage best practice "},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomanage.NewBestPracticesClient(cred, &options)
	res, err := client.Get(ctx,
		"azureBestPracticesProduction",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automanage/resource-manager/Microsoft.Automanage/preview/2021-04-30-preview/examples/getBestPractice.json: %v", err)
	}
	// Response check
	{
		exampleRes := armautomanage.BestPractice{
			Name: to.Ptr("azureBestPracticesProduction"),
			Type: to.Ptr("Microsoft.Automanage/bestPractices"),
			ID:   to.Ptr("/providers/Microsoft.Automanage/bestPractices/azureBestPracticesProduction"),
			Properties: &armautomanage.ConfigurationProfileProperties{
				Configuration: map[string]interface{}{
					"Antimalware/Enable":                                           true,
					"Antimalware/EnableRealTimeProtection":                         true,
					"Antimalware/RunScheduledScan":                                 true,
					"Antimalware/ScanDay":                                          "7",
					"Antimalware/ScanTimeInMinutes":                                "120",
					"Antimalware/ScanType":                                         "Quick",
					"AzureSecurityCenter/Enable":                                   true,
					"Backup/Enable":                                                true,
					"Backup/InstantRpRetentionRangeInDays":                         "2",
					"Backup/PolicyName":                                            "dailyBackupPolicy",
					"Backup/RetentionPolicy/DailySchedule/RetentionDuration/Count": "180",
					"Backup/RetentionPolicy/DailySchedule/RetentionDuration/DurationType": "Days",
					"Backup/RetentionPolicy/DailySchedule/RetentionTimes":                 "[ 2017-01-26T00:00:00Z ]",
					"Backup/RetentionPolicy/RetentionPolicyType":                          "LongTermRetentionPolicy",
					"Backup/SchedulePolicy/SchedulePolicyType":                            "SimpleSchedulePolicy",
					"Backup/SchedulePolicy/ScheduleRunFrequency":                          "Daily",
					"Backup/SchedulePolicy/ScheduleRunTimes":                              "[ 2017-01-26T00:00:00Z ]",
					"Backup/TimeZone":                                                     "UTC",
					"BootDiagnostics/Enable":                                              true,
					"ChangeTrackingAndInventory/Enable":                                   true,
					"GuestConfiguration/Enable":                                           true,
					"LogAnalytics/Enable":                                                 true,
					"UpdateManagement/Enable":                                             true,
					"VMInsights/Enable":                                                   true,
				},
			},
			SystemData: &armautomanage.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-03T01:01:01.1075056Z"); return t }()),
				CreatedBy:          to.Ptr("user1@outlook.com"),
				CreatedByType:      to.Ptr(armautomanage.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-04T02:03:01.1974346Z"); return t }()),
				LastModifiedBy:     to.Ptr("user2@outlook.com"),
				LastModifiedByType: to.Ptr(armautomanage.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.BestPractice) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.BestPractice)
			t.Fatalf("Mock response is not equal to example response for example specification/automanage/resource-manager/Microsoft.Automanage/preview/2021-04-30-preview/examples/getBestPractice.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBestPractices_ListByTenant(t *testing.T) {
	// From example specification/automanage/resource-manager/Microsoft.Automanage/preview/2021-04-30-preview/examples/listBestPracticesByTenant.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Automanage bestPractices "},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomanage.NewBestPracticesClient(cred, &options)
	pager := client.ListByTenant(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/automanage/resource-manager/Microsoft.Automanage/preview/2021-04-30-preview/examples/listBestPracticesByTenant.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armautomanage.BestPracticeList{
			Value: []*armautomanage.BestPractice{
				{
					Name: to.Ptr("azureBestPracticesProduction"),
					Type: to.Ptr("Microsoft.Automanage/bestPractices"),
					ID:   to.Ptr("/providers/Microsoft.Automanage/bestPractices/azureBestPracticesProduction"),
					Properties: &armautomanage.ConfigurationProfileProperties{
						Configuration: map[string]interface{}{
							"Antimalware/Enable":                                           true,
							"Antimalware/EnableRealTimeProtection":                         true,
							"Antimalware/RunScheduledScan":                                 true,
							"Antimalware/ScanDay":                                          "7",
							"Antimalware/ScanTimeInMinutes":                                "120",
							"Antimalware/ScanType":                                         "Quick",
							"AzureSecurityCenter/Enable":                                   true,
							"Backup/Enable":                                                true,
							"Backup/InstantRpRetentionRangeInDays":                         "2",
							"Backup/PolicyName":                                            "dailyBackupPolicy",
							"Backup/RetentionPolicy/DailySchedule/RetentionDuration/Count": "180",
							"Backup/RetentionPolicy/DailySchedule/RetentionDuration/DurationType": "Days",
							"Backup/RetentionPolicy/DailySchedule/RetentionTimes":                 "[ 2017-01-26T00:00:00Z ]",
							"Backup/RetentionPolicy/RetentionPolicyType":                          "LongTermRetentionPolicy",
							"Backup/SchedulePolicy/SchedulePolicyType":                            "SimpleSchedulePolicy",
							"Backup/SchedulePolicy/ScheduleRunFrequency":                          "Daily",
							"Backup/SchedulePolicy/ScheduleRunTimes":                              "[ 2017-01-26T00:00:00Z ]",
							"Backup/TimeZone":                                                     "UTC",
							"BootDiagnostics/Enable":                                              true,
							"ChangeTrackingAndInventory/Enable":                                   true,
							"GuestConfiguration/Enable":                                           true,
							"LogAnalytics/Enable":                                                 true,
							"UpdateManagement/Enable":                                             true,
							"VMInsights/Enable":                                                   true,
						},
					},
					SystemData: &armautomanage.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-03T01:01:01.1075056Z"); return t }()),
						CreatedBy:          to.Ptr("user1@outlook.com"),
						CreatedByType:      to.Ptr(armautomanage.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-04T02:03:01.1974346Z"); return t }()),
						LastModifiedBy:     to.Ptr("user2@outlook.com"),
						LastModifiedByType: to.Ptr(armautomanage.CreatedByTypeUser),
					},
				},
				{
					Name: to.Ptr("azureBestPracticesDevTest"),
					Type: to.Ptr("Microsoft.Automanage/bestPractices"),
					ID:   to.Ptr("/providers/Microsoft.Automanage/bestPractices/azureBestPracticesDevTest"),
					Properties: &armautomanage.ConfigurationProfileProperties{
						Configuration: map[string]interface{}{
							"Antimalware/Enable":                   true,
							"Antimalware/EnableRealTimeProtection": true,
							"Antimalware/RunScheduledScan":         true,
							"Antimalware/ScanDay":                  "7",
							"Antimalware/ScanTimeInMinutes":        "120",
							"Antimalware/ScanType":                 "Quick",
							"AzureSecurityCenter/Enable":           true,
							"Backup/Enable":                        false,
							"BootDiagnostics/Enable":               true,
							"ChangeTrackingAndInventory/Enable":    true,
							"GuestConfiguration/Enable":            true,
							"LogAnalytics/Enable":                  true,
							"UpdateManagement/Enable":              true,
							"VMInsights/Enable":                    false,
						},
					},
					SystemData: &armautomanage.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-03T01:01:01.1075056Z"); return t }()),
						CreatedBy:          to.Ptr("user1@outlook.com"),
						CreatedByType:      to.Ptr(armautomanage.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-04T02:03:01.1974346Z"); return t }()),
						LastModifiedBy:     to.Ptr("user2@outlook.com"),
						LastModifiedByType: to.Ptr(armautomanage.CreatedByTypeUser),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.BestPracticeList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.BestPracticeList)
			t.Fatalf("Mock response is not equal to example response for example specification/automanage/resource-manager/Microsoft.Automanage/preview/2021-04-30-preview/examples/listBestPracticesByTenant.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBestPracticesVersions_Get(t *testing.T) {
	// From example specification/automanage/resource-manager/Microsoft.Automanage/preview/2021-04-30-preview/examples/getBestPracticeVersion.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get an Automanage best practice version "},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomanage.NewBestPracticesVersionsClient(cred, &options)
	res, err := client.Get(ctx,
		"azureBestPracticesProduction",
		"version1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automanage/resource-manager/Microsoft.Automanage/preview/2021-04-30-preview/examples/getBestPracticeVersion.json: %v", err)
	}
	// Response check
	{
		exampleRes := armautomanage.BestPractice{
			Name: to.Ptr("azureBestPracticesProduction/version1"),
			Type: to.Ptr("Microsoft.Automanage/bestPractices/versions"),
			ID:   to.Ptr("/providers/Microsoft.Automanage/bestPractices/azureBestPracticesProduction/versions/version1"),
			Properties: &armautomanage.ConfigurationProfileProperties{
				Configuration: map[string]interface{}{
					"Antimalware/Enable":                                           true,
					"Antimalware/EnableRealTimeProtection":                         true,
					"Antimalware/RunScheduledScan":                                 true,
					"Antimalware/ScanDay":                                          "7",
					"Antimalware/ScanTimeInMinutes":                                "120",
					"Antimalware/ScanType":                                         "Quick",
					"AzureSecurityCenter/Enable":                                   true,
					"Backup/Enable":                                                true,
					"Backup/InstantRpRetentionRangeInDays":                         "2",
					"Backup/PolicyName":                                            "dailyBackupPolicy",
					"Backup/RetentionPolicy/DailySchedule/RetentionDuration/Count": "180",
					"Backup/RetentionPolicy/DailySchedule/RetentionDuration/DurationType": "Days",
					"Backup/RetentionPolicy/DailySchedule/RetentionTimes":                 "[ 2017-01-26T00:00:00Z ]",
					"Backup/RetentionPolicy/RetentionPolicyType":                          "LongTermRetentionPolicy",
					"Backup/SchedulePolicy/SchedulePolicyType":                            "SimpleSchedulePolicy",
					"Backup/SchedulePolicy/ScheduleRunFrequency":                          "Daily",
					"Backup/SchedulePolicy/ScheduleRunTimes":                              "[ 2017-01-26T00:00:00Z ]",
					"Backup/TimeZone":                                                     "UTC",
					"BootDiagnostics/Enable":                                              true,
					"ChangeTrackingAndInventory/Enable":                                   true,
					"GuestConfiguration/Enable":                                           true,
					"LogAnalytics/Enable":                                                 true,
					"UpdateManagement/Enable":                                             true,
					"VMInsights/Enable":                                                   true,
				},
			},
			SystemData: &armautomanage.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-03T01:01:01.1075056Z"); return t }()),
				CreatedBy:          to.Ptr("user1@outlook.com"),
				CreatedByType:      to.Ptr(armautomanage.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-04T02:03:01.1974346Z"); return t }()),
				LastModifiedBy:     to.Ptr("user2@outlook.com"),
				LastModifiedByType: to.Ptr(armautomanage.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.BestPractice) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.BestPractice)
			t.Fatalf("Mock response is not equal to example response for example specification/automanage/resource-manager/Microsoft.Automanage/preview/2021-04-30-preview/examples/getBestPracticeVersion.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBestPracticesVersions_ListByTenant(t *testing.T) {
	// From example specification/automanage/resource-manager/Microsoft.Automanage/preview/2021-04-30-preview/examples/listBestPracticesVersionsByTenant.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List Automanage best practices versions "},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomanage.NewBestPracticesVersionsClient(cred, &options)
	pager := client.ListByTenant("azureBestPracticesProduction",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/automanage/resource-manager/Microsoft.Automanage/preview/2021-04-30-preview/examples/listBestPracticesVersionsByTenant.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armautomanage.BestPracticeList{
			Value: []*armautomanage.BestPractice{
				{
					Name: to.Ptr("azureBestPracticesProduction/version1"),
					Type: to.Ptr("Microsoft.Automanage/bestPractices/versions"),
					ID:   to.Ptr("/providers/Microsoft.Automanage/bestPractices/azureBestPracticesProduction/versions/version1"),
					Properties: &armautomanage.ConfigurationProfileProperties{
						Configuration: map[string]interface{}{
							"Antimalware/Enable":                                           true,
							"Antimalware/EnableRealTimeProtection":                         true,
							"Antimalware/RunScheduledScan":                                 true,
							"Antimalware/ScanDay":                                          "7",
							"Antimalware/ScanTimeInMinutes":                                "120",
							"Antimalware/ScanType":                                         "Quick",
							"AzureSecurityCenter/Enable":                                   true,
							"Backup/Enable":                                                true,
							"Backup/InstantRpRetentionRangeInDays":                         "2",
							"Backup/PolicyName":                                            "dailyBackupPolicy",
							"Backup/RetentionPolicy/DailySchedule/RetentionDuration/Count": "180",
							"Backup/RetentionPolicy/DailySchedule/RetentionDuration/DurationType": "Days",
							"Backup/RetentionPolicy/DailySchedule/RetentionTimes":                 "[ 2017-01-26T00:00:00Z ]",
							"Backup/RetentionPolicy/RetentionPolicyType":                          "LongTermRetentionPolicy",
							"Backup/SchedulePolicy/SchedulePolicyType":                            "SimpleSchedulePolicy",
							"Backup/SchedulePolicy/ScheduleRunFrequency":                          "Daily",
							"Backup/SchedulePolicy/ScheduleRunTimes":                              "[ 2017-01-26T00:00:00Z ]",
							"Backup/TimeZone":                                                     "UTC",
							"BootDiagnostics/Enable":                                              true,
							"ChangeTrackingAndInventory/Enable":                                   true,
							"GuestConfiguration/Enable":                                           true,
							"LogAnalytics/Enable":                                                 true,
							"UpdateManagement/Enable":                                             true,
							"VMInsights/Enable":                                                   true,
						},
					},
					SystemData: &armautomanage.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-03T01:01:01.1075056Z"); return t }()),
						CreatedBy:          to.Ptr("user1@outlook.com"),
						CreatedByType:      to.Ptr(armautomanage.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-04T02:03:01.1974346Z"); return t }()),
						LastModifiedBy:     to.Ptr("user2@outlook.com"),
						LastModifiedByType: to.Ptr(armautomanage.CreatedByTypeUser),
					},
				},
				{
					Name: to.Ptr("azureBestPracticesProduction/version2"),
					Type: to.Ptr("Microsoft.Automanage/bestPractices/versions"),
					ID:   to.Ptr("/providers/Microsoft.Automanage/bestPractices/azureBestPracticesProduction/versions/version2"),
					Properties: &armautomanage.ConfigurationProfileProperties{
						Configuration: map[string]interface{}{
							"Antimalware/Enable":                   true,
							"Antimalware/EnableRealTimeProtection": true,
							"Antimalware/RunScheduledScan":         true,
							"Antimalware/ScanDay":                  "7",
							"Antimalware/ScanTimeInMinutes":        "120",
							"Antimalware/ScanType":                 "Quick",
							"AzureSecurityCenter/Enable":           true,
							"Backup/Enable":                        false,
							"BootDiagnostics/Enable":               true,
							"ChangeTrackingAndInventory/Enable":    true,
							"GuestConfiguration/Enable":            true,
							"LogAnalytics/Enable":                  true,
							"UpdateManagement/Enable":              true,
							"VMInsights/Enable":                    false,
						},
					},
					SystemData: &armautomanage.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-03T01:01:01.1075056Z"); return t }()),
						CreatedBy:          to.Ptr("user1@outlook.com"),
						CreatedByType:      to.Ptr(armautomanage.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-04T02:03:01.1974346Z"); return t }()),
						LastModifiedBy:     to.Ptr("user2@outlook.com"),
						LastModifiedByType: to.Ptr(armautomanage.CreatedByTypeUser),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.BestPracticeList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.BestPracticeList)
			t.Fatalf("Mock response is not equal to example response for example specification/automanage/resource-manager/Microsoft.Automanage/preview/2021-04-30-preview/examples/listBestPracticesVersionsByTenant.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestConfigurationProfiles_CreateOrUpdate(t *testing.T) {
	// From example specification/automanage/resource-manager/Microsoft.Automanage/preview/2021-04-30-preview/examples/createOrUpdateConfigurationProfile.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update configuration profile"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomanage.NewConfigurationProfilesClient("mySubscriptionId", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"customConfigurationProfile",
		"myResourceGroupName",
		armautomanage.ConfigurationProfile{
			Location: to.Ptr("East US"),
			Tags: map[string]*string{
				"Organization": to.Ptr("Administration"),
			},
			Properties: &armautomanage.ConfigurationProfileProperties{
				Configuration: map[string]interface{}{
					"Antimalware/Enable":                false,
					"AzureSecurityCenter/Enable":        true,
					"Backup/Enable":                     false,
					"BootDiagnostics/Enable":            true,
					"ChangeTrackingAndInventory/Enable": true,
					"GuestConfiguration/Enable":         true,
					"LogAnalytics/Enable":               true,
					"UpdateManagement/Enable":           true,
					"VMInsights/Enable":                 true,
				},
				Overrides: []interface{}{
					map[string]interface{}{
						"if": map[string]interface{}{
							"equals": "eastus",
							"field":  "$.location",
						},
						"priority": float64(100),
						"then": map[string]interface{}{
							"LogAnalytics/Enable":      true,
							"LogAnalytics/Reprovision": true,
							"LogAnalytics/Workspace":   "/subscriptions/abc/resourceGroups/xyz/providers/Microsoft.La/Workspaces/eastus",
						},
					},
					map[string]interface{}{
						"if": map[string]interface{}{
							"equals": "centralcanada",
							"field":  "$.location",
						},
						"priority": float64(200),
						"then": map[string]interface{}{
							"LogAnalytics/Enable":      true,
							"LogAnalytics/Reprovision": true,
							"LogAnalytics/Workspace":   "/subscriptions/abc/resourceGroups/xyz/providers/Microsoft.La/Workspaces/centralcanada",
						},
					}},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automanage/resource-manager/Microsoft.Automanage/preview/2021-04-30-preview/examples/createOrUpdateConfigurationProfile.json: %v", err)
	}
	// Response check
	{
		exampleRes := armautomanage.ConfigurationProfile{
			Name:     to.Ptr("customConfigurationProfile"),
			Type:     to.Ptr("Microsoft.Automanage/configurationProfiles"),
			ID:       to.Ptr("/subscriptions/subscriptionId/resourceGroups/myResourceGroupName/providers/Microsoft.Automanage/configurationProfiles/customConfigurationProfile"),
			Location: to.Ptr("East US"),
			Tags: map[string]*string{
				"Organization": to.Ptr("Administration"),
			},
			Properties: &armautomanage.ConfigurationProfileProperties{
				Configuration: map[string]interface{}{
					"Antimalware/Enable":                false,
					"AzureSecurityCenter/Enable":        true,
					"Backup/Enable":                     false,
					"BootDiagnostics/Enable":            true,
					"ChangeTrackingAndInventory/Enable": true,
					"GuestConfiguration/Enable":         true,
					"LogAnalytics/Enable":               true,
					"UpdateManagement/Enable":           true,
					"VMInsights/Enable":                 true,
				},
				Overrides: []interface{}{
					map[string]interface{}{
						"if": map[string]interface{}{
							"equals": "eastus",
							"field":  "$.location",
						},
						"priority": float64(100),
						"then": map[string]interface{}{
							"LogAnalytics/Enable":      true,
							"LogAnalytics/Reprovision": true,
							"LogAnalytics/Workspace":   "/subscriptions/abc/resourceGroups/xyz/providers/Microsoft.La/Workspaces/eastus",
						},
					},
					map[string]interface{}{
						"if": map[string]interface{}{
							"equals": "centralcanada",
							"field":  "$.location",
						},
						"priority": float64(200),
						"then": map[string]interface{}{
							"LogAnalytics/Enable":      true,
							"LogAnalytics/Reprovision": true,
							"LogAnalytics/Workspace":   "/subscriptions/abc/resourceGroups/xyz/providers/Microsoft.La/Workspaces/centralcanada",
						},
					}},
			},
			SystemData: &armautomanage.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-03T01:01:01.1075056Z"); return t }()),
				CreatedBy:          to.Ptr("user1@outlook.com"),
				CreatedByType:      to.Ptr(armautomanage.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-04T02:03:01.1974346Z"); return t }()),
				LastModifiedBy:     to.Ptr("user2@outlook.com"),
				LastModifiedByType: to.Ptr(armautomanage.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ConfigurationProfile) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ConfigurationProfile)
			t.Fatalf("Mock response is not equal to example response for example specification/automanage/resource-manager/Microsoft.Automanage/preview/2021-04-30-preview/examples/createOrUpdateConfigurationProfile.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestConfigurationProfiles_Get(t *testing.T) {
	// From example specification/automanage/resource-manager/Microsoft.Automanage/preview/2021-04-30-preview/examples/getConfigurationProfile.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a configuration profile"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomanage.NewConfigurationProfilesClient("mySubscriptionId", cred, &options)
	res, err := client.Get(ctx,
		"customConfigurationProfile",
		"myResourceGroupName",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automanage/resource-manager/Microsoft.Automanage/preview/2021-04-30-preview/examples/getConfigurationProfile.json: %v", err)
	}
	// Response check
	{
		exampleRes := armautomanage.ConfigurationProfile{
			Name:     to.Ptr("customConfigurationProfile"),
			Type:     to.Ptr("Microsoft.Automanage/ConfigurationProfiles"),
			ID:       to.Ptr("/subscriptions/subscriptionId/resourceGroups/myResourceGroupName/providers/Microsoft.Automanage/configurationProfiles/customConfigurationProfile"),
			Location: to.Ptr("East US"),
			Tags: map[string]*string{
				"Organization": to.Ptr("Administration"),
			},
			Properties: &armautomanage.ConfigurationProfileProperties{
				Configuration: map[string]interface{}{
					"Antimalware/Enable":                false,
					"AzureSecurityCenter/Enable":        true,
					"Backup/Enable":                     false,
					"BootDiagnostics/Enable":            true,
					"ChangeTrackingAndInventory/Enable": true,
					"GuestConfiguration/Enable":         true,
					"LogAnalytics/Enable":               true,
					"UpdateManagement/Enable":           true,
					"VMInsights/Enable":                 true,
				},
				Overrides: []interface{}{
					map[string]interface{}{
						"if": map[string]interface{}{
							"equals": "eastus",
							"field":  "$.location",
						},
						"priority": float64(100),
						"then": map[string]interface{}{
							"LogAnalytics/Enable":      true,
							"LogAnalytics/Reprovision": true,
							"LogAnalytics/Workspace":   "/subscriptions/abc/resourceGroups/xyz/providers/Microsoft.La/Workspaces/eastus",
						},
					},
					map[string]interface{}{
						"if": map[string]interface{}{
							"equals": "centralcanada",
							"field":  "$.location",
						},
						"priority": float64(200),
						"then": map[string]interface{}{
							"LogAnalytics/Enable":      true,
							"LogAnalytics/Reprovision": true,
							"LogAnalytics/Workspace":   "/subscriptions/abc/resourceGroups/xyz/providers/Microsoft.La/Workspaces/centralcanada",
						},
					}},
			},
			SystemData: &armautomanage.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-03T01:01:01.1075056Z"); return t }()),
				CreatedBy:          to.Ptr("user1@outlook.com"),
				CreatedByType:      to.Ptr(armautomanage.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-04T02:03:01.1974346Z"); return t }()),
				LastModifiedBy:     to.Ptr("user2@outlook.com"),
				LastModifiedByType: to.Ptr(armautomanage.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ConfigurationProfile) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ConfigurationProfile)
			t.Fatalf("Mock response is not equal to example response for example specification/automanage/resource-manager/Microsoft.Automanage/preview/2021-04-30-preview/examples/getConfigurationProfile.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestConfigurationProfiles_Delete(t *testing.T) {
	// From example specification/automanage/resource-manager/Microsoft.Automanage/preview/2021-04-30-preview/examples/deleteConfigurationProfile.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a configuration profile"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomanage.NewConfigurationProfilesClient("subid", cred, &options)
	_, err := client.Delete(ctx,
		"rg",
		"customConfigurationProfile",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automanage/resource-manager/Microsoft.Automanage/preview/2021-04-30-preview/examples/deleteConfigurationProfile.json: %v", err)
	}
}

func TestConfigurationProfiles_Update(t *testing.T) {
	// From example specification/automanage/resource-manager/Microsoft.Automanage/preview/2021-04-30-preview/examples/updateConfigurationProfile.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update configuration profile"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomanage.NewConfigurationProfilesClient("mySubscriptionId", cred, &options)
	res, err := client.Update(ctx,
		"customConfigurationProfile",
		"myResourceGroupName",
		armautomanage.ConfigurationProfileUpdate{
			Tags: map[string]*string{
				"Organization": to.Ptr("Administration"),
			},
			Properties: &armautomanage.ConfigurationProfileProperties{
				Configuration: map[string]interface{}{
					"Antimalware/Enable":                false,
					"AzureSecurityCenter/Enable":        true,
					"Backup/Enable":                     false,
					"BootDiagnostics/Enable":            true,
					"ChangeTrackingAndInventory/Enable": true,
					"GuestConfiguration/Enable":         true,
					"LogAnalytics/Enable":               true,
					"UpdateManagement/Enable":           true,
					"VMInsights/Enable":                 true,
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automanage/resource-manager/Microsoft.Automanage/preview/2021-04-30-preview/examples/updateConfigurationProfile.json: %v", err)
	}
	// Response check
	{
		exampleRes := armautomanage.ConfigurationProfile{
			Name:     to.Ptr("customConfigurationProfile"),
			Type:     to.Ptr("Microsoft.Automanage/configurationProfiles"),
			ID:       to.Ptr("/subscriptions/subscriptionId/resourceGroups/myResourceGroupName/providers/Microsoft.Automanage/configurationProfiles/customConfigurationProfile"),
			Location: to.Ptr("East US"),
			Tags: map[string]*string{
				"Organization": to.Ptr("Administration"),
			},
			Properties: &armautomanage.ConfigurationProfileProperties{
				Configuration: map[string]interface{}{
					"Antimalware/Enable":                false,
					"AzureSecurityCenter/Enable":        true,
					"Backup/Enable":                     false,
					"BootDiagnostics/Enable":            true,
					"ChangeTrackingAndInventory/Enable": true,
					"GuestConfiguration/Enable":         true,
					"LogAnalytics/Enable":               true,
					"UpdateManagement/Enable":           true,
					"VMInsights/Enable":                 true,
				},
			},
			SystemData: &armautomanage.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-03T01:01:01.1075056Z"); return t }()),
				CreatedBy:          to.Ptr("user1@outlook.com"),
				CreatedByType:      to.Ptr(armautomanage.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-04T02:03:01.1974346Z"); return t }()),
				LastModifiedBy:     to.Ptr("user2@outlook.com"),
				LastModifiedByType: to.Ptr(armautomanage.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ConfigurationProfile) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ConfigurationProfile)
			t.Fatalf("Mock response is not equal to example response for example specification/automanage/resource-manager/Microsoft.Automanage/preview/2021-04-30-preview/examples/updateConfigurationProfile.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestConfigurationProfiles_ListByResourceGroup(t *testing.T) {
	// From example specification/automanage/resource-manager/Microsoft.Automanage/preview/2021-04-30-preview/examples/listConfigurationProfilesByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List configuration profiles by resource group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomanage.NewConfigurationProfilesClient("mySubscriptionId", cred, &options)
	pager := client.ListByResourceGroup("myResourceGroupName",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/automanage/resource-manager/Microsoft.Automanage/preview/2021-04-30-preview/examples/listConfigurationProfilesByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armautomanage.ConfigurationProfileList{
			Value: []*armautomanage.ConfigurationProfile{
				{
					Name:     to.Ptr("customConfigurationProfile"),
					Type:     to.Ptr("Microsoft.Automanage/ConfigurationProfiles"),
					ID:       to.Ptr("/subscriptions/subscriptionId/resourceGroups/myResourceGroupName/providers/Microsoft.Automanage/configurationProfiles/customConfigurationProfile"),
					Location: to.Ptr("East US"),
					Tags: map[string]*string{
						"Organization": to.Ptr("Administration"),
					},
					Properties: &armautomanage.ConfigurationProfileProperties{
						Configuration: map[string]interface{}{
							"Antimalware/Enable":                false,
							"AzureSecurityCenter/Enable":        true,
							"Backup/Enable":                     false,
							"BootDiagnostics/Enable":            true,
							"ChangeTrackingAndInventory/Enable": true,
							"GuestConfiguration/Enable":         true,
							"LogAnalytics/Enable":               true,
							"UpdateManagement/Enable":           true,
							"VMInsights/Enable":                 true,
						},
						Overrides: []interface{}{
							map[string]interface{}{
								"if": map[string]interface{}{
									"equals": "eastus",
									"field":  "$.location",
								},
								"priority": float64(100),
								"then": map[string]interface{}{
									"LogAnalytics/Enable":      true,
									"LogAnalytics/Reprovision": true,
									"LogAnalytics/Workspace":   "/subscriptions/abc/resourceGroups/xyz/providers/Microsoft.La/Workspaces/eastus",
								},
							},
							map[string]interface{}{
								"if": map[string]interface{}{
									"equals": "centralcanada",
									"field":  "$.location",
								},
								"priority": float64(200),
								"then": map[string]interface{}{
									"LogAnalytics/Enable":      true,
									"LogAnalytics/Reprovision": true,
									"LogAnalytics/Workspace":   "/subscriptions/abc/resourceGroups/xyz/providers/Microsoft.La/Workspaces/centralcanada",
								},
							}},
					},
					SystemData: &armautomanage.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-03T01:01:01.1075056Z"); return t }()),
						CreatedBy:          to.Ptr("user1@outlook.com"),
						CreatedByType:      to.Ptr(armautomanage.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-04T02:03:01.1974346Z"); return t }()),
						LastModifiedBy:     to.Ptr("user2@outlook.com"),
						LastModifiedByType: to.Ptr(armautomanage.CreatedByTypeUser),
					},
				},
				{
					Name:     to.Ptr("customConfigurationProfile2"),
					Type:     to.Ptr("Microsoft.Automanage/ConfigurationProfiles"),
					ID:       to.Ptr("/subscriptions/subscriptionId/resourceGroups/myResourceGroupName/providers/Microsoft.Automanage/configurationProfiles/customConfigurationProfile2"),
					Location: to.Ptr("East US"),
					Tags: map[string]*string{
						"Organization": to.Ptr("Administration"),
					},
					Properties: &armautomanage.ConfigurationProfileProperties{
						Configuration: map[string]interface{}{
							"Antimalware/Enable":                false,
							"AzureSecurityCenter/Enable":        true,
							"Backup/Enable":                     false,
							"BootDiagnostics/Enable":            true,
							"ChangeTrackingAndInventory/Enable": true,
							"GuestConfiguration/Enable":         true,
							"LogAnalytics/Enable":               true,
							"UpdateManagement/Enable":           true,
							"VMInsights/Enable":                 true,
						},
					},
					SystemData: &armautomanage.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-03T01:01:01.1075056Z"); return t }()),
						CreatedBy:          to.Ptr("user1@outlook.com"),
						CreatedByType:      to.Ptr(armautomanage.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-04T02:03:01.1974346Z"); return t }()),
						LastModifiedBy:     to.Ptr("user2@outlook.com"),
						LastModifiedByType: to.Ptr(armautomanage.CreatedByTypeUser),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ConfigurationProfileList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ConfigurationProfileList)
			t.Fatalf("Mock response is not equal to example response for example specification/automanage/resource-manager/Microsoft.Automanage/preview/2021-04-30-preview/examples/listConfigurationProfilesByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestConfigurationProfiles_ListBySubscription(t *testing.T) {
	// From example specification/automanage/resource-manager/Microsoft.Automanage/preview/2021-04-30-preview/examples/listConfigurationProfilesBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List configuration profiles by subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomanage.NewConfigurationProfilesClient("mySubscriptionId", cred, &options)
	pager := client.ListBySubscription(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/automanage/resource-manager/Microsoft.Automanage/preview/2021-04-30-preview/examples/listConfigurationProfilesBySubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armautomanage.ConfigurationProfileList{
			Value: []*armautomanage.ConfigurationProfile{
				{
					Name:     to.Ptr("customConfigurationProfile"),
					Type:     to.Ptr("Microsoft.Automanage/ConfigurationProfiles"),
					ID:       to.Ptr("/subscriptions/subscriptionId/resourceGroups/myResourceGroupName/providers/Microsoft.Automanage/configurationProfiles/customConfigurationProfile"),
					Location: to.Ptr("East US"),
					Tags: map[string]*string{
						"Organization": to.Ptr("Administration"),
					},
					Properties: &armautomanage.ConfigurationProfileProperties{
						Configuration: map[string]interface{}{
							"Antimalware/Enable":                false,
							"AzureSecurityCenter/Enable":        true,
							"Backup/Enable":                     false,
							"BootDiagnostics/Enable":            true,
							"ChangeTrackingAndInventory/Enable": true,
							"GuestConfiguration/Enable":         true,
							"LogAnalytics/Enable":               true,
							"UpdateManagement/Enable":           true,
							"VMInsights/Enable":                 true,
						},
						Overrides: []interface{}{
							map[string]interface{}{
								"if": map[string]interface{}{
									"equals": "eastus",
									"field":  "$.location",
								},
								"priority": float64(100),
								"then": map[string]interface{}{
									"LogAnalytics/Enable":      true,
									"LogAnalytics/Reprovision": true,
									"LogAnalytics/Workspace":   "/subscriptions/abc/resourceGroups/xyz/providers/Microsoft.La/Workspaces/eastus",
								},
							},
							map[string]interface{}{
								"if": map[string]interface{}{
									"equals": "centralcanada",
									"field":  "$.location",
								},
								"priority": float64(200),
								"then": map[string]interface{}{
									"LogAnalytics/Enable":      true,
									"LogAnalytics/Reprovision": true,
									"LogAnalytics/Workspace":   "/subscriptions/abc/resourceGroups/xyz/providers/Microsoft.La/Workspaces/centralcanada",
								},
							}},
					},
					SystemData: &armautomanage.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-03T01:01:01.1075056Z"); return t }()),
						CreatedBy:          to.Ptr("user1@outlook.com"),
						CreatedByType:      to.Ptr(armautomanage.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-04T02:03:01.1974346Z"); return t }()),
						LastModifiedBy:     to.Ptr("user2@outlook.com"),
						LastModifiedByType: to.Ptr(armautomanage.CreatedByTypeUser),
					},
				},
				{
					Name:     to.Ptr("customConfigurationProfile2"),
					Type:     to.Ptr("Microsoft.Automanage/ConfigurationProfiles"),
					ID:       to.Ptr("/subscriptions/subscriptionId/resourceGroups/myResourceGroupName/providers/Microsoft.Automanage/configurationProfiles/customConfigurationProfile2"),
					Location: to.Ptr("East US"),
					Tags: map[string]*string{
						"Organization": to.Ptr("Administration"),
					},
					Properties: &armautomanage.ConfigurationProfileProperties{
						Configuration: map[string]interface{}{
							"Antimalware/Enable":                false,
							"AzureSecurityCenter/Enable":        true,
							"Backup/Enable":                     false,
							"BootDiagnostics/Enable":            true,
							"ChangeTrackingAndInventory/Enable": true,
							"GuestConfiguration/Enable":         true,
							"LogAnalytics/Enable":               true,
							"UpdateManagement/Enable":           true,
							"VMInsights/Enable":                 true,
						},
						Overrides: []interface{}{
							map[string]interface{}{
								"if": map[string]interface{}{
									"equals": "eastus",
									"field":  "$.location",
								},
								"priority": float64(100),
								"then": map[string]interface{}{
									"LogAnalytics/Enable":      true,
									"LogAnalytics/Reprovision": true,
									"LogAnalytics/Workspace":   "/subscriptions/abc/resourceGroups/xyz/providers/Microsoft.La/Workspaces/eastus",
								},
							},
							map[string]interface{}{
								"if": map[string]interface{}{
									"equals": "centralcanada",
									"field":  "$.location",
								},
								"priority": float64(200),
								"then": map[string]interface{}{
									"LogAnalytics/Enable":      true,
									"LogAnalytics/Reprovision": true,
									"LogAnalytics/Workspace":   "/subscriptions/abc/resourceGroups/xyz/providers/Microsoft.La/Workspaces/centralcanada",
								},
							}},
					},
					SystemData: &armautomanage.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-03T01:01:01.1075056Z"); return t }()),
						CreatedBy:          to.Ptr("user1@outlook.com"),
						CreatedByType:      to.Ptr(armautomanage.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-04T02:03:01.1974346Z"); return t }()),
						LastModifiedBy:     to.Ptr("user2@outlook.com"),
						LastModifiedByType: to.Ptr(armautomanage.CreatedByTypeUser),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ConfigurationProfileList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ConfigurationProfileList)
			t.Fatalf("Mock response is not equal to example response for example specification/automanage/resource-manager/Microsoft.Automanage/preview/2021-04-30-preview/examples/listConfigurationProfilesBySubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestConfigurationProfilesVersions_CreateOrUpdate(t *testing.T) {
	// From example specification/automanage/resource-manager/Microsoft.Automanage/preview/2021-04-30-preview/examples/createOrUpdateConfigurationProfileVersion.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update configuration profile version"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomanage.NewConfigurationProfilesVersionsClient("mySubscriptionId", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"customConfigurationProfile",
		"version1",
		"myResourceGroupName",
		armautomanage.ConfigurationProfile{
			Location: to.Ptr("East US"),
			Tags: map[string]*string{
				"Organization": to.Ptr("Administration"),
			},
			Properties: &armautomanage.ConfigurationProfileProperties{
				Configuration: map[string]interface{}{
					"Antimalware/Enable":                false,
					"AzureSecurityCenter/Enable":        true,
					"Backup/Enable":                     false,
					"BootDiagnostics/Enable":            true,
					"ChangeTrackingAndInventory/Enable": true,
					"GuestConfiguration/Enable":         true,
					"LogAnalytics/Enable":               true,
					"UpdateManagement/Enable":           true,
					"VMInsights/Enable":                 true,
				},
				Overrides: []interface{}{
					map[string]interface{}{
						"if": map[string]interface{}{
							"equals": "eastus",
							"field":  "$.location",
						},
						"priority": float64(100),
						"then": map[string]interface{}{
							"LogAnalytics/Enable":      true,
							"LogAnalytics/Reprovision": true,
							"LogAnalytics/Workspace":   "/subscriptions/abc/resourceGroups/xyz/providers/Microsoft.La/Workspaces/eastus",
						},
					},
					map[string]interface{}{
						"if": map[string]interface{}{
							"equals": "centralcanada",
							"field":  "$.location",
						},
						"priority": float64(200),
						"then": map[string]interface{}{
							"LogAnalytics/Enable":      true,
							"LogAnalytics/Reprovision": true,
							"LogAnalytics/Workspace":   "/subscriptions/abc/resourceGroups/xyz/providers/Microsoft.La/Workspaces/centralcanada",
						},
					}},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automanage/resource-manager/Microsoft.Automanage/preview/2021-04-30-preview/examples/createOrUpdateConfigurationProfileVersion.json: %v", err)
	}
	// Response check
	{
		exampleRes := armautomanage.ConfigurationProfile{
			Name:     to.Ptr("customConfigurationProfile/version1"),
			Type:     to.Ptr("Microsoft.Automanage/configurationProfiles/versions"),
			ID:       to.Ptr("/subscriptions/subscriptionId/resourceGroups/myResourceGroupName/providers/Microsoft.Automanage/configurationProfiles/customConfigurationProfile/versions/version1"),
			Location: to.Ptr("East US"),
			Tags: map[string]*string{
				"Organization": to.Ptr("Administration"),
			},
			Properties: &armautomanage.ConfigurationProfileProperties{
				Configuration: map[string]interface{}{
					"Antimalware/Enable":                false,
					"AzureSecurityCenter/Enable":        true,
					"Backup/Enable":                     false,
					"BootDiagnostics/Enable":            true,
					"ChangeTrackingAndInventory/Enable": true,
					"GuestConfiguration/Enable":         true,
					"LogAnalytics/Enable":               true,
					"UpdateManagement/Enable":           true,
					"VMInsights/Enable":                 true,
				},
				Overrides: []interface{}{
					map[string]interface{}{
						"if": map[string]interface{}{
							"equals": "eastus",
							"field":  "$.location",
						},
						"priority": float64(100),
						"then": map[string]interface{}{
							"LogAnalytics/Enable":      true,
							"LogAnalytics/Reprovision": true,
							"LogAnalytics/Workspace":   "/subscriptions/abc/resourceGroups/xyz/providers/Microsoft.La/Workspaces/eastus",
						},
					},
					map[string]interface{}{
						"if": map[string]interface{}{
							"equals": "centralcanada",
							"field":  "$.location",
						},
						"priority": float64(200),
						"then": map[string]interface{}{
							"LogAnalytics/Enable":      true,
							"LogAnalytics/Reprovision": true,
							"LogAnalytics/Workspace":   "/subscriptions/abc/resourceGroups/xyz/providers/Microsoft.La/Workspaces/centralcanada",
						},
					}},
			},
			SystemData: &armautomanage.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-03T01:01:01.1075056Z"); return t }()),
				CreatedBy:          to.Ptr("user1@outlook.com"),
				CreatedByType:      to.Ptr(armautomanage.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-04T02:03:01.1974346Z"); return t }()),
				LastModifiedBy:     to.Ptr("user2@outlook.com"),
				LastModifiedByType: to.Ptr(armautomanage.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ConfigurationProfile) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ConfigurationProfile)
			t.Fatalf("Mock response is not equal to example response for example specification/automanage/resource-manager/Microsoft.Automanage/preview/2021-04-30-preview/examples/createOrUpdateConfigurationProfileVersion.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestConfigurationProfilesVersions_Get(t *testing.T) {
	// From example specification/automanage/resource-manager/Microsoft.Automanage/preview/2021-04-30-preview/examples/getConfigurationProfileVersion.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a configuration profile version"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomanage.NewConfigurationProfilesVersionsClient("mySubscriptionId", cred, &options)
	res, err := client.Get(ctx,
		"customConfigurationProfile",
		"version1",
		"myResourceGroupName",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automanage/resource-manager/Microsoft.Automanage/preview/2021-04-30-preview/examples/getConfigurationProfileVersion.json: %v", err)
	}
	// Response check
	{
		exampleRes := armautomanage.ConfigurationProfile{
			Name:     to.Ptr("customConfigurationProfile/version1"),
			Type:     to.Ptr("Microsoft.Automanage/ConfigurationProfiles/versions"),
			ID:       to.Ptr("/subscriptions/subscriptionId/resourceGroups/myResourceGroupName/providers/Microsoft.Automanage/configurationProfiles/customConfigurationProfile/versions/version1"),
			Location: to.Ptr("East US"),
			Tags: map[string]*string{
				"Organization": to.Ptr("Administration"),
			},
			Properties: &armautomanage.ConfigurationProfileProperties{
				Configuration: map[string]interface{}{
					"Antimalware/Enable":                false,
					"AzureSecurityCenter/Enable":        true,
					"Backup/Enable":                     false,
					"BootDiagnostics/Enable":            true,
					"ChangeTrackingAndInventory/Enable": true,
					"GuestConfiguration/Enable":         true,
					"LogAnalytics/Enable":               true,
					"UpdateManagement/Enable":           true,
					"VMInsights/Enable":                 true,
				},
				Overrides: []interface{}{
					map[string]interface{}{
						"if": map[string]interface{}{
							"equals": "eastus",
							"field":  "$.location",
						},
						"priority": float64(100),
						"then": map[string]interface{}{
							"LogAnalytics/Enable":      true,
							"LogAnalytics/Reprovision": true,
							"LogAnalytics/Workspace":   "/subscriptions/abc/resourceGroups/xyz/providers/Microsoft.La/Workspaces/eastus",
						},
					},
					map[string]interface{}{
						"if": map[string]interface{}{
							"equals": "centralcanada",
							"field":  "$.location",
						},
						"priority": float64(200),
						"then": map[string]interface{}{
							"LogAnalytics/Enable":      true,
							"LogAnalytics/Reprovision": true,
							"LogAnalytics/Workspace":   "/subscriptions/abc/resourceGroups/xyz/providers/Microsoft.La/Workspaces/centralcanada",
						},
					}},
			},
			SystemData: &armautomanage.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-03T01:01:01.1075056Z"); return t }()),
				CreatedBy:          to.Ptr("user1@outlook.com"),
				CreatedByType:      to.Ptr(armautomanage.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-04T02:03:01.1974346Z"); return t }()),
				LastModifiedBy:     to.Ptr("user2@outlook.com"),
				LastModifiedByType: to.Ptr(armautomanage.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ConfigurationProfile) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ConfigurationProfile)
			t.Fatalf("Mock response is not equal to example response for example specification/automanage/resource-manager/Microsoft.Automanage/preview/2021-04-30-preview/examples/getConfigurationProfileVersion.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestConfigurationProfilesVersions_Delete(t *testing.T) {
	// From example specification/automanage/resource-manager/Microsoft.Automanage/preview/2021-04-30-preview/examples/deleteConfigurationProfileVersion.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a configuration profile version"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomanage.NewConfigurationProfilesVersionsClient("subid", cred, &options)
	_, err := client.Delete(ctx,
		"rg",
		"customConfigurationProfile",
		"version1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automanage/resource-manager/Microsoft.Automanage/preview/2021-04-30-preview/examples/deleteConfigurationProfileVersion.json: %v", err)
	}
}

func TestConfigurationProfilesVersions_Update(t *testing.T) {
	// From example specification/automanage/resource-manager/Microsoft.Automanage/preview/2021-04-30-preview/examples/updateConfigurationProfileVersion.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update configuration profile version"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomanage.NewConfigurationProfilesVersionsClient("mySubscriptionId", cred, &options)
	res, err := client.Update(ctx,
		"customConfigurationProfile",
		"version1",
		"myResourceGroupName",
		armautomanage.ConfigurationProfileUpdate{
			Tags: map[string]*string{
				"Organization": to.Ptr("Administration"),
			},
			Properties: &armautomanage.ConfigurationProfileProperties{
				Configuration: map[string]interface{}{
					"Antimalware/Enable":                false,
					"AzureSecurityCenter/Enable":        true,
					"Backup/Enable":                     false,
					"BootDiagnostics/Enable":            true,
					"ChangeTrackingAndInventory/Enable": true,
					"GuestConfiguration/Enable":         true,
					"LogAnalytics/Enable":               true,
					"UpdateManagement/Enable":           true,
					"VMInsights/Enable":                 true,
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automanage/resource-manager/Microsoft.Automanage/preview/2021-04-30-preview/examples/updateConfigurationProfileVersion.json: %v", err)
	}
	// Response check
	{
		exampleRes := armautomanage.ConfigurationProfile{
			Name:     to.Ptr("customConfigurationProfile/version1"),
			Type:     to.Ptr("Microsoft.Automanage/configurationProfiles/versions"),
			ID:       to.Ptr("/subscriptions/subscriptionId/resourceGroups/myResourceGroupName/providers/Microsoft.Automanage/configurationProfiles/customConfigurationProfile/versions/version1"),
			Location: to.Ptr("East US"),
			Tags: map[string]*string{
				"Organization": to.Ptr("Administration"),
			},
			Properties: &armautomanage.ConfigurationProfileProperties{
				Configuration: map[string]interface{}{
					"Antimalware/Enable":                false,
					"AzureSecurityCenter/Enable":        true,
					"Backup/Enable":                     false,
					"BootDiagnostics/Enable":            true,
					"ChangeTrackingAndInventory/Enable": true,
					"GuestConfiguration/Enable":         true,
					"LogAnalytics/Enable":               true,
					"UpdateManagement/Enable":           true,
					"VMInsights/Enable":                 true,
				},
			},
			SystemData: &armautomanage.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-03T01:01:01.1075056Z"); return t }()),
				CreatedBy:          to.Ptr("user1@outlook.com"),
				CreatedByType:      to.Ptr(armautomanage.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-04T02:03:01.1974346Z"); return t }()),
				LastModifiedBy:     to.Ptr("user2@outlook.com"),
				LastModifiedByType: to.Ptr(armautomanage.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ConfigurationProfile) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ConfigurationProfile)
			t.Fatalf("Mock response is not equal to example response for example specification/automanage/resource-manager/Microsoft.Automanage/preview/2021-04-30-preview/examples/updateConfigurationProfileVersion.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestConfigurationProfilesVersions_ListChildResources(t *testing.T) {
	// From example specification/automanage/resource-manager/Microsoft.Automanage/preview/2021-04-30-preview/examples/listConfigurationProfileVersions.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List configuration profile versions by configuration profile"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomanage.NewConfigurationProfilesVersionsClient("mySubscriptionId", cred, &options)
	pager := client.ListChildResources("customConfigurationProfile",
		"myResourceGroupName",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/automanage/resource-manager/Microsoft.Automanage/preview/2021-04-30-preview/examples/listConfigurationProfileVersions.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armautomanage.ConfigurationProfileList{
			Value: []*armautomanage.ConfigurationProfile{
				{
					Name:     to.Ptr("customConfigurationProfile/version1"),
					Type:     to.Ptr("Microsoft.Automanage/ConfigurationProfiles/versions"),
					ID:       to.Ptr("/subscriptions/subscriptionId/resourceGroups/myResourceGroupName/providers/Microsoft.Automanage/configurationProfiles/customConfigurationProfile/versions/versions1"),
					Location: to.Ptr("East US"),
					Tags: map[string]*string{
						"Organization": to.Ptr("Administration"),
					},
					Properties: &armautomanage.ConfigurationProfileProperties{
						Configuration: map[string]interface{}{
							"Antimalware/Enable":                false,
							"AzureSecurityCenter/Enable":        true,
							"Backup/Enable":                     false,
							"BootDiagnostics/Enable":            true,
							"ChangeTrackingAndInventory/Enable": true,
							"GuestConfiguration/Enable":         true,
							"LogAnalytics/Enable":               true,
							"UpdateManagement/Enable":           true,
							"VMInsights/Enable":                 true,
						},
						Overrides: []interface{}{
							map[string]interface{}{
								"if": map[string]interface{}{
									"equals": "eastus",
									"field":  "$.location",
								},
								"priority": float64(100),
								"then": map[string]interface{}{
									"LogAnalytics/Enable":      true,
									"LogAnalytics/Reprovision": true,
									"LogAnalytics/Workspace":   "/subscriptions/abc/resourceGroups/xyz/providers/Microsoft.La/Workspaces/eastus",
								},
							},
							map[string]interface{}{
								"if": map[string]interface{}{
									"equals": "centralcanada",
									"field":  "$.location",
								},
								"priority": float64(200),
								"then": map[string]interface{}{
									"LogAnalytics/Enable":      true,
									"LogAnalytics/Reprovision": true,
									"LogAnalytics/Workspace":   "/subscriptions/abc/resourceGroups/xyz/providers/Microsoft.La/Workspaces/centralcanada",
								},
							}},
					},
					SystemData: &armautomanage.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-03T01:01:01.1075056Z"); return t }()),
						CreatedBy:          to.Ptr("user1@outlook.com"),
						CreatedByType:      to.Ptr(armautomanage.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-04T02:03:01.1974346Z"); return t }()),
						LastModifiedBy:     to.Ptr("user2@outlook.com"),
						LastModifiedByType: to.Ptr(armautomanage.CreatedByTypeUser),
					},
				},
				{
					Name:     to.Ptr("customConfigurationProfile/version2"),
					Type:     to.Ptr("Microsoft.Automanage/ConfigurationProfiles/versions"),
					ID:       to.Ptr("/subscriptions/subscriptionId/resourceGroups/myResourceGroupName/providers/Microsoft.Automanage/configurationProfiles/customConfigurationProfile/versions/version2"),
					Location: to.Ptr("East US"),
					Tags: map[string]*string{
						"Organization": to.Ptr("Administration"),
					},
					Properties: &armautomanage.ConfigurationProfileProperties{
						Configuration: map[string]interface{}{
							"Antimalware/Enable":                false,
							"AzureSecurityCenter/Enable":        true,
							"Backup/Enable":                     false,
							"BootDiagnostics/Enable":            true,
							"ChangeTrackingAndInventory/Enable": true,
							"GuestConfiguration/Enable":         true,
							"LogAnalytics/Enable":               true,
							"UpdateManagement/Enable":           true,
							"VMInsights/Enable":                 true,
						},
					},
					SystemData: &armautomanage.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-03T01:01:01.1075056Z"); return t }()),
						CreatedBy:          to.Ptr("user1@outlook.com"),
						CreatedByType:      to.Ptr(armautomanage.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-04T02:03:01.1974346Z"); return t }()),
						LastModifiedBy:     to.Ptr("user2@outlook.com"),
						LastModifiedByType: to.Ptr(armautomanage.CreatedByTypeUser),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ConfigurationProfileList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ConfigurationProfileList)
			t.Fatalf("Mock response is not equal to example response for example specification/automanage/resource-manager/Microsoft.Automanage/preview/2021-04-30-preview/examples/listConfigurationProfileVersions.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestConfigurationProfileAssignments_CreateOrUpdate(t *testing.T) {
	// From example specification/automanage/resource-manager/Microsoft.Automanage/preview/2021-04-30-preview/examples/createOrUpdateConfigurationProfileAssignment.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create or update configuration profile assignment"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomanage.NewConfigurationProfileAssignmentsClient("mySubscriptionId", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"default",
		"myResourceGroupName",
		"myVMName",
		armautomanage.ConfigurationProfileAssignment{
			Properties: &armautomanage.ConfigurationProfileAssignmentProperties{
				ConfigurationProfile: to.Ptr("/providers/Microsoft.Automanage/bestPractices/AzureBestPracticesProduction"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automanage/resource-manager/Microsoft.Automanage/preview/2021-04-30-preview/examples/createOrUpdateConfigurationProfileAssignment.json: %v", err)
	}
	// Response check
	{
		exampleRes := armautomanage.ConfigurationProfileAssignment{
			Name: to.Ptr("default"),
			ID:   to.Ptr("/subscriptions/subscriptionId/resourceGroups/myResourceGroupName/providers/Microsoft.Compute/virtualMachines/myVMName/providers/Microsoft.Automanage/AutomanageAssignments/default"),
			Properties: &armautomanage.ConfigurationProfileAssignmentProperties{
				ConfigurationProfile: to.Ptr("/providers/Microsoft.Automanage/bestPractices/AzureBestPracticesProduction"),
				TargetID:             to.Ptr("/subscriptions/subscriptionId/resourceGroups/myResourceGroupName/providers/Microsoft.Compute/virtualMachines/myVMName"),
			},
			SystemData: &armautomanage.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-03T01:01:01.1075056Z"); return t }()),
				CreatedBy:          to.Ptr("user1@outlook.com"),
				CreatedByType:      to.Ptr(armautomanage.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-04T02:03:01.1974346Z"); return t }()),
				LastModifiedBy:     to.Ptr("user2@outlook.com"),
				LastModifiedByType: to.Ptr(armautomanage.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ConfigurationProfileAssignment) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ConfigurationProfileAssignment)
			t.Fatalf("Mock response is not equal to example response for example specification/automanage/resource-manager/Microsoft.Automanage/preview/2021-04-30-preview/examples/createOrUpdateConfigurationProfileAssignment.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestConfigurationProfileAssignments_Get(t *testing.T) {
	// From example specification/automanage/resource-manager/Microsoft.Automanage/preview/2021-04-30-preview/examples/getConfigurationProfileAssignment.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a configuration profile assignment"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomanage.NewConfigurationProfileAssignmentsClient("mySubscriptionId", cred, &options)
	res, err := client.Get(ctx,
		"myResourceGroupName",
		"default",
		"myVMName",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automanage/resource-manager/Microsoft.Automanage/preview/2021-04-30-preview/examples/getConfigurationProfileAssignment.json: %v", err)
	}
	// Response check
	{
		exampleRes := armautomanage.ConfigurationProfileAssignment{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Automanage/ConfigurationProfileAssignments"),
			ID:   to.Ptr("/subscriptions/subscriptionId/resourceGroups/myResourceGroupName/providers/Microsoft.Compute/virtualMachines/myVMName/providers/Microsoft.Automanage/configurationProfileAssignments/default"),
			Properties: &armautomanage.ConfigurationProfileAssignmentProperties{
				ConfigurationProfile: to.Ptr("/providers/Microsoft.Automanage/bestPractices/AzureBestPracticesDevTest"),
				Status:               to.Ptr("Compliant"),
				TargetID:             to.Ptr("/subscriptions/subscriptionId/resourceGroups/myResourceGroupName/providers/Microsoft.Compute/virtualMachines/myVMName"),
			},
			SystemData: &armautomanage.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-03T01:01:01.1075056Z"); return t }()),
				CreatedBy:          to.Ptr("user1@outlook.com"),
				CreatedByType:      to.Ptr(armautomanage.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-04T02:03:01.1974346Z"); return t }()),
				LastModifiedBy:     to.Ptr("user2@outlook.com"),
				LastModifiedByType: to.Ptr(armautomanage.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ConfigurationProfileAssignment) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ConfigurationProfileAssignment)
			t.Fatalf("Mock response is not equal to example response for example specification/automanage/resource-manager/Microsoft.Automanage/preview/2021-04-30-preview/examples/getConfigurationProfileAssignment.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestConfigurationProfileAssignments_Delete(t *testing.T) {
	// From example specification/automanage/resource-manager/Microsoft.Automanage/preview/2021-04-30-preview/examples/deleteConfigurationProfileAssignment.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete an configuration profile assignment"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomanage.NewConfigurationProfileAssignmentsClient("mySubscriptionId", cred, &options)
	_, err := client.Delete(ctx,
		"myResourceGroupName",
		"default",
		"myVMName",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automanage/resource-manager/Microsoft.Automanage/preview/2021-04-30-preview/examples/deleteConfigurationProfileAssignment.json: %v", err)
	}
}

func TestConfigurationProfileAssignments_List(t *testing.T) {
	// From example specification/automanage/resource-manager/Microsoft.Automanage/preview/2021-04-30-preview/examples/listConfigurationProfileAssignmentsByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List configuration profile assignments by resourceGroup"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomanage.NewConfigurationProfileAssignmentsClient("mySubscriptionId", cred, &options)
	pager := client.List("myResourceGroupName",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/automanage/resource-manager/Microsoft.Automanage/preview/2021-04-30-preview/examples/listConfigurationProfileAssignmentsByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armautomanage.ConfigurationProfileAssignmentList{
			Value: []*armautomanage.ConfigurationProfileAssignment{
				{
					Name: to.Ptr("default"),
					Type: to.Ptr("Microsoft.Automanage/ConfigurationProfileAssignments"),
					ID:   to.Ptr("/subscriptions/subscriptionId/resourceGroups/myResourceGroupName/providers/Microsoft.Compute/virtualMachines/myVMName/providers/Microsoft.Automanage/configurationProfileAssignments/default"),
					Properties: &armautomanage.ConfigurationProfileAssignmentProperties{
						ConfigurationProfile: to.Ptr("/providers/Microsoft.Automanage/bestPractices/AzureBestPracticesDevTest"),
						Status:               to.Ptr("Compliant"),
						TargetID:             to.Ptr("/subscriptions/subscriptionId/resourceGroups/myResourceGroupName/providers/Microsoft.Compute/virtualMachines/myVMName"),
					},
					SystemData: &armautomanage.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-03T01:01:01.1075056Z"); return t }()),
						CreatedBy:          to.Ptr("user1@outlook.com"),
						CreatedByType:      to.Ptr(armautomanage.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-04T02:03:01.1974346Z"); return t }()),
						LastModifiedBy:     to.Ptr("user2@outlook.com"),
						LastModifiedByType: to.Ptr(armautomanage.CreatedByTypeUser),
					},
				},
				{
					Name: to.Ptr("default"),
					Type: to.Ptr("Microsoft.Automanage/ConfigurationProfileAssignments"),
					ID:   to.Ptr("/subscriptions/mySubscriptionId/resourceGroups/myResourceGroupName/providers/Microsoft.HybridCompute/machines/myArcMachineName/providers/Microsoft.Automanage/configurationProfileAssignments/default"),
					Properties: &armautomanage.ConfigurationProfileAssignmentProperties{
						ConfigurationProfile: to.Ptr("/providers/Microsoft.Automanage/bestPractices/AzureBestPracticesProduction"),
						Status:               to.Ptr("NotCompliant "),
						TargetID:             to.Ptr("/subscriptions/mySubscriptionId/resourceGroups/myResourceGroupName/providers/Microsoft.HybridCompute/machines/myArcMachineName"),
					},
					SystemData: &armautomanage.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-03T01:01:01.1075056Z"); return t }()),
						CreatedBy:          to.Ptr("user1@outlook.com"),
						CreatedByType:      to.Ptr(armautomanage.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-04T02:03:01.1974346Z"); return t }()),
						LastModifiedBy:     to.Ptr("user2@outlook.com"),
						LastModifiedByType: to.Ptr(armautomanage.CreatedByTypeUser),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ConfigurationProfileAssignmentList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ConfigurationProfileAssignmentList)
			t.Fatalf("Mock response is not equal to example response for example specification/automanage/resource-manager/Microsoft.Automanage/preview/2021-04-30-preview/examples/listConfigurationProfileAssignmentsByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestConfigurationProfileAssignments_ListBySubscription(t *testing.T) {
	// From example specification/automanage/resource-manager/Microsoft.Automanage/preview/2021-04-30-preview/examples/listConfigurationProfileAssignmentsBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List configuration profile assignments by subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomanage.NewConfigurationProfileAssignmentsClient("mySubscriptionId", cred, &options)
	pager := client.ListBySubscription(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/automanage/resource-manager/Microsoft.Automanage/preview/2021-04-30-preview/examples/listConfigurationProfileAssignmentsBySubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armautomanage.ConfigurationProfileAssignmentList{
			Value: []*armautomanage.ConfigurationProfileAssignment{
				{
					Name: to.Ptr("default"),
					Type: to.Ptr("Microsoft.Automanage/ConfigurationProfileAssignments"),
					ID:   to.Ptr("/subscriptions/subscriptionId/resourceGroups/myResourceGroupName/providers/Microsoft.Compute/virtualMachines/myVMName/providers/Microsoft.Automanage/configurationProfileAssignments/default"),
					Properties: &armautomanage.ConfigurationProfileAssignmentProperties{
						ConfigurationProfile: to.Ptr("/providers/Microsoft.Automanage/bestPractices/AzureBestPracticesDevTest"),
						Status:               to.Ptr("Compliant"),
						TargetID:             to.Ptr("/subscriptions/subscriptionId/resourceGroups/myResourceGroupName/providers/Microsoft.Compute/virtualMachines/myVMName"),
					},
					SystemData: &armautomanage.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-03T01:01:01.1075056Z"); return t }()),
						CreatedBy:          to.Ptr("user1@outlook.com"),
						CreatedByType:      to.Ptr(armautomanage.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-04T02:03:01.1974346Z"); return t }()),
						LastModifiedBy:     to.Ptr("user2@outlook.com"),
						LastModifiedByType: to.Ptr(armautomanage.CreatedByTypeUser),
					},
				},
				{
					Name: to.Ptr("default"),
					Type: to.Ptr("Microsoft.Automanage/ConfigurationProfileAssignments"),
					ID:   to.Ptr("/subscriptions/mySubscriptionId/resourceGroups/myResourceGroupName/providers/Microsoft.HybridCompute/machines/myArcMachineName/providers/Microsoft.Automanage/configurationProfileAssignments/default"),
					Properties: &armautomanage.ConfigurationProfileAssignmentProperties{
						ConfigurationProfile: to.Ptr("/providers/Microsoft.Automanage/bestPractices/AzureBestPracticesProduction"),
						Status:               to.Ptr("NotCompliant "),
						TargetID:             to.Ptr("/subscriptions/mySubscriptionId/resourceGroups/myResourceGroupName/providers/Microsoft.HybridCompute/machines/myArcMachineName"),
					},
					SystemData: &armautomanage.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-03T01:01:01.1075056Z"); return t }()),
						CreatedBy:          to.Ptr("user1@outlook.com"),
						CreatedByType:      to.Ptr(armautomanage.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-04T02:03:01.1974346Z"); return t }()),
						LastModifiedBy:     to.Ptr("user2@outlook.com"),
						LastModifiedByType: to.Ptr(armautomanage.CreatedByTypeUser),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ConfigurationProfileAssignmentList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ConfigurationProfileAssignmentList)
			t.Fatalf("Mock response is not equal to example response for example specification/automanage/resource-manager/Microsoft.Automanage/preview/2021-04-30-preview/examples/listConfigurationProfileAssignmentsBySubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOperations_List(t *testing.T) {
	// From example specification/automanage/resource-manager/Microsoft.Automanage/preview/2021-04-30-preview/examples/listOperations.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Lists all of the available Automanage REST API operations"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomanage.NewOperationsClient(cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/automanage/resource-manager/Microsoft.Automanage/preview/2021-04-30-preview/examples/listOperations.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armautomanage.OperationListResult{
			Value: []*armautomanage.Operation{
				{
					Name: to.Ptr("Microsoft.Automanage/register/action"),
					Display: &armautomanage.OperationDisplay{
						Description: to.Ptr("Registers the subscription for the Automanage Resource Provider"),
						Operation:   to.Ptr("Register the Automanage Resource Provider"),
						Provider:    to.Ptr("Microsoft Automanage"),
						Resource:    to.Ptr("Automanage Resource Provider"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Automanage/configurationProfileAssignments/write"),
					Display: &armautomanage.OperationDisplay{
						Description: to.Ptr("Create new configuration profile assignment."),
						Operation:   to.Ptr("Microsoft.Automanage/configurationProfileAssignments/write"),
						Provider:    to.Ptr("Microsoft Automanage"),
						Resource:    to.Ptr("Microsoft.Automanage/configurationProfileAssignments"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Automanage/configurationProfileAssignments/read"),
					Display: &armautomanage.OperationDisplay{
						Description: to.Ptr("Get configuration profile assignment."),
						Operation:   to.Ptr("Microsoft.Automanage/configurationProfileAssignments/read"),
						Provider:    to.Ptr("Microsoft Automanage"),
						Resource:    to.Ptr("Microsoft.Automanage/configurationProfileAssignments"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Automanage/configurationProfileAssignments/delete"),
					Display: &armautomanage.OperationDisplay{
						Description: to.Ptr("Delete configuration profile assignment."),
						Operation:   to.Ptr("Microsoft.Automanage/configurationProfileAssignments/delete"),
						Provider:    to.Ptr("Microsoft Automanage"),
						Resource:    to.Ptr("Microsoft.Automanage/configurationProfileAssignments"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Automanage/bestPractices/read"),
					Display: &armautomanage.OperationDisplay{
						Description: to.Ptr("Get Automanage bestPractice."),
						Operation:   to.Ptr("Microsoft.Automanage/bestPractices/read"),
						Provider:    to.Ptr("Microsoft Automanage"),
						Resource:    to.Ptr("Microsoft.Automanage/bestPractices"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Automanage/bestPractices/versions/read"),
					Display: &armautomanage.OperationDisplay{
						Description: to.Ptr("Get Automanage bestPractice version."),
						Operation:   to.Ptr("Microsoft.Automanage/bestPractices/versions/read"),
						Provider:    to.Ptr("Microsoft Automanage"),
						Resource:    to.Ptr("Microsoft.Automanage/bestPractices/versions"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Automanage/configurationProfiles/write"),
					Display: &armautomanage.OperationDisplay{
						Description: to.Ptr("Create new Automanage Configuration Profile ."),
						Operation:   to.Ptr("Microsoft.Automanage/configurationProfiles/write"),
						Provider:    to.Ptr("Microsoft Automanage"),
						Resource:    to.Ptr("Microsoft.Automanage/configurationProfiles"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Automanage/configurationProfiles/read"),
					Display: &armautomanage.OperationDisplay{
						Description: to.Ptr("Get Automanage Configuration Profile."),
						Operation:   to.Ptr("Microsoft.Automanage/configurationProfiles/read"),
						Provider:    to.Ptr("Microsoft Automanage"),
						Resource:    to.Ptr("Microsoft.Automanage/configurationProfiles"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Automanage/configurationProfiles/delete"),
					Display: &armautomanage.OperationDisplay{
						Description: to.Ptr("Delete Automanage Configuration Profile."),
						Operation:   to.Ptr("Microsoft.Automanage/configurationProfiles/delete"),
						Provider:    to.Ptr("Microsoft Automanage"),
						Resource:    to.Ptr("Microsoft.Automanage/configurationProfiles"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Automanage/configurationProfiles/versions/write"),
					Display: &armautomanage.OperationDisplay{
						Description: to.Ptr("Create new Automanage Configuration Profile version."),
						Operation:   to.Ptr("Microsoft.Automanage/configurationProfiles/versions/write"),
						Provider:    to.Ptr("Microsoft Automanage"),
						Resource:    to.Ptr("Microsoft.Automanage/configurationProfiles/versions"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Automanage/configurationProfiles/versions/read"),
					Display: &armautomanage.OperationDisplay{
						Description: to.Ptr("Get Automanage Configuration Profile version."),
						Operation:   to.Ptr("Microsoft.Automanage/configurationProfiles/versions/read"),
						Provider:    to.Ptr("Microsoft Automanage"),
						Resource:    to.Ptr("Microsoft.Automanage/configurationProfiles/versions"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Automanage/configurationProfiles/versions/delete"),
					Display: &armautomanage.OperationDisplay{
						Description: to.Ptr("Delete Automanage Configuration Profile version."),
						Operation:   to.Ptr("Microsoft.Automanage/configurationProfiles/versions/delete"),
						Provider:    to.Ptr("Microsoft Automanage"),
						Resource:    to.Ptr("Microsoft.Automanage/configurationProfiles/versions"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Automanage/configurationProfileAssignments/reports/read"),
					Display: &armautomanage.OperationDisplay{
						Description: to.Ptr("Get report for configuration profile assignment."),
						Operation:   to.Ptr("Microsoft.Automanage/configurationProfileAssignments/reports/read"),
						Provider:    to.Ptr("Microsoft Automanage"),
						Resource:    to.Ptr("Microsoft.Automanage/configurationProfileAssignments/reports"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OperationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OperationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/automanage/resource-manager/Microsoft.Automanage/preview/2021-04-30-preview/examples/listOperations.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReports_Get(t *testing.T) {
	// From example specification/automanage/resource-manager/Microsoft.Automanage/preview/2021-04-30-preview/examples/getReport.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a report for a configuration profile assignment"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomanage.NewReportsClient("mySubscriptionId", cred, &options)
	res, err := client.Get(ctx,
		"myResourceGroupName",
		"default",
		"b4e9ee6b-1717-4ff0-a8d2-e6d72c33d5f4",
		"myVMName",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/automanage/resource-manager/Microsoft.Automanage/preview/2021-04-30-preview/examples/getReport.json: %v", err)
	}
	// Response check
	{
		exampleRes := armautomanage.Report{
			Name: to.Ptr("b4e9ee6b-1717-4ff0-a8d2-e6d72c33d5f4"),
			Type: to.Ptr("Microsoft.Automanage/configurationProfileAssignments/reports"),
			ID:   to.Ptr("/subscriptions/mySubscriptionId/resourceGroups/myResourceGroupName/providers/Microsoft.Compute/virtualMachines/myVMName/providers/Microsoft.Automanage/configurationProfileAssignments/default/reports/b4e9ee6b-1717-4ff0-a8d2-e6d72c33d5f4"),
			Properties: &armautomanage.AssignmentReportProperties{
				Type:                 to.Ptr("Consistency"),
				ConfigurationProfile: to.Ptr("anyConfigurationProfile"),
				Duration:             to.Ptr("PT15M32S"),
				EndTime:              to.Ptr("2021-03-31T22:17:42Z"),
				LastModifiedTime:     to.Ptr("2021-03-31T22:32:42Z"),
				ReportFormatVersion:  to.Ptr("1.0"),
				Resources: []*armautomanage.ReportResource{
					{
						Name:   to.Ptr("myResourceGroupName"),
						Type:   to.Ptr("Microsoft.Resources/resourceGroups"),
						ID:     to.Ptr("/subscriptions/mySubscriptionId/resourceGroups/myResourceGroupName"),
						Status: to.Ptr("Conformant"),
					}},
				StartTime: to.Ptr("2021-03-31T22:13:06Z"),
				Status:    to.Ptr("Conformant"),
			},
			SystemData: &armautomanage.SystemData{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-03T01:01:01.1075056Z"); return t }()),
				CreatedBy:          to.Ptr("user1@outlook.com"),
				CreatedByType:      to.Ptr(armautomanage.CreatedByTypeUser),
				LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-04T02:03:01.1974346Z"); return t }()),
				LastModifiedBy:     to.Ptr("user2@outlook.com"),
				LastModifiedByType: to.Ptr(armautomanage.CreatedByTypeUser),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Report) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Report)
			t.Fatalf("Mock response is not equal to example response for example specification/automanage/resource-manager/Microsoft.Automanage/preview/2021-04-30-preview/examples/getReport.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReports_ListByConfigurationProfileAssignments(t *testing.T) {
	// From example specification/automanage/resource-manager/Microsoft.Automanage/preview/2021-04-30-preview/examples/listReportsByconfigurationProfileAssignment.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List reports by configuration profiles assignment"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armautomanage.NewReportsClient("mySubscriptionId", cred, &options)
	pager := client.ListByConfigurationProfileAssignments("myResourceGroupName",
		"default",
		"myVMName",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/automanage/resource-manager/Microsoft.Automanage/preview/2021-04-30-preview/examples/listReportsByconfigurationProfileAssignment.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armautomanage.ReportList{
			Value: []*armautomanage.Report{
				{
					Name: to.Ptr("b4e9ee6b-1717-4ff0-a8d2-e6d72c33d5f4"),
					Type: to.Ptr("Microsoft.Automanage/configurationProfileAssignments/reports"),
					ID:   to.Ptr("/subscriptions/mySubscriptionId/resourceGroups/myResourceGroupName/providers/Microsoft.Compute/virtualMachines/myVMName/providers/Microsoft.Automanage/configurationProfileAssignments/default/reports/b4e9ee6b-1717-4ff0-a8d2-e6d72c33d5f4"),
					Properties: &armautomanage.AssignmentReportProperties{
						Type:                 to.Ptr("Consistency"),
						ConfigurationProfile: to.Ptr("anyConfigurationProfile"),
						Duration:             to.Ptr("PT15M32S"),
						EndTime:              to.Ptr("2021-03-31T22:17:42Z"),
						LastModifiedTime:     to.Ptr("2021-03-31T22:32:42Z"),
						ReportFormatVersion:  to.Ptr("1.0"),
						Resources: []*armautomanage.ReportResource{
							{
								Name:   to.Ptr("myResourceGroupName"),
								Type:   to.Ptr("Microsoft.Resources/resourceGroups"),
								ID:     to.Ptr("/subscriptions/mySubscriptionId/resourceGroups/myResourceGroupName"),
								Status: to.Ptr("Conformant"),
							}},
						StartTime: to.Ptr("2021-03-31T22:13:06Z"),
						Status:    to.Ptr("Conformant"),
					},
					SystemData: &armautomanage.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-03T01:01:01.1075056Z"); return t }()),
						CreatedBy:          to.Ptr("user1@outlook.com"),
						CreatedByType:      to.Ptr(armautomanage.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-04T02:03:01.1974346Z"); return t }()),
						LastModifiedBy:     to.Ptr("user2@outlook.com"),
						LastModifiedByType: to.Ptr(armautomanage.CreatedByTypeUser),
					},
				},
				{
					Name: to.Ptr("142cd92e-6413-49ba-94b0-8e74f251d828"),
					Type: to.Ptr("Microsoft.Automanage/configurationProfileAssignments/reports"),
					ID:   to.Ptr("/subscriptions/mySubscriptionId/resourceGroups/myResourceGroupName/providers/Microsoft.Compute/virtualMachines/myVMName/providers/Microsoft.Automanage/configurationProfileAssignments/default/reports/142cd92e-6413-49ba-94b0-8e74f251d828"),
					Properties: &armautomanage.AssignmentReportProperties{
						Type:                 to.Ptr("Consistency"),
						ConfigurationProfile: to.Ptr("anyConfigurationProfile"),
						Duration:             to.Ptr("PT15M32S"),
						EndTime:              to.Ptr("2021-03-31T22:17:42Z"),
						LastModifiedTime:     to.Ptr("2021-03-31T22:32:42Z"),
						ReportFormatVersion:  to.Ptr("1.0"),
						Resources: []*armautomanage.ReportResource{
							{
								Name:   to.Ptr("myResourceGroupName"),
								Type:   to.Ptr("Microsoft.Resources/resourceGroups"),
								ID:     to.Ptr("/subscriptions/mySubscriptionId/resourceGroups/myResourceGroupName"),
								Status: to.Ptr("Conformant"),
							}},
						StartTime: to.Ptr("2021-03-31T22:13:06Z"),
						Status:    to.Ptr("Conformant"),
					},
					SystemData: &armautomanage.SystemData{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-03T01:01:01.1075056Z"); return t }()),
						CreatedBy:          to.Ptr("user1@outlook.com"),
						CreatedByType:      to.Ptr(armautomanage.CreatedByTypeUser),
						LastModifiedAt:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-02-04T02:03:01.1974346Z"); return t }()),
						LastModifiedBy:     to.Ptr("user2@outlook.com"),
						LastModifiedByType: to.Ptr(armautomanage.CreatedByTypeUser),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ReportList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ReportList)
			t.Fatalf("Mock response is not equal to example response for example specification/automanage/resource-manager/Microsoft.Automanage/preview/2021-04-30-preview/examples/listReportsByconfigurationProfileAssignment.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
