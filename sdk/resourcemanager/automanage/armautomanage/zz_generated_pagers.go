//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armautomanage

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"reflect"
)

// BestPracticesClientListByTenantPager provides operations for iterating over paged responses.
type BestPracticesClientListByTenantPager struct {
	client    *BestPracticesClient
	current   BestPracticesClientListByTenantResponse
	requester func(context.Context) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *BestPracticesClientListByTenantPager) More() bool {
	return reflect.ValueOf(p.current).IsZero()
}

// NextPage advances the pager to the next page.
func (p *BestPracticesClientListByTenantPager) NextPage(ctx context.Context) (BestPracticesClientListByTenantResponse, error) {
	var req *policy.Request
	var err error
	if !p.More() {
		return BestPracticesClientListByTenantResponse{}, errors.New("no more pages")
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return BestPracticesClientListByTenantResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return BestPracticesClientListByTenantResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return BestPracticesClientListByTenantResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByTenantHandleResponse(resp)
	if err != nil {
		return BestPracticesClientListByTenantResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// BestPracticesVersionsClientListByTenantPager provides operations for iterating over paged responses.
type BestPracticesVersionsClientListByTenantPager struct {
	client    *BestPracticesVersionsClient
	current   BestPracticesVersionsClientListByTenantResponse
	requester func(context.Context) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *BestPracticesVersionsClientListByTenantPager) More() bool {
	return reflect.ValueOf(p.current).IsZero()
}

// NextPage advances the pager to the next page.
func (p *BestPracticesVersionsClientListByTenantPager) NextPage(ctx context.Context) (BestPracticesVersionsClientListByTenantResponse, error) {
	var req *policy.Request
	var err error
	if !p.More() {
		return BestPracticesVersionsClientListByTenantResponse{}, errors.New("no more pages")
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return BestPracticesVersionsClientListByTenantResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return BestPracticesVersionsClientListByTenantResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return BestPracticesVersionsClientListByTenantResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByTenantHandleResponse(resp)
	if err != nil {
		return BestPracticesVersionsClientListByTenantResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// ConfigurationProfileAssignmentsClientListBySubscriptionPager provides operations for iterating over paged responses.
type ConfigurationProfileAssignmentsClientListBySubscriptionPager struct {
	client    *ConfigurationProfileAssignmentsClient
	current   ConfigurationProfileAssignmentsClientListBySubscriptionResponse
	requester func(context.Context) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ConfigurationProfileAssignmentsClientListBySubscriptionPager) More() bool {
	return reflect.ValueOf(p.current).IsZero()
}

// NextPage advances the pager to the next page.
func (p *ConfigurationProfileAssignmentsClientListBySubscriptionPager) NextPage(ctx context.Context) (ConfigurationProfileAssignmentsClientListBySubscriptionResponse, error) {
	var req *policy.Request
	var err error
	if !p.More() {
		return ConfigurationProfileAssignmentsClientListBySubscriptionResponse{}, errors.New("no more pages")
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ConfigurationProfileAssignmentsClientListBySubscriptionResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ConfigurationProfileAssignmentsClientListBySubscriptionResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ConfigurationProfileAssignmentsClientListBySubscriptionResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listBySubscriptionHandleResponse(resp)
	if err != nil {
		return ConfigurationProfileAssignmentsClientListBySubscriptionResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// ConfigurationProfileAssignmentsClientListPager provides operations for iterating over paged responses.
type ConfigurationProfileAssignmentsClientListPager struct {
	client    *ConfigurationProfileAssignmentsClient
	current   ConfigurationProfileAssignmentsClientListResponse
	requester func(context.Context) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ConfigurationProfileAssignmentsClientListPager) More() bool {
	return reflect.ValueOf(p.current).IsZero()
}

// NextPage advances the pager to the next page.
func (p *ConfigurationProfileAssignmentsClientListPager) NextPage(ctx context.Context) (ConfigurationProfileAssignmentsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !p.More() {
		return ConfigurationProfileAssignmentsClientListResponse{}, errors.New("no more pages")
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ConfigurationProfileAssignmentsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ConfigurationProfileAssignmentsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ConfigurationProfileAssignmentsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return ConfigurationProfileAssignmentsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// ConfigurationProfilesClientListByResourceGroupPager provides operations for iterating over paged responses.
type ConfigurationProfilesClientListByResourceGroupPager struct {
	client    *ConfigurationProfilesClient
	current   ConfigurationProfilesClientListByResourceGroupResponse
	requester func(context.Context) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ConfigurationProfilesClientListByResourceGroupPager) More() bool {
	return reflect.ValueOf(p.current).IsZero()
}

// NextPage advances the pager to the next page.
func (p *ConfigurationProfilesClientListByResourceGroupPager) NextPage(ctx context.Context) (ConfigurationProfilesClientListByResourceGroupResponse, error) {
	var req *policy.Request
	var err error
	if !p.More() {
		return ConfigurationProfilesClientListByResourceGroupResponse{}, errors.New("no more pages")
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ConfigurationProfilesClientListByResourceGroupResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ConfigurationProfilesClientListByResourceGroupResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ConfigurationProfilesClientListByResourceGroupResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		return ConfigurationProfilesClientListByResourceGroupResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// ConfigurationProfilesClientListBySubscriptionPager provides operations for iterating over paged responses.
type ConfigurationProfilesClientListBySubscriptionPager struct {
	client    *ConfigurationProfilesClient
	current   ConfigurationProfilesClientListBySubscriptionResponse
	requester func(context.Context) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ConfigurationProfilesClientListBySubscriptionPager) More() bool {
	return reflect.ValueOf(p.current).IsZero()
}

// NextPage advances the pager to the next page.
func (p *ConfigurationProfilesClientListBySubscriptionPager) NextPage(ctx context.Context) (ConfigurationProfilesClientListBySubscriptionResponse, error) {
	var req *policy.Request
	var err error
	if !p.More() {
		return ConfigurationProfilesClientListBySubscriptionResponse{}, errors.New("no more pages")
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ConfigurationProfilesClientListBySubscriptionResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ConfigurationProfilesClientListBySubscriptionResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ConfigurationProfilesClientListBySubscriptionResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listBySubscriptionHandleResponse(resp)
	if err != nil {
		return ConfigurationProfilesClientListBySubscriptionResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// ConfigurationProfilesVersionsClientListChildResourcesPager provides operations for iterating over paged responses.
type ConfigurationProfilesVersionsClientListChildResourcesPager struct {
	client    *ConfigurationProfilesVersionsClient
	current   ConfigurationProfilesVersionsClientListChildResourcesResponse
	requester func(context.Context) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ConfigurationProfilesVersionsClientListChildResourcesPager) More() bool {
	return reflect.ValueOf(p.current).IsZero()
}

// NextPage advances the pager to the next page.
func (p *ConfigurationProfilesVersionsClientListChildResourcesPager) NextPage(ctx context.Context) (ConfigurationProfilesVersionsClientListChildResourcesResponse, error) {
	var req *policy.Request
	var err error
	if !p.More() {
		return ConfigurationProfilesVersionsClientListChildResourcesResponse{}, errors.New("no more pages")
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ConfigurationProfilesVersionsClientListChildResourcesResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ConfigurationProfilesVersionsClientListChildResourcesResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ConfigurationProfilesVersionsClientListChildResourcesResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listChildResourcesHandleResponse(resp)
	if err != nil {
		return ConfigurationProfilesVersionsClientListChildResourcesResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// OperationsClientListPager provides operations for iterating over paged responses.
type OperationsClientListPager struct {
	client    *OperationsClient
	current   OperationsClientListResponse
	requester func(context.Context) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *OperationsClientListPager) More() bool {
	return reflect.ValueOf(p.current).IsZero()
}

// NextPage advances the pager to the next page.
func (p *OperationsClientListPager) NextPage(ctx context.Context) (OperationsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !p.More() {
		return OperationsClientListResponse{}, errors.New("no more pages")
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return OperationsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return OperationsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return OperationsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return OperationsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// ReportsClientListByConfigurationProfileAssignmentsPager provides operations for iterating over paged responses.
type ReportsClientListByConfigurationProfileAssignmentsPager struct {
	client    *ReportsClient
	current   ReportsClientListByConfigurationProfileAssignmentsResponse
	requester func(context.Context) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ReportsClientListByConfigurationProfileAssignmentsPager) More() bool {
	return reflect.ValueOf(p.current).IsZero()
}

// NextPage advances the pager to the next page.
func (p *ReportsClientListByConfigurationProfileAssignmentsPager) NextPage(ctx context.Context) (ReportsClientListByConfigurationProfileAssignmentsResponse, error) {
	var req *policy.Request
	var err error
	if !p.More() {
		return ReportsClientListByConfigurationProfileAssignmentsResponse{}, errors.New("no more pages")
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ReportsClientListByConfigurationProfileAssignmentsResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ReportsClientListByConfigurationProfileAssignmentsResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ReportsClientListByConfigurationProfileAssignmentsResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByConfigurationProfileAssignmentsHandleResponse(resp)
	if err != nil {
		return ReportsClientListByConfigurationProfileAssignmentsResponse{}, err
	}
	p.current = result
	return p.current, nil
}
