//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armcostmanagement_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/costmanagement/armcostmanagement"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestExports_List(t *testing.T) {
	// From example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ExportsGetByBillingAccount.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ExportsGetByBillingAccount"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcostmanagement.NewExportsClient(cred, &options)
	res, err := client.List(ctx,
		"providers/Microsoft.Billing/billingAccounts/123456",
		&armcostmanagement.ExportsClientListOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ExportsGetByBillingAccount.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcostmanagement.ExportListResult{
			Value: []*armcostmanagement.Export{
				{
					Name: to.Ptr("TestExport1"),
					Type: to.Ptr("Microsoft.CostManagement/exports"),
					ID:   to.Ptr("providers/Microsoft.Billing/billingAccounts/123456/providers/Microsoft.CostManagement/exports/TestExport1"),
					Properties: &armcostmanagement.ExportProperties{
						Format: to.Ptr(armcostmanagement.FormatTypeCSV),
						Definition: &armcostmanagement.ExportDefinition{
							Type: to.Ptr(armcostmanagement.ExportTypeActualCost),
							DataSet: &armcostmanagement.ExportDataset{
								Configuration: &armcostmanagement.ExportDatasetConfiguration{
									Columns: []*string{
										to.Ptr("Date"),
										to.Ptr("MeterId"),
										to.Ptr("ResourceId"),
										to.Ptr("ResourceLocation"),
										to.Ptr("Quantity")},
								},
								Granularity: to.Ptr(armcostmanagement.GranularityTypeDaily),
							},
							TimePeriod: &armcostmanagement.ExportTimePeriod{
								From: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-06-01T00:00:00Z"); return t }()),
								To:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-10-31T00:00:00Z"); return t }()),
							},
							Timeframe: to.Ptr(armcostmanagement.TimeframeTypeCustom),
						},
						DeliveryInfo: &armcostmanagement.ExportDeliveryInfo{
							Destination: &armcostmanagement.ExportDeliveryDestination{
								Container:      to.Ptr("exports"),
								ResourceID:     to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MYDEVTESTRG/providers/Microsoft.Storage/storageAccounts/ccmeastusdiag182"),
								RootFolderPath: to.Ptr("ad-hoc"),
							},
						},
					},
				},
				{
					Name: to.Ptr("TestExport2"),
					Type: to.Ptr("Microsoft.CostManagement/exports"),
					ID:   to.Ptr("providers/Microsoft.Billing/billingAccounts/123456/providers/Microsoft.CostManagement/exports/TestExport2"),
					Properties: &armcostmanagement.ExportProperties{
						Format: to.Ptr(armcostmanagement.FormatTypeCSV),
						Definition: &armcostmanagement.ExportDefinition{
							Type: to.Ptr(armcostmanagement.ExportTypeActualCost),
							DataSet: &armcostmanagement.ExportDataset{
								Configuration: &armcostmanagement.ExportDatasetConfiguration{
									Columns: []*string{
										to.Ptr("Date"),
										to.Ptr("MeterId"),
										to.Ptr("ResourceId"),
										to.Ptr("ResourceLocation"),
										to.Ptr("Quantity")},
								},
								Granularity: to.Ptr(armcostmanagement.GranularityTypeDaily),
							},
							Timeframe: to.Ptr(armcostmanagement.TimeframeTypeWeekToDate),
						},
						DeliveryInfo: &armcostmanagement.ExportDeliveryInfo{
							Destination: &armcostmanagement.ExportDeliveryDestination{
								Container:      to.Ptr("exports"),
								ResourceID:     to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MYDEVTESTRG/providers/Microsoft.Storage/storageAccounts/ccmeastusdiag182"),
								RootFolderPath: to.Ptr("ad-hoc"),
							},
						},
						Schedule: &armcostmanagement.ExportSchedule{
							Recurrence: to.Ptr(armcostmanagement.RecurrenceTypeWeekly),
							RecurrencePeriod: &armcostmanagement.ExportRecurrencePeriod{
								From: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-06-01T00:00:00Z"); return t }()),
								To:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-10-31T00:00:00Z"); return t }()),
							},
							Status: to.Ptr(armcostmanagement.StatusTypeActive),
						},
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.ExportListResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ExportListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ExportsGetByBillingAccount.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ExportsGetByDepartment.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ExportsGetByDepartment"},
	})
	client = armcostmanagement.NewExportsClient(cred, &options)
	res, err = client.List(ctx,
		"providers/Microsoft.Billing/billingAccounts/12/departments/123",
		&armcostmanagement.ExportsClientListOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ExportsGetByDepartment.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcostmanagement.ExportListResult{
			Value: []*armcostmanagement.Export{
				{
					Name: to.Ptr("TestExport1"),
					Type: to.Ptr("Microsoft.CostManagement/exports"),
					ID:   to.Ptr("providers/Microsoft.Billing/billingAccounts/12/departments/1234/providers/Microsoft.CostManagement/exports/TestExport1"),
					Properties: &armcostmanagement.ExportProperties{
						Format: to.Ptr(armcostmanagement.FormatTypeCSV),
						Definition: &armcostmanagement.ExportDefinition{
							Type: to.Ptr(armcostmanagement.ExportTypeActualCost),
							DataSet: &armcostmanagement.ExportDataset{
								Configuration: &armcostmanagement.ExportDatasetConfiguration{
									Columns: []*string{
										to.Ptr("Date"),
										to.Ptr("MeterId"),
										to.Ptr("ResourceId"),
										to.Ptr("ResourceLocation"),
										to.Ptr("Quantity")},
								},
								Granularity: to.Ptr(armcostmanagement.GranularityTypeDaily),
							},
							TimePeriod: &armcostmanagement.ExportTimePeriod{
								From: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-06-01T00:00:00Z"); return t }()),
								To:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-10-31T00:00:00Z"); return t }()),
							},
							Timeframe: to.Ptr(armcostmanagement.TimeframeTypeCustom),
						},
						DeliveryInfo: &armcostmanagement.ExportDeliveryInfo{
							Destination: &armcostmanagement.ExportDeliveryDestination{
								Container:      to.Ptr("exports"),
								ResourceID:     to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MYDEVTESTRG/providers/Microsoft.Storage/storageAccounts/ccmeastusdiag182"),
								RootFolderPath: to.Ptr("ad-hoc"),
							},
						},
					},
				},
				{
					Name: to.Ptr("TestExport2"),
					Type: to.Ptr("Microsoft.CostManagement/exports"),
					ID:   to.Ptr("providers/Microsoft.Billing/billingAccounts/12/departments/1234/providers/Microsoft.CostManagement/exports/TestExport2"),
					Properties: &armcostmanagement.ExportProperties{
						Format: to.Ptr(armcostmanagement.FormatTypeCSV),
						Definition: &armcostmanagement.ExportDefinition{
							Type: to.Ptr(armcostmanagement.ExportTypeActualCost),
							DataSet: &armcostmanagement.ExportDataset{
								Configuration: &armcostmanagement.ExportDatasetConfiguration{
									Columns: []*string{
										to.Ptr("Date"),
										to.Ptr("MeterId"),
										to.Ptr("ResourceId"),
										to.Ptr("ResourceLocation"),
										to.Ptr("Quantity")},
								},
								Granularity: to.Ptr(armcostmanagement.GranularityTypeDaily),
							},
							Timeframe: to.Ptr(armcostmanagement.TimeframeTypeWeekToDate),
						},
						DeliveryInfo: &armcostmanagement.ExportDeliveryInfo{
							Destination: &armcostmanagement.ExportDeliveryDestination{
								Container:      to.Ptr("exports"),
								ResourceID:     to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MYDEVTESTRG/providers/Microsoft.Storage/storageAccounts/ccmeastusdiag182"),
								RootFolderPath: to.Ptr("ad-hoc"),
							},
						},
						Schedule: &armcostmanagement.ExportSchedule{
							Recurrence: to.Ptr(armcostmanagement.RecurrenceTypeWeekly),
							RecurrencePeriod: &armcostmanagement.ExportRecurrencePeriod{
								From: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-06-01T00:00:00Z"); return t }()),
								To:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-10-31T00:00:00Z"); return t }()),
							},
							Status: to.Ptr(armcostmanagement.StatusTypeActive),
						},
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.ExportListResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ExportListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ExportsGetByDepartment.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ExportsGetByEnrollmentAccount.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ExportsGetByEnrollmentAccount"},
	})
	client = armcostmanagement.NewExportsClient(cred, &options)
	res, err = client.List(ctx,
		"providers/Microsoft.Billing/billingAccounts/100/enrollmentAccounts/456",
		&armcostmanagement.ExportsClientListOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ExportsGetByEnrollmentAccount.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcostmanagement.ExportListResult{
			Value: []*armcostmanagement.Export{
				{
					Name: to.Ptr("TestExport1"),
					Type: to.Ptr("Microsoft.CostManagement/exports"),
					ID:   to.Ptr("providers/Microsoft.Billing/billingAccounts/100/enrollmentAccounts/456/providers/Microsoft.CostManagement/exports/TestExport1"),
					Properties: &armcostmanagement.ExportProperties{
						Format: to.Ptr(armcostmanagement.FormatTypeCSV),
						Definition: &armcostmanagement.ExportDefinition{
							Type: to.Ptr(armcostmanagement.ExportTypeActualCost),
							DataSet: &armcostmanagement.ExportDataset{
								Configuration: &armcostmanagement.ExportDatasetConfiguration{
									Columns: []*string{
										to.Ptr("Date"),
										to.Ptr("MeterId"),
										to.Ptr("ResourceId"),
										to.Ptr("ResourceLocation"),
										to.Ptr("Quantity")},
								},
								Granularity: to.Ptr(armcostmanagement.GranularityTypeDaily),
							},
							TimePeriod: &armcostmanagement.ExportTimePeriod{
								From: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-06-01T00:00:00Z"); return t }()),
								To:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-10-31T00:00:00Z"); return t }()),
							},
							Timeframe: to.Ptr(armcostmanagement.TimeframeTypeCustom),
						},
						DeliveryInfo: &armcostmanagement.ExportDeliveryInfo{
							Destination: &armcostmanagement.ExportDeliveryDestination{
								Container:      to.Ptr("exports"),
								ResourceID:     to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MYDEVTESTRG/providers/Microsoft.Storage/storageAccounts/ccmeastusdiag182"),
								RootFolderPath: to.Ptr("ad-hoc"),
							},
						},
					},
				},
				{
					Name: to.Ptr("TestExport2"),
					Type: to.Ptr("Microsoft.CostManagement/exports"),
					ID:   to.Ptr("providers/Microsoft.Billing/billingAccounts/100/enrollmentAccounts/456/providers/Microsoft.CostManagement/exports/TestExport2"),
					Properties: &armcostmanagement.ExportProperties{
						Format: to.Ptr(armcostmanagement.FormatTypeCSV),
						Definition: &armcostmanagement.ExportDefinition{
							Type: to.Ptr(armcostmanagement.ExportTypeActualCost),
							DataSet: &armcostmanagement.ExportDataset{
								Configuration: &armcostmanagement.ExportDatasetConfiguration{
									Columns: []*string{
										to.Ptr("Date"),
										to.Ptr("MeterId"),
										to.Ptr("ResourceId"),
										to.Ptr("ResourceLocation"),
										to.Ptr("Quantity")},
								},
								Granularity: to.Ptr(armcostmanagement.GranularityTypeDaily),
							},
							Timeframe: to.Ptr(armcostmanagement.TimeframeTypeWeekToDate),
						},
						DeliveryInfo: &armcostmanagement.ExportDeliveryInfo{
							Destination: &armcostmanagement.ExportDeliveryDestination{
								Container:      to.Ptr("exports"),
								ResourceID:     to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MYDEVTESTRG/providers/Microsoft.Storage/storageAccounts/ccmeastusdiag182"),
								RootFolderPath: to.Ptr("ad-hoc"),
							},
						},
						Schedule: &armcostmanagement.ExportSchedule{
							Recurrence: to.Ptr(armcostmanagement.RecurrenceTypeWeekly),
							RecurrencePeriod: &armcostmanagement.ExportRecurrencePeriod{
								From: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-06-01T00:00:00Z"); return t }()),
								To:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-10-31T00:00:00Z"); return t }()),
							},
							Status: to.Ptr(armcostmanagement.StatusTypeActive),
						},
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.ExportListResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ExportListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ExportsGetByEnrollmentAccount.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ExportsGetByManagementGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ExportsGetByManagementGroup"},
	})
	client = armcostmanagement.NewExportsClient(cred, &options)
	res, err = client.List(ctx,
		"providers/Microsoft.Management/managementGroups/TestMG",
		&armcostmanagement.ExportsClientListOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ExportsGetByManagementGroup.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcostmanagement.ExportListResult{
			Value: []*armcostmanagement.Export{
				{
					Name: to.Ptr("TestExport1"),
					Type: to.Ptr("Microsoft.CostManagement/exports"),
					ID:   to.Ptr("providers/Microsoft.Management/managementGroups/TestMG/providers/Microsoft.CostManagement/exports/TestExport1"),
					Properties: &armcostmanagement.ExportProperties{
						Format: to.Ptr(armcostmanagement.FormatTypeCSV),
						Definition: &armcostmanagement.ExportDefinition{
							Type: to.Ptr(armcostmanagement.ExportTypeActualCost),
							DataSet: &armcostmanagement.ExportDataset{
								Configuration: &armcostmanagement.ExportDatasetConfiguration{
									Columns: []*string{
										to.Ptr("Date"),
										to.Ptr("MeterId"),
										to.Ptr("ResourceId"),
										to.Ptr("ResourceLocation"),
										to.Ptr("Quantity")},
								},
								Granularity: to.Ptr(armcostmanagement.GranularityTypeDaily),
							},
							TimePeriod: &armcostmanagement.ExportTimePeriod{
								From: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-06-01T00:00:00Z"); return t }()),
								To:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-10-31T00:00:00Z"); return t }()),
							},
							Timeframe: to.Ptr(armcostmanagement.TimeframeTypeCustom),
						},
						DeliveryInfo: &armcostmanagement.ExportDeliveryInfo{
							Destination: &armcostmanagement.ExportDeliveryDestination{
								Container:      to.Ptr("exports"),
								ResourceID:     to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MYDEVTESTRG/providers/Microsoft.Storage/storageAccounts/ccmeastusdiag182"),
								RootFolderPath: to.Ptr("ad-hoc"),
							},
						},
					},
				},
				{
					Name: to.Ptr("TestExport2"),
					Type: to.Ptr("Microsoft.CostManagement/exports"),
					ID:   to.Ptr("providers/Microsoft.Management/managementGroups/TestMG/providers/Microsoft.CostManagement/exports/TestExport2"),
					Properties: &armcostmanagement.ExportProperties{
						Format: to.Ptr(armcostmanagement.FormatTypeCSV),
						Definition: &armcostmanagement.ExportDefinition{
							Type: to.Ptr(armcostmanagement.ExportTypeActualCost),
							DataSet: &armcostmanagement.ExportDataset{
								Configuration: &armcostmanagement.ExportDatasetConfiguration{
									Columns: []*string{
										to.Ptr("Date"),
										to.Ptr("MeterId"),
										to.Ptr("ResourceId"),
										to.Ptr("ResourceLocation"),
										to.Ptr("Quantity")},
								},
								Granularity: to.Ptr(armcostmanagement.GranularityTypeDaily),
							},
							Timeframe: to.Ptr(armcostmanagement.TimeframeTypeWeekToDate),
						},
						DeliveryInfo: &armcostmanagement.ExportDeliveryInfo{
							Destination: &armcostmanagement.ExportDeliveryDestination{
								Container:      to.Ptr("exports"),
								ResourceID:     to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MYDEVTESTRG/providers/Microsoft.Storage/storageAccounts/ccmeastusdiag182"),
								RootFolderPath: to.Ptr("ad-hoc"),
							},
						},
						Schedule: &armcostmanagement.ExportSchedule{
							Recurrence: to.Ptr(armcostmanagement.RecurrenceTypeWeekly),
							RecurrencePeriod: &armcostmanagement.ExportRecurrencePeriod{
								From: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-06-01T00:00:00Z"); return t }()),
								To:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-10-31T00:00:00Z"); return t }()),
							},
							Status: to.Ptr(armcostmanagement.StatusTypeActive),
						},
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.ExportListResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ExportListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ExportsGetByManagementGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ExportsGetByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ExportsGetByResourceGroup"},
	})
	client = armcostmanagement.NewExportsClient(cred, &options)
	res, err = client.List(ctx,
		"subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MYDEVTESTRG",
		&armcostmanagement.ExportsClientListOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ExportsGetByResourceGroup.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcostmanagement.ExportListResult{
			Value: []*armcostmanagement.Export{
				{
					Name: to.Ptr("TestExport1"),
					Type: to.Ptr("Microsoft.CostManagement/exports"),
					ID:   to.Ptr("subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MYDEVTESTRG/providers/Microsoft.CostManagement/exports/TestExport1"),
					Properties: &armcostmanagement.ExportProperties{
						Format: to.Ptr(armcostmanagement.FormatTypeCSV),
						Definition: &armcostmanagement.ExportDefinition{
							Type: to.Ptr(armcostmanagement.ExportTypeActualCost),
							DataSet: &armcostmanagement.ExportDataset{
								Configuration: &armcostmanagement.ExportDatasetConfiguration{
									Columns: []*string{
										to.Ptr("Date"),
										to.Ptr("MeterId"),
										to.Ptr("ResourceId"),
										to.Ptr("ResourceLocation"),
										to.Ptr("Quantity")},
								},
								Granularity: to.Ptr(armcostmanagement.GranularityTypeDaily),
							},
							TimePeriod: &armcostmanagement.ExportTimePeriod{
								From: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-06-01T00:00:00Z"); return t }()),
								To:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-10-31T00:00:00Z"); return t }()),
							},
							Timeframe: to.Ptr(armcostmanagement.TimeframeTypeCustom),
						},
						DeliveryInfo: &armcostmanagement.ExportDeliveryInfo{
							Destination: &armcostmanagement.ExportDeliveryDestination{
								Container:      to.Ptr("exports"),
								ResourceID:     to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MYDEVTESTRG/providers/Microsoft.Storage/storageAccounts/ccmeastusdiag182"),
								RootFolderPath: to.Ptr("ad-hoc"),
							},
						},
					},
				},
				{
					Name: to.Ptr("TestExport2"),
					Type: to.Ptr("Microsoft.CostManagement/exports"),
					ID:   to.Ptr("subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MYDEVTESTRG/providers/Microsoft.CostManagement/exports/TestExport2"),
					Properties: &armcostmanagement.ExportProperties{
						Format: to.Ptr(armcostmanagement.FormatTypeCSV),
						Definition: &armcostmanagement.ExportDefinition{
							Type: to.Ptr(armcostmanagement.ExportTypeActualCost),
							DataSet: &armcostmanagement.ExportDataset{
								Configuration: &armcostmanagement.ExportDatasetConfiguration{
									Columns: []*string{
										to.Ptr("Date"),
										to.Ptr("MeterId"),
										to.Ptr("ResourceId"),
										to.Ptr("ResourceLocation"),
										to.Ptr("Quantity")},
								},
								Granularity: to.Ptr(armcostmanagement.GranularityTypeDaily),
							},
							Timeframe: to.Ptr(armcostmanagement.TimeframeTypeWeekToDate),
						},
						DeliveryInfo: &armcostmanagement.ExportDeliveryInfo{
							Destination: &armcostmanagement.ExportDeliveryDestination{
								Container:      to.Ptr("exports"),
								ResourceID:     to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MYDEVTESTRG/providers/Microsoft.Storage/storageAccounts/ccmeastusdiag182"),
								RootFolderPath: to.Ptr("ad-hoc"),
							},
						},
						Schedule: &armcostmanagement.ExportSchedule{
							Recurrence: to.Ptr(armcostmanagement.RecurrenceTypeWeekly),
							RecurrencePeriod: &armcostmanagement.ExportRecurrencePeriod{
								From: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-06-01T00:00:00Z"); return t }()),
								To:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-10-31T00:00:00Z"); return t }()),
							},
							Status: to.Ptr(armcostmanagement.StatusTypeActive),
						},
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.ExportListResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ExportListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ExportsGetByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ExportsGetBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ExportsGetBySubscription"},
	})
	client = armcostmanagement.NewExportsClient(cred, &options)
	res, err = client.List(ctx,
		"subscriptions/00000000-0000-0000-0000-000000000000",
		&armcostmanagement.ExportsClientListOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ExportsGetBySubscription.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcostmanagement.ExportListResult{
			Value: []*armcostmanagement.Export{
				{
					Name: to.Ptr("TestExport1"),
					Type: to.Ptr("Microsoft.CostManagement/exports"),
					ID:   to.Ptr("subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.CostManagement/exports/TestExport1"),
					Properties: &armcostmanagement.ExportProperties{
						Format: to.Ptr(armcostmanagement.FormatTypeCSV),
						Definition: &armcostmanagement.ExportDefinition{
							Type: to.Ptr(armcostmanagement.ExportTypeActualCost),
							DataSet: &armcostmanagement.ExportDataset{
								Configuration: &armcostmanagement.ExportDatasetConfiguration{
									Columns: []*string{
										to.Ptr("Date"),
										to.Ptr("MeterId"),
										to.Ptr("ResourceId"),
										to.Ptr("ResourceLocation"),
										to.Ptr("Quantity")},
								},
								Granularity: to.Ptr(armcostmanagement.GranularityTypeDaily),
							},
							TimePeriod: &armcostmanagement.ExportTimePeriod{
								From: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-06-01T00:00:00Z"); return t }()),
								To:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-10-31T00:00:00Z"); return t }()),
							},
							Timeframe: to.Ptr(armcostmanagement.TimeframeTypeCustom),
						},
						DeliveryInfo: &armcostmanagement.ExportDeliveryInfo{
							Destination: &armcostmanagement.ExportDeliveryDestination{
								Container:      to.Ptr("exports"),
								ResourceID:     to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MYDEVTESTRG/providers/Microsoft.Storage/storageAccounts/ccmeastusdiag182"),
								RootFolderPath: to.Ptr("ad-hoc"),
							},
						},
					},
				},
				{
					Name: to.Ptr("TestExport2"),
					Type: to.Ptr("Microsoft.CostManagement/exports"),
					ID:   to.Ptr("subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.CostManagement/exports/TestExport2"),
					Properties: &armcostmanagement.ExportProperties{
						Format: to.Ptr(armcostmanagement.FormatTypeCSV),
						Definition: &armcostmanagement.ExportDefinition{
							Type: to.Ptr(armcostmanagement.ExportTypeActualCost),
							DataSet: &armcostmanagement.ExportDataset{
								Configuration: &armcostmanagement.ExportDatasetConfiguration{
									Columns: []*string{
										to.Ptr("Date"),
										to.Ptr("MeterId"),
										to.Ptr("ResourceId"),
										to.Ptr("ResourceLocation"),
										to.Ptr("Quantity")},
								},
								Granularity: to.Ptr(armcostmanagement.GranularityTypeDaily),
							},
							Timeframe: to.Ptr(armcostmanagement.TimeframeTypeWeekToDate),
						},
						DeliveryInfo: &armcostmanagement.ExportDeliveryInfo{
							Destination: &armcostmanagement.ExportDeliveryDestination{
								Container:      to.Ptr("exports"),
								ResourceID:     to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MYDEVTESTRG/providers/Microsoft.Storage/storageAccounts/ccmeastusdiag182"),
								RootFolderPath: to.Ptr("ad-hoc"),
							},
						},
						Schedule: &armcostmanagement.ExportSchedule{
							Recurrence: to.Ptr(armcostmanagement.RecurrenceTypeWeekly),
							RecurrencePeriod: &armcostmanagement.ExportRecurrencePeriod{
								From: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-06-01T00:00:00Z"); return t }()),
								To:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-10-31T00:00:00Z"); return t }()),
							},
							Status: to.Ptr(armcostmanagement.StatusTypeActive),
						},
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.ExportListResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ExportListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ExportsGetBySubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestExports_Get(t *testing.T) {
	// From example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ExportGetByBillingAccount.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ExportGetByBillingAccount"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcostmanagement.NewExportsClient(cred, &options)
	res, err := client.Get(ctx,
		"providers/Microsoft.Billing/billingAccounts/123456",
		"TestExport",
		&armcostmanagement.ExportsClientGetOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ExportGetByBillingAccount.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcostmanagement.Export{
			Name: to.Ptr("TestExport"),
			Type: to.Ptr("Microsoft.CostManagement/exports"),
			ID:   to.Ptr("providers/Microsoft.Billing/billingAccounts/{billingAccount-Id}/providers/Microsoft.CostManagement/exports/TestExport"),
			Properties: &armcostmanagement.ExportProperties{
				Format: to.Ptr(armcostmanagement.FormatTypeCSV),
				Definition: &armcostmanagement.ExportDefinition{
					Type: to.Ptr(armcostmanagement.ExportTypeActualCost),
					DataSet: &armcostmanagement.ExportDataset{
						Configuration: &armcostmanagement.ExportDatasetConfiguration{
							Columns: []*string{
								to.Ptr("Date"),
								to.Ptr("MeterId"),
								to.Ptr("ResourceId"),
								to.Ptr("ResourceLocation"),
								to.Ptr("Quantity")},
						},
						Granularity: to.Ptr(armcostmanagement.GranularityTypeDaily),
					},
					TimePeriod: &armcostmanagement.ExportTimePeriod{
						From: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-01T00:00:00Z"); return t }()),
						To:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-31T00:00:00Z"); return t }()),
					},
					Timeframe: to.Ptr(armcostmanagement.TimeframeTypeCustom),
				},
				DeliveryInfo: &armcostmanagement.ExportDeliveryInfo{
					Destination: &armcostmanagement.ExportDeliveryDestination{
						Container:      to.Ptr("exports"),
						ResourceID:     to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MYDEVTESTRG/providers/Microsoft.Storage/storageAccounts/ccmeastusdiag182"),
						RootFolderPath: to.Ptr("ad-hoc"),
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Export) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Export)
			t.Fatalf("Mock response is not equal to example response for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ExportGetByBillingAccount.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ExportGetByDepartment.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ExportGetByDepartment"},
	})
	client = armcostmanagement.NewExportsClient(cred, &options)
	res, err = client.Get(ctx,
		"providers/Microsoft.Billing/billingAccounts/12/departments/1234",
		"TestExport",
		&armcostmanagement.ExportsClientGetOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ExportGetByDepartment.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcostmanagement.Export{
			Name: to.Ptr("TestExport"),
			Type: to.Ptr("Microsoft.CostManagement/exports"),
			ID:   to.Ptr("providers/Microsoft.Billing/billingAccounts/12/departments/1234/providers/Microsoft.CostManagement/exports/TestExport"),
			Properties: &armcostmanagement.ExportProperties{
				Format: to.Ptr(armcostmanagement.FormatTypeCSV),
				Definition: &armcostmanagement.ExportDefinition{
					Type: to.Ptr(armcostmanagement.ExportTypeActualCost),
					DataSet: &armcostmanagement.ExportDataset{
						Configuration: &armcostmanagement.ExportDatasetConfiguration{
							Columns: []*string{
								to.Ptr("Date"),
								to.Ptr("MeterId"),
								to.Ptr("ResourceId"),
								to.Ptr("ResourceLocation"),
								to.Ptr("Quantity")},
						},
						Granularity: to.Ptr(armcostmanagement.GranularityTypeDaily),
					},
					TimePeriod: &armcostmanagement.ExportTimePeriod{
						From: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-06-01T00:00:00Z"); return t }()),
						To:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-06-30T00:00:00Z"); return t }()),
					},
					Timeframe: to.Ptr(armcostmanagement.TimeframeTypeCustom),
				},
				DeliveryInfo: &armcostmanagement.ExportDeliveryInfo{
					Destination: &armcostmanagement.ExportDeliveryDestination{
						Container:      to.Ptr("exports"),
						ResourceID:     to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MYDEVTESTRG/providers/Microsoft.Storage/storageAccounts/ccmeastusdiag182"),
						RootFolderPath: to.Ptr("ad-hoc"),
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Export) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Export)
			t.Fatalf("Mock response is not equal to example response for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ExportGetByDepartment.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ExportGetByEnrollmentAccount.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ExportGetByEnrollmentAccount"},
	})
	client = armcostmanagement.NewExportsClient(cred, &options)
	res, err = client.Get(ctx,
		"providers/Microsoft.Billing/billingAccounts/100/enrollmentAccounts/456",
		"TestExport",
		&armcostmanagement.ExportsClientGetOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ExportGetByEnrollmentAccount.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcostmanagement.Export{
			Name: to.Ptr("TestExport"),
			Type: to.Ptr("Microsoft.CostManagement/exports"),
			ID:   to.Ptr("providers/Microsoft.Billing/billingAccounts/100/enrollmentAccounts/456/providers/Microsoft.CostManagement/exports/TestExport"),
			Properties: &armcostmanagement.ExportProperties{
				Format: to.Ptr(armcostmanagement.FormatTypeCSV),
				Definition: &armcostmanagement.ExportDefinition{
					Type: to.Ptr(armcostmanagement.ExportTypeActualCost),
					DataSet: &armcostmanagement.ExportDataset{
						Configuration: &armcostmanagement.ExportDatasetConfiguration{
							Columns: []*string{
								to.Ptr("Date"),
								to.Ptr("MeterId"),
								to.Ptr("ResourceId"),
								to.Ptr("ResourceLocation"),
								to.Ptr("Quantity")},
						},
						Granularity: to.Ptr(armcostmanagement.GranularityTypeDaily),
					},
					TimePeriod: &armcostmanagement.ExportTimePeriod{
						From: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-09-01T00:00:00Z"); return t }()),
						To:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-10-31T00:00:00Z"); return t }()),
					},
					Timeframe: to.Ptr(armcostmanagement.TimeframeTypeCustom),
				},
				DeliveryInfo: &armcostmanagement.ExportDeliveryInfo{
					Destination: &armcostmanagement.ExportDeliveryDestination{
						Container:      to.Ptr("exports"),
						ResourceID:     to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MYDEVTESTRG/providers/Microsoft.Storage/storageAccounts/ccmeastusdiag182"),
						RootFolderPath: to.Ptr("ad-hoc"),
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Export) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Export)
			t.Fatalf("Mock response is not equal to example response for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ExportGetByEnrollmentAccount.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ExportGetByManagementGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ExportGetByManagementGroup"},
	})
	client = armcostmanagement.NewExportsClient(cred, &options)
	res, err = client.Get(ctx,
		"providers/Microsoft.Management/managementGroups/TestMG",
		"TestExport",
		&armcostmanagement.ExportsClientGetOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ExportGetByManagementGroup.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcostmanagement.Export{
			Name: to.Ptr("TestExport"),
			Type: to.Ptr("Microsoft.CostManagement/exports"),
			ID:   to.Ptr("providers/Microsoft.Management/managementGroups/TestMG/providers/Microsoft.CostManagement/exports/TestExport"),
			Properties: &armcostmanagement.ExportProperties{
				Format: to.Ptr(armcostmanagement.FormatTypeCSV),
				Definition: &armcostmanagement.ExportDefinition{
					Type: to.Ptr(armcostmanagement.ExportTypeActualCost),
					DataSet: &armcostmanagement.ExportDataset{
						Configuration: &armcostmanagement.ExportDatasetConfiguration{
							Columns: []*string{
								to.Ptr("UsageDate"),
								to.Ptr("MeterId"),
								to.Ptr("InstanceId"),
								to.Ptr("ResourceLocation"),
								to.Ptr("UsageQuantity")},
						},
						Granularity: to.Ptr(armcostmanagement.GranularityTypeDaily),
					},
					TimePeriod: &armcostmanagement.ExportTimePeriod{
						From: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-09-01T00:00:00Z"); return t }()),
						To:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-10-31T00:00:00Z"); return t }()),
					},
					Timeframe: to.Ptr(armcostmanagement.TimeframeTypeCustom),
				},
				DeliveryInfo: &armcostmanagement.ExportDeliveryInfo{
					Destination: &armcostmanagement.ExportDeliveryDestination{
						Container:      to.Ptr("exports"),
						ResourceID:     to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MYDEVTESTRG/providers/Microsoft.Storage/storageAccounts/ccmeastusdiag182"),
						RootFolderPath: to.Ptr("ad-hoc"),
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Export) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Export)
			t.Fatalf("Mock response is not equal to example response for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ExportGetByManagementGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ExportGetByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ExportGetByResourceGroup"},
	})
	client = armcostmanagement.NewExportsClient(cred, &options)
	res, err = client.Get(ctx,
		"subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MYDEVTESTRG",
		"TestExport",
		&armcostmanagement.ExportsClientGetOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ExportGetByResourceGroup.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcostmanagement.Export{
			Name: to.Ptr("TestExport"),
			Type: to.Ptr("Microsoft.CostManagement/exports"),
			ID:   to.Ptr("subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MYDEVTESTRG/providers/Microsoft.CostManagement/exports/TestExport"),
			Properties: &armcostmanagement.ExportProperties{
				Format: to.Ptr(armcostmanagement.FormatTypeCSV),
				Definition: &armcostmanagement.ExportDefinition{
					Type: to.Ptr(armcostmanagement.ExportTypeActualCost),
					DataSet: &armcostmanagement.ExportDataset{
						Configuration: &armcostmanagement.ExportDatasetConfiguration{
							Columns: []*string{
								to.Ptr("Date"),
								to.Ptr("MeterId"),
								to.Ptr("ResourceId"),
								to.Ptr("ResourceLocation"),
								to.Ptr("Quantity")},
						},
						Granularity: to.Ptr(armcostmanagement.GranularityTypeDaily),
					},
					TimePeriod: &armcostmanagement.ExportTimePeriod{
						From: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-06-01T00:00:00Z"); return t }()),
						To:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-06-30T00:00:00Z"); return t }()),
					},
					Timeframe: to.Ptr(armcostmanagement.TimeframeTypeCustom),
				},
				DeliveryInfo: &armcostmanagement.ExportDeliveryInfo{
					Destination: &armcostmanagement.ExportDeliveryDestination{
						Container:      to.Ptr("exports"),
						ResourceID:     to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MYDEVTESTRG/providers/Microsoft.Storage/storageAccounts/ccmeastusdiag182"),
						RootFolderPath: to.Ptr("ad-hoc"),
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Export) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Export)
			t.Fatalf("Mock response is not equal to example response for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ExportGetByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ExportGetBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ExportGetBySubscription"},
	})
	client = armcostmanagement.NewExportsClient(cred, &options)
	res, err = client.Get(ctx,
		"subscriptions/00000000-0000-0000-0000-000000000000",
		"TestExport",
		&armcostmanagement.ExportsClientGetOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ExportGetBySubscription.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcostmanagement.Export{
			Name: to.Ptr("TestExport"),
			Type: to.Ptr("Microsoft.CostManagement/exports"),
			ID:   to.Ptr("subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.CostManagement/exports/TestExport"),
			Properties: &armcostmanagement.ExportProperties{
				Format: to.Ptr(armcostmanagement.FormatTypeCSV),
				Definition: &armcostmanagement.ExportDefinition{
					Type: to.Ptr(armcostmanagement.ExportTypeActualCost),
					DataSet: &armcostmanagement.ExportDataset{
						Configuration: &armcostmanagement.ExportDatasetConfiguration{
							Columns: []*string{
								to.Ptr("Date"),
								to.Ptr("MeterId"),
								to.Ptr("ResourceId"),
								to.Ptr("ResourceLocation"),
								to.Ptr("Quantity")},
						},
						Granularity: to.Ptr(armcostmanagement.GranularityTypeDaily),
					},
					TimePeriod: &armcostmanagement.ExportTimePeriod{
						From: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-06-01T00:00:00Z"); return t }()),
						To:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-07-31T00:00:00Z"); return t }()),
					},
					Timeframe: to.Ptr(armcostmanagement.TimeframeTypeCustom),
				},
				DeliveryInfo: &armcostmanagement.ExportDeliveryInfo{
					Destination: &armcostmanagement.ExportDeliveryDestination{
						Container:      to.Ptr("exports"),
						ResourceID:     to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MYDEVTESTRG/providers/Microsoft.Storage/storageAccounts/ccmeastusdiag182"),
						RootFolderPath: to.Ptr("ad-hoc"),
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Export) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Export)
			t.Fatalf("Mock response is not equal to example response for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ExportGetBySubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestExports_CreateOrUpdate(t *testing.T) {
	// From example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ExportCreateOrUpdateByBillingAccount.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ExportCreateOrUpdateByBillingAccount"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcostmanagement.NewExportsClient(cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"providers/Microsoft.Billing/billingAccounts/123456",
		"TestExport",
		armcostmanagement.Export{
			Properties: &armcostmanagement.ExportProperties{
				Format: to.Ptr(armcostmanagement.FormatTypeCSV),
				Definition: &armcostmanagement.ExportDefinition{
					Type: to.Ptr(armcostmanagement.ExportTypeActualCost),
					DataSet: &armcostmanagement.ExportDataset{
						Configuration: &armcostmanagement.ExportDatasetConfiguration{
							Columns: []*string{
								to.Ptr("Date"),
								to.Ptr("MeterId"),
								to.Ptr("ResourceId"),
								to.Ptr("ResourceLocation"),
								to.Ptr("Quantity")},
						},
						Granularity: to.Ptr(armcostmanagement.GranularityTypeDaily),
					},
					Timeframe: to.Ptr(armcostmanagement.TimeframeTypeMonthToDate),
				},
				DeliveryInfo: &armcostmanagement.ExportDeliveryInfo{
					Destination: &armcostmanagement.ExportDeliveryDestination{
						Container:      to.Ptr("exports"),
						ResourceID:     to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MYDEVTESTRG/providers/Microsoft.Storage/storageAccounts/ccmeastusdiag182"),
						RootFolderPath: to.Ptr("ad-hoc"),
					},
				},
				Schedule: &armcostmanagement.ExportSchedule{
					Recurrence: to.Ptr(armcostmanagement.RecurrenceTypeWeekly),
					RecurrencePeriod: &armcostmanagement.ExportRecurrencePeriod{
						From: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-06-01T00:00:00Z"); return t }()),
						To:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-10-31T00:00:00Z"); return t }()),
					},
					Status: to.Ptr(armcostmanagement.StatusTypeActive),
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ExportCreateOrUpdateByBillingAccount.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcostmanagement.Export{
			Name: to.Ptr("TestExport"),
			Type: to.Ptr("Microsoft.CostManagement/exports"),
			ID:   to.Ptr("providers/Microsoft.Billing/billingAccounts/123456/providers/Microsoft.CostManagement/exports/TestExport"),
			Properties: &armcostmanagement.ExportProperties{
				Format: to.Ptr(armcostmanagement.FormatTypeCSV),
				Definition: &armcostmanagement.ExportDefinition{
					Type: to.Ptr(armcostmanagement.ExportTypeActualCost),
					DataSet: &armcostmanagement.ExportDataset{
						Configuration: &armcostmanagement.ExportDatasetConfiguration{
							Columns: []*string{
								to.Ptr("Date"),
								to.Ptr("MeterId"),
								to.Ptr("ResourceId"),
								to.Ptr("ResourceLocation"),
								to.Ptr("Quantity")},
						},
						Granularity: to.Ptr(armcostmanagement.GranularityTypeDaily),
					},
					Timeframe: to.Ptr(armcostmanagement.TimeframeTypeMonthToDate),
				},
				DeliveryInfo: &armcostmanagement.ExportDeliveryInfo{
					Destination: &armcostmanagement.ExportDeliveryDestination{
						Container:      to.Ptr("exports"),
						ResourceID:     to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MYDEVTESTRG/providers/Microsoft.Storage/storageAccounts/ccmeastusdiag182"),
						RootFolderPath: to.Ptr("ad-hoc"),
					},
				},
				Schedule: &armcostmanagement.ExportSchedule{
					Recurrence: to.Ptr(armcostmanagement.RecurrenceTypeWeekly),
					RecurrencePeriod: &armcostmanagement.ExportRecurrencePeriod{
						From: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-06-01T00:00:00Z"); return t }()),
						To:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-10-31T00:00:00Z"); return t }()),
					},
					Status: to.Ptr(armcostmanagement.StatusTypeActive),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Export) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Export)
			t.Fatalf("Mock response is not equal to example response for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ExportCreateOrUpdateByBillingAccount.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ExportCreateOrUpdateByDepartment.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ExportCreateOrUpdateByDepartment"},
	})
	client = armcostmanagement.NewExportsClient(cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"providers/Microsoft.Billing/billingAccounts/12/departments/1234",
		"TestExport",
		armcostmanagement.Export{
			Properties: &armcostmanagement.ExportProperties{
				Format: to.Ptr(armcostmanagement.FormatTypeCSV),
				Definition: &armcostmanagement.ExportDefinition{
					Type: to.Ptr(armcostmanagement.ExportTypeActualCost),
					DataSet: &armcostmanagement.ExportDataset{
						Configuration: &armcostmanagement.ExportDatasetConfiguration{
							Columns: []*string{
								to.Ptr("Date"),
								to.Ptr("MeterId"),
								to.Ptr("ResourceId"),
								to.Ptr("ResourceLocation"),
								to.Ptr("Quantity")},
						},
						Granularity: to.Ptr(armcostmanagement.GranularityTypeDaily),
					},
					Timeframe: to.Ptr(armcostmanagement.TimeframeTypeMonthToDate),
				},
				DeliveryInfo: &armcostmanagement.ExportDeliveryInfo{
					Destination: &armcostmanagement.ExportDeliveryDestination{
						Container:      to.Ptr("exports"),
						ResourceID:     to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MYDEVTESTRG/providers/Microsoft.Storage/storageAccounts/ccmeastusdiag182"),
						RootFolderPath: to.Ptr("ad-hoc"),
					},
				},
				Schedule: &armcostmanagement.ExportSchedule{
					Recurrence: to.Ptr(armcostmanagement.RecurrenceTypeWeekly),
					RecurrencePeriod: &armcostmanagement.ExportRecurrencePeriod{
						From: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-06-01T00:00:00Z"); return t }()),
						To:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-10-31T00:00:00Z"); return t }()),
					},
					Status: to.Ptr(armcostmanagement.StatusTypeActive),
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ExportCreateOrUpdateByDepartment.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcostmanagement.Export{
			Name: to.Ptr("TestExport"),
			Type: to.Ptr("Microsoft.CostManagement/exports"),
			ID:   to.Ptr("providers/Microsoft.Billing/billingAccounts/12/departments/1234/providers/Microsoft.CostManagement/exports/TestExport"),
			Properties: &armcostmanagement.ExportProperties{
				Format: to.Ptr(armcostmanagement.FormatTypeCSV),
				Definition: &armcostmanagement.ExportDefinition{
					Type: to.Ptr(armcostmanagement.ExportTypeActualCost),
					DataSet: &armcostmanagement.ExportDataset{
						Configuration: &armcostmanagement.ExportDatasetConfiguration{
							Columns: []*string{
								to.Ptr("Date"),
								to.Ptr("MeterId"),
								to.Ptr("ResourceId"),
								to.Ptr("ResourceLocation"),
								to.Ptr("Quantity")},
						},
						Granularity: to.Ptr(armcostmanagement.GranularityTypeDaily),
					},
					Timeframe: to.Ptr(armcostmanagement.TimeframeTypeMonthToDate),
				},
				DeliveryInfo: &armcostmanagement.ExportDeliveryInfo{
					Destination: &armcostmanagement.ExportDeliveryDestination{
						Container:      to.Ptr("exports"),
						ResourceID:     to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MYDEVTESTRG/providers/Microsoft.Storage/storageAccounts/ccmeastusdiag182"),
						RootFolderPath: to.Ptr("ad-hoc"),
					},
				},
				Schedule: &armcostmanagement.ExportSchedule{
					Recurrence: to.Ptr(armcostmanagement.RecurrenceTypeWeekly),
					RecurrencePeriod: &armcostmanagement.ExportRecurrencePeriod{
						From: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-06-01T00:00:00Z"); return t }()),
						To:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-10-31T00:00:00Z"); return t }()),
					},
					Status: to.Ptr(armcostmanagement.StatusTypeActive),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Export) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Export)
			t.Fatalf("Mock response is not equal to example response for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ExportCreateOrUpdateByDepartment.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ExportCreateOrUpdateByEnrollmentAccount.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ExportCreateOrUpdateByEnrollmentAccount"},
	})
	client = armcostmanagement.NewExportsClient(cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"providers/Microsoft.Billing/billingAccounts/100/enrollmentAccounts/456",
		"TestExport",
		armcostmanagement.Export{
			Properties: &armcostmanagement.ExportProperties{
				Format: to.Ptr(armcostmanagement.FormatTypeCSV),
				Definition: &armcostmanagement.ExportDefinition{
					Type: to.Ptr(armcostmanagement.ExportTypeActualCost),
					DataSet: &armcostmanagement.ExportDataset{
						Configuration: &armcostmanagement.ExportDatasetConfiguration{
							Columns: []*string{
								to.Ptr("Date"),
								to.Ptr("MeterId"),
								to.Ptr("ResourceId"),
								to.Ptr("ResourceLocation"),
								to.Ptr("Quantity")},
						},
						Granularity: to.Ptr(armcostmanagement.GranularityTypeDaily),
					},
					Timeframe: to.Ptr(armcostmanagement.TimeframeTypeMonthToDate),
				},
				DeliveryInfo: &armcostmanagement.ExportDeliveryInfo{
					Destination: &armcostmanagement.ExportDeliveryDestination{
						Container:      to.Ptr("exports"),
						ResourceID:     to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MYDEVTESTRG/providers/Microsoft.Storage/storageAccounts/ccmeastusdiag182"),
						RootFolderPath: to.Ptr("ad-hoc"),
					},
				},
				Schedule: &armcostmanagement.ExportSchedule{
					Recurrence: to.Ptr(armcostmanagement.RecurrenceTypeWeekly),
					RecurrencePeriod: &armcostmanagement.ExportRecurrencePeriod{
						From: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-06-01T00:00:00Z"); return t }()),
						To:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-10-31T00:00:00Z"); return t }()),
					},
					Status: to.Ptr(armcostmanagement.StatusTypeActive),
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ExportCreateOrUpdateByEnrollmentAccount.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcostmanagement.Export{
			Name: to.Ptr("TestExport"),
			Type: to.Ptr("Microsoft.CostManagement/exports"),
			ID:   to.Ptr("providers/Microsoft.Billing/billingAccounts/100/enrollmentAccounts/456/providers/Microsoft.CostManagement/exports/TestExport"),
			Properties: &armcostmanagement.ExportProperties{
				Format: to.Ptr(armcostmanagement.FormatTypeCSV),
				Definition: &armcostmanagement.ExportDefinition{
					Type: to.Ptr(armcostmanagement.ExportTypeActualCost),
					DataSet: &armcostmanagement.ExportDataset{
						Configuration: &armcostmanagement.ExportDatasetConfiguration{
							Columns: []*string{
								to.Ptr("Date"),
								to.Ptr("MeterId"),
								to.Ptr("ResourceId"),
								to.Ptr("ResourceLocation"),
								to.Ptr("Quantity")},
						},
						Granularity: to.Ptr(armcostmanagement.GranularityTypeDaily),
					},
					Timeframe: to.Ptr(armcostmanagement.TimeframeTypeMonthToDate),
				},
				DeliveryInfo: &armcostmanagement.ExportDeliveryInfo{
					Destination: &armcostmanagement.ExportDeliveryDestination{
						Container:      to.Ptr("exports"),
						ResourceID:     to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MYDEVTESTRG/providers/Microsoft.Storage/storageAccounts/ccmeastusdiag182"),
						RootFolderPath: to.Ptr("ad-hoc"),
					},
				},
				Schedule: &armcostmanagement.ExportSchedule{
					Recurrence: to.Ptr(armcostmanagement.RecurrenceTypeWeekly),
					RecurrencePeriod: &armcostmanagement.ExportRecurrencePeriod{
						From: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-06-01T00:00:00Z"); return t }()),
						To:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-10-31T00:00:00Z"); return t }()),
					},
					Status: to.Ptr(armcostmanagement.StatusTypeActive),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Export) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Export)
			t.Fatalf("Mock response is not equal to example response for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ExportCreateOrUpdateByEnrollmentAccount.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ExportCreateOrUpdateByManagementGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ExportCreateOrUpdateByManagementGroup"},
	})
	client = armcostmanagement.NewExportsClient(cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"providers/Microsoft.Management/managementGroups/TestMG",
		"TestExport",
		armcostmanagement.Export{
			Properties: &armcostmanagement.ExportProperties{
				Format: to.Ptr(armcostmanagement.FormatTypeCSV),
				Definition: &armcostmanagement.ExportDefinition{
					Type: to.Ptr(armcostmanagement.ExportTypeActualCost),
					DataSet: &armcostmanagement.ExportDataset{
						Configuration: &armcostmanagement.ExportDatasetConfiguration{
							Columns: []*string{
								to.Ptr("Date"),
								to.Ptr("MeterId"),
								to.Ptr("ResourceId"),
								to.Ptr("ResourceLocation"),
								to.Ptr("Quantity")},
						},
						Granularity: to.Ptr(armcostmanagement.GranularityTypeDaily),
					},
					Timeframe: to.Ptr(armcostmanagement.TimeframeTypeMonthToDate),
				},
				DeliveryInfo: &armcostmanagement.ExportDeliveryInfo{
					Destination: &armcostmanagement.ExportDeliveryDestination{
						Container:      to.Ptr("exports"),
						ResourceID:     to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MYDEVTESTRG/providers/Microsoft.Storage/storageAccounts/ccmeastusdiag182"),
						RootFolderPath: to.Ptr("ad-hoc"),
					},
				},
				Schedule: &armcostmanagement.ExportSchedule{
					Recurrence: to.Ptr(armcostmanagement.RecurrenceTypeWeekly),
					RecurrencePeriod: &armcostmanagement.ExportRecurrencePeriod{
						From: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-06-01T00:00:00Z"); return t }()),
						To:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-10-31T00:00:00Z"); return t }()),
					},
					Status: to.Ptr(armcostmanagement.StatusTypeActive),
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ExportCreateOrUpdateByManagementGroup.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcostmanagement.Export{
			Name: to.Ptr("TestExport"),
			Type: to.Ptr("Microsoft.CostManagement/exports"),
			ID:   to.Ptr("providers/Microsoft.Management/managementGroups/TestMG/providers/Microsoft.CostManagement/exports/TestExport"),
			Properties: &armcostmanagement.ExportProperties{
				Format: to.Ptr(armcostmanagement.FormatTypeCSV),
				Definition: &armcostmanagement.ExportDefinition{
					Type: to.Ptr(armcostmanagement.ExportTypeActualCost),
					DataSet: &armcostmanagement.ExportDataset{
						Configuration: &armcostmanagement.ExportDatasetConfiguration{
							Columns: []*string{
								to.Ptr("Date"),
								to.Ptr("MeterId"),
								to.Ptr("ResourceId"),
								to.Ptr("ResourceLocation"),
								to.Ptr("Quantity")},
						},
						Granularity: to.Ptr(armcostmanagement.GranularityTypeDaily),
					},
					Timeframe: to.Ptr(armcostmanagement.TimeframeTypeMonthToDate),
				},
				DeliveryInfo: &armcostmanagement.ExportDeliveryInfo{
					Destination: &armcostmanagement.ExportDeliveryDestination{
						Container:      to.Ptr("exports"),
						ResourceID:     to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MYDEVTESTRG/providers/Microsoft.Storage/storageAccounts/ccmeastusdiag182"),
						RootFolderPath: to.Ptr("ad-hoc"),
					},
				},
				Schedule: &armcostmanagement.ExportSchedule{
					Recurrence: to.Ptr(armcostmanagement.RecurrenceTypeWeekly),
					RecurrencePeriod: &armcostmanagement.ExportRecurrencePeriod{
						From: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-06-01T00:00:00Z"); return t }()),
						To:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-10-31T00:00:00Z"); return t }()),
					},
					Status: to.Ptr(armcostmanagement.StatusTypeActive),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Export) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Export)
			t.Fatalf("Mock response is not equal to example response for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ExportCreateOrUpdateByManagementGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ExportCreateOrUpdateByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ExportCreateOrUpdateByResourceGroup"},
	})
	client = armcostmanagement.NewExportsClient(cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MYDEVTESTRG",
		"TestExport",
		armcostmanagement.Export{
			Properties: &armcostmanagement.ExportProperties{
				Format: to.Ptr(armcostmanagement.FormatTypeCSV),
				Definition: &armcostmanagement.ExportDefinition{
					Type: to.Ptr(armcostmanagement.ExportTypeActualCost),
					DataSet: &armcostmanagement.ExportDataset{
						Configuration: &armcostmanagement.ExportDatasetConfiguration{
							Columns: []*string{
								to.Ptr("Date"),
								to.Ptr("MeterId"),
								to.Ptr("ResourceId"),
								to.Ptr("ResourceLocation"),
								to.Ptr("Quantity")},
						},
						Granularity: to.Ptr(armcostmanagement.GranularityTypeDaily),
					},
					Timeframe: to.Ptr(armcostmanagement.TimeframeTypeMonthToDate),
				},
				DeliveryInfo: &armcostmanagement.ExportDeliveryInfo{
					Destination: &armcostmanagement.ExportDeliveryDestination{
						Container:      to.Ptr("exports"),
						ResourceID:     to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MYDEVTESTRG/providers/Microsoft.Storage/storageAccounts/ccmeastusdiag182"),
						RootFolderPath: to.Ptr("ad-hoc"),
					},
				},
				Schedule: &armcostmanagement.ExportSchedule{
					Recurrence: to.Ptr(armcostmanagement.RecurrenceTypeWeekly),
					RecurrencePeriod: &armcostmanagement.ExportRecurrencePeriod{
						From: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-06-01T00:00:00Z"); return t }()),
						To:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-10-31T00:00:00Z"); return t }()),
					},
					Status: to.Ptr(armcostmanagement.StatusTypeActive),
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ExportCreateOrUpdateByResourceGroup.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcostmanagement.Export{
			Name: to.Ptr("TestExport"),
			Type: to.Ptr("Microsoft.CostManagement/exports"),
			ID:   to.Ptr("subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MYDEVTESTRG/providers/Microsoft.CostManagement/exports/TestExport"),
			Properties: &armcostmanagement.ExportProperties{
				Format: to.Ptr(armcostmanagement.FormatTypeCSV),
				Definition: &armcostmanagement.ExportDefinition{
					Type: to.Ptr(armcostmanagement.ExportTypeActualCost),
					DataSet: &armcostmanagement.ExportDataset{
						Configuration: &armcostmanagement.ExportDatasetConfiguration{
							Columns: []*string{
								to.Ptr("Date"),
								to.Ptr("MeterId"),
								to.Ptr("ResourceId"),
								to.Ptr("ResourceLocation"),
								to.Ptr("Quantity")},
						},
						Granularity: to.Ptr(armcostmanagement.GranularityTypeDaily),
					},
					Timeframe: to.Ptr(armcostmanagement.TimeframeTypeMonthToDate),
				},
				DeliveryInfo: &armcostmanagement.ExportDeliveryInfo{
					Destination: &armcostmanagement.ExportDeliveryDestination{
						Container:      to.Ptr("exports"),
						ResourceID:     to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MYDEVTESTRG/providers/Microsoft.Storage/storageAccounts/ccmeastusdiag182"),
						RootFolderPath: to.Ptr("ad-hoc"),
					},
				},
				Schedule: &armcostmanagement.ExportSchedule{
					Recurrence: to.Ptr(armcostmanagement.RecurrenceTypeWeekly),
					RecurrencePeriod: &armcostmanagement.ExportRecurrencePeriod{
						From: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-06-01T00:00:00Z"); return t }()),
						To:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-10-31T00:00:00Z"); return t }()),
					},
					Status: to.Ptr(armcostmanagement.StatusTypeActive),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Export) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Export)
			t.Fatalf("Mock response is not equal to example response for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ExportCreateOrUpdateByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ExportCreateOrUpdateBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ExportCreateOrUpdateBySubscription"},
	})
	client = armcostmanagement.NewExportsClient(cred, &options)
	res, err = client.CreateOrUpdate(ctx,
		"subscriptions/00000000-0000-0000-0000-000000000000",
		"TestExport",
		armcostmanagement.Export{
			Properties: &armcostmanagement.ExportProperties{
				Format: to.Ptr(armcostmanagement.FormatTypeCSV),
				Definition: &armcostmanagement.ExportDefinition{
					Type: to.Ptr(armcostmanagement.ExportTypeActualCost),
					DataSet: &armcostmanagement.ExportDataset{
						Configuration: &armcostmanagement.ExportDatasetConfiguration{
							Columns: []*string{
								to.Ptr("Date"),
								to.Ptr("MeterId"),
								to.Ptr("ResourceId"),
								to.Ptr("ResourceLocation"),
								to.Ptr("Quantity")},
						},
						Granularity: to.Ptr(armcostmanagement.GranularityTypeDaily),
					},
					Timeframe: to.Ptr(armcostmanagement.TimeframeTypeMonthToDate),
				},
				DeliveryInfo: &armcostmanagement.ExportDeliveryInfo{
					Destination: &armcostmanagement.ExportDeliveryDestination{
						Container:      to.Ptr("exports"),
						ResourceID:     to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MYDEVTESTRG/providers/Microsoft.Storage/storageAccounts/ccmeastusdiag182"),
						RootFolderPath: to.Ptr("ad-hoc"),
					},
				},
				Schedule: &armcostmanagement.ExportSchedule{
					Recurrence: to.Ptr(armcostmanagement.RecurrenceTypeWeekly),
					RecurrencePeriod: &armcostmanagement.ExportRecurrencePeriod{
						From: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-06-01T00:00:00Z"); return t }()),
						To:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-10-31T00:00:00Z"); return t }()),
					},
					Status: to.Ptr(armcostmanagement.StatusTypeActive),
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ExportCreateOrUpdateBySubscription.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcostmanagement.Export{
			Name: to.Ptr("TestExport"),
			Type: to.Ptr("Microsoft.CostManagement/exports"),
			ID:   to.Ptr("subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.CostManagement/exports/TestExport"),
			Properties: &armcostmanagement.ExportProperties{
				Format: to.Ptr(armcostmanagement.FormatTypeCSV),
				Definition: &armcostmanagement.ExportDefinition{
					Type: to.Ptr(armcostmanagement.ExportTypeActualCost),
					DataSet: &armcostmanagement.ExportDataset{
						Configuration: &armcostmanagement.ExportDatasetConfiguration{
							Columns: []*string{
								to.Ptr("Date"),
								to.Ptr("MeterId"),
								to.Ptr("ResourceId"),
								to.Ptr("ResourceLocation"),
								to.Ptr("Quantity")},
						},
						Granularity: to.Ptr(armcostmanagement.GranularityTypeDaily),
					},
					Timeframe: to.Ptr(armcostmanagement.TimeframeTypeMonthToDate),
				},
				DeliveryInfo: &armcostmanagement.ExportDeliveryInfo{
					Destination: &armcostmanagement.ExportDeliveryDestination{
						Container:      to.Ptr("exports"),
						ResourceID:     to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MYDEVTESTRG/providers/Microsoft.Storage/storageAccounts/ccmeastusdiag182"),
						RootFolderPath: to.Ptr("ad-hoc"),
					},
				},
				Schedule: &armcostmanagement.ExportSchedule{
					Recurrence: to.Ptr(armcostmanagement.RecurrenceTypeWeekly),
					RecurrencePeriod: &armcostmanagement.ExportRecurrencePeriod{
						From: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-06-01T00:00:00Z"); return t }()),
						To:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-10-31T00:00:00Z"); return t }()),
					},
					Status: to.Ptr(armcostmanagement.StatusTypeActive),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Export) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Export)
			t.Fatalf("Mock response is not equal to example response for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ExportCreateOrUpdateBySubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestExports_Delete(t *testing.T) {
	// From example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ExportDeleteByBillingAccount.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ExportDeleteByBillingAccount"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcostmanagement.NewExportsClient(cred, &options)
	_, err := client.Delete(ctx,
		"providers/Microsoft.Billing/billingAccounts/123456",
		"TestExport",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ExportDeleteByBillingAccount.json: %v", err)
	}

	// From example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ExportDeleteByDepartment.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ExportDeleteByDepartment"},
	})
	client = armcostmanagement.NewExportsClient(cred, &options)
	_, err = client.Delete(ctx,
		"providers/Microsoft.Billing/billingAccounts/12/departments/1234",
		"TestExport",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ExportDeleteByDepartment.json: %v", err)
	}

	// From example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ExportDeleteByEnrollmentAccount.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ExportDeleteByEnrollmentAccount"},
	})
	client = armcostmanagement.NewExportsClient(cred, &options)
	_, err = client.Delete(ctx,
		"providers/Microsoft.Billing/billingAccounts/100/enrollmentAccounts/456",
		"TestExport",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ExportDeleteByEnrollmentAccount.json: %v", err)
	}

	// From example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ExportDeleteByManagementGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ExportDeleteByManagementGroup"},
	})
	client = armcostmanagement.NewExportsClient(cred, &options)
	_, err = client.Delete(ctx,
		"providers/Microsoft.Management/managementGroups/TestMG",
		"TestExport",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ExportDeleteByManagementGroup.json: %v", err)
	}

	// From example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ExportDeleteByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ExportDeleteByResourceGroup"},
	})
	client = armcostmanagement.NewExportsClient(cred, &options)
	_, err = client.Delete(ctx,
		"subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MYDEVTESTRG",
		"TestExport",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ExportDeleteByResourceGroup.json: %v", err)
	}

	// From example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ExportDeleteBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ExportDeleteBySubscription"},
	})
	client = armcostmanagement.NewExportsClient(cred, &options)
	_, err = client.Delete(ctx,
		"subscriptions/00000000-0000-0000-0000-000000000000",
		"TestExport",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ExportDeleteBySubscription.json: %v", err)
	}
}

func TestExports_Execute(t *testing.T) {
	// From example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ExportRunByBillingAccount.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ExportRunByBillingAccount"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcostmanagement.NewExportsClient(cred, &options)
	_, err := client.Execute(ctx,
		"providers/Microsoft.Billing/billingAccounts/123456",
		"TestExport",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ExportRunByBillingAccount.json: %v", err)
	}

	// From example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ExportRunByDepartment.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ExportRunByDepartment"},
	})
	client = armcostmanagement.NewExportsClient(cred, &options)
	_, err = client.Execute(ctx,
		"providers/Microsoft.Billing/billingAccounts/12/departments/1234",
		"TestExport",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ExportRunByDepartment.json: %v", err)
	}

	// From example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ExportRunByEnrollmentAccount.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ExportRunByEnrollmentAccount"},
	})
	client = armcostmanagement.NewExportsClient(cred, &options)
	_, err = client.Execute(ctx,
		"providers/Microsoft.Billing/billingAccounts/100/enrollmentAccounts/456",
		"TestExport",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ExportRunByEnrollmentAccount.json: %v", err)
	}

	// From example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ExportRunByManagementGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ExportRunByManagementGroup"},
	})
	client = armcostmanagement.NewExportsClient(cred, &options)
	_, err = client.Execute(ctx,
		"providers/Microsoft.Management/managementGroups/TestMG",
		"TestExport",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ExportRunByManagementGroup.json: %v", err)
	}

	// From example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ExportRunByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ExportRunByResourceGroup"},
	})
	client = armcostmanagement.NewExportsClient(cred, &options)
	_, err = client.Execute(ctx,
		"subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MYDEVTESTRG",
		"TestExport",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ExportRunByResourceGroup.json: %v", err)
	}

	// From example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ExportRunBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ExportRunBySubscription"},
	})
	client = armcostmanagement.NewExportsClient(cred, &options)
	_, err = client.Execute(ctx,
		"subscriptions/00000000-0000-0000-0000-000000000000",
		"TestExport",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ExportRunBySubscription.json: %v", err)
	}
}

func TestExports_GetExecutionHistory(t *testing.T) {
	// From example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ExportRunHistoryGetByBillingAccount.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ExportRunHistoryGetByBillingAccount"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcostmanagement.NewExportsClient(cred, &options)
	res, err := client.GetExecutionHistory(ctx,
		"providers/Microsoft.Billing/billingAccounts/123456",
		"TestExport",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ExportRunHistoryGetByBillingAccount.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcostmanagement.ExportExecutionListResult{
			Value: []*armcostmanagement.ExportExecution{
				{
					ID: to.Ptr("providers/Microsoft.Billing/billingAccounts/{billingAccount-id}/providers/Microsoft.CostManagement/exports/JohnDoeSchedule/Run/1e25d58a-a3b0-4916-9542-6e04a89bc100"),
					Properties: &armcostmanagement.ExportExecutionProperties{
						ExecutionType:       to.Ptr(armcostmanagement.ExecutionTypeOnDemand),
						FileName:            to.Ptr("ScheduledTestsForJohnDoe/JohnDoeSchedule/20180729-20180804/JohnDoeSchedule_1e25d58a-a3b0-4916-9542-6e04a89bc100.csv"),
						ProcessingEndTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-03T07:52:28.0373318Z"); return t }()),
						ProcessingStartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-03T07:52:16.9123797Z"); return t }()),
						RunSettings: &armcostmanagement.CommonExportProperties{
							Format: to.Ptr(armcostmanagement.FormatTypeCSV),
							Definition: &armcostmanagement.ExportDefinition{
								Type: to.Ptr(armcostmanagement.ExportTypeActualCost),
								DataSet: &armcostmanagement.ExportDataset{
									Configuration: &armcostmanagement.ExportDatasetConfiguration{
										Columns: []*string{
											to.Ptr("Date"),
											to.Ptr("MeterId"),
											to.Ptr("ResourceId"),
											to.Ptr("ResourceLocation"),
											to.Ptr("Quantity")},
									},
									Granularity: to.Ptr(armcostmanagement.GranularityTypeDaily),
								},
								TimePeriod: &armcostmanagement.ExportTimePeriod{
									From: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-06-01T00:00:00Z"); return t }()),
									To:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-10-31T00:00:00Z"); return t }()),
								},
								Timeframe: to.Ptr(armcostmanagement.TimeframeTypeCustom),
							},
							DeliveryInfo: &armcostmanagement.ExportDeliveryInfo{
								Destination: &armcostmanagement.ExportDeliveryDestination{
									Container:      to.Ptr("exports"),
									ResourceID:     to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MYDEVTESTRG/providers/Microsoft.Storage/storageAccounts/ccmeastusdiag182"),
									RootFolderPath: to.Ptr("ScheduledTestsForJohnDoe"),
								},
							},
						},
						Status:        to.Ptr(armcostmanagement.ExecutionStatusCompleted),
						SubmittedBy:   to.Ptr("john.doe@gmail.com"),
						SubmittedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-03T07:52:15.6016681Z"); return t }()),
					},
				},
				{
					ID: to.Ptr("providers/Microsoft.Billing/billingAccounts/{billingAccount-id}/providers/Microsoft.CostManagement/exports/JohnDoeSchedule/Run/11ac6811-dca3-46ad-b326-4704cf0c58ef"),
					Properties: &armcostmanagement.ExportExecutionProperties{
						ExecutionType:       to.Ptr(armcostmanagement.ExecutionTypeScheduled),
						FileName:            to.Ptr("ScheduledTestsForJohnDoe/JohnDoeSchedule/20180729-20180804/JohnDoeSchedule_11ac6811-dca3-46ad-b326-4704cf0c58ef.csv"),
						ProcessingEndTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-03T09:04:19.7223808Z"); return t }()),
						ProcessingStartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-03T09:03:58.5710244Z"); return t }()),
						RunSettings: &armcostmanagement.CommonExportProperties{
							Format: to.Ptr(armcostmanagement.FormatTypeCSV),
							Definition: &armcostmanagement.ExportDefinition{
								Type: to.Ptr(armcostmanagement.ExportTypeActualCost),
								DataSet: &armcostmanagement.ExportDataset{
									Configuration: &armcostmanagement.ExportDatasetConfiguration{
										Columns: []*string{
											to.Ptr("Date"),
											to.Ptr("MeterId"),
											to.Ptr("ResourceId"),
											to.Ptr("ResourceLocation"),
											to.Ptr("Quantity")},
									},
									Granularity: to.Ptr(armcostmanagement.GranularityTypeDaily),
								},
								TimePeriod: &armcostmanagement.ExportTimePeriod{
									From: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-06-01T00:00:00Z"); return t }()),
									To:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-10-31T00:00:00Z"); return t }()),
								},
								Timeframe: to.Ptr(armcostmanagement.TimeframeTypeCustom),
							},
							DeliveryInfo: &armcostmanagement.ExportDeliveryInfo{
								Destination: &armcostmanagement.ExportDeliveryDestination{
									Container:      to.Ptr("exports"),
									ResourceID:     to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MYDEVTESTRG/providers/Microsoft.Storage/storageAccounts/ccmeastusdiag182"),
									RootFolderPath: to.Ptr("ScheduledTestsForJohnDoe"),
								},
							},
						},
						Status:        to.Ptr(armcostmanagement.ExecutionStatusCompleted),
						SubmittedBy:   to.Ptr("System"),
						SubmittedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-03T09:03:58.5710244Z"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.ExportExecutionListResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ExportExecutionListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ExportRunHistoryGetByBillingAccount.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ExportRunHistoryGetByDepartment.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ExportRunHistoryGetByDepartment"},
	})
	client = armcostmanagement.NewExportsClient(cred, &options)
	res, err = client.GetExecutionHistory(ctx,
		"providers/Microsoft.Billing/billingAccounts/12/departments/1234",
		"TestExport",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ExportRunHistoryGetByDepartment.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcostmanagement.ExportExecutionListResult{
			Value: []*armcostmanagement.ExportExecution{
				{
					ID: to.Ptr("providers/Microsoft.Billing/billingAccounts/12/departments/1234/providers/Microsoft.CostManagement/exports/JohnDoeSchedule/Run/1e25d58a-a3b0-4916-9542-6e04a89bc100"),
					Properties: &armcostmanagement.ExportExecutionProperties{
						ExecutionType:       to.Ptr(armcostmanagement.ExecutionTypeOnDemand),
						FileName:            to.Ptr("ScheduledTestsForJohnDoe/JohnDoeSchedule/20180729-20180804/JohnDoeSchedule_1e25d58a-a3b0-4916-9542-6e04a89bc100.csv"),
						ProcessingEndTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-03T07:52:28.0373318Z"); return t }()),
						ProcessingStartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-03T07:52:16.9123797Z"); return t }()),
						RunSettings: &armcostmanagement.CommonExportProperties{
							Format: to.Ptr(armcostmanagement.FormatTypeCSV),
							Definition: &armcostmanagement.ExportDefinition{
								Type: to.Ptr(armcostmanagement.ExportTypeActualCost),
								DataSet: &armcostmanagement.ExportDataset{
									Configuration: &armcostmanagement.ExportDatasetConfiguration{
										Columns: []*string{
											to.Ptr("Date"),
											to.Ptr("MeterId"),
											to.Ptr("ResourceId"),
											to.Ptr("ResourceLocation"),
											to.Ptr("Quantity")},
									},
									Granularity: to.Ptr(armcostmanagement.GranularityTypeDaily),
								},
								TimePeriod: &armcostmanagement.ExportTimePeriod{
									From: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-06-01T00:00:00Z"); return t }()),
									To:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-10-31T00:00:00Z"); return t }()),
								},
								Timeframe: to.Ptr(armcostmanagement.TimeframeTypeCustom),
							},
							DeliveryInfo: &armcostmanagement.ExportDeliveryInfo{
								Destination: &armcostmanagement.ExportDeliveryDestination{
									Container:      to.Ptr("exports"),
									ResourceID:     to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MYDEVTESTRG/providers/Microsoft.Storage/storageAccounts/ccmeastusdiag182"),
									RootFolderPath: to.Ptr("ScheduledTestsForJohnDoe"),
								},
							},
						},
						Status:        to.Ptr(armcostmanagement.ExecutionStatusCompleted),
						SubmittedBy:   to.Ptr("john.doe@gmail.com"),
						SubmittedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-03T07:52:15.6016681Z"); return t }()),
					},
				},
				{
					ID: to.Ptr("providers/Microsoft.Billing/billingAccounts/12/departments/1234/providers/Microsoft.CostManagement/exports/JohnDoeSchedule/Run/11ac6811-dca3-46ad-b326-4704cf0c58ef"),
					Properties: &armcostmanagement.ExportExecutionProperties{
						ExecutionType:       to.Ptr(armcostmanagement.ExecutionTypeScheduled),
						FileName:            to.Ptr("ScheduledTestsForJohnDoe/JohnDoeSchedule/20180729-20180804/JohnDoeSchedule_11ac6811-dca3-46ad-b326-4704cf0c58ef.csv"),
						ProcessingEndTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-03T09:04:19.7223808Z"); return t }()),
						ProcessingStartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-03T09:03:58.5710244Z"); return t }()),
						RunSettings: &armcostmanagement.CommonExportProperties{
							Format: to.Ptr(armcostmanagement.FormatTypeCSV),
							Definition: &armcostmanagement.ExportDefinition{
								Type: to.Ptr(armcostmanagement.ExportTypeActualCost),
								DataSet: &armcostmanagement.ExportDataset{
									Configuration: &armcostmanagement.ExportDatasetConfiguration{
										Columns: []*string{
											to.Ptr("Date"),
											to.Ptr("MeterId"),
											to.Ptr("ResourceId"),
											to.Ptr("ResourceLocation"),
											to.Ptr("Quantity")},
									},
									Granularity: to.Ptr(armcostmanagement.GranularityTypeDaily),
								},
								TimePeriod: &armcostmanagement.ExportTimePeriod{
									From: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-06-01T00:00:00Z"); return t }()),
									To:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-10-31T00:00:00Z"); return t }()),
								},
								Timeframe: to.Ptr(armcostmanagement.TimeframeTypeCustom),
							},
							DeliveryInfo: &armcostmanagement.ExportDeliveryInfo{
								Destination: &armcostmanagement.ExportDeliveryDestination{
									Container:      to.Ptr("exports"),
									ResourceID:     to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MYDEVTESTRG/providers/Microsoft.Storage/storageAccounts/ccmeastusdiag182"),
									RootFolderPath: to.Ptr("ScheduledTestsForJohnDoe"),
								},
							},
						},
						Status:        to.Ptr(armcostmanagement.ExecutionStatusCompleted),
						SubmittedBy:   to.Ptr("System"),
						SubmittedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-03T09:03:58.5710244Z"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.ExportExecutionListResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ExportExecutionListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ExportRunHistoryGetByDepartment.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ExportRunHistoryGetByEnrollmentAccount.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ExportRunHistoryGetByEnrollmentAccount"},
	})
	client = armcostmanagement.NewExportsClient(cred, &options)
	res, err = client.GetExecutionHistory(ctx,
		"providers/Microsoft.Billing/billingAccounts/100/enrollmentAccounts/456",
		"TestExport",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ExportRunHistoryGetByEnrollmentAccount.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcostmanagement.ExportExecutionListResult{
			Value: []*armcostmanagement.ExportExecution{
				{
					ID: to.Ptr("providers/Microsoft.Billing/billingAccounts/100/enrollmentAccounts/456/providers/Microsoft.CostManagement/exports/JohnDoeSchedule/Run/1e25d58a-a3b0-4916-9542-6e04a89bc100"),
					Properties: &armcostmanagement.ExportExecutionProperties{
						ExecutionType:       to.Ptr(armcostmanagement.ExecutionTypeOnDemand),
						FileName:            to.Ptr("ScheduledTestsForJohnDoe/JohnDoeSchedule/20180729-20180804/JohnDoeSchedule_1e25d58a-a3b0-4916-9542-6e04a89bc100.csv"),
						ProcessingEndTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-03T07:52:28.0373318Z"); return t }()),
						ProcessingStartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-03T07:52:16.9123797Z"); return t }()),
						RunSettings: &armcostmanagement.CommonExportProperties{
							Format: to.Ptr(armcostmanagement.FormatTypeCSV),
							Definition: &armcostmanagement.ExportDefinition{
								Type: to.Ptr(armcostmanagement.ExportTypeActualCost),
								DataSet: &armcostmanagement.ExportDataset{
									Configuration: &armcostmanagement.ExportDatasetConfiguration{
										Columns: []*string{
											to.Ptr("Date"),
											to.Ptr("MeterId"),
											to.Ptr("ResourceId"),
											to.Ptr("ResourceLocation"),
											to.Ptr("Quantity")},
									},
									Granularity: to.Ptr(armcostmanagement.GranularityTypeDaily),
								},
								TimePeriod: &armcostmanagement.ExportTimePeriod{
									From: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-06-01T00:00:00Z"); return t }()),
									To:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-10-31T00:00:00Z"); return t }()),
								},
								Timeframe: to.Ptr(armcostmanagement.TimeframeTypeCustom),
							},
							DeliveryInfo: &armcostmanagement.ExportDeliveryInfo{
								Destination: &armcostmanagement.ExportDeliveryDestination{
									Container:      to.Ptr("exports"),
									ResourceID:     to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MYDEVTESTRG/providers/Microsoft.Storage/storageAccounts/ccmeastusdiag182"),
									RootFolderPath: to.Ptr("ScheduledTestsForJohnDoe"),
								},
							},
						},
						Status:        to.Ptr(armcostmanagement.ExecutionStatusCompleted),
						SubmittedBy:   to.Ptr("john.doe@gmail.com"),
						SubmittedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-03T07:52:15.6016681Z"); return t }()),
					},
				},
				{
					ID: to.Ptr("providers/Microsoft.Billing/billingAccounts/100/enrollmentAccounts/456/providers/Microsoft.CostManagement/exports/JohnDoeSchedule/Run/11ac6811-dca3-46ad-b326-4704cf0c58ef"),
					Properties: &armcostmanagement.ExportExecutionProperties{
						ExecutionType:       to.Ptr(armcostmanagement.ExecutionTypeScheduled),
						FileName:            to.Ptr("ScheduledTestsForJohnDoe/JohnDoeSchedule/20180729-20180804/JohnDoeSchedule_11ac6811-dca3-46ad-b326-4704cf0c58ef.csv"),
						ProcessingEndTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-03T09:04:19.7223808Z"); return t }()),
						ProcessingStartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-03T09:03:58.5710244Z"); return t }()),
						RunSettings: &armcostmanagement.CommonExportProperties{
							Format: to.Ptr(armcostmanagement.FormatTypeCSV),
							Definition: &armcostmanagement.ExportDefinition{
								Type: to.Ptr(armcostmanagement.ExportTypeActualCost),
								DataSet: &armcostmanagement.ExportDataset{
									Configuration: &armcostmanagement.ExportDatasetConfiguration{
										Columns: []*string{
											to.Ptr("Date"),
											to.Ptr("MeterId"),
											to.Ptr("ResourceId"),
											to.Ptr("ResourceLocation"),
											to.Ptr("Quantity")},
									},
									Granularity: to.Ptr(armcostmanagement.GranularityTypeDaily),
								},
								TimePeriod: &armcostmanagement.ExportTimePeriod{
									From: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-06-01T00:00:00Z"); return t }()),
									To:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-10-31T00:00:00Z"); return t }()),
								},
								Timeframe: to.Ptr(armcostmanagement.TimeframeTypeCustom),
							},
							DeliveryInfo: &armcostmanagement.ExportDeliveryInfo{
								Destination: &armcostmanagement.ExportDeliveryDestination{
									Container:      to.Ptr("exports"),
									ResourceID:     to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MYDEVTESTRG/providers/Microsoft.Storage/storageAccounts/ccmeastusdiag182"),
									RootFolderPath: to.Ptr("ScheduledTestsForJohnDoe"),
								},
							},
						},
						Status:        to.Ptr(armcostmanagement.ExecutionStatusCompleted),
						SubmittedBy:   to.Ptr("System"),
						SubmittedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-03T09:03:58.5710244Z"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.ExportExecutionListResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ExportExecutionListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ExportRunHistoryGetByEnrollmentAccount.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ExportRunHistoryGetByManagementGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ExportRunHistoryGetByManagementGroup"},
	})
	client = armcostmanagement.NewExportsClient(cred, &options)
	res, err = client.GetExecutionHistory(ctx,
		"providers/Microsoft.Management/managementGroups/TestMG",
		"TestExport",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ExportRunHistoryGetByManagementGroup.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcostmanagement.ExportExecutionListResult{
			Value: []*armcostmanagement.ExportExecution{
				{
					ID: to.Ptr("providers/Microsoft.Management/managementGroups/TestMG/providers/Microsoft.CostManagement/exports/TestExport/Run/1e25d58a-a3b0-4916-9542-6e04a89bc100"),
					Properties: &armcostmanagement.ExportExecutionProperties{
						ExecutionType:       to.Ptr(armcostmanagement.ExecutionTypeOnDemand),
						FileName:            to.Ptr("ScheduledForTestExport/TestExportSchedule/20180729-20180804/TestExportSchedule_1e25d58a-a3b0-4916-9542-6e04a89bc100.csv"),
						ProcessingEndTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-03T07:52:28.0373318Z"); return t }()),
						ProcessingStartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-03T07:52:16.9123797Z"); return t }()),
						RunSettings: &armcostmanagement.CommonExportProperties{
							Format: to.Ptr(armcostmanagement.FormatTypeCSV),
							Definition: &armcostmanagement.ExportDefinition{
								Type: to.Ptr(armcostmanagement.ExportTypeActualCost),
								DataSet: &armcostmanagement.ExportDataset{
									Configuration: &armcostmanagement.ExportDatasetConfiguration{
										Columns: []*string{
											to.Ptr("Date"),
											to.Ptr("MeterId"),
											to.Ptr("ResourceId"),
											to.Ptr("ResourceLocation"),
											to.Ptr("Quantity")},
									},
									Granularity: to.Ptr(armcostmanagement.GranularityTypeDaily),
								},
								TimePeriod: &armcostmanagement.ExportTimePeriod{
									From: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-06-01T00:00:00Z"); return t }()),
									To:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-10-31T00:00:00Z"); return t }()),
								},
								Timeframe: to.Ptr(armcostmanagement.TimeframeTypeCustom),
							},
							DeliveryInfo: &armcostmanagement.ExportDeliveryInfo{
								Destination: &armcostmanagement.ExportDeliveryDestination{
									Container:      to.Ptr("exports"),
									ResourceID:     to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MYDEVTESTRG/providers/Microsoft.Storage/storageAccounts/ccmeastusdiag182"),
									RootFolderPath: to.Ptr("ScheduledTestsForJohnDoe"),
								},
							},
						},
						Status:        to.Ptr(armcostmanagement.ExecutionStatusCompleted),
						SubmittedBy:   to.Ptr("john.doe@gmail.com"),
						SubmittedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-03T07:52:15.6016681Z"); return t }()),
					},
				},
				{
					ID: to.Ptr("providers/Microsoft.Management/managementGroups/TestMG/providers/Microsoft.CostManagement/exports/TestExport/Run/11ac6811-dca3-46ad-b326-4704cf0c58ef"),
					Properties: &armcostmanagement.ExportExecutionProperties{
						ExecutionType:       to.Ptr(armcostmanagement.ExecutionTypeScheduled),
						FileName:            to.Ptr("ScheduledForTestExport/TestExportSchedule/20180729-20180804/TestExportSchedule_11ac6811-dca3-46ad-b326-4704cf0c58ef.csv"),
						ProcessingEndTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-03T09:04:19.7223808Z"); return t }()),
						ProcessingStartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-03T09:03:58.5710244Z"); return t }()),
						RunSettings: &armcostmanagement.CommonExportProperties{
							Format: to.Ptr(armcostmanagement.FormatTypeCSV),
							Definition: &armcostmanagement.ExportDefinition{
								Type: to.Ptr(armcostmanagement.ExportTypeActualCost),
								DataSet: &armcostmanagement.ExportDataset{
									Configuration: &armcostmanagement.ExportDatasetConfiguration{
										Columns: []*string{
											to.Ptr("Date"),
											to.Ptr("MeterId"),
											to.Ptr("ResourceId"),
											to.Ptr("ResourceLocation"),
											to.Ptr("Quantity")},
									},
									Granularity: to.Ptr(armcostmanagement.GranularityTypeDaily),
								},
								TimePeriod: &armcostmanagement.ExportTimePeriod{
									From: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-06-01T00:00:00Z"); return t }()),
									To:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-10-31T00:00:00Z"); return t }()),
								},
								Timeframe: to.Ptr(armcostmanagement.TimeframeTypeCustom),
							},
							DeliveryInfo: &armcostmanagement.ExportDeliveryInfo{
								Destination: &armcostmanagement.ExportDeliveryDestination{
									Container:      to.Ptr("exports"),
									ResourceID:     to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MYDEVTESTRG/providers/Microsoft.Storage/storageAccounts/ccmeastusdiag182"),
									RootFolderPath: to.Ptr("ScheduledTestsForJohnDoe"),
								},
							},
						},
						Status:        to.Ptr(armcostmanagement.ExecutionStatusCompleted),
						SubmittedBy:   to.Ptr("System"),
						SubmittedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-03T09:03:58.5710244Z"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.ExportExecutionListResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ExportExecutionListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ExportRunHistoryGetByManagementGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ExportRunHistoryGetByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ExportRunHistoryGetByResourceGroup"},
	})
	client = armcostmanagement.NewExportsClient(cred, &options)
	res, err = client.GetExecutionHistory(ctx,
		"subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MYDEVTESTRG",
		"TestExport",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ExportRunHistoryGetByResourceGroup.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcostmanagement.ExportExecutionListResult{
			Value: []*armcostmanagement.ExportExecution{
				{
					ID: to.Ptr("subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MYDEVTESTRG/providers/Microsoft.CostManagement/exports/JohnDoeSchedule/Run/1e25d58a-a3b0-4916-9542-6e04a89bc100"),
					Properties: &armcostmanagement.ExportExecutionProperties{
						ExecutionType:       to.Ptr(armcostmanagement.ExecutionTypeOnDemand),
						FileName:            to.Ptr("ScheduledTestsForJohnDoe/JohnDoeSchedule/20180729-20180804/JohnDoeSchedule_1e25d58a-a3b0-4916-9542-6e04a89bc100.csv"),
						ProcessingEndTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-03T07:52:28.0373318Z"); return t }()),
						ProcessingStartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-03T07:52:16.9123797Z"); return t }()),
						RunSettings: &armcostmanagement.CommonExportProperties{
							Format: to.Ptr(armcostmanagement.FormatTypeCSV),
							Definition: &armcostmanagement.ExportDefinition{
								Type: to.Ptr(armcostmanagement.ExportTypeActualCost),
								DataSet: &armcostmanagement.ExportDataset{
									Configuration: &armcostmanagement.ExportDatasetConfiguration{
										Columns: []*string{
											to.Ptr("Date"),
											to.Ptr("MeterId"),
											to.Ptr("ResourceId"),
											to.Ptr("ResourceLocation"),
											to.Ptr("Quantity")},
									},
									Granularity: to.Ptr(armcostmanagement.GranularityTypeDaily),
								},
								TimePeriod: &armcostmanagement.ExportTimePeriod{
									From: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-06-01T00:00:00Z"); return t }()),
									To:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-10-31T00:00:00Z"); return t }()),
								},
								Timeframe: to.Ptr(armcostmanagement.TimeframeTypeCustom),
							},
							DeliveryInfo: &armcostmanagement.ExportDeliveryInfo{
								Destination: &armcostmanagement.ExportDeliveryDestination{
									Container:      to.Ptr("exports"),
									ResourceID:     to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MYDEVTESTRG/providers/Microsoft.Storage/storageAccounts/ccmeastusdiag182"),
									RootFolderPath: to.Ptr("ScheduledTestsForJohnDoe"),
								},
							},
						},
						Status:        to.Ptr(armcostmanagement.ExecutionStatusCompleted),
						SubmittedBy:   to.Ptr("john.doe@gmail.com"),
						SubmittedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-03T07:52:15.6016681Z"); return t }()),
					},
				},
				{
					ID: to.Ptr("subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MYDEVTESTRG/providers/Microsoft.CostManagement/exports/JohnDoeSchedule/Run/11ac6811-dca3-46ad-b326-4704cf0c58ef"),
					Properties: &armcostmanagement.ExportExecutionProperties{
						ExecutionType:       to.Ptr(armcostmanagement.ExecutionTypeScheduled),
						FileName:            to.Ptr("ScheduledTestsForJohnDoe/JohnDoeSchedule/20180729-20180804/JohnDoeSchedule_11ac6811-dca3-46ad-b326-4704cf0c58ef.csv"),
						ProcessingEndTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-03T09:04:19.7223808Z"); return t }()),
						ProcessingStartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-03T09:03:58.5710244Z"); return t }()),
						RunSettings: &armcostmanagement.CommonExportProperties{
							Format: to.Ptr(armcostmanagement.FormatTypeCSV),
							Definition: &armcostmanagement.ExportDefinition{
								Type: to.Ptr(armcostmanagement.ExportTypeActualCost),
								DataSet: &armcostmanagement.ExportDataset{
									Configuration: &armcostmanagement.ExportDatasetConfiguration{
										Columns: []*string{
											to.Ptr("Date"),
											to.Ptr("MeterId"),
											to.Ptr("ResourceId"),
											to.Ptr("ResourceLocation"),
											to.Ptr("Quantity")},
									},
									Granularity: to.Ptr(armcostmanagement.GranularityTypeDaily),
								},
								TimePeriod: &armcostmanagement.ExportTimePeriod{
									From: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-06-01T00:00:00Z"); return t }()),
									To:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-10-31T00:00:00Z"); return t }()),
								},
								Timeframe: to.Ptr(armcostmanagement.TimeframeTypeCustom),
							},
							DeliveryInfo: &armcostmanagement.ExportDeliveryInfo{
								Destination: &armcostmanagement.ExportDeliveryDestination{
									Container:      to.Ptr("exports"),
									ResourceID:     to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MYDEVTESTRG/providers/Microsoft.Storage/storageAccounts/ccmeastusdiag182"),
									RootFolderPath: to.Ptr("ScheduledTestsForJohnDoe"),
								},
							},
						},
						Status:        to.Ptr(armcostmanagement.ExecutionStatusCompleted),
						SubmittedBy:   to.Ptr("System"),
						SubmittedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-03T09:03:58.5710244Z"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.ExportExecutionListResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ExportExecutionListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ExportRunHistoryGetByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ExportRunHistoryGetBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ExportRunHistoryGetBySubscription"},
	})
	client = armcostmanagement.NewExportsClient(cred, &options)
	res, err = client.GetExecutionHistory(ctx,
		"subscriptions/00000000-0000-0000-0000-000000000000",
		"TestExport",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ExportRunHistoryGetBySubscription.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcostmanagement.ExportExecutionListResult{
			Value: []*armcostmanagement.ExportExecution{
				{
					ID: to.Ptr("subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.CostManagement/exports/JohnDoeSchedule/Run/1e25d58a-a3b0-4916-9542-6e04a89bc100"),
					Properties: &armcostmanagement.ExportExecutionProperties{
						ExecutionType:       to.Ptr(armcostmanagement.ExecutionTypeOnDemand),
						FileName:            to.Ptr("ScheduledTestsForJohnDoe/JohnDoeSchedule/20180729-20180804/JohnDoeSchedule_1e25d58a-a3b0-4916-9542-6e04a89bc100.csv"),
						ProcessingEndTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-03T07:52:28.0373318Z"); return t }()),
						ProcessingStartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-03T07:52:16.9123797Z"); return t }()),
						RunSettings: &armcostmanagement.CommonExportProperties{
							Format: to.Ptr(armcostmanagement.FormatTypeCSV),
							Definition: &armcostmanagement.ExportDefinition{
								Type: to.Ptr(armcostmanagement.ExportTypeActualCost),
								DataSet: &armcostmanagement.ExportDataset{
									Configuration: &armcostmanagement.ExportDatasetConfiguration{
										Columns: []*string{
											to.Ptr("Date"),
											to.Ptr("MeterId"),
											to.Ptr("ResourceId"),
											to.Ptr("ResourceLocation"),
											to.Ptr("Quantity")},
									},
									Granularity: to.Ptr(armcostmanagement.GranularityTypeDaily),
								},
								TimePeriod: &armcostmanagement.ExportTimePeriod{
									From: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-06-01T00:00:00Z"); return t }()),
									To:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-10-31T00:00:00Z"); return t }()),
								},
								Timeframe: to.Ptr(armcostmanagement.TimeframeTypeCustom),
							},
							DeliveryInfo: &armcostmanagement.ExportDeliveryInfo{
								Destination: &armcostmanagement.ExportDeliveryDestination{
									Container:      to.Ptr("exports"),
									ResourceID:     to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MYDEVTESTRG/providers/Microsoft.Storage/storageAccounts/ccmeastusdiag182"),
									RootFolderPath: to.Ptr("ScheduledTestsForJohnDoe"),
								},
							},
						},
						Status:        to.Ptr(armcostmanagement.ExecutionStatusCompleted),
						SubmittedBy:   to.Ptr("john.doe@gmail.com"),
						SubmittedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-03T07:52:15.6016681Z"); return t }()),
					},
				},
				{
					ID: to.Ptr("subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.CostManagement/exports/JohnDoeSchedule/Run/11ac6811-dca3-46ad-b326-4704cf0c58ef"),
					Properties: &armcostmanagement.ExportExecutionProperties{
						ExecutionType:       to.Ptr(armcostmanagement.ExecutionTypeScheduled),
						FileName:            to.Ptr("ScheduledTestsForJohnDoe/JohnDoeSchedule/20180729-20180804/JohnDoeSchedule_11ac6811-dca3-46ad-b326-4704cf0c58ef.csv"),
						ProcessingEndTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-03T09:04:19.7223808Z"); return t }()),
						ProcessingStartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-03T09:03:58.5710244Z"); return t }()),
						RunSettings: &armcostmanagement.CommonExportProperties{
							Format: to.Ptr(armcostmanagement.FormatTypeCSV),
							Definition: &armcostmanagement.ExportDefinition{
								Type: to.Ptr(armcostmanagement.ExportTypeActualCost),
								DataSet: &armcostmanagement.ExportDataset{
									Configuration: &armcostmanagement.ExportDatasetConfiguration{
										Columns: []*string{
											to.Ptr("Date"),
											to.Ptr("MeterId"),
											to.Ptr("ResourceId"),
											to.Ptr("ResourceLocation"),
											to.Ptr("Quantity")},
									},
									Granularity: to.Ptr(armcostmanagement.GranularityTypeDaily),
								},
								TimePeriod: &armcostmanagement.ExportTimePeriod{
									From: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-06-01T00:00:00Z"); return t }()),
									To:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-10-31T00:00:00Z"); return t }()),
								},
								Timeframe: to.Ptr(armcostmanagement.TimeframeTypeCustom),
							},
							DeliveryInfo: &armcostmanagement.ExportDeliveryInfo{
								Destination: &armcostmanagement.ExportDeliveryDestination{
									Container:      to.Ptr("exports"),
									ResourceID:     to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MYDEVTESTRG/providers/Microsoft.Storage/storageAccounts/ccmeastusdiag182"),
									RootFolderPath: to.Ptr("ScheduledTestsForJohnDoe"),
								},
							},
						},
						Status:        to.Ptr(armcostmanagement.ExecutionStatusCompleted),
						SubmittedBy:   to.Ptr("System"),
						SubmittedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-08-03T09:03:58.5710244Z"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.ExportExecutionListResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ExportExecutionListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ExportRunHistoryGetBySubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestGenerateDetailedCostReport_CreateOperation(t *testing.T) {
	// From example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/GenerateDetailedCostReportByBillingAccountLegacyAndBillingPeriod.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GenerateDetailedCostReportByBillingAccountLegacyAndBillingPeriod"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcostmanagement.NewGenerateDetailedCostReportClient(cred, &options)
	poller, err := client.BeginCreateOperation(ctx,
		"providers/Microsoft.Billing/billingAccounts/12345",
		armcostmanagement.GenerateDetailedCostReportDefinition{
			BillingPeriod: to.Ptr("202008"),
			Metric:        to.Ptr(armcostmanagement.GenerateDetailedCostReportMetricTypeActualCost),
		},
		&armcostmanagement.GenerateDetailedCostReportClientBeginCreateOperationOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/GenerateDetailedCostReportByBillingAccountLegacyAndBillingPeriod.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/GenerateDetailedCostReportByBillingAccountLegacyAndBillingPeriod.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcostmanagement.GenerateDetailedCostReportOperationResult{
			Name: to.Ptr("00000000-0000-0000-0000-000000000000"),
			Type: to.Ptr("Microsoft.Consumption/operationResult"),
			ID:   to.Ptr("subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.CostManagement/operationResults/00000000-0000-0000-0000-000000000000"),
			Properties: &armcostmanagement.DownloadURL{
				DownloadURL: to.Ptr("https://ccmreportstorageeastus.blob.core.windows.net/armreports/20201207/00000000-0000-0000-0000-000000000000?sv=2020-05-31&sr=b&sig=abcd"),
				ValidTill:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-08T05:55:59.4394737Z"); return t }()),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.GenerateDetailedCostReportOperationResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.GenerateDetailedCostReportOperationResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/GenerateDetailedCostReportByBillingAccountLegacyAndBillingPeriod.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/GenerateDetailedCostReportByBillingProfileAndInvoiceId.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GenerateDetailedCostReportByBillingProfileAndInvoiceId"},
	})
	client = armcostmanagement.NewGenerateDetailedCostReportClient(cred, &options)
	poller, err = client.BeginCreateOperation(ctx,
		"providers/Microsoft.Billing/billingAccounts/12345:6789/billingProfiles/13579",
		armcostmanagement.GenerateDetailedCostReportDefinition{
			InvoiceID: to.Ptr("M1234567"),
			Metric:    to.Ptr(armcostmanagement.GenerateDetailedCostReportMetricTypeActualCost),
		},
		&armcostmanagement.GenerateDetailedCostReportClientBeginCreateOperationOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/GenerateDetailedCostReportByBillingProfileAndInvoiceId.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/GenerateDetailedCostReportByBillingProfileAndInvoiceId.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcostmanagement.GenerateDetailedCostReportOperationResult{
			Name: to.Ptr("00000000-0000-0000-0000-000000000000"),
			Type: to.Ptr("Microsoft.Consumption/operationResult"),
			ID:   to.Ptr("subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.CostManagement/operationResults/00000000-0000-0000-0000-000000000000"),
			Properties: &armcostmanagement.DownloadURL{
				DownloadURL: to.Ptr("https://ccmreportstorageeastus.blob.core.windows.net/armreports/20201207/00000000-0000-0000-0000-000000000000?sv=2020-05-31&sr=b&sig=abcd"),
				ValidTill:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-08T05:55:59.4394737Z"); return t }()),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.GenerateDetailedCostReportOperationResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.GenerateDetailedCostReportOperationResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/GenerateDetailedCostReportByBillingProfileAndInvoiceId.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/GenerateDetailedCostReportByBillingProfileAndInvoiceIdAndCustomerId.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GenerateDetailedCostReportByBillingProfileAndInvoiceIdAndCustomerId"},
	})
	client = armcostmanagement.NewGenerateDetailedCostReportClient(cred, &options)
	poller, err = client.BeginCreateOperation(ctx,
		"providers/Microsoft.Billing/billingAccounts/12345:6789/billingProfiles/13579",
		armcostmanagement.GenerateDetailedCostReportDefinition{
			CustomerID: to.Ptr("456789"),
			InvoiceID:  to.Ptr("M1234567"),
			Metric:     to.Ptr(armcostmanagement.GenerateDetailedCostReportMetricTypeActualCost),
		},
		&armcostmanagement.GenerateDetailedCostReportClientBeginCreateOperationOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/GenerateDetailedCostReportByBillingProfileAndInvoiceIdAndCustomerId.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/GenerateDetailedCostReportByBillingProfileAndInvoiceIdAndCustomerId.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcostmanagement.GenerateDetailedCostReportOperationResult{
			Name: to.Ptr("00000000-0000-0000-0000-000000000000"),
			Type: to.Ptr("Microsoft.Consumption/operationResult"),
			ID:   to.Ptr("subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.CostManagement/operationResults/00000000-0000-0000-0000-000000000000"),
			Properties: &armcostmanagement.DownloadURL{
				DownloadURL: to.Ptr("https://ccmreportstorageeastus.blob.core.windows.net/armreports/20201207/00000000-0000-0000-0000-000000000000?sv=2020-05-31&sr=b&sig=abcd"),
				ValidTill:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-08T05:55:59.4394737Z"); return t }()),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.GenerateDetailedCostReportOperationResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.GenerateDetailedCostReportOperationResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/GenerateDetailedCostReportByBillingProfileAndInvoiceIdAndCustomerId.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/GenerateDetailedCostReportByCustomerAndTimePeriod.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GenerateDetailedCostReportByCustomerAndTimePeriod"},
	})
	client = armcostmanagement.NewGenerateDetailedCostReportClient(cred, &options)
	poller, err = client.BeginCreateOperation(ctx,
		"providers/Microsoft.Billing/billingAccounts/12345:6789/customers/13579",
		armcostmanagement.GenerateDetailedCostReportDefinition{
			Metric: to.Ptr(armcostmanagement.GenerateDetailedCostReportMetricTypeActualCost),
			TimePeriod: &armcostmanagement.GenerateDetailedCostReportTimePeriod{
				End:   to.Ptr("2020-03-15"),
				Start: to.Ptr("2020-03-01"),
			},
		},
		&armcostmanagement.GenerateDetailedCostReportClientBeginCreateOperationOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/GenerateDetailedCostReportByCustomerAndTimePeriod.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/GenerateDetailedCostReportByCustomerAndTimePeriod.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcostmanagement.GenerateDetailedCostReportOperationResult{
			Name: to.Ptr("00000000-0000-0000-0000-000000000000"),
			Type: to.Ptr("Microsoft.Consumption/operationResult"),
			ID:   to.Ptr("subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.CostManagement/operationResults/00000000-0000-0000-0000-000000000000"),
			Properties: &armcostmanagement.DownloadURL{
				DownloadURL: to.Ptr("https://ccmreportstorageeastus.blob.core.windows.net/armreports/20201207/00000000-0000-0000-0000-000000000000?sv=2020-05-31&sr=b&sig=abcd"),
				ValidTill:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-08T05:55:59.4394737Z"); return t }()),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.GenerateDetailedCostReportOperationResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.GenerateDetailedCostReportOperationResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/GenerateDetailedCostReportByCustomerAndTimePeriod.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/GenerateDetailedCostReportBySubscriptionAndTimePeriod.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GenerateDetailedCostReportBySubscriptionAndTimePeriod"},
	})
	client = armcostmanagement.NewGenerateDetailedCostReportClient(cred, &options)
	poller, err = client.BeginCreateOperation(ctx,
		"subscriptions/00000000-0000-0000-0000-000000000000",
		armcostmanagement.GenerateDetailedCostReportDefinition{
			Metric: to.Ptr(armcostmanagement.GenerateDetailedCostReportMetricTypeActualCost),
			TimePeriod: &armcostmanagement.GenerateDetailedCostReportTimePeriod{
				End:   to.Ptr("2020-03-15"),
				Start: to.Ptr("2020-03-01"),
			},
		},
		&armcostmanagement.GenerateDetailedCostReportClientBeginCreateOperationOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/GenerateDetailedCostReportBySubscriptionAndTimePeriod.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/GenerateDetailedCostReportBySubscriptionAndTimePeriod.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcostmanagement.GenerateDetailedCostReportOperationResult{
			Name: to.Ptr("00000000-0000-0000-0000-000000000000"),
			Type: to.Ptr("Microsoft.Consumption/operationResult"),
			ID:   to.Ptr("subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.CostManagement/operationResults/00000000-0000-0000-0000-000000000000"),
			Properties: &armcostmanagement.DownloadURL{
				DownloadURL: to.Ptr("https://ccmreportstorageeastus.blob.core.windows.net/armreports/20201207/00000000-0000-0000-0000-000000000000?sv=2020-05-31&sr=b&sig=abcd"),
				ValidTill:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-08T05:55:59.4394737Z"); return t }()),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.GenerateDetailedCostReportOperationResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.GenerateDetailedCostReportOperationResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/GenerateDetailedCostReportBySubscriptionAndTimePeriod.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestGenerateDetailedCostReportOperationResults_Get(t *testing.T) {
	// From example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/GenerateDetailedCostReportOperationResultsBySubscriptionScope.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get details of the operation result"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcostmanagement.NewGenerateDetailedCostReportOperationResultsClient(cred, &options)
	res, err := client.Get(ctx,
		"00000000-0000-0000-0000-000000000000",
		"subscriptions/00000000-0000-0000-0000-000000000000",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/GenerateDetailedCostReportOperationResultsBySubscriptionScope.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcostmanagement.GenerateDetailedCostReportOperationResult{
			Name: to.Ptr("00000000-0000-0000-0000-000000000000"),
			Type: to.Ptr("Microsoft.Consumption/operationResult"),
			ID:   to.Ptr("subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.CostManagement/operationResults/00000000-0000-0000-0000-000000000000"),
			Properties: &armcostmanagement.DownloadURL{
				DownloadURL: to.Ptr("https://ccmreportstorageeastus.blob.core.windows.net/armreports/20201207/00000000-0000-0000-0000-000000000000?sv=2020-05-31&sr=b&sig=abcd"),
				ValidTill:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-08T05:55:59.4394737Z"); return t }()),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.GenerateDetailedCostReportOperationResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.GenerateDetailedCostReportOperationResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/GenerateDetailedCostReportOperationResultsBySubscriptionScope.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestGenerateDetailedCostReportOperationStatus_Get(t *testing.T) {
	// From example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/GenerateDetailedCostReportOperationStatusBySubscriptionScope.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get details of the operation status"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcostmanagement.NewGenerateDetailedCostReportOperationStatusClient(cred, &options)
	res, err := client.Get(ctx,
		"00000000-0000-0000-0000-000000000000",
		"subscriptions/00000000-0000-0000-0000-000000000000",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/GenerateDetailedCostReportOperationStatusBySubscriptionScope.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcostmanagement.GenerateDetailedCostReportOperationStatuses{
			Name: to.Ptr("00000000-0000-0000-0000-000000000000"),
			Type: to.Ptr("Microsoft.Consumption/operationStatus"),
			Error: &armcostmanagement.ErrorDetails{
				Code: to.Ptr("0"),
			},
			ID: to.Ptr("subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.CostManagement/operationStatus/00000000-0000-0000-0000-000000000000"),
			Properties: &armcostmanagement.DownloadURL{
				DownloadURL: to.Ptr("https://ccmreportstorageeastus.blob.core.windows.net/armreports/20201207/00000000-0000-0000-0000-000000000000?sv=2020-05-31&sr=b&sig=abcd"),
				ValidTill:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-08T05:55:59.4394737Z"); return t }()),
			},
			Status: &armcostmanagement.Status{},
		}
		if !reflect.DeepEqual(exampleRes, res.GenerateDetailedCostReportOperationStatuses) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.GenerateDetailedCostReportOperationStatuses)
			t.Fatalf("Mock response is not equal to example response for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/GenerateDetailedCostReportOperationStatusBySubscriptionScope.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestViews_List(t *testing.T) {
	// From example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/PrivateViewList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateViewList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcostmanagement.NewViewsClient(cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/PrivateViewList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcostmanagement.ViewListResult{
			Value: []*armcostmanagement.View{
				{
					Name: to.Ptr("swaggerExample"),
					Type: to.Ptr("Microsoft.CostManagement/Views"),
					ETag: to.Ptr("\"1d4ff9fe66f1d10\""),
					ID:   to.Ptr("/providers/Microsoft.CostManagement/views/swaggerExample"),
					Properties: &armcostmanagement.ViewProperties{
						Accumulated: to.Ptr(armcostmanagement.AccumulatedTypeTrue),
						Chart:       to.Ptr(armcostmanagement.ChartTypeTable),
						DisplayName: to.Ptr("swagger Example"),
						Kpis: []*armcostmanagement.KpiProperties{
							{
								Type:    to.Ptr(armcostmanagement.KpiTypeForecast),
								Enabled: to.Ptr(true),
							},
							{
								Type:    to.Ptr(armcostmanagement.KpiTypeBudget),
								Enabled: to.Ptr(true),
								ID:      to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MYDEVTESTRG/providers/Microsoft.Consumption/budgets/swaggerDemo"),
							}},
						Metric: to.Ptr(armcostmanagement.MetricTypeActualCost),
						Pivots: []*armcostmanagement.PivotProperties{
							{
								Name: to.Ptr("ServiceName"),
								Type: to.Ptr(armcostmanagement.PivotTypeDimension),
							},
							{
								Name: to.Ptr("MeterCategory"),
								Type: to.Ptr(armcostmanagement.PivotTypeDimension),
							},
							{
								Name: to.Ptr("swaggerTagKey"),
								Type: to.Ptr(armcostmanagement.PivotTypeTagKey),
							}},
						Query: &armcostmanagement.ReportConfigDefinition{
							Type: to.Ptr(armcostmanagement.ReportTypeUsage),
							DataSet: &armcostmanagement.ReportConfigDataset{
								Aggregation: map[string]*armcostmanagement.ReportConfigAggregation{
									"totalCost": {
										Name:     to.Ptr("PreTaxCost"),
										Function: to.Ptr(armcostmanagement.FunctionTypeSum),
									},
								},
								Granularity: to.Ptr(armcostmanagement.ReportGranularityTypeDaily),
								Grouping:    []*armcostmanagement.ReportConfigGrouping{},
								Sorting: []*armcostmanagement.ReportConfigSorting{
									{
										Name:      to.Ptr("UsageDate"),
										Direction: to.Ptr(armcostmanagement.ReportConfigSortingDirectionAscending),
									}},
							},
							Timeframe: to.Ptr(armcostmanagement.ReportTimeframeTypeMonthToDate),
						},
						Scope: to.Ptr(""),
					},
				},
				{
					Name: to.Ptr("swaggerExample2"),
					Type: to.Ptr("Microsoft.CostManagement/Views"),
					ETag: to.Ptr("\"1d4ffa5a9c2430c\""),
					ID:   to.Ptr("/providers/Microsoft.CostManagement/views/swaggerExample2"),
					Properties: &armcostmanagement.ViewProperties{
						Accumulated: to.Ptr(armcostmanagement.AccumulatedTypeTrue),
						Chart:       to.Ptr(armcostmanagement.ChartTypeGroupedColumn),
						DisplayName: to.Ptr("swagger Example 2"),
						Kpis: []*armcostmanagement.KpiProperties{
							{
								Type:    to.Ptr(armcostmanagement.KpiTypeForecast),
								Enabled: to.Ptr(true),
							},
							{
								Type:    to.Ptr(armcostmanagement.KpiTypeBudget),
								Enabled: to.Ptr(true),
								ID:      to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MYDEVTESTRG/providers/Microsoft.Consumption/budgets/swaggerDemo"),
							}},
						Metric: to.Ptr(armcostmanagement.MetricTypeActualCost),
						Pivots: []*armcostmanagement.PivotProperties{
							{
								Name: to.Ptr("ServiceName"),
								Type: to.Ptr(armcostmanagement.PivotTypeDimension),
							},
							{
								Name: to.Ptr("MeterCategory"),
								Type: to.Ptr(armcostmanagement.PivotTypeDimension),
							},
							{
								Name: to.Ptr("swaggerTagKey"),
								Type: to.Ptr(armcostmanagement.PivotTypeTagKey),
							}},
						Query: &armcostmanagement.ReportConfigDefinition{
							Type: to.Ptr(armcostmanagement.ReportTypeUsage),
							DataSet: &armcostmanagement.ReportConfigDataset{
								Aggregation: map[string]*armcostmanagement.ReportConfigAggregation{
									"totalCost": {
										Name:     to.Ptr("PreTaxCost"),
										Function: to.Ptr(armcostmanagement.FunctionTypeSum),
									},
								},
								Granularity: to.Ptr(armcostmanagement.ReportGranularityTypeDaily),
								Grouping:    []*armcostmanagement.ReportConfigGrouping{},
								Sorting: []*armcostmanagement.ReportConfigSorting{
									{
										Name:      to.Ptr("UsageDate"),
										Direction: to.Ptr(armcostmanagement.ReportConfigSortingDirectionAscending),
									}},
							},
							Timeframe: to.Ptr(armcostmanagement.ReportTimeframeType("LastMonthToDate")),
						},
						Scope: to.Ptr(""),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ViewListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ViewListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/PrivateViewList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestViews_ListByScope(t *testing.T) {
	// From example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ViewListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ResourceGroupViewList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcostmanagement.NewViewsClient(cred, &options)
	pager := client.ListByScope("subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MYDEVTESTRG",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ViewListByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcostmanagement.ViewListResult{
			Value: []*armcostmanagement.View{
				{
					Name: to.Ptr("swaggerExample"),
					Type: to.Ptr("Microsoft.CostManagement/Views"),
					ETag: to.Ptr("\"1d4ff9fe66f1d10\""),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MYDEVTESTRG/providers/Microsoft.CostManagement/views/swaggerExample"),
					Properties: &armcostmanagement.ViewProperties{
						Accumulated: to.Ptr(armcostmanagement.AccumulatedTypeTrue),
						Chart:       to.Ptr(armcostmanagement.ChartTypeTable),
						DisplayName: to.Ptr("swagger Example"),
						Kpis: []*armcostmanagement.KpiProperties{
							{
								Type:    to.Ptr(armcostmanagement.KpiTypeForecast),
								Enabled: to.Ptr(true),
							},
							{
								Type:    to.Ptr(armcostmanagement.KpiTypeBudget),
								Enabled: to.Ptr(true),
								ID:      to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MYDEVTESTRG/providers/Microsoft.Consumption/budgets/swaggerDemo"),
							}},
						Metric: to.Ptr(armcostmanagement.MetricTypeActualCost),
						Pivots: []*armcostmanagement.PivotProperties{
							{
								Name: to.Ptr("ServiceName"),
								Type: to.Ptr(armcostmanagement.PivotTypeDimension),
							},
							{
								Name: to.Ptr("MeterCategory"),
								Type: to.Ptr(armcostmanagement.PivotTypeDimension),
							},
							{
								Name: to.Ptr("swaggerTagKey"),
								Type: to.Ptr(armcostmanagement.PivotTypeTagKey),
							}},
						Query: &armcostmanagement.ReportConfigDefinition{
							Type: to.Ptr(armcostmanagement.ReportTypeUsage),
							DataSet: &armcostmanagement.ReportConfigDataset{
								Aggregation: map[string]*armcostmanagement.ReportConfigAggregation{
									"totalCost": {
										Name:     to.Ptr("PreTaxCost"),
										Function: to.Ptr(armcostmanagement.FunctionTypeSum),
									},
								},
								Granularity: to.Ptr(armcostmanagement.ReportGranularityTypeDaily),
								Grouping:    []*armcostmanagement.ReportConfigGrouping{},
								Sorting: []*armcostmanagement.ReportConfigSorting{
									{
										Name:      to.Ptr("UsageDate"),
										Direction: to.Ptr(armcostmanagement.ReportConfigSortingDirectionAscending),
									}},
							},
							Timeframe: to.Ptr(armcostmanagement.ReportTimeframeTypeMonthToDate),
						},
						Scope: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MYDEVTESTRG"),
					},
				},
				{
					Name: to.Ptr("swaggerExample2"),
					Type: to.Ptr("Microsoft.CostManagement/Views"),
					ETag: to.Ptr("\"1d4ffa5a9c2430c\""),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MYDEVTESTRG/providers/Microsoft.CostManagement/views/swaggerExample2"),
					Properties: &armcostmanagement.ViewProperties{
						Accumulated: to.Ptr(armcostmanagement.AccumulatedTypeTrue),
						Chart:       to.Ptr(armcostmanagement.ChartTypeGroupedColumn),
						DisplayName: to.Ptr("swagger Example 2"),
						Kpis: []*armcostmanagement.KpiProperties{
							{
								Type:    to.Ptr(armcostmanagement.KpiTypeForecast),
								Enabled: to.Ptr(true),
							},
							{
								Type:    to.Ptr(armcostmanagement.KpiTypeBudget),
								Enabled: to.Ptr(true),
								ID:      to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MYDEVTESTRG/providers/Microsoft.Consumption/budgets/swaggerDemo"),
							}},
						Metric: to.Ptr(armcostmanagement.MetricTypeActualCost),
						Pivots: []*armcostmanagement.PivotProperties{
							{
								Name: to.Ptr("ServiceName"),
								Type: to.Ptr(armcostmanagement.PivotTypeDimension),
							},
							{
								Name: to.Ptr("MeterCategory"),
								Type: to.Ptr(armcostmanagement.PivotTypeDimension),
							},
							{
								Name: to.Ptr("swaggerTagKey"),
								Type: to.Ptr(armcostmanagement.PivotTypeTagKey),
							}},
						Query: &armcostmanagement.ReportConfigDefinition{
							Type: to.Ptr(armcostmanagement.ReportTypeUsage),
							DataSet: &armcostmanagement.ReportConfigDataset{
								Aggregation: map[string]*armcostmanagement.ReportConfigAggregation{
									"totalCost": {
										Name:     to.Ptr("PreTaxCost"),
										Function: to.Ptr(armcostmanagement.FunctionTypeSum),
									},
								},
								Granularity: to.Ptr(armcostmanagement.ReportGranularityTypeDaily),
								Grouping:    []*armcostmanagement.ReportConfigGrouping{},
								Sorting: []*armcostmanagement.ReportConfigSorting{
									{
										Name:      to.Ptr("UsageDate"),
										Direction: to.Ptr(armcostmanagement.ReportConfigSortingDirectionAscending),
									}},
							},
							Timeframe: to.Ptr(armcostmanagement.ReportTimeframeType("LastMonthToDate")),
						},
						Scope: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MYDEVTESTRG"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ViewListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ViewListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ViewListByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestViews_Get(t *testing.T) {
	// From example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/PrivateView.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PrivateView"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcostmanagement.NewViewsClient(cred, &options)
	res, err := client.Get(ctx,
		"swaggerExample",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/PrivateView.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcostmanagement.View{
			Name: to.Ptr("swaggerExample"),
			Type: to.Ptr("Microsoft.CostManagement/Views"),
			ETag: to.Ptr("\"1d4ff9fe66f1d10\""),
			ID:   to.Ptr("/providers/Microsoft.CostManagement/views/swaggerExample"),
			Properties: &armcostmanagement.ViewProperties{
				Accumulated: to.Ptr(armcostmanagement.AccumulatedTypeTrue),
				Chart:       to.Ptr(armcostmanagement.ChartTypeTable),
				DisplayName: to.Ptr("swagger Example"),
				Kpis: []*armcostmanagement.KpiProperties{
					{
						Type:    to.Ptr(armcostmanagement.KpiTypeForecast),
						Enabled: to.Ptr(true),
					},
					{
						Type:    to.Ptr(armcostmanagement.KpiTypeBudget),
						Enabled: to.Ptr(true),
						ID:      to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MYDEVTESTRG/providers/Microsoft.Consumption/budgets/swaggerDemo"),
					}},
				Metric: to.Ptr(armcostmanagement.MetricTypeActualCost),
				Pivots: []*armcostmanagement.PivotProperties{
					{
						Name: to.Ptr("ServiceName"),
						Type: to.Ptr(armcostmanagement.PivotTypeDimension),
					},
					{
						Name: to.Ptr("MeterCategory"),
						Type: to.Ptr(armcostmanagement.PivotTypeDimension),
					},
					{
						Name: to.Ptr("swaggerTagKey"),
						Type: to.Ptr(armcostmanagement.PivotTypeTagKey),
					}},
				Query: &armcostmanagement.ReportConfigDefinition{
					Type: to.Ptr(armcostmanagement.ReportTypeUsage),
					DataSet: &armcostmanagement.ReportConfigDataset{
						Aggregation: map[string]*armcostmanagement.ReportConfigAggregation{
							"totalCost": {
								Name:     to.Ptr("PreTaxCost"),
								Function: to.Ptr(armcostmanagement.FunctionTypeSum),
							},
						},
						Granularity: to.Ptr(armcostmanagement.ReportGranularityTypeDaily),
						Grouping:    []*armcostmanagement.ReportConfigGrouping{},
						Sorting: []*armcostmanagement.ReportConfigSorting{
							{
								Name:      to.Ptr("UsageDate"),
								Direction: to.Ptr(armcostmanagement.ReportConfigSortingDirectionAscending),
							}},
					},
					Timeframe: to.Ptr(armcostmanagement.ReportTimeframeTypeMonthToDate),
				},
				Scope: to.Ptr(""),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.View) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.View)
			t.Fatalf("Mock response is not equal to example response for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/PrivateView.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestViews_CreateOrUpdate(t *testing.T) {
	// From example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/PrivateViewCreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CreateOrUpdatePrivateView"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcostmanagement.NewViewsClient(cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"swaggerExample",
		armcostmanagement.View{
			ETag: to.Ptr("\"1d4ff9fe66f1d10\""),
			Properties: &armcostmanagement.ViewProperties{
				Accumulated: to.Ptr(armcostmanagement.AccumulatedTypeTrue),
				Chart:       to.Ptr(armcostmanagement.ChartTypeTable),
				DisplayName: to.Ptr("swagger Example"),
				Kpis: []*armcostmanagement.KpiProperties{
					{
						Type:    to.Ptr(armcostmanagement.KpiTypeForecast),
						Enabled: to.Ptr(true),
					},
					{
						Type:    to.Ptr(armcostmanagement.KpiTypeBudget),
						Enabled: to.Ptr(true),
						ID:      to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MYDEVTESTRG/providers/Microsoft.Consumption/budgets/swaggerDemo"),
					}},
				Metric: to.Ptr(armcostmanagement.MetricTypeActualCost),
				Pivots: []*armcostmanagement.PivotProperties{
					{
						Name: to.Ptr("ServiceName"),
						Type: to.Ptr(armcostmanagement.PivotTypeDimension),
					},
					{
						Name: to.Ptr("MeterCategory"),
						Type: to.Ptr(armcostmanagement.PivotTypeDimension),
					},
					{
						Name: to.Ptr("swaggerTagKey"),
						Type: to.Ptr(armcostmanagement.PivotTypeTagKey),
					}},
				Query: &armcostmanagement.ReportConfigDefinition{
					Type: to.Ptr(armcostmanagement.ReportTypeUsage),
					DataSet: &armcostmanagement.ReportConfigDataset{
						Aggregation: map[string]*armcostmanagement.ReportConfigAggregation{
							"totalCost": {
								Name:     to.Ptr("PreTaxCost"),
								Function: to.Ptr(armcostmanagement.FunctionTypeSum),
							},
						},
						Granularity: to.Ptr(armcostmanagement.ReportGranularityTypeDaily),
						Grouping:    []*armcostmanagement.ReportConfigGrouping{},
						Sorting: []*armcostmanagement.ReportConfigSorting{
							{
								Name:      to.Ptr("UsageDate"),
								Direction: to.Ptr(armcostmanagement.ReportConfigSortingDirectionAscending),
							}},
					},
					Timeframe: to.Ptr(armcostmanagement.ReportTimeframeTypeMonthToDate),
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/PrivateViewCreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcostmanagement.View{
			Name: to.Ptr("swaggerExample"),
			Type: to.Ptr("Microsoft.CostManagement/Views"),
			ETag: to.Ptr("\"1d4ffa5a9c2430c\""),
			ID:   to.Ptr("/providers/Microsoft.CostManagement/views/swaggerExample"),
			Properties: &armcostmanagement.ViewProperties{
				Accumulated: to.Ptr(armcostmanagement.AccumulatedTypeTrue),
				Chart:       to.Ptr(armcostmanagement.ChartTypeTable),
				DisplayName: to.Ptr("swagger Example"),
				Kpis: []*armcostmanagement.KpiProperties{
					{
						Type:    to.Ptr(armcostmanagement.KpiTypeForecast),
						Enabled: to.Ptr(true),
					},
					{
						Type:    to.Ptr(armcostmanagement.KpiTypeBudget),
						Enabled: to.Ptr(true),
						ID:      to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MYDEVTESTRG/providers/Microsoft.Consumption/budgets/swaggerDemo"),
					}},
				Metric: to.Ptr(armcostmanagement.MetricTypeActualCost),
				Pivots: []*armcostmanagement.PivotProperties{
					{
						Name: to.Ptr("ServiceName"),
						Type: to.Ptr(armcostmanagement.PivotTypeDimension),
					},
					{
						Name: to.Ptr("MeterCategory"),
						Type: to.Ptr(armcostmanagement.PivotTypeDimension),
					},
					{
						Name: to.Ptr("swaggerTagKey"),
						Type: to.Ptr(armcostmanagement.PivotTypeTagKey),
					}},
				Query: &armcostmanagement.ReportConfigDefinition{
					Type: to.Ptr(armcostmanagement.ReportTypeUsage),
					DataSet: &armcostmanagement.ReportConfigDataset{
						Aggregation: map[string]*armcostmanagement.ReportConfigAggregation{
							"totalCost": {
								Name:     to.Ptr("PreTaxCost"),
								Function: to.Ptr(armcostmanagement.FunctionTypeSum),
							},
						},
						Granularity: to.Ptr(armcostmanagement.ReportGranularityTypeDaily),
						Grouping:    []*armcostmanagement.ReportConfigGrouping{},
						Sorting: []*armcostmanagement.ReportConfigSorting{
							{
								Name:      to.Ptr("UsageDate"),
								Direction: to.Ptr(armcostmanagement.ReportConfigSortingDirectionAscending),
							}},
					},
					Timeframe: to.Ptr(armcostmanagement.ReportTimeframeTypeMonthToDate),
				},
				Scope: to.Ptr(""),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.View) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.View)
			t.Fatalf("Mock response is not equal to example response for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/PrivateViewCreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestViews_Delete(t *testing.T) {
	// From example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/PrivateViewDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DeletePrivateView"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcostmanagement.NewViewsClient(cred, &options)
	_, err := client.Delete(ctx,
		"TestView",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/PrivateViewDelete.json: %v", err)
	}
}

func TestViews_GetByScope(t *testing.T) {
	// From example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ViewByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ResourceGroupView"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcostmanagement.NewViewsClient(cred, &options)
	res, err := client.GetByScope(ctx,
		"subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MYDEVTESTRG",
		"swaggerExample",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ViewByResourceGroup.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcostmanagement.View{
			Name: to.Ptr("swaggerExample"),
			Type: to.Ptr("Microsoft.CostManagement/Views"),
			ETag: to.Ptr("\"1d4ff9fe66f1d10\""),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MYDEVTESTRG/providers/Microsoft.CostManagement/views/swaggerExample"),
			Properties: &armcostmanagement.ViewProperties{
				Accumulated: to.Ptr(armcostmanagement.AccumulatedTypeTrue),
				Chart:       to.Ptr(armcostmanagement.ChartTypeTable),
				DisplayName: to.Ptr("swagger Example"),
				Kpis: []*armcostmanagement.KpiProperties{
					{
						Type:    to.Ptr(armcostmanagement.KpiTypeForecast),
						Enabled: to.Ptr(true),
					},
					{
						Type:    to.Ptr(armcostmanagement.KpiTypeBudget),
						Enabled: to.Ptr(true),
						ID:      to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MYDEVTESTRG/providers/Microsoft.Consumption/budgets/swaggerDemo"),
					}},
				Metric: to.Ptr(armcostmanagement.MetricTypeActualCost),
				Pivots: []*armcostmanagement.PivotProperties{
					{
						Name: to.Ptr("ServiceName"),
						Type: to.Ptr(armcostmanagement.PivotTypeDimension),
					},
					{
						Name: to.Ptr("MeterCategory"),
						Type: to.Ptr(armcostmanagement.PivotTypeDimension),
					},
					{
						Name: to.Ptr("swaggerTagKey"),
						Type: to.Ptr(armcostmanagement.PivotTypeTagKey),
					}},
				Query: &armcostmanagement.ReportConfigDefinition{
					Type: to.Ptr(armcostmanagement.ReportTypeUsage),
					DataSet: &armcostmanagement.ReportConfigDataset{
						Aggregation: map[string]*armcostmanagement.ReportConfigAggregation{
							"totalCost": {
								Name:     to.Ptr("PreTaxCost"),
								Function: to.Ptr(armcostmanagement.FunctionTypeSum),
							},
						},
						Granularity: to.Ptr(armcostmanagement.ReportGranularityTypeDaily),
						Grouping:    []*armcostmanagement.ReportConfigGrouping{},
						Sorting: []*armcostmanagement.ReportConfigSorting{
							{
								Name:      to.Ptr("UsageDate"),
								Direction: to.Ptr(armcostmanagement.ReportConfigSortingDirectionAscending),
							}},
					},
					Timeframe: to.Ptr(armcostmanagement.ReportTimeframeTypeMonthToDate),
				},
				Scope: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MYDEVTESTRG"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.View) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.View)
			t.Fatalf("Mock response is not equal to example response for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ViewByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestViews_CreateOrUpdateByScope(t *testing.T) {
	// From example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ViewCreateOrUpdateByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ResourceGroupCreateOrUpdateView"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcostmanagement.NewViewsClient(cred, &options)
	res, err := client.CreateOrUpdateByScope(ctx,
		"subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MYDEVTESTRG",
		"swaggerExample",
		armcostmanagement.View{
			ETag: to.Ptr("\"1d4ff9fe66f1d10\""),
			Properties: &armcostmanagement.ViewProperties{
				Accumulated: to.Ptr(armcostmanagement.AccumulatedTypeTrue),
				Chart:       to.Ptr(armcostmanagement.ChartTypeTable),
				DisplayName: to.Ptr("swagger Example"),
				Kpis: []*armcostmanagement.KpiProperties{
					{
						Type:    to.Ptr(armcostmanagement.KpiTypeForecast),
						Enabled: to.Ptr(true),
					},
					{
						Type:    to.Ptr(armcostmanagement.KpiTypeBudget),
						Enabled: to.Ptr(true),
						ID:      to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MYDEVTESTRG/providers/Microsoft.Consumption/budgets/swaggerDemo"),
					}},
				Metric: to.Ptr(armcostmanagement.MetricTypeActualCost),
				Pivots: []*armcostmanagement.PivotProperties{
					{
						Name: to.Ptr("ServiceName"),
						Type: to.Ptr(armcostmanagement.PivotTypeDimension),
					},
					{
						Name: to.Ptr("MeterCategory"),
						Type: to.Ptr(armcostmanagement.PivotTypeDimension),
					},
					{
						Name: to.Ptr("swaggerTagKey"),
						Type: to.Ptr(armcostmanagement.PivotTypeTagKey),
					}},
				Query: &armcostmanagement.ReportConfigDefinition{
					Type: to.Ptr(armcostmanagement.ReportTypeUsage),
					DataSet: &armcostmanagement.ReportConfigDataset{
						Aggregation: map[string]*armcostmanagement.ReportConfigAggregation{
							"totalCost": {
								Name:     to.Ptr("PreTaxCost"),
								Function: to.Ptr(armcostmanagement.FunctionTypeSum),
							},
						},
						Granularity: to.Ptr(armcostmanagement.ReportGranularityTypeDaily),
						Grouping:    []*armcostmanagement.ReportConfigGrouping{},
						Sorting: []*armcostmanagement.ReportConfigSorting{
							{
								Name:      to.Ptr("UsageDate"),
								Direction: to.Ptr(armcostmanagement.ReportConfigSortingDirectionAscending),
							}},
					},
					Timeframe: to.Ptr(armcostmanagement.ReportTimeframeTypeMonthToDate),
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ViewCreateOrUpdateByResourceGroup.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcostmanagement.View{
			Name: to.Ptr("swaggerExample"),
			Type: to.Ptr("Microsoft.CostManagement/Views"),
			ETag: to.Ptr("\"1d4ffa5a9c2430c\""),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MYDEVTESTRG/providers/Microsoft.CostManagement/views/swaggerExample"),
			Properties: &armcostmanagement.ViewProperties{
				Accumulated: to.Ptr(armcostmanagement.AccumulatedTypeTrue),
				Chart:       to.Ptr(armcostmanagement.ChartTypeTable),
				DisplayName: to.Ptr("swagger Example"),
				Kpis: []*armcostmanagement.KpiProperties{
					{
						Type:    to.Ptr(armcostmanagement.KpiTypeForecast),
						Enabled: to.Ptr(true),
					},
					{
						Type:    to.Ptr(armcostmanagement.KpiTypeBudget),
						Enabled: to.Ptr(true),
						ID:      to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MYDEVTESTRG/providers/Microsoft.Consumption/budgets/swaggerDemo"),
					}},
				Metric: to.Ptr(armcostmanagement.MetricTypeActualCost),
				Pivots: []*armcostmanagement.PivotProperties{
					{
						Name: to.Ptr("ServiceName"),
						Type: to.Ptr(armcostmanagement.PivotTypeDimension),
					},
					{
						Name: to.Ptr("MeterCategory"),
						Type: to.Ptr(armcostmanagement.PivotTypeDimension),
					},
					{
						Name: to.Ptr("swaggerTagKey"),
						Type: to.Ptr(armcostmanagement.PivotTypeTagKey),
					}},
				Query: &armcostmanagement.ReportConfigDefinition{
					Type: to.Ptr(armcostmanagement.ReportTypeUsage),
					DataSet: &armcostmanagement.ReportConfigDataset{
						Aggregation: map[string]*armcostmanagement.ReportConfigAggregation{
							"totalCost": {
								Name:     to.Ptr("PreTaxCost"),
								Function: to.Ptr(armcostmanagement.FunctionTypeSum),
							},
						},
						Granularity: to.Ptr(armcostmanagement.ReportGranularityTypeDaily),
						Grouping:    []*armcostmanagement.ReportConfigGrouping{},
						Sorting: []*armcostmanagement.ReportConfigSorting{
							{
								Name:      to.Ptr("UsageDate"),
								Direction: to.Ptr(armcostmanagement.ReportConfigSortingDirectionAscending),
							}},
					},
					Timeframe: to.Ptr(armcostmanagement.ReportTimeframeTypeMonthToDate),
				},
				Scope: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MYDEVTESTRG"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.View) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.View)
			t.Fatalf("Mock response is not equal to example response for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ViewCreateOrUpdateByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestViews_DeleteByScope(t *testing.T) {
	// From example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ViewDeleteByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ResourceGroupDeleteView"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcostmanagement.NewViewsClient(cred, &options)
	_, err := client.DeleteByScope(ctx,
		"subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MYDEVTESTRG",
		"TestView",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ViewDeleteByResourceGroup.json: %v", err)
	}
}

func TestAlerts_List(t *testing.T) {
	// From example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/BillingAccountAlerts.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"BillingAccountAlerts"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcostmanagement.NewAlertsClient(cred, &options)
	res, err := client.List(ctx,
		"providers/Microsoft.Billing/billingAccounts/12345:6789",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/BillingAccountAlerts.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcostmanagement.AlertsResult{
			Value: []*armcostmanagement.Alert{
				{
					Name: to.Ptr("00000000-0000-0000-0000-000000000000"),
					Type: to.Ptr("Microsoft.CostManagement/alerts"),
					ID:   to.Ptr("providers/Microsoft.Billing/billingAccounts/12345:6789/providers/Microsoft.CostManagement/alerts/00000000-0000-0000-0000-000000000000"),
					Properties: &armcostmanagement.AlertProperties{
						Description:  to.Ptr(""),
						CloseTime:    to.Ptr("0001-01-01T00:00:00"),
						CostEntityID: to.Ptr("budget1"),
						CreationTime: to.Ptr("2020-04-27T11:07:52.7143901Z"),
						Definition: &armcostmanagement.AlertPropertiesDefinition{
							Type:     to.Ptr(armcostmanagement.AlertTypeBudget),
							Category: to.Ptr(armcostmanagement.AlertCategoryCost),
							Criteria: to.Ptr(armcostmanagement.AlertCriteriaCostThresholdExceeded),
						},
						ModificationTime:       to.Ptr("2020-04-28T11:06:02.8999373Z"),
						Source:                 to.Ptr(armcostmanagement.AlertSourcePreset),
						Status:                 to.Ptr(armcostmanagement.AlertStatusActive),
						StatusModificationTime: to.Ptr("0001-01-01T00:00:00"),
						Details: &armcostmanagement.AlertPropertiesDetails{
							Amount: to.Ptr[float64](200000),
							ContactEmails: []*string{
								to.Ptr("1234@contoso.com")},
							ContactGroups:       []*string{},
							ContactRoles:        []*string{},
							CurrentSpend:        to.Ptr[float64](161000.12),
							MeterFilter:         []interface{}{},
							Operator:            to.Ptr(armcostmanagement.AlertOperatorGreaterThan),
							PeriodStartDate:     to.Ptr("2020-03-01T00:00:00Z"),
							ResourceFilter:      []interface{}{},
							ResourceGroupFilter: []interface{}{},
							TagFilter:           map[string]interface{}{},
							Threshold:           to.Ptr[float64](0.8),
							TimeGrainType:       to.Ptr(armcostmanagement.AlertTimeGrainTypeQuarterly),
							TriggeredBy:         to.Ptr("00000000-0000-0000-0000-000000000000_1_01"),
							Unit:                to.Ptr("USD"),
						},
					},
				},
				{
					Name: to.Ptr("11111111-1111-1111-111111111111"),
					Type: to.Ptr("Microsoft.CostManagement/alerts"),
					ID:   to.Ptr("providers/Microsoft.Billing/billingAccounts/12345:6789/providers/Microsoft.CostManagement/alerts/11111111-1111-1111-111111111111"),
					Properties: &armcostmanagement.AlertProperties{
						Description:  to.Ptr(""),
						CloseTime:    to.Ptr("0001-01-01T00:00:00"),
						CostEntityID: to.Ptr("budget1"),
						CreationTime: to.Ptr("2019-06-24T05:51:52.8713179Z"),
						Definition: &armcostmanagement.AlertPropertiesDefinition{
							Type:     to.Ptr(armcostmanagement.AlertTypeBudget),
							Category: to.Ptr(armcostmanagement.AlertCategoryCost),
							Criteria: to.Ptr(armcostmanagement.AlertCriteriaCostThresholdExceeded),
						},
						ModificationTime:       to.Ptr("2019-08-31T17:51:55.1808807Z"),
						Source:                 to.Ptr(armcostmanagement.AlertSourcePreset),
						Status:                 to.Ptr(armcostmanagement.AlertStatusActive),
						StatusModificationTime: to.Ptr("0001-01-01T00:00:00"),
						Details: &armcostmanagement.AlertPropertiesDetails{
							Amount: to.Ptr[float64](200000),
							ContactEmails: []*string{
								to.Ptr("1234@contoso.com")},
							ContactGroups:       []*string{},
							ContactRoles:        []*string{},
							CurrentSpend:        to.Ptr[float64](171000.32),
							MeterFilter:         []interface{}{},
							Operator:            to.Ptr(armcostmanagement.AlertOperatorGreaterThan),
							PeriodStartDate:     to.Ptr("2020-03-01T00:00:00Z"),
							ResourceFilter:      []interface{}{},
							ResourceGroupFilter: []interface{}{},
							TagFilter:           map[string]interface{}{},
							Threshold:           to.Ptr[float64](0.8),
							TimeGrainType:       to.Ptr(armcostmanagement.AlertTimeGrainTypeQuarterly),
							TriggeredBy:         to.Ptr("11111111-1111-1111-111111111111_1_01"),
							Unit:                to.Ptr("USD"),
						},
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.AlertsResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AlertsResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/BillingAccountAlerts.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/BillingProfileAlerts.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"BillingProfileAlerts"},
	})
	client = armcostmanagement.NewAlertsClient(cred, &options)
	res, err = client.List(ctx,
		"providers/Microsoft.Billing/billingAccounts/12345:6789/billingProfiles/13579",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/BillingProfileAlerts.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcostmanagement.AlertsResult{
			Value: []*armcostmanagement.Alert{
				{
					Name: to.Ptr("00000000-0000-0000-0000-000000000000"),
					Type: to.Ptr("Microsoft.CostManagement/alerts"),
					ID:   to.Ptr("providers/Microsoft.Billing/billingAccounts/12345:6789/billingProfiles/13579/providers/Microsoft.CostManagement/alerts/00000000-0000-0000-0000-000000000000"),
					Properties: &armcostmanagement.AlertProperties{
						Description:  to.Ptr(""),
						CloseTime:    to.Ptr("0001-01-01T00:00:00"),
						CostEntityID: to.Ptr("budget1"),
						CreationTime: to.Ptr("2020-04-27T11:07:52.7143901Z"),
						Definition: &armcostmanagement.AlertPropertiesDefinition{
							Type:     to.Ptr(armcostmanagement.AlertTypeBudget),
							Category: to.Ptr(armcostmanagement.AlertCategoryCost),
							Criteria: to.Ptr(armcostmanagement.AlertCriteriaCostThresholdExceeded),
						},
						ModificationTime:       to.Ptr("2020-04-28T11:06:02.8999373Z"),
						Source:                 to.Ptr(armcostmanagement.AlertSourcePreset),
						Status:                 to.Ptr(armcostmanagement.AlertStatusActive),
						StatusModificationTime: to.Ptr("0001-01-01T00:00:00"),
						Details: &armcostmanagement.AlertPropertiesDetails{
							Amount: to.Ptr[float64](200000),
							ContactEmails: []*string{
								to.Ptr("1234@contoso.com")},
							ContactGroups:       []*string{},
							ContactRoles:        []*string{},
							CurrentSpend:        to.Ptr[float64](161000.12),
							MeterFilter:         []interface{}{},
							Operator:            to.Ptr(armcostmanagement.AlertOperatorGreaterThan),
							PeriodStartDate:     to.Ptr("2020-03-01T00:00:00Z"),
							ResourceFilter:      []interface{}{},
							ResourceGroupFilter: []interface{}{},
							TagFilter:           map[string]interface{}{},
							Threshold:           to.Ptr[float64](0.8),
							TimeGrainType:       to.Ptr(armcostmanagement.AlertTimeGrainTypeQuarterly),
							TriggeredBy:         to.Ptr("00000000-0000-0000-0000-000000000000_1_01"),
							Unit:                to.Ptr("USD"),
						},
					},
				},
				{
					Name: to.Ptr("11111111-1111-1111-111111111111"),
					Type: to.Ptr("Microsoft.CostManagement/alerts"),
					ID:   to.Ptr("providers/Microsoft.Billing/billingAccounts/12345:6789/billingProfiles/13579/providers/Microsoft.CostManagement/alerts/11111111-1111-1111-111111111111"),
					Properties: &armcostmanagement.AlertProperties{
						Description:  to.Ptr(""),
						CloseTime:    to.Ptr("0001-01-01T00:00:00"),
						CostEntityID: to.Ptr("budget1"),
						CreationTime: to.Ptr("2019-06-24T05:51:52.8713179Z"),
						Definition: &armcostmanagement.AlertPropertiesDefinition{
							Type:     to.Ptr(armcostmanagement.AlertTypeBudget),
							Category: to.Ptr(armcostmanagement.AlertCategoryCost),
							Criteria: to.Ptr(armcostmanagement.AlertCriteriaCostThresholdExceeded),
						},
						ModificationTime:       to.Ptr("2019-08-31T17:51:55.1808807Z"),
						Source:                 to.Ptr(armcostmanagement.AlertSourcePreset),
						Status:                 to.Ptr(armcostmanagement.AlertStatusActive),
						StatusModificationTime: to.Ptr("0001-01-01T00:00:00"),
						Details: &armcostmanagement.AlertPropertiesDetails{
							Amount: to.Ptr[float64](200000),
							ContactEmails: []*string{
								to.Ptr("1234@contoso.com")},
							ContactGroups:       []*string{},
							ContactRoles:        []*string{},
							CurrentSpend:        to.Ptr[float64](171000.32),
							MeterFilter:         []interface{}{},
							Operator:            to.Ptr(armcostmanagement.AlertOperatorGreaterThan),
							PeriodStartDate:     to.Ptr("2020-03-01T00:00:00Z"),
							ResourceFilter:      []interface{}{},
							ResourceGroupFilter: []interface{}{},
							TagFilter:           map[string]interface{}{},
							Threshold:           to.Ptr[float64](0.8),
							TimeGrainType:       to.Ptr(armcostmanagement.AlertTimeGrainTypeQuarterly),
							TriggeredBy:         to.Ptr("11111111-1111-1111-111111111111_1_01"),
							Unit:                to.Ptr("USD"),
						},
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.AlertsResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AlertsResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/BillingProfileAlerts.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/DepartmentAlerts.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DepartmentAlerts"},
	})
	client = armcostmanagement.NewAlertsClient(cred, &options)
	res, err = client.List(ctx,
		"providers/Microsoft.Billing/billingAccounts/12345:6789/departments/123",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/DepartmentAlerts.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcostmanagement.AlertsResult{
			Value: []*armcostmanagement.Alert{
				{
					Name: to.Ptr("00000000-0000-0000-0000-000000000000"),
					Type: to.Ptr("Microsoft.CostManagement/alerts"),
					ID:   to.Ptr("providers/Microsoft.Billing/billingAccounts/12345:6789/departments/123/providers/Microsoft.CostManagement/alerts/00000000-0000-0000-0000-000000000000"),
					Properties: &armcostmanagement.AlertProperties{
						Description:  to.Ptr(""),
						CloseTime:    to.Ptr("0001-01-01T00:00:00"),
						CostEntityID: to.Ptr("budget1"),
						CreationTime: to.Ptr("2020-04-27T11:07:52.7143901Z"),
						Definition: &armcostmanagement.AlertPropertiesDefinition{
							Type:     to.Ptr(armcostmanagement.AlertTypeBudget),
							Category: to.Ptr(armcostmanagement.AlertCategoryCost),
							Criteria: to.Ptr(armcostmanagement.AlertCriteriaCostThresholdExceeded),
						},
						ModificationTime:       to.Ptr("2020-04-28T11:06:02.8999373Z"),
						Source:                 to.Ptr(armcostmanagement.AlertSourcePreset),
						Status:                 to.Ptr(armcostmanagement.AlertStatusActive),
						StatusModificationTime: to.Ptr("0001-01-01T00:00:00"),
						Details: &armcostmanagement.AlertPropertiesDetails{
							Amount: to.Ptr[float64](200000),
							ContactEmails: []*string{
								to.Ptr("1234@contoso.com")},
							ContactGroups:       []*string{},
							ContactRoles:        []*string{},
							CurrentSpend:        to.Ptr[float64](161000.12),
							MeterFilter:         []interface{}{},
							Operator:            to.Ptr(armcostmanagement.AlertOperatorGreaterThan),
							PeriodStartDate:     to.Ptr("2020-03-01T00:00:00Z"),
							ResourceFilter:      []interface{}{},
							ResourceGroupFilter: []interface{}{},
							TagFilter:           map[string]interface{}{},
							Threshold:           to.Ptr[float64](0.8),
							TimeGrainType:       to.Ptr(armcostmanagement.AlertTimeGrainTypeQuarterly),
							TriggeredBy:         to.Ptr("00000000-0000-0000-0000-000000000000_1_01"),
							Unit:                to.Ptr("USD"),
						},
					},
				},
				{
					Name: to.Ptr("11111111-1111-1111-111111111111"),
					Type: to.Ptr("Microsoft.CostManagement/alerts"),
					ID:   to.Ptr("providers/Microsoft.Billing/billingAccounts/12345:6789/departments/123/providers/Microsoft.CostManagement/alerts/11111111-1111-1111-111111111111"),
					Properties: &armcostmanagement.AlertProperties{
						Description:  to.Ptr(""),
						CloseTime:    to.Ptr("0001-01-01T00:00:00"),
						CostEntityID: to.Ptr("budget1"),
						CreationTime: to.Ptr("2019-06-24T05:51:52.8713179Z"),
						Definition: &armcostmanagement.AlertPropertiesDefinition{
							Type:     to.Ptr(armcostmanagement.AlertTypeBudget),
							Category: to.Ptr(armcostmanagement.AlertCategoryCost),
							Criteria: to.Ptr(armcostmanagement.AlertCriteriaCostThresholdExceeded),
						},
						ModificationTime:       to.Ptr("2019-08-31T17:51:55.1808807Z"),
						Source:                 to.Ptr(armcostmanagement.AlertSourcePreset),
						Status:                 to.Ptr(armcostmanagement.AlertStatusActive),
						StatusModificationTime: to.Ptr("0001-01-01T00:00:00"),
						Details: &armcostmanagement.AlertPropertiesDetails{
							Amount: to.Ptr[float64](200000),
							ContactEmails: []*string{
								to.Ptr("1234@contoso.com")},
							ContactGroups:       []*string{},
							ContactRoles:        []*string{},
							CurrentSpend:        to.Ptr[float64](171000.32),
							MeterFilter:         []interface{}{},
							Operator:            to.Ptr(armcostmanagement.AlertOperatorGreaterThan),
							PeriodStartDate:     to.Ptr("2020-03-01T00:00:00Z"),
							ResourceFilter:      []interface{}{},
							ResourceGroupFilter: []interface{}{},
							TagFilter:           map[string]interface{}{},
							Threshold:           to.Ptr[float64](0.8),
							TimeGrainType:       to.Ptr(armcostmanagement.AlertTimeGrainTypeQuarterly),
							TriggeredBy:         to.Ptr("11111111-1111-1111-111111111111_1_01"),
							Unit:                to.Ptr("USD"),
						},
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.AlertsResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AlertsResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/DepartmentAlerts.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/EnrollmentAccountAlerts.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"EnrollmentAccountAlerts"},
	})
	client = armcostmanagement.NewAlertsClient(cred, &options)
	res, err = client.List(ctx,
		"providers/Microsoft.Billing/billingAccounts/12345:6789/enrollmentAccounts/456",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/EnrollmentAccountAlerts.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcostmanagement.AlertsResult{
			Value: []*armcostmanagement.Alert{
				{
					Name: to.Ptr("00000000-0000-0000-0000-000000000000"),
					Type: to.Ptr("Microsoft.CostManagement/alerts"),
					ID:   to.Ptr("providers/Microsoft.Billing/billingAccounts/12345:6789/enrollmentAccounts/456/providers/Microsoft.CostManagement/alerts/00000000-0000-0000-0000-000000000000"),
					Properties: &armcostmanagement.AlertProperties{
						Description:  to.Ptr(""),
						CloseTime:    to.Ptr("0001-01-01T00:00:00"),
						CostEntityID: to.Ptr("budget1"),
						CreationTime: to.Ptr("2020-04-27T11:07:52.7143901Z"),
						Definition: &armcostmanagement.AlertPropertiesDefinition{
							Type:     to.Ptr(armcostmanagement.AlertTypeBudget),
							Category: to.Ptr(armcostmanagement.AlertCategoryCost),
							Criteria: to.Ptr(armcostmanagement.AlertCriteriaCostThresholdExceeded),
						},
						ModificationTime:       to.Ptr("2020-04-28T11:06:02.8999373Z"),
						Source:                 to.Ptr(armcostmanagement.AlertSourcePreset),
						Status:                 to.Ptr(armcostmanagement.AlertStatusActive),
						StatusModificationTime: to.Ptr("0001-01-01T00:00:00"),
						Details: &armcostmanagement.AlertPropertiesDetails{
							Amount: to.Ptr[float64](200000),
							ContactEmails: []*string{
								to.Ptr("1234@contoso.com")},
							ContactGroups:       []*string{},
							ContactRoles:        []*string{},
							CurrentSpend:        to.Ptr[float64](161000.12),
							MeterFilter:         []interface{}{},
							Operator:            to.Ptr(armcostmanagement.AlertOperatorGreaterThan),
							PeriodStartDate:     to.Ptr("2020-03-01T00:00:00Z"),
							ResourceFilter:      []interface{}{},
							ResourceGroupFilter: []interface{}{},
							TagFilter:           map[string]interface{}{},
							Threshold:           to.Ptr[float64](0.8),
							TimeGrainType:       to.Ptr(armcostmanagement.AlertTimeGrainTypeQuarterly),
							TriggeredBy:         to.Ptr("00000000-0000-0000-0000-000000000000_1_01"),
							Unit:                to.Ptr("USD"),
						},
					},
				},
				{
					Name: to.Ptr("11111111-1111-1111-111111111111"),
					Type: to.Ptr("Microsoft.CostManagement/alerts"),
					ID:   to.Ptr("providers/Microsoft.Billing/billingAccounts/12345:6789/enrollmentAccounts/456/providers/Microsoft.CostManagement/alerts/11111111-1111-1111-111111111111"),
					Properties: &armcostmanagement.AlertProperties{
						Description:  to.Ptr(""),
						CloseTime:    to.Ptr("0001-01-01T00:00:00"),
						CostEntityID: to.Ptr("budget1"),
						CreationTime: to.Ptr("2019-06-24T05:51:52.8713179Z"),
						Definition: &armcostmanagement.AlertPropertiesDefinition{
							Type:     to.Ptr(armcostmanagement.AlertTypeBudget),
							Category: to.Ptr(armcostmanagement.AlertCategoryCost),
							Criteria: to.Ptr(armcostmanagement.AlertCriteriaCostThresholdExceeded),
						},
						ModificationTime:       to.Ptr("2019-08-31T17:51:55.1808807Z"),
						Source:                 to.Ptr(armcostmanagement.AlertSourcePreset),
						Status:                 to.Ptr(armcostmanagement.AlertStatusActive),
						StatusModificationTime: to.Ptr("0001-01-01T00:00:00"),
						Details: &armcostmanagement.AlertPropertiesDetails{
							Amount: to.Ptr[float64](200000),
							ContactEmails: []*string{
								to.Ptr("1234@contoso.com")},
							ContactGroups:       []*string{},
							ContactRoles:        []*string{},
							CurrentSpend:        to.Ptr[float64](171000.32),
							MeterFilter:         []interface{}{},
							Operator:            to.Ptr(armcostmanagement.AlertOperatorGreaterThan),
							PeriodStartDate:     to.Ptr("2020-03-01T00:00:00Z"),
							ResourceFilter:      []interface{}{},
							ResourceGroupFilter: []interface{}{},
							TagFilter:           map[string]interface{}{},
							Threshold:           to.Ptr[float64](0.8),
							TimeGrainType:       to.Ptr(armcostmanagement.AlertTimeGrainTypeQuarterly),
							TriggeredBy:         to.Ptr("11111111-1111-1111-111111111111_1_01"),
							Unit:                to.Ptr("USD"),
						},
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.AlertsResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AlertsResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/EnrollmentAccountAlerts.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/InvoiceSectionAlerts.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"InvoiceSectionAlerts"},
	})
	client = armcostmanagement.NewAlertsClient(cred, &options)
	res, err = client.List(ctx,
		"providers/Microsoft.Billing/billingAccounts/12345:6789/billingProfiles/13579/invoiceSections/9876",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/InvoiceSectionAlerts.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcostmanagement.AlertsResult{
			Value: []*armcostmanagement.Alert{
				{
					Name: to.Ptr("00000000-0000-0000-0000-000000000000"),
					Type: to.Ptr("Microsoft.CostManagement/alerts"),
					ID:   to.Ptr("providers/Microsoft.Billing/billingAccounts/12345:6789/billingProfiles/13579/invoiceSections/9876/providers/Microsoft.CostManagement/alerts/00000000-0000-0000-0000-000000000000"),
					Properties: &armcostmanagement.AlertProperties{
						Description:  to.Ptr(""),
						CloseTime:    to.Ptr("0001-01-01T00:00:00"),
						CostEntityID: to.Ptr("budget1"),
						CreationTime: to.Ptr("2020-04-27T11:07:52.7143901Z"),
						Definition: &armcostmanagement.AlertPropertiesDefinition{
							Type:     to.Ptr(armcostmanagement.AlertTypeBudget),
							Category: to.Ptr(armcostmanagement.AlertCategoryCost),
							Criteria: to.Ptr(armcostmanagement.AlertCriteriaCostThresholdExceeded),
						},
						ModificationTime:       to.Ptr("2020-04-28T11:06:02.8999373Z"),
						Source:                 to.Ptr(armcostmanagement.AlertSourcePreset),
						Status:                 to.Ptr(armcostmanagement.AlertStatusActive),
						StatusModificationTime: to.Ptr("0001-01-01T00:00:00"),
						Details: &armcostmanagement.AlertPropertiesDetails{
							Amount: to.Ptr[float64](200000),
							ContactEmails: []*string{
								to.Ptr("1234@contoso.com")},
							ContactGroups:       []*string{},
							ContactRoles:        []*string{},
							CurrentSpend:        to.Ptr[float64](161000.12),
							MeterFilter:         []interface{}{},
							Operator:            to.Ptr(armcostmanagement.AlertOperatorGreaterThan),
							PeriodStartDate:     to.Ptr("2020-03-01T00:00:00Z"),
							ResourceFilter:      []interface{}{},
							ResourceGroupFilter: []interface{}{},
							TagFilter:           map[string]interface{}{},
							Threshold:           to.Ptr[float64](0.8),
							TimeGrainType:       to.Ptr(armcostmanagement.AlertTimeGrainTypeQuarterly),
							TriggeredBy:         to.Ptr("00000000-0000-0000-0000-000000000000_1_01"),
							Unit:                to.Ptr("USD"),
						},
					},
				},
				{
					Name: to.Ptr("11111111-1111-1111-111111111111"),
					Type: to.Ptr("Microsoft.CostManagement/alerts"),
					ID:   to.Ptr("providers/Microsoft.Billing/billingAccounts/12345:6789/billingProfiles/13579/invoiceSections/9876/providers/Microsoft.CostManagement/alerts/11111111-1111-1111-111111111111"),
					Properties: &armcostmanagement.AlertProperties{
						Description:  to.Ptr(""),
						CloseTime:    to.Ptr("0001-01-01T00:00:00"),
						CostEntityID: to.Ptr("budget1"),
						CreationTime: to.Ptr("2019-06-24T05:51:52.8713179Z"),
						Definition: &armcostmanagement.AlertPropertiesDefinition{
							Type:     to.Ptr(armcostmanagement.AlertTypeBudget),
							Category: to.Ptr(armcostmanagement.AlertCategoryCost),
							Criteria: to.Ptr(armcostmanagement.AlertCriteriaCostThresholdExceeded),
						},
						ModificationTime:       to.Ptr("2019-08-31T17:51:55.1808807Z"),
						Source:                 to.Ptr(armcostmanagement.AlertSourcePreset),
						Status:                 to.Ptr(armcostmanagement.AlertStatusActive),
						StatusModificationTime: to.Ptr("0001-01-01T00:00:00"),
						Details: &armcostmanagement.AlertPropertiesDetails{
							Amount: to.Ptr[float64](200000),
							ContactEmails: []*string{
								to.Ptr("1234@contoso.com")},
							ContactGroups:       []*string{},
							ContactRoles:        []*string{},
							CurrentSpend:        to.Ptr[float64](171000.32),
							MeterFilter:         []interface{}{},
							Operator:            to.Ptr(armcostmanagement.AlertOperatorGreaterThan),
							PeriodStartDate:     to.Ptr("2020-03-01T00:00:00Z"),
							ResourceFilter:      []interface{}{},
							ResourceGroupFilter: []interface{}{},
							TagFilter:           map[string]interface{}{},
							Threshold:           to.Ptr[float64](0.8),
							TimeGrainType:       to.Ptr(armcostmanagement.AlertTimeGrainTypeQuarterly),
							TriggeredBy:         to.Ptr("11111111-1111-1111-111111111111_1_01"),
							Unit:                to.Ptr("USD"),
						},
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.AlertsResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AlertsResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/InvoiceSectionAlerts.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ResourceGroupAlerts.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ResourceGroupAlerts"},
	})
	client = armcostmanagement.NewAlertsClient(cred, &options)
	res, err = client.List(ctx,
		"subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/ScreenSharingTest-peer",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ResourceGroupAlerts.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcostmanagement.AlertsResult{
			Value: []*armcostmanagement.Alert{
				{
					Name: to.Ptr("00000000-0000-0000-0000-000000000000"),
					Type: to.Ptr("Microsoft.CostManagement/alerts"),
					ID:   to.Ptr("subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/ScreenSharingTest-peer/providers/Microsoft.CostManagement/alerts/00000000-0000-0000-0000-000000000000"),
					Properties: &armcostmanagement.AlertProperties{
						Description:  to.Ptr(""),
						CloseTime:    to.Ptr("0001-01-01T00:00:00"),
						CostEntityID: to.Ptr("budget1"),
						CreationTime: to.Ptr("2020-04-27T11:07:52.7143901Z"),
						Definition: &armcostmanagement.AlertPropertiesDefinition{
							Type:     to.Ptr(armcostmanagement.AlertTypeBudget),
							Category: to.Ptr(armcostmanagement.AlertCategoryCost),
							Criteria: to.Ptr(armcostmanagement.AlertCriteriaCostThresholdExceeded),
						},
						ModificationTime:       to.Ptr("2020-04-28T11:06:02.8999373Z"),
						Source:                 to.Ptr(armcostmanagement.AlertSourcePreset),
						Status:                 to.Ptr(armcostmanagement.AlertStatusActive),
						StatusModificationTime: to.Ptr("0001-01-01T00:00:00"),
						Details: &armcostmanagement.AlertPropertiesDetails{
							Amount: to.Ptr[float64](200000),
							ContactEmails: []*string{
								to.Ptr("1234@contoso.com")},
							ContactGroups:       []*string{},
							ContactRoles:        []*string{},
							CurrentSpend:        to.Ptr[float64](161000.12),
							MeterFilter:         []interface{}{},
							Operator:            to.Ptr(armcostmanagement.AlertOperatorGreaterThan),
							PeriodStartDate:     to.Ptr("2020-03-01T00:00:00Z"),
							ResourceFilter:      []interface{}{},
							ResourceGroupFilter: []interface{}{},
							TagFilter:           map[string]interface{}{},
							Threshold:           to.Ptr[float64](0.8),
							TimeGrainType:       to.Ptr(armcostmanagement.AlertTimeGrainTypeQuarterly),
							TriggeredBy:         to.Ptr("00000000-0000-0000-0000-000000000000_1_01"),
							Unit:                to.Ptr("USD"),
						},
					},
				},
				{
					Name: to.Ptr("11111111-1111-1111-111111111111"),
					Type: to.Ptr("Microsoft.CostManagement/alerts"),
					ID:   to.Ptr("subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/ScreenSharingTest-peer/providers/Microsoft.CostManagement/alerts/11111111-1111-1111-111111111111"),
					Properties: &armcostmanagement.AlertProperties{
						Description:  to.Ptr(""),
						CloseTime:    to.Ptr("0001-01-01T00:00:00"),
						CostEntityID: to.Ptr("budget1"),
						CreationTime: to.Ptr("2019-06-24T05:51:52.8713179Z"),
						Definition: &armcostmanagement.AlertPropertiesDefinition{
							Type:     to.Ptr(armcostmanagement.AlertTypeBudget),
							Category: to.Ptr(armcostmanagement.AlertCategoryCost),
							Criteria: to.Ptr(armcostmanagement.AlertCriteriaCostThresholdExceeded),
						},
						ModificationTime:       to.Ptr("2019-08-31T17:51:55.1808807Z"),
						Source:                 to.Ptr(armcostmanagement.AlertSourcePreset),
						Status:                 to.Ptr(armcostmanagement.AlertStatusActive),
						StatusModificationTime: to.Ptr("0001-01-01T00:00:00"),
						Details: &armcostmanagement.AlertPropertiesDetails{
							Amount: to.Ptr[float64](200000),
							ContactEmails: []*string{
								to.Ptr("1234@contoso.com")},
							ContactGroups:       []*string{},
							ContactRoles:        []*string{},
							CurrentSpend:        to.Ptr[float64](171000.32),
							MeterFilter:         []interface{}{},
							Operator:            to.Ptr(armcostmanagement.AlertOperatorGreaterThan),
							PeriodStartDate:     to.Ptr("2020-03-01T00:00:00Z"),
							ResourceFilter:      []interface{}{},
							ResourceGroupFilter: []interface{}{},
							TagFilter:           map[string]interface{}{},
							Threshold:           to.Ptr[float64](0.8),
							TimeGrainType:       to.Ptr(armcostmanagement.AlertTimeGrainTypeQuarterly),
							TriggeredBy:         to.Ptr("11111111-1111-1111-111111111111_1_01"),
							Unit:                to.Ptr("USD"),
						},
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.AlertsResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AlertsResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ResourceGroupAlerts.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/SubscriptionAlerts.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SubscriptionAlerts"},
	})
	client = armcostmanagement.NewAlertsClient(cred, &options)
	res, err = client.List(ctx,
		"subscriptions/00000000-0000-0000-0000-000000000000",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/SubscriptionAlerts.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcostmanagement.AlertsResult{
			Value: []*armcostmanagement.Alert{
				{
					Name: to.Ptr("00000000-0000-0000-0000-000000000000"),
					Type: to.Ptr("Microsoft.CostManagement/alerts"),
					ID:   to.Ptr("subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.CostManagement/alerts/00000000-0000-0000-0000-000000000000"),
					Properties: &armcostmanagement.AlertProperties{
						Description:  to.Ptr(""),
						CloseTime:    to.Ptr("0001-01-01T00:00:00"),
						CostEntityID: to.Ptr("budget1"),
						CreationTime: to.Ptr("2020-04-27T11:07:52.7143901Z"),
						Definition: &armcostmanagement.AlertPropertiesDefinition{
							Type:     to.Ptr(armcostmanagement.AlertTypeBudget),
							Category: to.Ptr(armcostmanagement.AlertCategoryCost),
							Criteria: to.Ptr(armcostmanagement.AlertCriteriaCostThresholdExceeded),
						},
						ModificationTime:       to.Ptr("2020-04-28T11:06:02.8999373Z"),
						Source:                 to.Ptr(armcostmanagement.AlertSourcePreset),
						Status:                 to.Ptr(armcostmanagement.AlertStatusActive),
						StatusModificationTime: to.Ptr("0001-01-01T00:00:00"),
						Details: &armcostmanagement.AlertPropertiesDetails{
							Amount: to.Ptr[float64](200000),
							ContactEmails: []*string{
								to.Ptr("1234@contoso.com")},
							ContactGroups:       []*string{},
							ContactRoles:        []*string{},
							CurrentSpend:        to.Ptr[float64](161000.12),
							MeterFilter:         []interface{}{},
							Operator:            to.Ptr(armcostmanagement.AlertOperatorGreaterThan),
							PeriodStartDate:     to.Ptr("2020-03-01T00:00:00Z"),
							ResourceFilter:      []interface{}{},
							ResourceGroupFilter: []interface{}{},
							TagFilter:           map[string]interface{}{},
							Threshold:           to.Ptr[float64](0.8),
							TimeGrainType:       to.Ptr(armcostmanagement.AlertTimeGrainTypeQuarterly),
							TriggeredBy:         to.Ptr("00000000-0000-0000-0000-000000000000_1_01"),
							Unit:                to.Ptr("USD"),
						},
					},
				},
				{
					Name: to.Ptr("11111111-1111-1111-111111111111"),
					Type: to.Ptr("Microsoft.CostManagement/alerts"),
					ID:   to.Ptr("subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.CostManagement/alerts/11111111-1111-1111-111111111111"),
					Properties: &armcostmanagement.AlertProperties{
						Description:  to.Ptr(""),
						CloseTime:    to.Ptr("0001-01-01T00:00:00"),
						CostEntityID: to.Ptr("budget1"),
						CreationTime: to.Ptr("2019-06-24T05:51:52.8713179Z"),
						Definition: &armcostmanagement.AlertPropertiesDefinition{
							Type:     to.Ptr(armcostmanagement.AlertTypeBudget),
							Category: to.Ptr(armcostmanagement.AlertCategoryCost),
							Criteria: to.Ptr(armcostmanagement.AlertCriteriaCostThresholdExceeded),
						},
						ModificationTime:       to.Ptr("2019-08-31T17:51:55.1808807Z"),
						Source:                 to.Ptr(armcostmanagement.AlertSourcePreset),
						Status:                 to.Ptr(armcostmanagement.AlertStatusActive),
						StatusModificationTime: to.Ptr("0001-01-01T00:00:00"),
						Details: &armcostmanagement.AlertPropertiesDetails{
							Amount: to.Ptr[float64](200000),
							ContactEmails: []*string{
								to.Ptr("1234@contoso.com")},
							ContactGroups:       []*string{},
							ContactRoles:        []*string{},
							CurrentSpend:        to.Ptr[float64](171000.32),
							MeterFilter:         []interface{}{},
							Operator:            to.Ptr(armcostmanagement.AlertOperatorGreaterThan),
							PeriodStartDate:     to.Ptr("2020-03-01T00:00:00Z"),
							ResourceFilter:      []interface{}{},
							ResourceGroupFilter: []interface{}{},
							TagFilter:           map[string]interface{}{},
							Threshold:           to.Ptr[float64](0.8),
							TimeGrainType:       to.Ptr(armcostmanagement.AlertTimeGrainTypeQuarterly),
							TriggeredBy:         to.Ptr("11111111-1111-1111-111111111111_1_01"),
							Unit:                to.Ptr("USD"),
						},
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.AlertsResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AlertsResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/SubscriptionAlerts.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAlerts_Get(t *testing.T) {
	// From example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/SingleResourceGroupAlert.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SingleResourceGroupAlerts"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcostmanagement.NewAlertsClient(cred, &options)
	res, err := client.Get(ctx,
		"subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/ScreenSharingTest-peer",
		"22222222-2222-2222-2222-222222222222",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/SingleResourceGroupAlert.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcostmanagement.Alert{
			Name: to.Ptr("22222222-2222-2222-2222-222222222222"),
			Type: to.Ptr("Microsoft.CostManagement/alerts"),
			ID:   to.Ptr("subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/ScreenSharingTest-peer/providers/Microsoft.CostManagement/alerts/22222222-2222-2222-2222-222222222222"),
			Properties: &armcostmanagement.AlertProperties{
				Description:  to.Ptr(""),
				CloseTime:    to.Ptr("0001-01-01T00:00:00"),
				CostEntityID: to.Ptr("budget1"),
				CreationTime: to.Ptr("2020-04-27T11:07:52.7143901Z"),
				Definition: &armcostmanagement.AlertPropertiesDefinition{
					Type:     to.Ptr(armcostmanagement.AlertTypeBudget),
					Category: to.Ptr(armcostmanagement.AlertCategoryCost),
					Criteria: to.Ptr(armcostmanagement.AlertCriteriaCostThresholdExceeded),
				},
				ModificationTime:       to.Ptr("2020-04-28T11:06:02.8999373Z"),
				Source:                 to.Ptr(armcostmanagement.AlertSourcePreset),
				Status:                 to.Ptr(armcostmanagement.AlertStatusActive),
				StatusModificationTime: to.Ptr("0001-01-01T00:00:00"),
				Details: &armcostmanagement.AlertPropertiesDetails{
					Amount: to.Ptr[float64](200000),
					ContactEmails: []*string{
						to.Ptr("1234@contoso.com")},
					ContactGroups:       []*string{},
					ContactRoles:        []*string{},
					CurrentSpend:        to.Ptr[float64](161000.12),
					MeterFilter:         []interface{}{},
					Operator:            to.Ptr(armcostmanagement.AlertOperatorGreaterThan),
					PeriodStartDate:     to.Ptr("2020-03-01T00:00:00Z"),
					ResourceFilter:      []interface{}{},
					ResourceGroupFilter: []interface{}{},
					TagFilter:           map[string]interface{}{},
					Threshold:           to.Ptr[float64](0.8),
					TimeGrainType:       to.Ptr(armcostmanagement.AlertTimeGrainTypeQuarterly),
					TriggeredBy:         to.Ptr("22222222-2222-2222-2222-222222222222_1_01"),
					Unit:                to.Ptr("USD"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Alert) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Alert)
			t.Fatalf("Mock response is not equal to example response for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/SingleResourceGroupAlert.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/SingleSubscriptionAlert.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SingleSubscriptionAlerts"},
	})
	client = armcostmanagement.NewAlertsClient(cred, &options)
	res, err = client.Get(ctx,
		"subscriptions/00000000-0000-0000-0000-000000000000",
		"22222222-2222-2222-2222-222222222222",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/SingleSubscriptionAlert.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcostmanagement.Alert{
			Name: to.Ptr("22222222-2222-2222-2222-222222222222"),
			Type: to.Ptr("Microsoft.CostManagement/alerts"),
			ID:   to.Ptr("subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.CostManagement/alerts/22222222-2222-2222-2222-222222222222"),
			Properties: &armcostmanagement.AlertProperties{
				Description:  to.Ptr(""),
				CloseTime:    to.Ptr("0001-01-01T00:00:00"),
				CostEntityID: to.Ptr("budget1"),
				CreationTime: to.Ptr("2020-04-27T11:07:52.7143901Z"),
				Definition: &armcostmanagement.AlertPropertiesDefinition{
					Type:     to.Ptr(armcostmanagement.AlertTypeBudget),
					Category: to.Ptr(armcostmanagement.AlertCategoryCost),
					Criteria: to.Ptr(armcostmanagement.AlertCriteriaCostThresholdExceeded),
				},
				ModificationTime:       to.Ptr("2020-04-28T11:06:02.8999373Z"),
				Source:                 to.Ptr(armcostmanagement.AlertSourcePreset),
				Status:                 to.Ptr(armcostmanagement.AlertStatusActive),
				StatusModificationTime: to.Ptr("0001-01-01T00:00:00"),
				Details: &armcostmanagement.AlertPropertiesDetails{
					Amount: to.Ptr[float64](200000),
					ContactEmails: []*string{
						to.Ptr("1234@contoso.com")},
					ContactGroups:       []*string{},
					ContactRoles:        []*string{},
					CurrentSpend:        to.Ptr[float64](161000.12),
					MeterFilter:         []interface{}{},
					Operator:            to.Ptr(armcostmanagement.AlertOperatorGreaterThan),
					PeriodStartDate:     to.Ptr("2020-03-01T00:00:00Z"),
					ResourceFilter:      []interface{}{},
					ResourceGroupFilter: []interface{}{},
					TagFilter:           map[string]interface{}{},
					Threshold:           to.Ptr[float64](0.8),
					TimeGrainType:       to.Ptr(armcostmanagement.AlertTimeGrainTypeQuarterly),
					TriggeredBy:         to.Ptr("22222222-2222-2222-2222-222222222222_1_01"),
					Unit:                to.Ptr("USD"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Alert) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Alert)
			t.Fatalf("Mock response is not equal to example response for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/SingleSubscriptionAlert.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAlerts_Dismiss(t *testing.T) {
	// From example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/DismissResourceGroupAlerts.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PatchResourceGroupAlerts"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcostmanagement.NewAlertsClient(cred, &options)
	res, err := client.Dismiss(ctx,
		"subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/ScreenSharingTest-peer",
		"22222222-2222-2222-2222-222222222222",
		armcostmanagement.DismissAlertPayload{
			Properties: &armcostmanagement.AlertProperties{
				Status: to.Ptr(armcostmanagement.AlertStatusDismissed),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/DismissResourceGroupAlerts.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcostmanagement.Alert{
			Name: to.Ptr("22222222-2222-2222-2222-222222222222"),
			Type: to.Ptr("Microsoft.CostManagement/alerts"),
			ID:   to.Ptr("subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/ScreenSharingTest-peer/providers/Microsoft.CostManagement/alerts/22222222-2222-2222-2222-222222222222"),
			Properties: &armcostmanagement.AlertProperties{
				Description:  to.Ptr(""),
				CloseTime:    to.Ptr("0001-01-01T00:00:00"),
				CostEntityID: to.Ptr("budget1"),
				CreationTime: to.Ptr("2020-04-27T11:07:52.7143901Z"),
				Definition: &armcostmanagement.AlertPropertiesDefinition{
					Type:     to.Ptr(armcostmanagement.AlertTypeBudget),
					Category: to.Ptr(armcostmanagement.AlertCategoryCost),
					Criteria: to.Ptr(armcostmanagement.AlertCriteriaCostThresholdExceeded),
				},
				ModificationTime:       to.Ptr("2020-04-28T11:06:02.8999373Z"),
				Source:                 to.Ptr(armcostmanagement.AlertSourcePreset),
				Status:                 to.Ptr(armcostmanagement.AlertStatusDismissed),
				StatusModificationTime: to.Ptr("0001-01-01T00:00:00"),
				Details: &armcostmanagement.AlertPropertiesDetails{
					Amount: to.Ptr[float64](200000),
					ContactEmails: []*string{
						to.Ptr("1234@contoso.com")},
					ContactGroups:       []*string{},
					ContactRoles:        []*string{},
					CurrentSpend:        to.Ptr[float64](161000.12),
					MeterFilter:         []interface{}{},
					Operator:            to.Ptr(armcostmanagement.AlertOperatorGreaterThan),
					PeriodStartDate:     to.Ptr("2020-03-01T00:00:00Z"),
					ResourceFilter:      []interface{}{},
					ResourceGroupFilter: []interface{}{},
					TagFilter:           map[string]interface{}{},
					Threshold:           to.Ptr[float64](0.8),
					TimeGrainType:       to.Ptr(armcostmanagement.AlertTimeGrainTypeQuarterly),
					TriggeredBy:         to.Ptr("22222222-2222-2222-2222-222222222222_1_01"),
					Unit:                to.Ptr("USD"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Alert) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Alert)
			t.Fatalf("Mock response is not equal to example response for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/DismissResourceGroupAlerts.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/DismissSubscriptionAlerts.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PatchSubscriptionAlerts"},
	})
	client = armcostmanagement.NewAlertsClient(cred, &options)
	res, err = client.Dismiss(ctx,
		"subscriptions/00000000-0000-0000-0000-000000000000",
		"22222222-2222-2222-2222-222222222222",
		armcostmanagement.DismissAlertPayload{
			Properties: &armcostmanagement.AlertProperties{
				Status: to.Ptr(armcostmanagement.AlertStatusDismissed),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/DismissSubscriptionAlerts.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcostmanagement.Alert{
			Name: to.Ptr("22222222-2222-2222-2222-222222222222"),
			Type: to.Ptr("Microsoft.CostManagement/alerts"),
			ID:   to.Ptr("subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.CostManagement/alerts/22222222-2222-2222-2222-222222222222"),
			Properties: &armcostmanagement.AlertProperties{
				Description:  to.Ptr(""),
				CloseTime:    to.Ptr("0001-01-01T00:00:00"),
				CostEntityID: to.Ptr("budget1"),
				CreationTime: to.Ptr("2020-04-27T11:07:52.7143901Z"),
				Definition: &armcostmanagement.AlertPropertiesDefinition{
					Type:     to.Ptr(armcostmanagement.AlertTypeBudget),
					Category: to.Ptr(armcostmanagement.AlertCategoryCost),
					Criteria: to.Ptr(armcostmanagement.AlertCriteriaCostThresholdExceeded),
				},
				ModificationTime:       to.Ptr("2020-04-28T11:06:02.8999373Z"),
				Source:                 to.Ptr(armcostmanagement.AlertSourcePreset),
				Status:                 to.Ptr(armcostmanagement.AlertStatusDismissed),
				StatusModificationTime: to.Ptr("0001-01-01T00:00:00"),
				Details: &armcostmanagement.AlertPropertiesDetails{
					Amount: to.Ptr[float64](200000),
					ContactEmails: []*string{
						to.Ptr("1234@contoso.com")},
					ContactGroups:       []*string{},
					ContactRoles:        []*string{},
					CurrentSpend:        to.Ptr[float64](161000.12),
					MeterFilter:         []interface{}{},
					Operator:            to.Ptr(armcostmanagement.AlertOperatorGreaterThan),
					PeriodStartDate:     to.Ptr("2020-03-01T00:00:00Z"),
					ResourceFilter:      []interface{}{},
					ResourceGroupFilter: []interface{}{},
					TagFilter:           map[string]interface{}{},
					Threshold:           to.Ptr[float64](0.8),
					TimeGrainType:       to.Ptr(armcostmanagement.AlertTimeGrainTypeQuarterly),
					TriggeredBy:         to.Ptr("22222222-2222-2222-2222-222222222222_1_01"),
					Unit:                to.Ptr("USD"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Alert) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Alert)
			t.Fatalf("Mock response is not equal to example response for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/DismissSubscriptionAlerts.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAlerts_ListExternal(t *testing.T) {
	// From example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ExternalBillingAccountAlerts.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ExternalBillingAccountAlerts"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcostmanagement.NewAlertsClient(cred, &options)
	res, err := client.ListExternal(ctx,
		armcostmanagement.ExternalCloudProviderTypeExternalBillingAccounts,
		"100",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ExternalBillingAccountAlerts.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcostmanagement.AlertsResult{
			Value: []*armcostmanagement.Alert{
				{
					Name: to.Ptr("00000000-0000-0000-0000-000000000000"),
					Type: to.Ptr("Microsoft.CostManagement/alerts"),
					ID:   to.Ptr("providers/Microsoft.CostManagement/externalBillingAccounts/100/providers/Microsoft.CostManagement/alerts/00000000-0000-0000-0000-000000000000"),
					Properties: &armcostmanagement.AlertProperties{
						Description:  to.Ptr(""),
						CloseTime:    to.Ptr("0001-01-01T00:00:00"),
						CostEntityID: to.Ptr("budget1"),
						CreationTime: to.Ptr("2020-04-27T11:07:52.7143901Z"),
						Definition: &armcostmanagement.AlertPropertiesDefinition{
							Type:     to.Ptr(armcostmanagement.AlertTypeBudget),
							Category: to.Ptr(armcostmanagement.AlertCategoryCost),
							Criteria: to.Ptr(armcostmanagement.AlertCriteriaCostThresholdExceeded),
						},
						ModificationTime:       to.Ptr("2020-04-28T11:06:02.8999373Z"),
						Source:                 to.Ptr(armcostmanagement.AlertSourcePreset),
						Status:                 to.Ptr(armcostmanagement.AlertStatusActive),
						StatusModificationTime: to.Ptr("0001-01-01T00:00:00"),
						Details: &armcostmanagement.AlertPropertiesDetails{
							Amount: to.Ptr[float64](200000),
							ContactEmails: []*string{
								to.Ptr("1234@contoso.com")},
							ContactGroups:       []*string{},
							ContactRoles:        []*string{},
							CurrentSpend:        to.Ptr[float64](161000.12),
							MeterFilter:         []interface{}{},
							Operator:            to.Ptr(armcostmanagement.AlertOperatorGreaterThan),
							PeriodStartDate:     to.Ptr("2020-03-01T00:00:00Z"),
							ResourceFilter:      []interface{}{},
							ResourceGroupFilter: []interface{}{},
							TagFilter:           map[string]interface{}{},
							Threshold:           to.Ptr[float64](0.8),
							TimeGrainType:       to.Ptr(armcostmanagement.AlertTimeGrainTypeQuarterly),
							TriggeredBy:         to.Ptr("00000000-0000-0000-0000-000000000000_1_01"),
							Unit:                to.Ptr("USD"),
						},
					},
				},
				{
					Name: to.Ptr("11111111-1111-1111-111111111111"),
					Type: to.Ptr("Microsoft.CostManagement/alerts"),
					ID:   to.Ptr("providers/Microsoft.CostManagement/externalBillingAccounts/100/providers/Microsoft.CostManagement/alerts/11111111-1111-1111-111111111111"),
					Properties: &armcostmanagement.AlertProperties{
						Description:  to.Ptr(""),
						CloseTime:    to.Ptr("0001-01-01T00:00:00"),
						CostEntityID: to.Ptr("budget1"),
						CreationTime: to.Ptr("2019-06-24T05:51:52.8713179Z"),
						Definition: &armcostmanagement.AlertPropertiesDefinition{
							Type:     to.Ptr(armcostmanagement.AlertTypeBudget),
							Category: to.Ptr(armcostmanagement.AlertCategoryCost),
							Criteria: to.Ptr(armcostmanagement.AlertCriteriaCostThresholdExceeded),
						},
						ModificationTime:       to.Ptr("2019-08-31T17:51:55.1808807Z"),
						Source:                 to.Ptr(armcostmanagement.AlertSourcePreset),
						Status:                 to.Ptr(armcostmanagement.AlertStatusActive),
						StatusModificationTime: to.Ptr("0001-01-01T00:00:00"),
						Details: &armcostmanagement.AlertPropertiesDetails{
							Amount: to.Ptr[float64](200000),
							ContactEmails: []*string{
								to.Ptr("1234@contoso.com")},
							ContactGroups:       []*string{},
							ContactRoles:        []*string{},
							CurrentSpend:        to.Ptr[float64](171000.32),
							MeterFilter:         []interface{}{},
							Operator:            to.Ptr(armcostmanagement.AlertOperatorGreaterThan),
							PeriodStartDate:     to.Ptr("2020-03-01T00:00:00Z"),
							ResourceFilter:      []interface{}{},
							ResourceGroupFilter: []interface{}{},
							TagFilter:           map[string]interface{}{},
							Threshold:           to.Ptr[float64](0.8),
							TimeGrainType:       to.Ptr(armcostmanagement.AlertTimeGrainTypeQuarterly),
							TriggeredBy:         to.Ptr("11111111-1111-1111-111111111111_1_01"),
							Unit:                to.Ptr("USD"),
						},
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.AlertsResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AlertsResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ExternalBillingAccountAlerts.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ExternalSubscriptionAlerts.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ExternalSubscriptionAlerts"},
	})
	client = armcostmanagement.NewAlertsClient(cred, &options)
	res, err = client.ListExternal(ctx,
		armcostmanagement.ExternalCloudProviderTypeExternalSubscriptions,
		"100",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ExternalSubscriptionAlerts.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcostmanagement.AlertsResult{
			Value: []*armcostmanagement.Alert{
				{
					Name: to.Ptr("00000000-0000-0000-0000-000000000000"),
					Type: to.Ptr("Microsoft.CostManagement/alerts"),
					ID:   to.Ptr("providers/Microsoft.CostManagement/externalSubscriptions/100/providers/Microsoft.CostManagement/alerts/00000000-0000-0000-0000-000000000000"),
					Properties: &armcostmanagement.AlertProperties{
						Description:  to.Ptr(""),
						CloseTime:    to.Ptr("0001-01-01T00:00:00"),
						CostEntityID: to.Ptr("budget1"),
						CreationTime: to.Ptr("2020-04-27T11:07:52.7143901Z"),
						Definition: &armcostmanagement.AlertPropertiesDefinition{
							Type:     to.Ptr(armcostmanagement.AlertTypeBudget),
							Category: to.Ptr(armcostmanagement.AlertCategoryCost),
							Criteria: to.Ptr(armcostmanagement.AlertCriteriaCostThresholdExceeded),
						},
						ModificationTime:       to.Ptr("2020-04-28T11:06:02.8999373Z"),
						Source:                 to.Ptr(armcostmanagement.AlertSourcePreset),
						Status:                 to.Ptr(armcostmanagement.AlertStatusActive),
						StatusModificationTime: to.Ptr("0001-01-01T00:00:00"),
						Details: &armcostmanagement.AlertPropertiesDetails{
							Amount: to.Ptr[float64](200000),
							ContactEmails: []*string{
								to.Ptr("1234@contoso.com")},
							ContactGroups:       []*string{},
							ContactRoles:        []*string{},
							CurrentSpend:        to.Ptr[float64](161000.12),
							MeterFilter:         []interface{}{},
							Operator:            to.Ptr(armcostmanagement.AlertOperatorGreaterThan),
							PeriodStartDate:     to.Ptr("2020-03-01T00:00:00Z"),
							ResourceFilter:      []interface{}{},
							ResourceGroupFilter: []interface{}{},
							TagFilter:           map[string]interface{}{},
							Threshold:           to.Ptr[float64](0.8),
							TimeGrainType:       to.Ptr(armcostmanagement.AlertTimeGrainTypeQuarterly),
							TriggeredBy:         to.Ptr("00000000-0000-0000-0000-000000000000_1_01"),
							Unit:                to.Ptr("USD"),
						},
					},
				},
				{
					Name: to.Ptr("11111111-1111-1111-111111111111"),
					Type: to.Ptr("Microsoft.CostManagement/alerts"),
					ID:   to.Ptr("providers/Microsoft.CostManagement/externalSubscriptions/100/providers/Microsoft.CostManagement/alerts/11111111-1111-1111-111111111111"),
					Properties: &armcostmanagement.AlertProperties{
						Description:  to.Ptr(""),
						CloseTime:    to.Ptr("0001-01-01T00:00:00"),
						CostEntityID: to.Ptr("budget1"),
						CreationTime: to.Ptr("2019-06-24T05:51:52.8713179Z"),
						Definition: &armcostmanagement.AlertPropertiesDefinition{
							Type:     to.Ptr(armcostmanagement.AlertTypeBudget),
							Category: to.Ptr(armcostmanagement.AlertCategoryCost),
							Criteria: to.Ptr(armcostmanagement.AlertCriteriaCostThresholdExceeded),
						},
						ModificationTime:       to.Ptr("2019-08-31T17:51:55.1808807Z"),
						Source:                 to.Ptr(armcostmanagement.AlertSourcePreset),
						Status:                 to.Ptr(armcostmanagement.AlertStatusActive),
						StatusModificationTime: to.Ptr("0001-01-01T00:00:00"),
						Details: &armcostmanagement.AlertPropertiesDetails{
							Amount: to.Ptr[float64](200000),
							ContactEmails: []*string{
								to.Ptr("1234@contoso.com")},
							ContactGroups:       []*string{},
							ContactRoles:        []*string{},
							CurrentSpend:        to.Ptr[float64](171000.32),
							MeterFilter:         []interface{}{},
							Operator:            to.Ptr(armcostmanagement.AlertOperatorGreaterThan),
							PeriodStartDate:     to.Ptr("2020-03-01T00:00:00Z"),
							ResourceFilter:      []interface{}{},
							ResourceGroupFilter: []interface{}{},
							TagFilter:           map[string]interface{}{},
							Threshold:           to.Ptr[float64](0.8),
							TimeGrainType:       to.Ptr(armcostmanagement.AlertTimeGrainTypeQuarterly),
							TriggeredBy:         to.Ptr("11111111-1111-1111-111111111111_1_01"),
							Unit:                to.Ptr("USD"),
						},
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.AlertsResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AlertsResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ExternalSubscriptionAlerts.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestForecast_Usage(t *testing.T) {
	// From example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/BillingAccountForecast.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"BillingAccountForecast"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcostmanagement.NewForecastClient(cred, &options)
	res, err := client.Usage(ctx,
		"providers/Microsoft.Billing/billingAccounts/12345:6789",
		armcostmanagement.ForecastDefinition{
			Type: to.Ptr(armcostmanagement.ForecastTypeUsage),
			Dataset: &armcostmanagement.ForecastDataset{
				Filter: &armcostmanagement.QueryFilter{
					And: []*armcostmanagement.QueryFilter{
						{
							Or: []*armcostmanagement.QueryFilter{
								{
									Dimensions: &armcostmanagement.QueryComparisonExpression{
										Name:     to.Ptr("ResourceLocation"),
										Operator: to.Ptr(armcostmanagement.QueryOperatorTypeIn),
										Values: []*string{
											to.Ptr("East US"),
											to.Ptr("West Europe")},
									},
								},
								{
									Tags: &armcostmanagement.QueryComparisonExpression{
										Name:     to.Ptr("Environment"),
										Operator: to.Ptr(armcostmanagement.QueryOperatorTypeIn),
										Values: []*string{
											to.Ptr("UAT"),
											to.Ptr("Prod")},
									},
								}},
						},
						{
							Dimensions: &armcostmanagement.QueryComparisonExpression{
								Name:     to.Ptr("ResourceGroup"),
								Operator: to.Ptr(armcostmanagement.QueryOperatorTypeIn),
								Values: []*string{
									to.Ptr("API")},
							},
						}},
				},
				Granularity: to.Ptr(armcostmanagement.GranularityTypeDaily),
			},
			IncludeActualCost:       to.Ptr(false),
			IncludeFreshPartialCost: to.Ptr(false),
			Timeframe:               to.Ptr(armcostmanagement.ForecastTimeframeTypeMonthToDate),
		},
		&armcostmanagement.ForecastClientUsageOptions{Filter: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/BillingAccountForecast.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcostmanagement.QueryResult{
			Name: to.Ptr("ad67fd91-c131-4bda-9ba9-7187ecb1cebd"),
			Type: to.Ptr("microsoft.costmanagement/Query"),
			ID:   to.Ptr("providers/Microsoft.Billing/billingAccounts/12345:6789/providers/Microsoft.CostManagement/query/ad67fd91-c131-4bda-9ba9-7187ecb1cebd"),
			Properties: &armcostmanagement.QueryProperties{
				Columns: []*armcostmanagement.QueryColumn{
					{
						Name: to.Ptr("PreTaxCost"),
						Type: to.Ptr("Number"),
					},
					{
						Name: to.Ptr("UsageDate"),
						Type: to.Ptr("Number"),
					},
					{
						Name: to.Ptr("CostStatus"),
						Type: to.Ptr("String"),
					},
					{
						Name: to.Ptr("Currency"),
						Type: to.Ptr("String"),
					}},
				Rows: [][]interface{}{
					{
						float64(2.10333307059661),
						float64(20180331),
						"Forecast",
						"USD"},
					{
						float64(218.68795741935486),
						float64(20180331),
						"Forecast",
						"USD"},
					{
						float64(0.14384913581657052),
						float64(20180401),
						"Forecast",
						"USD"},
					{
						float64(0.009865586851323632),
						float64(20180429),
						"Forecast",
						"USD"}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.QueryResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.QueryResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/BillingAccountForecast.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/BillingProfileForecast.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"BillingProfileForecast"},
	})
	client = armcostmanagement.NewForecastClient(cred, &options)
	res, err = client.Usage(ctx,
		"providers/Microsoft.Billing/billingAccounts/12345:6789/billingProfiles/13579",
		armcostmanagement.ForecastDefinition{
			Type: to.Ptr(armcostmanagement.ForecastTypeUsage),
			Dataset: &armcostmanagement.ForecastDataset{
				Filter: &armcostmanagement.QueryFilter{
					And: []*armcostmanagement.QueryFilter{
						{
							Or: []*armcostmanagement.QueryFilter{
								{
									Dimensions: &armcostmanagement.QueryComparisonExpression{
										Name:     to.Ptr("ResourceLocation"),
										Operator: to.Ptr(armcostmanagement.QueryOperatorTypeIn),
										Values: []*string{
											to.Ptr("East US"),
											to.Ptr("West Europe")},
									},
								},
								{
									Tags: &armcostmanagement.QueryComparisonExpression{
										Name:     to.Ptr("Environment"),
										Operator: to.Ptr(armcostmanagement.QueryOperatorTypeIn),
										Values: []*string{
											to.Ptr("UAT"),
											to.Ptr("Prod")},
									},
								}},
						},
						{
							Dimensions: &armcostmanagement.QueryComparisonExpression{
								Name:     to.Ptr("ResourceGroup"),
								Operator: to.Ptr(armcostmanagement.QueryOperatorTypeIn),
								Values: []*string{
									to.Ptr("API")},
							},
						}},
				},
				Granularity: to.Ptr(armcostmanagement.GranularityTypeDaily),
			},
			IncludeActualCost:       to.Ptr(false),
			IncludeFreshPartialCost: to.Ptr(false),
			Timeframe:               to.Ptr(armcostmanagement.ForecastTimeframeTypeMonthToDate),
		},
		&armcostmanagement.ForecastClientUsageOptions{Filter: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/BillingProfileForecast.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcostmanagement.QueryResult{
			Name: to.Ptr("ad67fd91-c131-4bda-9ba9-7187ecb1cebd"),
			Type: to.Ptr("microsoft.costmanagement/Query"),
			ID:   to.Ptr("providers/Microsoft.Billing/billingAccounts/12345:6789/billingProfiles/13579/providers/Microsoft.CostManagement/query/ad67fd91-c131-4bda-9ba9-7187ecb1cebd"),
			Properties: &armcostmanagement.QueryProperties{
				Columns: []*armcostmanagement.QueryColumn{
					{
						Name: to.Ptr("PreTaxCost"),
						Type: to.Ptr("Number"),
					},
					{
						Name: to.Ptr("UsageDate"),
						Type: to.Ptr("Number"),
					},
					{
						Name: to.Ptr("CostStatus"),
						Type: to.Ptr("String"),
					},
					{
						Name: to.Ptr("Currency"),
						Type: to.Ptr("String"),
					}},
				Rows: [][]interface{}{
					{
						float64(2.10333307059661),
						float64(20180331),
						"Forecast",
						"USD"},
					{
						float64(218.68795741935486),
						float64(20180331),
						"Forecast",
						"USD"},
					{
						float64(0.14384913581657052),
						float64(20180401),
						"Forecast",
						"USD"},
					{
						float64(0.009865586851323632),
						float64(20180429),
						"Forecast",
						"USD"}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.QueryResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.QueryResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/BillingProfileForecast.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/DepartmentForecast.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DepartmentForecast"},
	})
	client = armcostmanagement.NewForecastClient(cred, &options)
	res, err = client.Usage(ctx,
		"providers/Microsoft.Billing/billingAccounts/12345:6789/departments/123",
		armcostmanagement.ForecastDefinition{
			Type: to.Ptr(armcostmanagement.ForecastTypeUsage),
			Dataset: &armcostmanagement.ForecastDataset{
				Filter: &armcostmanagement.QueryFilter{
					And: []*armcostmanagement.QueryFilter{
						{
							Or: []*armcostmanagement.QueryFilter{
								{
									Dimensions: &armcostmanagement.QueryComparisonExpression{
										Name:     to.Ptr("ResourceLocation"),
										Operator: to.Ptr(armcostmanagement.QueryOperatorTypeIn),
										Values: []*string{
											to.Ptr("East US"),
											to.Ptr("West Europe")},
									},
								},
								{
									Tags: &armcostmanagement.QueryComparisonExpression{
										Name:     to.Ptr("Environment"),
										Operator: to.Ptr(armcostmanagement.QueryOperatorTypeIn),
										Values: []*string{
											to.Ptr("UAT"),
											to.Ptr("Prod")},
									},
								}},
						},
						{
							Dimensions: &armcostmanagement.QueryComparisonExpression{
								Name:     to.Ptr("ResourceGroup"),
								Operator: to.Ptr(armcostmanagement.QueryOperatorTypeIn),
								Values: []*string{
									to.Ptr("API")},
							},
						}},
				},
				Granularity: to.Ptr(armcostmanagement.GranularityTypeDaily),
			},
			IncludeActualCost:       to.Ptr(false),
			IncludeFreshPartialCost: to.Ptr(false),
			Timeframe:               to.Ptr(armcostmanagement.ForecastTimeframeTypeMonthToDate),
		},
		&armcostmanagement.ForecastClientUsageOptions{Filter: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/DepartmentForecast.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcostmanagement.QueryResult{
			Name: to.Ptr("ad67fd91-c131-4bda-9ba9-7187ecb1cebd"),
			Type: to.Ptr("microsoft.costmanagement/Query"),
			ID:   to.Ptr("providers/Microsoft.Billing/billingAccounts/12345:6789/departments/123/providers/Microsoft.CostManagement/query/ad67fd91-c131-4bda-9ba9-7187ecb1cebd"),
			Properties: &armcostmanagement.QueryProperties{
				Columns: []*armcostmanagement.QueryColumn{
					{
						Name: to.Ptr("PreTaxCost"),
						Type: to.Ptr("Number"),
					},
					{
						Name: to.Ptr("UsageDate"),
						Type: to.Ptr("Number"),
					},
					{
						Name: to.Ptr("CostStatus"),
						Type: to.Ptr("String"),
					},
					{
						Name: to.Ptr("Currency"),
						Type: to.Ptr("String"),
					}},
				Rows: [][]interface{}{
					{
						float64(2.10333307059661),
						float64(20180331),
						"Forecast",
						"USD"},
					{
						float64(218.68795741935486),
						float64(20180331),
						"Forecast",
						"USD"},
					{
						float64(0.14384913581657052),
						float64(20180401),
						"Forecast",
						"USD"},
					{
						float64(0.009865586851323632),
						float64(20180429),
						"Forecast",
						"USD"}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.QueryResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.QueryResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/DepartmentForecast.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/EnrollmentAccountForecast.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"EnrollmentAccountForecast"},
	})
	client = armcostmanagement.NewForecastClient(cred, &options)
	res, err = client.Usage(ctx,
		"providers/Microsoft.Billing/billingAccounts/12345:6789/enrollmentAccounts/456",
		armcostmanagement.ForecastDefinition{
			Type: to.Ptr(armcostmanagement.ForecastTypeUsage),
			Dataset: &armcostmanagement.ForecastDataset{
				Filter: &armcostmanagement.QueryFilter{
					And: []*armcostmanagement.QueryFilter{
						{
							Or: []*armcostmanagement.QueryFilter{
								{
									Dimensions: &armcostmanagement.QueryComparisonExpression{
										Name:     to.Ptr("ResourceLocation"),
										Operator: to.Ptr(armcostmanagement.QueryOperatorTypeIn),
										Values: []*string{
											to.Ptr("East US"),
											to.Ptr("West Europe")},
									},
								},
								{
									Tags: &armcostmanagement.QueryComparisonExpression{
										Name:     to.Ptr("Environment"),
										Operator: to.Ptr(armcostmanagement.QueryOperatorTypeIn),
										Values: []*string{
											to.Ptr("UAT"),
											to.Ptr("Prod")},
									},
								}},
						},
						{
							Dimensions: &armcostmanagement.QueryComparisonExpression{
								Name:     to.Ptr("ResourceGroup"),
								Operator: to.Ptr(armcostmanagement.QueryOperatorTypeIn),
								Values: []*string{
									to.Ptr("API")},
							},
						}},
				},
				Granularity: to.Ptr(armcostmanagement.GranularityTypeDaily),
			},
			IncludeActualCost:       to.Ptr(false),
			IncludeFreshPartialCost: to.Ptr(false),
			Timeframe:               to.Ptr(armcostmanagement.ForecastTimeframeTypeMonthToDate),
		},
		&armcostmanagement.ForecastClientUsageOptions{Filter: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/EnrollmentAccountForecast.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcostmanagement.QueryResult{
			Name: to.Ptr("ad67fd91-c131-4bda-9ba9-7187ecb1cebd"),
			Type: to.Ptr("microsoft.costmanagement/Query"),
			ID:   to.Ptr("providers/Microsoft.Billing/billingAccounts/12345:6789/enrollmentAccounts/456/providers/Microsoft.CostManagement/query/ad67fd91-c131-4bda-9ba9-7187ecb1cebd"),
			Properties: &armcostmanagement.QueryProperties{
				Columns: []*armcostmanagement.QueryColumn{
					{
						Name: to.Ptr("PreTaxCost"),
						Type: to.Ptr("Number"),
					},
					{
						Name: to.Ptr("UsageDate"),
						Type: to.Ptr("Number"),
					},
					{
						Name: to.Ptr("CostStatus"),
						Type: to.Ptr("String"),
					},
					{
						Name: to.Ptr("Currency"),
						Type: to.Ptr("String"),
					}},
				Rows: [][]interface{}{
					{
						float64(2.10333307059661),
						float64(20180331),
						"Forecast",
						"USD"},
					{
						float64(218.68795741935486),
						float64(20180331),
						"Forecast",
						"USD"},
					{
						float64(0.14384913581657052),
						float64(20180401),
						"Forecast",
						"USD"},
					{
						float64(0.009865586851323632),
						float64(20180429),
						"Forecast",
						"USD"}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.QueryResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.QueryResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/EnrollmentAccountForecast.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/InvoiceSectionForecast.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"InvoiceSectionForecast"},
	})
	client = armcostmanagement.NewForecastClient(cred, &options)
	res, err = client.Usage(ctx,
		"providers/Microsoft.Billing/billingAccounts/12345:6789/billingProfiles/13579/invoiceSections/9876",
		armcostmanagement.ForecastDefinition{
			Type: to.Ptr(armcostmanagement.ForecastTypeUsage),
			Dataset: &armcostmanagement.ForecastDataset{
				Filter: &armcostmanagement.QueryFilter{
					And: []*armcostmanagement.QueryFilter{
						{
							Or: []*armcostmanagement.QueryFilter{
								{
									Dimensions: &armcostmanagement.QueryComparisonExpression{
										Name:     to.Ptr("ResourceLocation"),
										Operator: to.Ptr(armcostmanagement.QueryOperatorTypeIn),
										Values: []*string{
											to.Ptr("East US"),
											to.Ptr("West Europe")},
									},
								},
								{
									Tags: &armcostmanagement.QueryComparisonExpression{
										Name:     to.Ptr("Environment"),
										Operator: to.Ptr(armcostmanagement.QueryOperatorTypeIn),
										Values: []*string{
											to.Ptr("UAT"),
											to.Ptr("Prod")},
									},
								}},
						},
						{
							Dimensions: &armcostmanagement.QueryComparisonExpression{
								Name:     to.Ptr("ResourceGroup"),
								Operator: to.Ptr(armcostmanagement.QueryOperatorTypeIn),
								Values: []*string{
									to.Ptr("API")},
							},
						}},
				},
				Granularity: to.Ptr(armcostmanagement.GranularityTypeDaily),
			},
			IncludeActualCost:       to.Ptr(false),
			IncludeFreshPartialCost: to.Ptr(false),
			Timeframe:               to.Ptr(armcostmanagement.ForecastTimeframeTypeMonthToDate),
		},
		&armcostmanagement.ForecastClientUsageOptions{Filter: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/InvoiceSectionForecast.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcostmanagement.QueryResult{
			Name: to.Ptr("ad67fd91-c131-4bda-9ba9-7187ecb1cebd"),
			Type: to.Ptr("microsoft.costmanagement/Query"),
			ID:   to.Ptr("providers/Microsoft.Billing/billingAccounts/12345:6789/billingProfiles/13579/invoiceSections/9876/providers/Microsoft.CostManagement/query/ad67fd91-c131-4bda-9ba9-7187ecb1cebd"),
			Properties: &armcostmanagement.QueryProperties{
				Columns: []*armcostmanagement.QueryColumn{
					{
						Name: to.Ptr("PreTaxCost"),
						Type: to.Ptr("Number"),
					},
					{
						Name: to.Ptr("UsageDate"),
						Type: to.Ptr("Number"),
					},
					{
						Name: to.Ptr("CostStatus"),
						Type: to.Ptr("String"),
					},
					{
						Name: to.Ptr("Currency"),
						Type: to.Ptr("String"),
					}},
				Rows: [][]interface{}{
					{
						float64(2.10333307059661),
						float64(20180331),
						"Forecast",
						"USD"},
					{
						float64(218.68795741935486),
						float64(20180331),
						"Forecast",
						"USD"},
					{
						float64(0.14384913581657052),
						float64(20180401),
						"Forecast",
						"USD"},
					{
						float64(0.009865586851323632),
						float64(20180429),
						"Forecast",
						"USD"}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.QueryResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.QueryResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/InvoiceSectionForecast.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ResourceGroupForecast.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ResourceGroupForecast"},
	})
	client = armcostmanagement.NewForecastClient(cred, &options)
	res, err = client.Usage(ctx,
		"subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/ScreenSharingTest-peer",
		armcostmanagement.ForecastDefinition{
			Type: to.Ptr(armcostmanagement.ForecastTypeUsage),
			Dataset: &armcostmanagement.ForecastDataset{
				Filter: &armcostmanagement.QueryFilter{
					And: []*armcostmanagement.QueryFilter{
						{
							Or: []*armcostmanagement.QueryFilter{
								{
									Dimensions: &armcostmanagement.QueryComparisonExpression{
										Name:     to.Ptr("ResourceLocation"),
										Operator: to.Ptr(armcostmanagement.QueryOperatorTypeIn),
										Values: []*string{
											to.Ptr("East US"),
											to.Ptr("West Europe")},
									},
								},
								{
									Tags: &armcostmanagement.QueryComparisonExpression{
										Name:     to.Ptr("Environment"),
										Operator: to.Ptr(armcostmanagement.QueryOperatorTypeIn),
										Values: []*string{
											to.Ptr("UAT"),
											to.Ptr("Prod")},
									},
								}},
						},
						{
							Dimensions: &armcostmanagement.QueryComparisonExpression{
								Name:     to.Ptr("ResourceGroup"),
								Operator: to.Ptr(armcostmanagement.QueryOperatorTypeIn),
								Values: []*string{
									to.Ptr("API")},
							},
						}},
				},
				Granularity: to.Ptr(armcostmanagement.GranularityTypeDaily),
			},
			IncludeActualCost:       to.Ptr(false),
			IncludeFreshPartialCost: to.Ptr(false),
			Timeframe:               to.Ptr(armcostmanagement.ForecastTimeframeTypeMonthToDate),
		},
		&armcostmanagement.ForecastClientUsageOptions{Filter: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ResourceGroupForecast.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcostmanagement.QueryResult{
			Name: to.Ptr("55312978-ba1b-415c-9304-cfd9c43c0481"),
			Type: to.Ptr("microsoft.costmanagement/Query"),
			ID:   to.Ptr("subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/ScreenSharingTest-peer/providers/Microsoft.CostManagement/query/00000000-0000-0000-0000-000000000000"),
			Properties: &armcostmanagement.QueryProperties{
				Columns: []*armcostmanagement.QueryColumn{
					{
						Name: to.Ptr("PreTaxCost"),
						Type: to.Ptr("Number"),
					},
					{
						Name: to.Ptr("UsageDate"),
						Type: to.Ptr("Number"),
					},
					{
						Name: to.Ptr("CostStatus"),
						Type: to.Ptr("String"),
					},
					{
						Name: to.Ptr("Currency"),
						Type: to.Ptr("String"),
					}},
				Rows: [][]interface{}{
					{
						float64(2.10333307059661),
						float64(20180331),
						"Forecast",
						"USD"}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.QueryResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.QueryResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ResourceGroupForecast.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/SubscriptionForecast.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SubscriptionForecast"},
	})
	client = armcostmanagement.NewForecastClient(cred, &options)
	res, err = client.Usage(ctx,
		"subscriptions/00000000-0000-0000-0000-000000000000",
		armcostmanagement.ForecastDefinition{
			Type: to.Ptr(armcostmanagement.ForecastTypeUsage),
			Dataset: &armcostmanagement.ForecastDataset{
				Filter: &armcostmanagement.QueryFilter{
					And: []*armcostmanagement.QueryFilter{
						{
							Or: []*armcostmanagement.QueryFilter{
								{
									Dimensions: &armcostmanagement.QueryComparisonExpression{
										Name:     to.Ptr("ResourceLocation"),
										Operator: to.Ptr(armcostmanagement.QueryOperatorTypeIn),
										Values: []*string{
											to.Ptr("East US"),
											to.Ptr("West Europe")},
									},
								},
								{
									Tags: &armcostmanagement.QueryComparisonExpression{
										Name:     to.Ptr("Environment"),
										Operator: to.Ptr(armcostmanagement.QueryOperatorTypeIn),
										Values: []*string{
											to.Ptr("UAT"),
											to.Ptr("Prod")},
									},
								}},
						},
						{
							Dimensions: &armcostmanagement.QueryComparisonExpression{
								Name:     to.Ptr("ResourceGroup"),
								Operator: to.Ptr(armcostmanagement.QueryOperatorTypeIn),
								Values: []*string{
									to.Ptr("API")},
							},
						}},
				},
				Granularity: to.Ptr(armcostmanagement.GranularityTypeDaily),
			},
			IncludeActualCost:       to.Ptr(false),
			IncludeFreshPartialCost: to.Ptr(false),
			Timeframe:               to.Ptr(armcostmanagement.ForecastTimeframeTypeMonthToDate),
		},
		&armcostmanagement.ForecastClientUsageOptions{Filter: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/SubscriptionForecast.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcostmanagement.QueryResult{
			Name: to.Ptr("55312978-ba1b-415c-9304-cfd9c43c0481"),
			Type: to.Ptr("microsoft.costmanagement/Query"),
			ID:   to.Ptr("subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.CostManagement/query/00000000-0000-0000-0000-000000000000"),
			Properties: &armcostmanagement.QueryProperties{
				Columns: []*armcostmanagement.QueryColumn{
					{
						Name: to.Ptr("PreTaxCost"),
						Type: to.Ptr("Number"),
					},
					{
						Name: to.Ptr("UsageDate"),
						Type: to.Ptr("Number"),
					},
					{
						Name: to.Ptr("CostStatus"),
						Type: to.Ptr("String"),
					},
					{
						Name: to.Ptr("Currency"),
						Type: to.Ptr("String"),
					}},
				Rows: [][]interface{}{
					{
						float64(2.10333307059661),
						float64(20180331),
						"Forecast",
						"USD"},
					{
						float64(218.68795741935486),
						float64(20180331),
						"Forecast",
						"USD"},
					{
						float64(0.14384913581657052),
						float64(20180401),
						"Forecast",
						"USD"},
					{
						float64(0.009865586851323632),
						float64(20180429),
						"Forecast",
						"USD"}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.QueryResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.QueryResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/SubscriptionForecast.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestForecast_ExternalCloudProviderUsage(t *testing.T) {
	// From example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ExternalBillingAccountForecast.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ExternalBillingAccountForecast"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcostmanagement.NewForecastClient(cred, &options)
	res, err := client.ExternalCloudProviderUsage(ctx,
		armcostmanagement.ExternalCloudProviderTypeExternalBillingAccounts,
		"100",
		armcostmanagement.ForecastDefinition{
			Type: to.Ptr(armcostmanagement.ForecastTypeUsage),
			Dataset: &armcostmanagement.ForecastDataset{
				Filter: &armcostmanagement.QueryFilter{
					And: []*armcostmanagement.QueryFilter{
						{
							Or: []*armcostmanagement.QueryFilter{
								{
									Dimensions: &armcostmanagement.QueryComparisonExpression{
										Name:     to.Ptr("ResourceLocation"),
										Operator: to.Ptr(armcostmanagement.QueryOperatorTypeIn),
										Values: []*string{
											to.Ptr("East US"),
											to.Ptr("West Europe")},
									},
								},
								{
									Tags: &armcostmanagement.QueryComparisonExpression{
										Name:     to.Ptr("Environment"),
										Operator: to.Ptr(armcostmanagement.QueryOperatorTypeIn),
										Values: []*string{
											to.Ptr("UAT"),
											to.Ptr("Prod")},
									},
								}},
						},
						{
							Dimensions: &armcostmanagement.QueryComparisonExpression{
								Name:     to.Ptr("ResourceGroup"),
								Operator: to.Ptr(armcostmanagement.QueryOperatorTypeIn),
								Values: []*string{
									to.Ptr("API")},
							},
						}},
				},
				Granularity: to.Ptr(armcostmanagement.GranularityTypeDaily),
			},
			Timeframe: to.Ptr(armcostmanagement.ForecastTimeframeTypeMonthToDate),
		},
		&armcostmanagement.ForecastClientExternalCloudProviderUsageOptions{Filter: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ExternalBillingAccountForecast.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcostmanagement.QueryResult{
			Name: to.Ptr("6dc7b06a-d90a-4df5-b655-ce6cf1c0814d"),
			Type: to.Ptr("Microsoft.CostManagement/query"),
			ID:   to.Ptr("providers/Microsoft.CostManagement/externalBillingAccounts/100/query/6dc7b06a-d90a-4df5-b655-ce6cf1c0814d"),
			Properties: &armcostmanagement.QueryProperties{
				Columns: []*armcostmanagement.QueryColumn{
					{
						Name: to.Ptr("PreTaxCost"),
						Type: to.Ptr("Number"),
					},
					{
						Name: to.Ptr("CostStatus"),
						Type: to.Ptr("String"),
					},
					{
						Name: to.Ptr("Currency"),
						Type: to.Ptr("String"),
					}},
				Rows: [][]interface{}{
					{
						float64(0),
						"Forecast",
						"USD"},
					{
						float64(30.2572751438),
						"Forecast",
						"USD"},
					{
						float64(0.07675760200000002),
						"Forecast",
						"USD"},
					{
						float64(50.43096419040001),
						"Forecast",
						"USD"}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.QueryResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.QueryResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ExternalBillingAccountForecast.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ExternalSubscriptionForecast.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ExternalSubscriptionForecast"},
	})
	client = armcostmanagement.NewForecastClient(cred, &options)
	res, err = client.ExternalCloudProviderUsage(ctx,
		armcostmanagement.ExternalCloudProviderTypeExternalSubscriptions,
		"100",
		armcostmanagement.ForecastDefinition{
			Type: to.Ptr(armcostmanagement.ForecastTypeUsage),
			Dataset: &armcostmanagement.ForecastDataset{
				Filter: &armcostmanagement.QueryFilter{
					And: []*armcostmanagement.QueryFilter{
						{
							Or: []*armcostmanagement.QueryFilter{
								{
									Dimensions: &armcostmanagement.QueryComparisonExpression{
										Name:     to.Ptr("ResourceLocation"),
										Operator: to.Ptr(armcostmanagement.QueryOperatorTypeIn),
										Values: []*string{
											to.Ptr("East US"),
											to.Ptr("West Europe")},
									},
								},
								{
									Tags: &armcostmanagement.QueryComparisonExpression{
										Name:     to.Ptr("Environment"),
										Operator: to.Ptr(armcostmanagement.QueryOperatorTypeIn),
										Values: []*string{
											to.Ptr("UAT"),
											to.Ptr("Prod")},
									},
								}},
						},
						{
							Dimensions: &armcostmanagement.QueryComparisonExpression{
								Name:     to.Ptr("ResourceGroup"),
								Operator: to.Ptr(armcostmanagement.QueryOperatorTypeIn),
								Values: []*string{
									to.Ptr("API")},
							},
						}},
				},
				Granularity: to.Ptr(armcostmanagement.GranularityTypeDaily),
			},
			Timeframe: to.Ptr(armcostmanagement.ForecastTimeframeTypeMonthToDate),
		},
		&armcostmanagement.ForecastClientExternalCloudProviderUsageOptions{Filter: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ExternalSubscriptionForecast.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcostmanagement.QueryResult{
			Name: to.Ptr("d99477af-7510-40ee-aca2-e59bdca0d10d"),
			Type: to.Ptr("Microsoft.CostManagement/query"),
			ID:   to.Ptr("providers/Microsoft.CostManagement/externalSubscriptions/100/query/d99477af-7510-40ee-aca2-e59bdca0d10d"),
			Properties: &armcostmanagement.QueryProperties{
				Columns: []*armcostmanagement.QueryColumn{
					{
						Name: to.Ptr("PreTaxCost"),
						Type: to.Ptr("Number"),
					},
					{
						Name: to.Ptr("UsageDate"),
						Type: to.Ptr("Number"),
					},
					{
						Name: to.Ptr("CostStatus"),
						Type: to.Ptr("String"),
					},
					{
						Name: to.Ptr("Currency"),
						Type: to.Ptr("String"),
					}},
				Rows: [][]interface{}{},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.QueryResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.QueryResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ExternalSubscriptionForecast.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDimensions_List(t *testing.T) {
	// From example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/BillingAccountDimensionsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"BillingAccountDimensionsList-Legacy"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcostmanagement.NewDimensionsClient(cred, &options)
	pager := client.List("providers/Microsoft.Billing/billingAccounts/100",
		&armcostmanagement.DimensionsClientListOptions{Filter: nil,
			Expand:    nil,
			Skiptoken: nil,
			Top:       nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/BillingAccountDimensionsList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcostmanagement.DimensionsListResult{
			Value: []*armcostmanagement.Dimension{
				{
					Name: to.Ptr("dimensions_ResourceGroup_2018-05-01_2018-05-31"),
					Type: to.Ptr("microsoft.CostManagement/dimensions"),
					ID:   to.Ptr("providers/Microsoft.Billing/billingAccounts/100/providers/microsoft.CostManagement/dimensions_ResourceGroup_2018-05-01_2018-05-31"),
					Properties: &armcostmanagement.DimensionProperties{
						Description:     to.Ptr("Resource group"),
						Category:        to.Ptr("ResourceGroup"),
						Data:            []*string{},
						FilterEnabled:   to.Ptr(true),
						GroupingEnabled: to.Ptr(true),
						Total:           to.Ptr[int32](377),
						UsageEnd:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-05-31T00:00:00-07:00"); return t }()),
						UsageStart:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-05-01T00:00:00-07:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("dimensions_ResourceType_2018-05-01_2018-05-31"),
					Type: to.Ptr("microsoft.CostManagement/dimensions"),
					ID:   to.Ptr("providers/Microsoft.Billing/billingAccounts/100/providers/microsoft.CostManagement/dimensions_ResourceType_2018-05-01_2018-05-31"),
					Properties: &armcostmanagement.DimensionProperties{
						Description:     to.Ptr("Resource type"),
						Category:        to.Ptr("ResourceType"),
						Data:            []*string{},
						FilterEnabled:   to.Ptr(true),
						GroupingEnabled: to.Ptr(true),
						Total:           to.Ptr[int32](37),
						UsageEnd:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-05-31T00:00:00-07:00"); return t }()),
						UsageStart:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-05-01T00:00:00-07:00"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DimensionsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DimensionsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/BillingAccountDimensionsList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/MCABillingAccountDimensionsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"BillingAccountDimensionsList-Modern"},
	})
	client = armcostmanagement.NewDimensionsClient(cred, &options)
	pager = client.List("providers/Microsoft.Billing/billingAccounts/12345:6789",
		&armcostmanagement.DimensionsClientListOptions{Filter: nil,
			Expand:    nil,
			Skiptoken: nil,
			Top:       nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/MCABillingAccountDimensionsList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcostmanagement.DimensionsListResult{
			Value: []*armcostmanagement.Dimension{
				{
					Name: to.Ptr("dimensions_ResourceGroup_2019-10-01_2019-10-31"),
					Type: to.Ptr("microsoft.CostManagement/dimensions"),
					ID:   to.Ptr("providers/Microsoft.Billing/billingAccounts/12345:6789/providers/microsoft.CostManagement/dimensions_ResourceGroup_2019-10-01_2019-10-31"),
					Properties: &armcostmanagement.DimensionProperties{
						Description:     to.Ptr("Resource group"),
						Category:        to.Ptr("ResourceGroup"),
						Data:            []*string{},
						FilterEnabled:   to.Ptr(true),
						GroupingEnabled: to.Ptr(true),
						Total:           to.Ptr[int32](377),
						UsageEnd:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-10-31T00:00:00-07:00"); return t }()),
						UsageStart:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-10-01T00:00:00-07:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("dimensions_ResourceType_2019-10-01_2019-10-31"),
					Type: to.Ptr("microsoft.CostManagement/dimensions"),
					ID:   to.Ptr("providers/Microsoft.Billing/billingAccounts/12345:6789/providers/microsoft.CostManagement/dimensions_ResourceType_2019-10-01_2019-10-31"),
					Properties: &armcostmanagement.DimensionProperties{
						Description:     to.Ptr("Resource type"),
						Category:        to.Ptr("ResourceType"),
						Data:            []*string{},
						FilterEnabled:   to.Ptr(true),
						GroupingEnabled: to.Ptr(true),
						Total:           to.Ptr[int32](37),
						UsageEnd:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-10-31T00:00:00-07:00"); return t }()),
						UsageStart:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-10-01T00:00:00-07:00"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DimensionsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DimensionsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/MCABillingAccountDimensionsList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/BillingAccountDimensionsListExpandAndTop.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"BillingAccountDimensionsListExpandAndTop-Legacy"},
	})
	client = armcostmanagement.NewDimensionsClient(cred, &options)
	pager = client.List("providers/Microsoft.Billing/billingAccounts/100",
		&armcostmanagement.DimensionsClientListOptions{Filter: nil,
			Expand:    to.Ptr("properties/data"),
			Skiptoken: nil,
			Top:       to.Ptr[int32](5),
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/BillingAccountDimensionsListExpandAndTop.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcostmanagement.DimensionsListResult{
			Value: []*armcostmanagement.Dimension{
				{
					Name: to.Ptr("dimensions_ResourceGroup_2018-05-01_2018-05-31_5"),
					Type: to.Ptr("microsoft.CostManagement/dimensions"),
					ID:   to.Ptr("providers/Microsoft.Billing/billingAccounts/100/providers/microsoft.CostManagement/dimensions_ResourceGroup_2018-05-01_2018-05-31_5"),
					Properties: &armcostmanagement.DimensionProperties{
						Description: to.Ptr("Resource group"),
						Category:    to.Ptr("ResourceGroup"),
						Data: []*string{
							to.Ptr("thoroetrg01"),
							to.Ptr("default-notificationhubs-westus"),
							to.Ptr("jedikeyvaultrg"),
							to.Ptr("contosocodeflow8d4a"),
							to.Ptr("noobaa")},
						FilterEnabled:   to.Ptr(true),
						GroupingEnabled: to.Ptr(true),
						Total:           to.Ptr[int32](377),
						UsageEnd:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-05-31T00:00:00-07:00"); return t }()),
						UsageStart:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-05-01T00:00:00-07:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("dimensions_ResourceType_2018-05-01_2018-05-31_5"),
					Type: to.Ptr("microsoft.CostManagement/dimensions"),
					ID:   to.Ptr("providers/Microsoft.Billing/billingAccounts/100/providers/microsoft.CostManagement/dimensions_ResourceType_2018-05-01_2018-05-31_5"),
					Properties: &armcostmanagement.DimensionProperties{
						Description: to.Ptr("Resource type"),
						Category:    to.Ptr("ResourceType"),
						Data: []*string{
							to.Ptr("microsoft.automation/automationaccounts"),
							to.Ptr("microsoft.databricks/workspaces"),
							to.Ptr("microsoft.dbformysql/servers"),
							to.Ptr("microsoft.containerregistry/registries"),
							to.Ptr("microsoft.search/searchservices")},
						FilterEnabled:   to.Ptr(true),
						GroupingEnabled: to.Ptr(true),
						Total:           to.Ptr[int32](37),
						UsageEnd:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-05-31T00:00:00-07:00"); return t }()),
						UsageStart:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-05-01T00:00:00-07:00"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DimensionsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DimensionsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/BillingAccountDimensionsListExpandAndTop.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/MCABillingAccountDimensionsListExpandAndTop.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"BillingAccountDimensionsListExpandAndTop-Modern"},
	})
	client = armcostmanagement.NewDimensionsClient(cred, &options)
	pager = client.List("providers/Microsoft.Billing/billingAccounts/12345:6789",
		&armcostmanagement.DimensionsClientListOptions{Filter: nil,
			Expand:    to.Ptr("properties/data"),
			Skiptoken: nil,
			Top:       to.Ptr[int32](5),
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/MCABillingAccountDimensionsListExpandAndTop.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcostmanagement.DimensionsListResult{
			Value: []*armcostmanagement.Dimension{
				{
					Name: to.Ptr("dimensions_ResourceGroup_2019-10-01_2019-10-31"),
					Type: to.Ptr("microsoft.CostManagement/dimensions"),
					ID:   to.Ptr("providers/Microsoft.Billing/billingAccounts/12345:6789/providers/microsoft.CostManagement/dimensions_ResourceGroup_2019-10-01_2019-10-31"),
					Properties: &armcostmanagement.DimensionProperties{
						Description: to.Ptr("Resource group"),
						Category:    to.Ptr("ResourceGroup"),
						Data: []*string{
							to.Ptr("thoroetrg01"),
							to.Ptr("default-notificationhubs-westus"),
							to.Ptr("jedikeyvaultrg"),
							to.Ptr("contosocodeflow8d4a"),
							to.Ptr("noobaa")},
						FilterEnabled:   to.Ptr(true),
						GroupingEnabled: to.Ptr(true),
						Total:           to.Ptr[int32](377),
						UsageEnd:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-10-31T00:00:00-07:00"); return t }()),
						UsageStart:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-10-01T00:00:00-07:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("dimensions_ResourceType_2019-10-01_2019-10-31"),
					Type: to.Ptr("microsoft.CostManagement/dimensions"),
					ID:   to.Ptr("providers/Microsoft.Billing/billingAccounts/12345:6789/providers/microsoft.CostManagement/dimensions_ResourceType_2019-10-01_2019-10-31"),
					Properties: &armcostmanagement.DimensionProperties{
						Description: to.Ptr("Resource type"),
						Category:    to.Ptr("ResourceType"),
						Data: []*string{
							to.Ptr("microsoft.automation/automationaccounts"),
							to.Ptr("microsoft.databricks/workspaces"),
							to.Ptr("microsoft.dbformysql/servers"),
							to.Ptr("microsoft.containerregistry/registries"),
							to.Ptr("microsoft.search/searchservices")},
						FilterEnabled:   to.Ptr(true),
						GroupingEnabled: to.Ptr(true),
						Total:           to.Ptr[int32](37),
						UsageEnd:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-10-31T00:00:00-07:00"); return t }()),
						UsageStart:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-10-01T00:00:00-07:00"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DimensionsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DimensionsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/MCABillingAccountDimensionsListExpandAndTop.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/BillingAccountDimensionsListWithFilter.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"BillingAccountDimensionsListWithFilter-Legacy"},
	})
	client = armcostmanagement.NewDimensionsClient(cred, &options)
	pager = client.List("providers/Microsoft.Billing/billingAccounts/100",
		&armcostmanagement.DimensionsClientListOptions{Filter: to.Ptr("properties/category eq 'resourceId'"),
			Expand:    to.Ptr("properties/data"),
			Skiptoken: nil,
			Top:       to.Ptr[int32](5),
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/BillingAccountDimensionsListWithFilter.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcostmanagement.DimensionsListResult{
			Value: []*armcostmanagement.Dimension{
				{
					Name: to.Ptr("dimensions_ResourceId_2018-05-01_2018-05-31_5"),
					Type: to.Ptr("microsoft.CostManagement/dimensions"),
					ID:   to.Ptr("providers/Microsoft.Billing/billingAccounts/100/providers/microsoft.CostManagement/dimensions_ResourceId_2018-05-01_2018-05-31_5"),
					Properties: &armcostmanagement.DimensionProperties{
						Description: to.Ptr("Resource Id"),
						Category:    to.Ptr("ResourceId"),
						Data: []*string{
							to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/system.orlando/providers/microsoft.storage/storageaccounts/urphealthaccount"),
							to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/system.orlando/providers/microsoft.storage/storageaccounts/srphytenaccount"),
							to.Ptr("/subscriptions/67e24f6b-1ec2-4c90-993a-dc2d25b00b6c/resourcegroups/defaultresourcegroup-eus/providers/microsoft.operationalinsights/workspaces/defaultworkspace-67e24f6b-1ec2-4c90-993a-dc2d25b00b6c-eus"),
							to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/rg-sql-ha/providers/microsoft.compute/virtualmachines/sql-4qqp1"),
							to.Ptr("/subscriptions/a98d6dc5-eb8f-46cf-8938-f1fb08f03706/resourcegroups/databricks-rg-testwsp-xijmsdubneexm/providers/microsoft.compute/disks/488cdb42bf74474a98075415be3f806c-containerrootvolume")},
						FilterEnabled:   to.Ptr(true),
						GroupingEnabled: to.Ptr(true),
						Total:           to.Ptr[int32](1409),
						UsageEnd:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-05-31T00:00:00-07:00"); return t }()),
						UsageStart:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-05-01T00:00:00-07:00"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DimensionsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DimensionsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/BillingAccountDimensionsListWithFilter.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/MCABillingAccountDimensionsListWithFilter.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"BillingAccountDimensionsListWithFilter-Modern"},
	})
	client = armcostmanagement.NewDimensionsClient(cred, &options)
	pager = client.List("providers/Microsoft.Billing/billingAccounts/12345:6789",
		&armcostmanagement.DimensionsClientListOptions{Filter: to.Ptr("properties/category eq 'resourceId'"),
			Expand:    to.Ptr("properties/data"),
			Skiptoken: nil,
			Top:       to.Ptr[int32](5),
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/MCABillingAccountDimensionsListWithFilter.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcostmanagement.DimensionsListResult{
			Value: []*armcostmanagement.Dimension{
				{
					Name: to.Ptr("dimensions_ResourceId_2019-10-01_2019-10-31"),
					Type: to.Ptr("microsoft.CostManagement/dimensions"),
					ID:   to.Ptr("providers/Microsoft.Billing/billingAccounts/12345:6789/providers/microsoft.CostManagement/dimensions_ResourceId_2019-10-01_2019-10-31"),
					Properties: &armcostmanagement.DimensionProperties{
						Description: to.Ptr("Resource Id"),
						Category:    to.Ptr("ResourceId"),
						Data: []*string{
							to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/system.orlando/providers/microsoft.storage/storageaccounts/urphealthaccount"),
							to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/system.orlando/providers/microsoft.storage/storageaccounts/srphytenaccount"),
							to.Ptr("/subscriptions/67e24f6b-1ec2-4c90-993a-dc2d25b00b6c/resourcegroups/defaultresourcegroup-eus/providers/microsoft.operationalinsights/workspaces/defaultworkspace-67e24f6b-1ec2-4c90-993a-dc2d25b00b6c-eus"),
							to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/rg-sql-ha/providers/microsoft.compute/virtualmachines/sql-4qqp1"),
							to.Ptr("/subscriptions/a98d6dc5-eb8f-46cf-8938-f1fb08f03706/resourcegroups/databricks-rg-testwsp-xijmsdubneexm/providers/microsoft.compute/disks/488cdb42bf74474a98075415be3f806c-containerrootvolume")},
						FilterEnabled:   to.Ptr(true),
						GroupingEnabled: to.Ptr(true),
						Total:           to.Ptr[int32](1409),
						UsageEnd:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-10-31T00:00:00-07:00"); return t }()),
						UsageStart:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-10-01T00:00:00-07:00"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DimensionsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DimensionsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/MCABillingAccountDimensionsListWithFilter.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/MCABillingProfileDimensionsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"BillingProfileDimensionsList-Modern"},
	})
	client = armcostmanagement.NewDimensionsClient(cred, &options)
	pager = client.List("providers/Microsoft.Billing/billingAccounts/12345:6789/billingProfiles/13579",
		&armcostmanagement.DimensionsClientListOptions{Filter: nil,
			Expand:    nil,
			Skiptoken: nil,
			Top:       nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/MCABillingProfileDimensionsList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcostmanagement.DimensionsListResult{
			Value: []*armcostmanagement.Dimension{
				{
					Name: to.Ptr("dimensions_ResourceGroup_2019-10-01_2019-10-31"),
					Type: to.Ptr("microsoft.CostManagement/dimensions"),
					ID:   to.Ptr("providers/Microsoft.Billing/billingAccounts/12345:6789/billingProfiles/13579/providers/microsoft.CostManagement/dimensions_ResourceGroup_2019-10-01_2019-10-31"),
					Properties: &armcostmanagement.DimensionProperties{
						Description:     to.Ptr("Resource group"),
						Category:        to.Ptr("ResourceGroup"),
						Data:            []*string{},
						FilterEnabled:   to.Ptr(true),
						GroupingEnabled: to.Ptr(true),
						Total:           to.Ptr[int32](377),
						UsageEnd:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-10-31T00:00:00-07:00"); return t }()),
						UsageStart:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-10-01T00:00:00-07:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("dimensions_ResourceType_2019-10-01_2019-10-31"),
					Type: to.Ptr("microsoft.CostManagement/dimensions"),
					ID:   to.Ptr("providers/Microsoft.Billing/billingAccounts/12345:6789/billingProfiles/13579/providers/microsoft.CostManagement/dimensions_ResourceType_2019-10-01_2019-10-31"),
					Properties: &armcostmanagement.DimensionProperties{
						Description:     to.Ptr("Resource type"),
						Category:        to.Ptr("ResourceType"),
						Data:            []*string{},
						FilterEnabled:   to.Ptr(true),
						GroupingEnabled: to.Ptr(true),
						Total:           to.Ptr[int32](37),
						UsageEnd:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-10-31T00:00:00-07:00"); return t }()),
						UsageStart:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-10-01T00:00:00-07:00"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DimensionsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DimensionsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/MCABillingProfileDimensionsList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/MCABillingProfileDimensionsListExpandAndTop.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"BillingProfileDimensionsListExpandAndTop-Modern"},
	})
	client = armcostmanagement.NewDimensionsClient(cred, &options)
	pager = client.List("providers/Microsoft.Billing/billingAccounts/12345:6789/billingProfiles/13579",
		&armcostmanagement.DimensionsClientListOptions{Filter: nil,
			Expand:    to.Ptr("properties/data"),
			Skiptoken: nil,
			Top:       to.Ptr[int32](5),
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/MCABillingProfileDimensionsListExpandAndTop.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcostmanagement.DimensionsListResult{
			Value: []*armcostmanagement.Dimension{
				{
					Name: to.Ptr("dimensions_ResourceGroup_2019-10-01_2019-10-31"),
					Type: to.Ptr("microsoft.CostManagement/dimensions"),
					ID:   to.Ptr("providers/Microsoft.Billing/billingAccounts/12345:6789/billingProfiles/13579/providers/microsoft.CostManagement/dimensions_ResourceGroup_2019-10-01_2019-10-31"),
					Properties: &armcostmanagement.DimensionProperties{
						Description: to.Ptr("Resource group"),
						Category:    to.Ptr("ResourceGroup"),
						Data: []*string{
							to.Ptr("thoroetrg01"),
							to.Ptr("default-notificationhubs-westus"),
							to.Ptr("jedikeyvaultrg"),
							to.Ptr("contosocodeflow8d4a"),
							to.Ptr("noobaa")},
						FilterEnabled:   to.Ptr(true),
						GroupingEnabled: to.Ptr(true),
						Total:           to.Ptr[int32](377),
						UsageEnd:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-10-31T00:00:00-07:00"); return t }()),
						UsageStart:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-10-01T00:00:00-07:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("dimensions_ResourceType_2019-10-01_2019-10-31"),
					Type: to.Ptr("microsoft.CostManagement/dimensions"),
					ID:   to.Ptr("providers/Microsoft.Billing/billingAccounts/12345:6789/billingProfiles/13579/providers/microsoft.CostManagement/dimensions_ResourceType_2019-10-01_2019-10-31"),
					Properties: &armcostmanagement.DimensionProperties{
						Description: to.Ptr("Resource type"),
						Category:    to.Ptr("ResourceType"),
						Data: []*string{
							to.Ptr("microsoft.automation/automationaccounts"),
							to.Ptr("microsoft.databricks/workspaces"),
							to.Ptr("microsoft.dbformysql/servers"),
							to.Ptr("microsoft.containerregistry/registries"),
							to.Ptr("microsoft.search/searchservices")},
						FilterEnabled:   to.Ptr(true),
						GroupingEnabled: to.Ptr(true),
						Total:           to.Ptr[int32](37),
						UsageEnd:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-10-31T00:00:00-07:00"); return t }()),
						UsageStart:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-10-01T00:00:00-07:00"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DimensionsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DimensionsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/MCABillingProfileDimensionsListExpandAndTop.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/MCABillingProfileDimensionsListWithFilter.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"BillingProfileDimensionsListWithFilter-Modern"},
	})
	client = armcostmanagement.NewDimensionsClient(cred, &options)
	pager = client.List("providers/Microsoft.Billing/billingAccounts/12345:6789/billingProfiles/13579",
		&armcostmanagement.DimensionsClientListOptions{Filter: to.Ptr("properties/category eq 'resourceId'"),
			Expand:    to.Ptr("properties/data"),
			Skiptoken: nil,
			Top:       to.Ptr[int32](5),
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/MCABillingProfileDimensionsListWithFilter.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcostmanagement.DimensionsListResult{
			Value: []*armcostmanagement.Dimension{
				{
					Name: to.Ptr("dimensions_ResourceId_2019-10-01_2019-10-31"),
					Type: to.Ptr("microsoft.CostManagement/dimensions"),
					ID:   to.Ptr("providers/Microsoft.Billing/billingAccounts/12345:6789/billingProfiles/13579/providers/microsoft.CostManagement/dimensions_ResourceId_2019-10-01_2019-10-31"),
					Properties: &armcostmanagement.DimensionProperties{
						Description: to.Ptr("Resource Id"),
						Category:    to.Ptr("ResourceId"),
						Data: []*string{
							to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/system.orlando/providers/microsoft.storage/storageaccounts/urphealthaccount"),
							to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/system.orlando/providers/microsoft.storage/storageaccounts/srphytenaccount"),
							to.Ptr("/subscriptions/67e24f6b-1ec2-4c90-993a-dc2d25b00b6c/resourcegroups/defaultresourcegroup-eus/providers/microsoft.operationalinsights/workspaces/defaultworkspace-67e24f6b-1ec2-4c90-993a-dc2d25b00b6c-eus"),
							to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/rg-sql-ha/providers/microsoft.compute/virtualmachines/sql-4qqp1"),
							to.Ptr("/subscriptions/a98d6dc5-eb8f-46cf-8938-f1fb08f03706/resourcegroups/databricks-rg-testwsp-xijmsdubneexm/providers/microsoft.compute/disks/488cdb42bf74474a98075415be3f806c-containerrootvolume")},
						FilterEnabled:   to.Ptr(true),
						GroupingEnabled: to.Ptr(true),
						Total:           to.Ptr[int32](1409),
						UsageEnd:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-10-31T00:00:00-07:00"); return t }()),
						UsageStart:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-10-01T00:00:00-07:00"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DimensionsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DimensionsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/MCABillingProfileDimensionsListWithFilter.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/MCACustomerDimensionsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CustomerDimensionsList-Modern"},
	})
	client = armcostmanagement.NewDimensionsClient(cred, &options)
	pager = client.List("providers/Microsoft.Billing/billingAccounts/12345:6789/customers/5678",
		&armcostmanagement.DimensionsClientListOptions{Filter: nil,
			Expand:    nil,
			Skiptoken: nil,
			Top:       nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/MCACustomerDimensionsList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcostmanagement.DimensionsListResult{
			Value: []*armcostmanagement.Dimension{
				{
					Name: to.Ptr("dimensions_ResourceGroup_2019-10-01_2019-10-31"),
					Type: to.Ptr("microsoft.CostManagement/dimensions"),
					ID:   to.Ptr("providers/Microsoft.Billing/billingAccounts/12345:6789/customers/5678/providers/microsoft.CostManagement/dimensions_ResourceGroup_2019-10-01_2019-10-31"),
					Properties: &armcostmanagement.DimensionProperties{
						Description:     to.Ptr("Resource group"),
						Category:        to.Ptr("ResourceGroup"),
						Data:            []*string{},
						FilterEnabled:   to.Ptr(true),
						GroupingEnabled: to.Ptr(true),
						Total:           to.Ptr[int32](377),
						UsageEnd:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-10-31T00:00:00-07:00"); return t }()),
						UsageStart:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-10-01T00:00:00-07:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("dimensions_ResourceType_2019-10-01_2019-10-31"),
					Type: to.Ptr("microsoft.CostManagement/dimensions"),
					ID:   to.Ptr("providers/Microsoft.Billing/billingAccounts/12345:6789/customers/5678/providers/microsoft.CostManagement/dimensions_ResourceType_2019-10-01_2019-10-31"),
					Properties: &armcostmanagement.DimensionProperties{
						Description:     to.Ptr("Resource type"),
						Category:        to.Ptr("ResourceType"),
						Data:            []*string{},
						FilterEnabled:   to.Ptr(true),
						GroupingEnabled: to.Ptr(true),
						Total:           to.Ptr[int32](37),
						UsageEnd:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-10-31T00:00:00-07:00"); return t }()),
						UsageStart:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-10-01T00:00:00-07:00"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DimensionsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DimensionsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/MCACustomerDimensionsList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/MCACustomerDimensionsListExpandAndTop.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CustomerDimensionsListExpandAndTop-Modern"},
	})
	client = armcostmanagement.NewDimensionsClient(cred, &options)
	pager = client.List("providers/Microsoft.Billing/billingAccounts/12345:6789/customers/5678",
		&armcostmanagement.DimensionsClientListOptions{Filter: nil,
			Expand:    to.Ptr("properties/data"),
			Skiptoken: nil,
			Top:       to.Ptr[int32](5),
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/MCACustomerDimensionsListExpandAndTop.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcostmanagement.DimensionsListResult{
			Value: []*armcostmanagement.Dimension{
				{
					Name: to.Ptr("dimensions_ResourceGroup_2019-10-01_2019-10-31"),
					Type: to.Ptr("microsoft.CostManagement/dimensions"),
					ID:   to.Ptr("providers/Microsoft.Billing/billingAccounts/12345:6789/customers/5678/providers/microsoft.CostManagement/dimensions_ResourceGroup_2019-10-01_2019-10-31"),
					Properties: &armcostmanagement.DimensionProperties{
						Description: to.Ptr("Resource group"),
						Category:    to.Ptr("ResourceGroup"),
						Data: []*string{
							to.Ptr("thoroetrg01"),
							to.Ptr("default-notificationhubs-westus"),
							to.Ptr("jedikeyvaultrg"),
							to.Ptr("contosocodeflow8d4a"),
							to.Ptr("noobaa")},
						FilterEnabled:   to.Ptr(true),
						GroupingEnabled: to.Ptr(true),
						Total:           to.Ptr[int32](377),
						UsageEnd:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-10-31T00:00:00-07:00"); return t }()),
						UsageStart:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-10-01T00:00:00-07:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("dimensions_ResourceType_2019-10-01_2019-10-31"),
					Type: to.Ptr("microsoft.CostManagement/dimensions"),
					ID:   to.Ptr("providers/Microsoft.Billing/billingAccounts/12345:6789/customers/5678/providers/microsoft.CostManagement/dimensions_ResourceType_2019-10-01_2019-10-31"),
					Properties: &armcostmanagement.DimensionProperties{
						Description: to.Ptr("Resource type"),
						Category:    to.Ptr("ResourceType"),
						Data: []*string{
							to.Ptr("microsoft.automation/automationaccounts"),
							to.Ptr("microsoft.databricks/workspaces"),
							to.Ptr("microsoft.dbformysql/servers"),
							to.Ptr("microsoft.containerregistry/registries"),
							to.Ptr("microsoft.search/searchservices")},
						FilterEnabled:   to.Ptr(true),
						GroupingEnabled: to.Ptr(true),
						Total:           to.Ptr[int32](37),
						UsageEnd:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-10-31T00:00:00-07:00"); return t }()),
						UsageStart:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-10-01T00:00:00-07:00"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DimensionsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DimensionsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/MCACustomerDimensionsListExpandAndTop.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/MCACustomerDimensionsListWithFilter.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CustomerDimensionsListWithFilter-Modern"},
	})
	client = armcostmanagement.NewDimensionsClient(cred, &options)
	pager = client.List("providers/Microsoft.Billing/billingAccounts/12345:6789/customers/5678",
		&armcostmanagement.DimensionsClientListOptions{Filter: to.Ptr("properties/category eq 'resourceId'"),
			Expand:    to.Ptr("properties/data"),
			Skiptoken: nil,
			Top:       to.Ptr[int32](5),
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/MCACustomerDimensionsListWithFilter.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcostmanagement.DimensionsListResult{
			Value: []*armcostmanagement.Dimension{
				{
					Name: to.Ptr("dimensions_ResourceId_2019-10-01_2019-10-31"),
					Type: to.Ptr("microsoft.CostManagement/dimensions"),
					ID:   to.Ptr("providers/Microsoft.Billing/billingAccounts/12345:6789/customers/5678/providers/microsoft.CostManagement/dimensions_ResourceId_2019-10-01_2019-10-31"),
					Properties: &armcostmanagement.DimensionProperties{
						Description: to.Ptr("Resource Id"),
						Category:    to.Ptr("ResourceId"),
						Data: []*string{
							to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/system.orlando/providers/microsoft.storage/storageaccounts/urphealthaccount"),
							to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/system.orlando/providers/microsoft.storage/storageaccounts/srphytenaccount"),
							to.Ptr("/subscriptions/67e24f6b-1ec2-4c90-993a-dc2d25b00b6c/resourcegroups/defaultresourcegroup-eus/providers/microsoft.operationalinsights/workspaces/defaultworkspace-67e24f6b-1ec2-4c90-993a-dc2d25b00b6c-eus"),
							to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/rg-sql-ha/providers/microsoft.compute/virtualmachines/sql-4qqp1"),
							to.Ptr("/subscriptions/a98d6dc5-eb8f-46cf-8938-f1fb08f03706/resourcegroups/databricks-rg-testwsp-xijmsdubneexm/providers/microsoft.compute/disks/488cdb42bf74474a98075415be3f806c-containerrootvolume")},
						FilterEnabled:   to.Ptr(true),
						GroupingEnabled: to.Ptr(true),
						Total:           to.Ptr[int32](1409),
						UsageEnd:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-10-31T00:00:00-07:00"); return t }()),
						UsageStart:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-10-01T00:00:00-07:00"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DimensionsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DimensionsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/MCACustomerDimensionsListWithFilter.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/DepartmentDimensionsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DepartmentDimensionsList-Legacy"},
	})
	client = armcostmanagement.NewDimensionsClient(cred, &options)
	pager = client.List("providers/Microsoft.Billing/billingAccounts/100/departments/123",
		&armcostmanagement.DimensionsClientListOptions{Filter: nil,
			Expand:    nil,
			Skiptoken: nil,
			Top:       nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/DepartmentDimensionsList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcostmanagement.DimensionsListResult{
			Value: []*armcostmanagement.Dimension{
				{
					Name: to.Ptr("dimensions_ResourceGroup_2018-05-01_2018-05-31"),
					Type: to.Ptr("microsoft.CostManagement/dimensions"),
					ID:   to.Ptr("providers/Microsoft.Billing/billingAccounts/100/departments/123/providers/microsoft.CostManagement/dimensions_ResourceGroup_2018-05-01_2018-05-31"),
					Properties: &armcostmanagement.DimensionProperties{
						Description:     to.Ptr("Resource group"),
						Category:        to.Ptr("ResourceGroup"),
						Data:            []*string{},
						FilterEnabled:   to.Ptr(true),
						GroupingEnabled: to.Ptr(true),
						Total:           to.Ptr[int32](377),
						UsageEnd:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-05-31T00:00:00-07:00"); return t }()),
						UsageStart:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-05-01T00:00:00-07:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("dimensions_ResourceType_2018-05-01_2018-05-31"),
					Type: to.Ptr("microsoft.CostManagement/dimensions"),
					ID:   to.Ptr("providers/Microsoft.Billing/billingAccounts/100/departments/123/providers/microsoft.CostManagement/dimensions_ResourceType_2018-05-01_2018-05-31"),
					Properties: &armcostmanagement.DimensionProperties{
						Description:     to.Ptr("Resource type"),
						Category:        to.Ptr("ResourceType"),
						Data:            []*string{},
						FilterEnabled:   to.Ptr(true),
						GroupingEnabled: to.Ptr(true),
						Total:           to.Ptr[int32](37),
						UsageEnd:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-05-31T00:00:00-07:00"); return t }()),
						UsageStart:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-05-01T00:00:00-07:00"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DimensionsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DimensionsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/DepartmentDimensionsList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/DepartmentDimensionsListExpandAndTop.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DepartmentDimensionsListExpandAndTop-Legacy"},
	})
	client = armcostmanagement.NewDimensionsClient(cred, &options)
	pager = client.List("providers/Microsoft.Billing/billingAccounts/100/departments/123",
		&armcostmanagement.DimensionsClientListOptions{Filter: nil,
			Expand:    to.Ptr("properties/data"),
			Skiptoken: nil,
			Top:       to.Ptr[int32](5),
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/DepartmentDimensionsListExpandAndTop.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcostmanagement.DimensionsListResult{
			Value: []*armcostmanagement.Dimension{
				{
					Name: to.Ptr("dimensions_ResourceGroup_2018-05-01_2018-05-31_5"),
					Type: to.Ptr("microsoft.CostManagement/dimensions"),
					ID:   to.Ptr("providers/Microsoft.Billing/billingAccounts/100/departments/123/providers/microsoft.CostManagement/dimensions_ResourceGroup_2018-05-01_2018-05-31_5"),
					Properties: &armcostmanagement.DimensionProperties{
						Description: to.Ptr("Resource group"),
						Category:    to.Ptr("ResourceGroup"),
						Data: []*string{
							to.Ptr("thoroetrg01"),
							to.Ptr("default-notificationhubs-westus"),
							to.Ptr("jedikeyvaultrg"),
							to.Ptr("contosocodeflow8d4a"),
							to.Ptr("noobaa")},
						FilterEnabled:   to.Ptr(true),
						GroupingEnabled: to.Ptr(true),
						Total:           to.Ptr[int32](377),
						UsageEnd:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-05-31T00:00:00-07:00"); return t }()),
						UsageStart:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-05-01T00:00:00-07:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("dimensions_ResourceType_2018-05-01_2018-05-31_5"),
					Type: to.Ptr("microsoft.CostManagement/dimensions"),
					ID:   to.Ptr("providers/Microsoft.Billing/billingAccounts/100/departments/123/providers/microsoft.CostManagement/dimensions_ResourceType_2018-05-01_2018-05-31_5"),
					Properties: &armcostmanagement.DimensionProperties{
						Description: to.Ptr("Resource type"),
						Category:    to.Ptr("ResourceType"),
						Data: []*string{
							to.Ptr("microsoft.automation/automationaccounts"),
							to.Ptr("microsoft.databricks/workspaces"),
							to.Ptr("microsoft.dbformysql/servers"),
							to.Ptr("microsoft.containerregistry/registries"),
							to.Ptr("microsoft.search/searchservices")},
						FilterEnabled:   to.Ptr(true),
						GroupingEnabled: to.Ptr(true),
						Total:           to.Ptr[int32](37),
						UsageEnd:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-05-31T00:00:00-07:00"); return t }()),
						UsageStart:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-05-01T00:00:00-07:00"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DimensionsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DimensionsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/DepartmentDimensionsListExpandAndTop.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/DepartmentDimensionsListWithFilter.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DepartmentDimensionsListWithFilter-Legacy"},
	})
	client = armcostmanagement.NewDimensionsClient(cred, &options)
	pager = client.List("providers/Microsoft.Billing/billingAccounts/100/departments/123",
		&armcostmanagement.DimensionsClientListOptions{Filter: to.Ptr("properties/category eq 'resourceId'"),
			Expand:    to.Ptr("properties/data"),
			Skiptoken: nil,
			Top:       to.Ptr[int32](5),
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/DepartmentDimensionsListWithFilter.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcostmanagement.DimensionsListResult{
			Value: []*armcostmanagement.Dimension{
				{
					Name: to.Ptr("dimensions_ResourceId_2018-05-01_2018-05-31_5"),
					Type: to.Ptr("microsoft.CostManagement/dimensions"),
					ID:   to.Ptr("providers/Microsoft.Billing/billingAccounts/100/departments/123/providers/microsoft.CostManagement/dimensions_ResourceId_2018-05-01_2018-05-31_5"),
					Properties: &armcostmanagement.DimensionProperties{
						Description: to.Ptr("Resource Id"),
						Category:    to.Ptr("ResourceId"),
						Data: []*string{
							to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/system.orlando/providers/microsoft.storage/storageaccounts/urphealthaccount"),
							to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/system.orlando/providers/microsoft.storage/storageaccounts/srphytenaccount"),
							to.Ptr("/subscriptions/67e24f6b-1ec2-4c90-993a-dc2d25b00b6c/resourcegroups/defaultresourcegroup-eus/providers/microsoft.operationalinsights/workspaces/defaultworkspace-67e24f6b-1ec2-4c90-993a-dc2d25b00b6c-eus"),
							to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/rg-sql-ha/providers/microsoft.compute/virtualmachines/sql-4qqp1"),
							to.Ptr("/subscriptions/a98d6dc5-eb8f-46cf-8938-f1fb08f03706/resourcegroups/databricks-rg-testwsp-xijmsdubneexm/providers/microsoft.compute/disks/488cdb42bf74474a98075415be3f806c-containerrootvolume")},
						FilterEnabled:   to.Ptr(true),
						GroupingEnabled: to.Ptr(true),
						Total:           to.Ptr[int32](1409),
						UsageEnd:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-05-31T00:00:00-07:00"); return t }()),
						UsageStart:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-05-01T00:00:00-07:00"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DimensionsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DimensionsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/DepartmentDimensionsListWithFilter.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/EnrollmentAccountDimensionsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"EnrollmentAccountDimensionsList-Legacy"},
	})
	client = armcostmanagement.NewDimensionsClient(cred, &options)
	pager = client.List("providers/Microsoft.Billing/billingAccounts/100/enrollmentAccounts/456",
		&armcostmanagement.DimensionsClientListOptions{Filter: nil,
			Expand:    nil,
			Skiptoken: nil,
			Top:       nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/EnrollmentAccountDimensionsList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcostmanagement.DimensionsListResult{
			Value: []*armcostmanagement.Dimension{
				{
					Name: to.Ptr("dimensions_ResourceGroup_2018-05-01_2018-05-31"),
					Type: to.Ptr("microsoft.CostManagement/dimensions"),
					ID:   to.Ptr("providers/Microsoft.Billing/billingAccounts/100/enrollmentAccounts/456/providers/microsoft.CostManagement/dimensions_ResourceGroup_2018-05-01_2018-05-31"),
					Properties: &armcostmanagement.DimensionProperties{
						Description:     to.Ptr("Resource group"),
						Category:        to.Ptr("ResourceGroup"),
						Data:            []*string{},
						FilterEnabled:   to.Ptr(true),
						GroupingEnabled: to.Ptr(true),
						Total:           to.Ptr[int32](377),
						UsageEnd:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-05-31T00:00:00-07:00"); return t }()),
						UsageStart:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-05-01T00:00:00-07:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("dimensions_ResourceType_2018-05-01_2018-05-31"),
					Type: to.Ptr("microsoft.CostManagement/dimensions"),
					ID:   to.Ptr("providers/Microsoft.Billing/billingAccounts/100/enrollmentAccounts/456/providers/microsoft.CostManagement/dimensions_ResourceType_2018-05-01_2018-05-31"),
					Properties: &armcostmanagement.DimensionProperties{
						Description:     to.Ptr("Resource type"),
						Category:        to.Ptr("ResourceType"),
						Data:            []*string{},
						FilterEnabled:   to.Ptr(true),
						GroupingEnabled: to.Ptr(true),
						Total:           to.Ptr[int32](37),
						UsageEnd:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-05-31T00:00:00-07:00"); return t }()),
						UsageStart:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-05-01T00:00:00-07:00"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DimensionsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DimensionsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/EnrollmentAccountDimensionsList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/EnrollmentAccountDimensionsListExpandAndTop.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"EnrollmentAccountDimensionsListExpandAndTop-Legacy"},
	})
	client = armcostmanagement.NewDimensionsClient(cred, &options)
	pager = client.List("providers/Microsoft.Billing/billingAccounts/100/enrollmentAccounts/456",
		&armcostmanagement.DimensionsClientListOptions{Filter: nil,
			Expand:    to.Ptr("properties/data"),
			Skiptoken: nil,
			Top:       to.Ptr[int32](5),
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/EnrollmentAccountDimensionsListExpandAndTop.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcostmanagement.DimensionsListResult{
			Value: []*armcostmanagement.Dimension{
				{
					Name: to.Ptr("dimensions_ResourceGroup_2018-05-01_2018-05-31_5"),
					Type: to.Ptr("microsoft.CostManagement/dimensions"),
					ID:   to.Ptr("providers/Microsoft.Billing/billingAccounts/100/enrollmentAccounts/456/providers/microsoft.CostManagement/dimensions_ResourceGroup_2018-05-01_2018-05-31_5"),
					Properties: &armcostmanagement.DimensionProperties{
						Description: to.Ptr("Resource group"),
						Category:    to.Ptr("ResourceGroup"),
						Data: []*string{
							to.Ptr("thoroetrg01"),
							to.Ptr("default-notificationhubs-westus"),
							to.Ptr("jedikeyvaultrg"),
							to.Ptr("contosocodeflow8d4a"),
							to.Ptr("noobaa")},
						FilterEnabled:   to.Ptr(true),
						GroupingEnabled: to.Ptr(true),
						Total:           to.Ptr[int32](377),
						UsageEnd:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-05-31T00:00:00-07:00"); return t }()),
						UsageStart:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-05-01T00:00:00-07:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("dimensions_ResourceType_2018-05-01_2018-05-31_5"),
					Type: to.Ptr("microsoft.CostManagement/dimensions"),
					ID:   to.Ptr("providers/Microsoft.Billing/billingAccounts/100/enrollmentAccounts/456/providers/microsoft.CostManagement/dimensions_ResourceType_2018-05-01_2018-05-31_5"),
					Properties: &armcostmanagement.DimensionProperties{
						Description: to.Ptr("Resource type"),
						Category:    to.Ptr("ResourceType"),
						Data: []*string{
							to.Ptr("microsoft.automation/automationaccounts"),
							to.Ptr("microsoft.databricks/workspaces"),
							to.Ptr("microsoft.dbformysql/servers"),
							to.Ptr("microsoft.containerregistry/registries"),
							to.Ptr("microsoft.search/searchservices")},
						FilterEnabled:   to.Ptr(true),
						GroupingEnabled: to.Ptr(true),
						Total:           to.Ptr[int32](37),
						UsageEnd:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-05-31T00:00:00-07:00"); return t }()),
						UsageStart:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-05-01T00:00:00-07:00"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DimensionsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DimensionsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/EnrollmentAccountDimensionsListExpandAndTop.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/EnrollmentAccountDimensionsListWithFilter.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"EnrollmentAccountDimensionsListWithFilter-Legacy"},
	})
	client = armcostmanagement.NewDimensionsClient(cred, &options)
	pager = client.List("providers/Microsoft.Billing/billingAccounts/100/enrollmentAccounts/456",
		&armcostmanagement.DimensionsClientListOptions{Filter: to.Ptr("properties/category eq 'resourceId'"),
			Expand:    to.Ptr("properties/data"),
			Skiptoken: nil,
			Top:       to.Ptr[int32](5),
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/EnrollmentAccountDimensionsListWithFilter.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcostmanagement.DimensionsListResult{
			Value: []*armcostmanagement.Dimension{
				{
					Name: to.Ptr("dimensions_ResourceId_2018-05-01_2018-05-31_5"),
					Type: to.Ptr("microsoft.CostManagement/dimensions"),
					ID:   to.Ptr("providers/Microsoft.Billing/billingAccounts/100/enrollmentAccounts/456/providers/microsoft.CostManagement/dimensions_ResourceId_2018-05-01_2018-05-31_5"),
					Properties: &armcostmanagement.DimensionProperties{
						Description: to.Ptr("Resource Id"),
						Category:    to.Ptr("ResourceId"),
						Data: []*string{
							to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/system.orlando/providers/microsoft.storage/storageaccounts/urphealthaccount"),
							to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/system.orlando/providers/microsoft.storage/storageaccounts/srphytenaccount"),
							to.Ptr("/subscriptions/67e24f6b-1ec2-4c90-993a-dc2d25b00b6c/resourcegroups/defaultresourcegroup-eus/providers/microsoft.operationalinsights/workspaces/defaultworkspace-67e24f6b-1ec2-4c90-993a-dc2d25b00b6c-eus"),
							to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/rg-sql-ha/providers/microsoft.compute/virtualmachines/sql-4qqp1"),
							to.Ptr("/subscriptions/a98d6dc5-eb8f-46cf-8938-f1fb08f03706/resourcegroups/databricks-rg-testwsp-xijmsdubneexm/providers/microsoft.compute/disks/488cdb42bf74474a98075415be3f806c-containerrootvolume")},
						FilterEnabled:   to.Ptr(true),
						GroupingEnabled: to.Ptr(true),
						Total:           to.Ptr[int32](1409),
						UsageEnd:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-05-31T00:00:00-07:00"); return t }()),
						UsageStart:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-05-01T00:00:00-07:00"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DimensionsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DimensionsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/EnrollmentAccountDimensionsListWithFilter.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/MCAInvoiceSectionDimensionsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"InvoiceSectionDimensionsList-Modern"},
	})
	client = armcostmanagement.NewDimensionsClient(cred, &options)
	pager = client.List("providers/Microsoft.Billing/billingAccounts/12345:6789/billingProfiles/13579/invoiceSections/9876",
		&armcostmanagement.DimensionsClientListOptions{Filter: nil,
			Expand:    nil,
			Skiptoken: nil,
			Top:       nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/MCAInvoiceSectionDimensionsList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcostmanagement.DimensionsListResult{
			Value: []*armcostmanagement.Dimension{
				{
					Name: to.Ptr("dimensions_ResourceGroup_2019-10-01_2019-10-31"),
					Type: to.Ptr("microsoft.CostManagement/dimensions"),
					ID:   to.Ptr("providers/Microsoft.Billing/billingAccounts/12345:6789/billingProfiles/13579/invoiceSections/9876/providers/microsoft.CostManagement/dimensions_ResourceGroup_2019-10-01_2019-10-31"),
					Properties: &armcostmanagement.DimensionProperties{
						Description:     to.Ptr("Resource group"),
						Category:        to.Ptr("ResourceGroup"),
						Data:            []*string{},
						FilterEnabled:   to.Ptr(true),
						GroupingEnabled: to.Ptr(true),
						Total:           to.Ptr[int32](377),
						UsageEnd:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-10-31T00:00:00-07:00"); return t }()),
						UsageStart:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-10-01T00:00:00-07:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("dimensions_ResourceType_2019-10-01_2019-10-31"),
					Type: to.Ptr("microsoft.CostManagement/dimensions"),
					ID:   to.Ptr("providers/Microsoft.Billing/billingAccounts/12345:6789/billingProfiles/13579/invoiceSections/9876/providers/microsoft.CostManagement/dimensions_ResourceType_2019-10-01_2019-10-31"),
					Properties: &armcostmanagement.DimensionProperties{
						Description:     to.Ptr("Resource type"),
						Category:        to.Ptr("ResourceType"),
						Data:            []*string{},
						FilterEnabled:   to.Ptr(true),
						GroupingEnabled: to.Ptr(true),
						Total:           to.Ptr[int32](37),
						UsageEnd:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-10-31T00:00:00-07:00"); return t }()),
						UsageStart:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-10-01T00:00:00-07:00"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DimensionsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DimensionsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/MCAInvoiceSectionDimensionsList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/MCAInvoiceSectionDimensionsListExpandAndTop.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"InvoiceSectionDimensionsListExpandAndTop-Modern"},
	})
	client = armcostmanagement.NewDimensionsClient(cred, &options)
	pager = client.List("providers/Microsoft.Billing/billingAccounts/12345:6789/billingProfiles/13579/invoiceSections/9876",
		&armcostmanagement.DimensionsClientListOptions{Filter: nil,
			Expand:    to.Ptr("properties/data"),
			Skiptoken: nil,
			Top:       to.Ptr[int32](5),
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/MCAInvoiceSectionDimensionsListExpandAndTop.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcostmanagement.DimensionsListResult{
			Value: []*armcostmanagement.Dimension{
				{
					Name: to.Ptr("dimensions_ResourceGroup_2019-10-01_2019-10-31"),
					Type: to.Ptr("microsoft.CostManagement/dimensions"),
					ID:   to.Ptr("providers/Microsoft.Billing/billingAccounts/12345:6789/billingProfiles/13579/invoiceSections/9876/providers/microsoft.CostManagement/dimensions_ResourceGroup_2019-10-01_2019-10-31"),
					Properties: &armcostmanagement.DimensionProperties{
						Description: to.Ptr("Resource group"),
						Category:    to.Ptr("ResourceGroup"),
						Data: []*string{
							to.Ptr("thoroetrg01"),
							to.Ptr("default-notificationhubs-westus"),
							to.Ptr("jedikeyvaultrg"),
							to.Ptr("contosocodeflow8d4a"),
							to.Ptr("noobaa")},
						FilterEnabled:   to.Ptr(true),
						GroupingEnabled: to.Ptr(true),
						Total:           to.Ptr[int32](377),
						UsageEnd:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-10-31T00:00:00-07:00"); return t }()),
						UsageStart:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-10-01T00:00:00-07:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("dimensions_ResourceType_2019-10-01_2019-10-31"),
					Type: to.Ptr("microsoft.CostManagement/dimensions"),
					ID:   to.Ptr("providers/Microsoft.Billing/billingAccounts/12345:6789/billingProfiles/13579/invoiceSections/9876/providers/microsoft.CostManagement/dimensions_ResourceType_2019-10-01_2019-10-31"),
					Properties: &armcostmanagement.DimensionProperties{
						Description: to.Ptr("Resource type"),
						Category:    to.Ptr("ResourceType"),
						Data: []*string{
							to.Ptr("microsoft.automation/automationaccounts"),
							to.Ptr("microsoft.databricks/workspaces"),
							to.Ptr("microsoft.dbformysql/servers"),
							to.Ptr("microsoft.containerregistry/registries"),
							to.Ptr("microsoft.search/searchservices")},
						FilterEnabled:   to.Ptr(true),
						GroupingEnabled: to.Ptr(true),
						Total:           to.Ptr[int32](37),
						UsageEnd:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-10-31T00:00:00-07:00"); return t }()),
						UsageStart:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-10-01T00:00:00-07:00"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DimensionsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DimensionsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/MCAInvoiceSectionDimensionsListExpandAndTop.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/MCAInvoiceSectionDimensionsListWithFilter.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"InvoiceSectionDimensionsListWithFilter-Modern"},
	})
	client = armcostmanagement.NewDimensionsClient(cred, &options)
	pager = client.List("providers/Microsoft.Billing/billingAccounts/12345:6789/billingProfiles/13579/invoiceSections/9876",
		&armcostmanagement.DimensionsClientListOptions{Filter: to.Ptr("properties/category eq 'resourceId'"),
			Expand:    to.Ptr("properties/data"),
			Skiptoken: nil,
			Top:       to.Ptr[int32](5),
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/MCAInvoiceSectionDimensionsListWithFilter.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcostmanagement.DimensionsListResult{
			Value: []*armcostmanagement.Dimension{
				{
					Name: to.Ptr("dimensions_ResourceId_2019-10-01_2019-10-31"),
					Type: to.Ptr("microsoft.CostManagement/dimensions"),
					ID:   to.Ptr("providers/Microsoft.Billing/billingAccounts/12345:6789/billingProfiles/13579/invoiceSections/9876/providers/microsoft.CostManagement/dimensions_ResourceId_2019-10-01_2019-10-31"),
					Properties: &armcostmanagement.DimensionProperties{
						Description: to.Ptr("Resource Id"),
						Category:    to.Ptr("ResourceId"),
						Data: []*string{
							to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/system.orlando/providers/microsoft.storage/storageaccounts/urphealthaccount"),
							to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/system.orlando/providers/microsoft.storage/storageaccounts/srphytenaccount"),
							to.Ptr("/subscriptions/67e24f6b-1ec2-4c90-993a-dc2d25b00b6c/resourcegroups/defaultresourcegroup-eus/providers/microsoft.operationalinsights/workspaces/defaultworkspace-67e24f6b-1ec2-4c90-993a-dc2d25b00b6c-eus"),
							to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/rg-sql-ha/providers/microsoft.compute/virtualmachines/sql-4qqp1"),
							to.Ptr("/subscriptions/a98d6dc5-eb8f-46cf-8938-f1fb08f03706/resourcegroups/databricks-rg-testwsp-xijmsdubneexm/providers/microsoft.compute/disks/488cdb42bf74474a98075415be3f806c-containerrootvolume")},
						FilterEnabled:   to.Ptr(true),
						GroupingEnabled: to.Ptr(true),
						Total:           to.Ptr[int32](1409),
						UsageEnd:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-10-31T00:00:00-07:00"); return t }()),
						UsageStart:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-10-01T00:00:00-07:00"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DimensionsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DimensionsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/MCAInvoiceSectionDimensionsListWithFilter.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ManagementGroupDimensionsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ManagementGroupDimensionsList-Legacy"},
	})
	client = armcostmanagement.NewDimensionsClient(cred, &options)
	pager = client.List("providers/Microsoft.Management/managementGroups/MyMgId",
		&armcostmanagement.DimensionsClientListOptions{Filter: nil,
			Expand:    nil,
			Skiptoken: nil,
			Top:       nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ManagementGroupDimensionsList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcostmanagement.DimensionsListResult{
			Value: []*armcostmanagement.Dimension{
				{
					Name: to.Ptr("dimensions_ResourceGroup_2018-05-01_2018-05-31"),
					Type: to.Ptr("microsoft.CostManagement/dimensions"),
					ID:   to.Ptr("providers/Microsoft.Management/managementGroups/MyMgId/providers/microsoft.CostManagement/dimensions_ResourceGroup_2018-05-01_2018-05-31"),
					Properties: &armcostmanagement.DimensionProperties{
						Description:     to.Ptr("Resource group"),
						Category:        to.Ptr("ResourceGroup"),
						Data:            []*string{},
						FilterEnabled:   to.Ptr(true),
						GroupingEnabled: to.Ptr(true),
						Total:           to.Ptr[int32](377),
						UsageEnd:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-05-31T00:00:00-07:00"); return t }()),
						UsageStart:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-05-01T00:00:00-07:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("dimensions_ResourceType_2018-05-01_2018-05-31"),
					Type: to.Ptr("microsoft.CostManagement/dimensions"),
					ID:   to.Ptr("providers/Microsoft.Management/managementGroups/MyMgId/providers/microsoft.CostManagement/dimensions_ResourceType_2018-05-01_2018-05-31"),
					Properties: &armcostmanagement.DimensionProperties{
						Description:     to.Ptr("Resource type"),
						Category:        to.Ptr("ResourceType"),
						Data:            []*string{},
						FilterEnabled:   to.Ptr(true),
						GroupingEnabled: to.Ptr(true),
						Total:           to.Ptr[int32](37),
						UsageEnd:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-05-31T00:00:00-07:00"); return t }()),
						UsageStart:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-05-01T00:00:00-07:00"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DimensionsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DimensionsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ManagementGroupDimensionsList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ManagementGroupDimensionsListExpandAndTop.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ManagementGroupDimensionsListExpandAndTop-Legacy"},
	})
	client = armcostmanagement.NewDimensionsClient(cred, &options)
	pager = client.List("providers/Microsoft.Management/managementGroups/MyMgId",
		&armcostmanagement.DimensionsClientListOptions{Filter: nil,
			Expand:    to.Ptr("properties/data"),
			Skiptoken: nil,
			Top:       to.Ptr[int32](5),
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ManagementGroupDimensionsListExpandAndTop.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcostmanagement.DimensionsListResult{
			Value: []*armcostmanagement.Dimension{
				{
					Name: to.Ptr("dimensions_ResourceGroup_2018-05-01_2018-05-31_5"),
					Type: to.Ptr("microsoft.CostManagement/dimensions"),
					ID:   to.Ptr("providers/Microsoft.Management/managementGroups/MyMgId/providers/microsoft.CostManagement/dimensions_ResourceGroup_2018-05-01_2018-05-31_5"),
					Properties: &armcostmanagement.DimensionProperties{
						Description: to.Ptr("Resource group"),
						Category:    to.Ptr("ResourceGroup"),
						Data: []*string{
							to.Ptr("thoroetrg01"),
							to.Ptr("default-notificationhubs-westus"),
							to.Ptr("jedikeyvaultrg"),
							to.Ptr("contosocodeflow8d4a"),
							to.Ptr("noobaa")},
						FilterEnabled:   to.Ptr(true),
						GroupingEnabled: to.Ptr(true),
						Total:           to.Ptr[int32](377),
						UsageEnd:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-05-31T00:00:00-07:00"); return t }()),
						UsageStart:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-05-01T00:00:00-07:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("dimensions_ResourceType_2018-05-01_2018-05-31_5"),
					Type: to.Ptr("microsoft.CostManagement/dimensions"),
					ID:   to.Ptr("providers/Microsoft.Management/managementGroups/MyMgId/providers/microsoft.CostManagement/dimensions_ResourceType_2018-05-01_2018-05-31_5"),
					Properties: &armcostmanagement.DimensionProperties{
						Description: to.Ptr("Resource type"),
						Category:    to.Ptr("ResourceType"),
						Data: []*string{
							to.Ptr("microsoft.automation/automationaccounts"),
							to.Ptr("microsoft.databricks/workspaces"),
							to.Ptr("microsoft.dbformysql/servers"),
							to.Ptr("microsoft.containerregistry/registries"),
							to.Ptr("microsoft.search/searchservices")},
						FilterEnabled:   to.Ptr(true),
						GroupingEnabled: to.Ptr(true),
						Total:           to.Ptr[int32](37),
						UsageEnd:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-05-31T00:00:00-07:00"); return t }()),
						UsageStart:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-05-01T00:00:00-07:00"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DimensionsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DimensionsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ManagementGroupDimensionsListExpandAndTop.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ManagementGroupDimensionsListWithFilter.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ManagementGroupDimensionsListWithFilter-Legacy"},
	})
	client = armcostmanagement.NewDimensionsClient(cred, &options)
	pager = client.List("providers/Microsoft.Management/managementGroups/MyMgId",
		&armcostmanagement.DimensionsClientListOptions{Filter: to.Ptr("properties/category eq 'resourceId'"),
			Expand:    to.Ptr("properties/data"),
			Skiptoken: nil,
			Top:       to.Ptr[int32](5),
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ManagementGroupDimensionsListWithFilter.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcostmanagement.DimensionsListResult{
			Value: []*armcostmanagement.Dimension{
				{
					Name: to.Ptr("dimensions_ResourceId_2018-05-01_2018-05-31_5"),
					Type: to.Ptr("microsoft.CostManagement/dimensions"),
					ID:   to.Ptr("providers/Microsoft.Management/managementGroups/MyMgId/providers/microsoft.CostManagement/dimensions_ResourceId_2018-05-01_2018-05-31_5"),
					Properties: &armcostmanagement.DimensionProperties{
						Description: to.Ptr("Resource Id"),
						Category:    to.Ptr("ResourceId"),
						Data: []*string{
							to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/system.orlando/providers/microsoft.storage/storageaccounts/urphealthaccount"),
							to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/system.orlando/providers/microsoft.storage/storageaccounts/srphytenaccount"),
							to.Ptr("/subscriptions/67e24f6b-1ec2-4c90-993a-dc2d25b00b6c/resourcegroups/defaultresourcegroup-eus/providers/microsoft.operationalinsights/workspaces/defaultworkspace-67e24f6b-1ec2-4c90-993a-dc2d25b00b6c-eus"),
							to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/rg-sql-ha/providers/microsoft.compute/virtualmachines/sql-4qqp1"),
							to.Ptr("/subscriptions/a98d6dc5-eb8f-46cf-8938-f1fb08f03706/resourcegroups/databricks-rg-testwsp-xijmsdubneexm/providers/microsoft.compute/disks/488cdb42bf74474a98075415be3f806c-containerrootvolume")},
						FilterEnabled:   to.Ptr(true),
						GroupingEnabled: to.Ptr(true),
						Total:           to.Ptr[int32](1409),
						UsageEnd:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-05-31T00:00:00-07:00"); return t }()),
						UsageStart:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-05-01T00:00:00-07:00"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DimensionsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DimensionsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ManagementGroupDimensionsListWithFilter.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ResourceGroupDimensionsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ResourceGroupDimensionsList-Legacy"},
	})
	client = armcostmanagement.NewDimensionsClient(cred, &options)
	pager = client.List("subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/system.orlando",
		&armcostmanagement.DimensionsClientListOptions{Filter: nil,
			Expand:    to.Ptr("properties/data"),
			Skiptoken: nil,
			Top:       to.Ptr[int32](5),
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ResourceGroupDimensionsList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcostmanagement.DimensionsListResult{
			Value: []*armcostmanagement.Dimension{
				{
					Name: to.Ptr("dimensions_ResourceType_2018-05-01_2018-05-31_5"),
					Type: to.Ptr("microsoft.CostManagement/dimensions"),
					ID:   to.Ptr("subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/system.orlando/providers/microsoft.CostManagement/dimensions_ResourceType_2018-05-01_2018-05-31_5"),
					Properties: &armcostmanagement.DimensionProperties{
						Description: to.Ptr("Resource type"),
						Category:    to.Ptr("ResourceType"),
						Data: []*string{
							to.Ptr("microsoft.storage/storageaccounts")},
						FilterEnabled:   to.Ptr(true),
						GroupingEnabled: to.Ptr(true),
						Total:           to.Ptr[int32](1),
						UsageEnd:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-05-31T00:00:00-07:00"); return t }()),
						UsageStart:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-05-01T00:00:00-07:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("dimensions_ResourceId_2018-05-01_2018-05-31_5"),
					Type: to.Ptr("microsoft.CostManagement/dimensions"),
					ID:   to.Ptr("subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/system.orlando/providers/microsoft.CostManagement/dimensions_ResourceId_2018-05-01_2018-05-31_5"),
					Properties: &armcostmanagement.DimensionProperties{
						Description: to.Ptr("Resource Id"),
						Category:    to.Ptr("ResourceId"),
						Data: []*string{
							to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/system.orlando/providers/microsoft.storage/storageaccounts/authprod"),
							to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/system.orlando/providers/microsoft.storage/storageaccounts/systemevents"),
							to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/system.orlando/providers/microsoft.storage/storageaccounts/armadminprod"),
							to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/system.orlando/providers/microsoft.storage/storageaccounts/srphytenaccount"),
							to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/system.orlando/providers/microsoft.storage/storageaccounts/publicsystemportal")},
						FilterEnabled:   to.Ptr(true),
						GroupingEnabled: to.Ptr(true),
						Total:           to.Ptr[int32](27),
						UsageEnd:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-05-31T00:00:00-07:00"); return t }()),
						UsageStart:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-05-01T00:00:00-07:00"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DimensionsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DimensionsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ResourceGroupDimensionsList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/SubscriptionDimensionsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SubscriptionDimensionsList-Legacy"},
	})
	client = armcostmanagement.NewDimensionsClient(cred, &options)
	pager = client.List("subscriptions/00000000-0000-0000-0000-000000000000",
		&armcostmanagement.DimensionsClientListOptions{Filter: nil,
			Expand:    to.Ptr("properties/data"),
			Skiptoken: nil,
			Top:       to.Ptr[int32](5),
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/SubscriptionDimensionsList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcostmanagement.DimensionsListResult{
			Value: []*armcostmanagement.Dimension{
				{
					Name: to.Ptr("dimensions_ResourceGroup_2018-05-01_2018-05-31_5"),
					Type: to.Ptr("microsoft.CostManagement/dimensions"),
					ID:   to.Ptr("subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.CostManagement/dimensions_ResourceGroup_2018-05-01_2018-05-31_5"),
					Properties: &armcostmanagement.DimensionProperties{
						Description: to.Ptr("Resource group"),
						Category:    to.Ptr("ResourceGroup"),
						Data: []*string{
							to.Ptr("dcrg"),
							to.Ptr("rg"),
							to.Ptr("offlinegalleryrg"),
							to.Ptr("system.orlando.adminkeyvault"),
							to.Ptr("system.orlando.keyvault")},
						FilterEnabled:   to.Ptr(true),
						GroupingEnabled: to.Ptr(true),
						Total:           to.Ptr[int32](68),
						UsageEnd:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-05-31T00:00:00-07:00"); return t }()),
						UsageStart:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-05-01T00:00:00-07:00"); return t }()),
					},
				},
				{
					Name: to.Ptr("dimensions_ResourceType_2018-05-01_2018-05-31_5"),
					Type: to.Ptr("microsoft.CostManagement/dimensions"),
					ID:   to.Ptr("subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.CostManagement/dimensions_ResourceType_2018-05-01_2018-05-31_5"),
					Properties: &armcostmanagement.DimensionProperties{
						Description: to.Ptr("Resource type"),
						Category:    to.Ptr("ResourceType"),
						Data: []*string{
							to.Ptr("microsoft.storage/storageaccounts"),
							to.Ptr("microsoft.web.admin/role"),
							to.Ptr("microsoft.sql/servers"),
							to.Ptr("microsoft.compute/virtualmachines")},
						FilterEnabled:   to.Ptr(true),
						GroupingEnabled: to.Ptr(true),
						Total:           to.Ptr[int32](4),
						UsageEnd:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-05-31T00:00:00-07:00"); return t }()),
						UsageStart:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-05-01T00:00:00-07:00"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DimensionsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DimensionsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/SubscriptionDimensionsList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDimensions_ByExternalCloudProviderType(t *testing.T) {
	// From example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ExternalBillingAccountsDimensions.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ExternalBillingAccountDimensionList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcostmanagement.NewDimensionsClient(cred, &options)
	pager := client.ByExternalCloudProviderType(armcostmanagement.ExternalCloudProviderTypeExternalBillingAccounts,
		"100",
		&armcostmanagement.DimensionsClientByExternalCloudProviderTypeOptions{Filter: nil,
			Expand:    nil,
			Skiptoken: nil,
			Top:       nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ExternalBillingAccountsDimensions.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcostmanagement.DimensionsListResult{
			Value: []*armcostmanagement.Dimension{
				{
					Name: to.Ptr("dimensions_ResourceType_2019-12-01_2019-12-31"),
					Type: to.Ptr("microsoft.consumption/dimensions"),
					ID:   to.Ptr("providers/Microsoft.CostManagement/externalBillingAccounts/100/dimensions_ResourceType_2019-12-01_2019-12-31"),
					Properties: &armcostmanagement.DimensionProperties{
						Description:     to.Ptr("Resource type"),
						Category:        to.Ptr("ResourceType"),
						Data:            []*string{},
						FilterEnabled:   to.Ptr(true),
						GroupingEnabled: to.Ptr(true),
						Total:           to.Ptr[int32](0),
						UsageEnd:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-12-31T00:00:00Z"); return t }()),
						UsageStart:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-12-01T00:00:00Z"); return t }()),
					},
				},
				{
					Name: to.Ptr("dimensions_ResourceId_2019-12-01_2019-12-31"),
					Type: to.Ptr("microsoft.consumption/dimensions"),
					ID:   to.Ptr("providers/Microsoft.CostManagement/externalBillingAccounts/100/dimensions_ResourceId_2019-12-01_2019-12-31"),
					Properties: &armcostmanagement.DimensionProperties{
						Description:     to.Ptr("Resource ID"),
						Category:        to.Ptr("ResourceId"),
						Data:            []*string{},
						FilterEnabled:   to.Ptr(true),
						GroupingEnabled: to.Ptr(true),
						Total:           to.Ptr[int32](0),
						UsageEnd:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-12-31T00:00:00Z"); return t }()),
						UsageStart:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-12-01T00:00:00Z"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DimensionsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DimensionsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ExternalBillingAccountsDimensions.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ExternalSubscriptionsDimensions.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ExternalSubscriptionDimensionList"},
	})
	client = armcostmanagement.NewDimensionsClient(cred, &options)
	pager = client.ByExternalCloudProviderType(armcostmanagement.ExternalCloudProviderTypeExternalSubscriptions,
		"100",
		&armcostmanagement.DimensionsClientByExternalCloudProviderTypeOptions{Filter: nil,
			Expand:    nil,
			Skiptoken: nil,
			Top:       nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ExternalSubscriptionsDimensions.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcostmanagement.DimensionsListResult{
			Value: []*armcostmanagement.Dimension{
				{
					Name: to.Ptr("dimensions_ResourceType_2019-12-01_2019-12-31"),
					Type: to.Ptr("microsoft.consumption/dimensions"),
					ID:   to.Ptr("providers/Microsoft.CostManagement/externalSubscriptions/123/dimensions_ResourceType_2019-12-01_2019-12-31"),
					Properties: &armcostmanagement.DimensionProperties{
						Description:     to.Ptr("Resource type"),
						Category:        to.Ptr("ResourceType"),
						Data:            []*string{},
						FilterEnabled:   to.Ptr(true),
						GroupingEnabled: to.Ptr(true),
						Total:           to.Ptr[int32](0),
						UsageEnd:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-12-31T00:00:00Z"); return t }()),
						UsageStart:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-12-01T00:00:00Z"); return t }()),
					},
				},
				{
					Name: to.Ptr("dimensions_ResourceId_2019-12-01_2019-12-31"),
					Type: to.Ptr("microsoft.consumption/dimensions"),
					ID:   to.Ptr("providers/Microsoft.CostManagement/externalSubscriptions/123/dimensions_ResourceId_2019-12-01_2019-12-31"),
					Properties: &armcostmanagement.DimensionProperties{
						Description:     to.Ptr("Resource ID"),
						Category:        to.Ptr("ResourceId"),
						Data:            []*string{},
						FilterEnabled:   to.Ptr(true),
						GroupingEnabled: to.Ptr(true),
						Total:           to.Ptr[int32](0),
						UsageEnd:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-12-31T00:00:00Z"); return t }()),
						UsageStart:      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-12-01T00:00:00Z"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DimensionsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DimensionsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ExternalSubscriptionsDimensions.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestQuery_Usage(t *testing.T) {
	// From example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/BillingAccountQuery.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"BillingAccountQuery-Legacy"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcostmanagement.NewQueryClient(cred, &options)
	res, err := client.Usage(ctx,
		"providers/Microsoft.Billing/billingAccounts/70664866",
		armcostmanagement.QueryDefinition{
			Type: to.Ptr(armcostmanagement.ExportTypeUsage),
			Dataset: &armcostmanagement.QueryDataset{
				Filter: &armcostmanagement.QueryFilter{
					And: []*armcostmanagement.QueryFilter{
						{
							Or: []*armcostmanagement.QueryFilter{
								{
									Dimensions: &armcostmanagement.QueryComparisonExpression{
										Name:     to.Ptr("ResourceLocation"),
										Operator: to.Ptr(armcostmanagement.QueryOperatorTypeIn),
										Values: []*string{
											to.Ptr("East US"),
											to.Ptr("West Europe")},
									},
								},
								{
									Tags: &armcostmanagement.QueryComparisonExpression{
										Name:     to.Ptr("Environment"),
										Operator: to.Ptr(armcostmanagement.QueryOperatorTypeIn),
										Values: []*string{
											to.Ptr("UAT"),
											to.Ptr("Prod")},
									},
								}},
						},
						{
							Dimensions: &armcostmanagement.QueryComparisonExpression{
								Name:     to.Ptr("ResourceGroup"),
								Operator: to.Ptr(armcostmanagement.QueryOperatorTypeIn),
								Values: []*string{
									to.Ptr("API")},
							},
						}},
				},
				Granularity: to.Ptr(armcostmanagement.GranularityTypeDaily),
			},
			Timeframe: to.Ptr(armcostmanagement.TimeframeTypeMonthToDate),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/BillingAccountQuery.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcostmanagement.QueryResult{
			Name: to.Ptr("ad67fd91-c131-4bda-9ba9-7187ecb1cebd"),
			Type: to.Ptr("microsoft.costmanagement/Query"),
			ID:   to.Ptr("providers/Microsoft.Billing/billingAccounts/70664866/providers/Microsoft.CostManagement/Query/ad67fd91-c131-4bda-9ba9-7187ecb1cebd"),
			Properties: &armcostmanagement.QueryProperties{
				Columns: []*armcostmanagement.QueryColumn{
					{
						Name: to.Ptr("PreTaxCost"),
						Type: to.Ptr("Number"),
					},
					{
						Name: to.Ptr("ResourceGroup"),
						Type: to.Ptr("String"),
					},
					{
						Name: to.Ptr("UsageDate"),
						Type: to.Ptr("Number"),
					},
					{
						Name: to.Ptr("Currency"),
						Type: to.Ptr("String"),
					}},
				Rows: [][]interface{}{
					{
						float64(19.545363672276512),
						"JapanUnifia-Trial",
						float64(20180331),
						"USD"},
					{
						float64(173.41979241290323),
						"RVIIOT-TRIAL",
						float64(20180331),
						"USD"},
					{
						float64(20.35941656262545),
						"VSTSHOL-1595322048000",
						float64(20180331),
						"USD"},
					{
						float64(0.16677720329728665),
						"gs-stms-dev",
						float64(20180331),
						"USD"}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.QueryResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.QueryResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/BillingAccountQuery.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/MCABillingAccountQuery.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"BillingAccountQuery-Modern"},
	})
	client = armcostmanagement.NewQueryClient(cred, &options)
	res, err = client.Usage(ctx,
		"providers/Microsoft.Billing/billingAccounts/12345:6789",
		armcostmanagement.QueryDefinition{
			Type: to.Ptr(armcostmanagement.ExportTypeUsage),
			Dataset: &armcostmanagement.QueryDataset{
				Filter: &armcostmanagement.QueryFilter{
					And: []*armcostmanagement.QueryFilter{
						{
							Or: []*armcostmanagement.QueryFilter{
								{
									Dimensions: &armcostmanagement.QueryComparisonExpression{
										Name:     to.Ptr("ResourceLocation"),
										Operator: to.Ptr(armcostmanagement.QueryOperatorTypeIn),
										Values: []*string{
											to.Ptr("East US"),
											to.Ptr("West Europe")},
									},
								},
								{
									Tags: &armcostmanagement.QueryComparisonExpression{
										Name:     to.Ptr("Environment"),
										Operator: to.Ptr(armcostmanagement.QueryOperatorTypeIn),
										Values: []*string{
											to.Ptr("UAT"),
											to.Ptr("Prod")},
									},
								}},
						},
						{
							Dimensions: &armcostmanagement.QueryComparisonExpression{
								Name:     to.Ptr("ResourceGroup"),
								Operator: to.Ptr(armcostmanagement.QueryOperatorTypeIn),
								Values: []*string{
									to.Ptr("API")},
							},
						}},
				},
				Granularity: to.Ptr(armcostmanagement.GranularityTypeDaily),
			},
			Timeframe: to.Ptr(armcostmanagement.TimeframeTypeMonthToDate),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/MCABillingAccountQuery.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcostmanagement.QueryResult{
			Name: to.Ptr("ad67fd91-c131-4bda-9ba9-7187ecb1cebd"),
			Type: to.Ptr("microsoft.costmanagement/Query"),
			ID:   to.Ptr("providers/Microsoft.Billing/billingAccounts/12345:6789/providers/Microsoft.CostManagement/Query/ad67fd91-c131-4bda-9ba9-7187ecb1cebd"),
			Properties: &armcostmanagement.QueryProperties{
				Columns: []*armcostmanagement.QueryColumn{
					{
						Name: to.Ptr("PreTaxCost"),
						Type: to.Ptr("Number"),
					},
					{
						Name: to.Ptr("ResourceGroup"),
						Type: to.Ptr("String"),
					},
					{
						Name: to.Ptr("UsageDate"),
						Type: to.Ptr("Number"),
					},
					{
						Name: to.Ptr("Currency"),
						Type: to.Ptr("String"),
					}},
				Rows: [][]interface{}{
					{
						float64(19.545363672276512),
						"JapanUnifia-Trial",
						float64(20180331),
						"USD"},
					{
						float64(173.41979241290323),
						"RVIIOT-TRIAL",
						float64(20180331),
						"USD"},
					{
						float64(20.35941656262545),
						"VSTSHOL-1595322048000",
						float64(20180331),
						"USD"},
					{
						float64(0.16677720329728665),
						"gs-stms-dev",
						float64(20180331),
						"USD"}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.QueryResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.QueryResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/MCABillingAccountQuery.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/BillingAccountQueryGrouping.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"BillingAccountQueryGrouping-Legacy"},
	})
	client = armcostmanagement.NewQueryClient(cred, &options)
	res, err = client.Usage(ctx,
		"providers/Microsoft.Billing/billingAccounts/70664866",
		armcostmanagement.QueryDefinition{
			Type: to.Ptr(armcostmanagement.ExportTypeUsage),
			Dataset: &armcostmanagement.QueryDataset{
				Aggregation: map[string]*armcostmanagement.QueryAggregation{
					"totalCost": {
						Name:     to.Ptr("PreTaxCost"),
						Function: to.Ptr(armcostmanagement.FunctionTypeSum),
					},
				},
				Granularity: to.Ptr(armcostmanagement.GranularityType("None")),
				Grouping: []*armcostmanagement.QueryGrouping{
					{
						Name: to.Ptr("ResourceGroup"),
						Type: to.Ptr(armcostmanagement.QueryColumnTypeDimension),
					}},
			},
			Timeframe: to.Ptr(armcostmanagement.TimeframeTypeTheLastMonth),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/BillingAccountQueryGrouping.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcostmanagement.QueryResult{
			Name: to.Ptr("ad67fd91-c131-4bda-9ba9-7187ecb1cebd"),
			Type: to.Ptr("microsoft.costmanagement/Query"),
			ID:   to.Ptr("providers/Microsoft.Billing/billingAccounts/70664866/providers/Microsoft.CostManagement/Query/ad67fd91-c131-4bda-9ba9-7187ecb1cebd"),
			Properties: &armcostmanagement.QueryProperties{
				Columns: []*armcostmanagement.QueryColumn{
					{
						Name: to.Ptr("PreTaxCost"),
						Type: to.Ptr("Number"),
					},
					{
						Name: to.Ptr("ResourceGroup"),
						Type: to.Ptr("String"),
					},
					{
						Name: to.Ptr("Currency"),
						Type: to.Ptr("String"),
					}},
				Rows: [][]interface{}{
					{
						float64(19.545363672276512),
						"JapanUnifia-Trial",
						"USD"},
					{
						float64(173.41979241290323),
						"RVIIOT-TRIAL",
						"USD"},
					{
						float64(20.35941656262545),
						"VSTSHOL-1595322048000",
						"USD"}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.QueryResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.QueryResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/BillingAccountQueryGrouping.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/MCABillingAccountQueryGrouping.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"BillingAccountQueryGrouping-Modern"},
	})
	client = armcostmanagement.NewQueryClient(cred, &options)
	res, err = client.Usage(ctx,
		"providers/Microsoft.Billing/billingAccounts/12345:6789",
		armcostmanagement.QueryDefinition{
			Type: to.Ptr(armcostmanagement.ExportTypeUsage),
			Dataset: &armcostmanagement.QueryDataset{
				Aggregation: map[string]*armcostmanagement.QueryAggregation{
					"totalCost": {
						Name:     to.Ptr("PreTaxCost"),
						Function: to.Ptr(armcostmanagement.FunctionTypeSum),
					},
				},
				Granularity: to.Ptr(armcostmanagement.GranularityType("None")),
				Grouping: []*armcostmanagement.QueryGrouping{
					{
						Name: to.Ptr("ResourceGroup"),
						Type: to.Ptr(armcostmanagement.QueryColumnTypeDimension),
					}},
			},
			Timeframe: to.Ptr(armcostmanagement.TimeframeTypeTheLastMonth),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/MCABillingAccountQueryGrouping.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcostmanagement.QueryResult{
			Name: to.Ptr("ad67fd91-c131-4bda-9ba9-7187ecb1cebd"),
			Type: to.Ptr("microsoft.costmanagement/Query"),
			ID:   to.Ptr("providers/Microsoft.Billing/billingAccounts/12345:6789/providers/Microsoft.CostManagement/Query/ad67fd91-c131-4bda-9ba9-7187ecb1cebd"),
			Properties: &armcostmanagement.QueryProperties{
				Columns: []*armcostmanagement.QueryColumn{
					{
						Name: to.Ptr("PreTaxCost"),
						Type: to.Ptr("Number"),
					},
					{
						Name: to.Ptr("ResourceGroup"),
						Type: to.Ptr("String"),
					},
					{
						Name: to.Ptr("Currency"),
						Type: to.Ptr("String"),
					}},
				Rows: [][]interface{}{
					{
						float64(19.545363672276512),
						"JapanUnifia-Trial",
						"USD"},
					{
						float64(173.41979241290323),
						"RVIIOT-TRIAL",
						"USD"},
					{
						float64(20.35941656262545),
						"VSTSHOL-1595322048000",
						"USD"}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.QueryResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.QueryResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/MCABillingAccountQueryGrouping.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/MCABillingProfileQuery.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"BillingProfileQuery-Modern"},
	})
	client = armcostmanagement.NewQueryClient(cred, &options)
	res, err = client.Usage(ctx,
		"providers/Microsoft.Billing/billingAccounts/12345:6789/billingProfiles/13579",
		armcostmanagement.QueryDefinition{
			Type: to.Ptr(armcostmanagement.ExportTypeUsage),
			Dataset: &armcostmanagement.QueryDataset{
				Filter: &armcostmanagement.QueryFilter{
					And: []*armcostmanagement.QueryFilter{
						{
							Or: []*armcostmanagement.QueryFilter{
								{
									Dimensions: &armcostmanagement.QueryComparisonExpression{
										Name:     to.Ptr("ResourceLocation"),
										Operator: to.Ptr(armcostmanagement.QueryOperatorTypeIn),
										Values: []*string{
											to.Ptr("East US"),
											to.Ptr("West Europe")},
									},
								},
								{
									Tags: &armcostmanagement.QueryComparisonExpression{
										Name:     to.Ptr("Environment"),
										Operator: to.Ptr(armcostmanagement.QueryOperatorTypeIn),
										Values: []*string{
											to.Ptr("UAT"),
											to.Ptr("Prod")},
									},
								}},
						},
						{
							Dimensions: &armcostmanagement.QueryComparisonExpression{
								Name:     to.Ptr("ResourceGroup"),
								Operator: to.Ptr(armcostmanagement.QueryOperatorTypeIn),
								Values: []*string{
									to.Ptr("API")},
							},
						}},
				},
				Granularity: to.Ptr(armcostmanagement.GranularityTypeDaily),
			},
			Timeframe: to.Ptr(armcostmanagement.TimeframeTypeMonthToDate),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/MCABillingProfileQuery.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcostmanagement.QueryResult{
			Name: to.Ptr("ad67fd91-c131-4bda-9ba9-7187ecb1cebd"),
			Type: to.Ptr("microsoft.costmanagement/Query"),
			ID:   to.Ptr("providers/Microsoft.Billing/billingAccounts/12345:6789/billingProfiles/13579/providers/Microsoft.CostManagement/Query/ad67fd91-c131-4bda-9ba9-7187ecb1cebd"),
			Properties: &armcostmanagement.QueryProperties{
				Columns: []*armcostmanagement.QueryColumn{
					{
						Name: to.Ptr("PreTaxCost"),
						Type: to.Ptr("Number"),
					},
					{
						Name: to.Ptr("ResourceGroup"),
						Type: to.Ptr("String"),
					},
					{
						Name: to.Ptr("UsageDate"),
						Type: to.Ptr("Number"),
					},
					{
						Name: to.Ptr("Currency"),
						Type: to.Ptr("String"),
					}},
				Rows: [][]interface{}{
					{
						float64(19.545363672276512),
						"JapanUnifia-Trial",
						float64(20180331),
						"USD"},
					{
						float64(173.41979241290323),
						"RVIIOT-TRIAL",
						float64(20180331),
						"USD"},
					{
						float64(20.35941656262545),
						"VSTSHOL-1595322048000",
						float64(20180331),
						"USD"},
					{
						float64(0.16677720329728665),
						"gs-stms-dev",
						float64(20180331),
						"USD"}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.QueryResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.QueryResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/MCABillingProfileQuery.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/MCABillingProfileQueryGrouping.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"BillingProfileQueryGrouping-Modern"},
	})
	client = armcostmanagement.NewQueryClient(cred, &options)
	res, err = client.Usage(ctx,
		"providers/Microsoft.Billing/billingAccounts/12345:6789/billingProfiles/13579",
		armcostmanagement.QueryDefinition{
			Type: to.Ptr(armcostmanagement.ExportTypeUsage),
			Dataset: &armcostmanagement.QueryDataset{
				Aggregation: map[string]*armcostmanagement.QueryAggregation{
					"totalCost": {
						Name:     to.Ptr("PreTaxCost"),
						Function: to.Ptr(armcostmanagement.FunctionTypeSum),
					},
				},
				Granularity: to.Ptr(armcostmanagement.GranularityType("None")),
				Grouping: []*armcostmanagement.QueryGrouping{
					{
						Name: to.Ptr("ResourceGroup"),
						Type: to.Ptr(armcostmanagement.QueryColumnTypeDimension),
					}},
			},
			Timeframe: to.Ptr(armcostmanagement.TimeframeTypeTheLastMonth),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/MCABillingProfileQueryGrouping.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcostmanagement.QueryResult{
			Name: to.Ptr("ad67fd91-c131-4bda-9ba9-7187ecb1cebd"),
			Type: to.Ptr("microsoft.costmanagement/Query"),
			ID:   to.Ptr("providers/Microsoft.Billing/billingAccounts/12345:6789/billingProfiles/13579/providers/Microsoft.CostManagement/Query/ad67fd91-c131-4bda-9ba9-7187ecb1cebd"),
			Properties: &armcostmanagement.QueryProperties{
				Columns: []*armcostmanagement.QueryColumn{
					{
						Name: to.Ptr("PreTaxCost"),
						Type: to.Ptr("Number"),
					},
					{
						Name: to.Ptr("ResourceGroup"),
						Type: to.Ptr("String"),
					},
					{
						Name: to.Ptr("Currency"),
						Type: to.Ptr("String"),
					}},
				Rows: [][]interface{}{
					{
						float64(19.545363672276512),
						"JapanUnifia-Trial",
						"USD"},
					{
						float64(173.41979241290323),
						"RVIIOT-TRIAL",
						"USD"},
					{
						float64(20.35941656262545),
						"VSTSHOL-1595322048000",
						"USD"}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.QueryResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.QueryResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/MCABillingProfileQueryGrouping.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/MCACustomerQuery.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CustomerQuery-Modern"},
	})
	client = armcostmanagement.NewQueryClient(cred, &options)
	res, err = client.Usage(ctx,
		"providers/Microsoft.Billing/billingAccounts/12345:6789/customers/5678",
		armcostmanagement.QueryDefinition{
			Type: to.Ptr(armcostmanagement.ExportTypeUsage),
			Dataset: &armcostmanagement.QueryDataset{
				Filter: &armcostmanagement.QueryFilter{
					And: []*armcostmanagement.QueryFilter{
						{
							Or: []*armcostmanagement.QueryFilter{
								{
									Dimensions: &armcostmanagement.QueryComparisonExpression{
										Name:     to.Ptr("ResourceLocation"),
										Operator: to.Ptr(armcostmanagement.QueryOperatorTypeIn),
										Values: []*string{
											to.Ptr("East US"),
											to.Ptr("West Europe")},
									},
								},
								{
									Tags: &armcostmanagement.QueryComparisonExpression{
										Name:     to.Ptr("Environment"),
										Operator: to.Ptr(armcostmanagement.QueryOperatorTypeIn),
										Values: []*string{
											to.Ptr("UAT"),
											to.Ptr("Prod")},
									},
								}},
						},
						{
							Dimensions: &armcostmanagement.QueryComparisonExpression{
								Name:     to.Ptr("ResourceGroup"),
								Operator: to.Ptr(armcostmanagement.QueryOperatorTypeIn),
								Values: []*string{
									to.Ptr("API")},
							},
						}},
				},
				Granularity: to.Ptr(armcostmanagement.GranularityTypeDaily),
			},
			Timeframe: to.Ptr(armcostmanagement.TimeframeTypeMonthToDate),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/MCACustomerQuery.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcostmanagement.QueryResult{
			Name: to.Ptr("ad67fd91-c131-4bda-9ba9-7187ecb1cebd"),
			Type: to.Ptr("microsoft.costmanagement/Query"),
			ID:   to.Ptr("providers/Microsoft.Billing/billingAccounts/12345:6789/customers/5678/providers/Microsoft.CostManagement/Query/ad67fd91-c131-4bda-9ba9-7187ecb1cebd"),
			Properties: &armcostmanagement.QueryProperties{
				Columns: []*armcostmanagement.QueryColumn{
					{
						Name: to.Ptr("PreTaxCost"),
						Type: to.Ptr("Number"),
					},
					{
						Name: to.Ptr("ResourceGroup"),
						Type: to.Ptr("String"),
					},
					{
						Name: to.Ptr("UsageDate"),
						Type: to.Ptr("Number"),
					},
					{
						Name: to.Ptr("Currency"),
						Type: to.Ptr("String"),
					}},
				Rows: [][]interface{}{
					{
						float64(19.545363672276512),
						"JapanUnifia-Trial",
						float64(20180331),
						"USD"},
					{
						float64(173.41979241290323),
						"RVIIOT-TRIAL",
						float64(20180331),
						"USD"},
					{
						float64(20.35941656262545),
						"VSTSHOL-1595322048000",
						float64(20180331),
						"USD"},
					{
						float64(0.16677720329728665),
						"gs-stms-dev",
						float64(20180331),
						"USD"}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.QueryResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.QueryResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/MCACustomerQuery.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/MCACustomerQueryGrouping.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CustomerQueryGrouping-Modern"},
	})
	client = armcostmanagement.NewQueryClient(cred, &options)
	res, err = client.Usage(ctx,
		"providers/Microsoft.Billing/billingAccounts/12345:6789/customers/5678",
		armcostmanagement.QueryDefinition{
			Type: to.Ptr(armcostmanagement.ExportTypeUsage),
			Dataset: &armcostmanagement.QueryDataset{
				Aggregation: map[string]*armcostmanagement.QueryAggregation{
					"totalCost": {
						Name:     to.Ptr("PreTaxCost"),
						Function: to.Ptr(armcostmanagement.FunctionTypeSum),
					},
				},
				Granularity: to.Ptr(armcostmanagement.GranularityType("None")),
				Grouping: []*armcostmanagement.QueryGrouping{
					{
						Name: to.Ptr("ResourceGroup"),
						Type: to.Ptr(armcostmanagement.QueryColumnTypeDimension),
					}},
			},
			Timeframe: to.Ptr(armcostmanagement.TimeframeTypeTheLastMonth),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/MCACustomerQueryGrouping.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcostmanagement.QueryResult{
			Name: to.Ptr("ad67fd91-c131-4bda-9ba9-7187ecb1cebd"),
			Type: to.Ptr("microsoft.costmanagement/Query"),
			ID:   to.Ptr("providers/Microsoft.Billing/billingAccounts/12345:6789/customers/5678/providers/Microsoft.CostManagement/Query/ad67fd91-c131-4bda-9ba9-7187ecb1cebd"),
			Properties: &armcostmanagement.QueryProperties{
				Columns: []*armcostmanagement.QueryColumn{
					{
						Name: to.Ptr("PreTaxCost"),
						Type: to.Ptr("Number"),
					},
					{
						Name: to.Ptr("ResourceGroup"),
						Type: to.Ptr("String"),
					},
					{
						Name: to.Ptr("Currency"),
						Type: to.Ptr("String"),
					}},
				Rows: [][]interface{}{
					{
						float64(19.545363672276512),
						"JapanUnifia-Trial",
						"USD"},
					{
						float64(173.41979241290323),
						"RVIIOT-TRIAL",
						"USD"},
					{
						float64(20.35941656262545),
						"VSTSHOL-1595322048000",
						"USD"}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.QueryResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.QueryResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/MCACustomerQueryGrouping.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/DepartmentQuery.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DepartmentQuery-Legacy"},
	})
	client = armcostmanagement.NewQueryClient(cred, &options)
	res, err = client.Usage(ctx,
		"providers/Microsoft.Billing/billingAccounts/100/departments/123",
		armcostmanagement.QueryDefinition{
			Type: to.Ptr(armcostmanagement.ExportTypeUsage),
			Dataset: &armcostmanagement.QueryDataset{
				Filter: &armcostmanagement.QueryFilter{
					And: []*armcostmanagement.QueryFilter{
						{
							Or: []*armcostmanagement.QueryFilter{
								{
									Dimensions: &armcostmanagement.QueryComparisonExpression{
										Name:     to.Ptr("ResourceLocation"),
										Operator: to.Ptr(armcostmanagement.QueryOperatorTypeIn),
										Values: []*string{
											to.Ptr("East US"),
											to.Ptr("West Europe")},
									},
								},
								{
									Tags: &armcostmanagement.QueryComparisonExpression{
										Name:     to.Ptr("Environment"),
										Operator: to.Ptr(armcostmanagement.QueryOperatorTypeIn),
										Values: []*string{
											to.Ptr("UAT"),
											to.Ptr("Prod")},
									},
								}},
						},
						{
							Dimensions: &armcostmanagement.QueryComparisonExpression{
								Name:     to.Ptr("ResourceGroup"),
								Operator: to.Ptr(armcostmanagement.QueryOperatorTypeIn),
								Values: []*string{
									to.Ptr("API")},
							},
						}},
				},
				Granularity: to.Ptr(armcostmanagement.GranularityTypeDaily),
			},
			Timeframe: to.Ptr(armcostmanagement.TimeframeTypeMonthToDate),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/DepartmentQuery.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcostmanagement.QueryResult{
			Name: to.Ptr("ad67fd91-c131-4bda-9ba9-7187ecb1cebd"),
			Type: to.Ptr("microsoft.costmanagement/Query"),
			ID:   to.Ptr("providers/Microsoft.Billing/billingAccounts/70664866/departments/123/providers/Microsoft.CostManagement/Query/ad67fd91-c131-4bda-9ba9-7187ecb1cebd"),
			Properties: &armcostmanagement.QueryProperties{
				Columns: []*armcostmanagement.QueryColumn{
					{
						Name: to.Ptr("PreTaxCost"),
						Type: to.Ptr("Number"),
					},
					{
						Name: to.Ptr("ResourceGroup"),
						Type: to.Ptr("String"),
					},
					{
						Name: to.Ptr("UsageDate"),
						Type: to.Ptr("Number"),
					},
					{
						Name: to.Ptr("Currency"),
						Type: to.Ptr("String"),
					}},
				Rows: [][]interface{}{
					{
						float64(19.545363672276512),
						"JapanUnifia-Trial",
						float64(20180331),
						"USD"},
					{
						float64(173.41979241290323),
						"RVIIOT-TRIAL",
						float64(20180331),
						"USD"},
					{
						float64(20.35941656262545),
						"VSTSHOL-1595322048000",
						float64(20180331),
						"USD"},
					{
						float64(0.16677720329728665),
						"gs-stms-dev",
						float64(20180331),
						"USD"}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.QueryResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.QueryResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/DepartmentQuery.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/DepartmentQueryGrouping.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"DepartmentQueryGrouping-Legacy"},
	})
	client = armcostmanagement.NewQueryClient(cred, &options)
	res, err = client.Usage(ctx,
		"providers/Microsoft.Billing/billingAccounts/100/departments/123",
		armcostmanagement.QueryDefinition{
			Type: to.Ptr(armcostmanagement.ExportTypeUsage),
			Dataset: &armcostmanagement.QueryDataset{
				Aggregation: map[string]*armcostmanagement.QueryAggregation{
					"totalCost": {
						Name:     to.Ptr("PreTaxCost"),
						Function: to.Ptr(armcostmanagement.FunctionTypeSum),
					},
				},
				Granularity: to.Ptr(armcostmanagement.GranularityType("None")),
				Grouping: []*armcostmanagement.QueryGrouping{
					{
						Name: to.Ptr("ResourceGroup"),
						Type: to.Ptr(armcostmanagement.QueryColumnTypeDimension),
					}},
			},
			Timeframe: to.Ptr(armcostmanagement.TimeframeTypeTheLastMonth),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/DepartmentQueryGrouping.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcostmanagement.QueryResult{
			Name: to.Ptr("ad67fd91-c131-4bda-9ba9-7187ecb1cebd"),
			Type: to.Ptr("microsoft.costmanagement/Query"),
			ID:   to.Ptr("providers/Microsoft.Billing/billingAccounts/70664866/departments/123/providers/Microsoft.CostManagement/Query/ad67fd91-c131-4bda-9ba9-7187ecb1cebd"),
			Properties: &armcostmanagement.QueryProperties{
				Columns: []*armcostmanagement.QueryColumn{
					{
						Name: to.Ptr("PreTaxCost"),
						Type: to.Ptr("Number"),
					},
					{
						Name: to.Ptr("ResourceGroup"),
						Type: to.Ptr("String"),
					},
					{
						Name: to.Ptr("Currency"),
						Type: to.Ptr("String"),
					}},
				Rows: [][]interface{}{
					{
						float64(19.545363672276512),
						"JapanUnifia-Trial",
						"USD"},
					{
						float64(173.41979241290323),
						"RVIIOT-TRIAL",
						"USD"},
					{
						float64(20.35941656262545),
						"VSTSHOL-1595322048000",
						"USD"}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.QueryResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.QueryResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/DepartmentQueryGrouping.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/EnrollmentAccountQuery.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"EnrollmentAccountQuery-Legacy"},
	})
	client = armcostmanagement.NewQueryClient(cred, &options)
	res, err = client.Usage(ctx,
		"providers/Microsoft.Billing/billingAccounts/100/enrollmentAccounts/456",
		armcostmanagement.QueryDefinition{
			Type: to.Ptr(armcostmanagement.ExportTypeUsage),
			Dataset: &armcostmanagement.QueryDataset{
				Filter: &armcostmanagement.QueryFilter{
					And: []*armcostmanagement.QueryFilter{
						{
							Or: []*armcostmanagement.QueryFilter{
								{
									Dimensions: &armcostmanagement.QueryComparisonExpression{
										Name:     to.Ptr("ResourceLocation"),
										Operator: to.Ptr(armcostmanagement.QueryOperatorTypeIn),
										Values: []*string{
											to.Ptr("East US"),
											to.Ptr("West Europe")},
									},
								},
								{
									Tags: &armcostmanagement.QueryComparisonExpression{
										Name:     to.Ptr("Environment"),
										Operator: to.Ptr(armcostmanagement.QueryOperatorTypeIn),
										Values: []*string{
											to.Ptr("UAT"),
											to.Ptr("Prod")},
									},
								}},
						},
						{
							Dimensions: &armcostmanagement.QueryComparisonExpression{
								Name:     to.Ptr("ResourceGroup"),
								Operator: to.Ptr(armcostmanagement.QueryOperatorTypeIn),
								Values: []*string{
									to.Ptr("API")},
							},
						}},
				},
				Granularity: to.Ptr(armcostmanagement.GranularityTypeDaily),
			},
			Timeframe: to.Ptr(armcostmanagement.TimeframeTypeMonthToDate),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/EnrollmentAccountQuery.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcostmanagement.QueryResult{
			Name: to.Ptr("ad67fd91-c131-4bda-9ba9-7187ecb1cebd"),
			Type: to.Ptr("microsoft.costmanagement/Query"),
			ID:   to.Ptr("providers/Microsoft.Billing/billingAccounts/70664866/enrollmentAccounts/456/providers/Microsoft.CostManagement/Query/ad67fd91-c131-4bda-9ba9-7187ecb1cebd"),
			Properties: &armcostmanagement.QueryProperties{
				Columns: []*armcostmanagement.QueryColumn{
					{
						Name: to.Ptr("PreTaxCost"),
						Type: to.Ptr("Number"),
					},
					{
						Name: to.Ptr("ResourceGroup"),
						Type: to.Ptr("String"),
					},
					{
						Name: to.Ptr("UsageDate"),
						Type: to.Ptr("Number"),
					},
					{
						Name: to.Ptr("Currency"),
						Type: to.Ptr("String"),
					}},
				Rows: [][]interface{}{
					{
						float64(19.545363672276512),
						"JapanUnifia-Trial",
						float64(20180331),
						"USD"},
					{
						float64(173.41979241290323),
						"RVIIOT-TRIAL",
						float64(20180331),
						"USD"},
					{
						float64(20.35941656262545),
						"VSTSHOL-1595322048000",
						float64(20180331),
						"USD"},
					{
						float64(0.16677720329728665),
						"gs-stms-dev",
						float64(20180331),
						"USD"}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.QueryResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.QueryResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/EnrollmentAccountQuery.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/EnrollmentAccountQueryGrouping.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"EnrollmentAccountQueryGrouping-Legacy"},
	})
	client = armcostmanagement.NewQueryClient(cred, &options)
	res, err = client.Usage(ctx,
		"providers/Microsoft.Billing/billingAccounts/100/enrollmentAccounts/456",
		armcostmanagement.QueryDefinition{
			Type: to.Ptr(armcostmanagement.ExportTypeUsage),
			Dataset: &armcostmanagement.QueryDataset{
				Aggregation: map[string]*armcostmanagement.QueryAggregation{
					"totalCost": {
						Name:     to.Ptr("PreTaxCost"),
						Function: to.Ptr(armcostmanagement.FunctionTypeSum),
					},
				},
				Granularity: to.Ptr(armcostmanagement.GranularityTypeDaily),
				Grouping: []*armcostmanagement.QueryGrouping{
					{
						Name: to.Ptr("ResourceGroup"),
						Type: to.Ptr(armcostmanagement.QueryColumnTypeDimension),
					}},
			},
			Timeframe: to.Ptr(armcostmanagement.TimeframeTypeTheLastMonth),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/EnrollmentAccountQueryGrouping.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcostmanagement.QueryResult{
			Name: to.Ptr("ad67fd91-c131-4bda-9ba9-7187ecb1cebd"),
			Type: to.Ptr("microsoft.costmanagement/Query"),
			ID:   to.Ptr("providers/Microsoft.Billing/billingAccounts/70664866/enrollmentAccounts/456/providers/Microsoft.CostManagement/Query/ad67fd91-c131-4bda-9ba9-7187ecb1cebd"),
			Properties: &armcostmanagement.QueryProperties{
				Columns: []*armcostmanagement.QueryColumn{
					{
						Name: to.Ptr("PreTaxCost"),
						Type: to.Ptr("Number"),
					},
					{
						Name: to.Ptr("ResourceGroup"),
						Type: to.Ptr("String"),
					},
					{
						Name: to.Ptr("UsageDate"),
						Type: to.Ptr("Number"),
					},
					{
						Name: to.Ptr("Currency"),
						Type: to.Ptr("String"),
					}},
				Rows: [][]interface{}{
					{
						float64(19.545363672276512),
						"JapanUnifia-Trial",
						float64(20180331),
						"USD"},
					{
						float64(173.41979241290323),
						"RVIIOT-TRIAL",
						float64(20180331),
						"USD"},
					{
						float64(20.35941656262545),
						"VSTSHOL-1595322048000",
						float64(20180331),
						"USD"}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.QueryResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.QueryResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/EnrollmentAccountQueryGrouping.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/MCAInvoiceSectionQuery.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"InvoiceSectionQuery-Modern"},
	})
	client = armcostmanagement.NewQueryClient(cred, &options)
	res, err = client.Usage(ctx,
		"providers/Microsoft.Billing/billingAccounts/12345:6789/billingProfiles/13579/invoiceSections/9876",
		armcostmanagement.QueryDefinition{
			Type: to.Ptr(armcostmanagement.ExportTypeUsage),
			Dataset: &armcostmanagement.QueryDataset{
				Filter: &armcostmanagement.QueryFilter{
					And: []*armcostmanagement.QueryFilter{
						{
							Or: []*armcostmanagement.QueryFilter{
								{
									Dimensions: &armcostmanagement.QueryComparisonExpression{
										Name:     to.Ptr("ResourceLocation"),
										Operator: to.Ptr(armcostmanagement.QueryOperatorTypeIn),
										Values: []*string{
											to.Ptr("East US"),
											to.Ptr("West Europe")},
									},
								},
								{
									Tags: &armcostmanagement.QueryComparisonExpression{
										Name:     to.Ptr("Environment"),
										Operator: to.Ptr(armcostmanagement.QueryOperatorTypeIn),
										Values: []*string{
											to.Ptr("UAT"),
											to.Ptr("Prod")},
									},
								}},
						},
						{
							Dimensions: &armcostmanagement.QueryComparisonExpression{
								Name:     to.Ptr("ResourceGroup"),
								Operator: to.Ptr(armcostmanagement.QueryOperatorTypeIn),
								Values: []*string{
									to.Ptr("API")},
							},
						}},
				},
				Granularity: to.Ptr(armcostmanagement.GranularityTypeDaily),
			},
			Timeframe: to.Ptr(armcostmanagement.TimeframeTypeMonthToDate),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/MCAInvoiceSectionQuery.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcostmanagement.QueryResult{
			Name: to.Ptr("ad67fd91-c131-4bda-9ba9-7187ecb1cebd"),
			Type: to.Ptr("microsoft.costmanagement/Query"),
			ID:   to.Ptr("providers/Microsoft.Billing/billingAccounts/12345:6789/billingProfiles/13579/invoiceSections/9876/providers/Microsoft.CostManagement/Query/ad67fd91-c131-4bda-9ba9-7187ecb1cebd"),
			Properties: &armcostmanagement.QueryProperties{
				Columns: []*armcostmanagement.QueryColumn{
					{
						Name: to.Ptr("PreTaxCost"),
						Type: to.Ptr("Number"),
					},
					{
						Name: to.Ptr("ResourceGroup"),
						Type: to.Ptr("String"),
					},
					{
						Name: to.Ptr("UsageDate"),
						Type: to.Ptr("Number"),
					},
					{
						Name: to.Ptr("Currency"),
						Type: to.Ptr("String"),
					}},
				Rows: [][]interface{}{
					{
						float64(19.545363672276512),
						"JapanUnifia-Trial",
						float64(20180331),
						"USD"},
					{
						float64(173.41979241290323),
						"RVIIOT-TRIAL",
						float64(20180331),
						"USD"},
					{
						float64(20.35941656262545),
						"VSTSHOL-1595322048000",
						float64(20180331),
						"USD"},
					{
						float64(0.16677720329728665),
						"gs-stms-dev",
						float64(20180331),
						"USD"}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.QueryResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.QueryResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/MCAInvoiceSectionQuery.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/MCAInvoiceSectionQueryGrouping.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"InvoiceSectionQueryGrouping-Modern"},
	})
	client = armcostmanagement.NewQueryClient(cred, &options)
	res, err = client.Usage(ctx,
		"providers/Microsoft.Billing/billingAccounts/12345:6789/billingProfiles/13579/invoiceSections/9876",
		armcostmanagement.QueryDefinition{
			Type: to.Ptr(armcostmanagement.ExportTypeUsage),
			Dataset: &armcostmanagement.QueryDataset{
				Aggregation: map[string]*armcostmanagement.QueryAggregation{
					"totalCost": {
						Name:     to.Ptr("PreTaxCost"),
						Function: to.Ptr(armcostmanagement.FunctionTypeSum),
					},
				},
				Granularity: to.Ptr(armcostmanagement.GranularityType("None")),
				Grouping: []*armcostmanagement.QueryGrouping{
					{
						Name: to.Ptr("ResourceGroup"),
						Type: to.Ptr(armcostmanagement.QueryColumnTypeDimension),
					}},
			},
			Timeframe: to.Ptr(armcostmanagement.TimeframeTypeTheLastMonth),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/MCAInvoiceSectionQueryGrouping.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcostmanagement.QueryResult{
			Name: to.Ptr("ad67fd91-c131-4bda-9ba9-7187ecb1cebd"),
			Type: to.Ptr("microsoft.costmanagement/Query"),
			ID:   to.Ptr("providers/Microsoft.Billing/billingAccounts/12345:6789/billingProfiles/13579/invoiceSections/9876/providers/Microsoft.CostManagement/Query/ad67fd91-c131-4bda-9ba9-7187ecb1cebd"),
			Properties: &armcostmanagement.QueryProperties{
				Columns: []*armcostmanagement.QueryColumn{
					{
						Name: to.Ptr("PreTaxCost"),
						Type: to.Ptr("Number"),
					},
					{
						Name: to.Ptr("ResourceGroup"),
						Type: to.Ptr("String"),
					},
					{
						Name: to.Ptr("Currency"),
						Type: to.Ptr("String"),
					}},
				Rows: [][]interface{}{
					{
						float64(19.545363672276512),
						"JapanUnifia-Trial",
						"USD"},
					{
						float64(173.41979241290323),
						"RVIIOT-TRIAL",
						"USD"},
					{
						float64(20.35941656262545),
						"VSTSHOL-1595322048000",
						"USD"}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.QueryResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.QueryResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/MCAInvoiceSectionQueryGrouping.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ManagementGroupQuery.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ManagementGroupQuery-Legacy"},
	})
	client = armcostmanagement.NewQueryClient(cred, &options)
	res, err = client.Usage(ctx,
		"providers/Microsoft.Management/managementGroups/MyMgId",
		armcostmanagement.QueryDefinition{
			Type: to.Ptr(armcostmanagement.ExportTypeUsage),
			Dataset: &armcostmanagement.QueryDataset{
				Filter: &armcostmanagement.QueryFilter{
					And: []*armcostmanagement.QueryFilter{
						{
							Or: []*armcostmanagement.QueryFilter{
								{
									Dimensions: &armcostmanagement.QueryComparisonExpression{
										Name:     to.Ptr("ResourceLocation"),
										Operator: to.Ptr(armcostmanagement.QueryOperatorTypeIn),
										Values: []*string{
											to.Ptr("East US"),
											to.Ptr("West Europe")},
									},
								},
								{
									Tags: &armcostmanagement.QueryComparisonExpression{
										Name:     to.Ptr("Environment"),
										Operator: to.Ptr(armcostmanagement.QueryOperatorTypeIn),
										Values: []*string{
											to.Ptr("UAT"),
											to.Ptr("Prod")},
									},
								}},
						},
						{
							Dimensions: &armcostmanagement.QueryComparisonExpression{
								Name:     to.Ptr("ResourceGroup"),
								Operator: to.Ptr(armcostmanagement.QueryOperatorTypeIn),
								Values: []*string{
									to.Ptr("API")},
							},
						}},
				},
				Granularity: to.Ptr(armcostmanagement.GranularityTypeDaily),
			},
			Timeframe: to.Ptr(armcostmanagement.TimeframeTypeMonthToDate),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ManagementGroupQuery.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcostmanagement.QueryResult{
			Name: to.Ptr("ad67fd91-c131-4bda-9ba9-7187ecb1cebd"),
			Type: to.Ptr("microsoft.costmanagement/Query"),
			ID:   to.Ptr("providers/Microsoft.Management/managementGroups/MyMgId/providers/Microsoft.CostManagement/Query/ad67fd91-c131-4bda-9ba9-7187ecb1cebd"),
			Properties: &armcostmanagement.QueryProperties{
				Columns: []*armcostmanagement.QueryColumn{
					{
						Name: to.Ptr("PreTaxCost"),
						Type: to.Ptr("Number"),
					},
					{
						Name: to.Ptr("ResourceGroup"),
						Type: to.Ptr("String"),
					},
					{
						Name: to.Ptr("UsageDate"),
						Type: to.Ptr("Number"),
					},
					{
						Name: to.Ptr("Currency"),
						Type: to.Ptr("String"),
					}},
				Rows: [][]interface{}{
					{
						float64(19.545363672276512),
						"JapanUnifia-Trial",
						float64(20180331),
						"USD"},
					{
						float64(173.41979241290323),
						"RVIIOT-TRIAL",
						float64(20180331),
						"USD"},
					{
						float64(20.35941656262545),
						"VSTSHOL-1595322048000",
						float64(20180331),
						"USD"},
					{
						float64(0.16677720329728665),
						"gs-stms-dev",
						float64(20180331),
						"USD"}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.QueryResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.QueryResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ManagementGroupQuery.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ManagementGroupQueryGrouping.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ManagementGroupQueryGrouping-Legacy"},
	})
	client = armcostmanagement.NewQueryClient(cred, &options)
	res, err = client.Usage(ctx,
		"providers/Microsoft.Management/managementGroups/MyMgId",
		armcostmanagement.QueryDefinition{
			Type: to.Ptr(armcostmanagement.ExportTypeUsage),
			Dataset: &armcostmanagement.QueryDataset{
				Aggregation: map[string]*armcostmanagement.QueryAggregation{
					"totalCost": {
						Name:     to.Ptr("PreTaxCost"),
						Function: to.Ptr(armcostmanagement.FunctionTypeSum),
					},
				},
				Granularity: to.Ptr(armcostmanagement.GranularityType("None")),
				Grouping: []*armcostmanagement.QueryGrouping{
					{
						Name: to.Ptr("ResourceGroup"),
						Type: to.Ptr(armcostmanagement.QueryColumnTypeDimension),
					}},
			},
			Timeframe: to.Ptr(armcostmanagement.TimeframeTypeTheLastMonth),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ManagementGroupQueryGrouping.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcostmanagement.QueryResult{
			Name: to.Ptr("ad67fd91-c131-4bda-9ba9-7187ecb1cebd"),
			Type: to.Ptr("microsoft.costmanagement/Query"),
			ID:   to.Ptr("providers/Microsoft.Management/managementGroups/MyMgId/providers/Microsoft.CostManagement/Query/ad67fd91-c131-4bda-9ba9-7187ecb1cebd"),
			Properties: &armcostmanagement.QueryProperties{
				Columns: []*armcostmanagement.QueryColumn{
					{
						Name: to.Ptr("PreTaxCost"),
						Type: to.Ptr("Number"),
					},
					{
						Name: to.Ptr("ResourceGroup"),
						Type: to.Ptr("String"),
					},
					{
						Name: to.Ptr("UsageDate"),
						Type: to.Ptr("Number"),
					},
					{
						Name: to.Ptr("Currency"),
						Type: to.Ptr("String"),
					}},
				Rows: [][]interface{}{
					{
						float64(20.35941656262545),
						"VSTSHOL-1595322048000",
						float64(20180331),
						"USD"},
					{
						float64(173.41979241290323),
						"RVIIOT-TRIAL",
						float64(20180331),
						"USD"},
					{
						float64(19.545363672276512),
						"JapanUnifia-Trial",
						float64(20180331),
						"USD"}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.QueryResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.QueryResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ManagementGroupQueryGrouping.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ResourceGroupQuery.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ResourceGroupQuery-Legacy"},
	})
	client = armcostmanagement.NewQueryClient(cred, &options)
	res, err = client.Usage(ctx,
		"subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/ScreenSharingTest-peer",
		armcostmanagement.QueryDefinition{
			Type: to.Ptr(armcostmanagement.ExportTypeUsage),
			Dataset: &armcostmanagement.QueryDataset{
				Filter: &armcostmanagement.QueryFilter{
					And: []*armcostmanagement.QueryFilter{
						{
							Or: []*armcostmanagement.QueryFilter{
								{
									Dimensions: &armcostmanagement.QueryComparisonExpression{
										Name:     to.Ptr("ResourceLocation"),
										Operator: to.Ptr(armcostmanagement.QueryOperatorTypeIn),
										Values: []*string{
											to.Ptr("East US"),
											to.Ptr("West Europe")},
									},
								},
								{
									Tags: &armcostmanagement.QueryComparisonExpression{
										Name:     to.Ptr("Environment"),
										Operator: to.Ptr(armcostmanagement.QueryOperatorTypeIn),
										Values: []*string{
											to.Ptr("UAT"),
											to.Ptr("Prod")},
									},
								}},
						},
						{
							Dimensions: &armcostmanagement.QueryComparisonExpression{
								Name:     to.Ptr("ResourceGroup"),
								Operator: to.Ptr(armcostmanagement.QueryOperatorTypeIn),
								Values: []*string{
									to.Ptr("API")},
							},
						}},
				},
				Granularity: to.Ptr(armcostmanagement.GranularityTypeDaily),
			},
			Timeframe: to.Ptr(armcostmanagement.TimeframeTypeMonthToDate),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ResourceGroupQuery.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcostmanagement.QueryResult{
			Name: to.Ptr("9af9459d-441d-4055-9ed0-83d4c4a363fb"),
			Type: to.Ptr("microsoft.costmanagement/Query"),
			ID:   to.Ptr("subscriptions/55312978-ba1b-415c-9304-c4b9c43c0481/resourcegroups/ScreenSharingTest-peer/providers/Microsoft.CostManagement/Query/9af9459d-441d-4055-9ed0-83d4c4a363fb"),
			Properties: &armcostmanagement.QueryProperties{
				Columns: []*armcostmanagement.QueryColumn{
					{
						Name: to.Ptr("PreTaxCost"),
						Type: to.Ptr("Number"),
					},
					{
						Name: to.Ptr("ResourceGroup"),
						Type: to.Ptr("String"),
					},
					{
						Name: to.Ptr("UsageDate"),
						Type: to.Ptr("Number"),
					},
					{
						Name: to.Ptr("Currency"),
						Type: to.Ptr("String"),
					}},
				Rows: [][]interface{}{
					{
						float64(2.10333307059661),
						"ScreenSharingTest-peer",
						float64(20180417),
						"USD"},
					{
						float64(20.10333307059661),
						"ScreenSharingTest-peer",
						float64(20180418),
						"USD"}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.QueryResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.QueryResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ResourceGroupQuery.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ResourceGroupQueryGrouping.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ResourceGroupQueryGrouping-Legacy"},
	})
	client = armcostmanagement.NewQueryClient(cred, &options)
	res, err = client.Usage(ctx,
		"subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/ScreenSharingTest-peer",
		armcostmanagement.QueryDefinition{
			Type: to.Ptr(armcostmanagement.ExportTypeUsage),
			Dataset: &armcostmanagement.QueryDataset{
				Aggregation: map[string]*armcostmanagement.QueryAggregation{
					"totalCost": {
						Name:     to.Ptr("PreTaxCost"),
						Function: to.Ptr(armcostmanagement.FunctionTypeSum),
					},
				},
				Granularity: to.Ptr(armcostmanagement.GranularityTypeDaily),
				Grouping: []*armcostmanagement.QueryGrouping{
					{
						Name: to.Ptr("ResourceType"),
						Type: to.Ptr(armcostmanagement.QueryColumnTypeDimension),
					}},
			},
			Timeframe: to.Ptr(armcostmanagement.TimeframeTypeTheLastMonth),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ResourceGroupQueryGrouping.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcostmanagement.QueryResult{
			Name: to.Ptr("9af9459d-441d-4055-9ed0-83d4c4a363fb"),
			Type: to.Ptr("microsoft.costmanagement/Query"),
			ID:   to.Ptr("subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/ScreenSharingTest-peer/providers/Microsoft.CostManagement/Query/9af9459d-441d-4055-9ed0-83d4c4a363fb"),
			Properties: &armcostmanagement.QueryProperties{
				Columns: []*armcostmanagement.QueryColumn{
					{
						Name: to.Ptr("PreTaxCost"),
						Type: to.Ptr("Number"),
					},
					{
						Name: to.Ptr("ResourceType"),
						Type: to.Ptr("String"),
					},
					{
						Name: to.Ptr("UsageDate"),
						Type: to.Ptr("Number"),
					},
					{
						Name: to.Ptr("Currency"),
						Type: to.Ptr("String"),
					}},
				Rows: [][]interface{}{
					{
						float64(2.10333307059661),
						"Microsoft.SqlServer",
						float64(20180417),
						"USD"},
					{
						float64(20.10333307059661),
						"Microsoft.Compute",
						float64(20180418),
						"USD"}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.QueryResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.QueryResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ResourceGroupQueryGrouping.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/SubscriptionQuery.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SubscriptionQuery-Legacy"},
	})
	client = armcostmanagement.NewQueryClient(cred, &options)
	res, err = client.Usage(ctx,
		"subscriptions/00000000-0000-0000-0000-000000000000",
		armcostmanagement.QueryDefinition{
			Type: to.Ptr(armcostmanagement.ExportTypeUsage),
			Dataset: &armcostmanagement.QueryDataset{
				Filter: &armcostmanagement.QueryFilter{
					And: []*armcostmanagement.QueryFilter{
						{
							Or: []*armcostmanagement.QueryFilter{
								{
									Dimensions: &armcostmanagement.QueryComparisonExpression{
										Name:     to.Ptr("ResourceLocation"),
										Operator: to.Ptr(armcostmanagement.QueryOperatorTypeIn),
										Values: []*string{
											to.Ptr("East US"),
											to.Ptr("West Europe")},
									},
								},
								{
									Tags: &armcostmanagement.QueryComparisonExpression{
										Name:     to.Ptr("Environment"),
										Operator: to.Ptr(armcostmanagement.QueryOperatorTypeIn),
										Values: []*string{
											to.Ptr("UAT"),
											to.Ptr("Prod")},
									},
								}},
						},
						{
							Dimensions: &armcostmanagement.QueryComparisonExpression{
								Name:     to.Ptr("ResourceGroup"),
								Operator: to.Ptr(armcostmanagement.QueryOperatorTypeIn),
								Values: []*string{
									to.Ptr("API")},
							},
						}},
				},
				Granularity: to.Ptr(armcostmanagement.GranularityTypeDaily),
			},
			Timeframe: to.Ptr(armcostmanagement.TimeframeTypeMonthToDate),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/SubscriptionQuery.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcostmanagement.QueryResult{
			Name: to.Ptr("55312978-ba1b-415c-9304-cfd9c43c0481"),
			Type: to.Ptr("microsoft.costmanagement/Query"),
			ID:   to.Ptr("subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.CostManagement/Query/00000000-0000-0000-0000-000000000000"),
			Properties: &armcostmanagement.QueryProperties{
				Columns: []*armcostmanagement.QueryColumn{
					{
						Name: to.Ptr("PreTaxCost"),
						Type: to.Ptr("Number"),
					},
					{
						Name: to.Ptr("ResourceGroup"),
						Type: to.Ptr("String"),
					},
					{
						Name: to.Ptr("UsageDate"),
						Type: to.Ptr("Number"),
					},
					{
						Name: to.Ptr("Currency"),
						Type: to.Ptr("String"),
					}},
				Rows: [][]interface{}{
					{
						float64(2.10333307059661),
						"ScreenSharingTest-peer",
						float64(20180331),
						"USD"},
					{
						float64(218.68795741935486),
						"Ict_StratAndPlan_GoldSprova_Prod",
						float64(20180331),
						"USD"},
					{
						float64(0.14384913581657052),
						"ssbciotelement01",
						float64(20180401),
						"USD"},
					{
						float64(0.009865586851323632),
						"ict_stratandplan_goldsprova_prod",
						float64(20180429),
						"USD"}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.QueryResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.QueryResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/SubscriptionQuery.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/SubscriptionQueryGrouping.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SubscriptionQueryGrouping-Legacy"},
	})
	client = armcostmanagement.NewQueryClient(cred, &options)
	res, err = client.Usage(ctx,
		"subscriptions/00000000-0000-0000-0000-000000000000",
		armcostmanagement.QueryDefinition{
			Type: to.Ptr(armcostmanagement.ExportTypeUsage),
			Dataset: &armcostmanagement.QueryDataset{
				Aggregation: map[string]*armcostmanagement.QueryAggregation{
					"totalCost": {
						Name:     to.Ptr("PreTaxCost"),
						Function: to.Ptr(armcostmanagement.FunctionTypeSum),
					},
				},
				Granularity: to.Ptr(armcostmanagement.GranularityType("None")),
				Grouping: []*armcostmanagement.QueryGrouping{
					{
						Name: to.Ptr("ResourceGroup"),
						Type: to.Ptr(armcostmanagement.QueryColumnTypeDimension),
					}},
			},
			Timeframe: to.Ptr(armcostmanagement.TimeframeTypeTheLastMonth),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/SubscriptionQueryGrouping.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcostmanagement.QueryResult{
			Name: to.Ptr("55312978-ba1b-415c-9304-cfd9c43c0481"),
			Type: to.Ptr("microsoft.costmanagement/Query"),
			ID:   to.Ptr("subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.CostManagement/Query/00000000-0000-0000-0000-000000000000"),
			Properties: &armcostmanagement.QueryProperties{
				Columns: []*armcostmanagement.QueryColumn{
					{
						Name: to.Ptr("PreTaxCost"),
						Type: to.Ptr("Number"),
					},
					{
						Name: to.Ptr("ResourceGroup"),
						Type: to.Ptr("String"),
					},
					{
						Name: to.Ptr("Currency"),
						Type: to.Ptr("String"),
					}},
				Rows: [][]interface{}{
					{
						float64(0.009865586851323632),
						"Ict_StratAndPlan_GoldSprova_Prod_0",
						"USD"},
					{
						float64(218.68795741935486),
						"Ict_StratAndPlan_GoldSprova_Prod_1",
						"USD"},
					{
						float64(2.10333307059661),
						"ScreenSharingTest-peer1",
						"USD"},
					{
						float64(0.14384913581657052),
						"Ssbciotelement01",
						"USD"}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.QueryResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.QueryResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/SubscriptionQueryGrouping.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestQuery_UsageByExternalCloudProviderType(t *testing.T) {
	// From example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ExternalBillingAccountsQuery.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ExternalBillingAccountQueryList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcostmanagement.NewQueryClient(cred, &options)
	res, err := client.UsageByExternalCloudProviderType(ctx,
		armcostmanagement.ExternalCloudProviderTypeExternalBillingAccounts,
		"100",
		armcostmanagement.QueryDefinition{
			Type: to.Ptr(armcostmanagement.ExportTypeUsage),
			Dataset: &armcostmanagement.QueryDataset{
				Filter: &armcostmanagement.QueryFilter{
					And: []*armcostmanagement.QueryFilter{
						{
							Or: []*armcostmanagement.QueryFilter{
								{
									Dimensions: &armcostmanagement.QueryComparisonExpression{
										Name:     to.Ptr("ResourceLocation"),
										Operator: to.Ptr(armcostmanagement.QueryOperatorTypeIn),
										Values: []*string{
											to.Ptr("East US"),
											to.Ptr("West Europe")},
									},
								},
								{
									Tags: &armcostmanagement.QueryComparisonExpression{
										Name:     to.Ptr("Environment"),
										Operator: to.Ptr(armcostmanagement.QueryOperatorTypeIn),
										Values: []*string{
											to.Ptr("UAT"),
											to.Ptr("Prod")},
									},
								}},
						},
						{
							Dimensions: &armcostmanagement.QueryComparisonExpression{
								Name:     to.Ptr("ResourceGroup"),
								Operator: to.Ptr(armcostmanagement.QueryOperatorTypeIn),
								Values: []*string{
									to.Ptr("API")},
							},
						}},
				},
				Granularity: to.Ptr(armcostmanagement.GranularityTypeDaily),
			},
			Timeframe: to.Ptr(armcostmanagement.TimeframeTypeMonthToDate),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ExternalBillingAccountsQuery.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcostmanagement.QueryResult{
			Name: to.Ptr("6dc7b06a-d90a-4df5-b655-ce6cf1c0814d"),
			Type: to.Ptr("Microsoft.CostManagement/query"),
			ID:   to.Ptr("providers/Microsoft.CostManagement/externalBillingAccounts/100/query/6dc7b06a-d90a-4df5-b655-ce6cf1c0814d"),
			Properties: &armcostmanagement.QueryProperties{
				Columns: []*armcostmanagement.QueryColumn{
					{
						Name: to.Ptr("PreTaxCost"),
						Type: to.Ptr("Number"),
					},
					{
						Name: to.Ptr("ServiceName"),
						Type: to.Ptr("String"),
					},
					{
						Name: to.Ptr("Currency"),
						Type: to.Ptr("String"),
					}},
				Rows: [][]interface{}{
					{
						float64(0),
						"abc db",
						"USD"},
					{
						float64(30.2572751438),
						"abc compute cloud",
						"USD"},
					{
						float64(0.07675760200000002),
						"abc file system",
						"USD"},
					{
						float64(50.43096419040001),
						"abc elasticache",
						"USD"}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.QueryResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.QueryResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ExternalBillingAccountsQuery.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ExternalSubscriptionsQuery.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ExternalSubscriptionsQuery"},
	})
	client = armcostmanagement.NewQueryClient(cred, &options)
	res, err = client.UsageByExternalCloudProviderType(ctx,
		armcostmanagement.ExternalCloudProviderTypeExternalSubscriptions,
		"100",
		armcostmanagement.QueryDefinition{
			Type: to.Ptr(armcostmanagement.ExportTypeUsage),
			Dataset: &armcostmanagement.QueryDataset{
				Filter: &armcostmanagement.QueryFilter{
					And: []*armcostmanagement.QueryFilter{
						{
							Or: []*armcostmanagement.QueryFilter{
								{
									Dimensions: &armcostmanagement.QueryComparisonExpression{
										Name:     to.Ptr("ResourceLocation"),
										Operator: to.Ptr(armcostmanagement.QueryOperatorTypeIn),
										Values: []*string{
											to.Ptr("East US"),
											to.Ptr("West Europe")},
									},
								},
								{
									Tags: &armcostmanagement.QueryComparisonExpression{
										Name:     to.Ptr("Environment"),
										Operator: to.Ptr(armcostmanagement.QueryOperatorTypeIn),
										Values: []*string{
											to.Ptr("UAT"),
											to.Ptr("Prod")},
									},
								}},
						},
						{
							Dimensions: &armcostmanagement.QueryComparisonExpression{
								Name:     to.Ptr("ResourceGroup"),
								Operator: to.Ptr(armcostmanagement.QueryOperatorTypeIn),
								Values: []*string{
									to.Ptr("API")},
							},
						}},
				},
				Granularity: to.Ptr(armcostmanagement.GranularityTypeDaily),
			},
			Timeframe: to.Ptr(armcostmanagement.TimeframeTypeMonthToDate),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ExternalSubscriptionsQuery.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcostmanagement.QueryResult{
			Name: to.Ptr("d99477af-7510-40ee-aca2-e59bdca0d10d"),
			Type: to.Ptr("Microsoft.CostManagement/query"),
			ID:   to.Ptr("providers/Microsoft.CostManagement/externalSubscriptions/100/query/d99477af-7510-40ee-aca2-e59bdca0d10d"),
			Properties: &armcostmanagement.QueryProperties{
				Columns: []*armcostmanagement.QueryColumn{
					{
						Name: to.Ptr("PreTaxCost"),
						Type: to.Ptr("Number"),
					},
					{
						Name: to.Ptr("UsageDate"),
						Type: to.Ptr("Number"),
					},
					{
						Name: to.Ptr("Currency"),
						Type: to.Ptr("String"),
					}},
				Rows: [][]interface{}{},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.QueryResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.QueryResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ExternalSubscriptionsQuery.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOperations_List(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
