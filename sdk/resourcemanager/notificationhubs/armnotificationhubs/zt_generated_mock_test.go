//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armnotificationhubs_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/notificationhubs/armnotificationhubs"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestOperations_List(t *testing.T) {
	// From example specification/notificationhubs/resource-manager/Microsoft.NotificationHubs/stable/2017-04-01/examples/NHOperationsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"OperationsList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnotificationhubs.NewOperationsClient(cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/notificationhubs/resource-manager/Microsoft.NotificationHubs/stable/2017-04-01/examples/NHOperationsList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnotificationhubs.OperationListResult{
			Value: []*armnotificationhubs.Operation{
				{
					Name: to.Ptr("Microsoft.NotificationHubs/register/action"),
					Display: &armnotificationhubs.OperationDisplay{
						Operation: to.Ptr("Registers the NotificationHubs Provider"),
						Provider:  to.Ptr("Microsoft Azure Notification Hub"),
						Resource:  to.Ptr("Microsoft Azure Notification Hub"),
					},
				},
				{
					Name: to.Ptr("Microsoft.NotificationHubs/unregister/action"),
					Display: &armnotificationhubs.OperationDisplay{
						Operation: to.Ptr("Unregisters the NotificationHubs Provider"),
						Provider:  to.Ptr("Microsoft Azure Notification Hub"),
						Resource:  to.Ptr("Microsoft Azure Notification Hub"),
					},
				},
				{
					Name: to.Ptr("Microsoft.NotificationHubs/operationResults/read"),
					Display: &armnotificationhubs.OperationDisplay{
						Operation: to.Ptr("Operation results for Notification Hubs provider"),
						Provider:  to.Ptr("Microsoft Azure Notification Hub"),
						Resource:  to.Ptr("Microsoft Azure Notification Hub"),
					},
				},
				{
					Name: to.Ptr("Microsoft.NotificationHubs/CheckNamespaceAvailability/action"),
					Display: &armnotificationhubs.OperationDisplay{
						Operation: to.Ptr("Get namespace availability."),
						Provider:  to.Ptr("Microsoft Azure Notification Hub"),
						Resource:  to.Ptr("Microsoft Azure Notification Hub"),
					},
				},
				{
					Name: to.Ptr("Microsoft.NotificationHubs/namespaces/write"),
					Display: &armnotificationhubs.OperationDisplay{
						Operation: to.Ptr("Create Or Update Namespace "),
						Provider:  to.Ptr("Microsoft Azure Notification Hub"),
						Resource:  to.Ptr("Namespace"),
					},
				},
				{
					Name: to.Ptr("Microsoft.NotificationHubs/namespaces/read"),
					Display: &armnotificationhubs.OperationDisplay{
						Operation: to.Ptr("Get Namespace Resource"),
						Provider:  to.Ptr("Microsoft Azure NotificationHubs"),
						Resource:  to.Ptr("Namespace"),
					},
				},
				{
					Name: to.Ptr("Microsoft.NotificationHubs/namespaces/Delete"),
					Display: &armnotificationhubs.OperationDisplay{
						Operation: to.Ptr("Delete Namespace"),
						Provider:  to.Ptr("Microsoft Azure NotificationHubs"),
						Resource:  to.Ptr("Namespace"),
					},
				},
				{
					Name: to.Ptr("Microsoft.NotificationHubs/namespaces/authorizationRules/write"),
					Display: &armnotificationhubs.OperationDisplay{
						Operation: to.Ptr("Create or Update Namespace Authorization Rules"),
						Provider:  to.Ptr("Microsoft Azure NotificationHubs"),
						Resource:  to.Ptr("AuthorizationRules"),
					},
				},
				{
					Name: to.Ptr("Microsoft.NotificationHubs/namespaces/authorizationRules/action"),
					Display: &armnotificationhubs.OperationDisplay{
						Operation: to.Ptr("Get Namespace Authorization Rules"),
						Provider:  to.Ptr("Microsoft Azure NotificationHubs"),
						Resource:  to.Ptr("AuthorizationRules"),
					},
				},
				{
					Name: to.Ptr("Microsoft.NotificationHubs/namespaces/authorizationRules/read"),
					Display: &armnotificationhubs.OperationDisplay{
						Operation: to.Ptr("Get Namespace Authorization Rules"),
						Provider:  to.Ptr("Microsoft Azure NotificationHubs"),
						Resource:  to.Ptr("AuthorizationRules"),
					},
				},
				{
					Name: to.Ptr("Microsoft.NotificationHubs/namespaces/authorizationRules/delete"),
					Display: &armnotificationhubs.OperationDisplay{
						Operation: to.Ptr("Delete Namespace Authorization Rule"),
						Provider:  to.Ptr("Microsoft Azure NotificationHubs"),
						Resource:  to.Ptr("AuthorizationRules"),
					},
				},
				{
					Name: to.Ptr("Microsoft.NotificationHubs/namespaces/authorizationRules/listkeys/action"),
					Display: &armnotificationhubs.OperationDisplay{
						Operation: to.Ptr("Get Namespace Listkeys"),
						Provider:  to.Ptr("Microsoft Azure NotificationHubs"),
						Resource:  to.Ptr("AuthorizationRules"),
					},
				},
				{
					Name: to.Ptr("Microsoft.NotificationHubs/namespaces/authorizationRules/regenerateKeys/action"),
					Display: &armnotificationhubs.OperationDisplay{
						Operation: to.Ptr("Resource Regeneratekeys"),
						Provider:  to.Ptr("Microsoft Azure NotificationHubs"),
						Resource:  to.Ptr("AuthorizationRules"),
					},
				},
				{
					Name: to.Ptr("Microsoft.NotificationHubs/Namespaces/CheckNotificationHubAvailability/action"),
					Display: &armnotificationhubs.OperationDisplay{
						Operation: to.Ptr("CheckNotificationHubAvailability"),
						Provider:  to.Ptr("Microsoft Azure NotificationHubs"),
						Resource:  to.Ptr("AuthorizationRules"),
					},
				},
				{
					Name: to.Ptr("Microsoft.NotificationHubs/namespaces/notificationHubs/write"),
					Display: &armnotificationhubs.OperationDisplay{
						Operation: to.Ptr("Create or Update notification hub"),
						Provider:  to.Ptr("Microsoft Azure NotificationHubs"),
						Resource:  to.Ptr("NotificationHub"),
					},
				},
				{
					Name: to.Ptr("Microsoft.NotificationHubs/namespaces/notificationHubs/read"),
					Display: &armnotificationhubs.OperationDisplay{
						Operation: to.Ptr("Get notification hub"),
						Provider:  to.Ptr("Microsoft Azure NotificationHubs"),
						Resource:  to.Ptr("NotificationHub"),
					},
				},
				{
					Name: to.Ptr("Microsoft.NotificationHubs/namespaces/notificationHubs/Delete"),
					Display: &armnotificationhubs.OperationDisplay{
						Operation: to.Ptr("Delete notification hub"),
						Provider:  to.Ptr("Microsoft Azure NotificationHubs"),
						Resource:  to.Ptr("NotificationHub"),
					},
				},
				{
					Name: to.Ptr("Microsoft.NotificationHubs/namespaces/notificationHubs/authorizationRules/write"),
					Display: &armnotificationhubs.OperationDisplay{
						Operation: to.Ptr("Create or Update NotificationHub Authorization Rule"),
						Provider:  to.Ptr("Microsoft Azure NotificationHubs"),
						Resource:  to.Ptr("NotificationHub Authorization Rule"),
					},
				},
				{
					Name: to.Ptr("Microsoft.NotificationHubs/namespaces/notificationHubs/authorizationRules/action"),
					Display: &armnotificationhubs.OperationDisplay{
						Operation: to.Ptr(" Get NotificationHub Authorization Rules"),
						Provider:  to.Ptr("Microsoft Azure NotificationHubs"),
						Resource:  to.Ptr("NotificationHub AuthorizationRules"),
					},
				},
				{
					Name: to.Ptr("Microsoft.NotificationHubs/namespaces/notificationHubs/authorizationRules/read"),
					Display: &armnotificationhubs.OperationDisplay{
						Operation: to.Ptr(" Get NotificationHub Authorization Rules"),
						Provider:  to.Ptr("Microsoft Azure NotificationHubs"),
						Resource:  to.Ptr("NotificationHub AuthorizationRules"),
					},
				},
				{
					Name: to.Ptr("Microsoft.NotificationHubs/namespaces/notificationHubs/authorizationRules/delete"),
					Display: &armnotificationhubs.OperationDisplay{
						Operation: to.Ptr("Delete NotificationHub Authorization Rules"),
						Provider:  to.Ptr("Microsoft Azure NotificationHubs"),
						Resource:  to.Ptr("NotificationHub AuthorizationRules"),
					},
				},
				{
					Name: to.Ptr("Microsoft.NotificationHubs/namespaces/notificationHubs/authorizationRules/listkeys/action"),
					Display: &armnotificationhubs.OperationDisplay{
						Operation: to.Ptr("List NotificationHub keys"),
						Provider:  to.Ptr("Microsoft Azure NotificationHubs"),
						Resource:  to.Ptr("NotificationHub AuthorizationRules"),
					},
				},
				{
					Name: to.Ptr("Microsoft.NotificationHubs/namespaces/notificationHubs/authorizationRules/regenerateKeys/action"),
					Display: &armnotificationhubs.OperationDisplay{
						Operation: to.Ptr("Resource Regeneratekeys"),
						Provider:  to.Ptr("Microsoft Azure NotificationHubs"),
						Resource:  to.Ptr("NotificationHub AuthorizationRules"),
					},
				},
				{
					Name: to.Ptr("Microsoft.NotificationHubs/Namespaces/NotificationHubs/pnsCredentials/action"),
					Display: &armnotificationhubs.OperationDisplay{
						Operation: to.Ptr("Resource Get Notification Hub PNS Credentials"),
						Provider:  to.Ptr("Microsoft Azure NotificationHubs"),
						Resource:  to.Ptr("NotificationHub PnsCredential"),
					},
				},
				{
					Name: to.Ptr("Microsoft.NotificationHubs/Namespaces/NotificationHubs/debugSend/action"),
					Display: &armnotificationhubs.OperationDisplay{
						Operation: to.Ptr("Send a test push notification"),
						Provider:  to.Ptr("Microsoft Azure NotificationHubs"),
						Resource:  to.Ptr("NotificationHub resource"),
					},
				},
				{
					Name: to.Ptr("Microsoft.NotificationHubs/Namespaces/NotificationHubs/metricDefinitions/read"),
					Display: &armnotificationhubs.OperationDisplay{
						Operation: to.Ptr("Get NotificationHub metrics"),
						Provider:  to.Ptr("Microsoft Azure NotificationHubs"),
						Resource:  to.Ptr("NotificationHub metrics"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OperationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OperationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/notificationhubs/resource-manager/Microsoft.NotificationHubs/stable/2017-04-01/examples/NHOperationsList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNamespaces_CheckAvailability(t *testing.T) {
	// From example specification/notificationhubs/resource-manager/Microsoft.NotificationHubs/stable/2017-04-01/examples/Namespaces/NHNameSpaceCheckNameAvailability.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"NameSpaceCheckNameAvailability"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnotificationhubs.NewNamespacesClient("29cfa613-cbbc-4512-b1d6-1b3a92c7fa40", cred, &options)
	res, err := client.CheckAvailability(ctx,
		armnotificationhubs.CheckAvailabilityParameters{
			Name: to.Ptr("sdk-Namespace-2924"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/notificationhubs/resource-manager/Microsoft.NotificationHubs/stable/2017-04-01/examples/Namespaces/NHNameSpaceCheckNameAvailability.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnotificationhubs.CheckAvailabilityResult{
			Name:         to.Ptr("mytestnamespace"),
			Type:         to.Ptr("Microsoft.NotificationHubs/namespaces/checkNamespaceAvailability"),
			ID:           to.Ptr("/subscriptions/29cfa613-cbbc-4512-b1d6-1b3a92c7fa40/providers/Microsoft.NotificationHubs/CheckNamespaceAvailability"),
			Location:     to.Ptr("West Europe"),
			IsAvailiable: to.Ptr(false),
		}
		if !reflect.DeepEqual(exampleRes, res.CheckAvailabilityResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CheckAvailabilityResult)
			t.Fatalf("Mock response is not equal to example response for example specification/notificationhubs/resource-manager/Microsoft.NotificationHubs/stable/2017-04-01/examples/Namespaces/NHNameSpaceCheckNameAvailability.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNamespaces_CreateOrUpdate(t *testing.T) {
	// From example specification/notificationhubs/resource-manager/Microsoft.NotificationHubs/stable/2017-04-01/examples/Namespaces/NHNameSpaceCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"NameSpaceCreate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnotificationhubs.NewNamespacesClient("29cfa613-cbbc-4512-b1d6-1b3a92c7fa40", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"5ktrial",
		"nh-sdk-ns",
		armnotificationhubs.NamespaceCreateOrUpdateParameters{
			Location: to.Ptr("South Central US"),
			SKU: &armnotificationhubs.SKU{
				Name: to.Ptr(armnotificationhubs.SKUNameStandard),
				Tier: to.Ptr("Standard"),
			},
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/notificationhubs/resource-manager/Microsoft.NotificationHubs/stable/2017-04-01/examples/Namespaces/NHNameSpaceCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnotificationhubs.NamespaceResource{
			Name:     to.Ptr("sdk-Namespace-2924"),
			Type:     to.Ptr("Microsoft.NotificationHubs/Namespaces"),
			ID:       to.Ptr("/subscriptions/29cfa613-cbbc-4512-b1d6-1b3a92c7fa40/resourceGroups/ArunMonocle/providers/Microsoft.NotificationHubs/namespaces/sdk-Namespace-2924"),
			Location: to.Ptr("South Central US"),
			SKU: &armnotificationhubs.SKU{
				Name: to.Ptr(armnotificationhubs.SKUNameStandard),
				Tier: to.Ptr("Standard"),
			},
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
			Properties: &armnotificationhubs.NamespaceProperties{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-05-25T22:26:36.76Z"); return t }()),
				MetricID:           to.Ptr("29cfa613-cbbc-4512-b1d6-1b3a92c7fa40:sdk-namespace-2924"),
				ProvisioningState:  to.Ptr("Succeeded"),
				ServiceBusEndpoint: to.Ptr("https://sdk-Namespace-2924.servicebus.windows-int.net:443/"),
				UpdatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-05-25T22:26:36.76Z"); return t }()),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.NamespaceResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.NamespaceResource)
			t.Fatalf("Mock response is not equal to example response for example specification/notificationhubs/resource-manager/Microsoft.NotificationHubs/stable/2017-04-01/examples/Namespaces/NHNameSpaceCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNamespaces_Patch(t *testing.T) {
	// From example specification/notificationhubs/resource-manager/Microsoft.NotificationHubs/stable/2017-04-01/examples/Namespaces/NHNameSpaceUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"NameSpaceUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnotificationhubs.NewNamespacesClient("29cfa613-cbbc-4512-b1d6-1b3a92c7fa40", cred, &options)
	res, err := client.Patch(ctx,
		"5ktrial",
		"nh-sdk-ns",
		armnotificationhubs.NamespacePatchParameters{
			SKU: &armnotificationhubs.SKU{
				Name: to.Ptr(armnotificationhubs.SKUNameStandard),
				Tier: to.Ptr("Standard"),
			},
			Tags: map[string]*string{
				"tag1": to.Ptr("value1"),
				"tag2": to.Ptr("value2"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/notificationhubs/resource-manager/Microsoft.NotificationHubs/stable/2017-04-01/examples/Namespaces/NHNameSpaceUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnotificationhubs.NamespaceResource{
			Name:     to.Ptr("sdk-Namespace-3285"),
			Type:     to.Ptr("Microsoft.NotificationHubs/Namespaces"),
			ID:       to.Ptr("/subscriptions/29cfa613-cbbc-4512-b1d6-1b3a92c7fa40/resourceGroups/ArunMonocle/providers/Microsoft.NotificationHubs/namespaces/sdk-Namespace-3285"),
			Location: to.Ptr("South Central US"),
			SKU: &armnotificationhubs.SKU{
				Name: to.Ptr(armnotificationhubs.SKUNameStandard),
				Tier: to.Ptr("Standard"),
			},
			Tags: map[string]*string{
				"tag3": to.Ptr("value3"),
				"tag4": to.Ptr("value4"),
			},
			Properties: &armnotificationhubs.NamespaceProperties{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-05-25T23:07:58.17Z"); return t }()),
				ProvisioningState:  to.Ptr("Succeeded"),
				ServiceBusEndpoint: to.Ptr("https://sdk-Namespace-3285.servicebus.windows-int.net:443/"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.NamespaceResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.NamespaceResource)
			t.Fatalf("Mock response is not equal to example response for example specification/notificationhubs/resource-manager/Microsoft.NotificationHubs/stable/2017-04-01/examples/Namespaces/NHNameSpaceUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNamespaces_Delete(t *testing.T) {
	// From example specification/notificationhubs/resource-manager/Microsoft.NotificationHubs/stable/2017-04-01/examples/Namespaces/NHNameSpaceDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"NameSpaceDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnotificationhubs.NewNamespacesClient("29cfa613-cbbc-4512-b1d6-1b3a92c7fa40", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"5ktrial",
		"nh-sdk-ns",
		&armnotificationhubs.NamespacesClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/notificationhubs/resource-manager/Microsoft.NotificationHubs/stable/2017-04-01/examples/Namespaces/NHNameSpaceDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/notificationhubs/resource-manager/Microsoft.NotificationHubs/stable/2017-04-01/examples/Namespaces/NHNameSpaceDelete.json: %v", err)
	}
}

func TestNamespaces_Get(t *testing.T) {
	// From example specification/notificationhubs/resource-manager/Microsoft.NotificationHubs/stable/2017-04-01/examples/Namespaces/NHNameSpaceGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"NameSpaceGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnotificationhubs.NewNamespacesClient("29cfa613-cbbc-4512-b1d6-1b3a92c7fa40", cred, &options)
	res, err := client.Get(ctx,
		"5ktrial",
		"nh-sdk-ns",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/notificationhubs/resource-manager/Microsoft.NotificationHubs/stable/2017-04-01/examples/Namespaces/NHNameSpaceGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnotificationhubs.NamespaceResource{
			Name:     to.Ptr("nh-sdk-ns"),
			Type:     to.Ptr("Microsoft.NotificationHubs/namespaces"),
			ID:       to.Ptr("/subscriptions/29cfa613-cbbc-4512-b1d6-1b3a92c7fa40/resourceGroups/5ktrial/providers/Microsoft.NotificationHubs/namespaces/nh-sdk-ns"),
			Location: to.Ptr("South Central US"),
			SKU: &armnotificationhubs.SKU{
				Name: to.Ptr(armnotificationhubs.SKUNameBasic),
			},
			Tags: map[string]*string{},
			Properties: &armnotificationhubs.NamespaceProperties{
				CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-05-02T00:44:56.58Z"); return t }()),
				Critical:           to.Ptr(false),
				DataCenter:         to.Ptr("SN1"),
				Enabled:            to.Ptr(true),
				NamespaceType:      to.Ptr(armnotificationhubs.NamespaceTypeNotificationHub),
				ProvisioningState:  to.Ptr("Succeeded"),
				ScaleUnit:          to.Ptr("SN1-001"),
				ServiceBusEndpoint: to.Ptr("https://nh-sdk-ns.servicebus.windows.net:443/"),
				Status:             to.Ptr("Active"),
				UpdatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2018-05-02T01:02:19.79Z"); return t }()),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.NamespaceResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.NamespaceResource)
			t.Fatalf("Mock response is not equal to example response for example specification/notificationhubs/resource-manager/Microsoft.NotificationHubs/stable/2017-04-01/examples/Namespaces/NHNameSpaceGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNamespaces_CreateOrUpdateAuthorizationRule(t *testing.T) {
	// From example specification/notificationhubs/resource-manager/Microsoft.NotificationHubs/stable/2017-04-01/examples/Namespaces/NHNameSpaceAuthorizationRuleCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"NameSpaceAuthorizationRuleCreate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnotificationhubs.NewNamespacesClient("29cfa613-cbbc-4512-b1d6-1b3a92c7fa40", cred, &options)
	res, err := client.CreateOrUpdateAuthorizationRule(ctx,
		"5ktrial",
		"nh-sdk-ns",
		"sdk-AuthRules-1788",
		armnotificationhubs.SharedAccessAuthorizationRuleCreateOrUpdateParameters{
			Properties: &armnotificationhubs.SharedAccessAuthorizationRuleProperties{
				Rights: []*armnotificationhubs.AccessRights{
					to.Ptr(armnotificationhubs.AccessRightsListen),
					to.Ptr(armnotificationhubs.AccessRightsSend)},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/notificationhubs/resource-manager/Microsoft.NotificationHubs/stable/2017-04-01/examples/Namespaces/NHNameSpaceAuthorizationRuleCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnotificationhubs.SharedAccessAuthorizationRuleResource{
			Name: to.Ptr("sdk-AuthRules-1788"),
			Type: to.Ptr("Microsoft.NotificationHubs/Namespaces/AuthorizationRules"),
			ID:   to.Ptr("/subscriptions/29cfa613-cbbc-4512-b1d6-1b3a92c7fa40/resourceGroups/ArunMonocle/providers/Microsoft.NotificationHubs/namespaces/sdk-Namespace-6914/AuthorizationRules/sdk-AuthRules-1788"),
			Properties: &armnotificationhubs.SharedAccessAuthorizationRuleProperties{
				Rights: []*armnotificationhubs.AccessRights{
					to.Ptr(armnotificationhubs.AccessRightsListen),
					to.Ptr(armnotificationhubs.AccessRightsSend)},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SharedAccessAuthorizationRuleResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SharedAccessAuthorizationRuleResource)
			t.Fatalf("Mock response is not equal to example response for example specification/notificationhubs/resource-manager/Microsoft.NotificationHubs/stable/2017-04-01/examples/Namespaces/NHNameSpaceAuthorizationRuleCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNamespaces_DeleteAuthorizationRule(t *testing.T) {
	// From example specification/notificationhubs/resource-manager/Microsoft.NotificationHubs/stable/2017-04-01/examples/Namespaces/NHNameSpaceAuthorizationRuleDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"NameSpaceAuthorizationRuleDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnotificationhubs.NewNamespacesClient("29cfa613-cbbc-4512-b1d6-1b3a92c7fa40", cred, &options)
	_, err := client.DeleteAuthorizationRule(ctx,
		"5ktrial",
		"nh-sdk-ns",
		"RootManageSharedAccessKey",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/notificationhubs/resource-manager/Microsoft.NotificationHubs/stable/2017-04-01/examples/Namespaces/NHNameSpaceAuthorizationRuleDelete.json: %v", err)
	}
}

func TestNamespaces_GetAuthorizationRule(t *testing.T) {
	// From example specification/notificationhubs/resource-manager/Microsoft.NotificationHubs/stable/2017-04-01/examples/Namespaces/NHNameSpaceAuthorizationRuleGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"NameSpaceAuthorizationRuleGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnotificationhubs.NewNamespacesClient("29cfa613-cbbc-4512-b1d6-1b3a92c7fa40", cred, &options)
	res, err := client.GetAuthorizationRule(ctx,
		"5ktrial",
		"nh-sdk-ns",
		"RootManageSharedAccessKey",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/notificationhubs/resource-manager/Microsoft.NotificationHubs/stable/2017-04-01/examples/Namespaces/NHNameSpaceAuthorizationRuleGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnotificationhubs.SharedAccessAuthorizationRuleResource{
			Name:     to.Ptr("RootManageSharedAccessKey"),
			Type:     to.Ptr("Microsoft.NotificationHubs/Namespaces/AuthorizationRules"),
			ID:       to.Ptr("/subscriptions/29cfa613-cbbc-4512-b1d6-1b3a92c7fa40/resourceGroups/5ktrial/providers/Microsoft.NotificationHubs/namespaces/nh-sdk-ns/AuthorizationRules/RootManageSharedAccessKey"),
			Location: to.Ptr("South Central US"),
			Properties: &armnotificationhubs.SharedAccessAuthorizationRuleProperties{
				ClaimType:    to.Ptr("SharedAccessKey"),
				ClaimValue:   to.Ptr("None"),
				CreatedTime:  to.Ptr("2018-05-02T18:24:51.0690674Z"),
				KeyName:      to.Ptr("RootManageSharedAccessKey"),
				ModifiedTime: to.Ptr("2018-05-02T18:24:51.0690674Z"),
				PrimaryKey:   to.Ptr("############################################"),
				Rights: []*armnotificationhubs.AccessRights{
					to.Ptr(armnotificationhubs.AccessRightsListen),
					to.Ptr(armnotificationhubs.AccessRightsManage),
					to.Ptr(armnotificationhubs.AccessRightsSend)},
				SecondaryKey: to.Ptr("############################################"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SharedAccessAuthorizationRuleResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SharedAccessAuthorizationRuleResource)
			t.Fatalf("Mock response is not equal to example response for example specification/notificationhubs/resource-manager/Microsoft.NotificationHubs/stable/2017-04-01/examples/Namespaces/NHNameSpaceAuthorizationRuleGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNamespaces_List(t *testing.T) {
	// From example specification/notificationhubs/resource-manager/Microsoft.NotificationHubs/stable/2017-04-01/examples/Namespaces/NHNameSpaceListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"NameSpaceListByResourceGroup"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnotificationhubs.NewNamespacesClient("29cfa613-cbbc-4512-b1d6-1b3a92c7fa40", cred, &options)
	pager := client.List("5ktrial",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/notificationhubs/resource-manager/Microsoft.NotificationHubs/stable/2017-04-01/examples/Namespaces/NHNameSpaceListByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnotificationhubs.NamespaceListResult{
			Value: []*armnotificationhubs.NamespaceResource{
				{
					Name:     to.Ptr("sdk-Namespace-2924"),
					Type:     to.Ptr("Microsoft.NotificationHubs/Namespaces"),
					ID:       to.Ptr("/subscriptions/29cfa613-cbbc-4512-b1d6-1b3a92c7fa40/resourceGroups/ArunMonocle/providers/Microsoft.NotificationHubs/namespaces/sdk-Namespace-2924"),
					Location: to.Ptr("South Central US"),
					SKU: &armnotificationhubs.SKU{
						Name: to.Ptr(armnotificationhubs.SKUNameStandard),
						Tier: to.Ptr("Standard"),
					},
					Tags: map[string]*string{
						"tag1": to.Ptr("value1"),
						"tag2": to.Ptr("value2"),
					},
					Properties: &armnotificationhubs.NamespaceProperties{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-05-25T22:26:36.76Z"); return t }()),
						MetricID:           to.Ptr("29cfa613-cbbc-4512-b1d6-1b3a92c7fa40:sdk-namespace-2924"),
						ProvisioningState:  to.Ptr("Succeeded"),
						ServiceBusEndpoint: to.Ptr("https://sdk-Namespace-2924.servicebus.windows-int.net:443/"),
						UpdatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-05-25T22:26:59.35Z"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.NamespaceListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.NamespaceListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/notificationhubs/resource-manager/Microsoft.NotificationHubs/stable/2017-04-01/examples/Namespaces/NHNameSpaceListByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNamespaces_ListAll(t *testing.T) {
	// From example specification/notificationhubs/resource-manager/Microsoft.NotificationHubs/stable/2017-04-01/examples/Namespaces/NHNameSpaceList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"NameSpaceList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnotificationhubs.NewNamespacesClient("29cfa613-cbbc-4512-b1d6-1b3a92c7fa40", cred, &options)
	pager := client.ListAll(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/notificationhubs/resource-manager/Microsoft.NotificationHubs/stable/2017-04-01/examples/Namespaces/NHNameSpaceList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnotificationhubs.NamespaceListResult{
			Value: []*armnotificationhubs.NamespaceResource{
				{
					Name:     to.Ptr("NS-91f08e47-2b04-4943-b0cd-a5fb02b88f20"),
					Type:     to.Ptr("Microsoft.NotificationHubs/Namespaces"),
					ID:       to.Ptr("/subscriptions/29cfa613-cbbc-4512-b1d6-1b3a92c7fa40/resourceGroups/Default-ServiceBus-SouthCentralUS/providers/Microsoft.NotificationHubs/namespaces/NS-91f08e47-2b04-4943-b0cd-a5fb02b88f20"),
					Location: to.Ptr("South Central US"),
					SKU: &armnotificationhubs.SKU{
						Name: to.Ptr(armnotificationhubs.SKUNameStandard),
						Tier: to.Ptr("Standard"),
					},
					Tags: map[string]*string{},
					Properties: &armnotificationhubs.NamespaceProperties{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-08-23T02:40:17.27Z"); return t }()),
						MetricID:           to.Ptr("29cfa613-cbbc-4512-b1d6-1b3a92c7fa40:ns-91f08e47-2b04-4943-b0cd-a5fb02b88f20"),
						ProvisioningState:  to.Ptr("Succeeded"),
						ServiceBusEndpoint: to.Ptr("https://NS-91f08e47-2b04-4943-b0cd-a5fb02b88f20.servicebus.windows-int.net:443/"),
						UpdatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-11T07:15:30.78Z"); return t }()),
					},
				},
				{
					Name:     to.Ptr("NS-41dc63f4-0b08-4029-b3ef-535a131bfa65"),
					Type:     to.Ptr("Microsoft.NotificationHubs/Namespaces"),
					ID:       to.Ptr("/subscriptions/29cfa613-cbbc-4512-b1d6-1b3a92c7fa40/resourceGroups/Default-ServiceBus-SouthCentralUS/providers/Microsoft.NotificationHubs/namespaces/NS-41dc63f4-0b08-4029-b3ef-535a131bfa65"),
					Location: to.Ptr("South Central US"),
					SKU: &armnotificationhubs.SKU{
						Name: to.Ptr(armnotificationhubs.SKUNameStandard),
						Tier: to.Ptr("Standard"),
					},
					Tags: map[string]*string{},
					Properties: &armnotificationhubs.NamespaceProperties{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-08-23T03:50:38.98Z"); return t }()),
						MetricID:           to.Ptr("29cfa613-cbbc-4512-b1d6-1b3a92c7fa40:ns-41dc63f4-0b08-4029-b3ef-535a131bfa65"),
						ProvisioningState:  to.Ptr("Succeeded"),
						ServiceBusEndpoint: to.Ptr("https://NS-41dc63f4-0b08-4029-b3ef-535a131bfa65.servicebus.windows-int.net:443/"),
						UpdatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-11T10:42:58.003Z"); return t }()),
					},
				},
				{
					Name:     to.Ptr("NS-df52cf51-e831-4bf2-bd92-e9885f68a996"),
					Type:     to.Ptr("Microsoft.NotificationHubs/Namespaces"),
					ID:       to.Ptr("/subscriptions/29cfa613-cbbc-4512-b1d6-1b3a92c7fa40/resourceGroups/Default-ServiceBus-SouthCentralUS/providers/Microsoft.NotificationHubs/namespaces/NS-df52cf51-e831-4bf2-bd92-e9885f68a996"),
					Location: to.Ptr("South Central US"),
					SKU: &armnotificationhubs.SKU{
						Name: to.Ptr(armnotificationhubs.SKUNameStandard),
						Tier: to.Ptr("Standard"),
					},
					Tags: map[string]*string{},
					Properties: &armnotificationhubs.NamespaceProperties{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-09-16T01:17:54.997Z"); return t }()),
						MetricID:           to.Ptr("29cfa613-cbbc-4512-b1d6-1b3a92c7fa40:ns-df52cf51-e831-4bf2-bd92-e9885f68a996"),
						ProvisioningState:  to.Ptr("Succeeded"),
						ServiceBusEndpoint: to.Ptr("https://NS-df52cf51-e831-4bf2-bd92-e9885f68a996.servicebus.windows-int.net:443/"),
						UpdatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-11T06:44:39.737Z"); return t }()),
					},
				},
				{
					Name:     to.Ptr("rrama-ns2"),
					Type:     to.Ptr("Microsoft.NotificationHubs/Namespaces"),
					ID:       to.Ptr("/subscriptions/29cfa613-cbbc-4512-b1d6-1b3a92c7fa40/resourceGroups/sadfsadfsadf/providers/Microsoft.NotificationHubs/namespaces/rrama-ns2"),
					Location: to.Ptr("South Central US"),
					SKU: &armnotificationhubs.SKU{
						Name: to.Ptr(armnotificationhubs.SKUNameStandard),
						Tier: to.Ptr("Standard"),
					},
					Tags: map[string]*string{},
					Properties: &armnotificationhubs.NamespaceProperties{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-08-23T04:14:00.013Z"); return t }()),
						MetricID:           to.Ptr("29cfa613-cbbc-4512-b1d6-1b3a92c7fa40:rrama-ns2"),
						ProvisioningState:  to.Ptr("Succeeded"),
						ServiceBusEndpoint: to.Ptr("https://rrama-ns2.servicebus.windows-int.net:443/"),
						UpdatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-03T22:53:32.927Z"); return t }()),
					},
				},
				{
					Name:     to.Ptr("NS-20e57600-29d0-4035-ac85-74f4c54dcda1"),
					Type:     to.Ptr("Microsoft.NotificationHubs/Namespaces"),
					ID:       to.Ptr("/subscriptions/29cfa613-cbbc-4512-b1d6-1b3a92c7fa40/resourceGroups/Default-ServiceBus-SouthCentralUS/providers/Microsoft.NotificationHubs/namespaces/NS-20e57600-29d0-4035-ac85-74f4c54dcda1"),
					Location: to.Ptr("South Central US"),
					SKU: &armnotificationhubs.SKU{
						Name: to.Ptr(armnotificationhubs.SKUNameStandard),
						Tier: to.Ptr("Standard"),
					},
					Tags: map[string]*string{},
					Properties: &armnotificationhubs.NamespaceProperties{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-08-23T03:30:49.16Z"); return t }()),
						MetricID:           to.Ptr("29cfa613-cbbc-4512-b1d6-1b3a92c7fa40:ns-20e57600-29d0-4035-ac85-74f4c54dcda1"),
						ProvisioningState:  to.Ptr("Succeeded"),
						ServiceBusEndpoint: to.Ptr("https://NS-20e57600-29d0-4035-ac85-74f4c54dcda1.servicebus.windows-int.net:443/"),
						UpdatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-11T04:17:58.483Z"); return t }()),
					},
				},
				{
					Name:     to.Ptr("NS-3e538a1a-58fb-4315-b2ce-76f5c944114c"),
					Type:     to.Ptr("Microsoft.NotificationHubs/Namespaces"),
					ID:       to.Ptr("/subscriptions/29cfa613-cbbc-4512-b1d6-1b3a92c7fa40/resourceGroups/Default-ServiceBus-SouthCentralUS/providers/Microsoft.NotificationHubs/namespaces/NS-3e538a1a-58fb-4315-b2ce-76f5c944114c"),
					Location: to.Ptr("South Central US"),
					SKU: &armnotificationhubs.SKU{
						Name: to.Ptr(armnotificationhubs.SKUNameStandard),
						Tier: to.Ptr("Standard"),
					},
					Tags: map[string]*string{},
					Properties: &armnotificationhubs.NamespaceProperties{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-09-16T18:07:30.05Z"); return t }()),
						MetricID:           to.Ptr("29cfa613-cbbc-4512-b1d6-1b3a92c7fa40:ns-3e538a1a-58fb-4315-b2ce-76f5c944114c"),
						ProvisioningState:  to.Ptr("Succeeded"),
						ServiceBusEndpoint: to.Ptr("https://NS-3e538a1a-58fb-4315-b2ce-76f5c944114c.servicebus.windows-int.net:443/"),
						UpdatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-11T10:42:57.747Z"); return t }()),
					},
				},
				{
					Name:     to.Ptr("NS-4e1bfdf1-0cff-4e86-ae80-cdcac4873039"),
					Type:     to.Ptr("Microsoft.NotificationHubs/Namespaces"),
					ID:       to.Ptr("/subscriptions/29cfa613-cbbc-4512-b1d6-1b3a92c7fa40/resourceGroups/Default-ServiceBus-SouthCentralUS/providers/Microsoft.NotificationHubs/namespaces/NS-4e1bfdf1-0cff-4e86-ae80-cdcac4873039"),
					Location: to.Ptr("South Central US"),
					SKU: &armnotificationhubs.SKU{
						Name: to.Ptr(armnotificationhubs.SKUNameStandard),
						Tier: to.Ptr("Standard"),
					},
					Tags: map[string]*string{},
					Properties: &armnotificationhubs.NamespaceProperties{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-09-16T01:01:58.73Z"); return t }()),
						MetricID:           to.Ptr("29cfa613-cbbc-4512-b1d6-1b3a92c7fa40:ns-4e1bfdf1-0cff-4e86-ae80-cdcac4873039"),
						ProvisioningState:  to.Ptr("Succeeded"),
						ServiceBusEndpoint: to.Ptr("https://NS-4e1bfdf1-0cff-4e86-ae80-cdcac4873039.servicebus.windows-int.net:443/"),
						UpdatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-11T03:02:59.8Z"); return t }()),
					},
				},
				{
					Name:     to.Ptr("NS-6b90b7f3-7aa0-48c9-bc30-b299dcb66c03"),
					Type:     to.Ptr("Microsoft.NotificationHubs/Namespaces"),
					ID:       to.Ptr("/subscriptions/29cfa613-cbbc-4512-b1d6-1b3a92c7fa40/resourceGroups/Default-ServiceBus-SouthCentralUS/providers/Microsoft.NotificationHubs/namespaces/NS-6b90b7f3-7aa0-48c9-bc30-b299dcb66c03"),
					Location: to.Ptr("South Central US"),
					SKU: &armnotificationhubs.SKU{
						Name: to.Ptr(armnotificationhubs.SKUNameStandard),
						Tier: to.Ptr("Standard"),
					},
					Tags: map[string]*string{},
					Properties: &armnotificationhubs.NamespaceProperties{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-08-23T03:22:45.327Z"); return t }()),
						MetricID:           to.Ptr("29cfa613-cbbc-4512-b1d6-1b3a92c7fa40:ns-6b90b7f3-7aa0-48c9-bc30-b299dcb66c03"),
						ProvisioningState:  to.Ptr("Succeeded"),
						ServiceBusEndpoint: to.Ptr("https://NS-6b90b7f3-7aa0-48c9-bc30-b299dcb66c03.servicebus.windows-int.net:443/"),
						UpdatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-11T06:08:01.207Z"); return t }()),
					},
				},
				{
					Name:     to.Ptr("NS-c05e9df3-7737-44ee-a321-15f6e0545b97"),
					Type:     to.Ptr("Microsoft.NotificationHubs/Namespaces"),
					ID:       to.Ptr("/subscriptions/29cfa613-cbbc-4512-b1d6-1b3a92c7fa40/resourceGroups/Default-ServiceBus-SouthCentralUS/providers/Microsoft.NotificationHubs/namespaces/NS-c05e9df3-7737-44ee-a321-15f6e0545b97"),
					Location: to.Ptr("South Central US"),
					SKU: &armnotificationhubs.SKU{
						Name: to.Ptr(armnotificationhubs.SKUNameStandard),
						Tier: to.Ptr("Standard"),
					},
					Tags: map[string]*string{},
					Properties: &armnotificationhubs.NamespaceProperties{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-08-05T03:29:19.75Z"); return t }()),
						MetricID:           to.Ptr("29cfa613-cbbc-4512-b1d6-1b3a92c7fa40:ns-c05e9df3-7737-44ee-a321-15f6e0545b97"),
						ProvisioningState:  to.Ptr("Succeeded"),
						ServiceBusEndpoint: to.Ptr("https://NS-c05e9df3-7737-44ee-a321-15f6e0545b97.servicebus.windows-int.net:443/"),
						UpdatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-11T08:10:35.527Z"); return t }()),
					},
				},
				{
					Name:     to.Ptr("NS-dcb4152c-231b-4c16-a683-07cc6b38fa46"),
					Type:     to.Ptr("Microsoft.NotificationHubs/Namespaces"),
					ID:       to.Ptr("/subscriptions/29cfa613-cbbc-4512-b1d6-1b3a92c7fa40/resourceGroups/Default-ServiceBus-SouthCentralUS/providers/Microsoft.NotificationHubs/namespaces/NS-dcb4152c-231b-4c16-a683-07cc6b38fa46"),
					Location: to.Ptr("South Central US"),
					SKU: &armnotificationhubs.SKU{
						Name: to.Ptr(armnotificationhubs.SKUNameStandard),
						Tier: to.Ptr("Standard"),
					},
					Tags: map[string]*string{},
					Properties: &armnotificationhubs.NamespaceProperties{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-08-05T03:34:35.363Z"); return t }()),
						MetricID:           to.Ptr("29cfa613-cbbc-4512-b1d6-1b3a92c7fa40:ns-dcb4152c-231b-4c16-a683-07cc6b38fa46"),
						ProvisioningState:  to.Ptr("Succeeded"),
						ServiceBusEndpoint: to.Ptr("https://NS-dcb4152c-231b-4c16-a683-07cc6b38fa46.servicebus.windows-int.net:443/"),
						UpdatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-11T05:33:00.957Z"); return t }()),
					},
				},
				{
					Name:     to.Ptr("NS-f501f5e6-1f24-439b-8982-9af665156d40"),
					Type:     to.Ptr("Microsoft.NotificationHubs/Namespaces"),
					ID:       to.Ptr("/subscriptions/29cfa613-cbbc-4512-b1d6-1b3a92c7fa40/resourceGroups/Default-ServiceBus-SouthCentralUS/providers/Microsoft.NotificationHubs/namespaces/NS-f501f5e6-1f24-439b-8982-9af665156d40"),
					Location: to.Ptr("South Central US"),
					SKU: &armnotificationhubs.SKU{
						Name: to.Ptr(armnotificationhubs.SKUNameStandard),
						Tier: to.Ptr("Standard"),
					},
					Tags: map[string]*string{},
					Properties: &armnotificationhubs.NamespaceProperties{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-09-16T01:25:55.707Z"); return t }()),
						MetricID:           to.Ptr("29cfa613-cbbc-4512-b1d6-1b3a92c7fa40:ns-f501f5e6-1f24-439b-8982-9af665156d40"),
						ProvisioningState:  to.Ptr("Succeeded"),
						ServiceBusEndpoint: to.Ptr("https://NS-f501f5e6-1f24-439b-8982-9af665156d40.servicebus.windows-int.net:443/"),
						UpdatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-11T07:42:59.687Z"); return t }()),
					},
				},
				{
					Name:     to.Ptr("NS-fe2ed660-2cd6-46f2-a9c3-7e11551a1f30"),
					Type:     to.Ptr("Microsoft.NotificationHubs/Namespaces"),
					ID:       to.Ptr("/subscriptions/29cfa613-cbbc-4512-b1d6-1b3a92c7fa40/resourceGroups/Default-ServiceBus-SouthCentralUS/providers/Microsoft.NotificationHubs/namespaces/NS-fe2ed660-2cd6-46f2-a9c3-7e11551a1f30"),
					Location: to.Ptr("South Central US"),
					SKU: &armnotificationhubs.SKU{
						Name: to.Ptr(armnotificationhubs.SKUNameStandard),
						Tier: to.Ptr("Standard"),
					},
					Tags: map[string]*string{},
					Properties: &armnotificationhubs.NamespaceProperties{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-08-23T02:32:08.227Z"); return t }()),
						MetricID:           to.Ptr("29cfa613-cbbc-4512-b1d6-1b3a92c7fa40:ns-fe2ed660-2cd6-46f2-a9c3-7e11551a1f30"),
						ProvisioningState:  to.Ptr("Succeeded"),
						ServiceBusEndpoint: to.Ptr("https://NS-fe2ed660-2cd6-46f2-a9c3-7e11551a1f30.servicebus.windows-int.net:443/"),
						UpdatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-11T06:32:57.77Z"); return t }()),
					},
				},
				{
					Name:     to.Ptr("NS-8a5e3b4e-4e97-4d85-9083-cd33536c9d71"),
					Type:     to.Ptr("Microsoft.NotificationHubs/Namespaces"),
					ID:       to.Ptr("/subscriptions/29cfa613-cbbc-4512-b1d6-1b3a92c7fa40/resourceGroups/Default-ServiceBus-SouthCentralUS/providers/Microsoft.NotificationHubs/namespaces/NS-8a5e3b4e-4e97-4d85-9083-cd33536c9d71"),
					Location: to.Ptr("South Central US"),
					SKU: &armnotificationhubs.SKU{
						Name: to.Ptr(armnotificationhubs.SKUNameStandard),
						Tier: to.Ptr("Standard"),
					},
					Tags: map[string]*string{},
					Properties: &armnotificationhubs.NamespaceProperties{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-09-16T00:54:05.103Z"); return t }()),
						MetricID:           to.Ptr("29cfa613-cbbc-4512-b1d6-1b3a92c7fa40:ns-8a5e3b4e-4e97-4d85-9083-cd33536c9d71"),
						ProvisioningState:  to.Ptr("Succeeded"),
						ServiceBusEndpoint: to.Ptr("https://NS-8a5e3b4e-4e97-4d85-9083-cd33536c9d71.servicebus.windows-int.net:443/"),
						UpdatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-11T10:43:50.313Z"); return t }()),
					},
				},
				{
					Name:     to.Ptr("NS-6520cc09-01ac-40a3-bc09-c5c431116e92"),
					Type:     to.Ptr("Microsoft.NotificationHubs/Namespaces"),
					ID:       to.Ptr("/subscriptions/29cfa613-cbbc-4512-b1d6-1b3a92c7fa40/resourceGroups/Default-ServiceBus-SouthCentralUS/providers/Microsoft.NotificationHubs/namespaces/NS-6520cc09-01ac-40a3-bc09-c5c431116e92"),
					Location: to.Ptr("South Central US"),
					SKU: &armnotificationhubs.SKU{
						Name: to.Ptr(armnotificationhubs.SKUNameStandard),
						Tier: to.Ptr("Standard"),
					},
					Tags: map[string]*string{},
					Properties: &armnotificationhubs.NamespaceProperties{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-09-16T01:49:59.243Z"); return t }()),
						MetricID:           to.Ptr("29cfa613-cbbc-4512-b1d6-1b3a92c7fa40:ns-6520cc09-01ac-40a3-bc09-c5c431116e92"),
						ProvisioningState:  to.Ptr("Succeeded"),
						ServiceBusEndpoint: to.Ptr("https://NS-6520cc09-01ac-40a3-bc09-c5c431116e92.servicebus.windows-int.net:443/"),
						UpdatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-11T08:15:36.95Z"); return t }()),
					},
				},
				{
					Name:     to.Ptr("NS-bfba6d5c-a425-42d9-85db-0f4da770e29a"),
					Type:     to.Ptr("Microsoft.NotificationHubs/Namespaces"),
					ID:       to.Ptr("/subscriptions/29cfa613-cbbc-4512-b1d6-1b3a92c7fa40/resourceGroups/Default-ServiceBus-SouthCentralUS/providers/Microsoft.NotificationHubs/namespaces/NS-bfba6d5c-a425-42d9-85db-0f4da770e29a"),
					Location: to.Ptr("South Central US"),
					SKU: &armnotificationhubs.SKU{
						Name: to.Ptr(armnotificationhubs.SKUNameStandard),
						Tier: to.Ptr("Standard"),
					},
					Tags: map[string]*string{},
					Properties: &armnotificationhubs.NamespaceProperties{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-08-05T03:23:32.083Z"); return t }()),
						MetricID:           to.Ptr("29cfa613-cbbc-4512-b1d6-1b3a92c7fa40:ns-bfba6d5c-a425-42d9-85db-0f4da770e29a"),
						ProvisioningState:  to.Ptr("Succeeded"),
						ServiceBusEndpoint: to.Ptr("https://NS-bfba6d5c-a425-42d9-85db-0f4da770e29a.servicebus.windows-int.net:443/"),
						UpdatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-11T09:02:57.433Z"); return t }()),
					},
				},
				{
					Name:     to.Ptr("NS-43b136b4-8716-40b2-97c5-0d77cac0062c"),
					Type:     to.Ptr("Microsoft.NotificationHubs/Namespaces"),
					ID:       to.Ptr("/subscriptions/29cfa613-cbbc-4512-b1d6-1b3a92c7fa40/resourceGroups/Default-ServiceBus-SouthCentralUS/providers/Microsoft.NotificationHubs/namespaces/NS-43b136b4-8716-40b2-97c5-0d77cac0062c"),
					Location: to.Ptr("South Central US"),
					SKU: &armnotificationhubs.SKU{
						Name: to.Ptr(armnotificationhubs.SKUNameStandard),
						Tier: to.Ptr("Standard"),
					},
					Tags: map[string]*string{},
					Properties: &armnotificationhubs.NamespaceProperties{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-08-23T03:14:50.577Z"); return t }()),
						MetricID:           to.Ptr("29cfa613-cbbc-4512-b1d6-1b3a92c7fa40:ns-43b136b4-8716-40b2-97c5-0d77cac0062c"),
						ProvisioningState:  to.Ptr("Succeeded"),
						ServiceBusEndpoint: to.Ptr("https://NS-43b136b4-8716-40b2-97c5-0d77cac0062c.servicebus.windows-int.net:443/"),
						UpdatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-11T09:23:01.067Z"); return t }()),
					},
				},
				{
					Name:     to.Ptr("NS-7c0443de-5f88-450c-b574-83f60a097dd1"),
					Type:     to.Ptr("Microsoft.NotificationHubs/Namespaces"),
					ID:       to.Ptr("/subscriptions/29cfa613-cbbc-4512-b1d6-1b3a92c7fa40/resourceGroups/Default-ServiceBus-SouthCentralUS/providers/Microsoft.NotificationHubs/namespaces/NS-7c0443de-5f88-450c-b574-83f60a097dd1"),
					Location: to.Ptr("South Central US"),
					SKU: &armnotificationhubs.SKU{
						Name: to.Ptr(armnotificationhubs.SKUNameStandard),
						Tier: to.Ptr("Standard"),
					},
					Tags: map[string]*string{},
					Properties: &armnotificationhubs.NamespaceProperties{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-08-23T04:07:15.397Z"); return t }()),
						MetricID:           to.Ptr("29cfa613-cbbc-4512-b1d6-1b3a92c7fa40:ns-7c0443de-5f88-450c-b574-83f60a097dd1"),
						ProvisioningState:  to.Ptr("Succeeded"),
						ServiceBusEndpoint: to.Ptr("https://NS-7c0443de-5f88-450c-b574-83f60a097dd1.servicebus.windows-int.net:443/"),
						UpdatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-11T04:03:03.097Z"); return t }()),
					},
				},
				{
					Name:     to.Ptr("NS-62dd7753-a5f9-42fd-a354-ca38a4505d69"),
					Type:     to.Ptr("Microsoft.NotificationHubs/Namespaces"),
					ID:       to.Ptr("/subscriptions/29cfa613-cbbc-4512-b1d6-1b3a92c7fa40/resourceGroups/Default-ServiceBus-SouthCentralUS/providers/Microsoft.NotificationHubs/namespaces/NS-62dd7753-a5f9-42fd-a354-ca38a4505d69"),
					Location: to.Ptr("South Central US"),
					SKU: &armnotificationhubs.SKU{
						Name: to.Ptr(armnotificationhubs.SKUNameStandard),
						Tier: to.Ptr("Standard"),
					},
					Tags: map[string]*string{},
					Properties: &armnotificationhubs.NamespaceProperties{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-09-16T01:33:50.45Z"); return t }()),
						MetricID:           to.Ptr("29cfa613-cbbc-4512-b1d6-1b3a92c7fa40:ns-62dd7753-a5f9-42fd-a354-ca38a4505d69"),
						ProvisioningState:  to.Ptr("Succeeded"),
						ServiceBusEndpoint: to.Ptr("https://NS-62dd7753-a5f9-42fd-a354-ca38a4505d69.servicebus.windows-int.net:443/"),
						UpdatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-11T05:35:33.053Z"); return t }()),
					},
				},
				{
					Name:     to.Ptr("NS-ae18a18c-97ab-4089-965d-8acbf4794091"),
					Type:     to.Ptr("Microsoft.NotificationHubs/Namespaces"),
					ID:       to.Ptr("/subscriptions/29cfa613-cbbc-4512-b1d6-1b3a92c7fa40/resourceGroups/Default-ServiceBus-SouthCentralUS/providers/Microsoft.NotificationHubs/namespaces/NS-ae18a18c-97ab-4089-965d-8acbf4794091"),
					Location: to.Ptr("South Central US"),
					SKU: &armnotificationhubs.SKU{
						Name: to.Ptr(armnotificationhubs.SKUNameStandard),
						Tier: to.Ptr("Standard"),
					},
					Tags: map[string]*string{},
					Properties: &armnotificationhubs.NamespaceProperties{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-08-23T02:43:36.517Z"); return t }()),
						MetricID:           to.Ptr("29cfa613-cbbc-4512-b1d6-1b3a92c7fa40:ns-ae18a18c-97ab-4089-965d-8acbf4794091"),
						ProvisioningState:  to.Ptr("Succeeded"),
						ServiceBusEndpoint: to.Ptr("https://NS-ae18a18c-97ab-4089-965d-8acbf4794091.servicebus.windows-int.net:443/"),
						UpdatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-11T12:40:30.587Z"); return t }()),
					},
				},
				{
					Name:     to.Ptr("NS-8e3b56c1-0ee8-4e13-ae88-5cadf6e2ce11"),
					Type:     to.Ptr("Microsoft.NotificationHubs/Namespaces"),
					ID:       to.Ptr("/subscriptions/29cfa613-cbbc-4512-b1d6-1b3a92c7fa40/resourceGroups/Default-ServiceBus-SouthCentralUS/providers/Microsoft.NotificationHubs/namespaces/NS-8e3b56c1-0ee8-4e13-ae88-5cadf6e2ce11"),
					Location: to.Ptr("South Central US"),
					SKU: &armnotificationhubs.SKU{
						Name: to.Ptr(armnotificationhubs.SKUNameStandard),
						Tier: to.Ptr("Standard"),
					},
					Tags: map[string]*string{},
					Properties: &armnotificationhubs.NamespaceProperties{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-09-16T00:46:03.773Z"); return t }()),
						MetricID:           to.Ptr("29cfa613-cbbc-4512-b1d6-1b3a92c7fa40:ns-8e3b56c1-0ee8-4e13-ae88-5cadf6e2ce11"),
						ProvisioningState:  to.Ptr("Succeeded"),
						ServiceBusEndpoint: to.Ptr("https://NS-8e3b56c1-0ee8-4e13-ae88-5cadf6e2ce11.servicebus.windows-int.net:443/"),
						UpdatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-11T04:43:54.56Z"); return t }()),
					},
				},
				{
					Name:     to.Ptr("NS-7ffca4b4-4728-4fb0-b2d0-1e7c016e3a44"),
					Type:     to.Ptr("Microsoft.NotificationHubs/Namespaces"),
					ID:       to.Ptr("/subscriptions/29cfa613-cbbc-4512-b1d6-1b3a92c7fa40/resourceGroups/Default-ServiceBus-SouthCentralUS/providers/Microsoft.NotificationHubs/namespaces/NS-7ffca4b4-4728-4fb0-b2d0-1e7c016e3a44"),
					Location: to.Ptr("South Central US"),
					SKU: &armnotificationhubs.SKU{
						Name: to.Ptr(armnotificationhubs.SKUNameStandard),
						Tier: to.Ptr("Standard"),
					},
					Tags: map[string]*string{},
					Properties: &armnotificationhubs.NamespaceProperties{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-08-23T03:59:12.1Z"); return t }()),
						MetricID:           to.Ptr("29cfa613-cbbc-4512-b1d6-1b3a92c7fa40:ns-7ffca4b4-4728-4fb0-b2d0-1e7c016e3a44"),
						ProvisioningState:  to.Ptr("Succeeded"),
						ServiceBusEndpoint: to.Ptr("https://NS-7ffca4b4-4728-4fb0-b2d0-1e7c016e3a44.servicebus.windows-int.net:443/"),
						UpdatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-11T06:33:52.23Z"); return t }()),
					},
				},
				{
					Name:     to.Ptr("NS-d9337efd-9b27-454c-b2a5-dcfea56920d9"),
					Type:     to.Ptr("Microsoft.NotificationHubs/Namespaces"),
					ID:       to.Ptr("/subscriptions/29cfa613-cbbc-4512-b1d6-1b3a92c7fa40/resourceGroups/Default-ServiceBus-SouthCentralUS/providers/Microsoft.NotificationHubs/namespaces/NS-d9337efd-9b27-454c-b2a5-dcfea56920d9"),
					Location: to.Ptr("South Central US"),
					SKU: &armnotificationhubs.SKU{
						Name: to.Ptr(armnotificationhubs.SKUNameStandard),
						Tier: to.Ptr("Standard"),
					},
					Tags: map[string]*string{},
					Properties: &armnotificationhubs.NamespaceProperties{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-08-05T03:45:09.27Z"); return t }()),
						MetricID:           to.Ptr("29cfa613-cbbc-4512-b1d6-1b3a92c7fa40:ns-d9337efd-9b27-454c-b2a5-dcfea56920d9"),
						ProvisioningState:  to.Ptr("Succeeded"),
						ServiceBusEndpoint: to.Ptr("https://NS-d9337efd-9b27-454c-b2a5-dcfea56920d9.servicebus.windows-int.net:443/"),
						UpdatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-11T06:20:31.863Z"); return t }()),
					},
				},
				{
					Name:     to.Ptr("NS-ad5ae732-abea-4e62-9de0-c90de0ddec0a"),
					Type:     to.Ptr("Microsoft.NotificationHubs/Namespaces"),
					ID:       to.Ptr("/subscriptions/29cfa613-cbbc-4512-b1d6-1b3a92c7fa40/resourceGroups/Default-ServiceBus-SouthCentralUS/providers/Microsoft.NotificationHubs/namespaces/NS-ad5ae732-abea-4e62-9de0-c90de0ddec0a"),
					Location: to.Ptr("South Central US"),
					SKU: &armnotificationhubs.SKU{
						Name: to.Ptr(armnotificationhubs.SKUNameStandard),
						Tier: to.Ptr("Standard"),
					},
					Tags: map[string]*string{},
					Properties: &armnotificationhubs.NamespaceProperties{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-08-23T02:34:36.447Z"); return t }()),
						MetricID:           to.Ptr("29cfa613-cbbc-4512-b1d6-1b3a92c7fa40:ns-ad5ae732-abea-4e62-9de0-c90de0ddec0a"),
						ProvisioningState:  to.Ptr("Succeeded"),
						ServiceBusEndpoint: to.Ptr("https://NS-ad5ae732-abea-4e62-9de0-c90de0ddec0a.servicebus.windows-int.net:443/"),
						UpdatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-11T06:15:31.607Z"); return t }()),
					},
				},
				{
					Name:     to.Ptr("NS-d447fb03-c7da-40fe-b5eb-14f36888837b"),
					Type:     to.Ptr("Microsoft.NotificationHubs/Namespaces"),
					ID:       to.Ptr("/subscriptions/29cfa613-cbbc-4512-b1d6-1b3a92c7fa40/resourceGroups/Default-ServiceBus-SouthCentralUS/providers/Microsoft.NotificationHubs/namespaces/NS-d447fb03-c7da-40fe-b5eb-14f36888837b"),
					Location: to.Ptr("South Central US"),
					SKU: &armnotificationhubs.SKU{
						Name: to.Ptr(armnotificationhubs.SKUNameStandard),
						Tier: to.Ptr("Standard"),
					},
					Tags: map[string]*string{},
					Properties: &armnotificationhubs.NamespaceProperties{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-08-05T00:53:46.697Z"); return t }()),
						MetricID:           to.Ptr("29cfa613-cbbc-4512-b1d6-1b3a92c7fa40:ns-d447fb03-c7da-40fe-b5eb-14f36888837b"),
						ProvisioningState:  to.Ptr("Succeeded"),
						ServiceBusEndpoint: to.Ptr("https://NS-d447fb03-c7da-40fe-b5eb-14f36888837b.servicebus.windows-int.net:443/"),
						UpdatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-11T11:09:41.26Z"); return t }()),
					},
				},
				{
					Name:     to.Ptr("ReproSB"),
					Type:     to.Ptr("Microsoft.NotificationHubs/Namespaces"),
					ID:       to.Ptr("/subscriptions/29cfa613-cbbc-4512-b1d6-1b3a92c7fa40/resourceGroups/RapscallionResources/providers/Microsoft.NotificationHubs/namespaces/ReproSB"),
					Location: to.Ptr("South Central US"),
					SKU: &armnotificationhubs.SKU{
						Name: to.Ptr(armnotificationhubs.SKUNameStandard),
						Tier: to.Ptr("Standard"),
					},
					Tags: map[string]*string{},
					Properties: &armnotificationhubs.NamespaceProperties{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-27T19:29:34.523Z"); return t }()),
						MetricID:           to.Ptr("29cfa613-cbbc-4512-b1d6-1b3a92c7fa40:reprosb"),
						ProvisioningState:  to.Ptr("Succeeded"),
						ServiceBusEndpoint: to.Ptr("https://ReproSB.servicebus.windows-int.net:443/"),
						UpdatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-27T19:29:58.64Z"); return t }()),
					},
				},
				{
					Name:     to.Ptr("NS-4c90097f-19a8-42e7-bb3c-4ac088994719"),
					Type:     to.Ptr("Microsoft.NotificationHubs/Namespaces"),
					ID:       to.Ptr("/subscriptions/29cfa613-cbbc-4512-b1d6-1b3a92c7fa40/resourceGroups/Default-ServiceBus-SouthCentralUS/providers/Microsoft.NotificationHubs/namespaces/NS-4c90097f-19a8-42e7-bb3c-4ac088994719"),
					Location: to.Ptr("South Central US"),
					SKU: &armnotificationhubs.SKU{
						Name: to.Ptr(armnotificationhubs.SKUNameStandard),
						Tier: to.Ptr("Standard"),
					},
					Tags: map[string]*string{},
					Properties: &armnotificationhubs.NamespaceProperties{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-09-16T17:35:32.61Z"); return t }()),
						MetricID:           to.Ptr("29cfa613-cbbc-4512-b1d6-1b3a92c7fa40:ns-4c90097f-19a8-42e7-bb3c-4ac088994719"),
						ProvisioningState:  to.Ptr("Succeeded"),
						ServiceBusEndpoint: to.Ptr("https://NS-4c90097f-19a8-42e7-bb3c-4ac088994719.servicebus.windows-int.net:443/"),
						UpdatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-11T09:13:52.27Z"); return t }()),
					},
				},
				{
					Name:     to.Ptr("rrama-1-23-17"),
					Type:     to.Ptr("Microsoft.NotificationHubs/Namespaces"),
					ID:       to.Ptr("/subscriptions/29cfa613-cbbc-4512-b1d6-1b3a92c7fa40/resourceGroups/Default-ServiceBus-SouthCentralUS/providers/Microsoft.NotificationHubs/namespaces/rrama-1-23-17"),
					Location: to.Ptr("South Central US"),
					SKU: &armnotificationhubs.SKU{
						Name: to.Ptr(armnotificationhubs.SKUNameStandard),
						Tier: to.Ptr("Standard"),
					},
					Tags: map[string]*string{},
					Properties: &armnotificationhubs.NamespaceProperties{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-01-23T22:54:40.907Z"); return t }()),
						MetricID:           to.Ptr("29cfa613-cbbc-4512-b1d6-1b3a92c7fa40:rrama-1-23-17"),
						ProvisioningState:  to.Ptr("Succeeded"),
						ServiceBusEndpoint: to.Ptr("https://rrama-1-23-17.servicebus.windows-int.net:443/"),
						UpdatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-04T00:53:28.777Z"); return t }()),
					},
				},
				{
					Name:     to.Ptr("NS-5191e541-8e4e-4229-9fdc-b89f6c3e7f12"),
					Type:     to.Ptr("Microsoft.NotificationHubs/Namespaces"),
					ID:       to.Ptr("/subscriptions/29cfa613-cbbc-4512-b1d6-1b3a92c7fa40/resourceGroups/Default-ServiceBus-SouthCentralUS/providers/Microsoft.NotificationHubs/namespaces/NS-5191e541-8e4e-4229-9fdc-b89f6c3e7f12"),
					Location: to.Ptr("South Central US"),
					SKU: &armnotificationhubs.SKU{
						Name: to.Ptr(armnotificationhubs.SKUNameStandard),
						Tier: to.Ptr("Standard"),
					},
					Tags: map[string]*string{},
					Properties: &armnotificationhubs.NamespaceProperties{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-09-16T17:43:25.71Z"); return t }()),
						MetricID:           to.Ptr("29cfa613-cbbc-4512-b1d6-1b3a92c7fa40:ns-5191e541-8e4e-4229-9fdc-b89f6c3e7f12"),
						ProvisioningState:  to.Ptr("Succeeded"),
						ServiceBusEndpoint: to.Ptr("https://NS-5191e541-8e4e-4229-9fdc-b89f6c3e7f12.servicebus.windows-int.net:443/"),
						UpdatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-11T11:05:31.89Z"); return t }()),
					},
				},
				{
					Name:     to.Ptr("NS-be903820-3533-46e8-90e4-72c132411848"),
					Type:     to.Ptr("Microsoft.NotificationHubs/Namespaces"),
					ID:       to.Ptr("/subscriptions/29cfa613-cbbc-4512-b1d6-1b3a92c7fa40/resourceGroups/Default-ServiceBus-SouthCentralUS/providers/Microsoft.NotificationHubs/namespaces/NS-be903820-3533-46e8-90e4-72c132411848"),
					Location: to.Ptr("South Central US"),
					SKU: &armnotificationhubs.SKU{
						Name: to.Ptr(armnotificationhubs.SKUNameStandard),
						Tier: to.Ptr("Standard"),
					},
					Tags: map[string]*string{},
					Properties: &armnotificationhubs.NamespaceProperties{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-08-05T03:24:01.923Z"); return t }()),
						MetricID:           to.Ptr("29cfa613-cbbc-4512-b1d6-1b3a92c7fa40:ns-be903820-3533-46e8-90e4-72c132411848"),
						ProvisioningState:  to.Ptr("Succeeded"),
						ServiceBusEndpoint: to.Ptr("https://NS-be903820-3533-46e8-90e4-72c132411848.servicebus.windows-int.net:443/"),
						UpdatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-11T10:09:42.513Z"); return t }()),
					},
				},
				{
					Name:     to.Ptr("rrama-namespace1"),
					Type:     to.Ptr("Microsoft.NotificationHubs/Namespaces"),
					ID:       to.Ptr("/subscriptions/29cfa613-cbbc-4512-b1d6-1b3a92c7fa40/resourceGroups/Default-ServiceBus-SouthCentralUS/providers/Microsoft.NotificationHubs/namespaces/rrama-namespace1"),
					Location: to.Ptr("South Central US"),
					SKU: &armnotificationhubs.SKU{
						Name: to.Ptr(armnotificationhubs.SKUNameStandard),
						Tier: to.Ptr("Standard"),
					},
					Tags: map[string]*string{},
					Properties: &armnotificationhubs.NamespaceProperties{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-08-05T00:47:22.963Z"); return t }()),
						MetricID:           to.Ptr("29cfa613-cbbc-4512-b1d6-1b3a92c7fa40:rrama-namespace1"),
						ProvisioningState:  to.Ptr("Succeeded"),
						ServiceBusEndpoint: to.Ptr("https://rrama-namespace1.servicebus.windows-int.net:443/"),
						UpdatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-08-05T00:47:27.297Z"); return t }()),
					},
				},
				{
					Name:     to.Ptr("NS-a3c38e9b-32a3-4c51-85d7-263150a8dda9"),
					Type:     to.Ptr("Microsoft.NotificationHubs/Namespaces"),
					ID:       to.Ptr("/subscriptions/29cfa613-cbbc-4512-b1d6-1b3a92c7fa40/resourceGroups/Default-ServiceBus-SouthCentralUS/providers/Microsoft.NotificationHubs/namespaces/NS-a3c38e9b-32a3-4c51-85d7-263150a8dda9"),
					Location: to.Ptr("South Central US"),
					SKU: &armnotificationhubs.SKU{
						Name: to.Ptr(armnotificationhubs.SKUNameStandard),
						Tier: to.Ptr("Standard"),
					},
					Tags: map[string]*string{},
					Properties: &armnotificationhubs.NamespaceProperties{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-09-16T00:38:02.517Z"); return t }()),
						MetricID:           to.Ptr("29cfa613-cbbc-4512-b1d6-1b3a92c7fa40:ns-a3c38e9b-32a3-4c51-85d7-263150a8dda9"),
						ProvisioningState:  to.Ptr("Succeeded"),
						ServiceBusEndpoint: to.Ptr("https://NS-a3c38e9b-32a3-4c51-85d7-263150a8dda9.servicebus.windows-int.net:443/"),
						UpdatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-11T05:03:55.96Z"); return t }()),
					},
				},
				{
					Name:     to.Ptr("NS-70d3fa25-6bbe-4a6b-a381-a52cf0d539e6"),
					Type:     to.Ptr("Microsoft.NotificationHubs/Namespaces"),
					ID:       to.Ptr("/subscriptions/29cfa613-cbbc-4512-b1d6-1b3a92c7fa40/resourceGroups/Default-ServiceBus-SouthCentralUS/providers/Microsoft.NotificationHubs/namespaces/NS-70d3fa25-6bbe-4a6b-a381-a52cf0d539e6"),
					Location: to.Ptr("South Central US"),
					SKU: &armnotificationhubs.SKU{
						Name: to.Ptr(armnotificationhubs.SKUNameStandard),
						Tier: to.Ptr("Standard"),
					},
					Tags: map[string]*string{},
					Properties: &armnotificationhubs.NamespaceProperties{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-08-23T03:42:40.01Z"); return t }()),
						MetricID:           to.Ptr("29cfa613-cbbc-4512-b1d6-1b3a92c7fa40:ns-70d3fa25-6bbe-4a6b-a381-a52cf0d539e6"),
						ProvisioningState:  to.Ptr("Succeeded"),
						ServiceBusEndpoint: to.Ptr("https://NS-70d3fa25-6bbe-4a6b-a381-a52cf0d539e6.servicebus.windows-int.net:443/"),
						UpdatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-11T06:33:02.363Z"); return t }()),
					},
				},
				{
					Name:     to.Ptr("NS-e6536f77-0d1b-4a6b-8f42-29cc15b2930a"),
					Type:     to.Ptr("Microsoft.NotificationHubs/Namespaces"),
					ID:       to.Ptr("/subscriptions/29cfa613-cbbc-4512-b1d6-1b3a92c7fa40/resourceGroups/Default-ServiceBus-SouthCentralUS/providers/Microsoft.NotificationHubs/namespaces/NS-e6536f77-0d1b-4a6b-8f42-29cc15b2930a"),
					Location: to.Ptr("South Central US"),
					SKU: &armnotificationhubs.SKU{
						Name: to.Ptr(armnotificationhubs.SKUNameStandard),
						Tier: to.Ptr("Standard"),
					},
					Tags: map[string]*string{},
					Properties: &armnotificationhubs.NamespaceProperties{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-08-05T04:28:10.71Z"); return t }()),
						MetricID:           to.Ptr("29cfa613-cbbc-4512-b1d6-1b3a92c7fa40:ns-e6536f77-0d1b-4a6b-8f42-29cc15b2930a"),
						ProvisioningState:  to.Ptr("Succeeded"),
						ServiceBusEndpoint: to.Ptr("https://NS-e6536f77-0d1b-4a6b-8f42-29cc15b2930a.servicebus.windows-int.net:443/"),
						UpdatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-11T08:43:51.587Z"); return t }()),
					},
				},
				{
					Name:     to.Ptr("sdk-Namespace-2924"),
					Type:     to.Ptr("Microsoft.NotificationHubs/Namespaces"),
					ID:       to.Ptr("/subscriptions/29cfa613-cbbc-4512-b1d6-1b3a92c7fa40/resourceGroups/ArunMonocle/providers/Microsoft.NotificationHubs/namespaces/sdk-Namespace-2924"),
					Location: to.Ptr("South Central US"),
					SKU: &armnotificationhubs.SKU{
						Name: to.Ptr(armnotificationhubs.SKUNameStandard),
						Tier: to.Ptr("Standard"),
					},
					Tags: map[string]*string{
						"tag1": to.Ptr("value1"),
						"tag2": to.Ptr("value2"),
					},
					Properties: &armnotificationhubs.NamespaceProperties{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-05-25T22:26:36.76Z"); return t }()),
						MetricID:           to.Ptr("29cfa613-cbbc-4512-b1d6-1b3a92c7fa40:sdk-namespace-2924"),
						ProvisioningState:  to.Ptr("Succeeded"),
						ServiceBusEndpoint: to.Ptr("https://sdk-Namespace-2924.servicebus.windows-int.net:443/"),
						UpdatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-05-25T22:26:59.35Z"); return t }()),
					},
				},
				{
					Name:     to.Ptr("rrama-sb1"),
					Type:     to.Ptr("Microsoft.NotificationHubs/Namespaces"),
					ID:       to.Ptr("/subscriptions/29cfa613-cbbc-4512-b1d6-1b3a92c7fa40/resourceGroups/Default-ServiceBus-SouthCentralUS/providers/Microsoft.NotificationHubs/namespaces/rrama-sb1"),
					Location: to.Ptr("South Central US"),
					SKU: &armnotificationhubs.SKU{
						Name: to.Ptr(armnotificationhubs.SKUNameStandard),
						Tier: to.Ptr("Standard"),
					},
					Tags: map[string]*string{},
					Properties: &armnotificationhubs.NamespaceProperties{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-05-01T21:47:34.903Z"); return t }()),
						MetricID:           to.Ptr("29cfa613-cbbc-4512-b1d6-1b3a92c7fa40:rrama-sb1"),
						ProvisioningState:  to.Ptr("Succeeded"),
						ServiceBusEndpoint: to.Ptr("https://rrama-sb1.servicebus.windows-int.net:443/"),
						UpdatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-05-02T02:10:03.083Z"); return t }()),
					},
				},
				{
					Name:     to.Ptr("WhackWhack"),
					Type:     to.Ptr("Microsoft.NotificationHubs/Namespaces"),
					ID:       to.Ptr("/subscriptions/29cfa613-cbbc-4512-b1d6-1b3a92c7fa40/resourceGroups/RapscallionResources/providers/Microsoft.NotificationHubs/namespaces/WhackWhack"),
					Location: to.Ptr("South Central US"),
					SKU: &armnotificationhubs.SKU{
						Name: to.Ptr(armnotificationhubs.SKUNameStandard),
						Tier: to.Ptr("Standard"),
					},
					Tags: map[string]*string{},
					Properties: &armnotificationhubs.NamespaceProperties{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-10-10T23:39:01.347Z"); return t }()),
						MetricID:           to.Ptr("29cfa613-cbbc-4512-b1d6-1b3a92c7fa40:whackwhack"),
						ProvisioningState:  to.Ptr("Succeeded"),
						ServiceBusEndpoint: to.Ptr("https://WhackWhack.servicebus.windows-int.net:443/"),
						UpdatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-04T00:56:32.687Z"); return t }()),
					},
				},
				{
					Name:     to.Ptr("NS-66ed32d6-611e-4bb0-8e1a-a6d0fc65427c"),
					Type:     to.Ptr("Microsoft.NotificationHubs/Namespaces"),
					ID:       to.Ptr("/subscriptions/29cfa613-cbbc-4512-b1d6-1b3a92c7fa40/resourceGroups/Default-ServiceBus-SouthCentralUS/providers/Microsoft.NotificationHubs/namespaces/NS-66ed32d6-611e-4bb0-8e1a-a6d0fc65427c"),
					Location: to.Ptr("South Central US"),
					SKU: &armnotificationhubs.SKU{
						Name: to.Ptr(armnotificationhubs.SKUNameStandard),
						Tier: to.Ptr("Standard"),
					},
					Tags: map[string]*string{},
					Properties: &armnotificationhubs.NamespaceProperties{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-09-16T17:51:27.73Z"); return t }()),
						MetricID:           to.Ptr("29cfa613-cbbc-4512-b1d6-1b3a92c7fa40:ns-66ed32d6-611e-4bb0-8e1a-a6d0fc65427c"),
						ProvisioningState:  to.Ptr("Succeeded"),
						ServiceBusEndpoint: to.Ptr("https://NS-66ed32d6-611e-4bb0-8e1a-a6d0fc65427c.servicebus.windows-int.net:443/"),
						UpdatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-11T08:19:43.383Z"); return t }()),
					},
				},
				{
					Name:     to.Ptr("NS-e0cab401-6df8-465d-8d4a-da9a9e55cf0e"),
					Type:     to.Ptr("Microsoft.NotificationHubs/Namespaces"),
					ID:       to.Ptr("/subscriptions/29cfa613-cbbc-4512-b1d6-1b3a92c7fa40/resourceGroups/Default-ServiceBus-SouthCentralUS/providers/Microsoft.NotificationHubs/namespaces/NS-e0cab401-6df8-465d-8d4a-da9a9e55cf0e"),
					Location: to.Ptr("South Central US"),
					SKU: &armnotificationhubs.SKU{
						Name: to.Ptr(armnotificationhubs.SKUNameStandard),
						Tier: to.Ptr("Standard"),
					},
					Tags: map[string]*string{},
					Properties: &armnotificationhubs.NamespaceProperties{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2016-08-05T01:14:25.613Z"); return t }()),
						MetricID:           to.Ptr("29cfa613-cbbc-4512-b1d6-1b3a92c7fa40:ns-e0cab401-6df8-465d-8d4a-da9a9e55cf0e"),
						ProvisioningState:  to.Ptr("Succeeded"),
						ServiceBusEndpoint: to.Ptr("https://NS-e0cab401-6df8-465d-8d4a-da9a9e55cf0e.servicebus.windows-int.net:443/"),
						UpdatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-02-11T12:33:01.727Z"); return t }()),
					},
				},
				{
					Name:     to.Ptr("bn3-rrama-foo1"),
					Type:     to.Ptr("Microsoft.NotificationHubs/Namespaces"),
					ID:       to.Ptr("/subscriptions/29cfa613-cbbc-4512-b1d6-1b3a92c7fa40/resourceGroups/Default-ServiceBus-SouthCentralUS/providers/Microsoft.NotificationHubs/namespaces/bn3-rrama-foo1"),
					Location: to.Ptr("East US 2"),
					SKU: &armnotificationhubs.SKU{
						Name: to.Ptr(armnotificationhubs.SKUNameStandard),
						Tier: to.Ptr("Standard"),
					},
					Tags: map[string]*string{},
					Properties: &armnotificationhubs.NamespaceProperties{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-28T23:54:26.927Z"); return t }()),
						MetricID:           to.Ptr("29cfa613-cbbc-4512-b1d6-1b3a92c7fa40:bn3-rrama-foo1"),
						ProvisioningState:  to.Ptr("Succeeded"),
						ServiceBusEndpoint: to.Ptr("https://bn3-rrama-foo1.servicebus.int7.windows-int.net:443/"),
						UpdatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-28T23:54:26.927Z"); return t }()),
					},
				},
				{
					Name:     to.Ptr("bn3-rrama-foo3"),
					Type:     to.Ptr("Microsoft.NotificationHubs/Namespaces"),
					ID:       to.Ptr("/subscriptions/29cfa613-cbbc-4512-b1d6-1b3a92c7fa40/resourceGroups/Default-ServiceBus-SouthCentralUS/providers/Microsoft.NotificationHubs/namespaces/bn3-rrama-foo3"),
					Location: to.Ptr("East US 2"),
					SKU: &armnotificationhubs.SKU{
						Name: to.Ptr(armnotificationhubs.SKUNameStandard),
						Tier: to.Ptr("Standard"),
					},
					Tags: map[string]*string{},
					Properties: &armnotificationhubs.NamespaceProperties{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-29T00:24:09.907Z"); return t }()),
						MetricID:           to.Ptr("29cfa613-cbbc-4512-b1d6-1b3a92c7fa40:bn3-rrama-foo3"),
						ProvisioningState:  to.Ptr("Succeeded"),
						ServiceBusEndpoint: to.Ptr("https://bn3-rrama-foo3.servicebus.int7.windows-int.net:443/"),
						UpdatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-29T00:24:33.233Z"); return t }()),
					},
				},
				{
					Name:     to.Ptr("bn3-rrama-foo2"),
					Type:     to.Ptr("Microsoft.NotificationHubs/Namespaces"),
					ID:       to.Ptr("/subscriptions/29cfa613-cbbc-4512-b1d6-1b3a92c7fa40/resourceGroups/Default-ServiceBus-SouthCentralUS/providers/Microsoft.NotificationHubs/namespaces/bn3-rrama-foo2"),
					Location: to.Ptr("East US 2"),
					SKU: &armnotificationhubs.SKU{
						Name: to.Ptr(armnotificationhubs.SKUNameStandard),
						Tier: to.Ptr("Standard"),
					},
					Tags: map[string]*string{},
					Properties: &armnotificationhubs.NamespaceProperties{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-28T23:57:40.82Z"); return t }()),
						MetricID:           to.Ptr("29cfa613-cbbc-4512-b1d6-1b3a92c7fa40:bn3-rrama-foo2"),
						ProvisioningState:  to.Ptr("Succeeded"),
						ServiceBusEndpoint: to.Ptr("https://bn3-rrama-foo2.servicebus.int7.windows-int.net:443/"),
						UpdatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-28T23:57:40.82Z"); return t }()),
					},
				},
				{
					Name:     to.Ptr("db3-rrama-foo2"),
					Type:     to.Ptr("Microsoft.NotificationHubs/Namespaces"),
					ID:       to.Ptr("/subscriptions/29cfa613-cbbc-4512-b1d6-1b3a92c7fa40/resourceGroups/Default-ServiceBus-SouthCentralUS/providers/Microsoft.NotificationHubs/namespaces/db3-rrama-foo2"),
					Location: to.Ptr("North Europe"),
					SKU: &armnotificationhubs.SKU{
						Name: to.Ptr(armnotificationhubs.SKUNameStandard),
						Tier: to.Ptr("Standard"),
					},
					Tags: map[string]*string{},
					Properties: &armnotificationhubs.NamespaceProperties{
						CreatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-29T00:10:43.463Z"); return t }()),
						MetricID:           to.Ptr("29cfa613-cbbc-4512-b1d6-1b3a92c7fa40:db3-rrama-foo2"),
						ProvisioningState:  to.Ptr("Succeeded"),
						ServiceBusEndpoint: to.Ptr("https://db3-rrama-foo2.servicebus.int7.windows-int.net:443/"),
						UpdatedAt:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-29T00:11:09.133Z"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.NamespaceListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.NamespaceListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/notificationhubs/resource-manager/Microsoft.NotificationHubs/stable/2017-04-01/examples/Namespaces/NHNameSpaceList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNamespaces_ListAuthorizationRules(t *testing.T) {
	// From example specification/notificationhubs/resource-manager/Microsoft.NotificationHubs/stable/2017-04-01/examples/Namespaces/NHNameSpaceAuthorizationRuleListAll.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"NameSpaceAuthorizationRuleListAll"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnotificationhubs.NewNamespacesClient("29cfa613-cbbc-4512-b1d6-1b3a92c7fa40", cred, &options)
	pager := client.ListAuthorizationRules("5ktrial",
		"nh-sdk-ns",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/notificationhubs/resource-manager/Microsoft.NotificationHubs/stable/2017-04-01/examples/Namespaces/NHNameSpaceAuthorizationRuleListAll.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnotificationhubs.SharedAccessAuthorizationRuleListResult{
			Value: []*armnotificationhubs.SharedAccessAuthorizationRuleResource{
				{
					Name: to.Ptr("RootManageSharedAccessKey"),
					Type: to.Ptr("Microsoft.NotificationHubs/Namespaces/AuthorizationRules"),
					ID:   to.Ptr("/subscriptions/29cfa613-cbbc-4512-b1d6-1b3a92c7fa40/resourceGroups/5ktrial/providers/Microsoft.NotificationHubs/namespaces/nh-sdk-ns/AuthorizationRules/RootManageSharedAccessKey"),
					Properties: &armnotificationhubs.SharedAccessAuthorizationRuleProperties{
						ClaimType:    to.Ptr("SharedAccessKey"),
						ClaimValue:   to.Ptr("None"),
						CreatedTime:  to.Ptr("2018-05-02T18:24:51.0690674Z"),
						KeyName:      to.Ptr("RootManageSharedAccessKey"),
						ModifiedTime: to.Ptr("2018-05-02T18:31:28.5201555Z"),
						PrimaryKey:   to.Ptr("<primaryKey>"),
						Revision:     to.Ptr[int32](1),
						Rights: []*armnotificationhubs.AccessRights{
							to.Ptr(armnotificationhubs.AccessRightsListen),
							to.Ptr(armnotificationhubs.AccessRightsManage),
							to.Ptr(armnotificationhubs.AccessRightsSend)},
						SecondaryKey: to.Ptr("<secondaryKey>"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SharedAccessAuthorizationRuleListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SharedAccessAuthorizationRuleListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/notificationhubs/resource-manager/Microsoft.NotificationHubs/stable/2017-04-01/examples/Namespaces/NHNameSpaceAuthorizationRuleListAll.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNamespaces_ListKeys(t *testing.T) {
	// From example specification/notificationhubs/resource-manager/Microsoft.NotificationHubs/stable/2017-04-01/examples/Namespaces/NHNameSpaceAuthorizationRuleListKey.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"NameSpaceAuthorizationRuleListKey"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnotificationhubs.NewNamespacesClient("29cfa613-cbbc-4512-b1d6-1b3a92c7fa40", cred, &options)
	res, err := client.ListKeys(ctx,
		"5ktrial",
		"nh-sdk-ns",
		"RootManageSharedAccessKey",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/notificationhubs/resource-manager/Microsoft.NotificationHubs/stable/2017-04-01/examples/Namespaces/NHNameSpaceAuthorizationRuleListKey.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnotificationhubs.ResourceListKeys{
			KeyName:                   to.Ptr("RootManageSharedAccessKey"),
			PrimaryConnectionString:   to.Ptr("Endpoint=sb://nh-sdk-ns.servicebus.windows.net/;SharedAccessKeyName=RootManageSharedAccessKey;SharedAccessKey=############################################"),
			PrimaryKey:                to.Ptr("############################################"),
			SecondaryConnectionString: to.Ptr("Endpoint=sb://nh-sdk-ns.servicebus.windows.net/;SharedAccessKeyName=RootManageSharedAccessKey;SharedAccessKey=############################################"),
			SecondaryKey:              to.Ptr("############################################"),
		}
		if !reflect.DeepEqual(exampleRes, res.ResourceListKeys) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ResourceListKeys)
			t.Fatalf("Mock response is not equal to example response for example specification/notificationhubs/resource-manager/Microsoft.NotificationHubs/stable/2017-04-01/examples/Namespaces/NHNameSpaceAuthorizationRuleListKey.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNamespaces_RegenerateKeys(t *testing.T) {
	// From example specification/notificationhubs/resource-manager/Microsoft.NotificationHubs/stable/2017-04-01/examples/Namespaces/NHNameSpaceAuthorizationRuleRegenrateKey.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"NameSpaceAuthorizationRuleRegenerateKey"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnotificationhubs.NewNamespacesClient("29cfa613-cbbc-4512-b1d6-1b3a92c7fa40", cred, &options)
	res, err := client.RegenerateKeys(ctx,
		"5ktrial",
		"nh-sdk-ns",
		"RootManageSharedAccessKey",
		armnotificationhubs.PolicykeyResource{
			PolicyKey: to.Ptr("PrimaryKey"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/notificationhubs/resource-manager/Microsoft.NotificationHubs/stable/2017-04-01/examples/Namespaces/NHNameSpaceAuthorizationRuleRegenrateKey.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnotificationhubs.ResourceListKeys{
			KeyName:                   to.Ptr("RootManageSharedAccessKey"),
			PrimaryConnectionString:   to.Ptr("Endpoint=sb://nh-sdk-ns.servicebus.windows.net/;SharedAccessKeyName=RootManageSharedAccessKey;SharedAccessKey=############################################"),
			PrimaryKey:                to.Ptr("############################################"),
			SecondaryConnectionString: to.Ptr("Endpoint=sb://nh-sdk-ns.servicebus.windows.net/;SharedAccessKeyName=RootManageSharedAccessKey;SharedAccessKey=############################################"),
			SecondaryKey:              to.Ptr("############################################"),
		}
		if !reflect.DeepEqual(exampleRes, res.ResourceListKeys) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ResourceListKeys)
			t.Fatalf("Mock response is not equal to example response for example specification/notificationhubs/resource-manager/Microsoft.NotificationHubs/stable/2017-04-01/examples/Namespaces/NHNameSpaceAuthorizationRuleRegenrateKey.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNotificationHubs_CheckNotificationHubAvailability(t *testing.T) {
	// From example specification/notificationhubs/resource-manager/Microsoft.NotificationHubs/stable/2017-04-01/examples/NotificationHubs/NotificationHubCheckNameAvailability.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"notificationHubCheckNameAvailability"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnotificationhubs.NewClient("29cfa613-cbbc-4512-b1d6-1b3a92c7fa40", cred, &options)
	res, err := client.CheckNotificationHubAvailability(ctx,
		"5ktrial",
		"locp-newns",
		armnotificationhubs.CheckAvailabilityParameters{
			Name:     to.Ptr("sdktest"),
			Location: to.Ptr("West Europe"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/notificationhubs/resource-manager/Microsoft.NotificationHubs/stable/2017-04-01/examples/NotificationHubs/NotificationHubCheckNameAvailability.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnotificationhubs.CheckAvailabilityResult{
			Name:         to.Ptr("sdktest"),
			Type:         to.Ptr("Microsoft.NotificationHubs/namespaces/notificationHubs/checkNotificationHubAvailability"),
			ID:           to.Ptr("/subscriptions/29cfa613-cbbc-4512-b1d6-1b3a92c7fa40/resourcegroups/5ktrial/providers/Microsoft.NotificationHubs/namespaces/locp-newns/CheckNotificationHubAvailability"),
			Location:     to.Ptr("West Europe"),
			IsAvailiable: to.Ptr(true),
		}
		if !reflect.DeepEqual(exampleRes, res.CheckAvailabilityResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CheckAvailabilityResult)
			t.Fatalf("Mock response is not equal to example response for example specification/notificationhubs/resource-manager/Microsoft.NotificationHubs/stable/2017-04-01/examples/NotificationHubs/NotificationHubCheckNameAvailability.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNotificationHubs_CreateOrUpdate(t *testing.T) {
	// From example specification/notificationhubs/resource-manager/Microsoft.NotificationHubs/stable/2017-04-01/examples/NotificationHubs/NotificationHubCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"NotificationHubCreate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnotificationhubs.NewClient("29cfa613-cbbc-4512-b1d6-1b3a92c7fa40", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"5ktrial",
		"nh-sdk-ns",
		"nh-sdk-hub",
		armnotificationhubs.NotificationHubCreateOrUpdateParameters{
			Location:   to.Ptr("eastus"),
			Properties: &armnotificationhubs.NotificationHubProperties{},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/notificationhubs/resource-manager/Microsoft.NotificationHubs/stable/2017-04-01/examples/NotificationHubs/NotificationHubCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnotificationhubs.NotificationHubResource{
			Name:     to.Ptr("nh-sdk-hub"),
			Type:     to.Ptr("Microsoft.NotificationHubs/namespaces/notificationHubs"),
			ID:       to.Ptr("/subscriptions/29cfa613-cbbc-4512-b1d6-1b3a92c7fa40/resourceGroups/sdkresourceGroup/providers/Microsoft.NotificationHubs/namespaces/nh-sdk-ns/notificationHubs/nh-sdk-hub"),
			Location: to.Ptr("eastus"),
			Properties: &armnotificationhubs.NotificationHubProperties{
				AuthorizationRules: []*armnotificationhubs.SharedAccessAuthorizationRuleProperties{},
				RegistrationTTL:    to.Ptr("10675199.02:48:05.4775807"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.NotificationHubResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.NotificationHubResource)
			t.Fatalf("Mock response is not equal to example response for example specification/notificationhubs/resource-manager/Microsoft.NotificationHubs/stable/2017-04-01/examples/NotificationHubs/NotificationHubCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNotificationHubs_Patch(t *testing.T) {
	// From example specification/notificationhubs/resource-manager/Microsoft.NotificationHubs/stable/2017-04-01/examples/NotificationHubs/NotificationHubPatch.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"NotificationHubPatch"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnotificationhubs.NewClient("29cfa613-cbbc-4512-b1d6-1b3a92c7fa40", cred, &options)
	res, err := client.Patch(ctx,
		"sdkresourceGroup",
		"nh-sdk-ns",
		"sdk-notificationHubs-8708",
		&armnotificationhubs.ClientPatchOptions{Parameters: &armnotificationhubs.NotificationHubPatchParameters{}})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/notificationhubs/resource-manager/Microsoft.NotificationHubs/stable/2017-04-01/examples/NotificationHubs/NotificationHubPatch.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnotificationhubs.NotificationHubResource{
			Name:     to.Ptr("nh-sdk-hub"),
			Type:     to.Ptr("Microsoft.NotificationHubs/namespaces/notificationHubs"),
			ID:       to.Ptr("/subscriptions/29cfa613-cbbc-4512-b1d6-1b3a92c7fa40/resourceGroups/sdkresourceGroup/providers/Microsoft.NotificationHubs/namespaces/nh-sdk-ns/notificationHubs/nh-sdk-hub"),
			Location: to.Ptr("South Central US"),
			Properties: &armnotificationhubs.NotificationHubProperties{
				AuthorizationRules: []*armnotificationhubs.SharedAccessAuthorizationRuleProperties{},
				RegistrationTTL:    to.Ptr("10675199.02:48:05.4775807"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.NotificationHubResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.NotificationHubResource)
			t.Fatalf("Mock response is not equal to example response for example specification/notificationhubs/resource-manager/Microsoft.NotificationHubs/stable/2017-04-01/examples/NotificationHubs/NotificationHubPatch.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNotificationHubs_Delete(t *testing.T) {
	// From example specification/notificationhubs/resource-manager/Microsoft.NotificationHubs/stable/2017-04-01/examples/NotificationHubs/NotificationHubDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"NotificationHubDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnotificationhubs.NewClient("29cfa613-cbbc-4512-b1d6-1b3a92c7fa40", cred, &options)
	_, err := client.Delete(ctx,
		"5ktrial",
		"nh-sdk-ns",
		"nh-sdk-hub",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/notificationhubs/resource-manager/Microsoft.NotificationHubs/stable/2017-04-01/examples/NotificationHubs/NotificationHubDelete.json: %v", err)
	}
}

func TestNotificationHubs_Get(t *testing.T) {
	// From example specification/notificationhubs/resource-manager/Microsoft.NotificationHubs/stable/2017-04-01/examples/NotificationHubs/NotificationHubGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"NotificationHubGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnotificationhubs.NewClient("29cfa613-cbbc-4512-b1d6-1b3a92c7fa40", cred, &options)
	res, err := client.Get(ctx,
		"5ktrial",
		"nh-sdk-ns",
		"nh-sdk-hub",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/notificationhubs/resource-manager/Microsoft.NotificationHubs/stable/2017-04-01/examples/NotificationHubs/NotificationHubGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnotificationhubs.NotificationHubResource{
			Name:     to.Ptr("nh-sdk-hub"),
			Type:     to.Ptr("Microsoft.NotificationHubs/namespaces/notificationHubs"),
			ID:       to.Ptr("/subscriptions/29cfa613-cbbc-4512-b1d6-1b3a92c7fa40/resourceGroups/sdkresourceGroup/providers/Microsoft.NotificationHubs/namespaces/nh-sdk-ns/notificationHubs/nh-sdk-hub"),
			Location: to.Ptr("South Central US"),
			Properties: &armnotificationhubs.NotificationHubProperties{
				AuthorizationRules: []*armnotificationhubs.SharedAccessAuthorizationRuleProperties{},
				RegistrationTTL:    to.Ptr("10675199.02:48:05.4775807"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.NotificationHubResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.NotificationHubResource)
			t.Fatalf("Mock response is not equal to example response for example specification/notificationhubs/resource-manager/Microsoft.NotificationHubs/stable/2017-04-01/examples/NotificationHubs/NotificationHubGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNotificationHubs_DebugSend(t *testing.T) {
	// From example specification/notificationhubs/resource-manager/Microsoft.NotificationHubs/stable/2017-04-01/examples/NotificationHubs/NotificationHubDebugSend.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"debugsend"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnotificationhubs.NewClient("29cfa613-cbbc-4512-b1d6-1b3a92c7fa40", cred, &options)
	_, err := client.DebugSend(ctx,
		"5ktrial",
		"nh-sdk-ns",
		"nh-sdk-hub",
		&armnotificationhubs.ClientDebugSendOptions{Parameters: map[string]interface{}{
			"data": map[string]interface{}{
				"message": "Hello",
			},
		},
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/notificationhubs/resource-manager/Microsoft.NotificationHubs/stable/2017-04-01/examples/NotificationHubs/NotificationHubDebugSend.json: %v", err)
	}
}

func TestNotificationHubs_CreateOrUpdateAuthorizationRule(t *testing.T) {
	// From example specification/notificationhubs/resource-manager/Microsoft.NotificationHubs/stable/2017-04-01/examples/NotificationHubs/NotificationHubAuthorizationRuleCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"NotificationHubAuthorizationRuleCreate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnotificationhubs.NewClient("29cfa613-cbbc-4512-b1d6-1b3a92c7fa40", cred, &options)
	res, err := client.CreateOrUpdateAuthorizationRule(ctx,
		"5ktrial",
		"nh-sdk-ns",
		"nh-sdk-hub",
		"DefaultListenSharedAccessSignature",
		armnotificationhubs.SharedAccessAuthorizationRuleCreateOrUpdateParameters{
			Properties: &armnotificationhubs.SharedAccessAuthorizationRuleProperties{
				Rights: []*armnotificationhubs.AccessRights{
					to.Ptr(armnotificationhubs.AccessRightsListen),
					to.Ptr(armnotificationhubs.AccessRightsSend)},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/notificationhubs/resource-manager/Microsoft.NotificationHubs/stable/2017-04-01/examples/NotificationHubs/NotificationHubAuthorizationRuleCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnotificationhubs.SharedAccessAuthorizationRuleResource{
			Name:     to.Ptr("DefaultListenSharedAccessSignature"),
			Type:     to.Ptr("Microsoft.NotificationHubs/namespaces/notificationHubs/authorizationRules"),
			ID:       to.Ptr("/subscriptions/29cfa613-cbbc-4512-b1d6-1b3a92c7fa40/resourceGroups/5ktrial/providers/Microsoft.NotificationHubs/namespaces/nh-sdk-ns/NotificationHubs/nh-sdk-hub/AuthorizationRules/DefaultListenSharedAccessSignature"),
			Location: to.Ptr("West Europe"),
			Properties: &armnotificationhubs.SharedAccessAuthorizationRuleProperties{
				ClaimType:    to.Ptr("SharedAccessKey"),
				ClaimValue:   to.Ptr("None"),
				CreatedTime:  to.Ptr("2018-05-02T00:45:22.0150024Z"),
				KeyName:      to.Ptr("DefaultListenSharedAccessSignature"),
				ModifiedTime: to.Ptr("2018-05-02T00:45:22.0150024Z"),
				PrimaryKey:   to.Ptr("#################################"),
				Rights: []*armnotificationhubs.AccessRights{
					to.Ptr(armnotificationhubs.AccessRightsListen)},
				SecondaryKey: to.Ptr("#################################"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SharedAccessAuthorizationRuleResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SharedAccessAuthorizationRuleResource)
			t.Fatalf("Mock response is not equal to example response for example specification/notificationhubs/resource-manager/Microsoft.NotificationHubs/stable/2017-04-01/examples/NotificationHubs/NotificationHubAuthorizationRuleCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNotificationHubs_DeleteAuthorizationRule(t *testing.T) {
	// From example specification/notificationhubs/resource-manager/Microsoft.NotificationHubs/stable/2017-04-01/examples/NotificationHubs/NotificationHubAuthorizationRuleDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"NotificationHubAuthorizationRuleDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnotificationhubs.NewClient("29cfa613-cbbc-4512-b1d6-1b3a92c7fa40", cred, &options)
	_, err := client.DeleteAuthorizationRule(ctx,
		"5ktrial",
		"nh-sdk-ns",
		"nh-sdk-hub",
		"DefaultListenSharedAccessSignature",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/notificationhubs/resource-manager/Microsoft.NotificationHubs/stable/2017-04-01/examples/NotificationHubs/NotificationHubAuthorizationRuleDelete.json: %v", err)
	}
}

func TestNotificationHubs_GetAuthorizationRule(t *testing.T) {
	// From example specification/notificationhubs/resource-manager/Microsoft.NotificationHubs/stable/2017-04-01/examples/NotificationHubs/NotificationHubAuthorizationRuleGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"NotificationHubAuthorizationRuleGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnotificationhubs.NewClient("29cfa613-cbbc-4512-b1d6-1b3a92c7fa40", cred, &options)
	res, err := client.GetAuthorizationRule(ctx,
		"5ktrial",
		"nh-sdk-ns",
		"nh-sdk-hub",
		"DefaultListenSharedAccessSignature",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/notificationhubs/resource-manager/Microsoft.NotificationHubs/stable/2017-04-01/examples/NotificationHubs/NotificationHubAuthorizationRuleGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnotificationhubs.SharedAccessAuthorizationRuleResource{
			Name:     to.Ptr("DefaultListenSharedAccessSignature"),
			Type:     to.Ptr("Microsoft.NotificationHubs/namespaces/notificationHubs/authorizationRules"),
			ID:       to.Ptr("/subscriptions/29cfa613-cbbc-4512-b1d6-1b3a92c7fa40/resourceGroups/5ktrial/providers/Microsoft.NotificationHubs/namespaces/nh-sdk-ns/NotificationHubs/nh-sdk-hub/AuthorizationRules/DefaultListenSharedAccessSignature"),
			Location: to.Ptr("West Europe"),
			Properties: &armnotificationhubs.SharedAccessAuthorizationRuleProperties{
				ClaimType:    to.Ptr("SharedAccessKey"),
				ClaimValue:   to.Ptr("None"),
				CreatedTime:  to.Ptr("2018-05-02T00:45:22.0150024Z"),
				KeyName:      to.Ptr("DefaultListenSharedAccessSignature"),
				ModifiedTime: to.Ptr("2018-05-02T00:45:22.0150024Z"),
				PrimaryKey:   to.Ptr("#################################"),
				Rights: []*armnotificationhubs.AccessRights{
					to.Ptr(armnotificationhubs.AccessRightsListen)},
				SecondaryKey: to.Ptr("#################################"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SharedAccessAuthorizationRuleResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SharedAccessAuthorizationRuleResource)
			t.Fatalf("Mock response is not equal to example response for example specification/notificationhubs/resource-manager/Microsoft.NotificationHubs/stable/2017-04-01/examples/NotificationHubs/NotificationHubAuthorizationRuleGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNotificationHubs_List(t *testing.T) {
	// From example specification/notificationhubs/resource-manager/Microsoft.NotificationHubs/stable/2017-04-01/examples/NotificationHubs/NotificationHubListByNameSpace.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"NotificationHubListByNameSpace"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnotificationhubs.NewClient("29cfa613-cbbc-4512-b1d6-1b3a92c7fa40", cred, &options)
	pager := client.List("5ktrial",
		"nh-sdk-ns",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/notificationhubs/resource-manager/Microsoft.NotificationHubs/stable/2017-04-01/examples/NotificationHubs/NotificationHubListByNameSpace.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnotificationhubs.NotificationHubListResult{
			Value: []*armnotificationhubs.NotificationHubResource{
				{
					Name:     to.Ptr("nh-sdk-hub"),
					Type:     to.Ptr("Microsoft.NotificationHubs/namespaces/notificationHubs"),
					ID:       to.Ptr("/subscriptions/29cfa613-cbbc-4512-b1d6-1b3a92c7fa40/resourceGroups/5ktrial/providers/Microsoft.NotificationHubs/namespaces/nh-sdk-ns/NotificationHubs/nh-sdk-hub"),
					Location: to.Ptr("South Central US"),
					Properties: &armnotificationhubs.NotificationHubProperties{
						AuthorizationRules: []*armnotificationhubs.SharedAccessAuthorizationRuleProperties{},
						RegistrationTTL:    to.Ptr("10675199.02:48:05.4775807"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.NotificationHubListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.NotificationHubListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/notificationhubs/resource-manager/Microsoft.NotificationHubs/stable/2017-04-01/examples/NotificationHubs/NotificationHubListByNameSpace.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNotificationHubs_ListAuthorizationRules(t *testing.T) {
	// From example specification/notificationhubs/resource-manager/Microsoft.NotificationHubs/stable/2017-04-01/examples/NotificationHubs/NotificationHubAuthorizationRuleListAll.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"NotificationHubAuthorizationRuleListAll"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnotificationhubs.NewClient("29cfa613-cbbc-4512-b1d6-1b3a92c7fa40", cred, &options)
	pager := client.ListAuthorizationRules("5ktrial",
		"nh-sdk-ns",
		"nh-sdk-hub",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/notificationhubs/resource-manager/Microsoft.NotificationHubs/stable/2017-04-01/examples/NotificationHubs/NotificationHubAuthorizationRuleListAll.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armnotificationhubs.SharedAccessAuthorizationRuleListResult{
			Value: []*armnotificationhubs.SharedAccessAuthorizationRuleResource{
				{
					Name:     to.Ptr("DefaultListenSharedAccessSignature"),
					Type:     to.Ptr("Microsoft.NotificationHubs/namespaces/notificationHubs/authorizationRules"),
					ID:       to.Ptr("/subscriptions/29cfa613-cbbc-4512-b1d6-1b3a92c7fa40/resourceGroups/5ktrial/providers/Microsoft.NotificationHubs/namespaces/nh-sdk-ns/NotificationHubs/nh-sdk-hub/AuthorizationRules/DefaultListenSharedAccessSignature"),
					Location: to.Ptr("West Europe"),
					Properties: &armnotificationhubs.SharedAccessAuthorizationRuleProperties{
						ClaimType:    to.Ptr("SharedAccessKey"),
						ClaimValue:   to.Ptr("None"),
						CreatedTime:  to.Ptr("2018-05-02T00:45:22.0150024Z"),
						KeyName:      to.Ptr("DefaultListenSharedAccessSignature"),
						ModifiedTime: to.Ptr("2018-05-02T00:45:22.0150024Z"),
						PrimaryKey:   to.Ptr("#################################"),
						Rights: []*armnotificationhubs.AccessRights{
							to.Ptr(armnotificationhubs.AccessRightsListen)},
						SecondaryKey: to.Ptr("#################################"),
					},
				},
				{
					Name:     to.Ptr("DefaultFullSharedAccessSignature"),
					Type:     to.Ptr("Microsoft.NotificationHubs/namespaces/notificationHubs/authorizationRules"),
					ID:       to.Ptr("/subscriptions/29cfa613-cbbc-4512-b1d6-1b3a92c7fa40/resourceGroups/5ktrial/providers/Microsoft.NotificationHubs/namespaces/nh-sdk-ns/NotificationHubs/nh-sdk-hub/AuthorizationRules/DefaultFullSharedAccessSignature"),
					Location: to.Ptr("West Europe"),
					Properties: &armnotificationhubs.SharedAccessAuthorizationRuleProperties{
						ClaimType:    to.Ptr("SharedAccessKey"),
						ClaimValue:   to.Ptr("None"),
						CreatedTime:  to.Ptr("2018-05-02T00:45:22.0150024Z"),
						KeyName:      to.Ptr("DefaultFullSharedAccessSignature"),
						ModifiedTime: to.Ptr("2018-05-02T00:45:22.0150024Z"),
						PrimaryKey:   to.Ptr("#################################"),
						Rights: []*armnotificationhubs.AccessRights{
							to.Ptr(armnotificationhubs.AccessRightsListen),
							to.Ptr(armnotificationhubs.AccessRightsManage),
							to.Ptr(armnotificationhubs.AccessRightsSend)},
						SecondaryKey: to.Ptr("#################################"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SharedAccessAuthorizationRuleListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SharedAccessAuthorizationRuleListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/notificationhubs/resource-manager/Microsoft.NotificationHubs/stable/2017-04-01/examples/NotificationHubs/NotificationHubAuthorizationRuleListAll.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNotificationHubs_ListKeys(t *testing.T) {
	// From example specification/notificationhubs/resource-manager/Microsoft.NotificationHubs/stable/2017-04-01/examples/NotificationHubs/NotificationHubAuthorizationRuleListKey.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"NotificationHubAuthorizationRuleListKey"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnotificationhubs.NewClient("29cfa613-cbbc-4512-b1d6-1b3a92c7fa40", cred, &options)
	res, err := client.ListKeys(ctx,
		"5ktrial",
		"nh-sdk-ns",
		"nh-sdk-hub",
		"sdk-AuthRules-5800",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/notificationhubs/resource-manager/Microsoft.NotificationHubs/stable/2017-04-01/examples/NotificationHubs/NotificationHubAuthorizationRuleListKey.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnotificationhubs.ResourceListKeys{
			KeyName:                   to.Ptr("sdk-AuthRules-5800"),
			PrimaryConnectionString:   to.Ptr("Endpoint=sb://sdk-namespace-7982.servicebus.windows-int.net/;SharedAccessKeyName=sdk-AuthRules-5800;SharedAccessKey=############################################;EntityPath=sdk-notificationHubs-2317"),
			PrimaryKey:                to.Ptr("############################################"),
			SecondaryConnectionString: to.Ptr("Endpoint=sb://sdk-namespace-7982.servicebus.windows-int.net/;SharedAccessKeyName=sdk-AuthRules-5800;SharedAccessKey=############################################;EntityPath=sdk-notificationHubs-2317"),
			SecondaryKey:              to.Ptr("############################################"),
		}
		if !reflect.DeepEqual(exampleRes, res.ResourceListKeys) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ResourceListKeys)
			t.Fatalf("Mock response is not equal to example response for example specification/notificationhubs/resource-manager/Microsoft.NotificationHubs/stable/2017-04-01/examples/NotificationHubs/NotificationHubAuthorizationRuleListKey.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNotificationHubs_RegenerateKeys(t *testing.T) {
	// From example specification/notificationhubs/resource-manager/Microsoft.NotificationHubs/stable/2017-04-01/examples/NotificationHubs/NotificationHubAuthorizationRuleRegenrateKey.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"NotificationHubAuthorizationRuleRegenrateKey"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnotificationhubs.NewClient("29cfa613-cbbc-4512-b1d6-1b3a92c7fa40", cred, &options)
	res, err := client.RegenerateKeys(ctx,
		"5ktrial",
		"nh-sdk-ns",
		"nh-sdk-hub",
		"DefaultListenSharedAccessSignature",
		armnotificationhubs.PolicykeyResource{
			PolicyKey: to.Ptr("PrimaryKey"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/notificationhubs/resource-manager/Microsoft.NotificationHubs/stable/2017-04-01/examples/NotificationHubs/NotificationHubAuthorizationRuleRegenrateKey.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnotificationhubs.ResourceListKeys{
			KeyName:                   to.Ptr("DefaultListenSharedAccessSignature"),
			PrimaryConnectionString:   to.Ptr("Endpoint=sb://nh-sdk-ns.servicebus.windows.net/;SharedAccessKeyName=DefaultListenSharedAccessSignature;SharedAccessKey=#################################"),
			PrimaryKey:                to.Ptr("#################################"),
			SecondaryConnectionString: to.Ptr("Endpoint=sb://nh-sdk-ns.servicebus.windows.net/;SharedAccessKeyName=DefaultListenSharedAccessSignature;SharedAccessKey=#################################"),
			SecondaryKey:              to.Ptr("#################################"),
		}
		if !reflect.DeepEqual(exampleRes, res.ResourceListKeys) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ResourceListKeys)
			t.Fatalf("Mock response is not equal to example response for example specification/notificationhubs/resource-manager/Microsoft.NotificationHubs/stable/2017-04-01/examples/NotificationHubs/NotificationHubAuthorizationRuleRegenrateKey.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNotificationHubs_GetPnsCredentials(t *testing.T) {
	// From example specification/notificationhubs/resource-manager/Microsoft.NotificationHubs/stable/2017-04-01/examples/NotificationHubs/NotificationHubPnsCredentials.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"notificationHubPnsCredentials"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armnotificationhubs.NewClient("29cfa613-cbbc-4512-b1d6-1b3a92c7fa40", cred, &options)
	res, err := client.GetPnsCredentials(ctx,
		"5ktrial",
		"nh-sdk-ns",
		"nh-sdk-hub",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/notificationhubs/resource-manager/Microsoft.NotificationHubs/stable/2017-04-01/examples/NotificationHubs/NotificationHubPnsCredentials.json: %v", err)
	}
	// Response check
	{
		exampleRes := armnotificationhubs.PnsCredentialsResource{
			Name:     to.Ptr("nh-sdk-hub"),
			Type:     to.Ptr("Microsoft.NotificationHubs/namespaces/notificationHubs/pnsCredentials"),
			ID:       to.Ptr("/subscriptions/29cfa613-cbbc-4512-b1d6-1b3a92c7fa40/resourceGroups/5ktrial/providers/Microsoft.NotificationHubs/namespaces/nh-sdk-ns/notificationHubs/nh-sdk-hub/pnsCredentials"),
			Location: to.Ptr("West Europe"),
			Properties: &armnotificationhubs.PnsCredentialsProperties{
				MpnsCredential: &armnotificationhubs.MpnsCredential{
					Properties: &armnotificationhubs.MpnsCredentialProperties{
						Thumbprint: to.Ptr("#################################"),
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PnsCredentialsResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PnsCredentialsResource)
			t.Fatalf("Mock response is not equal to example response for example specification/notificationhubs/resource-manager/Microsoft.NotificationHubs/stable/2017-04-01/examples/NotificationHubs/NotificationHubPnsCredentials.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
