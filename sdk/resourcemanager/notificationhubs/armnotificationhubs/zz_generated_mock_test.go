//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armnotificationhubs

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"golang.org/x/net/http2"
)

var (
	ctx            context.Context
	subscriptionId string
	cred           azcore.TokenCredential
	err            error
	con            *arm.Connection
	mockHost       string
)

func TestOperations_List(t *testing.T) {
	// From example OperationsList
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewOperationsClient(con)
	pager := client.List(&OperationsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
	}
}

func TestNamespaces_CheckAvailability(t *testing.T) {
	// From example NameSpaceCheckNameAvailability
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNamespacesClient(con,
		"29cfa613-cbbc-4512-b1d6-1b3a92c7fa40")
	res, err := client.CheckAvailability(ctx,
		CheckAvailabilityParameters{
			Name: to.StringPtr("sdk-Namespace-2924"),
		},
		&NamespacesCheckAvailabilityOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.CheckAvailabilityResult.ID == nil {
		t.Fatal("CheckAvailabilityResult.ID should not be nil!")
	}
}

func TestNamespaces_CreateOrUpdate(t *testing.T) {
	// From example NameSpaceCreate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNamespacesClient(con,
		"29cfa613-cbbc-4512-b1d6-1b3a92c7fa40")
	res, err := client.CreateOrUpdate(ctx,
		"5ktrial",
		"nh-sdk-ns",
		NamespaceCreateOrUpdateParameters{
			Resource: Resource{
				Location: to.StringPtr("South Central US"),
				SKU: &SKU{
					Name: SKUNameStandard.ToPtr(),
					Tier: to.StringPtr("Standard"),
				},
				Tags: map[string]*string{
					"tag1": to.StringPtr("value1"),
					"tag2": to.StringPtr("value2"),
				},
			},
		},
		&NamespacesCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.NamespaceResource.ID == nil {
		t.Fatal("NamespaceResource.ID should not be nil!")
	}
}

func TestNamespaces_Patch(t *testing.T) {
	// From example NameSpaceUpdate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNamespacesClient(con,
		"29cfa613-cbbc-4512-b1d6-1b3a92c7fa40")
	res, err := client.Patch(ctx,
		"5ktrial",
		"nh-sdk-ns",
		NamespacePatchParameters{
			SKU: &SKU{
				Name: SKUNameStandard.ToPtr(),
				Tier: to.StringPtr("Standard"),
			},
			Tags: map[string]*string{
				"tag1": to.StringPtr("value1"),
				"tag2": to.StringPtr("value2"),
			},
		},
		&NamespacesPatchOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.NamespaceResource.ID == nil {
		t.Fatal("NamespaceResource.ID should not be nil!")
	}
}

func TestNamespaces_Delete(t *testing.T) {
	// From example NameSpaceDelete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNamespacesClient(con,
		"29cfa613-cbbc-4512-b1d6-1b3a92c7fa40")
	poller, err := client.BeginDelete(ctx,
		"5ktrial",
		"nh-sdk-ns",
		&NamespacesBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestNamespaces_Get(t *testing.T) {
	// From example NameSpaceGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNamespacesClient(con,
		"29cfa613-cbbc-4512-b1d6-1b3a92c7fa40")
	res, err := client.Get(ctx,
		"5ktrial",
		"nh-sdk-ns",
		&NamespacesGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.NamespaceResource.ID == nil {
		t.Fatal("NamespaceResource.ID should not be nil!")
	}
}

func TestNamespaces_CreateOrUpdateAuthorizationRule(t *testing.T) {
	// From example NameSpaceAuthorizationRuleCreate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNamespacesClient(con,
		"29cfa613-cbbc-4512-b1d6-1b3a92c7fa40")
	res, err := client.CreateOrUpdateAuthorizationRule(ctx,
		"5ktrial",
		"nh-sdk-ns",
		"sdk-AuthRules-1788",
		SharedAccessAuthorizationRuleCreateOrUpdateParameters{
			Properties: &SharedAccessAuthorizationRuleProperties{
				Rights: []*AccessRights{
					AccessRightsListen.ToPtr(),
					AccessRightsSend.ToPtr()},
			},
		},
		&NamespacesCreateOrUpdateAuthorizationRuleOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.SharedAccessAuthorizationRuleResource.ID == nil {
		t.Fatal("SharedAccessAuthorizationRuleResource.ID should not be nil!")
	}
}

func TestNamespaces_DeleteAuthorizationRule(t *testing.T) {
	// From example NameSpaceAuthorizationRuleDelete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNamespacesClient(con,
		"29cfa613-cbbc-4512-b1d6-1b3a92c7fa40")
	_, err := client.DeleteAuthorizationRule(ctx,
		"5ktrial",
		"nh-sdk-ns",
		"RootManageSharedAccessKey",
		&NamespacesDeleteAuthorizationRuleOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestNamespaces_GetAuthorizationRule(t *testing.T) {
	// From example NameSpaceAuthorizationRuleGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNamespacesClient(con,
		"29cfa613-cbbc-4512-b1d6-1b3a92c7fa40")
	res, err := client.GetAuthorizationRule(ctx,
		"5ktrial",
		"nh-sdk-ns",
		"RootManageSharedAccessKey",
		&NamespacesGetAuthorizationRuleOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.SharedAccessAuthorizationRuleResource.ID == nil {
		t.Fatal("SharedAccessAuthorizationRuleResource.ID should not be nil!")
	}
}

func TestNamespaces_List(t *testing.T) {
	// From example NameSpaceListByResourceGroup
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNamespacesClient(con,
		"29cfa613-cbbc-4512-b1d6-1b3a92c7fa40")
	pager := client.List("5ktrial",
		&NamespacesListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("NamespaceResource.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("NamespaceResource.ID should not be nil!")
			}
		}
	}
}

func TestNamespaces_ListAll(t *testing.T) {
	// From example NameSpaceList
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNamespacesClient(con,
		"29cfa613-cbbc-4512-b1d6-1b3a92c7fa40")
	pager := client.ListAll(&NamespacesListAllOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("NamespaceResource.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("NamespaceResource.ID should not be nil!")
			}
		}
	}
}

func TestNamespaces_ListAuthorizationRules(t *testing.T) {
	// From example NameSpaceAuthorizationRuleListAll
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNamespacesClient(con,
		"29cfa613-cbbc-4512-b1d6-1b3a92c7fa40")
	pager := client.ListAuthorizationRules("5ktrial",
		"nh-sdk-ns",
		&NamespacesListAuthorizationRulesOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("SharedAccessAuthorizationRuleResource.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("SharedAccessAuthorizationRuleResource.ID should not be nil!")
			}
		}
	}
}

func TestNamespaces_ListKeys(t *testing.T) {
	// From example NameSpaceAuthorizationRuleListKey
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNamespacesClient(con,
		"29cfa613-cbbc-4512-b1d6-1b3a92c7fa40")
	_, err := client.ListKeys(ctx,
		"5ktrial",
		"nh-sdk-ns",
		"RootManageSharedAccessKey",
		&NamespacesListKeysOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestNamespaces_RegenerateKeys(t *testing.T) {
	// From example NameSpaceAuthorizationRuleRegenerateKey
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNamespacesClient(con,
		"29cfa613-cbbc-4512-b1d6-1b3a92c7fa40")
	_, err := client.RegenerateKeys(ctx,
		"5ktrial",
		"nh-sdk-ns",
		"RootManageSharedAccessKey",
		PolicykeyResource{
			PolicyKey: to.StringPtr("PrimaryKey"),
		},
		&NamespacesRegenerateKeysOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestNotificationHubs_CheckNotificationHubAvailability(t *testing.T) {
	// From example notificationHubCheckNameAvailability
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNotificationHubsClient(con,
		"29cfa613-cbbc-4512-b1d6-1b3a92c7fa40")
	res, err := client.CheckNotificationHubAvailability(ctx,
		"5ktrial",
		"locp-newns",
		CheckAvailabilityParameters{
			Name:     to.StringPtr("sdktest"),
			Location: to.StringPtr("West Europe"),
		},
		&NotificationHubsCheckNotificationHubAvailabilityOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.CheckAvailabilityResult.ID == nil {
		t.Fatal("CheckAvailabilityResult.ID should not be nil!")
	}
}

func TestNotificationHubs_CreateOrUpdate(t *testing.T) {
	// From example NotificationHubCreate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNotificationHubsClient(con,
		"29cfa613-cbbc-4512-b1d6-1b3a92c7fa40")
	res, err := client.CreateOrUpdate(ctx,
		"5ktrial",
		"nh-sdk-ns",
		"nh-sdk-hub",
		NotificationHubCreateOrUpdateParameters{
			Resource: Resource{
				Location: to.StringPtr("eastus"),
			},
			Properties: &NotificationHubProperties{},
		},
		&NotificationHubsCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.NotificationHubResource.ID == nil {
		t.Fatal("NotificationHubResource.ID should not be nil!")
	}
}

func TestNotificationHubs_Patch(t *testing.T) {
	// From example NotificationHubPatch
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNotificationHubsClient(con,
		"29cfa613-cbbc-4512-b1d6-1b3a92c7fa40")
	res, err := client.Patch(ctx,
		"sdkresourceGroup",
		"nh-sdk-ns",
		"sdk-notificationHubs-8708",
		&NotificationHubsPatchOptions{Parameters: &NotificationHubPatchParameters{}})
	if err != nil {
		t.Fatal(err)
	}
	if res.NotificationHubResource.ID == nil {
		t.Fatal("NotificationHubResource.ID should not be nil!")
	}
}

func TestNotificationHubs_Delete(t *testing.T) {
	// From example NotificationHubDelete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNotificationHubsClient(con,
		"29cfa613-cbbc-4512-b1d6-1b3a92c7fa40")
	_, err := client.Delete(ctx,
		"5ktrial",
		"nh-sdk-ns",
		"nh-sdk-hub",
		&NotificationHubsDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestNotificationHubs_Get(t *testing.T) {
	// From example NotificationHubGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNotificationHubsClient(con,
		"29cfa613-cbbc-4512-b1d6-1b3a92c7fa40")
	res, err := client.Get(ctx,
		"5ktrial",
		"nh-sdk-ns",
		"nh-sdk-hub",
		&NotificationHubsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.NotificationHubResource.ID == nil {
		t.Fatal("NotificationHubResource.ID should not be nil!")
	}
}

func TestNotificationHubs_DebugSend(t *testing.T) {
	// From example debugsend
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNotificationHubsClient(con,
		"29cfa613-cbbc-4512-b1d6-1b3a92c7fa40")
	res, err := client.DebugSend(ctx,
		"5ktrial",
		"nh-sdk-ns",
		"nh-sdk-hub",
		&NotificationHubsDebugSendOptions{Parameters: &map[string]interface{}{
			"data": map[string]interface{}{
				"message": "Hello",
			},
		},
		})
	if err != nil {
		t.Fatal(err)
	}
	if res.DebugSendResponse.ID == nil {
		t.Fatal("DebugSendResponse.ID should not be nil!")
	}
}

func TestNotificationHubs_CreateOrUpdateAuthorizationRule(t *testing.T) {
	// From example NotificationHubAuthorizationRuleCreate
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNotificationHubsClient(con,
		"29cfa613-cbbc-4512-b1d6-1b3a92c7fa40")
	res, err := client.CreateOrUpdateAuthorizationRule(ctx,
		"5ktrial",
		"nh-sdk-ns",
		"nh-sdk-hub",
		"DefaultListenSharedAccessSignature",
		SharedAccessAuthorizationRuleCreateOrUpdateParameters{
			Properties: &SharedAccessAuthorizationRuleProperties{
				Rights: []*AccessRights{
					AccessRightsListen.ToPtr(),
					AccessRightsSend.ToPtr()},
			},
		},
		&NotificationHubsCreateOrUpdateAuthorizationRuleOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.SharedAccessAuthorizationRuleResource.ID == nil {
		t.Fatal("SharedAccessAuthorizationRuleResource.ID should not be nil!")
	}
}

func TestNotificationHubs_DeleteAuthorizationRule(t *testing.T) {
	// From example NotificationHubAuthorizationRuleDelete
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNotificationHubsClient(con,
		"29cfa613-cbbc-4512-b1d6-1b3a92c7fa40")
	_, err := client.DeleteAuthorizationRule(ctx,
		"5ktrial",
		"nh-sdk-ns",
		"nh-sdk-hub",
		"DefaultListenSharedAccessSignature",
		&NotificationHubsDeleteAuthorizationRuleOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestNotificationHubs_GetAuthorizationRule(t *testing.T) {
	// From example NotificationHubAuthorizationRuleGet
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNotificationHubsClient(con,
		"29cfa613-cbbc-4512-b1d6-1b3a92c7fa40")
	res, err := client.GetAuthorizationRule(ctx,
		"5ktrial",
		"nh-sdk-ns",
		"nh-sdk-hub",
		"DefaultListenSharedAccessSignature",
		&NotificationHubsGetAuthorizationRuleOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.SharedAccessAuthorizationRuleResource.ID == nil {
		t.Fatal("SharedAccessAuthorizationRuleResource.ID should not be nil!")
	}
}

func TestNotificationHubs_List(t *testing.T) {
	// From example NotificationHubListByNameSpace
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNotificationHubsClient(con,
		"29cfa613-cbbc-4512-b1d6-1b3a92c7fa40")
	pager := client.List("5ktrial",
		"nh-sdk-ns",
		&NotificationHubsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("NotificationHubResource.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("NotificationHubResource.ID should not be nil!")
			}
		}
	}
}

func TestNotificationHubs_ListAuthorizationRules(t *testing.T) {
	// From example NotificationHubAuthorizationRuleListAll
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNotificationHubsClient(con,
		"29cfa613-cbbc-4512-b1d6-1b3a92c7fa40")
	pager := client.ListAuthorizationRules("5ktrial",
		"nh-sdk-ns",
		"nh-sdk-hub",
		&NotificationHubsListAuthorizationRulesOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("SharedAccessAuthorizationRuleResource.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("SharedAccessAuthorizationRuleResource.ID should not be nil!")
			}
		}
	}
}

func TestNotificationHubs_ListKeys(t *testing.T) {
	// From example NotificationHubAuthorizationRuleListKey
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNotificationHubsClient(con,
		"29cfa613-cbbc-4512-b1d6-1b3a92c7fa40")
	_, err := client.ListKeys(ctx,
		"5ktrial",
		"nh-sdk-ns",
		"nh-sdk-hub",
		"sdk-AuthRules-5800",
		&NotificationHubsListKeysOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestNotificationHubs_RegenerateKeys(t *testing.T) {
	// From example NotificationHubAuthorizationRuleRegenrateKey
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNotificationHubsClient(con,
		"29cfa613-cbbc-4512-b1d6-1b3a92c7fa40")
	_, err := client.RegenerateKeys(ctx,
		"5ktrial",
		"nh-sdk-ns",
		"nh-sdk-hub",
		"DefaultListenSharedAccessSignature",
		PolicykeyResource{
			PolicyKey: to.StringPtr("PrimaryKey"),
		},
		&NotificationHubsRegenerateKeysOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestNotificationHubs_GetPnsCredentials(t *testing.T) {
	// From example notificationHubPnsCredentials
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewNotificationHubsClient(con,
		"29cfa613-cbbc-4512-b1d6-1b3a92c7fa40")
	res, err := client.GetPnsCredentials(ctx,
		"5ktrial",
		"nh-sdk-ns",
		"nh-sdk-hub",
		&NotificationHubsGetPnsCredentialsOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.PnsCredentialsResource.ID == nil {
		t.Fatal("PnsCredentialsResource.ID should not be nil!")
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	subscriptionId = getEnv("SUBSCRIPTION_ID", "00000000-0000-0000-0000-000000000000")
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}
	cred, err = azidentity.NewEnvironmentCredential(&azidentity.EnvironmentCredentialOptions{AuthorityHost: mockHost, HTTPClient: client})
	if err != nil {
		panic(err)
	}

	con = arm.NewConnection(mockHost, cred, &arm.ConnectionOptions{
		Logging: policy.LogOptions{
			IncludeBody: true,
		},
		HTTPClient: client,
	})
}

func tearDown() {

}
