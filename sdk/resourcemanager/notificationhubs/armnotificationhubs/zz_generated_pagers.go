//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armnotificationhubs

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"reflect"
)

// ClientListAuthorizationRulesPager provides operations for iterating over paged responses.
type ClientListAuthorizationRulesPager struct {
	client    *Client
	current   ClientListAuthorizationRulesResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ClientListAuthorizationRulesResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ClientListAuthorizationRulesPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SharedAccessAuthorizationRuleListResult.NextLink == nil || len(*p.current.SharedAccessAuthorizationRuleListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *ClientListAuthorizationRulesPager) NextPage(ctx context.Context) (ClientListAuthorizationRulesResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return ClientListAuthorizationRulesResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ClientListAuthorizationRulesResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ClientListAuthorizationRulesResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ClientListAuthorizationRulesResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listAuthorizationRulesHandleResponse(resp)
	if err != nil {
		return ClientListAuthorizationRulesResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// ClientListPager provides operations for iterating over paged responses.
type ClientListPager struct {
	client    *Client
	current   ClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.NotificationHubListResult.NextLink == nil || len(*p.current.NotificationHubListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *ClientListPager) NextPage(ctx context.Context) (ClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return ClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return ClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// NamespacesClientListAllPager provides operations for iterating over paged responses.
type NamespacesClientListAllPager struct {
	client    *NamespacesClient
	current   NamespacesClientListAllResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, NamespacesClientListAllResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *NamespacesClientListAllPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.NamespaceListResult.NextLink == nil || len(*p.current.NamespaceListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *NamespacesClientListAllPager) NextPage(ctx context.Context) (NamespacesClientListAllResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return NamespacesClientListAllResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return NamespacesClientListAllResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return NamespacesClientListAllResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return NamespacesClientListAllResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listAllHandleResponse(resp)
	if err != nil {
		return NamespacesClientListAllResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// NamespacesClientListAuthorizationRulesPager provides operations for iterating over paged responses.
type NamespacesClientListAuthorizationRulesPager struct {
	client    *NamespacesClient
	current   NamespacesClientListAuthorizationRulesResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, NamespacesClientListAuthorizationRulesResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *NamespacesClientListAuthorizationRulesPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SharedAccessAuthorizationRuleListResult.NextLink == nil || len(*p.current.SharedAccessAuthorizationRuleListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *NamespacesClientListAuthorizationRulesPager) NextPage(ctx context.Context) (NamespacesClientListAuthorizationRulesResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return NamespacesClientListAuthorizationRulesResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return NamespacesClientListAuthorizationRulesResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return NamespacesClientListAuthorizationRulesResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return NamespacesClientListAuthorizationRulesResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listAuthorizationRulesHandleResponse(resp)
	if err != nil {
		return NamespacesClientListAuthorizationRulesResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// NamespacesClientListPager provides operations for iterating over paged responses.
type NamespacesClientListPager struct {
	client    *NamespacesClient
	current   NamespacesClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, NamespacesClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *NamespacesClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.NamespaceListResult.NextLink == nil || len(*p.current.NamespaceListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *NamespacesClientListPager) NextPage(ctx context.Context) (NamespacesClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return NamespacesClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return NamespacesClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return NamespacesClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return NamespacesClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return NamespacesClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// OperationsClientListPager provides operations for iterating over paged responses.
type OperationsClientListPager struct {
	client    *OperationsClient
	current   OperationsClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, OperationsClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *OperationsClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.OperationListResult.NextLink == nil || len(*p.current.OperationListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *OperationsClientListPager) NextPage(ctx context.Context) (OperationsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return OperationsClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return OperationsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return OperationsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return OperationsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return OperationsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}
