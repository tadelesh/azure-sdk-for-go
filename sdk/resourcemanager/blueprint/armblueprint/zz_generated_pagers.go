//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armblueprint

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"reflect"
)

// ArtifactsClientListPager provides operations for iterating over paged responses.
type ArtifactsClientListPager struct {
	client    *ArtifactsClient
	current   ArtifactsClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ArtifactsClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *ArtifactsClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ArtifactList.NextLink == nil || len(*p.current.ArtifactList.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *ArtifactsClientListPager) NextPage(ctx context.Context) (ArtifactsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return ArtifactsClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return ArtifactsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return ArtifactsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return ArtifactsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return ArtifactsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// AssignmentOperationsClientListPager provides operations for iterating over paged responses.
type AssignmentOperationsClientListPager struct {
	client    *AssignmentOperationsClient
	current   AssignmentOperationsClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, AssignmentOperationsClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *AssignmentOperationsClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.AssignmentOperationList.NextLink == nil || len(*p.current.AssignmentOperationList.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *AssignmentOperationsClientListPager) NextPage(ctx context.Context) (AssignmentOperationsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return AssignmentOperationsClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return AssignmentOperationsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return AssignmentOperationsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return AssignmentOperationsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return AssignmentOperationsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// AssignmentsClientListPager provides operations for iterating over paged responses.
type AssignmentsClientListPager struct {
	client    *AssignmentsClient
	current   AssignmentsClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, AssignmentsClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *AssignmentsClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.AssignmentList.NextLink == nil || len(*p.current.AssignmentList.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *AssignmentsClientListPager) NextPage(ctx context.Context) (AssignmentsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return AssignmentsClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return AssignmentsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return AssignmentsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return AssignmentsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return AssignmentsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// BlueprintsClientListPager provides operations for iterating over paged responses.
type BlueprintsClientListPager struct {
	client    *BlueprintsClient
	current   BlueprintsClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, BlueprintsClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *BlueprintsClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.List.NextLink == nil || len(*p.current.List.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *BlueprintsClientListPager) NextPage(ctx context.Context) (BlueprintsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return BlueprintsClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return BlueprintsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return BlueprintsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return BlueprintsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return BlueprintsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// PublishedArtifactsClientListPager provides operations for iterating over paged responses.
type PublishedArtifactsClientListPager struct {
	client    *PublishedArtifactsClient
	current   PublishedArtifactsClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, PublishedArtifactsClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *PublishedArtifactsClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ArtifactList.NextLink == nil || len(*p.current.ArtifactList.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *PublishedArtifactsClientListPager) NextPage(ctx context.Context) (PublishedArtifactsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return PublishedArtifactsClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return PublishedArtifactsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return PublishedArtifactsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return PublishedArtifactsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return PublishedArtifactsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// PublishedBlueprintsClientListPager provides operations for iterating over paged responses.
type PublishedBlueprintsClientListPager struct {
	client    *PublishedBlueprintsClient
	current   PublishedBlueprintsClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, PublishedBlueprintsClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *PublishedBlueprintsClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PublishedBlueprintList.NextLink == nil || len(*p.current.PublishedBlueprintList.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *PublishedBlueprintsClientListPager) NextPage(ctx context.Context) (PublishedBlueprintsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return PublishedBlueprintsClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return PublishedBlueprintsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return PublishedBlueprintsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return PublishedBlueprintsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return PublishedBlueprintsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}
