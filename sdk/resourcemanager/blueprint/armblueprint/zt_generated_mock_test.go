//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armblueprint_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"
	"time"

	"encoding/json"
	"reflect"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/blueprint/armblueprint"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestBlueprints_CreateOrUpdate(t *testing.T) {
	// From example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/managementGroupBPDef/Blueprint_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ManagementGroupBlueprint"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armblueprint.NewBlueprintsClient(cred, &options)
	_, err := client.CreateOrUpdate(ctx,
		"providers/Microsoft.Management/managementGroups/ContosoOnlineGroup",
		"simpleBlueprint",
		armblueprint.Blueprint{
			Properties: &armblueprint.Properties{
				Description: to.Ptr("blueprint contains all artifact kinds {'template', 'rbac', 'policy'}"),
				Parameters: map[string]*armblueprint.ParameterDefinition{
					"costCenter": {
						Type: to.Ptr(armblueprint.TemplateParameterTypeString),
						Metadata: &armblueprint.ParameterDefinitionMetadata{
							DisplayName: to.Ptr("force cost center tag for all resources under given subscription."),
						},
					},
					"owners": {
						Type: to.Ptr(armblueprint.TemplateParameterTypeArray),
						Metadata: &armblueprint.ParameterDefinitionMetadata{
							DisplayName: to.Ptr("assign owners to subscription along with blueprint assignment."),
						},
					},
					"storageAccountType": {
						Type: to.Ptr(armblueprint.TemplateParameterTypeString),
						Metadata: &armblueprint.ParameterDefinitionMetadata{
							DisplayName: to.Ptr("storage account type."),
						},
					},
				},
				ResourceGroups: map[string]*armblueprint.ResourceGroupDefinition{
					"storageRG": {
						Metadata: &armblueprint.ParameterDefinitionMetadata{
							Description: to.Ptr("Contains storageAccounts that collect all shoebox logs."),
							DisplayName: to.Ptr("storage resource group"),
						},
					},
				},
				TargetScope: to.Ptr(armblueprint.BlueprintTargetScopeSubscription),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/managementGroupBPDef/Blueprint_Create.json: %v", err)
	}

	// From example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/ResourceGroupWithTags.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ResourceGroupWithTags"},
	})
	client = armblueprint.NewBlueprintsClient(cred, &options)
	_, err = client.CreateOrUpdate(ctx,
		"providers/Microsoft.Management/managementGroups/{ManagementGroupId}",
		"simpleBlueprint",
		armblueprint.Blueprint{
			Properties: &armblueprint.Properties{
				Description: to.Ptr("An example blueprint containing an RG with two tags."),
				ResourceGroups: map[string]*armblueprint.ResourceGroupDefinition{
					"myRGName": {
						Name:     to.Ptr("myRGName"),
						Location: to.Ptr("westus"),
						Metadata: &armblueprint.ParameterDefinitionMetadata{
							DisplayName: to.Ptr("My Resource Group"),
						},
						Tags: map[string]*string{
							"costcenter":  to.Ptr("123456"),
							"nameOnlyTag": to.Ptr(""),
						},
					},
				},
				TargetScope: to.Ptr(armblueprint.BlueprintTargetScopeSubscription),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/ResourceGroupWithTags.json: %v", err)
	}

	// From example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/subscriptionBPDef/Blueprint_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SubscriptionBlueprint"},
	})
	client = armblueprint.NewBlueprintsClient(cred, &options)
	_, err = client.CreateOrUpdate(ctx,
		"subscriptions/00000000-0000-0000-0000-000000000000",
		"simpleBlueprint",
		armblueprint.Blueprint{
			Properties: &armblueprint.Properties{
				Description: to.Ptr("blueprint contains all artifact kinds {'template', 'rbac', 'policy'}"),
				Parameters: map[string]*armblueprint.ParameterDefinition{
					"costCenter": {
						Type: to.Ptr(armblueprint.TemplateParameterTypeString),
						Metadata: &armblueprint.ParameterDefinitionMetadata{
							DisplayName: to.Ptr("force cost center tag for all resources under given subscription."),
						},
					},
					"owners": {
						Type: to.Ptr(armblueprint.TemplateParameterTypeArray),
						Metadata: &armblueprint.ParameterDefinitionMetadata{
							DisplayName: to.Ptr("assign owners to subscription along with blueprint assignment."),
						},
					},
					"storageAccountType": {
						Type: to.Ptr(armblueprint.TemplateParameterTypeString),
						Metadata: &armblueprint.ParameterDefinitionMetadata{
							DisplayName: to.Ptr("storage account type."),
						},
					},
				},
				ResourceGroups: map[string]*armblueprint.ResourceGroupDefinition{
					"storageRG": {
						Metadata: &armblueprint.ParameterDefinitionMetadata{
							Description: to.Ptr("Contains storageAccounts that collect all shoebox logs."),
							DisplayName: to.Ptr("storage resource group"),
						},
					},
				},
				TargetScope: to.Ptr(armblueprint.BlueprintTargetScopeSubscription),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/subscriptionBPDef/Blueprint_Create.json: %v", err)
	}
}

func TestBlueprints_Get(t *testing.T) {
	// From example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/managementGroupBPDef/Blueprint_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ManagementGroupBlueprint"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armblueprint.NewBlueprintsClient(cred, &options)
	res, err := client.Get(ctx,
		"providers/Microsoft.Management/managementGroups/ContosoOnlineGroup",
		"simpleBlueprint",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/managementGroupBPDef/Blueprint_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armblueprint.Blueprint{
			Name: to.Ptr("simpleBlueprint"),
			Type: to.Ptr("Microsoft.Blueprint/blueprints"),
			ID:   to.Ptr("/providers/Microsoft.Management/managementGroups/ContosoOnlineGroup/providers/Microsoft.Blueprint/blueprints/simpleBlueprint"),
			Properties: &armblueprint.Properties{
				Description: to.Ptr("blueprint contains all artifact kinds {'template', 'rbac', 'policy'}"),
				Parameters: map[string]*armblueprint.ParameterDefinition{
					"costCenter": {
						Type: to.Ptr(armblueprint.TemplateParameterTypeString),
						Metadata: &armblueprint.ParameterDefinitionMetadata{
							DisplayName: to.Ptr("force cost center tag for all resources under given subscription."),
						},
					},
					"owners": {
						Type: to.Ptr(armblueprint.TemplateParameterTypeArray),
						Metadata: &armblueprint.ParameterDefinitionMetadata{
							DisplayName: to.Ptr("assign owners to subscription along with blueprint assignment."),
						},
					},
					"storageAccountType": {
						Type: to.Ptr(armblueprint.TemplateParameterTypeString),
						Metadata: &armblueprint.ParameterDefinitionMetadata{
							DisplayName: to.Ptr("storage account type."),
						},
					},
				},
				ResourceGroups: map[string]*armblueprint.ResourceGroupDefinition{
					"storageRG": {
						Metadata: &armblueprint.ParameterDefinitionMetadata{
							Description: to.Ptr("Contains storageAccounts that collect all shoebox logs."),
							DisplayName: to.Ptr("storage resource group"),
						},
					},
				},
				TargetScope: to.Ptr(armblueprint.BlueprintTargetScopeSubscription),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Blueprint) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Blueprint)
			t.Fatalf("Mock response is not equal to example response for example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/managementGroupBPDef/Blueprint_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/subscriptionBPDef/Blueprint_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SubscriptionBlueprint"},
	})
	client = armblueprint.NewBlueprintsClient(cred, &options)
	res, err = client.Get(ctx,
		"subscriptions/00000000-0000-0000-0000-000000000000",
		"simpleBlueprint",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/subscriptionBPDef/Blueprint_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armblueprint.Blueprint{
			Name: to.Ptr("simpleBlueprint"),
			Type: to.Ptr("Microsoft.Blueprint/blueprints"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Blueprint/blueprints/simpleBlueprint"),
			Properties: &armblueprint.Properties{
				Description: to.Ptr("blueprint contains all artifact kinds {'template', 'rbac', 'policy'}"),
				Parameters: map[string]*armblueprint.ParameterDefinition{
					"costCenter": {
						Type: to.Ptr(armblueprint.TemplateParameterTypeString),
						Metadata: &armblueprint.ParameterDefinitionMetadata{
							DisplayName: to.Ptr("force cost center tag for all resources under given subscription."),
						},
					},
					"owners": {
						Type: to.Ptr(armblueprint.TemplateParameterTypeArray),
						Metadata: &armblueprint.ParameterDefinitionMetadata{
							DisplayName: to.Ptr("assign owners to subscription along with blueprint assignment."),
						},
					},
					"storageAccountType": {
						Type: to.Ptr(armblueprint.TemplateParameterTypeString),
						Metadata: &armblueprint.ParameterDefinitionMetadata{
							DisplayName: to.Ptr("storage account type."),
						},
					},
				},
				ResourceGroups: map[string]*armblueprint.ResourceGroupDefinition{
					"storageRG": {
						Metadata: &armblueprint.ParameterDefinitionMetadata{
							Description: to.Ptr("Contains storageAccounts that collect all shoebox logs."),
							DisplayName: to.Ptr("storage resource group"),
						},
					},
				},
				TargetScope: to.Ptr(armblueprint.BlueprintTargetScopeSubscription),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Blueprint) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Blueprint)
			t.Fatalf("Mock response is not equal to example response for example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/subscriptionBPDef/Blueprint_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBlueprints_Delete(t *testing.T) {
	// From example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/managementGroupBPDef/Blueprint_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ManagementGroupBlueprint"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armblueprint.NewBlueprintsClient(cred, &options)
	res, err := client.Delete(ctx,
		"providers/Microsoft.Management/managementGroups/ContosoOnlineGroup",
		"simpleBlueprint",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/managementGroupBPDef/Blueprint_Delete.json: %v", err)
	}
	// Response check
	{
		exampleRes := armblueprint.Blueprint{
			Name: to.Ptr("simpleBlueprint"),
			Type: to.Ptr("Microsoft.Blueprint/blueprints"),
			ID:   to.Ptr("/providers/Microsoft.Management/managementGroups/ContosoOnlineGroup/providers/Microsoft.Blueprint/blueprints/simpleBlueprint"),
			Properties: &armblueprint.Properties{
				Description: to.Ptr("blueprint contains all artifact kinds {'template', 'rbac', 'policy'}"),
				Parameters: map[string]*armblueprint.ParameterDefinition{
					"costCenter": {
						Type: to.Ptr(armblueprint.TemplateParameterTypeString),
						Metadata: &armblueprint.ParameterDefinitionMetadata{
							DisplayName: to.Ptr("force cost center tag for all resources under given subscription."),
						},
					},
					"owners": {
						Type: to.Ptr(armblueprint.TemplateParameterTypeArray),
						Metadata: &armblueprint.ParameterDefinitionMetadata{
							DisplayName: to.Ptr("assign owners to subscription along with blueprint assignment."),
						},
					},
					"storageAccountType": {
						Type: to.Ptr(armblueprint.TemplateParameterTypeString),
						Metadata: &armblueprint.ParameterDefinitionMetadata{
							DisplayName: to.Ptr("storage account type."),
						},
					},
				},
				ResourceGroups: map[string]*armblueprint.ResourceGroupDefinition{
					"storageRG": {
						Metadata: &armblueprint.ParameterDefinitionMetadata{
							Description: to.Ptr("Contains storageAccounts that collect all shoebox logs."),
							DisplayName: to.Ptr("storage resource group"),
						},
					},
				},
				TargetScope: to.Ptr(armblueprint.BlueprintTargetScopeSubscription),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Blueprint) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Blueprint)
			t.Fatalf("Mock response is not equal to example response for example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/managementGroupBPDef/Blueprint_Delete.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/subscriptionBPDef/Blueprint_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SubscriptionBlueprint"},
	})
	client = armblueprint.NewBlueprintsClient(cred, &options)
	res, err = client.Delete(ctx,
		"subscriptions/00000000-0000-0000-0000-000000000000",
		"simpleBlueprint",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/subscriptionBPDef/Blueprint_Delete.json: %v", err)
	}
	// Response check
	{
		exampleRes := armblueprint.Blueprint{
			Name: to.Ptr("simpleBlueprint"),
			Type: to.Ptr("Microsoft.Blueprint/blueprints"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Blueprint/blueprints/simpleBlueprint"),
			Properties: &armblueprint.Properties{
				Description: to.Ptr("blueprint contains all artifact kinds {'template', 'rbac', 'policy'}"),
				Parameters: map[string]*armblueprint.ParameterDefinition{
					"costCenter": {
						Type: to.Ptr(armblueprint.TemplateParameterTypeString),
						Metadata: &armblueprint.ParameterDefinitionMetadata{
							DisplayName: to.Ptr("force cost center tag for all resources under given subscription."),
						},
					},
					"owners": {
						Type: to.Ptr(armblueprint.TemplateParameterTypeArray),
						Metadata: &armblueprint.ParameterDefinitionMetadata{
							DisplayName: to.Ptr("assign owners to subscription along with blueprint assignment."),
						},
					},
					"storageAccountType": {
						Type: to.Ptr(armblueprint.TemplateParameterTypeString),
						Metadata: &armblueprint.ParameterDefinitionMetadata{
							DisplayName: to.Ptr("storage account type."),
						},
					},
				},
				ResourceGroups: map[string]*armblueprint.ResourceGroupDefinition{
					"storageRG": {
						Metadata: &armblueprint.ParameterDefinitionMetadata{
							Description: to.Ptr("Contains storageAccounts that collect all shoebox logs."),
							DisplayName: to.Ptr("storage resource group"),
						},
					},
				},
				TargetScope: to.Ptr(armblueprint.BlueprintTargetScopeSubscription),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Blueprint) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Blueprint)
			t.Fatalf("Mock response is not equal to example response for example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/subscriptionBPDef/Blueprint_Delete.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestBlueprints_List(t *testing.T) {
	// From example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/managementGroupBPDef/Blueprint_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ManagementGroupBlueprint"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armblueprint.NewBlueprintsClient(cred, &options)
	pager := client.List("providers/Microsoft.Management/managementGroups/ContosoOnlineGroup",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/managementGroupBPDef/Blueprint_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armblueprint.List{
			Value: []*armblueprint.Blueprint{
				{
					Name: to.Ptr("simpleBlueprint"),
					Type: to.Ptr("Microsoft.Blueprint/blueprints"),
					ID:   to.Ptr("/providers/Microsoft.Management/managementGroups/ContosoOnlineGroup/providers/Microsoft.Blueprint/blueprints/simpleBlueprint"),
					Properties: &armblueprint.Properties{
						Description: to.Ptr("blueprint contains all artifact kinds {'template', 'rbac', 'policy'}"),
						Parameters: map[string]*armblueprint.ParameterDefinition{
							"costCenter": {
								Type: to.Ptr(armblueprint.TemplateParameterTypeString),
								Metadata: &armblueprint.ParameterDefinitionMetadata{
									DisplayName: to.Ptr("force cost center tag for all resources under given subscription."),
								},
							},
							"owners": {
								Type: to.Ptr(armblueprint.TemplateParameterTypeArray),
								Metadata: &armblueprint.ParameterDefinitionMetadata{
									DisplayName: to.Ptr("assign owners to subscription along with blueprint assignment."),
								},
							},
							"storageAccountType": {
								Type: to.Ptr(armblueprint.TemplateParameterTypeString),
								Metadata: &armblueprint.ParameterDefinitionMetadata{
									DisplayName: to.Ptr("storage account type."),
								},
							},
						},
						ResourceGroups: map[string]*armblueprint.ResourceGroupDefinition{
							"storageRG": {
								Metadata: &armblueprint.ParameterDefinitionMetadata{
									Description: to.Ptr("Contains storageAccounts that collect all shoebox logs."),
									DisplayName: to.Ptr("storage resource group"),
								},
							},
						},
						TargetScope: to.Ptr(armblueprint.BlueprintTargetScopeSubscription),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.List) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.List)
			t.Fatalf("Mock response is not equal to example response for example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/managementGroupBPDef/Blueprint_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/subscriptionBPDef/Blueprint_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SubscriptionBlueprint"},
	})
	client = armblueprint.NewBlueprintsClient(cred, &options)
	pager = client.List("subscriptions/00000000-0000-0000-0000-000000000000",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/subscriptionBPDef/Blueprint_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armblueprint.List{
			Value: []*armblueprint.Blueprint{
				{
					Name: to.Ptr("simpleBlueprint"),
					Type: to.Ptr("Microsoft.Blueprint/blueprints"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Blueprint/blueprints/simpleBlueprint"),
					Properties: &armblueprint.Properties{
						Description: to.Ptr("blueprint contains all artifact kinds {'template', 'rbac', 'policy'}"),
						Parameters: map[string]*armblueprint.ParameterDefinition{
							"costCenter": {
								Type: to.Ptr(armblueprint.TemplateParameterTypeString),
								Metadata: &armblueprint.ParameterDefinitionMetadata{
									DisplayName: to.Ptr("force cost center tag for all resources under given subscription."),
								},
							},
							"owners": {
								Type: to.Ptr(armblueprint.TemplateParameterTypeArray),
								Metadata: &armblueprint.ParameterDefinitionMetadata{
									DisplayName: to.Ptr("assign owners to subscription along with blueprint assignment."),
								},
							},
							"storageAccountType": {
								Type: to.Ptr(armblueprint.TemplateParameterTypeString),
								Metadata: &armblueprint.ParameterDefinitionMetadata{
									DisplayName: to.Ptr("storage account type."),
								},
							},
						},
						ResourceGroups: map[string]*armblueprint.ResourceGroupDefinition{
							"storageRG": {
								Metadata: &armblueprint.ParameterDefinitionMetadata{
									Description: to.Ptr("Contains storageAccounts that collect all shoebox logs."),
									DisplayName: to.Ptr("storage resource group"),
								},
							},
						},
						TargetScope: to.Ptr(armblueprint.BlueprintTargetScopeSubscription),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.List) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.List)
			t.Fatalf("Mock response is not equal to example response for example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/subscriptionBPDef/Blueprint_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestArtifacts_CreateOrUpdate(t *testing.T) {
	// From example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/managementGroupBPDef/ARMTemplateArtifact_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"MG-ARMTemplateArtifact"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armblueprint.NewArtifactsClient(cred, &options)
	_, err := client.CreateOrUpdate(ctx,
		"providers/Microsoft.Management/managementGroups/ContosoOnlineGroup",
		"simpleBlueprint",
		"storageTemplate",
		&armblueprint.TemplateArtifact{
			Kind: to.Ptr(armblueprint.ArtifactKindTemplate),
			Properties: &armblueprint.TemplateArtifactProperties{
				Parameters: map[string]*armblueprint.ParameterValue{
					"storageAccountType": {
						Value: "[parameters('storageAccountType')]",
					},
				},
				ResourceGroup: to.Ptr("storageRG"),
				Template: map[string]interface{}{
					"contentVersion": "1.0.0.0",
					"outputs": map[string]interface{}{
						"storageAccountName": map[string]interface{}{
							"type":  "string",
							"value": "[variables('storageAccountName')]",
						},
					},
					"parameters": map[string]interface{}{
						"storageAccountType": map[string]interface{}{
							"type": "string",
							"allowedValues": []interface{}{
								"Standard_LRS",
								"Standard_GRS",
								"Standard_ZRS",
								"Premium_LRS",
							},
							"defaultValue": "Standard_LRS",
							"metadata": map[string]interface{}{
								"description": "Storage Account type",
							},
						},
					},
					"resources": []interface{}{
						map[string]interface{}{
							"name":       "[variables('storageAccountName')]",
							"type":       "Microsoft.Storage/storageAccounts",
							"apiVersion": "2016-01-01",
							"kind":       "Storage",
							"location":   "[resourceGroup().location]",
							"properties": map[string]interface{}{},
							"sku": map[string]interface{}{
								"name": "[parameters('storageAccountType')]",
							},
						},
					},
					"variables": map[string]interface{}{
						"storageAccountName": "[concat(uniquestring(resourceGroup().id), 'standardsa')]",
					},
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/managementGroupBPDef/ARMTemplateArtifact_Create.json: %v", err)
	}

	// From example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/managementGroupBPDef/PolicyAssignmentArtifact_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"MG-PolicyAssignmentArtifact"},
	})
	client = armblueprint.NewArtifactsClient(cred, &options)
	_, err = client.CreateOrUpdate(ctx,
		"providers/Microsoft.Management/managementGroups/ContosoOnlineGroup",
		"simpleBlueprint",
		"costCenterPolicy",
		&armblueprint.PolicyAssignmentArtifact{
			Kind: to.Ptr(armblueprint.ArtifactKindPolicyAssignment),
			Properties: &armblueprint.PolicyAssignmentArtifactProperties{
				DisplayName: to.Ptr("force costCenter tag on all resources"),
				Parameters: map[string]*armblueprint.ParameterValue{
					"tagName": {
						Value: "costCenter",
					},
					"tagValue": {
						Value: "[parameter('costCenter')]",
					},
				},
				PolicyDefinitionID: to.Ptr("/providers/Microsoft.Authorization/policyDefinitions/1e30110a-5ceb-460c-a204-c1c3969c6d62"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/managementGroupBPDef/PolicyAssignmentArtifact_Create.json: %v", err)
	}

	// From example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/managementGroupBPDef/RoleAssignmentArtifact_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"MG-RoleAssignmentArtifact"},
	})
	client = armblueprint.NewArtifactsClient(cred, &options)
	_, err = client.CreateOrUpdate(ctx,
		"providers/Microsoft.Management/managementGroups/ContosoOnlineGroup",
		"simpleBlueprint",
		"ownerAssignment",
		&armblueprint.RoleAssignmentArtifact{
			Kind: to.Ptr(armblueprint.ArtifactKindRoleAssignment),
			Properties: &armblueprint.RoleAssignmentArtifactProperties{
				DisplayName:      to.Ptr("enforce owners of given subscription"),
				PrincipalIDs:     "[parameters('owners')]",
				RoleDefinitionID: to.Ptr("/providers/Microsoft.Authorization/roleDefinitions/acdd72a7-3385-48ef-bd42-f606fba81ae7"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/managementGroupBPDef/RoleAssignmentArtifact_Create.json: %v", err)
	}

	// From example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/subscriptionBPDef/ARMTemplateArtifact_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Sub-ARMTemplateArtifact"},
	})
	client = armblueprint.NewArtifactsClient(cred, &options)
	_, err = client.CreateOrUpdate(ctx,
		"subscriptions/00000000-0000-0000-0000-000000000000",
		"simpleBlueprint",
		"storageTemplate",
		&armblueprint.TemplateArtifact{
			Kind: to.Ptr(armblueprint.ArtifactKindTemplate),
			Properties: &armblueprint.TemplateArtifactProperties{
				Parameters: map[string]*armblueprint.ParameterValue{
					"storageAccountType": {
						Value: "[parameters('storageAccountType')]",
					},
				},
				ResourceGroup: to.Ptr("storageRG"),
				Template: map[string]interface{}{
					"contentVersion": "1.0.0.0",
					"outputs": map[string]interface{}{
						"storageAccountName": map[string]interface{}{
							"type":  "string",
							"value": "[variables('storageAccountName')]",
						},
					},
					"parameters": map[string]interface{}{
						"storageAccountType": map[string]interface{}{
							"type": "string",
							"allowedValues": []interface{}{
								"Standard_LRS",
								"Standard_GRS",
								"Standard_ZRS",
								"Premium_LRS",
							},
							"defaultValue": "Standard_LRS",
							"metadata": map[string]interface{}{
								"description": "Storage Account type",
							},
						},
					},
					"resources": []interface{}{
						map[string]interface{}{
							"name":       "[variables('storageAccountName')]",
							"type":       "Microsoft.Storage/storageAccounts",
							"apiVersion": "2016-01-01",
							"kind":       "Storage",
							"location":   "[resourceGroup().location]",
							"properties": map[string]interface{}{},
							"sku": map[string]interface{}{
								"name": "[parameters('storageAccountType')]",
							},
						},
					},
					"variables": map[string]interface{}{
						"storageAccountName": "[concat(uniquestring(resourceGroup().id), 'standardsa')]",
					},
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/subscriptionBPDef/ARMTemplateArtifact_Create.json: %v", err)
	}

	// From example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/subscriptionBPDef/PolicyAssignmentArtifact_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Sub-PolicyAssignmentArtifact"},
	})
	client = armblueprint.NewArtifactsClient(cred, &options)
	_, err = client.CreateOrUpdate(ctx,
		"subscriptions/00000000-0000-0000-0000-000000000000",
		"simpleBlueprint",
		"costCenterPolicy",
		&armblueprint.PolicyAssignmentArtifact{
			Kind: to.Ptr(armblueprint.ArtifactKindPolicyAssignment),
			Properties: &armblueprint.PolicyAssignmentArtifactProperties{
				DisplayName: to.Ptr("force costCenter tag on all resources"),
				Parameters: map[string]*armblueprint.ParameterValue{
					"tagName": {
						Value: "costCenter",
					},
					"tagValue": {
						Value: "[parameter('costCenter')]",
					},
				},
				PolicyDefinitionID: to.Ptr("/providers/Microsoft.Authorization/policyDefinitions/1e30110a-5ceb-460c-a204-c1c3969c6d62"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/subscriptionBPDef/PolicyAssignmentArtifact_Create.json: %v", err)
	}

	// From example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/subscriptionBPDef/RoleAssignmentArtifact_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Sub-RoleAssignmentArtifact"},
	})
	client = armblueprint.NewArtifactsClient(cred, &options)
	_, err = client.CreateOrUpdate(ctx,
		"subscriptions/00000000-0000-0000-0000-000000000000",
		"simpleBlueprint",
		"ownerAssignment",
		&armblueprint.RoleAssignmentArtifact{
			Kind: to.Ptr(armblueprint.ArtifactKindRoleAssignment),
			Properties: &armblueprint.RoleAssignmentArtifactProperties{
				DisplayName:      to.Ptr("enforce owners of given subscription"),
				PrincipalIDs:     "[parameters('owners')]",
				RoleDefinitionID: to.Ptr("/providers/Microsoft.Authorization/roleDefinitions/acdd72a7-3385-48ef-bd42-f606fba81ae7"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/subscriptionBPDef/RoleAssignmentArtifact_Create.json: %v", err)
	}
}

func TestArtifacts_Get(t *testing.T) {
	// From example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/managementGroupBPDef/ARMTemplateArtifact_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"MG-ARMTemplateArtifact"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armblueprint.NewArtifactsClient(cred, &options)
	res, err := client.Get(ctx,
		"providers/Microsoft.Management/managementGroups/ContosoOnlineGroup",
		"simpleBlueprint",
		"storageTemplate",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/managementGroupBPDef/ARMTemplateArtifact_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armblueprint.ArtifactsClientGetResponse{
			&armblueprint.TemplateArtifact{
				Name: to.Ptr("storageTemplate"),
				Type: to.Ptr("Microsoft.Blueprint/blueprints/artifacts"),
				ID:   to.Ptr("/providers/Microsoft.Management/managementGroups/ContosoOnlineGroup/providers/Microsoft.Blueprint/blueprints/simpleBlueprint/artifacts/storageTemplate"),
				Kind: to.Ptr(armblueprint.ArtifactKindTemplate),
				Properties: &armblueprint.TemplateArtifactProperties{
					Parameters: map[string]*armblueprint.ParameterValue{
						"storageAccountType": {
							Value: "[parameters('storageAccountType')]",
						},
					},
					ResourceGroup: to.Ptr("storageRG"),
					Template: map[string]interface{}{
						"contentVersion": "1.0.0.0",
						"outputs": map[string]interface{}{
							"storageAccountName": map[string]interface{}{
								"type":  "string",
								"value": "[variables('storageAccountName')]",
							},
						},
						"parameters": map[string]interface{}{
							"storageAccountType": map[string]interface{}{
								"type": "string",
								"allowedValues": []interface{}{
									"Standard_LRS",
									"Standard_GRS",
									"Standard_ZRS",
									"Premium_LRS",
								},
								"defaultValue": "Standard_LRS",
								"metadata": map[string]interface{}{
									"description": "Storage Account type",
								},
							},
						},
						"resources": []interface{}{
							map[string]interface{}{
								"name":       "[variables('storageAccountName')]",
								"type":       "Microsoft.Storage/storageAccounts",
								"apiVersion": "2016-01-01",
								"kind":       "Storage",
								"location":   "[resourceGroup().location]",
								"properties": map[string]interface{}{},
								"sku": map[string]interface{}{
									"name": "[parameters('storageAccountType')]",
								},
							},
						},
						"variables": map[string]interface{}{
							"storageAccountName": "[concat(uniquestring(resourceGroup().id), 'standardsa')]",
						},
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/managementGroupBPDef/ARMTemplateArtifact_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/managementGroupBPDef/PolicyAssignmentArtifact_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"MG-PolicyAssignmentArtifact"},
	})
	client = armblueprint.NewArtifactsClient(cred, &options)
	res, err = client.Get(ctx,
		"providers/Microsoft.Management/managementGroups/ContosoOnlineGroup",
		"simpleBlueprint",
		"costCenterPolicy",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/managementGroupBPDef/PolicyAssignmentArtifact_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armblueprint.ArtifactsClientGetResponse{
			&armblueprint.PolicyAssignmentArtifact{
				Name: to.Ptr("costCenterPolicy"),
				Type: to.Ptr("Microsoft.Blueprint/blueprints/artifacts"),
				ID:   to.Ptr("/providers/Microsoft.Management/managementGroups/ContosoOnlineGroup/providers/Microsoft.Blueprint/blueprints/simpleBlueprint/artifacts/costCenterPolicy"),
				Kind: to.Ptr(armblueprint.ArtifactKindPolicyAssignment),
				Properties: &armblueprint.PolicyAssignmentArtifactProperties{
					DisplayName: to.Ptr("force costCenter tag on all resources"),
					Parameters: map[string]*armblueprint.ParameterValue{
						"tagName": {
							Value: "costCenter",
						},
						"tagValue": {
							Value: "[parameter('costCenter')]",
						},
					},
					PolicyDefinitionID: to.Ptr("/providers/Microsoft.Authorization/policyDefinitions/1e30110a-5ceb-460c-a204-c1c3969c6d62"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/managementGroupBPDef/PolicyAssignmentArtifact_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/managementGroupBPDef/RoleAssignmentArtifact_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"MG-RoleAssignmentArtifact"},
	})
	client = armblueprint.NewArtifactsClient(cred, &options)
	res, err = client.Get(ctx,
		"providers/Microsoft.Management/managementGroups/ContosoOnlineGroup",
		"simpleBlueprint",
		"ownerAssignment",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/managementGroupBPDef/RoleAssignmentArtifact_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armblueprint.ArtifactsClientGetResponse{
			&armblueprint.RoleAssignmentArtifact{
				Name: to.Ptr("ownerAssignment"),
				Type: to.Ptr("Microsoft.Blueprint/blueprints/artifacts"),
				ID:   to.Ptr("/providers/Microsoft.Management/managementGroups/ContosoOnlineGroup/providers/Microsoft.Blueprint/blueprints/simpleBlueprint/artifacts/ownerAssignment"),
				Kind: to.Ptr(armblueprint.ArtifactKindRoleAssignment),
				Properties: &armblueprint.RoleAssignmentArtifactProperties{
					DisplayName:      to.Ptr("enforce owners of given subscription"),
					PrincipalIDs:     "[parameters('owners')]",
					RoleDefinitionID: to.Ptr("/providers/Microsoft.Authorization/roleDefinitions/acdd72a7-3385-48ef-bd42-f606fba81ae7"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/managementGroupBPDef/RoleAssignmentArtifact_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/subscriptionBPDef/ARMTemplateArtifact_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Sub-ARMTemplateArtifact"},
	})
	client = armblueprint.NewArtifactsClient(cred, &options)
	res, err = client.Get(ctx,
		"subscriptions/00000000-0000-0000-0000-000000000000",
		"simpleBlueprint",
		"storageTemplate",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/subscriptionBPDef/ARMTemplateArtifact_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armblueprint.ArtifactsClientGetResponse{
			&armblueprint.TemplateArtifact{
				Name: to.Ptr("storageTemplate"),
				Type: to.Ptr("Microsoft.Blueprint/blueprints/artifacts"),
				ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Blueprint/blueprints/simpleBlueprint/artifacts/storageTemplate"),
				Kind: to.Ptr(armblueprint.ArtifactKindTemplate),
				Properties: &armblueprint.TemplateArtifactProperties{
					Parameters: map[string]*armblueprint.ParameterValue{
						"storageAccountType": {
							Value: "[parameters('storageAccountType')]",
						},
					},
					ResourceGroup: to.Ptr("storageRG"),
					Template: map[string]interface{}{
						"contentVersion": "1.0.0.0",
						"outputs": map[string]interface{}{
							"storageAccountName": map[string]interface{}{
								"type":  "string",
								"value": "[variables('storageAccountName')]",
							},
						},
						"parameters": map[string]interface{}{
							"storageAccountType": map[string]interface{}{
								"type": "string",
								"allowedValues": []interface{}{
									"Standard_LRS",
									"Standard_GRS",
									"Standard_ZRS",
									"Premium_LRS",
								},
								"defaultValue": "Standard_LRS",
								"metadata": map[string]interface{}{
									"description": "Storage Account type",
								},
							},
						},
						"resources": []interface{}{
							map[string]interface{}{
								"name":       "[variables('storageAccountName')]",
								"type":       "Microsoft.Storage/storageAccounts",
								"apiVersion": "2016-01-01",
								"kind":       "Storage",
								"location":   "[resourceGroup().location]",
								"properties": map[string]interface{}{},
								"sku": map[string]interface{}{
									"name": "[parameters('storageAccountType')]",
								},
							},
						},
						"variables": map[string]interface{}{
							"storageAccountName": "[concat(uniquestring(resourceGroup().id), 'standardsa')]",
						},
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/subscriptionBPDef/ARMTemplateArtifact_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/subscriptionBPDef/PolicyAssignmentArtifact_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Sub-PolicyAssignmentArtifact"},
	})
	client = armblueprint.NewArtifactsClient(cred, &options)
	res, err = client.Get(ctx,
		"subscriptions/00000000-0000-0000-0000-000000000000",
		"simpleBlueprint",
		"costCenterPolicy",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/subscriptionBPDef/PolicyAssignmentArtifact_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armblueprint.ArtifactsClientGetResponse{
			&armblueprint.PolicyAssignmentArtifact{
				Name: to.Ptr("costCenterPolicy"),
				Type: to.Ptr("Microsoft.Blueprint/blueprints/artifacts"),
				ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Blueprint/blueprints/simpleBlueprint/artifacts/costCenterPolicy"),
				Kind: to.Ptr(armblueprint.ArtifactKindPolicyAssignment),
				Properties: &armblueprint.PolicyAssignmentArtifactProperties{
					DisplayName: to.Ptr("force costCenter tag on all resources"),
					Parameters: map[string]*armblueprint.ParameterValue{
						"tagName": {
							Value: "costCenter",
						},
						"tagValue": {
							Value: "[parameter('costCenter')]",
						},
					},
					PolicyDefinitionID: to.Ptr("/providers/Microsoft.Authorization/policyDefinitions/1e30110a-5ceb-460c-a204-c1c3969c6d62"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/subscriptionBPDef/PolicyAssignmentArtifact_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/subscriptionBPDef/RoleAssignmentArtifact_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Sub-RoleAssignmentArtifact"},
	})
	client = armblueprint.NewArtifactsClient(cred, &options)
	res, err = client.Get(ctx,
		"subscriptions/00000000-0000-0000-0000-000000000000",
		"simpleBlueprint",
		"ownerAssignment",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/subscriptionBPDef/RoleAssignmentArtifact_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armblueprint.ArtifactsClientGetResponse{
			&armblueprint.RoleAssignmentArtifact{
				Name: to.Ptr("ownerAssignment"),
				Type: to.Ptr("Microsoft.Blueprint/blueprints/artifacts"),
				ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Blueprint/blueprints/simpleBlueprint/artifacts/ownerAssignment"),
				Kind: to.Ptr(armblueprint.ArtifactKindRoleAssignment),
				Properties: &armblueprint.RoleAssignmentArtifactProperties{
					DisplayName:      to.Ptr("enforce owners of given subscription"),
					PrincipalIDs:     "[parameters('owners')]",
					RoleDefinitionID: to.Ptr("/providers/Microsoft.Authorization/roleDefinitions/acdd72a7-3385-48ef-bd42-f606fba81ae7"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/subscriptionBPDef/RoleAssignmentArtifact_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestArtifacts_Delete(t *testing.T) {
	// From example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/managementGroupBPDef/ARMTemplateArtifact_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"MG-ARMTemplateArtifact"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armblueprint.NewArtifactsClient(cred, &options)
	res, err := client.Delete(ctx,
		"providers/Microsoft.Management/managementGroups/ContosoOnlineGroup",
		"simpleBlueprint",
		"storageTemplate",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/managementGroupBPDef/ARMTemplateArtifact_Delete.json: %v", err)
	}
	// Response check
	{
		exampleRes := armblueprint.ArtifactsClientDeleteResponse{
			&armblueprint.TemplateArtifact{
				Name: to.Ptr("storageTemplate"),
				Type: to.Ptr("Microsoft.Blueprint/blueprints/artifacts"),
				ID:   to.Ptr("/providers/Microsoft.Management/managementGroups/ContosoOnlineGroup/providers/Microsoft.Blueprint/blueprints/simpleBlueprint/artifacts/storageTemplate"),
				Kind: to.Ptr(armblueprint.ArtifactKindTemplate),
				Properties: &armblueprint.TemplateArtifactProperties{
					Parameters: map[string]*armblueprint.ParameterValue{
						"storageAccountType": {
							Value: "[parameters('storageAccountType')]",
						},
					},
					ResourceGroup: to.Ptr("storageRG"),
					Template: map[string]interface{}{
						"contentVersion": "1.0.0.0",
						"outputs": map[string]interface{}{
							"storageAccountName": map[string]interface{}{
								"type":  "string",
								"value": "[variables('storageAccountName')]",
							},
						},
						"parameters": map[string]interface{}{
							"storageAccountType": map[string]interface{}{
								"type": "string",
								"allowedValues": []interface{}{
									"Standard_LRS",
									"Standard_GRS",
									"Standard_ZRS",
									"Premium_LRS",
								},
								"defaultValue": "Standard_LRS",
								"metadata": map[string]interface{}{
									"description": "Storage Account type",
								},
							},
						},
						"resources": []interface{}{
							map[string]interface{}{
								"name":       "[variables('storageAccountName')]",
								"type":       "Microsoft.Storage/storageAccounts",
								"apiVersion": "2016-01-01",
								"kind":       "Storage",
								"location":   "[resourceGroup().location]",
								"properties": map[string]interface{}{},
								"sku": map[string]interface{}{
									"name": "[parameters('storageAccountType')]",
								},
							},
						},
						"variables": map[string]interface{}{
							"storageAccountName": "[concat(uniquestring(resourceGroup().id), 'standardsa')]",
						},
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/managementGroupBPDef/ARMTemplateArtifact_Delete.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/managementGroupBPDef/PolicyAssignmentArtifact_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"MG-PolicyAssignmentArtifact"},
	})
	client = armblueprint.NewArtifactsClient(cred, &options)
	res, err = client.Delete(ctx,
		"providers/Microsoft.Management/managementGroups/ContosoOnlineGroup",
		"simpleBlueprint",
		"costCenterPolicy",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/managementGroupBPDef/PolicyAssignmentArtifact_Delete.json: %v", err)
	}
	// Response check
	{
		exampleRes := armblueprint.ArtifactsClientDeleteResponse{
			&armblueprint.PolicyAssignmentArtifact{
				Name: to.Ptr("costCenterPolicy"),
				Type: to.Ptr("Microsoft.Blueprint/blueprints/artifacts"),
				ID:   to.Ptr("/providers/Microsoft.Management/managementGroups/ContosoOnlineGroup/providers/Microsoft.Blueprint/blueprints/simpleBlueprint/artifacts/costCenterPolicy"),
				Kind: to.Ptr(armblueprint.ArtifactKindPolicyAssignment),
				Properties: &armblueprint.PolicyAssignmentArtifactProperties{
					DisplayName: to.Ptr("force costCenter tag on all resources"),
					Parameters: map[string]*armblueprint.ParameterValue{
						"tagName": {
							Value: "costCenter",
						},
						"tagValue": {
							Value: "[parameter('costCenter')]",
						},
					},
					PolicyDefinitionID: to.Ptr("/providers/Microsoft.Authorization/policyDefinitions/1e30110a-5ceb-460c-a204-c1c3969c6d62"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/managementGroupBPDef/PolicyAssignmentArtifact_Delete.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/managementGroupBPDef/RoleAssignmentArtifact_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"MG-RoleAssignmentArtifact"},
	})
	client = armblueprint.NewArtifactsClient(cred, &options)
	res, err = client.Delete(ctx,
		"providers/Microsoft.Management/managementGroups/ContosoOnlineGroup",
		"simpleBlueprint",
		"ownerAssignment",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/managementGroupBPDef/RoleAssignmentArtifact_Delete.json: %v", err)
	}
	// Response check
	{
		exampleRes := armblueprint.ArtifactsClientDeleteResponse{
			&armblueprint.RoleAssignmentArtifact{
				Name: to.Ptr("ownerAssignment"),
				Type: to.Ptr("Microsoft.Blueprint/blueprints/artifacts"),
				ID:   to.Ptr("/providers/Microsoft.Management/managementGroups/ContosoOnlineGroup/providers/Microsoft.Blueprint/blueprints/simpleBlueprint/artifacts/ownerAssignment"),
				Kind: to.Ptr(armblueprint.ArtifactKindRoleAssignment),
				Properties: &armblueprint.RoleAssignmentArtifactProperties{
					DisplayName:      to.Ptr("enforce owners of given subscription"),
					PrincipalIDs:     "[parameters('owners')]",
					RoleDefinitionID: to.Ptr("/providers/Microsoft.Authorization/roleDefinitions/acdd72a7-3385-48ef-bd42-f606fba81ae7"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/managementGroupBPDef/RoleAssignmentArtifact_Delete.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/subscriptionBPDef/ARMTemplateArtifact_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Sub-ARMTemplateArtifact"},
	})
	client = armblueprint.NewArtifactsClient(cred, &options)
	res, err = client.Delete(ctx,
		"subscriptions/00000000-0000-0000-0000-000000000000",
		"simpleBlueprint",
		"storageTemplate",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/subscriptionBPDef/ARMTemplateArtifact_Delete.json: %v", err)
	}
	// Response check
	{
		exampleRes := armblueprint.ArtifactsClientDeleteResponse{
			&armblueprint.TemplateArtifact{
				Name: to.Ptr("storageTemplate"),
				Type: to.Ptr("Microsoft.Blueprint/blueprints/artifacts"),
				ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Blueprint/blueprints/simpleBlueprint/artifacts/storageTemplate"),
				Kind: to.Ptr(armblueprint.ArtifactKindTemplate),
				Properties: &armblueprint.TemplateArtifactProperties{
					Parameters: map[string]*armblueprint.ParameterValue{
						"storageAccountType": {
							Value: "[parameters('storageAccountType')]",
						},
					},
					ResourceGroup: to.Ptr("storageRG"),
					Template: map[string]interface{}{
						"contentVersion": "1.0.0.0",
						"outputs": map[string]interface{}{
							"storageAccountName": map[string]interface{}{
								"type":  "string",
								"value": "[variables('storageAccountName')]",
							},
						},
						"parameters": map[string]interface{}{
							"storageAccountType": map[string]interface{}{
								"type": "string",
								"allowedValues": []interface{}{
									"Standard_LRS",
									"Standard_GRS",
									"Standard_ZRS",
									"Premium_LRS",
								},
								"defaultValue": "Standard_LRS",
								"metadata": map[string]interface{}{
									"description": "Storage Account type",
								},
							},
						},
						"resources": []interface{}{
							map[string]interface{}{
								"name":       "[variables('storageAccountName')]",
								"type":       "Microsoft.Storage/storageAccounts",
								"apiVersion": "2016-01-01",
								"kind":       "Storage",
								"location":   "[resourceGroup().location]",
								"properties": map[string]interface{}{},
								"sku": map[string]interface{}{
									"name": "[parameters('storageAccountType')]",
								},
							},
						},
						"variables": map[string]interface{}{
							"storageAccountName": "[concat(uniquestring(resourceGroup().id), 'standardsa')]",
						},
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/subscriptionBPDef/ARMTemplateArtifact_Delete.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/subscriptionBPDef/PolicyAssignmentArtifact_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Sub-PolicyAssignmentArtifact"},
	})
	client = armblueprint.NewArtifactsClient(cred, &options)
	res, err = client.Delete(ctx,
		"subscriptions/00000000-0000-0000-0000-000000000000",
		"simpleBlueprint",
		"costCenterPolicy",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/subscriptionBPDef/PolicyAssignmentArtifact_Delete.json: %v", err)
	}
	// Response check
	{
		exampleRes := armblueprint.ArtifactsClientDeleteResponse{
			&armblueprint.PolicyAssignmentArtifact{
				Name: to.Ptr("costCenterPolicy"),
				Type: to.Ptr("Microsoft.Blueprint/blueprints/artifacts"),
				ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Blueprint/blueprints/simpleBlueprint/artifacts/costCenterPolicy"),
				Kind: to.Ptr(armblueprint.ArtifactKindPolicyAssignment),
				Properties: &armblueprint.PolicyAssignmentArtifactProperties{
					DisplayName: to.Ptr("force costCenter tag on all resources"),
					Parameters: map[string]*armblueprint.ParameterValue{
						"tagName": {
							Value: "costCenter",
						},
						"tagValue": {
							Value: "[parameter('costCenter')]",
						},
					},
					PolicyDefinitionID: to.Ptr("/providers/Microsoft.Authorization/policyDefinitions/1e30110a-5ceb-460c-a204-c1c3969c6d62"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/subscriptionBPDef/PolicyAssignmentArtifact_Delete.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/subscriptionBPDef/RoleAssignmentArtifact_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Sub-RoleAssignmentArtifact"},
	})
	client = armblueprint.NewArtifactsClient(cred, &options)
	res, err = client.Delete(ctx,
		"subscriptions/00000000-0000-0000-0000-000000000000",
		"simpleBlueprint",
		"ownerAssignment",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/subscriptionBPDef/RoleAssignmentArtifact_Delete.json: %v", err)
	}
	// Response check
	{
		exampleRes := armblueprint.ArtifactsClientDeleteResponse{
			&armblueprint.RoleAssignmentArtifact{
				Name: to.Ptr("ownerAssignment"),
				Type: to.Ptr("Microsoft.Blueprint/blueprints/artifacts"),
				ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Blueprint/blueprints/simpleBlueprint/artifacts/ownerAssignment"),
				Kind: to.Ptr(armblueprint.ArtifactKindRoleAssignment),
				Properties: &armblueprint.RoleAssignmentArtifactProperties{
					DisplayName:      to.Ptr("enforce owners of given subscription"),
					PrincipalIDs:     "[parameters('owners')]",
					RoleDefinitionID: to.Ptr("/providers/Microsoft.Authorization/roleDefinitions/acdd72a7-3385-48ef-bd42-f606fba81ae7"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/subscriptionBPDef/RoleAssignmentArtifact_Delete.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestArtifacts_List(t *testing.T) {
	// From example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/managementGroupBPDef/Artifact_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"MG-ArtifactList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armblueprint.NewArtifactsClient(cred, &options)
	pager := client.List("providers/Microsoft.Management/managementGroups/ContosoOnlineGroup",
		"simpleBlueprint",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/managementGroupBPDef/Artifact_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armblueprint.ArtifactList{
			Value: []armblueprint.ArtifactClassification{
				&armblueprint.RoleAssignmentArtifact{
					Name: to.Ptr("ownerAssignment"),
					Type: to.Ptr("Microsoft.Blueprint/blueprints/artifacts"),
					ID:   to.Ptr("/providers/Microsoft.Management/managementGroups/ContosoOnlineGroup/providers/Microsoft.Blueprint/blueprints/simpleBlueprint/artifacts/ownerAssignment"),
					Kind: to.Ptr(armblueprint.ArtifactKindRoleAssignment),
					Properties: &armblueprint.RoleAssignmentArtifactProperties{
						DisplayName:      to.Ptr("enforce owners of given subscription"),
						PrincipalIDs:     "[parameters('owners')]",
						RoleDefinitionID: to.Ptr("/providers/Microsoft.Authorization/roleDefinitions/acdd72a7-3385-48ef-bd42-f606fba81ae7"),
					},
				},
				&armblueprint.PolicyAssignmentArtifact{
					Name: to.Ptr("costCenterPolicy"),
					Type: to.Ptr("Microsoft.Blueprint/blueprints/artifacts"),
					ID:   to.Ptr("/providers/Microsoft.Management/managementGroups/ContosoOnlineGroup/providers/Microsoft.Blueprint/blueprints/simpleBlueprint/artifacts/costCenterPolicy"),
					Kind: to.Ptr(armblueprint.ArtifactKindPolicyAssignment),
					Properties: &armblueprint.PolicyAssignmentArtifactProperties{
						DisplayName: to.Ptr("force costCenter tag on all resources"),
						Parameters: map[string]*armblueprint.ParameterValue{
							"tagName": {
								Value: "costCenter",
							},
							"tagValue": {
								Value: "[parameter('costCenter')]",
							},
						},
						PolicyDefinitionID: to.Ptr("/providers/Microsoft.Authorization/policyDefinitions/1e30110a-5ceb-460c-a204-c1c3969c6d62"),
					},
				},
				&armblueprint.TemplateArtifact{
					Name: to.Ptr("storageTemplate"),
					Type: to.Ptr("Microsoft.Blueprint/blueprints/artifacts"),
					ID:   to.Ptr("/providers/Microsoft.Management/managementGroups/ContosoOnlineGroup/providers/Microsoft.Blueprint/blueprints/simpleBlueprint/artifacts/storageTemplate"),
					Kind: to.Ptr(armblueprint.ArtifactKindTemplate),
					Properties: &armblueprint.TemplateArtifactProperties{
						Parameters: map[string]*armblueprint.ParameterValue{
							"storageAccountType": {
								Value: "[parameters('storageAccountType')]",
							},
						},
						ResourceGroup: to.Ptr("storageRG"),
						Template: map[string]interface{}{
							"contentVersion": "1.0.0.0",
							"outputs": map[string]interface{}{
								"storageAccountName": map[string]interface{}{
									"type":  "string",
									"value": "[variables('storageAccountName')]",
								},
							},
							"parameters": map[string]interface{}{
								"storageAccountType": map[string]interface{}{
									"type": "string",
									"allowedValues": []interface{}{
										"Standard_LRS",
										"Standard_GRS",
										"Standard_ZRS",
										"Premium_LRS",
									},
									"defaultValue": "Standard_LRS",
									"metadata": map[string]interface{}{
										"description": "Storage Account type",
									},
								},
							},
							"resources": []interface{}{
								map[string]interface{}{
									"name":       "[variables('storageAccountName')]",
									"type":       "Microsoft.Storage/storageAccounts",
									"apiVersion": "2016-01-01",
									"kind":       "Storage",
									"location":   "[resourceGroup().location]",
									"properties": map[string]interface{}{},
									"sku": map[string]interface{}{
										"name": "[parameters('storageAccountType')]",
									},
								},
							},
							"variables": map[string]interface{}{
								"storageAccountName": "[concat(uniquestring(resourceGroup().id), 'standardsa')]",
							},
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ArtifactList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ArtifactList)
			t.Fatalf("Mock response is not equal to example response for example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/managementGroupBPDef/Artifact_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/subscriptionBPDef/Artifact_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Sub-ArtifactList"},
	})
	client = armblueprint.NewArtifactsClient(cred, &options)
	pager = client.List("subscriptions/00000000-0000-0000-0000-000000000000",
		"simpleBlueprint",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/subscriptionBPDef/Artifact_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armblueprint.ArtifactList{
			Value: []armblueprint.ArtifactClassification{
				&armblueprint.RoleAssignmentArtifact{
					Name: to.Ptr("ownerAssignment"),
					Type: to.Ptr("Microsoft.Blueprint/blueprints/artifacts"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Blueprint/blueprints/simpleBlueprint/artifacts/ownerAssignment"),
					Kind: to.Ptr(armblueprint.ArtifactKindRoleAssignment),
					Properties: &armblueprint.RoleAssignmentArtifactProperties{
						DisplayName:      to.Ptr("enforce owners of given subscription"),
						PrincipalIDs:     "[parameters('owners')]",
						RoleDefinitionID: to.Ptr("/providers/Microsoft.Authorization/roleDefinitions/acdd72a7-3385-48ef-bd42-f606fba81ae7"),
					},
				},
				&armblueprint.PolicyAssignmentArtifact{
					Name: to.Ptr("costCenterPolicy"),
					Type: to.Ptr("Microsoft.Blueprint/blueprints/artifacts"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Blueprint/blueprints/simpleBlueprint/artifacts/costCenterPolicy"),
					Kind: to.Ptr(armblueprint.ArtifactKindPolicyAssignment),
					Properties: &armblueprint.PolicyAssignmentArtifactProperties{
						DisplayName: to.Ptr("force costCenter tag on all resources"),
						Parameters: map[string]*armblueprint.ParameterValue{
							"tagName": {
								Value: "costCenter",
							},
							"tagValue": {
								Value: "[parameter('costCenter')]",
							},
						},
						PolicyDefinitionID: to.Ptr("/providers/Microsoft.Authorization/policyDefinitions/1e30110a-5ceb-460c-a204-c1c3969c6d62"),
					},
				},
				&armblueprint.TemplateArtifact{
					Name: to.Ptr("storageTemplate"),
					Type: to.Ptr("Microsoft.Blueprint/blueprints/artifacts"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Blueprint/blueprints/simpleBlueprint/artifacts/storageTemplate"),
					Kind: to.Ptr(armblueprint.ArtifactKindTemplate),
					Properties: &armblueprint.TemplateArtifactProperties{
						Parameters: map[string]*armblueprint.ParameterValue{
							"storageAccountType": {
								Value: "[parameters('storageAccountType')]",
							},
						},
						ResourceGroup: to.Ptr("storageRG"),
						Template: map[string]interface{}{
							"contentVersion": "1.0.0.0",
							"outputs": map[string]interface{}{
								"storageAccountName": map[string]interface{}{
									"type":  "string",
									"value": "[variables('storageAccountName')]",
								},
							},
							"parameters": map[string]interface{}{
								"storageAccountType": map[string]interface{}{
									"type": "string",
									"allowedValues": []interface{}{
										"Standard_LRS",
										"Standard_GRS",
										"Standard_ZRS",
										"Premium_LRS",
									},
									"defaultValue": "Standard_LRS",
									"metadata": map[string]interface{}{
										"description": "Storage Account type",
									},
								},
							},
							"resources": []interface{}{
								map[string]interface{}{
									"name":       "[variables('storageAccountName')]",
									"type":       "Microsoft.Storage/storageAccounts",
									"apiVersion": "2016-01-01",
									"kind":       "Storage",
									"location":   "[resourceGroup().location]",
									"properties": map[string]interface{}{},
									"sku": map[string]interface{}{
										"name": "[parameters('storageAccountType')]",
									},
								},
							},
							"variables": map[string]interface{}{
								"storageAccountName": "[concat(uniquestring(resourceGroup().id), 'standardsa')]",
							},
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ArtifactList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ArtifactList)
			t.Fatalf("Mock response is not equal to example response for example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/subscriptionBPDef/Artifact_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPublishedBlueprints_Create(t *testing.T) {
	// From example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/managementGroupBPDef/SealedBlueprint_Publish.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PublishedManagementGroupBlueprint_Publish"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armblueprint.NewPublishedBlueprintsClient(cred, &options)
	_, err := client.Create(ctx,
		"providers/Microsoft.Management/managementGroups/ContosoOnlineGroup",
		"simpleBlueprint",
		"v2",
		&armblueprint.PublishedBlueprintsClientCreateOptions{PublishedBlueprint: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/managementGroupBPDef/SealedBlueprint_Publish.json: %v", err)
	}

	// From example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/subscriptionBPDef/SealedBlueprint_Publish.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PublishedSubscriptionBlueprint_Publish"},
	})
	client = armblueprint.NewPublishedBlueprintsClient(cred, &options)
	_, err = client.Create(ctx,
		"subscriptions/00000000-0000-0000-0000-000000000000",
		"simpleBlueprint",
		"v2",
		&armblueprint.PublishedBlueprintsClientCreateOptions{PublishedBlueprint: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/subscriptionBPDef/SealedBlueprint_Publish.json: %v", err)
	}
}

func TestPublishedBlueprints_Get(t *testing.T) {
	// From example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/managementGroupBPDef/SealedBlueprint_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PublishedManagementGroupBlueprint"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armblueprint.NewPublishedBlueprintsClient(cred, &options)
	res, err := client.Get(ctx,
		"providers/Microsoft.Management/managementGroups/ContosoOnlineGroup",
		"simpleBlueprint",
		"v2",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/managementGroupBPDef/SealedBlueprint_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armblueprint.PublishedBlueprint{
			Name: to.Ptr("v2"),
			Type: to.Ptr("Microsoft.Blueprint/blueprints/versions"),
			ID:   to.Ptr("/providers/Microsoft.Management/managementGroups/ContosoOnlineGroup/providers/Microsoft.Blueprint/blueprints/simpleBlueprint"),
			Properties: &armblueprint.PublishedBlueprintProperties{
				Description: to.Ptr("blueprint contains all artifact kinds {'template', 'rbac', 'policy'}"),
				Parameters: map[string]*armblueprint.ParameterDefinition{
					"costCenter": {
						Type: to.Ptr(armblueprint.TemplateParameterTypeString),
						Metadata: &armblueprint.ParameterDefinitionMetadata{
							DisplayName: to.Ptr("force cost center tag for all resources under given subscription."),
						},
					},
					"owners": {
						Type: to.Ptr(armblueprint.TemplateParameterTypeArray),
						Metadata: &armblueprint.ParameterDefinitionMetadata{
							DisplayName: to.Ptr("assign owners to subscription along with blueprint assignment."),
						},
					},
					"storageAccountType": {
						Type: to.Ptr(armblueprint.TemplateParameterTypeString),
						Metadata: &armblueprint.ParameterDefinitionMetadata{
							DisplayName: to.Ptr("storage account type."),
						},
					},
				},
				ResourceGroups: map[string]*armblueprint.ResourceGroupDefinition{
					"storageRG": {
						Metadata: &armblueprint.ParameterDefinitionMetadata{
							Description: to.Ptr("Contains storageAccounts that collect all shoebox logs."),
							DisplayName: to.Ptr("storage resource group"),
						},
					},
				},
				TargetScope:   to.Ptr(armblueprint.BlueprintTargetScopeSubscription),
				BlueprintName: to.Ptr("simpleBlueprint"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PublishedBlueprint) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PublishedBlueprint)
			t.Fatalf("Mock response is not equal to example response for example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/managementGroupBPDef/SealedBlueprint_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/subscriptionBPDef/SealedBlueprint_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PublishedSubscriptionBlueprint"},
	})
	client = armblueprint.NewPublishedBlueprintsClient(cred, &options)
	res, err = client.Get(ctx,
		"subscriptions/00000000-0000-0000-0000-000000000000",
		"simpleBlueprint",
		"v2",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/subscriptionBPDef/SealedBlueprint_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armblueprint.PublishedBlueprint{
			Name: to.Ptr("v2"),
			Type: to.Ptr("Microsoft.Blueprint/blueprints/versions"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Blueprint/blueprints/simpleBlueprint"),
			Properties: &armblueprint.PublishedBlueprintProperties{
				Description: to.Ptr("blueprint contains all artifact kinds {'template', 'rbac', 'policy'}"),
				Parameters: map[string]*armblueprint.ParameterDefinition{
					"costCenter": {
						Type: to.Ptr(armblueprint.TemplateParameterTypeString),
						Metadata: &armblueprint.ParameterDefinitionMetadata{
							DisplayName: to.Ptr("force cost center tag for all resources under given subscription."),
						},
					},
					"owners": {
						Type: to.Ptr(armblueprint.TemplateParameterTypeArray),
						Metadata: &armblueprint.ParameterDefinitionMetadata{
							DisplayName: to.Ptr("assign owners to subscription along with blueprint assignment."),
						},
					},
					"storageAccountType": {
						Type: to.Ptr(armblueprint.TemplateParameterTypeString),
						Metadata: &armblueprint.ParameterDefinitionMetadata{
							DisplayName: to.Ptr("storage account type."),
						},
					},
				},
				ResourceGroups: map[string]*armblueprint.ResourceGroupDefinition{
					"storageRG": {
						Metadata: &armblueprint.ParameterDefinitionMetadata{
							Description: to.Ptr("Contains storageAccounts that collect all shoebox logs."),
							DisplayName: to.Ptr("storage resource group"),
						},
					},
				},
				TargetScope:   to.Ptr(armblueprint.BlueprintTargetScopeSubscription),
				BlueprintName: to.Ptr("simpleBlueprint"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PublishedBlueprint) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PublishedBlueprint)
			t.Fatalf("Mock response is not equal to example response for example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/subscriptionBPDef/SealedBlueprint_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPublishedBlueprints_Delete(t *testing.T) {
	// From example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/managementGroupBPDef/SealedBlueprint_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PublishedManagementGroupBlueprint"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armblueprint.NewPublishedBlueprintsClient(cred, &options)
	res, err := client.Delete(ctx,
		"providers/Microsoft.Management/managementGroups/ContosoOnlineGroup",
		"simpleBlueprint",
		"v2",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/managementGroupBPDef/SealedBlueprint_Delete.json: %v", err)
	}
	// Response check
	{
		exampleRes := armblueprint.PublishedBlueprint{
			Name: to.Ptr("v2"),
			Type: to.Ptr("Microsoft.Blueprint/blueprints/versions"),
			ID:   to.Ptr("/providers/Microsoft.Management/managementGroups/ContosoOnlineGroup/providers/Microsoft.Blueprint/blueprints/simpleBlueprint"),
			Properties: &armblueprint.PublishedBlueprintProperties{
				Description: to.Ptr("blueprint contains all artifact kinds {'template', 'rbac', 'policy'}"),
				Parameters: map[string]*armblueprint.ParameterDefinition{
					"costCenter": {
						Type: to.Ptr(armblueprint.TemplateParameterTypeString),
						Metadata: &armblueprint.ParameterDefinitionMetadata{
							DisplayName: to.Ptr("force cost center tag for all resources under given subscription."),
						},
					},
					"owners": {
						Type: to.Ptr(armblueprint.TemplateParameterTypeArray),
						Metadata: &armblueprint.ParameterDefinitionMetadata{
							DisplayName: to.Ptr("assign owners to subscription along with blueprint assignment."),
						},
					},
					"storageAccountType": {
						Type: to.Ptr(armblueprint.TemplateParameterTypeString),
						Metadata: &armblueprint.ParameterDefinitionMetadata{
							DisplayName: to.Ptr("storage account type."),
						},
					},
				},
				ResourceGroups: map[string]*armblueprint.ResourceGroupDefinition{
					"storageRG": {
						Metadata: &armblueprint.ParameterDefinitionMetadata{
							Description: to.Ptr("Contains storageAccounts that collect all shoebox logs."),
							DisplayName: to.Ptr("storage resource group"),
						},
					},
				},
				TargetScope:   to.Ptr(armblueprint.BlueprintTargetScopeSubscription),
				BlueprintName: to.Ptr("simpleBlueprint"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PublishedBlueprint) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PublishedBlueprint)
			t.Fatalf("Mock response is not equal to example response for example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/managementGroupBPDef/SealedBlueprint_Delete.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/subscriptionBPDef/SealedBlueprint_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PublishedSubscriptionBlueprint"},
	})
	client = armblueprint.NewPublishedBlueprintsClient(cred, &options)
	res, err = client.Delete(ctx,
		"subscriptions/00000000-0000-0000-0000-000000000000",
		"simpleBlueprint",
		"v2",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/subscriptionBPDef/SealedBlueprint_Delete.json: %v", err)
	}
	// Response check
	{
		exampleRes := armblueprint.PublishedBlueprint{
			Name: to.Ptr("v2"),
			Type: to.Ptr("Microsoft.Blueprint/blueprints/versions"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Blueprint/blueprints/simpleBlueprint"),
			Properties: &armblueprint.PublishedBlueprintProperties{
				Description: to.Ptr("blueprint contains all artifact kinds {'template', 'rbac', 'policy'}"),
				Parameters: map[string]*armblueprint.ParameterDefinition{
					"costCenter": {
						Type: to.Ptr(armblueprint.TemplateParameterTypeString),
						Metadata: &armblueprint.ParameterDefinitionMetadata{
							DisplayName: to.Ptr("force cost center tag for all resources under given subscription."),
						},
					},
					"owners": {
						Type: to.Ptr(armblueprint.TemplateParameterTypeArray),
						Metadata: &armblueprint.ParameterDefinitionMetadata{
							DisplayName: to.Ptr("assign owners to subscription along with blueprint assignment."),
						},
					},
					"storageAccountType": {
						Type: to.Ptr(armblueprint.TemplateParameterTypeString),
						Metadata: &armblueprint.ParameterDefinitionMetadata{
							DisplayName: to.Ptr("storage account type."),
						},
					},
				},
				ResourceGroups: map[string]*armblueprint.ResourceGroupDefinition{
					"storageRG": {
						Metadata: &armblueprint.ParameterDefinitionMetadata{
							Description: to.Ptr("Contains storageAccounts that collect all shoebox logs."),
							DisplayName: to.Ptr("storage resource group"),
						},
					},
				},
				TargetScope:   to.Ptr(armblueprint.BlueprintTargetScopeSubscription),
				BlueprintName: to.Ptr("simpleBlueprint"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PublishedBlueprint) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PublishedBlueprint)
			t.Fatalf("Mock response is not equal to example response for example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/subscriptionBPDef/SealedBlueprint_Delete.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPublishedBlueprints_List(t *testing.T) {
	// From example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/managementGroupBPDef/SealedBlueprint_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PublishedManagementGroupBlueprint"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armblueprint.NewPublishedBlueprintsClient(cred, &options)
	pager := client.List("providers/Microsoft.Management/managementGroups/ContosoOnlineGroup",
		"simpleBlueprint",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/managementGroupBPDef/SealedBlueprint_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armblueprint.PublishedBlueprintList{
			Value: []*armblueprint.PublishedBlueprint{
				{
					Name: to.Ptr("v1"),
					Type: to.Ptr("Microsoft.Blueprint/blueprints/versions"),
					ID:   to.Ptr("/providers/Microsoft.Management/managementGroups/ContosoOnlineGroup/providers/Microsoft.Blueprint/blueprints/simpleBlueprint/versions/v1"),
					Properties: &armblueprint.PublishedBlueprintProperties{
						Description: to.Ptr("blueprint contains all artifact kinds {'template', 'rbac', 'policy'}"),
						Parameters: map[string]*armblueprint.ParameterDefinition{
							"costCenter": {
								Type: to.Ptr(armblueprint.TemplateParameterTypeString),
								Metadata: &armblueprint.ParameterDefinitionMetadata{
									DisplayName: to.Ptr("force cost center tag for all resources under given subscription."),
								},
							},
							"owners": {
								Type: to.Ptr(armblueprint.TemplateParameterTypeArray),
								Metadata: &armblueprint.ParameterDefinitionMetadata{
									DisplayName: to.Ptr("assign owners to subscription along with blueprint assignment."),
								},
							},
							"storageAccountType": {
								Type: to.Ptr(armblueprint.TemplateParameterTypeString),
								Metadata: &armblueprint.ParameterDefinitionMetadata{
									DisplayName: to.Ptr("storage account type."),
								},
							},
						},
						ResourceGroups: map[string]*armblueprint.ResourceGroupDefinition{
							"storageRG": {
								Metadata: &armblueprint.ParameterDefinitionMetadata{
									Description: to.Ptr("Contains storageAccounts that collect all shoebox logs."),
									DisplayName: to.Ptr("storage resource group"),
								},
							},
						},
						TargetScope:   to.Ptr(armblueprint.BlueprintTargetScopeSubscription),
						BlueprintName: to.Ptr("simpleBlueprint"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PublishedBlueprintList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PublishedBlueprintList)
			t.Fatalf("Mock response is not equal to example response for example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/managementGroupBPDef/SealedBlueprint_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/subscriptionBPDef/SealedBlueprint_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PublishedSubscriptionBlueprint"},
	})
	client = armblueprint.NewPublishedBlueprintsClient(cred, &options)
	pager = client.List("subscriptions/00000000-0000-0000-0000-000000000000",
		"simpleBlueprint",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/subscriptionBPDef/SealedBlueprint_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armblueprint.PublishedBlueprintList{
			Value: []*armblueprint.PublishedBlueprint{
				{
					Name: to.Ptr("v1"),
					Type: to.Ptr("Microsoft.Blueprint/blueprints/versions"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Blueprint/blueprints/simpleBlueprint/versions/v1"),
					Properties: &armblueprint.PublishedBlueprintProperties{
						Description: to.Ptr("blueprint contains all artifact kinds {'template', 'rbac', 'policy'}"),
						Parameters: map[string]*armblueprint.ParameterDefinition{
							"costCenter": {
								Type: to.Ptr(armblueprint.TemplateParameterTypeString),
								Metadata: &armblueprint.ParameterDefinitionMetadata{
									DisplayName: to.Ptr("force cost center tag for all resources under given subscription."),
								},
							},
							"owners": {
								Type: to.Ptr(armblueprint.TemplateParameterTypeArray),
								Metadata: &armblueprint.ParameterDefinitionMetadata{
									DisplayName: to.Ptr("assign owners to subscription along with blueprint assignment."),
								},
							},
							"storageAccountType": {
								Type: to.Ptr(armblueprint.TemplateParameterTypeString),
								Metadata: &armblueprint.ParameterDefinitionMetadata{
									DisplayName: to.Ptr("storage account type."),
								},
							},
						},
						ResourceGroups: map[string]*armblueprint.ResourceGroupDefinition{
							"storageRG": {
								Metadata: &armblueprint.ParameterDefinitionMetadata{
									Description: to.Ptr("Contains storageAccounts that collect all shoebox logs."),
									DisplayName: to.Ptr("storage resource group"),
								},
							},
						},
						TargetScope:   to.Ptr(armblueprint.BlueprintTargetScopeSubscription),
						BlueprintName: to.Ptr("simpleBlueprint"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PublishedBlueprintList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PublishedBlueprintList)
			t.Fatalf("Mock response is not equal to example response for example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/subscriptionBPDef/SealedBlueprint_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPublishedArtifacts_Get(t *testing.T) {
	// From example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/managementGroupBPDef/SealedARMTemplateArtifact_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"MG-ARMTemplateArtifact"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armblueprint.NewPublishedArtifactsClient(cred, &options)
	res, err := client.Get(ctx,
		"providers/Microsoft.Management/managementGroups/ContosoOnlineGroup",
		"simpleBlueprint",
		"V2",
		"storageTemplate",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/managementGroupBPDef/SealedARMTemplateArtifact_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armblueprint.PublishedArtifactsClientGetResponse{
			&armblueprint.TemplateArtifact{
				Name: to.Ptr("storageTemplate"),
				Type: to.Ptr("Microsoft.Blueprint/blueprints/versions/artifacts"),
				ID:   to.Ptr("/providers/Microsoft.Management/managementGroups/ContosoOnlineGroup/providers/Microsoft.Blueprint/blueprints/simpleBlueprint/versions/V2/artifacts/storageTemplate"),
				Kind: to.Ptr(armblueprint.ArtifactKindTemplate),
				Properties: &armblueprint.TemplateArtifactProperties{
					Parameters: map[string]*armblueprint.ParameterValue{
						"storageAccountType": {
							Value: "[parameters('storageAccountType')]",
						},
					},
					ResourceGroup: to.Ptr("storageRG"),
					Template: map[string]interface{}{
						"contentVersion": "1.0.0.0",
						"outputs": map[string]interface{}{
							"storageAccountName": map[string]interface{}{
								"type":  "string",
								"value": "[variables('storageAccountName')]",
							},
						},
						"parameters": map[string]interface{}{
							"storageAccountType": map[string]interface{}{
								"type": "string",
								"allowedValues": []interface{}{
									"Standard_LRS",
									"Standard_GRS",
									"Standard_ZRS",
									"Premium_LRS",
								},
								"defaultValue": "Standard_LRS",
								"metadata": map[string]interface{}{
									"description": "Storage Account type",
								},
							},
						},
						"resources": []interface{}{
							map[string]interface{}{
								"name":       "[variables('storageAccountName')]",
								"type":       "Microsoft.Storage/storageAccounts",
								"apiVersion": "2016-01-01",
								"kind":       "Storage",
								"location":   "[resourceGroup().location]",
								"properties": map[string]interface{}{},
								"sku": map[string]interface{}{
									"name": "[parameters('storageAccountType')]",
								},
							},
						},
						"variables": map[string]interface{}{
							"storageAccountName": "[concat(uniquestring(resourceGroup().id), 'standardsa')]",
						},
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/managementGroupBPDef/SealedARMTemplateArtifact_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/managementGroupBPDef/SealedPolicyAssignmentArtifact_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"MG-PolicyAssignmentArtifact"},
	})
	client = armblueprint.NewPublishedArtifactsClient(cred, &options)
	res, err = client.Get(ctx,
		"providers/Microsoft.Management/managementGroups/ContosoOnlineGroup",
		"simpleBlueprint",
		"V2",
		"costCenterPolicy",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/managementGroupBPDef/SealedPolicyAssignmentArtifact_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armblueprint.PublishedArtifactsClientGetResponse{
			&armblueprint.PolicyAssignmentArtifact{
				Name: to.Ptr("costCenterPolicy"),
				Type: to.Ptr("Microsoft.Blueprint/blueprints/versions/artifacts"),
				ID:   to.Ptr("/providers/Microsoft.Management/managementGroups/ContosoOnlineGroup/providers/Microsoft.Blueprint/blueprints/simpleBlueprint/versions/V2/artifacts/costCenterPolicy"),
				Kind: to.Ptr(armblueprint.ArtifactKindPolicyAssignment),
				Properties: &armblueprint.PolicyAssignmentArtifactProperties{
					DisplayName: to.Ptr("force costCenter tag on all resources"),
					Parameters: map[string]*armblueprint.ParameterValue{
						"tagName": {
							Value: "costCenter",
						},
						"tagValue": {
							Value: "[parameter('costCenter')]",
						},
					},
					PolicyDefinitionID: to.Ptr("/providers/Microsoft.Authorization/policyDefinitions/1e30110a-5ceb-460c-a204-c1c3969c6d62"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/managementGroupBPDef/SealedPolicyAssignmentArtifact_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/managementGroupBPDef/SealedRoleAssignmentArtifact_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"MG-RoleAssignmentArtifact"},
	})
	client = armblueprint.NewPublishedArtifactsClient(cred, &options)
	res, err = client.Get(ctx,
		"providers/Microsoft.Management/managementGroups/ContosoOnlineGroup",
		"simpleBlueprint",
		"V2",
		"ownerAssignment",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/managementGroupBPDef/SealedRoleAssignmentArtifact_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armblueprint.PublishedArtifactsClientGetResponse{
			&armblueprint.RoleAssignmentArtifact{
				Name: to.Ptr("ownerAssignment"),
				Type: to.Ptr("Microsoft.Blueprint/blueprints/versions/artifacts"),
				ID:   to.Ptr("/providers/Microsoft.Management/managementGroups/ContosoOnlineGroup/providers/Microsoft.Blueprint/blueprints/simpleBlueprint/versions/V2/artifacts/ownerAssignment"),
				Kind: to.Ptr(armblueprint.ArtifactKindRoleAssignment),
				Properties: &armblueprint.RoleAssignmentArtifactProperties{
					DisplayName:      to.Ptr("enforce owners of given subscription"),
					PrincipalIDs:     "[parameters('owners')]",
					RoleDefinitionID: to.Ptr("/providers/Microsoft.Authorization/roleDefinitions/acdd72a7-3385-48ef-bd42-f606fba81ae7"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/managementGroupBPDef/SealedRoleAssignmentArtifact_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/subscriptionBPDef/SealedARMTemplateArtifact_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Sub-ARMTemplateArtifact"},
	})
	client = armblueprint.NewPublishedArtifactsClient(cred, &options)
	res, err = client.Get(ctx,
		"subscriptions/00000000-0000-0000-0000-000000000000",
		"simpleBlueprint",
		"V2",
		"storageTemplate",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/subscriptionBPDef/SealedARMTemplateArtifact_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armblueprint.PublishedArtifactsClientGetResponse{
			&armblueprint.TemplateArtifact{
				Name: to.Ptr("storageTemplate"),
				Type: to.Ptr("Microsoft.Blueprint/blueprints/versions/artifacts"),
				ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Blueprint/blueprints/simpleBlueprint/versions/V2/artifacts/storageTemplate"),
				Kind: to.Ptr(armblueprint.ArtifactKindTemplate),
				Properties: &armblueprint.TemplateArtifactProperties{
					Parameters: map[string]*armblueprint.ParameterValue{
						"storageAccountType": {
							Value: "[parameters('storageAccountType')]",
						},
					},
					ResourceGroup: to.Ptr("storageRG"),
					Template: map[string]interface{}{
						"contentVersion": "1.0.0.0",
						"outputs": map[string]interface{}{
							"storageAccountName": map[string]interface{}{
								"type":  "string",
								"value": "[variables('storageAccountName')]",
							},
						},
						"parameters": map[string]interface{}{
							"storageAccountType": map[string]interface{}{
								"type": "string",
								"allowedValues": []interface{}{
									"Standard_LRS",
									"Standard_GRS",
									"Standard_ZRS",
									"Premium_LRS",
								},
								"defaultValue": "Standard_LRS",
								"metadata": map[string]interface{}{
									"description": "Storage Account type",
								},
							},
						},
						"resources": []interface{}{
							map[string]interface{}{
								"name":       "[variables('storageAccountName')]",
								"type":       "Microsoft.Storage/storageAccounts",
								"apiVersion": "2016-01-01",
								"kind":       "Storage",
								"location":   "[resourceGroup().location]",
								"properties": map[string]interface{}{},
								"sku": map[string]interface{}{
									"name": "[parameters('storageAccountType')]",
								},
							},
						},
						"variables": map[string]interface{}{
							"storageAccountName": "[concat(uniquestring(resourceGroup().id), 'standardsa')]",
						},
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/subscriptionBPDef/SealedARMTemplateArtifact_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/subscriptionBPDef/SealedPolicyAssignmentArtifact_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Sub-PolicyAssignmentArtifact"},
	})
	client = armblueprint.NewPublishedArtifactsClient(cred, &options)
	res, err = client.Get(ctx,
		"subscriptions/00000000-0000-0000-0000-000000000000",
		"simpleBlueprint",
		"V2",
		"costCenterPolicy",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/subscriptionBPDef/SealedPolicyAssignmentArtifact_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armblueprint.PublishedArtifactsClientGetResponse{
			&armblueprint.PolicyAssignmentArtifact{
				Name: to.Ptr("costCenterPolicy"),
				Type: to.Ptr("Microsoft.Blueprint/blueprints/versions/artifacts"),
				ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Blueprint/blueprints/simpleBlueprint/versions/V2/artifacts/costCenterPolicy"),
				Kind: to.Ptr(armblueprint.ArtifactKindPolicyAssignment),
				Properties: &armblueprint.PolicyAssignmentArtifactProperties{
					DisplayName: to.Ptr("force costCenter tag on all resources"),
					Parameters: map[string]*armblueprint.ParameterValue{
						"tagName": {
							Value: "costCenter",
						},
						"tagValue": {
							Value: "[parameter('costCenter')]",
						},
					},
					PolicyDefinitionID: to.Ptr("/providers/Microsoft.Authorization/policyDefinitions/1e30110a-5ceb-460c-a204-c1c3969c6d62"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/subscriptionBPDef/SealedPolicyAssignmentArtifact_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/subscriptionBPDef/SealedRoleAssignmentArtifact_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Sub-RoleAssignmentArtifact"},
	})
	client = armblueprint.NewPublishedArtifactsClient(cred, &options)
	res, err = client.Get(ctx,
		"subscriptions/00000000-0000-0000-0000-000000000000",
		"simpleBlueprint",
		"V2",
		"ownerAssignment",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/subscriptionBPDef/SealedRoleAssignmentArtifact_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armblueprint.PublishedArtifactsClientGetResponse{
			&armblueprint.RoleAssignmentArtifact{
				Name: to.Ptr("ownerAssignment"),
				Type: to.Ptr("Microsoft.Blueprint/blueprints/versions/artifacts"),
				ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Blueprint/blueprints/simpleBlueprint/versions/V2/artifacts/ownerAssignment"),
				Kind: to.Ptr(armblueprint.ArtifactKindRoleAssignment),
				Properties: &armblueprint.RoleAssignmentArtifactProperties{
					DisplayName:      to.Ptr("enforce owners of given subscription"),
					PrincipalIDs:     "[parameters('owners')]",
					RoleDefinitionID: to.Ptr("/providers/Microsoft.Authorization/roleDefinitions/acdd72a7-3385-48ef-bd42-f606fba81ae7"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res)
			t.Fatalf("Mock response is not equal to example response for example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/subscriptionBPDef/SealedRoleAssignmentArtifact_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPublishedArtifacts_List(t *testing.T) {
	// From example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/managementGroupBPDef/SealedArtifact_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"MG-ArtifactList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armblueprint.NewPublishedArtifactsClient(cred, &options)
	pager := client.List("providers/Microsoft.Management/managementGroups/ContosoOnlineGroup",
		"simpleBlueprint",
		"V2",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/managementGroupBPDef/SealedArtifact_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armblueprint.ArtifactList{
			Value: []armblueprint.ArtifactClassification{
				&armblueprint.RoleAssignmentArtifact{
					Name: to.Ptr("ownerAssignment"),
					Type: to.Ptr("Microsoft.Blueprint/blueprints/versions/artifacts"),
					ID:   to.Ptr("/providers/Microsoft.Management/managementGroups/ContosoOnlineGroup/providers/Microsoft.Blueprint/blueprints/simpleBlueprint/versions/V2/artifacts/ownerAssignment"),
					Kind: to.Ptr(armblueprint.ArtifactKindRoleAssignment),
					Properties: &armblueprint.RoleAssignmentArtifactProperties{
						DisplayName:      to.Ptr("enforce owners of given subscription"),
						PrincipalIDs:     "[parameters('owners')]",
						RoleDefinitionID: to.Ptr("/providers/Microsoft.Authorization/roleDefinitions/acdd72a7-3385-48ef-bd42-f606fba81ae7"),
					},
				},
				&armblueprint.PolicyAssignmentArtifact{
					Name: to.Ptr("costCenterPolicy"),
					Type: to.Ptr("Microsoft.Blueprint/blueprints/versions/artifacts"),
					ID:   to.Ptr("/providers/Microsoft.Management/managementGroups/ContosoOnlineGroup/providers/Microsoft.Blueprint/blueprints/simpleBlueprint/versions/V2/artifacts/costCenterPolicy"),
					Kind: to.Ptr(armblueprint.ArtifactKindPolicyAssignment),
					Properties: &armblueprint.PolicyAssignmentArtifactProperties{
						DisplayName: to.Ptr("force costCenter tag on all resources"),
						Parameters: map[string]*armblueprint.ParameterValue{
							"tagName": {
								Value: "costCenter",
							},
							"tagValue": {
								Value: "[parameter('costCenter')]",
							},
						},
						PolicyDefinitionID: to.Ptr("/providers/Microsoft.Authorization/policyDefinitions/1e30110a-5ceb-460c-a204-c1c3969c6d62"),
					},
				},
				&armblueprint.TemplateArtifact{
					Name: to.Ptr("storageTemplate"),
					Type: to.Ptr("Microsoft.Blueprint/blueprints/versions/artifacts"),
					ID:   to.Ptr("/providers/Microsoft.Management/managementGroups/ContosoOnlineGroup/providers/Microsoft.Blueprint/blueprints/simpleBlueprint/versions/V2/artifacts/storageTemplate"),
					Kind: to.Ptr(armblueprint.ArtifactKindTemplate),
					Properties: &armblueprint.TemplateArtifactProperties{
						Parameters: map[string]*armblueprint.ParameterValue{
							"storageAccountType": {
								Value: "[parameters('storageAccountType')]",
							},
						},
						ResourceGroup: to.Ptr("storageRG"),
						Template: map[string]interface{}{
							"contentVersion": "1.0.0.0",
							"outputs": map[string]interface{}{
								"storageAccountName": map[string]interface{}{
									"type":  "string",
									"value": "[variables('storageAccountName')]",
								},
							},
							"parameters": map[string]interface{}{
								"storageAccountType": map[string]interface{}{
									"type": "string",
									"allowedValues": []interface{}{
										"Standard_LRS",
										"Standard_GRS",
										"Standard_ZRS",
										"Premium_LRS",
									},
									"defaultValue": "Standard_LRS",
									"metadata": map[string]interface{}{
										"description": "Storage Account type",
									},
								},
							},
							"resources": []interface{}{
								map[string]interface{}{
									"name":       "[variables('storageAccountName')]",
									"type":       "Microsoft.Storage/storageAccounts",
									"apiVersion": "2016-01-01",
									"kind":       "Storage",
									"location":   "[resourceGroup().location]",
									"properties": map[string]interface{}{},
									"sku": map[string]interface{}{
										"name": "[parameters('storageAccountType')]",
									},
								},
							},
							"variables": map[string]interface{}{
								"storageAccountName": "[concat(uniquestring(resourceGroup().id), 'standardsa')]",
							},
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ArtifactList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ArtifactList)
			t.Fatalf("Mock response is not equal to example response for example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/managementGroupBPDef/SealedArtifact_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/subscriptionBPDef/SealedArtifact_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Sub-ArtifactList"},
	})
	client = armblueprint.NewPublishedArtifactsClient(cred, &options)
	pager = client.List("subscriptions/00000000-0000-0000-0000-000000000000",
		"simpleBlueprint",
		"V2",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/subscriptionBPDef/SealedArtifact_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armblueprint.ArtifactList{
			Value: []armblueprint.ArtifactClassification{
				&armblueprint.RoleAssignmentArtifact{
					Name: to.Ptr("ownerAssignment"),
					Type: to.Ptr("Microsoft.Blueprint/blueprints/versions/artifacts"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Blueprint/blueprints/simpleBlueprint/versions/V2/artifacts/ownerAssignment"),
					Kind: to.Ptr(armblueprint.ArtifactKindRoleAssignment),
					Properties: &armblueprint.RoleAssignmentArtifactProperties{
						DisplayName:      to.Ptr("enforce owners of given subscription"),
						PrincipalIDs:     "[parameters('owners')]",
						RoleDefinitionID: to.Ptr("/providers/Microsoft.Authorization/roleDefinitions/acdd72a7-3385-48ef-bd42-f606fba81ae7"),
					},
				},
				&armblueprint.PolicyAssignmentArtifact{
					Name: to.Ptr("costCenterPolicy"),
					Type: to.Ptr("Microsoft.Blueprint/blueprints/versions/artifacts"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Blueprint/blueprints/simpleBlueprint/versions/V2/artifacts/costCenterPolicy"),
					Kind: to.Ptr(armblueprint.ArtifactKindPolicyAssignment),
					Properties: &armblueprint.PolicyAssignmentArtifactProperties{
						DisplayName: to.Ptr("force costCenter tag on all resources"),
						Parameters: map[string]*armblueprint.ParameterValue{
							"tagName": {
								Value: "costCenter",
							},
							"tagValue": {
								Value: "[parameter('costCenter')]",
							},
						},
						PolicyDefinitionID: to.Ptr("/providers/Microsoft.Authorization/policyDefinitions/1e30110a-5ceb-460c-a204-c1c3969c6d62"),
					},
				},
				&armblueprint.TemplateArtifact{
					Name: to.Ptr("storageTemplate"),
					Type: to.Ptr("Microsoft.Blueprint/blueprints/versions/artifacts"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Blueprint/blueprints/simpleBlueprint/versions/V2/artifacts/storageTemplate"),
					Kind: to.Ptr(armblueprint.ArtifactKindTemplate),
					Properties: &armblueprint.TemplateArtifactProperties{
						Parameters: map[string]*armblueprint.ParameterValue{
							"storageAccountType": {
								Value: "[parameters('storageAccountType')]",
							},
						},
						ResourceGroup: to.Ptr("storageRG"),
						Template: map[string]interface{}{
							"contentVersion": "1.0.0.0",
							"outputs": map[string]interface{}{
								"storageAccountName": map[string]interface{}{
									"type":  "string",
									"value": "[variables('storageAccountName')]",
								},
							},
							"parameters": map[string]interface{}{
								"storageAccountType": map[string]interface{}{
									"type": "string",
									"allowedValues": []interface{}{
										"Standard_LRS",
										"Standard_GRS",
										"Standard_ZRS",
										"Premium_LRS",
									},
									"defaultValue": "Standard_LRS",
									"metadata": map[string]interface{}{
										"description": "Storage Account type",
									},
								},
							},
							"resources": []interface{}{
								map[string]interface{}{
									"name":       "[variables('storageAccountName')]",
									"type":       "Microsoft.Storage/storageAccounts",
									"apiVersion": "2016-01-01",
									"kind":       "Storage",
									"location":   "[resourceGroup().location]",
									"properties": map[string]interface{}{},
									"sku": map[string]interface{}{
										"name": "[parameters('storageAccountType')]",
									},
								},
							},
							"variables": map[string]interface{}{
								"storageAccountName": "[concat(uniquestring(resourceGroup().id), 'standardsa')]",
							},
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ArtifactList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ArtifactList)
			t.Fatalf("Mock response is not equal to example response for example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/subscriptionBPDef/SealedArtifact_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAssignments_CreateOrUpdate(t *testing.T) {
	// From example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/managementGroupBPAssignment/BlueprintAssignment_Create_SystemAssignedMSI.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Assignment with system-assigned managed identity at management group scope"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armblueprint.NewAssignmentsClient(cred, &options)
	_, err := client.CreateOrUpdate(ctx,
		"managementGroups/ContosoOnlineGroup",
		"assignSimpleBlueprint",
		armblueprint.Assignment{
			Location: to.Ptr("eastus"),
			Identity: &armblueprint.ManagedServiceIdentity{
				Type: to.Ptr(armblueprint.ManagedServiceIdentityTypeSystemAssigned),
			},
			Properties: &armblueprint.AssignmentProperties{
				Description: to.Ptr("enforce pre-defined simpleBlueprint to this XXXXXXXX subscription."),
				BlueprintID: to.Ptr("/providers/Microsoft.Management/managementGroups/ContosoOnlineGroup/providers/Microsoft.Blueprint/blueprints/simpleBlueprint"),
				Parameters: map[string]*armblueprint.ParameterValue{
					"costCenter": {
						Value: "Contoso/Online/Shopping/Production",
					},
					"owners": {
						Value: []interface{}{
							"johnDoe@contoso.com",
							"johnsteam@contoso.com",
						},
					},
					"storageAccountType": {
						Value: "Standard_LRS",
					},
				},
				ResourceGroups: map[string]*armblueprint.ResourceGroupValue{
					"storageRG": {
						Name:     to.Ptr("defaultRG"),
						Location: to.Ptr("eastus"),
					},
				},
				Scope: to.Ptr("subscriptions/00000000-0000-0000-0000-000000000000"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/managementGroupBPAssignment/BlueprintAssignment_Create_SystemAssignedMSI.json: %v", err)
	}

	// From example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/subscriptionBPAssignment/BlueprintAssignment_Create_SystemAssignedMSI.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Assignment with system-assigned managed identity at subscription scope"},
	})
	client = armblueprint.NewAssignmentsClient(cred, &options)
	_, err = client.CreateOrUpdate(ctx,
		"subscriptions/00000000-0000-0000-0000-000000000000",
		"assignSimpleBlueprint",
		armblueprint.Assignment{
			Location: to.Ptr("eastus"),
			Identity: &armblueprint.ManagedServiceIdentity{
				Type: to.Ptr(armblueprint.ManagedServiceIdentityTypeSystemAssigned),
			},
			Properties: &armblueprint.AssignmentProperties{
				Description: to.Ptr("enforce pre-defined simpleBlueprint to this XXXXXXXX subscription."),
				BlueprintID: to.Ptr("/providers/Microsoft.Management/managementGroups/ContosoOnlineGroup/providers/Microsoft.Blueprint/blueprints/simpleBlueprint"),
				Parameters: map[string]*armblueprint.ParameterValue{
					"costCenter": {
						Value: "Contoso/Online/Shopping/Production",
					},
					"owners": {
						Value: []interface{}{
							"johnDoe@contoso.com",
							"johnsteam@contoso.com",
						},
					},
					"storageAccountType": {
						Value: "Standard_LRS",
					},
				},
				ResourceGroups: map[string]*armblueprint.ResourceGroupValue{
					"storageRG": {
						Name:     to.Ptr("defaultRG"),
						Location: to.Ptr("eastus"),
					},
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/subscriptionBPAssignment/BlueprintAssignment_Create_SystemAssignedMSI.json: %v", err)
	}

	// From example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/managementGroupBPAssignment/BlueprintAssignment_Create_UserAssignedMSI.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Assignment with user-assigned managed identity at management group scope"},
	})
	client = armblueprint.NewAssignmentsClient(cred, &options)
	_, err = client.CreateOrUpdate(ctx,
		"managementGroups/ContosoOnlineGroup",
		"assignSimpleBlueprint",
		armblueprint.Assignment{
			Location: to.Ptr("eastus"),
			Identity: &armblueprint.ManagedServiceIdentity{
				Type: to.Ptr(armblueprint.ManagedServiceIdentityTypeUserAssigned),
				UserAssignedIdentities: map[string]*armblueprint.UserAssignedIdentity{
					"/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contoso-resource-group/providers/Microsoft.ManagedIdentity/userAssignedIdentities/contoso-identity": {},
				},
			},
			Properties: &armblueprint.AssignmentProperties{
				Description: to.Ptr("enforce pre-defined simpleBlueprint to this XXXXXXXX subscription."),
				BlueprintID: to.Ptr("/providers/Microsoft.Management/managementGroups/ContosoOnlineGroup/providers/Microsoft.Blueprint/blueprints/simpleBlueprint"),
				Parameters: map[string]*armblueprint.ParameterValue{
					"costCenter": {
						Value: "Contoso/Online/Shopping/Production",
					},
					"owners": {
						Value: []interface{}{
							"johnDoe@contoso.com",
							"johnsteam@contoso.com",
						},
					},
					"storageAccountType": {
						Value: "Standard_LRS",
					},
				},
				ResourceGroups: map[string]*armblueprint.ResourceGroupValue{
					"storageRG": {
						Name:     to.Ptr("defaultRG"),
						Location: to.Ptr("eastus"),
					},
				},
				Scope: to.Ptr("subscriptions/00000000-0000-0000-0000-000000000000"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/managementGroupBPAssignment/BlueprintAssignment_Create_UserAssignedMSI.json: %v", err)
	}

	// From example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/subscriptionBPAssignment/BlueprintAssignment_Create_UserAssignedMSI.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Assignment with user-assigned managed identity at subscription scope"},
	})
	client = armblueprint.NewAssignmentsClient(cred, &options)
	_, err = client.CreateOrUpdate(ctx,
		"subscriptions/00000000-0000-0000-0000-000000000000",
		"assignSimpleBlueprint",
		armblueprint.Assignment{
			Location: to.Ptr("eastus"),
			Identity: &armblueprint.ManagedServiceIdentity{
				Type: to.Ptr(armblueprint.ManagedServiceIdentityTypeUserAssigned),
				UserAssignedIdentities: map[string]*armblueprint.UserAssignedIdentity{
					"/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contoso-resource-group/providers/Microsoft.ManagedIdentity/userAssignedIdentities/contoso-identity": {},
				},
			},
			Properties: &armblueprint.AssignmentProperties{
				Description: to.Ptr("enforce pre-defined simpleBlueprint to this XXXXXXXX subscription."),
				BlueprintID: to.Ptr("/providers/Microsoft.Management/managementGroups/ContosoOnlineGroup/providers/Microsoft.Blueprint/blueprints/simpleBlueprint"),
				Parameters: map[string]*armblueprint.ParameterValue{
					"costCenter": {
						Value: "Contoso/Online/Shopping/Production",
					},
					"owners": {
						Value: []interface{}{
							"johnDoe@contoso.com",
							"johnsteam@contoso.com",
						},
					},
					"storageAccountType": {
						Value: "Standard_LRS",
					},
				},
				ResourceGroups: map[string]*armblueprint.ResourceGroupValue{
					"storageRG": {
						Name:     to.Ptr("defaultRG"),
						Location: to.Ptr("eastus"),
					},
				},
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/subscriptionBPAssignment/BlueprintAssignment_Create_UserAssignedMSI.json: %v", err)
	}
}

func TestAssignments_Get(t *testing.T) {
	// From example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/managementGroupBPAssignment/BlueprintAssignment_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Assignment at management group scope"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armblueprint.NewAssignmentsClient(cred, &options)
	res, err := client.Get(ctx,
		"managementGroups/ContosoOnlineGroup",
		"assignSimpleBlueprint",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/managementGroupBPAssignment/BlueprintAssignment_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armblueprint.Assignment{
			Name:     to.Ptr("assignSimpleBlueprint"),
			Type:     to.Ptr("Microsoft.Blueprint/Assignment"),
			ID:       to.Ptr("/managementGroups/ContosoOnlineGroup/providers/Microsoft.Blueprint/blueprintAssignments/assignSimpleBlueprint"),
			Location: to.Ptr("eastus"),
			Identity: &armblueprint.ManagedServiceIdentity{
				Type:        to.Ptr(armblueprint.ManagedServiceIdentityTypeSystemAssigned),
				PrincipalID: to.Ptr("00000000-0000-0000-0000-000000000000"),
				TenantID:    to.Ptr("00000000-0000-0000-0000-000000000000"),
			},
			Properties: &armblueprint.AssignmentProperties{
				Description: to.Ptr("enforce pre-defined simpleBlueprint to this XXXXXXXX subscription."),
				BlueprintID: to.Ptr("/providers/Microsoft.Management/managementGroups/ContosoOnlineGroup/providers/Microsoft.Blueprint/blueprints/simpleBlueprint"),
				Parameters: map[string]*armblueprint.ParameterValue{
					"costCenter": {
						Value: "Contoso/Online/Shopping/Production",
					},
					"owners": {
						Value: []interface{}{
							"johnDoe@contoso.com",
							"johnsteam@contoso.com",
						},
					},
					"storageAccountType": {
						Value: "Standard_LRS",
					},
				},
				ProvisioningState: to.Ptr(armblueprint.AssignmentProvisioningState("Succeeded")),
				ResourceGroups: map[string]*armblueprint.ResourceGroupValue{
					"storageRG": {
						Name:     to.Ptr("defaultRG"),
						Location: to.Ptr("eastus"),
					},
				},
				Scope: to.Ptr("subscriptions/00000000-0000-0000-0000-000000000000"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Assignment) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Assignment)
			t.Fatalf("Mock response is not equal to example response for example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/managementGroupBPAssignment/BlueprintAssignment_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/subscriptionBPAssignment/BlueprintAssignment_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Assignment at subscription scope"},
	})
	client = armblueprint.NewAssignmentsClient(cred, &options)
	res, err = client.Get(ctx,
		"subscriptions/00000000-0000-0000-0000-000000000000",
		"assignSimpleBlueprint",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/subscriptionBPAssignment/BlueprintAssignment_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armblueprint.Assignment{
			Name:     to.Ptr("assignSimpleBlueprint"),
			Type:     to.Ptr("Microsoft.Blueprint/Assignment"),
			ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Blueprint/blueprintAssignments/assignSimpleBlueprint"),
			Location: to.Ptr("eastus"),
			Identity: &armblueprint.ManagedServiceIdentity{
				Type:        to.Ptr(armblueprint.ManagedServiceIdentityTypeSystemAssigned),
				PrincipalID: to.Ptr("00000000-0000-0000-0000-000000000000"),
				TenantID:    to.Ptr("00000000-0000-0000-0000-000000000000"),
			},
			Properties: &armblueprint.AssignmentProperties{
				Description: to.Ptr("enforce pre-defined simpleBlueprint to this XXXXXXXX subscription."),
				BlueprintID: to.Ptr("/providers/Microsoft.Management/managementGroups/ContosoOnlineGroup/providers/Microsoft.Blueprint/blueprints/simpleBlueprint"),
				Parameters: map[string]*armblueprint.ParameterValue{
					"costCenter": {
						Value: "Contoso/Online/Shopping/Production",
					},
					"owners": {
						Value: []interface{}{
							"johnDoe@contoso.com",
							"johnsteam@contoso.com",
						},
					},
					"storageAccountType": {
						Value: "Standard_LRS",
					},
				},
				ProvisioningState: to.Ptr(armblueprint.AssignmentProvisioningState("Succeeded")),
				ResourceGroups: map[string]*armblueprint.ResourceGroupValue{
					"storageRG": {
						Name:     to.Ptr("defaultRG"),
						Location: to.Ptr("eastus"),
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.Assignment) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.Assignment)
			t.Fatalf("Mock response is not equal to example response for example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/subscriptionBPAssignment/BlueprintAssignment_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAssignments_Delete(t *testing.T) {
	// From example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/managementGroupBPAssignment/BlueprintAssignment_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Assignment_Delete at management group scope"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armblueprint.NewAssignmentsClient(cred, &options)
	_, err := client.Delete(ctx,
		"managementGroups/ContosoOnlineGroup",
		"assignSimpleBlueprint",
		&armblueprint.AssignmentsClientDeleteOptions{DeleteBehavior: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/managementGroupBPAssignment/BlueprintAssignment_Delete.json: %v", err)
	}

	// From example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/managementGroupBPAssignment/BlueprintAssignment_Delete_AndDeleteChildren.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Assignment_Delete at management group scope, and delete the resources created by the assignment"},
	})
	client = armblueprint.NewAssignmentsClient(cred, &options)
	_, err = client.Delete(ctx,
		"managementGroups/ContosoOnlineGroup",
		"assignSimpleBlueprint",
		&armblueprint.AssignmentsClientDeleteOptions{DeleteBehavior: to.Ptr(armblueprint.AssignmentDeleteBehaviorAll)})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/managementGroupBPAssignment/BlueprintAssignment_Delete_AndDeleteChildren.json: %v", err)
	}

	// From example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/subscriptionBPAssignment/BlueprintAssignment_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Assignment_Delete at subscription scope"},
	})
	client = armblueprint.NewAssignmentsClient(cred, &options)
	_, err = client.Delete(ctx,
		"subscriptions/00000000-0000-0000-0000-000000000000",
		"assignSimpleBlueprint",
		&armblueprint.AssignmentsClientDeleteOptions{DeleteBehavior: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/subscriptionBPAssignment/BlueprintAssignment_Delete.json: %v", err)
	}

	// From example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/subscriptionBPAssignment/BlueprintAssignment_Delete_AndDeleteChildren.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Assignment_Delete at subscription scope, and delete the resources created by the assignment"},
	})
	client = armblueprint.NewAssignmentsClient(cred, &options)
	_, err = client.Delete(ctx,
		"subscriptions/00000000-0000-0000-0000-000000000000",
		"assignSimpleBlueprint",
		&armblueprint.AssignmentsClientDeleteOptions{DeleteBehavior: to.Ptr(armblueprint.AssignmentDeleteBehaviorAll)})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/subscriptionBPAssignment/BlueprintAssignment_Delete_AndDeleteChildren.json: %v", err)
	}
}

func TestAssignments_WhoIsBlueprint(t *testing.T) {
	// From example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/managementGroupBPAssignment/WhoIsBlueprint_Action.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WhoIsBlueprint_Action at management group scope"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armblueprint.NewAssignmentsClient(cred, &options)
	res, err := client.WhoIsBlueprint(ctx,
		"managementGroups/ContosoOnlineGroup",
		"assignSimpleBlueprint",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/managementGroupBPAssignment/WhoIsBlueprint_Action.json: %v", err)
	}
	// Response check
	{
		exampleRes := armblueprint.WhoIsBlueprintContract{
			ObjectID: to.Ptr("00000000-1111-0000-1111-000000000000"),
		}
		if !reflect.DeepEqual(exampleRes, res.WhoIsBlueprintContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.WhoIsBlueprintContract)
			t.Fatalf("Mock response is not equal to example response for example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/managementGroupBPAssignment/WhoIsBlueprint_Action.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/subscriptionBPAssignment/WhoIsBlueprint_Action.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"WhoIsBlueprint_Action at subscription scope"},
	})
	client = armblueprint.NewAssignmentsClient(cred, &options)
	res, err = client.WhoIsBlueprint(ctx,
		"subscriptions/00000000-0000-0000-0000-000000000000",
		"assignSimpleBlueprint",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/subscriptionBPAssignment/WhoIsBlueprint_Action.json: %v", err)
	}
	// Response check
	{
		exampleRes := armblueprint.WhoIsBlueprintContract{
			ObjectID: to.Ptr("00000000-1111-0000-1111-000000000000"),
		}
		if !reflect.DeepEqual(exampleRes, res.WhoIsBlueprintContract) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.WhoIsBlueprintContract)
			t.Fatalf("Mock response is not equal to example response for example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/subscriptionBPAssignment/WhoIsBlueprint_Action.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAssignments_List(t *testing.T) {
	// From example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/managementGroupBPAssignment/BlueprintAssignment_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Assignment at management group scope"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armblueprint.NewAssignmentsClient(cred, &options)
	pager := client.List("managementGroups/ContosoOnlineGroup",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/managementGroupBPAssignment/BlueprintAssignment_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armblueprint.AssignmentList{
			Value: []*armblueprint.Assignment{
				{
					Name:     to.Ptr("assignSimpleBlueprint"),
					Type:     to.Ptr("Microsoft.Blueprint/Assignment"),
					ID:       to.Ptr("/managementGroups/ContosoOnlineGroup/providers/Microsoft.Blueprint/blueprintAssignments/assignSimpleBlueprint"),
					Location: to.Ptr("eastus"),
					Identity: &armblueprint.ManagedServiceIdentity{
						Type:        to.Ptr(armblueprint.ManagedServiceIdentityTypeSystemAssigned),
						PrincipalID: to.Ptr("00000000-0000-0000-0000-000000000000"),
						TenantID:    to.Ptr("00000000-0000-0000-0000-000000000000"),
					},
					Properties: &armblueprint.AssignmentProperties{
						Description: to.Ptr("enforce pre-defined simpleBlueprint to this XXXXXXXX subscription."),
						BlueprintID: to.Ptr("/providers/Microsoft.Management/managementGroups/ContosoOnlineGroup/providers/Microsoft.Blueprint/blueprints/simpleBlueprint"),
						Parameters: map[string]*armblueprint.ParameterValue{
							"costCenter": {
								Value: "Contoso/Online/Shopping/Production",
							},
							"owners": {
								Value: []interface{}{
									"johnDoe@contoso.com",
									"johnsteam@contoso.com",
								},
							},
							"storageAccountType": {
								Value: "Standard_LRS",
							},
						},
						ProvisioningState: to.Ptr(armblueprint.AssignmentProvisioningState("Succeeded")),
						ResourceGroups: map[string]*armblueprint.ResourceGroupValue{
							"storageRG": {
								Name:     to.Ptr("defaultRG"),
								Location: to.Ptr("eastus"),
							},
						},
						Scope: to.Ptr("subscriptions/00000000-0000-0000-0000-000000000000"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AssignmentList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AssignmentList)
			t.Fatalf("Mock response is not equal to example response for example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/managementGroupBPAssignment/BlueprintAssignment_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/subscriptionBPAssignment/BlueprintAssignment_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Assignment at subscription scope"},
	})
	client = armblueprint.NewAssignmentsClient(cred, &options)
	pager = client.List("subscriptions/00000000-0000-0000-0000-000000000000",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/subscriptionBPAssignment/BlueprintAssignment_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armblueprint.AssignmentList{
			Value: []*armblueprint.Assignment{
				{
					Name:     to.Ptr("assignSimpleBlueprint"),
					Type:     to.Ptr("Microsoft.Blueprint/Assignment"),
					ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Blueprint/blueprintAssignments/assignSimpleBlueprint"),
					Location: to.Ptr("eastus"),
					Identity: &armblueprint.ManagedServiceIdentity{
						Type:        to.Ptr(armblueprint.ManagedServiceIdentityTypeSystemAssigned),
						PrincipalID: to.Ptr("00000000-0000-0000-0000-000000000000"),
						TenantID:    to.Ptr("00000000-0000-0000-0000-000000000000"),
					},
					Properties: &armblueprint.AssignmentProperties{
						Description: to.Ptr("enforce pre-defined simpleBlueprint to this XXXXXXXX subscription."),
						BlueprintID: to.Ptr("/providers/Microsoft.Management/managementGroups/ContosoOnlineGroup/providers/Microsoft.Blueprint/blueprints/simpleBlueprint"),
						Parameters: map[string]*armblueprint.ParameterValue{
							"costCenter": {
								Value: "Contoso/Online/Shopping/Production",
							},
							"owners": {
								Value: []interface{}{
									"johnDoe@contoso.com",
									"johnsteam@contoso.com",
								},
							},
							"storageAccountType": {
								Value: "Standard_LRS",
							},
						},
						ProvisioningState: to.Ptr(armblueprint.AssignmentProvisioningState("Succeeded")),
						ResourceGroups: map[string]*armblueprint.ResourceGroupValue{
							"storageRG": {
								Name:     to.Ptr("defaultRG"),
								Location: to.Ptr("eastus"),
							},
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AssignmentList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AssignmentList)
			t.Fatalf("Mock response is not equal to example response for example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/subscriptionBPAssignment/BlueprintAssignment_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAssignmentOperations_List(t *testing.T) {
	// From example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/managementGroupBPAssignment/BlueprintAssignmentOperation_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Assignment at management group scope"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armblueprint.NewAssignmentOperationsClient(cred, &options)
	pager := client.List("managementGroups/ContosoOnlineGroup",
		"assignSimpleBlueprint",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/managementGroupBPAssignment/BlueprintAssignmentOperation_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armblueprint.AssignmentOperationList{
			Value: []*armblueprint.AssignmentOperation{
				{
					Name: to.Ptr("fb5d4dcb-7ce2-4087-ba7a-459aa74e5e0f"),
					Type: to.Ptr("microsoft.blueprint/blueprintAssignments/operations"),
					ID:   to.Ptr("/managementGroups/ContosoOnlineGroup/providers/microsoft.blueprint/blueprintAssignments/assignSimpleBlueprint/assignmentOperations/fb5d4dcb-7ce2-4087-ba7a-459aa74e5e0f"),
					Properties: &armblueprint.AssignmentOperationProperties{
						AssignmentState:  to.Ptr("succeed"),
						BlueprintVersion: to.Ptr("v20181101"),
						Deployments: []*armblueprint.AssignmentDeploymentJob{
							{
								Action: to.Ptr("put"),
								History: []*armblueprint.AssignmentDeploymentJobResult{
									{
										Error: &armblueprint.AzureResourceManagerError{
											Code:    to.Ptr("dummy"),
											Message: to.Ptr("dummy"),
										},
									}},
								JobState:   to.Ptr("succeeded"),
								Kind:       to.Ptr("azureResource"),
								RequestURI: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/microsoft.deployments/deployments/48432786-2f1b-4925-8032-a5d57bcb5b6e"),
								Result: &armblueprint.AssignmentDeploymentJobResult{
									Resources: []*armblueprint.AssignmentJobCreatedResource{
										{
											Name: to.Ptr("foobar"),
											Type: to.Ptr("foo/bar"),
											ID:   to.Ptr("blabla"),
										}},
								},
							}},
						TimeCreated:  to.Ptr("2018-11-13T15:19:45-08:00"),
						TimeFinished: to.Ptr("2018-11-13T15:26:02-08:00"),
						TimeStarted:  to.Ptr("2018-11-13T15:21:49-08:00"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AssignmentOperationList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AssignmentOperationList)
			t.Fatalf("Mock response is not equal to example response for example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/managementGroupBPAssignment/BlueprintAssignmentOperation_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/subscriptionBPAssignment/BlueprintAssignmentOperation_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Assignment at subscription scope"},
	})
	client = armblueprint.NewAssignmentOperationsClient(cred, &options)
	pager = client.List("subscriptions/00000000-0000-0000-0000-000000000000",
		"assignSimpleBlueprint",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/subscriptionBPAssignment/BlueprintAssignmentOperation_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armblueprint.AssignmentOperationList{
			Value: []*armblueprint.AssignmentOperation{
				{
					Name: to.Ptr("fb5d4dcb-7ce2-4087-ba7a-459aa74e5e0f"),
					Type: to.Ptr("microsoft.blueprint/blueprintAssignments/operations"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/microsoft.blueprint/blueprintAssignments/assignSimpleBlueprint/assignmentOperations/fb5d4dcb-7ce2-4087-ba7a-459aa74e5e0f"),
					Properties: &armblueprint.AssignmentOperationProperties{
						AssignmentState:  to.Ptr("succeed"),
						BlueprintVersion: to.Ptr("v20181101"),
						Deployments: []*armblueprint.AssignmentDeploymentJob{
							{
								Action: to.Ptr("put"),
								History: []*armblueprint.AssignmentDeploymentJobResult{
									{
										Error: &armblueprint.AzureResourceManagerError{
											Code:    to.Ptr("dummy"),
											Message: to.Ptr("dummy"),
										},
									}},
								JobState:   to.Ptr("succeeded"),
								Kind:       to.Ptr("azureResource"),
								RequestURI: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/microsoft.deployments/deployments/48432786-2f1b-4925-8032-a5d57bcb5b6e"),
								Result: &armblueprint.AssignmentDeploymentJobResult{
									Resources: []*armblueprint.AssignmentJobCreatedResource{
										{
											Name: to.Ptr("foobar"),
											Type: to.Ptr("foo/bar"),
											ID:   to.Ptr("blabla"),
										}},
								},
							}},
						TimeCreated:  to.Ptr("2018-11-13T15:19:45-08:00"),
						TimeFinished: to.Ptr("2018-11-13T15:26:02-08:00"),
						TimeStarted:  to.Ptr("2018-11-13T15:21:49-08:00"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.AssignmentOperationList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.AssignmentOperationList)
			t.Fatalf("Mock response is not equal to example response for example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/subscriptionBPAssignment/BlueprintAssignmentOperation_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAssignmentOperations_Get(t *testing.T) {
	// From example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/managementGroupBPAssignment/BlueprintAssignmentOperation_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Assignment at management group scope"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armblueprint.NewAssignmentOperationsClient(cred, &options)
	res, err := client.Get(ctx,
		"managementGroups/ContosoOnlineGroup",
		"assignSimpleBlueprint",
		"fb5d4dcb-7ce2-4087-ba7a-459aa74e5e0f",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/managementGroupBPAssignment/BlueprintAssignmentOperation_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armblueprint.AssignmentOperation{
			Name: to.Ptr("fb5d4dcb-7ce2-4087-ba7a-459aa74e5e0f"),
			Type: to.Ptr("microsoft.blueprint/blueprintAssignments/operations"),
			ID:   to.Ptr("/managementGroups/ContosoOnlineGroup/providers/microsoft.blueprint/blueprintAssignments/assignSimpleBlueprint/assignmentOperations/fb5d4dcb-7ce2-4087-ba7a-459aa74e5e0f"),
			Properties: &armblueprint.AssignmentOperationProperties{
				AssignmentState:  to.Ptr("succeed"),
				BlueprintVersion: to.Ptr("v20181101"),
				Deployments: []*armblueprint.AssignmentDeploymentJob{
					{
						Action: to.Ptr("put"),
						History: []*armblueprint.AssignmentDeploymentJobResult{
							{
								Error: &armblueprint.AzureResourceManagerError{
									Code:    to.Ptr("dummy"),
									Message: to.Ptr("dummy"),
								},
							}},
						JobState:   to.Ptr("succeeded"),
						Kind:       to.Ptr("azureResource"),
						RequestURI: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/microsoft.deployments/deployments/48432786-2f1b-4925-8032-a5d57bcb5b6e"),
						Result: &armblueprint.AssignmentDeploymentJobResult{
							Resources: []*armblueprint.AssignmentJobCreatedResource{
								{
									Name: to.Ptr("foobar"),
									Type: to.Ptr("foo/bar"),
									ID:   to.Ptr("blabla"),
								}},
						},
					}},
				TimeCreated:  to.Ptr("2018-11-13T15:19:45-08:00"),
				TimeFinished: to.Ptr("2018-11-13T15:26:02-08:00"),
				TimeStarted:  to.Ptr("2018-11-13T15:21:49-08:00"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AssignmentOperation) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AssignmentOperation)
			t.Fatalf("Mock response is not equal to example response for example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/managementGroupBPAssignment/BlueprintAssignmentOperation_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/subscriptionBPAssignment/BlueprintAssignmentOperation_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Assignment at subscription scope"},
	})
	client = armblueprint.NewAssignmentOperationsClient(cred, &options)
	res, err = client.Get(ctx,
		"subscriptions/00000000-0000-0000-0000-000000000000",
		"assignSimpleBlueprint",
		"fb5d4dcb-7ce2-4087-ba7a-459aa74e5e0f",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/subscriptionBPAssignment/BlueprintAssignmentOperation_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armblueprint.AssignmentOperation{
			Name: to.Ptr("fb5d4dcb-7ce2-4087-ba7a-459aa74e5e0f"),
			Type: to.Ptr("microsoft.blueprint/blueprintAssignments/operations"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/microsoft.blueprint/blueprintAssignments/assignSimpleBlueprint/assignmentOperations/fb5d4dcb-7ce2-4087-ba7a-459aa74e5e0f"),
			Properties: &armblueprint.AssignmentOperationProperties{
				AssignmentState:  to.Ptr("succeed"),
				BlueprintVersion: to.Ptr("v20181101"),
				Deployments: []*armblueprint.AssignmentDeploymentJob{
					{
						Action: to.Ptr("put"),
						History: []*armblueprint.AssignmentDeploymentJobResult{
							{
								Error: &armblueprint.AzureResourceManagerError{
									Code:    to.Ptr("dummy"),
									Message: to.Ptr("dummy"),
								},
							}},
						JobState:   to.Ptr("succeeded"),
						Kind:       to.Ptr("azureResource"),
						RequestURI: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/microsoft.deployments/deployments/48432786-2f1b-4925-8032-a5d57bcb5b6e"),
						Result: &armblueprint.AssignmentDeploymentJobResult{
							Resources: []*armblueprint.AssignmentJobCreatedResource{
								{
									Name: to.Ptr("foobar"),
									Type: to.Ptr("foo/bar"),
									ID:   to.Ptr("blabla"),
								}},
						},
					}},
				TimeCreated:  to.Ptr("2018-11-13T15:19:45-08:00"),
				TimeFinished: to.Ptr("2018-11-13T15:26:02-08:00"),
				TimeStarted:  to.Ptr("2018-11-13T15:21:49-08:00"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AssignmentOperation) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AssignmentOperation)
			t.Fatalf("Mock response is not equal to example response for example specification/blueprint/resource-manager/Microsoft.Blueprint/preview/2018-11-01-preview/examples/subscriptionBPAssignment/BlueprintAssignmentOperation_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
