//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armlogz

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"reflect"
)

// MonitorClientListVMHostUpdatePager provides operations for iterating over paged responses.
type MonitorClientListVMHostUpdatePager struct {
	client    *MonitorClient
	current   MonitorClientListVMHostUpdateResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, MonitorClientListVMHostUpdateResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *MonitorClientListVMHostUpdatePager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.VMResourcesListResponse.NextLink == nil || len(*p.current.VMResourcesListResponse.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *MonitorClientListVMHostUpdatePager) NextPage(ctx context.Context) (MonitorClientListVMHostUpdateResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return MonitorClientListVMHostUpdateResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return MonitorClientListVMHostUpdateResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return MonitorClientListVMHostUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return MonitorClientListVMHostUpdateResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listVMHostUpdateHandleResponse(resp)
	if err != nil {
		return MonitorClientListVMHostUpdateResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// MonitorClientListVMHostsPager provides operations for iterating over paged responses.
type MonitorClientListVMHostsPager struct {
	client    *MonitorClient
	current   MonitorClientListVMHostsResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, MonitorClientListVMHostsResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *MonitorClientListVMHostsPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.VMResourcesListResponse.NextLink == nil || len(*p.current.VMResourcesListResponse.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *MonitorClientListVMHostsPager) NextPage(ctx context.Context) (MonitorClientListVMHostsResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return MonitorClientListVMHostsResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return MonitorClientListVMHostsResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return MonitorClientListVMHostsResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return MonitorClientListVMHostsResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listVMHostsHandleResponse(resp)
	if err != nil {
		return MonitorClientListVMHostsResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// MonitorsClientListByResourceGroupPager provides operations for iterating over paged responses.
type MonitorsClientListByResourceGroupPager struct {
	client    *MonitorsClient
	current   MonitorsClientListByResourceGroupResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, MonitorsClientListByResourceGroupResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *MonitorsClientListByResourceGroupPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.MonitorResourceListResponse.NextLink == nil || len(*p.current.MonitorResourceListResponse.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *MonitorsClientListByResourceGroupPager) NextPage(ctx context.Context) (MonitorsClientListByResourceGroupResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return MonitorsClientListByResourceGroupResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return MonitorsClientListByResourceGroupResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return MonitorsClientListByResourceGroupResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return MonitorsClientListByResourceGroupResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		return MonitorsClientListByResourceGroupResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// MonitorsClientListBySubscriptionPager provides operations for iterating over paged responses.
type MonitorsClientListBySubscriptionPager struct {
	client    *MonitorsClient
	current   MonitorsClientListBySubscriptionResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, MonitorsClientListBySubscriptionResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *MonitorsClientListBySubscriptionPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.MonitorResourceListResponse.NextLink == nil || len(*p.current.MonitorResourceListResponse.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *MonitorsClientListBySubscriptionPager) NextPage(ctx context.Context) (MonitorsClientListBySubscriptionResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return MonitorsClientListBySubscriptionResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return MonitorsClientListBySubscriptionResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return MonitorsClientListBySubscriptionResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return MonitorsClientListBySubscriptionResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listBySubscriptionHandleResponse(resp)
	if err != nil {
		return MonitorsClientListBySubscriptionResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// MonitorsClientListMonitoredResourcesPager provides operations for iterating over paged responses.
type MonitorsClientListMonitoredResourcesPager struct {
	client    *MonitorsClient
	current   MonitorsClientListMonitoredResourcesResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, MonitorsClientListMonitoredResourcesResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *MonitorsClientListMonitoredResourcesPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.MonitoredResourceListResponse.NextLink == nil || len(*p.current.MonitoredResourceListResponse.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *MonitorsClientListMonitoredResourcesPager) NextPage(ctx context.Context) (MonitorsClientListMonitoredResourcesResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return MonitorsClientListMonitoredResourcesResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return MonitorsClientListMonitoredResourcesResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return MonitorsClientListMonitoredResourcesResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return MonitorsClientListMonitoredResourcesResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listMonitoredResourcesHandleResponse(resp)
	if err != nil {
		return MonitorsClientListMonitoredResourcesResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// MonitorsClientListUserRolesPager provides operations for iterating over paged responses.
type MonitorsClientListUserRolesPager struct {
	client    *MonitorsClient
	current   MonitorsClientListUserRolesResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, MonitorsClientListUserRolesResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *MonitorsClientListUserRolesPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.UserRoleListResponse.NextLink == nil || len(*p.current.UserRoleListResponse.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *MonitorsClientListUserRolesPager) NextPage(ctx context.Context) (MonitorsClientListUserRolesResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return MonitorsClientListUserRolesResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return MonitorsClientListUserRolesResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return MonitorsClientListUserRolesResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return MonitorsClientListUserRolesResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listUserRolesHandleResponse(resp)
	if err != nil {
		return MonitorsClientListUserRolesResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// OperationsClientListPager provides operations for iterating over paged responses.
type OperationsClientListPager struct {
	client    *OperationsClient
	current   OperationsClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, OperationsClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *OperationsClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.OperationListResult.NextLink == nil || len(*p.current.OperationListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *OperationsClientListPager) NextPage(ctx context.Context) (OperationsClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return OperationsClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return OperationsClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return OperationsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return OperationsClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return OperationsClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// SingleSignOnClientListPager provides operations for iterating over paged responses.
type SingleSignOnClientListPager struct {
	client    *SingleSignOnClient
	current   SingleSignOnClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, SingleSignOnClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *SingleSignOnClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SingleSignOnResourceListResponse.NextLink == nil || len(*p.current.SingleSignOnResourceListResponse.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *SingleSignOnClientListPager) NextPage(ctx context.Context) (SingleSignOnClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return SingleSignOnClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return SingleSignOnClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return SingleSignOnClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return SingleSignOnClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return SingleSignOnClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// SubAccountClientListMonitoredResourcesPager provides operations for iterating over paged responses.
type SubAccountClientListMonitoredResourcesPager struct {
	client    *SubAccountClient
	current   SubAccountClientListMonitoredResourcesResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, SubAccountClientListMonitoredResourcesResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *SubAccountClientListMonitoredResourcesPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.MonitoredResourceListResponse.NextLink == nil || len(*p.current.MonitoredResourceListResponse.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *SubAccountClientListMonitoredResourcesPager) NextPage(ctx context.Context) (SubAccountClientListMonitoredResourcesResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return SubAccountClientListMonitoredResourcesResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return SubAccountClientListMonitoredResourcesResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return SubAccountClientListMonitoredResourcesResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return SubAccountClientListMonitoredResourcesResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listMonitoredResourcesHandleResponse(resp)
	if err != nil {
		return SubAccountClientListMonitoredResourcesResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// SubAccountClientListPager provides operations for iterating over paged responses.
type SubAccountClientListPager struct {
	client    *SubAccountClient
	current   SubAccountClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, SubAccountClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *SubAccountClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.MonitorResourceListResponse.NextLink == nil || len(*p.current.MonitorResourceListResponse.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *SubAccountClientListPager) NextPage(ctx context.Context) (SubAccountClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return SubAccountClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return SubAccountClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return SubAccountClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return SubAccountClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return SubAccountClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// SubAccountClientListVMHostUpdatePager provides operations for iterating over paged responses.
type SubAccountClientListVMHostUpdatePager struct {
	client    *SubAccountClient
	current   SubAccountClientListVMHostUpdateResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, SubAccountClientListVMHostUpdateResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *SubAccountClientListVMHostUpdatePager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.VMResourcesListResponse.NextLink == nil || len(*p.current.VMResourcesListResponse.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *SubAccountClientListVMHostUpdatePager) NextPage(ctx context.Context) (SubAccountClientListVMHostUpdateResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return SubAccountClientListVMHostUpdateResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return SubAccountClientListVMHostUpdateResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return SubAccountClientListVMHostUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return SubAccountClientListVMHostUpdateResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listVMHostUpdateHandleResponse(resp)
	if err != nil {
		return SubAccountClientListVMHostUpdateResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// SubAccountClientListVMHostsPager provides operations for iterating over paged responses.
type SubAccountClientListVMHostsPager struct {
	client    *SubAccountClient
	current   SubAccountClientListVMHostsResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, SubAccountClientListVMHostsResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *SubAccountClientListVMHostsPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.VMResourcesListResponse.NextLink == nil || len(*p.current.VMResourcesListResponse.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *SubAccountClientListVMHostsPager) NextPage(ctx context.Context) (SubAccountClientListVMHostsResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return SubAccountClientListVMHostsResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return SubAccountClientListVMHostsResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return SubAccountClientListVMHostsResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return SubAccountClientListVMHostsResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listVMHostsHandleResponse(resp)
	if err != nil {
		return SubAccountClientListVMHostsResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// SubAccountTagRulesClientListPager provides operations for iterating over paged responses.
type SubAccountTagRulesClientListPager struct {
	client    *SubAccountTagRulesClient
	current   SubAccountTagRulesClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, SubAccountTagRulesClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *SubAccountTagRulesClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.MonitoringTagRulesListResponse.NextLink == nil || len(*p.current.MonitoringTagRulesListResponse.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *SubAccountTagRulesClientListPager) NextPage(ctx context.Context) (SubAccountTagRulesClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return SubAccountTagRulesClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return SubAccountTagRulesClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return SubAccountTagRulesClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return SubAccountTagRulesClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return SubAccountTagRulesClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// TagRulesClientListPager provides operations for iterating over paged responses.
type TagRulesClientListPager struct {
	client    *TagRulesClient
	current   TagRulesClientListResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, TagRulesClientListResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *TagRulesClientListPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.MonitoringTagRulesListResponse.NextLink == nil || len(*p.current.MonitoringTagRulesListResponse.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *TagRulesClientListPager) NextPage(ctx context.Context) (TagRulesClientListResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return TagRulesClientListResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return TagRulesClientListResponse{}, err
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		return TagRulesClientListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return TagRulesClientListResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		return TagRulesClientListResponse{}, err
	}
	p.current = result
	return p.current, nil
}
