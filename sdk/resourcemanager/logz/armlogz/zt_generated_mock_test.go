//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armlogz_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/logz/armlogz"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestMonitors_ListMonitoredResources(t *testing.T) {
	// From example specification/logz/resource-manager/Microsoft.Logz/stable/2020-10-01/examples/MonitoredResources_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"MonitoredResources_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogz.NewMonitorsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.ListMonitoredResources("myResourceGroup",
		"myMonitor",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/logz/resource-manager/Microsoft.Logz/stable/2020-10-01/examples/MonitoredResources_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armlogz.MonitoredResourceListResponse{
			Value: []*armlogz.MonitoredResource{
				{
					ID:                     to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/monitors/myMonitor/listMonitoredResources"),
					ReasonForLogsStatus:    to.Ptr("CapturedByRules"),
					ReasonForMetricsStatus: to.Ptr("CapturedByRules"),
					SendingLogs:            to.Ptr(true),
					SendingMetrics:         to.Ptr(true),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.MonitoredResourceListResponse) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.MonitoredResourceListResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/logz/resource-manager/Microsoft.Logz/stable/2020-10-01/examples/MonitoredResources_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestMonitors_ListBySubscription(t *testing.T) {
	// From example specification/logz/resource-manager/Microsoft.Logz/stable/2020-10-01/examples/Monitors_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Monitors_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogz.NewMonitorsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.ListBySubscription(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/logz/resource-manager/Microsoft.Logz/stable/2020-10-01/examples/Monitors_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armlogz.MonitorResourceListResponse{
			Value: []*armlogz.MonitorResource{
				{
					ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/monitors/myMonitor"),
					Location: to.Ptr("West US"),
					Properties: &armlogz.MonitorProperties{
						MonitoringStatus: to.Ptr(armlogz.MonitoringStatusEnabled),
						PlanData: &armlogz.PlanData{
							BillingCycle:  to.Ptr("Monthly"),
							EffectiveDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-08-30T15:14:33+02:00"); return t }()),
							PlanDetails:   to.Ptr("logzapitestplan"),
							UsageType:     to.Ptr("Committed"),
						},
						ProvisioningState: to.Ptr(armlogz.ProvisioningStateSucceeded),
						UserInfo: &armlogz.UserInfo{
							EmailAddress: to.Ptr("alice@microsoft.com"),
							FirstName:    to.Ptr("Alice"),
							LastName:     to.Ptr("Bob"),
							PhoneNumber:  to.Ptr("123456"),
						},
					},
					Tags: map[string]*string{
						"Environment": to.Ptr("Dev"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.MonitorResourceListResponse) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.MonitorResourceListResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/logz/resource-manager/Microsoft.Logz/stable/2020-10-01/examples/Monitors_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestMonitors_ListByResourceGroup(t *testing.T) {
	// From example specification/logz/resource-manager/Microsoft.Logz/stable/2020-10-01/examples/Monitors_ListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Monitors_ListByResourceGroup"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogz.NewMonitorsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.ListByResourceGroup("myResourceGroup",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/logz/resource-manager/Microsoft.Logz/stable/2020-10-01/examples/Monitors_ListByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armlogz.MonitorResourceListResponse{
			Value: []*armlogz.MonitorResource{
				{
					Name:     to.Ptr("myMonitor"),
					Type:     to.Ptr("Microsoft.Logz/monitors"),
					ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/monitors/myMonitor"),
					Location: to.Ptr("West US"),
					Properties: &armlogz.MonitorProperties{
						PlanData: &armlogz.PlanData{
							BillingCycle:  to.Ptr("Monthly"),
							EffectiveDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-08-30T15:14:33+02:00"); return t }()),
							PlanDetails:   to.Ptr("logzapitestplan"),
							UsageType:     to.Ptr("Committed"),
						},
						ProvisioningState: to.Ptr(armlogz.ProvisioningStateSucceeded),
						UserInfo: &armlogz.UserInfo{
							EmailAddress: to.Ptr("alice@microsoft.com"),
							FirstName:    to.Ptr("Alice"),
							LastName:     to.Ptr("Bob"),
							PhoneNumber:  to.Ptr("123456"),
						},
					},
					Tags: map[string]*string{
						"Environment": to.Ptr("Dev"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.MonitorResourceListResponse) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.MonitorResourceListResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/logz/resource-manager/Microsoft.Logz/stable/2020-10-01/examples/Monitors_ListByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestMonitors_Get(t *testing.T) {
	// From example specification/logz/resource-manager/Microsoft.Logz/stable/2020-10-01/examples/Monitors_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Monitors_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogz.NewMonitorsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myMonitor",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/logz/resource-manager/Microsoft.Logz/stable/2020-10-01/examples/Monitors_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armlogz.MonitorResource{
			Name:     to.Ptr("myMonitor"),
			Type:     to.Ptr("Microsoft.Logz/monitors"),
			ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/monitors/myMonitor"),
			Location: to.Ptr("West US"),
			Properties: &armlogz.MonitorProperties{
				MonitoringStatus: to.Ptr(armlogz.MonitoringStatusEnabled),
				PlanData: &armlogz.PlanData{
					BillingCycle:  to.Ptr("Monthly"),
					EffectiveDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-08-30T15:14:33+02:00"); return t }()),
					PlanDetails:   to.Ptr("logzapitestplan"),
					UsageType:     to.Ptr("Committed"),
				},
				ProvisioningState: to.Ptr(armlogz.ProvisioningStateSucceeded),
				UserInfo: &armlogz.UserInfo{
					EmailAddress: to.Ptr("alice@microsoft.com"),
					FirstName:    to.Ptr("Alice"),
					LastName:     to.Ptr("Bob"),
					PhoneNumber:  to.Ptr("123456"),
				},
			},
			Tags: map[string]*string{
				"Environment": to.Ptr("Dev"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.MonitorResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.MonitorResource)
			t.Fatalf("Mock response is not equal to example response for example specification/logz/resource-manager/Microsoft.Logz/stable/2020-10-01/examples/Monitors_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestMonitors_Create(t *testing.T) {
	// From example specification/logz/resource-manager/Microsoft.Logz/stable/2020-10-01/examples/Monitors_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Monitors_Create"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogz.NewMonitorsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginCreate(ctx,
		"myResourceGroup",
		"myMonitor",
		&armlogz.MonitorsClientBeginCreateOptions{Body: nil,
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/logz/resource-manager/Microsoft.Logz/stable/2020-10-01/examples/Monitors_Create.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/logz/resource-manager/Microsoft.Logz/stable/2020-10-01/examples/Monitors_Create.json: %v", err)
	}
	// Response check
	{
		exampleRes := armlogz.MonitorResource{
			Name:     to.Ptr("myMonitor"),
			Type:     to.Ptr("Microsoft.Logz/monitors"),
			ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/monitors/myMonitor"),
			Location: to.Ptr("West US 2"),
			Properties: &armlogz.MonitorProperties{
				ProvisioningState: to.Ptr(armlogz.ProvisioningStateSucceeded),
			},
			Tags: map[string]*string{
				"Environment": to.Ptr("Dev"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.MonitorResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.MonitorResource)
			t.Fatalf("Mock response is not equal to example response for example specification/logz/resource-manager/Microsoft.Logz/stable/2020-10-01/examples/Monitors_Create.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestMonitors_Update(t *testing.T) {
	// From example specification/logz/resource-manager/Microsoft.Logz/stable/2020-10-01/examples/Monitors_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Monitors_Update"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogz.NewMonitorsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Update(ctx,
		"myResourceGroup",
		"myMonitor",
		&armlogz.MonitorsClientUpdateOptions{Body: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/logz/resource-manager/Microsoft.Logz/stable/2020-10-01/examples/Monitors_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armlogz.MonitorResource{
			Name:     to.Ptr("myMonitor"),
			Type:     to.Ptr("Microsoft.Logz/monitors"),
			ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/monitors/myMonitor"),
			Location: to.Ptr("West US"),
			Properties: &armlogz.MonitorProperties{
				MonitoringStatus:  to.Ptr(armlogz.MonitoringStatusEnabled),
				ProvisioningState: to.Ptr(armlogz.ProvisioningStateSucceeded),
			},
			Tags: map[string]*string{
				"Environment": to.Ptr("Dev"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.MonitorResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.MonitorResource)
			t.Fatalf("Mock response is not equal to example response for example specification/logz/resource-manager/Microsoft.Logz/stable/2020-10-01/examples/Monitors_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestMonitors_Delete(t *testing.T) {
	// From example specification/logz/resource-manager/Microsoft.Logz/stable/2020-10-01/examples/Monitors_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Monitors_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogz.NewMonitorsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"myMonitor",
		&armlogz.MonitorsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/logz/resource-manager/Microsoft.Logz/stable/2020-10-01/examples/Monitors_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/logz/resource-manager/Microsoft.Logz/stable/2020-10-01/examples/Monitors_Delete.json: %v", err)
	}
}

func TestMonitors_ListUserRoles(t *testing.T) {
	// From example specification/logz/resource-manager/Microsoft.Logz/stable/2020-10-01/examples/MainAccount_listUserRoles.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"MainAccount_VMHosts_Update"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogz.NewMonitorsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.ListUserRoles("myResourceGroup",
		"myMonitor",
		&armlogz.MonitorsClientListUserRolesOptions{Body: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/logz/resource-manager/Microsoft.Logz/stable/2020-10-01/examples/MainAccount_listUserRoles.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armlogz.UserRoleListResponse{
			Value: []*armlogz.UserRoleResponse{
				{
					Role: to.Ptr(armlogz.UserRoleAdmin),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.UserRoleListResponse) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.UserRoleListResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/logz/resource-manager/Microsoft.Logz/stable/2020-10-01/examples/MainAccount_listUserRoles.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOperations_List(t *testing.T) {
	// From example specification/logz/resource-manager/Microsoft.Logz/stable/2020-10-01/examples/Operations_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Operations_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogz.NewOperationsClient(cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/logz/resource-manager/Microsoft.Logz/stable/2020-10-01/examples/Operations_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armlogz.OperationListResult{
			Value: []*armlogz.OperationResult{
				{
					Name: to.Ptr("Microsoft.Logz/monitors/write"),
					Display: &armlogz.OperationDisplay{
						Description: to.Ptr("Write monitors resource"),
						Operation:   to.Ptr("write"),
						Provider:    to.Ptr("Microsoft.Logz"),
						Resource:    to.Ptr("monitors"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OperationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OperationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/logz/resource-manager/Microsoft.Logz/stable/2020-10-01/examples/Operations_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTagRules_List(t *testing.T) {
	// From example specification/logz/resource-manager/Microsoft.Logz/stable/2020-10-01/examples/TagRules_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"TagRules_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogz.NewTagRulesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.List("myResourceGroup",
		"myMonitor",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/logz/resource-manager/Microsoft.Logz/stable/2020-10-01/examples/TagRules_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armlogz.MonitoringTagRulesListResponse{
			Value: []*armlogz.MonitoringTagRules{
				{
					Name: to.Ptr("default"),
					Type: to.Ptr("Microsoft.Logz/monitors/tagRules"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Logz/monitors/myMonitor/tagRules/default"),
					Properties: &armlogz.MonitoringTagRulesProperties{
						LogRules: &armlogz.LogRules{
							FilteringTags: []*armlogz.FilteringTag{
								{
									Name:   to.Ptr("Environment"),
									Action: to.Ptr(armlogz.TagActionInclude),
									Value:  to.Ptr("Prod"),
								},
								{
									Name:   to.Ptr("Environment"),
									Action: to.Ptr(armlogz.TagActionExclude),
									Value:  to.Ptr("Dev"),
								}},
							SendAADLogs:          to.Ptr(false),
							SendActivityLogs:     to.Ptr(true),
							SendSubscriptionLogs: to.Ptr(true),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.MonitoringTagRulesListResponse) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.MonitoringTagRulesListResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/logz/resource-manager/Microsoft.Logz/stable/2020-10-01/examples/TagRules_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTagRules_CreateOrUpdate(t *testing.T) {
	// From example specification/logz/resource-manager/Microsoft.Logz/stable/2020-10-01/examples/TagRules_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"TagRules_CreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogz.NewTagRulesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"myResourceGroup",
		"myMonitor",
		"default",
		&armlogz.TagRulesClientCreateOrUpdateOptions{Body: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/logz/resource-manager/Microsoft.Logz/stable/2020-10-01/examples/TagRules_CreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armlogz.MonitoringTagRules{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Logz/monitors/tagRules"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Logz/monitors/myMonitor/tagRules/default"),
			Properties: &armlogz.MonitoringTagRulesProperties{
				LogRules: &armlogz.LogRules{
					FilteringTags: []*armlogz.FilteringTag{
						{
							Name:   to.Ptr("Environment"),
							Action: to.Ptr(armlogz.TagActionInclude),
							Value:  to.Ptr("Prod"),
						},
						{
							Name:   to.Ptr("Environment"),
							Action: to.Ptr(armlogz.TagActionExclude),
							Value:  to.Ptr("Dev"),
						}},
					SendAADLogs:          to.Ptr(false),
					SendActivityLogs:     to.Ptr(true),
					SendSubscriptionLogs: to.Ptr(true),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.MonitoringTagRules) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.MonitoringTagRules)
			t.Fatalf("Mock response is not equal to example response for example specification/logz/resource-manager/Microsoft.Logz/stable/2020-10-01/examples/TagRules_CreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTagRules_Get(t *testing.T) {
	// From example specification/logz/resource-manager/Microsoft.Logz/stable/2020-10-01/examples/TagRules_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"TagRules_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogz.NewTagRulesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myMonitor",
		"default",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/logz/resource-manager/Microsoft.Logz/stable/2020-10-01/examples/TagRules_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armlogz.MonitoringTagRules{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Logz/monitors/tagRules"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Logz/monitors/myMonitor/tagRules/default"),
			Properties: &armlogz.MonitoringTagRulesProperties{
				LogRules: &armlogz.LogRules{
					FilteringTags: []*armlogz.FilteringTag{
						{
							Name:   to.Ptr("Environment"),
							Action: to.Ptr(armlogz.TagActionInclude),
							Value:  to.Ptr("Prod"),
						},
						{
							Name:   to.Ptr("Environment"),
							Action: to.Ptr(armlogz.TagActionExclude),
							Value:  to.Ptr("Dev"),
						}},
					SendAADLogs:          to.Ptr(false),
					SendActivityLogs:     to.Ptr(true),
					SendSubscriptionLogs: to.Ptr(true),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.MonitoringTagRules) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.MonitoringTagRules)
			t.Fatalf("Mock response is not equal to example response for example specification/logz/resource-manager/Microsoft.Logz/stable/2020-10-01/examples/TagRules_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTagRules_Delete(t *testing.T) {
	// From example specification/logz/resource-manager/Microsoft.Logz/stable/2020-10-01/examples/TagRules_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"TagRules_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogz.NewTagRulesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	_, err := client.Delete(ctx,
		"myResourceGroup",
		"myMonitor",
		"default",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/logz/resource-manager/Microsoft.Logz/stable/2020-10-01/examples/TagRules_Delete.json: %v", err)
	}
}

func TestSingleSignOn_List(t *testing.T) {
	// From example specification/logz/resource-manager/Microsoft.Logz/stable/2020-10-01/examples/SingleSignOnConfigurations_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SingleSignOnConfigurations_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogz.NewSingleSignOnClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.List("myResourceGroup",
		"myMonitor",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/logz/resource-manager/Microsoft.Logz/stable/2020-10-01/examples/SingleSignOnConfigurations_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armlogz.SingleSignOnResourceListResponse{
			Value: []*armlogz.SingleSignOnResource{
				{
					Name: to.Ptr("default"),
					Type: to.Ptr("Microsoft.Logz/monitors"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Logz/monitors/myMonitor/singleSignOnConfigurations/default"),
					Properties: &armlogz.SingleSignOnProperties{
						EnterpriseAppID:   to.Ptr("00000000-0000-0000-0000-000000000000"),
						ProvisioningState: to.Ptr(armlogz.ProvisioningStateSucceeded),
						SingleSignOnState: to.Ptr(armlogz.SingleSignOnStatesEnable),
						SingleSignOnURL:   to.Ptr("https://www.logz.io/IAmSomeHash"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SingleSignOnResourceListResponse) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SingleSignOnResourceListResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/logz/resource-manager/Microsoft.Logz/stable/2020-10-01/examples/SingleSignOnConfigurations_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSingleSignOn_CreateOrUpdate(t *testing.T) {
	// From example specification/logz/resource-manager/Microsoft.Logz/stable/2020-10-01/examples/SingleSignOnConfigurations_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SingleSignOnConfigurations_CreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogz.NewSingleSignOnClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"myResourceGroup",
		"myMonitor",
		"default",
		&armlogz.SingleSignOnClientBeginCreateOrUpdateOptions{Body: nil,
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/logz/resource-manager/Microsoft.Logz/stable/2020-10-01/examples/SingleSignOnConfigurations_CreateOrUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/logz/resource-manager/Microsoft.Logz/stable/2020-10-01/examples/SingleSignOnConfigurations_CreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armlogz.SingleSignOnResource{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Logz/monitors"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Logz/monitors/myMonitor/singleSignOnConfigurations/default"),
			Properties: &armlogz.SingleSignOnProperties{
				EnterpriseAppID:   to.Ptr("00000000-0000-0000-0000-000000000000"),
				ProvisioningState: to.Ptr(armlogz.ProvisioningStateSucceeded),
				SingleSignOnState: to.Ptr(armlogz.SingleSignOnStatesEnable),
				SingleSignOnURL:   to.Ptr("https://www.logz.io/IAmSomeHash"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SingleSignOnResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SingleSignOnResource)
			t.Fatalf("Mock response is not equal to example response for example specification/logz/resource-manager/Microsoft.Logz/stable/2020-10-01/examples/SingleSignOnConfigurations_CreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSingleSignOn_Get(t *testing.T) {
	// From example specification/logz/resource-manager/Microsoft.Logz/stable/2020-10-01/examples/SingleSignOnConfigurations_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SingleSignOnConfigurations_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogz.NewSingleSignOnClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myMonitor",
		"default",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/logz/resource-manager/Microsoft.Logz/stable/2020-10-01/examples/SingleSignOnConfigurations_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armlogz.SingleSignOnResource{
			Name: to.Ptr("default"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Logz/monitors/myMonitor/singleSignOnConfigurations/default"),
			Properties: &armlogz.SingleSignOnProperties{
				EnterpriseAppID:   to.Ptr("00000000-0000-0000-0000-000000000000"),
				ProvisioningState: to.Ptr(armlogz.ProvisioningStateSucceeded),
				SingleSignOnState: to.Ptr(armlogz.SingleSignOnStatesEnable),
				SingleSignOnURL:   to.Ptr("https://www.loz.io/IAmSomeHash"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SingleSignOnResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SingleSignOnResource)
			t.Fatalf("Mock response is not equal to example response for example specification/logz/resource-manager/Microsoft.Logz/stable/2020-10-01/examples/SingleSignOnConfigurations_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSubAccount_List(t *testing.T) {
	// From example specification/logz/resource-manager/Microsoft.Logz/stable/2020-10-01/examples/SubAccount_ListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SubAccount_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogz.NewSubAccountClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.List("myResourceGroup",
		"myMonitor",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/logz/resource-manager/Microsoft.Logz/stable/2020-10-01/examples/SubAccount_ListByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armlogz.MonitorResourceListResponse{
			Value: []*armlogz.MonitorResource{
				{
					Name:     to.Ptr("myMonitor"),
					Type:     to.Ptr("Microsoft.Logz/monitors"),
					ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/monitors/myMonitor/accounts"),
					Location: to.Ptr("West US"),
					Properties: &armlogz.MonitorProperties{
						MonitoringStatus:  to.Ptr(armlogz.MonitoringStatusEnabled),
						ProvisioningState: to.Ptr(armlogz.ProvisioningStateSucceeded),
					},
					Tags: map[string]*string{
						"Environment": to.Ptr("Dev"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.MonitorResourceListResponse) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.MonitorResourceListResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/logz/resource-manager/Microsoft.Logz/stable/2020-10-01/examples/SubAccount_ListByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSubAccount_Create(t *testing.T) {
	// From example specification/logz/resource-manager/Microsoft.Logz/stable/2020-10-01/examples/SubAccount_Create.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"subAccount_Create"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogz.NewSubAccountClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginCreate(ctx,
		"myResourceGroup",
		"myMonitor",
		"SubAccount1",
		&armlogz.SubAccountClientBeginCreateOptions{Body: nil,
			ResumeToken: "",
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/logz/resource-manager/Microsoft.Logz/stable/2020-10-01/examples/SubAccount_Create.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/logz/resource-manager/Microsoft.Logz/stable/2020-10-01/examples/SubAccount_Create.json: %v", err)
	}
	// Response check
	{
		exampleRes := armlogz.MonitorResource{
			Name:     to.Ptr("myMonitor"),
			Type:     to.Ptr("Microsoft.Logz/monitors"),
			ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/monitors/myMonitor/accounts/SubAccount1"),
			Location: to.Ptr("West US 2"),
			Properties: &armlogz.MonitorProperties{
				ProvisioningState: to.Ptr(armlogz.ProvisioningStateSucceeded),
			},
			Tags: map[string]*string{
				"Environment": to.Ptr("Dev"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.MonitorResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.MonitorResource)
			t.Fatalf("Mock response is not equal to example response for example specification/logz/resource-manager/Microsoft.Logz/stable/2020-10-01/examples/SubAccount_Create.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSubAccount_Get(t *testing.T) {
	// From example specification/logz/resource-manager/Microsoft.Logz/stable/2020-10-01/examples/SubAccount_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SubAccount_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogz.NewSubAccountClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myMonitor",
		"SubAccount1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/logz/resource-manager/Microsoft.Logz/stable/2020-10-01/examples/SubAccount_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armlogz.MonitorResource{
			Name:     to.Ptr("myMonitor"),
			Type:     to.Ptr("Microsoft.Logz/monitors"),
			ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/monitors/myMonitor/accounts/SubAccount1"),
			Location: to.Ptr("West US"),
			Properties: &armlogz.MonitorProperties{
				MonitoringStatus:  to.Ptr(armlogz.MonitoringStatusEnabled),
				ProvisioningState: to.Ptr(armlogz.ProvisioningStateSucceeded),
			},
			Tags: map[string]*string{
				"Environment": to.Ptr("Dev"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.MonitorResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.MonitorResource)
			t.Fatalf("Mock response is not equal to example response for example specification/logz/resource-manager/Microsoft.Logz/stable/2020-10-01/examples/SubAccount_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSubAccount_Delete(t *testing.T) {
	// From example specification/logz/resource-manager/Microsoft.Logz/stable/2020-10-01/examples/SubAccount_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SubAccount_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogz.NewSubAccountClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"myResourceGroup",
		"myMonitor",
		"someName",
		&armlogz.SubAccountClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/logz/resource-manager/Microsoft.Logz/stable/2020-10-01/examples/SubAccount_Delete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/logz/resource-manager/Microsoft.Logz/stable/2020-10-01/examples/SubAccount_Delete.json: %v", err)
	}
}

func TestSubAccount_Update(t *testing.T) {
	// From example specification/logz/resource-manager/Microsoft.Logz/stable/2020-10-01/examples/SubAccount_Update.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SubAccount_Update"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogz.NewSubAccountClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Update(ctx,
		"myResourceGroup",
		"myMonitor",
		"SubAccount1",
		&armlogz.SubAccountClientUpdateOptions{Body: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/logz/resource-manager/Microsoft.Logz/stable/2020-10-01/examples/SubAccount_Update.json: %v", err)
	}
	// Response check
	{
		exampleRes := armlogz.MonitorResource{
			Name:     to.Ptr("myMonitor"),
			Type:     to.Ptr("Microsoft.Logz/monitors"),
			ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/monitors/myMonitor/accounts/SubAccount1"),
			Location: to.Ptr("West US"),
			Properties: &armlogz.MonitorProperties{
				MonitoringStatus:  to.Ptr(armlogz.MonitoringStatusEnabled),
				ProvisioningState: to.Ptr(armlogz.ProvisioningStateSucceeded),
			},
			Tags: map[string]*string{
				"Environment": to.Ptr("Dev"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.MonitorResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.MonitorResource)
			t.Fatalf("Mock response is not equal to example response for example specification/logz/resource-manager/Microsoft.Logz/stable/2020-10-01/examples/SubAccount_Update.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSubAccount_ListMonitoredResources(t *testing.T) {
	// From example specification/logz/resource-manager/Microsoft.Logz/stable/2020-10-01/examples/SubAccount_MonitoredResources_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SubAccount_MonitoredResources_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogz.NewSubAccountClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.ListMonitoredResources("myResourceGroup",
		"myMonitor",
		"SubAccount1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/logz/resource-manager/Microsoft.Logz/stable/2020-10-01/examples/SubAccount_MonitoredResources_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armlogz.MonitoredResourceListResponse{
			Value: []*armlogz.MonitoredResource{
				{
					ID:                     to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/monitors/myMonitor/accounts/SubAccount1/listMonitoredResources"),
					ReasonForLogsStatus:    to.Ptr("CapturedByRules"),
					ReasonForMetricsStatus: to.Ptr("CapturedByRules"),
					SendingLogs:            to.Ptr(true),
					SendingMetrics:         to.Ptr(true),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.MonitoredResourceListResponse) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.MonitoredResourceListResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/logz/resource-manager/Microsoft.Logz/stable/2020-10-01/examples/SubAccount_MonitoredResources_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSubAccount_VMHostPayload(t *testing.T) {
	// From example specification/logz/resource-manager/Microsoft.Logz/stable/2020-10-01/examples/SubAccount_VMHosts_Payload.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SubAccount_VMHosts_Payload"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogz.NewSubAccountClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.VMHostPayload(ctx,
		"myResourceGroup",
		"myMonitor",
		"SubAccount1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/logz/resource-manager/Microsoft.Logz/stable/2020-10-01/examples/SubAccount_VMHosts_Payload.json: %v", err)
	}
	// Response check
	{
		exampleRes := armlogz.VMExtensionPayload{
			APIKey: to.Ptr("00000000-0000-0000-0000-000000000000"),
			Region: to.Ptr("West US 2"),
		}
		if !reflect.DeepEqual(exampleRes, res.VMExtensionPayload) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VMExtensionPayload)
			t.Fatalf("Mock response is not equal to example response for example specification/logz/resource-manager/Microsoft.Logz/stable/2020-10-01/examples/SubAccount_VMHosts_Payload.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSubAccount_ListVMHosts(t *testing.T) {
	// From example specification/logz/resource-manager/Microsoft.Logz/stable/2020-10-01/examples/SubAccount_VMHosts_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SubAccount_VMHosts_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogz.NewSubAccountClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.ListVMHosts("myResourceGroup",
		"myMonitor",
		"SubAccount1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/logz/resource-manager/Microsoft.Logz/stable/2020-10-01/examples/SubAccount_VMHosts_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armlogz.VMResourcesListResponse{
			Value: []*armlogz.VMResources{
				{
					AgentVersion: to.Ptr("1.0.0beta"),
					ID:           to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/virtual1"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.VMResourcesListResponse) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.VMResourcesListResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/logz/resource-manager/Microsoft.Logz/stable/2020-10-01/examples/SubAccount_VMHosts_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSubAccountTagRules_List(t *testing.T) {
	// From example specification/logz/resource-manager/Microsoft.Logz/stable/2020-10-01/examples/SubAccountTagRules_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SubAccountTagRules_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogz.NewSubAccountTagRulesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.List("myResourceGroup",
		"myMonitor",
		"SubAccount1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/logz/resource-manager/Microsoft.Logz/stable/2020-10-01/examples/SubAccountTagRules_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armlogz.MonitoringTagRulesListResponse{
			Value: []*armlogz.MonitoringTagRules{
				{
					Name: to.Ptr("default"),
					Type: to.Ptr("Microsoft.Logz/monitors/tagRules"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Logz/monitors/myMonitor/accounts/subAccount1/tagRules/default"),
					Properties: &armlogz.MonitoringTagRulesProperties{
						LogRules: &armlogz.LogRules{
							FilteringTags: []*armlogz.FilteringTag{
								{
									Name:   to.Ptr("Environment"),
									Action: to.Ptr(armlogz.TagActionInclude),
									Value:  to.Ptr("Prod"),
								},
								{
									Name:   to.Ptr("Environment"),
									Action: to.Ptr(armlogz.TagActionExclude),
									Value:  to.Ptr("Dev"),
								}},
							SendAADLogs:          to.Ptr(false),
							SendActivityLogs:     to.Ptr(true),
							SendSubscriptionLogs: to.Ptr(true),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.MonitoringTagRulesListResponse) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.MonitoringTagRulesListResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/logz/resource-manager/Microsoft.Logz/stable/2020-10-01/examples/SubAccountTagRules_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSubAccountTagRules_CreateOrUpdate(t *testing.T) {
	// From example specification/logz/resource-manager/Microsoft.Logz/stable/2020-10-01/examples/SubAccountTagRules_CreateOrUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SubAccountTagRules_CreateOrUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogz.NewSubAccountTagRulesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.CreateOrUpdate(ctx,
		"myResourceGroup",
		"myMonitor",
		"SubAccount1",
		"default",
		&armlogz.SubAccountTagRulesClientCreateOrUpdateOptions{Body: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/logz/resource-manager/Microsoft.Logz/stable/2020-10-01/examples/SubAccountTagRules_CreateOrUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armlogz.MonitoringTagRules{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Logz/monitors/tagRules"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Logz/monitors/myMonitor/accounts/SubAccount1/tagRules/default"),
			Properties: &armlogz.MonitoringTagRulesProperties{
				LogRules: &armlogz.LogRules{
					FilteringTags: []*armlogz.FilteringTag{
						{
							Name:   to.Ptr("Environment"),
							Action: to.Ptr(armlogz.TagActionInclude),
							Value:  to.Ptr("Prod"),
						},
						{
							Name:   to.Ptr("Environment"),
							Action: to.Ptr(armlogz.TagActionExclude),
							Value:  to.Ptr("Dev"),
						}},
					SendAADLogs:          to.Ptr(false),
					SendActivityLogs:     to.Ptr(true),
					SendSubscriptionLogs: to.Ptr(true),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.MonitoringTagRules) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.MonitoringTagRules)
			t.Fatalf("Mock response is not equal to example response for example specification/logz/resource-manager/Microsoft.Logz/stable/2020-10-01/examples/SubAccountTagRules_CreateOrUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSubAccountTagRules_Get(t *testing.T) {
	// From example specification/logz/resource-manager/Microsoft.Logz/stable/2020-10-01/examples/SubAccountTagRules_Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SubAccountTagRules_Get"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogz.NewSubAccountTagRulesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		"myResourceGroup",
		"myMonitor",
		"SubAccount1",
		"default",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/logz/resource-manager/Microsoft.Logz/stable/2020-10-01/examples/SubAccountTagRules_Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armlogz.MonitoringTagRules{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Logz/monitors/tagRules"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Logz/monitors/myMonitor/tagRules/default"),
			Properties: &armlogz.MonitoringTagRulesProperties{
				LogRules: &armlogz.LogRules{
					FilteringTags: []*armlogz.FilteringTag{
						{
							Name:   to.Ptr("Environment"),
							Action: to.Ptr(armlogz.TagActionInclude),
							Value:  to.Ptr("Prod"),
						},
						{
							Name:   to.Ptr("Environment"),
							Action: to.Ptr(armlogz.TagActionExclude),
							Value:  to.Ptr("Dev"),
						}},
					SendAADLogs:          to.Ptr(false),
					SendActivityLogs:     to.Ptr(true),
					SendSubscriptionLogs: to.Ptr(true),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.MonitoringTagRules) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.MonitoringTagRules)
			t.Fatalf("Mock response is not equal to example response for example specification/logz/resource-manager/Microsoft.Logz/stable/2020-10-01/examples/SubAccountTagRules_Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSubAccountTagRules_Delete(t *testing.T) {
	// From example specification/logz/resource-manager/Microsoft.Logz/stable/2020-10-01/examples/SubAccountTagRules_Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"TagRules_Delete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogz.NewSubAccountTagRulesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	_, err := client.Delete(ctx,
		"myResourceGroup",
		"myMonitor",
		"SubAccount1",
		"default",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/logz/resource-manager/Microsoft.Logz/stable/2020-10-01/examples/SubAccountTagRules_Delete.json: %v", err)
	}
}

func TestMonitor_VMHostPayload(t *testing.T) {
	// From example specification/logz/resource-manager/Microsoft.Logz/stable/2020-10-01/examples/MainAccount_VMHosts_Payload.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"MainAccount_VMHosts_Payload"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogz.NewMonitorClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.VMHostPayload(ctx,
		"myResourceGroup",
		"myMonitor",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/logz/resource-manager/Microsoft.Logz/stable/2020-10-01/examples/MainAccount_VMHosts_Payload.json: %v", err)
	}
	// Response check
	{
		exampleRes := armlogz.VMExtensionPayload{
			APIKey: to.Ptr("00000000-0000-0000-0000-000000000000"),
			Region: to.Ptr("West US 2"),
		}
		if !reflect.DeepEqual(exampleRes, res.VMExtensionPayload) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.VMExtensionPayload)
			t.Fatalf("Mock response is not equal to example response for example specification/logz/resource-manager/Microsoft.Logz/stable/2020-10-01/examples/MainAccount_VMHosts_Payload.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestMonitor_ListVMHosts(t *testing.T) {
	// From example specification/logz/resource-manager/Microsoft.Logz/stable/2020-10-01/examples/MainAccount_VMHosts_List.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"MainAccount_VMHosts_List"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armlogz.NewMonitorClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.ListVMHosts("myResourceGroup",
		"myMonitor",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/logz/resource-manager/Microsoft.Logz/stable/2020-10-01/examples/MainAccount_VMHosts_List.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armlogz.VMResourcesListResponse{
			Value: []*armlogz.VMResources{
				{
					AgentVersion: to.Ptr("1.0.0beta"),
					ID:           to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/virtual1"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.VMResourcesListResponse) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.VMResourcesListResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/logz/resource-manager/Microsoft.Logz/stable/2020-10-01/examples/MainAccount_VMHosts_List.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
