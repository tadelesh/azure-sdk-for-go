//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armmanagedservices_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/managedservices/armmanagedservices"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestRegistrationDefinitions_Get(t *testing.T) {
	// From example specification/managedservices/resource-manager/Microsoft.ManagedServices/preview/2020-02-01-preview/examples/GetRegistrationDefinition.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Registration Definition"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmanagedservices.NewRegistrationDefinitionsClient(cred, &options)
	res, err := client.Get(ctx,
		"subscription/0afefe50-734e-4610-8a82-a144ahf49dea",
		"26c128c2-fefa-4340-9bb1-6e081c90ada2",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/managedservices/resource-manager/Microsoft.ManagedServices/preview/2020-02-01-preview/examples/GetRegistrationDefinition.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmanagedservices.RegistrationDefinition{
			Name: to.Ptr("26c128c2-fefa-4340-9bb1-6e081c90ada2"),
			Type: to.Ptr("Microsoft.ManagedServices/registrationDefinitions"),
			ID:   to.Ptr("/subscriptions/0afefe50-734e-4610-8a82-a144ahf49dea/providers/Microsoft.ManagedServices/registrationDefinitions/26c128c2-fefa-4340-9bb1-6e081c90ada2"),
			Plan: &armmanagedservices.Plan{
				Name:      to.Ptr("addesai-plan"),
				Product:   to.Ptr("test"),
				Publisher: to.Ptr("marketplace-test"),
				Version:   to.Ptr("1.0.0"),
			},
			Properties: &armmanagedservices.RegistrationDefinitionProperties{
				Description: to.Ptr("Test"),
				Authorizations: []*armmanagedservices.Authorization{
					{
						PrincipalID:            to.Ptr("f98g86a2-4cc4-4e6d-ad47-b3e80a1bcdfc"),
						PrincipalIDDisplayName: to.Ptr("Support User"),
						RoleDefinitionID:       to.Ptr("acdd72a7-3385-48ef-bd42-f606fba81ae7"),
					},
					{
						DelegatedRoleDefinitionIDs: []*string{
							to.Ptr("b24988ac-6180-42a0-ab88-20f7382dd24c")},
						PrincipalID:            to.Ptr("f98d86a2-4cc4-4e9d-ad47-b3e80a1bcdfc"),
						PrincipalIDDisplayName: to.Ptr("User Access Administrator"),
						RoleDefinitionID:       to.Ptr("18d7d88d-d35e-4fb5-a5c3-7773c20a72d9"),
					}},
				EligibleAuthorizations: []*armmanagedservices.EligibleAuthorization{
					{
						JustInTimeAccessPolicy: &armmanagedservices.JustInTimeAccessPolicy{
							ManagedByTenantApprovers: []*armmanagedservices.EligibleApprover{
								{
									PrincipalID:            to.Ptr("d9b22cd6-6407-43cc-8c60-07c56df0b51a"),
									PrincipalIDDisplayName: to.Ptr("Approver Group"),
								}},
							MaximumActivationDuration: to.Ptr("PT8H"),
							MultiFactorAuthProvider:   to.Ptr(armmanagedservices.MultiFactorAuthProviderAzure),
						},
						PrincipalID:            to.Ptr("3e0ed8c6-e902-4fc5-863c-e3ddbb2ae2a2"),
						PrincipalIDDisplayName: to.Ptr("Support User"),
						RoleDefinitionID:       to.Ptr("ae349356-3a1b-4a5e-921d-050484c6347e"),
					}},
				ManagedByTenantID:          to.Ptr("83ace5cd-bcc3-441a-hd86-e6a75360cecc"),
				ManagedByTenantName:        to.Ptr("Test Tenant"),
				ManageeTenantID:            to.Ptr("0e06d6a3-55ae-40a3-ac29-350808980808"),
				ManageeTenantName:          to.Ptr("Test customer"),
				ProvisioningState:          to.Ptr(armmanagedservices.ProvisioningStateSucceeded),
				RegistrationDefinitionName: to.Ptr("DefinitionName"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RegistrationDefinition) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RegistrationDefinition)
			t.Fatalf("Mock response is not equal to example response for example specification/managedservices/resource-manager/Microsoft.ManagedServices/preview/2020-02-01-preview/examples/GetRegistrationDefinition.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRegistrationDefinitions_Delete(t *testing.T) {
	// From example specification/managedservices/resource-manager/Microsoft.ManagedServices/preview/2020-02-01-preview/examples/DeleteRegistrationDefinition.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete Registration Definition"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmanagedservices.NewRegistrationDefinitionsClient(cred, &options)
	_, err := client.Delete(ctx,
		"26c128c2-fefa-4340-9bb1-6e081c90ada2",
		"subscription/0afefe50-734e-4610-8a82-a144ahf49dea",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/managedservices/resource-manager/Microsoft.ManagedServices/preview/2020-02-01-preview/examples/DeleteRegistrationDefinition.json: %v", err)
	}
}

func TestRegistrationDefinitions_CreateOrUpdate(t *testing.T) {
	// From example specification/managedservices/resource-manager/Microsoft.ManagedServices/preview/2020-02-01-preview/examples/PutRegistrationDefinition.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Put Registration Definition"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmanagedservices.NewRegistrationDefinitionsClient(cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"26c128c2-fefa-4340-9bb1-6e081c90ada2",
		"subscription/0afefe50-734e-4610-8a82-a144ahf49dea",
		armmanagedservices.RegistrationDefinition{
			Plan: &armmanagedservices.Plan{
				Name:      to.Ptr("addesai-plan"),
				Product:   to.Ptr("test"),
				Publisher: to.Ptr("marketplace-test"),
				Version:   to.Ptr("1.0.0"),
			},
			Properties: &armmanagedservices.RegistrationDefinitionProperties{
				Description: to.Ptr("Tes1t"),
				Authorizations: []*armmanagedservices.Authorization{
					{
						PrincipalID:            to.Ptr("f98d86a2-4cc4-4e9d-ad47-b3e80a1bcdfc"),
						PrincipalIDDisplayName: to.Ptr("Support User"),
						RoleDefinitionID:       to.Ptr("acdd72a7-3385-48ef-bd42-f606fba81ae7"),
					},
					{
						DelegatedRoleDefinitionIDs: []*string{
							to.Ptr("b24988ac-6180-42a0-ab88-20f7382dd24c")},
						PrincipalID:            to.Ptr("f98d86a2-4cc4-4e9d-ad47-b3e80a1bcdfc"),
						PrincipalIDDisplayName: to.Ptr("User Access Administrator"),
						RoleDefinitionID:       to.Ptr("18d7d88d-d35e-4fb5-a5c3-7773c20a72d9"),
					}},
				EligibleAuthorizations: []*armmanagedservices.EligibleAuthorization{
					{
						JustInTimeAccessPolicy: &armmanagedservices.JustInTimeAccessPolicy{
							ManagedByTenantApprovers: []*armmanagedservices.EligibleApprover{
								{
									PrincipalID:            to.Ptr("d9b22cd6-6407-43cc-8c60-07c56df0b51a"),
									PrincipalIDDisplayName: to.Ptr("Approver Group"),
								}},
							MaximumActivationDuration: to.Ptr("PT8H"),
							MultiFactorAuthProvider:   to.Ptr(armmanagedservices.MultiFactorAuthProviderAzure),
						},
						PrincipalID:            to.Ptr("3e0ed8c6-e902-4fc5-863c-e3ddbb2ae2a2"),
						PrincipalIDDisplayName: to.Ptr("Support User"),
						RoleDefinitionID:       to.Ptr("ae349356-3a1b-4a5e-921d-050484c6347e"),
					}},
				ManagedByTenantID:          to.Ptr("83abe5cd-bcc3-441a-bd86-e6a75360cecc"),
				RegistrationDefinitionName: to.Ptr("DefinitionName"),
			},
		},
		&armmanagedservices.RegistrationDefinitionsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/managedservices/resource-manager/Microsoft.ManagedServices/preview/2020-02-01-preview/examples/PutRegistrationDefinition.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/managedservices/resource-manager/Microsoft.ManagedServices/preview/2020-02-01-preview/examples/PutRegistrationDefinition.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmanagedservices.RegistrationDefinition{
			Name: to.Ptr("26c128c2-fefa-4340-9bb1-6e081c90ada2"),
			Type: to.Ptr("Microsoft.ManagedServices/registrationDefinitions"),
			ID:   to.Ptr("/subscriptions/0afefe50-734e-4610-8a82-a144ahf49dea/providers/Microsoft.ManagedServices/registrationDefinitions/26c128c2-fefa-4340-9bb1-6e081c90ada2"),
			Plan: &armmanagedservices.Plan{
				Name:      to.Ptr("addesai-plan"),
				Product:   to.Ptr("test"),
				Publisher: to.Ptr("marketplace-test"),
				Version:   to.Ptr("1.0.0"),
			},
			Properties: &armmanagedservices.RegistrationDefinitionProperties{
				Description: to.Ptr("Test"),
				Authorizations: []*armmanagedservices.Authorization{
					{
						PrincipalID:            to.Ptr("f98g86a2-4cc4-4e6d-ad47-b3e80a1bcdfc"),
						PrincipalIDDisplayName: to.Ptr("Support User"),
						RoleDefinitionID:       to.Ptr("acdd72a7-3385-48ef-bd42-f606fba81ae7"),
					},
					{
						DelegatedRoleDefinitionIDs: []*string{
							to.Ptr("b24988ac-6180-42a0-ab88-20f7382dd24c")},
						PrincipalID:            to.Ptr("f98d86a2-4cc4-4e9d-ad47-b3e80a1bcdfc"),
						PrincipalIDDisplayName: to.Ptr("User Access Administrator"),
						RoleDefinitionID:       to.Ptr("18d7d88d-d35e-4fb5-a5c3-7773c20a72d9"),
					}},
				EligibleAuthorizations: []*armmanagedservices.EligibleAuthorization{
					{
						JustInTimeAccessPolicy: &armmanagedservices.JustInTimeAccessPolicy{
							ManagedByTenantApprovers: []*armmanagedservices.EligibleApprover{
								{
									PrincipalID:            to.Ptr("d9b22cd6-6407-43cc-8c60-07c56df0b51a"),
									PrincipalIDDisplayName: to.Ptr("Approver Group"),
								}},
							MaximumActivationDuration: to.Ptr("PT8H"),
							MultiFactorAuthProvider:   to.Ptr(armmanagedservices.MultiFactorAuthProviderAzure),
						},
						PrincipalID:            to.Ptr("3e0ed8c6-e902-4fc5-863c-e3ddbb2ae2a2"),
						PrincipalIDDisplayName: to.Ptr("Support User"),
						RoleDefinitionID:       to.Ptr("ae349356-3a1b-4a5e-921d-050484c6347e"),
					}},
				ManagedByTenantID:          to.Ptr("83ace5cd-bcc3-441a-hd86-e6a75360cecc"),
				ManagedByTenantName:        to.Ptr("Test Tenant"),
				ProvisioningState:          to.Ptr(armmanagedservices.ProvisioningStateSucceeded),
				RegistrationDefinitionName: to.Ptr("DefinitionName"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RegistrationDefinition) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RegistrationDefinition)
			t.Fatalf("Mock response is not equal to example response for example specification/managedservices/resource-manager/Microsoft.ManagedServices/preview/2020-02-01-preview/examples/PutRegistrationDefinition.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRegistrationDefinitions_List(t *testing.T) {
	// From example specification/managedservices/resource-manager/Microsoft.ManagedServices/preview/2020-02-01-preview/examples/GetRegistrationDefinitions.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Registration Definitions"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmanagedservices.NewRegistrationDefinitionsClient(cred, &options)
	pager := client.List("subscription/0afefe50-734e-4610-8a82-a144ahf49dea",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/managedservices/resource-manager/Microsoft.ManagedServices/preview/2020-02-01-preview/examples/GetRegistrationDefinitions.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmanagedservices.RegistrationDefinitionList{
			Value: []*armmanagedservices.RegistrationDefinition{
				{
					Name: to.Ptr("26c128c2-fefa-4340-9bb1-6e081c90ada2"),
					Type: to.Ptr("Microsoft.ManagedServices/registrationDefinitions"),
					ID:   to.Ptr("/subscriptions/0afefe50-734e-4610-8a82-a144ahf49dea/providers/Microsoft.ManagedServices/registrationDefinitions/26c128c2-fefa-4340-9bb1-6e081c90ada2"),
					Plan: &armmanagedservices.Plan{
						Name:      to.Ptr("addesai-plan"),
						Product:   to.Ptr("test"),
						Publisher: to.Ptr("marketplace-test"),
						Version:   to.Ptr("1.0.0"),
					},
					Properties: &armmanagedservices.RegistrationDefinitionProperties{
						Description: to.Ptr("Test"),
						Authorizations: []*armmanagedservices.Authorization{
							{
								PrincipalID:            to.Ptr("f98g86a2-4cc4-4e6d-ad47-b3e80a1bcdfc"),
								PrincipalIDDisplayName: to.Ptr("Support User"),
								RoleDefinitionID:       to.Ptr("acdd72a7-3385-48ef-bd42-f606fba81ae7"),
							},
							{
								DelegatedRoleDefinitionIDs: []*string{
									to.Ptr("b24988ac-6180-42a0-ab88-20f7382dd24c")},
								PrincipalID:            to.Ptr("f98d86a2-4cc4-4e9d-ad47-b3e80a1bcdfc"),
								PrincipalIDDisplayName: to.Ptr("User Access Administrator"),
								RoleDefinitionID:       to.Ptr("18d7d88d-d35e-4fb5-a5c3-7773c20a72d9"),
							}},
						EligibleAuthorizations: []*armmanagedservices.EligibleAuthorization{
							{
								JustInTimeAccessPolicy: &armmanagedservices.JustInTimeAccessPolicy{
									ManagedByTenantApprovers: []*armmanagedservices.EligibleApprover{
										{
											PrincipalID:            to.Ptr("d9b22cd6-6407-43cc-8c60-07c56df0b51a"),
											PrincipalIDDisplayName: to.Ptr("Approver Group"),
										}},
									MaximumActivationDuration: to.Ptr("PT8H"),
									MultiFactorAuthProvider:   to.Ptr(armmanagedservices.MultiFactorAuthProviderAzure),
								},
								PrincipalID:            to.Ptr("3e0ed8c6-e902-4fc5-863c-e3ddbb2ae2a2"),
								PrincipalIDDisplayName: to.Ptr("Support User"),
								RoleDefinitionID:       to.Ptr("ae349356-3a1b-4a5e-921d-050484c6347e"),
							}},
						ManagedByTenantID:          to.Ptr("83ace5cd-bcc3-441a-hd86-e6a75360cecc"),
						ManagedByTenantName:        to.Ptr("Test Tenant"),
						ManageeTenantID:            to.Ptr("0e06d6a3-55ae-40a3-ac29-350808980808"),
						ManageeTenantName:          to.Ptr("Test customer"),
						ProvisioningState:          to.Ptr(armmanagedservices.ProvisioningStateSucceeded),
						RegistrationDefinitionName: to.Ptr("DefinitionName"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.RegistrationDefinitionList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.RegistrationDefinitionList)
			t.Fatalf("Mock response is not equal to example response for example specification/managedservices/resource-manager/Microsoft.ManagedServices/preview/2020-02-01-preview/examples/GetRegistrationDefinitions.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRegistrationAssignments_Get(t *testing.T) {
	// From example specification/managedservices/resource-manager/Microsoft.ManagedServices/preview/2020-02-01-preview/examples/GetRegistrationAssignment.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Registration Assignment"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmanagedservices.NewRegistrationAssignmentsClient(cred, &options)
	res, err := client.Get(ctx,
		"subscription/0afefe50-734e-4610-8a82-a144ahf49dea",
		"26c128c2-fefa-4340-9bb1-6e081c90ada2",
		&armmanagedservices.RegistrationAssignmentsClientGetOptions{ExpandRegistrationDefinition: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/managedservices/resource-manager/Microsoft.ManagedServices/preview/2020-02-01-preview/examples/GetRegistrationAssignment.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmanagedservices.RegistrationAssignment{
			Name: to.Ptr("484a7d5f-9729-4b87-bc9b-26610985a013"),
			Type: to.Ptr("Microsoft.ManagedServices/registrationAssignments"),
			ID:   to.Ptr("/subscriptions/0afefe50-734e-4610-8c82-a144aff49dea/providers/Microsoft.ManagedServices/registrationAssignments/484a7d5f-9729-4b87-bc9b-26610985a013"),
			Properties: &armmanagedservices.RegistrationAssignmentProperties{
				ProvisioningState: to.Ptr(armmanagedservices.ProvisioningStateSucceeded),
				RegistrationDefinition: &armmanagedservices.RegistrationAssignmentPropertiesRegistrationDefinition{
					Name: to.Ptr("26c128c2-fefa-4340-9bb1-8e081c90ada2"),
					Type: to.Ptr("Microsoft.ManagedServices/registrationDefinitions"),
					ID:   to.Ptr("/subscriptions/0afefe50-734e-4610-8c82-a144aff49dea/providers/Microsoft.ManagedServices/registrationDefinitions/26c128c2-fefa-4340-9bb1-8e081c90ada2"),
					Plan: &armmanagedservices.Plan{
						Name:      to.Ptr("addesai-plan"),
						Product:   to.Ptr("test"),
						Publisher: to.Ptr("marketplace-test"),
						Version:   to.Ptr("1.0.0"),
					},
					Properties: &armmanagedservices.RegistrationAssignmentPropertiesRegistrationDefinitionProperties{
						Description: to.Ptr("Test"),
						Authorizations: []*armmanagedservices.Authorization{
							{
								PrincipalID:            to.Ptr("f98d86a2-4cc4-4e9d-ad47-b3e80a1bcdfc"),
								PrincipalIDDisplayName: to.Ptr("Support User"),
								RoleDefinitionID:       to.Ptr("acdd72a7-3385-48ef-bd42-f606fba81ae7"),
							},
							{
								DelegatedRoleDefinitionIDs: []*string{
									to.Ptr("b24988ac-6180-42a0-ab88-20f7382dd24c")},
								PrincipalID:            to.Ptr("f98d86a2-4cc4-4e9d-ad47-b3e80a1bcdfc"),
								PrincipalIDDisplayName: to.Ptr("User Access Administrator"),
								RoleDefinitionID:       to.Ptr("18d7d88d-d35e-4fb5-a5c3-7773c20a72d9"),
							}},
						EligibleAuthorizations: []*armmanagedservices.EligibleAuthorization{
							{
								JustInTimeAccessPolicy: &armmanagedservices.JustInTimeAccessPolicy{
									MaximumActivationDuration: to.Ptr("PT8H"),
									MultiFactorAuthProvider:   to.Ptr(armmanagedservices.MultiFactorAuthProviderAzure),
								},
								PrincipalID:            to.Ptr("3e0ed8c6-e902-4fc5-863c-e3ddbb2ae2a2"),
								PrincipalIDDisplayName: to.Ptr("Support User"),
								RoleDefinitionID:       to.Ptr("ae349356-3a1b-4a5e-921d-050484c6347e"),
							}},
						ManagedByTenantID:          to.Ptr("83abe5cd-bcc3-441a-bd86-e6a75360cecc"),
						ManagedByTenantName:        to.Ptr("Contoso Corp."),
						ManageeTenantID:            to.Ptr("01c0bcd5-4f47-4e4b-b492-418b7e2a8854"),
						ManageeTenantName:          to.Ptr("test_test_aad_SbtFhyGiLHPFm"),
						ProvisioningState:          to.Ptr(armmanagedservices.ProvisioningStateSucceeded),
						RegistrationDefinitionName: to.Ptr("DefinitionName"),
					},
				},
				RegistrationDefinitionID: to.Ptr("/subscriptions/0afefe50-734e-4610-8c82-a144aff49dea/providers/Microsoft.ManagedServices/registrationDefinitions/26c128c2-fefa-4340-9bb1-8e081c90ada2"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RegistrationAssignment) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RegistrationAssignment)
			t.Fatalf("Mock response is not equal to example response for example specification/managedservices/resource-manager/Microsoft.ManagedServices/preview/2020-02-01-preview/examples/GetRegistrationAssignment.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRegistrationAssignments_Delete(t *testing.T) {
	// From example specification/managedservices/resource-manager/Microsoft.ManagedServices/preview/2020-02-01-preview/examples/DeleteRegistrationAssignment.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete Registration Assignment"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmanagedservices.NewRegistrationAssignmentsClient(cred, &options)
	poller, err := client.BeginDelete(ctx,
		"subscription/0afefe50-734e-4610-8a82-a144ahf49dea",
		"26c128c2-fefa-4340-9bb1-6e081c90ada2",
		&armmanagedservices.RegistrationAssignmentsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/managedservices/resource-manager/Microsoft.ManagedServices/preview/2020-02-01-preview/examples/DeleteRegistrationAssignment.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/managedservices/resource-manager/Microsoft.ManagedServices/preview/2020-02-01-preview/examples/DeleteRegistrationAssignment.json: %v", err)
	}
}

func TestRegistrationAssignments_CreateOrUpdate(t *testing.T) {
	// From example specification/managedservices/resource-manager/Microsoft.ManagedServices/preview/2020-02-01-preview/examples/PutRegistrationAssignment.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Put Registration Assignment"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmanagedservices.NewRegistrationAssignmentsClient(cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"subscription/0afefe50-734e-4610-8a82-a144ahf49dea",
		"26c128c2-fefa-4340-9bb1-6e081c90ada2",
		armmanagedservices.RegistrationAssignment{
			Properties: &armmanagedservices.RegistrationAssignmentProperties{
				RegistrationDefinitionID: to.Ptr("/subscriptions/0afefe50-734e-4610-8a82-a144ahf49dea/providers/Microsoft.ManagedServices/registrationDefinitions/26c128c2-fefa-4340-9bb1-6e081c90ada2"),
			},
		},
		&armmanagedservices.RegistrationAssignmentsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/managedservices/resource-manager/Microsoft.ManagedServices/preview/2020-02-01-preview/examples/PutRegistrationAssignment.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/managedservices/resource-manager/Microsoft.ManagedServices/preview/2020-02-01-preview/examples/PutRegistrationAssignment.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmanagedservices.RegistrationAssignment{
			Name: to.Ptr("484a7d5f-9729-4b87-bc9b-26610985a013"),
			Type: to.Ptr("Microsoft.ManagedServices/registrationAssignments"),
			ID:   to.Ptr("/subscriptions/0afefe50-734e-4610-8c82-a144aff49dea/providers/Microsoft.ManagedServices/registrationAssignments/484a7d5f-9729-4b87-bc9b-26610985a013"),
			Properties: &armmanagedservices.RegistrationAssignmentProperties{
				ProvisioningState:        to.Ptr(armmanagedservices.ProvisioningStateSucceeded),
				RegistrationDefinitionID: to.Ptr("/subscriptions/0afefe50-734e-4610-8c82-a144aff49dea/providers/Microsoft.ManagedServices/registrationDefinitions/26c128c2-fefa-4340-9bb1-8e081c90ada2"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RegistrationAssignment) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RegistrationAssignment)
			t.Fatalf("Mock response is not equal to example response for example specification/managedservices/resource-manager/Microsoft.ManagedServices/preview/2020-02-01-preview/examples/PutRegistrationAssignment.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRegistrationAssignments_List(t *testing.T) {
	// From example specification/managedservices/resource-manager/Microsoft.ManagedServices/preview/2020-02-01-preview/examples/GetRegistrationAssignments.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Registration Assignments"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmanagedservices.NewRegistrationAssignmentsClient(cred, &options)
	pager := client.List("subscription/0afefe50-734e-4610-8a82-a144ahf49dea",
		&armmanagedservices.RegistrationAssignmentsClientListOptions{ExpandRegistrationDefinition: nil})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/managedservices/resource-manager/Microsoft.ManagedServices/preview/2020-02-01-preview/examples/GetRegistrationAssignments.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmanagedservices.RegistrationAssignmentList{
			Value: []*armmanagedservices.RegistrationAssignment{
				{
					Name: to.Ptr("484a7d5f-9729-4b87-bc9b-26610985a013"),
					Type: to.Ptr("Microsoft.ManagedServices/registrationAssignments"),
					ID:   to.Ptr("/subscriptions/0afefe50-734e-4610-8c82-a144aff49dea/providers/Microsoft.ManagedServices/registrationAssignments/484a7d5f-9729-4b87-bc9b-26610985a013"),
					Properties: &armmanagedservices.RegistrationAssignmentProperties{
						ProvisioningState: to.Ptr(armmanagedservices.ProvisioningStateSucceeded),
						RegistrationDefinition: &armmanagedservices.RegistrationAssignmentPropertiesRegistrationDefinition{
							Name: to.Ptr("26c128c2-fefa-4340-9bb1-8e081c90ada2"),
							Type: to.Ptr("Microsoft.ManagedServices/registrationDefinitions"),
							ID:   to.Ptr("/subscriptions/0afefe50-734e-4610-8c82-a144aff49dea/providers/Microsoft.ManagedServices/registrationDefinitions/26c128c2-fefa-4340-9bb1-8e081c90ada2"),
							Plan: &armmanagedservices.Plan{
								Name:      to.Ptr("addesai-plan"),
								Product:   to.Ptr("test"),
								Publisher: to.Ptr("marketplace-test"),
								Version:   to.Ptr("1.0.0"),
							},
							Properties: &armmanagedservices.RegistrationAssignmentPropertiesRegistrationDefinitionProperties{
								Description: to.Ptr("Test"),
								Authorizations: []*armmanagedservices.Authorization{
									{
										PrincipalID:            to.Ptr("f98d86a2-4cc4-4e9d-ad47-b3e80a1bcdfc"),
										PrincipalIDDisplayName: to.Ptr("Support User"),
										RoleDefinitionID:       to.Ptr("acdd72a7-3385-48ef-bd42-f606fba81ae7"),
									},
									{
										DelegatedRoleDefinitionIDs: []*string{
											to.Ptr("b24988ac-6180-42a0-ab88-20f7382dd24c")},
										PrincipalID:            to.Ptr("f98d86a2-4cc4-4e9d-ad47-b3e80a1bcdfc"),
										PrincipalIDDisplayName: to.Ptr("User Access Administrator"),
										RoleDefinitionID:       to.Ptr("18d7d88d-d35e-4fb5-a5c3-7773c20a72d9"),
									}},
								EligibleAuthorizations: []*armmanagedservices.EligibleAuthorization{
									{
										JustInTimeAccessPolicy: &armmanagedservices.JustInTimeAccessPolicy{
											MaximumActivationDuration: to.Ptr("PT8H"),
											MultiFactorAuthProvider:   to.Ptr(armmanagedservices.MultiFactorAuthProviderAzure),
										},
										PrincipalID:      to.Ptr("700bddf4-2c3b-4cd1-bb02-6a2c622524f4"),
										RoleDefinitionID: to.Ptr("8e3af657-a8ff-443c-a75c-2fe8c4bcb635"),
									}},
								ManagedByTenantID:          to.Ptr("83abe5cd-bcc3-441a-bd86-e6a75360cecc"),
								ManagedByTenantName:        to.Ptr("Contoso Corp."),
								ManageeTenantID:            to.Ptr("01c0bcd5-4f47-4e4b-b492-418b7e2a8854"),
								ManageeTenantName:          to.Ptr("test_test_aad_SbtFhyGiLHPFm"),
								ProvisioningState:          to.Ptr(armmanagedservices.ProvisioningStateSucceeded),
								RegistrationDefinitionName: to.Ptr("DefinitionName"),
							},
						},
						RegistrationDefinitionID: to.Ptr("/subscriptions/0afefe50-734e-4610-8c82-a144aff49dea/providers/Microsoft.ManagedServices/registrationDefinitions/26c128c2-fefa-4340-9bb1-8e081c90ada2"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.RegistrationAssignmentList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.RegistrationAssignmentList)
			t.Fatalf("Mock response is not equal to example response for example specification/managedservices/resource-manager/Microsoft.ManagedServices/preview/2020-02-01-preview/examples/GetRegistrationAssignments.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestMarketplaceRegistrationDefinitions_List(t *testing.T) {
	// From example specification/managedservices/resource-manager/Microsoft.ManagedServices/preview/2020-02-01-preview/examples/GetMarketplaceRegistrationDefinitions.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Registration Definitions"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmanagedservices.NewMarketplaceRegistrationDefinitionsClient(cred, &options)
	pager := client.List("subscription/0afefe50-734e-4610-8a82-a144ahf49dea",
		&armmanagedservices.MarketplaceRegistrationDefinitionsClientListOptions{Filter: to.Ptr("planIdentifier eq 'publisher.offerIdentifier.planName.version'")})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/managedservices/resource-manager/Microsoft.ManagedServices/preview/2020-02-01-preview/examples/GetMarketplaceRegistrationDefinitions.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmanagedservices.MarketplaceRegistrationDefinitionList{
			Value: []*armmanagedservices.MarketplaceRegistrationDefinition{
				{
					Name: to.Ptr("marketplace-test.test.test-plan.1.0.0"),
					Type: to.Ptr("Microsoft.ManagedServices/marketplaceRegistrationDefinitions"),
					ID:   to.Ptr("/subscriptions/0afefe50-734e-4610-8a82-a144ahf49dea/providers/Microsoft.ManagedServices/marketplaceRegistrationDefinitions/marketplace-test.test.test-plan.1.0.0"),
					Plan: &armmanagedservices.Plan{
						Name:      to.Ptr("test-plan"),
						Product:   to.Ptr("test"),
						Publisher: to.Ptr("marketplace-test"),
						Version:   to.Ptr("1.0.0"),
					},
					Properties: &armmanagedservices.MarketplaceRegistrationDefinitionProperties{
						Authorizations: []*armmanagedservices.Authorization{
							{
								PrincipalID:            to.Ptr("f98g86a2-4cc4-4e6d-ad47-b3e80a1bcdfc"),
								PrincipalIDDisplayName: to.Ptr("Support User"),
								RoleDefinitionID:       to.Ptr("acdd72a7-3385-48ef-bd42-f606fba81ae7"),
							},
							{
								DelegatedRoleDefinitionIDs: []*string{
									to.Ptr("b24988ac-6180-42a0-ab88-20f7382dd24c")},
								PrincipalID:            to.Ptr("f98d86a2-4cc4-4e9d-ad47-b3e80a1bcdfc"),
								PrincipalIDDisplayName: to.Ptr("User Access Administrator"),
								RoleDefinitionID:       to.Ptr("18d7d88d-d35e-4fb5-a5c3-7773c20a72d9"),
							}},
						ManagedByTenantID:    to.Ptr("83ace5cd-bcc3-441a-hd86-e6a75360cecc"),
						OfferDisplayName:     to.Ptr("Marketplace Test Offer"),
						PlanDisplayName:      to.Ptr("Test Plan"),
						PublisherDisplayName: to.Ptr("Marketplace Test Publisher"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.MarketplaceRegistrationDefinitionList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.MarketplaceRegistrationDefinitionList)
			t.Fatalf("Mock response is not equal to example response for example specification/managedservices/resource-manager/Microsoft.ManagedServices/preview/2020-02-01-preview/examples/GetMarketplaceRegistrationDefinitions.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestMarketplaceRegistrationDefinitions_Get(t *testing.T) {
	// From example specification/managedservices/resource-manager/Microsoft.ManagedServices/preview/2020-02-01-preview/examples/GetMarketplaceRegistrationDefinition.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Registration Definitions"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmanagedservices.NewMarketplaceRegistrationDefinitionsClient(cred, &options)
	res, err := client.Get(ctx,
		"subscription/0afefe50-734e-4610-8a82-a144ahf49dea",
		"publisher.product.planName.version",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/managedservices/resource-manager/Microsoft.ManagedServices/preview/2020-02-01-preview/examples/GetMarketplaceRegistrationDefinition.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmanagedservices.MarketplaceRegistrationDefinition{
			Name: to.Ptr("marketplace-test.test.test-plan.1.0.0"),
			Type: to.Ptr("Microsoft.ManagedServices/marketplaceRegistrationDefinitions"),
			ID:   to.Ptr("/subscriptions/0afefe50-734e-4610-8a82-a144ahf49dea/providers/Microsoft.ManagedServices/marketplaceRegistrationDefinitions/marketplace-test.test.test-plan.1.0.0"),
			Plan: &armmanagedservices.Plan{
				Name:      to.Ptr("test-plan"),
				Product:   to.Ptr("test"),
				Publisher: to.Ptr("marketplace-test"),
				Version:   to.Ptr("1.0.0"),
			},
			Properties: &armmanagedservices.MarketplaceRegistrationDefinitionProperties{
				Authorizations: []*armmanagedservices.Authorization{
					{
						PrincipalID:            to.Ptr("f98g86a2-4cc4-4e6d-ad47-b3e80a1bcdfc"),
						PrincipalIDDisplayName: to.Ptr("Support User"),
						RoleDefinitionID:       to.Ptr("acdd72a7-3385-48ef-bd42-f606fba81ae7"),
					},
					{
						DelegatedRoleDefinitionIDs: []*string{
							to.Ptr("b24988ac-6180-42a0-ab88-20f7382dd24c")},
						PrincipalID:            to.Ptr("f98d86a2-4cc4-4e9d-ad47-b3e80a1bcdfc"),
						PrincipalIDDisplayName: to.Ptr("User Access Administrator"),
						RoleDefinitionID:       to.Ptr("18d7d88d-d35e-4fb5-a5c3-7773c20a72d9"),
					}},
				ManagedByTenantID:    to.Ptr("83ace5cd-bcc3-441a-hd86-e6a75360cecc"),
				OfferDisplayName:     to.Ptr("Marketplace Test Offer"),
				PlanDisplayName:      to.Ptr("Test Plan"),
				PublisherDisplayName: to.Ptr("Marketplace Test Publisher"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.MarketplaceRegistrationDefinition) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.MarketplaceRegistrationDefinition)
			t.Fatalf("Mock response is not equal to example response for example specification/managedservices/resource-manager/Microsoft.ManagedServices/preview/2020-02-01-preview/examples/GetMarketplaceRegistrationDefinition.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestMarketplaceRegistrationDefinitionsWithoutScope_List(t *testing.T) {
	// From example specification/managedservices/resource-manager/Microsoft.ManagedServices/preview/2020-02-01-preview/examples/GetMarketplaceRegistrationDefinitionsAtTenantScope.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Marketplace Registration Definitions At Tenant Scope"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmanagedservices.NewMarketplaceRegistrationDefinitionsWithoutScopeClient(cred, &options)
	pager := client.List(&armmanagedservices.MarketplaceRegistrationDefinitionsWithoutScopeClientListOptions{Filter: to.Ptr("planIdentifier eq 'publisher.offerIdentifier.planName.version'")})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/managedservices/resource-manager/Microsoft.ManagedServices/preview/2020-02-01-preview/examples/GetMarketplaceRegistrationDefinitionsAtTenantScope.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmanagedservices.MarketplaceRegistrationDefinitionList{
			Value: []*armmanagedservices.MarketplaceRegistrationDefinition{
				{
					Name: to.Ptr("marketplace-test.test.test-plan.1.0.0"),
					Type: to.Ptr("Microsoft.ManagedServices/marketplaceRegistrationDefinitions"),
					ID:   to.Ptr("/providers/Microsoft.ManagedServices/marketplaceRegistrationDefinitions/marketplace-test.test.test-plan.1.0.0"),
					Plan: &armmanagedservices.Plan{
						Name:      to.Ptr("test-plan"),
						Product:   to.Ptr("test"),
						Publisher: to.Ptr("marketplace-test"),
						Version:   to.Ptr("1.0.0"),
					},
					Properties: &armmanagedservices.MarketplaceRegistrationDefinitionProperties{
						Authorizations: []*armmanagedservices.Authorization{
							{
								PrincipalID:            to.Ptr("f98g86a2-4cc4-4e6d-ad47-b3e80a1bcdfc"),
								PrincipalIDDisplayName: to.Ptr("Support User"),
								RoleDefinitionID:       to.Ptr("acdd72a7-3385-48ef-bd42-f606fba81ae7"),
							},
							{
								DelegatedRoleDefinitionIDs: []*string{
									to.Ptr("b24988ac-6180-42a0-ab88-20f7382dd24c")},
								PrincipalID:            to.Ptr("f98d86a2-4cc4-4e9d-ad47-b3e80a1bcdfc"),
								PrincipalIDDisplayName: to.Ptr("User Access Administrator"),
								RoleDefinitionID:       to.Ptr("18d7d88d-d35e-4fb5-a5c3-7773c20a72d9"),
							}},
						EligibleAuthorizations: []*armmanagedservices.EligibleAuthorization{},
						ManagedByTenantID:      to.Ptr("83ace5cd-bcc3-441a-hd86-e6a75360cecc"),
						OfferDisplayName:       to.Ptr("Marketplace Test Offer"),
						PlanDisplayName:        to.Ptr("Test Plan"),
						PublisherDisplayName:   to.Ptr("Marketplace Test Publisher"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.MarketplaceRegistrationDefinitionList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.MarketplaceRegistrationDefinitionList)
			t.Fatalf("Mock response is not equal to example response for example specification/managedservices/resource-manager/Microsoft.ManagedServices/preview/2020-02-01-preview/examples/GetMarketplaceRegistrationDefinitionsAtTenantScope.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestMarketplaceRegistrationDefinitionsWithoutScope_Get(t *testing.T) {
	// From example specification/managedservices/resource-manager/Microsoft.ManagedServices/preview/2020-02-01-preview/examples/GetMarketplaceRegistrationDefinitionAtTenantScope.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Marketplace Registration Definition At Tenant Scope"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmanagedservices.NewMarketplaceRegistrationDefinitionsWithoutScopeClient(cred, &options)
	res, err := client.Get(ctx,
		"publisher.product.planName.version",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/managedservices/resource-manager/Microsoft.ManagedServices/preview/2020-02-01-preview/examples/GetMarketplaceRegistrationDefinitionAtTenantScope.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmanagedservices.MarketplaceRegistrationDefinition{
			Name: to.Ptr("marketplace-test.test.test-plan.1.0.0"),
			Type: to.Ptr("Microsoft.ManagedServices/marketplaceRegistrationDefinitions"),
			ID:   to.Ptr("/providers/Microsoft.ManagedServices/marketplaceRegistrationDefinitions/marketplace-test.test.test-plan.1.0.0"),
			Plan: &armmanagedservices.Plan{
				Name:      to.Ptr("test-plan"),
				Product:   to.Ptr("test"),
				Publisher: to.Ptr("marketplace-test"),
				Version:   to.Ptr("1.0.0"),
			},
			Properties: &armmanagedservices.MarketplaceRegistrationDefinitionProperties{
				Authorizations: []*armmanagedservices.Authorization{
					{
						PrincipalID:            to.Ptr("f98g86a2-4cc4-4e6d-ad47-b3e80a1bcdfc"),
						PrincipalIDDisplayName: to.Ptr("Support User"),
						RoleDefinitionID:       to.Ptr("acdd72a7-3385-48ef-bd42-f606fba81ae7"),
					},
					{
						DelegatedRoleDefinitionIDs: []*string{
							to.Ptr("b24988ac-6180-42a0-ab88-20f7382dd24c")},
						PrincipalID:            to.Ptr("f98d86a2-4cc4-4e9d-ad47-b3e80a1bcdfc"),
						PrincipalIDDisplayName: to.Ptr("User Access Administrator"),
						RoleDefinitionID:       to.Ptr("18d7d88d-d35e-4fb5-a5c3-7773c20a72d9"),
					}},
				EligibleAuthorizations: []*armmanagedservices.EligibleAuthorization{},
				ManagedByTenantID:      to.Ptr("83ace5cd-bcc3-441a-hd86-e6a75360cecc"),
				OfferDisplayName:       to.Ptr("Marketplace Test Offer"),
				PlanDisplayName:        to.Ptr("Test Plan"),
				PublisherDisplayName:   to.Ptr("Marketplace Test Publisher"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.MarketplaceRegistrationDefinition) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.MarketplaceRegistrationDefinition)
			t.Fatalf("Mock response is not equal to example response for example specification/managedservices/resource-manager/Microsoft.ManagedServices/preview/2020-02-01-preview/examples/GetMarketplaceRegistrationDefinitionAtTenantScope.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOperations_List(t *testing.T) {
	// From example specification/managedservices/resource-manager/Microsoft.ManagedServices/preview/2020-02-01-preview/examples/GetOperations.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get Registration Operations"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmanagedservices.NewOperationsClient(cred, &options)
	res, err := client.List(ctx,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/managedservices/resource-manager/Microsoft.ManagedServices/preview/2020-02-01-preview/examples/GetOperations.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmanagedservices.OperationList{
			Value: []*armmanagedservices.Operation{
				{
					Name: to.Ptr("Microsoft.ManagedServices/registrationDefinitions/read"),
					Display: &armmanagedservices.OperationDisplay{
						Description: to.Ptr("Retrieves a list of Managed Services registration definitions."),
						Operation:   to.Ptr("List Managed Services Registration Definitions"),
						Provider:    to.Ptr("Microsoft Managed Services"),
						Resource:    to.Ptr("Managed Services Registration Definition"),
					},
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.OperationList) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.OperationList)
			t.Fatalf("Mock response is not equal to example response for example specification/managedservices/resource-manager/Microsoft.ManagedServices/preview/2020-02-01-preview/examples/GetOperations.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
