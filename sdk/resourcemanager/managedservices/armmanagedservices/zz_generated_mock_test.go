//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armmanagedservices

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"golang.org/x/net/http2"
)

var (
	ctx            context.Context
	subscriptionId string
	cred           azcore.TokenCredential
	err            error
	con            *arm.Connection
	mockHost       string
)

func TestRegistrationDefinitions_Get(t *testing.T) {
	// From example Get Registration Definition
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRegistrationDefinitionsClient(con)
	res, err := client.Get(ctx,
		"subscription/0afefe50-734e-4610-8a82-a144ahf49dea",
		"26c128c2-fefa-4340-9bb1-6e081c90ada2",
		&RegistrationDefinitionsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.RegistrationDefinition.ID == nil {
		t.Fatal("RegistrationDefinition.ID should not be nil!")
	}
}

func TestRegistrationDefinitions_Delete(t *testing.T) {
	// From example Delete Registration Definition
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRegistrationDefinitionsClient(con)
	_, err := client.Delete(ctx,
		"26c128c2-fefa-4340-9bb1-6e081c90ada2",
		"subscription/0afefe50-734e-4610-8a82-a144ahf49dea",
		&RegistrationDefinitionsDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestRegistrationDefinitions_CreateOrUpdate(t *testing.T) {
	// From example Put Registration Definition
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRegistrationDefinitionsClient(con)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"26c128c2-fefa-4340-9bb1-6e081c90ada2",
		"subscription/0afefe50-734e-4610-8a82-a144ahf49dea",
		RegistrationDefinition{
			Plan: &Plan{
				Name:      to.StringPtr("addesai-plan"),
				Product:   to.StringPtr("test"),
				Publisher: to.StringPtr("marketplace-test"),
				Version:   to.StringPtr("1.0.0"),
			},
			Properties: &RegistrationDefinitionProperties{
				Description: to.StringPtr("Tes1t"),
				Authorizations: []*Authorization{
					{
						PrincipalID:            to.StringPtr("f98d86a2-4cc4-4e9d-ad47-b3e80a1bcdfc"),
						PrincipalIDDisplayName: to.StringPtr("Support User"),
						RoleDefinitionID:       to.StringPtr("acdd72a7-3385-48ef-bd42-f606fba81ae7"),
					},
					{
						DelegatedRoleDefinitionIDs: []*string{
							to.StringPtr("b24988ac-6180-42a0-ab88-20f7382dd24c")},
						PrincipalID:            to.StringPtr("f98d86a2-4cc4-4e9d-ad47-b3e80a1bcdfc"),
						PrincipalIDDisplayName: to.StringPtr("User Access Administrator"),
						RoleDefinitionID:       to.StringPtr("18d7d88d-d35e-4fb5-a5c3-7773c20a72d9"),
					}},
				EligibleAuthorizations: []*EligibleAuthorization{
					{
						JustInTimeAccessPolicy: &JustInTimeAccessPolicy{
							ManagedByTenantApprovers: []*EligibleApprover{
								{
									PrincipalID:            to.StringPtr("d9b22cd6-6407-43cc-8c60-07c56df0b51a"),
									PrincipalIDDisplayName: to.StringPtr("Approver Group"),
								}},
							MaximumActivationDuration: to.StringPtr("PT8H"),
							MultiFactorAuthProvider:   MultiFactorAuthProviderAzure.ToPtr(),
						},
						PrincipalID:            to.StringPtr("3e0ed8c6-e902-4fc5-863c-e3ddbb2ae2a2"),
						PrincipalIDDisplayName: to.StringPtr("Support User"),
						RoleDefinitionID:       to.StringPtr("ae349356-3a1b-4a5e-921d-050484c6347e"),
					}},
				ManagedByTenantID:          to.StringPtr("83abe5cd-bcc3-441a-bd86-e6a75360cecc"),
				RegistrationDefinitionName: to.StringPtr("DefinitionName"),
			},
		},
		&RegistrationDefinitionsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.RegistrationDefinition.ID == nil {
		t.Fatal("RegistrationDefinition.ID should not be nil!")
	}
}

func TestRegistrationDefinitions_List(t *testing.T) {
	// From example Get Registration Definitions
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRegistrationDefinitionsClient(con)
	pager := client.List("subscription/0afefe50-734e-4610-8a82-a144ahf49dea",
		&RegistrationDefinitionsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("RegistrationDefinition.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("RegistrationDefinition.ID should not be nil!")
			}
		}
	}
}

func TestRegistrationAssignments_Get(t *testing.T) {
	// From example Get Registration Assignment
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRegistrationAssignmentsClient(con)
	res, err := client.Get(ctx,
		"subscription/0afefe50-734e-4610-8a82-a144ahf49dea",
		"26c128c2-fefa-4340-9bb1-6e081c90ada2",
		&RegistrationAssignmentsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.RegistrationAssignment.ID == nil {
		t.Fatal("RegistrationAssignment.ID should not be nil!")
	}
}

func TestRegistrationAssignments_Delete(t *testing.T) {
	// From example Delete Registration Assignment
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRegistrationAssignmentsClient(con)
	poller, err := client.BeginDelete(ctx,
		"subscription/0afefe50-734e-4610-8a82-a144ahf49dea",
		"26c128c2-fefa-4340-9bb1-6e081c90ada2",
		&RegistrationAssignmentsBeginDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestRegistrationAssignments_CreateOrUpdate(t *testing.T) {
	// From example Put Registration Assignment
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRegistrationAssignmentsClient(con)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"subscription/0afefe50-734e-4610-8a82-a144ahf49dea",
		"26c128c2-fefa-4340-9bb1-6e081c90ada2",
		RegistrationAssignment{
			Properties: &RegistrationAssignmentProperties{
				RegistrationDefinitionID: to.StringPtr("/subscriptions/0afefe50-734e-4610-8a82-a144ahf49dea/providers/Microsoft.ManagedServices/registrationDefinitions/26c128c2-fefa-4340-9bb1-6e081c90ada2"),
			},
		},
		&RegistrationAssignmentsBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.RegistrationAssignment.ID == nil {
		t.Fatal("RegistrationAssignment.ID should not be nil!")
	}
}

func TestRegistrationAssignments_List(t *testing.T) {
	// From example Get Registration Assignments
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRegistrationAssignmentsClient(con)
	pager := client.List("subscription/0afefe50-734e-4610-8a82-a144ahf49dea",
		&RegistrationAssignmentsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("RegistrationAssignment.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("RegistrationAssignment.ID should not be nil!")
			}
		}
	}
}

func TestMarketplaceRegistrationDefinitions_List(t *testing.T) {
	// From example Get Registration Definitions
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewMarketplaceRegistrationDefinitionsClient(con)
	pager := client.List("subscription/0afefe50-734e-4610-8a82-a144ahf49dea",
		&MarketplaceRegistrationDefinitionsListOptions{Filter: to.StringPtr("planIdentifier eq 'publisher.offerIdentifier.planName.version'")})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("MarketplaceRegistrationDefinition.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("MarketplaceRegistrationDefinition.ID should not be nil!")
			}
		}
	}
}

func TestMarketplaceRegistrationDefinitions_Get(t *testing.T) {
	// From example Get Registration Definitions
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewMarketplaceRegistrationDefinitionsClient(con)
	res, err := client.Get(ctx,
		"subscription/0afefe50-734e-4610-8a82-a144ahf49dea",
		"publisher.product.planName.version",
		&MarketplaceRegistrationDefinitionsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.MarketplaceRegistrationDefinition.ID == nil {
		t.Fatal("MarketplaceRegistrationDefinition.ID should not be nil!")
	}
}

func TestMarketplaceRegistrationDefinitionsWithoutScope_List(t *testing.T) {
	// From example Get Marketplace Registration Definitions At Tenant Scope
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewMarketplaceRegistrationDefinitionsWithoutScopeClient(con)
	pager := client.List(&MarketplaceRegistrationDefinitionsWithoutScopeListOptions{Filter: to.StringPtr("planIdentifier eq 'publisher.offerIdentifier.planName.version'")})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("MarketplaceRegistrationDefinition.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("MarketplaceRegistrationDefinition.ID should not be nil!")
			}
		}
	}
}

func TestMarketplaceRegistrationDefinitionsWithoutScope_Get(t *testing.T) {
	// From example Get Marketplace Registration Definition At Tenant Scope
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewMarketplaceRegistrationDefinitionsWithoutScopeClient(con)
	res, err := client.Get(ctx,
		"publisher.product.planName.version",
		&MarketplaceRegistrationDefinitionsWithoutScopeGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.MarketplaceRegistrationDefinition.ID == nil {
		t.Fatal("MarketplaceRegistrationDefinition.ID should not be nil!")
	}
}

func TestOperations_List(t *testing.T) {
	// From example Get Registration Operations
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewOperationsClient(con)
	_, err := client.List(ctx,
		&OperationsListOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	subscriptionId = getEnv("SUBSCRIPTION_ID", "00000000-0000-0000-0000-000000000000")
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}
	cred, err = azidentity.NewEnvironmentCredential(&azidentity.EnvironmentCredentialOptions{AuthorityHost: mockHost, HTTPClient: client})
	if err != nil {
		panic(err)
	}

	con = arm.NewConnection(mockHost, cred, &arm.ConnectionOptions{
		Logging: policy.LogOptions{
			IncludeBody: true,
		},
		HTTPClient: client,
	})
}

func tearDown() {

}
