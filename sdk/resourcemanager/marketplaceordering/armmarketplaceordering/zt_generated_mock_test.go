//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armmarketplaceordering_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/marketplaceordering/armmarketplaceordering"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestMarketplaceAgreements_Get(t *testing.T) {
	// From example specification/marketplaceordering/resource-manager/Microsoft.MarketplaceOrdering/stable/2021-01-01/examples/GetMarketplaceTerms.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetMarketplaceTerms"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmarketplaceordering.NewMarketplaceAgreementsClient("subid", cred, &options)
	res, err := client.Get(ctx,
		armmarketplaceordering.OfferTypeVirtualmachine,
		"pubid",
		"offid",
		"planid",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/marketplaceordering/resource-manager/Microsoft.MarketplaceOrdering/stable/2021-01-01/examples/GetMarketplaceTerms.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmarketplaceordering.AgreementTerms{
			Name: to.Ptr("planid"),
			Type: to.Ptr("Microsoft.MarketplaceOrdering/offertypes"),
			ID:   to.Ptr("id"),
			Properties: &armmarketplaceordering.AgreementProperties{
				Accepted:             to.Ptr(true),
				LicenseTextLink:      to.Ptr("test.licenseLink"),
				MarketplaceTermsLink: to.Ptr("test.marketplaceTermsLink"),
				Plan:                 to.Ptr("planid"),
				PrivacyPolicyLink:    to.Ptr("test.privacyPolicyLink"),
				Product:              to.Ptr("offid"),
				Publisher:            to.Ptr("pubid"),
				RetrieveDatetime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-15T11:33:07.12132Z"); return t }()),
				Signature:            to.Ptr("ASDFSDAFWEFASDGWERLWER"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AgreementTerms) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AgreementTerms)
			t.Fatalf("Mock response is not equal to example response for example specification/marketplaceordering/resource-manager/Microsoft.MarketplaceOrdering/stable/2021-01-01/examples/GetMarketplaceTerms.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestMarketplaceAgreements_Create(t *testing.T) {
	// From example specification/marketplaceordering/resource-manager/Microsoft.MarketplaceOrdering/stable/2021-01-01/examples/SetMarketplaceTerms.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SetMarketplaceTerms"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmarketplaceordering.NewMarketplaceAgreementsClient("subid", cred, &options)
	res, err := client.Create(ctx,
		armmarketplaceordering.OfferTypeVirtualmachine,
		"pubid",
		"offid",
		"planid",
		armmarketplaceordering.AgreementTerms{
			Properties: &armmarketplaceordering.AgreementProperties{
				Accepted:             to.Ptr(false),
				LicenseTextLink:      to.Ptr("test.licenseLink"),
				MarketplaceTermsLink: to.Ptr("test.marketplaceTermsLink"),
				Plan:                 to.Ptr("planid"),
				PrivacyPolicyLink:    to.Ptr("test.privacyPolicyLink"),
				Product:              to.Ptr("offid"),
				Publisher:            to.Ptr("pubid"),
				RetrieveDatetime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-15T11:33:07.12132Z"); return t }()),
				Signature:            to.Ptr("ASDFSDAFWEFASDGWERLWER"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/marketplaceordering/resource-manager/Microsoft.MarketplaceOrdering/stable/2021-01-01/examples/SetMarketplaceTerms.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmarketplaceordering.AgreementTerms{
			Name: to.Ptr("planid"),
			Type: to.Ptr("Microsoft.MarketplaceOrdering/offertypes"),
			ID:   to.Ptr("id"),
			Properties: &armmarketplaceordering.AgreementProperties{
				Accepted:             to.Ptr(true),
				LicenseTextLink:      to.Ptr("test.licenseLink"),
				MarketplaceTermsLink: to.Ptr("test.marketplaceTermsLink"),
				Plan:                 to.Ptr("planid"),
				PrivacyPolicyLink:    to.Ptr("test.privacyPolicyLink"),
				Product:              to.Ptr("offid"),
				Publisher:            to.Ptr("pubid"),
				RetrieveDatetime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-15T11:33:07.12132Z"); return t }()),
				Signature:            to.Ptr("ASDFSDAFWEFASDGWERLWER"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AgreementTerms) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AgreementTerms)
			t.Fatalf("Mock response is not equal to example response for example specification/marketplaceordering/resource-manager/Microsoft.MarketplaceOrdering/stable/2021-01-01/examples/SetMarketplaceTerms.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestMarketplaceAgreements_Sign(t *testing.T) {
	// From example specification/marketplaceordering/resource-manager/Microsoft.MarketplaceOrdering/stable/2021-01-01/examples/SignMarketplaceTerms.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SetMarketplaceTerms"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmarketplaceordering.NewMarketplaceAgreementsClient("subid", cred, &options)
	res, err := client.Sign(ctx,
		"pubid",
		"offid",
		"planid",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/marketplaceordering/resource-manager/Microsoft.MarketplaceOrdering/stable/2021-01-01/examples/SignMarketplaceTerms.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmarketplaceordering.AgreementTerms{
			Name: to.Ptr("planid"),
			Type: to.Ptr("Microsoft.MarketplaceOrdering/offertypes"),
			ID:   to.Ptr("id"),
			Properties: &armmarketplaceordering.AgreementProperties{
				Accepted:             to.Ptr(true),
				LicenseTextLink:      to.Ptr("test.licenseLink"),
				MarketplaceTermsLink: to.Ptr("test.marketplaceTermsLink"),
				Plan:                 to.Ptr("planid"),
				PrivacyPolicyLink:    to.Ptr("test.privacyPolicyLink"),
				Product:              to.Ptr("offid"),
				Publisher:            to.Ptr("pubid"),
				RetrieveDatetime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-15T11:33:07.12132Z"); return t }()),
				Signature:            to.Ptr("ASDFSDAFWEFASDGWERLWER"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AgreementTerms) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AgreementTerms)
			t.Fatalf("Mock response is not equal to example response for example specification/marketplaceordering/resource-manager/Microsoft.MarketplaceOrdering/stable/2021-01-01/examples/SignMarketplaceTerms.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestMarketplaceAgreements_Cancel(t *testing.T) {
	// From example specification/marketplaceordering/resource-manager/Microsoft.MarketplaceOrdering/stable/2021-01-01/examples/CancelMarketplaceTerms.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SetMarketplaceTerms"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmarketplaceordering.NewMarketplaceAgreementsClient("subid", cred, &options)
	res, err := client.Cancel(ctx,
		"pubid",
		"offid",
		"planid",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/marketplaceordering/resource-manager/Microsoft.MarketplaceOrdering/stable/2021-01-01/examples/CancelMarketplaceTerms.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmarketplaceordering.AgreementTerms{
			Name: to.Ptr("planid"),
			Type: to.Ptr("Microsoft.MarketplaceOrdering/offertypes"),
			ID:   to.Ptr("id"),
			Properties: &armmarketplaceordering.AgreementProperties{
				Accepted:             to.Ptr(false),
				LicenseTextLink:      to.Ptr("test.licenseLink"),
				MarketplaceTermsLink: to.Ptr("test.marketplaceTermsLink"),
				Plan:                 to.Ptr("planid"),
				PrivacyPolicyLink:    to.Ptr("test.privacyPolicyLink"),
				Product:              to.Ptr("offid"),
				Publisher:            to.Ptr("pubid"),
				RetrieveDatetime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-15T11:33:07.12132Z"); return t }()),
				Signature:            to.Ptr("ASDFSDAFWEFASDGWERLWER"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AgreementTerms) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AgreementTerms)
			t.Fatalf("Mock response is not equal to example response for example specification/marketplaceordering/resource-manager/Microsoft.MarketplaceOrdering/stable/2021-01-01/examples/CancelMarketplaceTerms.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestMarketplaceAgreements_GetAgreement(t *testing.T) {
	// From example specification/marketplaceordering/resource-manager/Microsoft.MarketplaceOrdering/stable/2021-01-01/examples/GetAgreementMarketplaceTerms.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SetMarketplaceTerms"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmarketplaceordering.NewMarketplaceAgreementsClient("subid", cred, &options)
	res, err := client.GetAgreement(ctx,
		"pubid",
		"offid",
		"planid",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/marketplaceordering/resource-manager/Microsoft.MarketplaceOrdering/stable/2021-01-01/examples/GetAgreementMarketplaceTerms.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmarketplaceordering.AgreementTerms{
			Name: to.Ptr("planid"),
			Type: to.Ptr("Microsoft.MarketplaceOrdering/offertypes"),
			ID:   to.Ptr("id"),
			Properties: &armmarketplaceordering.AgreementProperties{
				Accepted:             to.Ptr(true),
				LicenseTextLink:      to.Ptr("test.licenseLink"),
				MarketplaceTermsLink: to.Ptr("test.marketplaceTermsLink"),
				Plan:                 to.Ptr("planid"),
				PrivacyPolicyLink:    to.Ptr("test.privacyPolicyLink"),
				Product:              to.Ptr("offid"),
				Publisher:            to.Ptr("pubid"),
				RetrieveDatetime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-15T11:33:07.12132Z"); return t }()),
				Signature:            to.Ptr("ASDFSDAFWEFASDGWERLWER"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AgreementTerms) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AgreementTerms)
			t.Fatalf("Mock response is not equal to example response for example specification/marketplaceordering/resource-manager/Microsoft.MarketplaceOrdering/stable/2021-01-01/examples/GetAgreementMarketplaceTerms.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestMarketplaceAgreements_List(t *testing.T) {
	// From example specification/marketplaceordering/resource-manager/Microsoft.MarketplaceOrdering/stable/2021-01-01/examples/ListMarketplaceTerms.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"SetMarketplaceTerms"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmarketplaceordering.NewMarketplaceAgreementsClient("subid", cred, &options)
	res, err := client.List(ctx,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/marketplaceordering/resource-manager/Microsoft.MarketplaceOrdering/stable/2021-01-01/examples/ListMarketplaceTerms.json: %v", err)
	}
	// Response check
	{
		exampleRes := []*armmarketplaceordering.AgreementTerms{
			{
				Name: to.Ptr("planid"),
				Type: to.Ptr("Microsoft.MarketplaceOrdering/offertypes"),
				ID:   to.Ptr("id"),
				Properties: &armmarketplaceordering.AgreementProperties{
					Accepted:             to.Ptr(true),
					LicenseTextLink:      to.Ptr("test.licenseLink"),
					MarketplaceTermsLink: to.Ptr("test.marketplaceTermsLink"),
					Plan:                 to.Ptr("planid"),
					PrivacyPolicyLink:    to.Ptr("test.privacyPolicyLink"),
					Product:              to.Ptr("offid"),
					Publisher:            to.Ptr("pubid"),
					RetrieveDatetime:     to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-15T11:33:07.12132Z"); return t }()),
					Signature:            to.Ptr("ASDFSDAFWEFASDGWERLWER"),
				},
			}}
		if !reflect.DeepEqual(exampleRes, res.AgreementTermsArray) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AgreementTermsArray)
			t.Fatalf("Mock response is not equal to example response for example specification/marketplaceordering/resource-manager/Microsoft.MarketplaceOrdering/stable/2021-01-01/examples/ListMarketplaceTerms.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOperations_List(t *testing.T) {
	t.Skip("Warning: No test steps for this operation!")
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
