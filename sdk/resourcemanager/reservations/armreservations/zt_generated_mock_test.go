//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armreservations_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/reservations/armreservations"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestReservation_AvailableScopes(t *testing.T) {
	// From example specification/reservations/resource-manager/Microsoft.Capacity/stable/2021-07-01/examples/GetAvailableScope.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AvailableScopes"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armreservations.NewReservationClient(cred, &options)
	poller, err := client.BeginAvailableScopes(ctx,
		"276e7ae4-84d0-4da6-ab4b-d6b94f3557da",
		"356e7ae4-84d0-4da6-ab4b-d6b94f3557da",
		armreservations.AvailableScopeRequest{
			Properties: &armreservations.AvailableScopeRequestProperties{
				Scopes: []*string{
					to.Ptr("/subscriptions/efc7c997-7700-4a74-b731-55aec16c15e9")},
			},
		},
		&armreservations.ReservationClientBeginAvailableScopesOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/reservations/resource-manager/Microsoft.Capacity/stable/2021-07-01/examples/GetAvailableScope.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/reservations/resource-manager/Microsoft.Capacity/stable/2021-07-01/examples/GetAvailableScope.json: %v", err)
	}
	// Response check
	{
		exampleRes := armreservations.AvailableScopeProperties{
			Properties: &armreservations.SubscriptionScopeProperties{
				Scopes: []*armreservations.ScopeProperties{
					{
						Scope: to.Ptr("/subscriptions/efc7c997-7700-4a74-b731-55aec16c15e9"),
						Valid: to.Ptr(true),
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AvailableScopeProperties) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AvailableScopeProperties)
			t.Fatalf("Mock response is not equal to example response for example specification/reservations/resource-manager/Microsoft.Capacity/stable/2021-07-01/examples/GetAvailableScope.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReservation_Split(t *testing.T) {
	// From example specification/reservations/resource-manager/Microsoft.Capacity/stable/2021-07-01/examples/SplitReservation.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Split"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armreservations.NewReservationClient(cred, &options)
	poller, err := client.BeginSplit(ctx,
		"276e7ae4-84d0-4da6-ab4b-d6b94f3557da",
		armreservations.SplitRequest{
			Properties: &armreservations.SplitProperties{
				Quantities: []*int32{
					to.Ptr[int32](1),
					to.Ptr[int32](2)},
				ReservationID: to.Ptr("/providers/Microsoft.Capacity/reservationOrders/276e7ae4-84d0-4da6-ab4b-d6b94f3557da/reservations/bcae77cd-3119-4766-919f-b50d36c75c7a"),
			},
		},
		&armreservations.ReservationClientBeginSplitOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/reservations/resource-manager/Microsoft.Capacity/stable/2021-07-01/examples/SplitReservation.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/reservations/resource-manager/Microsoft.Capacity/stable/2021-07-01/examples/SplitReservation.json: %v", err)
	}
	// Response check
	{
		exampleRes := []*armreservations.ReservationResponse{
			{
				Name:     to.Ptr("276e7ae4-84d0-4da6-ab4b-d6b94f3557da/00238563-7312-4c20-a134-8c030bf938a7"),
				Type:     to.Ptr("Microsoft.Capacity/reservationOrders/reservations"),
				Etag:     to.Ptr[int32](2),
				ID:       to.Ptr("/providers/microsoft.capacity/reservationOrders/276e7ae4-84d0-4da6-ab4b-d6b94f3557da/reservations/00238563-7312-4c20-a134-8c030bf938a7"),
				Location: to.Ptr("eastus"),
				Properties: &armreservations.Properties{
					AppliedScopeType: to.Ptr(armreservations.AppliedScopeTypeSingle),
					AppliedScopes: []*string{
						to.Ptr("/subscriptions/98df3792-7962-4f18-8be2-d5576f122de3")},
					BillingPlan:          to.Ptr(armreservations.ReservationBillingPlanMonthly),
					BillingScopeID:       to.Ptr("/subscriptions/19376483-64b8-49e4-a931-d5248828720a"),
					DisplayName:          to.Ptr("cabri_test"),
					EffectiveDateTime:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-09-22T01:00:30.9253826Z"); return t }()),
					ExpiryDate:           to.Ptr(func() time.Time { t, _ := time.Parse("2006-01-02", "2018-09-22"); return t }()),
					InstanceFlexibility:  to.Ptr(armreservations.InstanceFlexibilityOff),
					LastUpdatedDateTime:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-09-22T01:00:36.3191627Z"); return t }()),
					ProvisioningState:    to.Ptr(armreservations.ProvisioningStateSucceeded),
					Quantity:             to.Ptr[int32](1),
					Renew:                to.Ptr(false),
					ReservedResourceType: to.Ptr(armreservations.ReservedResourceTypeVirtualMachines),
					SKUDescription:       to.Ptr("D1 v2"),
					SplitProperties: &armreservations.ReservationSplitProperties{
						SplitSource: to.Ptr("/providers/microsoft.capacity/reservationOrders/276e7ae4-84d0-4da6-ab4b-d6b94f3557da/reservations/bcae77cd-3119-4766-919f-b50d36c75c7a"),
					},
				},
				SKU: &armreservations.SKUName{
					Name: to.Ptr("Standard_DS1_v2"),
				},
			},
			{
				Name:     to.Ptr("276e7ae4-84d0-4da6-ab4b-d6b94f3557da/e0e4b4f5-77ea-4984-9ee4-6bf9850ee6de"),
				Type:     to.Ptr("Microsoft.Capacity/reservationOrders/reservations"),
				Etag:     to.Ptr[int32](2),
				ID:       to.Ptr("/providers/microsoft.capacity/reservationOrders/276e7ae4-84d0-4da6-ab4b-d6b94f3557da/reservations/e0e4b4f5-77ea-4984-9ee4-6bf9850ee6de"),
				Location: to.Ptr("eastus"),
				Properties: &armreservations.Properties{
					AppliedScopeType: to.Ptr(armreservations.AppliedScopeTypeSingle),
					AppliedScopes: []*string{
						to.Ptr("/subscriptions/98df3792-7962-4f18-8be2-d5576f122de3")},
					BillingPlan:          to.Ptr(armreservations.ReservationBillingPlanMonthly),
					BillingScopeID:       to.Ptr("/subscriptions/19376483-64b8-49e4-a931-d5248828720a"),
					DisplayName:          to.Ptr("cabri_test"),
					EffectiveDateTime:    to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-09-22T01:00:30.9253826Z"); return t }()),
					ExpiryDate:           to.Ptr(func() time.Time { t, _ := time.Parse("2006-01-02", "2018-09-22"); return t }()),
					InstanceFlexibility:  to.Ptr(armreservations.InstanceFlexibilityOff),
					LastUpdatedDateTime:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-09-22T01:00:36.3191627Z"); return t }()),
					ProvisioningState:    to.Ptr(armreservations.ProvisioningStateSucceeded),
					Quantity:             to.Ptr[int32](2),
					Renew:                to.Ptr(false),
					ReservedResourceType: to.Ptr(armreservations.ReservedResourceTypeVirtualMachines),
					SKUDescription:       to.Ptr("D1 v2"),
					SplitProperties: &armreservations.ReservationSplitProperties{
						SplitSource: to.Ptr("/providers/microsoft.capacity/reservationOrders/276e7ae4-84d0-4da6-ab4b-d6b94f3557da/reservations/bcae77cd-3119-4766-919f-b50d36c75c7a"),
					},
				},
				SKU: &armreservations.SKUName{
					Name: to.Ptr("Standard_DS1_v2"),
				},
			},
			{
				Name:     to.Ptr("276e7ae4-84d0-4da6-ab4b-d6b94f3557da/bcae77cd-3119-4766-919f-b50d36c75c7a"),
				Type:     to.Ptr("Microsoft.Capacity/reservationOrders/reservations"),
				Etag:     to.Ptr[int32](10),
				ID:       to.Ptr("/providers/microsoft.capacity/reservationOrders/276e7ae4-84d0-4da6-ab4b-d6b94f3557da/reservations/bcae77cd-3119-4766-919f-b50d36c75c7a"),
				Location: to.Ptr("eastus"),
				Properties: &armreservations.Properties{
					AppliedScopeType: to.Ptr(armreservations.AppliedScopeTypeSingle),
					AppliedScopes: []*string{
						to.Ptr("/subscriptions/98df3792-7962-4f18-8be2-d5576f122de3")},
					BillingPlan:       to.Ptr(armreservations.ReservationBillingPlanMonthly),
					BillingScopeID:    to.Ptr("/subscriptions/19376483-64b8-49e4-a931-d5248828720a"),
					DisplayName:       to.Ptr("cabri_test"),
					EffectiveDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-09-22T01:00:30.9253826Z"); return t }()),
					ExpiryDate:        to.Ptr(func() time.Time { t, _ := time.Parse("2006-01-02", "2018-09-22"); return t }()),
					ExtendedStatusInfo: &armreservations.ExtendedStatusInfo{
						Message:    to.Ptr("This reservation was split and is no longer active."),
						StatusCode: to.Ptr(armreservations.ReservationStatusCodeSplit),
					},
					InstanceFlexibility:  to.Ptr(armreservations.InstanceFlexibilityOff),
					LastUpdatedDateTime:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-09-22T01:00:36.3191627Z"); return t }()),
					ProvisioningState:    to.Ptr(armreservations.ProvisioningStateSucceeded),
					Quantity:             to.Ptr[int32](3),
					Renew:                to.Ptr(false),
					ReservedResourceType: to.Ptr(armreservations.ReservedResourceTypeVirtualMachines),
					SKUDescription:       to.Ptr("D1 v2"),
					SplitProperties: &armreservations.ReservationSplitProperties{
						SplitDestinations: []*string{
							to.Ptr("/providers/microsoft.capacity/reservationOrders/276e7ae4-84d0-4da6-ab4b-d6b94f3557da/reservations/00238563-7312-4c20-a134-8c030bf938a7"),
							to.Ptr("/providers/microsoft.capacity/reservationOrders/276e7ae4-84d0-4da6-ab4b-d6b94f3557da/reservations/e0e4b4f5-77ea-4984-9ee4-6bf9850ee6de")},
					},
				},
				SKU: &armreservations.SKUName{
					Name: to.Ptr("Standard_DS1_v2"),
				},
			}}
		if !reflect.DeepEqual(exampleRes, res.ReservationResponseArray) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ReservationResponseArray)
			t.Fatalf("Mock response is not equal to example response for example specification/reservations/resource-manager/Microsoft.Capacity/stable/2021-07-01/examples/SplitReservation.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReservation_Merge(t *testing.T) {
	// From example specification/reservations/resource-manager/Microsoft.Capacity/stable/2021-07-01/examples/MergeReservations.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Merge"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armreservations.NewReservationClient(cred, &options)
	poller, err := client.BeginMerge(ctx,
		"276e7ae4-84d0-4da6-ab4b-d6b94f3557da",
		armreservations.MergeRequest{
			Properties: &armreservations.MergeProperties{
				Sources: []*string{
					to.Ptr("/providers/Microsoft.Capacity/reservationOrders/c0565a8a-4491-4e77-b07b-5e6d66718e1c/reservations/cea04232-932e-47db-acb5-e29a945ecc73"),
					to.Ptr("/providers/Microsoft.Capacity/reservationOrders/c0565a8a-4491-4e77-b07b-5e6d66718e1c/reservations/5bf54dc7-dacd-4f46-a16b-7b78f4a59799")},
			},
		},
		&armreservations.ReservationClientBeginMergeOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/reservations/resource-manager/Microsoft.Capacity/stable/2021-07-01/examples/MergeReservations.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/reservations/resource-manager/Microsoft.Capacity/stable/2021-07-01/examples/MergeReservations.json: %v", err)
	}
	// Response check
	{
		exampleRes := []*armreservations.ReservationResponse{
			{
				Name:     to.Ptr("276e7ae4-84d0-4da6-ab4b-d6b94f3557da/00238563-7312-4c20-a134-8c030bf938a7"),
				Type:     to.Ptr("Microsoft.Capacity/reservationOrders/reservations"),
				Etag:     to.Ptr[int32](5),
				ID:       to.Ptr("/providers/microsoft.capacity/reservationOrders/276e7ae4-84d0-4da6-ab4b-d6b94f3557da/reservations/00238563-7312-4c20-a134-8c030bf938a7"),
				Location: to.Ptr("eastus"),
				Properties: &armreservations.Properties{
					AppliedScopeType: to.Ptr(armreservations.AppliedScopeTypeSingle),
					AppliedScopes: []*string{
						to.Ptr("/subscriptions/98df3792-7962-4f18-8be2-d5576f122de3")},
					BillingPlan:       to.Ptr(armreservations.ReservationBillingPlanMonthly),
					BillingScopeID:    to.Ptr("/subscriptions/19376483-64b8-49e4-a931-d5248828720a"),
					DisplayName:       to.Ptr("cabri_test"),
					EffectiveDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-09-22T22:46:32.7632798Z"); return t }()),
					ExpiryDate:        to.Ptr(func() time.Time { t, _ := time.Parse("2006-01-02", "2018-09-22"); return t }()),
					ExtendedStatusInfo: &armreservations.ExtendedStatusInfo{
						Message:    to.Ptr("This reservation was merged and is no longer active."),
						StatusCode: to.Ptr(armreservations.ReservationStatusCodeMerged),
					},
					InstanceFlexibility: to.Ptr(armreservations.InstanceFlexibilityOff),
					LastUpdatedDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-09-22T22:46:32.7632798Z"); return t }()),
					MergeProperties: &armreservations.ReservationMergeProperties{
						MergeDestination: to.Ptr("/providers/microsoft.capacity/reservationOrders/276e7ae4-84d0-4da6-ab4b-d6b94f3557da/reservations/6ef59113-3482-40da-8d79-787f823e34bc"),
					},
					ProvisioningState:    to.Ptr(armreservations.ProvisioningStateSucceeded),
					Quantity:             to.Ptr[int32](1),
					Renew:                to.Ptr(false),
					ReservedResourceType: to.Ptr(armreservations.ReservedResourceTypeVirtualMachines),
					SKUDescription:       to.Ptr("D1 v2"),
					SplitProperties: &armreservations.ReservationSplitProperties{
						SplitSource: to.Ptr("/providers/microsoft.capacity/reservationOrders/276e7ae4-84d0-4da6-ab4b-d6b94f3557da/reservations/bcae77cd-3119-4766-919f-b50d36c75c7a"),
					},
				},
				SKU: &armreservations.SKUName{
					Name: to.Ptr("Standard_DS1_v2"),
				},
			},
			{
				Name:     to.Ptr("276e7ae4-84d0-4da6-ab4b-d6b94f3557da/e0e4b4f5-77ea-4984-9ee4-6bf9850ee6de"),
				Type:     to.Ptr("Microsoft.Capacity/reservationOrders/reservations"),
				Etag:     to.Ptr[int32](4),
				ID:       to.Ptr("/providers/microsoft.capacity/reservationOrders/276e7ae4-84d0-4da6-ab4b-d6b94f3557da/reservations/e0e4b4f5-77ea-4984-9ee4-6bf9850ee6de"),
				Location: to.Ptr("eastus"),
				Properties: &armreservations.Properties{
					AppliedScopeType: to.Ptr(armreservations.AppliedScopeTypeSingle),
					AppliedScopes: []*string{
						to.Ptr("/subscriptions/98df3792-7962-4f18-8be2-d5576f122de3")},
					BillingPlan:       to.Ptr(armreservations.ReservationBillingPlanMonthly),
					BillingScopeID:    to.Ptr("/subscriptions/19376483-64b8-49e4-a931-d5248828720a"),
					DisplayName:       to.Ptr("cabri_test"),
					EffectiveDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-09-22T22:46:32.7632798Z"); return t }()),
					ExpiryDate:        to.Ptr(func() time.Time { t, _ := time.Parse("2006-01-02", "2018-09-22"); return t }()),
					ExtendedStatusInfo: &armreservations.ExtendedStatusInfo{
						Message:    to.Ptr("This reservation was merged and is no longer active."),
						StatusCode: to.Ptr(armreservations.ReservationStatusCodeMerged),
					},
					InstanceFlexibility: to.Ptr(armreservations.InstanceFlexibilityOff),
					LastUpdatedDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-09-22T22:46:32.7632798Z"); return t }()),
					MergeProperties: &armreservations.ReservationMergeProperties{
						MergeDestination: to.Ptr("/providers/microsoft.capacity/reservationOrders/276e7ae4-84d0-4da6-ab4b-d6b94f3557da/reservations/6ef59113-3482-40da-8d79-787f823e34bc"),
					},
					ProvisioningState:    to.Ptr(armreservations.ProvisioningStateSucceeded),
					Quantity:             to.Ptr[int32](2),
					Renew:                to.Ptr(false),
					ReservedResourceType: to.Ptr(armreservations.ReservedResourceTypeVirtualMachines),
					SKUDescription:       to.Ptr("D1 v2"),
					SplitProperties: &armreservations.ReservationSplitProperties{
						SplitSource: to.Ptr("/providers/microsoft.capacity/reservationOrders/276e7ae4-84d0-4da6-ab4b-d6b94f3557da/reservations/bcae77cd-3119-4766-919f-b50d36c75c7a"),
					},
				},
				SKU: &armreservations.SKUName{
					Name: to.Ptr("Standard_DS1_v2"),
				},
			},
			{
				Name:     to.Ptr("276e7ae4-84d0-4da6-ab4b-d6b94f3557da/6ef59113-3482-40da-8d79-787f823e34bc"),
				Type:     to.Ptr("Microsoft.Capacity/reservationOrders/reservations"),
				Etag:     to.Ptr[int32](2),
				ID:       to.Ptr("/providers/microsoft.capacity/reservationOrders/276e7ae4-84d0-4da6-ab4b-d6b94f3557da/reservations/6ef59113-3482-40da-8d79-787f823e34bc"),
				Location: to.Ptr("eastus"),
				Properties: &armreservations.Properties{
					AppliedScopeType: to.Ptr(armreservations.AppliedScopeTypeSingle),
					AppliedScopes: []*string{
						to.Ptr("/subscriptions/98df3792-7962-4f18-8be2-d5576f122de3")},
					BillingPlan:         to.Ptr(armreservations.ReservationBillingPlanMonthly),
					BillingScopeID:      to.Ptr("/subscriptions/19376483-64b8-49e4-a931-d5248828720a"),
					DisplayName:         to.Ptr("cabri_test"),
					EffectiveDateTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-09-22T22:46:32.7632798Z"); return t }()),
					ExpiryDate:          to.Ptr(func() time.Time { t, _ := time.Parse("2006-01-02", "2018-09-22"); return t }()),
					InstanceFlexibility: to.Ptr(armreservations.InstanceFlexibilityOff),
					LastUpdatedDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-09-22T22:46:32.7632798Z"); return t }()),
					MergeProperties: &armreservations.ReservationMergeProperties{
						MergeSources: []*string{
							to.Ptr("/providers/microsoft.capacity/reservationOrders/276e7ae4-84d0-4da6-ab4b-d6b94f3557da/reservations/00238563-7312-4c20-a134-8c030bf938a7"),
							to.Ptr("/providers/microsoft.capacity/reservationOrders/276e7ae4-84d0-4da6-ab4b-d6b94f3557da/reservations/e0e4b4f5-77ea-4984-9ee4-6bf9850ee6de")},
					},
					ProvisioningState:    to.Ptr(armreservations.ProvisioningStateSucceeded),
					Quantity:             to.Ptr[int32](3),
					Renew:                to.Ptr(false),
					ReservedResourceType: to.Ptr(armreservations.ReservedResourceTypeVirtualMachines),
					SKUDescription:       to.Ptr("D1 v2"),
				},
				SKU: &armreservations.SKUName{
					Name: to.Ptr("Standard_DS1_v2"),
				},
			}}
		if !reflect.DeepEqual(exampleRes, res.ReservationResponseArray) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ReservationResponseArray)
			t.Fatalf("Mock response is not equal to example response for example specification/reservations/resource-manager/Microsoft.Capacity/stable/2021-07-01/examples/MergeReservations.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReservation_List(t *testing.T) {
	// From example specification/reservations/resource-manager/Microsoft.Capacity/stable/2021-07-01/examples/GetReservationsFromOrder.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ReservationList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armreservations.NewReservationClient(cred, &options)
	pager := client.List("276e7ae4-84d0-4da6-ab4b-d6b94f3557da",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/reservations/resource-manager/Microsoft.Capacity/stable/2021-07-01/examples/GetReservationsFromOrder.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armreservations.ReservationList{
			Value: []*armreservations.ReservationResponse{
				{
					Name:     to.Ptr("276e7ae4-84d0-4da6-ab4b-d6b94f3557da/bcae77cd-3119-4766-919f-b50d36c75c7a"),
					Type:     to.Ptr("Microsoft.Capacity/reservationOrders/reservations"),
					Etag:     to.Ptr[int32](10),
					ID:       to.Ptr("/providers/microsoft.capacity/reservationOrders/276e7ae4-84d0-4da6-ab4b-d6b94f3557da/reservations/bcae77cd-3119-4766-919f-b50d36c75c7a"),
					Location: to.Ptr("eastus"),
					Properties: &armreservations.Properties{
						AppliedScopeType: to.Ptr(armreservations.AppliedScopeTypeSingle),
						AppliedScopes: []*string{
							to.Ptr("/subscriptions/98df3792-7962-4f18-8be2-d5576f122de3")},
						BillingPlan:       to.Ptr(armreservations.ReservationBillingPlanMonthly),
						BillingScopeID:    to.Ptr("/subscriptions/19376483-64b8-49e4-a931-d5248828720a"),
						DisplayName:       to.Ptr("cabri_test"),
						EffectiveDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-09-22T01:00:30.9253826Z"); return t }()),
						ExpiryDate:        to.Ptr(func() time.Time { t, _ := time.Parse("2006-01-02", "2018-09-22"); return t }()),
						ExtendedStatusInfo: &armreservations.ExtendedStatusInfo{
							Message:    to.Ptr("This reservation was split and is no longer active."),
							StatusCode: to.Ptr(armreservations.ReservationStatusCodeSplit),
						},
						InstanceFlexibility:  to.Ptr(armreservations.InstanceFlexibilityOn),
						LastUpdatedDateTime:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-09-22T01:00:36.3191627Z"); return t }()),
						ProvisioningState:    to.Ptr(armreservations.ProvisioningStateSucceeded),
						Quantity:             to.Ptr[int32](3),
						Renew:                to.Ptr(false),
						ReservedResourceType: to.Ptr(armreservations.ReservedResourceTypeVirtualMachines),
						SKUDescription:       to.Ptr("D1 v2"),
						SplitProperties: &armreservations.ReservationSplitProperties{
							SplitDestinations: []*string{
								to.Ptr("/providers/microsoft.capacity/reservationOrders/276e7ae4-84d0-4da6-ab4b-d6b94f3557da/reservations/00238563-7312-4c20-a134-8c030bf938a7"),
								to.Ptr("/providers/microsoft.capacity/reservationOrders/276e7ae4-84d0-4da6-ab4b-d6b94f3557da/reservations/e0e4b4f5-77ea-4984-9ee4-6bf9850ee6de")},
						},
					},
					SKU: &armreservations.SKUName{
						Name: to.Ptr("Standard_DS1_v2"),
					},
				},
				{
					Name:     to.Ptr("276e7ae4-84d0-4da6-ab4b-d6b94f3557da/00238563-7312-4c20-a134-8c030bf938a7"),
					Type:     to.Ptr("Microsoft.Capacity/reservationOrders/reservations"),
					Etag:     to.Ptr[int32](5),
					ID:       to.Ptr("/providers/microsoft.capacity/reservationOrders/276e7ae4-84d0-4da6-ab4b-d6b94f3557da/reservations/00238563-7312-4c20-a134-8c030bf938a7"),
					Location: to.Ptr("eastus"),
					Properties: &armreservations.Properties{
						AppliedScopeType: to.Ptr(armreservations.AppliedScopeTypeSingle),
						AppliedScopes: []*string{
							to.Ptr("/subscriptions/98df3792-7962-4f18-8be2-d5576f122de3")},
						BillingPlan:       to.Ptr(armreservations.ReservationBillingPlanMonthly),
						BillingScopeID:    to.Ptr("/subscriptions/19376483-64b8-49e4-a931-d5248828720a"),
						DisplayName:       to.Ptr("cabri_test"),
						EffectiveDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-09-22T22:46:32.7632798Z"); return t }()),
						ExpiryDate:        to.Ptr(func() time.Time { t, _ := time.Parse("2006-01-02", "2018-09-22"); return t }()),
						ExtendedStatusInfo: &armreservations.ExtendedStatusInfo{
							Message:    to.Ptr("This reservation was merged and is no longer active."),
							StatusCode: to.Ptr(armreservations.ReservationStatusCodeMerged),
						},
						InstanceFlexibility: to.Ptr(armreservations.InstanceFlexibilityOn),
						LastUpdatedDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-09-22T22:46:32.7632798Z"); return t }()),
						MergeProperties: &armreservations.ReservationMergeProperties{
							MergeDestination: to.Ptr("/providers/microsoft.capacity/reservationOrders/276e7ae4-84d0-4da6-ab4b-d6b94f3557da/reservations/6ef59113-3482-40da-8d79-787f823e34bc"),
						},
						ProvisioningState:    to.Ptr(armreservations.ProvisioningStateSucceeded),
						Quantity:             to.Ptr[int32](1),
						Renew:                to.Ptr(false),
						ReservedResourceType: to.Ptr(armreservations.ReservedResourceTypeVirtualMachines),
						SKUDescription:       to.Ptr("D1 v2"),
						SplitProperties: &armreservations.ReservationSplitProperties{
							SplitSource: to.Ptr("/providers/microsoft.capacity/reservationOrders/276e7ae4-84d0-4da6-ab4b-d6b94f3557da/reservations/bcae77cd-3119-4766-919f-b50d36c75c7a"),
						},
					},
					SKU: &armreservations.SKUName{
						Name: to.Ptr("Standard_DS1_v2"),
					},
				},
				{
					Name:     to.Ptr("276e7ae4-84d0-4da6-ab4b-d6b94f3557da/e0e4b4f5-77ea-4984-9ee4-6bf9850ee6de"),
					Type:     to.Ptr("Microsoft.Capacity/reservationOrders/reservations"),
					Etag:     to.Ptr[int32](4),
					ID:       to.Ptr("/providers/microsoft.capacity/reservationOrders/276e7ae4-84d0-4da6-ab4b-d6b94f3557da/reservations/e0e4b4f5-77ea-4984-9ee4-6bf9850ee6de"),
					Location: to.Ptr("eastus"),
					Properties: &armreservations.Properties{
						AppliedScopeType: to.Ptr(armreservations.AppliedScopeTypeSingle),
						AppliedScopes: []*string{
							to.Ptr("/subscriptions/98df3792-7962-4f18-8be2-d5576f122de3")},
						BillingPlan:       to.Ptr(armreservations.ReservationBillingPlanMonthly),
						BillingScopeID:    to.Ptr("/subscriptions/19376483-64b8-49e4-a931-d5248828720a"),
						DisplayName:       to.Ptr("cabri_test"),
						EffectiveDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-09-22T22:46:32.7632798Z"); return t }()),
						ExpiryDate:        to.Ptr(func() time.Time { t, _ := time.Parse("2006-01-02", "2018-09-22"); return t }()),
						ExtendedStatusInfo: &armreservations.ExtendedStatusInfo{
							Message:    to.Ptr("This reservation was merged and is no longer active."),
							StatusCode: to.Ptr(armreservations.ReservationStatusCodeMerged),
						},
						InstanceFlexibility: to.Ptr(armreservations.InstanceFlexibilityOn),
						LastUpdatedDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-09-22T22:46:32.7632798Z"); return t }()),
						MergeProperties: &armreservations.ReservationMergeProperties{
							MergeDestination: to.Ptr("/providers/microsoft.capacity/reservationOrders/276e7ae4-84d0-4da6-ab4b-d6b94f3557da/reservations/6ef59113-3482-40da-8d79-787f823e34bc"),
						},
						ProvisioningState:    to.Ptr(armreservations.ProvisioningStateSucceeded),
						Quantity:             to.Ptr[int32](2),
						Renew:                to.Ptr(false),
						ReservedResourceType: to.Ptr(armreservations.ReservedResourceTypeVirtualMachines),
						SKUDescription:       to.Ptr("D1 v2"),
						SplitProperties: &armreservations.ReservationSplitProperties{
							SplitSource: to.Ptr("/providers/microsoft.capacity/reservationOrders/276e7ae4-84d0-4da6-ab4b-d6b94f3557da/reservations/bcae77cd-3119-4766-919f-b50d36c75c7a"),
						},
					},
					SKU: &armreservations.SKUName{
						Name: to.Ptr("Standard_DS1_v2"),
					},
				},
				{
					Name:     to.Ptr("276e7ae4-84d0-4da6-ab4b-d6b94f3557da/6ef59113-3482-40da-8d79-787f823e34bc"),
					Type:     to.Ptr("Microsoft.Capacity/reservationOrders/reservations"),
					Etag:     to.Ptr[int32](2),
					ID:       to.Ptr("/providers/microsoft.capacity/reservationOrders/276e7ae4-84d0-4da6-ab4b-d6b94f3557da/reservations/6ef59113-3482-40da-8d79-787f823e34bc"),
					Location: to.Ptr("eastus"),
					Properties: &armreservations.Properties{
						AppliedScopeType: to.Ptr(armreservations.AppliedScopeTypeSingle),
						AppliedScopes: []*string{
							to.Ptr("/subscriptions/98df3792-7962-4f18-8be2-d5576f122de3")},
						BillingPlan:         to.Ptr(armreservations.ReservationBillingPlanMonthly),
						BillingScopeID:      to.Ptr("/subscriptions/19376483-64b8-49e4-a931-d5248828720a"),
						DisplayName:         to.Ptr("cabri_test"),
						EffectiveDateTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-09-22T22:46:32.7632798Z"); return t }()),
						ExpiryDate:          to.Ptr(func() time.Time { t, _ := time.Parse("2006-01-02", "2018-09-22"); return t }()),
						InstanceFlexibility: to.Ptr(armreservations.InstanceFlexibilityOn),
						LastUpdatedDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-09-22T22:46:32.7632798Z"); return t }()),
						MergeProperties: &armreservations.ReservationMergeProperties{
							MergeSources: []*string{
								to.Ptr("/providers/microsoft.capacity/reservationOrders/276e7ae4-84d0-4da6-ab4b-d6b94f3557da/reservations/00238563-7312-4c20-a134-8c030bf938a7"),
								to.Ptr("/providers/microsoft.capacity/reservationOrders/276e7ae4-84d0-4da6-ab4b-d6b94f3557da/reservations/e0e4b4f5-77ea-4984-9ee4-6bf9850ee6de")},
						},
						ProvisioningState:    to.Ptr(armreservations.ProvisioningStateSucceeded),
						Quantity:             to.Ptr[int32](3),
						Renew:                to.Ptr(false),
						ReservedResourceType: to.Ptr(armreservations.ReservedResourceTypeVirtualMachines),
						SKUDescription:       to.Ptr("D1 v2"),
					},
					SKU: &armreservations.SKUName{
						Name: to.Ptr("Standard_DS1_v2"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ReservationList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ReservationList)
			t.Fatalf("Mock response is not equal to example response for example specification/reservations/resource-manager/Microsoft.Capacity/stable/2021-07-01/examples/GetReservationsFromOrder.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReservation_Get(t *testing.T) {
	// From example specification/reservations/resource-manager/Microsoft.Capacity/stable/2021-07-01/examples/GetReservationDetails.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetReservation"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armreservations.NewReservationClient(cred, &options)
	res, err := client.Get(ctx,
		"6ef59113-3482-40da-8d79-787f823e34bc",
		"276e7ae4-84d0-4da6-ab4b-d6b94f3557da",
		&armreservations.ReservationClientGetOptions{Expand: to.Ptr("renewProperties")})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/reservations/resource-manager/Microsoft.Capacity/stable/2021-07-01/examples/GetReservationDetails.json: %v", err)
	}
	// Response check
	{
		exampleRes := armreservations.ReservationResponse{
			Name:     to.Ptr("276e7ae4-84d0-4da6-ab4b-d6b94f3557da/6ef59113-3482-40da-8d79-787f823e34bc"),
			Type:     to.Ptr("Microsoft.Capacity/reservationOrders/reservations"),
			Etag:     to.Ptr[int32](2),
			ID:       to.Ptr("/providers/microsoft.capacity/reservationOrders/276e7ae4-84d0-4da6-ab4b-d6b94f3557da/reservations/6ef59113-3482-40da-8d79-787f823e34bc"),
			Location: to.Ptr("eastus"),
			Properties: &armreservations.Properties{
				AppliedScopeType: to.Ptr(armreservations.AppliedScopeTypeSingle),
				AppliedScopes: []*string{
					to.Ptr("/subscriptions/98df3792-7962-4f18-8be2-d5576f122de3")},
				BillingPlan:         to.Ptr(armreservations.ReservationBillingPlanMonthly),
				BillingScopeID:      to.Ptr("/subscriptions/19376483-64b8-49e4-a931-d5248828720a"),
				DisplayName:         to.Ptr("cabri_test"),
				EffectiveDateTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-09-22T22:46:32.7632798Z"); return t }()),
				ExpiryDate:          to.Ptr(func() time.Time { t, _ := time.Parse("2006-01-02", "2018-09-22"); return t }()),
				InstanceFlexibility: to.Ptr(armreservations.InstanceFlexibilityOff),
				LastUpdatedDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-09-22T22:46:32.7632798Z"); return t }()),
				MergeProperties: &armreservations.ReservationMergeProperties{
					MergeSources: []*string{
						to.Ptr("/providers/microsoft.capacity/reservationOrders/276e7ae4-84d0-4da6-ab4b-d6b94f3557da/reservations/00238563-7312-4c20-a134-8c030bf938a7"),
						to.Ptr("/providers/microsoft.capacity/reservationOrders/276e7ae4-84d0-4da6-ab4b-d6b94f3557da/reservations/e0e4b4f5-77ea-4984-9ee4-6bf9850ee6de")},
				},
				ProvisioningState: to.Ptr(armreservations.ProvisioningStateSucceeded),
				Quantity:          to.Ptr[int32](3),
				Renew:             to.Ptr(false),
				RenewDestination:  to.Ptr("/providers/microsoft.capacity/reservationOrders/276e7ae4-84d0-4da6-ab4b-d6b94f3557da/reservations/00238563-7312-4c20-a134-8c030bf938a7"),
				RenewProperties: &armreservations.RenewPropertiesResponse{
					BillingCurrencyTotal: &armreservations.RenewPropertiesResponseBillingCurrencyTotal{
						Amount:       to.Ptr[float32](466),
						CurrencyCode: to.Ptr("USD"),
					},
					PricingCurrencyTotal: &armreservations.RenewPropertiesResponsePricingCurrencyTotal{
						Amount:       to.Ptr[float32](466),
						CurrencyCode: to.Ptr("USD"),
					},
					PurchaseProperties: &armreservations.PurchaseRequest{
						Location: to.Ptr("westus"),
						Properties: &armreservations.PurchaseRequestProperties{
							AppliedScopeType: to.Ptr(armreservations.AppliedScopeTypeShared),
							BillingScopeID:   to.Ptr("/subscriptions/19376483-64b8-49e4-a931-d5248828720a"),
							DisplayName:      to.Ptr("Renew_Test_0618"),
							Quantity:         to.Ptr[int32](2),
							Renew:            to.Ptr(false),
							ReservedResourceProperties: &armreservations.PurchaseRequestPropertiesReservedResourceProperties{
								InstanceFlexibility: to.Ptr(armreservations.InstanceFlexibilityOn),
							},
							ReservedResourceType: to.Ptr(armreservations.ReservedResourceTypeVirtualMachines),
							Term:                 to.Ptr(armreservations.ReservationTermP1Y),
						},
						SKU: &armreservations.SKUName{
							Name: to.Ptr("Standard_D1"),
						},
					},
				},
				RenewSource:          to.Ptr("/providers/microsoft.capacity/reservationOrders/276e7ae4-84d0-4da6-ab4b-d6b94f3557da/reservations/00238563-7312-4c20-a134-8c030bf938a7"),
				ReservedResourceType: to.Ptr(armreservations.ReservedResourceTypeVirtualMachines),
				SKUDescription:       to.Ptr("D1 v2"),
				Term:                 to.Ptr(armreservations.ReservationTermP1Y),
			},
			SKU: &armreservations.SKUName{
				Name: to.Ptr("Standard_DS1_v2"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ReservationResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ReservationResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/reservations/resource-manager/Microsoft.Capacity/stable/2021-07-01/examples/GetReservationDetails.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReservation_Update(t *testing.T) {
	// From example specification/reservations/resource-manager/Microsoft.Capacity/stable/2021-07-01/examples/UpdateReservation.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"PatchReservation"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armreservations.NewReservationClient(cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"276e7ae4-84d0-4da6-ab4b-d6b94f3557da",
		"6ef59113-3482-40da-8d79-787f823e34bc",
		armreservations.Patch{
			Properties: &armreservations.PatchProperties{
				AppliedScopeType:    to.Ptr(armreservations.AppliedScopeTypeShared),
				InstanceFlexibility: to.Ptr(armreservations.InstanceFlexibilityOff),
			},
		},
		&armreservations.ReservationClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/reservations/resource-manager/Microsoft.Capacity/stable/2021-07-01/examples/UpdateReservation.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/reservations/resource-manager/Microsoft.Capacity/stable/2021-07-01/examples/UpdateReservation.json: %v", err)
	}
	// Response check
	{
		exampleRes := armreservations.ReservationResponse{
			Name:     to.Ptr("276e7ae4-84d0-4da6-ab4b-d6b94f3557da/6ef59113-3482-40da-8d79-787f823e34bc"),
			Type:     to.Ptr("Microsoft.Capacity/reservationOrders/reservations"),
			Etag:     to.Ptr[int32](4),
			ID:       to.Ptr("/providers/microsoft.capacity/reservationOrders/276e7ae4-84d0-4da6-ab4b-d6b94f3557da/reservations/6ef59113-3482-40da-8d79-787f823e34bc"),
			Location: to.Ptr("eastus"),
			Properties: &armreservations.Properties{
				AppliedScopeType:    to.Ptr(armreservations.AppliedScopeTypeShared),
				BillingPlan:         to.Ptr(armreservations.ReservationBillingPlanMonthly),
				BillingScopeID:      to.Ptr("/subscriptions/19376483-64b8-49e4-a931-d5248828720a"),
				DisplayName:         to.Ptr("cabri_test"),
				EffectiveDateTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-09-22T23:57:48.1891638Z"); return t }()),
				ExpiryDate:          to.Ptr(func() time.Time { t, _ := time.Parse("2006-01-02", "2018-09-22"); return t }()),
				InstanceFlexibility: to.Ptr(armreservations.InstanceFlexibilityOff),
				LastUpdatedDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-09-22T23:57:54.3768768Z"); return t }()),
				MergeProperties: &armreservations.ReservationMergeProperties{
					MergeSources: []*string{
						to.Ptr("/providers/microsoft.capacity/reservationOrders/276e7ae4-84d0-4da6-ab4b-d6b94f3557da/reservations/00238563-7312-4c20-a134-8c030bf938a7"),
						to.Ptr("/providers/microsoft.capacity/reservationOrders/276e7ae4-84d0-4da6-ab4b-d6b94f3557da/reservations/e0e4b4f5-77ea-4984-9ee4-6bf9850ee6de")},
				},
				ProvisioningState:    to.Ptr(armreservations.ProvisioningStateSucceeded),
				Quantity:             to.Ptr[int32](3),
				Renew:                to.Ptr(false),
				ReservedResourceType: to.Ptr(armreservations.ReservedResourceTypeVirtualMachines),
				SKUDescription:       to.Ptr("D1 v2"),
			},
			SKU: &armreservations.SKUName{
				Name: to.Ptr("Standard_DS1_v2"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ReservationResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ReservationResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/reservations/resource-manager/Microsoft.Capacity/stable/2021-07-01/examples/UpdateReservation.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReservation_ListRevisions(t *testing.T) {
	// From example specification/reservations/resource-manager/Microsoft.Capacity/stable/2021-07-01/examples/GetReservationRevisions.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ReservationRevisions"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armreservations.NewReservationClient(cred, &options)
	pager := client.ListRevisions("6ef59113-3482-40da-8d79-787f823e34bc",
		"276e7ae4-84d0-4da6-ab4b-d6b94f3557da",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/reservations/resource-manager/Microsoft.Capacity/stable/2021-07-01/examples/GetReservationRevisions.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armreservations.ReservationList{
			Value: []*armreservations.ReservationResponse{
				{
					Name:     to.Ptr("276e7ae4-84d0-4da6-ab4b-d6b94f3557da/6ef59113-3482-40da-8d79-787f823e34bc/4"),
					Type:     to.Ptr("Microsoft.Capacity/reservationOrders/reservations/revisions"),
					Etag:     to.Ptr[int32](4),
					ID:       to.Ptr("/providers/microsoft.capacity/reservationOrders/276e7ae4-84d0-4da6-ab4b-d6b94f3557da/reservations/6ef59113-3482-40da-8d79-787f823e34bc/revisions/4"),
					Location: to.Ptr("eastus"),
					Properties: &armreservations.Properties{
						AppliedScopeType:    to.Ptr(armreservations.AppliedScopeTypeShared),
						BillingPlan:         to.Ptr(armreservations.ReservationBillingPlanMonthly),
						DisplayName:         to.Ptr("cabri_test"),
						EffectiveDateTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-09-22T23:57:48.1891638Z"); return t }()),
						ExpiryDate:          to.Ptr(func() time.Time { t, _ := time.Parse("2006-01-02", "2018-09-22"); return t }()),
						InstanceFlexibility: to.Ptr(armreservations.InstanceFlexibilityOn),
						LastUpdatedDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-09-22T23:57:54.3768768Z"); return t }()),
						MergeProperties: &armreservations.ReservationMergeProperties{
							MergeSources: []*string{
								to.Ptr("/providers/microsoft.capacity/reservationOrders/276e7ae4-84d0-4da6-ab4b-d6b94f3557da/reservations/00238563-7312-4c20-a134-8c030bf938a7"),
								to.Ptr("/providers/microsoft.capacity/reservationOrders/276e7ae4-84d0-4da6-ab4b-d6b94f3557da/reservations/e0e4b4f5-77ea-4984-9ee4-6bf9850ee6de")},
						},
						ProvisioningState:    to.Ptr(armreservations.ProvisioningStateSucceeded),
						Quantity:             to.Ptr[int32](3),
						ReservedResourceType: to.Ptr(armreservations.ReservedResourceTypeVirtualMachines),
						SKUDescription:       to.Ptr("D1 v2"),
					},
					SKU: &armreservations.SKUName{
						Name: to.Ptr("Standard_DS1_v2"),
					},
				},
				{
					Name:     to.Ptr("276e7ae4-84d0-4da6-ab4b-d6b94f3557da/6ef59113-3482-40da-8d79-787f823e34bc/3"),
					Type:     to.Ptr("Microsoft.Capacity/reservationOrders/reservations/revisions"),
					Etag:     to.Ptr[int32](3),
					ID:       to.Ptr("/providers/microsoft.capacity/reservationOrders/276e7ae4-84d0-4da6-ab4b-d6b94f3557da/reservations/6ef59113-3482-40da-8d79-787f823e34bc/revisions/3"),
					Location: to.Ptr("eastus"),
					Properties: &armreservations.Properties{
						AppliedScopeType: to.Ptr(armreservations.AppliedScopeTypeSingle),
						AppliedScopes: []*string{
							to.Ptr("/subscriptions/98df3792-7962-4f18-8be2-d5576f122de3")},
						BillingPlan:       to.Ptr(armreservations.ReservationBillingPlanMonthly),
						DisplayName:       to.Ptr("cabri_test"),
						EffectiveDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-09-22T22:46:32.7632798Z"); return t }()),
						ExpiryDate:        to.Ptr(func() time.Time { t, _ := time.Parse("2006-01-02", "2018-09-22"); return t }()),
						ExtendedStatusInfo: &armreservations.ExtendedStatusInfo{
							Message:    to.Ptr("An operation is in progress on your reservation. Please wait for operation to complete before taking further action"),
							StatusCode: to.Ptr(armreservations.ReservationStatusCodePending),
						},
						InstanceFlexibility: to.Ptr(armreservations.InstanceFlexibilityOn),
						LastUpdatedDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-09-22T23:57:47.488284Z"); return t }()),
						MergeProperties: &armreservations.ReservationMergeProperties{
							MergeSources: []*string{
								to.Ptr("/providers/microsoft.capacity/reservationOrders/276e7ae4-84d0-4da6-ab4b-d6b94f3557da/reservations/00238563-7312-4c20-a134-8c030bf938a7"),
								to.Ptr("/providers/microsoft.capacity/reservationOrders/276e7ae4-84d0-4da6-ab4b-d6b94f3557da/reservations/e0e4b4f5-77ea-4984-9ee4-6bf9850ee6de")},
						},
						ProvisioningState:    to.Ptr(armreservations.ProvisioningStateSucceeded),
						Quantity:             to.Ptr[int32](3),
						ReservedResourceType: to.Ptr(armreservations.ReservedResourceTypeVirtualMachines),
						SKUDescription:       to.Ptr("D1 v2"),
					},
					SKU: &armreservations.SKUName{
						Name: to.Ptr("Standard_DS1_v2"),
					},
				},
				{
					Name:     to.Ptr("276e7ae4-84d0-4da6-ab4b-d6b94f3557da/6ef59113-3482-40da-8d79-787f823e34bc/2"),
					Type:     to.Ptr("Microsoft.Capacity/reservationOrders/reservations/revisions"),
					Etag:     to.Ptr[int32](2),
					ID:       to.Ptr("/providers/microsoft.capacity/reservationOrders/276e7ae4-84d0-4da6-ab4b-d6b94f3557da/reservations/6ef59113-3482-40da-8d79-787f823e34bc/revisions/2"),
					Location: to.Ptr("eastus"),
					Properties: &armreservations.Properties{
						AppliedScopeType: to.Ptr(armreservations.AppliedScopeTypeSingle),
						AppliedScopes: []*string{
							to.Ptr("/subscriptions/98df3792-7962-4f18-8be2-d5576f122de3")},
						BillingPlan:         to.Ptr(armreservations.ReservationBillingPlanMonthly),
						DisplayName:         to.Ptr("cabri_test"),
						EffectiveDateTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-09-22T22:46:32.7632798Z"); return t }()),
						ExpiryDate:          to.Ptr(func() time.Time { t, _ := time.Parse("2006-01-02", "2018-09-22"); return t }()),
						InstanceFlexibility: to.Ptr(armreservations.InstanceFlexibilityOn),
						LastUpdatedDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-09-22T22:46:32.7632798Z"); return t }()),
						MergeProperties: &armreservations.ReservationMergeProperties{
							MergeSources: []*string{
								to.Ptr("/providers/microsoft.capacity/reservationOrders/276e7ae4-84d0-4da6-ab4b-d6b94f3557da/reservations/00238563-7312-4c20-a134-8c030bf938a7"),
								to.Ptr("/providers/microsoft.capacity/reservationOrders/276e7ae4-84d0-4da6-ab4b-d6b94f3557da/reservations/e0e4b4f5-77ea-4984-9ee4-6bf9850ee6de")},
						},
						ProvisioningState:    to.Ptr(armreservations.ProvisioningStateSucceeded),
						Quantity:             to.Ptr[int32](3),
						ReservedResourceType: to.Ptr(armreservations.ReservedResourceTypeVirtualMachines),
						SKUDescription:       to.Ptr("D1 v2"),
					},
					SKU: &armreservations.SKUName{
						Name: to.Ptr("Standard_DS1_v2"),
					},
				},
				{
					Name:     to.Ptr("276e7ae4-84d0-4da6-ab4b-d6b94f3557da/6ef59113-3482-40da-8d79-787f823e34bc/1"),
					Type:     to.Ptr("Microsoft.Capacity/reservationOrders/reservations/revisions"),
					Etag:     to.Ptr[int32](1),
					ID:       to.Ptr("/providers/microsoft.capacity/reservationOrders/276e7ae4-84d0-4da6-ab4b-d6b94f3557da/reservations/6ef59113-3482-40da-8d79-787f823e34bc/revisions/1"),
					Location: to.Ptr("eastus"),
					Properties: &armreservations.Properties{
						AppliedScopeType: to.Ptr(armreservations.AppliedScopeTypeSingle),
						AppliedScopes: []*string{
							to.Ptr("/subscriptions/98df3792-7962-4f18-8be2-d5576f122de3")},
						DisplayName:         to.Ptr("cabri_test"),
						EffectiveDateTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-09-22T22:46:27.3313607Z"); return t }()),
						ExpiryDate:          to.Ptr(func() time.Time { t, _ := time.Parse("2006-01-02", "2018-09-22"); return t }()),
						InstanceFlexibility: to.Ptr(armreservations.InstanceFlexibilityOn),
						LastUpdatedDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-09-22T22:46:27.3313607Z"); return t }()),
						MergeProperties: &armreservations.ReservationMergeProperties{
							MergeSources: []*string{
								to.Ptr("/providers/microsoft.capacity/reservationOrders/276e7ae4-84d0-4da6-ab4b-d6b94f3557da/reservations/00238563-7312-4c20-a134-8c030bf938a7"),
								to.Ptr("/providers/microsoft.capacity/reservationOrders/276e7ae4-84d0-4da6-ab4b-d6b94f3557da/reservations/e0e4b4f5-77ea-4984-9ee4-6bf9850ee6de")},
						},
						ProvisioningState:    to.Ptr(armreservations.ProvisioningStateSucceeded),
						Quantity:             to.Ptr[int32](3),
						ReservedResourceType: to.Ptr(armreservations.ReservedResourceTypeVirtualMachines),
						SKUDescription:       to.Ptr("D1 v2"),
					},
					SKU: &armreservations.SKUName{
						Name: to.Ptr("Standard_DS1_v2"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ReservationList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ReservationList)
			t.Fatalf("Mock response is not equal to example response for example specification/reservations/resource-manager/Microsoft.Capacity/stable/2021-07-01/examples/GetReservationRevisions.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReservation_ListAll(t *testing.T) {
	// From example specification/reservations/resource-manager/Microsoft.Capacity/stable/2021-07-01/examples/GetReservations.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Catalog"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armreservations.NewReservationClient(cred, &options)
	pager := client.ListAll(&armreservations.ReservationClientListAllOptions{Filter: to.Ptr("(properties%2farchived+eq+false)"),
		Orderby:        to.Ptr("properties/displayName asc"),
		RefreshSummary: nil,
		Skiptoken:      to.Ptr[float32](50),
		SelectedState:  nil,
		Take:           to.Ptr[float32](1),
	})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/reservations/resource-manager/Microsoft.Capacity/stable/2021-07-01/examples/GetReservations.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armreservations.ListResult{
			Summary: &armreservations.ReservationSummary{
				CancelledCount: to.Ptr[float32](0),
				ExpiredCount:   to.Ptr[float32](0),
				ExpiringCount:  to.Ptr[float32](0),
				FailedCount:    to.Ptr[float32](0),
				PendingCount:   to.Ptr[float32](0),
				SucceededCount: to.Ptr[float32](1),
			},
			Value: []*armreservations.ReservationResponse{
				{
					Name:     to.Ptr("00000000-0000-0000-0000-000000000001/00000000-0000-0000-0000-000000000000"),
					Type:     to.Ptr("Microsoft.Capacity/reservationOrders/reservations"),
					ID:       to.Ptr("/providers/microsoft.capacity/reservationOrders/00000000-0000-0000-0000-000000000001/reservations/00000000-0000-0000-0000-000000000000"),
					Location: to.Ptr("westus"),
					Properties: &armreservations.Properties{
						AppliedScopeType:             to.Ptr(armreservations.AppliedScopeTypeShared),
						DisplayName:                  to.Ptr("VM_RI_07-21-2020_12-06"),
						DisplayProvisioningState:     to.Ptr("Succeeded"),
						EffectiveDateTime:            to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-09-22T22:46:32.7632798Z"); return t }()),
						ExpiryDate:                   to.Ptr(func() time.Time { t, _ := time.Parse("2006-01-02", "2023-07-21"); return t }()),
						ProvisioningState:            to.Ptr(armreservations.ProvisioningStateSucceeded),
						PurchaseDate:                 to.Ptr(func() time.Time { t, _ := time.Parse("2006-01-02", "2021-04-22"); return t }()),
						Quantity:                     to.Ptr[int32](2),
						Renew:                        to.Ptr(false),
						RenewSource:                  to.Ptr("/providers/Microsoft.Capacity/reservationorders/00000000-0000-0000-0000-000000000002/reservations/00000000-0000-0000-0000-000000000003"),
						ReservedResourceType:         to.Ptr(armreservations.ReservedResourceTypeVirtualMachines),
						Term:                         to.Ptr(armreservations.ReservationTermP3Y),
						UserFriendlyAppliedScopeType: to.Ptr("Shared"),
						UserFriendlyRenewState:       to.Ptr("Off"),
						Utilization: &armreservations.PropertiesUtilization{
							Aggregates: []*armreservations.ReservationUtilizationAggregates{
								{
									Grain:     to.Ptr[float32](1),
									GrainUnit: to.Ptr("days"),
									Value:     to.Ptr[float32](0.05),
									ValueUnit: to.Ptr("percentage"),
								},
								{
									Grain:     to.Ptr[float32](7),
									GrainUnit: to.Ptr("days"),
									Value:     to.Ptr[float32](0.05),
									ValueUnit: to.Ptr("percentage"),
								},
								{
									Grain:     to.Ptr[float32](30),
									GrainUnit: to.Ptr("days"),
									Value:     to.Ptr[float32](0.05),
									ValueUnit: to.Ptr("percentage"),
								}},
							Trend: to.Ptr("UP"),
						},
					},
					SKU: &armreservations.SKUName{
						Name: to.Ptr("Standard_D1"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/reservations/resource-manager/Microsoft.Capacity/stable/2021-07-01/examples/GetReservations.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAzureReservationAPI_GetCatalog(t *testing.T) {
	// From example specification/reservations/resource-manager/Microsoft.Capacity/stable/2021-07-01/examples/GetCatalog.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Catalog"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armreservations.NewAzureReservationAPIClient(cred, &options)
	res, err := client.GetCatalog(ctx,
		"23bc208b-083f-4901-ae85-4f98c0c3b4b6",
		&armreservations.AzureReservationAPIClientGetCatalogOptions{ReservedResourceType: to.Ptr("VirtualMachines"),
			Location: to.Ptr("eastus"),
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/reservations/resource-manager/Microsoft.Capacity/stable/2021-07-01/examples/GetCatalog.json: %v", err)
	}
	// Response check
	{
		exampleRes := []*armreservations.Catalog{
			{
				Name: to.Ptr("Standard_DS5_v2"),
				BillingPlans: map[string][]*armreservations.ReservationBillingPlan{
					"P1Y": {
						to.Ptr(armreservations.ReservationBillingPlanUpfront),
						to.Ptr(armreservations.ReservationBillingPlanMonthly)},
					"P3Y": {
						to.Ptr(armreservations.ReservationBillingPlanUpfront),
						to.Ptr(armreservations.ReservationBillingPlanMonthly)},
				},
				Locations: []*string{
					to.Ptr("eastus")},
				ResourceType: to.Ptr("VirtualMachines"),
				Restrictions: []*armreservations.SKURestriction{},
				SKUProperties: []*armreservations.SKUProperty{
					{
						Name:  to.Ptr("Cores"),
						Value: to.Ptr("16"),
					},
					{
						Name:  to.Ptr("ProductTitle"),
						Value: to.Ptr("DSv2 Series, DS5"),
					},
					{
						Name:  to.Ptr("ProductShortName"),
						Value: to.Ptr("DSv2 Series"),
					},
					{
						Name:  to.Ptr("SKUName"),
						Value: to.Ptr("DS5 v2"),
					},
					{
						Name:  to.Ptr("MeterId"),
						Value: to.Ptr("12bc208b-083f-4901-ae85-4f98c0c3b4b8"),
					}},
				Terms: []*armreservations.ReservationTerm{
					to.Ptr(armreservations.ReservationTermP1Y),
					to.Ptr(armreservations.ReservationTermP3Y)},
			},
			{
				Name: to.Ptr("Standard_D1"),
				BillingPlans: map[string][]*armreservations.ReservationBillingPlan{
					"P1Y": {
						to.Ptr(armreservations.ReservationBillingPlanUpfront),
						to.Ptr(armreservations.ReservationBillingPlanMonthly)},
					"P3Y": {
						to.Ptr(armreservations.ReservationBillingPlanUpfront),
						to.Ptr(armreservations.ReservationBillingPlanMonthly)},
				},
				Locations: []*string{
					to.Ptr("eastus")},
				ResourceType: to.Ptr("VirtualMachines"),
				Restrictions: []*armreservations.SKURestriction{
					{
						Type:       to.Ptr("Term"),
						ReasonCode: to.Ptr("NotAvailableForSubscription"),
						Values: []*string{
							to.Ptr("P1Y")},
					},
					{
						Type:       to.Ptr("Term"),
						ReasonCode: to.Ptr("NotAvailableForSubscription"),
						Values: []*string{
							to.Ptr("P3Y")},
					}},
				SKUProperties: []*armreservations.SKUProperty{
					{
						Name:  to.Ptr("Cores"),
						Value: to.Ptr("1"),
					},
					{
						Name:  to.Ptr("ProductTitle"),
						Value: to.Ptr("D Series, D1"),
					},
					{
						Name:  to.Ptr("ProductShortName"),
						Value: to.Ptr("D Series"),
					},
					{
						Name:  to.Ptr("SKUName"),
						Value: to.Ptr("D1"),
					},
					{
						Name:  to.Ptr("MeterId"),
						Value: to.Ptr("12bc208b-083f-4901-ae85-4f98c0c3b4b8"),
					}},
				Terms: []*armreservations.ReservationTerm{
					to.Ptr(armreservations.ReservationTermP1Y),
					to.Ptr(armreservations.ReservationTermP3Y)},
			},
			{
				Name: to.Ptr("Standard_F2"),
				BillingPlans: map[string][]*armreservations.ReservationBillingPlan{
					"P1Y": {
						to.Ptr(armreservations.ReservationBillingPlanUpfront),
						to.Ptr(armreservations.ReservationBillingPlanMonthly)},
					"P3Y": {
						to.Ptr(armreservations.ReservationBillingPlanUpfront),
						to.Ptr(armreservations.ReservationBillingPlanMonthly)},
				},
				Locations: []*string{
					to.Ptr("eastus")},
				ResourceType: to.Ptr("VirtualMachines"),
				Restrictions: []*armreservations.SKURestriction{
					{
						Type:       to.Ptr("Location"),
						ReasonCode: to.Ptr("NotAvailableForSubscription"),
						Values: []*string{
							to.Ptr("eastus")},
					}},
				SKUProperties: []*armreservations.SKUProperty{
					{
						Name:  to.Ptr("Cores"),
						Value: to.Ptr("2"),
					},
					{
						Name:  to.Ptr("ProductTitle"),
						Value: to.Ptr("F Series, F2"),
					},
					{
						Name:  to.Ptr("ProductShortName"),
						Value: to.Ptr("F Series"),
					},
					{
						Name:  to.Ptr("SKUName"),
						Value: to.Ptr("F2"),
					},
					{
						Name:  to.Ptr("MeterId"),
						Value: to.Ptr("12bc208b-083f-4901-ae85-4f98c0c3b4b8"),
					}},
				Terms: []*armreservations.ReservationTerm{
					to.Ptr(armreservations.ReservationTermP1Y),
					to.Ptr(armreservations.ReservationTermP3Y)},
			}}
		if !reflect.DeepEqual(exampleRes, res.CatalogArray) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CatalogArray)
			t.Fatalf("Mock response is not equal to example response for example specification/reservations/resource-manager/Microsoft.Capacity/stable/2021-07-01/examples/GetCatalog.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestAzureReservationAPI_GetAppliedReservationList(t *testing.T) {
	// From example specification/reservations/resource-manager/Microsoft.Capacity/stable/2021-07-01/examples/GetAppliedReservations.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"AppliedReservationList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armreservations.NewAzureReservationAPIClient(cred, &options)
	res, err := client.GetAppliedReservationList(ctx,
		"23bc208b-083f-4901-ae85-4f98c0c3b4b6",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/reservations/resource-manager/Microsoft.Capacity/stable/2021-07-01/examples/GetAppliedReservations.json: %v", err)
	}
	// Response check
	{
		exampleRes := armreservations.AppliedReservations{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.Capacity/AppliedReservations"),
			ID:   to.Ptr("/subscriptions/23bc208b-083f-4901-ae85-4f98c0c3b4b6/providers/microsoft.capacity/AppliedReservations/default"),
			Properties: &armreservations.AppliedReservationsProperties{
				ReservationOrderIDs: &armreservations.AppliedReservationList{
					Value: []*string{
						to.Ptr("/providers/Microsoft.Capacity/reservationorders/e1eccf0b-2db4-4e84-97e7-98b50e9d46f7"),
						to.Ptr("/providers/Microsoft.Capacity/reservationorders/741a32eb-6158-4cee-9642-a0243ae79fac"),
						to.Ptr("/providers/Microsoft.Capacity/reservationorders/e061223d-fcff-4d10-bd49-56a740cfb96a"),
						to.Ptr("/providers/Microsoft.Capacity/reservationorders/2eeb7234-970e-4663-b60b-85241b515901"),
						to.Ptr("/providers/Microsoft.Capacity/reservationorders/9db2f4c5-b1c5-42a8-bd79-ee56cdde2c7f"),
						to.Ptr("/providers/Microsoft.Capacity/reservationorders/5da7a877-6d6e-44af-8880-ed3f533bf928"),
						to.Ptr("/providers/Microsoft.Capacity/reservationorders/f65b0d0a-f945-4105-821c-d00bc8bacde8"),
						to.Ptr("/providers/Microsoft.Capacity/reservationorders/51304124-e477-4b07-b9fa-03b05c8b924b"),
						to.Ptr("/providers/Microsoft.Capacity/reservationorders/f5409b98-8a42-4dc6-be0a-cc59bef4d0db"),
						to.Ptr("/providers/Microsoft.Capacity/reservationorders/a495550a-80a4-46f8-8843-34d4df46f9a6"),
						to.Ptr("/providers/Microsoft.Capacity/reservationorders/1a966e18-c272-4ce1-a0c2-d4e1039023c3"),
						to.Ptr("/providers/Microsoft.Capacity/reservationorders/939310b4-f9de-4645-9569-ab5b6cfe958e"),
						to.Ptr("/providers/Microsoft.Capacity/reservationorders/4193a889-7c3b-44dc-8b7b-bfd7aad6c723")},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.AppliedReservations) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AppliedReservations)
			t.Fatalf("Mock response is not equal to example response for example specification/reservations/resource-manager/Microsoft.Capacity/stable/2021-07-01/examples/GetAppliedReservations.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReservationOrder_Calculate(t *testing.T) {
	// From example specification/reservations/resource-manager/Microsoft.Capacity/stable/2021-07-01/examples/CalculateReservationOrder.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Purchase"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armreservations.NewReservationOrderClient(cred, &options)
	res, err := client.Calculate(ctx,
		armreservations.PurchaseRequest{
			Location: to.Ptr("westus"),
			Properties: &armreservations.PurchaseRequestProperties{
				AppliedScopeType: to.Ptr(armreservations.AppliedScopeTypeShared),
				BillingPlan:      to.Ptr(armreservations.ReservationBillingPlanMonthly),
				BillingScopeID:   to.Ptr("/subscriptions/ed3a1871-612d-abcd-a849-c2542a68be83"),
				DisplayName:      to.Ptr("TestReservationOrder"),
				Quantity:         to.Ptr[int32](1),
				ReservedResourceProperties: &armreservations.PurchaseRequestPropertiesReservedResourceProperties{
					InstanceFlexibility: to.Ptr(armreservations.InstanceFlexibilityOn),
				},
				ReservedResourceType: to.Ptr(armreservations.ReservedResourceTypeVirtualMachines),
				Term:                 to.Ptr(armreservations.ReservationTermP1Y),
			},
			SKU: &armreservations.SKUName{
				Name: to.Ptr("standard_D1"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/reservations/resource-manager/Microsoft.Capacity/stable/2021-07-01/examples/CalculateReservationOrder.json: %v", err)
	}
	// Response check
	{
		exampleRes := armreservations.CalculatePriceResponse{
			Properties: &armreservations.CalculatePriceResponseProperties{
				BillingCurrencyTotal: &armreservations.CalculatePriceResponsePropertiesBillingCurrencyTotal{
					Amount:       to.Ptr[float64](46),
					CurrencyCode: to.Ptr("USD"),
				},
				PaymentSchedule: []*armreservations.PaymentDetail{
					{
						BillingCurrencyTotal: &armreservations.Price{
							Amount:       to.Ptr[float64](40),
							CurrencyCode: to.Ptr("EUR"),
						},
						DueDate: to.Ptr(func() time.Time { t, _ := time.Parse("2006-01-02", "2019-05-14"); return t }()),
						PricingCurrencyTotal: &armreservations.Price{
							Amount:       to.Ptr[float64](46),
							CurrencyCode: to.Ptr("USD"),
						},
					},
					{
						DueDate: to.Ptr(func() time.Time { t, _ := time.Parse("2006-01-02", "2019-06-14"); return t }()),
						PricingCurrencyTotal: &armreservations.Price{
							Amount:       to.Ptr[float64](46),
							CurrencyCode: to.Ptr("USD"),
						},
					},
					{
						DueDate: to.Ptr(func() time.Time { t, _ := time.Parse("2006-01-02", "2019-07-14"); return t }()),
						PricingCurrencyTotal: &armreservations.Price{
							Amount:       to.Ptr[float64](46),
							CurrencyCode: to.Ptr("USD"),
						},
					}},
				PricingCurrencyTotal: &armreservations.CalculatePriceResponsePropertiesPricingCurrencyTotal{
					Amount:       to.Ptr[float32](46),
					CurrencyCode: to.Ptr("USD"),
				},
				ReservationOrderID: to.Ptr("6d9cec54-7de8-abcd-9de7-80f5d634f2d2"),
				SKUDescription:     to.Ptr("standard_D1"),
				SKUTitle:           to.Ptr("Reserved VM Instance, Standard_D1, US West, 1 Year"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.CalculatePriceResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CalculatePriceResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/reservations/resource-manager/Microsoft.Capacity/stable/2021-07-01/examples/CalculateReservationOrder.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReservationOrder_List(t *testing.T) {
	// From example specification/reservations/resource-manager/Microsoft.Capacity/stable/2021-07-01/examples/GetReservationOrders.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ReservationOrderList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armreservations.NewReservationOrderClient(cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/reservations/resource-manager/Microsoft.Capacity/stable/2021-07-01/examples/GetReservationOrders.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armreservations.ReservationOrderList{
			Value: []*armreservations.ReservationOrderResponse{
				{
					Name: to.Ptr("1e6407ba-37a5-499f-80ed-a3f0f338e443"),
					Type: to.Ptr("Microsoft.Capacity/reservationOrders"),
					Etag: to.Ptr[int32](7),
					ID:   to.Ptr("/providers/microsoft.capacity/reservationOrders/1e6407ba-37a5-499f-80ed-a3f0f338e443"),
					Properties: &armreservations.ReservationOrderProperties{
						BillingPlan:       to.Ptr(armreservations.ReservationBillingPlanMonthly),
						CreatedDateTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-29T21:22:56.8541664Z"); return t }()),
						DisplayName:       to.Ptr("cabri"),
						ExpiryDate:        to.Ptr(func() time.Time { t, _ := time.Parse("2006-01-02", "2018-08-29"); return t }()),
						OriginalQuantity:  to.Ptr[int32](1),
						ProvisioningState: to.Ptr(armreservations.ProvisioningStateSucceeded),
						RequestDateTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-29T21:20:23.8134834Z"); return t }()),
						Reservations: []*armreservations.ReservationResponse{
							{
								ID: to.Ptr("/providers/microsoft.capacity/reservationOrders/1e6407ba-37a5-499f-80ed-a3f0f338e443/reservations/cae5924e-7a15-419f-a369-124f52d4a106"),
							}},
						Term: to.Ptr(armreservations.ReservationTermP1Y),
					},
				},
				{
					Name: to.Ptr("1ea6e203-288e-4732-b9e1-da8bbe10c614"),
					Type: to.Ptr("Microsoft.Capacity/reservationOrders"),
					Etag: to.Ptr[int32](7),
					ID:   to.Ptr("/providers/microsoft.capacity/reservationOrders/1ea6e203-288e-4732-b9e1-da8bbe10c614"),
					Properties: &armreservations.ReservationOrderProperties{
						BillingPlan:       to.Ptr(armreservations.ReservationBillingPlanMonthly),
						CreatedDateTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-30T12:58:20.526Z"); return t }()),
						DisplayName:       to.Ptr("cabri"),
						ExpiryDate:        to.Ptr(func() time.Time { t, _ := time.Parse("2006-01-02", "2018-08-30"); return t }()),
						OriginalQuantity:  to.Ptr[int32](9),
						ProvisioningState: to.Ptr(armreservations.ProvisioningStateSucceeded),
						RequestDateTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-30T12:55:40.2799114Z"); return t }()),
						Reservations: []*armreservations.ReservationResponse{
							{
								ID: to.Ptr("/providers/microsoft.capacity/reservationOrders/1ea6e203-288e-4732-b9e1-da8bbe10c614/reservations/d04fd48d-e3f6-42a3-a8f6-1ad0b7513e48"),
							}},
						Term: to.Ptr(armreservations.ReservationTermP1Y),
					},
				},
				{
					Name: to.Ptr("1f14354c-dc12-4c8d-8090-6f295a3a34aa"),
					Type: to.Ptr("Microsoft.Capacity/reservationOrders"),
					Etag: to.Ptr[int32](7),
					ID:   to.Ptr("/providers/microsoft.capacity/reservationOrders/1f14354c-dc12-4c8d-8090-6f295a3a34aa"),
					Properties: &armreservations.ReservationOrderProperties{
						BillingPlan:       to.Ptr(armreservations.ReservationBillingPlanMonthly),
						CreatedDateTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-30T03:51:49.8083758Z"); return t }()),
						DisplayName:       to.Ptr("cabri"),
						ExpiryDate:        to.Ptr(func() time.Time { t, _ := time.Parse("2006-01-02", "2018-08-30"); return t }()),
						OriginalQuantity:  to.Ptr[int32](7),
						ProvisioningState: to.Ptr(armreservations.ProvisioningStateSucceeded),
						RequestDateTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-30T03:49:19.0252126Z"); return t }()),
						Reservations: []*armreservations.ReservationResponse{
							{
								ID: to.Ptr("/providers/microsoft.capacity/reservationOrders/1f14354c-dc12-4c8d-8090-6f295a3a34aa/reservations/c8c926bd-fc5d-4e29-9d43-b68340ac23a6"),
							}},
						Term: to.Ptr(armreservations.ReservationTermP1Y),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ReservationOrderList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ReservationOrderList)
			t.Fatalf("Mock response is not equal to example response for example specification/reservations/resource-manager/Microsoft.Capacity/stable/2021-07-01/examples/GetReservationOrders.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReservationOrder_Purchase(t *testing.T) {
	// From example specification/reservations/resource-manager/Microsoft.Capacity/stable/2021-07-01/examples/PurchaseReservationOrder.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Purchase"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armreservations.NewReservationOrderClient(cred, &options)
	poller, err := client.BeginPurchase(ctx,
		"a075419f-44cc-497f-b68a-14ee811d48b9",
		armreservations.PurchaseRequest{
			Location: to.Ptr("westus"),
			Properties: &armreservations.PurchaseRequestProperties{
				AppliedScopeType: to.Ptr(armreservations.AppliedScopeTypeShared),
				BillingPlan:      to.Ptr(armreservations.ReservationBillingPlanMonthly),
				BillingScopeID:   to.Ptr("/subscriptions/ed3a1871-612d-abcd-a849-c2542a68be83"),
				DisplayName:      to.Ptr("TestReservationOrder"),
				Quantity:         to.Ptr[int32](1),
				Renew:            to.Ptr(false),
				ReservedResourceProperties: &armreservations.PurchaseRequestPropertiesReservedResourceProperties{
					InstanceFlexibility: to.Ptr(armreservations.InstanceFlexibilityOn),
				},
				ReservedResourceType: to.Ptr(armreservations.ReservedResourceTypeVirtualMachines),
				Term:                 to.Ptr(armreservations.ReservationTermP1Y),
			},
			SKU: &armreservations.SKUName{
				Name: to.Ptr("standard_D1"),
			},
		},
		&armreservations.ReservationOrderClientBeginPurchaseOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/reservations/resource-manager/Microsoft.Capacity/stable/2021-07-01/examples/PurchaseReservationOrder.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/reservations/resource-manager/Microsoft.Capacity/stable/2021-07-01/examples/PurchaseReservationOrder.json: %v", err)
	}
	// Response check
	{
		exampleRes := armreservations.ReservationOrderResponse{
			Name: to.Ptr("1f14354c-dc12-4c8d-8090-6f295a3a34aa"),
			Type: to.Ptr("Microsoft.Capacity/reservationOrders"),
			Etag: to.Ptr[int32](7),
			ID:   to.Ptr("/providers/microsoft.capacity/reservationOrders/1f14354c-dc12-4c8d-8090-6f295a3a34aa"),
			Properties: &armreservations.ReservationOrderProperties{
				BillingPlan:       to.Ptr(armreservations.ReservationBillingPlanMonthly),
				CreatedDateTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-30T03:51:49.8083758Z"); return t }()),
				DisplayName:       to.Ptr("cabri"),
				ExpiryDate:        to.Ptr(func() time.Time { t, _ := time.Parse("2006-01-02", "2018-08-30"); return t }()),
				OriginalQuantity:  to.Ptr[int32](7),
				ProvisioningState: to.Ptr(armreservations.ProvisioningStateSucceeded),
				RequestDateTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-30T03:49:19.0252126Z"); return t }()),
				Reservations: []*armreservations.ReservationResponse{
					{
						ID: to.Ptr("/providers/microsoft.capacity/reservationOrders/1f14354c-dc12-4c8d-8090-6f295a3a34aa/reservations/c8c926bd-fc5d-4e29-9d43-b68340ac23a6"),
					}},
				Term: to.Ptr(armreservations.ReservationTermP1Y),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ReservationOrderResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ReservationOrderResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/reservations/resource-manager/Microsoft.Capacity/stable/2021-07-01/examples/PurchaseReservationOrder.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReservationOrder_Get(t *testing.T) {
	// From example specification/reservations/resource-manager/Microsoft.Capacity/stable/2021-07-01/examples/GetReservationOrderDetails.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetReservation"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armreservations.NewReservationOrderClient(cred, &options)
	res, err := client.Get(ctx,
		"a075419f-44cc-497f-b68a-14ee811d48b9",
		&armreservations.ReservationOrderClientGetOptions{Expand: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/reservations/resource-manager/Microsoft.Capacity/stable/2021-07-01/examples/GetReservationOrderDetails.json: %v", err)
	}
	// Response check
	{
		exampleRes := armreservations.ReservationOrderResponse{
			Name: to.Ptr("1f14354c-dc12-4c8d-8090-6f295a3a34aa"),
			Type: to.Ptr("Microsoft.Capacity/reservationOrders"),
			Etag: to.Ptr[int32](7),
			ID:   to.Ptr("/providers/microsoft.capacity/reservationOrders/1f14354c-dc12-4c8d-8090-6f295a3a34aa"),
			Properties: &armreservations.ReservationOrderProperties{
				BillingPlan:       to.Ptr(armreservations.ReservationBillingPlanMonthly),
				CreatedDateTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-30T03:51:49.8083758Z"); return t }()),
				DisplayName:       to.Ptr("cabri"),
				ExpiryDate:        to.Ptr(func() time.Time { t, _ := time.Parse("2006-01-02", "2018-08-30"); return t }()),
				OriginalQuantity:  to.Ptr[int32](7),
				ProvisioningState: to.Ptr(armreservations.ProvisioningStateSucceeded),
				RequestDateTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-08-30T03:49:19.0252126Z"); return t }()),
				Reservations: []*armreservations.ReservationResponse{
					{
						ID: to.Ptr("/providers/microsoft.capacity/reservationOrders/1f14354c-dc12-4c8d-8090-6f295a3a34aa/reservations/c8c926bd-fc5d-4e29-9d43-b68340ac23a6"),
					}},
				Term: to.Ptr(armreservations.ReservationTermP1Y),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ReservationOrderResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ReservationOrderResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/reservations/resource-manager/Microsoft.Capacity/stable/2021-07-01/examples/GetReservationOrderDetails.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/reservations/resource-manager/Microsoft.Capacity/stable/2021-07-01/examples/GetReservationOrderDetailsWithExpandPlanInformation.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetReservationWithExpandPayments"},
	})
	client = armreservations.NewReservationOrderClient(cred, &options)
	res, err = client.Get(ctx,
		"a075419f-44cc-497f-b68a-14ee811d48b9",
		&armreservations.ReservationOrderClientGetOptions{Expand: to.Ptr("schedule")})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/reservations/resource-manager/Microsoft.Capacity/stable/2021-07-01/examples/GetReservationOrderDetailsWithExpandPlanInformation.json: %v", err)
	}
	// Response check
	{
		exampleRes := armreservations.ReservationOrderResponse{
			Name: to.Ptr("1f14354c-dc12-4c8d-8090-6f295a3a34aa"),
			Type: to.Ptr("Microsoft.Capacity/reservationOrders"),
			Etag: to.Ptr[int32](7),
			ID:   to.Ptr("/providers/microsoft.capacity/reservationOrders/1f14354c-dc12-4c8d-8090-6f295a3a34aa"),
			Properties: &armreservations.ReservationOrderProperties{
				BillingPlan:      to.Ptr(armreservations.ReservationBillingPlanMonthly),
				CreatedDateTime:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-08-30T03:51:49Z"); return t }()),
				DisplayName:      to.Ptr("cabri"),
				ExpiryDate:       to.Ptr(func() time.Time { t, _ := time.Parse("2006-01-02", "2018-08-30"); return t }()),
				OriginalQuantity: to.Ptr[int32](7),
				PlanInformation: &armreservations.ReservationOrderBillingPlanInformation{
					NextPaymentDueDate: to.Ptr(func() time.Time { t, _ := time.Parse("2006-01-02", "2019-09-30"); return t }()),
					PricingCurrencyTotal: &armreservations.Price{
						Amount:       to.Ptr[float64](466),
						CurrencyCode: to.Ptr("USD"),
					},
					StartDate: to.Ptr(func() time.Time { t, _ := time.Parse("2006-01-02", "2019-08-30"); return t }()),
					Transactions: []*armreservations.PaymentDetail{
						{
							BillingAccount: to.Ptr("23456"),
							BillingCurrencyTotal: &armreservations.Price{
								Amount:       to.Ptr[float64](466),
								CurrencyCode: to.Ptr("USD"),
							},
							DueDate:     to.Ptr(func() time.Time { t, _ := time.Parse("2006-01-02", "2019-09-30"); return t }()),
							PaymentDate: to.Ptr(func() time.Time { t, _ := time.Parse("2006-01-02", "2019-09-30"); return t }()),
							PricingCurrencyTotal: &armreservations.Price{
								Amount:       to.Ptr[float64](466),
								CurrencyCode: to.Ptr("USD"),
							},
							Status: to.Ptr(armreservations.PaymentStatusSucceeded),
						},
						{
							BillingAccount: to.Ptr("23456"),
							BillingCurrencyTotal: &armreservations.Price{
								Amount:       to.Ptr[float64](466),
								CurrencyCode: to.Ptr("USD"),
							},
							DueDate: to.Ptr(func() time.Time { t, _ := time.Parse("2006-01-02", "2019-10-30"); return t }()),
							ExtendedStatusInfo: &armreservations.ExtendedStatusInfo{
								Message:    to.Ptr("Credit card charge failed."),
								StatusCode: to.Ptr(armreservations.ReservationStatusCode("PaymentDeclined")),
							},
							PaymentDate: to.Ptr(func() time.Time { t, _ := time.Parse("2006-01-02", "2019-10-30"); return t }()),
							PricingCurrencyTotal: &armreservations.Price{
								Amount:       to.Ptr[float64](466),
								CurrencyCode: to.Ptr("USD"),
							},
							Status: to.Ptr(armreservations.PaymentStatusFailed),
						},
						{
							BillingAccount: to.Ptr("23456"),
							BillingCurrencyTotal: &armreservations.Price{
								Amount:       to.Ptr[float64](466),
								CurrencyCode: to.Ptr("USD"),
							},
							DueDate:     to.Ptr(func() time.Time { t, _ := time.Parse("2006-01-02", "2019-10-31"); return t }()),
							PaymentDate: to.Ptr(func() time.Time { t, _ := time.Parse("2006-01-02", "2019-10-31"); return t }()),
							PricingCurrencyTotal: &armreservations.Price{
								Amount:       to.Ptr[float64](466),
								CurrencyCode: to.Ptr("USD"),
							},
							Status: to.Ptr(armreservations.PaymentStatusSucceeded),
						},
						{
							BillingAccount: to.Ptr("23456"),
							BillingCurrencyTotal: &armreservations.Price{
								Amount:       to.Ptr[float64](466),
								CurrencyCode: to.Ptr("USD"),
							},
							DueDate:     to.Ptr(func() time.Time { t, _ := time.Parse("2006-01-02", "2019-11-30"); return t }()),
							PaymentDate: to.Ptr(func() time.Time { t, _ := time.Parse("2006-01-02", "2019-11-30"); return t }()),
							PricingCurrencyTotal: &armreservations.Price{
								Amount:       to.Ptr[float64](466),
								CurrencyCode: to.Ptr("USD"),
							},
							Status: to.Ptr(armreservations.PaymentStatusSucceeded),
						},
						{
							BillingAccount: to.Ptr("23456"),
							BillingCurrencyTotal: &armreservations.Price{
								Amount:       to.Ptr[float64](466),
								CurrencyCode: to.Ptr("USD"),
							},
							DueDate:     to.Ptr(func() time.Time { t, _ := time.Parse("2006-01-02", "2019-07-14"); return t }()),
							PaymentDate: to.Ptr(func() time.Time { t, _ := time.Parse("2006-01-02", "2019-06-14"); return t }()),
							PricingCurrencyTotal: &armreservations.Price{
								Amount:       to.Ptr[float64](466),
								CurrencyCode: to.Ptr("USD"),
							},
							Status: to.Ptr(armreservations.PaymentStatusScheduled),
						},
						{
							BillingAccount: to.Ptr("23456"),
							BillingCurrencyTotal: &armreservations.Price{
								Amount:       to.Ptr[float64](466),
								CurrencyCode: to.Ptr("USD"),
							},
							DueDate:     to.Ptr(func() time.Time { t, _ := time.Parse("2006-01-02", "2019-06-14"); return t }()),
							PaymentDate: to.Ptr(func() time.Time { t, _ := time.Parse("2006-01-02", "2019-08-14"); return t }()),
							PricingCurrencyTotal: &armreservations.Price{
								Amount:       to.Ptr[float64](466),
								CurrencyCode: to.Ptr("USD"),
							},
							Status: to.Ptr(armreservations.PaymentStatusScheduled),
						}},
				},
				ProvisioningState: to.Ptr(armreservations.ProvisioningStateSucceeded),
				RequestDateTime:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-08-30T03:49:19Z"); return t }()),
				Reservations: []*armreservations.ReservationResponse{
					{
						ID: to.Ptr("/providers/microsoft.capacity/reservationOrders/1f14354c-dc12-4c8d-8090-6f295a3a34aa/reservations/c8c926bd-fc5d-4e29-9d43-b68340ac23a6"),
					}},
				Term: to.Ptr(armreservations.ReservationTermP1Y),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ReservationOrderResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ReservationOrderResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/reservations/resource-manager/Microsoft.Capacity/stable/2021-07-01/examples/GetReservationOrderDetailsWithExpandPlanInformation.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestReservationOrder_ChangeDirectory(t *testing.T) {
	// From example specification/reservations/resource-manager/Microsoft.Capacity/stable/2021-07-01/examples/ChangeDirectoryReservationOrder.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ChangeDirectory"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armreservations.NewReservationOrderClient(cred, &options)
	res, err := client.ChangeDirectory(ctx,
		"a075419f-44cc-497f-b68a-14ee811d48b9",
		armreservations.ChangeDirectoryRequest{
			DestinationTenantID: to.Ptr("906655ea-30be-4587-9d12-b50e077b0f32"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/reservations/resource-manager/Microsoft.Capacity/stable/2021-07-01/examples/ChangeDirectoryReservationOrder.json: %v", err)
	}
	// Response check
	{
		exampleRes := armreservations.ChangeDirectoryResponse{
			ReservationOrder: &armreservations.ChangeDirectoryResult{
				Name:        to.Ptr("VM_RI_10-02-2020_15-21"),
				Error:       to.Ptr("error string"),
				ID:          to.Ptr("a075419f-44cc-497f-b68a-14ee811d48b9"),
				IsSucceeded: to.Ptr(true),
			},
			Reservations: []*armreservations.ChangeDirectoryResult{
				{
					Name:        to.Ptr("VM_RI_10-02-2020_15-21"),
					Error:       to.Ptr("error string"),
					ID:          to.Ptr("1f14354c-dc12-4c8d-8090-6f295a3a34aa"),
					IsSucceeded: to.Ptr(true),
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.ChangeDirectoryResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ChangeDirectoryResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/reservations/resource-manager/Microsoft.Capacity/stable/2021-07-01/examples/ChangeDirectoryReservationOrder.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOperation_List(t *testing.T) {
	// From example specification/reservations/resource-manager/Microsoft.Capacity/stable/2021-07-01/examples/GetOperations.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"GetOperations"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armreservations.NewOperationClient(cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/reservations/resource-manager/Microsoft.Capacity/stable/2021-07-01/examples/GetOperations.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armreservations.OperationList{
			Value: []*armreservations.OperationResponse{
				{
					Name: to.Ptr("Microsoft.Capacity/reservationorders/read"),
					Display: &armreservations.OperationDisplay{
						Description: to.Ptr("Read All Reservations"),
						Operation:   to.Ptr("Get Reservations"),
						Provider:    to.Ptr("Microsoft Capacity"),
						Resource:    to.Ptr("Reservations"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Capacity/reservationorders/write"),
					Display: &armreservations.OperationDisplay{
						Description: to.Ptr("Create any Reservation"),
						Operation:   to.Ptr("Create Reservations"),
						Provider:    to.Ptr("Microsoft Capacity"),
						Resource:    to.Ptr("Reservations"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Capacity/reservationorders/action"),
					Display: &armreservations.OperationDisplay{
						Description: to.Ptr("Update any Reservation"),
						Operation:   to.Ptr("Update Reservations"),
						Provider:    to.Ptr("Microsoft Capacity"),
						Resource:    to.Ptr("Reservations"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Capacity/reservationorders/delete"),
					Display: &armreservations.OperationDisplay{
						Description: to.Ptr("Delete any Reservation"),
						Operation:   to.Ptr("Delete Reservations"),
						Provider:    to.Ptr("Microsoft Capacity"),
						Resource:    to.Ptr("Reservations"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Capacity/reservationorders/reservations/read"),
					Display: &armreservations.OperationDisplay{
						Description: to.Ptr("Read All Reservations"),
						Operation:   to.Ptr("Get Reservations"),
						Provider:    to.Ptr("Microsoft Capacity"),
						Resource:    to.Ptr("Reservations"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Capacity/reservationorders/reservations/write"),
					Display: &armreservations.OperationDisplay{
						Description: to.Ptr("Create any Reservation"),
						Operation:   to.Ptr("Create Reservations"),
						Provider:    to.Ptr("Microsoft Capacity"),
						Resource:    to.Ptr("Reservations"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Capacity/reservationorders/reservations/action"),
					Display: &armreservations.OperationDisplay{
						Description: to.Ptr("Update any Reservation"),
						Operation:   to.Ptr("Update Reservations"),
						Provider:    to.Ptr("Microsoft Capacity"),
						Resource:    to.Ptr("Reservations"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Capacity/reservationorders/reservations/delete"),
					Display: &armreservations.OperationDisplay{
						Description: to.Ptr("Delete any Reservation"),
						Operation:   to.Ptr("Delete Reservations"),
						Provider:    to.Ptr("Microsoft Capacity"),
						Resource:    to.Ptr("Reservations"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Capacity/reservationorders/reservations/revisions/read"),
					Display: &armreservations.OperationDisplay{
						Description: to.Ptr("Read All Reservations"),
						Operation:   to.Ptr("Get Reservations"),
						Provider:    to.Ptr("Microsoft Capacity"),
						Resource:    to.Ptr("Reservations"),
					},
				},
				{
					Name: to.Ptr("Microsoft.Capacity/register/action"),
					Display: &armreservations.OperationDisplay{
						Description: to.Ptr("Registers the Capacity resource provider and enables the creation of Capacity resources."),
						Operation:   to.Ptr("Registers the Capacity Resource Provider."),
						Provider:    to.Ptr("Microsoft Capacity"),
						Resource:    to.Ptr("Reservations"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OperationList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OperationList)
			t.Fatalf("Mock response is not equal to example response for example specification/reservations/resource-manager/Microsoft.Capacity/stable/2021-07-01/examples/GetOperations.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCalculateExchange_Post(t *testing.T) {
	// From example specification/reservations/resource-manager/Microsoft.Capacity/stable/2021-07-01/examples/CalculateExchange.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CalculateExchange"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armreservations.NewCalculateExchangeClient(cred, &options)
	poller, err := client.BeginPost(ctx,
		armreservations.CalculateExchangeRequest{
			Properties: &armreservations.CalculateExchangeRequestProperties{
				ReservationsToExchange: []*armreservations.ReservationToReturn{
					{
						Quantity:      to.Ptr[int32](1),
						ReservationID: to.Ptr("/providers/microsoft.capacity/reservationOrders/1f14354c-dc12-4c8d-8090-6f295a3a34aa/reservations/c8c926bd-fc5d-4e29-9d43-b68340ac23a6"),
					}},
				ReservationsToPurchase: []*armreservations.PurchaseRequest{
					{
						Location: to.Ptr("westus"),
						Properties: &armreservations.PurchaseRequestProperties{
							AppliedScopeType: to.Ptr(armreservations.AppliedScopeTypeShared),
							BillingPlan:      to.Ptr(armreservations.ReservationBillingPlanUpfront),
							BillingScopeID:   to.Ptr("/subscriptions/ed3a1871-612d-abcd-a849-c2542a68be83"),
							DisplayName:      to.Ptr("testDisplayName"),
							Quantity:         to.Ptr[int32](1),
							Renew:            to.Ptr(false),
							ReservedResourceProperties: &armreservations.PurchaseRequestPropertiesReservedResourceProperties{
								InstanceFlexibility: to.Ptr(armreservations.InstanceFlexibilityOn),
							},
							ReservedResourceType: to.Ptr(armreservations.ReservedResourceTypeVirtualMachines),
							Term:                 to.Ptr(armreservations.ReservationTermP1Y),
						},
						SKU: &armreservations.SKUName{
							Name: to.Ptr("Standard_B1ls"),
						},
					}},
			},
		},
		&armreservations.CalculateExchangeClientBeginPostOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/reservations/resource-manager/Microsoft.Capacity/stable/2021-07-01/examples/CalculateExchange.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/reservations/resource-manager/Microsoft.Capacity/stable/2021-07-01/examples/CalculateExchange.json: %v", err)
	}
	// Response check
	{
		exampleRes := armreservations.CalculateExchangeOperationResultResponse{
			Name: to.Ptr("4e2ffff7-b331-4fcb-ab11-b5fa49368188"),
			ID:   to.Ptr("/providers/microsoft.capacity/operationResults/4e2ffff7-b331-4fcb-ab11-b5fa49368188"),
			Properties: &armreservations.CalculateExchangeResponseProperties{
				NetPayable: &armreservations.Price{
					Amount:       to.Ptr[float64](15840),
					CurrencyCode: to.Ptr("USD"),
				},
				PolicyResult: &armreservations.ExchangePolicyErrors{},
				PurchasesTotal: &armreservations.Price{
					Amount:       to.Ptr[float64](19800),
					CurrencyCode: to.Ptr("USD"),
				},
				RefundsTotal: &armreservations.Price{
					Amount:       to.Ptr[float64](3960),
					CurrencyCode: to.Ptr("USD"),
				},
				ReservationsToExchange: []*armreservations.ReservationToExchange{
					{
						BillingInformation: &armreservations.BillingInformation{
							BillingCurrencyProratedAmount: &armreservations.Price{
								Amount:       to.Ptr[float64](15840),
								CurrencyCode: to.Ptr("USD"),
							},
							BillingCurrencyRemainingCommitmentAmount: &armreservations.Price{
								Amount:       to.Ptr[float64](0),
								CurrencyCode: to.Ptr("USD"),
							},
							BillingCurrencyTotalPaidAmount: &armreservations.Price{
								Amount:       to.Ptr[float64](19800),
								CurrencyCode: to.Ptr("USD"),
							},
						},
						BillingRefundAmount: &armreservations.Price{
							Amount:       to.Ptr[float64](3960),
							CurrencyCode: to.Ptr("USD"),
						},
						Quantity:      to.Ptr[int32](1),
						ReservationID: to.Ptr("/providers/microsoft.capacity/reservationOrders/1f14354c-dc12-4c8d-8090-6f295a3a34aa/reservations/c8c926bd-fc5d-4e29-9d43-b68340ac23a6"),
					}},
				ReservationsToPurchase: []*armreservations.ReservationToPurchaseCalculateExchange{
					{
						BillingCurrencyTotal: &armreservations.Price{
							Amount:       to.Ptr[float64](19800),
							CurrencyCode: to.Ptr("USD"),
						},
						Properties: &armreservations.PurchaseRequest{
							Location: to.Ptr("westus"),
							Properties: &armreservations.PurchaseRequestProperties{
								AppliedScopeType: to.Ptr(armreservations.AppliedScopeTypeShared),
								BillingPlan:      to.Ptr(armreservations.ReservationBillingPlanUpfront),
								BillingScopeID:   to.Ptr("/subscriptions/ed3a1871-612d-abcd-a849-c2542a68be83"),
								DisplayName:      to.Ptr("testDisplayName"),
								Quantity:         to.Ptr[int32](1),
								Renew:            to.Ptr(false),
								ReservedResourceProperties: &armreservations.PurchaseRequestPropertiesReservedResourceProperties{
									InstanceFlexibility: to.Ptr(armreservations.InstanceFlexibilityOn),
								},
								ReservedResourceType: to.Ptr(armreservations.ReservedResourceTypeVirtualMachines),
								Term:                 to.Ptr(armreservations.ReservationTermP1Y),
							},
							SKU: &armreservations.SKUName{
								Name: to.Ptr("Standard_B1ls"),
							},
						},
					}},
				SessionID: to.Ptr("66e2ac8f-439e-4345-8235-6fef07608081"),
			},
			Status: to.Ptr(armreservations.CalculateExchangeOperationResultStatusSucceeded),
		}
		if !reflect.DeepEqual(exampleRes, res.CalculateExchangeOperationResultResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CalculateExchangeOperationResultResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/reservations/resource-manager/Microsoft.Capacity/stable/2021-07-01/examples/CalculateExchange.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestExchange_Post(t *testing.T) {
	// From example specification/reservations/resource-manager/Microsoft.Capacity/stable/2021-07-01/examples/Exchange.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Exchange"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armreservations.NewExchangeClient(cred, &options)
	poller, err := client.BeginPost(ctx,
		armreservations.ExchangeRequest{
			Properties: &armreservations.ExchangeRequestProperties{
				SessionID: to.Ptr("66e2ac8f-439e-4345-8235-6fef07608081"),
			},
		},
		&armreservations.ExchangeClientBeginPostOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/reservations/resource-manager/Microsoft.Capacity/stable/2021-07-01/examples/Exchange.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/reservations/resource-manager/Microsoft.Capacity/stable/2021-07-01/examples/Exchange.json: %v", err)
	}
	// Response check
	{
		exampleRes := armreservations.ExchangeOperationResultResponse{
			Name: to.Ptr("4e2ffff7-b331-4fcb-ab11-b5fa49368188"),
			ID:   to.Ptr("/providers/microsoft.capacity/operationResults/4e2ffff7-b331-4fcb-ab11-b5fa49368188"),
			Properties: &armreservations.ExchangeResponseProperties{
				NetPayable: &armreservations.Price{
					Amount:       to.Ptr[float64](15840),
					CurrencyCode: to.Ptr("USD"),
				},
				PolicyResult: &armreservations.ExchangePolicyErrors{},
				PurchasesTotal: &armreservations.Price{
					Amount:       to.Ptr[float64](19800),
					CurrencyCode: to.Ptr("USD"),
				},
				RefundsTotal: &armreservations.Price{
					Amount:       to.Ptr[float64](3960),
					CurrencyCode: to.Ptr("USD"),
				},
				ReservationsToExchange: []*armreservations.ReservationToReturnForExchange{
					{
						BillingInformation: &armreservations.BillingInformation{
							BillingCurrencyProratedAmount: &armreservations.Price{
								Amount:       to.Ptr[float64](15840),
								CurrencyCode: to.Ptr("USD"),
							},
							BillingCurrencyRemainingCommitmentAmount: &armreservations.Price{
								Amount:       to.Ptr[float64](0),
								CurrencyCode: to.Ptr("USD"),
							},
							BillingCurrencyTotalPaidAmount: &armreservations.Price{
								Amount:       to.Ptr[float64](19800),
								CurrencyCode: to.Ptr("USD"),
							},
						},
						BillingRefundAmount: &armreservations.Price{
							Amount:       to.Ptr[float64](3960),
							CurrencyCode: to.Ptr("USD"),
						},
						Quantity:      to.Ptr[int32](1),
						ReservationID: to.Ptr("/providers/microsoft.capacity/reservationOrders/1f14354c-dc12-4c8d-8090-6f295a3a34aa/reservations/c8c926bd-fc5d-4e29-9d43-b68340ac23a6"),
						Status:        to.Ptr(armreservations.OperationStatusSucceeded),
					}},
				ReservationsToPurchase: []*armreservations.ReservationToPurchaseExchange{
					{
						BillingCurrencyTotal: &armreservations.Price{
							Amount:       to.Ptr[float64](19800),
							CurrencyCode: to.Ptr("USD"),
						},
						Properties: &armreservations.PurchaseRequest{
							Location: to.Ptr("westus"),
							Properties: &armreservations.PurchaseRequestProperties{
								AppliedScopeType: to.Ptr(armreservations.AppliedScopeTypeShared),
								BillingPlan:      to.Ptr(armreservations.ReservationBillingPlanUpfront),
								BillingScopeID:   to.Ptr("/subscriptions/ed3a1871-612d-abcd-a849-c2542a68be83"),
								DisplayName:      to.Ptr("testDisplayName"),
								Quantity:         to.Ptr[int32](1),
								Renew:            to.Ptr(false),
								ReservedResourceProperties: &armreservations.PurchaseRequestPropertiesReservedResourceProperties{
									InstanceFlexibility: to.Ptr(armreservations.InstanceFlexibilityOn),
								},
								ReservedResourceType: to.Ptr(armreservations.ReservedResourceTypeVirtualMachines),
								Term:                 to.Ptr(armreservations.ReservationTermP1Y),
							},
							SKU: &armreservations.SKUName{
								Name: to.Ptr("Standard_B1ls"),
							},
						},
						ReservationID:      to.Ptr("/providers/microsoft.capacity/reservationOrders/1e85c519-b815-4169-8d79-62fc460c608f/reservations/0c80fceb-305c-40a8-b5a6-11445807bbb3"),
						ReservationOrderID: to.Ptr("/providers/microsoft.capacity/reservationOrders/1e85c519-b815-4169-8d79-62fc460c608f"),
						Status:             to.Ptr(armreservations.OperationStatusSucceeded),
					}},
				SessionID: to.Ptr("66e2ac8f-439e-4345-8235-6fef07608081"),
			},
			Status: to.Ptr(armreservations.ExchangeOperationResultStatusSucceeded),
		}
		if !reflect.DeepEqual(exampleRes, res.ExchangeOperationResultResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ExchangeOperationResultResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/reservations/resource-manager/Microsoft.Capacity/stable/2021-07-01/examples/Exchange.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestQuota_Get(t *testing.T) {
	// From example specification/reservations/resource-manager/Microsoft.Capacity/stable/2020-10-25/examples/getComputeOneSkuUsages.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Quotas_Request_ForCompute"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armreservations.NewQuotaClient(cred, &options)
	res, err := client.Get(ctx,
		"00000000-0000-0000-0000-000000000000",
		"Microsoft.Compute",
		"eastus",
		"standardNDSFamily",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/reservations/resource-manager/Microsoft.Capacity/stable/2020-10-25/examples/getComputeOneSkuUsages.json: %v", err)
	}
	// Response check
	{
		exampleRes := armreservations.CurrentQuotaLimitBase{
			Properties: &armreservations.QuotaProperties{
				Name: &armreservations.ResourceName{
					LocalizedValue: to.Ptr("Standard NDS Family vCPUs"),
					Value:          to.Ptr("standardNDSFamily"),
				},
				CurrentValue: to.Ptr[int32](0),
				Limit:        to.Ptr[int32](10),
				Unit:         to.Ptr("Count"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.CurrentQuotaLimitBase) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CurrentQuotaLimitBase)
			t.Fatalf("Mock response is not equal to example response for example specification/reservations/resource-manager/Microsoft.Capacity/stable/2020-10-25/examples/getComputeOneSkuUsages.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestQuota_CreateOrUpdate(t *testing.T) {
	// From example specification/reservations/resource-manager/Microsoft.Capacity/stable/2020-10-25/examples/putComputeOneSkuQuotaRequest.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Quotas_Request_PutForCompute"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armreservations.NewQuotaClient(cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"D7EC67B3-7657-4966-BFFC-41EFD36BAAB3",
		"Microsoft.Compute",
		"eastus",
		"standardFSv2Family",
		armreservations.CurrentQuotaLimitBase{
			Properties: &armreservations.QuotaProperties{
				Name: &armreservations.ResourceName{
					Value: to.Ptr("standardFSv2Family"),
				},
				Limit: to.Ptr[int32](200),
				Unit:  to.Ptr("Count"),
			},
		},
		&armreservations.QuotaClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/reservations/resource-manager/Microsoft.Capacity/stable/2020-10-25/examples/putComputeOneSkuQuotaRequest.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/reservations/resource-manager/Microsoft.Capacity/stable/2020-10-25/examples/putComputeOneSkuQuotaRequest.json: %v", err)
	}
	// Response check
	{
		exampleRes := armreservations.QuotaRequestOneResourceSubmitResponse{
			Name: to.Ptr("2B5C8515-37D8-4B6A-879B-CD641A2CF605"),
			Type: to.Ptr("Microsoft.Capacity/serviceLimits"),
			ID:   to.Ptr("/subscriptions/D7EC67B3-7657-4966-BFFC-41EFD36BAAB3/providers/Microsoft.Capacity/resourceProviders/Microsoft.Compute/locations/eastus/serviceLimitsRequests/2B5C8515-37D8-4B6A-879B-CD641A2CF605"),
			Properties: &armreservations.QuotaRequestOneResourceProperties{
				Message: to.Ptr("Request succeeded"),
				Properties: &armreservations.CurrentQuotaLimitBase{
					Properties: &armreservations.QuotaProperties{
						Name: &armreservations.ResourceName{
							LocalizedValue: to.Ptr("Standard FSv2 Family vCPUs"),
							Value:          to.Ptr("standardFSv2Family"),
						},
						CurrentValue: to.Ptr[int32](160),
						Limit:        to.Ptr[int32](200),
						Properties:   map[string]interface{}{},
						QuotaPeriod:  to.Ptr(""),
						Unit:         to.Ptr("Count"),
					},
				},
				ProvisioningState: to.Ptr(armreservations.QuotaRequestStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.QuotaRequestOneResourceSubmitResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.QuotaRequestOneResourceSubmitResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/reservations/resource-manager/Microsoft.Capacity/stable/2020-10-25/examples/putComputeOneSkuQuotaRequest.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/reservations/resource-manager/Microsoft.Capacity/stable/2020-10-25/examples/putMachineLearningServicesQuotaRequestDedicated.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Quotas_Request_PutForMachineLearningServices_DedicatedResource"},
	})
	client = armreservations.NewQuotaClient(cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"D7EC67B3-7657-4966-BFFC-41EFD36BAAB3",
		"Microsoft.MachineLearningServices",
		"eastus",
		"StandardDv2Family",
		armreservations.CurrentQuotaLimitBase{
			Properties: &armreservations.QuotaProperties{
				Name: &armreservations.ResourceName{
					Value: to.Ptr("StandardDv2Family"),
				},
				Limit:        to.Ptr[int32](200),
				ResourceType: to.Ptr(armreservations.ResourceTypeDedicated),
				Unit:         to.Ptr("Count"),
			},
		},
		&armreservations.QuotaClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/reservations/resource-manager/Microsoft.Capacity/stable/2020-10-25/examples/putMachineLearningServicesQuotaRequestDedicated.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/reservations/resource-manager/Microsoft.Capacity/stable/2020-10-25/examples/putMachineLearningServicesQuotaRequestDedicated.json: %v", err)
	}
	// Response check
	{
		exampleRes := armreservations.QuotaRequestOneResourceSubmitResponse{
			Name: to.Ptr("2B5C8515-37D8-4B6A-879B-CD641A2CF605"),
			Type: to.Ptr("Microsoft.Capacity/serviceLimits"),
			ID:   to.Ptr("/subscriptions/D7EC67B3-7657-4966-BFFC-41EFD36BAAB3/providers/Microsoft.Capacity/resourceProviders/Microsoft.MachineLearningServices/locations/eastus/serviceLimitsRequests/2B5C8515-37D8-4B6A-879B-CD641A2CF605"),
			Properties: &armreservations.QuotaRequestOneResourceProperties{
				Message: to.Ptr("Request succeeded"),
				Properties: &armreservations.CurrentQuotaLimitBase{
					Properties: &armreservations.QuotaProperties{
						Name: &armreservations.ResourceName{
							LocalizedValue: to.Ptr("Standard Dv2 Family Cluster Dedicated vCPUs"),
							Value:          to.Ptr("StandardDv2Family"),
						},
						CurrentValue: to.Ptr[int32](160),
						Limit:        to.Ptr[int32](200),
						Properties:   map[string]interface{}{},
						QuotaPeriod:  to.Ptr(""),
						ResourceType: to.Ptr(armreservations.ResourceTypeDedicated),
						Unit:         to.Ptr("Count"),
					},
				},
				ProvisioningState: to.Ptr(armreservations.QuotaRequestStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.QuotaRequestOneResourceSubmitResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.QuotaRequestOneResourceSubmitResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/reservations/resource-manager/Microsoft.Capacity/stable/2020-10-25/examples/putMachineLearningServicesQuotaRequestDedicated.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/reservations/resource-manager/Microsoft.Capacity/stable/2020-10-25/examples/putMachineLearningServicesQuotaRequestLowPriority.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Quotas_Request_PutForMachineLearningServices_LowPriorityResource"},
	})
	client = armreservations.NewQuotaClient(cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"D7EC67B3-7657-4966-BFFC-41EFD36BAAB3",
		"Microsoft.MachineLearningServices",
		"eastus",
		"TotalLowPriorityCores",
		armreservations.CurrentQuotaLimitBase{
			Properties: &armreservations.QuotaProperties{
				Name: &armreservations.ResourceName{
					Value: to.Ptr("TotalLowPriorityCores"),
				},
				Limit:        to.Ptr[int32](200),
				ResourceType: to.Ptr(armreservations.ResourceTypeLowPriority),
				Unit:         to.Ptr("Count"),
			},
		},
		&armreservations.QuotaClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/reservations/resource-manager/Microsoft.Capacity/stable/2020-10-25/examples/putMachineLearningServicesQuotaRequestLowPriority.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/reservations/resource-manager/Microsoft.Capacity/stable/2020-10-25/examples/putMachineLearningServicesQuotaRequestLowPriority.json: %v", err)
	}
	// Response check
	{
		exampleRes := armreservations.QuotaRequestOneResourceSubmitResponse{
			Name: to.Ptr("2B5C8515-37D8-4B6A-879B-CD641A2CF605"),
			Type: to.Ptr("Microsoft.Capacity/serviceLimits"),
			ID:   to.Ptr("/subscriptions/D7EC67B3-7657-4966-BFFC-41EFD36BAAB3/providers/Microsoft.Capacity/resourceProviders/Microsoft.MachineLearningServices/locations/eastus/serviceLimitsRequests/2B5C8515-37D8-4B6A-879B-CD641A2CF605"),
			Properties: &armreservations.QuotaRequestOneResourceProperties{
				Message: to.Ptr("Request succeeded"),
				Properties: &armreservations.CurrentQuotaLimitBase{
					Properties: &armreservations.QuotaProperties{
						Name: &armreservations.ResourceName{
							LocalizedValue: to.Ptr("Total Cluster Low Priority Regional vCPUs"),
							Value:          to.Ptr("TotalLowPriorityCores"),
						},
						CurrentValue: to.Ptr[int32](160),
						Limit:        to.Ptr[int32](200),
						Properties:   map[string]interface{}{},
						QuotaPeriod:  to.Ptr(""),
						ResourceType: to.Ptr(armreservations.ResourceTypeLowPriority),
						Unit:         to.Ptr("Count"),
					},
				},
				ProvisioningState: to.Ptr(armreservations.QuotaRequestStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.QuotaRequestOneResourceSubmitResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.QuotaRequestOneResourceSubmitResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/reservations/resource-manager/Microsoft.Capacity/stable/2020-10-25/examples/putMachineLearningServicesQuotaRequestLowPriority.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestQuota_Update(t *testing.T) {
	// From example specification/reservations/resource-manager/Microsoft.Capacity/stable/2020-10-25/examples/patchComputeQuotaRequest.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Quotas_Request_PatchForCompute"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armreservations.NewQuotaClient(cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"D7EC67B3-7657-4966-BFFC-41EFD36BAAB3",
		"Microsoft.Compute",
		"eastus",
		"standardFSv2Family",
		armreservations.CurrentQuotaLimitBase{
			Properties: &armreservations.QuotaProperties{
				Name: &armreservations.ResourceName{
					Value: to.Ptr("standardFSv2Family"),
				},
				Limit: to.Ptr[int32](200),
				Unit:  to.Ptr("Count"),
			},
		},
		&armreservations.QuotaClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/reservations/resource-manager/Microsoft.Capacity/stable/2020-10-25/examples/patchComputeQuotaRequest.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/reservations/resource-manager/Microsoft.Capacity/stable/2020-10-25/examples/patchComputeQuotaRequest.json: %v", err)
	}
	// Response check
	{
		exampleRes := armreservations.QuotaRequestOneResourceSubmitResponse{
			Name: to.Ptr("2B5C8515-37D8-4B6A-879B-CD641A2CF605"),
			Type: to.Ptr("Microsoft.Capacity/serviceLimits"),
			ID:   to.Ptr("/subscriptions/D7EC67B3-7657-4966-BFFC-41EFD36BAAB3/providers/Microsoft.Capacity/resourceProviders/Microsoft.Compute/locations/eastus/serviceLimitsRequests/2B5C8515-37D8-4B6A-879B-CD641A2CF605"),
			Properties: &armreservations.QuotaRequestOneResourceProperties{
				Message: to.Ptr(""),
				Properties: &armreservations.CurrentQuotaLimitBase{
					Properties: &armreservations.QuotaProperties{
						Name: &armreservations.ResourceName{
							LocalizedValue: to.Ptr("Standard FSv2 Family vCPUs"),
							Value:          to.Ptr("standardFSv2Family"),
						},
						CurrentValue: to.Ptr[int32](160),
						Limit:        to.Ptr[int32](200),
						Properties:   map[string]interface{}{},
						QuotaPeriod:  to.Ptr(""),
						Unit:         to.Ptr("Count"),
					},
				},
				ProvisioningState: to.Ptr(armreservations.QuotaRequestStateSucceeded),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.QuotaRequestOneResourceSubmitResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.QuotaRequestOneResourceSubmitResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/reservations/resource-manager/Microsoft.Capacity/stable/2020-10-25/examples/patchComputeQuotaRequest.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestQuota_List(t *testing.T) {
	// From example specification/reservations/resource-manager/Microsoft.Capacity/stable/2020-10-25/examples/getComputeUsages.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Quotas_listUsagesForCompute"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armreservations.NewQuotaClient(cred, &options)
	pager := client.List("00000000-0000-0000-0000-000000000000",
		"Microsoft.Compute",
		"eastus",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/reservations/resource-manager/Microsoft.Capacity/stable/2020-10-25/examples/getComputeUsages.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armreservations.QuotaLimits{
			Value: []*armreservations.CurrentQuotaLimitBase{
				{
					Properties: &armreservations.QuotaProperties{
						Name: &armreservations.ResourceName{
							LocalizedValue: to.Ptr("Standard FSv2 Family vCPUs"),
							Value:          to.Ptr("standardFSv2Family"),
						},
						CurrentValue: to.Ptr[int32](0),
						Limit:        to.Ptr[int32](100),
						Unit:         to.Ptr("Count"),
					},
				},
				{
					Properties: &armreservations.QuotaProperties{
						Name: &armreservations.ResourceName{
							LocalizedValue: to.Ptr("Standard NDS Family vCPUs"),
							Value:          to.Ptr("standardNDSFamily"),
						},
						CurrentValue: to.Ptr[int32](0),
						Limit:        to.Ptr[int32](0),
						Unit:         to.Ptr("Count"),
					},
				},
				{
					Properties: &armreservations.QuotaProperties{
						Name: &armreservations.ResourceName{
							LocalizedValue: to.Ptr("Standard NCSv2 Family vCPUs"),
							Value:          to.Ptr("standardNCSv2Family"),
						},
						CurrentValue: to.Ptr[int32](0),
						Limit:        to.Ptr[int32](0),
						Unit:         to.Ptr("Count"),
					},
				},
				{
					Properties: &armreservations.QuotaProperties{
						Name: &armreservations.ResourceName{
							LocalizedValue: to.Ptr("Standard NCSv3 Family vCPUs"),
							Value:          to.Ptr("standardNCSv3Family"),
						},
						CurrentValue: to.Ptr[int32](0),
						Limit:        to.Ptr[int32](0),
						Unit:         to.Ptr("Count"),
					},
				},
				{
					Properties: &armreservations.QuotaProperties{
						Name: &armreservations.ResourceName{
							LocalizedValue: to.Ptr("Standard LSv2 Family vCPUs"),
							Value:          to.Ptr("standardLSv2Family"),
						},
						CurrentValue: to.Ptr[int32](0),
						Limit:        to.Ptr[int32](100),
						Unit:         to.Ptr("Count"),
					},
				},
				{
					Properties: &armreservations.QuotaProperties{
						Name: &armreservations.ResourceName{
							LocalizedValue: to.Ptr("Standard PBS Family vCPUs"),
							Value:          to.Ptr("standardPBSFamily"),
						},
						CurrentValue: to.Ptr[int32](0),
						Limit:        to.Ptr[int32](6),
						Unit:         to.Ptr("Count"),
					},
				},
				{
					Properties: &armreservations.QuotaProperties{
						Name: &armreservations.ResourceName{
							LocalizedValue: to.Ptr("Standard EIv3 Family vCPUs"),
							Value:          to.Ptr("standardEIv3Family"),
						},
						CurrentValue: to.Ptr[int32](0),
						Limit:        to.Ptr[int32](100),
						Unit:         to.Ptr("Count"),
					},
				},
				{
					Properties: &armreservations.QuotaProperties{
						Name: &armreservations.ResourceName{
							LocalizedValue: to.Ptr("Standard EISv3 Family vCPUs"),
							Value:          to.Ptr("standardEISv3Family"),
						},
						CurrentValue: to.Ptr[int32](0),
						Limit:        to.Ptr[int32](100),
						Unit:         to.Ptr("Count"),
					},
				},
				{
					Properties: &armreservations.QuotaProperties{
						Name: &armreservations.ResourceName{
							LocalizedValue: to.Ptr("Standard DCS Family vCPUs"),
							Value:          to.Ptr("standardDCSFamily"),
						},
						CurrentValue: to.Ptr[int32](0),
						Limit:        to.Ptr[int32](8),
						Unit:         to.Ptr("Count"),
					},
				},
				{
					Properties: &armreservations.QuotaProperties{
						Name: &armreservations.ResourceName{
							LocalizedValue: to.Ptr("Standard NVSv2 Family vCPUs"),
							Value:          to.Ptr("standardNVSv2Family"),
						},
						CurrentValue: to.Ptr[int32](0),
						Limit:        to.Ptr[int32](0),
						Unit:         to.Ptr("Count"),
					},
				},
				{
					Properties: &armreservations.QuotaProperties{
						Name: &armreservations.ResourceName{
							LocalizedValue: to.Ptr("Standard MSv2 Family vCPUs"),
							Value:          to.Ptr("standardMSv2Family"),
						},
						CurrentValue: to.Ptr[int32](0),
						Limit:        to.Ptr[int32](0),
						Unit:         to.Ptr("Count"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.QuotaLimits) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.QuotaLimits)
			t.Fatalf("Mock response is not equal to example response for example specification/reservations/resource-manager/Microsoft.Capacity/stable/2020-10-25/examples/getComputeUsages.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/reservations/resource-manager/Microsoft.Capacity/stable/2020-10-25/examples/getMachineLearningServicesUsages.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Quotas_listUsagesMachineLearningServices"},
	})
	client = armreservations.NewQuotaClient(cred, &options)
	pager = client.List("00000000-0000-0000-0000-000000000000",
		"Microsoft.MachineLearningServices",
		"eastus",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/reservations/resource-manager/Microsoft.Capacity/stable/2020-10-25/examples/getMachineLearningServicesUsages.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armreservations.QuotaLimits{
			Value: []*armreservations.CurrentQuotaLimitBase{
				{
					Properties: &armreservations.QuotaProperties{
						Name: &armreservations.ResourceName{
							LocalizedValue: to.Ptr("Standard Dv2 Family vCPUs"),
							Value:          to.Ptr("standardDv2Family"),
						},
						CurrentValue: to.Ptr[int32](15),
						Limit:        to.Ptr[int32](20),
						ResourceType: to.Ptr(armreservations.ResourceTypeDedicated),
					},
				},
				{
					Properties: &armreservations.QuotaProperties{
						Name: &armreservations.ResourceName{
							LocalizedValue: to.Ptr("Total Regional Low-priority vCPUs"),
							Value:          to.Ptr("totalLowPriorityCores"),
						},
						CurrentValue: to.Ptr[int32](49),
						Limit:        to.Ptr[int32](600),
						ResourceType: to.Ptr(armreservations.ResourceTypeLowPriority),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.QuotaLimits) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.QuotaLimits)
			t.Fatalf("Mock response is not equal to example response for example specification/reservations/resource-manager/Microsoft.Capacity/stable/2020-10-25/examples/getMachineLearningServicesUsages.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestQuotaRequestStatus_Get(t *testing.T) {
	// From example specification/reservations/resource-manager/Microsoft.Capacity/stable/2020-10-25/examples/getQuotaRequestStatusFailed.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"QuotaRequestFailed"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armreservations.NewQuotaRequestStatusClient(cred, &options)
	res, err := client.Get(ctx,
		"00000000-0000-0000-0000-000000000000",
		"Microsoft.Compute",
		"eastus",
		"2B5C8515-37D8-4B6A-879B-CD641A2CF605",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/reservations/resource-manager/Microsoft.Capacity/stable/2020-10-25/examples/getQuotaRequestStatusFailed.json: %v", err)
	}
	// Response check
	{
		exampleRes := armreservations.QuotaRequestDetails{
			Name: to.Ptr("00000000-0000-0000-0000-000000000000/2B5C8515-37D8-4B6A-879B-CD641A2CF605"),
			Type: to.Ptr("Microsoft.Capacity/serviceLimitsRequests"),
			ID:   to.Ptr("2B5C8515-37D8-4B6A-879B-CD641A2CF605"),
			Properties: &armreservations.QuotaRequestProperties{
				Message:           to.Ptr("Request failed, please contatct support."),
				ProvisioningState: to.Ptr(armreservations.QuotaRequestStateSucceeded),
				RequestSubmitTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-08-19T19:23:17.904Z"); return t }()),
				Value: []*armreservations.SubRequest{
					{
						Name: &armreservations.ResourceName{
							LocalizedValue: to.Ptr("Standard HCS Family vCPUs"),
							Value:          to.Ptr("standardHCSFamily"),
						},
						Limit:             to.Ptr[int32](200),
						Message:           to.Ptr("Request completed"),
						ProvisioningState: to.Ptr(armreservations.QuotaRequestStateSucceeded),
						SubRequestID:      to.Ptr("AD07450A-DE86-4FD3-859B-107BEF218C4C"),
					},
					{
						Name: &armreservations.ResourceName{
							LocalizedValue: to.Ptr("Standard NC Promo Family vCPUs"),
							Value:          to.Ptr("standardNCPromoFamily"),
						},
						Limit:             to.Ptr[int32](50),
						Message:           to.Ptr("RRequest failed, please contatct support."),
						ProvisioningState: to.Ptr(armreservations.QuotaRequestStateSucceeded),
						SubRequestID:      to.Ptr("AD07450A-DE86-4FD3-859B-107BEF218C4C"),
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.QuotaRequestDetails) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.QuotaRequestDetails)
			t.Fatalf("Mock response is not equal to example response for example specification/reservations/resource-manager/Microsoft.Capacity/stable/2020-10-25/examples/getQuotaRequestStatusFailed.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/reservations/resource-manager/Microsoft.Capacity/stable/2020-10-25/examples/getQuotaRequestStatusInProgress.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"QuotaRequestInProgress"},
	})
	client = armreservations.NewQuotaRequestStatusClient(cred, &options)
	res, err = client.Get(ctx,
		"00000000-0000-0000-0000-000000000000",
		"Microsoft.Compute",
		"eastus",
		"2B5C8515-37D8-4B6A-879B-CD641A2CF605",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/reservations/resource-manager/Microsoft.Capacity/stable/2020-10-25/examples/getQuotaRequestStatusInProgress.json: %v", err)
	}
	// Response check
	{
		exampleRes := armreservations.QuotaRequestDetails{
			Name: to.Ptr("00000000-0000-0000-0000-000000000000/2B5C8515-37D8-4B6A-879B-CD641A2CF605"),
			Type: to.Ptr("Microsoft.Capacity/serviceLimitsRequests"),
			ID:   to.Ptr("2B5C8515-37D8-4B6A-879B-CD641A2CF605"),
			Properties: &armreservations.QuotaRequestProperties{
				Message:           to.Ptr("Request processing"),
				ProvisioningState: to.Ptr(armreservations.QuotaRequestStateSucceeded),
				RequestSubmitTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-08-19T19:23:17.904Z"); return t }()),
				Value: []*armreservations.SubRequest{
					{
						Name: &armreservations.ResourceName{
							LocalizedValue: to.Ptr("Standard NC Promo Family vCPUs"),
							Value:          to.Ptr("standardNCPromoFamily"),
						},
						Limit:             to.Ptr[int32](50),
						Message:           to.Ptr("Request processing"),
						ProvisioningState: to.Ptr(armreservations.QuotaRequestStateSucceeded),
						SubRequestID:      to.Ptr("AD07450A-DE86-4FD3-859B-107BEF218C4C"),
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.QuotaRequestDetails) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.QuotaRequestDetails)
			t.Fatalf("Mock response is not equal to example response for example specification/reservations/resource-manager/Microsoft.Capacity/stable/2020-10-25/examples/getQuotaRequestStatusInProgress.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/reservations/resource-manager/Microsoft.Capacity/stable/2020-10-25/examples/getQuotaRequestStatusById.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"QuotaRequestStatus"},
	})
	client = armreservations.NewQuotaRequestStatusClient(cred, &options)
	res, err = client.Get(ctx,
		"00000000-0000-0000-0000-000000000000",
		"Microsoft.Compute",
		"eastus",
		"2B5C8515-37D8-4B6A-879B-CD641A2CF605",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/reservations/resource-manager/Microsoft.Capacity/stable/2020-10-25/examples/getQuotaRequestStatusById.json: %v", err)
	}
	// Response check
	{
		exampleRes := armreservations.QuotaRequestDetails{
			Name: to.Ptr("00000000-0000-0000-0000-000000000000/2B5C8515-37D8-4B6A-879B-CD641A2CF605"),
			Type: to.Ptr("Microsoft.Capacity/serviceLimitsRequests"),
			ID:   to.Ptr("2B5C8515-37D8-4B6A-879B-CD641A2CF605"),
			Properties: &armreservations.QuotaRequestProperties{
				Message:           to.Ptr("Request completed"),
				ProvisioningState: to.Ptr(armreservations.QuotaRequestStateSucceeded),
				RequestSubmitTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-08-19T19:23:17.904Z"); return t }()),
				Value: []*armreservations.SubRequest{
					{
						Name: &armreservations.ResourceName{
							LocalizedValue: to.Ptr("Standard HCS Family vCPUs"),
							Value:          to.Ptr("standardHCSFamily"),
						},
						Limit:             to.Ptr[int32](200),
						Message:           to.Ptr("Request completed"),
						ProvisioningState: to.Ptr(armreservations.QuotaRequestStateSucceeded),
						SubRequestID:      to.Ptr("AD07450A-DE86-4FD3-859B-107BEF218C4C"),
					},
					{
						Name: &armreservations.ResourceName{
							LocalizedValue: to.Ptr("Standard NC Promo Family vCPUs"),
							Value:          to.Ptr("standardNCPromoFamily"),
						},
						Limit:             to.Ptr[int32](50),
						Message:           to.Ptr("Request completed"),
						ProvisioningState: to.Ptr(armreservations.QuotaRequestStateSucceeded),
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.QuotaRequestDetails) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.QuotaRequestDetails)
			t.Fatalf("Mock response is not equal to example response for example specification/reservations/resource-manager/Microsoft.Capacity/stable/2020-10-25/examples/getQuotaRequestStatusById.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestQuotaRequestStatus_List(t *testing.T) {
	// From example specification/reservations/resource-manager/Microsoft.Capacity/stable/2020-10-25/examples/getQuotaRequestsHistory.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"QuotaRequestHistory"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armreservations.NewQuotaRequestStatusClient(cred, &options)
	pager := client.List("3f75fdf7-977e-44ad-990d-99f14f0f299f",
		"Microsoft.Compute",
		"eastus",
		&armreservations.QuotaRequestStatusClientListOptions{Filter: nil,
			Top:       nil,
			Skiptoken: nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/reservations/resource-manager/Microsoft.Capacity/stable/2020-10-25/examples/getQuotaRequestsHistory.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armreservations.QuotaRequestDetailsList{
			Value: []*armreservations.QuotaRequestDetails{
				{
					Name: to.Ptr("00000000-0000-0000-0000-000000000000/2B5C8515-37D8-4B6A-879B-CD641A2CF605"),
					Type: to.Ptr("Microsoft.Capacity/serviceLimitsRequests"),
					ID:   to.Ptr("2B5C8515-37D8-4B6A-879B-CD641A2CF605"),
					Properties: &armreservations.QuotaRequestProperties{
						Message:           to.Ptr("Request completed"),
						ProvisioningState: to.Ptr(armreservations.QuotaRequestStateSucceeded),
						RequestSubmitTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-08-19T19:23:17.904Z"); return t }()),
						Value: []*armreservations.SubRequest{
							{
								Name: &armreservations.ResourceName{
									LocalizedValue: to.Ptr("Standard HCS Family vCPUs"),
									Value:          to.Ptr("standardHCSFamily"),
								},
								Limit:             to.Ptr[int32](200),
								Message:           to.Ptr("Request completed"),
								ProvisioningState: to.Ptr(armreservations.QuotaRequestStateSucceeded),
								SubRequestID:      to.Ptr("AD07450A-DE86-4FD3-859B-107BEF218C4C"),
							},
							{
								Name: &armreservations.ResourceName{
									LocalizedValue: to.Ptr("Standard NC Promo Family vCPUs"),
									Value:          to.Ptr("standardNCPromoFamily"),
								},
								Limit:             to.Ptr[int32](50),
								Message:           to.Ptr("Request completed"),
								ProvisioningState: to.Ptr(armreservations.QuotaRequestStateSucceeded),
								SubRequestID:      to.Ptr("AD07450A-DE86-4FD3-859B-107BEF218C4C"),
							}},
					},
				},
				{
					Name: to.Ptr("00000000-0000-0000-0000-000000000000/7E73A85C-83BB-4DE4-903F-076F1A2B91D6"),
					Type: to.Ptr("Microsoft.Capacity/serviceLimitsRequests"),
					ID:   to.Ptr("7E73A85C-83BB-4DE4-903F-076F1A2B91D6"),
					Properties: &armreservations.QuotaRequestProperties{
						Message:           to.Ptr("Request completed"),
						ProvisioningState: to.Ptr(armreservations.QuotaRequestStateSucceeded),
						RequestSubmitTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-08-18T19:23:17.904Z"); return t }()),
						Value: []*armreservations.SubRequest{
							{
								Name: &armreservations.ResourceName{
									LocalizedValue: to.Ptr("Standard NVSv3 Family vCPUs"),
									Value:          to.Ptr("standardNVSv3Family"),
								},
								Limit:             to.Ptr[int32](100),
								Message:           to.Ptr("Request completed"),
								ProvisioningState: to.Ptr(armreservations.QuotaRequestStateSucceeded),
								SubRequestID:      to.Ptr("AD07450A-DE86-4FD3-859B-107BEF218C4C"),
							},
							{
								Name: &armreservations.ResourceName{
									LocalizedValue: to.Ptr("Standard NV Promo Family vCPUs"),
									Value:          to.Ptr("standardNVPromoFamily"),
								},
								Limit:             to.Ptr[int32](150),
								Message:           to.Ptr("Request completed"),
								ProvisioningState: to.Ptr(armreservations.QuotaRequestStateSucceeded),
								SubRequestID:      to.Ptr("AD07450A-DE86-4FD3-859B-107BEF218C4C"),
							}},
					},
				},
				{
					Name: to.Ptr("00000000-0000-0000-0000-000000000000/5E460077-AB53-4802-8997-A6940E0B7649"),
					Type: to.Ptr("Microsoft.Capacity/serviceLimitsRequests"),
					ID:   to.Ptr("5E460077-AB53-4802-8997-A6940E0B7649"),
					Properties: &armreservations.QuotaRequestProperties{
						Message:           to.Ptr("Request completed"),
						ProvisioningState: to.Ptr(armreservations.QuotaRequestStateSucceeded),
						RequestSubmitTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-08-17T19:23:17.904Z"); return t }()),
						Value: []*armreservations.SubRequest{
							{
								Name: &armreservations.ResourceName{
									LocalizedValue: to.Ptr("Standard NC Promo Family vCPUs"),
									Value:          to.Ptr("standardNCPromoFamily"),
								},
								Limit:             to.Ptr[int32](70),
								Message:           to.Ptr("Request completed"),
								ProvisioningState: to.Ptr(armreservations.QuotaRequestStateSucceeded),
								SubRequestID:      to.Ptr("AD07450A-DE86-4FD3-859B-107BEF218C4C"),
							},
							{
								Name: &armreservations.ResourceName{
									LocalizedValue: to.Ptr("Standard HBS Family vCPUs"),
									Value:          to.Ptr("standardHBSFamily"),
								},
								Limit:             to.Ptr[int32](52),
								Message:           to.Ptr("Request completed"),
								ProvisioningState: to.Ptr(armreservations.QuotaRequestStateSucceeded),
								SubRequestID:      to.Ptr("AD07450A-DE86-4FD3-859B-107BEF218C4C"),
							}},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.QuotaRequestDetailsList) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.QuotaRequestDetailsList)
			t.Fatalf("Mock response is not equal to example response for example specification/reservations/resource-manager/Microsoft.Capacity/stable/2020-10-25/examples/getQuotaRequestsHistory.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
