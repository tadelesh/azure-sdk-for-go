//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armreservations

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"golang.org/x/net/http2"
)

var (
	ctx            context.Context
	subscriptionId string
	cred           azcore.TokenCredential
	err            error
	con            *arm.Connection
	mockHost       string
)

func TestReservation_AvailableScopes(t *testing.T) {
	// From example AvailableScopes
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewReservationClient(con)
	poller, err := client.BeginAvailableScopes(ctx,
		"276e7ae4-84d0-4da6-ab4b-d6b94f3557da",
		"356e7ae4-84d0-4da6-ab4b-d6b94f3557da",
		AvailableScopeRequest{
			Properties: &AvailableScopeRequestProperties{
				Scopes: []*string{
					to.StringPtr("/subscriptions/efc7c997-7700-4a74-b731-55aec16c15e9")},
			},
		},
		&ReservationBeginAvailableScopesOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestReservation_Split(t *testing.T) {
	// From example Split
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewReservationClient(con)
	poller, err := client.BeginSplit(ctx,
		"276e7ae4-84d0-4da6-ab4b-d6b94f3557da",
		SplitRequest{
			Properties: &SplitProperties{
				Quantities: []*int32{
					to.Int32Ptr(1),
					to.Int32Ptr(2)},
				ReservationID: to.StringPtr("/providers/Microsoft.Capacity/reservationOrders/276e7ae4-84d0-4da6-ab4b-d6b94f3557da/reservations/bcae77cd-3119-4766-919f-b50d36c75c7a"),
			},
		},
		&ReservationBeginSplitOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestReservation_Merge(t *testing.T) {
	// From example Merge
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewReservationClient(con)
	poller, err := client.BeginMerge(ctx,
		"276e7ae4-84d0-4da6-ab4b-d6b94f3557da",
		MergeRequest{
			Properties: &MergeProperties{
				Sources: []*string{
					to.StringPtr("/providers/Microsoft.Capacity/reservationOrders/c0565a8a-4491-4e77-b07b-5e6d66718e1c/reservations/cea04232-932e-47db-acb5-e29a945ecc73"),
					to.StringPtr("/providers/Microsoft.Capacity/reservationOrders/c0565a8a-4491-4e77-b07b-5e6d66718e1c/reservations/5bf54dc7-dacd-4f46-a16b-7b78f4a59799")},
			},
		},
		&ReservationBeginMergeOptions{})
	if err != nil {
		t.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
}

func TestReservation_List(t *testing.T) {
	// From example ReservationList
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewReservationClient(con)
	pager := client.List("276e7ae4-84d0-4da6-ab4b-d6b94f3557da",
		&ReservationListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ReservationResponse.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ReservationResponse.ID should not be nil!")
			}
		}
	}
}

func TestReservation_Get(t *testing.T) {
	// From example GetReservation
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewReservationClient(con)
	res, err := client.Get(ctx,
		"6ef59113-3482-40da-8d79-787f823e34bc",
		"276e7ae4-84d0-4da6-ab4b-d6b94f3557da",
		&ReservationGetOptions{Expand: to.StringPtr("renewProperties")})
	if err != nil {
		t.Fatal(err)
	}
	if res.ReservationResponse.ID == nil {
		t.Fatal("ReservationResponse.ID should not be nil!")
	}
}

func TestReservation_Update(t *testing.T) {
	// From example PatchReservation
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewReservationClient(con)
	poller, err := client.BeginUpdate(ctx,
		"276e7ae4-84d0-4da6-ab4b-d6b94f3557da",
		"6ef59113-3482-40da-8d79-787f823e34bc",
		Patch{
			Properties: &PatchProperties{
				AppliedScopeType:    AppliedScopeTypeShared.ToPtr(),
				InstanceFlexibility: InstanceFlexibilityOff.ToPtr(),
			},
		},
		&ReservationBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ReservationResponse.ID == nil {
		t.Fatal("ReservationResponse.ID should not be nil!")
	}
}

func TestReservation_ListRevisions(t *testing.T) {
	// From example ReservationRevisions
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewReservationClient(con)
	pager := client.ListRevisions("6ef59113-3482-40da-8d79-787f823e34bc",
		"276e7ae4-84d0-4da6-ab4b-d6b94f3557da",
		&ReservationListRevisionsOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ReservationResponse.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ReservationResponse.ID should not be nil!")
			}
		}
	}
}

func TestReservation_ListAll(t *testing.T) {
	// From example Catalog
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewReservationClient(con)
	pager := client.ListAll(&ReservationListAllOptions{Filter: to.StringPtr("(properties%2farchived+eq+false)"),
		Orderby:   to.StringPtr("properties/displayName asc"),
		Skiptoken: to.Float32Ptr("50"),
		Take:      to.Float32Ptr("1"),
	})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ReservationResponse.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ReservationResponse.ID should not be nil!")
			}
		}
	}
}

func Test_GetCatalog(t *testing.T) {
	// From example Catalog
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAzureReservationAPIClient(con)
	_, err := client.GetCatalog(ctx,
		"23bc208b-083f-4901-ae85-4f98c0c3b4b6",
		&AzureReservationAPIGetCatalogOptions{ReservedResourceType: to.StringPtr("VirtualMachines"),
			Location: to.StringPtr("eastus"),
		})
	if err != nil {
		t.Fatal(err)
	}
}

func Test_GetAppliedReservationList(t *testing.T) {
	// From example AppliedReservationList
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewAzureReservationAPIClient(con)
	res, err := client.GetAppliedReservationList(ctx,
		"23bc208b-083f-4901-ae85-4f98c0c3b4b6",
		&AzureReservationAPIGetAppliedReservationListOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.AppliedReservations.ID == nil {
		t.Fatal("AppliedReservations.ID should not be nil!")
	}
}

func TestReservationOrder_Calculate(t *testing.T) {
	// From example Purchase
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewReservationOrderClient(con)
	_, err := client.Calculate(ctx,
		PurchaseRequest{
			Location: to.StringPtr("westus"),
			Properties: &PurchaseRequestProperties{
				AppliedScopeType: AppliedScopeTypeShared.ToPtr(),
				AppliedScopes:    []*string{},
				BillingPlan:      ReservationBillingPlanMonthly.ToPtr(),
				BillingScopeID:   to.StringPtr("/subscriptions/ed3a1871-612d-abcd-a849-c2542a68be83"),
				DisplayName:      to.StringPtr("TestReservationOrder"),
				Quantity:         to.Int32Ptr(1),
				ReservedResourceProperties: &PurchaseRequestPropertiesReservedResourceProperties{
					InstanceFlexibility: InstanceFlexibilityOn.ToPtr(),
				},
				ReservedResourceType: ReservedResourceTypeVirtualMachines.ToPtr(),
				Term:                 ReservationTermP1Y.ToPtr(),
			},
			SKU: &SKUName{
				Name: to.StringPtr("standard_D1"),
			},
		},
		&ReservationOrderCalculateOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestReservationOrder_List(t *testing.T) {
	// From example ReservationOrderList
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewReservationOrderClient(con)
	pager := client.List(&ReservationOrderListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ReservationOrderResponse.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ReservationOrderResponse.ID should not be nil!")
			}
		}
	}
}

func TestReservationOrder_Purchase(t *testing.T) {
	// From example Purchase
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewReservationOrderClient(con)
	poller, err := client.BeginPurchase(ctx,
		"a075419f-44cc-497f-b68a-14ee811d48b9",
		PurchaseRequest{
			Location: to.StringPtr("westus"),
			Properties: &PurchaseRequestProperties{
				AppliedScopeType: AppliedScopeTypeShared.ToPtr(),
				AppliedScopes:    []*string{},
				BillingPlan:      ReservationBillingPlanMonthly.ToPtr(),
				BillingScopeID:   to.StringPtr("/subscriptions/ed3a1871-612d-abcd-a849-c2542a68be83"),
				DisplayName:      to.StringPtr("TestReservationOrder"),
				Quantity:         to.Int32Ptr(1),
				Renew:            to.BoolPtr(false),
				ReservedResourceProperties: &PurchaseRequestPropertiesReservedResourceProperties{
					InstanceFlexibility: InstanceFlexibilityOn.ToPtr(),
				},
				ReservedResourceType: ReservedResourceTypeVirtualMachines.ToPtr(),
				Term:                 ReservationTermP1Y.ToPtr(),
			},
			SKU: &SKUName{
				Name: to.StringPtr("standard_D1"),
			},
		},
		&ReservationOrderBeginPurchaseOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ReservationOrderResponse.ID == nil {
		t.Fatal("ReservationOrderResponse.ID should not be nil!")
	}
}

func TestReservationOrder_Get(t *testing.T) {
	// From example GetReservation
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewReservationOrderClient(con)
	res, err := client.Get(ctx,
		"a075419f-44cc-497f-b68a-14ee811d48b9",
		&ReservationOrderGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ReservationOrderResponse.ID == nil {
		t.Fatal("ReservationOrderResponse.ID should not be nil!")
	}

	// From example GetReservationWithExpandPayments
	res, err = client.Get(ctx,
		"a075419f-44cc-497f-b68a-14ee811d48b9",
		&ReservationOrderGetOptions{Expand: to.StringPtr("schedule")})
	if err != nil {
		t.Fatal(err)
	}
	if res.ReservationOrderResponse.ID == nil {
		t.Fatal("ReservationOrderResponse.ID should not be nil!")
	}
}

func TestReservationOrder_ChangeDirectory(t *testing.T) {
	// From example ChangeDirectory
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewReservationOrderClient(con)
	_, err := client.ChangeDirectory(ctx,
		"a075419f-44cc-497f-b68a-14ee811d48b9",
		ChangeDirectoryRequest{
			DestinationTenantID: to.StringPtr("906655ea-30be-4587-9d12-b50e077b0f32"),
		},
		&ReservationOrderChangeDirectoryOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestOperation_List(t *testing.T) {
	// From example GetOperations
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewOperationClient(con)
	pager := client.List(&OperationListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
	}
}

func TestCalculateExchange_Post(t *testing.T) {
	// From example CalculateExchange
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewCalculateExchangeClient(con)
	poller, err := client.BeginPost(ctx,
		CalculateExchangeRequest{
			Properties: &CalculateExchangeRequestProperties{
				ReservationsToExchange: []*ReservationToReturn{
					{
						Quantity:      to.Int32Ptr(1),
						ReservationID: to.StringPtr("/providers/microsoft.capacity/reservationOrders/1f14354c-dc12-4c8d-8090-6f295a3a34aa/reservations/c8c926bd-fc5d-4e29-9d43-b68340ac23a6"),
					}},
				ReservationsToPurchase: []*PurchaseRequest{
					{
						Location: to.StringPtr("westus"),
						Properties: &PurchaseRequestProperties{
							AppliedScopeType: AppliedScopeTypeShared.ToPtr(),
							AppliedScopes:    []*string{},
							BillingPlan:      ReservationBillingPlanUpfront.ToPtr(),
							BillingScopeID:   to.StringPtr("/subscriptions/ed3a1871-612d-abcd-a849-c2542a68be83"),
							DisplayName:      to.StringPtr("testDisplayName"),
							Quantity:         to.Int32Ptr(1),
							Renew:            to.BoolPtr(false),
							ReservedResourceProperties: &PurchaseRequestPropertiesReservedResourceProperties{
								InstanceFlexibility: InstanceFlexibilityOn.ToPtr(),
							},
							ReservedResourceType: ReservedResourceTypeVirtualMachines.ToPtr(),
							Term:                 ReservationTermP1Y.ToPtr(),
						},
						SKU: &SKUName{
							Name: to.StringPtr("Standard_B1ls"),
						},
					}},
			},
		},
		&CalculateExchangeBeginPostOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.CalculateExchangeOperationResultResponse.ID == nil {
		t.Fatal("CalculateExchangeOperationResultResponse.ID should not be nil!")
	}
}

func TestExchange_Post(t *testing.T) {
	// From example Exchange
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewExchangeClient(con)
	poller, err := client.BeginPost(ctx,
		ExchangeRequest{
			Properties: &ExchangeRequestProperties{
				SessionID: to.StringPtr("66e2ac8f-439e-4345-8235-6fef07608081"),
			},
		},
		&ExchangeBeginPostOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.ExchangeOperationResultResponse.ID == nil {
		t.Fatal("ExchangeOperationResultResponse.ID should not be nil!")
	}
}

func TestQuota_Get(t *testing.T) {
	// From example Quotas_Request_ForCompute
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewQuotaClient(con)
	_, err := client.Get(ctx,
		"00000000-0000-0000-0000-000000000000",
		"Microsoft.Compute",
		"eastus",
		"standardNDSFamily",
		&QuotaGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestQuota_CreateOrUpdate(t *testing.T) {
	// From example Quotas_Request_PutForCompute
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewQuotaClient(con)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"D7EC67B3-7657-4966-BFFC-41EFD36BAAB3",
		"Microsoft.Compute",
		"eastus",
		"standardFSv2Family",
		CurrentQuotaLimitBase{
			Properties: &QuotaProperties{
				Name: &ResourceName{
					Value: to.StringPtr("standardFSv2Family"),
				},
				Limit: to.Int32Ptr(200),
				Unit:  to.StringPtr("Count"),
			},
		},
		&QuotaBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.QuotaRequestOneResourceSubmitResponse.ID == nil {
		t.Fatal("QuotaRequestOneResourceSubmitResponse.ID should not be nil!")
	}

	// From example Quotas_Request_PutForMachineLearningServices_DedicatedResource
	poller, err = client.BeginCreateOrUpdate(ctx,
		"D7EC67B3-7657-4966-BFFC-41EFD36BAAB3",
		"Microsoft.MachineLearningServices",
		"eastus",
		"StandardDv2Family",
		CurrentQuotaLimitBase{
			Properties: &QuotaProperties{
				Name: &ResourceName{
					Value: to.StringPtr("StandardDv2Family"),
				},
				Limit:        to.Int32Ptr(200),
				ResourceType: ResourceTypeDedicated.ToPtr(),
				Unit:         to.StringPtr("Count"),
			},
		},
		&QuotaBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.QuotaRequestOneResourceSubmitResponse.ID == nil {
		t.Fatal("QuotaRequestOneResourceSubmitResponse.ID should not be nil!")
	}

	// From example Quotas_Request_PutForMachineLearningServices_LowPriorityResource
	poller, err = client.BeginCreateOrUpdate(ctx,
		"D7EC67B3-7657-4966-BFFC-41EFD36BAAB3",
		"Microsoft.MachineLearningServices",
		"eastus",
		"TotalLowPriorityCores",
		CurrentQuotaLimitBase{
			Properties: &QuotaProperties{
				Name: &ResourceName{
					Value: to.StringPtr("TotalLowPriorityCores"),
				},
				Limit:        to.Int32Ptr(200),
				ResourceType: ResourceTypeLowPriority.ToPtr(),
				Unit:         to.StringPtr("Count"),
			},
		},
		&QuotaBeginCreateOrUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.QuotaRequestOneResourceSubmitResponse.ID == nil {
		t.Fatal("QuotaRequestOneResourceSubmitResponse.ID should not be nil!")
	}
}

func TestQuota_Update(t *testing.T) {
	// From example Quotas_Request_PatchForCompute
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewQuotaClient(con)
	poller, err := client.BeginUpdate(ctx,
		"D7EC67B3-7657-4966-BFFC-41EFD36BAAB3",
		"Microsoft.Compute",
		"eastus",
		"standardFSv2Family",
		CurrentQuotaLimitBase{
			Properties: &QuotaProperties{
				Name: &ResourceName{
					Value: to.StringPtr("standardFSv2Family"),
				},
				Limit: to.Int32Ptr(200),
				Unit:  to.StringPtr("Count"),
			},
		},
		&QuotaBeginUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatal(err)
	}
	if res.QuotaRequestOneResourceSubmitResponse.ID == nil {
		t.Fatal("QuotaRequestOneResourceSubmitResponse.ID should not be nil!")
	}
}

func TestQuota_List(t *testing.T) {
	// From example Quotas_listUsagesForCompute
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewQuotaClient(con)
	pager := client.List("00000000-0000-0000-0000-000000000000",
		"Microsoft.Compute",
		"eastus",
		&QuotaListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
	}

	// From example Quotas_listUsagesMachineLearningServices
	pager = client.List("00000000-0000-0000-0000-000000000000",
		"Microsoft.MachineLearningServices",
		"eastus",
		&QuotaListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
	}
}

func TestQuotaRequestStatus_Get(t *testing.T) {
	// From example QuotaRequestFailed
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewQuotaRequestStatusClient(con)
	res, err := client.Get(ctx,
		"00000000-0000-0000-0000-000000000000",
		"Microsoft.Compute",
		"eastus",
		"2B5C8515-37D8-4B6A-879B-CD641A2CF605",
		&QuotaRequestStatusGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.QuotaRequestDetails.ID == nil {
		t.Fatal("QuotaRequestDetails.ID should not be nil!")
	}

	// From example QuotaRequestInProgress
	res, err = client.Get(ctx,
		"00000000-0000-0000-0000-000000000000",
		"Microsoft.Compute",
		"eastus",
		"2B5C8515-37D8-4B6A-879B-CD641A2CF605",
		&QuotaRequestStatusGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.QuotaRequestDetails.ID == nil {
		t.Fatal("QuotaRequestDetails.ID should not be nil!")
	}

	// From example QuotaRequestStatus
	res, err = client.Get(ctx,
		"00000000-0000-0000-0000-000000000000",
		"Microsoft.Compute",
		"eastus",
		"2B5C8515-37D8-4B6A-879B-CD641A2CF605",
		&QuotaRequestStatusGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.QuotaRequestDetails.ID == nil {
		t.Fatal("QuotaRequestDetails.ID should not be nil!")
	}
}

func TestQuotaRequestStatus_List(t *testing.T) {
	// From example QuotaRequestHistory
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewQuotaRequestStatusClient(con)
	pager := client.List("3f75fdf7-977e-44ad-990d-99f14f0f299f",
		"Microsoft.Compute",
		"eastus",
		&QuotaRequestStatusListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("QuotaRequestDetails.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("QuotaRequestDetails.ID should not be nil!")
			}
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	subscriptionId = getEnv("SUBSCRIPTION_ID", "00000000-0000-0000-0000-000000000000")
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}
	cred, err = azidentity.NewEnvironmentCredential(&azidentity.EnvironmentCredentialOptions{AuthorityHost: mockHost, HTTPClient: client})
	if err != nil {
		panic(err)
	}

	con = arm.NewConnection(mockHost, cred, &arm.ConnectionOptions{
		Logging: policy.LogOptions{
			IncludeBody: true,
		},
		HTTPClient: client,
	})
}

func tearDown() {

}
