//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armmixedreality_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"
	"time"

	"encoding/json"
	"reflect"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/mixedreality/armmixedreality"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestOperations_List(t *testing.T) {
	// From example specification/mixedreality/resource-manager/Microsoft.MixedReality/preview/2021-03-01-preview/examples/proxy/ExposingAvailableOperations.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List available operations"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmixedreality.NewOperationsClient(cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/mixedreality/resource-manager/Microsoft.MixedReality/preview/2021-03-01-preview/examples/proxy/ExposingAvailableOperations.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmixedreality.OperationPage{
			Value: []*armmixedreality.Operation{
				{
					Name: to.Ptr("Microsoft.MixedReality/register/action"),
					Display: &armmixedreality.OperationDisplay{
						Description: to.Ptr("Registers a subscription for the Mixed Reality resource provider."),
						Operation:   to.Ptr("Registers the Mixed Reality resource provider"),
						Provider:    to.Ptr("Microsoft.MixedReality"),
						Resource:    to.Ptr("Mixed Reality resource provider"),
					},
				},
				{
					Name: to.Ptr("Microsoft.MixedReality/SpatialAnchorsAccounts/delete"),
					Display: &armmixedreality.OperationDisplay{
						Description: to.Ptr("Deletes the resource for Microsoft.MixedReality/SpatialAnchorsAccounts"),
						Operation:   to.Ptr("Delete Spatial Anchors Accounts"),
						Provider:    to.Ptr("Microsoft.MixedReality"),
						Resource:    to.Ptr("SpatialAnchorsAccounts"),
					},
				},
				{
					Name: to.Ptr("Microsoft.MixedReality/SpatialAnchorsAccounts/read"),
					Display: &armmixedreality.OperationDisplay{
						Description: to.Ptr("Gets the resource for Microsoft.MixedReality/SpatialAnchorsAccounts"),
						Operation:   to.Ptr("Get Spatial Anchors Accounts"),
						Provider:    to.Ptr("Microsoft.MixedReality"),
						Resource:    to.Ptr("SpatialAnchorsAccounts"),
					},
				},
				{
					Name: to.Ptr("Microsoft.MixedReality/SpatialAnchorsAccounts/write"),
					Display: &armmixedreality.OperationDisplay{
						Description: to.Ptr("Updates the resource for Microsoft.MixedReality/SpatialAnchorsAccounts"),
						Operation:   to.Ptr("Update Spatial Anchors Accounts"),
						Provider:    to.Ptr("Microsoft.MixedReality"),
						Resource:    to.Ptr("SpatialAnchorsAccounts"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OperationPage) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OperationPage)
			t.Fatalf("Mock response is not equal to example response for example specification/mixedreality/resource-manager/Microsoft.MixedReality/preview/2021-03-01-preview/examples/proxy/ExposingAvailableOperations.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestMixedRealityClient_CheckNameAvailabilityLocal(t *testing.T) {
	// From example specification/mixedreality/resource-manager/Microsoft.MixedReality/preview/2021-03-01-preview/examples/proxy/CheckNameAvailabilityForLocalUniqueness.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CheckLocalNameAvailability"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmixedreality.NewClient("xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx", cred, &options)
	res, err := client.CheckNameAvailabilityLocal(ctx,
		"eastus2euap",
		armmixedreality.CheckNameAvailabilityRequest{
			Name: to.Ptr("MyAccount"),
			Type: to.Ptr("Microsoft.MixedReality/spatialAnchorsAccounts"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mixedreality/resource-manager/Microsoft.MixedReality/preview/2021-03-01-preview/examples/proxy/CheckNameAvailabilityForLocalUniqueness.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmixedreality.CheckNameAvailabilityResponse{
			Message:       to.Ptr("..."),
			NameAvailable: to.Ptr(false),
			Reason:        to.Ptr(armmixedreality.NameUnavailableReasonAlreadyExists),
		}
		if !reflect.DeepEqual(exampleRes, res.CheckNameAvailabilityResponse) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CheckNameAvailabilityResponse)
			t.Fatalf("Mock response is not equal to example response for example specification/mixedreality/resource-manager/Microsoft.MixedReality/preview/2021-03-01-preview/examples/proxy/CheckNameAvailabilityForLocalUniqueness.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSpatialAnchorsAccounts_ListBySubscription(t *testing.T) {
	// From example specification/mixedreality/resource-manager/Microsoft.MixedReality/preview/2021-03-01-preview/examples/spatial-anchors/GetBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List spatial anchors accounts by subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmixedreality.NewSpatialAnchorsAccountsClient("xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx", cred, &options)
	pager := client.ListBySubscription(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/mixedreality/resource-manager/Microsoft.MixedReality/preview/2021-03-01-preview/examples/spatial-anchors/GetBySubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmixedreality.SpatialAnchorsAccountPage{
			Value: []*armmixedreality.SpatialAnchorsAccount{
				{
					Name:     to.Ptr("alpha"),
					Type:     to.Ptr("Microsoft.MixedReality/spatialAnchorsAccounts"),
					ID:       to.Ptr("/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/MyResourceGroup/providers/Microsoft.MixedReality/spatialAnchorsAccounts/alpha"),
					Location: to.Ptr("eastus2euap"),
					Tags:     map[string]*string{},
					Properties: &armmixedreality.AccountProperties{
						AccountDomain: to.Ptr("mixedreality.azure.com"),
						AccountID:     to.Ptr("xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"),
					},
				},
				{
					Name:     to.Ptr("omega"),
					Type:     to.Ptr("Microsoft.MixedReality/spatialAnchorsAccounts"),
					ID:       to.Ptr("/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/MyResourceGroup/providers/Microsoft.MixedReality/spatialAnchorsAccounts/omega"),
					Location: to.Ptr("eastus2euap"),
					Tags:     map[string]*string{},
					Properties: &armmixedreality.AccountProperties{
						AccountDomain: to.Ptr("mixedreality.azure.com"),
						AccountID:     to.Ptr("xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SpatialAnchorsAccountPage) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SpatialAnchorsAccountPage)
			t.Fatalf("Mock response is not equal to example response for example specification/mixedreality/resource-manager/Microsoft.MixedReality/preview/2021-03-01-preview/examples/spatial-anchors/GetBySubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSpatialAnchorsAccounts_ListByResourceGroup(t *testing.T) {
	// From example specification/mixedreality/resource-manager/Microsoft.MixedReality/preview/2021-03-01-preview/examples/spatial-anchors/GetByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List spatial anchor accounts by resource group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmixedreality.NewSpatialAnchorsAccountsClient("xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx", cred, &options)
	pager := client.ListByResourceGroup("MyResourceGroup",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/mixedreality/resource-manager/Microsoft.MixedReality/preview/2021-03-01-preview/examples/spatial-anchors/GetByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmixedreality.SpatialAnchorsAccountPage{
			Value: []*armmixedreality.SpatialAnchorsAccount{
				{
					Name:     to.Ptr("alpha"),
					Type:     to.Ptr("Microsoft.MixedReality/spatialAnchorsAccounts"),
					ID:       to.Ptr("/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/MyResourceGroup/providers/Microsoft.MixedReality/spatialAnchorsAccounts/alpha"),
					Location: to.Ptr("eastus2euap"),
					Tags:     map[string]*string{},
					Properties: &armmixedreality.AccountProperties{
						AccountDomain: to.Ptr("mixedreality.azure.com"),
						AccountID:     to.Ptr("xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"),
					},
				},
				{
					Name:     to.Ptr("omega"),
					Type:     to.Ptr("Microsoft.MixedReality/spatialAnchorsAccounts"),
					ID:       to.Ptr("/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/MyResourceGroup/providers/Microsoft.MixedReality/spatialAnchorsAccounts/omega"),
					Location: to.Ptr("eastus2euap"),
					Tags:     map[string]*string{},
					Properties: &armmixedreality.AccountProperties{
						AccountDomain: to.Ptr("mixedreality.azure.com"),
						AccountID:     to.Ptr("xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.SpatialAnchorsAccountPage) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.SpatialAnchorsAccountPage)
			t.Fatalf("Mock response is not equal to example response for example specification/mixedreality/resource-manager/Microsoft.MixedReality/preview/2021-03-01-preview/examples/spatial-anchors/GetByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSpatialAnchorsAccounts_Delete(t *testing.T) {
	// From example specification/mixedreality/resource-manager/Microsoft.MixedReality/preview/2021-03-01-preview/examples/spatial-anchors/Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete spatial anchors account"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmixedreality.NewSpatialAnchorsAccountsClient("xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx", cred, &options)
	_, err := client.Delete(ctx,
		"MyResourceGroup",
		"MyAccount",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mixedreality/resource-manager/Microsoft.MixedReality/preview/2021-03-01-preview/examples/spatial-anchors/Delete.json: %v", err)
	}
}

func TestSpatialAnchorsAccounts_Get(t *testing.T) {
	// From example specification/mixedreality/resource-manager/Microsoft.MixedReality/preview/2021-03-01-preview/examples/spatial-anchors/Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get spatial anchors account"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmixedreality.NewSpatialAnchorsAccountsClient("xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx", cred, &options)
	res, err := client.Get(ctx,
		"MyResourceGroup",
		"MyAccount",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mixedreality/resource-manager/Microsoft.MixedReality/preview/2021-03-01-preview/examples/spatial-anchors/Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmixedreality.SpatialAnchorsAccount{
			Name:     to.Ptr("MyAccount"),
			Type:     to.Ptr("Microsoft.MixedReality/spatialAnchorsAccounts"),
			ID:       to.Ptr("/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/MyResourceGroup/providers/Microsoft.MixedReality/spatialAnchorsAccounts/MyAccount"),
			Location: to.Ptr("eastus2euap"),
			Tags:     map[string]*string{},
			Properties: &armmixedreality.AccountProperties{
				AccountDomain: to.Ptr("mixedreality.azure.com"),
				AccountID:     to.Ptr("xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SpatialAnchorsAccount) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SpatialAnchorsAccount)
			t.Fatalf("Mock response is not equal to example response for example specification/mixedreality/resource-manager/Microsoft.MixedReality/preview/2021-03-01-preview/examples/spatial-anchors/Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSpatialAnchorsAccounts_Update(t *testing.T) {
	// From example specification/mixedreality/resource-manager/Microsoft.MixedReality/preview/2021-03-01-preview/examples/spatial-anchors/Patch.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update spatial anchors account"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmixedreality.NewSpatialAnchorsAccountsClient("xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx", cred, &options)
	res, err := client.Update(ctx,
		"MyResourceGroup",
		"MyAccount",
		armmixedreality.SpatialAnchorsAccount{
			Location: to.Ptr("eastus2euap"),
			Tags: map[string]*string{
				"hero":    to.Ptr("romeo"),
				"heroine": to.Ptr("juliet"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mixedreality/resource-manager/Microsoft.MixedReality/preview/2021-03-01-preview/examples/spatial-anchors/Patch.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmixedreality.SpatialAnchorsAccount{
			Name:     to.Ptr("MyAccount"),
			Type:     to.Ptr("Microsoft.MixedReality/spatialAnchorsAccounts"),
			ID:       to.Ptr("/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/MyResourceGroup/providers/Microsoft.MixedReality/spatialAnchorsAccounts/MyAccount"),
			Location: to.Ptr("eastus2euap"),
			Tags: map[string]*string{
				"hero":    to.Ptr("romeo"),
				"heroine": to.Ptr("juliet"),
			},
			Properties: &armmixedreality.AccountProperties{
				AccountDomain: to.Ptr("mixedreality.azure.com"),
				AccountID:     to.Ptr("xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SpatialAnchorsAccount) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SpatialAnchorsAccount)
			t.Fatalf("Mock response is not equal to example response for example specification/mixedreality/resource-manager/Microsoft.MixedReality/preview/2021-03-01-preview/examples/spatial-anchors/Patch.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSpatialAnchorsAccounts_Create(t *testing.T) {
	// From example specification/mixedreality/resource-manager/Microsoft.MixedReality/preview/2021-03-01-preview/examples/spatial-anchors/Put.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create spatial anchor account"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmixedreality.NewSpatialAnchorsAccountsClient("xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx", cred, &options)
	res, err := client.Create(ctx,
		"MyResourceGroup",
		"MyAccount",
		armmixedreality.SpatialAnchorsAccount{
			Location: to.Ptr("eastus2euap"),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mixedreality/resource-manager/Microsoft.MixedReality/preview/2021-03-01-preview/examples/spatial-anchors/Put.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmixedreality.SpatialAnchorsAccount{
			Name:     to.Ptr("MyAccount"),
			Type:     to.Ptr("Microsoft.MixedReality/spatialAnchorsAccounts"),
			ID:       to.Ptr("/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/MyResourceGroup/providers/Microsoft.MixedReality/spatialAnchorsAccounts/MyAccount"),
			Location: to.Ptr("eastus2euap"),
			Tags:     map[string]*string{},
			Properties: &armmixedreality.AccountProperties{
				AccountDomain: to.Ptr("mixedreality.azure.com"),
				AccountID:     to.Ptr("xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.SpatialAnchorsAccount) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.SpatialAnchorsAccount)
			t.Fatalf("Mock response is not equal to example response for example specification/mixedreality/resource-manager/Microsoft.MixedReality/preview/2021-03-01-preview/examples/spatial-anchors/Put.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSpatialAnchorsAccounts_ListKeys(t *testing.T) {
	// From example specification/mixedreality/resource-manager/Microsoft.MixedReality/preview/2021-03-01-preview/examples/spatial-anchors/ListKeys.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List spatial anchor account key"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmixedreality.NewSpatialAnchorsAccountsClient("xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx", cred, &options)
	res, err := client.ListKeys(ctx,
		"MyResourceGroup",
		"MyAccount",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mixedreality/resource-manager/Microsoft.MixedReality/preview/2021-03-01-preview/examples/spatial-anchors/ListKeys.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmixedreality.AccountKeys{
			PrimaryKey:   to.Ptr("************"),
			SecondaryKey: to.Ptr("************"),
		}
		if !reflect.DeepEqual(exampleRes, res.AccountKeys) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AccountKeys)
			t.Fatalf("Mock response is not equal to example response for example specification/mixedreality/resource-manager/Microsoft.MixedReality/preview/2021-03-01-preview/examples/spatial-anchors/ListKeys.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSpatialAnchorsAccounts_RegenerateKeys(t *testing.T) {
	// From example specification/mixedreality/resource-manager/Microsoft.MixedReality/preview/2021-03-01-preview/examples/spatial-anchors/RegenerateKey.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Regenerate spatial anchors account keys"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmixedreality.NewSpatialAnchorsAccountsClient("xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx", cred, &options)
	res, err := client.RegenerateKeys(ctx,
		"MyResourceGroup",
		"MyAccount",
		armmixedreality.AccountKeyRegenerateRequest{
			Serial: to.Ptr(armmixedreality.SerialPrimary),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mixedreality/resource-manager/Microsoft.MixedReality/preview/2021-03-01-preview/examples/spatial-anchors/RegenerateKey.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmixedreality.AccountKeys{
			PrimaryKey:   to.Ptr("************"),
			SecondaryKey: to.Ptr("************"),
		}
		if !reflect.DeepEqual(exampleRes, res.AccountKeys) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AccountKeys)
			t.Fatalf("Mock response is not equal to example response for example specification/mixedreality/resource-manager/Microsoft.MixedReality/preview/2021-03-01-preview/examples/spatial-anchors/RegenerateKey.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRemoteRenderingAccounts_ListBySubscription(t *testing.T) {
	// From example specification/mixedreality/resource-manager/Microsoft.MixedReality/preview/2021-03-01-preview/examples/remote-rendering/GetBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List remote rendering accounts by subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmixedreality.NewRemoteRenderingAccountsClient("xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx", cred, &options)
	pager := client.ListBySubscription(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/mixedreality/resource-manager/Microsoft.MixedReality/preview/2021-03-01-preview/examples/remote-rendering/GetBySubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmixedreality.RemoteRenderingAccountPage{
			Value: []*armmixedreality.RemoteRenderingAccount{
				{
					Name:     to.Ptr("alpha"),
					Type:     to.Ptr("Microsoft.MixedReality/remoteRenderingAccounts"),
					ID:       to.Ptr("/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/MyResourceGroup/providers/Microsoft.MixedReality/remoteRenderingAccounts/alpha"),
					Location: to.Ptr("eastus2euap"),
					Tags:     map[string]*string{},
					Identity: &armmixedreality.Identity{
						Type: to.Ptr("SystemAssigned"),
					},
					Properties: &armmixedreality.AccountProperties{
						AccountDomain: to.Ptr("mixedreality.azure.com"),
						AccountID:     to.Ptr("xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"),
					},
				},
				{
					Name:     to.Ptr("omega"),
					Type:     to.Ptr("Microsoft.MixedReality/remoteRenderingAccounts"),
					ID:       to.Ptr("/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/MyResourceGroup/providers/Microsoft.MixedReality/remoteRenderingAccounts/omega"),
					Location: to.Ptr("eastus2euap"),
					Tags:     map[string]*string{},
					Identity: &armmixedreality.Identity{
						Type: to.Ptr("SystemAssigned"),
					},
					Properties: &armmixedreality.AccountProperties{
						AccountDomain: to.Ptr("mixedreality.azure.com"),
						AccountID:     to.Ptr("xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.RemoteRenderingAccountPage) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.RemoteRenderingAccountPage)
			t.Fatalf("Mock response is not equal to example response for example specification/mixedreality/resource-manager/Microsoft.MixedReality/preview/2021-03-01-preview/examples/remote-rendering/GetBySubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRemoteRenderingAccounts_ListByResourceGroup(t *testing.T) {
	// From example specification/mixedreality/resource-manager/Microsoft.MixedReality/preview/2021-03-01-preview/examples/remote-rendering/GetByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List remote rendering accounts by resource group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmixedreality.NewRemoteRenderingAccountsClient("xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx", cred, &options)
	pager := client.ListByResourceGroup("MyResourceGroup",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/mixedreality/resource-manager/Microsoft.MixedReality/preview/2021-03-01-preview/examples/remote-rendering/GetByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmixedreality.RemoteRenderingAccountPage{
			Value: []*armmixedreality.RemoteRenderingAccount{
				{
					Name:     to.Ptr("alpha"),
					Type:     to.Ptr("Microsoft.MixedReality/remoteRenderingAccounts"),
					ID:       to.Ptr("/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/MyResourceGroup/providers/Microsoft.MixedReality/remoteRenderingAccounts/alpha"),
					Location: to.Ptr("eastus2euap"),
					Tags:     map[string]*string{},
					Identity: &armmixedreality.Identity{
						Type: to.Ptr("SystemAssigned"),
					},
					Properties: &armmixedreality.AccountProperties{
						AccountDomain: to.Ptr("mixedreality.azure.com"),
						AccountID:     to.Ptr("xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"),
					},
				},
				{
					Name:     to.Ptr("omega"),
					Type:     to.Ptr("Microsoft.MixedReality/remoteRenderingAccounts"),
					ID:       to.Ptr("/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/MyResourceGroup/providers/Microsoft.MixedReality/remoteRenderingAccounts/omega"),
					Location: to.Ptr("eastus2euap"),
					Tags:     map[string]*string{},
					Identity: &armmixedreality.Identity{
						Type: to.Ptr("SystemAssigned"),
					},
					Properties: &armmixedreality.AccountProperties{
						AccountDomain: to.Ptr("mixedreality.azure.com"),
						AccountID:     to.Ptr("xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.RemoteRenderingAccountPage) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.RemoteRenderingAccountPage)
			t.Fatalf("Mock response is not equal to example response for example specification/mixedreality/resource-manager/Microsoft.MixedReality/preview/2021-03-01-preview/examples/remote-rendering/GetByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRemoteRenderingAccounts_Delete(t *testing.T) {
	// From example specification/mixedreality/resource-manager/Microsoft.MixedReality/preview/2021-03-01-preview/examples/remote-rendering/Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete remote rendering account"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmixedreality.NewRemoteRenderingAccountsClient("xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx", cred, &options)
	_, err := client.Delete(ctx,
		"MyResourceGroup",
		"MyAccount",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mixedreality/resource-manager/Microsoft.MixedReality/preview/2021-03-01-preview/examples/remote-rendering/Delete.json: %v", err)
	}
}

func TestRemoteRenderingAccounts_Get(t *testing.T) {
	// From example specification/mixedreality/resource-manager/Microsoft.MixedReality/preview/2021-03-01-preview/examples/remote-rendering/Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get remote rendering account"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmixedreality.NewRemoteRenderingAccountsClient("xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx", cred, &options)
	res, err := client.Get(ctx,
		"MyResourceGroup",
		"MyAccount",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mixedreality/resource-manager/Microsoft.MixedReality/preview/2021-03-01-preview/examples/remote-rendering/Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmixedreality.RemoteRenderingAccount{
			Name:     to.Ptr("MyAccount"),
			Type:     to.Ptr("Microsoft.MixedReality/remoteRenderingAccounts"),
			ID:       to.Ptr("/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/MyResourceGroup/providers/Microsoft.MixedReality/remoteRenderingAccounts/MyAccount"),
			Location: to.Ptr("eastus2euap"),
			Tags:     map[string]*string{},
			Identity: &armmixedreality.Identity{
				Type: to.Ptr("SystemAssigned"),
			},
			Properties: &armmixedreality.AccountProperties{
				AccountDomain: to.Ptr("mixedreality.azure.com"),
				AccountID:     to.Ptr("xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RemoteRenderingAccount) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RemoteRenderingAccount)
			t.Fatalf("Mock response is not equal to example response for example specification/mixedreality/resource-manager/Microsoft.MixedReality/preview/2021-03-01-preview/examples/remote-rendering/Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRemoteRenderingAccounts_Update(t *testing.T) {
	// From example specification/mixedreality/resource-manager/Microsoft.MixedReality/preview/2021-03-01-preview/examples/remote-rendering/Patch.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update remote rendering account"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmixedreality.NewRemoteRenderingAccountsClient("xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx", cred, &options)
	res, err := client.Update(ctx,
		"MyResourceGroup",
		"MyAccount",
		armmixedreality.RemoteRenderingAccount{
			Location: to.Ptr("eastus2euap"),
			Tags: map[string]*string{
				"hero":    to.Ptr("romeo"),
				"heroine": to.Ptr("juliet"),
			},
			Identity: &armmixedreality.Identity{
				Type: to.Ptr("SystemAssigned"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mixedreality/resource-manager/Microsoft.MixedReality/preview/2021-03-01-preview/examples/remote-rendering/Patch.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmixedreality.RemoteRenderingAccount{
			Name:     to.Ptr("MyAccount"),
			Type:     to.Ptr("Microsoft.MixedReality/remoteRenderingAccounts"),
			ID:       to.Ptr("/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/MyResourceGroup/providers/Microsoft.MixedReality/remoteRenderingAccounts/MyAccount"),
			Location: to.Ptr("eastus2euap"),
			Tags: map[string]*string{
				"hero":    to.Ptr("romeo"),
				"heroine": to.Ptr("juliet"),
			},
			Identity: &armmixedreality.Identity{
				Type: to.Ptr("SystemAssigned"),
			},
			Properties: &armmixedreality.AccountProperties{
				AccountDomain: to.Ptr("mixedreality.azure.com"),
				AccountID:     to.Ptr("xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RemoteRenderingAccount) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RemoteRenderingAccount)
			t.Fatalf("Mock response is not equal to example response for example specification/mixedreality/resource-manager/Microsoft.MixedReality/preview/2021-03-01-preview/examples/remote-rendering/Patch.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRemoteRenderingAccounts_Create(t *testing.T) {
	// From example specification/mixedreality/resource-manager/Microsoft.MixedReality/preview/2021-03-01-preview/examples/remote-rendering/Put.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create remote rendering account"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmixedreality.NewRemoteRenderingAccountsClient("xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx", cred, &options)
	res, err := client.Create(ctx,
		"MyResourceGroup",
		"MyAccount",
		armmixedreality.RemoteRenderingAccount{
			Location: to.Ptr("eastus2euap"),
			Identity: &armmixedreality.Identity{
				Type: to.Ptr("SystemAssigned"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mixedreality/resource-manager/Microsoft.MixedReality/preview/2021-03-01-preview/examples/remote-rendering/Put.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmixedreality.RemoteRenderingAccount{
			Name:     to.Ptr("MyAccount"),
			Type:     to.Ptr("Microsoft.MixedReality/remoteRenderingAccounts"),
			ID:       to.Ptr("/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/MyResourceGroup/providers/Microsoft.MixedReality/remoteRenderingAccounts/MyAccount"),
			Location: to.Ptr("eastus2euap"),
			Tags:     map[string]*string{},
			Identity: &armmixedreality.Identity{
				Type: to.Ptr("SystemAssigned"),
			},
			Properties: &armmixedreality.AccountProperties{
				AccountDomain: to.Ptr("mixedreality.azure.com"),
				AccountID:     to.Ptr("xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RemoteRenderingAccount) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RemoteRenderingAccount)
			t.Fatalf("Mock response is not equal to example response for example specification/mixedreality/resource-manager/Microsoft.MixedReality/preview/2021-03-01-preview/examples/remote-rendering/Put.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRemoteRenderingAccounts_ListKeys(t *testing.T) {
	// From example specification/mixedreality/resource-manager/Microsoft.MixedReality/preview/2021-03-01-preview/examples/remote-rendering/ListKeys.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List remote rendering account key"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmixedreality.NewRemoteRenderingAccountsClient("xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx", cred, &options)
	res, err := client.ListKeys(ctx,
		"MyResourceGroup",
		"MyAccount",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mixedreality/resource-manager/Microsoft.MixedReality/preview/2021-03-01-preview/examples/remote-rendering/ListKeys.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmixedreality.AccountKeys{
			PrimaryKey:   to.Ptr("<primaryKey>"),
			SecondaryKey: to.Ptr("<secondaryKey>"),
		}
		if !reflect.DeepEqual(exampleRes, res.AccountKeys) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AccountKeys)
			t.Fatalf("Mock response is not equal to example response for example specification/mixedreality/resource-manager/Microsoft.MixedReality/preview/2021-03-01-preview/examples/remote-rendering/ListKeys.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRemoteRenderingAccounts_RegenerateKeys(t *testing.T) {
	// From example specification/mixedreality/resource-manager/Microsoft.MixedReality/preview/2021-03-01-preview/examples/remote-rendering/RegenerateKey.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Regenerate remote rendering account keys"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmixedreality.NewRemoteRenderingAccountsClient("xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx", cred, &options)
	res, err := client.RegenerateKeys(ctx,
		"MyResourceGroup",
		"MyAccount",
		armmixedreality.AccountKeyRegenerateRequest{
			Serial: to.Ptr(armmixedreality.SerialPrimary),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mixedreality/resource-manager/Microsoft.MixedReality/preview/2021-03-01-preview/examples/remote-rendering/RegenerateKey.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmixedreality.AccountKeys{
			PrimaryKey:   to.Ptr("************"),
			SecondaryKey: to.Ptr("************"),
		}
		if !reflect.DeepEqual(exampleRes, res.AccountKeys) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AccountKeys)
			t.Fatalf("Mock response is not equal to example response for example specification/mixedreality/resource-manager/Microsoft.MixedReality/preview/2021-03-01-preview/examples/remote-rendering/RegenerateKey.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestObjectAnchorsAccounts_ListBySubscription(t *testing.T) {
	// From example specification/mixedreality/resource-manager/Microsoft.MixedReality/preview/2021-03-01-preview/examples/object-anchors/GetBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List object anchors accounts by subscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmixedreality.NewObjectAnchorsAccountsClient("xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx", cred, &options)
	pager := client.ListBySubscription(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/mixedreality/resource-manager/Microsoft.MixedReality/preview/2021-03-01-preview/examples/object-anchors/GetBySubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmixedreality.ObjectAnchorsAccountPage{
			Value: []*armmixedreality.ObjectAnchorsAccount{
				{
					Name:     to.Ptr("alpha"),
					Type:     to.Ptr("Microsoft.MixedReality/objectAnchorsAccounts"),
					ID:       to.Ptr("/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/MyResourceGroup/providers/Microsoft.MixedReality/objectAnchorsAccounts/alpha"),
					Location: to.Ptr("eastus2euap"),
					Tags:     map[string]*string{},
					Identity: &armmixedreality.ObjectAnchorsAccountIdentity{
						Type: to.Ptr("SystemAssigned"),
					},
					Properties: &armmixedreality.AccountProperties{
						AccountDomain: to.Ptr("mixedreality.azure.com"),
						AccountID:     to.Ptr("xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"),
					},
				},
				{
					Name:     to.Ptr("omega"),
					Type:     to.Ptr("Microsoft.MixedReality/objectAnchorsAccounts"),
					ID:       to.Ptr("/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/MyResourceGroup/providers/Microsoft.MixedReality/objectAnchorsAccounts/omega"),
					Location: to.Ptr("eastus2euap"),
					Tags:     map[string]*string{},
					Identity: &armmixedreality.ObjectAnchorsAccountIdentity{
						Type: to.Ptr("SystemAssigned"),
					},
					Properties: &armmixedreality.AccountProperties{
						AccountDomain: to.Ptr("mixedreality.azure.com"),
						AccountID:     to.Ptr("xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ObjectAnchorsAccountPage) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ObjectAnchorsAccountPage)
			t.Fatalf("Mock response is not equal to example response for example specification/mixedreality/resource-manager/Microsoft.MixedReality/preview/2021-03-01-preview/examples/object-anchors/GetBySubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestObjectAnchorsAccounts_ListByResourceGroup(t *testing.T) {
	// From example specification/mixedreality/resource-manager/Microsoft.MixedReality/preview/2021-03-01-preview/examples/object-anchors/GetByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List object anchors accounts by resource group"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmixedreality.NewObjectAnchorsAccountsClient("xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx", cred, &options)
	pager := client.ListByResourceGroup("MyResourceGroup",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/mixedreality/resource-manager/Microsoft.MixedReality/preview/2021-03-01-preview/examples/object-anchors/GetByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armmixedreality.ObjectAnchorsAccountPage{
			Value: []*armmixedreality.ObjectAnchorsAccount{
				{
					Name:     to.Ptr("alpha"),
					Type:     to.Ptr("Microsoft.MixedReality/objectAnchorsAccounts"),
					ID:       to.Ptr("/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/MyResourceGroup/providers/Microsoft.MixedReality/objectAnchorsAccounts/alpha"),
					Location: to.Ptr("eastus2euap"),
					Tags:     map[string]*string{},
					Identity: &armmixedreality.ObjectAnchorsAccountIdentity{
						Type: to.Ptr("SystemAssigned"),
					},
					Properties: &armmixedreality.AccountProperties{
						AccountDomain: to.Ptr("mixedreality.azure.com"),
						AccountID:     to.Ptr("xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"),
					},
				},
				{
					Name:     to.Ptr("omega"),
					Type:     to.Ptr("Microsoft.MixedReality/objectAnchorsAccounts"),
					ID:       to.Ptr("/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/MyResourceGroup/providers/Microsoft.MixedReality/objectAnchorsAccounts/omega"),
					Location: to.Ptr("eastus2euap"),
					Tags:     map[string]*string{},
					Identity: &armmixedreality.ObjectAnchorsAccountIdentity{
						Type: to.Ptr("SystemAssigned"),
					},
					Properties: &armmixedreality.AccountProperties{
						AccountDomain: to.Ptr("mixedreality.azure.com"),
						AccountID:     to.Ptr("xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ObjectAnchorsAccountPage) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ObjectAnchorsAccountPage)
			t.Fatalf("Mock response is not equal to example response for example specification/mixedreality/resource-manager/Microsoft.MixedReality/preview/2021-03-01-preview/examples/object-anchors/GetByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestObjectAnchorsAccounts_Delete(t *testing.T) {
	// From example specification/mixedreality/resource-manager/Microsoft.MixedReality/preview/2021-03-01-preview/examples/object-anchors/Delete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete object anchors account"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmixedreality.NewObjectAnchorsAccountsClient("xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx", cred, &options)
	_, err := client.Delete(ctx,
		"MyResourceGroup",
		"MyAccount",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mixedreality/resource-manager/Microsoft.MixedReality/preview/2021-03-01-preview/examples/object-anchors/Delete.json: %v", err)
	}
}

func TestObjectAnchorsAccounts_Get(t *testing.T) {
	// From example specification/mixedreality/resource-manager/Microsoft.MixedReality/preview/2021-03-01-preview/examples/object-anchors/Get.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get object anchors account"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmixedreality.NewObjectAnchorsAccountsClient("xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx", cred, &options)
	res, err := client.Get(ctx,
		"MyResourceGroup",
		"MyAccount",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mixedreality/resource-manager/Microsoft.MixedReality/preview/2021-03-01-preview/examples/object-anchors/Get.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmixedreality.ObjectAnchorsAccount{
			Name:     to.Ptr("MyAccount"),
			Type:     to.Ptr("Microsoft.MixedReality/objectAnchorsAccounts"),
			ID:       to.Ptr("/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/MyResourceGroup/providers/Microsoft.MixedReality/objectAnchorsAccounts/MyAccount"),
			Location: to.Ptr("eastus2euap"),
			Tags:     map[string]*string{},
			Identity: &armmixedreality.ObjectAnchorsAccountIdentity{
				Type: to.Ptr("SystemAssigned"),
			},
			Properties: &armmixedreality.AccountProperties{
				AccountDomain: to.Ptr("mixedreality.azure.com"),
				AccountID:     to.Ptr("xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ObjectAnchorsAccount) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ObjectAnchorsAccount)
			t.Fatalf("Mock response is not equal to example response for example specification/mixedreality/resource-manager/Microsoft.MixedReality/preview/2021-03-01-preview/examples/object-anchors/Get.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestObjectAnchorsAccounts_Update(t *testing.T) {
	// From example specification/mixedreality/resource-manager/Microsoft.MixedReality/preview/2021-03-01-preview/examples/object-anchors/Patch.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Update object anchors account"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmixedreality.NewObjectAnchorsAccountsClient("xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx", cred, &options)
	res, err := client.Update(ctx,
		"MyResourceGroup",
		"MyAccount",
		armmixedreality.ObjectAnchorsAccount{
			Location: to.Ptr("eastus2euap"),
			Tags: map[string]*string{
				"hero":    to.Ptr("romeo"),
				"heroine": to.Ptr("juliet"),
			},
			Identity: &armmixedreality.ObjectAnchorsAccountIdentity{
				Type: to.Ptr("SystemAssigned"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mixedreality/resource-manager/Microsoft.MixedReality/preview/2021-03-01-preview/examples/object-anchors/Patch.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmixedreality.ObjectAnchorsAccount{
			Name:     to.Ptr("MyAccount"),
			Type:     to.Ptr("Microsoft.MixedReality/objectAnchorsAccounts"),
			ID:       to.Ptr("/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/MyResourceGroup/providers/Microsoft.MixedReality/objectAnchorsAccounts/MyAccount"),
			Location: to.Ptr("eastus2euap"),
			Tags: map[string]*string{
				"hero":    to.Ptr("romeo"),
				"heroine": to.Ptr("juliet"),
			},
			Identity: &armmixedreality.ObjectAnchorsAccountIdentity{
				Type: to.Ptr("SystemAssigned"),
			},
			Properties: &armmixedreality.AccountProperties{
				AccountDomain: to.Ptr("mixedreality.azure.com"),
				AccountID:     to.Ptr("xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ObjectAnchorsAccount) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ObjectAnchorsAccount)
			t.Fatalf("Mock response is not equal to example response for example specification/mixedreality/resource-manager/Microsoft.MixedReality/preview/2021-03-01-preview/examples/object-anchors/Patch.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestObjectAnchorsAccounts_Create(t *testing.T) {
	// From example specification/mixedreality/resource-manager/Microsoft.MixedReality/preview/2021-03-01-preview/examples/object-anchors/Put.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Create object anchors account"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmixedreality.NewObjectAnchorsAccountsClient("xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx", cred, &options)
	res, err := client.Create(ctx,
		"MyResourceGroup",
		"MyAccount",
		armmixedreality.ObjectAnchorsAccount{
			Location: to.Ptr("eastus2euap"),
			Identity: &armmixedreality.ObjectAnchorsAccountIdentity{
				Type: to.Ptr("SystemAssigned"),
			},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mixedreality/resource-manager/Microsoft.MixedReality/preview/2021-03-01-preview/examples/object-anchors/Put.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmixedreality.ObjectAnchorsAccount{
			Name:     to.Ptr("MyAccount"),
			Type:     to.Ptr("Microsoft.MixedReality/objectAnchorsAccounts"),
			ID:       to.Ptr("/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/MyResourceGroup/providers/Microsoft.MixedReality/objectAnchorsAccounts/MyAccount"),
			Location: to.Ptr("eastus2euap"),
			Tags:     map[string]*string{},
			Identity: &armmixedreality.ObjectAnchorsAccountIdentity{
				Type: to.Ptr("SystemAssigned"),
			},
			Properties: &armmixedreality.AccountProperties{
				AccountDomain: to.Ptr("mixedreality.azure.com"),
				AccountID:     to.Ptr("xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ObjectAnchorsAccount) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ObjectAnchorsAccount)
			t.Fatalf("Mock response is not equal to example response for example specification/mixedreality/resource-manager/Microsoft.MixedReality/preview/2021-03-01-preview/examples/object-anchors/Put.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestObjectAnchorsAccounts_ListKeys(t *testing.T) {
	// From example specification/mixedreality/resource-manager/Microsoft.MixedReality/preview/2021-03-01-preview/examples/object-anchors/ListKeys.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List object anchors account key"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmixedreality.NewObjectAnchorsAccountsClient("xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx", cred, &options)
	res, err := client.ListKeys(ctx,
		"MyResourceGroup",
		"MyAccount",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mixedreality/resource-manager/Microsoft.MixedReality/preview/2021-03-01-preview/examples/object-anchors/ListKeys.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmixedreality.AccountKeys{
			PrimaryKey:   to.Ptr("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"),
			SecondaryKey: to.Ptr("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"),
		}
		if !reflect.DeepEqual(exampleRes, res.AccountKeys) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AccountKeys)
			t.Fatalf("Mock response is not equal to example response for example specification/mixedreality/resource-manager/Microsoft.MixedReality/preview/2021-03-01-preview/examples/object-anchors/ListKeys.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestObjectAnchorsAccounts_RegenerateKeys(t *testing.T) {
	// From example specification/mixedreality/resource-manager/Microsoft.MixedReality/preview/2021-03-01-preview/examples/object-anchors/RegenerateKey.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Regenerate object anchors account keys"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armmixedreality.NewObjectAnchorsAccountsClient("xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx", cred, &options)
	res, err := client.RegenerateKeys(ctx,
		"MyResourceGroup",
		"MyAccount",
		armmixedreality.AccountKeyRegenerateRequest{
			Serial: to.Ptr(armmixedreality.SerialPrimary),
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/mixedreality/resource-manager/Microsoft.MixedReality/preview/2021-03-01-preview/examples/object-anchors/RegenerateKey.json: %v", err)
	}
	// Response check
	{
		exampleRes := armmixedreality.AccountKeys{
			PrimaryKey:   to.Ptr("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"),
			SecondaryKey: to.Ptr("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"),
		}
		if !reflect.DeepEqual(exampleRes, res.AccountKeys) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.AccountKeys)
			t.Fatalf("Mock response is not equal to example response for example specification/mixedreality/resource-manager/Microsoft.MixedReality/preview/2021-03-01-preview/examples/object-anchors/RegenerateKey.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
