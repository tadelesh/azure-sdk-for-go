//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armmixedreality

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"golang.org/x/net/http2"
)

var (
	ctx            context.Context
	subscriptionId string
	cred           azcore.TokenCredential
	err            error
	con            *arm.Connection
	mockHost       string
)

func TestOperations_List(t *testing.T) {
	// From example List available operations
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewOperationsClient(con)
	pager := client.List(&OperationsListOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
	}
}

func Test_CheckNameAvailabilityLocal(t *testing.T) {
	// From example CheckLocalNameAvailability
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewMixedRealityClientClient(con,
		"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx")
	_, err := client.CheckNameAvailabilityLocal(ctx,
		"eastus2euap",
		CheckNameAvailabilityRequest{
			Name: to.StringPtr("MyAccount"),
			Type: to.StringPtr("Microsoft.MixedReality/spatialAnchorsAccounts"),
		},
		&MixedRealityClientCheckNameAvailabilityLocalOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestSpatialAnchorsAccounts_ListBySubscription(t *testing.T) {
	// From example List spatial anchors accounts by subscription
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSpatialAnchorsAccountsClient(con,
		"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx")
	pager := client.ListBySubscription(&SpatialAnchorsAccountsListBySubscriptionOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("SpatialAnchorsAccount.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("SpatialAnchorsAccount.ID should not be nil!")
			}
		}
	}
}

func TestSpatialAnchorsAccounts_ListByResourceGroup(t *testing.T) {
	// From example List spatial anchor accounts by resource group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSpatialAnchorsAccountsClient(con,
		"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx")
	pager := client.ListByResourceGroup("MyResourceGroup",
		&SpatialAnchorsAccountsListByResourceGroupOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("SpatialAnchorsAccount.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("SpatialAnchorsAccount.ID should not be nil!")
			}
		}
	}
}

func TestSpatialAnchorsAccounts_Delete(t *testing.T) {
	// From example Delete spatial anchors account
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSpatialAnchorsAccountsClient(con,
		"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx")
	_, err := client.Delete(ctx,
		"MyResourceGroup",
		"MyAccount",
		&SpatialAnchorsAccountsDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestSpatialAnchorsAccounts_Get(t *testing.T) {
	// From example Get spatial anchors account
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSpatialAnchorsAccountsClient(con,
		"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx")
	res, err := client.Get(ctx,
		"MyResourceGroup",
		"MyAccount",
		&SpatialAnchorsAccountsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.SpatialAnchorsAccount.ID == nil {
		t.Fatal("SpatialAnchorsAccount.ID should not be nil!")
	}
}

func TestSpatialAnchorsAccounts_Update(t *testing.T) {
	// From example Update spatial anchors account
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSpatialAnchorsAccountsClient(con,
		"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx")
	res, err := client.Update(ctx,
		"MyResourceGroup",
		"MyAccount",
		SpatialAnchorsAccount{
			TrackedResource: TrackedResource{
				Location: to.StringPtr("eastus2euap"),
				Tags: map[string]*string{
					"hero":    to.StringPtr("romeo"),
					"heroine": to.StringPtr("juliet"),
				},
			},
		},
		&SpatialAnchorsAccountsUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.SpatialAnchorsAccount.ID == nil {
		t.Fatal("SpatialAnchorsAccount.ID should not be nil!")
	}
}

func TestSpatialAnchorsAccounts_Create(t *testing.T) {
	// From example Create spatial anchor account
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSpatialAnchorsAccountsClient(con,
		"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx")
	res, err := client.Create(ctx,
		"MyResourceGroup",
		"MyAccount",
		SpatialAnchorsAccount{
			TrackedResource: TrackedResource{
				Location: to.StringPtr("eastus2euap"),
			},
		},
		&SpatialAnchorsAccountsCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.SpatialAnchorsAccount.ID == nil {
		t.Fatal("SpatialAnchorsAccount.ID should not be nil!")
	}
}

func TestSpatialAnchorsAccounts_ListKeys(t *testing.T) {
	// From example List spatial anchor account key
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSpatialAnchorsAccountsClient(con,
		"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx")
	_, err := client.ListKeys(ctx,
		"MyResourceGroup",
		"MyAccount",
		&SpatialAnchorsAccountsListKeysOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestSpatialAnchorsAccounts_RegenerateKeys(t *testing.T) {
	// From example Regenerate spatial anchors account keys
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewSpatialAnchorsAccountsClient(con,
		"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx")
	_, err := client.RegenerateKeys(ctx,
		"MyResourceGroup",
		"MyAccount",
		AccountKeyRegenerateRequest{
			Serial: SerialPrimary.ToPtr(),
		},
		&SpatialAnchorsAccountsRegenerateKeysOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestRemoteRenderingAccounts_ListBySubscription(t *testing.T) {
	// From example List remote rendering accounts by subscription
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRemoteRenderingAccountsClient(con,
		"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx")
	pager := client.ListBySubscription(&RemoteRenderingAccountsListBySubscriptionOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("RemoteRenderingAccount.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("RemoteRenderingAccount.ID should not be nil!")
			}
		}
	}
}

func TestRemoteRenderingAccounts_ListByResourceGroup(t *testing.T) {
	// From example List remote rendering accounts by resource group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRemoteRenderingAccountsClient(con,
		"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx")
	pager := client.ListByResourceGroup("MyResourceGroup",
		&RemoteRenderingAccountsListByResourceGroupOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("RemoteRenderingAccount.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("RemoteRenderingAccount.ID should not be nil!")
			}
		}
	}
}

func TestRemoteRenderingAccounts_Delete(t *testing.T) {
	// From example Delete remote rendering account
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRemoteRenderingAccountsClient(con,
		"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx")
	_, err := client.Delete(ctx,
		"MyResourceGroup",
		"MyAccount",
		&RemoteRenderingAccountsDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestRemoteRenderingAccounts_Get(t *testing.T) {
	// From example Get remote rendering account
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRemoteRenderingAccountsClient(con,
		"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx")
	res, err := client.Get(ctx,
		"MyResourceGroup",
		"MyAccount",
		&RemoteRenderingAccountsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.RemoteRenderingAccount.ID == nil {
		t.Fatal("RemoteRenderingAccount.ID should not be nil!")
	}
}

func TestRemoteRenderingAccounts_Update(t *testing.T) {
	// From example Update remote rendering account
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRemoteRenderingAccountsClient(con,
		"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx")
	res, err := client.Update(ctx,
		"MyResourceGroup",
		"MyAccount",
		RemoteRenderingAccount{
			TrackedResource: TrackedResource{
				Location: to.StringPtr("eastus2euap"),
				Tags: map[string]*string{
					"hero":    to.StringPtr("romeo"),
					"heroine": to.StringPtr("juliet"),
				},
			},
			Identity: &Identity{
				Type: to.StringPtr("SystemAssigned"),
			},
		},
		&RemoteRenderingAccountsUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.RemoteRenderingAccount.ID == nil {
		t.Fatal("RemoteRenderingAccount.ID should not be nil!")
	}
}

func TestRemoteRenderingAccounts_Create(t *testing.T) {
	// From example Create remote rendering account
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRemoteRenderingAccountsClient(con,
		"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx")
	res, err := client.Create(ctx,
		"MyResourceGroup",
		"MyAccount",
		RemoteRenderingAccount{
			TrackedResource: TrackedResource{
				Location: to.StringPtr("eastus2euap"),
			},
			Identity: &Identity{
				Type: to.StringPtr("SystemAssigned"),
			},
		},
		&RemoteRenderingAccountsCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.RemoteRenderingAccount.ID == nil {
		t.Fatal("RemoteRenderingAccount.ID should not be nil!")
	}
}

func TestRemoteRenderingAccounts_ListKeys(t *testing.T) {
	// From example List remote rendering account key
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRemoteRenderingAccountsClient(con,
		"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx")
	_, err := client.ListKeys(ctx,
		"MyResourceGroup",
		"MyAccount",
		&RemoteRenderingAccountsListKeysOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestRemoteRenderingAccounts_RegenerateKeys(t *testing.T) {
	// From example Regenerate remote rendering account keys
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewRemoteRenderingAccountsClient(con,
		"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx")
	_, err := client.RegenerateKeys(ctx,
		"MyResourceGroup",
		"MyAccount",
		AccountKeyRegenerateRequest{
			Serial: SerialPrimary.ToPtr(),
		},
		&RemoteRenderingAccountsRegenerateKeysOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestObjectAnchorsAccounts_ListBySubscription(t *testing.T) {
	// From example List object anchors accounts by subscription
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewObjectAnchorsAccountsClient(con,
		"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx")
	pager := client.ListBySubscription(&ObjectAnchorsAccountsListBySubscriptionOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ObjectAnchorsAccount.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ObjectAnchorsAccount.ID should not be nil!")
			}
		}
	}
}

func TestObjectAnchorsAccounts_ListByResourceGroup(t *testing.T) {
	// From example List object anchors accounts by resource group
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewObjectAnchorsAccountsClient(con,
		"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx")
	pager := client.ListByResourceGroup("MyResourceGroup",
		&ObjectAnchorsAccountsListByResourceGroupOptions{})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			t.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			fmt.Printf("ObjectAnchorsAccount.ID: %s\n", *v.ID)
			if v.ID == nil {
				t.Fatal("ObjectAnchorsAccount.ID should not be nil!")
			}
		}
	}
}

func TestObjectAnchorsAccounts_Delete(t *testing.T) {
	// From example Delete object anchors account
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewObjectAnchorsAccountsClient(con,
		"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx")
	_, err := client.Delete(ctx,
		"MyResourceGroup",
		"MyAccount",
		&ObjectAnchorsAccountsDeleteOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestObjectAnchorsAccounts_Get(t *testing.T) {
	// From example Get object anchors account
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewObjectAnchorsAccountsClient(con,
		"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx")
	res, err := client.Get(ctx,
		"MyResourceGroup",
		"MyAccount",
		&ObjectAnchorsAccountsGetOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ObjectAnchorsAccount.ID == nil {
		t.Fatal("ObjectAnchorsAccount.ID should not be nil!")
	}
}

func TestObjectAnchorsAccounts_Update(t *testing.T) {
	// From example Update object anchors account
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewObjectAnchorsAccountsClient(con,
		"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx")
	res, err := client.Update(ctx,
		"MyResourceGroup",
		"MyAccount",
		ObjectAnchorsAccount{
			TrackedResource: TrackedResource{
				Location: to.StringPtr("eastus2euap"),
				Tags: map[string]*string{
					"hero":    to.StringPtr("romeo"),
					"heroine": to.StringPtr("juliet"),
				},
			},
			Identity: &ObjectAnchorsAccountIdentity{
				Identity: Identity{
					Type: to.StringPtr("SystemAssigned"),
				},
			},
		},
		&ObjectAnchorsAccountsUpdateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ObjectAnchorsAccount.ID == nil {
		t.Fatal("ObjectAnchorsAccount.ID should not be nil!")
	}
}

func TestObjectAnchorsAccounts_Create(t *testing.T) {
	// From example Create object anchors account
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewObjectAnchorsAccountsClient(con,
		"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx")
	res, err := client.Create(ctx,
		"MyResourceGroup",
		"MyAccount",
		ObjectAnchorsAccount{
			TrackedResource: TrackedResource{
				Location: to.StringPtr("eastus2euap"),
			},
			Identity: &ObjectAnchorsAccountIdentity{
				Identity: Identity{
					Type: to.StringPtr("SystemAssigned"),
				},
			},
		},
		&ObjectAnchorsAccountsCreateOptions{})
	if err != nil {
		t.Fatal(err)
	}
	if res.ObjectAnchorsAccount.ID == nil {
		t.Fatal("ObjectAnchorsAccount.ID should not be nil!")
	}
}

func TestObjectAnchorsAccounts_ListKeys(t *testing.T) {
	// From example List object anchors account key
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewObjectAnchorsAccountsClient(con,
		"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx")
	_, err := client.ListKeys(ctx,
		"MyResourceGroup",
		"MyAccount",
		&ObjectAnchorsAccountsListKeysOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

func TestObjectAnchorsAccounts_RegenerateKeys(t *testing.T) {
	// From example Regenerate object anchors account keys
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := NewObjectAnchorsAccountsClient(con,
		"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx")
	_, err := client.RegenerateKeys(ctx,
		"MyResourceGroup",
		"MyAccount",
		AccountKeyRegenerateRequest{
			Serial: SerialPrimary.ToPtr(),
		},
		&ObjectAnchorsAccountsRegenerateKeysOptions{})
	if err != nil {
		t.Fatal(err)
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	subscriptionId = getEnv("SUBSCRIPTION_ID", "00000000-0000-0000-0000-000000000000")
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}
	cred, err = azidentity.NewEnvironmentCredential(&azidentity.EnvironmentCredentialOptions{AuthorityHost: mockHost, HTTPClient: client})
	if err != nil {
		panic(err)
	}

	con = arm.NewConnection(mockHost, cred, &arm.ConnectionOptions{
		Logging: policy.LogOptions{
			IncludeBody: true,
		},
		HTTPClient: client,
	})
}

func tearDown() {

}
