//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armstorSimple1200Series

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// FileServersClient contains the methods for the FileServers group.
// Don't use this type directly, use NewFileServersClient() instead.
type FileServersClient struct {
	host           string
	subscriptionID string
	pl             runtime.Pipeline
}

// NewFileServersClient creates a new instance of FileServersClient with the specified values.
// subscriptionID - The subscription id
// credential - used to authorize requests. Usually a credential from azidentity.
// options - pass nil to accept the default values.
func NewFileServersClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) *FileServersClient {
	if options == nil {
		options = &arm.ClientOptions{}
	}
	ep := options.Endpoint
	if len(ep) == 0 {
		ep = arm.AzurePublicCloud
	}
	client := &FileServersClient{
		subscriptionID: subscriptionID,
		host:           string(ep),
		pl:             armruntime.NewPipeline(moduleName, moduleVersion, credential, runtime.PipelineOptions{}, options),
	}
	return client
}

// BeginBackupNow - Backup the file server now.
// If the operation fails it returns an *azcore.ResponseError type.
// deviceName - The device name.
// fileServerName - The file server name.
// resourceGroupName - The resource group name
// managerName - The manager name
// options - FileServersClientBeginBackupNowOptions contains the optional parameters for the FileServersClient.BeginBackupNow
// method.
func (client *FileServersClient) BeginBackupNow(ctx context.Context, deviceName string, fileServerName string, resourceGroupName string, managerName string, options *FileServersClientBeginBackupNowOptions) (FileServersClientBackupNowPollerResponse, error) {
	resp, err := client.backupNow(ctx, deviceName, fileServerName, resourceGroupName, managerName, options)
	if err != nil {
		return FileServersClientBackupNowPollerResponse{}, err
	}
	result := FileServersClientBackupNowPollerResponse{}
	pt, err := armruntime.NewPoller("FileServersClient.BackupNow", "", resp, client.pl)
	if err != nil {
		return FileServersClientBackupNowPollerResponse{}, err
	}
	result.Poller = &FileServersClientBackupNowPoller{
		pt: pt,
	}
	return result, nil
}

// BackupNow - Backup the file server now.
// If the operation fails it returns an *azcore.ResponseError type.
func (client *FileServersClient) backupNow(ctx context.Context, deviceName string, fileServerName string, resourceGroupName string, managerName string, options *FileServersClientBeginBackupNowOptions) (*http.Response, error) {
	req, err := client.backupNowCreateRequest(ctx, deviceName, fileServerName, resourceGroupName, managerName, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusAccepted, http.StatusNoContent) {
		return nil, runtime.NewResponseError(resp)
	}
	return resp, nil
}

// backupNowCreateRequest creates the BackupNow request.
func (client *FileServersClient) backupNowCreateRequest(ctx context.Context, deviceName string, fileServerName string, resourceGroupName string, managerName string, options *FileServersClientBeginBackupNowOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/fileservers/{fileServerName}/backup"
	if deviceName == "" {
		return nil, errors.New("parameter deviceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{deviceName}", url.PathEscape(deviceName))
	if fileServerName == "" {
		return nil, errors.New("parameter fileServerName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{fileServerName}", url.PathEscape(fileServerName))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if managerName == "" {
		return nil, errors.New("parameter managerName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{managerName}", url.PathEscape(managerName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2016-10-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// BeginCreateOrUpdate - Creates or updates the file server.
// If the operation fails it returns an *azcore.ResponseError type.
// deviceName - The device name.
// fileServerName - The file server name.
// resourceGroupName - The resource group name
// managerName - The manager name
// fileServer - The file server.
// options - FileServersClientBeginCreateOrUpdateOptions contains the optional parameters for the FileServersClient.BeginCreateOrUpdate
// method.
func (client *FileServersClient) BeginCreateOrUpdate(ctx context.Context, deviceName string, fileServerName string, resourceGroupName string, managerName string, fileServer FileServer, options *FileServersClientBeginCreateOrUpdateOptions) (FileServersClientCreateOrUpdatePollerResponse, error) {
	resp, err := client.createOrUpdate(ctx, deviceName, fileServerName, resourceGroupName, managerName, fileServer, options)
	if err != nil {
		return FileServersClientCreateOrUpdatePollerResponse{}, err
	}
	result := FileServersClientCreateOrUpdatePollerResponse{}
	pt, err := armruntime.NewPoller("FileServersClient.CreateOrUpdate", "", resp, client.pl)
	if err != nil {
		return FileServersClientCreateOrUpdatePollerResponse{}, err
	}
	result.Poller = &FileServersClientCreateOrUpdatePoller{
		pt: pt,
	}
	return result, nil
}

// CreateOrUpdate - Creates or updates the file server.
// If the operation fails it returns an *azcore.ResponseError type.
func (client *FileServersClient) createOrUpdate(ctx context.Context, deviceName string, fileServerName string, resourceGroupName string, managerName string, fileServer FileServer, options *FileServersClientBeginCreateOrUpdateOptions) (*http.Response, error) {
	req, err := client.createOrUpdateCreateRequest(ctx, deviceName, fileServerName, resourceGroupName, managerName, fileServer, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusAccepted) {
		return nil, runtime.NewResponseError(resp)
	}
	return resp, nil
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *FileServersClient) createOrUpdateCreateRequest(ctx context.Context, deviceName string, fileServerName string, resourceGroupName string, managerName string, fileServer FileServer, options *FileServersClientBeginCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/fileservers/{fileServerName}"
	if deviceName == "" {
		return nil, errors.New("parameter deviceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{deviceName}", url.PathEscape(deviceName))
	if fileServerName == "" {
		return nil, errors.New("parameter fileServerName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{fileServerName}", url.PathEscape(fileServerName))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if managerName == "" {
		return nil, errors.New("parameter managerName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{managerName}", url.PathEscape(managerName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2016-10-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, fileServer)
}

// BeginDelete - Deletes the file server.
// If the operation fails it returns an *azcore.ResponseError type.
// deviceName - The device name.
// fileServerName - The file server name.
// resourceGroupName - The resource group name
// managerName - The manager name
// options - FileServersClientBeginDeleteOptions contains the optional parameters for the FileServersClient.BeginDelete method.
func (client *FileServersClient) BeginDelete(ctx context.Context, deviceName string, fileServerName string, resourceGroupName string, managerName string, options *FileServersClientBeginDeleteOptions) (FileServersClientDeletePollerResponse, error) {
	resp, err := client.deleteOperation(ctx, deviceName, fileServerName, resourceGroupName, managerName, options)
	if err != nil {
		return FileServersClientDeletePollerResponse{}, err
	}
	result := FileServersClientDeletePollerResponse{}
	pt, err := armruntime.NewPoller("FileServersClient.Delete", "", resp, client.pl)
	if err != nil {
		return FileServersClientDeletePollerResponse{}, err
	}
	result.Poller = &FileServersClientDeletePoller{
		pt: pt,
	}
	return result, nil
}

// Delete - Deletes the file server.
// If the operation fails it returns an *azcore.ResponseError type.
func (client *FileServersClient) deleteOperation(ctx context.Context, deviceName string, fileServerName string, resourceGroupName string, managerName string, options *FileServersClientBeginDeleteOptions) (*http.Response, error) {
	req, err := client.deleteCreateRequest(ctx, deviceName, fileServerName, resourceGroupName, managerName, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusAccepted, http.StatusNoContent) {
		return nil, runtime.NewResponseError(resp)
	}
	return resp, nil
}

// deleteCreateRequest creates the Delete request.
func (client *FileServersClient) deleteCreateRequest(ctx context.Context, deviceName string, fileServerName string, resourceGroupName string, managerName string, options *FileServersClientBeginDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/fileservers/{fileServerName}"
	if deviceName == "" {
		return nil, errors.New("parameter deviceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{deviceName}", url.PathEscape(deviceName))
	if fileServerName == "" {
		return nil, errors.New("parameter fileServerName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{fileServerName}", url.PathEscape(fileServerName))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if managerName == "" {
		return nil, errors.New("parameter managerName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{managerName}", url.PathEscape(managerName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2016-10-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// Get - Returns the properties of the specified file server name.
// If the operation fails it returns an *azcore.ResponseError type.
// deviceName - The device name.
// fileServerName - The file server name.
// resourceGroupName - The resource group name
// managerName - The manager name
// options - FileServersClientGetOptions contains the optional parameters for the FileServersClient.Get method.
func (client *FileServersClient) Get(ctx context.Context, deviceName string, fileServerName string, resourceGroupName string, managerName string, options *FileServersClientGetOptions) (FileServersClientGetResponse, error) {
	req, err := client.getCreateRequest(ctx, deviceName, fileServerName, resourceGroupName, managerName, options)
	if err != nil {
		return FileServersClientGetResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return FileServersClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return FileServersClientGetResponse{}, runtime.NewResponseError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *FileServersClient) getCreateRequest(ctx context.Context, deviceName string, fileServerName string, resourceGroupName string, managerName string, options *FileServersClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/fileservers/{fileServerName}"
	if deviceName == "" {
		return nil, errors.New("parameter deviceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{deviceName}", url.PathEscape(deviceName))
	if fileServerName == "" {
		return nil, errors.New("parameter fileServerName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{fileServerName}", url.PathEscape(fileServerName))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if managerName == "" {
		return nil, errors.New("parameter managerName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{managerName}", url.PathEscape(managerName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2016-10-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *FileServersClient) getHandleResponse(resp *http.Response) (FileServersClientGetResponse, error) {
	result := FileServersClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.FileServer); err != nil {
		return FileServersClientGetResponse{}, err
	}
	return result, nil
}

// ListByDevice - Retrieves all the file servers in a device.
// If the operation fails it returns an *azcore.ResponseError type.
// deviceName - The device name.
// resourceGroupName - The resource group name
// managerName - The manager name
// options - FileServersClientListByDeviceOptions contains the optional parameters for the FileServersClient.ListByDevice
// method.
func (client *FileServersClient) ListByDevice(deviceName string, resourceGroupName string, managerName string, options *FileServersClientListByDeviceOptions) *FileServersClientListByDevicePager {
	return &FileServersClientListByDevicePager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.listByDeviceCreateRequest(ctx, deviceName, resourceGroupName, managerName, options)
		},
	}
}

// listByDeviceCreateRequest creates the ListByDevice request.
func (client *FileServersClient) listByDeviceCreateRequest(ctx context.Context, deviceName string, resourceGroupName string, managerName string, options *FileServersClientListByDeviceOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/fileservers"
	if deviceName == "" {
		return nil, errors.New("parameter deviceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{deviceName}", url.PathEscape(deviceName))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if managerName == "" {
		return nil, errors.New("parameter managerName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{managerName}", url.PathEscape(managerName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2016-10-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listByDeviceHandleResponse handles the ListByDevice response.
func (client *FileServersClient) listByDeviceHandleResponse(resp *http.Response) (FileServersClientListByDeviceResponse, error) {
	result := FileServersClientListByDeviceResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.FileServerList); err != nil {
		return FileServersClientListByDeviceResponse{}, err
	}
	return result, nil
}

// ListByManager - Retrieves all the file servers in a manager.
// If the operation fails it returns an *azcore.ResponseError type.
// resourceGroupName - The resource group name
// managerName - The manager name
// options - FileServersClientListByManagerOptions contains the optional parameters for the FileServersClient.ListByManager
// method.
func (client *FileServersClient) ListByManager(resourceGroupName string, managerName string, options *FileServersClientListByManagerOptions) *FileServersClientListByManagerPager {
	return &FileServersClientListByManagerPager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.listByManagerCreateRequest(ctx, resourceGroupName, managerName, options)
		},
	}
}

// listByManagerCreateRequest creates the ListByManager request.
func (client *FileServersClient) listByManagerCreateRequest(ctx context.Context, resourceGroupName string, managerName string, options *FileServersClientListByManagerOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/fileservers"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if managerName == "" {
		return nil, errors.New("parameter managerName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{managerName}", url.PathEscape(managerName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2016-10-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listByManagerHandleResponse handles the ListByManager response.
func (client *FileServersClient) listByManagerHandleResponse(resp *http.Response) (FileServersClientListByManagerResponse, error) {
	result := FileServersClientListByManagerResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.FileServerList); err != nil {
		return FileServersClientListByManagerResponse{}, err
	}
	return result, nil
}

// ListMetricDefinition - Retrieves metric definitions of all metrics aggregated at the file server.
// If the operation fails it returns an *azcore.ResponseError type.
// deviceName - The name of the device.
// fileServerName - The name of the file server.
// resourceGroupName - The resource group name
// managerName - The manager name
// options - FileServersClientListMetricDefinitionOptions contains the optional parameters for the FileServersClient.ListMetricDefinition
// method.
func (client *FileServersClient) ListMetricDefinition(deviceName string, fileServerName string, resourceGroupName string, managerName string, options *FileServersClientListMetricDefinitionOptions) *FileServersClientListMetricDefinitionPager {
	return &FileServersClientListMetricDefinitionPager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.listMetricDefinitionCreateRequest(ctx, deviceName, fileServerName, resourceGroupName, managerName, options)
		},
	}
}

// listMetricDefinitionCreateRequest creates the ListMetricDefinition request.
func (client *FileServersClient) listMetricDefinitionCreateRequest(ctx context.Context, deviceName string, fileServerName string, resourceGroupName string, managerName string, options *FileServersClientListMetricDefinitionOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/fileservers/{fileServerName}/metricsDefinitions"
	if deviceName == "" {
		return nil, errors.New("parameter deviceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{deviceName}", url.PathEscape(deviceName))
	if fileServerName == "" {
		return nil, errors.New("parameter fileServerName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{fileServerName}", url.PathEscape(fileServerName))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if managerName == "" {
		return nil, errors.New("parameter managerName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{managerName}", url.PathEscape(managerName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2016-10-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listMetricDefinitionHandleResponse handles the ListMetricDefinition response.
func (client *FileServersClient) listMetricDefinitionHandleResponse(resp *http.Response) (FileServersClientListMetricDefinitionResponse, error) {
	result := FileServersClientListMetricDefinitionResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.MetricDefinitionList); err != nil {
		return FileServersClientListMetricDefinitionResponse{}, err
	}
	return result, nil
}

// ListMetrics - Gets the file server metrics.
// If the operation fails it returns an *azcore.ResponseError type.
// deviceName - The name of the device.
// fileServerName - The name of the file server name.
// resourceGroupName - The resource group name
// managerName - The manager name
// options - FileServersClientListMetricsOptions contains the optional parameters for the FileServersClient.ListMetrics method.
func (client *FileServersClient) ListMetrics(deviceName string, fileServerName string, resourceGroupName string, managerName string, options *FileServersClientListMetricsOptions) *FileServersClientListMetricsPager {
	return &FileServersClientListMetricsPager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.listMetricsCreateRequest(ctx, deviceName, fileServerName, resourceGroupName, managerName, options)
		},
	}
}

// listMetricsCreateRequest creates the ListMetrics request.
func (client *FileServersClient) listMetricsCreateRequest(ctx context.Context, deviceName string, fileServerName string, resourceGroupName string, managerName string, options *FileServersClientListMetricsOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/fileservers/{fileServerName}/metrics"
	if deviceName == "" {
		return nil, errors.New("parameter deviceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{deviceName}", url.PathEscape(deviceName))
	if fileServerName == "" {
		return nil, errors.New("parameter fileServerName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{fileServerName}", url.PathEscape(fileServerName))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if managerName == "" {
		return nil, errors.New("parameter managerName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{managerName}", url.PathEscape(managerName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2016-10-01")
	if options != nil && options.Filter != nil {
		reqQP.Set("$filter", *options.Filter)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listMetricsHandleResponse handles the ListMetrics response.
func (client *FileServersClient) listMetricsHandleResponse(resp *http.Response) (FileServersClientListMetricsResponse, error) {
	result := FileServersClientListMetricsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.MetricList); err != nil {
		return FileServersClientListMetricsResponse{}, err
	}
	return result, nil
}
