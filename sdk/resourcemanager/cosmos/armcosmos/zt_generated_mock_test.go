//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armcosmos_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/cosmos/armcosmos"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestDatabaseAccounts_Get(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBDatabaseAccountGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBDatabaseAccountGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewDatabaseAccountsClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"ddb1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBDatabaseAccountGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcosmos.DatabaseAccountGetResults{
			Name:     to.Ptr("ddb1"),
			Type:     to.Ptr("Microsoft.DocumentDB/databaseAccounts"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1"),
			Location: to.Ptr("West US"),
			Tags:     map[string]*string{},
			Identity: &armcosmos.ManagedServiceIdentity{
				Type:        to.Ptr(armcosmos.ResourceIdentityTypeSystemAssignedUserAssigned),
				PrincipalID: to.Ptr("52f4fef3-3c3f-4ff3-b52e-b5c9eeb68656"),
				TenantID:    to.Ptr("33e01921-4d64-4f8c-a055-5bdaffd5e33d"),
				UserAssignedIdentities: map[string]*armcosmos.Components1Jq1T4ISchemasManagedserviceidentityPropertiesUserassignedidentitiesAdditionalproperties{
					"/subscriptions/fa5fc227-a624-475e-b696-cdd604c735bc/resourceGroups/eu2cgroup/providers/Microsoft.ManagedIdentity/userAssignedIdentities/id1": {
						ClientID:    to.Ptr("fbe75b66-01c5-4f87-a220-233af3270436"),
						PrincipalID: to.Ptr("33e01921-4d64-4f8c-a055-5bdaffd5e33d"),
					},
				},
			},
			Kind: to.Ptr(armcosmos.DatabaseAccountKindGlobalDocumentDB),
			Properties: &armcosmos.DatabaseAccountGetProperties{
				AnalyticalStorageConfiguration: &armcosmos.AnalyticalStorageConfiguration{
					SchemaType: to.Ptr(armcosmos.AnalyticalStorageSchemaTypeWellDefined),
				},
				APIProperties: &armcosmos.APIProperties{},
				BackupPolicy: &armcosmos.PeriodicModeBackupPolicy{
					Type: to.Ptr(armcosmos.BackupPolicyTypePeriodic),
					MigrationState: &armcosmos.BackupPolicyMigrationState{
						StartTime:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-09T21:07:16Z"); return t }()),
						Status:     to.Ptr(armcosmos.BackupPolicyMigrationStatusInProgress),
						TargetType: to.Ptr(armcosmos.BackupPolicyTypeContinuous),
					},
					PeriodicModeProperties: &armcosmos.PeriodicModeProperties{
						BackupIntervalInMinutes:        to.Ptr[int32](240),
						BackupRetentionIntervalInHours: to.Ptr[int32](8),
						BackupStorageRedundancy:        to.Ptr(armcosmos.BackupStorageRedundancyGeo),
					},
				},
				ConsistencyPolicy: &armcosmos.ConsistencyPolicy{
					DefaultConsistencyLevel: to.Ptr(armcosmos.DefaultConsistencyLevelSession),
					MaxIntervalInSeconds:    to.Ptr[int32](5),
					MaxStalenessPrefix:      to.Ptr[int64](100),
				},
				Cors:                               []*armcosmos.CorsPolicy{},
				CreateMode:                         to.Ptr(armcosmos.CreateModeDefault),
				DatabaseAccountOfferType:           to.Ptr("Standard"),
				DefaultIdentity:                    to.Ptr("FirstPartyIdentity"),
				DisableKeyBasedMetadataWriteAccess: to.Ptr(false),
				DocumentEndpoint:                   to.Ptr("https://ddb1.documents.azure.com:443/"),
				EnableAnalyticalStorage:            to.Ptr(true),
				EnableFreeTier:                     to.Ptr(false),
				FailoverPolicies: []*armcosmos.FailoverPolicy{
					{
						FailoverPriority: to.Ptr[int32](0),
						ID:               to.Ptr("ddb1-eastus"),
						LocationName:     to.Ptr("East US"),
					}},
				InstanceID:                    to.Ptr("d9b26648-2f53-4541-b3d8-3044f4f9810d"),
				IPRules:                       []*armcosmos.IPAddressOrRange{},
				IsVirtualNetworkFilterEnabled: to.Ptr(false),
				Locations: []*armcosmos.Location{
					{
						DocumentEndpoint:  to.Ptr("https://ddb1-eastus.documents.azure.com:443/"),
						FailoverPriority:  to.Ptr[int32](0),
						ID:                to.Ptr("ddb1-eastus"),
						LocationName:      to.Ptr("East US"),
						ProvisioningState: to.Ptr("Succeeded"),
					}},
				NetworkACLBypass:            to.Ptr(armcosmos.NetworkACLBypassNone),
				NetworkACLBypassResourceIDs: []*string{},
				PrivateEndpointConnections: []*armcosmos.PrivateEndpointConnection{
					{
						ID: to.Ptr("/subscriptions/subId/resourceGroups/rg/providers/Microsoft.DocumentDB/databaseAccounts/account1/privateEndpointConnections/pe1"),
						Properties: &armcosmos.PrivateEndpointConnectionProperties{
							PrivateEndpoint: &armcosmos.PrivateEndpointProperty{
								ID: to.Ptr("/subscriptions/subId/resourceGroups/rg/providers/Microsoft.Network/privateEndpoints/pe1"),
							},
							PrivateLinkServiceConnectionState: &armcosmos.PrivateLinkServiceConnectionStateProperty{
								ActionsRequired: to.Ptr("None"),
								Status:          to.Ptr("Approved"),
							},
						},
					}},
				ProvisioningState: to.Ptr("Succeeded"),
				ReadLocations: []*armcosmos.Location{
					{
						DocumentEndpoint:  to.Ptr("https://ddb1-eastus.documents.azure.com:443/"),
						FailoverPriority:  to.Ptr[int32](0),
						ID:                to.Ptr("ddb1-eastus"),
						LocationName:      to.Ptr("East US"),
						ProvisioningState: to.Ptr("Succeeded"),
					}},
				VirtualNetworkRules: []*armcosmos.VirtualNetworkRule{},
				WriteLocations: []*armcosmos.Location{
					{
						DocumentEndpoint:  to.Ptr("https://ddb1-eastus.documents.azure.com:443/"),
						FailoverPriority:  to.Ptr[int32](0),
						ID:                to.Ptr("ddb1-eastus"),
						LocationName:      to.Ptr("East US"),
						ProvisioningState: to.Ptr("Succeeded"),
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DatabaseAccountGetResults) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DatabaseAccountGetResults)
			t.Fatalf("Mock response is not equal to example response for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBDatabaseAccountGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDatabaseAccounts_Update(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBDatabaseAccountPatch.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBDatabaseAccountPatch"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewDatabaseAccountsClient("subid", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"rg1",
		"ddb1",
		armcosmos.DatabaseAccountUpdateParameters{
			Identity: &armcosmos.ManagedServiceIdentity{
				Type: to.Ptr(armcosmos.ResourceIdentityTypeSystemAssignedUserAssigned),
				UserAssignedIdentities: map[string]*armcosmos.Components1Jq1T4ISchemasManagedserviceidentityPropertiesUserassignedidentitiesAdditionalproperties{
					"/subscriptions/fa5fc227-a624-475e-b696-cdd604c735bc/resourceGroups/eu2cgroup/providers/Microsoft.ManagedIdentity/userAssignedIdentities/id1": {},
				},
			},
			Location: to.Ptr("westus"),
			Properties: &armcosmos.DatabaseAccountUpdateProperties{
				AnalyticalStorageConfiguration: &armcosmos.AnalyticalStorageConfiguration{
					SchemaType: to.Ptr(armcosmos.AnalyticalStorageSchemaTypeWellDefined),
				},
				BackupPolicy: &armcosmos.PeriodicModeBackupPolicy{
					Type: to.Ptr(armcosmos.BackupPolicyTypePeriodic),
					PeriodicModeProperties: &armcosmos.PeriodicModeProperties{
						BackupIntervalInMinutes:        to.Ptr[int32](240),
						BackupRetentionIntervalInHours: to.Ptr[int32](720),
						BackupStorageRedundancy:        to.Ptr(armcosmos.BackupStorageRedundancyLocal),
					},
				},
				Capacity: &armcosmos.Capacity{
					TotalThroughputLimit: to.Ptr[int32](2000),
				},
				ConsistencyPolicy: &armcosmos.ConsistencyPolicy{
					DefaultConsistencyLevel: to.Ptr(armcosmos.DefaultConsistencyLevelBoundedStaleness),
					MaxIntervalInSeconds:    to.Ptr[int32](10),
					MaxStalenessPrefix:      to.Ptr[int64](200),
				},
				DefaultIdentity:         to.Ptr("FirstPartyIdentity"),
				EnableAnalyticalStorage: to.Ptr(true),
				EnableFreeTier:          to.Ptr(false),
				IPRules: []*armcosmos.IPAddressOrRange{
					{
						IPAddressOrRange: to.Ptr("23.43.230.120"),
					},
					{
						IPAddressOrRange: to.Ptr("110.12.240.0/12"),
					}},
				IsVirtualNetworkFilterEnabled: to.Ptr(true),
				NetworkACLBypass:              to.Ptr(armcosmos.NetworkACLBypassAzureServices),
				NetworkACLBypassResourceIDs: []*string{
					to.Ptr("/subscriptions/subId/resourcegroups/rgName/providers/Microsoft.Synapse/workspaces/workspaceName")},
				VirtualNetworkRules: []*armcosmos.VirtualNetworkRule{
					{
						ID:                               to.Ptr("/subscriptions/subId/resourceGroups/rg/providers/Microsoft.Network/virtualNetworks/vnet1/subnets/subnet1"),
						IgnoreMissingVNetServiceEndpoint: to.Ptr(false),
					}},
			},
			Tags: map[string]*string{
				"dept": to.Ptr("finance"),
			},
		},
		&armcosmos.DatabaseAccountsClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBDatabaseAccountPatch.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBDatabaseAccountPatch.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcosmos.DatabaseAccountGetResults{
			Name:     to.Ptr("ddb1"),
			Type:     to.Ptr("Microsoft.DocumentDB/databaseAccounts"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1"),
			Location: to.Ptr("West US"),
			Tags: map[string]*string{
				"dept": to.Ptr("finance"),
			},
			Identity: &armcosmos.ManagedServiceIdentity{
				Type:        to.Ptr(armcosmos.ResourceIdentityTypeSystemAssignedUserAssigned),
				PrincipalID: to.Ptr("52f4fef3-3c3f-4ff3-b52e-b5c9eeb68656"),
				TenantID:    to.Ptr("33e01921-4d64-4f8c-a055-5bdaffd5e33d"),
				UserAssignedIdentities: map[string]*armcosmos.Components1Jq1T4ISchemasManagedserviceidentityPropertiesUserassignedidentitiesAdditionalproperties{
					"/subscriptions/fa5fc227-a624-475e-b696-cdd604c735bc/resourceGroups/eu2cgroup/providers/Microsoft.ManagedIdentity/userAssignedIdentities/id1": {
						ClientID:    to.Ptr("fbe75b66-01c5-4f87-a220-233af3270436"),
						PrincipalID: to.Ptr("33e01921-4d64-4f8c-a055-5bdaffd5e33d"),
					},
				},
			},
			Kind: to.Ptr(armcosmos.DatabaseAccountKindGlobalDocumentDB),
			Properties: &armcosmos.DatabaseAccountGetProperties{
				AnalyticalStorageConfiguration: &armcosmos.AnalyticalStorageConfiguration{
					SchemaType: to.Ptr(armcosmos.AnalyticalStorageSchemaTypeWellDefined),
				},
				APIProperties: &armcosmos.APIProperties{},
				BackupPolicy: &armcosmos.PeriodicModeBackupPolicy{
					Type: to.Ptr(armcosmos.BackupPolicyTypePeriodic),
					PeriodicModeProperties: &armcosmos.PeriodicModeProperties{
						BackupIntervalInMinutes:        to.Ptr[int32](240),
						BackupRetentionIntervalInHours: to.Ptr[int32](720),
						BackupStorageRedundancy:        to.Ptr(armcosmos.BackupStorageRedundancyLocal),
					},
				},
				Capacity: &armcosmos.Capacity{
					TotalThroughputLimit: to.Ptr[int32](2000),
				},
				ConsistencyPolicy: &armcosmos.ConsistencyPolicy{
					DefaultConsistencyLevel: to.Ptr(armcosmos.DefaultConsistencyLevelBoundedStaleness),
					MaxIntervalInSeconds:    to.Ptr[int32](10),
					MaxStalenessPrefix:      to.Ptr[int64](200),
				},
				Cors:                               []*armcosmos.CorsPolicy{},
				DatabaseAccountOfferType:           to.Ptr("Standard"),
				DefaultIdentity:                    to.Ptr("FirstPartyIdentity"),
				DisableKeyBasedMetadataWriteAccess: to.Ptr(false),
				DocumentEndpoint:                   to.Ptr("https://ddb1.documents.azure.com:443/"),
				EnableAnalyticalStorage:            to.Ptr(true),
				EnableFreeTier:                     to.Ptr(false),
				FailoverPolicies: []*armcosmos.FailoverPolicy{
					{
						FailoverPriority: to.Ptr[int32](0),
						ID:               to.Ptr("ddb1-eastus"),
						LocationName:     to.Ptr("East US"),
					}},
				IPRules: []*armcosmos.IPAddressOrRange{
					{
						IPAddressOrRange: to.Ptr("23.43.230.120"),
					},
					{
						IPAddressOrRange: to.Ptr("110.12.240.0/12"),
					}},
				IsVirtualNetworkFilterEnabled: to.Ptr(true),
				Locations: []*armcosmos.Location{
					{
						DocumentEndpoint:  to.Ptr("https://ddb1-eastus.documents.azure.com:443/"),
						FailoverPriority:  to.Ptr[int32](0),
						ID:                to.Ptr("ddb1-eastus"),
						LocationName:      to.Ptr("East US"),
						ProvisioningState: to.Ptr("Succeeded"),
					}},
				NetworkACLBypass: to.Ptr(armcosmos.NetworkACLBypassAzureServices),
				NetworkACLBypassResourceIDs: []*string{
					to.Ptr("/subscriptions/subId/resourcegroups/rgName/providers/Microsoft.Synapse/workspaces/workspaceName")},
				PrivateEndpointConnections: []*armcosmos.PrivateEndpointConnection{
					{
						ID: to.Ptr("/subscriptions/subId/resourceGroups/rg/providers/Microsoft.DocumentDB/databaseAccounts/account1/privateEndpointConnections/pe1"),
						Properties: &armcosmos.PrivateEndpointConnectionProperties{
							PrivateEndpoint: &armcosmos.PrivateEndpointProperty{
								ID: to.Ptr("/subscriptions/subId/resourceGroups/rg/providers/Microsoft.Network/privateEndpoints/pe1"),
							},
							PrivateLinkServiceConnectionState: &armcosmos.PrivateLinkServiceConnectionStateProperty{
								ActionsRequired: to.Ptr("None"),
								Status:          to.Ptr("Approved"),
							},
						},
					}},
				ProvisioningState: to.Ptr("Succeeded"),
				ReadLocations: []*armcosmos.Location{
					{
						DocumentEndpoint:  to.Ptr("https://ddb1-eastus.documents.azure.com:443/"),
						FailoverPriority:  to.Ptr[int32](0),
						ID:                to.Ptr("ddb1-eastus"),
						LocationName:      to.Ptr("East US"),
						ProvisioningState: to.Ptr("Succeeded"),
					}},
				VirtualNetworkRules: []*armcosmos.VirtualNetworkRule{
					{
						ID:                               to.Ptr("/subscriptions/subId/resourceGroups/rg/providers/Microsoft.Network/virtualNetworks/vnet1/subnets/subnet1"),
						IgnoreMissingVNetServiceEndpoint: to.Ptr(false),
					}},
				WriteLocations: []*armcosmos.Location{
					{
						DocumentEndpoint:  to.Ptr("https://ddb1-eastus.documents.azure.com:443/"),
						FailoverPriority:  to.Ptr[int32](0),
						ID:                to.Ptr("ddb1-eastus"),
						LocationName:      to.Ptr("East US"),
						ProvisioningState: to.Ptr("Succeeded"),
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DatabaseAccountGetResults) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DatabaseAccountGetResults)
			t.Fatalf("Mock response is not equal to example response for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBDatabaseAccountPatch.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDatabaseAccounts_CreateOrUpdate(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBDatabaseAccountCreateMax.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBDatabaseAccountCreateMax"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewDatabaseAccountsClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"ddb1",
		armcosmos.DatabaseAccountCreateUpdateParameters{
			Location: to.Ptr("westus"),
			Tags:     map[string]*string{},
			Identity: &armcosmos.ManagedServiceIdentity{
				Type: to.Ptr(armcosmos.ResourceIdentityTypeSystemAssignedUserAssigned),
				UserAssignedIdentities: map[string]*armcosmos.Components1Jq1T4ISchemasManagedserviceidentityPropertiesUserassignedidentitiesAdditionalproperties{
					"/subscriptions/fa5fc227-a624-475e-b696-cdd604c735bc/resourceGroups/eu2cgroup/providers/Microsoft.ManagedIdentity/userAssignedIdentities/id1": {},
				},
			},
			Kind: to.Ptr(armcosmos.DatabaseAccountKindMongoDB),
			Properties: &armcosmos.DatabaseAccountCreateUpdateProperties{
				AnalyticalStorageConfiguration: &armcosmos.AnalyticalStorageConfiguration{
					SchemaType: to.Ptr(armcosmos.AnalyticalStorageSchemaTypeWellDefined),
				},
				APIProperties: &armcosmos.APIProperties{
					ServerVersion: to.Ptr(armcosmos.ServerVersionThree2),
				},
				BackupPolicy: &armcosmos.PeriodicModeBackupPolicy{
					Type: to.Ptr(armcosmos.BackupPolicyTypePeriodic),
					PeriodicModeProperties: &armcosmos.PeriodicModeProperties{
						BackupIntervalInMinutes:        to.Ptr[int32](240),
						BackupRetentionIntervalInHours: to.Ptr[int32](8),
						BackupStorageRedundancy:        to.Ptr(armcosmos.BackupStorageRedundancyGeo),
					},
				},
				Capacity: &armcosmos.Capacity{
					TotalThroughputLimit: to.Ptr[int32](2000),
				},
				ConsistencyPolicy: &armcosmos.ConsistencyPolicy{
					DefaultConsistencyLevel: to.Ptr(armcosmos.DefaultConsistencyLevelBoundedStaleness),
					MaxIntervalInSeconds:    to.Ptr[int32](10),
					MaxStalenessPrefix:      to.Ptr[int64](200),
				},
				Cors: []*armcosmos.CorsPolicy{
					{
						AllowedOrigins: to.Ptr("https://test"),
					}},
				CreateMode:               to.Ptr(armcosmos.CreateModeDefault),
				DatabaseAccountOfferType: to.Ptr("Standard"),
				DefaultIdentity:          to.Ptr("FirstPartyIdentity"),
				EnableAnalyticalStorage:  to.Ptr(true),
				EnableFreeTier:           to.Ptr(false),
				IPRules: []*armcosmos.IPAddressOrRange{
					{
						IPAddressOrRange: to.Ptr("23.43.230.120"),
					},
					{
						IPAddressOrRange: to.Ptr("110.12.240.0/12"),
					}},
				IsVirtualNetworkFilterEnabled: to.Ptr(true),
				KeyVaultKeyURI:                to.Ptr("https://myKeyVault.vault.azure.net"),
				Locations: []*armcosmos.Location{
					{
						FailoverPriority: to.Ptr[int32](0),
						IsZoneRedundant:  to.Ptr(false),
						LocationName:     to.Ptr("southcentralus"),
					},
					{
						FailoverPriority: to.Ptr[int32](1),
						IsZoneRedundant:  to.Ptr(false),
						LocationName:     to.Ptr("eastus"),
					}},
				NetworkACLBypass: to.Ptr(armcosmos.NetworkACLBypassAzureServices),
				NetworkACLBypassResourceIDs: []*string{
					to.Ptr("/subscriptions/subId/resourcegroups/rgName/providers/Microsoft.Synapse/workspaces/workspaceName")},
				PublicNetworkAccess: to.Ptr(armcosmos.PublicNetworkAccessEnabled),
				VirtualNetworkRules: []*armcosmos.VirtualNetworkRule{
					{
						ID:                               to.Ptr("/subscriptions/subId/resourceGroups/rg/providers/Microsoft.Network/virtualNetworks/vnet1/subnets/subnet1"),
						IgnoreMissingVNetServiceEndpoint: to.Ptr(false),
					}},
			},
		},
		&armcosmos.DatabaseAccountsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBDatabaseAccountCreateMax.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBDatabaseAccountCreateMax.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcosmos.DatabaseAccountGetResults{
			Name:     to.Ptr("ddb1"),
			Type:     to.Ptr("Microsoft.DocumentDB/databaseAccounts"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1"),
			Location: to.Ptr("West US"),
			Tags:     map[string]*string{},
			Identity: &armcosmos.ManagedServiceIdentity{
				Type:        to.Ptr(armcosmos.ResourceIdentityTypeSystemAssignedUserAssigned),
				PrincipalID: to.Ptr("52f4fef3-3c3f-4ff3-b52e-b5c9eeb68656"),
				TenantID:    to.Ptr("33e01921-4d64-4f8c-a055-5bdaffd5e33d"),
				UserAssignedIdentities: map[string]*armcosmos.Components1Jq1T4ISchemasManagedserviceidentityPropertiesUserassignedidentitiesAdditionalproperties{
					"/subscriptions/fa5fc227-a624-475e-b696-cdd604c735bc/resourceGroups/eu2cgroup/providers/Microsoft.ManagedIdentity/userAssignedIdentities/id1": {
						ClientID:    to.Ptr("fbe75b66-01c5-4f87-a220-233af3270436"),
						PrincipalID: to.Ptr("33e01921-4d64-4f8c-a055-5bdaffd5e33d"),
					},
				},
			},
			Kind: to.Ptr(armcosmos.DatabaseAccountKindMongoDB),
			Properties: &armcosmos.DatabaseAccountGetProperties{
				AnalyticalStorageConfiguration: &armcosmos.AnalyticalStorageConfiguration{
					SchemaType: to.Ptr(armcosmos.AnalyticalStorageSchemaTypeWellDefined),
				},
				APIProperties: &armcosmos.APIProperties{
					ServerVersion: to.Ptr(armcosmos.ServerVersionThree2),
				},
				BackupPolicy: &armcosmos.PeriodicModeBackupPolicy{
					Type: to.Ptr(armcosmos.BackupPolicyTypePeriodic),
					PeriodicModeProperties: &armcosmos.PeriodicModeProperties{
						BackupIntervalInMinutes:        to.Ptr[int32](240),
						BackupRetentionIntervalInHours: to.Ptr[int32](8),
						BackupStorageRedundancy:        to.Ptr(armcosmos.BackupStorageRedundancyGeo),
					},
				},
				Capacity: &armcosmos.Capacity{
					TotalThroughputLimit: to.Ptr[int32](2000),
				},
				ConsistencyPolicy: &armcosmos.ConsistencyPolicy{
					DefaultConsistencyLevel: to.Ptr(armcosmos.DefaultConsistencyLevelBoundedStaleness),
					MaxIntervalInSeconds:    to.Ptr[int32](10),
					MaxStalenessPrefix:      to.Ptr[int64](200),
				},
				Cors: []*armcosmos.CorsPolicy{
					{
						AllowedOrigins: to.Ptr("https://test"),
					}},
				CreateMode:                         to.Ptr(armcosmos.CreateModeDefault),
				DatabaseAccountOfferType:           to.Ptr("Standard"),
				DefaultIdentity:                    to.Ptr("FirstPartyIdentity"),
				DisableKeyBasedMetadataWriteAccess: to.Ptr(false),
				EnableAnalyticalStorage:            to.Ptr(true),
				EnableFreeTier:                     to.Ptr(false),
				FailoverPolicies: []*armcosmos.FailoverPolicy{
					{
						FailoverPriority: to.Ptr[int32](0),
						ID:               to.Ptr("ddb1-southcentralus"),
						LocationName:     to.Ptr("South Central US"),
					},
					{
						FailoverPriority: to.Ptr[int32](1),
						ID:               to.Ptr("ddb1-eastus"),
						LocationName:     to.Ptr("East US"),
					}},
				InstanceID: to.Ptr("d9b26648-2f53-4541-b3d8-3044f4f9810d"),
				IPRules: []*armcosmos.IPAddressOrRange{
					{
						IPAddressOrRange: to.Ptr("23.43.230.120"),
					},
					{
						IPAddressOrRange: to.Ptr("110.12.240.0/12"),
					}},
				IsVirtualNetworkFilterEnabled: to.Ptr(true),
				KeyVaultKeyURI:                to.Ptr("https://myKeyVault.vault.azure.net"),
				Locations: []*armcosmos.Location{
					{
						FailoverPriority:  to.Ptr[int32](0),
						ID:                to.Ptr("ddb1-southcentralus"),
						IsZoneRedundant:   to.Ptr(false),
						LocationName:      to.Ptr("South Central US"),
						ProvisioningState: to.Ptr("Succeeded"),
					},
					{
						FailoverPriority:  to.Ptr[int32](1),
						ID:                to.Ptr("ddb1-eastus"),
						IsZoneRedundant:   to.Ptr(false),
						LocationName:      to.Ptr("East US"),
						ProvisioningState: to.Ptr("Succeeded"),
					}},
				NetworkACLBypass: to.Ptr(armcosmos.NetworkACLBypassAzureServices),
				NetworkACLBypassResourceIDs: []*string{
					to.Ptr("/subscriptions/subId/resourcegroups/rgName/providers/Microsoft.Synapse/workspaces/workspaceName")},
				ProvisioningState:   to.Ptr("Succeeded"),
				PublicNetworkAccess: to.Ptr(armcosmos.PublicNetworkAccessEnabled),
				ReadLocations: []*armcosmos.Location{
					{
						FailoverPriority:  to.Ptr[int32](0),
						ID:                to.Ptr("ddb1-southcentralus"),
						IsZoneRedundant:   to.Ptr(false),
						LocationName:      to.Ptr("South Central US"),
						ProvisioningState: to.Ptr("Succeeded"),
					},
					{
						FailoverPriority:  to.Ptr[int32](1),
						ID:                to.Ptr("ddb1-eastus"),
						IsZoneRedundant:   to.Ptr(false),
						LocationName:      to.Ptr("East US"),
						ProvisioningState: to.Ptr("Succeeded"),
					}},
				VirtualNetworkRules: []*armcosmos.VirtualNetworkRule{
					{
						ID: to.Ptr("/subscriptions/subId/resourceGroups/rg/providers/Microsoft.Network/virtualNetworks/vnet1/subnets/subnet1"),
					}},
				WriteLocations: []*armcosmos.Location{
					{
						FailoverPriority:  to.Ptr[int32](0),
						ID:                to.Ptr("ddb1-southcentralus"),
						IsZoneRedundant:   to.Ptr(false),
						LocationName:      to.Ptr("South Central US"),
						ProvisioningState: to.Ptr("Succeeded"),
					}},
			},
			SystemData: &armcosmos.SystemData{
				CreatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-12T22:05:09Z"); return t }()),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DatabaseAccountGetResults) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DatabaseAccountGetResults)
			t.Fatalf("Mock response is not equal to example response for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBDatabaseAccountCreateMax.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBDatabaseAccountCreateMin.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBDatabaseAccountCreateMin"},
	})
	client = armcosmos.NewDatabaseAccountsClient("subid", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"ddb1",
		armcosmos.DatabaseAccountCreateUpdateParameters{
			Location: to.Ptr("westus"),
			Properties: &armcosmos.DatabaseAccountCreateUpdateProperties{
				CreateMode:               to.Ptr(armcosmos.CreateModeDefault),
				DatabaseAccountOfferType: to.Ptr("Standard"),
				Locations: []*armcosmos.Location{
					{
						FailoverPriority: to.Ptr[int32](0),
						IsZoneRedundant:  to.Ptr(false),
						LocationName:     to.Ptr("southcentralus"),
					}},
			},
		},
		&armcosmos.DatabaseAccountsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBDatabaseAccountCreateMin.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBDatabaseAccountCreateMin.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcosmos.DatabaseAccountGetResults{
			Name:     to.Ptr("ddb1"),
			Type:     to.Ptr("Microsoft.DocumentDB/databaseAccounts"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1"),
			Location: to.Ptr("West US"),
			Tags:     map[string]*string{},
			Kind:     to.Ptr(armcosmos.DatabaseAccountKindGlobalDocumentDB),
			Properties: &armcosmos.DatabaseAccountGetProperties{
				APIProperties: &armcosmos.APIProperties{},
				BackupPolicy: &armcosmos.PeriodicModeBackupPolicy{
					Type: to.Ptr(armcosmos.BackupPolicyTypePeriodic),
					PeriodicModeProperties: &armcosmos.PeriodicModeProperties{
						BackupIntervalInMinutes:        to.Ptr[int32](240),
						BackupRetentionIntervalInHours: to.Ptr[int32](720),
						BackupStorageRedundancy:        to.Ptr(armcosmos.BackupStorageRedundancyGeo),
					},
				},
				ConsistencyPolicy: &armcosmos.ConsistencyPolicy{
					DefaultConsistencyLevel: to.Ptr(armcosmos.DefaultConsistencyLevelSession),
					MaxIntervalInSeconds:    to.Ptr[int32](5),
					MaxStalenessPrefix:      to.Ptr[int64](100),
				},
				Cors:                               []*armcosmos.CorsPolicy{},
				CreateMode:                         to.Ptr(armcosmos.CreateModeDefault),
				DatabaseAccountOfferType:           to.Ptr("Standard"),
				DisableKeyBasedMetadataWriteAccess: to.Ptr(false),
				EnableAnalyticalStorage:            to.Ptr(false),
				EnableFreeTier:                     to.Ptr(false),
				FailoverPolicies: []*armcosmos.FailoverPolicy{
					{
						FailoverPriority: to.Ptr[int32](0),
						ID:               to.Ptr("ddb1-southcentralus"),
						LocationName:     to.Ptr("South Central US"),
					}},
				InstanceID: to.Ptr("d9b26648-2f53-4541-b3d8-3044f4f9810d"),
				IPRules:    []*armcosmos.IPAddressOrRange{},
				Locations: []*armcosmos.Location{
					{
						FailoverPriority:  to.Ptr[int32](0),
						ID:                to.Ptr("ddb1-southcentralus"),
						IsZoneRedundant:   to.Ptr(false),
						LocationName:      to.Ptr("South Central US"),
						ProvisioningState: to.Ptr("Succeeded"),
					}},
				NetworkACLBypass:            to.Ptr(armcosmos.NetworkACLBypassNone),
				NetworkACLBypassResourceIDs: []*string{},
				ProvisioningState:           to.Ptr("Succeeded"),
				ReadLocations: []*armcosmos.Location{
					{
						FailoverPriority:  to.Ptr[int32](0),
						ID:                to.Ptr("ddb1-southcentralus"),
						IsZoneRedundant:   to.Ptr(false),
						LocationName:      to.Ptr("South Central US"),
						ProvisioningState: to.Ptr("Succeeded"),
					}},
				WriteLocations: []*armcosmos.Location{
					{
						FailoverPriority:  to.Ptr[int32](0),
						ID:                to.Ptr("ddb1-southcentralus"),
						IsZoneRedundant:   to.Ptr(false),
						LocationName:      to.Ptr("South Central US"),
						ProvisioningState: to.Ptr("Succeeded"),
					}},
			},
			SystemData: &armcosmos.SystemData{
				CreatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-12T22:05:09Z"); return t }()),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DatabaseAccountGetResults) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DatabaseAccountGetResults)
			t.Fatalf("Mock response is not equal to example response for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBDatabaseAccountCreateMin.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBRestoreDatabaseAccountCreateUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBRestoreDatabaseAccountCreateUpdate.json"},
	})
	client = armcosmos.NewDatabaseAccountsClient("subid", cred, &options)
	poller, err = client.BeginCreateOrUpdate(ctx,
		"rg1",
		"ddb1",
		armcosmos.DatabaseAccountCreateUpdateParameters{
			Location: to.Ptr("westus"),
			Tags:     map[string]*string{},
			Kind:     to.Ptr(armcosmos.DatabaseAccountKindGlobalDocumentDB),
			Properties: &armcosmos.DatabaseAccountCreateUpdateProperties{
				APIProperties: &armcosmos.APIProperties{
					ServerVersion: to.Ptr(armcosmos.ServerVersionThree2),
				},
				BackupPolicy: &armcosmos.ContinuousModeBackupPolicy{
					Type: to.Ptr(armcosmos.BackupPolicyTypeContinuous),
				},
				ConsistencyPolicy: &armcosmos.ConsistencyPolicy{
					DefaultConsistencyLevel: to.Ptr(armcosmos.DefaultConsistencyLevelBoundedStaleness),
					MaxIntervalInSeconds:    to.Ptr[int32](10),
					MaxStalenessPrefix:      to.Ptr[int64](200),
				},
				CreateMode:               to.Ptr(armcosmos.CreateModeRestore),
				DatabaseAccountOfferType: to.Ptr("Standard"),
				EnableAnalyticalStorage:  to.Ptr(true),
				EnableFreeTier:           to.Ptr(false),
				KeyVaultKeyURI:           to.Ptr("https://myKeyVault.vault.azure.net"),
				Locations: []*armcosmos.Location{
					{
						FailoverPriority: to.Ptr[int32](0),
						IsZoneRedundant:  to.Ptr(false),
						LocationName:     to.Ptr("southcentralus"),
					}},
				RestoreParameters: &armcosmos.RestoreParameters{
					DatabasesToRestore: []*armcosmos.DatabaseRestoreResource{
						{
							CollectionNames: []*string{
								to.Ptr("collection1"),
								to.Ptr("collection2")},
							DatabaseName: to.Ptr("db1"),
						},
						{
							CollectionNames: []*string{
								to.Ptr("collection3"),
								to.Ptr("collection4")},
							DatabaseName: to.Ptr("db2"),
						}},
					RestoreMode:           to.Ptr(armcosmos.RestoreModePointInTime),
					RestoreSource:         to.Ptr("/subscriptions/subid/providers/Microsoft.DocumentDB/locations/westus/restorableDatabaseAccounts/1a97b4bb-f6a0-430e-ade1-638d781830cc"),
					RestoreTimestampInUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-11T22:05:09Z"); return t }()),
				},
			},
		},
		&armcosmos.DatabaseAccountsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBRestoreDatabaseAccountCreateUpdate.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBRestoreDatabaseAccountCreateUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcosmos.DatabaseAccountGetResults{
			Name:     to.Ptr("ddb1"),
			Type:     to.Ptr("Microsoft.DocumentDB/databaseAccounts"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1"),
			Location: to.Ptr("West US"),
			Tags:     map[string]*string{},
			Kind:     to.Ptr(armcosmos.DatabaseAccountKindGlobalDocumentDB),
			Properties: &armcosmos.DatabaseAccountGetProperties{
				APIProperties: &armcosmos.APIProperties{},
				ConsistencyPolicy: &armcosmos.ConsistencyPolicy{
					DefaultConsistencyLevel: to.Ptr(armcosmos.DefaultConsistencyLevelSession),
					MaxIntervalInSeconds:    to.Ptr[int32](5),
					MaxStalenessPrefix:      to.Ptr[int64](100),
				},
				CreateMode:                         to.Ptr(armcosmos.CreateModeRestore),
				DatabaseAccountOfferType:           to.Ptr("Standard"),
				DisableKeyBasedMetadataWriteAccess: to.Ptr(false),
				EnableAnalyticalStorage:            to.Ptr(false),
				EnableFreeTier:                     to.Ptr(false),
				FailoverPolicies: []*armcosmos.FailoverPolicy{
					{
						FailoverPriority: to.Ptr[int32](0),
						ID:               to.Ptr("ddb1-southcentralus"),
						LocationName:     to.Ptr("South Central US"),
					}},
				InstanceID: to.Ptr("d9b26648-2f53-4541-b3d8-3044f4f9810d"),
				IPRules:    []*armcosmos.IPAddressOrRange{},
				Locations: []*armcosmos.Location{
					{
						FailoverPriority:  to.Ptr[int32](0),
						ID:                to.Ptr("ddb1-southcentralus"),
						IsZoneRedundant:   to.Ptr(false),
						LocationName:      to.Ptr("South Central US"),
						ProvisioningState: to.Ptr("Succeeded"),
					}},
				ProvisioningState: to.Ptr("Succeeded"),
				ReadLocations: []*armcosmos.Location{
					{
						FailoverPriority:  to.Ptr[int32](0),
						ID:                to.Ptr("ddb1-southcentralus"),
						IsZoneRedundant:   to.Ptr(false),
						LocationName:      to.Ptr("South Central US"),
						ProvisioningState: to.Ptr("Succeeded"),
					}},
				WriteLocations: []*armcosmos.Location{
					{
						FailoverPriority:  to.Ptr[int32](0),
						ID:                to.Ptr("ddb1-southcentralus"),
						IsZoneRedundant:   to.Ptr(false),
						LocationName:      to.Ptr("South Central US"),
						ProvisioningState: to.Ptr("Succeeded"),
					}},
			},
			SystemData: &armcosmos.SystemData{
				CreatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-12T22:05:09Z"); return t }()),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DatabaseAccountGetResults) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DatabaseAccountGetResults)
			t.Fatalf("Mock response is not equal to example response for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBRestoreDatabaseAccountCreateUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDatabaseAccounts_Delete(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBDatabaseAccountDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBDatabaseAccountDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewDatabaseAccountsClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"ddb1",
		&armcosmos.DatabaseAccountsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBDatabaseAccountDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBDatabaseAccountDelete.json: %v", err)
	}
}

func TestDatabaseAccounts_FailoverPriorityChange(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBDatabaseAccountFailoverPriorityChange.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBDatabaseAccountFailoverPriorityChange"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewDatabaseAccountsClient("subid", cred, &options)
	poller, err := client.BeginFailoverPriorityChange(ctx,
		"rg1",
		"ddb1-failover",
		armcosmos.FailoverPolicies{
			FailoverPolicies: []*armcosmos.FailoverPolicy{
				{
					FailoverPriority: to.Ptr[int32](0),
					LocationName:     to.Ptr("eastus"),
				},
				{
					FailoverPriority: to.Ptr[int32](1),
					LocationName:     to.Ptr("westus"),
				}},
		},
		&armcosmos.DatabaseAccountsClientBeginFailoverPriorityChangeOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBDatabaseAccountFailoverPriorityChange.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBDatabaseAccountFailoverPriorityChange.json: %v", err)
	}
}

func TestDatabaseAccounts_List(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBDatabaseAccountList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBDatabaseAccountList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewDatabaseAccountsClient("subid", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBDatabaseAccountList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcosmos.DatabaseAccountsListResult{
			Value: []*armcosmos.DatabaseAccountGetResults{
				{
					Name:     to.Ptr("ddb1"),
					Type:     to.Ptr("Microsoft.DocumentDB/databaseAccounts"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1"),
					Location: to.Ptr("West US"),
					Tags:     map[string]*string{},
					Identity: &armcosmos.ManagedServiceIdentity{
						Type:        to.Ptr(armcosmos.ResourceIdentityTypeSystemAssignedUserAssigned),
						PrincipalID: to.Ptr("52f4fef3-3c3f-4ff3-b52e-b5c9eeb68656"),
						TenantID:    to.Ptr("33e01921-4d64-4f8c-a055-5bdaffd5e33d"),
						UserAssignedIdentities: map[string]*armcosmos.Components1Jq1T4ISchemasManagedserviceidentityPropertiesUserassignedidentitiesAdditionalproperties{
							"/subscriptions/fa5fc227-a624-475e-b696-cdd604c735bc/resourceGroups/eu2cgroup/providers/Microsoft.ManagedIdentity/userAssignedIdentities/id1": {
								ClientID:    to.Ptr("fbe75b66-01c5-4f87-a220-233af3270436"),
								PrincipalID: to.Ptr("33e01921-4d64-4f8c-a055-5bdaffd5e33d"),
							},
						},
					},
					Kind: to.Ptr(armcosmos.DatabaseAccountKindGlobalDocumentDB),
					Properties: &armcosmos.DatabaseAccountGetProperties{
						AnalyticalStorageConfiguration: &armcosmos.AnalyticalStorageConfiguration{
							SchemaType: to.Ptr(armcosmos.AnalyticalStorageSchemaTypeWellDefined),
						},
						APIProperties: &armcosmos.APIProperties{},
						BackupPolicy: &armcosmos.PeriodicModeBackupPolicy{
							Type: to.Ptr(armcosmos.BackupPolicyTypePeriodic),
							PeriodicModeProperties: &armcosmos.PeriodicModeProperties{
								BackupIntervalInMinutes:        to.Ptr[int32](240),
								BackupRetentionIntervalInHours: to.Ptr[int32](720),
								BackupStorageRedundancy:        to.Ptr(armcosmos.BackupStorageRedundancyGeo),
							},
						},
						ConsistencyPolicy: &armcosmos.ConsistencyPolicy{
							DefaultConsistencyLevel: to.Ptr(armcosmos.DefaultConsistencyLevelSession),
							MaxIntervalInSeconds:    to.Ptr[int32](5),
							MaxStalenessPrefix:      to.Ptr[int64](100),
						},
						Cors:                               []*armcosmos.CorsPolicy{},
						CreateMode:                         to.Ptr(armcosmos.CreateModeDefault),
						DatabaseAccountOfferType:           to.Ptr("Standard"),
						DefaultIdentity:                    to.Ptr("FirstPartyIdentity"),
						DisableKeyBasedMetadataWriteAccess: to.Ptr(false),
						DocumentEndpoint:                   to.Ptr("https://ddb1.documents.azure.com:443/"),
						EnableAnalyticalStorage:            to.Ptr(true),
						EnableFreeTier:                     to.Ptr(false),
						FailoverPolicies: []*armcosmos.FailoverPolicy{
							{
								FailoverPriority: to.Ptr[int32](0),
								ID:               to.Ptr("ddb1-eastus"),
								LocationName:     to.Ptr("East US"),
							}},
						InstanceID: to.Ptr("d9b26648-2f53-4541-b3d8-3044f4f9810d"),
						IPRules:    []*armcosmos.IPAddressOrRange{},
						Locations: []*armcosmos.Location{
							{
								DocumentEndpoint:  to.Ptr("https://ddb1-eastus.documents.azure.com:443/"),
								FailoverPriority:  to.Ptr[int32](0),
								ID:                to.Ptr("ddb1-eastus"),
								LocationName:      to.Ptr("East US"),
								ProvisioningState: to.Ptr("Succeeded"),
							}},
						NetworkACLBypass:            to.Ptr(armcosmos.NetworkACLBypassNone),
						NetworkACLBypassResourceIDs: []*string{},
						PrivateEndpointConnections: []*armcosmos.PrivateEndpointConnection{
							{
								ID: to.Ptr("/subscriptions/subId/resourceGroups/rg/providers/Microsoft.DocumentDB/databaseAccounts/account1/privateEndpointConnections/pe1"),
								Properties: &armcosmos.PrivateEndpointConnectionProperties{
									PrivateEndpoint: &armcosmos.PrivateEndpointProperty{
										ID: to.Ptr("/subscriptions/subId/resourceGroups/rg/providers/Microsoft.Network/privateEndpoints/pe1"),
									},
									PrivateLinkServiceConnectionState: &armcosmos.PrivateLinkServiceConnectionStateProperty{
										ActionsRequired: to.Ptr("None"),
										Status:          to.Ptr("Approved"),
									},
								},
							}},
						ProvisioningState: to.Ptr("Succeeded"),
						ReadLocations: []*armcosmos.Location{
							{
								DocumentEndpoint:  to.Ptr("https://ddb1-eastus.documents.azure.com:443/"),
								FailoverPriority:  to.Ptr[int32](0),
								ID:                to.Ptr("ddb1-eastus"),
								LocationName:      to.Ptr("East US"),
								ProvisioningState: to.Ptr("Succeeded"),
							}},
						WriteLocations: []*armcosmos.Location{
							{
								DocumentEndpoint:  to.Ptr("https://ddb1-eastus.documents.azure.com:443/"),
								FailoverPriority:  to.Ptr[int32](0),
								ID:                to.Ptr("ddb1-eastus"),
								LocationName:      to.Ptr("East US"),
								ProvisioningState: to.Ptr("Succeeded"),
							}},
					},
					SystemData: &armcosmos.SystemData{
						CreatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-12T22:05:09Z"); return t }()),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DatabaseAccountsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DatabaseAccountsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBDatabaseAccountList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDatabaseAccounts_ListByResourceGroup(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBDatabaseAccountListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBDatabaseAccountListByResourceGroup"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewDatabaseAccountsClient("subid", cred, &options)
	pager := client.ListByResourceGroup("rg1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBDatabaseAccountListByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcosmos.DatabaseAccountsListResult{
			Value: []*armcosmos.DatabaseAccountGetResults{
				{
					Name:     to.Ptr("ddb1"),
					Type:     to.Ptr("Microsoft.DocumentDB/databaseAccounts"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1"),
					Location: to.Ptr("West US"),
					Tags:     map[string]*string{},
					Identity: &armcosmos.ManagedServiceIdentity{
						Type:        to.Ptr(armcosmos.ResourceIdentityTypeSystemAssignedUserAssigned),
						PrincipalID: to.Ptr("52f4fef3-3c3f-4ff3-b52e-b5c9eeb68656"),
						TenantID:    to.Ptr("33e01921-4d64-4f8c-a055-5bdaffd5e33d"),
						UserAssignedIdentities: map[string]*armcosmos.Components1Jq1T4ISchemasManagedserviceidentityPropertiesUserassignedidentitiesAdditionalproperties{
							"/subscriptions/fa5fc227-a624-475e-b696-cdd604c735bc/resourceGroups/eu2cgroup/providers/Microsoft.ManagedIdentity/userAssignedIdentities/id1": {
								ClientID:    to.Ptr("fbe75b66-01c5-4f87-a220-233af3270436"),
								PrincipalID: to.Ptr("33e01921-4d64-4f8c-a055-5bdaffd5e33d"),
							},
						},
					},
					Kind: to.Ptr(armcosmos.DatabaseAccountKindGlobalDocumentDB),
					Properties: &armcosmos.DatabaseAccountGetProperties{
						ConsistencyPolicy: &armcosmos.ConsistencyPolicy{
							DefaultConsistencyLevel: to.Ptr(armcosmos.DefaultConsistencyLevelSession),
							MaxIntervalInSeconds:    to.Ptr[int32](5),
							MaxStalenessPrefix:      to.Ptr[int64](100),
						},
						Cors:                               []*armcosmos.CorsPolicy{},
						DatabaseAccountOfferType:           to.Ptr("Standard"),
						DefaultIdentity:                    to.Ptr("FirstPartyIdentity"),
						DisableKeyBasedMetadataWriteAccess: to.Ptr(false),
						DocumentEndpoint:                   to.Ptr("https://ddb1.documents.azure.com:443/"),
						EnableFreeTier:                     to.Ptr(false),
						FailoverPolicies: []*armcosmos.FailoverPolicy{
							{
								FailoverPriority: to.Ptr[int32](0),
								ID:               to.Ptr("ddb1-eastus"),
								LocationName:     to.Ptr("East US"),
							}},
						IPRules: []*armcosmos.IPAddressOrRange{},
						Locations: []*armcosmos.Location{
							{
								DocumentEndpoint:  to.Ptr("https://ddb1-eastus.documents.azure.com:443/"),
								FailoverPriority:  to.Ptr[int32](0),
								ID:                to.Ptr("ddb1-eastus"),
								LocationName:      to.Ptr("East US"),
								ProvisioningState: to.Ptr("Succeeded"),
							}},
						NetworkACLBypass:            to.Ptr(armcosmos.NetworkACLBypassNone),
						NetworkACLBypassResourceIDs: []*string{},
						ProvisioningState:           to.Ptr("Succeeded"),
						ReadLocations: []*armcosmos.Location{
							{
								DocumentEndpoint:  to.Ptr("https://ddb1-eastus.documents.azure.com:443/"),
								FailoverPriority:  to.Ptr[int32](0),
								ID:                to.Ptr("ddb1-eastus"),
								LocationName:      to.Ptr("East US"),
								ProvisioningState: to.Ptr("Succeeded"),
							}},
						WriteLocations: []*armcosmos.Location{
							{
								DocumentEndpoint:  to.Ptr("https://ddb1-eastus.documents.azure.com:443/"),
								FailoverPriority:  to.Ptr[int32](0),
								ID:                to.Ptr("ddb1-eastus"),
								LocationName:      to.Ptr("East US"),
								ProvisioningState: to.Ptr("Succeeded"),
							}},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.DatabaseAccountsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.DatabaseAccountsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBDatabaseAccountListByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDatabaseAccounts_ListKeys(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBDatabaseAccountListKeys.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBDatabaseAccountListKeys"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewDatabaseAccountsClient("subid", cred, &options)
	res, err := client.ListKeys(ctx,
		"rg1",
		"ddb1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBDatabaseAccountListKeys.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcosmos.DatabaseAccountListKeysResult{
			PrimaryReadonlyMasterKey:   to.Ptr("primaryReadonlyMasterKey"),
			SecondaryReadonlyMasterKey: to.Ptr("secondaryReadonlyMasterKey"),
			PrimaryMasterKey:           to.Ptr("primaryMasterKey"),
			SecondaryMasterKey:         to.Ptr("secondaryMasterKey"),
		}
		if !reflect.DeepEqual(exampleRes, res.DatabaseAccountListKeysResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DatabaseAccountListKeysResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBDatabaseAccountListKeys.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDatabaseAccounts_ListConnectionStrings(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBDatabaseAccountListConnectionStrings.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBDatabaseAccountListConnectionStrings"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewDatabaseAccountsClient("subid", cred, &options)
	res, err := client.ListConnectionStrings(ctx,
		"rg1",
		"ddb1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBDatabaseAccountListConnectionStrings.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcosmos.DatabaseAccountListConnectionStringsResult{}
		if !reflect.DeepEqual(exampleRes, res.DatabaseAccountListConnectionStringsResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DatabaseAccountListConnectionStringsResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBDatabaseAccountListConnectionStrings.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}

	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBDatabaseAccountListConnectionStringsMongo.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBDatabaseAccountListConnectionStringsMongo"},
	})
	client = armcosmos.NewDatabaseAccountsClient("subid", cred, &options)
	res, err = client.ListConnectionStrings(ctx,
		"rg1",
		"mongo-ddb1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBDatabaseAccountListConnectionStringsMongo.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcosmos.DatabaseAccountListConnectionStringsResult{
			ConnectionStrings: []*armcosmos.DatabaseAccountConnectionString{
				{
					Description:      to.Ptr("Name of the connection string"),
					ConnectionString: to.Ptr("connection-string"),
				}},
		}
		if !reflect.DeepEqual(exampleRes, res.DatabaseAccountListConnectionStringsResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DatabaseAccountListConnectionStringsResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBDatabaseAccountListConnectionStringsMongo.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDatabaseAccounts_OfflineRegion(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBDatabaseAccountOfflineRegion.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBDatabaseAccountOfflineRegion"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewDatabaseAccountsClient("subid", cred, &options)
	poller, err := client.BeginOfflineRegion(ctx,
		"rg1",
		"ddb1",
		armcosmos.RegionForOnlineOffline{},
		&armcosmos.DatabaseAccountsClientBeginOfflineRegionOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBDatabaseAccountOfflineRegion.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBDatabaseAccountOfflineRegion.json: %v", err)
	}
}

func TestDatabaseAccounts_OnlineRegion(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBDatabaseAccountOnlineRegion.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBDatabaseAccountOnlineRegion"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewDatabaseAccountsClient("subid", cred, &options)
	poller, err := client.BeginOnlineRegion(ctx,
		"rg1",
		"ddb1",
		armcosmos.RegionForOnlineOffline{},
		&armcosmos.DatabaseAccountsClientBeginOnlineRegionOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBDatabaseAccountOnlineRegion.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBDatabaseAccountOnlineRegion.json: %v", err)
	}
}

func TestDatabaseAccounts_GetReadOnlyKeys(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBDatabaseAccountListReadOnlyKeys.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBDatabaseAccountListReadOnlyKeys"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewDatabaseAccountsClient("subid", cred, &options)
	res, err := client.GetReadOnlyKeys(ctx,
		"rg1",
		"ddb1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBDatabaseAccountListReadOnlyKeys.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcosmos.DatabaseAccountListReadOnlyKeysResult{
			PrimaryReadonlyMasterKey:   to.Ptr("primaryReadonlyMasterKey"),
			SecondaryReadonlyMasterKey: to.Ptr("secondaryReadonlyMasterKey"),
		}
		if !reflect.DeepEqual(exampleRes, res.DatabaseAccountListReadOnlyKeysResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DatabaseAccountListReadOnlyKeysResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBDatabaseAccountListReadOnlyKeys.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDatabaseAccounts_ListReadOnlyKeys(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBDatabaseAccountListReadOnlyKeys.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBDatabaseAccountListReadOnlyKeys"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewDatabaseAccountsClient("subid", cred, &options)
	res, err := client.ListReadOnlyKeys(ctx,
		"rg1",
		"ddb1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBDatabaseAccountListReadOnlyKeys.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcosmos.DatabaseAccountListReadOnlyKeysResult{
			PrimaryReadonlyMasterKey:   to.Ptr("primaryReadonlyMasterKey"),
			SecondaryReadonlyMasterKey: to.Ptr("secondaryReadonlyMasterKey"),
		}
		if !reflect.DeepEqual(exampleRes, res.DatabaseAccountListReadOnlyKeysResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DatabaseAccountListReadOnlyKeysResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBDatabaseAccountListReadOnlyKeys.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDatabaseAccounts_RegenerateKey(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBDatabaseAccountRegenerateKey.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBDatabaseAccountRegenerateKey"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewDatabaseAccountsClient("subid", cred, &options)
	poller, err := client.BeginRegenerateKey(ctx,
		"rg1",
		"ddb1",
		armcosmos.DatabaseAccountRegenerateKeyParameters{
			KeyKind: to.Ptr(armcosmos.KeyKindPrimary),
		},
		&armcosmos.DatabaseAccountsClientBeginRegenerateKeyOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBDatabaseAccountRegenerateKey.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBDatabaseAccountRegenerateKey.json: %v", err)
	}
}

func TestDatabaseAccounts_CheckNameExists(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBDatabaseAccountCheckNameExists.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBDatabaseAccountCheckNameExists"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewDatabaseAccountsClient("<subscription-id>", cred, &options)
	_, err := client.CheckNameExists(ctx,
		"ddb1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBDatabaseAccountCheckNameExists.json: %v", err)
	}
}

func TestDatabaseAccounts_ListMetrics(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBDatabaseAccountGetMetrics.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBDatabaseAccountGetMetrics"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewDatabaseAccountsClient("subid", cred, &options)
	pager := client.ListMetrics("rg1",
		"ddb1",
		"$filter=(name.value eq 'Total Requests') and timeGrain eq duration'PT5M' and startTime eq '2017-11-19T23:53:55.2780000Z' and endTime eq '2017-11-20T00:13:55.2780000Z",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBDatabaseAccountGetMetrics.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcosmos.MetricListResult{
			Value: []*armcosmos.Metric{
				{
					Name: &armcosmos.MetricName{
						LocalizedValue: to.Ptr("Total Requests"),
						Value:          to.Ptr("Total Requests"),
					},
					EndTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-20T00:13:55.2780000Z"); return t }()),
					MetricValues: []*armcosmos.MetricValue{
						{
							Count:     to.Ptr[int32](0),
							Average:   to.Ptr[float64](0),
							Timestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-19T23:53:55.2780000Z"); return t }()),
							Total:     to.Ptr[float64](0),
						},
						{
							Count:     to.Ptr[int32](0),
							Average:   to.Ptr[float64](0),
							Timestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-19T23:58:55.2780000Z"); return t }()),
							Total:     to.Ptr[float64](0),
						},
						{
							Count:     to.Ptr[int32](0),
							Average:   to.Ptr[float64](0),
							Timestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-20T00:03:55.2780000Z"); return t }()),
							Total:     to.Ptr[float64](0),
						},
						{
							Count:     to.Ptr[int32](0),
							Average:   to.Ptr[float64](0),
							Timestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-20T00:08:55.2780000Z"); return t }()),
							Total:     to.Ptr[float64](0),
						}},
					StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-19T23:53:55.2780000Z"); return t }()),
					TimeGrain: to.Ptr("PT5M"),
					Unit:      to.Ptr(armcosmos.UnitTypeCount),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.MetricListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.MetricListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBDatabaseAccountGetMetrics.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDatabaseAccounts_ListUsages(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBDatabaseAccountGetUsages.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBDatabaseAccountGetUsages"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewDatabaseAccountsClient("subid", cred, &options)
	pager := client.ListUsages("rg1",
		"ddb1",
		&armcosmos.DatabaseAccountsClientListUsagesOptions{Filter: to.Ptr("$filter=name.value eq 'Storage'")})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBDatabaseAccountGetUsages.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcosmos.UsagesResult{
			Value: []*armcosmos.Usage{
				{
					Name: &armcosmos.MetricName{
						LocalizedValue: to.Ptr("Storage"),
						Value:          to.Ptr("Storage"),
					},
					CurrentValue: to.Ptr[int64](0),
					Limit:        to.Ptr[int64](10737418240),
					QuotaPeriod:  to.Ptr("P1D"),
					Unit:         to.Ptr(armcosmos.UnitTypeBytes),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.UsagesResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.UsagesResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBDatabaseAccountGetUsages.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDatabaseAccounts_ListMetricDefinitions(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBDatabaseAccountGetMetricDefinitions.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBDatabaseAccountGetMetricDefinitions"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewDatabaseAccountsClient("subid", cred, &options)
	pager := client.ListMetricDefinitions("rg1",
		"ddb1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBDatabaseAccountGetMetricDefinitions.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcosmos.MetricDefinitionsListResult{
			Value: []*armcosmos.MetricDefinition{
				{
					Name: &armcosmos.MetricName{
						LocalizedValue: to.Ptr("Total Requests"),
						Value:          to.Ptr("Total Requests"),
					},
					MetricAvailabilities: []*armcosmos.MetricAvailability{
						{
							Retention: to.Ptr("P2D"),
							TimeGrain: to.Ptr("PT5M"),
						},
						{
							Retention: to.Ptr("P14D"),
							TimeGrain: to.Ptr("PT1H"),
						},
						{
							Retention: to.Ptr("P60D"),
							TimeGrain: to.Ptr("P1D"),
						}},
					PrimaryAggregationType: to.Ptr(armcosmos.PrimaryAggregationTypeTotal),
					ResourceURI:            to.Ptr("/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1"),
					Unit:                   to.Ptr(armcosmos.UnitTypeCount),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.MetricDefinitionsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.MetricDefinitionsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBDatabaseAccountGetMetricDefinitions.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestOperations_List(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBOperationsList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBOperationsList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewOperationsClient(cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBOperationsList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcosmos.OperationListResult{
			Value: []*armcosmos.Operation{
				{
					Name: to.Ptr("operationName"),
					Display: &armcosmos.OperationDisplay{
						Description: to.Ptr("description"),
						Operation:   to.Ptr("operationName"),
						Provider:    to.Ptr("providerName"),
						Resource:    to.Ptr("resourceName"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OperationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OperationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBOperationsList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDatabase_ListMetrics(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBDatabaseGetMetrics.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBDatabaseGetMetrics"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewDatabaseClient("subid", cred, &options)
	pager := client.ListMetrics("rg1",
		"ddb1",
		"rid",
		"$filter=(name.value eq 'Total Requests') and timeGrain eq duration'PT5M' and startTime eq '2017-11-19T23:53:55.2780000Z' and endTime eq '2017-11-20T00:13:55.2780000Z",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBDatabaseGetMetrics.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcosmos.MetricListResult{
			Value: []*armcosmos.Metric{
				{
					Name: &armcosmos.MetricName{
						LocalizedValue: to.Ptr("Total Requests"),
						Value:          to.Ptr("Total Requests"),
					},
					EndTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-20T00:13:55.2780000Z"); return t }()),
					MetricValues: []*armcosmos.MetricValue{
						{
							Count:     to.Ptr[int32](0),
							Average:   to.Ptr[float64](0),
							Timestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-19T23:53:55.2780000Z"); return t }()),
							Total:     to.Ptr[float64](0),
						},
						{
							Count:     to.Ptr[int32](0),
							Average:   to.Ptr[float64](0),
							Timestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-19T23:58:55.2780000Z"); return t }()),
							Total:     to.Ptr[float64](0),
						},
						{
							Count:     to.Ptr[int32](0),
							Average:   to.Ptr[float64](0),
							Timestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-20T00:03:55.2780000Z"); return t }()),
							Total:     to.Ptr[float64](0),
						},
						{
							Count:     to.Ptr[int32](0),
							Average:   to.Ptr[float64](0),
							Timestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-20T00:08:55.2780000Z"); return t }()),
							Total:     to.Ptr[float64](0),
						}},
					StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-19T23:53:55.2780000Z"); return t }()),
					TimeGrain: to.Ptr("PT5M"),
					Unit:      to.Ptr(armcosmos.UnitTypeCount),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.MetricListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.MetricListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBDatabaseGetMetrics.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDatabase_ListUsages(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBDatabaseGetUsages.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBDatabaseGetUsages"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewDatabaseClient("subid", cred, &options)
	pager := client.ListUsages("rg1",
		"ddb1",
		"databaseRid",
		&armcosmos.DatabaseClientListUsagesOptions{Filter: to.Ptr("$filter=name.value eq 'Storage'")})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBDatabaseGetUsages.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcosmos.UsagesResult{
			Value: []*armcosmos.Usage{
				{
					Name: &armcosmos.MetricName{
						LocalizedValue: to.Ptr("Storage"),
						Value:          to.Ptr("Storage"),
					},
					CurrentValue: to.Ptr[int64](0),
					Limit:        to.Ptr[int64](10737418240),
					QuotaPeriod:  to.Ptr("P1D"),
					Unit:         to.Ptr(armcosmos.UnitTypeBytes),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.UsagesResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.UsagesResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBDatabaseGetUsages.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDatabase_ListMetricDefinitions(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBDatabaseGetMetricDefinitions.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBDatabaseGetMetricDefinitions"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewDatabaseClient("subid", cred, &options)
	pager := client.ListMetricDefinitions("rg1",
		"ddb1",
		"databaseRid",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBDatabaseGetMetricDefinitions.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcosmos.MetricDefinitionsListResult{
			Value: []*armcosmos.MetricDefinition{
				{
					Name: &armcosmos.MetricName{
						LocalizedValue: to.Ptr("Total Requests"),
						Value:          to.Ptr("Total Requests"),
					},
					MetricAvailabilities: []*armcosmos.MetricAvailability{
						{
							Retention: to.Ptr("P2D"),
							TimeGrain: to.Ptr("PT5M"),
						},
						{
							Retention: to.Ptr("P14D"),
							TimeGrain: to.Ptr("PT1H"),
						},
						{
							Retention: to.Ptr("P60D"),
							TimeGrain: to.Ptr("P1D"),
						}},
					PrimaryAggregationType: to.Ptr(armcosmos.PrimaryAggregationTypeTotal),
					ResourceURI:            to.Ptr("/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1"),
					Unit:                   to.Ptr(armcosmos.UnitTypeCount),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.MetricDefinitionsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.MetricDefinitionsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBDatabaseGetMetricDefinitions.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCollection_ListMetrics(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBCollectionGetMetrics.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBCollectionGetMetrics"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewCollectionClient("subid", cred, &options)
	pager := client.ListMetrics("rg1",
		"ddb1",
		"databaseRid",
		"collectionRid",
		"$filter=(name.value eq 'Total Requests') and timeGrain eq duration'PT5M' and startTime eq '2017-11-19T23:53:55.2780000Z' and endTime eq '2017-11-20T00:13:55.2780000Z",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBCollectionGetMetrics.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcosmos.MetricListResult{
			Value: []*armcosmos.Metric{
				{
					Name: &armcosmos.MetricName{
						LocalizedValue: to.Ptr("Total Requests"),
						Value:          to.Ptr("Total Requests"),
					},
					EndTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-20T00:13:55.2780000Z"); return t }()),
					MetricValues: []*armcosmos.MetricValue{
						{
							Count:     to.Ptr[int32](0),
							Average:   to.Ptr[float64](0),
							Timestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-19T23:53:55.2780000Z"); return t }()),
							Total:     to.Ptr[float64](0),
						},
						{
							Count:     to.Ptr[int32](0),
							Average:   to.Ptr[float64](0),
							Timestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-19T23:58:55.2780000Z"); return t }()),
							Total:     to.Ptr[float64](0),
						},
						{
							Count:     to.Ptr[int32](0),
							Average:   to.Ptr[float64](0),
							Timestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-20T00:03:55.2780000Z"); return t }()),
							Total:     to.Ptr[float64](0),
						},
						{
							Count:     to.Ptr[int32](0),
							Average:   to.Ptr[float64](0),
							Timestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-20T00:08:55.2780000Z"); return t }()),
							Total:     to.Ptr[float64](0),
						}},
					StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-19T23:53:55.2780000Z"); return t }()),
					TimeGrain: to.Ptr("PT5M"),
					Unit:      to.Ptr(armcosmos.UnitTypeCount),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.MetricListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.MetricListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBCollectionGetMetrics.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCollection_ListUsages(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBCollectionGetUsages.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBCollectionGetUsages"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewCollectionClient("subid", cred, &options)
	pager := client.ListUsages("rg1",
		"ddb1",
		"databaseRid",
		"collectionRid",
		&armcosmos.CollectionClientListUsagesOptions{Filter: to.Ptr("$filter=name.value eq 'Storage'")})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBCollectionGetUsages.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcosmos.UsagesResult{
			Value: []*armcosmos.Usage{
				{
					Name: &armcosmos.MetricName{
						LocalizedValue: to.Ptr("Storage"),
						Value:          to.Ptr("Storage"),
					},
					CurrentValue: to.Ptr[int64](0),
					Limit:        to.Ptr[int64](10737418240),
					QuotaPeriod:  to.Ptr("P1D"),
					Unit:         to.Ptr(armcosmos.UnitTypeBytes),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.UsagesResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.UsagesResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBCollectionGetUsages.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCollection_ListMetricDefinitions(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBCollectionGetMetricDefinitions.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBCollectionGetMetricDefinitions"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewCollectionClient("subid", cred, &options)
	pager := client.ListMetricDefinitions("rg1",
		"ddb1",
		"databaseRid",
		"collectionRid",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBCollectionGetMetricDefinitions.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcosmos.MetricDefinitionsListResult{
			Value: []*armcosmos.MetricDefinition{
				{
					Name: &armcosmos.MetricName{
						LocalizedValue: to.Ptr("Total Requests"),
						Value:          to.Ptr("Total Requests"),
					},
					MetricAvailabilities: []*armcosmos.MetricAvailability{
						{
							Retention: to.Ptr("P2D"),
							TimeGrain: to.Ptr("PT5M"),
						},
						{
							Retention: to.Ptr("P14D"),
							TimeGrain: to.Ptr("PT1H"),
						},
						{
							Retention: to.Ptr("P60D"),
							TimeGrain: to.Ptr("P1D"),
						}},
					PrimaryAggregationType: to.Ptr(armcosmos.PrimaryAggregationTypeTotal),
					ResourceURI:            to.Ptr("/subscriptions/subId/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1"),
					Unit:                   to.Ptr(armcosmos.UnitTypeCount),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.MetricDefinitionsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.MetricDefinitionsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBCollectionGetMetricDefinitions.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCollectionRegion_ListMetrics(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBRegionCollectionGetMetrics.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBRegionCollectionGetMetrics"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewCollectionRegionClient("subid", cred, &options)
	pager := client.ListMetrics("rg1",
		"ddb1",
		"North Europe",
		"databaseRid",
		"collectionRid",
		"$filter=(name.value eq 'Total Requests') and timeGrain eq duration'PT5M' and startTime eq '2017-11-19T23:53:55.2780000Z' and endTime eq '2017-11-20T00:13:55.2780000Z",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBRegionCollectionGetMetrics.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcosmos.MetricListResult{
			Value: []*armcosmos.Metric{
				{
					Name: &armcosmos.MetricName{
						LocalizedValue: to.Ptr("Total Requests"),
						Value:          to.Ptr("Total Requests"),
					},
					EndTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-20T00:13:55.2780000Z"); return t }()),
					MetricValues: []*armcosmos.MetricValue{
						{
							Count:     to.Ptr[int32](0),
							Average:   to.Ptr[float64](0),
							Timestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-19T23:53:55.2780000Z"); return t }()),
							Total:     to.Ptr[float64](0),
						},
						{
							Count:     to.Ptr[int32](0),
							Average:   to.Ptr[float64](0),
							Timestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-19T23:58:55.2780000Z"); return t }()),
							Total:     to.Ptr[float64](0),
						},
						{
							Count:     to.Ptr[int32](0),
							Average:   to.Ptr[float64](0),
							Timestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-20T00:03:55.2780000Z"); return t }()),
							Total:     to.Ptr[float64](0),
						},
						{
							Count:     to.Ptr[int32](0),
							Average:   to.Ptr[float64](0),
							Timestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-20T00:08:55.2780000Z"); return t }()),
							Total:     to.Ptr[float64](0),
						}},
					StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-19T23:53:55.2780000Z"); return t }()),
					TimeGrain: to.Ptr("PT5M"),
					Unit:      to.Ptr(armcosmos.UnitTypeCount),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.MetricListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.MetricListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBRegionCollectionGetMetrics.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestDatabaseAccountRegion_ListMetrics(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBDatabaseAccountRegionGetMetrics.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBDatabaseAccountRegionGetMetrics"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewDatabaseAccountRegionClient("subid", cred, &options)
	pager := client.ListMetrics("rg1",
		"ddb1",
		"North Europe",
		"$filter=(name.value eq 'Total Requests') and timeGrain eq duration'PT5M' and startTime eq '2017-11-19T23:53:55.2780000Z' and endTime eq '2017-11-20T00:13:55.2780000Z",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBDatabaseAccountRegionGetMetrics.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcosmos.MetricListResult{
			Value: []*armcosmos.Metric{
				{
					Name: &armcosmos.MetricName{
						LocalizedValue: to.Ptr("Total Requests"),
						Value:          to.Ptr("Total Requests"),
					},
					EndTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-20T00:13:55.2780000Z"); return t }()),
					MetricValues: []*armcosmos.MetricValue{
						{
							Count:     to.Ptr[int32](0),
							Average:   to.Ptr[float64](0),
							Timestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-19T23:53:55.2780000Z"); return t }()),
							Total:     to.Ptr[float64](0),
						},
						{
							Count:     to.Ptr[int32](0),
							Average:   to.Ptr[float64](0),
							Timestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-19T23:58:55.2780000Z"); return t }()),
							Total:     to.Ptr[float64](0),
						},
						{
							Count:     to.Ptr[int32](0),
							Average:   to.Ptr[float64](0),
							Timestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-20T00:03:55.2780000Z"); return t }()),
							Total:     to.Ptr[float64](0),
						},
						{
							Count:     to.Ptr[int32](0),
							Average:   to.Ptr[float64](0),
							Timestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-20T00:08:55.2780000Z"); return t }()),
							Total:     to.Ptr[float64](0),
						}},
					StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-19T23:53:55.2780000Z"); return t }()),
					TimeGrain: to.Ptr("PT5M"),
					Unit:      to.Ptr(armcosmos.UnitTypeCount),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.MetricListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.MetricListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBDatabaseAccountRegionGetMetrics.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPercentileSourceTarget_ListMetrics(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBPercentileSourceTargetGetMetrics.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBDatabaseAccountRegionGetMetrics"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewPercentileSourceTargetClient("subid", cred, &options)
	pager := client.ListMetrics("rg1",
		"ddb1",
		"West Central US",
		"East US",
		"$filter=(name.value eq 'Probabilistic Bounded Staleness') and timeGrain eq duration'PT5M' and startTime eq '2017-11-19T23:53:55.2780000Z' and endTime eq '2017-11-20T00:13:55.2780000Z",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBPercentileSourceTargetGetMetrics.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcosmos.PercentileMetricListResult{
			Value: []*armcosmos.PercentileMetric{
				{
					Name: &armcosmos.MetricName{
						LocalizedValue: to.Ptr("Probabilistic Bounded Staleness-S-West Central US-T-East US"),
						Value:          to.Ptr("Probabilistic Bounded Staleness-S-West Central US-T-East US"),
					},
					EndTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-20T00:13:55.2780000Z"); return t }()),
					MetricValues: []*armcosmos.PercentileMetricValue{
						{
							Timestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-19T23:53:55.2780000Z"); return t }()),
							P10:       to.Ptr[float64](1.11),
							P25:       to.Ptr[float64](2.5),
							P50:       to.Ptr[float64](4.34),
							P75:       to.Ptr[float64](5.2),
							P90:       to.Ptr[float64](6.77),
							P95:       to.Ptr[float64](7.1),
							P99:       to.Ptr[float64](8.3),
						}},
					StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-19T23:53:55.2780000Z"); return t }()),
					TimeGrain: to.Ptr("PT5M"),
					Unit:      to.Ptr(armcosmos.UnitTypeMilliseconds),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PercentileMetricListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PercentileMetricListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBPercentileSourceTargetGetMetrics.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPercentileTarget_ListMetrics(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBPercentileTargetGetMetrics.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBDatabaseAccountRegionGetMetrics"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewPercentileTargetClient("subid", cred, &options)
	pager := client.ListMetrics("rg1",
		"ddb1",
		"East US",
		"$filter=(name.value eq 'Probabilistic Bounded Staleness') and timeGrain eq duration'PT5M' and startTime eq '2017-11-19T23:53:55.2780000Z' and endTime eq '2017-11-20T00:13:55.2780000Z",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBPercentileTargetGetMetrics.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcosmos.PercentileMetricListResult{
			Value: []*armcosmos.PercentileMetric{
				{
					Name: &armcosmos.MetricName{
						LocalizedValue: to.Ptr("Probabilistic Bounded Staleness-S-West Central US-T-East US"),
						Value:          to.Ptr("Probabilistic Bounded Staleness-S-West Central US-T-East US"),
					},
					EndTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-20T00:13:55.2780000Z"); return t }()),
					MetricValues: []*armcosmos.PercentileMetricValue{
						{
							Timestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-19T23:53:55.2780000Z"); return t }()),
							P10:       to.Ptr[float64](1.11),
							P25:       to.Ptr[float64](2.5),
							P50:       to.Ptr[float64](4.34),
							P75:       to.Ptr[float64](5.2),
							P90:       to.Ptr[float64](6.77),
							P95:       to.Ptr[float64](7.1),
							P99:       to.Ptr[float64](8.3),
						}},
					StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-19T23:53:55.2780000Z"); return t }()),
					TimeGrain: to.Ptr("PT5M"),
					Unit:      to.Ptr(armcosmos.UnitTypeMilliseconds),
				},
				{
					Name: &armcosmos.MetricName{
						LocalizedValue: to.Ptr("Probabilistic Bounded Staleness-S-West Central US-T-West US"),
						Value:          to.Ptr("Probabilistic Bounded Staleness-S-West US-T-East US"),
					},
					EndTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-20T00:13:55.2780000Z"); return t }()),
					MetricValues: []*armcosmos.PercentileMetricValue{
						{
							Timestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-19T23:53:55.2780000Z"); return t }()),
							P10:       to.Ptr[float64](1.11),
							P25:       to.Ptr[float64](2.5),
							P50:       to.Ptr[float64](4.34),
							P75:       to.Ptr[float64](5.2),
							P90:       to.Ptr[float64](6.77),
							P95:       to.Ptr[float64](7.1),
							P99:       to.Ptr[float64](8.3),
						}},
					StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-19T23:53:55.2780000Z"); return t }()),
					TimeGrain: to.Ptr("PT5M"),
					Unit:      to.Ptr(armcosmos.UnitTypeMilliseconds),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PercentileMetricListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PercentileMetricListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBPercentileTargetGetMetrics.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPercentile_ListMetrics(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBPercentileGetMetrics.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBDatabaseAccountRegionGetMetrics"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewPercentileClient("subid", cred, &options)
	pager := client.ListMetrics("rg1",
		"ddb1",
		"$filter=(name.value eq 'Probabilistic Bounded Staleness') and timeGrain eq duration'PT5M' and startTime eq '2017-11-19T23:53:55.2780000Z' and endTime eq '2017-11-20T00:13:55.2780000Z",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBPercentileGetMetrics.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcosmos.PercentileMetricListResult{
			Value: []*armcosmos.PercentileMetric{
				{
					Name: &armcosmos.MetricName{
						LocalizedValue: to.Ptr("Probabilistic Bounded Staleness-S-West Central US-T-East US"),
						Value:          to.Ptr("Probabilistic Bounded Staleness-S-West Central US-T-East US"),
					},
					EndTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-20T00:13:55.2780000Z"); return t }()),
					MetricValues: []*armcosmos.PercentileMetricValue{
						{
							Timestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-19T23:53:55.2780000Z"); return t }()),
							P10:       to.Ptr[float64](1.11),
							P25:       to.Ptr[float64](2.5),
							P50:       to.Ptr[float64](4.34),
							P75:       to.Ptr[float64](5.2),
							P90:       to.Ptr[float64](6.77),
							P95:       to.Ptr[float64](7.1),
							P99:       to.Ptr[float64](8.3),
						}},
					StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-19T23:53:55.2780000Z"); return t }()),
					TimeGrain: to.Ptr("PT5M"),
					Unit:      to.Ptr(armcosmos.UnitTypeMilliseconds),
				},
				{
					Name: &armcosmos.MetricName{
						LocalizedValue: to.Ptr("Probabilistic Bounded Staleness-S-West Central US-T-West US"),
						Value:          to.Ptr("Probabilistic Bounded Staleness-S-West Central US-T-West US"),
					},
					EndTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-20T00:13:55.2780000Z"); return t }()),
					MetricValues: []*armcosmos.PercentileMetricValue{
						{
							Timestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-19T23:53:55.2780000Z"); return t }()),
							P10:       to.Ptr[float64](1.11),
							P25:       to.Ptr[float64](2.5),
							P50:       to.Ptr[float64](4.34),
							P75:       to.Ptr[float64](5.2),
							P90:       to.Ptr[float64](6.77),
							P95:       to.Ptr[float64](7.1),
							P99:       to.Ptr[float64](8.3),
						}},
					StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-19T23:53:55.2780000Z"); return t }()),
					TimeGrain: to.Ptr("PT5M"),
					Unit:      to.Ptr(armcosmos.UnitTypeMilliseconds),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PercentileMetricListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PercentileMetricListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBPercentileGetMetrics.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCollectionPartitionRegion_ListMetrics(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBCollectionPartitionRegionGetMetrics.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBDatabaseAccountRegionGetMetrics"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewCollectionPartitionRegionClient("subid", cred, &options)
	pager := client.ListMetrics("rg1",
		"ddb1",
		"North Europe",
		"databaseRid",
		"collectionRid",
		"$filter=(name.value eq 'Max RUs Per Second') and timeGrain eq duration'PT1M' and startTime eq '2017-11-19T23:53:55.2780000Z' and endTime eq '2017-11-20T23:58:55.2780000Z",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBCollectionPartitionRegionGetMetrics.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcosmos.PartitionMetricListResult{
			Value: []*armcosmos.PartitionMetric{
				{
					Name: &armcosmos.MetricName{
						LocalizedValue: to.Ptr("Max RUs Per Second"),
						Value:          to.Ptr("Max RUs Per Second"),
					},
					EndTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-20T23:58:55.2780000Z"); return t }()),
					MetricValues: []*armcosmos.MetricValue{
						{
							Maximum:   to.Ptr[float64](5),
							Timestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-19T23:53:55.2780000Z"); return t }()),
						},
						{
							Maximum:   to.Ptr[float64](5),
							Timestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-19T23:54:55.2780000Z"); return t }()),
						},
						{
							Maximum:   to.Ptr[float64](5),
							Timestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-19T23:55:55.2780000Z"); return t }()),
						},
						{
							Maximum:   to.Ptr[float64](5),
							Timestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-19T23:56:55.2780000Z"); return t }()),
						},
						{
							Maximum:   to.Ptr[float64](5),
							Timestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-19T23:57:55.2780000Z"); return t }()),
						},
						{
							Maximum:   to.Ptr[float64](5),
							Timestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-19T23:58:55.2780000Z"); return t }()),
						}},
					StartTime:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-19T23:53:55.2780000Z"); return t }()),
					TimeGrain:           to.Ptr("PT1M"),
					Unit:                to.Ptr(armcosmos.UnitTypeCount),
					PartitionID:         to.Ptr("00000000-0000-0000-0000-000000000000"),
					PartitionKeyRangeID: to.Ptr("0"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PartitionMetricListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PartitionMetricListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBCollectionPartitionRegionGetMetrics.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCollectionPartition_ListMetrics(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBCollectionPartitionGetMetrics.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBDatabaseAccountRegionGetMetrics"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewCollectionPartitionClient("subid", cred, &options)
	pager := client.ListMetrics("rg1",
		"ddb1",
		"databaseRid",
		"collectionRid",
		"$filter=(name.value eq 'Max RUs Per Second') and timeGrain eq duration'PT1M' and startTime eq '2017-11-19T23:53:55.2780000Z' and endTime eq '2017-11-20T23:58:55.2780000Z",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBCollectionPartitionGetMetrics.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcosmos.PartitionMetricListResult{
			Value: []*armcosmos.PartitionMetric{
				{
					Name: &armcosmos.MetricName{
						LocalizedValue: to.Ptr("Max RUs Per Second"),
						Value:          to.Ptr("Max RUs Per Second"),
					},
					EndTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-20T23:58:55.2780000Z"); return t }()),
					MetricValues: []*armcosmos.MetricValue{
						{
							Maximum:   to.Ptr[float64](5),
							Timestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-19T23:53:55.2780000Z"); return t }()),
						},
						{
							Maximum:   to.Ptr[float64](5),
							Timestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-19T23:54:55.2780000Z"); return t }()),
						},
						{
							Maximum:   to.Ptr[float64](5),
							Timestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-19T23:55:55.2780000Z"); return t }()),
						},
						{
							Maximum:   to.Ptr[float64](5),
							Timestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-19T23:56:55.2780000Z"); return t }()),
						},
						{
							Maximum:   to.Ptr[float64](5),
							Timestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-19T23:57:55.2780000Z"); return t }()),
						},
						{
							Maximum:   to.Ptr[float64](5),
							Timestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-19T23:58:55.2780000Z"); return t }()),
						}},
					StartTime:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-19T23:53:55.2780000Z"); return t }()),
					TimeGrain:           to.Ptr("PT1M"),
					Unit:                to.Ptr(armcosmos.UnitTypeCount),
					PartitionID:         to.Ptr("00000000-0000-0000-0000-000000000000"),
					PartitionKeyRangeID: to.Ptr("0"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PartitionMetricListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PartitionMetricListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBCollectionPartitionGetMetrics.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCollectionPartition_ListUsages(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBCollectionPartitionGetUsages.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBCollectionGetUsages"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewCollectionPartitionClient("subid", cred, &options)
	pager := client.ListUsages("rg1",
		"ddb1",
		"databaseRid",
		"collectionRid",
		&armcosmos.CollectionPartitionClientListUsagesOptions{Filter: to.Ptr("$filter=name.value eq 'Partition Storage'")})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBCollectionPartitionGetUsages.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcosmos.PartitionUsagesResult{
			Value: []*armcosmos.PartitionUsage{
				{
					Name: &armcosmos.MetricName{
						LocalizedValue: to.Ptr("Storage"),
						Value:          to.Ptr("Storage"),
					},
					CurrentValue:        to.Ptr[int64](0),
					Limit:               to.Ptr[int64](10737418240),
					QuotaPeriod:         to.Ptr("P1D"),
					Unit:                to.Ptr(armcosmos.UnitTypeBytes),
					PartitionID:         to.Ptr("00000000-0000-0000-0000-000000000000"),
					PartitionKeyRangeID: to.Ptr("0"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PartitionUsagesResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PartitionUsagesResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBCollectionPartitionGetUsages.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPartitionKeyRangeID_ListMetrics(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBPKeyRangeIdGetMetrics.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBDatabaseAccountRegionGetMetrics"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewPartitionKeyRangeIDClient("subid", cred, &options)
	pager := client.ListMetrics("rg1",
		"ddb1",
		"databaseRid",
		"collectionRid",
		"0",
		"$filter=(name.value eq 'Max RUs Per Second') and timeGrain eq duration'PT1M' and startTime eq '2017-11-19T23:53:55.2780000Z' and endTime eq '2017-11-20T23:58:55.2780000Z",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBPKeyRangeIdGetMetrics.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcosmos.PartitionMetricListResult{
			Value: []*armcosmos.PartitionMetric{
				{
					Name: &armcosmos.MetricName{
						LocalizedValue: to.Ptr("Max RUs Per Second"),
						Value:          to.Ptr("Max RUs Per Second"),
					},
					EndTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-20T23:58:55.2780000Z"); return t }()),
					MetricValues: []*armcosmos.MetricValue{
						{
							Maximum:   to.Ptr[float64](5),
							Timestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-19T23:53:55.2780000Z"); return t }()),
						},
						{
							Maximum:   to.Ptr[float64](5),
							Timestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-19T23:54:55.2780000Z"); return t }()),
						},
						{
							Maximum:   to.Ptr[float64](5),
							Timestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-19T23:55:55.2780000Z"); return t }()),
						},
						{
							Maximum:   to.Ptr[float64](5),
							Timestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-19T23:56:55.2780000Z"); return t }()),
						},
						{
							Maximum:   to.Ptr[float64](5),
							Timestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-19T23:57:55.2780000Z"); return t }()),
						},
						{
							Maximum:   to.Ptr[float64](5),
							Timestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-19T23:58:55.2780000Z"); return t }()),
						}},
					StartTime:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-19T23:53:55.2780000Z"); return t }()),
					TimeGrain:           to.Ptr("PT1M"),
					Unit:                to.Ptr(armcosmos.UnitTypeCount),
					PartitionID:         to.Ptr("00000000-0000-0000-0000-000000000000"),
					PartitionKeyRangeID: to.Ptr("0"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PartitionMetricListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PartitionMetricListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBPKeyRangeIdGetMetrics.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPartitionKeyRangeIDRegion_ListMetrics(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBPKeyRangeIdRegionGetMetrics.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBDatabaseAccountRegionGetMetrics"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewPartitionKeyRangeIDRegionClient("subid", cred, &options)
	pager := client.ListMetrics("rg1",
		"ddb1",
		"West US",
		"databaseRid",
		"collectionRid",
		"0",
		"$filter=(name.value eq 'Max RUs Per Second') and timeGrain eq duration'PT1M' and startTime eq '2017-11-19T23:53:55.2780000Z' and endTime eq '2017-11-20T23:58:55.2780000Z",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBPKeyRangeIdRegionGetMetrics.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcosmos.PartitionMetricListResult{
			Value: []*armcosmos.PartitionMetric{
				{
					Name: &armcosmos.MetricName{
						LocalizedValue: to.Ptr("Max RUs Per Second"),
						Value:          to.Ptr("Max RUs Per Second"),
					},
					EndTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-20T23:58:55.2780000Z"); return t }()),
					MetricValues: []*armcosmos.MetricValue{
						{
							Maximum:   to.Ptr[float64](5),
							Timestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-19T23:53:55.2780000Z"); return t }()),
						},
						{
							Maximum:   to.Ptr[float64](5),
							Timestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-19T23:54:55.2780000Z"); return t }()),
						},
						{
							Maximum:   to.Ptr[float64](5),
							Timestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-19T23:55:55.2780000Z"); return t }()),
						},
						{
							Maximum:   to.Ptr[float64](5),
							Timestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-19T23:56:55.2780000Z"); return t }()),
						},
						{
							Maximum:   to.Ptr[float64](5),
							Timestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-19T23:57:55.2780000Z"); return t }()),
						},
						{
							Maximum:   to.Ptr[float64](5),
							Timestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-19T23:58:55.2780000Z"); return t }()),
						}},
					StartTime:           to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-11-19T23:53:55.2780000Z"); return t }()),
					TimeGrain:           to.Ptr("PT1M"),
					Unit:                to.Ptr(armcosmos.UnitTypeCount),
					PartitionID:         to.Ptr("00000000-0000-0000-0000-000000000000"),
					PartitionKeyRangeID: to.Ptr("0"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PartitionMetricListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PartitionMetricListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBPKeyRangeIdRegionGetMetrics.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestSQLResources_RetrieveContinuousBackupInformation(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBSqlContainerBackupInformation.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBSqlContainerBackupInformation"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewSQLResourcesClient("subid", cred, &options)
	poller, err := client.BeginRetrieveContinuousBackupInformation(ctx,
		"rgName",
		"ddb1",
		"databaseName",
		"containerName",
		armcosmos.ContinuousBackupRestoreLocation{
			Location: to.Ptr("North Europe"),
		},
		&armcosmos.SQLResourcesClientBeginRetrieveContinuousBackupInformationOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBSqlContainerBackupInformation.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBSqlContainerBackupInformation.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcosmos.BackupInformation{
			ContinuousBackupInformation: &armcosmos.ContinuousBackupInformation{
				LatestRestorableTimestamp: to.Ptr("2021-02-05T02:40:50Z"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.BackupInformation) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.BackupInformation)
			t.Fatalf("Mock response is not equal to example response for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBSqlContainerBackupInformation.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestMongoDBResources_ListMongoDBDatabases(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBMongoDBDatabaseList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBMongoDBDatabaseList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewMongoDBResourcesClient("subid", cred, &options)
	pager := client.ListMongoDBDatabases("rgName",
		"ddb1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBMongoDBDatabaseList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcosmos.MongoDBDatabaseListResult{
			Value: []*armcosmos.MongoDBDatabaseGetResults{
				{
					Name:     to.Ptr("databaseName"),
					Type:     to.Ptr("Microsoft.DocumentDB/databaseAccounts/mongodbDatabases"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1/mongodbDatabases/databaseName"),
					Location: to.Ptr("West US"),
					Tags:     map[string]*string{},
					Properties: &armcosmos.MongoDBDatabaseGetProperties{
						Resource: &armcosmos.MongoDBDatabaseGetPropertiesResource{
							ID: to.Ptr("databaseName"),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.MongoDBDatabaseListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.MongoDBDatabaseListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBMongoDBDatabaseList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestMongoDBResources_GetMongoDBDatabase(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBMongoDBDatabaseGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBMongoDBDatabaseGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewMongoDBResourcesClient("subid", cred, &options)
	res, err := client.GetMongoDBDatabase(ctx,
		"rg1",
		"ddb1",
		"databaseName",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBMongoDBDatabaseGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcosmos.MongoDBDatabaseGetResults{
			Name:     to.Ptr("databaseName"),
			Type:     to.Ptr("Microsoft.DocumentDB/databaseAccounts/mongodbDatabases"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1/mongodbDatabases/databaseName"),
			Location: to.Ptr("West US"),
			Tags:     map[string]*string{},
			Properties: &armcosmos.MongoDBDatabaseGetProperties{
				Resource: &armcosmos.MongoDBDatabaseGetPropertiesResource{
					Etag: to.Ptr("\"00005900-0000-0000-0000-56f9a2630000\""),
					Rid:  to.Ptr("PD5DALigDgw="),
					Ts:   to.Ptr[float32](1459200611),
					ID:   to.Ptr("databaseName"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.MongoDBDatabaseGetResults) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.MongoDBDatabaseGetResults)
			t.Fatalf("Mock response is not equal to example response for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBMongoDBDatabaseGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestMongoDBResources_CreateUpdateMongoDBDatabase(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBMongoDBDatabaseCreateUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBMongoDBDatabaseCreateUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewMongoDBResourcesClient("subid", cred, &options)
	poller, err := client.BeginCreateUpdateMongoDBDatabase(ctx,
		"rg1",
		"ddb1",
		"databaseName",
		armcosmos.MongoDBDatabaseCreateUpdateParameters{
			Location: to.Ptr("West US"),
			Tags:     map[string]*string{},
			Properties: &armcosmos.MongoDBDatabaseCreateUpdateProperties{
				Options: &armcosmos.CreateUpdateOptions{},
				Resource: &armcosmos.MongoDBDatabaseResource{
					ID: to.Ptr("databaseName"),
				},
			},
		},
		&armcosmos.MongoDBResourcesClientBeginCreateUpdateMongoDBDatabaseOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBMongoDBDatabaseCreateUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBMongoDBDatabaseCreateUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcosmos.MongoDBDatabaseGetResults{
			Name:     to.Ptr("databaseName"),
			Type:     to.Ptr("Microsoft.DocumentDB/databaseAccounts/mongodbDatabases"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1/mongodbDatabases/databaseName"),
			Location: to.Ptr("West US"),
			Tags:     map[string]*string{},
			Properties: &armcosmos.MongoDBDatabaseGetProperties{
				Resource: &armcosmos.MongoDBDatabaseGetPropertiesResource{
					ID: to.Ptr("updatedDatabaseName"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.MongoDBDatabaseGetResults) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.MongoDBDatabaseGetResults)
			t.Fatalf("Mock response is not equal to example response for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBMongoDBDatabaseCreateUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestMongoDBResources_DeleteMongoDBDatabase(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBMongoDBDatabaseDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBMongoDBDatabaseDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewMongoDBResourcesClient("subid", cred, &options)
	poller, err := client.BeginDeleteMongoDBDatabase(ctx,
		"rg1",
		"ddb1",
		"databaseName",
		&armcosmos.MongoDBResourcesClientBeginDeleteMongoDBDatabaseOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBMongoDBDatabaseDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBMongoDBDatabaseDelete.json: %v", err)
	}
}

func TestMongoDBResources_GetMongoDBDatabaseThroughput(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBMongoDBDatabaseThroughputGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBMongoDBDatabaseThroughputGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewMongoDBResourcesClient("subid", cred, &options)
	res, err := client.GetMongoDBDatabaseThroughput(ctx,
		"rg1",
		"ddb1",
		"databaseName",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBMongoDBDatabaseThroughputGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcosmos.ThroughputSettingsGetResults{
			Name:     to.Ptr("default"),
			Type:     to.Ptr("Microsoft.DocumentDB/databaseAccounts/mongodbDatabases/throughputSettings"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1/mongodbDatabases/databaseName/throughputSettings/default"),
			Location: to.Ptr("West US"),
			Tags:     map[string]*string{},
			Properties: &armcosmos.ThroughputSettingsGetProperties{
				Resource: &armcosmos.ThroughputSettingsGetPropertiesResource{
					Etag:                to.Ptr("\"00005900-0000-0000-0000-56f9a2630000\""),
					Rid:                 to.Ptr("PD5DALigDgw="),
					Ts:                  to.Ptr[float32](1459200611),
					MinimumThroughput:   to.Ptr("400"),
					OfferReplacePending: to.Ptr("true"),
					Throughput:          to.Ptr[int32](400),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ThroughputSettingsGetResults) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ThroughputSettingsGetResults)
			t.Fatalf("Mock response is not equal to example response for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBMongoDBDatabaseThroughputGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestMongoDBResources_UpdateMongoDBDatabaseThroughput(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBMongoDBDatabaseThroughputUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBMongoDBDatabaseThroughputUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewMongoDBResourcesClient("subid", cred, &options)
	poller, err := client.BeginUpdateMongoDBDatabaseThroughput(ctx,
		"rg1",
		"ddb1",
		"databaseName",
		armcosmos.ThroughputSettingsUpdateParameters{
			Location: to.Ptr("West US"),
			Tags:     map[string]*string{},
			Properties: &armcosmos.ThroughputSettingsUpdateProperties{
				Resource: &armcosmos.ThroughputSettingsResource{
					Throughput: to.Ptr[int32](400),
				},
			},
		},
		&armcosmos.MongoDBResourcesClientBeginUpdateMongoDBDatabaseThroughputOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBMongoDBDatabaseThroughputUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBMongoDBDatabaseThroughputUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcosmos.ThroughputSettingsGetResults{
			Name:     to.Ptr("default"),
			Type:     to.Ptr("Microsoft.DocumentDB/databaseAccounts/mongodbDatabases/throughputSettings"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1/mongodbDatabases/databaseName/throughputSettings/default"),
			Location: to.Ptr("West US"),
			Tags:     map[string]*string{},
			Properties: &armcosmos.ThroughputSettingsGetProperties{
				Resource: &armcosmos.ThroughputSettingsGetPropertiesResource{
					Etag:                to.Ptr("\"00005900-0000-0000-0000-56f9a2630000\""),
					Rid:                 to.Ptr("PD5DALigDgw="),
					Ts:                  to.Ptr[float32](1459200611),
					MinimumThroughput:   to.Ptr("400"),
					OfferReplacePending: to.Ptr("true"),
					Throughput:          to.Ptr[int32](400),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ThroughputSettingsGetResults) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ThroughputSettingsGetResults)
			t.Fatalf("Mock response is not equal to example response for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBMongoDBDatabaseThroughputUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestMongoDBResources_MigrateMongoDBDatabaseToAutoscale(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBMongoDBDatabaseMigrateToAutoscale.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBMongoDBDatabaseMigrateToAutoscale"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewMongoDBResourcesClient("subid", cred, &options)
	poller, err := client.BeginMigrateMongoDBDatabaseToAutoscale(ctx,
		"rg1",
		"ddb1",
		"databaseName",
		&armcosmos.MongoDBResourcesClientBeginMigrateMongoDBDatabaseToAutoscaleOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBMongoDBDatabaseMigrateToAutoscale.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBMongoDBDatabaseMigrateToAutoscale.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcosmos.ThroughputSettingsGetResults{
			Properties: &armcosmos.ThroughputSettingsGetProperties{
				Resource: &armcosmos.ThroughputSettingsGetPropertiesResource{
					Etag: to.Ptr("\"00005900-0000-0000-0000-56f9a2630000\""),
					Rid:  to.Ptr("PD5DALigDgw="),
					Ts:   to.Ptr[float32](1459200611),
					AutoscaleSettings: &armcosmos.AutoscaleSettingsResource{
						MaxThroughput: to.Ptr[int32](4000),
					},
					MinimumThroughput:   to.Ptr("4000"),
					OfferReplacePending: to.Ptr("false"),
					Throughput:          to.Ptr[int32](400),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ThroughputSettingsGetResults) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ThroughputSettingsGetResults)
			t.Fatalf("Mock response is not equal to example response for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBMongoDBDatabaseMigrateToAutoscale.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestMongoDBResources_MigrateMongoDBDatabaseToManualThroughput(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBMongoDBDatabaseMigrateToManualThroughput.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBMongoDBDatabaseMigrateToManualThroughput"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewMongoDBResourcesClient("subid", cred, &options)
	poller, err := client.BeginMigrateMongoDBDatabaseToManualThroughput(ctx,
		"rg1",
		"ddb1",
		"databaseName",
		&armcosmos.MongoDBResourcesClientBeginMigrateMongoDBDatabaseToManualThroughputOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBMongoDBDatabaseMigrateToManualThroughput.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBMongoDBDatabaseMigrateToManualThroughput.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcosmos.ThroughputSettingsGetResults{
			Properties: &armcosmos.ThroughputSettingsGetProperties{
				Resource: &armcosmos.ThroughputSettingsGetPropertiesResource{
					Etag:                to.Ptr("\"00005900-0000-0000-0000-56f9a2630000\""),
					Rid:                 to.Ptr("PD5DALigDgw="),
					Ts:                  to.Ptr[float32](1459200611),
					MinimumThroughput:   to.Ptr("400"),
					OfferReplacePending: to.Ptr("true"),
					Throughput:          to.Ptr[int32](400),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ThroughputSettingsGetResults) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ThroughputSettingsGetResults)
			t.Fatalf("Mock response is not equal to example response for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBMongoDBDatabaseMigrateToManualThroughput.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestMongoDBResources_ListMongoDBCollections(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBMongoDBCollectionList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBMongoDBCollectionList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewMongoDBResourcesClient("subid", cred, &options)
	pager := client.ListMongoDBCollections("rgName",
		"ddb1",
		"databaseName",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBMongoDBCollectionList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcosmos.MongoDBCollectionListResult{
			Value: []*armcosmos.MongoDBCollectionGetResults{
				{
					Name:     to.Ptr("collectionName"),
					Type:     to.Ptr("Microsoft.DocumentDB/databaseAccounts/mongodbDatabases/mongodbCollections"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1/mongodbDatabases/databaseName/mongodbCollections/collectionName"),
					Location: to.Ptr("West US"),
					Tags:     map[string]*string{},
					Properties: &armcosmos.MongoDBCollectionGetProperties{
						Resource: &armcosmos.MongoDBCollectionGetPropertiesResource{
							ID: to.Ptr("testcoll"),
							Indexes: []*armcosmos.MongoIndex{
								{
									Key: &armcosmos.MongoIndexKeys{
										Keys: []*string{
											to.Ptr("testKey")},
									},
									Options: &armcosmos.MongoIndexOptions{
										ExpireAfterSeconds: to.Ptr[int32](100),
										Unique:             to.Ptr(true),
									},
								}},
							ShardKey: map[string]*string{
								"testKey": to.Ptr("Hash"),
							},
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.MongoDBCollectionListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.MongoDBCollectionListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBMongoDBCollectionList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestMongoDBResources_GetMongoDBCollection(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBMongoDBCollectionGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBMongoDBCollectionGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewMongoDBResourcesClient("subid", cred, &options)
	res, err := client.GetMongoDBCollection(ctx,
		"rgName",
		"ddb1",
		"databaseName",
		"collectionName",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBMongoDBCollectionGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcosmos.MongoDBCollectionGetResults{
			Name:     to.Ptr("collectionName"),
			Type:     to.Ptr("Microsoft.DocumentDB/databaseAccounts/mongodbDatabases/mongodbCollections"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1/mongodbDatabases/databaseName/mongodbCollections/collectionName"),
			Location: to.Ptr("West US"),
			Tags:     map[string]*string{},
			Properties: &armcosmos.MongoDBCollectionGetProperties{
				Resource: &armcosmos.MongoDBCollectionGetPropertiesResource{
					Etag: to.Ptr("\"00005900-0000-0000-0000-56f9a2630000\""),
					Rid:  to.Ptr("PD5DALigDgw="),
					Ts:   to.Ptr[float32](1459200611),
					ID:   to.Ptr("testcoll"),
					Indexes: []*armcosmos.MongoIndex{
						{
							Key: &armcosmos.MongoIndexKeys{
								Keys: []*string{
									to.Ptr("testKey")},
							},
							Options: &armcosmos.MongoIndexOptions{
								ExpireAfterSeconds: to.Ptr[int32](100),
								Unique:             to.Ptr(true),
							},
						}},
					ShardKey: map[string]*string{
						"testKey": to.Ptr("Hash"),
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.MongoDBCollectionGetResults) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.MongoDBCollectionGetResults)
			t.Fatalf("Mock response is not equal to example response for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBMongoDBCollectionGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestMongoDBResources_CreateUpdateMongoDBCollection(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBMongoDBCollectionCreateUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBMongoDBCollectionCreateUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewMongoDBResourcesClient("subid", cred, &options)
	poller, err := client.BeginCreateUpdateMongoDBCollection(ctx,
		"rg1",
		"ddb1",
		"databaseName",
		"collectionName",
		armcosmos.MongoDBCollectionCreateUpdateParameters{
			Location: to.Ptr("West US"),
			Tags:     map[string]*string{},
			Properties: &armcosmos.MongoDBCollectionCreateUpdateProperties{
				Options: &armcosmos.CreateUpdateOptions{},
				Resource: &armcosmos.MongoDBCollectionResource{
					ID: to.Ptr("collectionName"),
					Indexes: []*armcosmos.MongoIndex{
						{
							Key: &armcosmos.MongoIndexKeys{
								Keys: []*string{
									to.Ptr("_ts")},
							},
							Options: &armcosmos.MongoIndexOptions{
								ExpireAfterSeconds: to.Ptr[int32](100),
								Unique:             to.Ptr(true),
							},
						},
						{
							Key: &armcosmos.MongoIndexKeys{
								Keys: []*string{
									to.Ptr("_id")},
							},
						}},
					ShardKey: map[string]*string{
						"testKey": to.Ptr("Hash"),
					},
				},
			},
		},
		&armcosmos.MongoDBResourcesClientBeginCreateUpdateMongoDBCollectionOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBMongoDBCollectionCreateUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBMongoDBCollectionCreateUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcosmos.MongoDBCollectionGetResults{
			Name:     to.Ptr("collectionName"),
			Type:     to.Ptr("Microsoft.DocumentDB/databaseAccounts/mongodbDatabases/mongodbCollections"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1/mongodbDatabases/databaseName/mongodbCollections/collectionName"),
			Location: to.Ptr("West US"),
			Tags:     map[string]*string{},
			Properties: &armcosmos.MongoDBCollectionGetProperties{
				Resource: &armcosmos.MongoDBCollectionGetPropertiesResource{
					ID: to.Ptr("collectionName"),
					Indexes: []*armcosmos.MongoIndex{
						{
							Key: &armcosmos.MongoIndexKeys{
								Keys: []*string{
									to.Ptr("_ts")},
							},
							Options: &armcosmos.MongoIndexOptions{
								ExpireAfterSeconds: to.Ptr[int32](100),
								Unique:             to.Ptr(true),
							},
						},
						{
							Key: &armcosmos.MongoIndexKeys{
								Keys: []*string{
									to.Ptr("_id")},
							},
						}},
					ShardKey: map[string]*string{
						"testKey": to.Ptr("Hash"),
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.MongoDBCollectionGetResults) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.MongoDBCollectionGetResults)
			t.Fatalf("Mock response is not equal to example response for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBMongoDBCollectionCreateUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestMongoDBResources_DeleteMongoDBCollection(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBMongoDBCollectionDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBMongoDBCollectionDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewMongoDBResourcesClient("subid", cred, &options)
	poller, err := client.BeginDeleteMongoDBCollection(ctx,
		"rg1",
		"ddb1",
		"databaseName",
		"collectionName",
		&armcosmos.MongoDBResourcesClientBeginDeleteMongoDBCollectionOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBMongoDBCollectionDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBMongoDBCollectionDelete.json: %v", err)
	}
}

func TestMongoDBResources_GetMongoDBCollectionThroughput(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBMongoDBCollectionThroughputGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBMongoDBCollectionThroughputGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewMongoDBResourcesClient("subid", cred, &options)
	res, err := client.GetMongoDBCollectionThroughput(ctx,
		"rg1",
		"ddb1",
		"databaseName",
		"collectionName",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBMongoDBCollectionThroughputGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcosmos.ThroughputSettingsGetResults{
			Name:     to.Ptr("default"),
			Type:     to.Ptr("Microsoft.DocumentDB/databaseAccounts/mongodbDatabases/mongodbCollections/throughputSettings"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1/mongodbDatabases/databaseName/mongodbCollections/collectionName/throughputSettings/default"),
			Location: to.Ptr("West US"),
			Tags:     map[string]*string{},
			Properties: &armcosmos.ThroughputSettingsGetProperties{
				Resource: &armcosmos.ThroughputSettingsGetPropertiesResource{
					Etag:                to.Ptr("\"00005900-0000-0000-0000-56f9a2630000\""),
					Rid:                 to.Ptr("PD5DALigDgw="),
					Ts:                  to.Ptr[float32](1459200611),
					MinimumThroughput:   to.Ptr("400"),
					OfferReplacePending: to.Ptr("true"),
					Throughput:          to.Ptr[int32](400),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ThroughputSettingsGetResults) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ThroughputSettingsGetResults)
			t.Fatalf("Mock response is not equal to example response for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBMongoDBCollectionThroughputGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestMongoDBResources_UpdateMongoDBCollectionThroughput(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBMongoDBCollectionThroughputUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBMongoDBCollectionThroughputUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewMongoDBResourcesClient("subid", cred, &options)
	poller, err := client.BeginUpdateMongoDBCollectionThroughput(ctx,
		"rg1",
		"ddb1",
		"databaseName",
		"collectionName",
		armcosmos.ThroughputSettingsUpdateParameters{
			Location: to.Ptr("West US"),
			Tags:     map[string]*string{},
			Properties: &armcosmos.ThroughputSettingsUpdateProperties{
				Resource: &armcosmos.ThroughputSettingsResource{
					Throughput: to.Ptr[int32](400),
				},
			},
		},
		&armcosmos.MongoDBResourcesClientBeginUpdateMongoDBCollectionThroughputOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBMongoDBCollectionThroughputUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBMongoDBCollectionThroughputUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcosmos.ThroughputSettingsGetResults{
			Name:     to.Ptr("default"),
			Type:     to.Ptr("Microsoft.DocumentDB/databaseAccounts/mongodbDatabases/mongodbCollections/throughputSettings"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1/mongodbDatabases/databaseName/mongodbCollections/collectionName/throughputSettings/default"),
			Location: to.Ptr("West US"),
			Tags:     map[string]*string{},
			Properties: &armcosmos.ThroughputSettingsGetProperties{
				Resource: &armcosmos.ThroughputSettingsGetPropertiesResource{
					Etag:                to.Ptr("\"00005900-0000-0000-0000-56f9a2630000\""),
					Rid:                 to.Ptr("PD5DALigDgw="),
					Ts:                  to.Ptr[float32](1459200611),
					MinimumThroughput:   to.Ptr("400"),
					OfferReplacePending: to.Ptr("true"),
					Throughput:          to.Ptr[int32](400),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ThroughputSettingsGetResults) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ThroughputSettingsGetResults)
			t.Fatalf("Mock response is not equal to example response for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBMongoDBCollectionThroughputUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestMongoDBResources_MigrateMongoDBCollectionToAutoscale(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBMongoDBCollectionMigrateToAutoscale.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBMongoDBCollectionMigrateToAutoscale"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewMongoDBResourcesClient("subid", cred, &options)
	poller, err := client.BeginMigrateMongoDBCollectionToAutoscale(ctx,
		"rg1",
		"ddb1",
		"databaseName",
		"collectionName",
		&armcosmos.MongoDBResourcesClientBeginMigrateMongoDBCollectionToAutoscaleOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBMongoDBCollectionMigrateToAutoscale.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBMongoDBCollectionMigrateToAutoscale.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcosmos.ThroughputSettingsGetResults{
			Properties: &armcosmos.ThroughputSettingsGetProperties{
				Resource: &armcosmos.ThroughputSettingsGetPropertiesResource{
					Etag: to.Ptr("\"00005900-0000-0000-0000-56f9a2630000\""),
					Rid:  to.Ptr("PD5DALigDgw="),
					Ts:   to.Ptr[float32](1459200611),
					AutoscaleSettings: &armcosmos.AutoscaleSettingsResource{
						MaxThroughput: to.Ptr[int32](4000),
					},
					MinimumThroughput:   to.Ptr("4000"),
					OfferReplacePending: to.Ptr("false"),
					Throughput:          to.Ptr[int32](400),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ThroughputSettingsGetResults) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ThroughputSettingsGetResults)
			t.Fatalf("Mock response is not equal to example response for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBMongoDBCollectionMigrateToAutoscale.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestMongoDBResources_MigrateMongoDBCollectionToManualThroughput(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBMongoDBCollectionMigrateToManualThroughput.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBMongoDBCollectionMigrateToManualThroughput"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewMongoDBResourcesClient("subid", cred, &options)
	poller, err := client.BeginMigrateMongoDBCollectionToManualThroughput(ctx,
		"rg1",
		"ddb1",
		"databaseName",
		"collectionName",
		&armcosmos.MongoDBResourcesClientBeginMigrateMongoDBCollectionToManualThroughputOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBMongoDBCollectionMigrateToManualThroughput.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBMongoDBCollectionMigrateToManualThroughput.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcosmos.ThroughputSettingsGetResults{
			Properties: &armcosmos.ThroughputSettingsGetProperties{
				Resource: &armcosmos.ThroughputSettingsGetPropertiesResource{
					Etag:                to.Ptr("\"00005900-0000-0000-0000-56f9a2630000\""),
					Rid:                 to.Ptr("PD5DALigDgw="),
					Ts:                  to.Ptr[float32](1459200611),
					MinimumThroughput:   to.Ptr("400"),
					OfferReplacePending: to.Ptr("true"),
					Throughput:          to.Ptr[int32](400),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ThroughputSettingsGetResults) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ThroughputSettingsGetResults)
			t.Fatalf("Mock response is not equal to example response for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBMongoDBCollectionMigrateToManualThroughput.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestMongoDBResources_RetrieveContinuousBackupInformation(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBMongoDBCollectionBackupInformation.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBMongoDBCollectionBackupInformation"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewMongoDBResourcesClient("subid", cred, &options)
	poller, err := client.BeginRetrieveContinuousBackupInformation(ctx,
		"rgName",
		"ddb1",
		"databaseName",
		"collectionName",
		armcosmos.ContinuousBackupRestoreLocation{
			Location: to.Ptr("North Europe"),
		},
		&armcosmos.MongoDBResourcesClientBeginRetrieveContinuousBackupInformationOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBMongoDBCollectionBackupInformation.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBMongoDBCollectionBackupInformation.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcosmos.BackupInformation{
			ContinuousBackupInformation: &armcosmos.ContinuousBackupInformation{
				LatestRestorableTimestamp: to.Ptr("2021-02-05T02:40:50Z"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.BackupInformation) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.BackupInformation)
			t.Fatalf("Mock response is not equal to example response for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBMongoDBCollectionBackupInformation.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTableResources_ListTables(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBTableList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBTableList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewTableResourcesClient("subid", cred, &options)
	pager := client.ListTables("rgName",
		"ddb1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBTableList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcosmos.TableListResult{
			Value: []*armcosmos.TableGetResults{
				{
					Name:     to.Ptr("tableName"),
					Type:     to.Ptr("Microsoft.DocumentDB/databaseAccounts/tables"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1/tables/tableName"),
					Location: to.Ptr("West US"),
					Tags:     map[string]*string{},
					Properties: &armcosmos.TableGetProperties{
						Resource: &armcosmos.TableGetPropertiesResource{
							ID: to.Ptr("tableName"),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.TableListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.TableListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBTableList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTableResources_GetTable(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBTableGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBTableGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewTableResourcesClient("subid", cred, &options)
	res, err := client.GetTable(ctx,
		"rg1",
		"ddb1",
		"tableName",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBTableGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcosmos.TableGetResults{
			Name:     to.Ptr("tableName"),
			Type:     to.Ptr("Microsoft.DocumentDB/databaseAccounts/tables"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1/tables/tableName"),
			Location: to.Ptr("West US"),
			Tags:     map[string]*string{},
			Properties: &armcosmos.TableGetProperties{
				Resource: &armcosmos.TableGetPropertiesResource{
					Etag: to.Ptr("\"00005900-0000-0000-0000-56f9a2630000\""),
					Rid:  to.Ptr("PD5DALigDgw="),
					Ts:   to.Ptr[float32](1459200611),
					ID:   to.Ptr("tableName"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.TableGetResults) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.TableGetResults)
			t.Fatalf("Mock response is not equal to example response for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBTableGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTableResources_CreateUpdateTable(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBTableCreateUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBTableReplace"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewTableResourcesClient("subid", cred, &options)
	poller, err := client.BeginCreateUpdateTable(ctx,
		"rg1",
		"ddb1",
		"tableName",
		armcosmos.TableCreateUpdateParameters{
			Location: to.Ptr("West US"),
			Tags:     map[string]*string{},
			Properties: &armcosmos.TableCreateUpdateProperties{
				Options: &armcosmos.CreateUpdateOptions{},
				Resource: &armcosmos.TableResource{
					ID: to.Ptr("tableName"),
				},
			},
		},
		&armcosmos.TableResourcesClientBeginCreateUpdateTableOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBTableCreateUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBTableCreateUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcosmos.TableGetResults{
			Name:     to.Ptr("tableName"),
			Type:     to.Ptr("Microsoft.DocumentDB/databaseAccounts/tables"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1/tables/tableName"),
			Location: to.Ptr("West US"),
			Properties: &armcosmos.TableGetProperties{
				Resource: &armcosmos.TableGetPropertiesResource{
					ID: to.Ptr("tableName"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.TableGetResults) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.TableGetResults)
			t.Fatalf("Mock response is not equal to example response for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBTableCreateUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTableResources_DeleteTable(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBTableDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBTableDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewTableResourcesClient("subid", cred, &options)
	poller, err := client.BeginDeleteTable(ctx,
		"rg1",
		"ddb1",
		"tableName",
		&armcosmos.TableResourcesClientBeginDeleteTableOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBTableDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBTableDelete.json: %v", err)
	}
}

func TestTableResources_GetTableThroughput(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBTableThroughputGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBTableThroughputGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewTableResourcesClient("subid", cred, &options)
	res, err := client.GetTableThroughput(ctx,
		"rg1",
		"ddb1",
		"tableName",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBTableThroughputGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcosmos.ThroughputSettingsGetResults{
			Name:     to.Ptr("default"),
			Type:     to.Ptr("Microsoft.DocumentDB/databaseAccounts/tables/throughputSettings"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1/tables/tableName/throughputSettings/default"),
			Location: to.Ptr("West US"),
			Tags:     map[string]*string{},
			Properties: &armcosmos.ThroughputSettingsGetProperties{
				Resource: &armcosmos.ThroughputSettingsGetPropertiesResource{
					Etag:                to.Ptr("\"00005900-0000-0000-0000-56f9a2630000\""),
					Rid:                 to.Ptr("PD5DALigDgw="),
					Ts:                  to.Ptr[float32](1459200611),
					MinimumThroughput:   to.Ptr("400"),
					OfferReplacePending: to.Ptr("true"),
					Throughput:          to.Ptr[int32](400),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ThroughputSettingsGetResults) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ThroughputSettingsGetResults)
			t.Fatalf("Mock response is not equal to example response for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBTableThroughputGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTableResources_UpdateTableThroughput(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBTableThroughputUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBTableThroughputUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewTableResourcesClient("subid", cred, &options)
	poller, err := client.BeginUpdateTableThroughput(ctx,
		"rg1",
		"ddb1",
		"tableName",
		armcosmos.ThroughputSettingsUpdateParameters{
			Location: to.Ptr("West US"),
			Tags:     map[string]*string{},
			Properties: &armcosmos.ThroughputSettingsUpdateProperties{
				Resource: &armcosmos.ThroughputSettingsResource{
					Throughput: to.Ptr[int32](400),
				},
			},
		},
		&armcosmos.TableResourcesClientBeginUpdateTableThroughputOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBTableThroughputUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBTableThroughputUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcosmos.ThroughputSettingsGetResults{
			Name:     to.Ptr("default"),
			Type:     to.Ptr("Microsoft.DocumentDB/databaseAccounts/tables/throughputSettings"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1/tables/tableName/throughputSettings/default"),
			Location: to.Ptr("West US"),
			Tags:     map[string]*string{},
			Properties: &armcosmos.ThroughputSettingsGetProperties{
				Resource: &armcosmos.ThroughputSettingsGetPropertiesResource{
					Etag:                to.Ptr("\"00005900-0000-0000-0000-56f9a2630000\""),
					Rid:                 to.Ptr("PD5DALigDgw="),
					Ts:                  to.Ptr[float32](1459200611),
					MinimumThroughput:   to.Ptr("400"),
					OfferReplacePending: to.Ptr("true"),
					Throughput:          to.Ptr[int32](400),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ThroughputSettingsGetResults) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ThroughputSettingsGetResults)
			t.Fatalf("Mock response is not equal to example response for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBTableThroughputUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTableResources_MigrateTableToAutoscale(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBTableMigrateToAutoscale.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBTableMigrateToAutoscale"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewTableResourcesClient("subid", cred, &options)
	poller, err := client.BeginMigrateTableToAutoscale(ctx,
		"rg1",
		"ddb1",
		"tableName",
		&armcosmos.TableResourcesClientBeginMigrateTableToAutoscaleOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBTableMigrateToAutoscale.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBTableMigrateToAutoscale.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcosmos.ThroughputSettingsGetResults{
			Properties: &armcosmos.ThroughputSettingsGetProperties{
				Resource: &armcosmos.ThroughputSettingsGetPropertiesResource{
					Etag: to.Ptr("\"00005900-0000-0000-0000-56f9a2630000\""),
					Rid:  to.Ptr("PD5DALigDgw="),
					Ts:   to.Ptr[float32](1459200611),
					AutoscaleSettings: &armcosmos.AutoscaleSettingsResource{
						MaxThroughput: to.Ptr[int32](4000),
					},
					MinimumThroughput:   to.Ptr("4000"),
					OfferReplacePending: to.Ptr("false"),
					Throughput:          to.Ptr[int32](400),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ThroughputSettingsGetResults) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ThroughputSettingsGetResults)
			t.Fatalf("Mock response is not equal to example response for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBTableMigrateToAutoscale.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestTableResources_MigrateTableToManualThroughput(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBTableMigrateToManualThroughput.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBTableMigrateToManualThroughput"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewTableResourcesClient("subid", cred, &options)
	poller, err := client.BeginMigrateTableToManualThroughput(ctx,
		"rg1",
		"ddb1",
		"tableName",
		&armcosmos.TableResourcesClientBeginMigrateTableToManualThroughputOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBTableMigrateToManualThroughput.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBTableMigrateToManualThroughput.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcosmos.ThroughputSettingsGetResults{
			Properties: &armcosmos.ThroughputSettingsGetProperties{
				Resource: &armcosmos.ThroughputSettingsGetPropertiesResource{
					Etag:                to.Ptr("\"00005900-0000-0000-0000-56f9a2630000\""),
					Rid:                 to.Ptr("PD5DALigDgw="),
					Ts:                  to.Ptr[float32](1459200611),
					MinimumThroughput:   to.Ptr("400"),
					OfferReplacePending: to.Ptr("true"),
					Throughput:          to.Ptr[int32](400),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ThroughputSettingsGetResults) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ThroughputSettingsGetResults)
			t.Fatalf("Mock response is not equal to example response for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBTableMigrateToManualThroughput.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCassandraResources_ListCassandraKeyspaces(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBCassandraKeyspaceList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBCassandraKeyspaceList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewCassandraResourcesClient("subid", cred, &options)
	pager := client.ListCassandraKeyspaces("rgName",
		"ddb1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBCassandraKeyspaceList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcosmos.CassandraKeyspaceListResult{
			Value: []*armcosmos.CassandraKeyspaceGetResults{
				{
					Name:     to.Ptr("keyspaceName"),
					Type:     to.Ptr("Microsoft.DocumentDB/databaseAccounts/cassandraKeyspaces"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1/cassandraKeyspaces/keyspaceName"),
					Location: to.Ptr("West US"),
					Tags:     map[string]*string{},
					Properties: &armcosmos.CassandraKeyspaceGetProperties{
						Resource: &armcosmos.CassandraKeyspaceGetPropertiesResource{
							ID: to.Ptr("keyspaceName"),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.CassandraKeyspaceListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.CassandraKeyspaceListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBCassandraKeyspaceList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCassandraResources_GetCassandraKeyspace(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBCassandraKeyspaceGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBCassandraKeyspaceGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewCassandraResourcesClient("subid", cred, &options)
	res, err := client.GetCassandraKeyspace(ctx,
		"rg1",
		"ddb1",
		"keyspaceName",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBCassandraKeyspaceGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcosmos.CassandraKeyspaceGetResults{
			Name:     to.Ptr("keyspaceName"),
			Type:     to.Ptr("Microsoft.DocumentDB/databaseAccounts/cassandraKeyspaces"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1/cassandraKeyspaces/keyspaceName"),
			Location: to.Ptr("West US"),
			Tags:     map[string]*string{},
			Properties: &armcosmos.CassandraKeyspaceGetProperties{
				Resource: &armcosmos.CassandraKeyspaceGetPropertiesResource{
					ID:   to.Ptr("keyspaceName"),
					Etag: to.Ptr("\"00005900-0000-0000-0000-56f9a2630000\""),
					Rid:  to.Ptr("PD5DALigDgw="),
					Ts:   to.Ptr[float32](1459200611),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.CassandraKeyspaceGetResults) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CassandraKeyspaceGetResults)
			t.Fatalf("Mock response is not equal to example response for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBCassandraKeyspaceGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCassandraResources_CreateUpdateCassandraKeyspace(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBCassandraKeyspaceCreateUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBCassandraKeyspaceCreateUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewCassandraResourcesClient("subid", cred, &options)
	poller, err := client.BeginCreateUpdateCassandraKeyspace(ctx,
		"rg1",
		"ddb1",
		"keyspaceName",
		armcosmos.CassandraKeyspaceCreateUpdateParameters{
			Location: to.Ptr("West US"),
			Tags:     map[string]*string{},
			Properties: &armcosmos.CassandraKeyspaceCreateUpdateProperties{
				Options: &armcosmos.CreateUpdateOptions{},
				Resource: &armcosmos.CassandraKeyspaceResource{
					ID: to.Ptr("keyspaceName"),
				},
			},
		},
		&armcosmos.CassandraResourcesClientBeginCreateUpdateCassandraKeyspaceOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBCassandraKeyspaceCreateUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBCassandraKeyspaceCreateUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcosmos.CassandraKeyspaceGetResults{
			Name:     to.Ptr("keyspaceName"),
			Type:     to.Ptr("Microsoft.DocumentDB/databaseAccounts/cassandraKeyspaces"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1/cassandraKeyspaces/keyspaceName"),
			Location: to.Ptr("West US"),
			Tags:     map[string]*string{},
			Properties: &armcosmos.CassandraKeyspaceGetProperties{
				Resource: &armcosmos.CassandraKeyspaceGetPropertiesResource{
					ID: to.Ptr("keyspaceName"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.CassandraKeyspaceGetResults) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CassandraKeyspaceGetResults)
			t.Fatalf("Mock response is not equal to example response for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBCassandraKeyspaceCreateUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCassandraResources_DeleteCassandraKeyspace(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBCassandraKeyspaceDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBCassandraKeyspaceDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewCassandraResourcesClient("subid", cred, &options)
	poller, err := client.BeginDeleteCassandraKeyspace(ctx,
		"rg1",
		"ddb1",
		"keyspaceName",
		&armcosmos.CassandraResourcesClientBeginDeleteCassandraKeyspaceOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBCassandraKeyspaceDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBCassandraKeyspaceDelete.json: %v", err)
	}
}

func TestCassandraResources_GetCassandraKeyspaceThroughput(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBCassandraKeyspaceThroughputGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBCassandraKeyspaceThroughputGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewCassandraResourcesClient("subid", cred, &options)
	res, err := client.GetCassandraKeyspaceThroughput(ctx,
		"rg1",
		"ddb1",
		"keyspaceName",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBCassandraKeyspaceThroughputGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcosmos.ThroughputSettingsGetResults{
			Name:     to.Ptr("default"),
			Type:     to.Ptr("Microsoft.DocumentDB/databaseAccounts/cassandraKeyspaces/throughputSettings"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1/cassandraKeyspaces/keyspaceName/throughputSettings/default"),
			Location: to.Ptr("West US"),
			Tags:     map[string]*string{},
			Properties: &armcosmos.ThroughputSettingsGetProperties{
				Resource: &armcosmos.ThroughputSettingsGetPropertiesResource{
					Etag:                to.Ptr("\"00005900-0000-0000-0000-56f9a2630000\""),
					Rid:                 to.Ptr("PD5DALigDgw="),
					Ts:                  to.Ptr[float32](1459200611),
					MinimumThroughput:   to.Ptr("400"),
					OfferReplacePending: to.Ptr("true"),
					Throughput:          to.Ptr[int32](400),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ThroughputSettingsGetResults) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ThroughputSettingsGetResults)
			t.Fatalf("Mock response is not equal to example response for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBCassandraKeyspaceThroughputGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCassandraResources_UpdateCassandraKeyspaceThroughput(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBCassandraKeyspaceThroughputUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBCassandraKeyspaceThroughputUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewCassandraResourcesClient("subid", cred, &options)
	poller, err := client.BeginUpdateCassandraKeyspaceThroughput(ctx,
		"rg1",
		"ddb1",
		"keyspaceName",
		armcosmos.ThroughputSettingsUpdateParameters{
			Location: to.Ptr("West US"),
			Tags:     map[string]*string{},
			Properties: &armcosmos.ThroughputSettingsUpdateProperties{
				Resource: &armcosmos.ThroughputSettingsResource{
					Throughput: to.Ptr[int32](400),
				},
			},
		},
		&armcosmos.CassandraResourcesClientBeginUpdateCassandraKeyspaceThroughputOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBCassandraKeyspaceThroughputUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBCassandraKeyspaceThroughputUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcosmos.ThroughputSettingsGetResults{
			Name:     to.Ptr("default"),
			Type:     to.Ptr("Microsoft.DocumentDB/databaseAccounts/cassandraKeyspaces/throughputSettings"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1/cassandraKeyspaces/keyspaceName/throughputSettings/default"),
			Location: to.Ptr("West US"),
			Tags:     map[string]*string{},
			Properties: &armcosmos.ThroughputSettingsGetProperties{
				Resource: &armcosmos.ThroughputSettingsGetPropertiesResource{
					Etag:                to.Ptr("\"00005900-0000-0000-0000-56f9a2630000\""),
					Rid:                 to.Ptr("PD5DALigDgw="),
					Ts:                  to.Ptr[float32](1459200611),
					MinimumThroughput:   to.Ptr("400"),
					OfferReplacePending: to.Ptr("true"),
					Throughput:          to.Ptr[int32](400),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ThroughputSettingsGetResults) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ThroughputSettingsGetResults)
			t.Fatalf("Mock response is not equal to example response for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBCassandraKeyspaceThroughputUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCassandraResources_MigrateCassandraKeyspaceToAutoscale(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBCassandraKeyspaceMigrateToAutoscale.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBCassandraKeyspaceMigrateToAutoscale"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewCassandraResourcesClient("subid", cred, &options)
	poller, err := client.BeginMigrateCassandraKeyspaceToAutoscale(ctx,
		"rg1",
		"ddb1",
		"keyspaceName",
		&armcosmos.CassandraResourcesClientBeginMigrateCassandraKeyspaceToAutoscaleOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBCassandraKeyspaceMigrateToAutoscale.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBCassandraKeyspaceMigrateToAutoscale.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcosmos.ThroughputSettingsGetResults{
			Properties: &armcosmos.ThroughputSettingsGetProperties{
				Resource: &armcosmos.ThroughputSettingsGetPropertiesResource{
					Etag: to.Ptr("\"00005900-0000-0000-0000-56f9a2630000\""),
					Rid:  to.Ptr("PD5DALigDgw="),
					Ts:   to.Ptr[float32](1459200611),
					AutoscaleSettings: &armcosmos.AutoscaleSettingsResource{
						MaxThroughput: to.Ptr[int32](4000),
					},
					MinimumThroughput:   to.Ptr("4000"),
					OfferReplacePending: to.Ptr("false"),
					Throughput:          to.Ptr[int32](400),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ThroughputSettingsGetResults) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ThroughputSettingsGetResults)
			t.Fatalf("Mock response is not equal to example response for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBCassandraKeyspaceMigrateToAutoscale.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCassandraResources_MigrateCassandraKeyspaceToManualThroughput(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBCassandraKeyspaceMigrateToManualThroughput.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBCassandraKeyspaceMigrateToManualThroughput"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewCassandraResourcesClient("subid", cred, &options)
	poller, err := client.BeginMigrateCassandraKeyspaceToManualThroughput(ctx,
		"rg1",
		"ddb1",
		"keyspaceName",
		&armcosmos.CassandraResourcesClientBeginMigrateCassandraKeyspaceToManualThroughputOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBCassandraKeyspaceMigrateToManualThroughput.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBCassandraKeyspaceMigrateToManualThroughput.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcosmos.ThroughputSettingsGetResults{
			Properties: &armcosmos.ThroughputSettingsGetProperties{
				Resource: &armcosmos.ThroughputSettingsGetPropertiesResource{
					Etag:                to.Ptr("\"00005900-0000-0000-0000-56f9a2630000\""),
					Rid:                 to.Ptr("PD5DALigDgw="),
					Ts:                  to.Ptr[float32](1459200611),
					MinimumThroughput:   to.Ptr("400"),
					OfferReplacePending: to.Ptr("false"),
					Throughput:          to.Ptr[int32](400),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ThroughputSettingsGetResults) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ThroughputSettingsGetResults)
			t.Fatalf("Mock response is not equal to example response for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBCassandraKeyspaceMigrateToManualThroughput.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCassandraResources_ListCassandraTables(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBCassandraTableList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBCassandraTableList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewCassandraResourcesClient("subid", cred, &options)
	pager := client.ListCassandraTables("rgName",
		"ddb1",
		"keyspaceName",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBCassandraTableList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcosmos.CassandraTableListResult{
			Value: []*armcosmos.CassandraTableGetResults{
				{
					Name:     to.Ptr("tableName"),
					Type:     to.Ptr("Microsoft.DocumentDB/databaseAccounts/cassandraKeyspaces/cassandraTables"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1/cassandraKeyspaces/keyspaceName/cassandraTables/tableName"),
					Location: to.Ptr("West US"),
					Tags:     map[string]*string{},
					Properties: &armcosmos.CassandraTableGetProperties{
						Resource: &armcosmos.CassandraTableGetPropertiesResource{
							Schema: &armcosmos.CassandraSchema{
								ClusterKeys: []*armcosmos.ClusterKey{
									{
										Name:    to.Ptr("columnA"),
										OrderBy: to.Ptr("Asc"),
									}},
								Columns: []*armcosmos.Column{
									{
										Name: to.Ptr("columnA"),
										Type: to.Ptr("Ascii"),
									}},
								PartitionKeys: []*armcosmos.CassandraPartitionKey{
									{
										Name: to.Ptr("columnA"),
									}},
							},
							DefaultTTL: to.Ptr[int32](100),
							ID:         to.Ptr("tableName"),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.CassandraTableListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.CassandraTableListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBCassandraTableList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCassandraResources_GetCassandraTable(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBCassandraTableGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBCassandraTableGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewCassandraResourcesClient("subid", cred, &options)
	res, err := client.GetCassandraTable(ctx,
		"rg1",
		"ddb1",
		"keyspaceName",
		"tableName",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBCassandraTableGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcosmos.CassandraTableGetResults{
			Name:     to.Ptr("tableName"),
			Type:     to.Ptr("Microsoft.DocumentDB/databaseAccounts/cassandraKeyspaces/cassandraTables"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1/cassandraKeyspaces/keyspaceName/cassandraTables/tableName"),
			Location: to.Ptr("West US"),
			Tags:     map[string]*string{},
			Properties: &armcosmos.CassandraTableGetProperties{
				Resource: &armcosmos.CassandraTableGetPropertiesResource{
					Schema: &armcosmos.CassandraSchema{
						ClusterKeys: []*armcosmos.ClusterKey{
							{
								Name:    to.Ptr("columnA"),
								OrderBy: to.Ptr("Asc"),
							}},
						Columns: []*armcosmos.Column{
							{
								Name: to.Ptr("columnA"),
								Type: to.Ptr("Ascii"),
							}},
						PartitionKeys: []*armcosmos.CassandraPartitionKey{
							{
								Name: to.Ptr("columnA"),
							}},
					},
					DefaultTTL: to.Ptr[int32](100),
					ID:         to.Ptr("tableName"),
					Etag:       to.Ptr("\"00005900-0000-0000-0000-56f9a2630000\""),
					Rid:        to.Ptr("PD5DALigDgw="),
					Ts:         to.Ptr[float32](1459200611),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.CassandraTableGetResults) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CassandraTableGetResults)
			t.Fatalf("Mock response is not equal to example response for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBCassandraTableGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCassandraResources_CreateUpdateCassandraTable(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBCassandraTableCreateUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBCassandraTableCreateUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewCassandraResourcesClient("subid", cred, &options)
	poller, err := client.BeginCreateUpdateCassandraTable(ctx,
		"rg1",
		"ddb1",
		"keyspaceName",
		"tableName",
		armcosmos.CassandraTableCreateUpdateParameters{
			Location: to.Ptr("West US"),
			Tags:     map[string]*string{},
			Properties: &armcosmos.CassandraTableCreateUpdateProperties{
				Options: &armcosmos.CreateUpdateOptions{},
				Resource: &armcosmos.CassandraTableResource{
					Schema: &armcosmos.CassandraSchema{
						ClusterKeys: []*armcosmos.ClusterKey{
							{
								Name:    to.Ptr("columnA"),
								OrderBy: to.Ptr("Asc"),
							}},
						Columns: []*armcosmos.Column{
							{
								Name: to.Ptr("columnA"),
								Type: to.Ptr("Ascii"),
							}},
						PartitionKeys: []*armcosmos.CassandraPartitionKey{
							{
								Name: to.Ptr("columnA"),
							}},
					},
					DefaultTTL: to.Ptr[int32](100),
					ID:         to.Ptr("tableName"),
				},
			},
		},
		&armcosmos.CassandraResourcesClientBeginCreateUpdateCassandraTableOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBCassandraTableCreateUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBCassandraTableCreateUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcosmos.CassandraTableGetResults{
			Name:     to.Ptr("tableName"),
			Type:     to.Ptr("Microsoft.DocumentDB/databaseAccounts/cassandraKeyspaces/cassandraTables"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1/cassandraKeyspaces/keyspaceName/cassandraTables/tableName"),
			Location: to.Ptr("West US"),
			Tags:     map[string]*string{},
			Properties: &armcosmos.CassandraTableGetProperties{
				Resource: &armcosmos.CassandraTableGetPropertiesResource{
					Schema: &armcosmos.CassandraSchema{
						ClusterKeys: []*armcosmos.ClusterKey{
							{
								Name:    to.Ptr("columnA"),
								OrderBy: to.Ptr("Asc"),
							}},
						Columns: []*armcosmos.Column{
							{
								Name: to.Ptr("columnA"),
								Type: to.Ptr("Ascii"),
							}},
						PartitionKeys: []*armcosmos.CassandraPartitionKey{
							{
								Name: to.Ptr("columnA"),
							}},
					},
					DefaultTTL: to.Ptr[int32](100),
					ID:         to.Ptr("tableName"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.CassandraTableGetResults) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CassandraTableGetResults)
			t.Fatalf("Mock response is not equal to example response for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBCassandraTableCreateUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCassandraResources_DeleteCassandraTable(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBCassandraTableDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBCassandraTableDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewCassandraResourcesClient("subid", cred, &options)
	poller, err := client.BeginDeleteCassandraTable(ctx,
		"rg1",
		"ddb1",
		"keyspaceName",
		"tableName",
		&armcosmos.CassandraResourcesClientBeginDeleteCassandraTableOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBCassandraTableDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBCassandraTableDelete.json: %v", err)
	}
}

func TestCassandraResources_GetCassandraTableThroughput(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBCassandraTableThroughputGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBCassandraTableThroughputGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewCassandraResourcesClient("subid", cred, &options)
	res, err := client.GetCassandraTableThroughput(ctx,
		"rg1",
		"ddb1",
		"keyspaceName",
		"tableName",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBCassandraTableThroughputGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcosmos.ThroughputSettingsGetResults{
			Name:     to.Ptr("default"),
			Type:     to.Ptr("Microsoft.DocumentDB/databaseAccounts/cassandraKeyspaces/cassandraTables/throughputSettings"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1/cassandraKeyspaces/keyspaceName/cassandraTables/tableName/throughputSettings/default"),
			Location: to.Ptr("West US"),
			Tags:     map[string]*string{},
			Properties: &armcosmos.ThroughputSettingsGetProperties{
				Resource: &armcosmos.ThroughputSettingsGetPropertiesResource{
					Etag:                to.Ptr("\"00005900-0000-0000-0000-56f9a2630000\""),
					Rid:                 to.Ptr("PD5DALigDgw="),
					Ts:                  to.Ptr[float32](1459200611),
					MinimumThroughput:   to.Ptr("400"),
					OfferReplacePending: to.Ptr("true"),
					Throughput:          to.Ptr[int32](400),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ThroughputSettingsGetResults) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ThroughputSettingsGetResults)
			t.Fatalf("Mock response is not equal to example response for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBCassandraTableThroughputGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCassandraResources_UpdateCassandraTableThroughput(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBCassandraTableThroughputUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBCassandraTableThroughputUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewCassandraResourcesClient("subid", cred, &options)
	poller, err := client.BeginUpdateCassandraTableThroughput(ctx,
		"rg1",
		"ddb1",
		"keyspaceName",
		"tableName",
		armcosmos.ThroughputSettingsUpdateParameters{
			Location: to.Ptr("West US"),
			Tags:     map[string]*string{},
			Properties: &armcosmos.ThroughputSettingsUpdateProperties{
				Resource: &armcosmos.ThroughputSettingsResource{
					Throughput: to.Ptr[int32](400),
				},
			},
		},
		&armcosmos.CassandraResourcesClientBeginUpdateCassandraTableThroughputOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBCassandraTableThroughputUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBCassandraTableThroughputUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcosmos.ThroughputSettingsGetResults{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.DocumentDB/databaseAccounts/cassandraKeyspaces/cassandraTables/throughputSettings"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1/cassandraKeyspaces/keyspaceName/cassandraTables/tableName/throughputSettings/default"),
			Properties: &armcosmos.ThroughputSettingsGetProperties{
				Resource: &armcosmos.ThroughputSettingsGetPropertiesResource{
					Etag:                to.Ptr("\"00005900-0000-0000-0000-56f9a2630000\""),
					Rid:                 to.Ptr("PD5DALigDgw="),
					Ts:                  to.Ptr[float32](1459200611),
					MinimumThroughput:   to.Ptr("400"),
					OfferReplacePending: to.Ptr("true"),
					Throughput:          to.Ptr[int32](400),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ThroughputSettingsGetResults) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ThroughputSettingsGetResults)
			t.Fatalf("Mock response is not equal to example response for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBCassandraTableThroughputUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCassandraResources_MigrateCassandraTableToAutoscale(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBCassandraTableMigrateToAutoscale.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBCassandraTableMigrateToAutoscale"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewCassandraResourcesClient("subid", cred, &options)
	poller, err := client.BeginMigrateCassandraTableToAutoscale(ctx,
		"rg1",
		"ddb1",
		"keyspaceName",
		"tableName",
		&armcosmos.CassandraResourcesClientBeginMigrateCassandraTableToAutoscaleOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBCassandraTableMigrateToAutoscale.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBCassandraTableMigrateToAutoscale.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcosmos.ThroughputSettingsGetResults{
			Properties: &armcosmos.ThroughputSettingsGetProperties{
				Resource: &armcosmos.ThroughputSettingsGetPropertiesResource{
					Etag: to.Ptr("\"00005900-0000-0000-0000-56f9a2630000\""),
					Rid:  to.Ptr("PD5DALigDgw="),
					Ts:   to.Ptr[float32](1459200611),
					AutoscaleSettings: &armcosmos.AutoscaleSettingsResource{
						MaxThroughput: to.Ptr[int32](4000),
					},
					MinimumThroughput:   to.Ptr("4000"),
					OfferReplacePending: to.Ptr("false"),
					Throughput:          to.Ptr[int32](400),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ThroughputSettingsGetResults) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ThroughputSettingsGetResults)
			t.Fatalf("Mock response is not equal to example response for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBCassandraTableMigrateToAutoscale.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCassandraResources_MigrateCassandraTableToManualThroughput(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBCassandraTableMigrateToManualThroughput.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBCassandraTableMigrateToManualThroughput"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewCassandraResourcesClient("subid", cred, &options)
	poller, err := client.BeginMigrateCassandraTableToManualThroughput(ctx,
		"rg1",
		"ddb1",
		"keyspaceName",
		"tableName",
		&armcosmos.CassandraResourcesClientBeginMigrateCassandraTableToManualThroughputOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBCassandraTableMigrateToManualThroughput.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBCassandraTableMigrateToManualThroughput.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcosmos.ThroughputSettingsGetResults{
			Properties: &armcosmos.ThroughputSettingsGetProperties{
				Resource: &armcosmos.ThroughputSettingsGetPropertiesResource{
					Etag:                to.Ptr("\"00005900-0000-0000-0000-56f9a2630000\""),
					Rid:                 to.Ptr("PD5DALigDgw="),
					Ts:                  to.Ptr[float32](1459200611),
					MinimumThroughput:   to.Ptr("400"),
					OfferReplacePending: to.Ptr("false"),
					Throughput:          to.Ptr[int32](400),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ThroughputSettingsGetResults) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ThroughputSettingsGetResults)
			t.Fatalf("Mock response is not equal to example response for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBCassandraTableMigrateToManualThroughput.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestGremlinResources_ListGremlinDatabases(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBGremlinDatabaseList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBGremlinDatabaseList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewGremlinResourcesClient("subid", cred, &options)
	pager := client.ListGremlinDatabases("rgName",
		"ddb1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBGremlinDatabaseList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcosmos.GremlinDatabaseListResult{
			Value: []*armcosmos.GremlinDatabaseGetResults{
				{
					Name:     to.Ptr("databaseName"),
					Type:     to.Ptr("Microsoft.DocumentDB/databaseAccounts/gremlinDatabases"),
					ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1/gremlinDatabases/databaseName"),
					Location: to.Ptr("West US"),
					Tags:     map[string]*string{},
					Properties: &armcosmos.GremlinDatabaseGetProperties{
						Resource: &armcosmos.GremlinDatabaseGetPropertiesResource{
							Etag: to.Ptr("\"00000a00-0000-0000-0000-56672f920000\""),
							Rid:  to.Ptr("CqNBAA=="),
							Ts:   to.Ptr[float32](1449602962),
							ID:   to.Ptr("databaseName"),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.GremlinDatabaseListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.GremlinDatabaseListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBGremlinDatabaseList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestGremlinResources_GetGremlinDatabase(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBGremlinDatabaseGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBGremlinDatabaseGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewGremlinResourcesClient("subid", cred, &options)
	res, err := client.GetGremlinDatabase(ctx,
		"rg1",
		"ddb1",
		"databaseName",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBGremlinDatabaseGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcosmos.GremlinDatabaseGetResults{
			Name:     to.Ptr("databaseName"),
			Type:     to.Ptr("Microsoft.DocumentDB/databaseAccounts/gremlinDatabases"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1/gremlinDatabases/databaseName"),
			Location: to.Ptr("West US"),
			Tags:     map[string]*string{},
			Properties: &armcosmos.GremlinDatabaseGetProperties{
				Resource: &armcosmos.GremlinDatabaseGetPropertiesResource{
					Etag: to.Ptr("\"00000a00-0000-0000-0000-56672f920000\""),
					Rid:  to.Ptr("CqNBAA=="),
					Ts:   to.Ptr[float32](1449602962),
					ID:   to.Ptr("databaseName"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.GremlinDatabaseGetResults) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.GremlinDatabaseGetResults)
			t.Fatalf("Mock response is not equal to example response for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBGremlinDatabaseGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestGremlinResources_CreateUpdateGremlinDatabase(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBGremlinDatabaseCreateUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBGremlinDatabaseCreateUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewGremlinResourcesClient("subid", cred, &options)
	poller, err := client.BeginCreateUpdateGremlinDatabase(ctx,
		"rg1",
		"ddb1",
		"databaseName",
		armcosmos.GremlinDatabaseCreateUpdateParameters{
			Location: to.Ptr("West US"),
			Tags:     map[string]*string{},
			Properties: &armcosmos.GremlinDatabaseCreateUpdateProperties{
				Options: &armcosmos.CreateUpdateOptions{},
				Resource: &armcosmos.GremlinDatabaseResource{
					ID: to.Ptr("databaseName"),
				},
			},
		},
		&armcosmos.GremlinResourcesClientBeginCreateUpdateGremlinDatabaseOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBGremlinDatabaseCreateUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBGremlinDatabaseCreateUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcosmos.GremlinDatabaseGetResults{
			Name:     to.Ptr("databaseName"),
			Type:     to.Ptr("Microsoft.DocumentDB/databaseAccounts/gremlinDatabases"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1/gremlinDatabases/databaseName"),
			Location: to.Ptr("West US"),
			Tags:     map[string]*string{},
			Properties: &armcosmos.GremlinDatabaseGetProperties{
				Resource: &armcosmos.GremlinDatabaseGetPropertiesResource{
					Etag: to.Ptr("\"00000a00-0000-0000-0000-56672f920000\""),
					Rid:  to.Ptr("CqNBAA=="),
					Ts:   to.Ptr[float32](1449602962),
					ID:   to.Ptr("databaseName"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.GremlinDatabaseGetResults) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.GremlinDatabaseGetResults)
			t.Fatalf("Mock response is not equal to example response for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBGremlinDatabaseCreateUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestGremlinResources_DeleteGremlinDatabase(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBGremlinDatabaseDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBGremlinDatabaseDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewGremlinResourcesClient("subid", cred, &options)
	poller, err := client.BeginDeleteGremlinDatabase(ctx,
		"rg1",
		"ddb1",
		"databaseName",
		&armcosmos.GremlinResourcesClientBeginDeleteGremlinDatabaseOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBGremlinDatabaseDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBGremlinDatabaseDelete.json: %v", err)
	}
}

func TestGremlinResources_GetGremlinDatabaseThroughput(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBGremlinDatabaseThroughputGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBGremlinDatabaseThroughputGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewGremlinResourcesClient("subid", cred, &options)
	res, err := client.GetGremlinDatabaseThroughput(ctx,
		"rg1",
		"ddb1",
		"databaseName",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBGremlinDatabaseThroughputGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcosmos.ThroughputSettingsGetResults{
			Name:     to.Ptr("default"),
			Type:     to.Ptr("Microsoft.DocumentDB/databaseAccounts/gremlinDatabases/throughputSettings"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1/gremlinDatabases/databaseName/throughputSettings/default"),
			Location: to.Ptr("West US"),
			Tags:     map[string]*string{},
			Properties: &armcosmos.ThroughputSettingsGetProperties{
				Resource: &armcosmos.ThroughputSettingsGetPropertiesResource{
					Etag:                to.Ptr("\"00005900-0000-0000-0000-56f9a2630000\""),
					Rid:                 to.Ptr("PD5DALigDgw="),
					Ts:                  to.Ptr[float32](1459200611),
					MinimumThroughput:   to.Ptr("400"),
					OfferReplacePending: to.Ptr("true"),
					Throughput:          to.Ptr[int32](400),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ThroughputSettingsGetResults) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ThroughputSettingsGetResults)
			t.Fatalf("Mock response is not equal to example response for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBGremlinDatabaseThroughputGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestGremlinResources_UpdateGremlinDatabaseThroughput(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBGremlinDatabaseThroughputUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBGremlinDatabaseThroughputUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewGremlinResourcesClient("subid", cred, &options)
	poller, err := client.BeginUpdateGremlinDatabaseThroughput(ctx,
		"rg1",
		"ddb1",
		"databaseName",
		armcosmos.ThroughputSettingsUpdateParameters{
			Location: to.Ptr("West US"),
			Tags:     map[string]*string{},
			Properties: &armcosmos.ThroughputSettingsUpdateProperties{
				Resource: &armcosmos.ThroughputSettingsResource{
					Throughput: to.Ptr[int32](400),
				},
			},
		},
		&armcosmos.GremlinResourcesClientBeginUpdateGremlinDatabaseThroughputOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBGremlinDatabaseThroughputUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBGremlinDatabaseThroughputUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcosmos.ThroughputSettingsGetResults{
			Name:     to.Ptr("default"),
			Type:     to.Ptr("Microsoft.DocumentDB/databaseAccounts/gremlinDatabases/throughputSettings"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1/gremlinDatabases/databaseName/throughputSettings/default"),
			Location: to.Ptr("West US"),
			Tags:     map[string]*string{},
			Properties: &armcosmos.ThroughputSettingsGetProperties{
				Resource: &armcosmos.ThroughputSettingsGetPropertiesResource{
					Etag:                to.Ptr("\"00005900-0000-0000-0000-56f9a2630000\""),
					Rid:                 to.Ptr("PD5DALigDgw="),
					Ts:                  to.Ptr[float32](1459200611),
					MinimumThroughput:   to.Ptr("400"),
					OfferReplacePending: to.Ptr("true"),
					Throughput:          to.Ptr[int32](400),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ThroughputSettingsGetResults) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ThroughputSettingsGetResults)
			t.Fatalf("Mock response is not equal to example response for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBGremlinDatabaseThroughputUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestGremlinResources_MigrateGremlinDatabaseToAutoscale(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBGremlinDatabaseMigrateToAutoscale.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBGremlinDatabaseMigrateToAutoscale"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewGremlinResourcesClient("subid", cred, &options)
	poller, err := client.BeginMigrateGremlinDatabaseToAutoscale(ctx,
		"rg1",
		"ddb1",
		"databaseName",
		&armcosmos.GremlinResourcesClientBeginMigrateGremlinDatabaseToAutoscaleOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBGremlinDatabaseMigrateToAutoscale.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBGremlinDatabaseMigrateToAutoscale.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcosmos.ThroughputSettingsGetResults{
			Properties: &armcosmos.ThroughputSettingsGetProperties{
				Resource: &armcosmos.ThroughputSettingsGetPropertiesResource{
					Etag: to.Ptr("\"00005900-0000-0000-0000-56f9a2630000\""),
					Rid:  to.Ptr("PD5DALigDgw="),
					Ts:   to.Ptr[float32](1459200611),
					AutoscaleSettings: &armcosmos.AutoscaleSettingsResource{
						MaxThroughput: to.Ptr[int32](4000),
					},
					MinimumThroughput:   to.Ptr("4000"),
					OfferReplacePending: to.Ptr("false"),
					Throughput:          to.Ptr[int32](400),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ThroughputSettingsGetResults) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ThroughputSettingsGetResults)
			t.Fatalf("Mock response is not equal to example response for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBGremlinDatabaseMigrateToAutoscale.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestGremlinResources_MigrateGremlinDatabaseToManualThroughput(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBGremlinDatabaseMigrateToManualThroughput.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBGremlinDatabaseMigrateToManualThroughput"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewGremlinResourcesClient("subid", cred, &options)
	poller, err := client.BeginMigrateGremlinDatabaseToManualThroughput(ctx,
		"rg1",
		"ddb1",
		"databaseName",
		&armcosmos.GremlinResourcesClientBeginMigrateGremlinDatabaseToManualThroughputOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBGremlinDatabaseMigrateToManualThroughput.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBGremlinDatabaseMigrateToManualThroughput.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcosmos.ThroughputSettingsGetResults{
			Properties: &armcosmos.ThroughputSettingsGetProperties{
				Resource: &armcosmos.ThroughputSettingsGetPropertiesResource{
					Etag:                to.Ptr("\"00005900-0000-0000-0000-56f9a2630000\""),
					Rid:                 to.Ptr("PD5DALigDgw="),
					Ts:                  to.Ptr[float32](1459200611),
					MinimumThroughput:   to.Ptr("400"),
					OfferReplacePending: to.Ptr("true"),
					Throughput:          to.Ptr[int32](400),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ThroughputSettingsGetResults) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ThroughputSettingsGetResults)
			t.Fatalf("Mock response is not equal to example response for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBGremlinDatabaseMigrateToManualThroughput.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestGremlinResources_ListGremlinGraphs(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBGremlinGraphList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBGremlinGraphList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewGremlinResourcesClient("subid", cred, &options)
	pager := client.ListGremlinGraphs("rgName",
		"ddb1",
		"databaseName",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBGremlinGraphList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcosmos.GremlinGraphListResult{
			Value: []*armcosmos.GremlinGraphGetResults{
				{
					Name: to.Ptr("testgrf"),
					Type: to.Ptr("Microsoft.DocumentDB/databaseAccounts/apis/databases/graphs"),
					ID:   to.Ptr("testgrf"),
					Properties: &armcosmos.GremlinGraphGetProperties{
						Resource: &armcosmos.GremlinGraphGetPropertiesResource{
							Etag: to.Ptr("\"00005900-0000-0000-0000-56f9a2630000\""),
							Rid:  to.Ptr("PD5DALigDgw="),
							Ts:   to.Ptr[float32](1459200611),
							ConflictResolutionPolicy: &armcosmos.ConflictResolutionPolicy{
								ConflictResolutionPath: to.Ptr("/path"),
								Mode:                   to.Ptr(armcosmos.ConflictResolutionModeLastWriterWins),
							},
							DefaultTTL: to.Ptr[int32](100),
							ID:         to.Ptr("testgrf"),
							IndexingPolicy: &armcosmos.IndexingPolicy{
								Automatic:     to.Ptr(true),
								ExcludedPaths: []*armcosmos.ExcludedPath{},
								IncludedPaths: []*armcosmos.IncludedPath{
									{
										Path: to.Ptr("/*"),
										Indexes: []*armcosmos.Indexes{
											{
												DataType:  to.Ptr(armcosmos.DataTypeString),
												Kind:      to.Ptr(armcosmos.IndexKindRange),
												Precision: to.Ptr[int32](-1),
											},
											{
												DataType:  to.Ptr(armcosmos.DataTypeNumber),
												Kind:      to.Ptr(armcosmos.IndexKindRange),
												Precision: to.Ptr[int32](-1),
											}},
									}},
								IndexingMode: to.Ptr(armcosmos.IndexingModeConsistent),
							},
							PartitionKey: &armcosmos.ContainerPartitionKey{
								Kind: to.Ptr(armcosmos.PartitionKindHash),
								Paths: []*string{
									to.Ptr("/AccountNumber")},
							},
							UniqueKeyPolicy: &armcosmos.UniqueKeyPolicy{
								UniqueKeys: []*armcosmos.UniqueKey{
									{
										Paths: []*string{
											to.Ptr("/testPath")},
									}},
							},
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.GremlinGraphListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.GremlinGraphListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBGremlinGraphList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestGremlinResources_GetGremlinGraph(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBGremlinGraphGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBGremlinGraphGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewGremlinResourcesClient("subid", cred, &options)
	res, err := client.GetGremlinGraph(ctx,
		"rgName",
		"ddb1",
		"databaseName",
		"graphName",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBGremlinGraphGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcosmos.GremlinGraphGetResults{
			Name: to.Ptr("graphName"),
			Type: to.Ptr("Microsoft.DocumentDB/databaseAccounts/apis/databases/graphs"),
			ID:   to.Ptr("graphName"),
			Properties: &armcosmos.GremlinGraphGetProperties{
				Resource: &armcosmos.GremlinGraphGetPropertiesResource{
					Etag: to.Ptr("\"00005900-0000-0000-0000-56f9a2630000\""),
					Rid:  to.Ptr("PD5DALigDgw="),
					Ts:   to.Ptr[float32](1459200611),
					ConflictResolutionPolicy: &armcosmos.ConflictResolutionPolicy{
						ConflictResolutionPath: to.Ptr("/path"),
						Mode:                   to.Ptr(armcosmos.ConflictResolutionModeLastWriterWins),
					},
					DefaultTTL: to.Ptr[int32](100),
					ID:         to.Ptr("graphName"),
					IndexingPolicy: &armcosmos.IndexingPolicy{
						Automatic:     to.Ptr(true),
						ExcludedPaths: []*armcosmos.ExcludedPath{},
						IncludedPaths: []*armcosmos.IncludedPath{
							{
								Path: to.Ptr("/*"),
								Indexes: []*armcosmos.Indexes{
									{
										DataType:  to.Ptr(armcosmos.DataTypeString),
										Kind:      to.Ptr(armcosmos.IndexKindRange),
										Precision: to.Ptr[int32](-1),
									},
									{
										DataType:  to.Ptr(armcosmos.DataTypeNumber),
										Kind:      to.Ptr(armcosmos.IndexKindRange),
										Precision: to.Ptr[int32](-1),
									}},
							}},
						IndexingMode: to.Ptr(armcosmos.IndexingModeConsistent),
					},
					PartitionKey: &armcosmos.ContainerPartitionKey{
						Kind: to.Ptr(armcosmos.PartitionKindHash),
						Paths: []*string{
							to.Ptr("/AccountNumber")},
					},
					UniqueKeyPolicy: &armcosmos.UniqueKeyPolicy{
						UniqueKeys: []*armcosmos.UniqueKey{
							{
								Paths: []*string{
									to.Ptr("/testPath")},
							}},
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.GremlinGraphGetResults) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.GremlinGraphGetResults)
			t.Fatalf("Mock response is not equal to example response for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBGremlinGraphGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestGremlinResources_CreateUpdateGremlinGraph(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBGremlinGraphCreateUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBGremlinGraphCreateUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewGremlinResourcesClient("subid", cred, &options)
	poller, err := client.BeginCreateUpdateGremlinGraph(ctx,
		"rg1",
		"ddb1",
		"databaseName",
		"graphName",
		armcosmos.GremlinGraphCreateUpdateParameters{
			Location: to.Ptr("West US"),
			Tags:     map[string]*string{},
			Properties: &armcosmos.GremlinGraphCreateUpdateProperties{
				Options: &armcosmos.CreateUpdateOptions{},
				Resource: &armcosmos.GremlinGraphResource{
					ConflictResolutionPolicy: &armcosmos.ConflictResolutionPolicy{
						ConflictResolutionPath: to.Ptr("/path"),
						Mode:                   to.Ptr(armcosmos.ConflictResolutionModeLastWriterWins),
					},
					DefaultTTL: to.Ptr[int32](100),
					ID:         to.Ptr("graphName"),
					IndexingPolicy: &armcosmos.IndexingPolicy{
						Automatic:     to.Ptr(true),
						ExcludedPaths: []*armcosmos.ExcludedPath{},
						IncludedPaths: []*armcosmos.IncludedPath{
							{
								Path: to.Ptr("/*"),
								Indexes: []*armcosmos.Indexes{
									{
										DataType:  to.Ptr(armcosmos.DataTypeString),
										Kind:      to.Ptr(armcosmos.IndexKindRange),
										Precision: to.Ptr[int32](-1),
									},
									{
										DataType:  to.Ptr(armcosmos.DataTypeNumber),
										Kind:      to.Ptr(armcosmos.IndexKindRange),
										Precision: to.Ptr[int32](-1),
									}},
							}},
						IndexingMode: to.Ptr(armcosmos.IndexingModeConsistent),
					},
					PartitionKey: &armcosmos.ContainerPartitionKey{
						Kind: to.Ptr(armcosmos.PartitionKindHash),
						Paths: []*string{
							to.Ptr("/AccountNumber")},
					},
					UniqueKeyPolicy: &armcosmos.UniqueKeyPolicy{
						UniqueKeys: []*armcosmos.UniqueKey{
							{
								Paths: []*string{
									to.Ptr("/testPath")},
							}},
					},
				},
			},
		},
		&armcosmos.GremlinResourcesClientBeginCreateUpdateGremlinGraphOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBGremlinGraphCreateUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBGremlinGraphCreateUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcosmos.GremlinGraphGetResults{
			Name:     to.Ptr("graphName"),
			Type:     to.Ptr("Microsoft.DocumentDB/databaseAccounts/gremlinDatabases/gremlinGraphs"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1/gremlinDatabases/databaseName/gremlinGraphs/graphName"),
			Location: to.Ptr("West US"),
			Tags:     map[string]*string{},
			Properties: &armcosmos.GremlinGraphGetProperties{
				Resource: &armcosmos.GremlinGraphGetPropertiesResource{
					Etag: to.Ptr("\"00005900-0000-0000-0000-56f9a2630000\""),
					Rid:  to.Ptr("PD5DALigDgw="),
					Ts:   to.Ptr[float32](1459200611),
					ConflictResolutionPolicy: &armcosmos.ConflictResolutionPolicy{
						ConflictResolutionPath: to.Ptr("/path"),
						Mode:                   to.Ptr(armcosmos.ConflictResolutionModeLastWriterWins),
					},
					DefaultTTL: to.Ptr[int32](100),
					ID:         to.Ptr("graphName"),
					IndexingPolicy: &armcosmos.IndexingPolicy{
						Automatic:     to.Ptr(true),
						ExcludedPaths: []*armcosmos.ExcludedPath{},
						IncludedPaths: []*armcosmos.IncludedPath{
							{
								Path: to.Ptr("/*"),
								Indexes: []*armcosmos.Indexes{
									{
										DataType:  to.Ptr(armcosmos.DataTypeString),
										Kind:      to.Ptr(armcosmos.IndexKindRange),
										Precision: to.Ptr[int32](-1),
									},
									{
										DataType:  to.Ptr(armcosmos.DataTypeNumber),
										Kind:      to.Ptr(armcosmos.IndexKindRange),
										Precision: to.Ptr[int32](-1),
									}},
							}},
						IndexingMode: to.Ptr(armcosmos.IndexingModeConsistent),
					},
					PartitionKey: &armcosmos.ContainerPartitionKey{
						Kind: to.Ptr(armcosmos.PartitionKindHash),
						Paths: []*string{
							to.Ptr("/AccountNumber")},
					},
					UniqueKeyPolicy: &armcosmos.UniqueKeyPolicy{
						UniqueKeys: []*armcosmos.UniqueKey{
							{
								Paths: []*string{
									to.Ptr("/testPath")},
							}},
					},
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.GremlinGraphGetResults) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.GremlinGraphGetResults)
			t.Fatalf("Mock response is not equal to example response for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBGremlinGraphCreateUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestGremlinResources_DeleteGremlinGraph(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBGremlinGraphDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBGremlinGraphDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewGremlinResourcesClient("subid", cred, &options)
	poller, err := client.BeginDeleteGremlinGraph(ctx,
		"rg1",
		"ddb1",
		"databaseName",
		"graphName",
		&armcosmos.GremlinResourcesClientBeginDeleteGremlinGraphOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBGremlinGraphDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBGremlinGraphDelete.json: %v", err)
	}
}

func TestGremlinResources_GetGremlinGraphThroughput(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBGremlinGraphThroughputGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBGremlinGraphThroughputGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewGremlinResourcesClient("subid", cred, &options)
	res, err := client.GetGremlinGraphThroughput(ctx,
		"rg1",
		"ddb1",
		"databaseName",
		"graphName",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBGremlinGraphThroughputGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcosmos.ThroughputSettingsGetResults{
			Name:     to.Ptr("default"),
			Type:     to.Ptr("Microsoft.DocumentDB/databaseAccounts/gremlinDatabases/throughputSettings"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1/gremlinDatabases/databaseName/gremlinGraphs/graphName/throughputSettings/default"),
			Location: to.Ptr("West US"),
			Tags:     map[string]*string{},
			Properties: &armcosmos.ThroughputSettingsGetProperties{
				Resource: &armcosmos.ThroughputSettingsGetPropertiesResource{
					Etag:                to.Ptr("\"00005900-0000-0000-0000-56f9a2630000\""),
					Rid:                 to.Ptr("PD5DALigDgw="),
					Ts:                  to.Ptr[float32](1459200611),
					MinimumThroughput:   to.Ptr("400"),
					OfferReplacePending: to.Ptr("true"),
					Throughput:          to.Ptr[int32](400),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ThroughputSettingsGetResults) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ThroughputSettingsGetResults)
			t.Fatalf("Mock response is not equal to example response for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBGremlinGraphThroughputGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestGremlinResources_UpdateGremlinGraphThroughput(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBGremlinGraphThroughputUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBGremlinGraphThroughputUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewGremlinResourcesClient("subid", cred, &options)
	poller, err := client.BeginUpdateGremlinGraphThroughput(ctx,
		"rg1",
		"ddb1",
		"databaseName",
		"graphName",
		armcosmos.ThroughputSettingsUpdateParameters{
			Location: to.Ptr("West US"),
			Tags:     map[string]*string{},
			Properties: &armcosmos.ThroughputSettingsUpdateProperties{
				Resource: &armcosmos.ThroughputSettingsResource{
					Throughput: to.Ptr[int32](400),
				},
			},
		},
		&armcosmos.GremlinResourcesClientBeginUpdateGremlinGraphThroughputOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBGremlinGraphThroughputUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBGremlinGraphThroughputUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcosmos.ThroughputSettingsGetResults{
			Name:     to.Ptr("default"),
			Type:     to.Ptr("Microsoft.DocumentDB/databaseAccounts/gremlinDatabases/throughputSettings"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1/gremlinDatabases/databaseName/gremlinGraphs/graphName/throughputSettings/default"),
			Location: to.Ptr("West US"),
			Tags:     map[string]*string{},
			Properties: &armcosmos.ThroughputSettingsGetProperties{
				Resource: &armcosmos.ThroughputSettingsGetPropertiesResource{
					Etag:                to.Ptr("\"00005900-0000-0000-0000-56f9a2630000\""),
					Rid:                 to.Ptr("PD5DALigDgw="),
					Ts:                  to.Ptr[float32](1459200611),
					MinimumThroughput:   to.Ptr("400"),
					OfferReplacePending: to.Ptr("true"),
					Throughput:          to.Ptr[int32](400),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ThroughputSettingsGetResults) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ThroughputSettingsGetResults)
			t.Fatalf("Mock response is not equal to example response for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBGremlinGraphThroughputUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestGremlinResources_MigrateGremlinGraphToAutoscale(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBGremlinGraphMigrateToAutoscale.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBGremlinGraphMigrateToAutoscale"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewGremlinResourcesClient("subid", cred, &options)
	poller, err := client.BeginMigrateGremlinGraphToAutoscale(ctx,
		"rg1",
		"ddb1",
		"databaseName",
		"graphName",
		&armcosmos.GremlinResourcesClientBeginMigrateGremlinGraphToAutoscaleOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBGremlinGraphMigrateToAutoscale.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBGremlinGraphMigrateToAutoscale.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcosmos.ThroughputSettingsGetResults{
			Properties: &armcosmos.ThroughputSettingsGetProperties{
				Resource: &armcosmos.ThroughputSettingsGetPropertiesResource{
					Etag: to.Ptr("\"00005900-0000-0000-0000-56f9a2630000\""),
					Rid:  to.Ptr("PD5DALigDgw="),
					Ts:   to.Ptr[float32](1459200611),
					AutoscaleSettings: &armcosmos.AutoscaleSettingsResource{
						MaxThroughput: to.Ptr[int32](4000),
					},
					MinimumThroughput:   to.Ptr("4000"),
					OfferReplacePending: to.Ptr("false"),
					Throughput:          to.Ptr[int32](400),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ThroughputSettingsGetResults) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ThroughputSettingsGetResults)
			t.Fatalf("Mock response is not equal to example response for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBGremlinGraphMigrateToAutoscale.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestGremlinResources_MigrateGremlinGraphToManualThroughput(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBGremlinGraphMigrateToManualThroughput.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBGremlinGraphMigrateToManualThroughput"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewGremlinResourcesClient("subid", cred, &options)
	poller, err := client.BeginMigrateGremlinGraphToManualThroughput(ctx,
		"rg1",
		"ddb1",
		"databaseName",
		"graphName",
		&armcosmos.GremlinResourcesClientBeginMigrateGremlinGraphToManualThroughputOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBGremlinGraphMigrateToManualThroughput.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBGremlinGraphMigrateToManualThroughput.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcosmos.ThroughputSettingsGetResults{
			Properties: &armcosmos.ThroughputSettingsGetProperties{
				Resource: &armcosmos.ThroughputSettingsGetPropertiesResource{
					Etag:                to.Ptr("\"00005900-0000-0000-0000-56f9a2630000\""),
					Rid:                 to.Ptr("PD5DALigDgw="),
					Ts:                  to.Ptr[float32](1459200611),
					MinimumThroughput:   to.Ptr("400"),
					OfferReplacePending: to.Ptr("true"),
					Throughput:          to.Ptr[int32](400),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ThroughputSettingsGetResults) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ThroughputSettingsGetResults)
			t.Fatalf("Mock response is not equal to example response for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBGremlinGraphMigrateToManualThroughput.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLocations_List(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBLocationList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBLocationList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewLocationsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBLocationList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcosmos.LocationListResult{
			Value: []*armcosmos.LocationGetResult{
				{
					Name: to.Ptr("westus"),
					Type: to.Ptr("Microsoft.DocumentDB/locations"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.DocumentDB/locations/westus"),
					Properties: &armcosmos.LocationProperties{
						BackupStorageRedundancies: []*armcosmos.BackupStorageRedundancy{
							to.Ptr(armcosmos.BackupStorageRedundancyLocal),
							to.Ptr(armcosmos.BackupStorageRedundancyGeo)},
						IsResidencyRestricted:    to.Ptr(false),
						SupportsAvailabilityZone: to.Ptr(false),
					},
				},
				{
					Name: to.Ptr("centralus"),
					Type: to.Ptr("Microsoft.DocumentDB/locations"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.DocumentDB/locations/centralus"),
					Properties: &armcosmos.LocationProperties{
						BackupStorageRedundancies: []*armcosmos.BackupStorageRedundancy{
							to.Ptr(armcosmos.BackupStorageRedundancyZone),
							to.Ptr(armcosmos.BackupStorageRedundancyGeo)},
						IsResidencyRestricted:    to.Ptr(false),
						SupportsAvailabilityZone: to.Ptr(true),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.LocationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.LocationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBLocationList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestLocations_Get(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBLocationGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBLocationGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewLocationsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		"westus",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBLocationGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcosmos.LocationGetResult{
			Name: to.Ptr("westus"),
			Type: to.Ptr("Microsoft.DocumentDB/locations"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.DocumentDB/locations/westus"),
			Properties: &armcosmos.LocationProperties{
				BackupStorageRedundancies: []*armcosmos.BackupStorageRedundancy{
					to.Ptr(armcosmos.BackupStorageRedundancyLocal),
					to.Ptr(armcosmos.BackupStorageRedundancyGeo)},
				IsResidencyRestricted:    to.Ptr(true),
				SupportsAvailabilityZone: to.Ptr(true),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.LocationGetResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.LocationGetResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBLocationGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNotebookWorkspaces_ListByDatabaseAccount(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBNotebookWorkspaceList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBNotebookWorkspaceList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewNotebookWorkspacesClient("subid", cred, &options)
	pager := client.ListByDatabaseAccount("rg1",
		"ddb1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBNotebookWorkspaceList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcosmos.NotebookWorkspaceListResult{
			Value: []*armcosmos.NotebookWorkspace{
				{
					Name: to.Ptr("default"),
					Type: to.Ptr("Microsoft.DocumentDB/databaseAccounts/notebookWorkspaces"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1/notebookWorkspaces/default"),
					Properties: &armcosmos.NotebookWorkspaceProperties{
						NotebookServerEndpoint: to.Ptr("endpoint"),
						Status:                 to.Ptr("Online"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.NotebookWorkspaceListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.NotebookWorkspaceListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBNotebookWorkspaceList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNotebookWorkspaces_Get(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBNotebookWorkspaceGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBNotebookWorkspaceGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewNotebookWorkspacesClient("subid", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"ddb1",
		armcosmos.NotebookWorkspaceNameDefault,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBNotebookWorkspaceGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcosmos.NotebookWorkspace{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.DocumentDB/databaseAccounts/notebookWorkspaces"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1/notebookWorkspaces/default"),
			Properties: &armcosmos.NotebookWorkspaceProperties{
				NotebookServerEndpoint: to.Ptr("endpoint"),
				Status:                 to.Ptr("Online"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.NotebookWorkspace) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.NotebookWorkspace)
			t.Fatalf("Mock response is not equal to example response for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBNotebookWorkspaceGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNotebookWorkspaces_CreateOrUpdate(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBNotebookWorkspaceCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBNotebookWorkspaceCreate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewNotebookWorkspacesClient("subid", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"ddb1",
		armcosmos.NotebookWorkspaceNameDefault,
		armcosmos.NotebookWorkspaceCreateUpdateParameters{},
		&armcosmos.NotebookWorkspacesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBNotebookWorkspaceCreate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBNotebookWorkspaceCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcosmos.NotebookWorkspace{
			Name: to.Ptr("default"),
			Type: to.Ptr("Microsoft.DocumentDB/databaseAccounts/notebookWorkspaces"),
			ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1/notebookWorkspaces/default"),
			Properties: &armcosmos.NotebookWorkspaceProperties{
				NotebookServerEndpoint: to.Ptr("endpoint"),
				Status:                 to.Ptr("Online"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.NotebookWorkspace) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.NotebookWorkspace)
			t.Fatalf("Mock response is not equal to example response for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBNotebookWorkspaceCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNotebookWorkspaces_Delete(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBNotebookWorkspaceDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBNotebookWorkspaceDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewNotebookWorkspacesClient("subid", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"ddb1",
		armcosmos.NotebookWorkspaceNameDefault,
		&armcosmos.NotebookWorkspacesClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBNotebookWorkspaceDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBNotebookWorkspaceDelete.json: %v", err)
	}
}

func TestNotebookWorkspaces_ListConnectionInfo(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBNotebookWorkspaceListConnectionInfo.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBNotebookWorkspaceListConnectionInfo"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewNotebookWorkspacesClient("subid", cred, &options)
	res, err := client.ListConnectionInfo(ctx,
		"rg1",
		"ddb1",
		armcosmos.NotebookWorkspaceNameDefault,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBNotebookWorkspaceListConnectionInfo.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcosmos.NotebookWorkspaceConnectionInfoResult{
			AuthToken:              to.Ptr("auth-token"),
			NotebookServerEndpoint: to.Ptr("notebook endpoint"),
		}
		if !reflect.DeepEqual(exampleRes, res.NotebookWorkspaceConnectionInfoResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.NotebookWorkspaceConnectionInfoResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBNotebookWorkspaceListConnectionInfo.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestNotebookWorkspaces_RegenerateAuthToken(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBNotebookWorkspaceRegenerateAuthToken.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBNotebookWorkspaceRegenerateAuthToken"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewNotebookWorkspacesClient("subid", cred, &options)
	poller, err := client.BeginRegenerateAuthToken(ctx,
		"rg1",
		"ddb1",
		armcosmos.NotebookWorkspaceNameDefault,
		&armcosmos.NotebookWorkspacesClientBeginRegenerateAuthTokenOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBNotebookWorkspaceRegenerateAuthToken.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBNotebookWorkspaceRegenerateAuthToken.json: %v", err)
	}
}

func TestNotebookWorkspaces_Start(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBNotebookWorkspaceStart.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBNotebookWorkspaceStart"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewNotebookWorkspacesClient("subid", cred, &options)
	poller, err := client.BeginStart(ctx,
		"rg1",
		"ddb1",
		armcosmos.NotebookWorkspaceNameDefault,
		&armcosmos.NotebookWorkspacesClientBeginStartOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBNotebookWorkspaceStart.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBNotebookWorkspaceStart.json: %v", err)
	}
}

func TestPrivateEndpointConnections_ListByDatabaseAccount(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBPrivateEndpointConnectionListGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets private endpoint connection."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewPrivateEndpointConnectionsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByDatabaseAccount("rg1",
		"ddb1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBPrivateEndpointConnectionListGet.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcosmos.PrivateEndpointConnectionListResult{
			Value: []*armcosmos.PrivateEndpointConnection{
				{
					Name: to.Ptr("privateEndpointConnectionName"),
					Type: to.Ptr("Microsoft.DocumentDb/databaseAccounts/privateEndpointConnections"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDb/databaseAccounts/ddb1/privateEndpointConnections/privateEndpointConnectionName"),
					Properties: &armcosmos.PrivateEndpointConnectionProperties{
						GroupID: to.Ptr("Sql"),
						PrivateEndpoint: &armcosmos.PrivateEndpointProperty{
							ID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/rg1Network/providers/Microsoft.Network/privateEndpoints/privateEndpointName"),
						},
						PrivateLinkServiceConnectionState: &armcosmos.PrivateLinkServiceConnectionStateProperty{
							Description:     to.Ptr("Auto-approved"),
							ActionsRequired: to.Ptr("None"),
							Status:          to.Ptr("Approved"),
						},
						ProvisioningState: to.Ptr("Succeeded"),
					},
				},
				{
					Name: to.Ptr("privateEndpointConnectionName"),
					Type: to.Ptr("Microsoft.DocumentDb/databaseAccounts/privateEndpointConnections"),
					ID:   to.Ptr("/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDb/databaseAccounts/ddb1/privateEndpointConnections/privateEndpointConnectionName2"),
					Properties: &armcosmos.PrivateEndpointConnectionProperties{
						GroupID: to.Ptr("Sql"),
						PrivateEndpoint: &armcosmos.PrivateEndpointProperty{
							ID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/rg1Network/providers/Microsoft.Network/privateEndpoints/privateEndpointName2"),
						},
						PrivateLinkServiceConnectionState: &armcosmos.PrivateLinkServiceConnectionStateProperty{
							Description:     to.Ptr("Auto-approved"),
							ActionsRequired: to.Ptr("None"),
							Status:          to.Ptr("Approved"),
						},
						ProvisioningState: to.Ptr("Succeeded"),
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PrivateEndpointConnectionListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PrivateEndpointConnectionListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBPrivateEndpointConnectionListGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnections_Get(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBPrivateEndpointConnectionGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets private endpoint connection."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewPrivateEndpointConnectionsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"ddb1",
		"privateEndpointConnectionName",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBPrivateEndpointConnectionGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcosmos.PrivateEndpointConnection{
			Name: to.Ptr("privateEndpointConnectionName"),
			Type: to.Ptr("Microsoft.DocumentDb/databaseAccounts/privateEndpointConnections"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/rg1/providers/Microsoft.DocumentDb/databaseAccounts/ddb1/privateEndpointConnections/privateEndpointConnectionName"),
			Properties: &armcosmos.PrivateEndpointConnectionProperties{
				GroupID: to.Ptr("Sql"),
				PrivateEndpoint: &armcosmos.PrivateEndpointProperty{
					ID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/rg1Network/providers/Microsoft.Network/privateEndpoints/privateEndpointName"),
				},
				PrivateLinkServiceConnectionState: &armcosmos.PrivateLinkServiceConnectionStateProperty{
					Description:     to.Ptr("Auto-approved"),
					ActionsRequired: to.Ptr("None"),
					Status:          to.Ptr("Approved"),
				},
				ProvisioningState: to.Ptr("Succeeded"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateEndpointConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBPrivateEndpointConnectionGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnections_CreateOrUpdate(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBPrivateEndpointConnectionUpdate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Approve or reject a private endpoint connection with a given name."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewPrivateEndpointConnectionsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"rg1",
		"ddb1",
		"privateEndpointConnectionName",
		armcosmos.PrivateEndpointConnection{
			Properties: &armcosmos.PrivateEndpointConnectionProperties{
				PrivateLinkServiceConnectionState: &armcosmos.PrivateLinkServiceConnectionStateProperty{
					Description: to.Ptr("Approved by johndoe@contoso.com"),
					Status:      to.Ptr("Approved"),
				},
			},
		},
		&armcosmos.PrivateEndpointConnectionsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBPrivateEndpointConnectionUpdate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBPrivateEndpointConnectionUpdate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcosmos.PrivateEndpointConnection{
			Name: to.Ptr("privateEndpointConnectionName"),
			Type: to.Ptr("Microsoft.DocumentDb/databaseAccounts/privateEndpointConnections"),
			ID:   to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/rg1/providers/Microsoft.DocumentDb/databaseAccounts/ddb1/privateEndpointConnections/privateEndpointConnectionName"),
			Properties: &armcosmos.PrivateEndpointConnectionProperties{
				GroupID: to.Ptr("Sql"),
				PrivateEndpoint: &armcosmos.PrivateEndpointProperty{
					ID: to.Ptr("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/rg1Network/providers/Microsoft.Network/privateEndpoints/privateEndpointName"),
				},
				PrivateLinkServiceConnectionState: &armcosmos.PrivateLinkServiceConnectionStateProperty{
					Description:     to.Ptr("Auto-approved"),
					ActionsRequired: to.Ptr("None"),
					Status:          to.Ptr("Approved"),
				},
				ProvisioningState: to.Ptr("Succeeded"),
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateEndpointConnection) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateEndpointConnection)
			t.Fatalf("Mock response is not equal to example response for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBPrivateEndpointConnectionUpdate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateEndpointConnections_Delete(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBPrivateEndpointConnectionDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Deletes a private endpoint connection with a given name."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewPrivateEndpointConnectionsClient("00000000-1111-2222-3333-444444444444", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"rg1",
		"ddb1",
		"privateEndpointConnectionName",
		&armcosmos.PrivateEndpointConnectionsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBPrivateEndpointConnectionDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBPrivateEndpointConnectionDelete.json: %v", err)
	}
}

func TestPrivateLinkResources_ListByDatabaseAccount(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBPrivateLinkResourceListGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets private endpoint connection."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewPrivateLinkResourcesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	pager := client.ListByDatabaseAccount("rg1",
		"ddb1",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBPrivateLinkResourceListGet.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcosmos.PrivateLinkResourceListResult{
			Value: []*armcosmos.PrivateLinkResource{
				{
					Name: to.Ptr("sql"),
					Type: to.Ptr("Microsoft.DocumentDB/databaseAccounts/privateLinkResources"),
					ID:   to.Ptr("subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.DocumentDb/databaseAccounts/ddb1/privateLinkResources/sql"),
					Properties: &armcosmos.PrivateLinkResourceProperties{
						GroupID: to.Ptr("sql"),
						RequiredMembers: []*string{
							to.Ptr("ddb1"),
							to.Ptr("ddb1-westus")},
						RequiredZoneNames: []*string{
							to.Ptr("privatelink.documents.azure.net")},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.PrivateLinkResourceListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.PrivateLinkResourceListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBPrivateLinkResourceListGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestPrivateLinkResources_Get(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBPrivateLinkResourceGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Gets private endpoint connection."},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewPrivateLinkResourcesClient("00000000-1111-2222-3333-444444444444", cred, &options)
	res, err := client.Get(ctx,
		"rg1",
		"ddb1",
		"sql",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBPrivateLinkResourceGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcosmos.PrivateLinkResource{
			Name: to.Ptr("sql"),
			Type: to.Ptr("Microsoft.DocumentDB/databaseAccounts/privateLinkResources"),
			ID:   to.Ptr("subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.DocumentDb/databaseAccounts/ddb1/privateLinkResources/sql"),
			Properties: &armcosmos.PrivateLinkResourceProperties{
				GroupID: to.Ptr("sql"),
				RequiredMembers: []*string{
					to.Ptr("ddb1"),
					to.Ptr("ddb1-westus")},
				RequiredZoneNames: []*string{
					to.Ptr("privatelink.documents.azure.net")},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.PrivateLinkResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.PrivateLinkResource)
			t.Fatalf("Mock response is not equal to example response for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBPrivateLinkResourceGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRestorableDatabaseAccounts_ListByLocation(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBRestorableDatabaseAccountList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBRestorableDatabaseAccountList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewRestorableDatabaseAccountsClient("subid", cred, &options)
	pager := client.ListByLocation("West US",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBRestorableDatabaseAccountList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcosmos.RestorableDatabaseAccountsListResult{
			Value: []*armcosmos.RestorableDatabaseAccountGetResult{
				{
					Name:     to.Ptr("d9b26648-2f53-4541-b3d8-3044f4f9810d"),
					Type:     to.Ptr("Microsoft.DocumentDB/locations/restorableDatabaseAccounts"),
					ID:       to.Ptr("/subscriptions/subid/providers/Microsoft.DocumentDB/locations/West US/restorableDatabaseAccounts/d9b26648-2f53-4541-b3d8-3044f4f9810d"),
					Location: to.Ptr("West US"),
					Properties: &armcosmos.RestorableDatabaseAccountProperties{
						AccountName:  to.Ptr("ddb1"),
						APIType:      to.Ptr(armcosmos.APITypeSQL),
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-11T21:56:15Z"); return t }()),
						DeletionTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-12T22:05:09Z"); return t }()),
						RestorableLocations: []*armcosmos.RestorableLocationResource{
							{
								CreationTime:                      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-10-30T21:13:10Z"); return t }()),
								DeletionTime:                      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-10-30T21:13:35Z"); return t }()),
								LocationName:                      to.Ptr("South Central US"),
								RegionalDatabaseAccountInstanceID: to.Ptr("d7a01f78-606f-45c6-9dac-0df32f433bb5"),
							},
							{
								CreationTime:                      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-10-30T21:13:10Z"); return t }()),
								LocationName:                      to.Ptr("West US"),
								RegionalDatabaseAccountInstanceID: to.Ptr("fdb43d84-1572-4697-b6e7-2bcda0c51b2c"),
							}},
					},
				},
				{
					Name:     to.Ptr("4f9e6ace-ac7a-446c-98bc-194c502a06b4"),
					Type:     to.Ptr("Microsoft.DocumentDB/locations/restorableDatabaseAccounts"),
					ID:       to.Ptr("/subscriptions/subid/providers/Microsoft.DocumentDB/locations/West US/restorableDatabaseAccounts/4f9e6ace-ac7a-446c-98bc-194c502a06b4"),
					Location: to.Ptr("West US"),
					Properties: &armcosmos.RestorableDatabaseAccountProperties{
						AccountName:  to.Ptr("ddb2"),
						APIType:      to.Ptr(armcosmos.APITypeSQL),
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-01T08:05:18Z"); return t }()),
						RestorableLocations: []*armcosmos.RestorableLocationResource{
							{
								CreationTime:                      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-10-30T21:13:10Z"); return t }()),
								DeletionTime:                      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-10-30T21:13:35Z"); return t }()),
								LocationName:                      to.Ptr("South Central US"),
								RegionalDatabaseAccountInstanceID: to.Ptr("d7a01f78-606f-45c6-9dac-0df32f433bb5"),
							},
							{
								CreationTime:                      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-10-30T21:13:10Z"); return t }()),
								LocationName:                      to.Ptr("West US"),
								RegionalDatabaseAccountInstanceID: to.Ptr("fdb43d84-1572-4697-b6e7-2bcda0c51b2c"),
							}},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.RestorableDatabaseAccountsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.RestorableDatabaseAccountsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBRestorableDatabaseAccountList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRestorableDatabaseAccounts_List(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBRestorableDatabaseAccountNoLocationList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBRestorableDatabaseAccountNoLocationList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewRestorableDatabaseAccountsClient("subid", cred, &options)
	pager := client.List(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBRestorableDatabaseAccountNoLocationList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcosmos.RestorableDatabaseAccountsListResult{
			Value: []*armcosmos.RestorableDatabaseAccountGetResult{
				{
					Name:     to.Ptr("d9b26648-2f53-4541-b3d8-3044f4f9810d"),
					Type:     to.Ptr("Microsoft.DocumentDB/locations/restorableDatabaseAccounts"),
					ID:       to.Ptr("/subscriptions/subid/providers/Microsoft.DocumentDB/locations/West US/restorableDatabaseAccounts/d9b26648-2f53-4541-b3d8-3044f4f9810d"),
					Location: to.Ptr("West US"),
					Properties: &armcosmos.RestorableDatabaseAccountProperties{
						AccountName:  to.Ptr("ddb1"),
						APIType:      to.Ptr(armcosmos.APITypeSQL),
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-11T21:56:15Z"); return t }()),
						DeletionTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-12T22:05:09Z"); return t }()),
						RestorableLocations: []*armcosmos.RestorableLocationResource{
							{
								CreationTime:                      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-10-30T21:13:10Z"); return t }()),
								DeletionTime:                      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-10-30T21:13:35Z"); return t }()),
								LocationName:                      to.Ptr("South Central US"),
								RegionalDatabaseAccountInstanceID: to.Ptr("d7a01f78-606f-45c6-9dac-0df32f433bb5"),
							},
							{
								CreationTime:                      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-10-30T21:13:10Z"); return t }()),
								LocationName:                      to.Ptr("West US"),
								RegionalDatabaseAccountInstanceID: to.Ptr("fdb43d84-1572-4697-b6e7-2bcda0c51b2c"),
							}},
					},
				},
				{
					Name:     to.Ptr("4f9e6ace-ac7a-446c-98bc-194c502a06b4"),
					Type:     to.Ptr("Microsoft.DocumentDB/locations/restorableDatabaseAccounts"),
					ID:       to.Ptr("/subscriptions/subid/providers/Microsoft.DocumentDB/locations/West US/restorableDatabaseAccounts/4f9e6ace-ac7a-446c-98bc-194c502a06b4"),
					Location: to.Ptr("East US"),
					Properties: &armcosmos.RestorableDatabaseAccountProperties{
						AccountName:  to.Ptr("ddb2"),
						APIType:      to.Ptr(armcosmos.APITypeSQL),
						CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-05-01T08:05:18Z"); return t }()),
						RestorableLocations: []*armcosmos.RestorableLocationResource{
							{
								CreationTime:                      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-10-30T21:13:10Z"); return t }()),
								DeletionTime:                      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-10-30T21:13:35Z"); return t }()),
								LocationName:                      to.Ptr("South Central US"),
								RegionalDatabaseAccountInstanceID: to.Ptr("d7a01f78-606f-45c6-9dac-0df32f433bb5"),
							},
							{
								CreationTime:                      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-10-30T21:13:10Z"); return t }()),
								LocationName:                      to.Ptr("West US"),
								RegionalDatabaseAccountInstanceID: to.Ptr("fdb43d84-1572-4697-b6e7-2bcda0c51b2c"),
							}},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.RestorableDatabaseAccountsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.RestorableDatabaseAccountsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBRestorableDatabaseAccountNoLocationList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRestorableDatabaseAccounts_GetByLocation(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBRestorableDatabaseAccountGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBRestorableDatabaseAccountGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewRestorableDatabaseAccountsClient("subid", cred, &options)
	res, err := client.GetByLocation(ctx,
		"West US",
		"d9b26648-2f53-4541-b3d8-3044f4f9810d",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBRestorableDatabaseAccountGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcosmos.RestorableDatabaseAccountGetResult{
			Name:     to.Ptr("d9b26648-2f53-4541-b3d8-3044f4f9810d"),
			Type:     to.Ptr("Microsoft.DocumentDB/locations/restorableDatabaseAccounts"),
			ID:       to.Ptr("/subscriptions/subid/providers/Microsoft.DocumentDB/locations/West US/restorableDatabaseAccounts/d9b26648-2f53-4541-b3d8-3044f4f9810d"),
			Location: to.Ptr("West US"),
			Properties: &armcosmos.RestorableDatabaseAccountProperties{
				AccountName:  to.Ptr("ddb1"),
				APIType:      to.Ptr(armcosmos.APITypeSQL),
				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-04-11T21:56:15Z"); return t }()),
				DeletionTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-03-12T22:05:09Z"); return t }()),
				RestorableLocations: []*armcosmos.RestorableLocationResource{
					{
						CreationTime:                      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-10-30T21:13:10Z"); return t }()),
						DeletionTime:                      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-10-30T21:13:35Z"); return t }()),
						LocationName:                      to.Ptr("South Central US"),
						RegionalDatabaseAccountInstanceID: to.Ptr("d7a01f78-606f-45c6-9dac-0df32f433bb5"),
					},
					{
						CreationTime:                      to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-10-30T21:13:10Z"); return t }()),
						LocationName:                      to.Ptr("West US"),
						RegionalDatabaseAccountInstanceID: to.Ptr("fdb43d84-1572-4697-b6e7-2bcda0c51b2c"),
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.RestorableDatabaseAccountGetResult) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.RestorableDatabaseAccountGetResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBRestorableDatabaseAccountGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRestorableSQLDatabases_List(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBRestorableSqlDatabaseList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBRestorableSqlDatabaseList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewRestorableSQLDatabasesClient("2296c272-5d55-40d9-bc05-4d56dc2d7588", cred, &options)
	pager := client.List("WestUS",
		"d9b26648-2f53-4541-b3d8-3044f4f9810d",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBRestorableSqlDatabaseList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcosmos.RestorableSQLDatabasesListResult{
			Value: []*armcosmos.RestorableSQLDatabaseGetResult{
				{
					Name: to.Ptr("59c21367-b98b-4a8e-abb7-b6f46600decc"),
					Type: to.Ptr("Microsoft.DocumentDB/locations/restorableDatabaseAccounts/restorableSqlDatabases"),
					ID:   to.Ptr("/subscriptions/2296c272-5d55-40d9-bc05-4d56dc2d7588/providers/Microsoft.DocumentDb/locations/westus/restorableDatabaseAccounts/36f09704-6be3-4f33-aa05-17b73e504c75/restorableSqlDatabases/59c21367-b98b-4a8e-abb7-b6f46600decc"),
					Properties: &armcosmos.RestorableSQLDatabaseProperties{
						Resource: &armcosmos.RestorableSQLDatabasePropertiesResource{
							Rid: to.Ptr("DLB14gAAAA=="),
							Database: &armcosmos.RestorableSQLDatabasePropertiesResourceDatabase{
								Etag:  to.Ptr("\"0000c20a-0000-0700-0000-5f4ff63f0000\""),
								Rid:   to.Ptr("3fu-hg=="),
								ID:    to.Ptr("Database1"),
								Colls: to.Ptr("colls/"),
								Self:  to.Ptr("dbs/3fu-hg==/"),
								Users: to.Ptr("users/"),
							},
							EventTimestamp:  to.Ptr("2020-09-02T19:45:03Z"),
							OperationType:   to.Ptr(armcosmos.OperationTypeCreate),
							OwnerID:         to.Ptr("Database1"),
							OwnerResourceID: to.Ptr("3fu-hg=="),
						},
					},
				},
				{
					Name: to.Ptr("8456cb17-cdb0-4c6a-8db8-d0ff3f886257"),
					Type: to.Ptr("Microsoft.DocumentDB/locations/restorableDatabaseAccounts/restorableSqlDatabases"),
					ID:   to.Ptr("/subscriptions/2296c272-5d55-40d9-bc05-4d56dc2d7588/providers/Microsoft.DocumentDb/locations/westus/restorableDatabaseAccounts/d9b26648-2f53-4541-b3d8-3044f4f9810d/restorableSqlDatabases/8456cb17-cdb0-4c6a-8db8-d0ff3f886257"),
					Properties: &armcosmos.RestorableSQLDatabaseProperties{
						Resource: &armcosmos.RestorableSQLDatabasePropertiesResource{
							Rid: to.Ptr("ESXNLAAAAA=="),
							Database: &armcosmos.RestorableSQLDatabasePropertiesResourceDatabase{
								Etag:  to.Ptr("\"0000c20a-0000-0700-0000-5f4ff63f0000\""),
								Rid:   to.Ptr("3fu-hg=="),
								Ts:    to.Ptr[float32](1599075903),
								ID:    to.Ptr("Database1"),
								Colls: to.Ptr("colls/"),
								Self:  to.Ptr("dbs/3fu-hg==/"),
								Users: to.Ptr("users/"),
							},
							EventTimestamp:  to.Ptr("2020-09-02T19:53:42Z"),
							OperationType:   to.Ptr(armcosmos.OperationTypeDelete),
							OwnerID:         to.Ptr("Database1"),
							OwnerResourceID: to.Ptr("3fu-hg=="),
						},
					},
				},
				{
					Name: to.Ptr("2c07991b-9c7c-4e85-be68-b18c1f2ff326"),
					Type: to.Ptr("Microsoft.DocumentDB/locations/restorableDatabaseAccounts/restorableSqlDatabases"),
					ID:   to.Ptr("/subscriptions/2296c272-5d55-40d9-bc05-4d56dc2d7588/providers/Microsoft.DocumentDb/locations/westus/restorableDatabaseAccounts/d9b26648-2f53-4541-b3d8-3044f4f9810d/restorableSqlDatabases/2c07991b-9c7c-4e85-be68-b18c1f2ff326"),
					Properties: &armcosmos.RestorableSQLDatabaseProperties{
						Resource: &armcosmos.RestorableSQLDatabasePropertiesResource{
							Rid: to.Ptr("aXFqUQAAAA=="),
							Database: &armcosmos.RestorableSQLDatabasePropertiesResourceDatabase{
								Etag:  to.Ptr("\"0000ca0a-0000-0700-0000-5f4ff82b0000\""),
								Rid:   to.Ptr("0SziSg=="),
								ID:    to.Ptr("Database2"),
								Colls: to.Ptr("colls/"),
								Self:  to.Ptr("dbs/0SziSg==/"),
								Users: to.Ptr("users/"),
							},
							EventTimestamp:  to.Ptr("2020-09-02T19:53:15Z"),
							OperationType:   to.Ptr(armcosmos.OperationTypeCreate),
							OwnerID:         to.Ptr("Database2"),
							OwnerResourceID: to.Ptr("0SziSg=="),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.RestorableSQLDatabasesListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.RestorableSQLDatabasesListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBRestorableSqlDatabaseList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRestorableSQLContainers_List(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBRestorableSqlContainerList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBRestorableSqlContainerList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewRestorableSQLContainersClient("subid", cred, &options)
	pager := client.List("WestUS",
		"98a570f2-63db-4117-91f0-366327b7b353",
		&armcosmos.RestorableSQLContainersClientListOptions{RestorableSQLDatabaseRid: to.Ptr("3fu-hg=="),
			StartTime: nil,
			EndTime:   nil,
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBRestorableSqlContainerList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcosmos.RestorableSQLContainersListResult{
			Value: []*armcosmos.RestorableSQLContainerGetResult{
				{
					Name: to.Ptr("79609a98-3394-41f8-911f-cfab0c075c86"),
					Type: to.Ptr("Microsoft.DocumentDB/locations/restorableDatabaseAccounts/restorableSqlContainers"),
					ID:   to.Ptr("/subscriptions/subid/providers/Microsoft.DocumentDb/locations/westus/restorableDatabaseAccounts/98a570f2-63db-4117-91f0-366327b7b353/restorableSqlContainers/79609a98-3394-41f8-911f-cfab0c075c86"),
					Properties: &armcosmos.RestorableSQLContainerProperties{
						Resource: &armcosmos.RestorableSQLContainerPropertiesResource{
							Rid: to.Ptr("zAyAPQAAAA=="),
							Container: &armcosmos.RestorableSQLContainerPropertiesResourceContainer{
								Etag: to.Ptr("\"00003e00-0000-0700-0000-5f85338a0000\""),
								Rid:  to.Ptr("V18LoLrv-qA="),
								ConflictResolutionPolicy: &armcosmos.ConflictResolutionPolicy{
									ConflictResolutionPath:      to.Ptr("/_ts"),
									ConflictResolutionProcedure: to.Ptr(""),
									Mode:                        to.Ptr(armcosmos.ConflictResolutionModeLastWriterWins),
								},
								ID: to.Ptr("Container1"),
								IndexingPolicy: &armcosmos.IndexingPolicy{
									Automatic: to.Ptr(true),
									ExcludedPaths: []*armcosmos.ExcludedPath{
										{
											Path: to.Ptr("/\"_etag\"/?"),
										}},
									IncludedPaths: []*armcosmos.IncludedPath{
										{
											Path: to.Ptr("/*"),
										},
										{
											Path: to.Ptr("/\"_ts\"/?"),
										}},
									IndexingMode: to.Ptr(armcosmos.IndexingModeConsistent),
								},
								Self: to.Ptr("dbs/V18LoA==/colls/V18LoLrv-qA=/"),
							},
							EventTimestamp:  to.Ptr("2020-10-13T04:56:42Z"),
							OperationType:   to.Ptr(armcosmos.OperationTypeCreate),
							OwnerID:         to.Ptr("Container1"),
							OwnerResourceID: to.Ptr("V18LoLrv-qA="),
						},
					},
				},
				{
					Name: to.Ptr("e85298a1-c631-4726-825e-a7ca092e9098"),
					Type: to.Ptr("Microsoft.DocumentDB/locations/restorableDatabaseAccounts/restorableSqlContainers"),
					ID:   to.Ptr("/subscriptions/subid/providers/Microsoft.DocumentDb/locations/westus/restorableDatabaseAccounts/98a570f2-63db-4117-91f0-366327b7b353/restorableSqlContainers/e85298a1-c631-4726-825e-a7ca092e9098"),
					Properties: &armcosmos.RestorableSQLContainerProperties{
						Resource: &armcosmos.RestorableSQLContainerPropertiesResource{
							Rid: to.Ptr("PrArcgAAAA=="),
							Container: &armcosmos.RestorableSQLContainerPropertiesResourceContainer{
								Etag: to.Ptr("\"00004400-0000-0700-0000-5f85351f0000\""),
								Rid:  to.Ptr("V18LoLrv-qA="),
								ConflictResolutionPolicy: &armcosmos.ConflictResolutionPolicy{
									ConflictResolutionPath:      to.Ptr("/_ts"),
									ConflictResolutionProcedure: to.Ptr(""),
									Mode:                        to.Ptr(armcosmos.ConflictResolutionModeLastWriterWins),
								},
								DefaultTTL: to.Ptr[int32](12345),
								ID:         to.Ptr("Container1"),
								IndexingPolicy: &armcosmos.IndexingPolicy{
									Automatic: to.Ptr(true),
									ExcludedPaths: []*armcosmos.ExcludedPath{
										{
											Path: to.Ptr("/\"_etag\"/?"),
										}},
									IncludedPaths: []*armcosmos.IncludedPath{
										{
											Path: to.Ptr("/*"),
										},
										{
											Path: to.Ptr("/\"_ts\"/?"),
										}},
									IndexingMode: to.Ptr(armcosmos.IndexingModeConsistent),
								},
								Self: to.Ptr("dbs/V18LoA==/colls/V18LoLrv-qA=/"),
							},
							EventTimestamp:  to.Ptr("2020-10-13T05:03:27Z"),
							OperationType:   to.Ptr(armcosmos.OperationTypeReplace),
							OwnerID:         to.Ptr("Container1"),
							OwnerResourceID: to.Ptr("V18LoLrv-qA="),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.RestorableSQLContainersListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.RestorableSQLContainersListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBRestorableSqlContainerList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRestorableSQLResources_List(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBRestorableSqlResourceList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBRestorableSqlResourceList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewRestorableSQLResourcesClient("2296c272-5d55-40d9-bc05-4d56dc2d7588", cred, &options)
	pager := client.List("WestUS",
		"d9b26648-2f53-4541-b3d8-3044f4f9810d",
		&armcosmos.RestorableSQLResourcesClientListOptions{RestoreLocation: to.Ptr("WestUS"),
			RestoreTimestampInUTC: to.Ptr("10/13/2020 4:56"),
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBRestorableSqlResourceList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcosmos.RestorableSQLResourcesListResult{
			Value: []*armcosmos.DatabaseRestoreResource{
				{
					CollectionNames: []*string{
						to.Ptr("Container1")},
					DatabaseName: to.Ptr("Database1"),
				},
				{
					CollectionNames: []*string{
						to.Ptr("Container1"),
						to.Ptr("Container2")},
					DatabaseName: to.Ptr("Database2"),
				},
				{
					CollectionNames: []*string{},
					DatabaseName:    to.Ptr("Database3"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.RestorableSQLResourcesListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.RestorableSQLResourcesListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBRestorableSqlResourceList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRestorableMongodbDatabases_List(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBRestorableMongodbDatabaseList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBRestorableMongodbDatabaseList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewRestorableMongodbDatabasesClient("2296c272-5d55-40d9-bc05-4d56dc2d7588", cred, &options)
	pager := client.List("WestUS",
		"d9b26648-2f53-4541-b3d8-3044f4f9810d",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBRestorableMongodbDatabaseList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcosmos.RestorableMongodbDatabasesListResult{
			Value: []*armcosmos.RestorableMongodbDatabaseGetResult{
				{
					Name: to.Ptr("59c21367-b98b-4a8e-abb7-b6f46600decc"),
					Type: to.Ptr("Microsoft.DocumentDB/locations/restorableDatabaseAccounts/restorableMongodbDatabases"),
					ID:   to.Ptr("/subscriptions/2296c272-5d55-40d9-bc05-4d56dc2d7588/providers/Microsoft.DocumentDb/locations/westus/restorableDatabaseAccounts/36f09704-6be3-4f33-aa05-17b73e504c75/restorableMongodbDatabases/59c21367-b98b-4a8e-abb7-b6f46600decc"),
					Properties: &armcosmos.RestorableMongodbDatabaseProperties{
						Resource: &armcosmos.RestorableMongodbDatabasePropertiesResource{
							Rid:             to.Ptr("DLB14gAAAA=="),
							EventTimestamp:  to.Ptr("2020-09-02T19:45:03Z"),
							OperationType:   to.Ptr(armcosmos.OperationTypeCreate),
							OwnerID:         to.Ptr("Database1"),
							OwnerResourceID: to.Ptr("PD5DALigDgw="),
						},
					},
				},
				{
					Name: to.Ptr("8456cb17-cdb0-4c6a-8db8-d0ff3f886257"),
					Type: to.Ptr("Microsoft.DocumentDB/locations/restorableDatabaseAccounts/restorableMongodbDatabases"),
					ID:   to.Ptr("/subscriptions/2296c272-5d55-40d9-bc05-4d56dc2d7588/providers/Microsoft.DocumentDb/locations/westus/restorableDatabaseAccounts/d9b26648-2f53-4541-b3d8-3044f4f9810d/restorableMongodbDatabases/8456cb17-cdb0-4c6a-8db8-d0ff3f886257"),
					Properties: &armcosmos.RestorableMongodbDatabaseProperties{
						Resource: &armcosmos.RestorableMongodbDatabasePropertiesResource{
							Rid:             to.Ptr("ESXNLAAAAA=="),
							EventTimestamp:  to.Ptr("2020-09-02T19:53:42Z"),
							OperationType:   to.Ptr(armcosmos.OperationTypeDelete),
							OwnerID:         to.Ptr("Database1"),
							OwnerResourceID: to.Ptr("PD5DALigDgw="),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.RestorableMongodbDatabasesListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.RestorableMongodbDatabasesListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBRestorableMongodbDatabaseList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRestorableMongodbCollections_List(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBRestorableMongodbCollectionList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBRestorableMongodbCollectionList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewRestorableMongodbCollectionsClient("subid", cred, &options)
	pager := client.List("WestUS",
		"98a570f2-63db-4117-91f0-366327b7b353",
		&armcosmos.RestorableMongodbCollectionsClientListOptions{RestorableMongodbDatabaseRid: to.Ptr("PD5DALigDgw=")})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBRestorableMongodbCollectionList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcosmos.RestorableMongodbCollectionsListResult{
			Value: []*armcosmos.RestorableMongodbCollectionGetResult{
				{
					Name: to.Ptr("79609a98-3394-41f8-911f-cfab0c075c86"),
					Type: to.Ptr("Microsoft.DocumentDB/locations/restorableDatabaseAccounts/restorableMongodbCollections"),
					ID:   to.Ptr("/subscriptions/subid/providers/Microsoft.DocumentDb/locations/westus/restorableDatabaseAccounts/98a570f2-63db-4117-91f0-366327b7b353/restorableMongodbCollections/79609a98-3394-41f8-911f-cfab0c075c86"),
					Properties: &armcosmos.RestorableMongodbCollectionProperties{
						Resource: &armcosmos.RestorableMongodbCollectionPropertiesResource{
							Rid:             to.Ptr("zAyAPQAAAA=="),
							EventTimestamp:  to.Ptr("2020-10-13T04:56:42Z"),
							OperationType:   to.Ptr(armcosmos.OperationTypeCreate),
							OwnerID:         to.Ptr("Collection1"),
							OwnerResourceID: to.Ptr("V18LoLrv-qA="),
						},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.RestorableMongodbCollectionsListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.RestorableMongodbCollectionsListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBRestorableMongodbCollectionList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestRestorableMongodbResources_List(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBRestorableMongodbResourceList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBRestorableMongodbResourceList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewRestorableMongodbResourcesClient("2296c272-5d55-40d9-bc05-4d56dc2d7588", cred, &options)
	pager := client.List("WestUS",
		"d9b26648-2f53-4541-b3d8-3044f4f9810d",
		&armcosmos.RestorableMongodbResourcesClientListOptions{RestoreLocation: to.Ptr("WestUS"),
			RestoreTimestampInUTC: to.Ptr("10/13/2020 4:56"),
		})
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBRestorableMongodbResourceList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcosmos.RestorableMongodbResourcesListResult{
			Value: []*armcosmos.DatabaseRestoreResource{
				{
					CollectionNames: []*string{
						to.Ptr("Collection1")},
					DatabaseName: to.Ptr("Database1"),
				},
				{
					CollectionNames: []*string{
						to.Ptr("Collection1"),
						to.Ptr("Collection2")},
					DatabaseName: to.Ptr("Database2"),
				},
				{
					CollectionNames: []*string{},
					DatabaseName:    to.Ptr("Database3"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.RestorableMongodbResourcesListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.RestorableMongodbResourcesListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBRestorableMongodbResourceList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCassandraClusters_ListBySubscription(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBManagedCassandraClusterListBySubscription.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBManagedCassandraClusterListBySubscription"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewCassandraClustersClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.ListBySubscription(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBManagedCassandraClusterListBySubscription.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcosmos.ListClusters{
			Value: []*armcosmos.ClusterResource{
				{
					Name:     to.Ptr("cassandra-prod"),
					Type:     to.Ptr("Microsoft.DocumentDB/cassandraClusters"),
					ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.DocumentDB/cassandraClusters"),
					Location: to.Ptr("West US"),
					Tags:     map[string]*string{},
					Properties: &armcosmos.ClusterResourceProperties{
						AuthenticationMethod: to.Ptr(armcosmos.AuthenticationMethodCassandra),
						CassandraVersion:     to.Ptr("3.11"),
						ClientCertificates: []*armcosmos.Certificate{
							{
								Pem: to.Ptr("-----BEGIN CERTIFICATE-----\n...Base64 encoded certificate...\n-----END CERTIFICATE-----"),
							}},
						ClusterNameOverride:         to.Ptr("ClusterNameIllegalForAzureResource"),
						DelegatedManagementSubnetID: to.Ptr("/subscriptions/536e130b-d7d6-4ac7-98a5-de20d69588d2/resourceGroups/customer-vnet-rg/providers/Microsoft.Network/virtualNetworks/customer-vnet/subnets/management"),
						ExternalGossipCertificates: []*armcosmos.Certificate{
							{
								Pem: to.Ptr("-----BEGIN CERTIFICATE-----\n...Base64 encoded certificate...\n-----END CERTIFICATE-----"),
							}},
						ExternalSeedNodes: []*armcosmos.SeedNode{
							{
								IPAddress: to.Ptr("10.52.221.2"),
							},
							{
								IPAddress: to.Ptr("10.52.221.3"),
							},
							{
								IPAddress: to.Ptr("10.52.221.4"),
							}},
						GossipCertificates: []*armcosmos.Certificate{
							{
								Pem: to.Ptr("-----BEGIN CERTIFICATE-----\n...Base64 encoded certificate...\n-----END CERTIFICATE-----"),
							}},
						HoursBetweenBackups: to.Ptr[int32](24),
						ProvisioningState:   to.Ptr(armcosmos.ManagedCassandraProvisioningStateSucceeded),
						SeedNodes: []*armcosmos.SeedNode{
							{
								IPAddress: to.Ptr("10.52.221.2"),
							},
							{
								IPAddress: to.Ptr("10.52.221.3"),
							},
							{
								IPAddress: to.Ptr("10.52.221.4"),
							},
							{
								IPAddress: to.Ptr("192.168.12.2"),
							},
							{
								IPAddress: to.Ptr("192.168.12.3"),
							},
							{
								IPAddress: to.Ptr("192.168.12.4"),
							}},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ListClusters) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ListClusters)
			t.Fatalf("Mock response is not equal to example response for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBManagedCassandraClusterListBySubscription.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCassandraClusters_ListByResourceGroup(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBManagedCassandraClusterListByResourceGroup.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBManagedCassandraClusterListByResourceGroup"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewCassandraClustersClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.ListByResourceGroup("cassandra-prod-rg",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBManagedCassandraClusterListByResourceGroup.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcosmos.ListClusters{
			Value: []*armcosmos.ClusterResource{
				{
					Name:     to.Ptr("cassandra-prod"),
					Type:     to.Ptr("Microsoft.DocumentDB/cassandraClusters"),
					ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/cassandra-prod-rg/providers/Microsoft.DocumentDB/cassandraClusters"),
					Location: to.Ptr("West US"),
					Tags:     map[string]*string{},
					Properties: &armcosmos.ClusterResourceProperties{
						AuthenticationMethod: to.Ptr(armcosmos.AuthenticationMethodCassandra),
						CassandraVersion:     to.Ptr("3.11"),
						ClientCertificates: []*armcosmos.Certificate{
							{
								Pem: to.Ptr("-----BEGIN CERTIFICATE-----\n...Base64 encoded certificate...\n-----END CERTIFICATE-----"),
							}},
						ClusterNameOverride:         to.Ptr("ClusterNameIllegalForAzureResource"),
						DelegatedManagementSubnetID: to.Ptr("/subscriptions/536e130b-d7d6-4ac7-98a5-de20d69588d2/resourceGroups/customer-vnet-rg/providers/Microsoft.Network/virtualNetworks/customer-vnet/subnets/management"),
						ExternalGossipCertificates: []*armcosmos.Certificate{
							{
								Pem: to.Ptr("-----BEGIN CERTIFICATE-----\n...Base64 encoded certificate...\n-----END CERTIFICATE-----"),
							}},
						ExternalSeedNodes: []*armcosmos.SeedNode{
							{
								IPAddress: to.Ptr("10.52.221.2"),
							},
							{
								IPAddress: to.Ptr("10.52.221.3"),
							},
							{
								IPAddress: to.Ptr("10.52.221.4"),
							}},
						GossipCertificates: []*armcosmos.Certificate{
							{
								Pem: to.Ptr("-----BEGIN CERTIFICATE-----\n...Base64 encoded certificate...\n-----END CERTIFICATE-----"),
							}},
						HoursBetweenBackups: to.Ptr[int32](24),
						ProvisioningState:   to.Ptr(armcosmos.ManagedCassandraProvisioningStateSucceeded),
						SeedNodes: []*armcosmos.SeedNode{
							{
								IPAddress: to.Ptr("10.52.221.2"),
							},
							{
								IPAddress: to.Ptr("10.52.221.3"),
							},
							{
								IPAddress: to.Ptr("10.52.221.4"),
							},
							{
								IPAddress: to.Ptr("192.168.12.2"),
							},
							{
								IPAddress: to.Ptr("192.168.12.3"),
							},
							{
								IPAddress: to.Ptr("192.168.12.4"),
							}},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ListClusters) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ListClusters)
			t.Fatalf("Mock response is not equal to example response for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBManagedCassandraClusterListByResourceGroup.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCassandraClusters_Get(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBManagedCassandraClusterGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBManagedCassandraClusterGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewCassandraClustersClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		"cassandra-prod-rg",
		"cassandra-prod",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBManagedCassandraClusterGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcosmos.ClusterResource{
			Name:     to.Ptr("cassandra-prod"),
			Type:     to.Ptr("Microsoft.DocumentDB/cassandraClusters"),
			ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/cassandra-prod-rg/providers/Microsoft.DocumentDB/cassandraClusters/cassandra-prod"),
			Location: to.Ptr("West US"),
			Tags:     map[string]*string{},
			Properties: &armcosmos.ClusterResourceProperties{
				AuthenticationMethod: to.Ptr(armcosmos.AuthenticationMethodCassandra),
				CassandraVersion:     to.Ptr("3.11"),
				ClientCertificates: []*armcosmos.Certificate{
					{
						Pem: to.Ptr("-----BEGIN CERTIFICATE-----\n...Base64 encoded certificate...\n-----END CERTIFICATE-----"),
					}},
				ClusterNameOverride:         to.Ptr("ClusterNameIllegalForAzureResource"),
				DelegatedManagementSubnetID: to.Ptr("/subscriptions/536e130b-d7d6-4ac7-98a5-de20d69588d2/resourceGroups/customer-vnet-rg/providers/Microsoft.Network/virtualNetworks/customer-vnet/subnets/management"),
				ExternalGossipCertificates: []*armcosmos.Certificate{
					{
						Pem: to.Ptr("-----BEGIN CERTIFICATE-----\n...Base64 encoded certificate...\n-----END CERTIFICATE-----"),
					}},
				ExternalSeedNodes: []*armcosmos.SeedNode{
					{
						IPAddress: to.Ptr("10.52.221.2"),
					},
					{
						IPAddress: to.Ptr("10.52.221.3"),
					},
					{
						IPAddress: to.Ptr("10.52.221.4"),
					}},
				GossipCertificates: []*armcosmos.Certificate{
					{
						Pem: to.Ptr("-----BEGIN CERTIFICATE-----\n...Base64 encoded certificate...\n-----END CERTIFICATE-----"),
					}},
				HoursBetweenBackups: to.Ptr[int32](24),
				ProvisioningState:   to.Ptr(armcosmos.ManagedCassandraProvisioningStateSucceeded),
				SeedNodes: []*armcosmos.SeedNode{
					{
						IPAddress: to.Ptr("10.52.221.2"),
					},
					{
						IPAddress: to.Ptr("10.52.221.3"),
					},
					{
						IPAddress: to.Ptr("10.52.221.4"),
					},
					{
						IPAddress: to.Ptr("192.168.12.2"),
					},
					{
						IPAddress: to.Ptr("192.168.12.3"),
					},
					{
						IPAddress: to.Ptr("192.168.12.4"),
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ClusterResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ClusterResource)
			t.Fatalf("Mock response is not equal to example response for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBManagedCassandraClusterGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCassandraClusters_Delete(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBManagedCassandraClusterDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBManagedCassandraClusterDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewCassandraClustersClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"cassandra-prod-rg",
		"cassandra-prod",
		&armcosmos.CassandraClustersClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBManagedCassandraClusterDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBManagedCassandraClusterDelete.json: %v", err)
	}
}

func TestCassandraClusters_CreateUpdate(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBManagedCassandraClusterCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBManagedCassandraClusterCreate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewCassandraClustersClient("subid", cred, &options)
	poller, err := client.BeginCreateUpdate(ctx,
		"cassandra-prod-rg",
		"cassandra-prod",
		armcosmos.ClusterResource{
			Location: to.Ptr("West US"),
			Tags:     map[string]*string{},
			Properties: &armcosmos.ClusterResourceProperties{
				AuthenticationMethod: to.Ptr(armcosmos.AuthenticationMethodCassandra),
				CassandraVersion:     to.Ptr("3.11"),
				ClientCertificates: []*armcosmos.Certificate{
					{
						Pem: to.Ptr("-----BEGIN CERTIFICATE-----\n...Base64 encoded certificate...\n-----END CERTIFICATE-----"),
					}},
				ClusterNameOverride:         to.Ptr("ClusterNameIllegalForAzureResource"),
				DelegatedManagementSubnetID: to.Ptr("/subscriptions/536e130b-d7d6-4ac7-98a5-de20d69588d2/resourceGroups/customer-vnet-rg/providers/Microsoft.Network/virtualNetworks/customer-vnet/subnets/management"),
				ExternalGossipCertificates: []*armcosmos.Certificate{
					{
						Pem: to.Ptr("-----BEGIN CERTIFICATE-----\n...Base64 encoded certificate...\n-----END CERTIFICATE-----"),
					}},
				ExternalSeedNodes: []*armcosmos.SeedNode{
					{
						IPAddress: to.Ptr("10.52.221.2"),
					},
					{
						IPAddress: to.Ptr("10.52.221.3"),
					},
					{
						IPAddress: to.Ptr("10.52.221.4"),
					}},
				HoursBetweenBackups:           to.Ptr[int32](24),
				InitialCassandraAdminPassword: to.Ptr("mypassword"),
			},
		},
		&armcosmos.CassandraClustersClientBeginCreateUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBManagedCassandraClusterCreate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBManagedCassandraClusterCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcosmos.ClusterResource{
			Name:     to.Ptr("cassandra-prod"),
			Type:     to.Ptr("Microsoft.DocumentDB/cassandraClusters"),
			ID:       to.Ptr("/subscriptions/subid/resourceGroups/cassandra-prod-rg/providers/Microsoft.DocumentDB/cassandraClusters/cassandra-prod"),
			Location: to.Ptr("West US"),
			Tags:     map[string]*string{},
			Properties: &armcosmos.ClusterResourceProperties{
				AuthenticationMethod: to.Ptr(armcosmos.AuthenticationMethodCassandra),
				CassandraVersion:     to.Ptr("3.11"),
				ClientCertificates: []*armcosmos.Certificate{
					{
						Pem: to.Ptr("-----BEGIN CERTIFICATE-----\n...Base64 encoded certificate...\n-----END CERTIFICATE-----"),
					}},
				ClusterNameOverride:         to.Ptr("ClusterNameIllegalForAzureResource"),
				DelegatedManagementSubnetID: to.Ptr("/subscriptions/536e130b-d7d6-4ac7-98a5-de20d69588d2/resourceGroups/customer-vnet-rg/providers/Microsoft.Network/virtualNetworks/customer-vnet/subnets/management"),
				ExternalGossipCertificates: []*armcosmos.Certificate{
					{
						Pem: to.Ptr("-----BEGIN CERTIFICATE-----\n...Base64 encoded certificate...\n-----END CERTIFICATE-----"),
					}},
				ExternalSeedNodes: []*armcosmos.SeedNode{
					{
						IPAddress: to.Ptr("10.52.221.2"),
					},
					{
						IPAddress: to.Ptr("10.52.221.3"),
					},
					{
						IPAddress: to.Ptr("10.52.221.4"),
					}},
				GossipCertificates: []*armcosmos.Certificate{
					{
						Pem: to.Ptr("-----BEGIN CERTIFICATE-----\n...Base64 encoded certificate...\n-----END CERTIFICATE-----"),
					}},
				HoursBetweenBackups: to.Ptr[int32](24),
				ProvisioningState:   to.Ptr(armcosmos.ManagedCassandraProvisioningStateSucceeded),
				SeedNodes: []*armcosmos.SeedNode{
					{
						IPAddress: to.Ptr("10.52.221.2"),
					},
					{
						IPAddress: to.Ptr("10.52.221.3"),
					},
					{
						IPAddress: to.Ptr("10.52.221.4"),
					},
					{
						IPAddress: to.Ptr("192.168.12.2"),
					},
					{
						IPAddress: to.Ptr("192.168.12.3"),
					},
					{
						IPAddress: to.Ptr("192.168.12.4"),
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ClusterResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ClusterResource)
			t.Fatalf("Mock response is not equal to example response for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBManagedCassandraClusterCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCassandraClusters_Update(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBManagedCassandraClusterPatch.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBManagedCassandraClusterPatch"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewCassandraClustersClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"cassandra-prod-rg",
		"cassandra-prod",
		armcosmos.ClusterResource{
			Tags: map[string]*string{
				"owner": to.Ptr("mike"),
			},
			Properties: &armcosmos.ClusterResourceProperties{
				AuthenticationMethod: to.Ptr(armcosmos.AuthenticationMethodNone),
				ExternalGossipCertificates: []*armcosmos.Certificate{
					{
						Pem: to.Ptr("-----BEGIN CERTIFICATE-----\n...Base64 encoded certificate...\n-----END CERTIFICATE-----"),
					}},
				ExternalSeedNodes: []*armcosmos.SeedNode{
					{
						IPAddress: to.Ptr("10.52.221.2"),
					},
					{
						IPAddress: to.Ptr("10.52.221.3"),
					},
					{
						IPAddress: to.Ptr("10.52.221.4"),
					}},
				HoursBetweenBackups: to.Ptr[int32](12),
			},
		},
		&armcosmos.CassandraClustersClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBManagedCassandraClusterPatch.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBManagedCassandraClusterPatch.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcosmos.ClusterResource{
			Name:     to.Ptr("cassandra-prod"),
			Type:     to.Ptr("Microsoft.DocumentDB/cassandraClusters"),
			ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/cassandra-prod-rg/providers/Microsoft.DocumentDB/cassandraClusters/cassandra-prod"),
			Location: to.Ptr("West US"),
			Tags:     map[string]*string{},
			Properties: &armcosmos.ClusterResourceProperties{
				AuthenticationMethod: to.Ptr(armcosmos.AuthenticationMethodCassandra),
				CassandraVersion:     to.Ptr("3.11"),
				ClientCertificates: []*armcosmos.Certificate{
					{
						Pem: to.Ptr("-----BEGIN CERTIFICATE-----\n...Base64 encoded certificate...\n-----END CERTIFICATE-----"),
					}},
				ClusterNameOverride:         to.Ptr("ClusterNameIllegalForAzureResource"),
				DelegatedManagementSubnetID: to.Ptr("/subscriptions/536e130b-d7d6-4ac7-98a5-de20d69588d2/resourceGroups/customer-vnet-rg/providers/Microsoft.Network/virtualNetworks/customer-vnet/subnets/management"),
				ExternalGossipCertificates: []*armcosmos.Certificate{
					{
						Pem: to.Ptr("-----BEGIN CERTIFICATE-----\n...Base64 encoded certificate...\n-----END CERTIFICATE-----"),
					}},
				ExternalSeedNodes: []*armcosmos.SeedNode{
					{
						IPAddress: to.Ptr("10.52.221.2"),
					},
					{
						IPAddress: to.Ptr("10.52.221.3"),
					},
					{
						IPAddress: to.Ptr("10.52.221.4"),
					}},
				GossipCertificates: []*armcosmos.Certificate{
					{
						Pem: to.Ptr("-----BEGIN CERTIFICATE-----\n...Base64 encoded certificate...\n-----END CERTIFICATE-----"),
					}},
				HoursBetweenBackups: to.Ptr[int32](24),
				ProvisioningState:   to.Ptr(armcosmos.ManagedCassandraProvisioningStateSucceeded),
				SeedNodes: []*armcosmos.SeedNode{
					{
						IPAddress: to.Ptr("10.52.221.2"),
					},
					{
						IPAddress: to.Ptr("10.52.221.3"),
					},
					{
						IPAddress: to.Ptr("10.52.221.4"),
					},
					{
						IPAddress: to.Ptr("192.168.12.2"),
					},
					{
						IPAddress: to.Ptr("192.168.12.3"),
					},
					{
						IPAddress: to.Ptr("192.168.12.4"),
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.ClusterResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.ClusterResource)
			t.Fatalf("Mock response is not equal to example response for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBManagedCassandraClusterPatch.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCassandraClusters_InvokeCommand(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBManagedCassandraCommand.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBManagedCassandraCommand"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewCassandraClustersClient("subid", cred, &options)
	poller, err := client.BeginInvokeCommand(ctx,
		"cassandra-prod-rg",
		"cassandra-prod",
		armcosmos.CommandPostBody{
			Command: to.Ptr("nodetool status"),
			Host:    to.Ptr("10.0.1.12"),
		},
		&armcosmos.CassandraClustersClientBeginInvokeCommandOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBManagedCassandraCommand.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBManagedCassandraCommand.json: %v", err)
	}
}

func TestCassandraClusters_Deallocate(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBManagedCassandraClusterDeallocate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBManagedCassandraClusterDeallocate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewCassandraClustersClient("subid", cred, &options)
	poller, err := client.BeginDeallocate(ctx,
		"cassandra-prod-rg",
		"cassandra-prod",
		&armcosmos.CassandraClustersClientBeginDeallocateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBManagedCassandraClusterDeallocate.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBManagedCassandraClusterDeallocate.json: %v", err)
	}
}

func TestCassandraClusters_Start(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBManagedCassandraClusterStart.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBManagedCassandraClusterStart"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewCassandraClustersClient("subid", cred, &options)
	poller, err := client.BeginStart(ctx,
		"cassandra-prod-rg",
		"cassandra-prod",
		&armcosmos.CassandraClustersClientBeginStartOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBManagedCassandraClusterStart.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBManagedCassandraClusterStart.json: %v", err)
	}
}

func TestCassandraClusters_Status(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBManagedCassandraStatus.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBManagedCassandraStatus"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewCassandraClustersClient("subid", cred, &options)
	res, err := client.Status(ctx,
		"cassandra-prod-rg",
		"cassandra-prod",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBManagedCassandraStatus.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcosmos.CassandraClusterPublicStatus{
			ConnectionErrors: []*armcosmos.ConnectionError{},
			DataCenters: []*armcosmos.CassandraClusterPublicStatusDataCentersItem{
				{
					Name: to.Ptr("cassandra-westus2-vmss"),
					Nodes: []*armcosmos.ComponentsM9L909SchemasCassandraclusterpublicstatusPropertiesDatacentersItemsPropertiesNodesItems{
						{
							Address:                  to.Ptr("10.0.8.10"),
							CPUUsage:                 to.Ptr[float64](0.9),
							DiskFreeKB:               to.Ptr[int64](1001260056),
							DiskUsedKB:               to.Ptr[int64](749836),
							HostID:                   to.Ptr("8ccc00a7-9e22-4ac2-aa63-e5327aa0dc51"),
							Load:                     to.Ptr("84.61 MiB"),
							MemoryBuffersAndCachedKB: to.Ptr[int64](10817580),
							MemoryFreeKB:             to.Ptr[int64](35731832),
							MemoryTotalKB:            to.Ptr[int64](57610444),
							MemoryUsedKB:             to.Ptr[int64](11061032),
							Rack:                     to.Ptr("rack1"),
							Size:                     to.Ptr[int32](16),
							State:                    to.Ptr(armcosmos.NodeState("")),
							Status:                   to.Ptr(""),
							Timestamp:                to.Ptr("10/05/2021, 14:35:20.028"),
							Tokens: []*string{
								to.Ptr("-7785254003841681178"),
								to.Ptr("-6756518164561476165"),
								to.Ptr("-4269720020504480060"),
								to.Ptr("-2697657908817852783"),
								to.Ptr("-2622387897201218249"),
								to.Ptr("-2177258200443022948"),
								to.Ptr("-129203941752875603"),
								to.Ptr("1738406920822650025"),
								to.Ptr("2598053056312400240"),
								to.Ptr("3227346424117996872"),
								to.Ptr("3644347038875498376"),
								to.Ptr("4823546474906050895"),
								to.Ptr("5293156680707616627"),
								to.Ptr("5485806686603256557"),
								to.Ptr("6250058817756969464"),
								to.Ptr("7991328665766267709")},
						},
						{
							Address:                  to.Ptr("10.0.8.11"),
							CPUUsage:                 to.Ptr[float64](1.2),
							DiskFreeKB:               to.Ptr[int64](1001283028),
							DiskUsedKB:               to.Ptr[int64](726864),
							HostID:                   to.Ptr("14092117-4f77-4ec0-8984-c5b860b88a47"),
							Load:                     to.Ptr("59.67 MiB"),
							MemoryBuffersAndCachedKB: to.Ptr[int64](10691520),
							MemoryFreeKB:             to.Ptr[int64](35863248),
							MemoryTotalKB:            to.Ptr[int64](57610444),
							MemoryUsedKB:             to.Ptr[int64](11055676),
							Rack:                     to.Ptr("rack2"),
							Size:                     to.Ptr[int32](16),
							State:                    to.Ptr(armcosmos.NodeState("")),
							Status:                   to.Ptr(""),
							Timestamp:                to.Ptr("10/05/2021, 14:35:20.028"),
							Tokens: []*string{
								to.Ptr("-8726238055665903210"),
								to.Ptr("-6687985003871487470"),
								to.Ptr("-5269140854976433359"),
								to.Ptr("-3989177686905645288"),
								to.Ptr("-3957362495277148220"),
								to.Ptr("-2539287458896988944"),
								to.Ptr("-2460716365393303466"),
								to.Ptr("-1848370030729221440"),
								to.Ptr("137707733677015122"),
								to.Ptr("579467328507000597"),
								to.Ptr("1698264534774619627"),
								to.Ptr("1904235159942090722"),
								to.Ptr("3312208865519999146"),
								to.Ptr("4035940456270983993"),
								to.Ptr("4412314431151736777"),
								to.Ptr("8232565668795426078")},
						},
						{
							Address:                  to.Ptr("10.0.8.12"),
							CPUUsage:                 to.Ptr[float64](0.4),
							DiskFreeKB:               to.Ptr[int64](1001252352),
							DiskUsedKB:               to.Ptr[int64](757540),
							HostID:                   to.Ptr("e16ada14-39db-462b-9f9e-5b5f6beb8bbd"),
							Load:                     to.Ptr("93.2 MiB"),
							MemoryBuffersAndCachedKB: to.Ptr[int64](10453856),
							MemoryFreeKB:             to.Ptr[int64](36104980),
							MemoryTotalKB:            to.Ptr[int64](57610444),
							MemoryUsedKB:             to.Ptr[int64](11051608),
							Rack:                     to.Ptr("rack3"),
							Size:                     to.Ptr[int32](16),
							State:                    to.Ptr(armcosmos.NodeState("")),
							Status:                   to.Ptr(""),
							Timestamp:                to.Ptr("10/05/2021, 14:35:20.028"),
							Tokens: []*string{
								to.Ptr("-5679481051867296621"),
								to.Ptr("-4574115287969297989"),
								to.Ptr("-3444578133211470522"),
								to.Ptr("-2755931580714972271"),
								to.Ptr("-2304431590844389550"),
								to.Ptr("-1961946736975068713"),
								to.Ptr("-940120277889446704"),
								to.Ptr("554469308917912318"),
								to.Ptr("1030447162050118004"),
								to.Ptr("2745632329542596589"),
								to.Ptr("4564547712926446283"),
								to.Ptr("5185613478135944116"),
								to.Ptr("7280237939830623824"),
								to.Ptr("7504213835759531710"),
								to.Ptr("7631994478195429959"),
								to.Ptr("8139769477321226157")},
						}},
					SeedNodes: []*string{
						to.Ptr("10.0.8.10"),
						to.Ptr("10.0.8.11"),
						to.Ptr("10.0.8.12")},
				}},
			ETag: to.Ptr("A350A2CE7E91B6D5A102A5E5EC222B882D981092"),
			ReaperStatus: &armcosmos.ManagedCassandraReaperStatus{
				Healthy:      to.Ptr(true),
				RepairRunIDs: map[string]*string{},
				RepairSchedules: map[string]*string{
					"00000000-0000-0001-0000-000000000000": to.Ptr("ACTIVE"),
				},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.CassandraClusterPublicStatus) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.CassandraClusterPublicStatus)
			t.Fatalf("Mock response is not equal to example response for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBManagedCassandraStatus.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCassandraDataCenters_List(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBManagedCassandraDataCenterList.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBManagedCassandraDataCenterList"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewCassandraDataCentersClient("00000000-0000-0000-0000-000000000000", cred, &options)
	pager := client.List("cassandra-prod-rg",
		"cassandra-prod",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBManagedCassandraDataCenterList.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armcosmos.ListDataCenters{
			Value: []*armcosmos.DataCenterResource{
				{
					Name: to.Ptr("dc1"),
					Type: to.Ptr("Microsoft.DocumentDB/cassandraClusters/dataCenters"),
					ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/cassandra-prod-rg/providers/Microsoft.DocumentDB/cassandraClusters/cassandra-prod/dataCenters"),
					Properties: &armcosmos.DataCenterResourceProperties{
						Base64EncodedCassandraYamlFragment: to.Ptr("Y29tcGFjdGlvbl90aHJvdWdocHV0X21iX3Blcl9zZWM6IDMyCmNvbXBhY3Rpb25fbGFyZ2VfcGFydGl0aW9uX3dhcm5pbmdfdGhyZXNob2xkX21iOiAxMDA="),
						DataCenterLocation:                 to.Ptr("West US 2"),
						DelegatedSubnetID:                  to.Ptr("/subscriptions/536e130b-d7d6-4ac7-98a5-de20d69588d2/resourceGroups/customer-vnet-rg/providers/Microsoft.Network/virtualNetworks/customer-vnet/subnets/dc1"),
						NodeCount:                          to.Ptr[int32](9),
						ProvisioningState:                  to.Ptr(armcosmos.ManagedCassandraProvisioningStateSucceeded),
						SeedNodes: []*armcosmos.SeedNode{
							{
								IPAddress: to.Ptr("192.168.12.2"),
							},
							{
								IPAddress: to.Ptr("192.168.12.3"),
							},
							{
								IPAddress: to.Ptr("192.168.12.4"),
							}},
					},
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.ListDataCenters) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.ListDataCenters)
			t.Fatalf("Mock response is not equal to example response for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBManagedCassandraDataCenterList.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCassandraDataCenters_Get(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBManagedCassandraDataCenterGet.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBManagedCassandraDataCenterGet"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewCassandraDataCentersClient("00000000-0000-0000-0000-000000000000", cred, &options)
	res, err := client.Get(ctx,
		"cassandra-prod-rg",
		"cassandra-prod",
		"dc1",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBManagedCassandraDataCenterGet.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcosmos.DataCenterResource{
			Name: to.Ptr("dc1"),
			Type: to.Ptr("Microsoft.DocumentDB/cassandraClusters/dataCenters"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/cassandra-prod-rg/providers/Microsoft.DocumentDB/cassandraClusters/cassandra-prod/dataCenters/dc1"),
			Properties: &armcosmos.DataCenterResourceProperties{
				Base64EncodedCassandraYamlFragment: to.Ptr("Y29tcGFjdGlvbl90aHJvdWdocHV0X21iX3Blcl9zZWM6IDMyCmNvbXBhY3Rpb25fbGFyZ2VfcGFydGl0aW9uX3dhcm5pbmdfdGhyZXNob2xkX21iOiAxMDA="),
				DataCenterLocation:                 to.Ptr("West US 2"),
				DelegatedSubnetID:                  to.Ptr("/subscriptions/536e130b-d7d6-4ac7-98a5-de20d69588d2/resourceGroups/customer-vnet-rg/providers/Microsoft.Network/virtualNetworks/customer-vnet/subnets/dc1"),
				NodeCount:                          to.Ptr[int32](9),
				ProvisioningState:                  to.Ptr(armcosmos.ManagedCassandraProvisioningStateSucceeded),
				SeedNodes: []*armcosmos.SeedNode{
					{
						IPAddress: to.Ptr("192.168.12.2"),
					},
					{
						IPAddress: to.Ptr("192.168.12.3"),
					},
					{
						IPAddress: to.Ptr("192.168.12.4"),
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DataCenterResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DataCenterResource)
			t.Fatalf("Mock response is not equal to example response for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBManagedCassandraDataCenterGet.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCassandraDataCenters_Delete(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBManagedCassandraDataCenterDelete.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBManagedCassandraDataCenterDelete"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewCassandraDataCentersClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginDelete(ctx,
		"cassandra-prod-rg",
		"cassandra-prod",
		"dc1",
		&armcosmos.CassandraDataCentersClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBManagedCassandraDataCenterDelete.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBManagedCassandraDataCenterDelete.json: %v", err)
	}
}

func TestCassandraDataCenters_CreateUpdate(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBManagedCassandraDataCenterCreate.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBManagedCassandraDataCenterCreate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewCassandraDataCentersClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginCreateUpdate(ctx,
		"cassandra-prod-rg",
		"cassandra-prod",
		"dc1",
		armcosmos.DataCenterResource{
			Properties: &armcosmos.DataCenterResourceProperties{
				Base64EncodedCassandraYamlFragment: to.Ptr("Y29tcGFjdGlvbl90aHJvdWdocHV0X21iX3Blcl9zZWM6IDMyCmNvbXBhY3Rpb25fbGFyZ2VfcGFydGl0aW9uX3dhcm5pbmdfdGhyZXNob2xkX21iOiAxMDA="),
				DataCenterLocation:                 to.Ptr("West US 2"),
				DelegatedSubnetID:                  to.Ptr("/subscriptions/536e130b-d7d6-4ac7-98a5-de20d69588d2/resourceGroups/customer-vnet-rg/providers/Microsoft.Network/virtualNetworks/customer-vnet/subnets/dc1-subnet"),
				NodeCount:                          to.Ptr[int32](9),
			},
		},
		&armcosmos.CassandraDataCentersClientBeginCreateUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBManagedCassandraDataCenterCreate.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBManagedCassandraDataCenterCreate.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcosmos.DataCenterResource{
			Name: to.Ptr("dc1"),
			Type: to.Ptr("Microsoft.DocumentDB/cassandraClusters/dataCenters"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/cassandra-prod-rg/providers/Microsoft.DocumentDB/cassandraClusters/cassandra-prod/dataCenters/dc1"),
			Properties: &armcosmos.DataCenterResourceProperties{
				DataCenterLocation: to.Ptr("West US 2"),
				DelegatedSubnetID:  to.Ptr("/subscriptions/536e130b-d7d6-4ac7-98a5-de20d69588d2/resourceGroups/customer-vnet-rg/providers/Microsoft.Network/virtualNetworks/customer-vnet/subnets/dc1"),
				NodeCount:          to.Ptr[int32](9),
				ProvisioningState:  to.Ptr(armcosmos.ManagedCassandraProvisioningStateSucceeded),
				SeedNodes: []*armcosmos.SeedNode{
					{
						IPAddress: to.Ptr("192.168.12.2"),
					},
					{
						IPAddress: to.Ptr("192.168.12.3"),
					},
					{
						IPAddress: to.Ptr("192.168.12.4"),
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DataCenterResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DataCenterResource)
			t.Fatalf("Mock response is not equal to example response for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBManagedCassandraDataCenterCreate.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestCassandraDataCenters_Update(t *testing.T) {
	// From example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBManagedCassandraDataCenterPatch.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"CosmosDBManagedCassandraDataCenterUpdate"},
	})
	defer func() {
		if r := recover(); r != nil {
			t.Fatal("stacktrace from panic: \n" + string(debug.Stack()))
		}
	}()
	client := armcosmos.NewCassandraDataCentersClient("00000000-0000-0000-0000-000000000000", cred, &options)
	poller, err := client.BeginUpdate(ctx,
		"cassandra-prod-rg",
		"cassandra-prod",
		"dc1",
		armcosmos.DataCenterResource{
			Properties: &armcosmos.DataCenterResourceProperties{
				Base64EncodedCassandraYamlFragment: to.Ptr("Y29tcGFjdGlvbl90aHJvdWdocHV0X21iX3Blcl9zZWM6IDMyCmNvbXBhY3Rpb25fbGFyZ2VfcGFydGl0aW9uX3dhcm5pbmdfdGhyZXNob2xkX21iOiAxMDA="),
				DataCenterLocation:                 to.Ptr("West US 2"),
				DelegatedSubnetID:                  to.Ptr("/subscriptions/536e130b-d7d6-4ac7-98a5-de20d69588d2/resourceGroups/customer-vnet-rg/providers/Microsoft.Network/virtualNetworks/customer-vnet/subnets/dc1-subnet"),
				NodeCount:                          to.Ptr[int32](9),
			},
		},
		&armcosmos.CassandraDataCentersClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBManagedCassandraDataCenterPatch.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBManagedCassandraDataCenterPatch.json: %v", err)
	}
	// Response check
	{
		exampleRes := armcosmos.DataCenterResource{
			Name: to.Ptr("dc1"),
			Type: to.Ptr("Microsoft.DocumentDB/cassandraClusters/dataCenters"),
			ID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/cassandra-prod-rg/providers/Microsoft.DocumentDB/cassandraClusters/cassandra-prod/dataCenters/dc1"),
			Properties: &armcosmos.DataCenterResourceProperties{
				Base64EncodedCassandraYamlFragment: to.Ptr("Y29tcGFjdGlvbl90aHJvdWdocHV0X21iX3Blcl9zZWM6IDMyCmNvbXBhY3Rpb25fbGFyZ2VfcGFydGl0aW9uX3dhcm5pbmdfdGhyZXNob2xkX21iOiAxMDA="),
				DataCenterLocation:                 to.Ptr("West US 2"),
				DelegatedSubnetID:                  to.Ptr("/subscriptions/536e130b-d7d6-4ac7-98a5-de20d69588d2/resourceGroups/customer-vnet-rg/providers/Microsoft.Network/virtualNetworks/customer-vnet/subnets/dc1"),
				NodeCount:                          to.Ptr[int32](9),
				ProvisioningState:                  to.Ptr(armcosmos.ManagedCassandraProvisioningStateSucceeded),
				SeedNodes: []*armcosmos.SeedNode{
					{
						IPAddress: to.Ptr("192.168.12.2"),
					},
					{
						IPAddress: to.Ptr("192.168.12.3"),
					},
					{
						IPAddress: to.Ptr("192.168.12.4"),
					}},
			},
		}
		if !reflect.DeepEqual(exampleRes, res.DataCenterResource) {
			exampleResJson, _ := json.Marshal(exampleRes)
			mockResJson, _ := json.Marshal(res.DataCenterResource)
			t.Fatalf("Mock response is not equal to example response for example specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBManagedCassandraDataCenterPatch.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
		},
		Endpoint: arm.Endpoint(mockHost),
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
